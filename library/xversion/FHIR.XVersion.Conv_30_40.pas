unit FHIR.XVersion.Conv_30_40;

{
  Copyright (c) 2011+, HL7 and Health Intersections Pty Ltd (http://www.healthintersections.com.au)
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
}

interface


uses
  SysUtils, Classes,
  FHIR.Support.Base, FHIR.Support.Utilities,
  FHIR.Base.Lang,
  FHIR.R3.Types, FHIR.R3.Resources, FHIR.R3.Utilities,
  FHIR.R4.Types, FHIR.R4.Resources, FHIR.R4.Utilities,
  FHIR.XVersion.ConvBase;

Type

  TVersionConvertor_30_40 = class (TVersionConvertorBase)
  private
    class procedure copyElement(src : FHIR.R3.Types.TFhirElement; tgt : FHIR.R4.Types.TFhirElement); overload;
    class procedure copyElement(src : FHIR.R4.Types.TFhirElement; tgt : FHIR.R3.Types.TFhirElement); overload;
    class procedure copyBackboneElement(src : FHIR.R3.Types.TFhirBackboneElement; tgt : FHIR.R4.Types.TFhirBackboneElement); overload;
    class procedure copyBackboneElement(src : FHIR.R4.Types.TFhirBackboneElement; tgt : FHIR.R3.Types.TFhirBackboneElement); overload;
    class function convertNarrativeStatus(src : FHIR.R3.Types.TFhirNarrativeStatusEnum) : FHIR.R4.Types.TFhirNarrativeStatusEnum; overload;
    class function convertNarrativeStatus(src : FHIR.R4.Types.TFhirNarrativeStatusEnum) : FHIR.R3.Types.TFhirNarrativeStatusEnum; overload;
    class function convertIdentifierUse(src : FHIR.R3.Types.TFhirIdentifierUseEnum) : FHIR.R4.Types.TFhirIdentifierUseEnum; overload;
    class function convertIdentifierUse(src : FHIR.R4.Types.TFhirIdentifierUseEnum) : FHIR.R3.Types.TFhirIdentifierUseEnum; overload;
    class function convertQuantityComparator(src : FHIR.R3.Types.TFhirQuantityComparatorEnum) : FHIR.R4.Types.TFhirQuantityComparatorEnum; overload;
    class function convertQuantityComparator(src : FHIR.R4.Types.TFhirQuantityComparatorEnum) : FHIR.R3.Types.TFhirQuantityComparatorEnum; overload;
    class function convertAddressUse(src : FHIR.R3.Types.TFhirAddressUseEnum) : FHIR.R4.Types.TFhirAddressUseEnum; overload;
    class function convertAddressUse(src : FHIR.R4.Types.TFhirAddressUseEnum) : FHIR.R3.Types.TFhirAddressUseEnum; overload;
    class function convertAddressType(src : FHIR.R3.Types.TFhirAddressTypeEnum) : FHIR.R4.Types.TFhirAddressTypeEnum; overload;
    class function convertAddressType(src : FHIR.R4.Types.TFhirAddressTypeEnum) : FHIR.R3.Types.TFhirAddressTypeEnum; overload;
    class function convertContactPointSystem(src : FHIR.R3.Types.TFhirContactPointSystemEnum) : FHIR.R4.Types.TFhirContactPointSystemEnum; overload;
    class function convertContactPointSystem(src : FHIR.R4.Types.TFhirContactPointSystemEnum) : FHIR.R3.Types.TFhirContactPointSystemEnum; overload;
    class function convertContactPointUse(src : FHIR.R3.Types.TFhirContactPointUseEnum) : FHIR.R4.Types.TFhirContactPointUseEnum; overload;
    class function convertContactPointUse(src : FHIR.R4.Types.TFhirContactPointUseEnum) : FHIR.R3.Types.TFhirContactPointUseEnum; overload;
    class function convertContributorType(src : FHIR.R3.Types.TFhirContributorTypeEnum) : FHIR.R4.Types.TFhirContributorTypeEnum; overload;
    class function convertContributorType(src : FHIR.R4.Types.TFhirContributorTypeEnum) : FHIR.R3.Types.TFhirContributorTypeEnum; overload;
    class function convertPropertyRepresentation(src : FHIR.R3.Types.TFhirPropertyRepresentationEnum) : FHIR.R4.Types.TFhirPropertyRepresentationEnum; overload;
    class function convertPropertyRepresentation(src : FHIR.R4.Types.TFhirPropertyRepresentationEnum) : FHIR.R3.Types.TFhirPropertyRepresentationEnum; overload;
    class function convertSlicingRules(src : FHIR.R3.Types.TFhirResourceSlicingRulesEnum) : FHIR.R4.Types.TFhirResourceSlicingRulesEnum; overload;
    class function convertSlicingRules(src : FHIR.R4.Types.TFhirResourceSlicingRulesEnum) : FHIR.R3.Types.TFhirResourceSlicingRulesEnum; overload;
    class function convertDiscriminatorType(src : FHIR.R3.Types.TFhirDiscriminatorTypeEnum) : FHIR.R4.Types.TFhirDiscriminatorTypeEnum; overload;
    class function convertDiscriminatorType(src : FHIR.R4.Types.TFhirDiscriminatorTypeEnum) : FHIR.R3.Types.TFhirDiscriminatorTypeEnum; overload;
    class function convertAggregationMode(src : FHIR.R3.Types.TFhirResourceAggregationModeEnum) : FHIR.R4.Types.TFhirResourceAggregationModeEnum; overload;
    class function convertAggregationMode(src : FHIR.R4.Types.TFhirResourceAggregationModeEnum) : FHIR.R3.Types.TFhirResourceAggregationModeEnum; overload;
    class function convertReferenceVersionRules(src : FHIR.R3.Types.TFhirReferenceVersionRulesEnum) : FHIR.R4.Types.TFhirReferenceVersionRulesEnum; overload;
    class function convertReferenceVersionRules(src : FHIR.R4.Types.TFhirReferenceVersionRulesEnum) : FHIR.R3.Types.TFhirReferenceVersionRulesEnum; overload;
    class function convertConstraintSeverity(src : FHIR.R3.Types.TFhirConstraintSeverityEnum) : FHIR.R4.Types.TFhirConstraintSeverityEnum; overload;
    class function convertConstraintSeverity(src : FHIR.R4.Types.TFhirConstraintSeverityEnum) : FHIR.R3.Types.TFhirConstraintSeverityEnum; overload;
    class function convertBindingStrength(src : FHIR.R3.Types.TFhirBindingStrengthEnum) : FHIR.R4.Types.TFhirBindingStrengthEnum; overload;
    class function convertBindingStrength(src : FHIR.R4.Types.TFhirBindingStrengthEnum) : FHIR.R3.Types.TFhirBindingStrengthEnum; overload;
    class function convertNameUse(src : FHIR.R3.Types.TFhirNameUseEnum) : FHIR.R4.Types.TFhirNameUseEnum; overload;
    class function convertNameUse(src : FHIR.R4.Types.TFhirNameUseEnum) : FHIR.R3.Types.TFhirNameUseEnum; overload;
    class function convertParameterUse(src : FHIR.R3.Types.TFhirOperationParameterUseEnum) : FHIR.R4.Types.TFhirOperationParameterUseEnum; overload;
    class function convertParameterUse(src : FHIR.R4.Types.TFhirOperationParameterUseEnum) : FHIR.R3.Types.TFhirOperationParameterUseEnum; overload;
    class function convertRelatedArtifactType(src : FHIR.R3.Types.TFhirRelatedArtifactTypeEnum) : FHIR.R4.Types.TFhirRelatedArtifactTypeEnum; overload;
    class function convertRelatedArtifactType(src : FHIR.R4.Types.TFhirRelatedArtifactTypeEnum) : FHIR.R3.Types.TFhirRelatedArtifactTypeEnum; overload;
    class function convertUnitsOfTime(src : FHIR.R3.Types.TFhirUnitsOfTimeEnum) : FHIR.R4.Types.TFhirUnitsOfTimeEnum; overload;
    class function convertUnitsOfTime(src : FHIR.R4.Types.TFhirUnitsOfTimeEnum) : FHIR.R3.Types.TFhirUnitsOfTimeEnum; overload;
    class function convertDayOfWeek(src : FHIR.R3.Types.TFhirDaysOfWeekEnum) : FHIR.R4.Types.TFhirDaysOfWeekEnum; overload;
    class function convertDayOfWeek(src : FHIR.R4.Types.TFhirDaysOfWeekEnum) : FHIR.R3.Types.TFhirDaysOfWeekEnum; overload;
    class function convertEventTiming(src : FHIR.R3.Types.TFhirEventTimingEnum) : FHIR.R4.Types.TFhirEventTimingEnum; overload;
    class function convertEventTiming(src : FHIR.R4.Types.TFhirEventTimingEnum) : FHIR.R3.Types.TFhirEventTimingEnum; overload;
    class function convertTriggerType(src : FHIR.R3.Types.TFhirTriggerTypeEnum) : FHIR.R4.Types.TFhirTriggerTypeEnum; overload;
    class function convertTriggerType(src : FHIR.R4.Types.TFhirTriggerTypeEnum) : FHIR.R3.Types.TFhirTriggerTypeEnum; overload;
    class procedure copyDomainResource(src : FHIR.R3.Resources.TFhirDomainResource; tgt : FHIR.R4.Resources.TFhirDomainResource); overload;
    class procedure copyDomainResource(src : FHIR.R4.Resources.TFhirDomainResource; tgt : FHIR.R3.Resources.TFhirDomainResource); overload;
    class procedure copyResource(src : FHIR.R3.Resources.TFhirResource; tgt : FHIR.R4.Resources.TFhirResource); overload;
    class procedure copyResource(src : FHIR.R4.Resources.TFhirResource; tgt : FHIR.R3.Resources.TFhirResource); overload;
    class function convertPublicationStatus(src : FHIR.R3.Types.TFhirPublicationStatusEnum) : FHIR.R4.Types.TFhirPublicationStatusEnum; overload;
    class function convertPublicationStatus(src : FHIR.R4.Types.TFhirPublicationStatusEnum) : FHIR.R3.Types.TFhirPublicationStatusEnum; overload;
    class function convertActivityDefinitionKind(src : FHIR.R3.Types.TFhirResourceTypesEnum) : FHIR.R4.Types.TFhirResourceTypesEnum; overload;
    class function convertActivityDefinitionKind(src : FHIR.R4.Types.TFhirResourceTypesEnum) : FHIR.R3.Types.TFhirResourceTypesEnum; overload;
    class function convertActivityParticipantType(src : FHIR.R3.Types.TFhirActionParticipantTypeEnum) : FHIR.R4.Types.TFhirActionParticipantTypeEnum; overload;
    class function convertActivityParticipantType(src : FHIR.R4.Types.TFhirActionParticipantTypeEnum) : FHIR.R3.Types.TFhirActionParticipantTypeEnum; overload;
    class function convertAllergyIntoleranceClinicalStatus(src : FHIR.R3.Types.TFhirAllergyClinicalStatusEnum) : FHIR.R4.Types.TFhirCodeableConcept; overload;
    class function convertAllergyIntoleranceClinicalStatus(src : FHIR.R4.Types.TFhirCodeableConcept) : FHIR.R3.Types.TFhirAllergyClinicalStatusEnum; overload;
    class function convertAllergyIntoleranceVerificationStatus(src : FHIR.R3.Types.TFhirAllergyVerificationStatusEnum) : FHIR.R4.Types.TFhirCodeableConcept; overload;
    class function convertAllergyIntoleranceVerificationStatus(src : FHIR.R4.Types.TFhirCodeableConcept) : FHIR.R3.Types.TFhirAllergyVerificationStatusEnum; overload;
    class function convertAllergyIntoleranceType(src : FHIR.R3.Types.TFhirAllergyIntoleranceTypeEnum) : FHIR.R4.Types.TFhirAllergyIntoleranceTypeEnum; overload;
    class function convertAllergyIntoleranceType(src : FHIR.R4.Types.TFhirAllergyIntoleranceTypeEnum) : FHIR.R3.Types.TFhirAllergyIntoleranceTypeEnum; overload;
    class function convertAllergyIntoleranceCategory(src : FHIR.R3.Types.TFhirAllergyIntoleranceCategoryEnum) : FHIR.R4.Types.TFhirAllergyIntoleranceCategoryEnum; overload;
    class function convertAllergyIntoleranceCategory(src : FHIR.R4.Types.TFhirAllergyIntoleranceCategoryEnum) : FHIR.R3.Types.TFhirAllergyIntoleranceCategoryEnum; overload;
    class function convertAllergyIntoleranceCriticality(src : FHIR.R3.Types.TFhirAllergyIntoleranceCriticalityEnum) : FHIR.R4.Types.TFhirAllergyIntoleranceCriticalityEnum; overload;
    class function convertAllergyIntoleranceCriticality(src : FHIR.R4.Types.TFhirAllergyIntoleranceCriticalityEnum) : FHIR.R3.Types.TFhirAllergyIntoleranceCriticalityEnum; overload;
    class function convertAllergyIntoleranceSeverity(src : FHIR.R3.Types.TFhirReactionEventSeverityEnum) : FHIR.R4.Types.TFhirReactionEventSeverityEnum; overload;
    class function convertAllergyIntoleranceSeverity(src : FHIR.R4.Types.TFhirReactionEventSeverityEnum) : FHIR.R3.Types.TFhirReactionEventSeverityEnum; overload;
    class function convertAppointmentStatus(src : FHIR.R3.Types.TFhirAppointmentstatusEnum) : FHIR.R4.Types.TFhirAppointmentstatusEnum; overload;
    class function convertAppointmentStatus(src : FHIR.R4.Types.TFhirAppointmentstatusEnum) : FHIR.R3.Types.TFhirAppointmentstatusEnum; overload;
    class function convertParticipantRequired(src : FHIR.R3.Types.TFhirParticipantrequiredEnum) : FHIR.R4.Types.TFhirParticipantrequiredEnum; overload;
    class function convertParticipantRequired(src : FHIR.R4.Types.TFhirParticipantrequiredEnum) : FHIR.R3.Types.TFhirParticipantrequiredEnum; overload;
    class function convertParticipationStatus(src : FHIR.R3.Types.TFhirParticipationstatusEnum) : FHIR.R4.Types.TFhirParticipationstatusEnum; overload;
    class function convertParticipationStatus(src : FHIR.R4.Types.TFhirParticipationstatusEnum) : FHIR.R3.Types.TFhirParticipationstatusEnum; overload;
    class function convertParticipantStatus(src : FHIR.R3.Types.TFhirParticipationstatusEnum) : FHIR.R4.Types.TFhirParticipationstatusEnum; overload;
    class function convertParticipantStatus(src : FHIR.R4.Types.TFhirParticipationstatusEnum) : FHIR.R3.Types.TFhirParticipationstatusEnum; overload;
    class function convertAuditEventAction(src : FHIR.R3.Types.TFhirAuditEventActionEnum) : FHIR.R4.Types.TFhirAuditEventActionEnum; overload;
    class function convertAuditEventAction(src : FHIR.R4.Types.TFhirAuditEventActionEnum) : FHIR.R3.Types.TFhirAuditEventActionEnum; overload;
    class function convertAuditEventOutcome(src : FHIR.R3.Types.TFhirAuditEventOutcomeEnum) : FHIR.R4.Types.TFhirAuditEventOutcomeEnum; overload;
    class function convertAuditEventOutcome(src : FHIR.R4.Types.TFhirAuditEventOutcomeEnum) : FHIR.R3.Types.TFhirAuditEventOutcomeEnum; overload;
    class function convertAuditEventAgentNetworkType(src : FHIR.R3.Types.TFhirNetworkTypeEnum) : FHIR.R4.Types.TFhirNetworkTypeEnum; overload;
    class function convertAuditEventAgentNetworkType(src : FHIR.R4.Types.TFhirNetworkTypeEnum) : FHIR.R3.Types.TFhirNetworkTypeEnum; overload;
    class function convertBundleType(src : FHIR.R3.Types.TFhirBundleTypeEnum) : FHIR.R4.Types.TFhirBundleTypeEnum; overload;
    class function convertBundleType(src : FHIR.R4.Types.TFhirBundleTypeEnum) : FHIR.R3.Types.TFhirBundleTypeEnum; overload;
    class function convertSearchEntryMode(src : FHIR.R3.Types.TFhirSearchEntryModeEnum) : FHIR.R4.Types.TFhirSearchEntryModeEnum; overload;
    class function convertSearchEntryMode(src : FHIR.R4.Types.TFhirSearchEntryModeEnum) : FHIR.R3.Types.TFhirSearchEntryModeEnum; overload;
    class function convertHTTPVerb(src : FHIR.R3.Types.TFhirHttpVerbEnum) : FHIR.R4.Types.TFhirHttpVerbEnum; overload;
    class function convertHTTPVerb(src : FHIR.R4.Types.TFhirHttpVerbEnum) : FHIR.R3.Types.TFhirHttpVerbEnum; overload;
    class function convertCapabilityStatementKind(src : FHIR.R3.Types.TFhirCapabilityStatementKindEnum) : FHIR.R4.Types.TFhirCapabilityStatementKindEnum; overload;
    class function convertCapabilityStatementKind(src : FHIR.R4.Types.TFhirCapabilityStatementKindEnum) : FHIR.R3.Types.TFhirCapabilityStatementKindEnum; overload;
    class function convertRestfulCapabilityMode(src : FHIR.R3.Types.TFhirRestfulCapabilityModeEnum) : FHIR.R4.Types.TFhirRestfulCapabilityModeEnum; overload;
    class function convertRestfulCapabilityMode(src : FHIR.R4.Types.TFhirRestfulCapabilityModeEnum) : FHIR.R3.Types.TFhirRestfulCapabilityModeEnum; overload;
    class function convertReferenceToCanonical(src : FHIR.R3.Types.TFhirReference) : FHIR.R4.Types.TFhirCanonical; overload;
    class function convertCanonicalToReference(src : FHIR.R4.Types.TFhirCanonical) : FHIR.R3.Types.TFhirReference; overload;
    class function convertResourceVersionPolicy(src : FHIR.R3.Types.TFhirVersioningPolicyEnum) : FHIR.R4.Types.TFhirVersioningPolicyEnum; overload;
    class function convertResourceVersionPolicy(src : FHIR.R4.Types.TFhirVersioningPolicyEnum) : FHIR.R3.Types.TFhirVersioningPolicyEnum; overload;
    class function convertConditionalReadStatus(src : FHIR.R3.Types.TFhirConditionalReadStatusEnum) : FHIR.R4.Types.TFhirConditionalReadStatusEnum; overload;
    class function convertConditionalReadStatus(src : FHIR.R4.Types.TFhirConditionalReadStatusEnum) : FHIR.R3.Types.TFhirConditionalReadStatusEnum; overload;
    class function convertConditionalDeleteStatus(src : FHIR.R3.Types.TFhirConditionalDeleteStatusEnum) : FHIR.R4.Types.TFhirConditionalDeleteStatusEnum; overload;
    class function convertConditionalDeleteStatus(src : FHIR.R4.Types.TFhirConditionalDeleteStatusEnum) : FHIR.R3.Types.TFhirConditionalDeleteStatusEnum; overload;
    class function convertReferenceHandlingPolicy(src : FHIR.R3.Types.TFhirReferenceHandlingPolicyEnum) : FHIR.R4.Types.TFhirReferenceHandlingPolicyEnum; overload;
    class function convertReferenceHandlingPolicy(src : FHIR.R4.Types.TFhirReferenceHandlingPolicyEnum) : FHIR.R3.Types.TFhirReferenceHandlingPolicyEnum; overload;
    class function convertTypeRestfulInteraction(src : FHIR.R3.Types.TFhirTypeRestfulInteractionEnum) : FHIR.R4.Types.TFhirTypeRestfulInteractionEnum; overload;
    class function convertTypeRestfulInteraction(src : FHIR.R4.Types.TFhirTypeRestfulInteractionEnum) : FHIR.R3.Types.TFhirTypeRestfulInteractionEnum; overload;
    class function convertSearchParamType(src : FHIR.R3.Types.TFhirSearchParamTypeEnum) : FHIR.R4.Types.TFhirSearchParamTypeEnum; overload;
    class function convertSearchParamType(src : FHIR.R4.Types.TFhirSearchParamTypeEnum) : FHIR.R3.Types.TFhirSearchParamTypeEnum; overload;
    class function convertSystemRestfulInteraction(src : FHIR.R3.Types.TFhirSystemRestfulInteractionEnum) : FHIR.R4.Types.TFhirSystemRestfulInteractionEnum; overload;
    class function convertSystemRestfulInteraction(src : FHIR.R4.Types.TFhirSystemRestfulInteractionEnum) : FHIR.R3.Types.TFhirSystemRestfulInteractionEnum; overload;
    class function convertEventCapabilityMode(src : FHIR.R3.Types.TFhirEventCapabilityModeEnum) : FHIR.R4.Types.TFhirEventCapabilityModeEnum; overload;
    class function convertEventCapabilityMode(src : FHIR.R4.Types.TFhirEventCapabilityModeEnum) : FHIR.R3.Types.TFhirEventCapabilityModeEnum; overload;
    class function convertDocumentMode(src : FHIR.R3.Types.TFhirDocumentModeEnum) : FHIR.R4.Types.TFhirDocumentModeEnum; overload;
    class function convertDocumentMode(src : FHIR.R4.Types.TFhirDocumentModeEnum) : FHIR.R3.Types.TFhirDocumentModeEnum; overload;
    class function convertCareTeamStatus(src : FHIR.R3.Types.TFhirCareTeamStatusEnum) : FHIR.R4.Types.TFhirCareTeamStatusEnum; overload;
    class function convertCareTeamStatus(src : FHIR.R4.Types.TFhirCareTeamStatusEnum) : FHIR.R3.Types.TFhirCareTeamStatusEnum; overload;
    class function convertChargeItemStatus(src : FHIR.R3.Types.TFhirChargeitemStatusEnum) : FHIR.R4.Types.TFhirChargeitemStatusEnum; overload;
    class function convertChargeItemStatus(src : FHIR.R4.Types.TFhirChargeitemStatusEnum) : FHIR.R3.Types.TFhirChargeitemStatusEnum; overload;
    class function convertUse(src : FHIR.R3.Types.TFhirClaimUseEnum) : FHIR.R4.Types.TFhirClaimUseEnum; overload;
    class function convertUse(src : FHIR.R4.Types.TFhirClaimUseEnum) : FHIR.R3.Types.TFhirClaimUseEnum; overload;
    class function convertClinicalImpressionStatus(src : FHIR.R3.Types.TFhirClinicalImpressionStatusEnum) : FHIR.R4.Types.TFhirClinicalImpressionStatusEnum; overload;
    class function convertClinicalImpressionStatus(src : FHIR.R4.Types.TFhirClinicalImpressionStatusEnum) : FHIR.R3.Types.TFhirClinicalImpressionStatusEnum; overload;
    class function convertCodeSystemHierarchyMeaning(src : FHIR.R3.Types.TFhirCodesystemHierarchyMeaningEnum) : FHIR.R4.Types.TFhirCodesystemHierarchyMeaningEnum; overload;
    class function convertCodeSystemHierarchyMeaning(src : FHIR.R4.Types.TFhirCodesystemHierarchyMeaningEnum) : FHIR.R3.Types.TFhirCodesystemHierarchyMeaningEnum; overload;
    class function convertCodeSystemContentMode(src : FHIR.R3.Types.TFhirCodesystemContentModeEnum) : FHIR.R4.Types.TFhirCodesystemContentModeEnum; overload;
    class function convertCodeSystemContentMode(src : FHIR.R4.Types.TFhirCodesystemContentModeEnum) : FHIR.R3.Types.TFhirCodesystemContentModeEnum; overload;
    class function convertFilterOperator(src : FHIR.R3.Types.TFhirFilterOperatorEnum) : FHIR.R4.Types.TFhirFilterOperatorEnum; overload;
    class function convertFilterOperator(src : FHIR.R4.Types.TFhirFilterOperatorEnum) : FHIR.R3.Types.TFhirFilterOperatorEnum; overload;
    class function convertPropertyType(src : FHIR.R3.Types.TFhirConceptPropertyTypeEnum) : FHIR.R4.Types.TFhirConceptPropertyTypeEnum; overload;
    class function convertPropertyType(src : FHIR.R4.Types.TFhirConceptPropertyTypeEnum) : FHIR.R3.Types.TFhirConceptPropertyTypeEnum; overload;
    class function convertCommunicationStatus(src : FHIR.R3.Types.TFhirEventStatusEnum) : FHIR.R4.Types.TFhirEventStatusEnum; overload;
    class function convertCommunicationStatus(src : FHIR.R4.Types.TFhirEventStatusEnum) : FHIR.R3.Types.TFhirEventStatusEnum; overload;
    class function convertCompartmentType(src : FHIR.R3.Types.TFhirCompartmentTypeEnum) : FHIR.R4.Types.TFhirCompartmentTypeEnum; overload;
    class function convertCompartmentType(src : FHIR.R4.Types.TFhirCompartmentTypeEnum) : FHIR.R3.Types.TFhirCompartmentTypeEnum; overload;
    class function convertCompositionStatus(src : FHIR.R3.Types.TFhirCompositionStatusEnum) : FHIR.R4.Types.TFhirCompositionStatusEnum; overload;
    class function convertCompositionStatus(src : FHIR.R4.Types.TFhirCompositionStatusEnum) : FHIR.R3.Types.TFhirCompositionStatusEnum; overload;
    class function convertDocumentConfidentiality(src : FHIR.R3.Types.TFhirV3ConfidentialityClassificationEnum) : FHIR.R4.Types.TFhirV3ConfidentialityClassificationEnum; overload;
    class function convertDocumentConfidentiality(src : FHIR.R4.Types.TFhirV3ConfidentialityClassificationEnum) : FHIR.R3.Types.TFhirV3ConfidentialityClassificationEnum; overload;
    class function convertCompositionAttestationMode(src : FHIR.R3.Types.TFhirCompositionAttestationModeEnum) : FHIR.R4.Types.TFhirCompositionAttestationModeEnum; overload;
    class function convertCompositionAttestationMode(src : FHIR.R4.Types.TFhirCompositionAttestationModeEnum) : FHIR.R3.Types.TFhirCompositionAttestationModeEnum; overload;
    class function convertDocumentRelationshipType(src : FHIR.R3.Types.TFhirDocumentRelationshipTypeEnum) : FHIR.R4.Types.TFhirDocumentRelationshipTypeEnum; overload;
    class function convertDocumentRelationshipType(src : FHIR.R4.Types.TFhirDocumentRelationshipTypeEnum) : FHIR.R3.Types.TFhirDocumentRelationshipTypeEnum; overload;
    class function convertSectionMode(src : FHIR.R3.Types.TFhirListModeEnum) : FHIR.R4.Types.TFhirListModeEnum; overload;
    class function convertSectionMode(src : FHIR.R4.Types.TFhirListModeEnum) : FHIR.R3.Types.TFhirListModeEnum; overload;
    class function convertConceptMapEquivalence(src : FHIR.R3.Types.TFhirConceptMapEquivalenceEnum) : FHIR.R4.Types.TFhirConceptMapEquivalenceEnum; overload;
    class function convertConceptMapEquivalence(src : FHIR.R4.Types.TFhirConceptMapEquivalenceEnum) : FHIR.R3.Types.TFhirConceptMapEquivalenceEnum; overload;
    class function convertConceptMapGroupUnmappedMode(src : FHIR.R3.Types.TFhirConceptmapUnmappedModeEnum) : FHIR.R4.Types.TFhirConceptmapUnmappedModeEnum; overload;
    class function convertConceptMapGroupUnmappedMode(src : FHIR.R4.Types.TFhirConceptmapUnmappedModeEnum) : FHIR.R3.Types.TFhirConceptmapUnmappedModeEnum; overload;
    class function convertConditionClinicalStatus(src : FHIR.R3.Types.TFhirConditionClinicalEnum) : FHIR.R4.Types.TFhirCodeableConcept; overload;
    class function convertConditionClinicalStatus(src : FHIR.R4.Types.TFhirCodeableConcept) : FHIR.R3.Types.TFhirConditionClinicalEnum; overload;
    class function convertConditionVerificationStatus(src : FHIR.R3.Types.TFhirConditionVerStatusEnum) : FHIR.R4.Types.TFhirCodeableConcept; overload;
    class function convertConditionVerificationStatus(src : FHIR.R4.Types.TFhirCodeableConcept) : FHIR.R3.Types.TFhirConditionVerStatusEnum; overload;
    class function convertConsentDataMeaning(src : FHIR.R3.Types.TFhirConsentDataMeaningEnum) : FHIR.R4.Types.TFhirConsentDataMeaningEnum; overload;
    class function convertConsentDataMeaning(src : FHIR.R4.Types.TFhirConsentDataMeaningEnum) : FHIR.R3.Types.TFhirConsentDataMeaningEnum; overload;
    class function convertDetectedIssueStatus(src : FHIR.R3.Types.TFhirObservationStatusEnum) : FHIR.R4.Types.TFhirObservationStatusEnum; overload;
    class function convertDetectedIssueStatus(src : FHIR.R4.Types.TFhirObservationStatusEnum) : FHIR.R3.Types.TFhirObservationStatusEnum; overload;
    class function convertDetectedIssueSeverity(src : FHIR.R3.Types.TFhirDetectedissueSeverityEnum) : FHIR.R4.Types.TFhirDetectedissueSeverityEnum; overload;
    class function convertDetectedIssueSeverity(src : FHIR.R4.Types.TFhirDetectedissueSeverityEnum) : FHIR.R3.Types.TFhirDetectedissueSeverityEnum; overload;
    class function convertFHIRDeviceStatus(src : FHIR.R3.Types.TFhirDeviceStatusEnum) : FHIR.R4.Types.TFhirDeviceStatusEnum; overload;
    class function convertFHIRDeviceStatus(src : FHIR.R4.Types.TFhirDeviceStatusEnum) : FHIR.R3.Types.TFhirDeviceStatusEnum; overload;
    class function convertUDIEntryType(src : FHIR.R3.Types.TFhirUdiEntryTypeEnum) : FHIR.R4.Types.TFhirUdiEntryTypeEnum; overload;
    class function convertUDIEntryType(src : FHIR.R4.Types.TFhirUdiEntryTypeEnum) : FHIR.R3.Types.TFhirUdiEntryTypeEnum; overload;
    class function convertDeviceMetricOperationalStatus(src : FHIR.R3.Types.TFhirMetricOperationalStatusEnum) : FHIR.R4.Types.TFhirMetricOperationalStatusEnum; overload;
    class function convertDeviceMetricOperationalStatus(src : FHIR.R4.Types.TFhirMetricOperationalStatusEnum) : FHIR.R3.Types.TFhirMetricOperationalStatusEnum; overload;
    class function convertDeviceMetricColor(src : FHIR.R3.Types.TFhirMetricColorEnum) : FHIR.R4.Types.TFhirMetricColorEnum; overload;
    class function convertDeviceMetricColor(src : FHIR.R4.Types.TFhirMetricColorEnum) : FHIR.R3.Types.TFhirMetricColorEnum; overload;
    class function convertDeviceMetricCategory(src : FHIR.R3.Types.TFhirMetricCategoryEnum) : FHIR.R4.Types.TFhirMetricCategoryEnum; overload;
    class function convertDeviceMetricCategory(src : FHIR.R4.Types.TFhirMetricCategoryEnum) : FHIR.R3.Types.TFhirMetricCategoryEnum; overload;
    class function convertDeviceMetricCalibrationType(src : FHIR.R3.Types.TFhirMetricCalibrationTypeEnum) : FHIR.R4.Types.TFhirMetricCalibrationTypeEnum; overload;
    class function convertDeviceMetricCalibrationType(src : FHIR.R4.Types.TFhirMetricCalibrationTypeEnum) : FHIR.R3.Types.TFhirMetricCalibrationTypeEnum; overload;
    class function convertDeviceMetricCalibrationState(src : FHIR.R3.Types.TFhirMetricCalibrationStateEnum) : FHIR.R4.Types.TFhirMetricCalibrationStateEnum; overload;
    class function convertDeviceMetricCalibrationState(src : FHIR.R4.Types.TFhirMetricCalibrationStateEnum) : FHIR.R3.Types.TFhirMetricCalibrationStateEnum; overload;
    class function convertDeviceUseStatementStatus(src : FHIR.R3.Types.TFhirDeviceStatementStatusEnum) : FHIR.R4.Types.TFhirDeviceStatementStatusEnum; overload;
    class function convertDeviceUseStatementStatus(src : FHIR.R4.Types.TFhirDeviceStatementStatusEnum) : FHIR.R3.Types.TFhirDeviceStatementStatusEnum; overload;
    class function convertDiagnosticReportStatus(src : FHIR.R3.Types.TFhirDiagnosticReportStatusEnum) : FHIR.R4.Types.TFhirDiagnosticReportStatusEnum; overload;
    class function convertDiagnosticReportStatus(src : FHIR.R4.Types.TFhirDiagnosticReportStatusEnum) : FHIR.R3.Types.TFhirDiagnosticReportStatusEnum; overload;
    class function convertDocumentReferenceStatus(src : FHIR.R3.Types.TFhirDocumentReferenceStatusEnum) : FHIR.R4.Types.TFhirDocumentReferenceStatusEnum; overload;
    class function convertDocumentReferenceStatus(src : FHIR.R4.Types.TFhirDocumentReferenceStatusEnum) : FHIR.R3.Types.TFhirDocumentReferenceStatusEnum; overload;
    class function convertReferredDocumentStatus(src : FHIR.R3.Types.TFhirCompositionStatusEnum) : FHIR.R4.Types.TFhirCompositionStatusEnum; overload;
    class function convertReferredDocumentStatus(src : FHIR.R4.Types.TFhirCompositionStatusEnum) : FHIR.R3.Types.TFhirCompositionStatusEnum; overload;
    class function convertEncounterStatus(src : FHIR.R3.Types.TFhirEncounterStatusEnum) : FHIR.R4.Types.TFhirEncounterStatusEnum; overload;
    class function convertEncounterStatus(src : FHIR.R4.Types.TFhirEncounterStatusEnum) : FHIR.R3.Types.TFhirEncounterStatusEnum; overload;
    class function convertEncounterLocationStatus(src : FHIR.R3.Types.TFhirEncounterLocationStatusEnum) : FHIR.R4.Types.TFhirEncounterLocationStatusEnum; overload;
    class function convertEncounterLocationStatus(src : FHIR.R4.Types.TFhirEncounterLocationStatusEnum) : FHIR.R3.Types.TFhirEncounterLocationStatusEnum; overload;
    class function convertEndpointStatus(src : FHIR.R3.Types.TFhirEndpointStatusEnum) : FHIR.R4.Types.TFhirEndpointStatusEnum; overload;
    class function convertEndpointStatus(src : FHIR.R4.Types.TFhirEndpointStatusEnum) : FHIR.R3.Types.TFhirEndpointStatusEnum; overload;
    class function convertEpisodeOfCareStatus(src : FHIR.R3.Types.TFhirEpisodeOfCareStatusEnum) : FHIR.R4.Types.TFhirEpisodeOfCareStatusEnum; overload;
    class function convertEpisodeOfCareStatus(src : FHIR.R4.Types.TFhirEpisodeOfCareStatusEnum) : FHIR.R3.Types.TFhirEpisodeOfCareStatusEnum; overload;
    class function convertFamilyHistoryStatus(src : FHIR.R3.Types.TFhirHistoryStatusEnum) : FHIR.R4.Types.TFhirHistoryStatusEnum; overload;
    class function convertFamilyHistoryStatus(src : FHIR.R4.Types.TFhirHistoryStatusEnum) : FHIR.R3.Types.TFhirHistoryStatusEnum; overload;
    class function convertAdministrativeGender(src : FHIR.R3.Types.TFhirAdministrativeGenderEnum) : FHIR.R4.Types.TFhirAdministrativeGenderEnum; overload;
    class function convertAdministrativeGender(src : FHIR.R4.Types.TFhirAdministrativeGenderEnum) : FHIR.R3.Types.TFhirAdministrativeGenderEnum; overload;
    class function convertFlagStatus(src : FHIR.R3.Types.TFhirFlagStatusEnum) : FHIR.R4.Types.TFhirFlagStatusEnum; overload;
    class function convertFlagStatus(src : FHIR.R4.Types.TFhirFlagStatusEnum) : FHIR.R3.Types.TFhirFlagStatusEnum; overload;
    class function convertGoalStatus(src : FHIR.R3.Types.TFhirGoalStatusEnum) : FHIR.R4.Types.TFhirGoalStatusEnum; overload;
    class function convertGoalStatus(src : FHIR.R4.Types.TFhirGoalStatusEnum) : FHIR.R3.Types.TFhirGoalStatusEnum; overload;
    class function convertCompartmentCode(src : FHIR.R3.Types.TFhirCompartmentTypeEnum) : FHIR.R4.Types.TFhirCompartmentTypeEnum; overload;
    class function convertCompartmentCode(src : FHIR.R4.Types.TFhirCompartmentTypeEnum) : FHIR.R3.Types.TFhirCompartmentTypeEnum; overload;
    class function convertGraphCompartmentRule(src : FHIR.R3.Types.TFhirGraphCompartmentRuleEnum) : FHIR.R4.Types.TFhirGraphCompartmentRuleEnum; overload;
    class function convertGraphCompartmentRule(src : FHIR.R4.Types.TFhirGraphCompartmentRuleEnum) : FHIR.R3.Types.TFhirGraphCompartmentRuleEnum; overload;
    class function convertGroupType(src : FHIR.R3.Types.TFhirGroupTypeEnum) : FHIR.R4.Types.TFhirGroupTypeEnum; overload;
    class function convertGroupType(src : FHIR.R4.Types.TFhirGroupTypeEnum) : FHIR.R3.Types.TFhirGroupTypeEnum; overload;
    class function convertDaysOfWeek(src : FHIR.R3.Types.TFhirDaysOfWeekEnum) : FHIR.R4.Types.TFhirDaysOfWeekEnum; overload;
    class function convertDaysOfWeek(src : FHIR.R4.Types.TFhirDaysOfWeekEnum) : FHIR.R3.Types.TFhirDaysOfWeekEnum; overload;
    class function convertImmunizationStatus(src : FHIR.R3.Types.TFhirImmunizationStatusEnum) : FHIR.R4.Types.TFhirImmunizationStatusEnum; overload;
    class function convertImmunizationStatus(src : FHIR.R4.Types.TFhirImmunizationStatusEnum) : FHIR.R3.Types.TFhirImmunizationStatusEnum; overload;
    class function findPackage(definition : FHIR.R3.Resources.TFhirImplementationGuidePackageList; id : String) : FHIR.R3.Resources.TFhirImplementationGuidePackage; overload;
    class function convertPageGeneration(kind : FHIR.R3.Types.TFhirGuidePageKindEnum) : FHIR.R4.Types.TFhirGuidePageGenerationEnum; overload;
    class function convertPageGeneration(generation : FHIR.R4.Types.TFhirGuidePageGenerationEnum) : FHIR.R3.Types.TFhirGuidePageKindEnum; overload;
    class function convertLinkageType(src : FHIR.R3.Types.TFhirLinkageTypeEnum) : FHIR.R4.Types.TFhirLinkageTypeEnum; overload;
    class function convertLinkageType(src : FHIR.R4.Types.TFhirLinkageTypeEnum) : FHIR.R3.Types.TFhirLinkageTypeEnum; overload;
    class function convertListStatus(src : FHIR.R3.Types.TFhirListStatusEnum) : FHIR.R4.Types.TFhirListStatusEnum; overload;
    class function convertListStatus(src : FHIR.R4.Types.TFhirListStatusEnum) : FHIR.R3.Types.TFhirListStatusEnum; overload;
    class function convertListMode(src : FHIR.R3.Types.TFhirListModeEnum) : FHIR.R4.Types.TFhirListModeEnum; overload;
    class function convertListMode(src : FHIR.R4.Types.TFhirListModeEnum) : FHIR.R3.Types.TFhirListModeEnum; overload;
    class function convertLocationStatus(src : FHIR.R3.Types.TFhirLocationStatusEnum) : FHIR.R4.Types.TFhirLocationStatusEnum; overload;
    class function convertLocationStatus(src : FHIR.R4.Types.TFhirLocationStatusEnum) : FHIR.R3.Types.TFhirLocationStatusEnum; overload;
    class function convertLocationMode(src : FHIR.R3.Types.TFhirLocationModeEnum) : FHIR.R4.Types.TFhirLocationModeEnum; overload;
    class function convertLocationMode(src : FHIR.R4.Types.TFhirLocationModeEnum) : FHIR.R3.Types.TFhirLocationModeEnum; overload;
    class function convertMedicationStatus(src : FHIR.R3.Types.TFhirMedicationStatusEnum) : FHIR.R4.Types.TFhirMedicationStatusEnum; overload;
    class function convertMedicationStatus(src : FHIR.R4.Types.TFhirMedicationStatusEnum) : FHIR.R3.Types.TFhirMedicationStatusEnum; overload;
    class function convertMedicationAdministrationStatus(src : FHIR.R3.Types.TFhirMedicationAdminStatusEnum) : String; overload;
    class function convertMedicationAdministrationStatus(src : String) : FHIR.R3.Types.TFhirMedicationAdminStatusEnum; overload;
    class function convertMedicationDispenseStatus(src : FHIR.R3.Types.TFhirMedicationDispenseStatusEnum) : String; overload;
    class function convertMedicationDispenseStatus(src : String) : FHIR.R3.Types.TFhirMedicationDispenseStatusEnum; overload;
    class function convertMedicationRequestStatus(src : FHIR.R3.Types.TFhirMedicationRequestStatusEnum) : FHIR.R4.Types.TFhirMedicationRequestStatusEnum; overload;
    class function convertMedicationRequestStatus(src : FHIR.R4.Types.TFhirMedicationRequestStatusEnum) : FHIR.R3.Types.TFhirMedicationRequestStatusEnum; overload;
    class function convertMedicationRequestIntent(src : FHIR.R3.Types.TFhirMedicationRequestIntentEnum) : FHIR.R4.Types.TFhirMedicationRequestIntentEnum; overload;
    class function convertMedicationRequestIntent(src : FHIR.R4.Types.TFhirMedicationRequestIntentEnum) : FHIR.R3.Types.TFhirMedicationRequestIntentEnum; overload;
    class function convertMedicationRequestPriority(src : FHIR.R3.Types.TFhirMedicationRequestPriorityEnum) : FHIR.R4.Types.TFhirRequestPriorityEnum; overload;
    class function convertMedicationRequestPriority(src : FHIR.R4.Types.TFhirRequestPriorityEnum) : FHIR.R3.Types.TFhirMedicationRequestPriorityEnum; overload;
    class function convertMedicationStatementStatus(src : FHIR.R3.Types.TFhirMedicationStatementStatusEnum) : FHIR.R4.Types.TFhirMedicationStatementStatusEnum; overload;
    class function convertMedicationStatementStatus(src : FHIR.R4.Types.TFhirMedicationStatementStatusEnum) : FHIR.R3.Types.TFhirMedicationStatementStatusEnum; overload;
    class function convertMessageSignificanceCategory(src : FHIR.R3.Types.TFhirMessageSignificanceCategoryEnum) : FHIR.R4.Types.TFhirMessageSignificanceCategoryEnum; overload;
    class function convertMessageSignificanceCategory(src : FHIR.R4.Types.TFhirMessageSignificanceCategoryEnum) : FHIR.R3.Types.TFhirMessageSignificanceCategoryEnum; overload;
    class function convertProvenanceEntityRole(src : FHIR.R4.Types.TFhirProvenanceEntityRoleEnum) : FHIR.R3.Types.TFhirProvenanceEntityRoleEnum; overload;
    class function convertProvenanceEntityRole(src : FHIR.R3.Types.TFhirProvenanceEntityRoleEnum) : FHIR.R4.Types.TFhirProvenanceEntityRoleEnum; overload;
    class function convertResponseType(src : FHIR.R3.Types.TFhirResponseCodeEnum) : FHIR.R4.Types.TFhirResponseCodeEnum; overload;
    class function convertResponseType(src : FHIR.R4.Types.TFhirResponseCodeEnum) : FHIR.R3.Types.TFhirResponseCodeEnum; overload;
    class function convertNamingSystemType(src : FHIR.R3.Types.TFhirNamingsystemTypeEnum) : FHIR.R4.Types.TFhirNamingsystemTypeEnum; overload;
    class function convertNamingSystemType(src : FHIR.R4.Types.TFhirNamingsystemTypeEnum) : FHIR.R3.Types.TFhirNamingsystemTypeEnum; overload;
    class function convertNamingSystemIdentifierType(src : FHIR.R3.Types.TFhirNamingsystemIdentifierTypeEnum) : FHIR.R4.Types.TFhirNamingsystemIdentifierTypeEnum; overload;
    class function convertNamingSystemIdentifierType(src : FHIR.R4.Types.TFhirNamingsystemIdentifierTypeEnum) : FHIR.R3.Types.TFhirNamingsystemIdentifierTypeEnum; overload;
    class function convertObservationStatus(src : FHIR.R3.Types.TFhirObservationStatusEnum) : FHIR.R4.Types.TFhirObservationStatusEnum; overload;
    class function convertObservationStatus(src : FHIR.R4.Types.TFhirObservationStatusEnum) : FHIR.R3.Types.TFhirObservationStatusEnum; overload;
    class function convertOperationKind(src : FHIR.R3.Types.TFhirOperationKindEnum) : FHIR.R4.Types.TFhirOperationKindEnum; overload;
    class function convertOperationKind(src : FHIR.R4.Types.TFhirOperationKindEnum) : FHIR.R3.Types.TFhirOperationKindEnum; overload;
    class function convertOperationParameterUse(src : FHIR.R3.Types.TFhirOperationParameterUseEnum) : FHIR.R4.Types.TFhirOperationParameterUseEnum; overload;
    class function convertOperationParameterUse(src : FHIR.R4.Types.TFhirOperationParameterUseEnum) : FHIR.R3.Types.TFhirOperationParameterUseEnum; overload;
    class function convertIssueSeverity(src : FHIR.R3.Types.TFhirIssueSeverityEnum) : FHIR.R4.Types.TFhirIssueSeverityEnum; overload;
    class function convertIssueSeverity(src : FHIR.R4.Types.TFhirIssueSeverityEnum) : FHIR.R3.Types.TFhirIssueSeverityEnum; overload;
    class function convertIssueType(src : FHIR.R3.Types.TFhirIssueTypeEnum) : FHIR.R4.Types.TFhirIssueTypeEnum; overload;
    class function convertIssueType(src : FHIR.R4.Types.TFhirIssueTypeEnum) : FHIR.R3.Types.TFhirIssueTypeEnum; overload;
    class function convertLinkType(src : FHIR.R3.Types.TFhirLinkTypeEnum) : FHIR.R4.Types.TFhirLinkTypeEnum; overload;
    class function convertLinkType(src : FHIR.R4.Types.TFhirLinkTypeEnum) : FHIR.R3.Types.TFhirLinkTypeEnum; overload;
    class function convertPaymentNoticeStatus(src : FHIR.R3.Types.TFhirFmStatusEnum) : FHIR.R4.Types.TFhirFmStatusEnum; overload;
    class function convertPaymentNoticeStatus(src : FHIR.R4.Types.TFhirFmStatusEnum) : FHIR.R3.Types.TFhirFmStatusEnum; overload;
    class function convertIdentityAssuranceLevel(src : FHIR.R3.Types.TFhirIdentityAssuranceLevelEnum) : FHIR.R4.Types.TFhirIdentityAssuranceLevelEnum; overload;
    class function convertIdentityAssuranceLevel(src : FHIR.R4.Types.TFhirIdentityAssuranceLevelEnum) : FHIR.R3.Types.TFhirIdentityAssuranceLevelEnum; overload;
    class function convertQuestionnaireItemType(src : FHIR.R3.Types.TFhirItemTypeEnum) : FHIR.R4.Types.TFhirItemTypeEnum; overload;
    class function convertQuestionnaireItemType(src : FHIR.R4.Types.TFhirItemTypeEnum) : FHIR.R3.Types.TFhirItemTypeEnum; overload;
    class function convertQuestionnaireResponseStatus(src : FHIR.R3.Types.TFhirQuestionnaireAnswersStatusEnum) : FHIR.R4.Types.TFhirQuestionnaireAnswersStatusEnum; overload;
    class function convertQuestionnaireResponseStatus(src : FHIR.R4.Types.TFhirQuestionnaireAnswersStatusEnum) : FHIR.R3.Types.TFhirQuestionnaireAnswersStatusEnum; overload;
    class function convertRiskAssessmentStatus(src : FHIR.R3.Types.TFhirObservationStatusEnum) : FHIR.R4.Types.TFhirObservationStatusEnum; overload;
    class function convertRiskAssessmentStatus(src : FHIR.R4.Types.TFhirObservationStatusEnum) : FHIR.R3.Types.TFhirObservationStatusEnum; overload;
    class function convertXPathUsageType(src : FHIR.R3.Types.TFhirSearchXpathUsageEnum) : FHIR.R4.Types.TFhirSearchXpathUsageEnum; overload;
    class function convertXPathUsageType(src : FHIR.R4.Types.TFhirSearchXpathUsageEnum) : FHIR.R3.Types.TFhirSearchXpathUsageEnum; overload;
    class function convertSearchComparator(src : FHIR.R3.Types.TFhirSearchComparatorEnum) : FHIR.R4.Types.TFhirSearchComparatorEnum; overload;
    class function convertSearchComparator(src : FHIR.R4.Types.TFhirSearchComparatorEnum) : FHIR.R3.Types.TFhirSearchComparatorEnum; overload;
    class function convertSearchModifierCode(src : FHIR.R3.Types.TFhirSearchModifierCodeEnum) : FHIR.R4.Types.TFhirSearchModifierCodeEnum; overload;
    class function convertSearchModifierCode(src : FHIR.R4.Types.TFhirSearchModifierCodeEnum) : FHIR.R3.Types.TFhirSearchModifierCodeEnum; overload;
    class function convertQualityType(src : FHIR.R3.Types.TFhirQualityTypeEnum) : FHIR.R4.Types.TFhirQualityTypeEnum; overload;
    class function convertQualityType(src : FHIR.R4.Types.TFhirQualityTypeEnum) : FHIR.R3.Types.TFhirQualityTypeEnum; overload;
    class function convertRepositoryType(src : FHIR.R3.Types.TFhirRepositoryTypeEnum) : FHIR.R4.Types.TFhirRepositoryTypeEnum; overload;
    class function convertRepositoryType(src : FHIR.R4.Types.TFhirRepositoryTypeEnum) : FHIR.R3.Types.TFhirRepositoryTypeEnum; overload;
    class function convertSlotStatus(src : FHIR.R3.Types.TFhirSlotstatusEnum) : FHIR.R4.Types.TFhirSlotstatusEnum; overload;
    class function convertSlotStatus(src : FHIR.R4.Types.TFhirSlotstatusEnum) : FHIR.R3.Types.TFhirSlotstatusEnum; overload;
    class function convertSpecimenStatus(src : FHIR.R3.Types.TFhirSpecimenStatusEnum) : FHIR.R4.Types.TFhirSpecimenStatusEnum; overload;
    class function convertSpecimenStatus(src : FHIR.R4.Types.TFhirSpecimenStatusEnum) : FHIR.R3.Types.TFhirSpecimenStatusEnum; overload;
    class function convertStructureDefinitionKind(src : FHIR.R3.Types.TFhirStructureDefinitionKindEnum) : FHIR.R4.Types.TFhirStructureDefinitionKindEnum; overload;
    class function convertStructureDefinitionKind(src : FHIR.R4.Types.TFhirStructureDefinitionKindEnum) : FHIR.R3.Types.TFhirStructureDefinitionKindEnum; overload;
    class function convertExtensionContext(src : FHIR.R3.Types.TFhirExtensionContextEnum) : FHIR.R4.Types.TFhirExtensionContextTypeEnum; overload;
    class function convertExtensionContext(src : FHIR.R4.Types.TFhirExtensionContextTypeEnum) : FHIR.R3.Types.TFhirExtensionContextEnum; overload;
    class function convertTypeDerivationRule(src : FHIR.R3.Types.TFhirTypeDerivationRuleEnum) : FHIR.R4.Types.TFhirTypeDerivationRuleEnum; overload;
    class function convertTypeDerivationRule(src : FHIR.R4.Types.TFhirTypeDerivationRuleEnum) : FHIR.R3.Types.TFhirTypeDerivationRuleEnum; overload;
    class function convertStructureMapModelMode(src : FHIR.R3.Types.TFhirMapModelModeEnum) : FHIR.R4.Types.TFhirMapModelModeEnum; overload;
    class function convertStructureMapModelMode(src : FHIR.R4.Types.TFhirMapModelModeEnum) : FHIR.R3.Types.TFhirMapModelModeEnum; overload;
    class function convertStructureMapGroupTypeMode(src : FHIR.R3.Types.TFhirMapGroupTypeModeEnum) : FHIR.R4.Types.TFhirMapGroupTypeModeEnum; overload;
    class function convertStructureMapGroupTypeMode(src : FHIR.R4.Types.TFhirMapGroupTypeModeEnum) : FHIR.R3.Types.TFhirMapGroupTypeModeEnum; overload;
    class function convertStructureMapInputMode(src : FHIR.R3.Types.TFhirMapInputModeEnum) : FHIR.R4.Types.TFhirMapInputModeEnum; overload;
    class function convertStructureMapInputMode(src : FHIR.R4.Types.TFhirMapInputModeEnum) : FHIR.R3.Types.TFhirMapInputModeEnum; overload;
    class function convertStructureMapSourceListMode(src : FHIR.R3.Types.TFhirMapSourceListModeEnum) : FHIR.R4.Types.TFhirMapSourceListModeEnum; overload;
    class function convertStructureMapSourceListMode(src : FHIR.R4.Types.TFhirMapSourceListModeEnum) : FHIR.R3.Types.TFhirMapSourceListModeEnum; overload;
    class function convertStructureMapContextType(src : FHIR.R3.Types.TFhirMapContextTypeEnum) : FHIR.R4.Types.TFhirMapContextTypeEnum; overload;
    class function convertStructureMapContextType(src : FHIR.R4.Types.TFhirMapContextTypeEnum) : FHIR.R3.Types.TFhirMapContextTypeEnum; overload;
    class function convertStructureMapTargetListMode(src : FHIR.R3.Types.TFhirMapTargetListModeEnum) : FHIR.R4.Types.TFhirMapTargetListModeEnum; overload;
    class function convertStructureMapTargetListMode(src : FHIR.R4.Types.TFhirMapTargetListModeEnum) : FHIR.R3.Types.TFhirMapTargetListModeEnum; overload;
    class function convertStructureMapTransform(src : FHIR.R3.Types.TFhirMapTransformEnum) : FHIR.R4.Types.TFhirMapTransformEnum; overload;
    class function convertStructureMapTransform(src : FHIR.R4.Types.TFhirMapTransformEnum) : FHIR.R3.Types.TFhirMapTransformEnum; overload;
    class function convertSubscriptionStatus(src : FHIR.R3.Types.TFhirSubscriptionStatusEnum) : FHIR.R4.Types.TFhirSubscriptionStatusEnum; overload;
    class function convertSubscriptionStatus(src : FHIR.R4.Types.TFhirSubscriptionStatusEnum) : FHIR.R3.Types.TFhirSubscriptionStatusEnum; overload;
    class function convertSubscriptionChannelType(src : FHIR.R3.Types.TFhirSubscriptionChannelTypeEnum) : FHIR.R4.Types.TFhirSubscriptionChannelTypeEnum; overload;
    class function convertSubscriptionChannelType(src : FHIR.R4.Types.TFhirSubscriptionChannelTypeEnum) : FHIR.R3.Types.TFhirSubscriptionChannelTypeEnum; overload;
    class function convertFHIRSubstanceStatus(src : FHIR.R3.Types.TFhirSubstanceStatusEnum) : FHIR.R4.Types.TFhirSubstanceStatusEnum; overload;
    class function convertFHIRSubstanceStatus(src : FHIR.R4.Types.TFhirSubstanceStatusEnum) : FHIR.R3.Types.TFhirSubstanceStatusEnum; overload;
    class function convertSupplyDeliveryStatus(src : FHIR.R3.Types.TFhirSupplydeliveryStatusEnum) : FHIR.R4.Types.TFhirSupplydeliveryStatusEnum; overload;
    class function convertSupplyDeliveryStatus(src : FHIR.R4.Types.TFhirSupplydeliveryStatusEnum) : FHIR.R3.Types.TFhirSupplydeliveryStatusEnum; overload;
    class function convertContentType(src : FHIR.R3.Types.TFhirContentTypeEnum) : String; overload;
    class function convertActionGroupingBehavior(src : FHIR.R3.Types.TFhirActionGroupingBehaviorEnum) : FHIR.R4.Types.TFhirActionGroupingBehaviorEnum; overload;
    class function convertActionGroupingBehavior(src : FHIR.R4.Types.TFhirActionGroupingBehaviorEnum) : FHIR.R3.Types.TFhirActionGroupingBehaviorEnum; overload;
    class function convertActionSelectionBehavior(src : FHIR.R3.Types.TFhirActionSelectionBehaviorEnum) : FHIR.R4.Types.TFhirActionSelectionBehaviorEnum; overload;
    class function convertActionSelectionBehavior(src : FHIR.R4.Types.TFhirActionSelectionBehaviorEnum) : FHIR.R3.Types.TFhirActionSelectionBehaviorEnum; overload;
    class function convertActionRequiredBehavior(src : FHIR.R3.Types.TFhirActionRequiredBehaviorEnum) : FHIR.R4.Types.TFhirActionRequiredBehaviorEnum; overload;
    class function convertActionRequiredBehavior(src : FHIR.R4.Types.TFhirActionRequiredBehaviorEnum) : FHIR.R3.Types.TFhirActionRequiredBehaviorEnum; overload;
    class function convertActionPrecheckBehavior(src : FHIR.R3.Types.TFhirActionPrecheckBehaviorEnum) : FHIR.R4.Types.TFhirActionPrecheckBehaviorEnum; overload;
    class function convertActionPrecheckBehavior(src : FHIR.R4.Types.TFhirActionPrecheckBehaviorEnum) : FHIR.R3.Types.TFhirActionPrecheckBehaviorEnum; overload;
    class function convertActionCardinalityBehavior(src : FHIR.R3.Types.TFhirActionCardinalityBehaviorEnum) : FHIR.R4.Types.TFhirActionCardinalityBehaviorEnum; overload;
    class function convertActionCardinalityBehavior(src : FHIR.R4.Types.TFhirActionCardinalityBehaviorEnum) : FHIR.R3.Types.TFhirActionCardinalityBehaviorEnum; overload;
    class function convertActionConditionKind(src : FHIR.R3.Types.TFhirActionConditionKindEnum) : FHIR.R4.Types.TFhirActionConditionKindEnum; overload;
    class function convertActionConditionKind(src : FHIR.R4.Types.TFhirActionConditionKindEnum) : FHIR.R3.Types.TFhirActionConditionKindEnum; overload;
    class function convertActionRelationshipType(src : FHIR.R3.Types.TFhirActionRelationshipTypeEnum) : FHIR.R4.Types.TFhirActionRelationshipTypeEnum; overload;
    class function convertActionRelationshipType(src : FHIR.R4.Types.TFhirActionRelationshipTypeEnum) : FHIR.R3.Types.TFhirActionRelationshipTypeEnum; overload;
    class function convertActionParticipantType(src : FHIR.R3.Types.TFhirActionParticipantTypeEnum) : FHIR.R4.Types.TFhirActionParticipantTypeEnum; overload;
    class function convertActionParticipantType(src : FHIR.R4.Types.TFhirActionParticipantTypeEnum) : FHIR.R3.Types.TFhirActionParticipantTypeEnum; overload;
  public
    class function convertBase64Binary(src : FHIR.R3.Types.TFhirBase64Binary) : FHIR.R4.Types.TFhirBase64Binary; overload;
    class function convertBase64Binary(src : FHIR.R4.Types.TFhirBase64Binary) : FHIR.R3.Types.TFhirBase64Binary; overload;
    class function convertBoolean(src : FHIR.R3.Types.TFhirBoolean) : FHIR.R4.Types.TFhirBoolean; overload;
    class function convertBoolean(src : FHIR.R4.Types.TFhirBoolean) : FHIR.R3.Types.TFhirBoolean; overload;
    class function convertCode(src : FHIR.R3.Types.TFhirCode) : FHIR.R4.Types.TFhirCode; overload;
    class function convertCode(src : FHIR.R4.Types.TFhirCode) : FHIR.R3.Types.TFhirCode; overload;
    class function convertCode(src : FHIR.R3.Types.TFhirEnum) : FHIR.R4.Types.TFhirEnum; overload;
    class function convertCode(src : FHIR.R4.Types.TFhirEnum) : FHIR.R3.Types.TFhirEnum; overload;
    class function convertDate(src : FHIR.R3.Types.TFhirDate) : FHIR.R4.Types.TFhirDate; overload;
    class function convertDate(src : FHIR.R4.Types.TFhirDate) : FHIR.R3.Types.TFhirDate; overload;
    class function convertDateTime(src : FHIR.R3.Types.TFhirDateTime) : FHIR.R4.Types.TFhirDateTime; overload;
    class function convertDateTime(src : FHIR.R4.Types.TFhirDateTime) : FHIR.R3.Types.TFhirDateTime; overload;
    class function convertDecimal(src : FHIR.R3.Types.TFhirDecimal) : FHIR.R4.Types.TFhirDecimal; overload;
    class function convertDecimal(src : FHIR.R4.Types.TFhirDecimal) : FHIR.R3.Types.TFhirDecimal; overload;
    class function convertId(src : FHIR.R3.Types.TFhirId) : FHIR.R4.Types.TFhirId; overload;
    class function convertId(src : FHIR.R4.Types.TFhirId) : FHIR.R3.Types.TFhirId; overload;
    class function convertInstant(src : FHIR.R3.Types.TFhirInstant) : FHIR.R4.Types.TFhirInstant; overload;
    class function convertInstant(src : FHIR.R4.Types.TFhirInstant) : FHIR.R3.Types.TFhirInstant; overload;
    class function convertInteger(src : FHIR.R3.Types.TFhirInteger) : FHIR.R4.Types.TFhirInteger; overload;
    class function convertInteger(src : FHIR.R4.Types.TFhirInteger) : FHIR.R3.Types.TFhirInteger; overload;
    class function convertMarkdown(src : FHIR.R3.Types.TFhirMarkdown) : FHIR.R4.Types.TFhirMarkdown; overload;
    class function convertMarkdown(src : FHIR.R4.Types.TFhirMarkdown) : FHIR.R3.Types.TFhirMarkdown; overload;
    class function convertOid(src : FHIR.R3.Types.TFhirOid) : FHIR.R4.Types.TFhirOid; overload;
    class function convertOid(src : FHIR.R4.Types.TFhirOid) : FHIR.R3.Types.TFhirOid; overload;
    class function convertPositiveInt(src : FHIR.R3.Types.TFhirPositiveInt) : FHIR.R4.Types.TFhirPositiveInt; overload;
    class function convertPositiveInt(src : FHIR.R4.Types.TFhirPositiveInt) : FHIR.R3.Types.TFhirPositiveInt; overload;
    class function convertString(src : FHIR.R3.Types.TFhirString) : FHIR.R4.Types.TFhirString; overload;
    class function convertString(src : FHIR.R4.Types.TFhirString) : FHIR.R3.Types.TFhirString; overload;
    class function convertTime(src : FHIR.R3.Types.TFhirTime) : FHIR.R4.Types.TFhirTime; overload;
    class function convertTime(src : FHIR.R4.Types.TFhirTime) : FHIR.R3.Types.TFhirTime; overload;
    class function convertUnsignedInt(src : FHIR.R3.Types.TFhirUnsignedInt) : FHIR.R4.Types.TFhirUnsignedInt; overload;
    class function convertUnsignedInt(src : FHIR.R4.Types.TFhirUnsignedInt) : FHIR.R3.Types.TFhirUnsignedInt; overload;
    class function convertUri(src : FHIR.R3.Types.TFhirUri) : FHIR.R4.Types.TFhirUri; overload;
    class function convertUriToUrl(src : FHIR.R3.Types.TFhirUri) : FHIR.R4.Types.TFhirUrl; overload;
    class function convertUri(src : FHIR.R4.Types.TFhirUri) : FHIR.R3.Types.TFhirUri; overload;
    class function convertUuid(src : FHIR.R3.Types.TFhirUuid) : FHIR.R4.Types.TFhirUuid; overload;
    class function convertUuid(src : FHIR.R4.Types.TFhirUuid) : FHIR.R3.Types.TFhirUuid; overload;
    class function convertExtension(src : FHIR.R3.Types.TFhirExtension) : FHIR.R4.Types.TFhirExtension; overload;
    class function convertExtension(src : FHIR.R4.Types.TFhirExtension) : FHIR.R3.Types.TFhirExtension; overload;
    class function convertNarrative(src : FHIR.R3.Types.TFhirNarrative) : FHIR.R4.Types.TFhirNarrative; overload;
    class function convertNarrative(src : FHIR.R4.Types.TFhirNarrative) : FHIR.R3.Types.TFhirNarrative; overload;
    class function convertAge(src : FHIR.R3.Types.TFhirAge) : FHIR.R4.Types.TFhirAge; overload;
    class function convertAge(src : FHIR.R4.Types.TFhirAge) : FHIR.R3.Types.TFhirAge; overload;
    class function convertAnnotation(src : FHIR.R3.Types.TFhirAnnotation) : FHIR.R4.Types.TFhirAnnotation; overload;
    class function convertAnnotation(src : FHIR.R4.Types.TFhirAnnotation) : FHIR.R3.Types.TFhirAnnotation; overload;
    class function convertAttachment(src : FHIR.R3.Types.TFhirAttachment) : FHIR.R4.Types.TFhirAttachment; overload;
    class function convertAttachment(src : FHIR.R4.Types.TFhirAttachment) : FHIR.R3.Types.TFhirAttachment; overload;
    class function convertCodeableConcept(src : FHIR.R3.Types.TFhirCodeableConcept) : FHIR.R4.Types.TFhirCodeableConcept; overload;
    class function convertCodeableConcept(src : FHIR.R4.Types.TFhirCodeableConcept) : FHIR.R3.Types.TFhirCodeableConcept; overload;
    class function convertCodeableConceptToCoding(src : FHIR.R4.Types.TFhirCodeableConcept) : FHIR.R3.Types.TFhirCoding; overload;
    class function convertCodeableConceptToCoding(src : FHIR.R3.Types.TFhirCodeableConcept) : FHIR.R4.Types.TFhirCoding; overload;
    class function convertCoding(src : FHIR.R3.Types.TFhirCoding) : FHIR.R4.Types.TFhirCoding; overload;
    class function convertCoding(src : FHIR.R4.Types.TFhirCoding) : FHIR.R3.Types.TFhirCoding; overload;
    class function convertCoding(src : FHIR.R3.Types.TFhirCode) : FHIR.R4.Types.TFhirCoding; overload;
    class function convertCoding(src : FHIR.R3.Types.TFhirCodeableConcept) : FHIR.R4.Types.TFhirCoding; overload;
    class function convertCoding(src : FHIR.R4.Types.TFhirCodeableConcept) : FHIR.R3.Types.TFhirCoding; overload;
    class function convertCodingToCodeableConcept(src : FHIR.R3.Types.TFhirCoding) : FHIR.R4.Types.TFhirCodeableConcept; overload;
    class function convertCodingToCodeableConcept(src : FHIR.R4.Types.TFhirCoding) : FHIR.R3.Types.TFhirCodeableConcept; overload;
    class function convertCount(src : FHIR.R3.Types.TFhirCount) : FHIR.R4.Types.TFhirCount; overload;
    class function convertCount(src : FHIR.R4.Types.TFhirCount) : FHIR.R3.Types.TFhirCount; overload;
    class function convertDistance(src : FHIR.R3.Types.TFhirDistance) : FHIR.R4.Types.TFhirDistance; overload;
    class function convertDistance(src : FHIR.R4.Types.TFhirDistance) : FHIR.R3.Types.TFhirDistance; overload;
    class function convertDuration(src : FHIR.R3.Types.TFhirDuration) : FHIR.R4.Types.TFhirDuration; overload;
    class function convertDuration(src : FHIR.R4.Types.TFhirDuration) : FHIR.R3.Types.TFhirDuration; overload;
    class function convertIdentifier(src : FHIR.R3.Types.TFhirIdentifier) : FHIR.R4.Types.TFhirIdentifier; overload;
    class function convertIdentifier(src : FHIR.R4.Types.TFhirIdentifier) : FHIR.R3.Types.TFhirIdentifier; overload;
    class function convertMoney(src : FHIR.R3.Types.TFhirMoney) : FHIR.R4.Types.TFhirMoney; overload;
    class function convertMoney(src : FHIR.R4.Types.TFhirMoney) : FHIR.R3.Types.TFhirMoney; overload;
    class function convertPeriod(src : FHIR.R3.Types.TFhirPeriod) : FHIR.R4.Types.TFhirPeriod; overload;
    class function convertPeriod(src : FHIR.R4.Types.TFhirPeriod) : FHIR.R3.Types.TFhirPeriod; overload;
    class procedure copyQuantity(src : FHIR.R3.Types.TFhirQuantity; tgt : FHIR.R4.Types.TFhirQuantity); overload;
    class procedure copyQuantity(src : FHIR.R4.Types.TFhirQuantity; tgt : FHIR.R3.Types.TFhirQuantity); overload;
    class function convertQuantity(src : FHIR.R3.Types.TFhirQuantity) : FHIR.R4.Types.TFhirQuantity; overload;
    class function convertQuantity(src : FHIR.R4.Types.TFhirQuantity) : FHIR.R3.Types.TFhirQuantity; overload;
    class function convertRange(src : FHIR.R3.Types.TFhirRange) : FHIR.R4.Types.TFhirRange; overload;
    class function convertRange(src : FHIR.R4.Types.TFhirRange) : FHIR.R3.Types.TFhirRange; overload;
    class function convertRatio(src : FHIR.R3.Types.TFhirRatio) : FHIR.R4.Types.TFhirRatio; overload;
    class function convertRatio(src : FHIR.R4.Types.TFhirRatio) : FHIR.R3.Types.TFhirRatio; overload;
    class function convertReference(src : FHIR.R3.Types.TFhirReference) : FHIR.R4.Types.TFhirReference; overload;
    class function convertReference(src : FHIR.R4.Types.TFhirReference) : FHIR.R3.Types.TFhirReference; overload;
    class function convertSampledData(src : FHIR.R3.Types.TFhirSampledData) : FHIR.R4.Types.TFhirSampledData; overload;
    class function convertSampledData(src : FHIR.R4.Types.TFhirSampledData) : FHIR.R3.Types.TFhirSampledData; overload;
    class function convertSignature(src : FHIR.R3.Types.TFhirSignature) : FHIR.R4.Types.TFhirSignature; overload;
    class function convertSignature(src : FHIR.R4.Types.TFhirSignature) : FHIR.R3.Types.TFhirSignature; overload;
    class function convertAddress(src : FHIR.R3.Types.TFhirAddress) : FHIR.R4.Types.TFhirAddress; overload;
    class function convertAddress(src : FHIR.R4.Types.TFhirAddress) : FHIR.R3.Types.TFhirAddress; overload;
    class function convertContactDetail(src : FHIR.R3.Types.TFhirContactDetail) : FHIR.R4.Types.TFhirContactDetail; overload;
    class function convertContactDetail(src : FHIR.R4.Types.TFhirContactDetail) : FHIR.R3.Types.TFhirContactDetail; overload;
    class function convertContactPoint(src : FHIR.R3.Types.TFhirContactPoint) : FHIR.R4.Types.TFhirContactPoint; overload;
    class function convertContactPoint(src : FHIR.R4.Types.TFhirContactPoint) : FHIR.R3.Types.TFhirContactPoint; overload;
    class function convertContributor(src : FHIR.R3.Types.TFhirContributor) : FHIR.R4.Types.TFhirContributor; overload;
    class function convertContributor(src : FHIR.R4.Types.TFhirContributor) : FHIR.R3.Types.TFhirContributor; overload;
    class function convertDosage(src : FHIR.R3.Types.TFhirDosage) : FHIR.R4.Types.TFhirDosage; overload;
    class function convertDosage(src : FHIR.R4.Types.TFhirDosage) : FHIR.R3.Types.TFhirDosage; overload;
    class function convertElementDefinition(src : FHIR.R3.Types.TFhirElementDefinition) : FHIR.R4.Types.TFhirElementDefinition; overload;
    class function convertElementDefinition(src : FHIR.R4.Types.TFhirElementDefinition) : FHIR.R3.Types.TFhirElementDefinition; overload;
    class function convertElementDefinitionSlicingComponent(src : FHIR.R3.Types.TFhirElementDefinitionSlicing) : FHIR.R4.Types.TFhirElementDefinitionSlicing; overload;
    class function convertElementDefinitionSlicingComponent(src : FHIR.R4.Types.TFhirElementDefinitionSlicing) : FHIR.R3.Types.TFhirElementDefinitionSlicing; overload;
    class function convertElementDefinitionSlicingDiscriminatorComponent(src : FHIR.R3.Types.TFhirElementDefinitionSlicingDiscriminator) : FHIR.R4.Types.TFhirElementDefinitionSlicingDiscriminator; overload;
    class function convertElementDefinitionSlicingDiscriminatorComponent(src : FHIR.R4.Types.TFhirElementDefinitionSlicingDiscriminator) : FHIR.R3.Types.TFhirElementDefinitionSlicingDiscriminator; overload;
    class function convertElementDefinitionBaseComponent(src : FHIR.R3.Types.TFhirElementDefinitionBase) : FHIR.R4.Types.TFhirElementDefinitionBase; overload;
    class function convertElementDefinitionBaseComponent(src : FHIR.R4.Types.TFhirElementDefinitionBase) : FHIR.R3.Types.TFhirElementDefinitionBase; overload;
    class procedure convertTypeRefComponent(src : FHIR.R3.Types.TFhirElementDefinitionType; list : FHIR.R4.Types.TFhirElementDefinitionTypeList); overload;
    class procedure convertTypeRefComponent(src : FHIR.R4.Types.TFhirElementDefinitionType; list : FHIR.R3.Types.TFhirElementDefinitionTypeList); overload;
    class function convertElementDefinitionExampleComponent(src : FHIR.R3.Types.TFhirElementDefinitionExample) : FHIR.R4.Types.TFhirElementDefinitionExample; overload;
    class function convertElementDefinitionExampleComponent(src : FHIR.R4.Types.TFhirElementDefinitionExample) : FHIR.R3.Types.TFhirElementDefinitionExample; overload;
    class function convertElementDefinitionConstraintComponent(src : FHIR.R3.Types.TFhirElementDefinitionConstraint) : FHIR.R4.Types.TFhirElementDefinitionConstraint; overload;
    class function convertElementDefinitionConstraintComponent(src : FHIR.R4.Types.TFhirElementDefinitionConstraint) : FHIR.R3.Types.TFhirElementDefinitionConstraint; overload;
    class function convertElementDefinitionBindingComponent(src : FHIR.R3.Types.TFhirElementDefinitionBinding) : FHIR.R4.Types.TFhirElementDefinitionBinding; overload;
    class function convertElementDefinitionBindingComponent(src : FHIR.R4.Types.TFhirElementDefinitionBinding) : FHIR.R3.Types.TFhirElementDefinitionBinding; overload;
    class function convertElementDefinitionMappingComponent(src : FHIR.R3.Types.TFhirElementDefinitionMapping) : FHIR.R4.Types.TFhirElementDefinitionMapping; overload;
    class function convertElementDefinitionMappingComponent(src : FHIR.R4.Types.TFhirElementDefinitionMapping) : FHIR.R3.Types.TFhirElementDefinitionMapping; overload;
    class function convertHumanName(src : FHIR.R3.Types.TFhirHumanName) : FHIR.R4.Types.TFhirHumanName; overload;
    class function convertHumanName(src : FHIR.R4.Types.TFhirHumanName) : FHIR.R3.Types.TFhirHumanName; overload;
    class function convertMeta(src : FHIR.R3.Types.TFhirMeta) : FHIR.R4.Types.TFhirMeta; overload;
    class function convertMeta(src : FHIR.R4.Types.TFhirMeta) : FHIR.R3.Types.TFhirMeta; overload;
    class function convertParameterDefinition(src : FHIR.R3.Types.TFhirParameterDefinition) : FHIR.R4.Types.TFhirParameterDefinition; overload;
    class function convertParameterDefinition(src : FHIR.R4.Types.TFhirParameterDefinition) : FHIR.R3.Types.TFhirParameterDefinition; overload;
    class function convertRelatedArtifact(src : FHIR.R3.Types.TFhirRelatedArtifact) : FHIR.R4.Types.TFhirRelatedArtifact; overload;
    class function convertRelatedArtifact(src : FHIR.R4.Types.TFhirRelatedArtifact) : FHIR.R3.Types.TFhirRelatedArtifact; overload;
    class function convertTiming(src : FHIR.R3.Types.TFhirTiming) : FHIR.R4.Types.TFhirTiming; overload;
    class function convertTiming(src : FHIR.R4.Types.TFhirTiming) : FHIR.R3.Types.TFhirTiming; overload;
    class function convertTimingRepeatComponent(src : FHIR.R3.Types.TFhirTimingRepeat) : FHIR.R4.Types.TFhirTimingRepeat; overload;
    class function convertTimingRepeatComponent(src : FHIR.R4.Types.TFhirTimingRepeat) : FHIR.R3.Types.TFhirTimingRepeat; overload;
    class function convertUsageContext(src : FHIR.R3.Types.TFhirUsageContext) : FHIR.R4.Types.TFhirUsageContext; overload;
    class function convertUsageContext(src : FHIR.R4.Types.TFhirUsageContext) : FHIR.R3.Types.TFhirUsageContext; overload;
    class function convertSimpleQuantity(src : FHIR.R3.Types.TFhirQuantity) : FHIR.R4.Types.TFhirQuantity; overload;
    class function convertSimpleQuantity(src : FHIR.R4.Types.TFhirQuantity) : FHIR.R3.Types.TFhirQuantity; overload;
    class function convertTriggerDefinition(src : FHIR.R3.Types.TFhirTriggerDefinition) : FHIR.R4.Types.TFhirTriggerDefinition; overload;
    class function convertTriggerDefinition(src : FHIR.R4.Types.TFhirTriggerDefinition) : FHIR.R3.Types.TFhirTriggerDefinition; overload;
    class function convertDataRequirement(src : FHIR.R3.Types.TFhirDataRequirement) : FHIR.R4.Types.TFhirDataRequirement; overload;
    class function convertDataRequirement(src : FHIR.R4.Types.TFhirDataRequirement) : FHIR.R3.Types.TFhirDataRequirement; overload;
    class function convertDataRequirementCodeFilterComponent(src : FHIR.R3.Types.TFhirDataRequirementCodeFilter) : FHIR.R4.Types.TFhirDataRequirementCodeFilter; overload;
    class function convertDataRequirementCodeFilterComponent(src : FHIR.R4.Types.TFhirDataRequirementCodeFilter) : FHIR.R3.Types.TFhirDataRequirementCodeFilter; overload;
    class function convertDataRequirementDateFilterComponent(src : FHIR.R3.Types.TFhirDataRequirementDateFilter) : FHIR.R4.Types.TFhirDataRequirementDateFilter; overload;
    class function convertDataRequirementDateFilterComponent(src : FHIR.R4.Types.TFhirDataRequirementDateFilter) : FHIR.R3.Types.TFhirDataRequirementDateFilter; overload;
    class function convertType(src : FHIR.R3.Types.TFhirType) : FHIR.R4.Types.TFhirType; overload;
    class function convertType(src : FHIR.R4.Types.TFhirType) : FHIR.R3.Types.TFhirType; overload;
    class function convertParameters(src : FHIR.R3.Resources.TFhirParameters) : FHIR.R4.Resources.TFhirParameters; overload;
    class function convertParameters(src : FHIR.R4.Resources.TFhirParameters) : FHIR.R3.Resources.TFhirParameters; overload;
    class function convertParametersParameterComponent(src : FHIR.R3.Resources.TFhirParametersParameter) : FHIR.R4.Resources.TFhirParametersParameter; overload;
    class function convertParametersParameterComponent(src : FHIR.R4.Resources.TFhirParametersParameter) : FHIR.R3.Resources.TFhirParametersParameter; overload;
    class function convertActivityDefinition(src : FHIR.R3.Resources.TFhirActivityDefinition) : FHIR.R4.Resources.TFhirActivityDefinition; overload;
    class function convertActivityDefinition(src : FHIR.R4.Resources.TFhirActivityDefinition) : FHIR.R3.Resources.TFhirActivityDefinition; overload;
    class function convertActivityDefinitionParticipantComponent(src : FHIR.R3.Resources.TFhirActivityDefinitionParticipant) : FHIR.R4.Resources.TFhirActivityDefinitionParticipant; overload;
    class function convertActivityDefinitionParticipantComponent(src : FHIR.R4.Resources.TFhirActivityDefinitionParticipant) : FHIR.R3.Resources.TFhirActivityDefinitionParticipant; overload;
    class function convertActivityDefinitionDynamicValueComponent(src : FHIR.R3.Resources.TFhirActivityDefinitionDynamicValue) : FHIR.R4.Resources.TFhirActivityDefinitionDynamicValue; overload;
    class function convertActivityDefinitionDynamicValueComponent(src : FHIR.R4.Resources.TFhirActivityDefinitionDynamicValue) : FHIR.R3.Resources.TFhirActivityDefinitionDynamicValue; overload;
    class function convertAllergyIntolerance(src : FHIR.R3.Resources.TFhirAllergyIntolerance) : FHIR.R4.Resources.TFhirAllergyIntolerance; overload;
    class function convertAllergyIntolerance(src : FHIR.R4.Resources.TFhirAllergyIntolerance) : FHIR.R3.Resources.TFhirAllergyIntolerance; overload;
    class function convertAllergyIntoleranceReactionComponent(src : FHIR.R3.Resources.TFhirAllergyIntoleranceReaction) : FHIR.R4.Resources.TFhirAllergyIntoleranceReaction; overload;
    class function convertAllergyIntoleranceReactionComponent(src : FHIR.R4.Resources.TFhirAllergyIntoleranceReaction) : FHIR.R3.Resources.TFhirAllergyIntoleranceReaction; overload;
    class function convertAppointment(src : FHIR.R3.Resources.TFhirAppointment) : FHIR.R4.Resources.TFhirAppointment; overload;
    class function convertAppointment(src : FHIR.R4.Resources.TFhirAppointment) : FHIR.R3.Resources.TFhirAppointment; overload;
    class function convertAppointmentParticipantComponent(src : FHIR.R3.Resources.TFhirAppointmentParticipant) : FHIR.R4.Resources.TFhirAppointmentParticipant; overload;
    class function convertAppointmentParticipantComponent(src : FHIR.R4.Resources.TFhirAppointmentParticipant) : FHIR.R3.Resources.TFhirAppointmentParticipant; overload;
    class function convertAppointmentResponse(src : FHIR.R3.Resources.TFhirAppointmentResponse) : FHIR.R4.Resources.TFhirAppointmentResponse; overload;
    class function convertAppointmentResponse(src : FHIR.R4.Resources.TFhirAppointmentResponse) : FHIR.R3.Resources.TFhirAppointmentResponse; overload;
    class function convertAuditEvent(src : FHIR.R3.Resources.TFhirAuditEvent) : FHIR.R4.Resources.TFhirAuditEvent; overload;
    class function convertAuditEvent(src : FHIR.R4.Resources.TFhirAuditEvent) : FHIR.R3.Resources.TFhirAuditEvent; overload;
    class function convertAuditEventAgentComponent(src : FHIR.R3.Resources.TFhirAuditEventAgent) : FHIR.R4.Resources.TFhirAuditEventAgent; overload;
    class function convertAuditEventAgentComponent(src : FHIR.R4.Resources.TFhirAuditEventAgent) : FHIR.R3.Resources.TFhirAuditEventAgent; overload;
    class function convertAuditEventAgentNetworkComponent(src : FHIR.R3.Resources.TFhirAuditEventAgentNetwork) : FHIR.R4.Resources.TFhirAuditEventAgentNetwork; overload;
    class function convertAuditEventAgentNetworkComponent(src : FHIR.R4.Resources.TFhirAuditEventAgentNetwork) : FHIR.R3.Resources.TFhirAuditEventAgentNetwork; overload;
    class function convertAuditEventSourceComponent(src : FHIR.R3.Resources.TFhirAuditEventSource) : FHIR.R4.Resources.TFhirAuditEventSource; overload;
    class function convertAuditEventSourceComponent(src : FHIR.R4.Resources.TFhirAuditEventSource) : FHIR.R3.Resources.TFhirAuditEventSource; overload;
    class function convertAuditEventEntityComponent(src : FHIR.R3.Resources.TFhirAuditEventEntity) : FHIR.R4.Resources.TFhirAuditEventEntity; overload;
    class function convertAuditEventEntityComponent(src : FHIR.R4.Resources.TFhirAuditEventEntity) : FHIR.R3.Resources.TFhirAuditEventEntity; overload;
    class function convertAuditEventEntityDetailComponent(src : FHIR.R3.Resources.TFhirAuditEventEntityDetail) : FHIR.R4.Resources.TFhirAuditEventEntityDetail; overload;
    class function convertAuditEventEntityDetailComponent(src : FHIR.R4.Resources.TFhirAuditEventEntityDetail) : FHIR.R3.Resources.TFhirAuditEventEntityDetail; overload;
    class function convertBasic(src : FHIR.R3.Resources.TFhirBasic) : FHIR.R4.Resources.TFhirBasic; overload;
    class function convertBasic(src : FHIR.R4.Resources.TFhirBasic) : FHIR.R3.Resources.TFhirBasic; overload;
    class function convertBinary(src : FHIR.R3.Resources.TFhirBinary) : FHIR.R4.Resources.TFhirBinary; overload;
    class function convertBinary(src : FHIR.R4.Resources.TFhirBinary) : FHIR.R3.Resources.TFhirBinary; overload;
    class function convertBodySite(src : FHIR.R3.Resources.TFhirBodySite) : FHIR.R4.Resources.TFhirBodyStructure; overload;
    class function convertBodySite(src : FHIR.R4.Resources.TFhirBodyStructure) : FHIR.R3.Resources.TFhirBodySite; overload;
    class function convertBundle(src : FHIR.R3.Resources.TFhirBundle) : FHIR.R4.Resources.TFhirBundle; overload;
    class function convertBundle(src : FHIR.R4.Resources.TFhirBundle) : FHIR.R3.Resources.TFhirBundle; overload;
    class function convertBundleLinkComponent(src : FHIR.R3.Resources.TFhirBundleLink) : FHIR.R4.Resources.TFhirBundleLink; overload;
    class function convertBundleLinkComponent(src : FHIR.R4.Resources.TFhirBundleLink) : FHIR.R3.Resources.TFhirBundleLink; overload;
    class function convertBundleEntryComponent(src : FHIR.R3.Resources.TFhirBundleEntry) : FHIR.R4.Resources.TFhirBundleEntry; overload;
    class function convertBundleEntryComponent(src : FHIR.R4.Resources.TFhirBundleEntry) : FHIR.R3.Resources.TFhirBundleEntry; overload;
    class function convertBundleEntrySearchComponent(src : FHIR.R3.Resources.TFhirBundleEntrySearch) : FHIR.R4.Resources.TFhirBundleEntrySearch; overload;
    class function convertBundleEntrySearchComponent(src : FHIR.R4.Resources.TFhirBundleEntrySearch) : FHIR.R3.Resources.TFhirBundleEntrySearch; overload;
    class function convertBundleEntryRequestComponent(src : FHIR.R3.Resources.TFhirBundleEntryRequest) : FHIR.R4.Resources.TFhirBundleEntryRequest; overload;
    class function convertBundleEntryRequestComponent(src : FHIR.R4.Resources.TFhirBundleEntryRequest) : FHIR.R3.Resources.TFhirBundleEntryRequest; overload;
    class function convertBundleEntryResponseComponent(src : FHIR.R3.Resources.TFhirBundleEntryResponse) : FHIR.R4.Resources.TFhirBundleEntryResponse; overload;
    class function convertBundleEntryResponseComponent(src : FHIR.R4.Resources.TFhirBundleEntryResponse) : FHIR.R3.Resources.TFhirBundleEntryResponse; overload;
    class function convertCapabilityStatement(src : FHIR.R3.Resources.TFhirCapabilityStatement) : FHIR.R4.Resources.TFhirCapabilityStatement; overload;
    class function convertCapabilityStatement(src : FHIR.R4.Resources.TFhirCapabilityStatement) : FHIR.R3.Resources.TFhirCapabilityStatement; overload;
    class function convertCapabilityStatementSoftwareComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementSoftware) : FHIR.R4.Resources.TFhirCapabilityStatementSoftware; overload;
    class function convertCapabilityStatementSoftwareComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementSoftware) : FHIR.R3.Resources.TFhirCapabilityStatementSoftware; overload;
    class function convertCapabilityStatementImplementationComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementImplementation) : FHIR.R4.Resources.TFhirCapabilityStatementImplementation; overload;
    class function convertCapabilityStatementImplementationComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementImplementation) : FHIR.R3.Resources.TFhirCapabilityStatementImplementation; overload;
    class function convertCapabilityStatementRestComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementRest) : FHIR.R4.Resources.TFhirCapabilityStatementRest; overload;
    class function convertCapabilityStatementRestComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementRest) : FHIR.R3.Resources.TFhirCapabilityStatementRest; overload;
    class function convertCapabilityStatementRestSecurityComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementRestSecurity) : FHIR.R4.Resources.TFhirCapabilityStatementRestSecurity; overload;
    class function convertCapabilityStatementRestSecurityComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementRestSecurity) : FHIR.R3.Resources.TFhirCapabilityStatementRestSecurity; overload;
    class function convertCapabilityStatementRestResourceComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementRestResource) : FHIR.R4.Resources.TFhirCapabilityStatementRestResource; overload;
    class function convertCapabilityStatementRestResourceComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementRestResource) : FHIR.R3.Resources.TFhirCapabilityStatementRestResource; overload;
    class function convertResourceInteractionComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementRestResourceInteraction) : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceInteraction; overload;
    class function convertResourceInteractionComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceInteraction) : FHIR.R3.Resources.TFhirCapabilityStatementRestResourceInteraction; overload;
    class function convertCapabilityStatementRestResourceSearchParamComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementRestResourceSearchParam) : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceSearchParam; overload;
    class function convertCapabilityStatementRestResourceSearchParamComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceSearchParam) : FHIR.R3.Resources.TFhirCapabilityStatementRestResourceSearchParam; overload;
    class function convertSystemInteractionComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementRestInteraction) : FHIR.R4.Resources.TFhirCapabilityStatementRestInteraction; overload;
    class function convertSystemInteractionComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementRestInteraction) : FHIR.R3.Resources.TFhirCapabilityStatementRestInteraction; overload;
    class function convertCapabilityStatementRestOperationComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementRestOperation) : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceOperation; overload;
    class function convertCapabilityStatementRestOperationComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceOperation) : FHIR.R3.Resources.TFhirCapabilityStatementRestOperation; overload;
    class function convertCapabilityStatementMessagingComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementMessaging) : FHIR.R4.Resources.TFhirCapabilityStatementMessaging; overload;
    class function convertCapabilityStatementMessagingComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementMessaging) : FHIR.R3.Resources.TFhirCapabilityStatementMessaging; overload;
    class function convertCapabilityStatementMessagingEndpointComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementMessagingEndpoint) : FHIR.R4.Resources.TFhirCapabilityStatementMessagingEndpoint; overload;
    class function convertCapabilityStatementMessagingEndpointComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementMessagingEndpoint) : FHIR.R3.Resources.TFhirCapabilityStatementMessagingEndpoint; overload;
    class function convertCapabilityStatementMessagingSupportedMessageComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementMessagingSupportedMessage) : FHIR.R4.Resources.TFhirCapabilityStatementMessagingSupportedMessage; overload;
    class function convertCapabilityStatementMessagingSupportedMessageComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementMessagingSupportedMessage) : FHIR.R3.Resources.TFhirCapabilityStatementMessagingSupportedMessage; overload;
    class function convertCapabilityStatementDocumentComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementDocument) : FHIR.R4.Resources.TFhirCapabilityStatementDocument; overload;
    class function convertCapabilityStatementDocumentComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementDocument) : FHIR.R3.Resources.TFhirCapabilityStatementDocument; overload;
    class function convertCareTeam(src : FHIR.R3.Resources.TFhirCareTeam) : FHIR.R4.Resources.TFhirCareTeam; overload;
    class function convertCareTeam(src : FHIR.R4.Resources.TFhirCareTeam) : FHIR.R3.Resources.TFhirCareTeam; overload;
    class function convertCareTeamParticipantComponent(src : FHIR.R3.Resources.TFhirCareTeamParticipant) : FHIR.R4.Resources.TFhirCareTeamParticipant; overload;
    class function convertCareTeamParticipantComponent(src : FHIR.R4.Resources.TFhirCareTeamParticipant) : FHIR.R3.Resources.TFhirCareTeamParticipant; overload;
    class function convertClinicalImpression(src : FHIR.R3.Resources.TFhirClinicalImpression) : FHIR.R4.Resources.TFhirClinicalImpression; overload;
    class function convertClinicalImpression(src : FHIR.R4.Resources.TFhirClinicalImpression) : FHIR.R3.Resources.TFhirClinicalImpression; overload;
    class function convertClinicalImpressionInvestigationComponent(src : FHIR.R3.Resources.TFhirClinicalImpressionInvestigation) : FHIR.R4.Resources.TFhirClinicalImpressionInvestigation; overload;
    class function convertClinicalImpressionInvestigationComponent(src : FHIR.R4.Resources.TFhirClinicalImpressionInvestigation) : FHIR.R3.Resources.TFhirClinicalImpressionInvestigation; overload;
    class function convertClinicalImpressionFindingComponent(src : FHIR.R3.Resources.TFhirClinicalImpressionFinding) : FHIR.R4.Resources.TFhirClinicalImpressionFinding; overload;
    class function convertClinicalImpressionFindingComponent(src : FHIR.R4.Resources.TFhirClinicalImpressionFinding) : FHIR.R3.Resources.TFhirClinicalImpressionFinding; overload;
    class function convertCodeSystem(src : FHIR.R3.Resources.TFhirCodeSystem) : FHIR.R4.Resources.TFhirCodeSystem; overload;
    class function convertCodeSystem(src : FHIR.R4.Resources.TFhirCodeSystem) : FHIR.R3.Resources.TFhirCodeSystem; overload;
    class function convertCodeSystemFilterComponent(src : FHIR.R3.Resources.TFhirCodeSystemFilter) : FHIR.R4.Resources.TFhirCodeSystemFilter; overload;
    class function convertCodeSystemFilterComponent(src : FHIR.R4.Resources.TFhirCodeSystemFilter) : FHIR.R3.Resources.TFhirCodeSystemFilter; overload;
    class function convertPropertyComponent(src : FHIR.R3.Resources.TFhirCodeSystemProperty) : FHIR.R4.Resources.TFhirCodeSystemProperty; overload;
    class function convertPropertyComponent(src : FHIR.R4.Resources.TFhirCodeSystemProperty) : FHIR.R3.Resources.TFhirCodeSystemProperty; overload;
    class function convertConceptDefinitionComponent(src : FHIR.R3.Resources.TFhirCodeSystemConcept) : FHIR.R4.Resources.TFhirCodeSystemConcept; overload;
    class function convertConceptDefinitionComponent(src : FHIR.R4.Resources.TFhirCodeSystemConcept) : FHIR.R3.Resources.TFhirCodeSystemConcept; overload;
    class function convertConceptDefinitionDesignationComponent(src : FHIR.R3.Resources.TFhirCodeSystemConceptDesignation) : FHIR.R4.Resources.TFhirCodeSystemConceptDesignation; overload;
    class function convertConceptDefinitionDesignationComponent(src : FHIR.R4.Resources.TFhirCodeSystemConceptDesignation) : FHIR.R3.Resources.TFhirCodeSystemConceptDesignation; overload;
    class function convertConceptPropertyComponent(src : FHIR.R3.Resources.TFhirCodeSystemConceptProperty) : FHIR.R4.Resources.TFhirCodeSystemConceptProperty; overload;
    class function convertConceptPropertyComponent(src : FHIR.R4.Resources.TFhirCodeSystemConceptProperty) : FHIR.R3.Resources.TFhirCodeSystemConceptProperty; overload;
    class function convertCommunication(src : FHIR.R3.Resources.TFhirCommunication) : FHIR.R4.Resources.TFhirCommunication; overload;
    class function convertCommunication(src : FHIR.R4.Resources.TFhirCommunication) : FHIR.R3.Resources.TFhirCommunication; overload;
    class function convertCommunicationPayloadComponent(src : FHIR.R3.Resources.TFhirCommunicationPayload) : FHIR.R4.Resources.TFhirCommunicationPayload; overload;
    class function convertCommunicationPayloadComponent(src : FHIR.R4.Resources.TFhirCommunicationPayload) : FHIR.R3.Resources.TFhirCommunicationPayload; overload;
    class function convertCompartmentDefinition(src : FHIR.R3.Resources.TFhirCompartmentDefinition) : FHIR.R4.Resources.TFhirCompartmentDefinition; overload;
    class function convertCompartmentDefinition(src : FHIR.R4.Resources.TFhirCompartmentDefinition) : FHIR.R3.Resources.TFhirCompartmentDefinition; overload;
    class function convertCompartmentDefinitionResourceComponent(src : FHIR.R3.Resources.TFhirCompartmentDefinitionResource) : FHIR.R4.Resources.TFhirCompartmentDefinitionResource; overload;
    class function convertCompartmentDefinitionResourceComponent(src : FHIR.R4.Resources.TFhirCompartmentDefinitionResource) : FHIR.R3.Resources.TFhirCompartmentDefinitionResource; overload;
    class function convertComposition(src : FHIR.R3.Resources.TFhirComposition) : FHIR.R4.Resources.TFhirComposition; overload;
    class function convertComposition(src : FHIR.R4.Resources.TFhirComposition) : FHIR.R3.Resources.TFhirComposition; overload;
    class function convertCompositionAttesterComponent(src : FHIR.R3.Resources.TFhirCompositionAttester) : FHIR.R4.Resources.TFhirCompositionAttester; overload;
    class function convertCompositionAttesterComponent(src : FHIR.R4.Resources.TFhirCompositionAttester) : FHIR.R3.Resources.TFhirCompositionAttester; overload;
    class function convertCompositionRelatesToComponent(src : FHIR.R3.Resources.TFhirCompositionRelatesTo) : FHIR.R4.Resources.TFhirCompositionRelatesTo; overload;
    class function convertCompositionRelatesToComponent(src : FHIR.R4.Resources.TFhirCompositionRelatesTo) : FHIR.R3.Resources.TFhirCompositionRelatesTo; overload;
    class function convertCompositionEventComponent(src : FHIR.R3.Resources.TFhirCompositionEvent) : FHIR.R4.Resources.TFhirCompositionEvent; overload;
    class function convertCompositionEventComponent(src : FHIR.R4.Resources.TFhirCompositionEvent) : FHIR.R3.Resources.TFhirCompositionEvent; overload;
    class function convertSectionComponent(src : FHIR.R3.Resources.TFhirCompositionSection) : FHIR.R4.Resources.TFhirCompositionSection; overload;
    class function convertSectionComponent(src : FHIR.R4.Resources.TFhirCompositionSection) : FHIR.R3.Resources.TFhirCompositionSection; overload;
    class function convertConceptMap(src : FHIR.R3.Resources.TFhirConceptMap) : FHIR.R4.Resources.TFhirConceptMap; overload;
    class function convertConceptMap(src : FHIR.R4.Resources.TFhirConceptMap) : FHIR.R3.Resources.TFhirConceptMap; overload;
    class function convertConceptMapGroupComponent(src : FHIR.R3.Resources.TFhirConceptMapGroup) : FHIR.R4.Resources.TFhirConceptMapGroup; overload;
    class function convertConceptMapGroupComponent(src : FHIR.R4.Resources.TFhirConceptMapGroup) : FHIR.R3.Resources.TFhirConceptMapGroup; overload;
    class function convertSourceElementComponent(src : FHIR.R3.Resources.TFhirConceptMapGroupElement) : FHIR.R4.Resources.TFhirConceptMapGroupElement; overload;
    class function convertSourceElementComponent(src : FHIR.R4.Resources.TFhirConceptMapGroupElement) : FHIR.R3.Resources.TFhirConceptMapGroupElement; overload;
    class function convertTargetElementComponent(src : FHIR.R3.Resources.TFhirConceptMapGroupElementTarget) : FHIR.R4.Resources.TFhirConceptMapGroupElementTarget; overload;
    class function convertTargetElementComponent(src : FHIR.R4.Resources.TFhirConceptMapGroupElementTarget) : FHIR.R3.Resources.TFhirConceptMapGroupElementTarget; overload;
    class function convertOtherElementComponent(src : FHIR.R3.Resources.TFhirConceptMapGroupElementTargetDependsOn) : FHIR.R4.Resources.TFhirConceptMapGroupElementTargetDependsOn; overload;
    class function convertOtherElementComponent(src : FHIR.R4.Resources.TFhirConceptMapGroupElementTargetDependsOn) : FHIR.R3.Resources.TFhirConceptMapGroupElementTargetDependsOn; overload;
    class function convertConceptMapGroupUnmappedComponent(src : FHIR.R3.Resources.TFhirConceptMapGroupUnmapped) : FHIR.R4.Resources.TFhirConceptMapGroupUnmapped; overload;
    class function convertConceptMapGroupUnmappedComponent(src : FHIR.R4.Resources.TFhirConceptMapGroupUnmapped) : FHIR.R3.Resources.TFhirConceptMapGroupUnmapped; overload;
    class function convertCondition(src : FHIR.R3.Resources.TFhirCondition) : FHIR.R4.Resources.TFhirCondition; overload;
    class function convertCondition(src : FHIR.R4.Resources.TFhirCondition) : FHIR.R3.Resources.TFhirCondition; overload;
    class function convertConditionStageComponent(src : FHIR.R3.Resources.TFhirConditionStage) : FHIR.R4.Resources.TFhirConditionStage; overload;
    class function convertConditionStageComponent(src : FHIR.R4.Resources.TFhirConditionStage) : FHIR.R3.Resources.TFhirConditionStage; overload;
    class function convertConditionEvidenceComponent(src : FHIR.R3.Resources.TFhirConditionEvidence) : FHIR.R4.Resources.TFhirConditionEvidence; overload;
    class function convertConditionEvidenceComponent(src : FHIR.R4.Resources.TFhirConditionEvidence) : FHIR.R3.Resources.TFhirConditionEvidence; overload;
    class function convertConsent(src : FHIR.R3.Resources.TFhirConsent) : FHIR.R4.Resources.TFhirConsent; overload;
    class function convertConsent(src : FHIR.R4.Resources.TFhirConsent) : FHIR.R3.Resources.TFhirConsent; overload;
    class function convertConsentPolicyComponent(src : FHIR.R3.Resources.TFhirConsentPolicy) : FHIR.R4.Resources.TFhirConsentPolicy; overload;
    class function convertConsentPolicyComponent(src : FHIR.R4.Resources.TFhirConsentPolicy) : FHIR.R3.Resources.TFhirConsentPolicy; overload;
    class function convertDataElement(src : FHIR.R3.Resources.TFhirDataElement) : FHIR.R4.Resources.TFhirStructureDefinition; overload;
    class function convertDataElementMappingComponent(src : FHIR.R3.Resources.TFhirDataElementMapping) : FHIR.R4.Resources.TFhirStructureDefinitionMapping; overload;
    class function convertDetectedIssue(src : FHIR.R3.Resources.TFhirDetectedIssue) : FHIR.R4.Resources.TFhirDetectedIssue; overload;
    class function convertDetectedIssue(src : FHIR.R4.Resources.TFhirDetectedIssue) : FHIR.R3.Resources.TFhirDetectedIssue; overload;
    class function convertDetectedIssueMitigationComponent(src : FHIR.R3.Resources.TFhirDetectedIssueMitigation) : FHIR.R4.Resources.TFhirDetectedIssueMitigation; overload;
    class function convertDetectedIssueMitigationComponent(src : FHIR.R4.Resources.TFhirDetectedIssueMitigation) : FHIR.R3.Resources.TFhirDetectedIssueMitigation; overload;
    class function convertDevice(src : FHIR.R3.Resources.TFhirDevice) : FHIR.R4.Resources.TFhirDevice; overload;
    class function convertDevice(src : FHIR.R4.Resources.TFhirDevice) : FHIR.R3.Resources.TFhirDevice; overload;
    class function convertDeviceMetric(src : FHIR.R3.Resources.TFhirDeviceMetric) : FHIR.R4.Resources.TFhirDeviceMetric; overload;
    class function convertDeviceMetric(src : FHIR.R4.Resources.TFhirDeviceMetric) : FHIR.R3.Resources.TFhirDeviceMetric; overload;
    class function convertDeviceMetricCalibrationComponent(src : FHIR.R3.Resources.TFhirDeviceMetricCalibration) : FHIR.R4.Resources.TFhirDeviceMetricCalibration; overload;
    class function convertDeviceMetricCalibrationComponent(src : FHIR.R4.Resources.TFhirDeviceMetricCalibration) : FHIR.R3.Resources.TFhirDeviceMetricCalibration; overload;
    class function convertDeviceUseStatement(src : FHIR.R3.Resources.TFhirDeviceUseStatement) : FHIR.R4.Resources.TFhirDeviceUseStatement; overload;
    class function convertDeviceUseStatement(src : FHIR.R4.Resources.TFhirDeviceUseStatement) : FHIR.R3.Resources.TFhirDeviceUseStatement; overload;
    class function convertDiagnosticReport(src : FHIR.R3.Resources.TFhirDiagnosticReport) : FHIR.R4.Resources.TFhirDiagnosticReport; overload;
    class function convertDiagnosticReport(src : FHIR.R4.Resources.TFhirDiagnosticReport) : FHIR.R3.Resources.TFhirDiagnosticReport; overload;
    class function convertDiagnosticReportImageComponent(src : FHIR.R3.Resources.TFhirDiagnosticReportImage) : FHIR.R4.Resources.TFhirDiagnosticReportMedia; overload;
    class function convertDiagnosticReportImageComponent(src : FHIR.R4.Resources.TFhirDiagnosticReportMedia) : FHIR.R3.Resources.TFhirDiagnosticReportImage; overload;
    class function convertDocumentManifestRelatedComponent(src : FHIR.R3.Resources.TFhirDocumentManifestRelated) : FHIR.R4.Resources.TFhirDocumentManifestRelated; overload;
    class function convertDocumentManifestRelatedComponent(src : FHIR.R4.Resources.TFhirDocumentManifestRelated) : FHIR.R3.Resources.TFhirDocumentManifestRelated; overload;
    class function convertDocumentReference(src : FHIR.R3.Resources.TFhirDocumentReference) : FHIR.R4.Resources.TFhirDocumentReference; overload;
    class function convertDocumentReference(src : FHIR.R4.Resources.TFhirDocumentReference) : FHIR.R3.Resources.TFhirDocumentReference; overload;
    class function convertDocumentReferenceRelatesToComponent(src : FHIR.R3.Resources.TFhirDocumentReferenceRelatesTo) : FHIR.R4.Resources.TFhirDocumentReferenceRelatesTo; overload;
    class function convertDocumentReferenceRelatesToComponent(src : FHIR.R4.Resources.TFhirDocumentReferenceRelatesTo) : FHIR.R3.Resources.TFhirDocumentReferenceRelatesTo; overload;
    class function convertDocumentReferenceContentComponent(src : FHIR.R3.Resources.TFhirDocumentReferenceContent) : FHIR.R4.Resources.TFhirDocumentReferenceContent; overload;
    class function convertDocumentReferenceContentComponent(src : FHIR.R4.Resources.TFhirDocumentReferenceContent) : FHIR.R3.Resources.TFhirDocumentReferenceContent; overload;
    class function convertDocumentReferenceContextComponent(src : FHIR.R3.Resources.TFhirDocumentReferenceContext) : FHIR.R4.Resources.TFhirDocumentReferenceContext; overload;
    class function convertDocumentReferenceContextComponent(src : FHIR.R4.Resources.TFhirDocumentReferenceContext) : FHIR.R3.Resources.TFhirDocumentReferenceContext; overload;
    class function convertDocumentReferenceContextRelatedComponent(src : FHIR.R3.Resources.TFhirDocumentReferenceContextRelated) : FHIR.R4.Types.TFhirReference; overload;
    class function convertDocumentReferenceContextRelatedComponent(src : FHIR.R4.Types.TFhirReference) : FHIR.R3.Resources.TFhirDocumentReferenceContextRelated; overload;
    class function convertEncounter(src : FHIR.R3.Resources.TFhirEncounter) : FHIR.R4.Resources.TFhirEncounter; overload;
    class function convertEncounter(src : FHIR.R4.Resources.TFhirEncounter) : FHIR.R3.Resources.TFhirEncounter; overload;
    class function convertStatusHistoryComponent(src : FHIR.R3.Resources.TFhirEncounterStatusHistory) : FHIR.R4.Resources.TFhirEncounterStatusHistory; overload;
    class function convertStatusHistoryComponent(src : FHIR.R4.Resources.TFhirEncounterStatusHistory) : FHIR.R3.Resources.TFhirEncounterStatusHistory; overload;
    class function convertClassHistoryComponent(src : FHIR.R3.Resources.TFhirEncounterClassHistory) : FHIR.R4.Resources.TFhirEncounterClassHistory; overload;
    class function convertClassHistoryComponent(src : FHIR.R4.Resources.TFhirEncounterClassHistory) : FHIR.R3.Resources.TFhirEncounterClassHistory; overload;
    class function convertEncounterParticipantComponent(src : FHIR.R3.Resources.TFhirEncounterParticipant) : FHIR.R4.Resources.TFhirEncounterParticipant; overload;
    class function convertEncounterParticipantComponent(src : FHIR.R4.Resources.TFhirEncounterParticipant) : FHIR.R3.Resources.TFhirEncounterParticipant; overload;
    class function convertEncounterHospitalizationComponent(src : FHIR.R3.Resources.TFhirEncounterHospitalization) : FHIR.R4.Resources.TFhirEncounterHospitalization; overload;
    class function convertEncounterHospitalizationComponent(src : FHIR.R4.Resources.TFhirEncounterHospitalization) : FHIR.R3.Resources.TFhirEncounterHospitalization; overload;
    class function convertDiagnosisComponent(src : FHIR.R3.Resources.TFhirEncounterDiagnosis) : FHIR.R4.Resources.TFhirEncounterDiagnosis; overload;
    class function convertDiagnosisComponent(src : FHIR.R4.Resources.TFhirEncounterDiagnosis) : FHIR.R3.Resources.TFhirEncounterDiagnosis; overload;
    class function convertEncounterLocationComponent(src : FHIR.R3.Resources.TFhirEncounterLocation) : FHIR.R4.Resources.TFhirEncounterLocation; overload;
    class function convertEncounterLocationComponent(src : FHIR.R4.Resources.TFhirEncounterLocation) : FHIR.R3.Resources.TFhirEncounterLocation; overload;
    class function convertEndpoint(src : FHIR.R3.Resources.TFhirEndpoint) : FHIR.R4.Resources.TFhirEndpoint; overload;
    class function convertEndpoint(src : FHIR.R4.Resources.TFhirEndpoint) : FHIR.R3.Resources.TFhirEndpoint; overload;
    class function convertEpisodeOfCare(src : FHIR.R3.Resources.TFhirEpisodeOfCare) : FHIR.R4.Resources.TFhirEpisodeOfCare; overload;
    class function convertEpisodeOfCare(src : FHIR.R4.Resources.TFhirEpisodeOfCare) : FHIR.R3.Resources.TFhirEpisodeOfCare; overload;
    class function convertDiagnosisComponent(src : FHIR.R3.Resources.TFhirEpisodeOfCareDiagnosis) : FHIR.R4.Resources.TFhirEpisodeOfCareDiagnosis; overload;
    class function convertDiagnosisComponent(src : FHIR.R4.Resources.TFhirEpisodeOfCareDiagnosis) : FHIR.R3.Resources.TFhirEpisodeOfCareDiagnosis; overload;
    class function convertEpisodeOfCareStatusHistoryComponent(src : FHIR.R3.Resources.TFhirEpisodeOfCareStatusHistory) : FHIR.R4.Resources.TFhirEpisodeOfCareStatusHistory; overload;
    class function convertEpisodeOfCareStatusHistoryComponent(src : FHIR.R4.Resources.TFhirEpisodeOfCareStatusHistory) : FHIR.R3.Resources.TFhirEpisodeOfCareStatusHistory; overload;
//    class function convertExpansionProfile(src : FHIR.R3.Resources.TFhirExpansionProfile) : FHIR.R4.Resources.TFHIRParameters overload;
//    class function convertExpansionProfile(src : FHIR.R4.Resources.TFHIRParameters) : FHIR.R3.Resources.TFhirExpansionProfile; overload;
//    class function convertExpansionProfileFixedVersionComponent(src : FHIR.R3.Resources.TFhirExpansionProfileFixedVersion) : FHIR.R4.Resources.TFhirExpansionProfileFixedVersion; overload;
//    class function convertExpansionProfileFixedVersionComponent(src : FHIR.R4.Resources.TFhirExpansionProfileFixedVersion) : FHIR.R3.Resources.TFhirExpansionProfileFixedVersion; overload;
//    class function convertExpansionProfileExcludedSystemComponent(src : FHIR.R3.Resources.TFhirExpansionProfileExcludedSystem) : FHIR.R4.Resources.TFhirExpansionProfileExcludedSystem; overload;
//    class function convertExpansionProfileExcludedSystemComponent(src : FHIR.R4.Resources.TFhirExpansionProfileExcludedSystem) : FHIR.R3.Resources.TFhirExpansionProfileExcludedSystem; overload;
//    class function convertExpansionProfileDesignationComponent(src : FHIR.R3.Resources.TFhirExpansionProfileDesignation) : FHIR.R4.Resources.TFhirExpansionProfileDesignation; overload;
//    class function convertExpansionProfileDesignationComponent(src : FHIR.R4.Resources.TFhirExpansionProfileDesignation) : FHIR.R3.Resources.TFhirExpansionProfileDesignation; overload;
//    class function convertDesignationIncludeComponent(src : FHIR.R3.Resources.TFhirExpansionProfileDesignationInclude) : FHIR.R4.Resources.TFhirExpansionProfileDesignationInclude; overload;
//    class function convertDesignationIncludeComponent(src : FHIR.R4.Resources.TFhirExpansionProfileDesignationInclude) : FHIR.R3.Resources.TFhirExpansionProfileDesignationInclude; overload;
//    class function convertDesignationIncludeDesignationComponent(src : FHIR.R3.Resources.TFhirExpansionProfileDesignationIncludeDesignation) : FHIR.R4.Resources.TFhirExpansionProfileDesignationIncludeDesignation; overload;
//    class function convertDesignationIncludeDesignationComponent(src : FHIR.R4.Resources.TFhirExpansionProfileDesignationIncludeDesignation) : FHIR.R3.Resources.TFhirExpansionProfileDesignationIncludeDesignation; overload;
//    class function convertDesignationExcludeComponent(src : FHIR.R3.Resources.TFhirExpansionProfileDesignationExclude) : FHIR.R4.Resources.TFhirExpansionProfileDesignationExclude; overload;
//    class function convertDesignationExcludeComponent(src : FHIR.R4.Resources.TFhirExpansionProfileDesignationExclude) : FHIR.R3.Resources.TFhirExpansionProfileDesignationExclude; overload;
//    class function convertDesignationExcludeDesignationComponent(src : FHIR.R3.Resources.TFhirExpansionProfileDesignationExcludeDesignation) : FHIR.R4.Resources.TFhirExpansionProfileDesignationExcludeDesignation; overload;
//    class function convertDesignationExcludeDesignationComponent(src : FHIR.R4.Resources.TFhirExpansionProfileDesignationExcludeDesignation) : FHIR.R3.Resources.TFhirExpansionProfileDesignationExcludeDesignation; overload;
    class function convertFamilyMemberHistory(src : FHIR.R3.Resources.TFhirFamilyMemberHistory) : FHIR.R4.Resources.TFhirFamilyMemberHistory; overload;
    class function convertFamilyMemberHistory(src : FHIR.R4.Resources.TFhirFamilyMemberHistory) : FHIR.R3.Resources.TFhirFamilyMemberHistory; overload;
    class function convertFamilyMemberHistoryConditionComponent(src : FHIR.R3.Resources.TFhirFamilyMemberHistoryCondition) : FHIR.R4.Resources.TFhirFamilyMemberHistoryCondition; overload;
    class function convertFamilyMemberHistoryConditionComponent(src : FHIR.R4.Resources.TFhirFamilyMemberHistoryCondition) : FHIR.R3.Resources.TFhirFamilyMemberHistoryCondition; overload;
    class function convertFlag(src : FHIR.R3.Resources.TFhirFlag) : FHIR.R4.Resources.TFhirFlag; overload;
    class function convertFlag(src : FHIR.R4.Resources.TFhirFlag) : FHIR.R3.Resources.TFhirFlag; overload;
    class function convertGoal(src : FHIR.R3.Resources.TFhirGoal) : FHIR.R4.Resources.TFhirGoal; overload;
    class function convertGoal(src : FHIR.R4.Resources.TFhirGoal) : FHIR.R3.Resources.TFhirGoal; overload;
    class function convertGoalTargetComponent(src : FHIR.R3.Resources.TFhirGoalTarget) : FHIR.R4.Resources.TFhirGoalTarget; overload;
    class function convertGoalTargetComponent(src : FHIR.R4.Resources.TFhirGoalTarget) : FHIR.R3.Resources.TFhirGoalTarget; overload;
    class function convertGraphDefinition(src : FHIR.R3.Resources.TFhirGraphDefinition) : FHIR.R4.Resources.TFhirGraphDefinition; overload;
    class function convertGraphDefinition(src : FHIR.R4.Resources.TFhirGraphDefinition) : FHIR.R3.Resources.TFhirGraphDefinition; overload;
    class function convertGraphDefinitionLinkComponent(src : FHIR.R3.Resources.TFhirGraphDefinitionLink) : FHIR.R4.Resources.TFhirGraphDefinitionLink; overload;
    class function convertGraphDefinitionLinkComponent(src : FHIR.R4.Resources.TFhirGraphDefinitionLink) : FHIR.R3.Resources.TFhirGraphDefinitionLink; overload;
    class function convertGraphDefinitionLinkTargetComponent(src : FHIR.R3.Resources.TFhirGraphDefinitionLinkTarget) : FHIR.R4.Resources.TFhirGraphDefinitionLinkTarget; overload;
    class function convertGraphDefinitionLinkTargetComponent(src : FHIR.R4.Resources.TFhirGraphDefinitionLinkTarget) : FHIR.R3.Resources.TFhirGraphDefinitionLinkTarget; overload;
    class function convertGraphDefinitionLinkTargetCompartmentComponent(src : FHIR.R3.Resources.TFhirGraphDefinitionLinkTargetCompartment) : FHIR.R4.Resources.TFhirGraphDefinitionLinkTargetCompartment; overload;
    class function convertGraphDefinitionLinkTargetCompartmentComponent(src : FHIR.R4.Resources.TFhirGraphDefinitionLinkTargetCompartment) : FHIR.R3.Resources.TFhirGraphDefinitionLinkTargetCompartment; overload;
    class function convertGroup(src : FHIR.R3.Resources.TFhirGroup) : FHIR.R4.Resources.TFhirGroup; overload;
    class function convertGroup(src : FHIR.R4.Resources.TFhirGroup) : FHIR.R3.Resources.TFhirGroup; overload;
    class function convertGroupCharacteristicComponent(src : FHIR.R3.Resources.TFhirGroupCharacteristic) : FHIR.R4.Resources.TFhirGroupCharacteristic; overload;
    class function convertGroupCharacteristicComponent(src : FHIR.R4.Resources.TFhirGroupCharacteristic) : FHIR.R3.Resources.TFhirGroupCharacteristic; overload;
    class function convertGroupMemberComponent(src : FHIR.R3.Resources.TFhirGroupMember) : FHIR.R4.Resources.TFhirGroupMember; overload;
    class function convertGroupMemberComponent(src : FHIR.R4.Resources.TFhirGroupMember) : FHIR.R3.Resources.TFhirGroupMember; overload;
    class function convertHealthcareService(src : FHIR.R3.Resources.TFhirHealthcareService) : FHIR.R4.Resources.TFhirHealthcareService; overload;
    class function convertHealthcareService(src : FHIR.R4.Resources.TFhirHealthcareService) : FHIR.R3.Resources.TFhirHealthcareService; overload;
    class function convertHealthcareServiceAvailableTimeComponent(src : FHIR.R3.Resources.TFhirHealthcareServiceAvailableTime) : FHIR.R4.Resources.TFhirHealthcareServiceAvailableTime; overload;
    class function convertHealthcareServiceAvailableTimeComponent(src : FHIR.R4.Resources.TFhirHealthcareServiceAvailableTime) : FHIR.R3.Resources.TFhirHealthcareServiceAvailableTime; overload;
    class function convertHealthcareServiceNotAvailableComponent(src : FHIR.R3.Resources.TFhirHealthcareServiceNotAvailable) : FHIR.R4.Resources.TFhirHealthcareServiceNotAvailable; overload;
    class function convertHealthcareServiceNotAvailableComponent(src : FHIR.R4.Resources.TFhirHealthcareServiceNotAvailable) : FHIR.R3.Resources.TFhirHealthcareServiceNotAvailable; overload;
    class function convertImmunization(src : FHIR.R3.Resources.TFhirImmunization) : FHIR.R4.Resources.TFhirImmunization; overload;
    class function convertImmunization(src : FHIR.R4.Resources.TFhirImmunization) : FHIR.R3.Resources.TFhirImmunization; overload;
    class function convertImmunizationPractitionerComponent(src : FHIR.R3.Resources.TFhirImmunizationPractitioner) : FHIR.R4.Resources.TFhirImmunizationPerformer; overload;
    class function convertImmunizationPractitionerComponent(src : FHIR.R4.Resources.TFhirImmunizationPerformer) : FHIR.R3.Resources.TFhirImmunizationPractitioner; overload;
    class function convertImplementationGuide(src : FHIR.R3.Resources.TFhirImplementationGuide) : FHIR.R4.Resources.TFhirImplementationGuide; overload;
    class function convertImplementationGuide(src : FHIR.R4.Resources.TFhirImplementationGuide) : FHIR.R3.Resources.TFhirImplementationGuide; overload;
    class function convertImplementationGuideDependencyComponent(src : FHIR.R3.Resources.TFhirImplementationGuideDependency) : FHIR.R4.Resources.TFhirImplementationGuideDependsOn; overload;
    class function convertImplementationGuideDependencyComponent(src : FHIR.R4.Resources.TFhirImplementationGuideDependsOn) : FHIR.R3.Resources.TFhirImplementationGuideDependency; overload;
    class function convertImplementationGuidePackageComponent(context : FHIR.R4.Resources.TFhirImplementationGuideDefinition; src : FHIR.R3.Resources.TFhirImplementationGuidePackage) : FHIR.R4.Resources.TFhirImplementationGuideDefinitionGrouping; overload;
    class function convertImplementationGuidePackageComponent(src : FHIR.R4.Resources.TFhirImplementationGuideDefinitionGrouping) : FHIR.R3.Resources.TFhirImplementationGuidePackage; overload;
    class function convertImplementationGuidePackageResourceComponent(src : FHIR.R3.Resources.TFhirImplementationGuidePackageResource) : FHIR.R4.Resources.TFhirImplementationGuideDefinitionResource; overload;
    class function convertImplementationGuidePackageResourceComponent(src : FHIR.R4.Resources.TFhirImplementationGuideDefinitionResource) : FHIR.R3.Resources.TFhirImplementationGuidePackageResource; overload;
    class function convertImplementationGuideGlobalComponent(src : FHIR.R3.Resources.TFhirImplementationGuideGlobal) : FHIR.R4.Resources.TFhirImplementationGuideGlobal; overload;
    class function convertImplementationGuideGlobalComponent(src : FHIR.R4.Resources.TFhirImplementationGuideGlobal) : FHIR.R3.Resources.TFhirImplementationGuideGlobal; overload;
    class function convertImplementationGuidePageComponent(src : FHIR.R3.Resources.TFhirImplementationGuidePage) : FHIR.R4.Resources.TFhirImplementationGuideDefinitionPage; overload;
    class function convertImplementationGuidePageComponent(src : FHIR.R4.Resources.TFhirImplementationGuideDefinitionPage) : FHIR.R3.Resources.TFhirImplementationGuidePage; overload;
    class function convertLinkage(src : FHIR.R3.Resources.TFhirLinkage) : FHIR.R4.Resources.TFhirLinkage; overload;
    class function convertLinkage(src : FHIR.R4.Resources.TFhirLinkage) : FHIR.R3.Resources.TFhirLinkage; overload;
    class function convertLinkageItemComponent(src : FHIR.R3.Resources.TFhirLinkageItem) : FHIR.R4.Resources.TFhirLinkageItem; overload;
    class function convertLinkageItemComponent(src : FHIR.R4.Resources.TFhirLinkageItem) : FHIR.R3.Resources.TFhirLinkageItem; overload;
    class function convertList(src : FHIR.R3.Resources.TFhirList) : FHIR.R4.Resources.TFhirList; overload;
    class function convertList(src : FHIR.R4.Resources.TFhirList) : FHIR.R3.Resources.TFhirList; overload;
    class function convertListEntryComponent(src : FHIR.R3.Resources.TFhirListEntry) : FHIR.R4.Resources.TFhirListEntry; overload;
    class function convertListEntryComponent(src : FHIR.R4.Resources.TFhirListEntry) : FHIR.R3.Resources.TFhirListEntry; overload;
    class function convertLocation(src : FHIR.R3.Resources.TFhirLocation) : FHIR.R4.Resources.TFhirLocation; overload;
    class function convertLocation(src : FHIR.R4.Resources.TFhirLocation) : FHIR.R3.Resources.TFhirLocation; overload;
    class function convertLocationPositionComponent(src : FHIR.R3.Resources.TFhirLocationPosition) : FHIR.R4.Resources.TFhirLocationPosition; overload;
    class function convertLocationPositionComponent(src : FHIR.R4.Resources.TFhirLocationPosition) : FHIR.R3.Resources.TFhirLocationPosition; overload;
    class function convertMedicationIngredientComponent(src : FHIR.R3.Resources.TFhirMedicationIngredient) : FHIR.R4.Resources.TFhirMedicationIngredient; overload;
    class function convertMedicationIngredientComponent(src : FHIR.R4.Resources.TFhirMedicationIngredient) : FHIR.R3.Resources.TFhirMedicationIngredient; overload;
    class function convertMedication(src : FHIR.R3.Resources.TFhirMedication) : FHIR.R4.Resources.TFhirMedication; overload;
    class function convertMedication(src : FHIR.R4.Resources.TFhirMedication) : FHIR.R3.Resources.TFhirMedication; overload;
    class function convertMedicationPackageBatchComponent(src : FHIR.R3.Resources.TFhirMedicationPackageBatch) : FHIR.R4.Resources.TFhirMedicationBatch; overload;
    class function convertMedicationPackageBatchComponent(src : FHIR.R4.Resources.TFhirMedicationBatch) : FHIR.R3.Resources.TFhirMedicationPackageBatch; overload;
    class function convertMedicationAdministration(src : FHIR.R3.Resources.TFhirMedicationAdministration) : FHIR.R4.Resources.TFhirMedicationAdministration; overload;
    class function convertMedicationAdministration(src : FHIR.R4.Resources.TFhirMedicationAdministration) : FHIR.R3.Resources.TFhirMedicationAdministration; overload;
    class function convertMedicationAdministrationPerformerComponent(src : FHIR.R3.Resources.TFhirMedicationAdministrationPerformer) : FHIR.R4.Resources.TFhirMedicationAdministrationPerformer; overload;
    class function convertMedicationAdministrationPerformerComponent(src : FHIR.R4.Resources.TFhirMedicationAdministrationPerformer) : FHIR.R3.Resources.TFhirMedicationAdministrationPerformer; overload;
    class function convertMedicationAdministrationDosageComponent(src : FHIR.R3.Resources.TFhirMedicationAdministrationDosage) : FHIR.R4.Resources.TFhirMedicationAdministrationDosage; overload;
    class function convertMedicationAdministrationDosageComponent(src : FHIR.R4.Resources.TFhirMedicationAdministrationDosage) : FHIR.R3.Resources.TFhirMedicationAdministrationDosage; overload;
    class function convertMedicationDispense(src : FHIR.R3.Resources.TFhirMedicationDispense) : FHIR.R4.Resources.TFhirMedicationDispense; overload;
    class function convertMedicationDispense(src : FHIR.R4.Resources.TFhirMedicationDispense) : FHIR.R3.Resources.TFhirMedicationDispense; overload;
    class function convertMedicationDispensePerformerComponent(src : FHIR.R3.Resources.TFhirMedicationDispensePerformer) : FHIR.R4.Resources.TFhirMedicationDispensePerformer; overload;
    class function convertMedicationDispensePerformerComponent(src : FHIR.R4.Resources.TFhirMedicationDispensePerformer) : FHIR.R3.Resources.TFhirMedicationDispensePerformer; overload;
    class function convertMedicationDispenseSubstitutionComponent(src : FHIR.R3.Resources.TFhirMedicationDispenseSubstitution) : FHIR.R4.Resources.TFhirMedicationDispenseSubstitution; overload;
    class function convertMedicationDispenseSubstitutionComponent(src : FHIR.R4.Resources.TFhirMedicationDispenseSubstitution) : FHIR.R3.Resources.TFhirMedicationDispenseSubstitution; overload;
    class function convertMedicationRequest(src : FHIR.R3.Resources.TFhirMedicationRequest) : FHIR.R4.Resources.TFhirMedicationRequest; overload;
    class function convertMedicationRequest(src : FHIR.R4.Resources.TFhirMedicationRequest) : FHIR.R3.Resources.TFhirMedicationRequest; overload;
    class function convertMedicationRequestDispenseRequestComponent(src : FHIR.R3.Resources.TFhirMedicationRequestDispenseRequest) : FHIR.R4.Resources.TFhirMedicationRequestDispenseRequest; overload;
    class function convertMedicationRequestDispenseRequestComponent(src : FHIR.R4.Resources.TFhirMedicationRequestDispenseRequest) : FHIR.R3.Resources.TFhirMedicationRequestDispenseRequest; overload;
    class function convertMedicationRequestSubstitutionComponent(src : FHIR.R3.Resources.TFhirMedicationRequestSubstitution) : FHIR.R4.Resources.TFhirMedicationRequestSubstitution; overload;
    class function convertMedicationRequestSubstitutionComponent(src : FHIR.R4.Resources.TFhirMedicationRequestSubstitution) : FHIR.R3.Resources.TFhirMedicationRequestSubstitution; overload;
    class function convertMedicationStatement(src : FHIR.R3.Resources.TFhirMedicationStatement) : FHIR.R4.Resources.TFhirMedicationStatement; overload;
    class function convertMedicationStatement(src : FHIR.R4.Resources.TFhirMedicationStatement) : FHIR.R3.Resources.TFhirMedicationStatement; overload;
    class function convertMessageDefinition(src : FHIR.R3.Resources.TFhirMessageDefinition) : FHIR.R4.Resources.TFhirMessageDefinition; overload;
    class function convertCoding2Uri(code : FHIR.R3.Types.TFhirCoding) : String; overload;
    class function convertMessageDefinition(src : FHIR.R4.Resources.TFhirMessageDefinition) : FHIR.R3.Resources.TFhirMessageDefinition; overload;
    class function convertUri2Coding(uri : String) : FHIR.R3.Types.TFhirCoding; overload;
    class function convertMessageDefinitionFocusComponent(src : FHIR.R3.Resources.TFhirMessageDefinitionFocus) : FHIR.R4.Resources.TFhirMessageDefinitionFocus; overload;
    class function convertMessageDefinitionFocusComponent(src : FHIR.R4.Resources.TFhirMessageDefinitionFocus) : FHIR.R3.Resources.TFhirMessageDefinitionFocus; overload;
    class function convertMessageDefinitionAllowedResponseComponent(src : FHIR.R3.Resources.TFhirMessageDefinitionAllowedResponse) : FHIR.R4.Resources.TFhirMessageDefinitionAllowedResponse; overload;
    class function convertMessageDefinitionAllowedResponseComponent(src : FHIR.R4.Resources.TFhirMessageDefinitionAllowedResponse) : FHIR.R3.Resources.TFhirMessageDefinitionAllowedResponse; overload;
    class function convertMessageHeader(src : FHIR.R3.Resources.TFhirMessageHeader) : FHIR.R4.Resources.TFhirMessageHeader; overload;
    class function convertMessageHeader(src : FHIR.R4.Resources.TFhirMessageHeader) : FHIR.R3.Resources.TFhirMessageHeader; overload;
    class function convertMessageDestinationComponent(src : FHIR.R3.Resources.TFhirMessageHeaderDestination) : FHIR.R4.Resources.TFhirMessageHeaderDestination; overload;
    class function convertMessageDestinationComponent(src : FHIR.R4.Resources.TFhirMessageHeaderDestination) : FHIR.R3.Resources.TFhirMessageHeaderDestination; overload;
    class function convertMessageSourceComponent(src : FHIR.R3.Resources.TFhirMessageHeaderSource) : FHIR.R4.Resources.TFhirMessageHeaderSource; overload;
    class function convertMessageSourceComponent(src : FHIR.R4.Resources.TFhirMessageHeaderSource) : FHIR.R3.Resources.TFhirMessageHeaderSource; overload;
    class function convertMessageHeaderResponseComponent(src : FHIR.R3.Resources.TFhirMessageHeaderResponse) : FHIR.R4.Resources.TFhirMessageHeaderResponse; overload;
    class function convertMessageHeaderResponseComponent(src : FHIR.R4.Resources.TFhirMessageHeaderResponse) : FHIR.R3.Resources.TFhirMessageHeaderResponse; overload;
    class function convertNamingSystem(src : FHIR.R3.Resources.TFhirNamingSystem) : FHIR.R4.Resources.TFhirNamingSystem; overload;
    class function convertNamingSystem(src : FHIR.R4.Resources.TFhirNamingSystem) : FHIR.R3.Resources.TFhirNamingSystem; overload;
    class function convertNamingSystemUniqueIdComponent(src : FHIR.R3.Resources.TFhirNamingSystemUniqueId) : FHIR.R4.Resources.TFhirNamingSystemUniqueId; overload;
    class function convertNamingSystemUniqueIdComponent(src : FHIR.R4.Resources.TFhirNamingSystemUniqueId) : FHIR.R3.Resources.TFhirNamingSystemUniqueId; overload;
    class function convertObservation(src : FHIR.R3.Resources.TFhirObservation) : FHIR.R4.Resources.TFhirObservation; overload;
    class function convertObservation(src : FHIR.R4.Resources.TFhirObservation) : FHIR.R3.Resources.TFhirObservation; overload;
    class function convertObservationReferenceRangeComponent(src : FHIR.R3.Resources.TFhirObservationReferenceRange) : FHIR.R4.Resources.TFhirObservationReferenceRange; overload;
    class function convertObservationReferenceRangeComponent(src : FHIR.R4.Resources.TFhirObservationReferenceRange) : FHIR.R3.Resources.TFhirObservationReferenceRange; overload;
    class function convertObservationRelatedComponent(src : FHIR.R4.Types.TFhirReference; type_ : FHIR.R3.Types.TFhirObservationRelationshiptypesEnum) : FHIR.R3.Resources.TFhirObservationRelated; overload;
    class function convertObservationComponentComponent(src : FHIR.R3.Resources.TFhirObservationComponent) : FHIR.R4.Resources.TFhirObservationComponent; overload;
    class function convertObservationComponentComponent(src : FHIR.R4.Resources.TFhirObservationComponent) : FHIR.R3.Resources.TFhirObservationComponent; overload;
    class function convertOperationDefinition(src : FHIR.R3.Resources.TFhirOperationDefinition) : FHIR.R4.Resources.TFhirOperationDefinition; overload;
    class function convertOperationDefinition(src : FHIR.R4.Resources.TFhirOperationDefinition) : FHIR.R3.Resources.TFhirOperationDefinition; overload;
    class function convertOperationDefinitionParameterComponent(src : FHIR.R3.Resources.TFhirOperationDefinitionParameter) : FHIR.R4.Resources.TFhirOperationDefinitionParameter; overload;
    class function convertOperationDefinitionParameterComponent(src : FHIR.R4.Resources.TFhirOperationDefinitionParameter) : FHIR.R3.Resources.TFhirOperationDefinitionParameter; overload;
    class function convertOperationDefinitionParameterBindingComponent(src : FHIR.R3.Resources.TFhirOperationDefinitionParameterBinding) : FHIR.R4.Resources.TFhirOperationDefinitionParameterBinding; overload;
    class function convertOperationDefinitionParameterBindingComponent(src : FHIR.R4.Resources.TFhirOperationDefinitionParameterBinding) : FHIR.R3.Resources.TFhirOperationDefinitionParameterBinding; overload;
    class function convertOperationDefinitionOverloadComponent(src : FHIR.R3.Resources.TFhirOperationDefinitionOverload) : FHIR.R4.Resources.TFhirOperationDefinitionOverload; overload;
    class function convertOperationDefinitionOverloadComponent(src : FHIR.R4.Resources.TFhirOperationDefinitionOverload) : FHIR.R3.Resources.TFhirOperationDefinitionOverload; overload;
    class function convertOperationOutcome(src : FHIR.R3.Resources.TFhirOperationOutcome) : FHIR.R4.Resources.TFhirOperationOutcome; overload;
    class function convertOperationOutcome(src : FHIR.R4.Resources.TFhirOperationOutcome) : FHIR.R3.Resources.TFhirOperationOutcome; overload;
    class function convertOperationOutcomeIssueComponent(src : FHIR.R3.Resources.TFhirOperationOutcomeIssue) : FHIR.R4.Resources.TFhirOperationOutcomeIssue; overload;
    class function convertOperationOutcomeIssueComponent(src : FHIR.R4.Resources.TFhirOperationOutcomeIssue) : FHIR.R3.Resources.TFhirOperationOutcomeIssue; overload;
    class function convertOrganization(src : FHIR.R3.Resources.TFhirOrganization) : FHIR.R4.Resources.TFhirOrganization; overload;
    class function convertOrganization(src : FHIR.R4.Resources.TFhirOrganization) : FHIR.R3.Resources.TFhirOrganization; overload;
    class function convertOrganizationContactComponent(src : FHIR.R3.Resources.TFhirOrganizationContact) : FHIR.R4.Resources.TFhirOrganizationContact; overload;
    class function convertOrganizationContactComponent(src : FHIR.R4.Resources.TFhirOrganizationContact) : FHIR.R3.Resources.TFhirOrganizationContact; overload;
    class function convertPatient(src : FHIR.R3.Resources.TFhirPatient) : FHIR.R4.Resources.TFhirPatient; overload;
    class function convertPatient(src : FHIR.R4.Resources.TFhirPatient) : FHIR.R3.Resources.TFhirPatient; overload;
    class function convertContactComponent(src : FHIR.R3.Resources.TFhirPatientContact) : FHIR.R4.Resources.TFhirPatientContact; overload;
    class function convertContactComponent(src : FHIR.R4.Resources.TFhirPatientContact) : FHIR.R3.Resources.TFhirPatientContact; overload;
    class function convertAnimalComponent(src : FHIR.R3.Resources.TFhirPatientAnimal) : FHIR.R4.Types.TFhirExtension; overload;
    class function convertAnimalComponent(src : FHIR.R4.Types.TFhirExtension) : FHIR.R3.Resources.TFhirPatientAnimal; overload;
    class function convertPatientCommunicationComponent(src : FHIR.R3.Resources.TFhirPatientCommunication) : FHIR.R4.Resources.TFhirPatientCommunication; overload;
    class function convertPatientCommunicationComponent(src : FHIR.R4.Resources.TFhirPatientCommunication) : FHIR.R3.Resources.TFhirPatientCommunication; overload;
    class function convertPatientLinkComponent(src : FHIR.R3.Resources.TFhirPatientLink) : FHIR.R4.Resources.TFhirPatientLink; overload;
    class function convertPatientLinkComponent(src : FHIR.R4.Resources.TFhirPatientLink) : FHIR.R3.Resources.TFhirPatientLink; overload;
    class function convertPaymentNotice(src : FHIR.R3.Resources.TFhirPaymentNotice) : FHIR.R4.Resources.TFhirPaymentNotice; overload;
    class function convertPaymentNotice(src : FHIR.R4.Resources.TFhirPaymentNotice) : FHIR.R3.Resources.TFhirPaymentNotice; overload;
    class function convertPerson(src : FHIR.R3.Resources.TFhirPerson) : FHIR.R4.Resources.TFhirPerson; overload;
    class function convertPerson(src : FHIR.R4.Resources.TFhirPerson) : FHIR.R3.Resources.TFhirPerson; overload;
    class function convertPersonLinkComponent(src : FHIR.R3.Resources.TFhirPersonLink) : FHIR.R4.Resources.TFhirPersonLink; overload;
    class function convertPersonLinkComponent(src : FHIR.R4.Resources.TFhirPersonLink) : FHIR.R3.Resources.TFhirPersonLink; overload;
    class function convertPractitioner(src : FHIR.R3.Resources.TFhirPractitioner) : FHIR.R4.Resources.TFhirPractitioner; overload;
    class function convertPractitioner(src : FHIR.R4.Resources.TFhirPractitioner) : FHIR.R3.Resources.TFhirPractitioner; overload;
    class function convertPractitionerQualificationComponent(src : FHIR.R3.Resources.TFhirPractitionerQualification) : FHIR.R4.Resources.TFhirPractitionerQualification; overload;
    class function convertPractitionerQualificationComponent(src : FHIR.R4.Resources.TFhirPractitionerQualification) : FHIR.R3.Resources.TFhirPractitionerQualification; overload;
    class function convertPractitionerRole(src : FHIR.R3.Resources.TFhirPractitionerRole) : FHIR.R4.Resources.TFhirPractitionerRole; overload;
    class function convertPractitionerRole(src : FHIR.R4.Resources.TFhirPractitionerRole) : FHIR.R3.Resources.TFhirPractitionerRole; overload;
    class function convertPractitionerRoleAvailableTimeComponent(src : FHIR.R3.Resources.TFhirPractitionerRoleAvailableTime) : FHIR.R4.Resources.TFhirPractitionerRoleAvailableTime; overload;
    class function convertPractitionerRoleAvailableTimeComponent(src : FHIR.R4.Resources.TFhirPractitionerRoleAvailableTime) : FHIR.R3.Resources.TFhirPractitionerRoleAvailableTime; overload;
    class function convertPractitionerRoleNotAvailableComponent(src : FHIR.R3.Resources.TFhirPractitionerRoleNotAvailable) : FHIR.R4.Resources.TFhirPractitionerRoleNotAvailable; overload;
    class function convertPractitionerRoleNotAvailableComponent(src : FHIR.R4.Resources.TFhirPractitionerRoleNotAvailable) : FHIR.R3.Resources.TFhirPractitionerRoleNotAvailable; overload;
    class function convertProvenance(src : FHIR.R3.Resources.TFhirProvenance) : FHIR.R4.Resources.TFhirProvenance; overload;
    class function convertProvenance(src : FHIR.R4.Resources.TFhirProvenance) : FHIR.R3.Resources.TFhirProvenance; overload;
    class function convertProvenanceAgentComponent(src : FHIR.R3.Resources.TFhirProvenanceAgent) : FHIR.R4.Resources.TFhirProvenanceAgent; overload;
    class function convertProvenanceAgentComponent(src : FHIR.R4.Resources.TFhirProvenanceAgent) : FHIR.R3.Resources.TFhirProvenanceAgent; overload;
    class function convertProvenanceEntityComponent(src : FHIR.R3.Resources.TFhirProvenanceEntity) : FHIR.R4.Resources.TFhirProvenanceEntity; overload;
    class function convertProvenanceEntityComponent(src : FHIR.R4.Resources.TFhirProvenanceEntity) : FHIR.R3.Resources.TFhirProvenanceEntity; overload;
    class function convertQuestionnaire(src : FHIR.R3.Resources.TFhirQuestionnaire) : FHIR.R4.Resources.TFhirQuestionnaire; overload;
    class function convertQuestionnaire(src : FHIR.R4.Resources.TFhirQuestionnaire) : FHIR.R3.Resources.TFhirQuestionnaire; overload;
    class function convertQuestionnaireItemComponent(src : FHIR.R3.Resources.TFhirQuestionnaireItem) : FHIR.R4.Resources.TFhirQuestionnaireItem; overload;
    class function convertQuestionnaireItemComponent(src : FHIR.R4.Resources.TFhirQuestionnaireItem) : FHIR.R3.Resources.TFhirQuestionnaireItem; overload;
    class function convertQuestionnaireItemEnableWhenComponent(src : FHIR.R3.Resources.TFhirQuestionnaireItemEnableWhen) : FHIR.R4.Resources.TFhirQuestionnaireItemEnableWhen; overload;
    class function convertQuestionnaireItemEnableWhenComponent(src : FHIR.R4.Resources.TFhirQuestionnaireItemEnableWhen) : FHIR.R3.Resources.TFhirQuestionnaireItemEnableWhen; overload;
    class function convertQuestionnaireItemOptionComponent(src : FHIR.R3.Resources.TFhirQuestionnaireItemOption) : FHIR.R4.Resources.TFhirQuestionnaireItemAnswerOption; overload;
    class function convertQuestionnaireItemOptionComponent(src : FHIR.R4.Resources.TFhirQuestionnaireItemAnswerOption) : FHIR.R3.Resources.TFhirQuestionnaireItemOption; overload;
    class function convertQuestionnaireResponse(src : FHIR.R3.Resources.TFhirQuestionnaireResponse) : FHIR.R4.Resources.TFhirQuestionnaireResponse; overload;
    class function convertQuestionnaireResponse(src : FHIR.R4.Resources.TFhirQuestionnaireResponse) : FHIR.R3.Resources.TFhirQuestionnaireResponse; overload;
    class function convertQuestionnaireResponseItemComponent(src : FHIR.R3.Resources.TFhirQuestionnaireResponseItem) : FHIR.R4.Resources.TFhirQuestionnaireResponseItem; overload;
    class function convertQuestionnaireResponseItemComponent(src : FHIR.R4.Resources.TFhirQuestionnaireResponseItem) : FHIR.R3.Resources.TFhirQuestionnaireResponseItem; overload;
    class function convertQuestionnaireResponseItemAnswerComponent(src : FHIR.R3.Resources.TFhirQuestionnaireResponseItemAnswer) : FHIR.R4.Resources.TFhirQuestionnaireResponseItemAnswer; overload;
    class function convertQuestionnaireResponseItemAnswerComponent(src : FHIR.R4.Resources.TFhirQuestionnaireResponseItemAnswer) : FHIR.R3.Resources.TFhirQuestionnaireResponseItemAnswer; overload;
    class function convertRiskAssessment(src : FHIR.R3.Resources.TFhirRiskAssessment) : FHIR.R4.Resources.TFhirRiskAssessment; overload;
    class function convertRiskAssessment(src : FHIR.R4.Resources.TFhirRiskAssessment) : FHIR.R3.Resources.TFhirRiskAssessment; overload;
    class function convertRiskAssessmentPredictionComponent(src : FHIR.R3.Resources.TFhirRiskAssessmentPrediction) : FHIR.R4.Resources.TFhirRiskAssessmentPrediction; overload;
    class function convertRiskAssessmentPredictionComponent(src : FHIR.R4.Resources.TFhirRiskAssessmentPrediction) : FHIR.R3.Resources.TFhirRiskAssessmentPrediction; overload;
    class function convertSchedule(src : FHIR.R3.Resources.TFhirSchedule) : FHIR.R4.Resources.TFhirSchedule; overload;
    class function convertSchedule(src : FHIR.R4.Resources.TFhirSchedule) : FHIR.R3.Resources.TFhirSchedule; overload;
    class function convertSearchParameter(src : FHIR.R3.Resources.TFhirSearchParameter) : FHIR.R4.Resources.TFhirSearchParameter; overload;
    class function convertSearchParameter(src : FHIR.R4.Resources.TFhirSearchParameter) : FHIR.R3.Resources.TFhirSearchParameter; overload;
    class function convertSearchParameterComponentComponent(src : FHIR.R3.Resources.TFhirSearchParameterComponent) : FHIR.R4.Resources.TFhirSearchParameterComponent; overload;
    class function convertSearchParameterComponentComponent(src : FHIR.R4.Resources.TFhirSearchParameterComponent) : FHIR.R3.Resources.TFhirSearchParameterComponent; overload;
    class function convertSequence(src : FHIR.R3.Resources.TFhirSequence) : FHIR.R4.Resources.TFhirMolecularSequence; overload;
    class function convertSequence(src : FHIR.R4.Resources.TFhirMolecularSequence) : FHIR.R3.Resources.TFhirSequence; overload;
    class function convertSequenceReferenceSeqComponent(src : FHIR.R3.Resources.TFhirSequenceReferenceSeq) : FHIR.R4.Resources.TFhirMolecularSequenceReferenceSeq; overload;
    class function convertSequenceReferenceSeqComponent(src : FHIR.R4.Resources.TFhirMolecularSequenceReferenceSeq) : FHIR.R3.Resources.TFhirSequenceReferenceSeq; overload;
    class function convertSequenceVariantComponent(src : FHIR.R3.Resources.TFhirSequenceVariant) : FHIR.R4.Resources.TFhirMolecularSequenceVariant; overload;
    class function convertSequenceVariantComponent(src : FHIR.R4.Resources.TFhirMolecularSequenceVariant) : FHIR.R3.Resources.TFhirSequenceVariant; overload;
    class function convertSequenceQualityComponent(src : FHIR.R3.Resources.TFhirSequenceQuality) : FHIR.R4.Resources.TFhirMolecularSequenceQuality; overload;
    class function convertSequenceQualityComponent(src : FHIR.R4.Resources.TFhirMolecularSequenceQuality) : FHIR.R3.Resources.TFhirSequenceQuality; overload;
    class function convertSequenceRepositoryComponent(src : FHIR.R3.Resources.TFhirSequenceRepository) : FHIR.R4.Resources.TFhirMolecularSequenceRepository; overload;
    class function convertSequenceRepositoryComponent(src : FHIR.R4.Resources.TFhirMolecularSequenceRepository) : FHIR.R3.Resources.TFhirSequenceRepository; overload;
    class function convertSlot(src : FHIR.R3.Resources.TFhirSlot) : FHIR.R4.Resources.TFhirSlot; overload;
    class function convertSlot(src : FHIR.R4.Resources.TFhirSlot) : FHIR.R3.Resources.TFhirSlot; overload;
    class function convertSpecimen(src : FHIR.R3.Resources.TFhirSpecimen) : FHIR.R4.Resources.TFhirSpecimen; overload;
    class function convertSpecimen(src : FHIR.R4.Resources.TFhirSpecimen) : FHIR.R3.Resources.TFhirSpecimen; overload;
    class function convertSpecimenCollectionComponent(src : FHIR.R3.Resources.TFhirSpecimenCollection) : FHIR.R4.Resources.TFhirSpecimenCollection; overload;
    class function convertSpecimenCollectionComponent(src : FHIR.R4.Resources.TFhirSpecimenCollection) : FHIR.R3.Resources.TFhirSpecimenCollection; overload;
    class function convertSpecimenProcessingComponent(src : FHIR.R3.Resources.TFhirSpecimenProcessing) : FHIR.R4.Resources.TFhirSpecimenProcessing; overload;
    class function convertSpecimenProcessingComponent(src : FHIR.R4.Resources.TFhirSpecimenProcessing) : FHIR.R3.Resources.TFhirSpecimenProcessing; overload;
    class function convertSpecimenContainerComponent(src : FHIR.R3.Resources.TFhirSpecimenContainer) : FHIR.R4.Resources.TFhirSpecimenContainer; overload;
    class function convertSpecimenContainerComponent(src : FHIR.R4.Resources.TFhirSpecimenContainer) : FHIR.R3.Resources.TFhirSpecimenContainer; overload;
    class function convertStructureDefinition(src : FHIR.R3.Resources.TFhirStructureDefinition) : FHIR.R4.Resources.TFhirStructureDefinition; overload;
    class function convertStructureDefinition(src : FHIR.R4.Resources.TFhirStructureDefinition) : FHIR.R3.Resources.TFhirStructureDefinition; overload;
    class function convertStructureDefinitionMappingComponent(src : FHIR.R3.Resources.TFhirStructureDefinitionMapping) : FHIR.R4.Resources.TFhirStructureDefinitionMapping; overload;
    class function convertStructureDefinitionMappingComponent(src : FHIR.R4.Resources.TFhirStructureDefinitionMapping) : FHIR.R3.Resources.TFhirStructureDefinitionMapping; overload;
    class function convertStructureDefinitionSnapshotComponent(src : FHIR.R3.Resources.TFhirStructureDefinitionSnapshot) : FHIR.R4.Resources.TFhirStructureDefinitionSnapshot; overload;
    class function convertStructureDefinitionSnapshotComponent(src : FHIR.R4.Resources.TFhirStructureDefinitionSnapshot) : FHIR.R3.Resources.TFhirStructureDefinitionSnapshot; overload;
    class function convertStructureDefinitionDifferentialComponent(src : FHIR.R3.Resources.TFhirStructureDefinitionDifferential) : FHIR.R4.Resources.TFhirStructureDefinitionDifferential; overload;
    class function convertStructureDefinitionDifferentialComponent(src : FHIR.R4.Resources.TFhirStructureDefinitionDifferential) : FHIR.R3.Resources.TFhirStructureDefinitionDifferential; overload;
    class function convertStructureMap(src : FHIR.R3.Resources.TFhirStructureMap) : FHIR.R4.Resources.TFhirStructureMap; overload;
    class function convertStructureMap(src : FHIR.R4.Resources.TFhirStructureMap) : FHIR.R3.Resources.TFhirStructureMap; overload;
    class function convertStructureMapStructureComponent(src : FHIR.R3.Resources.TFhirStructureMapStructure) : FHIR.R4.Resources.TFhirStructureMapStructure; overload;
    class function convertStructureMapStructureComponent(src : FHIR.R4.Resources.TFhirStructureMapStructure) : FHIR.R3.Resources.TFhirStructureMapStructure; overload;
    class function convertStructureMapGroupComponent(src : FHIR.R3.Resources.TFhirStructureMapGroup) : FHIR.R4.Resources.TFhirStructureMapGroup; overload;
    class function convertStructureMapGroupComponent(src : FHIR.R4.Resources.TFhirStructureMapGroup) : FHIR.R3.Resources.TFhirStructureMapGroup; overload;
    class function convertStructureMapGroupInputComponent(src : FHIR.R3.Resources.TFhirStructureMapGroupInput) : FHIR.R4.Resources.TFhirStructureMapGroupInput; overload;
    class function convertStructureMapGroupInputComponent(src : FHIR.R4.Resources.TFhirStructureMapGroupInput) : FHIR.R3.Resources.TFhirStructureMapGroupInput; overload;
    class function convertStructureMapGroupRuleComponent(src : FHIR.R3.Resources.TFhirStructureMapGroupRule) : FHIR.R4.Resources.TFhirStructureMapGroupRule; overload;
    class function convertStructureMapGroupRuleComponent(src : FHIR.R4.Resources.TFhirStructureMapGroupRule) : FHIR.R3.Resources.TFhirStructureMapGroupRule; overload;
    class function convertStructureMapGroupRuleSourceComponent(src : FHIR.R3.Resources.TFhirStructureMapGroupRuleSource) : FHIR.R4.Resources.TFhirStructureMapGroupRuleSource; overload;
    class function convertStructureMapGroupRuleSourceComponent(src : FHIR.R4.Resources.TFhirStructureMapGroupRuleSource) : FHIR.R3.Resources.TFhirStructureMapGroupRuleSource; overload;
    class function convertStructureMapGroupRuleTargetComponent(src : FHIR.R3.Resources.TFhirStructureMapGroupRuleTarget) : FHIR.R4.Resources.TFhirStructureMapGroupRuleTarget; overload;
    class function convertStructureMapGroupRuleTargetComponent(src : FHIR.R4.Resources.TFhirStructureMapGroupRuleTarget) : FHIR.R3.Resources.TFhirStructureMapGroupRuleTarget; overload;
    class function convertStructureMapGroupRuleTargetParameterComponent(src : FHIR.R3.Resources.TFhirStructureMapGroupRuleTargetParameter) : FHIR.R4.Resources.TFhirStructureMapGroupRuleTargetParameter; overload;
    class function convertStructureMapGroupRuleTargetParameterComponent(src : FHIR.R4.Resources.TFhirStructureMapGroupRuleTargetParameter) : FHIR.R3.Resources.TFhirStructureMapGroupRuleTargetParameter; overload;
    class function convertStructureMapGroupRuleDependentComponent(src : FHIR.R3.Resources.TFhirStructureMapGroupRuleDependent) : FHIR.R4.Resources.TFhirStructureMapGroupRuleDependent; overload;
    class function convertStructureMapGroupRuleDependentComponent(src : FHIR.R4.Resources.TFhirStructureMapGroupRuleDependent) : FHIR.R3.Resources.TFhirStructureMapGroupRuleDependent; overload;
    class function convertSubscription(src : FHIR.R3.Resources.TFhirSubscription) : FHIR.R4.Resources.TFhirSubscription; overload;
    class function convertSubscription(src : FHIR.R4.Resources.TFhirSubscription) : FHIR.R3.Resources.TFhirSubscription; overload;
    class function convertSubscriptionChannelComponent(src : FHIR.R3.Resources.TFhirSubscriptionChannel) : FHIR.R4.Resources.TFhirSubscriptionChannel; overload;
    class function convertSubscriptionChannelComponent(src : FHIR.R4.Resources.TFhirSubscriptionChannel) : FHIR.R3.Resources.TFhirSubscriptionChannel; overload;
    class function convertSubstance(src : FHIR.R3.Resources.TFhirSubstance) : FHIR.R4.Resources.TFhirSubstance; overload;
    class function convertSubstance(src : FHIR.R4.Resources.TFhirSubstance) : FHIR.R3.Resources.TFhirSubstance; overload;
    class function convertSubstanceInstanceComponent(src : FHIR.R3.Resources.TFhirSubstanceInstance) : FHIR.R4.Resources.TFhirSubstanceInstance; overload;
    class function convertSubstanceInstanceComponent(src : FHIR.R4.Resources.TFhirSubstanceInstance) : FHIR.R3.Resources.TFhirSubstanceInstance; overload;
    class function convertSubstanceIngredientComponent(src : FHIR.R3.Resources.TFhirSubstanceIngredient) : FHIR.R4.Resources.TFhirSubstanceIngredient; overload;
    class function convertSubstanceIngredientComponent(src : FHIR.R4.Resources.TFhirSubstanceIngredient) : FHIR.R3.Resources.TFhirSubstanceIngredient; overload;
    class function convertSupplyDelivery(src : FHIR.R3.Resources.TFhirSupplyDelivery) : FHIR.R4.Resources.TFhirSupplyDelivery; overload;
    class function convertSupplyDelivery(src : FHIR.R4.Resources.TFhirSupplyDelivery) : FHIR.R3.Resources.TFhirSupplyDelivery; overload;
    class function convertSupplyDeliverySuppliedItemComponent(src : FHIR.R3.Resources.TFhirSupplyDeliverySuppliedItem) : FHIR.R4.Resources.TFhirSupplyDeliverySuppliedItem; overload;
    class function convertSupplyDeliverySuppliedItemComponent(src : FHIR.R4.Resources.TFhirSupplyDeliverySuppliedItem) : FHIR.R3.Resources.TFhirSupplyDeliverySuppliedItem; overload;
    class function convertValueSet(src : FHIR.R3.Resources.TFhirValueSet) : FHIR.R4.Resources.TFhirValueSet; overload;
    class function convertValueSet(src : FHIR.R4.Resources.TFhirValueSet) : FHIR.R3.Resources.TFhirValueSet; overload;
    class function convertValueSetComposeComponent(src : FHIR.R3.Resources.TFhirValueSetCompose) : FHIR.R4.Resources.TFhirValueSetCompose; overload;
    class function convertValueSetComposeComponent(src : FHIR.R4.Resources.TFhirValueSetCompose) : FHIR.R3.Resources.TFhirValueSetCompose; overload;
    class function convertConceptSetComponent(src : FHIR.R3.Resources.TFhirValueSetComposeInclude) : FHIR.R4.Resources.TFhirValueSetComposeInclude; overload;
    class function convertConceptSetComponent(src : FHIR.R4.Resources.TFhirValueSetComposeInclude) : FHIR.R3.Resources.TFhirValueSetComposeInclude; overload;
    class function convertConceptReferenceComponent(src : FHIR.R3.Resources.TFhirValueSetComposeIncludeConcept) : FHIR.R4.Resources.TFhirValueSetComposeIncludeConcept; overload;
    class function convertConceptReferenceComponent(src : FHIR.R4.Resources.TFhirValueSetComposeIncludeConcept) : FHIR.R3.Resources.TFhirValueSetComposeIncludeConcept; overload;
    class function convertConceptReferenceDesignationComponent(src : FHIR.R3.Resources.TFhirValueSetComposeIncludeConceptDesignation) : FHIR.R4.Resources.TFhirValueSetComposeIncludeConceptDesignation; overload;
    class function convertConceptReferenceDesignationComponent(src : FHIR.R4.Resources.TFhirValueSetComposeIncludeConceptDesignation) : FHIR.R3.Resources.TFhirValueSetComposeIncludeConceptDesignation; overload;
    class function convertConceptSetFilterComponent(src : FHIR.R3.Resources.TFhirValueSetComposeIncludeFilter) : FHIR.R4.Resources.TFhirValueSetComposeIncludeFilter; overload;
    class function convertConceptSetFilterComponent(src : FHIR.R4.Resources.TFhirValueSetComposeIncludeFilter) : FHIR.R3.Resources.TFhirValueSetComposeIncludeFilter; overload;
    class function convertValueSetExpansionComponent(src : FHIR.R3.Resources.TFhirValueSetExpansion) : FHIR.R4.Resources.TFhirValueSetExpansion; overload;
    class function convertValueSetExpansionComponent(src : FHIR.R4.Resources.TFhirValueSetExpansion) : FHIR.R3.Resources.TFhirValueSetExpansion; overload;
    class function convertValueSetExpansionParameterComponent(src : FHIR.R3.Resources.TFhirValueSetExpansionParameter) : FHIR.R4.Resources.TFhirValueSetExpansionParameter; overload;
    class function convertValueSetExpansionParameterComponent(src : FHIR.R4.Resources.TFhirValueSetExpansionParameter) : FHIR.R3.Resources.TFhirValueSetExpansionParameter; overload;
    class function convertValueSetExpansionContainsComponent(src : FHIR.R3.Resources.TFhirValueSetExpansionContains) : FHIR.R4.Resources.TFhirValueSetExpansionContains; overload;
    class function convertValueSetExpansionContainsComponent(src : FHIR.R4.Resources.TFhirValueSetExpansionContains) : FHIR.R3.Resources.TFhirValueSetExpansionContains; overload;
    class function convertPlanDefinition(src : FHIR.R3.Resources.TFhirPlanDefinition) : FHIR.R4.Resources.TFhirPlanDefinition; overload;
    class function convertPlanDefinition(src : FHIR.R4.Resources.TFhirPlanDefinition) : FHIR.R3.Resources.TFhirPlanDefinition; overload;
    class function convertPlanDefinitionGoalComponent(src : FHIR.R3.Resources.TFhirPlanDefinitionGoal) : FHIR.R4.Resources.TFhirPlanDefinitionGoal; overload;
    class function convertPlanDefinitionGoalComponent(src : FHIR.R4.Resources.TFhirPlanDefinitionGoal) : FHIR.R3.Resources.TFhirPlanDefinitionGoal; overload;
    class function convertPlanDefinitionGoalTargetComponent(src : FHIR.R3.Resources.TFhirPlanDefinitionGoalTarget) : FHIR.R4.Resources.TFhirPlanDefinitionGoalTarget; overload;
    class function convertPlanDefinitionGoalTargetComponent(src : FHIR.R4.Resources.TFhirPlanDefinitionGoalTarget) : FHIR.R3.Resources.TFhirPlanDefinitionGoalTarget; overload;
    class function convertPlanDefinitionActionComponent(src : FHIR.R3.Resources.TFhirPlanDefinitionAction) : FHIR.R4.Resources.TFhirPlanDefinitionAction; overload;
    class function convertPlanDefinitionActionComponent(src : FHIR.R4.Resources.TFhirPlanDefinitionAction) : FHIR.R3.Resources.TFhirPlanDefinitionAction; overload;
    class function convertPlanDefinitionActionConditionComponent(src : FHIR.R3.Resources.TFhirPlanDefinitionActionCondition) : FHIR.R4.Resources.TFhirPlanDefinitionActionCondition; overload;
    class function convertPlanDefinitionActionConditionComponent(src : FHIR.R4.Resources.TFhirPlanDefinitionActionCondition) : FHIR.R3.Resources.TFhirPlanDefinitionActionCondition; overload;
    class function convertPlanDefinitionActionRelatedActionComponent(src : FHIR.R3.Resources.TFhirPlanDefinitionActionRelatedAction) : FHIR.R4.Resources.TFhirPlanDefinitionActionRelatedAction; overload;
    class function convertPlanDefinitionActionRelatedActionComponent(src : FHIR.R4.Resources.TFhirPlanDefinitionActionRelatedAction) : FHIR.R3.Resources.TFhirPlanDefinitionActionRelatedAction; overload;
    class function convertPlanDefinitionActionParticipantComponent(src : FHIR.R3.Resources.TFhirPlanDefinitionActionParticipant) : FHIR.R4.Resources.TFhirPlanDefinitionActionParticipant; overload;
    class function convertPlanDefinitionActionParticipantComponent(src : FHIR.R4.Resources.TFhirPlanDefinitionActionParticipant) : FHIR.R3.Resources.TFhirPlanDefinitionActionParticipant; overload;
    class function convertPlanDefinitionActionDynamicValueComponent(src : FHIR.R3.Resources.TFhirPlanDefinitionActionDynamicValue) : FHIR.R4.Resources.TFhirPlanDefinitionActionDynamicValue; overload;
    class function convertPlanDefinitionActionDynamicValueComponent(src : FHIR.R4.Resources.TFhirPlanDefinitionActionDynamicValue) : FHIR.R3.Resources.TFhirPlanDefinitionActionDynamicValue; overload;
    class function convertResource(src : FHIR.R3.Resources.TFhirResource) : FHIR.R4.Resources.TFhirResource; overload;
    class function convertResource(src : FHIR.R4.Resources.TFhirResource) : FHIR.R3.Resources.TFhirResource; overload;
  end;

implementation

class procedure TVersionConvertor_30_40.copyElement(src : FHIR.R3.Types.TFhirElement; tgt : FHIR.R4.Types.TFhirElement);
var
  e : FHIR.R3.Types.TFhirExtension;
begin
  if (src.id <> '') then
    tgt.id := src.id;

  for e in src.extensionList do
  begin
      tgt.extensionList.add(convertExtension(e));
  end;
end;

class procedure TVersionConvertor_30_40.copyElement(src : FHIR.R4.Types.TFhirElement; tgt : FHIR.R3.Types.TFhirElement);
var
  e : FHIR.R4.Types.TFhirExtension;
begin
  if (src.id <> '') then
    tgt.id := src.id;

  for e in src.extensionList do
  begin
      tgt.extensionList.add(convertExtension(e));
  end;
end;

class procedure TVersionConvertor_30_40.copyBackboneElement(src : FHIR.R3.Types.TFhirBackboneElement; tgt : FHIR.R4.Types.TFhirBackboneElement);
var
  e : FHIR.R3.Types.TFhirExtension;
begin
  copyElement(src, tgt);
  for e in src.modifierExtensionList do
  begin
      tgt.modifierExtensionList.add(convertExtension(e));
  end;
end;

class procedure TVersionConvertor_30_40.copyBackboneElement(src : FHIR.R4.Types.TFhirBackboneElement; tgt : FHIR.R3.Types.TFhirBackboneElement);
var
  e : FHIR.R4.Types.TFhirExtension;
begin
  copyElement(src, tgt);
  for e in src.modifierExtensionList do
  begin
      tgt.modifierExtensionList.add(convertExtension(e));
  end;
end;

class function TVersionConvertor_30_40.convertNarrativeStatus(src : FHIR.R3.Types.TFhirNarrativeStatusEnum) : FHIR.R4.Types.TFhirNarrativeStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.NarrativeStatusGenerated: exit(FHIR.R4.Types.NarrativeStatusGenerated);
    FHIR.R3.Types.NarrativeStatusExtensions: exit(FHIR.R4.Types.NarrativeStatusExtensions);
    FHIR.R3.Types.NarrativeStatusAdditional: exit(FHIR.R4.Types.NarrativeStatusAdditional);
    FHIR.R3.Types.NarrativeStatusEmpty: exit(FHIR.R4.Types.NarrativeStatusEmpty);
    else exit(FHIR.R4.Types.NarrativeStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertNarrativeStatus(src : FHIR.R4.Types.TFhirNarrativeStatusEnum) : FHIR.R3.Types.TFhirNarrativeStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.NarrativeStatusGenerated: exit(FHIR.R3.Types.NarrativeStatusGenerated);
    FHIR.R4.Types.NarrativeStatusExtensions: exit(FHIR.R3.Types.NarrativeStatusExtensions);
    FHIR.R4.Types.NarrativeStatusAdditional: exit(FHIR.R3.Types.NarrativeStatusAdditional);
    FHIR.R4.Types.NarrativeStatusEmpty: exit(FHIR.R3.Types.NarrativeStatusEmpty);
    else exit(FHIR.R3.Types.NarrativeStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertIdentifierUse(src : FHIR.R3.Types.TFhirIdentifierUseEnum) : FHIR.R4.Types.TFhirIdentifierUseEnum;
begin
  case (src) of
    FHIR.R3.Types.IdentifierUseUsual: exit(FHIR.R4.Types.IdentifierUseUsual);
    FHIR.R3.Types.IdentifierUseOfficial: exit(FHIR.R4.Types.IdentifierUseOfficial);
    FHIR.R3.Types.IdentifierUseTemp: exit(FHIR.R4.Types.IdentifierUseTemp);
    FHIR.R3.Types.IdentifierUseSecondary: exit(FHIR.R4.Types.IdentifierUseSecondary);
    else exit(FHIR.R4.Types.IdentifierUseNull);
  end;
end;

class function TVersionConvertor_30_40.convertIdentifierUse(src : FHIR.R4.Types.TFhirIdentifierUseEnum) : FHIR.R3.Types.TFhirIdentifierUseEnum;
begin
  case (src) of
    FHIR.R4.Types.IdentifierUseUsual: exit(FHIR.R3.Types.IdentifierUseUsual);
    FHIR.R4.Types.IdentifierUseOfficial: exit(FHIR.R3.Types.IdentifierUseOfficial);
    FHIR.R4.Types.IdentifierUseTemp: exit(FHIR.R3.Types.IdentifierUseTemp);
    FHIR.R4.Types.IdentifierUseSecondary: exit(FHIR.R3.Types.IdentifierUseSecondary);
    else exit(FHIR.R3.Types.IdentifierUseNull);
  end;
end;

class function TVersionConvertor_30_40.convertQuantityComparator(src : FHIR.R3.Types.TFhirQuantityComparatorEnum) : FHIR.R4.Types.TFhirQuantityComparatorEnum;
begin
  case (src) of
    FHIR.R3.Types.QuantityComparatorLessThan: exit(FHIR.R4.Types.QuantityComparatorLessThan);
    FHIR.R3.Types.QuantityComparatorLessOrEquals: exit(FHIR.R4.Types.QuantityComparatorLessOrEquals);
    FHIR.R3.Types.QuantityComparatorGreaterOrEquals: exit(FHIR.R4.Types.QuantityComparatorGreaterOrEquals);
    FHIR.R3.Types.QuantityComparatorGreaterThan: exit(FHIR.R4.Types.QuantityComparatorGreaterThan);
    else exit(FHIR.R4.Types.QuantityComparatorNull);
  end;
end;

class function TVersionConvertor_30_40.convertQuantityComparator(src : FHIR.R4.Types.TFhirQuantityComparatorEnum) : FHIR.R3.Types.TFhirQuantityComparatorEnum;
begin
  case (src) of
    FHIR.R4.Types.QuantityComparatorLessThan: exit(FHIR.R3.Types.QuantityComparatorLessThan);
    FHIR.R4.Types.QuantityComparatorLessOrEquals: exit(FHIR.R3.Types.QuantityComparatorLessOrEquals);
    FHIR.R4.Types.QuantityComparatorGreaterOrEquals: exit(FHIR.R3.Types.QuantityComparatorGreaterOrEquals);
    FHIR.R4.Types.QuantityComparatorGreaterThan: exit(FHIR.R3.Types.QuantityComparatorGreaterThan);
    else exit(FHIR.R3.Types.QuantityComparatorNull);
  end;
end;

class function TVersionConvertor_30_40.convertAddressUse(src : FHIR.R3.Types.TFhirAddressUseEnum) : FHIR.R4.Types.TFhirAddressUseEnum;
begin
  case (src) of
    FHIR.R3.Types.AddressUseHome: exit(FHIR.R4.Types.AddressUseHome);
    FHIR.R3.Types.AddressUseWork: exit(FHIR.R4.Types.AddressUseWork);
    FHIR.R3.Types.AddressUseTemp: exit(FHIR.R4.Types.AddressUseTemp);
    FHIR.R3.Types.AddressUseOld: exit(FHIR.R4.Types.AddressUseOld);
    else exit(FHIR.R4.Types.AddressUseNull);
  end;
end;

class function TVersionConvertor_30_40.convertAddressUse(src : FHIR.R4.Types.TFhirAddressUseEnum) : FHIR.R3.Types.TFhirAddressUseEnum;
begin
  case (src) of
    FHIR.R4.Types.AddressUseHome: exit(FHIR.R3.Types.AddressUseHome);
    FHIR.R4.Types.AddressUseWork: exit(FHIR.R3.Types.AddressUseWork);
    FHIR.R4.Types.AddressUseTemp: exit(FHIR.R3.Types.AddressUseTemp);
    FHIR.R4.Types.AddressUseOld: exit(FHIR.R3.Types.AddressUseOld);
    else exit(FHIR.R3.Types.AddressUseNull);
  end;
end;

class function TVersionConvertor_30_40.convertAddressType(src : FHIR.R3.Types.TFhirAddressTypeEnum) : FHIR.R4.Types.TFhirAddressTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.AddressTypePostal: exit(FHIR.R4.Types.AddressTypePostal);
    FHIR.R3.Types.AddressTypePhysical: exit(FHIR.R4.Types.AddressTypePhysical);
    FHIR.R3.Types.AddressTypeBoth: exit(FHIR.R4.Types.AddressTypeBoth);
    else exit(FHIR.R4.Types.AddressTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertAddressType(src : FHIR.R4.Types.TFhirAddressTypeEnum) : FHIR.R3.Types.TFhirAddressTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.AddressTypePostal: exit(FHIR.R3.Types.AddressTypePostal);
    FHIR.R4.Types.AddressTypePhysical: exit(FHIR.R3.Types.AddressTypePhysical);
    FHIR.R4.Types.AddressTypeBoth: exit(FHIR.R3.Types.AddressTypeBoth);
    else exit(FHIR.R3.Types.AddressTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertContactPointSystem(src : FHIR.R3.Types.TFhirContactPointSystemEnum) : FHIR.R4.Types.TFhirContactPointSystemEnum;
begin
  case (src) of
    FHIR.R3.Types.ContactPointSystemPhone: exit(FHIR.R4.Types.ContactPointSystemPhone);
    FHIR.R3.Types.ContactPointSystemFax: exit(FHIR.R4.Types.ContactPointSystemFax);
    FHIR.R3.Types.ContactPointSystemEmail: exit(FHIR.R4.Types.ContactPointSystemEmail);
    FHIR.R3.Types.ContactPointSystemPager: exit(FHIR.R4.Types.ContactPointSystemPager);
    FHIR.R3.Types.ContactPointSystemUrl: exit(FHIR.R4.Types.ContactPointSystemUrl);
    FHIR.R3.Types.ContactPointSystemSms: exit(FHIR.R4.Types.ContactPointSystemSms);
    FHIR.R3.Types.ContactPointSystemOther: exit(FHIR.R4.Types.ContactPointSystemOther);
    else exit(FHIR.R4.Types.ContactPointSystemNull);
  end;
end;

class function TVersionConvertor_30_40.convertContactPointSystem(src : FHIR.R4.Types.TFhirContactPointSystemEnum) : FHIR.R3.Types.TFhirContactPointSystemEnum;
begin
  case (src) of
    FHIR.R4.Types.ContactPointSystemPhone: exit(FHIR.R3.Types.ContactPointSystemPhone);
    FHIR.R4.Types.ContactPointSystemFax: exit(FHIR.R3.Types.ContactPointSystemFax);
    FHIR.R4.Types.ContactPointSystemEmail: exit(FHIR.R3.Types.ContactPointSystemEmail);
    FHIR.R4.Types.ContactPointSystemPager: exit(FHIR.R3.Types.ContactPointSystemPager);
    FHIR.R4.Types.ContactPointSystemUrl: exit(FHIR.R3.Types.ContactPointSystemUrl);
    FHIR.R4.Types.ContactPointSystemSms: exit(FHIR.R3.Types.ContactPointSystemSms);
    FHIR.R4.Types.ContactPointSystemOther: exit(FHIR.R3.Types.ContactPointSystemOther);
    else exit(FHIR.R3.Types.ContactPointSystemNull);
  end;
end;

class function TVersionConvertor_30_40.convertContactPointUse(src : FHIR.R3.Types.TFhirContactPointUseEnum) : FHIR.R4.Types.TFhirContactPointUseEnum;
begin
  case (src) of
    FHIR.R3.Types.ContactPointUseHome: exit(FHIR.R4.Types.ContactPointUseHome);
    FHIR.R3.Types.ContactPointUseWork: exit(FHIR.R4.Types.ContactPointUseWork);
    FHIR.R3.Types.ContactPointUseTemp: exit(FHIR.R4.Types.ContactPointUseTemp);
    FHIR.R3.Types.ContactPointUseOld: exit(FHIR.R4.Types.ContactPointUseOld);
    FHIR.R3.Types.ContactPointUseMobile: exit(FHIR.R4.Types.ContactPointUseMobile);
    else exit(FHIR.R4.Types.ContactPointUseNull);
  end;
end;

class function TVersionConvertor_30_40.convertContactPointUse(src : FHIR.R4.Types.TFhirContactPointUseEnum) : FHIR.R3.Types.TFhirContactPointUseEnum;
begin
  case (src) of
    FHIR.R4.Types.ContactPointUseHome: exit(FHIR.R3.Types.ContactPointUseHome);
    FHIR.R4.Types.ContactPointUseWork: exit(FHIR.R3.Types.ContactPointUseWork);
    FHIR.R4.Types.ContactPointUseTemp: exit(FHIR.R3.Types.ContactPointUseTemp);
    FHIR.R4.Types.ContactPointUseOld: exit(FHIR.R3.Types.ContactPointUseOld);
    FHIR.R4.Types.ContactPointUseMobile: exit(FHIR.R3.Types.ContactPointUseMobile);
    else exit(FHIR.R3.Types.ContactPointUseNull);
  end;
end;

class function TVersionConvertor_30_40.convertContributorType(src : FHIR.R3.Types.TFhirContributorTypeEnum) : FHIR.R4.Types.TFhirContributorTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.ContributorTypeAuthor: exit(FHIR.R4.Types.ContributorTypeAuthor);
    FHIR.R3.Types.ContributorTypeEditor: exit(FHIR.R4.Types.ContributorTypeEditor);
    FHIR.R3.Types.ContributorTypeReviewer: exit(FHIR.R4.Types.ContributorTypeReviewer);
    FHIR.R3.Types.ContributorTypeEndorser: exit(FHIR.R4.Types.ContributorTypeEndorser);
    else exit(FHIR.R4.Types.ContributorTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertContributorType(src : FHIR.R4.Types.TFhirContributorTypeEnum) : FHIR.R3.Types.TFhirContributorTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.ContributorTypeAuthor: exit(FHIR.R3.Types.ContributorTypeAuthor);
    FHIR.R4.Types.ContributorTypeEditor: exit(FHIR.R3.Types.ContributorTypeEditor);
    FHIR.R4.Types.ContributorTypeReviewer: exit(FHIR.R3.Types.ContributorTypeReviewer);
    FHIR.R4.Types.ContributorTypeEndorser: exit(FHIR.R3.Types.ContributorTypeEndorser);
    else exit(FHIR.R3.Types.ContributorTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertPropertyRepresentation(src : FHIR.R3.Types.TFhirPropertyRepresentationEnum) : FHIR.R4.Types.TFhirPropertyRepresentationEnum;
begin
  case (src) of
    FHIR.R3.Types.PropertyRepresentationXmlAttr: exit(FHIR.R4.Types.PropertyRepresentationXmlAttr);
    FHIR.R3.Types.PropertyRepresentationXmlText: exit(FHIR.R4.Types.PropertyRepresentationXmlText);
    FHIR.R3.Types.PropertyRepresentationTypeAttr: exit(FHIR.R4.Types.PropertyRepresentationTypeAttr);
    FHIR.R3.Types.PropertyRepresentationCdaText: exit(FHIR.R4.Types.PropertyRepresentationCdaText);
    FHIR.R3.Types.PropertyRepresentationXhtml: exit(FHIR.R4.Types.PropertyRepresentationXhtml);
    else exit(FHIR.R4.Types.PropertyRepresentationNull);
  end;
end;

class function TVersionConvertor_30_40.convertPropertyRepresentation(src : FHIR.R4.Types.TFhirPropertyRepresentationEnum) : FHIR.R3.Types.TFhirPropertyRepresentationEnum;
begin
  case (src) of
    FHIR.R4.Types.PropertyRepresentationXmlAttr: exit(FHIR.R3.Types.PropertyRepresentationXmlAttr);
    FHIR.R4.Types.PropertyRepresentationXmlText: exit(FHIR.R3.Types.PropertyRepresentationXmlText);
    FHIR.R4.Types.PropertyRepresentationTypeAttr: exit(FHIR.R3.Types.PropertyRepresentationTypeAttr);
    FHIR.R4.Types.PropertyRepresentationCdaText: exit(FHIR.R3.Types.PropertyRepresentationCdaText);
    FHIR.R4.Types.PropertyRepresentationXhtml: exit(FHIR.R3.Types.PropertyRepresentationXhtml);
    else exit(FHIR.R3.Types.PropertyRepresentationNull);
  end;
end;

class function TVersionConvertor_30_40.convertSlicingRules(src : FHIR.R3.Types.TFhirResourceSlicingRulesEnum) : FHIR.R4.Types.TFhirResourceSlicingRulesEnum;
begin
  case (src) of
    FHIR.R3.Types.ResourceSlicingRulesClosed: exit(FHIR.R4.Types.ResourceSlicingRulesClosed);
    FHIR.R3.Types.ResourceSlicingRulesOpen: exit(FHIR.R4.Types.ResourceSlicingRulesOpen);
    FHIR.R3.Types.ResourceSlicingRulesOpenAtEnd: exit(FHIR.R4.Types.ResourceSlicingRulesOpenAtEnd);
    else exit(FHIR.R4.Types.ResourceSlicingRulesNull);
  end;
end;

class function TVersionConvertor_30_40.convertSlicingRules(src : FHIR.R4.Types.TFhirResourceSlicingRulesEnum) : FHIR.R3.Types.TFhirResourceSlicingRulesEnum;
begin
  case (src) of
    FHIR.R4.Types.ResourceSlicingRulesClosed: exit(FHIR.R3.Types.ResourceSlicingRulesClosed);
    FHIR.R4.Types.ResourceSlicingRulesOpen: exit(FHIR.R3.Types.ResourceSlicingRulesOpen);
    FHIR.R4.Types.ResourceSlicingRulesOpenAtEnd: exit(FHIR.R3.Types.ResourceSlicingRulesOpenAtEnd);
    else exit(FHIR.R3.Types.ResourceSlicingRulesNull);
  end;
end;

class function TVersionConvertor_30_40.convertDiscriminatorType(src : FHIR.R3.Types.TFhirDiscriminatorTypeEnum) : FHIR.R4.Types.TFhirDiscriminatorTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.DiscriminatorTypeValue: exit(FHIR.R4.Types.DiscriminatorTypeValue);
    FHIR.R3.Types.DiscriminatorTypeExists: exit(FHIR.R4.Types.DiscriminatorTypeExists);
    FHIR.R3.Types.DiscriminatorTypePattern: exit(FHIR.R4.Types.DiscriminatorTypePattern);
    FHIR.R3.Types.DiscriminatorTypeType: exit(FHIR.R4.Types.DiscriminatorTypeType);
    FHIR.R3.Types.DiscriminatorTypeProfile: exit(FHIR.R4.Types.DiscriminatorTypeProfile);
    else exit(FHIR.R4.Types.DiscriminatorTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertDiscriminatorType(src : FHIR.R4.Types.TFhirDiscriminatorTypeEnum) : FHIR.R3.Types.TFhirDiscriminatorTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.DiscriminatorTypeValue: exit(FHIR.R3.Types.DiscriminatorTypeValue);
    FHIR.R4.Types.DiscriminatorTypeExists: exit(FHIR.R3.Types.DiscriminatorTypeExists);
    FHIR.R4.Types.DiscriminatorTypePattern: exit(FHIR.R3.Types.DiscriminatorTypePattern);
    FHIR.R4.Types.DiscriminatorTypeType: exit(FHIR.R3.Types.DiscriminatorTypeType);
    FHIR.R4.Types.DiscriminatorTypeProfile: exit(FHIR.R3.Types.DiscriminatorTypeProfile);
    else exit(FHIR.R3.Types.DiscriminatorTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertAggregationMode(src : FHIR.R3.Types.TFhirResourceAggregationModeEnum) : FHIR.R4.Types.TFhirResourceAggregationModeEnum;
begin
  case (src) of
    FHIR.R3.Types.ResourceAggregationModeContained: exit(FHIR.R4.Types.ResourceAggregationModeContained);
    FHIR.R3.Types.ResourceAggregationModeReferenced: exit(FHIR.R4.Types.ResourceAggregationModeReferenced);
    FHIR.R3.Types.ResourceAggregationModeBundled: exit(FHIR.R4.Types.ResourceAggregationModeBundled);
    else exit(FHIR.R4.Types.ResourceAggregationModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertAggregationMode(src : FHIR.R4.Types.TFhirResourceAggregationModeEnum) : FHIR.R3.Types.TFhirResourceAggregationModeEnum;
begin
  case (src) of
    FHIR.R4.Types.ResourceAggregationModeContained: exit(FHIR.R3.Types.ResourceAggregationModeContained);
    FHIR.R4.Types.ResourceAggregationModeReferenced: exit(FHIR.R3.Types.ResourceAggregationModeReferenced);
    FHIR.R4.Types.ResourceAggregationModeBundled: exit(FHIR.R3.Types.ResourceAggregationModeBundled);
    else exit(FHIR.R3.Types.ResourceAggregationModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertReferenceVersionRules(src : FHIR.R3.Types.TFhirReferenceVersionRulesEnum) : FHIR.R4.Types.TFhirReferenceVersionRulesEnum;
begin
  case (src) of
    FHIR.R3.Types.ReferenceVersionRulesEither: exit(FHIR.R4.Types.ReferenceVersionRulesEither);
    FHIR.R3.Types.ReferenceVersionRulesIndependent: exit(FHIR.R4.Types.ReferenceVersionRulesIndependent);
    FHIR.R3.Types.ReferenceVersionRulesSpecific: exit(FHIR.R4.Types.ReferenceVersionRulesSpecific);
    else exit(FHIR.R4.Types.ReferenceVersionRulesNull);
  end;
end;

class function TVersionConvertor_30_40.convertReferenceVersionRules(src : FHIR.R4.Types.TFhirReferenceVersionRulesEnum) : FHIR.R3.Types.TFhirReferenceVersionRulesEnum;
begin
  case (src) of
    FHIR.R4.Types.ReferenceVersionRulesEither: exit(FHIR.R3.Types.ReferenceVersionRulesEither);
    FHIR.R4.Types.ReferenceVersionRulesIndependent: exit(FHIR.R3.Types.ReferenceVersionRulesIndependent);
    FHIR.R4.Types.ReferenceVersionRulesSpecific: exit(FHIR.R3.Types.ReferenceVersionRulesSpecific);
    else exit(FHIR.R3.Types.ReferenceVersionRulesNull);
  end;
end;

class function TVersionConvertor_30_40.convertConstraintSeverity(src : FHIR.R3.Types.TFhirConstraintSeverityEnum) : FHIR.R4.Types.TFhirConstraintSeverityEnum;
begin
  case (src) of
    FHIR.R3.Types.ConstraintSeverityError: exit(FHIR.R4.Types.ConstraintSeverityError);
    FHIR.R3.Types.ConstraintSeverityWarning: exit(FHIR.R4.Types.ConstraintSeverityWarning);
    else exit(FHIR.R4.Types.ConstraintSeverityNull);
  end;
end;

class function TVersionConvertor_30_40.convertConstraintSeverity(src : FHIR.R4.Types.TFhirConstraintSeverityEnum) : FHIR.R3.Types.TFhirConstraintSeverityEnum;
begin
  case (src) of
    FHIR.R4.Types.ConstraintSeverityError: exit(FHIR.R3.Types.ConstraintSeverityError);
    FHIR.R4.Types.ConstraintSeverityWarning: exit(FHIR.R3.Types.ConstraintSeverityWarning);
    else exit(FHIR.R3.Types.ConstraintSeverityNull);
  end;
end;

class function TVersionConvertor_30_40.convertBindingStrength(src : FHIR.R3.Types.TFhirBindingStrengthEnum) : FHIR.R4.Types.TFhirBindingStrengthEnum;
begin
  case (src) of
    FHIR.R3.Types.BindingStrengthRequired: exit(FHIR.R4.Types.BindingStrengthRequired);
    FHIR.R3.Types.BindingStrengthExtensible: exit(FHIR.R4.Types.BindingStrengthExtensible);
    FHIR.R3.Types.BindingStrengthPreferred: exit(FHIR.R4.Types.BindingStrengthPreferred);
    FHIR.R3.Types.BindingStrengthExample: exit(FHIR.R4.Types.BindingStrengthExample);
    else exit(FHIR.R4.Types.BindingStrengthNull);
  end;
end;

class function TVersionConvertor_30_40.convertBindingStrength(src : FHIR.R4.Types.TFhirBindingStrengthEnum) : FHIR.R3.Types.TFhirBindingStrengthEnum;
begin
  case (src) of
    FHIR.R4.Types.BindingStrengthRequired: exit(FHIR.R3.Types.BindingStrengthRequired);
    FHIR.R4.Types.BindingStrengthExtensible: exit(FHIR.R3.Types.BindingStrengthExtensible);
    FHIR.R4.Types.BindingStrengthPreferred: exit(FHIR.R3.Types.BindingStrengthPreferred);
    FHIR.R4.Types.BindingStrengthExample: exit(FHIR.R3.Types.BindingStrengthExample);
    else exit(FHIR.R3.Types.BindingStrengthNull);
  end;
end;

class function TVersionConvertor_30_40.convertNameUse(src : FHIR.R3.Types.TFhirNameUseEnum) : FHIR.R4.Types.TFhirNameUseEnum;
begin
  case (src) of
    FHIR.R3.Types.NameUseUsual: exit(FHIR.R4.Types.NameUseUsual);
    FHIR.R3.Types.NameUseOfficial: exit(FHIR.R4.Types.NameUseOfficial);
    FHIR.R3.Types.NameUseTemp: exit(FHIR.R4.Types.NameUseTemp);
    FHIR.R3.Types.NameUseNickname: exit(FHIR.R4.Types.NameUseNickname);
    FHIR.R3.Types.NameUseAnonymous: exit(FHIR.R4.Types.NameUseAnonymous);
    FHIR.R3.Types.NameUseOld: exit(FHIR.R4.Types.NameUseOld);
    FHIR.R3.Types.NameUseMaiden: exit(FHIR.R4.Types.NameUseMaiden);
    else exit(FHIR.R4.Types.NameUseNull);
  end;
end;

class function TVersionConvertor_30_40.convertNameUse(src : FHIR.R4.Types.TFhirNameUseEnum) : FHIR.R3.Types.TFhirNameUseEnum;
begin
  case (src) of
    FHIR.R4.Types.NameUseUsual: exit(FHIR.R3.Types.NameUseUsual);
    FHIR.R4.Types.NameUseOfficial: exit(FHIR.R3.Types.NameUseOfficial);
    FHIR.R4.Types.NameUseTemp: exit(FHIR.R3.Types.NameUseTemp);
    FHIR.R4.Types.NameUseNickname: exit(FHIR.R3.Types.NameUseNickname);
    FHIR.R4.Types.NameUseAnonymous: exit(FHIR.R3.Types.NameUseAnonymous);
    FHIR.R4.Types.NameUseOld: exit(FHIR.R3.Types.NameUseOld);
    FHIR.R4.Types.NameUseMaiden: exit(FHIR.R3.Types.NameUseMaiden);
    else exit(FHIR.R3.Types.NameUseNull);
  end;
end;

class function TVersionConvertor_30_40.convertParameterUse(src : FHIR.R3.Types.TFhirOperationParameterUseEnum) : FHIR.R4.Types.TFhirOperationParameterUseEnum;
begin
  case (src) of
    FHIR.R3.Types.OperationParameterUseIn: exit(FHIR.R4.Types.OperationParameterUseIn);
    FHIR.R3.Types.OperationParameterUseOut: exit(FHIR.R4.Types.OperationParameterUseOut);
    else exit(FHIR.R4.Types.OperationParameterUseNull);
  end;
end;

class function TVersionConvertor_30_40.convertParameterUse(src : FHIR.R4.Types.TFhirOperationParameterUseEnum) : FHIR.R3.Types.TFhirOperationParameterUseEnum;
begin
  case (src) of
    FHIR.R4.Types.OperationParameterUseIn: exit(FHIR.R3.Types.OperationParameterUseIn);
    FHIR.R4.Types.OperationParameterUseOut: exit(FHIR.R3.Types.OperationParameterUseOut);
    else exit(FHIR.R3.Types.OperationParameterUseNull);
  end;
end;

class function TVersionConvertor_30_40.convertRelatedArtifactType(src : FHIR.R3.Types.TFhirRelatedArtifactTypeEnum) : FHIR.R4.Types.TFhirRelatedArtifactTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.RelatedArtifactTypeDocumentation: exit(FHIR.R4.Types.RelatedArtifactTypeDocumentation);
    FHIR.R3.Types.RelatedArtifactTypeJustification: exit(FHIR.R4.Types.RelatedArtifactTypeJustification);
    FHIR.R3.Types.RelatedArtifactTypeCitation: exit(FHIR.R4.Types.RelatedArtifactTypeCitation);
    FHIR.R3.Types.RelatedArtifactTypePredecessor: exit(FHIR.R4.Types.RelatedArtifactTypePredecessor);
    FHIR.R3.Types.RelatedArtifactTypeSuccessor: exit(FHIR.R4.Types.RelatedArtifactTypeSuccessor);
    FHIR.R3.Types.RelatedArtifactTypeDerivedFrom: exit(FHIR.R4.Types.RelatedArtifactTypeDerivedFrom);
    FHIR.R3.Types.RelatedArtifactTypeDependsOn: exit(FHIR.R4.Types.RelatedArtifactTypeDependsOn);
    FHIR.R3.Types.RelatedArtifactTypeComposedOf: exit(FHIR.R4.Types.RelatedArtifactTypeComposedOf);
    else exit(FHIR.R4.Types.RelatedArtifactTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertRelatedArtifactType(src : FHIR.R4.Types.TFhirRelatedArtifactTypeEnum) : FHIR.R3.Types.TFhirRelatedArtifactTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.RelatedArtifactTypeDocumentation: exit(FHIR.R3.Types.RelatedArtifactTypeDocumentation);
    FHIR.R4.Types.RelatedArtifactTypeJustification: exit(FHIR.R3.Types.RelatedArtifactTypeJustification);
    FHIR.R4.Types.RelatedArtifactTypeCitation: exit(FHIR.R3.Types.RelatedArtifactTypeCitation);
    FHIR.R4.Types.RelatedArtifactTypePredecessor: exit(FHIR.R3.Types.RelatedArtifactTypePredecessor);
    FHIR.R4.Types.RelatedArtifactTypeSuccessor: exit(FHIR.R3.Types.RelatedArtifactTypeSuccessor);
    FHIR.R4.Types.RelatedArtifactTypeDerivedFrom: exit(FHIR.R3.Types.RelatedArtifactTypeDerivedFrom);
    FHIR.R4.Types.RelatedArtifactTypeDependsOn: exit(FHIR.R3.Types.RelatedArtifactTypeDependsOn);
    FHIR.R4.Types.RelatedArtifactTypeComposedOf: exit(FHIR.R3.Types.RelatedArtifactTypeComposedOf);
    else exit(FHIR.R3.Types.RelatedArtifactTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertUnitsOfTime(src : FHIR.R3.Types.TFhirUnitsOfTimeEnum) : FHIR.R4.Types.TFhirUnitsOfTimeEnum;
begin
  case (src) of
    FHIR.R3.Types.UnitsOfTimeS: exit(FHIR.R4.Types.UnitsOfTimeS);
    FHIR.R3.Types.UnitsOfTimeMin: exit(FHIR.R4.Types.UnitsOfTimeMin);
    FHIR.R3.Types.UnitsOfTimeH: exit(FHIR.R4.Types.UnitsOfTimeH);
    FHIR.R3.Types.UnitsOfTimeD: exit(FHIR.R4.Types.UnitsOfTimeD);
    FHIR.R3.Types.UnitsOfTimeWk: exit(FHIR.R4.Types.UnitsOfTimeWk);
    FHIR.R3.Types.UnitsOfTimeMo: exit(FHIR.R4.Types.UnitsOfTimeMo);
    FHIR.R3.Types.UnitsOfTimeA: exit(FHIR.R4.Types.UnitsOfTimeA);
    else exit(FHIR.R4.Types.UnitsOfTimeNull);
  end;
end;

class function TVersionConvertor_30_40.convertUnitsOfTime(src : FHIR.R4.Types.TFhirUnitsOfTimeEnum) : FHIR.R3.Types.TFhirUnitsOfTimeEnum;
begin
  case (src) of
    FHIR.R4.Types.UnitsOfTimeS: exit(FHIR.R3.Types.UnitsOfTimeS);
    FHIR.R4.Types.UnitsOfTimeMin: exit(FHIR.R3.Types.UnitsOfTimeMin);
    FHIR.R4.Types.UnitsOfTimeH: exit(FHIR.R3.Types.UnitsOfTimeH);
    FHIR.R4.Types.UnitsOfTimeD: exit(FHIR.R3.Types.UnitsOfTimeD);
    FHIR.R4.Types.UnitsOfTimeWk: exit(FHIR.R3.Types.UnitsOfTimeWk);
    FHIR.R4.Types.UnitsOfTimeMo: exit(FHIR.R3.Types.UnitsOfTimeMo);
    FHIR.R4.Types.UnitsOfTimeA: exit(FHIR.R3.Types.UnitsOfTimeA);
    else exit(FHIR.R3.Types.UnitsOfTimeNull);
  end;
end;

class function TVersionConvertor_30_40.convertDayOfWeek(src : FHIR.R3.Types.TFhirDaysOfWeekEnum) : FHIR.R4.Types.TFhirDaysOfWeekEnum;
begin
  case (src) of
    FHIR.R3.Types.DaysOfWeekMon: exit(FHIR.R4.Types.DaysOfWeekMon);
    FHIR.R3.Types.DaysOfWeekTue: exit(FHIR.R4.Types.DaysOfWeekTue);
    FHIR.R3.Types.DaysOfWeekWed: exit(FHIR.R4.Types.DaysOfWeekWed);
    FHIR.R3.Types.DaysOfWeekThu: exit(FHIR.R4.Types.DaysOfWeekThu);
    FHIR.R3.Types.DaysOfWeekFri: exit(FHIR.R4.Types.DaysOfWeekFri);
    FHIR.R3.Types.DaysOfWeekSat: exit(FHIR.R4.Types.DaysOfWeekSat);
    FHIR.R3.Types.DaysOfWeekSun: exit(FHIR.R4.Types.DaysOfWeekSun);
    else exit(FHIR.R4.Types.DaysOfWeekNull);
  end;
end;

class function TVersionConvertor_30_40.convertDayOfWeek(src : FHIR.R4.Types.TFhirDaysOfWeekEnum) : FHIR.R3.Types.TFhirDaysOfWeekEnum;
begin
  case (src) of
    FHIR.R4.Types.DaysOfWeekMon: exit(FHIR.R3.Types.DaysOfWeekMon);
    FHIR.R4.Types.DaysOfWeekTue: exit(FHIR.R3.Types.DaysOfWeekTue);
    FHIR.R4.Types.DaysOfWeekWed: exit(FHIR.R3.Types.DaysOfWeekWed);
    FHIR.R4.Types.DaysOfWeekThu: exit(FHIR.R3.Types.DaysOfWeekThu);
    FHIR.R4.Types.DaysOfWeekFri: exit(FHIR.R3.Types.DaysOfWeekFri);
    FHIR.R4.Types.DaysOfWeekSat: exit(FHIR.R3.Types.DaysOfWeekSat);
    FHIR.R4.Types.DaysOfWeekSun: exit(FHIR.R3.Types.DaysOfWeekSun);
    else exit(FHIR.R3.Types.DaysOfWeekNull);
  end;
end;

class function TVersionConvertor_30_40.convertEventTiming(src : FHIR.R3.Types.TFhirEventTimingEnum) : FHIR.R4.Types.TFhirEventTimingEnum;
begin
  case (src) of
    FHIR.R3.Types.EventTimingMORN: exit(FHIR.R4.Types.EventTimingMORN);
    FHIR.R3.Types.EventTimingAFT: exit(FHIR.R4.Types.EventTimingAFT);
    FHIR.R3.Types.EventTimingEVE: exit(FHIR.R4.Types.EventTimingEVE);
    FHIR.R3.Types.EventTimingNIGHT: exit(FHIR.R4.Types.EventTimingNIGHT);
    FHIR.R3.Types.EventTimingPHS: exit(FHIR.R4.Types.EventTimingPHS);
    FHIR.R3.Types.EventTimingHS: exit(FHIR.R4.Types.EventTimingHS);
    FHIR.R3.Types.EventTimingWAKE: exit(FHIR.R4.Types.EventTimingWAKE);
    FHIR.R3.Types.EventTimingC: exit(FHIR.R4.Types.EventTimingC);
    FHIR.R3.Types.EventTimingCM: exit(FHIR.R4.Types.EventTimingCM);
    FHIR.R3.Types.EventTimingCD: exit(FHIR.R4.Types.EventTimingCD);
    FHIR.R3.Types.EventTimingCV: exit(FHIR.R4.Types.EventTimingCV);
    FHIR.R3.Types.EventTimingAC: exit(FHIR.R4.Types.EventTimingAC);
    FHIR.R3.Types.EventTimingACM: exit(FHIR.R4.Types.EventTimingACM);
    FHIR.R3.Types.EventTimingACD: exit(FHIR.R4.Types.EventTimingACD);
    FHIR.R3.Types.EventTimingACV: exit(FHIR.R4.Types.EventTimingACV);
    FHIR.R3.Types.EventTimingPC: exit(FHIR.R4.Types.EventTimingPC);
    FHIR.R3.Types.EventTimingPCM: exit(FHIR.R4.Types.EventTimingPCM);
    FHIR.R3.Types.EventTimingPCD: exit(FHIR.R4.Types.EventTimingPCD);
    FHIR.R3.Types.EventTimingPCV: exit(FHIR.R4.Types.EventTimingPCV);
    else exit(FHIR.R4.Types.EventTimingNull);
  end;
end;

class function TVersionConvertor_30_40.convertEventTiming(src : FHIR.R4.Types.TFhirEventTimingEnum) : FHIR.R3.Types.TFhirEventTimingEnum;
begin
  case (src) of
    FHIR.R4.Types.EventTimingMORN: exit(FHIR.R3.Types.EventTimingMORN);
    FHIR.R4.Types.EventTimingAFT: exit(FHIR.R3.Types.EventTimingAFT);
    FHIR.R4.Types.EventTimingEVE: exit(FHIR.R3.Types.EventTimingEVE);
    FHIR.R4.Types.EventTimingNIGHT: exit(FHIR.R3.Types.EventTimingNIGHT);
    FHIR.R4.Types.EventTimingPHS: exit(FHIR.R3.Types.EventTimingPHS);
    FHIR.R4.Types.EventTimingHS: exit(FHIR.R3.Types.EventTimingHS);
    FHIR.R4.Types.EventTimingWAKE: exit(FHIR.R3.Types.EventTimingWAKE);
    FHIR.R4.Types.EventTimingC: exit(FHIR.R3.Types.EventTimingC);
    FHIR.R4.Types.EventTimingCM: exit(FHIR.R3.Types.EventTimingCM);
    FHIR.R4.Types.EventTimingCD: exit(FHIR.R3.Types.EventTimingCD);
    FHIR.R4.Types.EventTimingCV: exit(FHIR.R3.Types.EventTimingCV);
    FHIR.R4.Types.EventTimingAC: exit(FHIR.R3.Types.EventTimingAC);
    FHIR.R4.Types.EventTimingACM: exit(FHIR.R3.Types.EventTimingACM);
    FHIR.R4.Types.EventTimingACD: exit(FHIR.R3.Types.EventTimingACD);
    FHIR.R4.Types.EventTimingACV: exit(FHIR.R3.Types.EventTimingACV);
    FHIR.R4.Types.EventTimingPC: exit(FHIR.R3.Types.EventTimingPC);
    FHIR.R4.Types.EventTimingPCM: exit(FHIR.R3.Types.EventTimingPCM);
    FHIR.R4.Types.EventTimingPCD: exit(FHIR.R3.Types.EventTimingPCD);
    FHIR.R4.Types.EventTimingPCV: exit(FHIR.R3.Types.EventTimingPCV);
    else exit(FHIR.R3.Types.EventTimingNull);
  end;
end;

class function TVersionConvertor_30_40.convertTriggerType(src : FHIR.R3.Types.TFhirTriggerTypeEnum) : FHIR.R4.Types.TFhirTriggerTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.TriggerTypeNamedEvent: exit(FHIR.R4.Types.TriggerTypeNamedEvent);
    FHIR.R3.Types.TriggerTypePeriodic: exit(FHIR.R4.Types.TriggerTypePeriodic);
    FHIR.R3.Types.TriggerTypeDataAdded: exit(FHIR.R4.Types.TriggerTypeDataAdded);
    FHIR.R3.Types.TriggerTypeDataModified: exit(FHIR.R4.Types.TriggerTypeDataModified);
    FHIR.R3.Types.TriggerTypeDataRemoved: exit(FHIR.R4.Types.TriggerTypeDataRemoved);
    FHIR.R3.Types.TriggerTypeDataAccessed: exit(FHIR.R4.Types.TriggerTypeDataAccessed);
    FHIR.R3.Types.TriggerTypeDataAccessEnded: exit(FHIR.R4.Types.TriggerTypeDataAccessEnded);
    else exit(FHIR.R4.Types.TriggerTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertTriggerType(src : FHIR.R4.Types.TFhirTriggerTypeEnum) : FHIR.R3.Types.TFhirTriggerTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.TriggerTypeNamedEvent: exit(FHIR.R3.Types.TriggerTypeNamedEvent);
    FHIR.R4.Types.TriggerTypePeriodic: exit(FHIR.R3.Types.TriggerTypePeriodic);
    FHIR.R4.Types.TriggerTypeDataAdded: exit(FHIR.R3.Types.TriggerTypeDataAdded);
    FHIR.R4.Types.TriggerTypeDataModified: exit(FHIR.R3.Types.TriggerTypeDataModified);
    FHIR.R4.Types.TriggerTypeDataRemoved: exit(FHIR.R3.Types.TriggerTypeDataRemoved);
    FHIR.R4.Types.TriggerTypeDataAccessed: exit(FHIR.R3.Types.TriggerTypeDataAccessed);
    FHIR.R4.Types.TriggerTypeDataAccessEnded: exit(FHIR.R3.Types.TriggerTypeDataAccessEnded);
    else exit(FHIR.R3.Types.TriggerTypeNull);
  end;
end;

class procedure TVersionConvertor_30_40.copyDomainResource(src : FHIR.R3.Resources.TFhirDomainResource; tgt : FHIR.R4.Resources.TFhirDomainResource);
var
  t1 : FHIR.R3.Resources.TFhirResource;
  t2 : FHIR.R3.Types.TFhirExtension;
  t3 : FHIR.R3.Types.TFhirExtension;
begin
  copyResource(src, tgt);
  if (src.text <> nil) then
    tgt.text := convertNarrative(src.text);

  for t1 in src.containedList do
  begin
    tgt.containedList.add(convertResource(t1));
  end;
  for t2 in src.extensionList do
  begin
    tgt.extensionList.add(convertExtension(t2));
  end;
  for t3 in src.modifierExtensionList do
  begin
    tgt.modifierExtensionList.add(convertExtension(t3));
  end;
end;

class procedure TVersionConvertor_30_40.copyDomainResource(src : FHIR.R4.Resources.TFhirDomainResource; tgt : FHIR.R3.Resources.TFhirDomainResource);
var
  t1 : FHIR.R4.Resources.TFhirResource;
  t2 : FHIR.R4.Types.TFhirExtension;
  t3 : FHIR.R4.Types.TFhirExtension;
begin
  copyResource(src, tgt);
  if (src.text <> nil) then
    tgt.text := convertNarrative(src.text);

  for t1 in src.containedList do
  begin
    tgt.containedList.add(convertResource(t1));
  end;
  for t2 in src.extensionList do
  begin
    tgt.extensionList.add(convertExtension(t2));
  end;
  for t3 in src.modifierExtensionList do
  begin
    tgt.modifierExtensionList.add(convertExtension(t3));
  end;
end;

class procedure TVersionConvertor_30_40.copyResource(src : FHIR.R3.Resources.TFhirResource; tgt : FHIR.R4.Resources.TFhirResource);
begin
  if (src.id <> '') then
    tgt.id := src.id;

  if (src.meta <> nil) then
    tgt.meta := convertMeta(src.meta);

  if (src.implicitRules <> '') then
    tgt.implicitRules := src.implicitRules;

  if (src.language <> '') then
    tgt.language := src.language;

end;

class procedure TVersionConvertor_30_40.copyResource(src : FHIR.R4.Resources.TFhirResource; tgt : FHIR.R3.Resources.TFhirResource);
begin
  if (src.id <> '') then
    tgt.id := src.id;

  if (src.meta <> nil) then
    tgt.meta := convertMeta(src.meta);

  if (src.implicitRules <> '') then
    tgt.implicitRules := src.implicitRules;

  if (src.language <> '') then
    tgt.language := src.language;

end;

class function TVersionConvertor_30_40.convertPublicationStatus(src : FHIR.R3.Types.TFhirPublicationStatusEnum) : FHIR.R4.Types.TFhirPublicationStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.PublicationStatusDraft: exit(FHIR.R4.Types.PublicationStatusDraft);
    FHIR.R3.Types.PublicationStatusActive: exit(FHIR.R4.Types.PublicationStatusActive);
    FHIR.R3.Types.PublicationStatusRetired: exit(FHIR.R4.Types.PublicationStatusRetired);
    FHIR.R3.Types.PublicationStatusUnknown: exit(FHIR.R4.Types.PublicationStatusUnknown);
    else exit(FHIR.R4.Types.PublicationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertPublicationStatus(src : FHIR.R4.Types.TFhirPublicationStatusEnum) : FHIR.R3.Types.TFhirPublicationStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.PublicationStatusDraft: exit(FHIR.R3.Types.PublicationStatusDraft);
    FHIR.R4.Types.PublicationStatusActive: exit(FHIR.R3.Types.PublicationStatusActive);
    FHIR.R4.Types.PublicationStatusRetired: exit(FHIR.R3.Types.PublicationStatusRetired);
    FHIR.R4.Types.PublicationStatusUnknown: exit(FHIR.R3.Types.PublicationStatusUnknown);
    else exit(FHIR.R3.Types.PublicationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertActivityDefinitionKind(src : FHIR.R3.Types.TFhirResourceTypesEnum) : FHIR.R4.Types.TFhirResourceTypesEnum;
begin
  case (src) of
    FHIR.R3.Types.ResourceTypesAccount: exit(FHIR.R4.Types.ResourceTypesAccount);
    FHIR.R3.Types.ResourceTypesActivityDefinition: exit(FHIR.R4.Types.ResourceTypesActivityDefinition);
    FHIR.R3.Types.ResourceTypesAdverseEvent: exit(FHIR.R4.Types.ResourceTypesAdverseEvent);
    FHIR.R3.Types.ResourceTypesAllergyIntolerance: exit(FHIR.R4.Types.ResourceTypesAllergyIntolerance);
    FHIR.R3.Types.ResourceTypesAppointment: exit(FHIR.R4.Types.ResourceTypesAppointment);
    FHIR.R3.Types.ResourceTypesAppointmentResponse: exit(FHIR.R4.Types.ResourceTypesAppointmentResponse);
    FHIR.R3.Types.ResourceTypesAuditEvent: exit(FHIR.R4.Types.ResourceTypesAuditEvent);
    FHIR.R3.Types.ResourceTypesBasic: exit(FHIR.R4.Types.ResourceTypesBasic);
    FHIR.R3.Types.ResourceTypesBinary: exit(FHIR.R4.Types.ResourceTypesBinary);
    FHIR.R3.Types.ResourceTypesBodySite: exit(FHIR.R4.Types.ResourceTypesBodyStructure);
    FHIR.R3.Types.ResourceTypesBundle: exit(FHIR.R4.Types.ResourceTypesBundle);
    FHIR.R3.Types.ResourceTypesCapabilityStatement: exit(FHIR.R4.Types.ResourceTypesCapabilityStatement);
    FHIR.R3.Types.ResourceTypesCarePlan: exit(FHIR.R4.Types.ResourceTypesCarePlan);
    FHIR.R3.Types.ResourceTypesCareTeam: exit(FHIR.R4.Types.ResourceTypesCareTeam);
    FHIR.R3.Types.ResourceTypesChargeItem: exit(FHIR.R4.Types.ResourceTypesChargeItem);
    FHIR.R3.Types.ResourceTypesClaim: exit(FHIR.R4.Types.ResourceTypesClaim);
    FHIR.R3.Types.ResourceTypesClaimResponse: exit(FHIR.R4.Types.ResourceTypesClaimResponse);
    FHIR.R3.Types.ResourceTypesClinicalImpression: exit(FHIR.R4.Types.ResourceTypesClinicalImpression);
    FHIR.R3.Types.ResourceTypesCodeSystem: exit(FHIR.R4.Types.ResourceTypesCodeSystem);
    FHIR.R3.Types.ResourceTypesCommunication: exit(FHIR.R4.Types.ResourceTypesCommunication);
    FHIR.R3.Types.ResourceTypesCommunicationRequest: exit(FHIR.R4.Types.ResourceTypesCommunicationRequest);
    FHIR.R3.Types.ResourceTypesCompartmentDefinition: exit(FHIR.R4.Types.ResourceTypesCompartmentDefinition);
    FHIR.R3.Types.ResourceTypesComposition: exit(FHIR.R4.Types.ResourceTypesComposition);
    FHIR.R3.Types.ResourceTypesConceptMap: exit(FHIR.R4.Types.ResourceTypesConceptMap);
    FHIR.R3.Types.ResourceTypesCondition: exit(FHIR.R4.Types.ResourceTypesCondition);
    FHIR.R3.Types.ResourceTypesConsent: exit(FHIR.R4.Types.ResourceTypesConsent);
    FHIR.R3.Types.ResourceTypesContract: exit(FHIR.R4.Types.ResourceTypesContract);
    FHIR.R3.Types.ResourceTypesCoverage: exit(FHIR.R4.Types.ResourceTypesCoverage);
    FHIR.R3.Types.ResourceTypesDetectedIssue: exit(FHIR.R4.Types.ResourceTypesDetectedIssue);
    FHIR.R3.Types.ResourceTypesDevice: exit(FHIR.R4.Types.ResourceTypesDevice);
    FHIR.R3.Types.ResourceTypesDeviceMetric: exit(FHIR.R4.Types.ResourceTypesDeviceMetric);
    FHIR.R3.Types.ResourceTypesDeviceRequest: exit(FHIR.R4.Types.ResourceTypesDeviceRequest);
    FHIR.R3.Types.ResourceTypesDeviceUseStatement: exit(FHIR.R4.Types.ResourceTypesDeviceUseStatement);
    FHIR.R3.Types.ResourceTypesDiagnosticReport: exit(FHIR.R4.Types.ResourceTypesDiagnosticReport);
    FHIR.R3.Types.ResourceTypesDocumentManifest: exit(FHIR.R4.Types.ResourceTypesDocumentManifest);
    FHIR.R3.Types.ResourceTypesDocumentReference: exit(FHIR.R4.Types.ResourceTypesDocumentReference);
    FHIR.R3.Types.ResourceTypesDomainResource: exit(FHIR.R4.Types.ResourceTypesDomainResource);
    FHIR.R3.Types.ResourceTypesEligibilityRequest: exit(FHIR.R4.Types.ResourceTypesCoverageEligibilityRequest);
    FHIR.R3.Types.ResourceTypesEligibilityResponse: exit(FHIR.R4.Types.ResourceTypesCoverageEligibilityResponse);
    FHIR.R3.Types.ResourceTypesEncounter: exit(FHIR.R4.Types.ResourceTypesEncounter);
    FHIR.R3.Types.ResourceTypesEndpoint: exit(FHIR.R4.Types.ResourceTypesEndpoint);
    FHIR.R3.Types.ResourceTypesEnrollmentRequest: exit(FHIR.R4.Types.ResourceTypesEnrollmentRequest);
    FHIR.R3.Types.ResourceTypesEnrollmentResponse: exit(FHIR.R4.Types.ResourceTypesEnrollmentResponse);
    FHIR.R3.Types.ResourceTypesEpisodeOfCare: exit(FHIR.R4.Types.ResourceTypesEpisodeOfCare);
    FHIR.R3.Types.ResourceTypesExpansionProfile: exit(FHIR.R4.Types.ResourceTypesParameters);
    FHIR.R3.Types.ResourceTypesExplanationOfBenefit: exit(FHIR.R4.Types.ResourceTypesExplanationOfBenefit);
    FHIR.R3.Types.ResourceTypesFamilyMemberHistory: exit(FHIR.R4.Types.ResourceTypesFamilyMemberHistory);
    FHIR.R3.Types.ResourceTypesFlag: exit(FHIR.R4.Types.ResourceTypesFlag);
    FHIR.R3.Types.ResourceTypesGoal: exit(FHIR.R4.Types.ResourceTypesGoal);
    FHIR.R3.Types.ResourceTypesGraphDefinition: exit(FHIR.R4.Types.ResourceTypesGraphDefinition);
    FHIR.R3.Types.ResourceTypesGroup: exit(FHIR.R4.Types.ResourceTypesGroup);
    FHIR.R3.Types.ResourceTypesGuidanceResponse: exit(FHIR.R4.Types.ResourceTypesGuidanceResponse);
    FHIR.R3.Types.ResourceTypesHealthcareService: exit(FHIR.R4.Types.ResourceTypesHealthcareService);
    FHIR.R3.Types.ResourceTypesImagingStudy: exit(FHIR.R4.Types.ResourceTypesImagingStudy);
    FHIR.R3.Types.ResourceTypesImmunization: exit(FHIR.R4.Types.ResourceTypesImmunization);
    FHIR.R3.Types.ResourceTypesImmunizationRecommendation: exit(FHIR.R4.Types.ResourceTypesImmunizationRecommendation);
    FHIR.R3.Types.ResourceTypesImplementationGuide: exit(FHIR.R4.Types.ResourceTypesImplementationGuide);
    FHIR.R3.Types.ResourceTypesLibrary: exit(FHIR.R4.Types.ResourceTypesLibrary);
    FHIR.R3.Types.ResourceTypesLinkage: exit(FHIR.R4.Types.ResourceTypesLinkage);
    FHIR.R3.Types.ResourceTypesList: exit(FHIR.R4.Types.ResourceTypesList);
    FHIR.R3.Types.ResourceTypesLocation: exit(FHIR.R4.Types.ResourceTypesLocation);
    FHIR.R3.Types.ResourceTypesMeasure: exit(FHIR.R4.Types.ResourceTypesMeasure);
    FHIR.R3.Types.ResourceTypesMeasureReport: exit(FHIR.R4.Types.ResourceTypesMeasureReport);
    FHIR.R3.Types.ResourceTypesMedia: exit(FHIR.R4.Types.ResourceTypesMedia);
    FHIR.R3.Types.ResourceTypesMedication: exit(FHIR.R4.Types.ResourceTypesMedication);
    FHIR.R3.Types.ResourceTypesMedicationAdministration: exit(FHIR.R4.Types.ResourceTypesMedicationAdministration);
    FHIR.R3.Types.ResourceTypesMedicationDispense: exit(FHIR.R4.Types.ResourceTypesMedicationDispense);
    FHIR.R3.Types.ResourceTypesMedicationRequest: exit(FHIR.R4.Types.ResourceTypesMedicationRequest);
    FHIR.R3.Types.ResourceTypesMedicationStatement: exit(FHIR.R4.Types.ResourceTypesMedicationStatement);
    FHIR.R3.Types.ResourceTypesMessageDefinition: exit(FHIR.R4.Types.ResourceTypesMessageDefinition);
    FHIR.R3.Types.ResourceTypesMessageHeader: exit(FHIR.R4.Types.ResourceTypesMessageHeader);
    FHIR.R3.Types.ResourceTypesNamingSystem: exit(FHIR.R4.Types.ResourceTypesNamingSystem);
    FHIR.R3.Types.ResourceTypesNutritionOrder: exit(FHIR.R4.Types.ResourceTypesNutritionOrder);
    FHIR.R3.Types.ResourceTypesObservation: exit(FHIR.R4.Types.ResourceTypesObservation);
    FHIR.R3.Types.ResourceTypesOperationDefinition: exit(FHIR.R4.Types.ResourceTypesOperationDefinition);
    FHIR.R3.Types.ResourceTypesOperationOutcome: exit(FHIR.R4.Types.ResourceTypesOperationOutcome);
    FHIR.R3.Types.ResourceTypesOrganization: exit(FHIR.R4.Types.ResourceTypesOrganization);
    FHIR.R3.Types.ResourceTypesParameters: exit(FHIR.R4.Types.ResourceTypesParameters);
    FHIR.R3.Types.ResourceTypesPatient: exit(FHIR.R4.Types.ResourceTypesPatient);
    FHIR.R3.Types.ResourceTypesPaymentNotice: exit(FHIR.R4.Types.ResourceTypesPaymentNotice);
    FHIR.R3.Types.ResourceTypesPaymentReconciliation: exit(FHIR.R4.Types.ResourceTypesPaymentReconciliation);
    FHIR.R3.Types.ResourceTypesPerson: exit(FHIR.R4.Types.ResourceTypesPerson);
    FHIR.R3.Types.ResourceTypesPlanDefinition: exit(FHIR.R4.Types.ResourceTypesPlanDefinition);
    FHIR.R3.Types.ResourceTypesPractitioner: exit(FHIR.R4.Types.ResourceTypesPractitioner);
    FHIR.R3.Types.ResourceTypesPractitionerRole: exit(FHIR.R4.Types.ResourceTypesPractitionerRole);
    FHIR.R3.Types.ResourceTypesProcedure: exit(FHIR.R4.Types.ResourceTypesProcedure);
    FHIR.R3.Types.ResourceTypesProcedureRequest: exit(FHIR.R4.Types.ResourceTypesServiceRequest);
    FHIR.R3.Types.ResourceTypesProvenance: exit(FHIR.R4.Types.ResourceTypesProvenance);
    FHIR.R3.Types.ResourceTypesQuestionnaire: exit(FHIR.R4.Types.ResourceTypesQuestionnaire);
    FHIR.R3.Types.ResourceTypesQuestionnaireResponse: exit(FHIR.R4.Types.ResourceTypesQuestionnaireResponse);
    FHIR.R3.Types.ResourceTypesReferralRequest: exit(FHIR.R4.Types.ResourceTypesServiceRequest);
    FHIR.R3.Types.ResourceTypesRelatedPerson: exit(FHIR.R4.Types.ResourceTypesRelatedPerson);
    FHIR.R3.Types.ResourceTypesRequestGroup: exit(FHIR.R4.Types.ResourceTypesRequestGroup);
    FHIR.R3.Types.ResourceTypesResearchStudy: exit(FHIR.R4.Types.ResourceTypesResearchStudy);
    FHIR.R3.Types.ResourceTypesResearchSubject: exit(FHIR.R4.Types.ResourceTypesResearchSubject);
    FHIR.R3.Types.ResourceTypesResource: exit(FHIR.R4.Types.ResourceTypesResource);
    FHIR.R3.Types.ResourceTypesRiskAssessment: exit(FHIR.R4.Types.ResourceTypesRiskAssessment);
    FHIR.R3.Types.ResourceTypesSchedule: exit(FHIR.R4.Types.ResourceTypesSchedule);
    FHIR.R3.Types.ResourceTypesSearchParameter: exit(FHIR.R4.Types.ResourceTypesSearchParameter);
    FHIR.R3.Types.ResourceTypesSequence: exit(FHIR.R4.Types.ResourceTypesMolecularSequence);
    FHIR.R3.Types.ResourceTypesSlot: exit(FHIR.R4.Types.ResourceTypesSlot);
    FHIR.R3.Types.ResourceTypesSpecimen: exit(FHIR.R4.Types.ResourceTypesSpecimen);
    FHIR.R3.Types.ResourceTypesStructureDefinition: exit(FHIR.R4.Types.ResourceTypesStructureDefinition);
    FHIR.R3.Types.ResourceTypesStructureMap: exit(FHIR.R4.Types.ResourceTypesStructureMap);
    FHIR.R3.Types.ResourceTypesSubscription: exit(FHIR.R4.Types.ResourceTypesSubscription);
    FHIR.R3.Types.ResourceTypesSubstance: exit(FHIR.R4.Types.ResourceTypesSubstance);
    FHIR.R3.Types.ResourceTypesSupplyDelivery: exit(FHIR.R4.Types.ResourceTypesSupplyDelivery);
    FHIR.R3.Types.ResourceTypesSupplyRequest: exit(FHIR.R4.Types.ResourceTypesSupplyRequest);
    FHIR.R3.Types.ResourceTypesTask: exit(FHIR.R4.Types.ResourceTypesTask);
    FHIR.R3.Types.ResourceTypesTestReport: exit(FHIR.R4.Types.ResourceTypesTestReport);
    FHIR.R3.Types.ResourceTypesTestScript: exit(FHIR.R4.Types.ResourceTypesTestScript);
    FHIR.R3.Types.ResourceTypesValueSet: exit(FHIR.R4.Types.ResourceTypesValueSet);
    FHIR.R3.Types.ResourceTypesVisionPrescription: exit(FHIR.R4.Types.ResourceTypesVisionPrescription);
    else exit(FHIR.R4.Types.ResourceTypesNull);
  end;
end;

class function TVersionConvertor_30_40.convertActivityDefinitionKind(src : FHIR.R4.Types.TFhirResourceTypesEnum) : FHIR.R3.Types.TFhirResourceTypesEnum;
begin
  case (src) of
    FHIR.R4.Types.ResourceTypesAccount: exit(FHIR.R3.Types.ResourceTypesAccount);
    FHIR.R4.Types.ResourceTypesActivityDefinition: exit(FHIR.R3.Types.ResourceTypesActivityDefinition);
    FHIR.R4.Types.ResourceTypesAdverseEvent: exit(FHIR.R3.Types.ResourceTypesAdverseEvent);
    FHIR.R4.Types.ResourceTypesAllergyIntolerance: exit(FHIR.R3.Types.ResourceTypesAllergyIntolerance);
    FHIR.R4.Types.ResourceTypesAppointment: exit(FHIR.R3.Types.ResourceTypesAppointment);
    FHIR.R4.Types.ResourceTypesAppointmentResponse: exit(FHIR.R3.Types.ResourceTypesAppointmentResponse);
    FHIR.R4.Types.ResourceTypesAuditEvent: exit(FHIR.R3.Types.ResourceTypesAuditEvent);
    FHIR.R4.Types.ResourceTypesBasic: exit(FHIR.R3.Types.ResourceTypesBasic);
    FHIR.R4.Types.ResourceTypesBinary: exit(FHIR.R3.Types.ResourceTypesBinary);
    FHIR.R4.Types.ResourceTypesBodyStructure: exit(FHIR.R3.Types.ResourceTypesBodySite);
    FHIR.R4.Types.ResourceTypesBundle: exit(FHIR.R3.Types.ResourceTypesBundle);
    FHIR.R4.Types.ResourceTypesCapabilityStatement: exit(FHIR.R3.Types.ResourceTypesCapabilityStatement);
    FHIR.R4.Types.ResourceTypesCarePlan: exit(FHIR.R3.Types.ResourceTypesCarePlan);
    FHIR.R4.Types.ResourceTypesCareTeam: exit(FHIR.R3.Types.ResourceTypesCareTeam);
    FHIR.R4.Types.ResourceTypesChargeItem: exit(FHIR.R3.Types.ResourceTypesChargeItem);
    FHIR.R4.Types.ResourceTypesClaim: exit(FHIR.R3.Types.ResourceTypesClaim);
    FHIR.R4.Types.ResourceTypesClaimResponse: exit(FHIR.R3.Types.ResourceTypesClaimResponse);
    FHIR.R4.Types.ResourceTypesClinicalImpression: exit(FHIR.R3.Types.ResourceTypesClinicalImpression);
    FHIR.R4.Types.ResourceTypesCodeSystem: exit(FHIR.R3.Types.ResourceTypesCodeSystem);
    FHIR.R4.Types.ResourceTypesCommunication: exit(FHIR.R3.Types.ResourceTypesCommunication);
    FHIR.R4.Types.ResourceTypesCommunicationRequest: exit(FHIR.R3.Types.ResourceTypesCommunicationRequest);
    FHIR.R4.Types.ResourceTypesCompartmentDefinition: exit(FHIR.R3.Types.ResourceTypesCompartmentDefinition);
    FHIR.R4.Types.ResourceTypesComposition: exit(FHIR.R3.Types.ResourceTypesComposition);
    FHIR.R4.Types.ResourceTypesConceptMap: exit(FHIR.R3.Types.ResourceTypesConceptMap);
    FHIR.R4.Types.ResourceTypesCondition: exit(FHIR.R3.Types.ResourceTypesCondition);
    FHIR.R4.Types.ResourceTypesConsent: exit(FHIR.R3.Types.ResourceTypesConsent);
    FHIR.R4.Types.ResourceTypesContract: exit(FHIR.R3.Types.ResourceTypesContract);
    FHIR.R4.Types.ResourceTypesCoverage: exit(FHIR.R3.Types.ResourceTypesCoverage);
    FHIR.R4.Types.ResourceTypesDetectedIssue: exit(FHIR.R3.Types.ResourceTypesDetectedIssue);
    FHIR.R4.Types.ResourceTypesDevice: exit(FHIR.R3.Types.ResourceTypesDevice);
    FHIR.R4.Types.ResourceTypesDeviceMetric: exit(FHIR.R3.Types.ResourceTypesDeviceMetric);
    FHIR.R4.Types.ResourceTypesDeviceRequest: exit(FHIR.R3.Types.ResourceTypesDeviceRequest);
    FHIR.R4.Types.ResourceTypesDeviceUseStatement: exit(FHIR.R3.Types.ResourceTypesDeviceUseStatement);
    FHIR.R4.Types.ResourceTypesDiagnosticReport: exit(FHIR.R3.Types.ResourceTypesDiagnosticReport);
    FHIR.R4.Types.ResourceTypesDocumentManifest: exit(FHIR.R3.Types.ResourceTypesDocumentManifest);
    FHIR.R4.Types.ResourceTypesDocumentReference: exit(FHIR.R3.Types.ResourceTypesDocumentReference);
    FHIR.R4.Types.ResourceTypesDomainResource: exit(FHIR.R3.Types.ResourceTypesDomainResource);
    FHIR.R4.Types.ResourceTypesCoverageEligibilityRequest: exit(FHIR.R3.Types.ResourceTypesEligibilityRequest);
    FHIR.R4.Types.ResourceTypesCoverageEligibilityResponse: exit(FHIR.R3.Types.ResourceTypesEligibilityResponse);
    FHIR.R4.Types.ResourceTypesEncounter: exit(FHIR.R3.Types.ResourceTypesEncounter);
    FHIR.R4.Types.ResourceTypesEndpoint: exit(FHIR.R3.Types.ResourceTypesEndpoint);
    FHIR.R4.Types.ResourceTypesEnrollmentRequest: exit(FHIR.R3.Types.ResourceTypesEnrollmentRequest);
    FHIR.R4.Types.ResourceTypesEnrollmentResponse: exit(FHIR.R3.Types.ResourceTypesEnrollmentResponse);
    FHIR.R4.Types.ResourceTypesEpisodeOfCare: exit(FHIR.R3.Types.ResourceTypesEpisodeOfCare);
//    FHIR.R4.Types.ResourceTypesExpansionProfile: exit(FHIR.R3.Types.ResourceTypesExpansionProfile);
    FHIR.R4.Types.ResourceTypesExplanationOfBenefit: exit(FHIR.R3.Types.ResourceTypesExplanationOfBenefit);
    FHIR.R4.Types.ResourceTypesFamilyMemberHistory: exit(FHIR.R3.Types.ResourceTypesFamilyMemberHistory);
    FHIR.R4.Types.ResourceTypesFlag: exit(FHIR.R3.Types.ResourceTypesFlag);
    FHIR.R4.Types.ResourceTypesGoal: exit(FHIR.R3.Types.ResourceTypesGoal);
    FHIR.R4.Types.ResourceTypesGraphDefinition: exit(FHIR.R3.Types.ResourceTypesGraphDefinition);
    FHIR.R4.Types.ResourceTypesGroup: exit(FHIR.R3.Types.ResourceTypesGroup);
    FHIR.R4.Types.ResourceTypesGuidanceResponse: exit(FHIR.R3.Types.ResourceTypesGuidanceResponse);
    FHIR.R4.Types.ResourceTypesHealthcareService: exit(FHIR.R3.Types.ResourceTypesHealthcareService);
    FHIR.R4.Types.ResourceTypesImagingStudy: exit(FHIR.R3.Types.ResourceTypesImagingStudy);
    FHIR.R4.Types.ResourceTypesImmunization: exit(FHIR.R3.Types.ResourceTypesImmunization);
    FHIR.R4.Types.ResourceTypesImmunizationRecommendation: exit(FHIR.R3.Types.ResourceTypesImmunizationRecommendation);
    FHIR.R4.Types.ResourceTypesImplementationGuide: exit(FHIR.R3.Types.ResourceTypesImplementationGuide);
    FHIR.R4.Types.ResourceTypesLibrary: exit(FHIR.R3.Types.ResourceTypesLibrary);
    FHIR.R4.Types.ResourceTypesLinkage: exit(FHIR.R3.Types.ResourceTypesLinkage);
    FHIR.R4.Types.ResourceTypesList: exit(FHIR.R3.Types.ResourceTypesList);
    FHIR.R4.Types.ResourceTypesLocation: exit(FHIR.R3.Types.ResourceTypesLocation);
    FHIR.R4.Types.ResourceTypesMeasure: exit(FHIR.R3.Types.ResourceTypesMeasure);
    FHIR.R4.Types.ResourceTypesMeasureReport: exit(FHIR.R3.Types.ResourceTypesMeasureReport);
    FHIR.R4.Types.ResourceTypesMedia: exit(FHIR.R3.Types.ResourceTypesMedia);
    FHIR.R4.Types.ResourceTypesMedication: exit(FHIR.R3.Types.ResourceTypesMedication);
    FHIR.R4.Types.ResourceTypesMedicationAdministration: exit(FHIR.R3.Types.ResourceTypesMedicationAdministration);
    FHIR.R4.Types.ResourceTypesMedicationDispense: exit(FHIR.R3.Types.ResourceTypesMedicationDispense);
    FHIR.R4.Types.ResourceTypesMedicationRequest: exit(FHIR.R3.Types.ResourceTypesMedicationRequest);
    FHIR.R4.Types.ResourceTypesMedicationStatement: exit(FHIR.R3.Types.ResourceTypesMedicationStatement);
    FHIR.R4.Types.ResourceTypesMessageDefinition: exit(FHIR.R3.Types.ResourceTypesMessageDefinition);
    FHIR.R4.Types.ResourceTypesMessageHeader: exit(FHIR.R3.Types.ResourceTypesMessageHeader);
    FHIR.R4.Types.ResourceTypesNamingSystem: exit(FHIR.R3.Types.ResourceTypesNamingSystem);
    FHIR.R4.Types.ResourceTypesNutritionOrder: exit(FHIR.R3.Types.ResourceTypesNutritionOrder);
    FHIR.R4.Types.ResourceTypesObservation: exit(FHIR.R3.Types.ResourceTypesObservation);
    FHIR.R4.Types.ResourceTypesOperationDefinition: exit(FHIR.R3.Types.ResourceTypesOperationDefinition);
    FHIR.R4.Types.ResourceTypesOperationOutcome: exit(FHIR.R3.Types.ResourceTypesOperationOutcome);
    FHIR.R4.Types.ResourceTypesOrganization: exit(FHIR.R3.Types.ResourceTypesOrganization);
    FHIR.R4.Types.ResourceTypesParameters: exit(FHIR.R3.Types.ResourceTypesParameters);
    FHIR.R4.Types.ResourceTypesPatient: exit(FHIR.R3.Types.ResourceTypesPatient);
    FHIR.R4.Types.ResourceTypesPaymentNotice: exit(FHIR.R3.Types.ResourceTypesPaymentNotice);
    FHIR.R4.Types.ResourceTypesPaymentReconciliation: exit(FHIR.R3.Types.ResourceTypesPaymentReconciliation);
    FHIR.R4.Types.ResourceTypesPerson: exit(FHIR.R3.Types.ResourceTypesPerson);
    FHIR.R4.Types.ResourceTypesPlanDefinition: exit(FHIR.R3.Types.ResourceTypesPlanDefinition);
    FHIR.R4.Types.ResourceTypesPractitioner: exit(FHIR.R3.Types.ResourceTypesPractitioner);
    FHIR.R4.Types.ResourceTypesPractitionerRole: exit(FHIR.R3.Types.ResourceTypesPractitionerRole);
    FHIR.R4.Types.ResourceTypesProcedure: exit(FHIR.R3.Types.ResourceTypesProcedure);
    FHIR.R4.Types.ResourceTypesServiceRequest: exit(FHIR.R3.Types.ResourceTypesProcedureRequest);
    FHIR.R4.Types.ResourceTypesProvenance: exit(FHIR.R3.Types.ResourceTypesProvenance);
    FHIR.R4.Types.ResourceTypesQuestionnaire: exit(FHIR.R3.Types.ResourceTypesQuestionnaire);
    FHIR.R4.Types.ResourceTypesQuestionnaireResponse: exit(FHIR.R3.Types.ResourceTypesQuestionnaireResponse);
    FHIR.R4.Types.ResourceTypesRelatedPerson: exit(FHIR.R3.Types.ResourceTypesRelatedPerson);
    FHIR.R4.Types.ResourceTypesRequestGroup: exit(FHIR.R3.Types.ResourceTypesRequestGroup);
    FHIR.R4.Types.ResourceTypesResearchStudy: exit(FHIR.R3.Types.ResourceTypesResearchStudy);
    FHIR.R4.Types.ResourceTypesResearchSubject: exit(FHIR.R3.Types.ResourceTypesResearchSubject);
    FHIR.R4.Types.ResourceTypesResource: exit(FHIR.R3.Types.ResourceTypesResource);
    FHIR.R4.Types.ResourceTypesRiskAssessment: exit(FHIR.R3.Types.ResourceTypesRiskAssessment);
    FHIR.R4.Types.ResourceTypesSchedule: exit(FHIR.R3.Types.ResourceTypesSchedule);
    FHIR.R4.Types.ResourceTypesSearchParameter: exit(FHIR.R3.Types.ResourceTypesSearchParameter);
    FHIR.R4.Types.ResourceTypesMolecularSequence: exit(FHIR.R3.Types.ResourceTypesSequence);
    FHIR.R4.Types.ResourceTypesSlot: exit(FHIR.R3.Types.ResourceTypesSlot);
    FHIR.R4.Types.ResourceTypesSpecimen: exit(FHIR.R3.Types.ResourceTypesSpecimen);
    FHIR.R4.Types.ResourceTypesStructureDefinition: exit(FHIR.R3.Types.ResourceTypesStructureDefinition);
    FHIR.R4.Types.ResourceTypesStructureMap: exit(FHIR.R3.Types.ResourceTypesStructureMap);
    FHIR.R4.Types.ResourceTypesSubscription: exit(FHIR.R3.Types.ResourceTypesSubscription);
    FHIR.R4.Types.ResourceTypesSubstance: exit(FHIR.R3.Types.ResourceTypesSubstance);
    FHIR.R4.Types.ResourceTypesSupplyDelivery: exit(FHIR.R3.Types.ResourceTypesSupplyDelivery);
    FHIR.R4.Types.ResourceTypesSupplyRequest: exit(FHIR.R3.Types.ResourceTypesSupplyRequest);
    FHIR.R4.Types.ResourceTypesTask: exit(FHIR.R3.Types.ResourceTypesTask);
    FHIR.R4.Types.ResourceTypesTestReport: exit(FHIR.R3.Types.ResourceTypesTestReport);
    FHIR.R4.Types.ResourceTypesTestScript: exit(FHIR.R3.Types.ResourceTypesTestScript);
    FHIR.R4.Types.ResourceTypesValueSet: exit(FHIR.R3.Types.ResourceTypesValueSet);
    FHIR.R4.Types.ResourceTypesVisionPrescription: exit(FHIR.R3.Types.ResourceTypesVisionPrescription);
    else exit(FHIR.R3.Types.ResourceTypesNull);
  end;
end;

class function TVersionConvertor_30_40.convertActivityParticipantType(src : FHIR.R3.Types.TFhirActionParticipantTypeEnum) : FHIR.R4.Types.TFhirActionParticipantTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.ActionParticipantTypePatient: exit(FHIR.R4.Types.ActionParticipantTypePatient);
    FHIR.R3.Types.ActionParticipantTypePractitioner: exit(FHIR.R4.Types.ActionParticipantTypePractitioner);
    FHIR.R3.Types.ActionParticipantTypeRelatedPerson: exit(FHIR.R4.Types.ActionParticipantTypeRelatedPerson);
    else exit(FHIR.R4.Types.ActionParticipantTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertActivityParticipantType(src : FHIR.R4.Types.TFhirActionParticipantTypeEnum) : FHIR.R3.Types.TFhirActionParticipantTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.ActionParticipantTypePatient: exit(FHIR.R3.Types.ActionParticipantTypePatient);
    FHIR.R4.Types.ActionParticipantTypePractitioner: exit(FHIR.R3.Types.ActionParticipantTypePractitioner);
    FHIR.R4.Types.ActionParticipantTypeRelatedPerson: exit(FHIR.R3.Types.ActionParticipantTypeRelatedPerson);
    else exit(FHIR.R3.Types.ActionParticipantTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertAllergyIntoleranceClinicalStatus(src : FHIR.R3.Types.TFhirAllergyClinicalStatusEnum) : FHIR.R4.Types.TFhirCodeableConcept;
begin
  case (src) of
    FHIR.R3.Types.AllergyClinicalStatusActive: exit(FHIR.R4.Types.TFhirCodeableConcept.Create('http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical', 'active'));
    FHIR.R3.Types.AllergyClinicalStatusInactive: exit(FHIR.R4.Types.TFhirCodeableConcept.Create('http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical', 'inactive'));
    FHIR.R3.Types.AllergyClinicalStatusResolved: exit(FHIR.R4.Types.TFhirCodeableConcept.Create('http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical', 'resolved'));
    else exit(nil);
  end;
end;

class function TVersionConvertor_30_40.convertAllergyIntoleranceClinicalStatus(src : FHIR.R4.Types.TFhirCodeableConcept) : FHIR.R3.Types.TFhirAllergyClinicalStatusEnum;
begin
  if (src.hasCode('http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical', 'active')) then
    exit(FHIR.R3.Types.AllergyClinicalStatusActive);
  if (src.hasCode('http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical', 'inactive')) then
    exit(FHIR.R3.Types.AllergyClinicalStatusInactive);
  if (src.hasCode('http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical', 'resolve')) then
    exit(FHIR.R3.Types.AllergyClinicalStatusResolved);
  exit(FHIR.R3.Types.AllergyClinicalStatusNull);
end;

class function TVersionConvertor_30_40.convertAllergyIntoleranceVerificationStatus(src : FHIR.R3.Types.TFhirAllergyVerificationStatusEnum) : FHIR.R4.Types.TFhirCodeableConcept;
begin
  case (src) of
    FHIR.R3.Types.AllergyVerificationStatusUnconfirmed: exit(FHIR.R4.Types.TFhirCodeableConcept.Create('http://terminology.hl7.org/CodeSystem/allergyintolerance-verification', 'unconfirmed'));
    FHIR.R3.Types.AllergyVerificationStatusConfirmed: exit(FHIR.R4.Types.TFhirCodeableConcept.Create('http://terminology.hl7.org/CodeSystem/allergyintolerance-verification', 'confirmed'));
    FHIR.R3.Types.AllergyVerificationStatusRefuted: exit(FHIR.R4.Types.TFhirCodeableConcept.Create('http://terminology.hl7.org/CodeSystem/allergyintolerance-verification', 'refuted'));
    FHIR.R3.Types.AllergyVerificationStatusEnteredInError: exit(FHIR.R4.Types.TFhirCodeableConcept.Create('http://terminology.hl7.org/CodeSystem/allergyintolerance-verification', 'entered-in-error'));
    else exit(nil);
  end;
end;

class function TVersionConvertor_30_40.convertAllergyIntoleranceVerificationStatus(src : FHIR.R4.Types.TFhirCodeableConcept) : FHIR.R3.Types.TFhirAllergyVerificationStatusEnum;
begin
  if (src.hasCode('http://terminology.hl7.org/CodeSystem/allergyintolerance-verification', 'unconfirmed')) then
    exit(FHIR.R3.Types.AllergyVerificationStatusUnconfirmed);
  if (src.hasCode('http://terminology.hl7.org/CodeSystem/allergyintolerance-verification', 'confirmed')) then
    exit(FHIR.R3.Types.AllergyVerificationStatusConfirmed);
  if (src.hasCode('http://terminology.hl7.org/CodeSystem/allergyintolerance-verification', 'refuted')) then
    exit(FHIR.R3.Types.AllergyVerificationStatusRefuted);
  if (src.hasCode('http://terminology.hl7.org/CodeSystem/allergyintolerance-verification', 'entered-in-error')) then
    exit(FHIR.R3.Types.AllergyVerificationStatusEnteredInError);
  exit(FHIR.R3.Types.AllergyVerificationStatusNull);
end;

class function TVersionConvertor_30_40.convertAllergyIntoleranceType(src : FHIR.R3.Types.TFhirAllergyIntoleranceTypeEnum) : FHIR.R4.Types.TFhirAllergyIntoleranceTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.AllergyIntoleranceTypeAllergy: exit(FHIR.R4.Types.AllergyIntoleranceTypeAllergy);
    FHIR.R3.Types.AllergyIntoleranceTypeIntolerance: exit(FHIR.R4.Types.AllergyIntoleranceTypeIntolerance);
    else exit(FHIR.R4.Types.AllergyIntoleranceTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertAllergyIntoleranceType(src : FHIR.R4.Types.TFhirAllergyIntoleranceTypeEnum) : FHIR.R3.Types.TFhirAllergyIntoleranceTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.AllergyIntoleranceTypeAllergy: exit(FHIR.R3.Types.AllergyIntoleranceTypeAllergy);
    FHIR.R4.Types.AllergyIntoleranceTypeIntolerance: exit(FHIR.R3.Types.AllergyIntoleranceTypeIntolerance);
    else exit(FHIR.R3.Types.AllergyIntoleranceTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertAllergyIntoleranceCategory(src : FHIR.R3.Types.TFhirAllergyIntoleranceCategoryEnum) : FHIR.R4.Types.TFhirAllergyIntoleranceCategoryEnum;
begin
  case (src) of
    FHIR.R3.Types.AllergyIntoleranceCategoryFood: exit(FHIR.R4.Types.AllergyIntoleranceCategoryFood);
    FHIR.R3.Types.AllergyIntoleranceCategoryMedication: exit(FHIR.R4.Types.AllergyIntoleranceCategoryMedication);
    FHIR.R3.Types.AllergyIntoleranceCategoryEnvironment: exit(FHIR.R4.Types.AllergyIntoleranceCategoryEnvironment);
    FHIR.R3.Types.AllergyIntoleranceCategoryBiologic: exit(FHIR.R4.Types.AllergyIntoleranceCategoryBiologic);
    else exit(FHIR.R4.Types.AllergyIntoleranceCategoryNull);
  end;
end;

class function TVersionConvertor_30_40.convertAllergyIntoleranceCategory(src : FHIR.R4.Types.TFhirAllergyIntoleranceCategoryEnum) : FHIR.R3.Types.TFhirAllergyIntoleranceCategoryEnum;
begin
  case (src) of
    FHIR.R4.Types.AllergyIntoleranceCategoryFood: exit(FHIR.R3.Types.AllergyIntoleranceCategoryFood);
    FHIR.R4.Types.AllergyIntoleranceCategoryMedication: exit(FHIR.R3.Types.AllergyIntoleranceCategoryMedication);
    FHIR.R4.Types.AllergyIntoleranceCategoryEnvironment: exit(FHIR.R3.Types.AllergyIntoleranceCategoryEnvironment);
    FHIR.R4.Types.AllergyIntoleranceCategoryBiologic: exit(FHIR.R3.Types.AllergyIntoleranceCategoryBiologic);
    else exit(FHIR.R3.Types.AllergyIntoleranceCategoryNull);
  end;
end;

class function TVersionConvertor_30_40.convertAllergyIntoleranceCriticality(src : FHIR.R3.Types.TFhirAllergyIntoleranceCriticalityEnum) : FHIR.R4.Types.TFhirAllergyIntoleranceCriticalityEnum;
begin
  case (src) of
    FHIR.R3.Types.AllergyIntoleranceCriticalityLow: exit(FHIR.R4.Types.AllergyIntoleranceCriticalityLow);
    FHIR.R3.Types.AllergyIntoleranceCriticalityHigh: exit(FHIR.R4.Types.AllergyIntoleranceCriticalityHigh);
    FHIR.R3.Types.AllergyIntoleranceCriticalityUnableToAssess: exit(FHIR.R4.Types.AllergyIntoleranceCriticalityUnableToAssess);
    else exit(FHIR.R4.Types.AllergyIntoleranceCriticalityNull);
  end;
end;

class function TVersionConvertor_30_40.convertAllergyIntoleranceCriticality(src : FHIR.R4.Types.TFhirAllergyIntoleranceCriticalityEnum) : FHIR.R3.Types.TFhirAllergyIntoleranceCriticalityEnum;
begin
  case (src) of
    FHIR.R4.Types.AllergyIntoleranceCriticalityLow: exit(FHIR.R3.Types.AllergyIntoleranceCriticalityLow);
    FHIR.R4.Types.AllergyIntoleranceCriticalityHigh: exit(FHIR.R3.Types.AllergyIntoleranceCriticalityHigh);
    FHIR.R4.Types.AllergyIntoleranceCriticalityUnableToAssess: exit(FHIR.R3.Types.AllergyIntoleranceCriticalityUnableToAssess);
    else exit(FHIR.R3.Types.AllergyIntoleranceCriticalityNull);
  end;
end;

class function TVersionConvertor_30_40.convertAllergyIntoleranceSeverity(src : FHIR.R3.Types.TFhirReactionEventSeverityEnum) : FHIR.R4.Types.TFhirReactionEventSeverityEnum;
begin
  case (src) of
    FHIR.R3.Types.ReactionEventSeverityMild: exit(FHIR.R4.Types.ReactionEventSeverityMild);
    FHIR.R3.Types.ReactionEventSeverityModerate: exit(FHIR.R4.Types.ReactionEventSeverityModerate);
    FHIR.R3.Types.ReactionEventSeveritySevere: exit(FHIR.R4.Types.ReactionEventSeveritySevere);
    else exit(FHIR.R4.Types.ReactionEventSeverityNull);
  end;
end;

class function TVersionConvertor_30_40.convertAllergyIntoleranceSeverity(src : FHIR.R4.Types.TFhirReactionEventSeverityEnum) : FHIR.R3.Types.TFhirReactionEventSeverityEnum;
begin
  case (src) of
    FHIR.R4.Types.ReactionEventSeverityMild: exit(FHIR.R3.Types.ReactionEventSeverityMild);
    FHIR.R4.Types.ReactionEventSeverityModerate: exit(FHIR.R3.Types.ReactionEventSeverityModerate);
    FHIR.R4.Types.ReactionEventSeveritySevere: exit(FHIR.R3.Types.ReactionEventSeveritySevere);
    else exit(FHIR.R3.Types.ReactionEventSeverityNull);
  end;
end;

class function TVersionConvertor_30_40.convertAppointmentStatus(src : FHIR.R3.Types.TFhirAppointmentstatusEnum) : FHIR.R4.Types.TFhirAppointmentstatusEnum;
begin
  case (src) of
    FHIR.R3.Types.AppointmentstatusProposed: exit(FHIR.R4.Types.AppointmentstatusProposed);
    FHIR.R3.Types.AppointmentstatusPending: exit(FHIR.R4.Types.AppointmentstatusPending);
    FHIR.R3.Types.AppointmentstatusBooked: exit(FHIR.R4.Types.AppointmentstatusBooked);
    FHIR.R3.Types.AppointmentstatusArrived: exit(FHIR.R4.Types.AppointmentstatusArrived);
    FHIR.R3.Types.AppointmentstatusFulfilled: exit(FHIR.R4.Types.AppointmentstatusFulfilled);
    FHIR.R3.Types.AppointmentstatusCancelled: exit(FHIR.R4.Types.AppointmentstatusCancelled);
    FHIR.R3.Types.AppointmentstatusNoshow: exit(FHIR.R4.Types.AppointmentstatusNoshow);
    FHIR.R3.Types.AppointmentstatusEnteredInError: exit(FHIR.R4.Types.AppointmentstatusEnteredInError);
    else exit(FHIR.R4.Types.AppointmentstatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertAppointmentStatus(src : FHIR.R4.Types.TFhirAppointmentstatusEnum) : FHIR.R3.Types.TFhirAppointmentstatusEnum;
begin
  case (src) of
    FHIR.R4.Types.AppointmentstatusProposed: exit(FHIR.R3.Types.AppointmentstatusProposed);
    FHIR.R4.Types.AppointmentstatusPending: exit(FHIR.R3.Types.AppointmentstatusPending);
    FHIR.R4.Types.AppointmentstatusBooked: exit(FHIR.R3.Types.AppointmentstatusBooked);
    FHIR.R4.Types.AppointmentstatusArrived: exit(FHIR.R3.Types.AppointmentstatusArrived);
    FHIR.R4.Types.AppointmentstatusFulfilled: exit(FHIR.R3.Types.AppointmentstatusFulfilled);
    FHIR.R4.Types.AppointmentstatusCancelled: exit(FHIR.R3.Types.AppointmentstatusCancelled);
    FHIR.R4.Types.AppointmentstatusNoshow: exit(FHIR.R3.Types.AppointmentstatusNoshow);
    FHIR.R4.Types.AppointmentstatusEnteredInError: exit(FHIR.R3.Types.AppointmentstatusEnteredInError);
    else exit(FHIR.R3.Types.AppointmentstatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertParticipantRequired(src : FHIR.R3.Types.TFhirParticipantrequiredEnum) : FHIR.R4.Types.TFhirParticipantrequiredEnum;
begin
  case (src) of
    FHIR.R3.Types.ParticipantrequiredRequired: exit(FHIR.R4.Types.ParticipantrequiredRequired);
    FHIR.R3.Types.ParticipantrequiredOptional: exit(FHIR.R4.Types.ParticipantrequiredOptional);
    FHIR.R3.Types.ParticipantrequiredInformationOnly: exit(FHIR.R4.Types.ParticipantrequiredInformationOnly);
    else exit(FHIR.R4.Types.ParticipantrequiredNull);
  end;
end;

class function TVersionConvertor_30_40.convertParticipantRequired(src : FHIR.R4.Types.TFhirParticipantrequiredEnum) : FHIR.R3.Types.TFhirParticipantrequiredEnum;
begin
  case (src) of
    FHIR.R4.Types.ParticipantrequiredRequired: exit(FHIR.R3.Types.ParticipantrequiredRequired);
    FHIR.R4.Types.ParticipantrequiredOptional: exit(FHIR.R3.Types.ParticipantrequiredOptional);
    FHIR.R4.Types.ParticipantrequiredInformationOnly: exit(FHIR.R3.Types.ParticipantrequiredInformationOnly);
    else exit(FHIR.R3.Types.ParticipantrequiredNull);
  end;
end;

class function TVersionConvertor_30_40.convertParticipationStatus(src : FHIR.R3.Types.TFhirParticipationstatusEnum) : FHIR.R4.Types.TFhirParticipationstatusEnum;
begin
  case (src) of
    FHIR.R3.Types.ParticipationstatusAccepted: exit(FHIR.R4.Types.ParticipationstatusAccepted);
    FHIR.R3.Types.ParticipationstatusDeclined: exit(FHIR.R4.Types.ParticipationstatusDeclined);
    FHIR.R3.Types.ParticipationstatusTentative: exit(FHIR.R4.Types.ParticipationstatusTentative);
    FHIR.R3.Types.ParticipationstatusNeedsAction: exit(FHIR.R4.Types.ParticipationstatusNeedsAction);
    else exit(FHIR.R4.Types.ParticipationstatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertParticipationStatus(src : FHIR.R4.Types.TFhirParticipationstatusEnum) : FHIR.R3.Types.TFhirParticipationstatusEnum;
begin
  case (src) of
    FHIR.R4.Types.ParticipationstatusAccepted: exit(FHIR.R3.Types.ParticipationstatusAccepted);
    FHIR.R4.Types.ParticipationstatusDeclined: exit(FHIR.R3.Types.ParticipationstatusDeclined);
    FHIR.R4.Types.ParticipationstatusTentative: exit(FHIR.R3.Types.ParticipationstatusTentative);
    FHIR.R4.Types.ParticipationstatusNeedsAction: exit(FHIR.R3.Types.ParticipationstatusNeedsAction);
    else exit(FHIR.R3.Types.ParticipationstatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertParticipantStatus(src : FHIR.R3.Types.TFhirParticipationstatusEnum) : FHIR.R4.Types.TFhirParticipationstatusEnum;
begin
  case (src) of
    FHIR.R3.Types.ParticipationstatusAccepted: exit(FHIR.R4.Types.ParticipationstatusAccepted);
    FHIR.R3.Types.ParticipationstatusDeclined: exit(FHIR.R4.Types.ParticipationstatusDeclined);
    FHIR.R3.Types.ParticipationstatusTentative: exit(FHIR.R4.Types.ParticipationstatusTentative);
    FHIR.R3.Types.ParticipationstatusNeedsAction: exit(FHIR.R4.Types.ParticipationstatusNeedsAction);
    else exit(FHIR.R4.Types.ParticipationstatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertParticipantStatus(src : FHIR.R4.Types.TFhirParticipationstatusEnum) : FHIR.R3.Types.TFhirParticipationstatusEnum;
begin
  case (src) of
    FHIR.R4.Types.ParticipationstatusAccepted: exit(FHIR.R3.Types.ParticipationstatusAccepted);
    FHIR.R4.Types.ParticipationstatusDeclined: exit(FHIR.R3.Types.ParticipationstatusDeclined);
    FHIR.R4.Types.ParticipationstatusTentative: exit(FHIR.R3.Types.ParticipationstatusTentative);
    FHIR.R4.Types.ParticipationstatusNeedsAction: exit(FHIR.R3.Types.ParticipationstatusNeedsAction);
    else exit(FHIR.R3.Types.ParticipationstatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventAction(src : FHIR.R3.Types.TFhirAuditEventActionEnum) : FHIR.R4.Types.TFhirAuditEventActionEnum;
begin
  case (src) of
    FHIR.R3.Types.AuditEventActionC: exit(FHIR.R4.Types.AuditEventActionC);
    FHIR.R3.Types.AuditEventActionR: exit(FHIR.R4.Types.AuditEventActionR);
    FHIR.R3.Types.AuditEventActionU: exit(FHIR.R4.Types.AuditEventActionU);
    FHIR.R3.Types.AuditEventActionD: exit(FHIR.R4.Types.AuditEventActionD);
    FHIR.R3.Types.AuditEventActionE: exit(FHIR.R4.Types.AuditEventActionE);
    else exit(FHIR.R4.Types.AuditEventActionNull);
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventAction(src : FHIR.R4.Types.TFhirAuditEventActionEnum) : FHIR.R3.Types.TFhirAuditEventActionEnum;
begin
  case (src) of
    FHIR.R4.Types.AuditEventActionC: exit(FHIR.R3.Types.AuditEventActionC);
    FHIR.R4.Types.AuditEventActionR: exit(FHIR.R3.Types.AuditEventActionR);
    FHIR.R4.Types.AuditEventActionU: exit(FHIR.R3.Types.AuditEventActionU);
    FHIR.R4.Types.AuditEventActionD: exit(FHIR.R3.Types.AuditEventActionD);
    FHIR.R4.Types.AuditEventActionE: exit(FHIR.R3.Types.AuditEventActionE);
    else exit(FHIR.R3.Types.AuditEventActionNull);
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventOutcome(src : FHIR.R3.Types.TFhirAuditEventOutcomeEnum) : FHIR.R4.Types.TFhirAuditEventOutcomeEnum;
begin
  case (src) of
    FHIR.R3.Types.AuditEventOutcome0: exit(FHIR.R4.Types.AuditEventOutcome0);
    FHIR.R3.Types.AuditEventOutcome4: exit(FHIR.R4.Types.AuditEventOutcome4);
    FHIR.R3.Types.AuditEventOutcome8: exit(FHIR.R4.Types.AuditEventOutcome8);
    FHIR.R3.Types.AuditEventOutcome12: exit(FHIR.R4.Types.AuditEventOutcome12);
    else exit(FHIR.R4.Types.AuditEventOutcomeNull);
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventOutcome(src : FHIR.R4.Types.TFhirAuditEventOutcomeEnum) : FHIR.R3.Types.TFhirAuditEventOutcomeEnum;
begin
  case (src) of
    FHIR.R4.Types.AuditEventOutcome0: exit(FHIR.R3.Types.AuditEventOutcome0);
    FHIR.R4.Types.AuditEventOutcome4: exit(FHIR.R3.Types.AuditEventOutcome4);
    FHIR.R4.Types.AuditEventOutcome8: exit(FHIR.R3.Types.AuditEventOutcome8);
    FHIR.R4.Types.AuditEventOutcome12: exit(FHIR.R3.Types.AuditEventOutcome12);
    else exit(FHIR.R3.Types.AuditEventOutcomeNull);
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventAgentNetworkType(src : FHIR.R3.Types.TFhirNetworkTypeEnum) : FHIR.R4.Types.TFhirNetworkTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.NetworkType1: exit(FHIR.R4.Types.NetworkType1);
    FHIR.R3.Types.NetworkType2: exit(FHIR.R4.Types.NetworkType2);
    FHIR.R3.Types.NetworkType3: exit(FHIR.R4.Types.NetworkType3);
    FHIR.R3.Types.NetworkType4: exit(FHIR.R4.Types.NetworkType4);
    FHIR.R3.Types.NetworkType5: exit(FHIR.R4.Types.NetworkType5);
    else exit(FHIR.R4.Types.NetworkTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventAgentNetworkType(src : FHIR.R4.Types.TFhirNetworkTypeEnum) : FHIR.R3.Types.TFhirNetworkTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.NetworkType1: exit(FHIR.R3.Types.NetworkType1);
    FHIR.R4.Types.NetworkType2: exit(FHIR.R3.Types.NetworkType2);
    FHIR.R4.Types.NetworkType3: exit(FHIR.R3.Types.NetworkType3);
    FHIR.R4.Types.NetworkType4: exit(FHIR.R3.Types.NetworkType4);
    FHIR.R4.Types.NetworkType5: exit(FHIR.R3.Types.NetworkType5);
    else exit(FHIR.R3.Types.NetworkTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertBundleType(src : FHIR.R3.Types.TFhirBundleTypeEnum) : FHIR.R4.Types.TFhirBundleTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.BundleTypeDocument: exit(FHIR.R4.Types.BundleTypeDocument);
    FHIR.R3.Types.BundleTypeMessage: exit(FHIR.R4.Types.BundleTypeMessage);
    FHIR.R3.Types.BundleTypeTransaction: exit(FHIR.R4.Types.BundleTypeTransaction);
    FHIR.R3.Types.BundleTypeTransactionResponse: exit(FHIR.R4.Types.BundleTypeTransactionResponse);
    FHIR.R3.Types.BundleTypeBatch: exit(FHIR.R4.Types.BundleTypeBatch);
    FHIR.R3.Types.BundleTypeBatchResponse: exit(FHIR.R4.Types.BundleTypeBatchResponse);
    FHIR.R3.Types.BundleTypeHistory: exit(FHIR.R4.Types.BundleTypeHistory);
    FHIR.R3.Types.BundleTypeSearchset: exit(FHIR.R4.Types.BundleTypeSearchset);
    FHIR.R3.Types.BundleTypeCollection: exit(FHIR.R4.Types.BundleTypeCollection);
    else exit(FHIR.R4.Types.BundleTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertBundleType(src : FHIR.R4.Types.TFhirBundleTypeEnum) : FHIR.R3.Types.TFhirBundleTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.BundleTypeDocument: exit(FHIR.R3.Types.BundleTypeDocument);
    FHIR.R4.Types.BundleTypeMessage: exit(FHIR.R3.Types.BundleTypeMessage);
    FHIR.R4.Types.BundleTypeTransaction: exit(FHIR.R3.Types.BundleTypeTransaction);
    FHIR.R4.Types.BundleTypeTransactionResponse: exit(FHIR.R3.Types.BundleTypeTransactionResponse);
    FHIR.R4.Types.BundleTypeBatch: exit(FHIR.R3.Types.BundleTypeBatch);
    FHIR.R4.Types.BundleTypeBatchResponse: exit(FHIR.R3.Types.BundleTypeBatchResponse);
    FHIR.R4.Types.BundleTypeHistory: exit(FHIR.R3.Types.BundleTypeHistory);
    FHIR.R4.Types.BundleTypeSearchset: exit(FHIR.R3.Types.BundleTypeSearchset);
    FHIR.R4.Types.BundleTypeCollection: exit(FHIR.R3.Types.BundleTypeCollection);
    else exit(FHIR.R3.Types.BundleTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertSearchEntryMode(src : FHIR.R3.Types.TFhirSearchEntryModeEnum) : FHIR.R4.Types.TFhirSearchEntryModeEnum;
begin
  case (src) of
    FHIR.R3.Types.SearchEntryModeMatch: exit(FHIR.R4.Types.SearchEntryModeMatch);
    FHIR.R3.Types.SearchEntryModeInclude: exit(FHIR.R4.Types.SearchEntryModeInclude);
    FHIR.R3.Types.SearchEntryModeOutcome: exit(FHIR.R4.Types.SearchEntryModeOutcome);
    else exit(FHIR.R4.Types.SearchEntryModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertSearchEntryMode(src : FHIR.R4.Types.TFhirSearchEntryModeEnum) : FHIR.R3.Types.TFhirSearchEntryModeEnum;
begin
  case (src) of
    FHIR.R4.Types.SearchEntryModeMatch: exit(FHIR.R3.Types.SearchEntryModeMatch);
    FHIR.R4.Types.SearchEntryModeInclude: exit(FHIR.R3.Types.SearchEntryModeInclude);
    FHIR.R4.Types.SearchEntryModeOutcome: exit(FHIR.R3.Types.SearchEntryModeOutcome);
    else exit(FHIR.R3.Types.SearchEntryModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertHTTPVerb(src : FHIR.R3.Types.TFhirHttpVerbEnum) : FHIR.R4.Types.TFhirHttpVerbEnum;
begin
  case (src) of
    FHIR.R3.Types.HttpVerbGET: exit(FHIR.R4.Types.HttpVerbGET);
    FHIR.R3.Types.HttpVerbPOST: exit(FHIR.R4.Types.HttpVerbPOST);
    FHIR.R3.Types.HttpVerbPUT: exit(FHIR.R4.Types.HttpVerbPUT);
    FHIR.R3.Types.HttpVerbDELETE: exit(FHIR.R4.Types.HttpVerbDELETE);
    else exit(FHIR.R4.Types.HttpVerbNull);
  end;
end;

class function TVersionConvertor_30_40.convertHTTPVerb(src : FHIR.R4.Types.TFhirHttpVerbEnum) : FHIR.R3.Types.TFhirHttpVerbEnum;
begin
  case (src) of
    FHIR.R4.Types.HttpVerbGET: exit(FHIR.R3.Types.HttpVerbGET);
    FHIR.R4.Types.HttpVerbPOST: exit(FHIR.R3.Types.HttpVerbPOST);
    FHIR.R4.Types.HttpVerbPUT: exit(FHIR.R3.Types.HttpVerbPUT);
    FHIR.R4.Types.HttpVerbDELETE: exit(FHIR.R3.Types.HttpVerbDELETE);
    else exit(FHIR.R3.Types.HttpVerbNull);
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementKind(src : FHIR.R3.Types.TFhirCapabilityStatementKindEnum) : FHIR.R4.Types.TFhirCapabilityStatementKindEnum;
begin
  case (src) of
    FHIR.R3.Types.CapabilityStatementKindInstance: exit(FHIR.R4.Types.CapabilityStatementKindInstance);
    FHIR.R3.Types.CapabilityStatementKindCapability: exit(FHIR.R4.Types.CapabilityStatementKindCapability);
    FHIR.R3.Types.CapabilityStatementKindRequirements: exit(FHIR.R4.Types.CapabilityStatementKindRequirements);
    else exit(FHIR.R4.Types.CapabilityStatementKindNull);
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementKind(src : FHIR.R4.Types.TFhirCapabilityStatementKindEnum) : FHIR.R3.Types.TFhirCapabilityStatementKindEnum;
begin
  case (src) of
    FHIR.R4.Types.CapabilityStatementKindInstance: exit(FHIR.R3.Types.CapabilityStatementKindInstance);
    FHIR.R4.Types.CapabilityStatementKindCapability: exit(FHIR.R3.Types.CapabilityStatementKindCapability);
    FHIR.R4.Types.CapabilityStatementKindRequirements: exit(FHIR.R3.Types.CapabilityStatementKindRequirements);
    else exit(FHIR.R3.Types.CapabilityStatementKindNull);
  end;
end;

class function TVersionConvertor_30_40.convertRestfulCapabilityMode(src : FHIR.R3.Types.TFhirRestfulCapabilityModeEnum) : FHIR.R4.Types.TFhirRestfulCapabilityModeEnum;
begin
  case (src) of
    FHIR.R3.Types.RestfulCapabilityModeClient: exit(FHIR.R4.Types.RestfulCapabilityModeClient);
    FHIR.R3.Types.RestfulCapabilityModeServer: exit(FHIR.R4.Types.RestfulCapabilityModeServer);
    else exit(FHIR.R4.Types.RestfulCapabilityModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertRestfulCapabilityMode(src : FHIR.R4.Types.TFhirRestfulCapabilityModeEnum) : FHIR.R3.Types.TFhirRestfulCapabilityModeEnum;
begin
  case (src) of
    FHIR.R4.Types.RestfulCapabilityModeClient: exit(FHIR.R3.Types.RestfulCapabilityModeClient);
    FHIR.R4.Types.RestfulCapabilityModeServer: exit(FHIR.R3.Types.RestfulCapabilityModeServer);
    else exit(FHIR.R3.Types.RestfulCapabilityModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertReferenceToCanonical(src : FHIR.R3.Types.TFhirReference) : FHIR.R4.Types.TFhirCanonical;
var
  dst : FHIR.R4.Types.TFhirCanonical;
begin
  dst := FHIR.R4.Types.TFhirCanonical.Create(src.reference);
  copyElement(src, dst);
exit(dst);
end;

class function TVersionConvertor_30_40.convertCanonicalToReference(src : FHIR.R4.Types.TFhirCanonical) : FHIR.R3.Types.TFhirReference;
var
  dst : FHIR.R3.Types.TFhirReference;
begin
  dst := FHIR.R3.Types.TFhirReference.Create(src.value);
  copyElement(src, dst);
exit(dst);
end;

class function TVersionConvertor_30_40.convertResourceVersionPolicy(src : FHIR.R3.Types.TFhirVersioningPolicyEnum) : FHIR.R4.Types.TFhirVersioningPolicyEnum;
begin
  case (src) of
    FHIR.R3.Types.VersioningPolicyNoVersion: exit(FHIR.R4.Types.VersioningPolicyNoVersion);
    FHIR.R3.Types.VersioningPolicyVersioned: exit(FHIR.R4.Types.VersioningPolicyVersioned);
    FHIR.R3.Types.VersioningPolicyVersionedUpdate: exit(FHIR.R4.Types.VersioningPolicyVersionedUpdate);
    else exit(FHIR.R4.Types.VersioningPolicyNull);
  end;
end;

class function TVersionConvertor_30_40.convertResourceVersionPolicy(src : FHIR.R4.Types.TFhirVersioningPolicyEnum) : FHIR.R3.Types.TFhirVersioningPolicyEnum;
begin
  case (src) of
    FHIR.R4.Types.VersioningPolicyNoVersion: exit(FHIR.R3.Types.VersioningPolicyNoVersion);
    FHIR.R4.Types.VersioningPolicyVersioned: exit(FHIR.R3.Types.VersioningPolicyVersioned);
    FHIR.R4.Types.VersioningPolicyVersionedUpdate: exit(FHIR.R3.Types.VersioningPolicyVersionedUpdate);
    else exit(FHIR.R3.Types.VersioningPolicyNull);
  end;
end;

class function TVersionConvertor_30_40.convertConditionalReadStatus(src : FHIR.R3.Types.TFhirConditionalReadStatusEnum) : FHIR.R4.Types.TFhirConditionalReadStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.ConditionalReadStatusNotSupported: exit(FHIR.R4.Types.ConditionalReadStatusNotSupported);
    FHIR.R3.Types.ConditionalReadStatusModifiedSince: exit(FHIR.R4.Types.ConditionalReadStatusModifiedSince);
    FHIR.R3.Types.ConditionalReadStatusNotMatch: exit(FHIR.R4.Types.ConditionalReadStatusNotMatch);
    FHIR.R3.Types.ConditionalReadStatusFullSupport: exit(FHIR.R4.Types.ConditionalReadStatusFullSupport);
    else exit(FHIR.R4.Types.ConditionalReadStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertConditionalReadStatus(src : FHIR.R4.Types.TFhirConditionalReadStatusEnum) : FHIR.R3.Types.TFhirConditionalReadStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.ConditionalReadStatusNotSupported: exit(FHIR.R3.Types.ConditionalReadStatusNotSupported);
    FHIR.R4.Types.ConditionalReadStatusModifiedSince: exit(FHIR.R3.Types.ConditionalReadStatusModifiedSince);
    FHIR.R4.Types.ConditionalReadStatusNotMatch: exit(FHIR.R3.Types.ConditionalReadStatusNotMatch);
    FHIR.R4.Types.ConditionalReadStatusFullSupport: exit(FHIR.R3.Types.ConditionalReadStatusFullSupport);
    else exit(FHIR.R3.Types.ConditionalReadStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertConditionalDeleteStatus(src : FHIR.R3.Types.TFhirConditionalDeleteStatusEnum) : FHIR.R4.Types.TFhirConditionalDeleteStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.ConditionalDeleteStatusNotSupported: exit(FHIR.R4.Types.ConditionalDeleteStatusNotSupported);
    FHIR.R3.Types.ConditionalDeleteStatusSingle: exit(FHIR.R4.Types.ConditionalDeleteStatusSingle);
    FHIR.R3.Types.ConditionalDeleteStatusMultiple: exit(FHIR.R4.Types.ConditionalDeleteStatusMultiple);
    else exit(FHIR.R4.Types.ConditionalDeleteStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertConditionalDeleteStatus(src : FHIR.R4.Types.TFhirConditionalDeleteStatusEnum) : FHIR.R3.Types.TFhirConditionalDeleteStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.ConditionalDeleteStatusNotSupported: exit(FHIR.R3.Types.ConditionalDeleteStatusNotSupported);
    FHIR.R4.Types.ConditionalDeleteStatusSingle: exit(FHIR.R3.Types.ConditionalDeleteStatusSingle);
    FHIR.R4.Types.ConditionalDeleteStatusMultiple: exit(FHIR.R3.Types.ConditionalDeleteStatusMultiple);
    else exit(FHIR.R3.Types.ConditionalDeleteStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertReferenceHandlingPolicy(src : FHIR.R3.Types.TFhirReferenceHandlingPolicyEnum) : FHIR.R4.Types.TFhirReferenceHandlingPolicyEnum;
begin
  case (src) of
    FHIR.R3.Types.ReferenceHandlingPolicyLiteral: exit(FHIR.R4.Types.ReferenceHandlingPolicyLiteral);
    FHIR.R3.Types.ReferenceHandlingPolicyLogical: exit(FHIR.R4.Types.ReferenceHandlingPolicyLogical);
    FHIR.R3.Types.ReferenceHandlingPolicyResolves: exit(FHIR.R4.Types.ReferenceHandlingPolicyResolves);
    FHIR.R3.Types.ReferenceHandlingPolicyEnforced: exit(FHIR.R4.Types.ReferenceHandlingPolicyEnforced);
    FHIR.R3.Types.ReferenceHandlingPolicyLocal: exit(FHIR.R4.Types.ReferenceHandlingPolicyLocal);
    else exit(FHIR.R4.Types.ReferenceHandlingPolicyNull);
  end;
end;

class function TVersionConvertor_30_40.convertReferenceHandlingPolicy(src : FHIR.R4.Types.TFhirReferenceHandlingPolicyEnum) : FHIR.R3.Types.TFhirReferenceHandlingPolicyEnum;
begin
  case (src) of
    FHIR.R4.Types.ReferenceHandlingPolicyLiteral: exit(FHIR.R3.Types.ReferenceHandlingPolicyLiteral);
    FHIR.R4.Types.ReferenceHandlingPolicyLogical: exit(FHIR.R3.Types.ReferenceHandlingPolicyLogical);
    FHIR.R4.Types.ReferenceHandlingPolicyResolves: exit(FHIR.R3.Types.ReferenceHandlingPolicyResolves);
    FHIR.R4.Types.ReferenceHandlingPolicyEnforced: exit(FHIR.R3.Types.ReferenceHandlingPolicyEnforced);
    FHIR.R4.Types.ReferenceHandlingPolicyLocal: exit(FHIR.R3.Types.ReferenceHandlingPolicyLocal);
    else exit(FHIR.R3.Types.ReferenceHandlingPolicyNull);
  end;
end;

class function TVersionConvertor_30_40.convertTypeRestfulInteraction(src : FHIR.R3.Types.TFhirTypeRestfulInteractionEnum) : FHIR.R4.Types.TFhirTypeRestfulInteractionEnum;
begin
  case (src) of
    FHIR.R3.Types.TypeRestfulInteractionRead: exit(FHIR.R4.Types.TypeRestfulInteractionRead);
    FHIR.R3.Types.TypeRestfulInteractionVread: exit(FHIR.R4.Types.TypeRestfulInteractionVread);
    FHIR.R3.Types.TypeRestfulInteractionUpdate: exit(FHIR.R4.Types.TypeRestfulInteractionUpdate);
    FHIR.R3.Types.TypeRestfulInteractionPatch: exit(FHIR.R4.Types.TypeRestfulInteractionPatch);
    FHIR.R3.Types.TypeRestfulInteractionDelete: exit(FHIR.R4.Types.TypeRestfulInteractionDelete);
    FHIR.R3.Types.TypeRestfulInteractionHistoryInstance: exit(FHIR.R4.Types.TypeRestfulInteractionHistoryInstance);
    FHIR.R3.Types.TypeRestfulInteractionHistoryType: exit(FHIR.R4.Types.TypeRestfulInteractionHistoryType);
    FHIR.R3.Types.TypeRestfulInteractionCreate: exit(FHIR.R4.Types.TypeRestfulInteractionCreate);
    FHIR.R3.Types.TypeRestfulInteractionSearchType: exit(FHIR.R4.Types.TypeRestfulInteractionSearchType);
    else exit(FHIR.R4.Types.TypeRestfulInteractionNull);
  end;
end;

class function TVersionConvertor_30_40.convertTypeRestfulInteraction(src : FHIR.R4.Types.TFhirTypeRestfulInteractionEnum) : FHIR.R3.Types.TFhirTypeRestfulInteractionEnum;
begin
  case (src) of
    FHIR.R4.Types.TypeRestfulInteractionRead: exit(FHIR.R3.Types.TypeRestfulInteractionRead);
    FHIR.R4.Types.TypeRestfulInteractionVread: exit(FHIR.R3.Types.TypeRestfulInteractionVread);
    FHIR.R4.Types.TypeRestfulInteractionUpdate: exit(FHIR.R3.Types.TypeRestfulInteractionUpdate);
    FHIR.R4.Types.TypeRestfulInteractionPatch: exit(FHIR.R3.Types.TypeRestfulInteractionPatch);
    FHIR.R4.Types.TypeRestfulInteractionDelete: exit(FHIR.R3.Types.TypeRestfulInteractionDelete);
    FHIR.R4.Types.TypeRestfulInteractionHistoryInstance: exit(FHIR.R3.Types.TypeRestfulInteractionHistoryInstance);
    FHIR.R4.Types.TypeRestfulInteractionHistoryType: exit(FHIR.R3.Types.TypeRestfulInteractionHistoryType);
    FHIR.R4.Types.TypeRestfulInteractionCreate: exit(FHIR.R3.Types.TypeRestfulInteractionCreate);
    FHIR.R4.Types.TypeRestfulInteractionSearchType: exit(FHIR.R3.Types.TypeRestfulInteractionSearchType);
    else exit(FHIR.R3.Types.TypeRestfulInteractionNull);
  end;
end;

class function TVersionConvertor_30_40.convertSearchParamType(src : FHIR.R3.Types.TFhirSearchParamTypeEnum) : FHIR.R4.Types.TFhirSearchParamTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.SearchParamTypeNumber: exit(FHIR.R4.Types.SearchParamTypeNumber);
    FHIR.R3.Types.SearchParamTypeDate: exit(FHIR.R4.Types.SearchParamTypeDate);
    FHIR.R3.Types.SearchParamTypeString: exit(FHIR.R4.Types.SearchParamTypeString);
    FHIR.R3.Types.SearchParamTypeToken: exit(FHIR.R4.Types.SearchParamTypeToken);
    FHIR.R3.Types.SearchParamTypeReference: exit(FHIR.R4.Types.SearchParamTypeReference);
    FHIR.R3.Types.SearchParamTypeComposite: exit(FHIR.R4.Types.SearchParamTypeComposite);
    FHIR.R3.Types.SearchParamTypeQuantity: exit(FHIR.R4.Types.SearchParamTypeQuantity);
    FHIR.R3.Types.SearchParamTypeUri: exit(FHIR.R4.Types.SearchParamTypeUri);
    else exit(FHIR.R4.Types.SearchParamTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertSearchParamType(src : FHIR.R4.Types.TFhirSearchParamTypeEnum) : FHIR.R3.Types.TFhirSearchParamTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.SearchParamTypeNumber: exit(FHIR.R3.Types.SearchParamTypeNumber);
    FHIR.R4.Types.SearchParamTypeDate: exit(FHIR.R3.Types.SearchParamTypeDate);
    FHIR.R4.Types.SearchParamTypeString: exit(FHIR.R3.Types.SearchParamTypeString);
    FHIR.R4.Types.SearchParamTypeToken: exit(FHIR.R3.Types.SearchParamTypeToken);
    FHIR.R4.Types.SearchParamTypeReference: exit(FHIR.R3.Types.SearchParamTypeReference);
    FHIR.R4.Types.SearchParamTypeComposite: exit(FHIR.R3.Types.SearchParamTypeComposite);
    FHIR.R4.Types.SearchParamTypeQuantity: exit(FHIR.R3.Types.SearchParamTypeQuantity);
    FHIR.R4.Types.SearchParamTypeUri: exit(FHIR.R3.Types.SearchParamTypeUri);
    else exit(FHIR.R3.Types.SearchParamTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertSystemRestfulInteraction(src : FHIR.R3.Types.TFhirSystemRestfulInteractionEnum) : FHIR.R4.Types.TFhirSystemRestfulInteractionEnum;
begin
  case (src) of
    FHIR.R3.Types.SystemRestfulInteractionTransaction: exit(FHIR.R4.Types.SystemRestfulInteractionTransaction);
    FHIR.R3.Types.SystemRestfulInteractionBatch: exit(FHIR.R4.Types.SystemRestfulInteractionBatch);
    FHIR.R3.Types.SystemRestfulInteractionSearchSystem: exit(FHIR.R4.Types.SystemRestfulInteractionSearchSystem);
    FHIR.R3.Types.SystemRestfulInteractionHistorySystem: exit(FHIR.R4.Types.SystemRestfulInteractionHistorySystem);
    else exit(FHIR.R4.Types.SystemRestfulInteractionNull);
  end;
end;

class function TVersionConvertor_30_40.convertSystemRestfulInteraction(src : FHIR.R4.Types.TFhirSystemRestfulInteractionEnum) : FHIR.R3.Types.TFhirSystemRestfulInteractionEnum;
begin
  case (src) of
    FHIR.R4.Types.SystemRestfulInteractionTransaction: exit(FHIR.R3.Types.SystemRestfulInteractionTransaction);
    FHIR.R4.Types.SystemRestfulInteractionBatch: exit(FHIR.R3.Types.SystemRestfulInteractionBatch);
    FHIR.R4.Types.SystemRestfulInteractionSearchSystem: exit(FHIR.R3.Types.SystemRestfulInteractionSearchSystem);
    FHIR.R4.Types.SystemRestfulInteractionHistorySystem: exit(FHIR.R3.Types.SystemRestfulInteractionHistorySystem);
    else exit(FHIR.R3.Types.SystemRestfulInteractionNull);
  end;
end;

class function TVersionConvertor_30_40.convertEventCapabilityMode(src : FHIR.R3.Types.TFhirEventCapabilityModeEnum) : FHIR.R4.Types.TFhirEventCapabilityModeEnum;
begin
  case (src) of
    FHIR.R3.Types.EventCapabilityModeSender: exit(FHIR.R4.Types.EventCapabilityModeSender);
    FHIR.R3.Types.EventCapabilityModeReceiver: exit(FHIR.R4.Types.EventCapabilityModeReceiver);
    else exit(FHIR.R4.Types.EventCapabilityModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertEventCapabilityMode(src : FHIR.R4.Types.TFhirEventCapabilityModeEnum) : FHIR.R3.Types.TFhirEventCapabilityModeEnum;
begin
  case (src) of
    FHIR.R4.Types.EventCapabilityModeSender: exit(FHIR.R3.Types.EventCapabilityModeSender);
    FHIR.R4.Types.EventCapabilityModeReceiver: exit(FHIR.R3.Types.EventCapabilityModeReceiver);
    else exit(FHIR.R3.Types.EventCapabilityModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertDocumentMode(src : FHIR.R3.Types.TFhirDocumentModeEnum) : FHIR.R4.Types.TFhirDocumentModeEnum;
begin
  case (src) of
    FHIR.R3.Types.DocumentModeProducer: exit(FHIR.R4.Types.DocumentModeProducer);
    FHIR.R3.Types.DocumentModeConsumer: exit(FHIR.R4.Types.DocumentModeConsumer);
    else exit(FHIR.R4.Types.DocumentModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertDocumentMode(src : FHIR.R4.Types.TFhirDocumentModeEnum) : FHIR.R3.Types.TFhirDocumentModeEnum;
begin
  case (src) of
    FHIR.R4.Types.DocumentModeProducer: exit(FHIR.R3.Types.DocumentModeProducer);
    FHIR.R4.Types.DocumentModeConsumer: exit(FHIR.R3.Types.DocumentModeConsumer);
    else exit(FHIR.R3.Types.DocumentModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertCareTeamStatus(src : FHIR.R3.Types.TFhirCareTeamStatusEnum) : FHIR.R4.Types.TFhirCareTeamStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.CareTeamStatusProposed: exit(FHIR.R4.Types.CareTeamStatusProposed);
    FHIR.R3.Types.CareTeamStatusActive: exit(FHIR.R4.Types.CareTeamStatusActive);
    FHIR.R3.Types.CareTeamStatusSuspended: exit(FHIR.R4.Types.CareTeamStatusSuspended);
    FHIR.R3.Types.CareTeamStatusInactive: exit(FHIR.R4.Types.CareTeamStatusInactive);
    FHIR.R3.Types.CareTeamStatusEnteredInError: exit(FHIR.R4.Types.CareTeamStatusEnteredInError);
    else exit(FHIR.R4.Types.CareTeamStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertCareTeamStatus(src : FHIR.R4.Types.TFhirCareTeamStatusEnum) : FHIR.R3.Types.TFhirCareTeamStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.CareTeamStatusProposed: exit(FHIR.R3.Types.CareTeamStatusProposed);
    FHIR.R4.Types.CareTeamStatusActive: exit(FHIR.R3.Types.CareTeamStatusActive);
    FHIR.R4.Types.CareTeamStatusSuspended: exit(FHIR.R3.Types.CareTeamStatusSuspended);
    FHIR.R4.Types.CareTeamStatusInactive: exit(FHIR.R3.Types.CareTeamStatusInactive);
    FHIR.R4.Types.CareTeamStatusEnteredInError: exit(FHIR.R3.Types.CareTeamStatusEnteredInError);
    else exit(FHIR.R3.Types.CareTeamStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertChargeItemStatus(src : FHIR.R3.Types.TFhirChargeitemStatusEnum) : FHIR.R4.Types.TFhirChargeitemStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.ChargeitemStatusPlanned: exit(FHIR.R4.Types.ChargeitemStatusPlanned);
    FHIR.R3.Types.ChargeitemStatusBillable: exit(FHIR.R4.Types.ChargeitemStatusBillable);
    FHIR.R3.Types.ChargeitemStatusNotBillable: exit(FHIR.R4.Types.ChargeitemStatusNotBillable);
    FHIR.R3.Types.ChargeitemStatusAborted: exit(FHIR.R4.Types.ChargeitemStatusAborted);
    FHIR.R3.Types.ChargeitemStatusBilled: exit(FHIR.R4.Types.ChargeitemStatusBilled);
    FHIR.R3.Types.ChargeitemStatusEnteredInError: exit(FHIR.R4.Types.ChargeitemStatusEnteredInError);
    FHIR.R3.Types.ChargeitemStatusUnknown: exit(FHIR.R4.Types.ChargeitemStatusUnknown);
    else exit(FHIR.R4.Types.ChargeitemStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertChargeItemStatus(src : FHIR.R4.Types.TFhirChargeitemStatusEnum) : FHIR.R3.Types.TFhirChargeitemStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.ChargeitemStatusPlanned: exit(FHIR.R3.Types.ChargeitemStatusPlanned);
    FHIR.R4.Types.ChargeitemStatusBillable: exit(FHIR.R3.Types.ChargeitemStatusBillable);
    FHIR.R4.Types.ChargeitemStatusNotBillable: exit(FHIR.R3.Types.ChargeitemStatusNotBillable);
    FHIR.R4.Types.ChargeitemStatusAborted: exit(FHIR.R3.Types.ChargeitemStatusAborted);
    FHIR.R4.Types.ChargeitemStatusBilled: exit(FHIR.R3.Types.ChargeitemStatusBilled);
    FHIR.R4.Types.ChargeitemStatusEnteredInError: exit(FHIR.R3.Types.ChargeitemStatusEnteredInError);
    FHIR.R4.Types.ChargeitemStatusUnknown: exit(FHIR.R3.Types.ChargeitemStatusUnknown);
    else exit(FHIR.R3.Types.ChargeitemStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertUse(src : FHIR.R3.Types.TFhirClaimUseEnum) : FHIR.R4.Types.TFhirClaimUseEnum;
begin
  case (src) of
    FHIR.R3.Types.ClaimUseComplete: exit(FHIR.R4.Types.ClaimUseClaim);
    FHIR.R3.Types.ClaimUseProposed: exit(FHIR.R4.Types.ClaimUsePreauthorization);
    FHIR.R3.Types.ClaimUseExploratory: exit(FHIR.R4.Types.ClaimUsePredetermination);
    FHIR.R3.Types.ClaimUseOther: exit(FHIR.R4.Types.ClaimUseNull);
    else exit(FHIR.R4.Types.ClaimUseNull);
  end;
end;

class function TVersionConvertor_30_40.convertUse(src : FHIR.R4.Types.TFhirClaimUseEnum) : FHIR.R3.Types.TFhirClaimUseEnum;
begin
  case (src) of
    FHIR.R4.Types.ClaimUseClaim: exit(FHIR.R3.Types.ClaimUseComplete);
    FHIR.R4.Types.ClaimUsePreauthorization: exit(FHIR.R3.Types.ClaimUseProposed);
    FHIR.R4.Types.ClaimUsePredetermination: exit(FHIR.R3.Types.ClaimUseExploratory);
    else exit(FHIR.R3.Types.ClaimUseNull);
  end;
end;

class function TVersionConvertor_30_40.convertClinicalImpressionStatus(src : FHIR.R3.Types.TFhirClinicalImpressionStatusEnum) : FHIR.R4.Types.TFhirClinicalImpressionStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.ClinicalImpressionStatusDraft: exit(FHIR.R4.Types.ClinicalimpressionStatusInProgress);
    FHIR.R3.Types.ClinicalImpressionStatusCompleted: exit(FHIR.R4.Types.ClinicalImpressionStatusCompleted);
    FHIR.R3.Types.ClinicalImpressionStatusEnteredInError: exit(FHIR.R4.Types.ClinicalImpressionStatusEnteredInError);
    else exit(FHIR.R4.Types.ClinicalImpressionStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertClinicalImpressionStatus(src : FHIR.R4.Types.TFhirClinicalImpressionStatusEnum) : FHIR.R3.Types.TFhirClinicalImpressionStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.ClinicalimpressionStatusInProgress: exit(FHIR.R3.Types.ClinicalImpressionStatusDraft);
    FHIR.R4.Types.ClinicalImpressionStatusCompleted: exit(FHIR.R3.Types.ClinicalImpressionStatusCompleted);
    FHIR.R4.Types.ClinicalImpressionStatusEnteredInError: exit(FHIR.R3.Types.ClinicalImpressionStatusEnteredInError);
    else exit(FHIR.R3.Types.ClinicalImpressionStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertCodeSystemHierarchyMeaning(src : FHIR.R3.Types.TFhirCodesystemHierarchyMeaningEnum) : FHIR.R4.Types.TFhirCodesystemHierarchyMeaningEnum;
begin
  case (src) of
    FHIR.R3.Types.CodesystemHierarchyMeaningGroupedBy: exit(FHIR.R4.Types.CodesystemHierarchyMeaningGroupedBy);
    FHIR.R3.Types.CodesystemHierarchyMeaningIsA: exit(FHIR.R4.Types.CodesystemHierarchyMeaningIsA);
    FHIR.R3.Types.CodesystemHierarchyMeaningPartOf: exit(FHIR.R4.Types.CodesystemHierarchyMeaningPartOf);
    FHIR.R3.Types.CodesystemHierarchyMeaningClassifiedWith: exit(FHIR.R4.Types.CodesystemHierarchyMeaningClassifiedWith);
    else exit(FHIR.R4.Types.CodesystemHierarchyMeaningNull);
  end;
end;

class function TVersionConvertor_30_40.convertCodeSystemHierarchyMeaning(src : FHIR.R4.Types.TFhirCodesystemHierarchyMeaningEnum) : FHIR.R3.Types.TFhirCodesystemHierarchyMeaningEnum;
begin
  case (src) of
    FHIR.R4.Types.CodesystemHierarchyMeaningGroupedBy: exit(FHIR.R3.Types.CodesystemHierarchyMeaningGroupedBy);
    FHIR.R4.Types.CodesystemHierarchyMeaningIsA: exit(FHIR.R3.Types.CodesystemHierarchyMeaningIsA);
    FHIR.R4.Types.CodesystemHierarchyMeaningPartOf: exit(FHIR.R3.Types.CodesystemHierarchyMeaningPartOf);
    FHIR.R4.Types.CodesystemHierarchyMeaningClassifiedWith: exit(FHIR.R3.Types.CodesystemHierarchyMeaningClassifiedWith);
    else exit(FHIR.R3.Types.CodesystemHierarchyMeaningNull);
  end;
end;

class function TVersionConvertor_30_40.convertCodeSystemContentMode(src : FHIR.R3.Types.TFhirCodesystemContentModeEnum) : FHIR.R4.Types.TFhirCodesystemContentModeEnum;
begin
  case (src) of
    FHIR.R3.Types.CodesystemContentModeNotPresent: exit(FHIR.R4.Types.CodesystemContentModeNotPresent);
    FHIR.R3.Types.CodesystemContentModeExample: exit(FHIR.R4.Types.CodesystemContentModeExample);
    FHIR.R3.Types.CodesystemContentModeFragment: exit(FHIR.R4.Types.CodesystemContentModeFragment);
    FHIR.R3.Types.CodesystemContentModeComplete: exit(FHIR.R4.Types.CodesystemContentModeComplete);
    else exit(FHIR.R4.Types.CodesystemContentModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertCodeSystemContentMode(src : FHIR.R4.Types.TFhirCodesystemContentModeEnum) : FHIR.R3.Types.TFhirCodesystemContentModeEnum;
begin
  case (src) of
    FHIR.R4.Types.CodesystemContentModeNotPresent: exit(FHIR.R3.Types.CodesystemContentModeNotPresent);
    FHIR.R4.Types.CodesystemContentModeExample: exit(FHIR.R3.Types.CodesystemContentModeExample);
    FHIR.R4.Types.CodesystemContentModeFragment: exit(FHIR.R3.Types.CodesystemContentModeFragment);
    FHIR.R4.Types.CodesystemContentModeComplete: exit(FHIR.R3.Types.CodesystemContentModeComplete);
    else exit(FHIR.R3.Types.CodesystemContentModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertFilterOperator(src : FHIR.R3.Types.TFhirFilterOperatorEnum) : FHIR.R4.Types.TFhirFilterOperatorEnum;
begin
  case (src) of
    FHIR.R3.Types.FilterOperatorEqual: exit(FHIR.R4.Types.FilterOperatorEqual);
    FHIR.R3.Types.FilterOperatorIsA: exit(FHIR.R4.Types.FilterOperatorIsA);
    FHIR.R3.Types.FilterOperatorDescendentOf: exit(FHIR.R4.Types.FilterOperatorDescendentOf);
    FHIR.R3.Types.FilterOperatorIsNotA: exit(FHIR.R4.Types.FilterOperatorIsNotA);
    FHIR.R3.Types.FilterOperatorRegex: exit(FHIR.R4.Types.FilterOperatorRegex);
    FHIR.R3.Types.FilterOperatorIn: exit(FHIR.R4.Types.FilterOperatorIn);
    FHIR.R3.Types.FilterOperatorNotIn: exit(FHIR.R4.Types.FilterOperatorNotIn);
    FHIR.R3.Types.FilterOperatorGeneralizes: exit(FHIR.R4.Types.FilterOperatorGeneralizes);
    FHIR.R3.Types.FilterOperatorExists: exit(FHIR.R4.Types.FilterOperatorExists);
    else exit(FHIR.R4.Types.FilterOperatorNull);
  end;
end;

class function TVersionConvertor_30_40.convertFilterOperator(src : FHIR.R4.Types.TFhirFilterOperatorEnum) : FHIR.R3.Types.TFhirFilterOperatorEnum;
begin
  case (src) of
    FHIR.R4.Types.FilterOperatorEqual: exit(FHIR.R3.Types.FilterOperatorEqual);
    FHIR.R4.Types.FilterOperatorIsA: exit(FHIR.R3.Types.FilterOperatorIsA);
    FHIR.R4.Types.FilterOperatorDescendentOf: exit(FHIR.R3.Types.FilterOperatorDescendentOf);
    FHIR.R4.Types.FilterOperatorIsNotA: exit(FHIR.R3.Types.FilterOperatorIsNotA);
    FHIR.R4.Types.FilterOperatorRegex: exit(FHIR.R3.Types.FilterOperatorRegex);
    FHIR.R4.Types.FilterOperatorIn: exit(FHIR.R3.Types.FilterOperatorIn);
    FHIR.R4.Types.FilterOperatorNotIn: exit(FHIR.R3.Types.FilterOperatorNotIn);
    FHIR.R4.Types.FilterOperatorGeneralizes: exit(FHIR.R3.Types.FilterOperatorGeneralizes);
    FHIR.R4.Types.FilterOperatorExists: exit(FHIR.R3.Types.FilterOperatorExists);
    else exit(FHIR.R3.Types.FilterOperatorNull);
  end;
end;

class function TVersionConvertor_30_40.convertPropertyType(src : FHIR.R3.Types.TFhirConceptPropertyTypeEnum) : FHIR.R4.Types.TFhirConceptPropertyTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.ConceptPropertyTypeCode: exit(FHIR.R4.Types.ConceptPropertyTypeCode);
    FHIR.R3.Types.ConceptPropertyTypeCoding: exit(FHIR.R4.Types.ConceptPropertyTypeCoding);
    FHIR.R3.Types.ConceptPropertyTypeString: exit(FHIR.R4.Types.ConceptPropertyTypeString);
    FHIR.R3.Types.ConceptPropertyTypeInteger: exit(FHIR.R4.Types.ConceptPropertyTypeInteger);
    FHIR.R3.Types.ConceptPropertyTypeBoolean: exit(FHIR.R4.Types.ConceptPropertyTypeBoolean);
    FHIR.R3.Types.ConceptPropertyTypeDateTime: exit(FHIR.R4.Types.ConceptPropertyTypeDateTime);
    else exit(FHIR.R4.Types.ConceptPropertyTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertPropertyType(src : FHIR.R4.Types.TFhirConceptPropertyTypeEnum) : FHIR.R3.Types.TFhirConceptPropertyTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.ConceptPropertyTypeCode: exit(FHIR.R3.Types.ConceptPropertyTypeCode);
    FHIR.R4.Types.ConceptPropertyTypeCoding: exit(FHIR.R3.Types.ConceptPropertyTypeCoding);
    FHIR.R4.Types.ConceptPropertyTypeString: exit(FHIR.R3.Types.ConceptPropertyTypeString);
    FHIR.R4.Types.ConceptPropertyTypeInteger: exit(FHIR.R3.Types.ConceptPropertyTypeInteger);
    FHIR.R4.Types.ConceptPropertyTypeBoolean: exit(FHIR.R3.Types.ConceptPropertyTypeBoolean);
    FHIR.R4.Types.ConceptPropertyTypeDateTime: exit(FHIR.R3.Types.ConceptPropertyTypeDateTime);
    else exit(FHIR.R3.Types.ConceptPropertyTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertCommunicationStatus(src : FHIR.R3.Types.TFhirEventStatusEnum) : FHIR.R4.Types.TFhirEventStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.EventStatusPreparation: exit(FHIR.R4.Types.EventStatusPreparation);
    FHIR.R3.Types.EventStatusInProgress: exit(FHIR.R4.Types.EventStatusInProgress);
    FHIR.R3.Types.EventStatusSuspended: exit(FHIR.R4.Types.EventStatusOnHold);
    FHIR.R3.Types.EventStatusAborted: exit(FHIR.R4.Types.EventStatusNotDone);
    FHIR.R3.Types.EventStatusCompleted: exit(FHIR.R4.Types.EventStatusCompleted);
    FHIR.R3.Types.EventStatusEnteredInError: exit(FHIR.R4.Types.EventStatusEnteredInError);
    FHIR.R3.Types.EventStatusUnknown: exit(FHIR.R4.Types.EventStatusUnknown);
    else exit(FHIR.R4.Types.EventStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertCommunicationStatus(src : FHIR.R4.Types.TFhirEventStatusEnum) : FHIR.R3.Types.TFhirEventStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.EventStatusPreparation: exit(FHIR.R3.Types.EventStatusPreparation);
    FHIR.R4.Types.EventStatusInProgress: exit(FHIR.R3.Types.EventStatusInProgress);
    FHIR.R4.Types.EventStatusOnHold: exit(FHIR.R3.Types.EventStatusSuspended);
    FHIR.R4.Types.EventStatusNotDone: exit(FHIR.R3.Types.EventStatusAborted);
    FHIR.R4.Types.EventStatusCompleted: exit(FHIR.R3.Types.EventStatusCompleted);
    FHIR.R4.Types.EventStatusEnteredInError: exit(FHIR.R3.Types.EventStatusEnteredInError);
    FHIR.R4.Types.EventStatusUnknown: exit(FHIR.R3.Types.EventStatusUnknown);
    else exit(FHIR.R3.Types.EventStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertCompartmentType(src : FHIR.R3.Types.TFhirCompartmentTypeEnum) : FHIR.R4.Types.TFhirCompartmentTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.CompartmentTypePatient: exit(FHIR.R4.Types.CompartmentTypePatient);
    FHIR.R3.Types.CompartmentTypeEncounter: exit(FHIR.R4.Types.CompartmentTypeEncounter);
    FHIR.R3.Types.CompartmentTypeRelatedPerson: exit(FHIR.R4.Types.CompartmentTypeRelatedPerson);
    FHIR.R3.Types.CompartmentTypePractitioner: exit(FHIR.R4.Types.CompartmentTypePractitioner);
    FHIR.R3.Types.CompartmentTypeDevice: exit(FHIR.R4.Types.CompartmentTypeDevice);
    else exit(FHIR.R4.Types.CompartmentTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertCompartmentType(src : FHIR.R4.Types.TFhirCompartmentTypeEnum) : FHIR.R3.Types.TFhirCompartmentTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.CompartmentTypePatient: exit(FHIR.R3.Types.CompartmentTypePatient);
    FHIR.R4.Types.CompartmentTypeEncounter: exit(FHIR.R3.Types.CompartmentTypeEncounter);
    FHIR.R4.Types.CompartmentTypeRelatedPerson: exit(FHIR.R3.Types.CompartmentTypeRelatedPerson);
    FHIR.R4.Types.CompartmentTypePractitioner: exit(FHIR.R3.Types.CompartmentTypePractitioner);
    FHIR.R4.Types.CompartmentTypeDevice: exit(FHIR.R3.Types.CompartmentTypeDevice);
    else exit(FHIR.R3.Types.CompartmentTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertCompositionStatus(src : FHIR.R3.Types.TFhirCompositionStatusEnum) : FHIR.R4.Types.TFhirCompositionStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.CompositionStatusPreliminary: exit(FHIR.R4.Types.CompositionStatusPreliminary);
    FHIR.R3.Types.CompositionStatusFinal: exit(FHIR.R4.Types.CompositionStatusFinal);
    FHIR.R3.Types.CompositionStatusAmended: exit(FHIR.R4.Types.CompositionStatusAmended);
    FHIR.R3.Types.CompositionStatusEnteredInError: exit(FHIR.R4.Types.CompositionStatusEnteredInError);
    else exit(FHIR.R4.Types.CompositionStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertCompositionStatus(src : FHIR.R4.Types.TFhirCompositionStatusEnum) : FHIR.R3.Types.TFhirCompositionStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.CompositionStatusPreliminary: exit(FHIR.R3.Types.CompositionStatusPreliminary);
    FHIR.R4.Types.CompositionStatusFinal: exit(FHIR.R3.Types.CompositionStatusFinal);
    FHIR.R4.Types.CompositionStatusAmended: exit(FHIR.R3.Types.CompositionStatusAmended);
    FHIR.R4.Types.CompositionStatusEnteredInError: exit(FHIR.R3.Types.CompositionStatusEnteredInError);
    else exit(FHIR.R3.Types.CompositionStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertDocumentConfidentiality(src : FHIR.R3.Types.TFhirV3ConfidentialityClassificationEnum) : FHIR.R4.Types.TFhirV3ConfidentialityClassificationEnum;
begin
  case (src) of
    FHIR.R3.Types.V3ConfidentialityClassificationU: exit(FHIR.R4.Types.V3ConfidentialityClassificationU);
    FHIR.R3.Types.V3ConfidentialityClassificationL: exit(FHIR.R4.Types.V3ConfidentialityClassificationL);
    FHIR.R3.Types.V3ConfidentialityClassificationM: exit(FHIR.R4.Types.V3ConfidentialityClassificationM);
    FHIR.R3.Types.V3ConfidentialityClassificationN: exit(FHIR.R4.Types.V3ConfidentialityClassificationN);
    FHIR.R3.Types.V3ConfidentialityClassificationR: exit(FHIR.R4.Types.V3ConfidentialityClassificationR);
    FHIR.R3.Types.V3ConfidentialityClassificationV: exit(FHIR.R4.Types.V3ConfidentialityClassificationV);
    else exit(FHIR.R4.Types.V3ConfidentialityClassificationNull);
  end;
end;

class function TVersionConvertor_30_40.convertDocumentConfidentiality(src : FHIR.R4.Types.TFhirV3ConfidentialityClassificationEnum) : FHIR.R3.Types.TFhirV3ConfidentialityClassificationEnum;
begin
  case (src) of
    FHIR.R4.Types.V3ConfidentialityClassificationU: exit(FHIR.R3.Types.V3ConfidentialityClassificationU);
    FHIR.R4.Types.V3ConfidentialityClassificationL: exit(FHIR.R3.Types.V3ConfidentialityClassificationL);
    FHIR.R4.Types.V3ConfidentialityClassificationM: exit(FHIR.R3.Types.V3ConfidentialityClassificationM);
    FHIR.R4.Types.V3ConfidentialityClassificationN: exit(FHIR.R3.Types.V3ConfidentialityClassificationN);
    FHIR.R4.Types.V3ConfidentialityClassificationR: exit(FHIR.R3.Types.V3ConfidentialityClassificationR);
    FHIR.R4.Types.V3ConfidentialityClassificationV: exit(FHIR.R3.Types.V3ConfidentialityClassificationV);
    else exit(FHIR.R3.Types.V3ConfidentialityClassificationNull);
  end;
end;

class function TVersionConvertor_30_40.convertCompositionAttestationMode(src : FHIR.R3.Types.TFhirCompositionAttestationModeEnum) : FHIR.R4.Types.TFhirCompositionAttestationModeEnum;
begin
  case (src) of
    FHIR.R3.Types.CompositionAttestationModePersonal: exit(FHIR.R4.Types.CompositionAttestationModePersonal);
    FHIR.R3.Types.CompositionAttestationModeProfessional: exit(FHIR.R4.Types.CompositionAttestationModeProfessional);
    FHIR.R3.Types.CompositionAttestationModeLegal: exit(FHIR.R4.Types.CompositionAttestationModeLegal);
    FHIR.R3.Types.CompositionAttestationModeOfficial: exit(FHIR.R4.Types.CompositionAttestationModeOfficial);
    else exit(FHIR.R4.Types.CompositionAttestationModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertCompositionAttestationMode(src : FHIR.R4.Types.TFhirCompositionAttestationModeEnum) : FHIR.R3.Types.TFhirCompositionAttestationModeEnum;
begin
  case (src) of
    FHIR.R4.Types.CompositionAttestationModePersonal: exit(FHIR.R3.Types.CompositionAttestationModePersonal);
    FHIR.R4.Types.CompositionAttestationModeProfessional: exit(FHIR.R3.Types.CompositionAttestationModeProfessional);
    FHIR.R4.Types.CompositionAttestationModeLegal: exit(FHIR.R3.Types.CompositionAttestationModeLegal);
    FHIR.R4.Types.CompositionAttestationModeOfficial: exit(FHIR.R3.Types.CompositionAttestationModeOfficial);
    else exit(FHIR.R3.Types.CompositionAttestationModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertDocumentRelationshipType(src : FHIR.R3.Types.TFhirDocumentRelationshipTypeEnum) : FHIR.R4.Types.TFhirDocumentRelationshipTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.DocumentRelationshipTypeReplaces: exit(FHIR.R4.Types.DocumentRelationshipTypeReplaces);
    FHIR.R3.Types.DocumentRelationshipTypeTransforms: exit(FHIR.R4.Types.DocumentRelationshipTypeTransforms);
    FHIR.R3.Types.DocumentRelationshipTypeSigns: exit(FHIR.R4.Types.DocumentRelationshipTypeSigns);
    FHIR.R3.Types.DocumentRelationshipTypeAppends: exit(FHIR.R4.Types.DocumentRelationshipTypeAppends);
    else exit(FHIR.R4.Types.DocumentRelationshipTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertDocumentRelationshipType(src : FHIR.R4.Types.TFhirDocumentRelationshipTypeEnum) : FHIR.R3.Types.TFhirDocumentRelationshipTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.DocumentRelationshipTypeReplaces: exit(FHIR.R3.Types.DocumentRelationshipTypeReplaces);
    FHIR.R4.Types.DocumentRelationshipTypeTransforms: exit(FHIR.R3.Types.DocumentRelationshipTypeTransforms);
    FHIR.R4.Types.DocumentRelationshipTypeSigns: exit(FHIR.R3.Types.DocumentRelationshipTypeSigns);
    FHIR.R4.Types.DocumentRelationshipTypeAppends: exit(FHIR.R3.Types.DocumentRelationshipTypeAppends);
    else exit(FHIR.R3.Types.DocumentRelationshipTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertSectionMode(src : FHIR.R3.Types.TFhirListModeEnum) : FHIR.R4.Types.TFhirListModeEnum;
begin
  case (src) of
    FHIR.R3.Types.ListModeWorking: exit(FHIR.R4.Types.ListModeWorking);
    FHIR.R3.Types.ListModeSnapshot: exit(FHIR.R4.Types.ListModeSnapshot);
    FHIR.R3.Types.ListModeChanges: exit(FHIR.R4.Types.ListModeChanges);
    else exit(FHIR.R4.Types.ListModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertSectionMode(src : FHIR.R4.Types.TFhirListModeEnum) : FHIR.R3.Types.TFhirListModeEnum;
begin
  case (src) of
    FHIR.R4.Types.ListModeWorking: exit(FHIR.R3.Types.ListModeWorking);
    FHIR.R4.Types.ListModeSnapshot: exit(FHIR.R3.Types.ListModeSnapshot);
    FHIR.R4.Types.ListModeChanges: exit(FHIR.R3.Types.ListModeChanges);
    else exit(FHIR.R3.Types.ListModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertConceptMapEquivalence(src : FHIR.R3.Types.TFhirConceptMapEquivalenceEnum) : FHIR.R4.Types.TFhirConceptMapEquivalenceEnum;
begin
  case (src) of
    FHIR.R3.Types.ConceptMapEquivalenceRelatedto: exit(FHIR.R4.Types.ConceptMapEquivalenceRelatedto);
    FHIR.R3.Types.ConceptMapEquivalenceEquivalent: exit(FHIR.R4.Types.ConceptMapEquivalenceEquivalent);
    FHIR.R3.Types.ConceptMapEquivalenceEqual: exit(FHIR.R4.Types.ConceptMapEquivalenceEqual);
    FHIR.R3.Types.ConceptMapEquivalenceWider: exit(FHIR.R4.Types.ConceptMapEquivalenceWider);
    FHIR.R3.Types.ConceptMapEquivalenceSubsumes: exit(FHIR.R4.Types.ConceptMapEquivalenceSubsumes);
    FHIR.R3.Types.ConceptMapEquivalenceNarrower: exit(FHIR.R4.Types.ConceptMapEquivalenceNarrower);
    FHIR.R3.Types.ConceptMapEquivalenceSpecializes: exit(FHIR.R4.Types.ConceptMapEquivalenceSpecializes);
    FHIR.R3.Types.ConceptMapEquivalenceInexact: exit(FHIR.R4.Types.ConceptMapEquivalenceInexact);
    FHIR.R3.Types.ConceptMapEquivalenceUnmatched: exit(FHIR.R4.Types.ConceptMapEquivalenceUnmatched);
    FHIR.R3.Types.ConceptMapEquivalenceDisjoint: exit(FHIR.R4.Types.ConceptMapEquivalenceDisjoint);
    else exit(FHIR.R4.Types.ConceptMapEquivalenceNull);
  end;
end;

class function TVersionConvertor_30_40.convertConceptMapEquivalence(src : FHIR.R4.Types.TFhirConceptMapEquivalenceEnum) : FHIR.R3.Types.TFhirConceptMapEquivalenceEnum;
begin
  case (src) of
    FHIR.R4.Types.ConceptMapEquivalenceRelatedto: exit(FHIR.R3.Types.ConceptMapEquivalenceRelatedto);
    FHIR.R4.Types.ConceptMapEquivalenceEquivalent: exit(FHIR.R3.Types.ConceptMapEquivalenceEquivalent);
    FHIR.R4.Types.ConceptMapEquivalenceEqual: exit(FHIR.R3.Types.ConceptMapEquivalenceEqual);
    FHIR.R4.Types.ConceptMapEquivalenceWider: exit(FHIR.R3.Types.ConceptMapEquivalenceWider);
    FHIR.R4.Types.ConceptMapEquivalenceSubsumes: exit(FHIR.R3.Types.ConceptMapEquivalenceSubsumes);
    FHIR.R4.Types.ConceptMapEquivalenceNarrower: exit(FHIR.R3.Types.ConceptMapEquivalenceNarrower);
    FHIR.R4.Types.ConceptMapEquivalenceSpecializes: exit(FHIR.R3.Types.ConceptMapEquivalenceSpecializes);
    FHIR.R4.Types.ConceptMapEquivalenceInexact: exit(FHIR.R3.Types.ConceptMapEquivalenceInexact);
    FHIR.R4.Types.ConceptMapEquivalenceUnmatched: exit(FHIR.R3.Types.ConceptMapEquivalenceUnmatched);
    FHIR.R4.Types.ConceptMapEquivalenceDisjoint: exit(FHIR.R3.Types.ConceptMapEquivalenceDisjoint);
    else exit(FHIR.R3.Types.ConceptMapEquivalenceNull);
  end;
end;

class function TVersionConvertor_30_40.convertConceptMapGroupUnmappedMode(src : FHIR.R3.Types.TFhirConceptmapUnmappedModeEnum) : FHIR.R4.Types.TFhirConceptmapUnmappedModeEnum;
begin
  case (src) of
    FHIR.R3.Types.ConceptmapUnmappedModeProvided: exit(FHIR.R4.Types.ConceptmapUnmappedModeProvided);
    FHIR.R3.Types.ConceptmapUnmappedModeFixed: exit(FHIR.R4.Types.ConceptmapUnmappedModeFixed);
    FHIR.R3.Types.ConceptmapUnmappedModeOtherMap: exit(FHIR.R4.Types.ConceptmapUnmappedModeOtherMap);
    else exit(FHIR.R4.Types.ConceptmapUnmappedModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertConceptMapGroupUnmappedMode(src : FHIR.R4.Types.TFhirConceptmapUnmappedModeEnum) : FHIR.R3.Types.TFhirConceptmapUnmappedModeEnum;
begin
  case (src) of
    FHIR.R4.Types.ConceptmapUnmappedModeProvided: exit(FHIR.R3.Types.ConceptmapUnmappedModeProvided);
    FHIR.R4.Types.ConceptmapUnmappedModeFixed: exit(FHIR.R3.Types.ConceptmapUnmappedModeFixed);
    FHIR.R4.Types.ConceptmapUnmappedModeOtherMap: exit(FHIR.R3.Types.ConceptmapUnmappedModeOtherMap);
    else exit(FHIR.R3.Types.ConceptmapUnmappedModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertConditionClinicalStatus(src : FHIR.R3.Types.TFhirConditionClinicalEnum) : FHIR.R4.Types.TFhirCodeableConcept;
begin
  case (src) of
    FHIR.R3.Types.ConditionClinicalActive: exit(TFhirCodeableConcept.Create('http://hl7.org/fhir/condition-clinical', 'active'));
    FHIR.R3.Types.ConditionClinicalRecurrence: exit(TFhirCodeableConcept.Create('http://hl7.org/fhir/condition-clinical', 'recurrence'));
    FHIR.R3.Types.ConditionClinicalInactive: exit(TFhirCodeableConcept.Create('http://hl7.org/fhir/condition-clinical', 'inactive'));
    FHIR.R3.Types.ConditionClinicalRemission: exit(TFhirCodeableConcept.Create('http://hl7.org/fhir/condition-clinical', 'remission'));
    FHIR.R3.Types.ConditionClinicalResolved: exit(TFhirCodeableConcept.Create('http://hl7.org/fhir/condition-clinical', 'resolved'));
    else exit(nil);
  end;
end;

class function TVersionConvertor_30_40.convertConditionClinicalStatus(src : FHIR.R4.Types.TFhirCodeableConcept) : FHIR.R3.Types.TFhirConditionClinicalEnum;
begin
  if (src.hasCode('http://hl7.org/fhir/condition-clinical', 'active')) then
    exit(FHIR.R3.Types.ConditionClinicalActive)
  else if (src.hasCode('http://hl7.org/fhir/condition-clinical', 'recurrence')) then
    exit(FHIR.R3.Types.ConditionClinicalRecurrence)
  else if (src.hasCode('http://hl7.org/fhir/condition-clinical', 'inactive')) then
    exit(FHIR.R3.Types.ConditionClinicalInactive)
  else if (src.hasCode('http://hl7.org/fhir/condition-clinical', 'remission')) then
    exit(FHIR.R3.Types.ConditionClinicalRemission)
  else if (src.hasCode('http://hl7.org/fhir/condition-clinical', 'resolved')) then
    exit(FHIR.R3.Types.ConditionClinicalResolved)
  else
    exit(FHIR.R3.Types.ConditionClinicalNull);
end;

class function TVersionConvertor_30_40.convertConditionVerificationStatus(src : FHIR.R3.Types.TFhirConditionVerStatusEnum) : FHIR.R4.Types.TFhirCodeableConcept;
begin
  case (src) of
    FHIR.R3.Types.ConditionVerStatusProvisional: exit(TFhirCodeableConcept.Create('http://hl7.org/fhir/condition-ver-status', 'provisional'));
    FHIR.R3.Types.ConditionVerStatusDifferential: exit(TFhirCodeableConcept.Create('http://hl7.org/fhir/condition-ver-status', 'differential'));
    FHIR.R3.Types.ConditionVerStatusConfirmed: exit(TFhirCodeableConcept.Create('http://hl7.org/fhir/condition-ver-status', 'confirmed'));
    FHIR.R3.Types.ConditionVerStatusRefuted: exit(TFhirCodeableConcept.Create('http://hl7.org/fhir/condition-ver-status', 'refuted'));
    FHIR.R3.Types.ConditionVerStatusEnteredInError: exit(TFhirCodeableConcept.Create('http://hl7.org/fhir/condition-ver-status', 'entered-in-error'));
    FHIR.R3.Types.ConditionVerStatusUnknown: exit(TFhirCodeableConcept.Create('http://hl7.org/fhir/condition-ver-status', 'unconfirmed'));
    else exit(nil);
  end;
end;

class function TVersionConvertor_30_40.convertConditionVerificationStatus(src : FHIR.R4.Types.TFhirCodeableConcept) : FHIR.R3.Types.TFhirConditionVerStatusEnum;
begin
  if (src.hasCode('http://hl7.org/fhir/condition-ver-status', 'provisional')) then
    exit(FHIR.R3.Types.ConditionVerStatusProvisional)
  else if (src.hasCode('http://hl7.org/fhir/condition-ver-status', 'differential')) then
    exit(FHIR.R3.Types.ConditionVerStatusDifferential)
  else if (src.hasCode('http://hl7.org/fhir/condition-ver-status', 'confirmed')) then
    exit(FHIR.R3.Types.ConditionVerStatusConfirmed)
  else if (src.hasCode('http://hl7.org/fhir/condition-ver-status', 'refuted')) then
    exit(FHIR.R3.Types.ConditionVerStatusRefuted)
  else if (src.hasCode('http://hl7.org/fhir/condition-ver-status', 'entered-in-error')) then
    exit(FHIR.R3.Types.ConditionVerStatusEnteredInError)
  else if (src.hasCode('http://hl7.org/fhir/condition-ver-status', 'unconfirmed')) then
    exit(FHIR.R3.Types.ConditionVerStatusUnknown)
  else
    exit(FHIR.R3.Types.ConditionVerStatusNull);
end;

class function TVersionConvertor_30_40.convertConsentDataMeaning(src : FHIR.R3.Types.TFhirConsentDataMeaningEnum) : FHIR.R4.Types.TFhirConsentDataMeaningEnum;
begin
  case (src) of
    FHIR.R3.Types.ConsentDataMeaningInstance: exit(FHIR.R4.Types.ConsentDataMeaningInstance);
    FHIR.R3.Types.ConsentDataMeaningRelated: exit(FHIR.R4.Types.ConsentDataMeaningRelated);
    FHIR.R3.Types.ConsentDataMeaningDependents: exit(FHIR.R4.Types.ConsentDataMeaningDependents);
    FHIR.R3.Types.ConsentDataMeaningAuthoredby: exit(FHIR.R4.Types.ConsentDataMeaningAuthoredby);
    else exit(FHIR.R4.Types.ConsentDataMeaningNull);
  end;
end;

class function TVersionConvertor_30_40.convertConsentDataMeaning(src : FHIR.R4.Types.TFhirConsentDataMeaningEnum) : FHIR.R3.Types.TFhirConsentDataMeaningEnum;
begin
  case (src) of
    FHIR.R4.Types.ConsentDataMeaningInstance: exit(FHIR.R3.Types.ConsentDataMeaningInstance);
    FHIR.R4.Types.ConsentDataMeaningRelated: exit(FHIR.R3.Types.ConsentDataMeaningRelated);
    FHIR.R4.Types.ConsentDataMeaningDependents: exit(FHIR.R3.Types.ConsentDataMeaningDependents);
    FHIR.R4.Types.ConsentDataMeaningAuthoredby: exit(FHIR.R3.Types.ConsentDataMeaningAuthoredby);
    else exit(FHIR.R3.Types.ConsentDataMeaningNull);
  end;
end;

class function TVersionConvertor_30_40.convertDetectedIssueStatus(src : FHIR.R3.Types.TFhirObservationStatusEnum) : FHIR.R4.Types.TFhirObservationStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.ObservationStatusRegistered: exit(FHIR.R4.Types.ObservationStatusRegistered);
    FHIR.R3.Types.ObservationStatusPreliminary: exit(FHIR.R4.Types.ObservationStatusPreliminary);
    FHIR.R3.Types.ObservationStatusFinal: exit(FHIR.R4.Types.ObservationStatusFinal);
    FHIR.R3.Types.ObservationStatusAmended: exit(FHIR.R4.Types.ObservationStatusAmended);
    FHIR.R3.Types.ObservationStatusCorrected: exit(FHIR.R4.Types.ObservationStatusCorrected);
    FHIR.R3.Types.ObservationStatusCancelled: exit(FHIR.R4.Types.ObservationStatusCancelled);
    FHIR.R3.Types.ObservationStatusEnteredInError: exit(FHIR.R4.Types.ObservationStatusEnteredInError);
    FHIR.R3.Types.ObservationStatusUnknown: exit(FHIR.R4.Types.ObservationStatusUnknown);
    else exit(FHIR.R4.Types.ObservationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertDetectedIssueStatus(src : FHIR.R4.Types.TFhirObservationStatusEnum) : FHIR.R3.Types.TFhirObservationStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.ObservationStatusRegistered: exit(FHIR.R3.Types.ObservationStatusRegistered);
    FHIR.R4.Types.ObservationStatusPreliminary: exit(FHIR.R3.Types.ObservationStatusPreliminary);
    FHIR.R4.Types.ObservationStatusFinal: exit(FHIR.R3.Types.ObservationStatusFinal);
    FHIR.R4.Types.ObservationStatusAmended: exit(FHIR.R3.Types.ObservationStatusAmended);
    FHIR.R4.Types.ObservationStatusCorrected: exit(FHIR.R3.Types.ObservationStatusCorrected);
    FHIR.R4.Types.ObservationStatusCancelled: exit(FHIR.R3.Types.ObservationStatusCancelled);
    FHIR.R4.Types.ObservationStatusEnteredInError: exit(FHIR.R3.Types.ObservationStatusEnteredInError);
    FHIR.R4.Types.ObservationStatusUnknown: exit(FHIR.R3.Types.ObservationStatusUnknown);
    else exit(FHIR.R3.Types.ObservationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertDetectedIssueSeverity(src : FHIR.R3.Types.TFhirDetectedissueSeverityEnum) : FHIR.R4.Types.TFhirDetectedissueSeverityEnum;
begin
  case (src) of
    FHIR.R3.Types.DetectedissueSeverityHigh: exit(FHIR.R4.Types.DetectedissueSeverityHigh);
    FHIR.R3.Types.DetectedissueSeverityModerate: exit(FHIR.R4.Types.DetectedissueSeverityModerate);
    FHIR.R3.Types.DetectedissueSeverityLow: exit(FHIR.R4.Types.DetectedissueSeverityLow);
    else exit(FHIR.R4.Types.DetectedissueSeverityNull);
  end;
end;

class function TVersionConvertor_30_40.convertDetectedIssueSeverity(src : FHIR.R4.Types.TFhirDetectedissueSeverityEnum) : FHIR.R3.Types.TFhirDetectedissueSeverityEnum;
begin
  case (src) of
    FHIR.R4.Types.DetectedissueSeverityHigh: exit(FHIR.R3.Types.DetectedissueSeverityHigh);
    FHIR.R4.Types.DetectedissueSeverityModerate: exit(FHIR.R3.Types.DetectedissueSeverityModerate);
    FHIR.R4.Types.DetectedissueSeverityLow: exit(FHIR.R3.Types.DetectedissueSeverityLow);
    else exit(FHIR.R3.Types.DetectedissueSeverityNull);
  end;
end;

class function TVersionConvertor_30_40.convertFHIRDeviceStatus(src : FHIR.R3.Types.TFhirDeviceStatusEnum) : FHIR.R4.Types.TFhirDeviceStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.DeviceStatusActive: exit(FHIR.R4.Types.DeviceStatusActive);
    FHIR.R3.Types.DeviceStatusInactive: exit(FHIR.R4.Types.DeviceStatusInactive);
    FHIR.R3.Types.DeviceStatusEnteredInError: exit(FHIR.R4.Types.DeviceStatusEnteredInError);
    FHIR.R3.Types.DeviceStatusUnknown: exit(FHIR.R4.Types.DeviceStatusUnknown);
    else exit(FHIR.R4.Types.DeviceStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertFHIRDeviceStatus(src : FHIR.R4.Types.TFhirDeviceStatusEnum) : FHIR.R3.Types.TFhirDeviceStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.DeviceStatusActive: exit(FHIR.R3.Types.DeviceStatusActive);
    FHIR.R4.Types.DeviceStatusInactive: exit(FHIR.R3.Types.DeviceStatusInactive);
    FHIR.R4.Types.DeviceStatusEnteredInError: exit(FHIR.R3.Types.DeviceStatusEnteredInError);
    FHIR.R4.Types.DeviceStatusUnknown: exit(FHIR.R3.Types.DeviceStatusUnknown);
    else exit(FHIR.R3.Types.DeviceStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertUDIEntryType(src : FHIR.R3.Types.TFhirUdiEntryTypeEnum) : FHIR.R4.Types.TFhirUdiEntryTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.UdiEntryTypeBarcode: exit(FHIR.R4.Types.UdiEntryTypeBarcode);
    FHIR.R3.Types.UdiEntryTypeRfid: exit(FHIR.R4.Types.UdiEntryTypeRfid);
    FHIR.R3.Types.UdiEntryTypeManual: exit(FHIR.R4.Types.UdiEntryTypeManual);
    FHIR.R3.Types.UdiEntryTypeCard: exit(FHIR.R4.Types.UdiEntryTypeCard);
    FHIR.R3.Types.UdiEntryTypeSelfReported: exit(FHIR.R4.Types.UdiEntryTypeSelfReported);
    FHIR.R3.Types.UdiEntryTypeUnknown: exit(FHIR.R4.Types.UdiEntryTypeUnknown);
    else exit(FHIR.R4.Types.UdiEntryTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertUDIEntryType(src : FHIR.R4.Types.TFhirUdiEntryTypeEnum) : FHIR.R3.Types.TFhirUdiEntryTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.UdiEntryTypeBarcode: exit(FHIR.R3.Types.UdiEntryTypeBarcode);
    FHIR.R4.Types.UdiEntryTypeRfid: exit(FHIR.R3.Types.UdiEntryTypeRfid);
    FHIR.R4.Types.UdiEntryTypeManual: exit(FHIR.R3.Types.UdiEntryTypeManual);
    FHIR.R4.Types.UdiEntryTypeCard: exit(FHIR.R3.Types.UdiEntryTypeCard);
    FHIR.R4.Types.UdiEntryTypeSelfReported: exit(FHIR.R3.Types.UdiEntryTypeSelfReported);
    FHIR.R4.Types.UdiEntryTypeUnknown: exit(FHIR.R3.Types.UdiEntryTypeUnknown);
    else exit(FHIR.R3.Types.UdiEntryTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertDeviceMetricOperationalStatus(src : FHIR.R3.Types.TFhirMetricOperationalStatusEnum) : FHIR.R4.Types.TFhirMetricOperationalStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.MetricOperationalStatusOn: exit(FHIR.R4.Types.MetricOperationalStatusOn);
    FHIR.R3.Types.MetricOperationalStatusOff: exit(FHIR.R4.Types.MetricOperationalStatusOff);
    FHIR.R3.Types.MetricOperationalStatusStandby: exit(FHIR.R4.Types.MetricOperationalStatusStandby);
    FHIR.R3.Types.MetricOperationalStatusEnteredInError: exit(FHIR.R4.Types.MetricOperationalStatusEnteredInError);
    else exit(FHIR.R4.Types.MetricOperationalStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertDeviceMetricOperationalStatus(src : FHIR.R4.Types.TFhirMetricOperationalStatusEnum) : FHIR.R3.Types.TFhirMetricOperationalStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.MetricOperationalStatusOn: exit(FHIR.R3.Types.MetricOperationalStatusOn);
    FHIR.R4.Types.MetricOperationalStatusOff: exit(FHIR.R3.Types.MetricOperationalStatusOff);
    FHIR.R4.Types.MetricOperationalStatusStandby: exit(FHIR.R3.Types.MetricOperationalStatusStandby);
    FHIR.R4.Types.MetricOperationalStatusEnteredInError: exit(FHIR.R3.Types.MetricOperationalStatusEnteredInError);
    else exit(FHIR.R3.Types.MetricOperationalStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertDeviceMetricColor(src : FHIR.R3.Types.TFhirMetricColorEnum) : FHIR.R4.Types.TFhirMetricColorEnum;
begin
  case (src) of
    FHIR.R3.Types.MetricColorBlack: exit(FHIR.R4.Types.MetricColorBlack);
    FHIR.R3.Types.MetricColorRed: exit(FHIR.R4.Types.MetricColorRed);
    FHIR.R3.Types.MetricColorGreen: exit(FHIR.R4.Types.MetricColorGreen);
    FHIR.R3.Types.MetricColorYellow: exit(FHIR.R4.Types.MetricColorYellow);
    FHIR.R3.Types.MetricColorBlue: exit(FHIR.R4.Types.MetricColorBlue);
    FHIR.R3.Types.MetricColorMagenta: exit(FHIR.R4.Types.MetricColorMagenta);
    FHIR.R3.Types.MetricColorCyan: exit(FHIR.R4.Types.MetricColorCyan);
    FHIR.R3.Types.MetricColorWhite: exit(FHIR.R4.Types.MetricColorWhite);
    else exit(FHIR.R4.Types.MetricColorNull);
  end;
end;

class function TVersionConvertor_30_40.convertDeviceMetricColor(src : FHIR.R4.Types.TFhirMetricColorEnum) : FHIR.R3.Types.TFhirMetricColorEnum;
begin
  case (src) of
    FHIR.R4.Types.MetricColorBlack: exit(FHIR.R3.Types.MetricColorBlack);
    FHIR.R4.Types.MetricColorRed: exit(FHIR.R3.Types.MetricColorRed);
    FHIR.R4.Types.MetricColorGreen: exit(FHIR.R3.Types.MetricColorGreen);
    FHIR.R4.Types.MetricColorYellow: exit(FHIR.R3.Types.MetricColorYellow);
    FHIR.R4.Types.MetricColorBlue: exit(FHIR.R3.Types.MetricColorBlue);
    FHIR.R4.Types.MetricColorMagenta: exit(FHIR.R3.Types.MetricColorMagenta);
    FHIR.R4.Types.MetricColorCyan: exit(FHIR.R3.Types.MetricColorCyan);
    FHIR.R4.Types.MetricColorWhite: exit(FHIR.R3.Types.MetricColorWhite);
    else exit(FHIR.R3.Types.MetricColorNull);
  end;
end;

class function TVersionConvertor_30_40.convertDeviceMetricCategory(src : FHIR.R3.Types.TFhirMetricCategoryEnum) : FHIR.R4.Types.TFhirMetricCategoryEnum;
begin
  case (src) of
    FHIR.R3.Types.MetricCategoryMeasurement: exit(FHIR.R4.Types.MetricCategoryMeasurement);
    FHIR.R3.Types.MetricCategorySetting: exit(FHIR.R4.Types.MetricCategorySetting);
    FHIR.R3.Types.MetricCategoryCalculation: exit(FHIR.R4.Types.MetricCategoryCalculation);
    FHIR.R3.Types.MetricCategoryUnspecified: exit(FHIR.R4.Types.MetricCategoryUnspecified);
    else exit(FHIR.R4.Types.MetricCategoryNull);
  end;
end;

class function TVersionConvertor_30_40.convertDeviceMetricCategory(src : FHIR.R4.Types.TFhirMetricCategoryEnum) : FHIR.R3.Types.TFhirMetricCategoryEnum;
begin
  case (src) of
    FHIR.R4.Types.MetricCategoryMeasurement: exit(FHIR.R3.Types.MetricCategoryMeasurement);
    FHIR.R4.Types.MetricCategorySetting: exit(FHIR.R3.Types.MetricCategorySetting);
    FHIR.R4.Types.MetricCategoryCalculation: exit(FHIR.R3.Types.MetricCategoryCalculation);
    FHIR.R4.Types.MetricCategoryUnspecified: exit(FHIR.R3.Types.MetricCategoryUnspecified);
    else exit(FHIR.R3.Types.MetricCategoryNull);
  end;
end;

class function TVersionConvertor_30_40.convertDeviceMetricCalibrationType(src : FHIR.R3.Types.TFhirMetricCalibrationTypeEnum) : FHIR.R4.Types.TFhirMetricCalibrationTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.MetricCalibrationTypeUnspecified: exit(FHIR.R4.Types.MetricCalibrationTypeUnspecified);
    FHIR.R3.Types.MetricCalibrationTypeOffset: exit(FHIR.R4.Types.MetricCalibrationTypeOffset);
    FHIR.R3.Types.MetricCalibrationTypeGain: exit(FHIR.R4.Types.MetricCalibrationTypeGain);
    FHIR.R3.Types.MetricCalibrationTypeTwoPoint: exit(FHIR.R4.Types.MetricCalibrationTypeTwoPoint);
    else exit(FHIR.R4.Types.MetricCalibrationTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertDeviceMetricCalibrationType(src : FHIR.R4.Types.TFhirMetricCalibrationTypeEnum) : FHIR.R3.Types.TFhirMetricCalibrationTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.MetricCalibrationTypeUnspecified: exit(FHIR.R3.Types.MetricCalibrationTypeUnspecified);
    FHIR.R4.Types.MetricCalibrationTypeOffset: exit(FHIR.R3.Types.MetricCalibrationTypeOffset);
    FHIR.R4.Types.MetricCalibrationTypeGain: exit(FHIR.R3.Types.MetricCalibrationTypeGain);
    FHIR.R4.Types.MetricCalibrationTypeTwoPoint: exit(FHIR.R3.Types.MetricCalibrationTypeTwoPoint);
    else exit(FHIR.R3.Types.MetricCalibrationTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertDeviceMetricCalibrationState(src : FHIR.R3.Types.TFhirMetricCalibrationStateEnum) : FHIR.R4.Types.TFhirMetricCalibrationStateEnum;
begin
  case (src) of
    FHIR.R3.Types.MetricCalibrationStateNotCalibrated: exit(FHIR.R4.Types.MetricCalibrationStateNotCalibrated);
    FHIR.R3.Types.MetricCalibrationStateCalibrationRequired: exit(FHIR.R4.Types.MetricCalibrationStateCalibrationRequired);
    FHIR.R3.Types.MetricCalibrationStateCalibrated: exit(FHIR.R4.Types.MetricCalibrationStateCalibrated);
    FHIR.R3.Types.MetricCalibrationStateUnspecified: exit(FHIR.R4.Types.MetricCalibrationStateUnspecified);
    else exit(FHIR.R4.Types.MetricCalibrationStateNull);
  end;
end;

class function TVersionConvertor_30_40.convertDeviceMetricCalibrationState(src : FHIR.R4.Types.TFhirMetricCalibrationStateEnum) : FHIR.R3.Types.TFhirMetricCalibrationStateEnum;
begin
  case (src) of
    FHIR.R4.Types.MetricCalibrationStateNotCalibrated: exit(FHIR.R3.Types.MetricCalibrationStateNotCalibrated);
    FHIR.R4.Types.MetricCalibrationStateCalibrationRequired: exit(FHIR.R3.Types.MetricCalibrationStateCalibrationRequired);
    FHIR.R4.Types.MetricCalibrationStateCalibrated: exit(FHIR.R3.Types.MetricCalibrationStateCalibrated);
    FHIR.R4.Types.MetricCalibrationStateUnspecified: exit(FHIR.R3.Types.MetricCalibrationStateUnspecified);
    else exit(FHIR.R3.Types.MetricCalibrationStateNull);
  end;
end;

class function TVersionConvertor_30_40.convertDeviceUseStatementStatus(src : FHIR.R3.Types.TFhirDeviceStatementStatusEnum) : FHIR.R4.Types.TFhirDeviceStatementStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.DeviceStatementStatusActive: exit(FHIR.R4.Types.DeviceStatementStatusActive);
    FHIR.R3.Types.DeviceStatementStatusCompleted: exit(FHIR.R4.Types.DeviceStatementStatusCompleted);
    FHIR.R3.Types.DeviceStatementStatusEnteredInError: exit(FHIR.R4.Types.DeviceStatementStatusEnteredInError);
    FHIR.R3.Types.DeviceStatementStatusIntended: exit(FHIR.R4.Types.DeviceStatementStatusIntended);
    FHIR.R3.Types.DeviceStatementStatusStopped: exit(FHIR.R4.Types.DeviceStatementStatusStopped);
    FHIR.R3.Types.DeviceStatementStatusOnHold: exit(FHIR.R4.Types.DeviceStatementStatusOnHold);
    else exit(FHIR.R4.Types.DeviceStatementStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertDeviceUseStatementStatus(src : FHIR.R4.Types.TFhirDeviceStatementStatusEnum) : FHIR.R3.Types.TFhirDeviceStatementStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.DeviceStatementStatusActive: exit(FHIR.R3.Types.DeviceStatementStatusActive);
    FHIR.R4.Types.DeviceStatementStatusCompleted: exit(FHIR.R3.Types.DeviceStatementStatusCompleted);
    FHIR.R4.Types.DeviceStatementStatusEnteredInError: exit(FHIR.R3.Types.DeviceStatementStatusEnteredInError);
    FHIR.R4.Types.DeviceStatementStatusIntended: exit(FHIR.R3.Types.DeviceStatementStatusIntended);
    FHIR.R4.Types.DeviceStatementStatusStopped: exit(FHIR.R3.Types.DeviceStatementStatusStopped);
    FHIR.R4.Types.DeviceStatementStatusOnHold: exit(FHIR.R3.Types.DeviceStatementStatusOnHold);
    else exit(FHIR.R3.Types.DeviceStatementStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertDiagnosticReportStatus(src : FHIR.R3.Types.TFhirDiagnosticReportStatusEnum) : FHIR.R4.Types.TFhirDiagnosticReportStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.DiagnosticReportStatusRegistered: exit(FHIR.R4.Types.DiagnosticReportStatusRegistered);
    FHIR.R3.Types.DiagnosticReportStatusPartial: exit(FHIR.R4.Types.DiagnosticReportStatusPartial);
    FHIR.R3.Types.DiagnosticReportStatusPreliminary: exit(FHIR.R4.Types.DiagnosticReportStatusPreliminary);
    FHIR.R3.Types.DiagnosticReportStatusFinal: exit(FHIR.R4.Types.DiagnosticReportStatusFinal);
    FHIR.R3.Types.DiagnosticReportStatusAmended: exit(FHIR.R4.Types.DiagnosticReportStatusAmended);
    FHIR.R3.Types.DiagnosticReportStatusCorrected: exit(FHIR.R4.Types.DiagnosticReportStatusCorrected);
    FHIR.R3.Types.DiagnosticReportStatusAppended: exit(FHIR.R4.Types.DiagnosticReportStatusAppended);
    FHIR.R3.Types.DiagnosticReportStatusCancelled: exit(FHIR.R4.Types.DiagnosticReportStatusCancelled);
    FHIR.R3.Types.DiagnosticReportStatusEnteredInError: exit(FHIR.R4.Types.DiagnosticReportStatusEnteredInError);
    FHIR.R3.Types.DiagnosticReportStatusUnknown: exit(FHIR.R4.Types.DiagnosticReportStatusUnknown);
    else exit(FHIR.R4.Types.DiagnosticReportStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertDiagnosticReportStatus(src : FHIR.R4.Types.TFhirDiagnosticReportStatusEnum) : FHIR.R3.Types.TFhirDiagnosticReportStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.DiagnosticReportStatusRegistered: exit(FHIR.R3.Types.DiagnosticReportStatusRegistered);
    FHIR.R4.Types.DiagnosticReportStatusPartial: exit(FHIR.R3.Types.DiagnosticReportStatusPartial);
    FHIR.R4.Types.DiagnosticReportStatusPreliminary: exit(FHIR.R3.Types.DiagnosticReportStatusPreliminary);
    FHIR.R4.Types.DiagnosticReportStatusFinal: exit(FHIR.R3.Types.DiagnosticReportStatusFinal);
    FHIR.R4.Types.DiagnosticReportStatusAmended: exit(FHIR.R3.Types.DiagnosticReportStatusAmended);
    FHIR.R4.Types.DiagnosticReportStatusCorrected: exit(FHIR.R3.Types.DiagnosticReportStatusCorrected);
    FHIR.R4.Types.DiagnosticReportStatusAppended: exit(FHIR.R3.Types.DiagnosticReportStatusAppended);
    FHIR.R4.Types.DiagnosticReportStatusCancelled: exit(FHIR.R3.Types.DiagnosticReportStatusCancelled);
    FHIR.R4.Types.DiagnosticReportStatusEnteredInError: exit(FHIR.R3.Types.DiagnosticReportStatusEnteredInError);
    FHIR.R4.Types.DiagnosticReportStatusUnknown: exit(FHIR.R3.Types.DiagnosticReportStatusUnknown);
    else exit(FHIR.R3.Types.DiagnosticReportStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertDocumentReferenceStatus(src : FHIR.R3.Types.TFhirDocumentReferenceStatusEnum) : FHIR.R4.Types.TFhirDocumentReferenceStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.DocumentReferenceStatusCurrent: exit(FHIR.R4.Types.DocumentReferenceStatusCurrent);
    FHIR.R3.Types.DocumentReferenceStatusSuperseded: exit(FHIR.R4.Types.DocumentReferenceStatusSuperseded);
    FHIR.R3.Types.DocumentReferenceStatusEnteredInError: exit(FHIR.R4.Types.DocumentReferenceStatusEnteredInError);
    else exit(FHIR.R4.Types.DocumentReferenceStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertDocumentReferenceStatus(src : FHIR.R4.Types.TFhirDocumentReferenceStatusEnum) : FHIR.R3.Types.TFhirDocumentReferenceStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.DocumentReferenceStatusCurrent: exit(FHIR.R3.Types.DocumentReferenceStatusCurrent);
    FHIR.R4.Types.DocumentReferenceStatusSuperseded: exit(FHIR.R3.Types.DocumentReferenceStatusSuperseded);
    FHIR.R4.Types.DocumentReferenceStatusEnteredInError: exit(FHIR.R3.Types.DocumentReferenceStatusEnteredInError);
    else exit(FHIR.R3.Types.DocumentReferenceStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertReferredDocumentStatus(src : FHIR.R3.Types.TFhirCompositionStatusEnum) : FHIR.R4.Types.TFhirCompositionStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.CompositionStatusPreliminary: exit(FHIR.R4.Types.CompositionStatusPreliminary);
    FHIR.R3.Types.CompositionStatusFinal: exit(FHIR.R4.Types.CompositionStatusFinal);
    FHIR.R3.Types.CompositionStatusAmended: exit(FHIR.R4.Types.CompositionStatusAmended);
    FHIR.R3.Types.CompositionStatusEnteredInError: exit(FHIR.R4.Types.CompositionStatusEnteredInError);
    else exit(FHIR.R4.Types.CompositionStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertReferredDocumentStatus(src : FHIR.R4.Types.TFhirCompositionStatusEnum) : FHIR.R3.Types.TFhirCompositionStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.CompositionStatusPreliminary: exit(FHIR.R3.Types.CompositionStatusPreliminary);
    FHIR.R4.Types.CompositionStatusFinal: exit(FHIR.R3.Types.CompositionStatusFinal);
    FHIR.R4.Types.CompositionStatusAmended: exit(FHIR.R3.Types.CompositionStatusAmended);
    FHIR.R4.Types.CompositionStatusEnteredInError: exit(FHIR.R3.Types.CompositionStatusEnteredInError);
    else exit(FHIR.R3.Types.CompositionStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertEncounterStatus(src : FHIR.R3.Types.TFhirEncounterStatusEnum) : FHIR.R4.Types.TFhirEncounterStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.EncounterStatusPlanned: exit(FHIR.R4.Types.EncounterStatusPlanned);
    FHIR.R3.Types.EncounterStatusArrived: exit(FHIR.R4.Types.EncounterStatusArrived);
    FHIR.R3.Types.EncounterStatusTriaged: exit(FHIR.R4.Types.EncounterStatusTriaged);
    FHIR.R3.Types.EncounterStatusInProgress: exit(FHIR.R4.Types.EncounterStatusInProgress);
    FHIR.R3.Types.EncounterStatusOnleave: exit(FHIR.R4.Types.EncounterStatusOnleave);
    FHIR.R3.Types.EncounterStatusFinished: exit(FHIR.R4.Types.EncounterStatusFinished);
    FHIR.R3.Types.EncounterStatusCancelled: exit(FHIR.R4.Types.EncounterStatusCancelled);
    FHIR.R3.Types.EncounterStatusEnteredInError: exit(FHIR.R4.Types.EncounterStatusEnteredInError);
    FHIR.R3.Types.EncounterStatusUnknown: exit(FHIR.R4.Types.EncounterStatusUnknown);
    else exit(FHIR.R4.Types.EncounterStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertEncounterStatus(src : FHIR.R4.Types.TFhirEncounterStatusEnum) : FHIR.R3.Types.TFhirEncounterStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.EncounterStatusPlanned: exit(FHIR.R3.Types.EncounterStatusPlanned);
    FHIR.R4.Types.EncounterStatusArrived: exit(FHIR.R3.Types.EncounterStatusArrived);
    FHIR.R4.Types.EncounterStatusTriaged: exit(FHIR.R3.Types.EncounterStatusTriaged);
    FHIR.R4.Types.EncounterStatusInProgress: exit(FHIR.R3.Types.EncounterStatusInProgress);
    FHIR.R4.Types.EncounterStatusOnleave: exit(FHIR.R3.Types.EncounterStatusOnleave);
    FHIR.R4.Types.EncounterStatusFinished: exit(FHIR.R3.Types.EncounterStatusFinished);
    FHIR.R4.Types.EncounterStatusCancelled: exit(FHIR.R3.Types.EncounterStatusCancelled);
    FHIR.R4.Types.EncounterStatusEnteredInError: exit(FHIR.R3.Types.EncounterStatusEnteredInError);
    FHIR.R4.Types.EncounterStatusUnknown: exit(FHIR.R3.Types.EncounterStatusUnknown);
    else exit(FHIR.R3.Types.EncounterStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertEncounterLocationStatus(src : FHIR.R3.Types.TFhirEncounterLocationStatusEnum) : FHIR.R4.Types.TFhirEncounterLocationStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.EncounterLocationStatusPlanned: exit(FHIR.R4.Types.EncounterLocationStatusPlanned);
    FHIR.R3.Types.EncounterLocationStatusActive: exit(FHIR.R4.Types.EncounterLocationStatusActive);
    FHIR.R3.Types.EncounterLocationStatusReserved: exit(FHIR.R4.Types.EncounterLocationStatusReserved);
    FHIR.R3.Types.EncounterLocationStatusCompleted: exit(FHIR.R4.Types.EncounterLocationStatusCompleted);
    else exit(FHIR.R4.Types.EncounterLocationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertEncounterLocationStatus(src : FHIR.R4.Types.TFhirEncounterLocationStatusEnum) : FHIR.R3.Types.TFhirEncounterLocationStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.EncounterLocationStatusPlanned: exit(FHIR.R3.Types.EncounterLocationStatusPlanned);
    FHIR.R4.Types.EncounterLocationStatusActive: exit(FHIR.R3.Types.EncounterLocationStatusActive);
    FHIR.R4.Types.EncounterLocationStatusReserved: exit(FHIR.R3.Types.EncounterLocationStatusReserved);
    FHIR.R4.Types.EncounterLocationStatusCompleted: exit(FHIR.R3.Types.EncounterLocationStatusCompleted);
    else exit(FHIR.R3.Types.EncounterLocationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertEndpointStatus(src : FHIR.R3.Types.TFhirEndpointStatusEnum) : FHIR.R4.Types.TFhirEndpointStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.EndpointStatusActive: exit(FHIR.R4.Types.EndpointStatusActive);
    FHIR.R3.Types.EndpointStatusSuspended: exit(FHIR.R4.Types.EndpointStatusSuspended);
    FHIR.R3.Types.EndpointStatusError: exit(FHIR.R4.Types.EndpointStatusError);
    FHIR.R3.Types.EndpointStatusOff: exit(FHIR.R4.Types.EndpointStatusOff);
    FHIR.R3.Types.EndpointStatusEnteredInError: exit(FHIR.R4.Types.EndpointStatusEnteredInError);
    FHIR.R3.Types.EndpointStatusTest: exit(FHIR.R4.Types.EndpointStatusTest);
    else exit(FHIR.R4.Types.EndpointStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertEndpointStatus(src : FHIR.R4.Types.TFhirEndpointStatusEnum) : FHIR.R3.Types.TFhirEndpointStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.EndpointStatusActive: exit(FHIR.R3.Types.EndpointStatusActive);
    FHIR.R4.Types.EndpointStatusSuspended: exit(FHIR.R3.Types.EndpointStatusSuspended);
    FHIR.R4.Types.EndpointStatusError: exit(FHIR.R3.Types.EndpointStatusError);
    FHIR.R4.Types.EndpointStatusOff: exit(FHIR.R3.Types.EndpointStatusOff);
    FHIR.R4.Types.EndpointStatusEnteredInError: exit(FHIR.R3.Types.EndpointStatusEnteredInError);
    FHIR.R4.Types.EndpointStatusTest: exit(FHIR.R3.Types.EndpointStatusTest);
    else exit(FHIR.R3.Types.EndpointStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertEpisodeOfCareStatus(src : FHIR.R3.Types.TFhirEpisodeOfCareStatusEnum) : FHIR.R4.Types.TFhirEpisodeOfCareStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.EpisodeOfCareStatusPlanned: exit(FHIR.R4.Types.EpisodeOfCareStatusPlanned);
    FHIR.R3.Types.EpisodeOfCareStatusWaitlist: exit(FHIR.R4.Types.EpisodeOfCareStatusWaitlist);
    FHIR.R3.Types.EpisodeOfCareStatusActive: exit(FHIR.R4.Types.EpisodeOfCareStatusActive);
    FHIR.R3.Types.EpisodeOfCareStatusOnhold: exit(FHIR.R4.Types.EpisodeOfCareStatusOnhold);
    FHIR.R3.Types.EpisodeOfCareStatusFinished: exit(FHIR.R4.Types.EpisodeOfCareStatusFinished);
    FHIR.R3.Types.EpisodeOfCareStatusCancelled: exit(FHIR.R4.Types.EpisodeOfCareStatusCancelled);
    FHIR.R3.Types.EpisodeOfCareStatusEnteredInError: exit(FHIR.R4.Types.EpisodeOfCareStatusEnteredInError);
    else exit(FHIR.R4.Types.EpisodeOfCareStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertEpisodeOfCareStatus(src : FHIR.R4.Types.TFhirEpisodeOfCareStatusEnum) : FHIR.R3.Types.TFhirEpisodeOfCareStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.EpisodeOfCareStatusPlanned: exit(FHIR.R3.Types.EpisodeOfCareStatusPlanned);
    FHIR.R4.Types.EpisodeOfCareStatusWaitlist: exit(FHIR.R3.Types.EpisodeOfCareStatusWaitlist);
    FHIR.R4.Types.EpisodeOfCareStatusActive: exit(FHIR.R3.Types.EpisodeOfCareStatusActive);
    FHIR.R4.Types.EpisodeOfCareStatusOnhold: exit(FHIR.R3.Types.EpisodeOfCareStatusOnhold);
    FHIR.R4.Types.EpisodeOfCareStatusFinished: exit(FHIR.R3.Types.EpisodeOfCareStatusFinished);
    FHIR.R4.Types.EpisodeOfCareStatusCancelled: exit(FHIR.R3.Types.EpisodeOfCareStatusCancelled);
    FHIR.R4.Types.EpisodeOfCareStatusEnteredInError: exit(FHIR.R3.Types.EpisodeOfCareStatusEnteredInError);
    else exit(FHIR.R3.Types.EpisodeOfCareStatusNull);
  end;
end;

//class function TVersionConvertor_30_40.convertSystemVersionProcessingMode(src : FHIR.R3.Types.TFhirSystemVersionProcessingModeEnum) : FHIR.R4.Types.TFhirSystemVersionProcessingModeEnum;
//begin
//  case (src) of
//    FHIR.R3.Types.SystemVersionProcessingModeDefault: exit(FHIR.R4.Types.SystemVersionProcessingModeDefault);
//    FHIR.R3.Types.SystemVersionProcessingModeCheck: exit(FHIR.R4.Types.SystemVersionProcessingModeCheck);
//    FHIR.R3.Types.SystemVersionProcessingModeOverride: exit(FHIR.R4.Types.SystemVersionProcessingModeOverride);
//    else exit(FHIR.R4.Types.SystemVersionProcessingModeNull);
//  end;
//end;
//
//class function TVersionConvertor_30_40.convertSystemVersionProcessingMode(src : FHIR.R4.Types.TFhirSystemVersionProcessingModeEnum) : FHIR.R3.Types.TFhirSystemVersionProcessingModeEnum;
//begin
//  case (src) of
//    FHIR.R4.Types.SystemVersionProcessingModeDefault: exit(FHIR.R3.Types.SystemVersionProcessingModeDefault);
//    FHIR.R4.Types.SystemVersionProcessingModeCheck: exit(FHIR.R3.Types.SystemVersionProcessingModeCheck);
//    FHIR.R4.Types.SystemVersionProcessingModeOverride: exit(FHIR.R3.Types.SystemVersionProcessingModeOverride);
//    else exit(FHIR.R3.Types.SystemVersionProcessingModeNull);
//  end;
//end;
//
class function TVersionConvertor_30_40.convertFamilyHistoryStatus(src : FHIR.R3.Types.TFhirHistoryStatusEnum) : FHIR.R4.Types.TFhirHistoryStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.HistoryStatusPartial: exit(FHIR.R4.Types.HistoryStatusPartial);
    FHIR.R3.Types.HistoryStatusCompleted: exit(FHIR.R4.Types.HistoryStatusCompleted);
    FHIR.R3.Types.HistoryStatusEnteredInError: exit(FHIR.R4.Types.HistoryStatusEnteredInError);
    FHIR.R3.Types.HistoryStatusHealthUnknown: exit(FHIR.R4.Types.HistoryStatusHealthUnknown);
    else exit(FHIR.R4.Types.HistoryStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertFamilyHistoryStatus(src : FHIR.R4.Types.TFhirHistoryStatusEnum) : FHIR.R3.Types.TFhirHistoryStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.HistoryStatusPartial: exit(FHIR.R3.Types.HistoryStatusPartial);
    FHIR.R4.Types.HistoryStatusCompleted: exit(FHIR.R3.Types.HistoryStatusCompleted);
    FHIR.R4.Types.HistoryStatusEnteredInError: exit(FHIR.R3.Types.HistoryStatusEnteredInError);
    FHIR.R4.Types.HistoryStatusHealthUnknown: exit(FHIR.R3.Types.HistoryStatusHealthUnknown);
    else exit(FHIR.R3.Types.HistoryStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertAdministrativeGender(src : FHIR.R3.Types.TFhirAdministrativeGenderEnum) : FHIR.R4.Types.TFhirAdministrativeGenderEnum;
begin
  case (src) of
    FHIR.R3.Types.AdministrativeGenderMale: exit(FHIR.R4.Types.AdministrativeGenderMale);
    FHIR.R3.Types.AdministrativeGenderFemale: exit(FHIR.R4.Types.AdministrativeGenderFemale);
    FHIR.R3.Types.AdministrativeGenderOther: exit(FHIR.R4.Types.AdministrativeGenderOther);
    FHIR.R3.Types.AdministrativeGenderUnknown: exit(FHIR.R4.Types.AdministrativeGenderUnknown);
    else exit(FHIR.R4.Types.AdministrativeGenderNull);
  end;
end;

class function TVersionConvertor_30_40.convertAdministrativeGender(src : FHIR.R4.Types.TFhirAdministrativeGenderEnum) : FHIR.R3.Types.TFhirAdministrativeGenderEnum;
begin
  case (src) of
    FHIR.R4.Types.AdministrativeGenderMale: exit(FHIR.R3.Types.AdministrativeGenderMale);
    FHIR.R4.Types.AdministrativeGenderFemale: exit(FHIR.R3.Types.AdministrativeGenderFemale);
    FHIR.R4.Types.AdministrativeGenderOther: exit(FHIR.R3.Types.AdministrativeGenderOther);
    FHIR.R4.Types.AdministrativeGenderUnknown: exit(FHIR.R3.Types.AdministrativeGenderUnknown);
    else exit(FHIR.R3.Types.AdministrativeGenderNull);
  end;
end;

class function TVersionConvertor_30_40.convertFlagStatus(src : FHIR.R3.Types.TFhirFlagStatusEnum) : FHIR.R4.Types.TFhirFlagStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.FlagStatusActive: exit(FHIR.R4.Types.FlagStatusActive);
    FHIR.R3.Types.FlagStatusInactive: exit(FHIR.R4.Types.FlagStatusInactive);
    FHIR.R3.Types.FlagStatusEnteredInError: exit(FHIR.R4.Types.FlagStatusEnteredInError);
    else exit(FHIR.R4.Types.FlagStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertFlagStatus(src : FHIR.R4.Types.TFhirFlagStatusEnum) : FHIR.R3.Types.TFhirFlagStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.FlagStatusActive: exit(FHIR.R3.Types.FlagStatusActive);
    FHIR.R4.Types.FlagStatusInactive: exit(FHIR.R3.Types.FlagStatusInactive);
    FHIR.R4.Types.FlagStatusEnteredInError: exit(FHIR.R3.Types.FlagStatusEnteredInError);
    else exit(FHIR.R3.Types.FlagStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertGoalStatus(src : FHIR.R3.Types.TFhirGoalStatusEnum) : FHIR.R4.Types.TFhirGoalStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.GoalStatusProposed: exit(FHIR.R4.Types.GoalStatusProposed);
    FHIR.R3.Types.GoalStatusAccepted: exit(FHIR.R4.Types.GoalStatusAccepted);
    FHIR.R3.Types.GoalStatusPlanned: exit(FHIR.R4.Types.GoalStatusPlanned);
    FHIR.R3.Types.GoalStatusInProgress: exit(FHIR.R4.Types.GoalStatusActive);
    FHIR.R3.Types.GoalStatusOnTarget: exit(FHIR.R4.Types.GoalStatusActive);
    FHIR.R3.Types.GoalStatusAheadOfTarget: exit(FHIR.R4.Types.GoalStatusActive);
    FHIR.R3.Types.GoalStatusBehindTarget: exit(FHIR.R4.Types.GoalStatusActive);
    FHIR.R3.Types.GoalStatusSustaining: exit(FHIR.R4.Types.GoalStatusActive);
    FHIR.R3.Types.GoalStatusAchieved: exit(FHIR.R4.Types.GoalStatusCompleted);
    FHIR.R3.Types.GoalStatusOnHold: exit(FHIR.R4.Types.GoalStatusOnHold);
    FHIR.R3.Types.GoalStatusCancelled: exit(FHIR.R4.Types.GoalStatusCancelled);
    FHIR.R3.Types.GoalStatusEnteredInError: exit(FHIR.R4.Types.GoalStatusEnteredInError);
    FHIR.R3.Types.GoalStatusRejected: exit(FHIR.R4.Types.GoalStatusRejected);
    else exit(FHIR.R4.Types.GoalStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertGoalStatus(src : FHIR.R4.Types.TFhirGoalStatusEnum) : FHIR.R3.Types.TFhirGoalStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.GoalStatusProposed: exit(FHIR.R3.Types.GoalStatusProposed);
    FHIR.R4.Types.GoalStatusAccepted: exit(FHIR.R3.Types.GoalStatusAccepted);
    FHIR.R4.Types.GoalStatusPlanned: exit(FHIR.R3.Types.GoalStatusPlanned);
    FHIR.R4.Types.GoalStatusActive: exit(FHIR.R3.Types.GoalStatusInProgress);
    FHIR.R4.Types.GoalStatusCompleted: exit(FHIR.R3.Types.GoalStatusAchieved);
    FHIR.R4.Types.GoalStatusOnHold: exit(FHIR.R3.Types.GoalStatusOnHold);
    FHIR.R4.Types.GoalStatusCancelled: exit(FHIR.R3.Types.GoalStatusCancelled);
    FHIR.R4.Types.GoalStatusEnteredInError: exit(FHIR.R3.Types.GoalStatusEnteredInError);
    FHIR.R4.Types.GoalStatusRejected: exit(FHIR.R3.Types.GoalStatusRejected);
    else exit(FHIR.R3.Types.GoalStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertCompartmentCode(src : FHIR.R3.Types.TFhirCompartmentTypeEnum) : FHIR.R4.Types.TFhirCompartmentTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.CompartmentTypePatient: exit(FHIR.R4.Types.CompartmentTypePatient);
    FHIR.R3.Types.CompartmentTypeEncounter: exit(FHIR.R4.Types.CompartmentTypeEncounter);
    FHIR.R3.Types.CompartmentTypeRelatedPerson: exit(FHIR.R4.Types.CompartmentTypeRelatedPerson);
    FHIR.R3.Types.CompartmentTypePractitioner: exit(FHIR.R4.Types.CompartmentTypePractitioner);
    FHIR.R3.Types.CompartmentTypeDevice: exit(FHIR.R4.Types.CompartmentTypeDevice);
    else exit(FHIR.R4.Types.CompartmentTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertCompartmentCode(src : FHIR.R4.Types.TFhirCompartmentTypeEnum) : FHIR.R3.Types.TFhirCompartmentTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.CompartmentTypePatient: exit(FHIR.R3.Types.CompartmentTypePatient);
    FHIR.R4.Types.CompartmentTypeEncounter: exit(FHIR.R3.Types.CompartmentTypeEncounter);
    FHIR.R4.Types.CompartmentTypeRelatedPerson: exit(FHIR.R3.Types.CompartmentTypeRelatedPerson);
    FHIR.R4.Types.CompartmentTypePractitioner: exit(FHIR.R3.Types.CompartmentTypePractitioner);
    FHIR.R4.Types.CompartmentTypeDevice: exit(FHIR.R3.Types.CompartmentTypeDevice);
    else exit(FHIR.R3.Types.CompartmentTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertGraphCompartmentRule(src : FHIR.R3.Types.TFhirGraphCompartmentRuleEnum) : FHIR.R4.Types.TFhirGraphCompartmentRuleEnum;
begin
  case (src) of
    FHIR.R3.Types.GraphCompartmentRuleIdentical: exit(FHIR.R4.Types.GraphCompartmentRuleIdentical);
    FHIR.R3.Types.GraphCompartmentRuleMatching: exit(FHIR.R4.Types.GraphCompartmentRuleMatching);
    FHIR.R3.Types.GraphCompartmentRuleDifferent: exit(FHIR.R4.Types.GraphCompartmentRuleDifferent);
    FHIR.R3.Types.GraphCompartmentRuleCustom: exit(FHIR.R4.Types.GraphCompartmentRuleCustom);
    else exit(FHIR.R4.Types.GraphCompartmentRuleNull);
  end;
end;

class function TVersionConvertor_30_40.convertGraphCompartmentRule(src : FHIR.R4.Types.TFhirGraphCompartmentRuleEnum) : FHIR.R3.Types.TFhirGraphCompartmentRuleEnum;
begin
  case (src) of
    FHIR.R4.Types.GraphCompartmentRuleIdentical: exit(FHIR.R3.Types.GraphCompartmentRuleIdentical);
    FHIR.R4.Types.GraphCompartmentRuleMatching: exit(FHIR.R3.Types.GraphCompartmentRuleMatching);
    FHIR.R4.Types.GraphCompartmentRuleDifferent: exit(FHIR.R3.Types.GraphCompartmentRuleDifferent);
    FHIR.R4.Types.GraphCompartmentRuleCustom: exit(FHIR.R3.Types.GraphCompartmentRuleCustom);
    else exit(FHIR.R3.Types.GraphCompartmentRuleNull);
  end;
end;

class function TVersionConvertor_30_40.convertGroupType(src : FHIR.R3.Types.TFhirGroupTypeEnum) : FHIR.R4.Types.TFhirGroupTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.GroupTypePerson: exit(FHIR.R4.Types.GroupTypePerson);
    FHIR.R3.Types.GroupTypeAnimal: exit(FHIR.R4.Types.GroupTypeAnimal);
    FHIR.R3.Types.GroupTypePractitioner: exit(FHIR.R4.Types.GroupTypePractitioner);
    FHIR.R3.Types.GroupTypeDevice: exit(FHIR.R4.Types.GroupTypeDevice);
    FHIR.R3.Types.GroupTypeMedication: exit(FHIR.R4.Types.GroupTypeMedication);
    FHIR.R3.Types.GroupTypeSubstance: exit(FHIR.R4.Types.GroupTypeSubstance);
    else exit(FHIR.R4.Types.GroupTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertGroupType(src : FHIR.R4.Types.TFhirGroupTypeEnum) : FHIR.R3.Types.TFhirGroupTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.GroupTypePerson: exit(FHIR.R3.Types.GroupTypePerson);
    FHIR.R4.Types.GroupTypeAnimal: exit(FHIR.R3.Types.GroupTypeAnimal);
    FHIR.R4.Types.GroupTypePractitioner: exit(FHIR.R3.Types.GroupTypePractitioner);
    FHIR.R4.Types.GroupTypeDevice: exit(FHIR.R3.Types.GroupTypeDevice);
    FHIR.R4.Types.GroupTypeMedication: exit(FHIR.R3.Types.GroupTypeMedication);
    FHIR.R4.Types.GroupTypeSubstance: exit(FHIR.R3.Types.GroupTypeSubstance);
    else exit(FHIR.R3.Types.GroupTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertDaysOfWeek(src : FHIR.R3.Types.TFhirDaysOfWeekEnum) : FHIR.R4.Types.TFhirDaysOfWeekEnum;
begin
  case (src) of
    FHIR.R3.Types.DaysOfWeekMon: exit(FHIR.R4.Types.DaysOfWeekMon);
    FHIR.R3.Types.DaysOfWeekTue: exit(FHIR.R4.Types.DaysOfWeekTue);
    FHIR.R3.Types.DaysOfWeekWed: exit(FHIR.R4.Types.DaysOfWeekWed);
    FHIR.R3.Types.DaysOfWeekThu: exit(FHIR.R4.Types.DaysOfWeekThu);
    FHIR.R3.Types.DaysOfWeekFri: exit(FHIR.R4.Types.DaysOfWeekFri);
    FHIR.R3.Types.DaysOfWeekSat: exit(FHIR.R4.Types.DaysOfWeekSat);
    FHIR.R3.Types.DaysOfWeekSun: exit(FHIR.R4.Types.DaysOfWeekSun);
    else exit(FHIR.R4.Types.DaysOfWeekNull);
  end;
end;

class function TVersionConvertor_30_40.convertDaysOfWeek(src : FHIR.R4.Types.TFhirDaysOfWeekEnum) : FHIR.R3.Types.TFhirDaysOfWeekEnum;
begin
  case (src) of
    FHIR.R4.Types.DaysOfWeekMon: exit(FHIR.R3.Types.DaysOfWeekMon);
    FHIR.R4.Types.DaysOfWeekTue: exit(FHIR.R3.Types.DaysOfWeekTue);
    FHIR.R4.Types.DaysOfWeekWed: exit(FHIR.R3.Types.DaysOfWeekWed);
    FHIR.R4.Types.DaysOfWeekThu: exit(FHIR.R3.Types.DaysOfWeekThu);
    FHIR.R4.Types.DaysOfWeekFri: exit(FHIR.R3.Types.DaysOfWeekFri);
    FHIR.R4.Types.DaysOfWeekSat: exit(FHIR.R3.Types.DaysOfWeekSat);
    FHIR.R4.Types.DaysOfWeekSun: exit(FHIR.R3.Types.DaysOfWeekSun);
    else exit(FHIR.R3.Types.DaysOfWeekNull);
  end;
end;

class function TVersionConvertor_30_40.convertImmunizationStatus(src : FHIR.R3.Types.TFhirImmunizationStatusEnum) : FHIR.R4.Types.TFhirImmunizationStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.ImmunizationStatusCompleted: exit(FHIR.R4.Types.ImmunizationStatusCompleted);
    FHIR.R3.Types.ImmunizationStatusEnteredInError: exit(FHIR.R4.Types.ImmunizationStatusEnteredInError);
    else exit(FHIR.R4.Types.ImmunizationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertImmunizationStatus(src : FHIR.R4.Types.TFhirImmunizationStatusEnum) : FHIR.R3.Types.TFhirImmunizationStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.ImmunizationStatusCompleted: exit(FHIR.R3.Types.ImmunizationStatusCompleted);
    FHIR.R4.Types.ImmunizationStatusEnteredInError: exit(FHIR.R3.Types.ImmunizationStatusEnteredInError);
    else exit(FHIR.R3.Types.ImmunizationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.findPackage(definition : FHIR.R3.Resources.TFhirImplementationGuidePackageList; id : String) : FHIR.R3.Resources.TFhirImplementationGuidePackage;
var
  t : FHIR.R3.Resources.TFhirImplementationGuidePackage;
  t1 : FHIR.R3.Resources.TFhirImplementationGuidePackage;
begin
  for t in definition do
  begin
    if (t.getId().equals(id)) then
exit(t);

  end;
  t1 := FHIR.R3.Resources.TFhirImplementationGuidePackage.Create();
  t1.name := 'Default Package';
  t1.Id := id;
exit(t1);
end;

class function TVersionConvertor_30_40.convertPageGeneration(kind : FHIR.R3.Types.TFhirGuidePageKindEnum) : FHIR.R4.Types.TFhirGuidePageGenerationEnum;
begin
  case (kind) of
    FHIR.R3.Types.GuidePageKindPage: exit(FHIR.R4.Types.GuidePageGenerationHtml);
    else exit(FHIR.R4.Types.GuidePageGenerationGenerated);
  end;
end;

class function TVersionConvertor_30_40.convertPageGeneration(generation : FHIR.R4.Types.TFhirGuidePageGenerationEnum) : FHIR.R3.Types.TFhirGuidePageKindEnum;
begin
  case (generation) of
    FHIR.R4.Types.GuidePageGenerationHtml: exit(FHIR.R3.Types.GuidePageKindPage);
    else exit(FHIR.R3.Types.GuidePageKindResource);
  end;
end;

class function TVersionConvertor_30_40.convertLinkageType(src : FHIR.R3.Types.TFhirLinkageTypeEnum) : FHIR.R4.Types.TFhirLinkageTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.LinkageTypeSource: exit(FHIR.R4.Types.LinkageTypeSource);
    FHIR.R3.Types.LinkageTypeAlternate: exit(FHIR.R4.Types.LinkageTypeAlternate);
    FHIR.R3.Types.LinkageTypeHistorical: exit(FHIR.R4.Types.LinkageTypeHistorical);
    else exit(FHIR.R4.Types.LinkageTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertLinkageType(src : FHIR.R4.Types.TFhirLinkageTypeEnum) : FHIR.R3.Types.TFhirLinkageTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.LinkageTypeSource: exit(FHIR.R3.Types.LinkageTypeSource);
    FHIR.R4.Types.LinkageTypeAlternate: exit(FHIR.R3.Types.LinkageTypeAlternate);
    FHIR.R4.Types.LinkageTypeHistorical: exit(FHIR.R3.Types.LinkageTypeHistorical);
    else exit(FHIR.R3.Types.LinkageTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertListStatus(src : FHIR.R3.Types.TFhirListStatusEnum) : FHIR.R4.Types.TFhirListStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.ListStatusCurrent: exit(FHIR.R4.Types.ListStatusCurrent);
    FHIR.R3.Types.ListStatusRetired: exit(FHIR.R4.Types.ListStatusRetired);
    FHIR.R3.Types.ListStatusEnteredInError: exit(FHIR.R4.Types.ListStatusEnteredInError);
    else exit(FHIR.R4.Types.ListStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertListStatus(src : FHIR.R4.Types.TFhirListStatusEnum) : FHIR.R3.Types.TFhirListStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.ListStatusCurrent: exit(FHIR.R3.Types.ListStatusCurrent);
    FHIR.R4.Types.ListStatusRetired: exit(FHIR.R3.Types.ListStatusRetired);
    FHIR.R4.Types.ListStatusEnteredInError: exit(FHIR.R3.Types.ListStatusEnteredInError);
    else exit(FHIR.R3.Types.ListStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertListMode(src : FHIR.R3.Types.TFhirListModeEnum) : FHIR.R4.Types.TFhirListModeEnum;
begin
  case (src) of
    FHIR.R3.Types.ListModeWorking: exit(FHIR.R4.Types.ListModeWorking);
    FHIR.R3.Types.ListModeSnapshot: exit(FHIR.R4.Types.ListModeSnapshot);
    FHIR.R3.Types.ListModeChanges: exit(FHIR.R4.Types.ListModeChanges);
    else exit(FHIR.R4.Types.ListModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertListMode(src : FHIR.R4.Types.TFhirListModeEnum) : FHIR.R3.Types.TFhirListModeEnum;
begin
  case (src) of
    FHIR.R4.Types.ListModeWorking: exit(FHIR.R3.Types.ListModeWorking);
    FHIR.R4.Types.ListModeSnapshot: exit(FHIR.R3.Types.ListModeSnapshot);
    FHIR.R4.Types.ListModeChanges: exit(FHIR.R3.Types.ListModeChanges);
    else exit(FHIR.R3.Types.ListModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertLocationStatus(src : FHIR.R3.Types.TFhirLocationStatusEnum) : FHIR.R4.Types.TFhirLocationStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.LocationStatusActive: exit(FHIR.R4.Types.LocationStatusActive);
    FHIR.R3.Types.LocationStatusSuspended: exit(FHIR.R4.Types.LocationStatusSuspended);
    FHIR.R3.Types.LocationStatusInactive: exit(FHIR.R4.Types.LocationStatusInactive);
    else exit(FHIR.R4.Types.LocationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertLocationStatus(src : FHIR.R4.Types.TFhirLocationStatusEnum) : FHIR.R3.Types.TFhirLocationStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.LocationStatusActive: exit(FHIR.R3.Types.LocationStatusActive);
    FHIR.R4.Types.LocationStatusSuspended: exit(FHIR.R3.Types.LocationStatusSuspended);
    FHIR.R4.Types.LocationStatusInactive: exit(FHIR.R3.Types.LocationStatusInactive);
    else exit(FHIR.R3.Types.LocationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertLocationMode(src : FHIR.R3.Types.TFhirLocationModeEnum) : FHIR.R4.Types.TFhirLocationModeEnum;
begin
  case (src) of
    FHIR.R3.Types.LocationModeInstance: exit(FHIR.R4.Types.LocationModeInstance);
    FHIR.R3.Types.LocationModeKind: exit(FHIR.R4.Types.LocationModeKind);
    else exit(FHIR.R4.Types.LocationModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertLocationMode(src : FHIR.R4.Types.TFhirLocationModeEnum) : FHIR.R3.Types.TFhirLocationModeEnum;
begin
  case (src) of
    FHIR.R4.Types.LocationModeInstance: exit(FHIR.R3.Types.LocationModeInstance);
    FHIR.R4.Types.LocationModeKind: exit(FHIR.R3.Types.LocationModeKind);
    else exit(FHIR.R3.Types.LocationModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertMedicationStatus(src : FHIR.R3.Types.TFhirMedicationStatusEnum) : FHIR.R4.Types.TFhirMedicationStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.MedicationStatusActive: exit(FHIR.R4.Types.MedicationStatusActive);
    FHIR.R3.Types.MedicationStatusInactive: exit(FHIR.R4.Types.MedicationStatusInactive);
    FHIR.R3.Types.MedicationStatusEnteredInError: exit(FHIR.R4.Types.MedicationStatusEnteredInError);
    else exit(FHIR.R4.Types.MedicationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertMedicationStatus(src : FHIR.R4.Types.TFhirMedicationStatusEnum) : FHIR.R3.Types.TFhirMedicationStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.MedicationStatusActive: exit(FHIR.R3.Types.MedicationStatusActive);
    FHIR.R4.Types.MedicationStatusInactive: exit(FHIR.R3.Types.MedicationStatusInactive);
    FHIR.R4.Types.MedicationStatusEnteredInError: exit(FHIR.R3.Types.MedicationStatusEnteredInError);
    else exit(FHIR.R3.Types.MedicationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertMedicationAdministrationStatus(src : FHIR.R3.Types.TFhirMedicationAdminStatusEnum) : String;
begin
  result := FHIR.R3.Types.CODES_TFhirMedicationAdminStatusEnum[src];
end;

class function TVersionConvertor_30_40.convertMedicationAdministrationStatus(src : String) : FHIR.R3.Types.TFhirMedicationAdminStatusEnum;
var
  i : integer;
begin
  i := StringArrayIndexOfSensitive(CODES_TFhirMedicationAdminStatusEnum, src);
  if i = -1 then
    result := FHIR.R3.Types.MedicationAdminStatusNull
  else
    result := FHIR.R3.Types.TFhirMedicationAdminStatusEnum(i);
end;

class function TVersionConvertor_30_40.convertMedicationDispenseStatus(src : FHIR.R3.Types.TFhirMedicationDispenseStatusEnum) : String;
begin
  result := FHIR.R3.Types.CODES_TFhirMedicationDispenseStatusEnum[src];
end;

class function TVersionConvertor_30_40.convertMedicationDispenseStatus(src : string) : FHIR.R3.Types.TFhirMedicationDispenseStatusEnum;
var
  i : integer;
begin
  i := StringArrayIndexOfSensitive(FHIR.R3.Types.CODES_TFhirMedicationDispenseStatusEnum, src);
  if i = -1 then
    result := FHIR.R3.Types.MedicationDispenseStatusNull
  else
    result := FHIR.R3.Types.TFhirMedicationDispenseStatusEnum(i);
end;

class function TVersionConvertor_30_40.convertMedicationRequestStatus(src : FHIR.R3.Types.TFhirMedicationRequestStatusEnum) : FHIR.R4.Types.TFhirMedicationRequestStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.MedicationRequestStatusActive: exit(FHIR.R4.Types.MedicationRequestStatusActive);
    FHIR.R3.Types.MedicationRequestStatusOnHold: exit(FHIR.R4.Types.MedicationRequestStatusOnHold);
    FHIR.R3.Types.MedicationRequestStatusCancelled: exit(FHIR.R4.Types.MedicationRequestStatusCancelled);
    FHIR.R3.Types.MedicationRequestStatusCompleted: exit(FHIR.R4.Types.MedicationRequestStatusCompleted);
    FHIR.R3.Types.MedicationRequestStatusEnteredInError: exit(FHIR.R4.Types.MedicationRequestStatusEnteredInError);
    FHIR.R3.Types.MedicationRequestStatusStopped: exit(FHIR.R4.Types.MedicationRequestStatusStopped);
    FHIR.R3.Types.MedicationRequestStatusDraft: exit(FHIR.R4.Types.MedicationRequestStatusDraft);
    FHIR.R3.Types.MedicationRequestStatusUnknown: exit(FHIR.R4.Types.MedicationRequestStatusUnknown);
    else exit(FHIR.R4.Types.MedicationRequestStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertMedicationRequestStatus(src : FHIR.R4.Types.TFhirMedicationRequestStatusEnum) : FHIR.R3.Types.TFhirMedicationRequestStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.MedicationRequestStatusActive: exit(FHIR.R3.Types.MedicationRequestStatusActive);
    FHIR.R4.Types.MedicationRequestStatusOnHold: exit(FHIR.R3.Types.MedicationRequestStatusOnHold);
    FHIR.R4.Types.MedicationRequestStatusCancelled: exit(FHIR.R3.Types.MedicationRequestStatusCancelled);
    FHIR.R4.Types.MedicationRequestStatusCompleted: exit(FHIR.R3.Types.MedicationRequestStatusCompleted);
    FHIR.R4.Types.MedicationRequestStatusEnteredInError: exit(FHIR.R3.Types.MedicationRequestStatusEnteredInError);
    FHIR.R4.Types.MedicationRequestStatusStopped: exit(FHIR.R3.Types.MedicationRequestStatusStopped);
    FHIR.R4.Types.MedicationRequestStatusDraft: exit(FHIR.R3.Types.MedicationRequestStatusDraft);
    FHIR.R4.Types.MedicationRequestStatusUnknown: exit(FHIR.R3.Types.MedicationRequestStatusUnknown);
    else exit(FHIR.R3.Types.MedicationRequestStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertMedicationRequestIntent(src : FHIR.R3.Types.TFhirMedicationRequestIntentEnum) : FHIR.R4.Types.TFhirMedicationRequestIntentEnum;
begin
  case (src) of
    FHIR.R3.Types.MedicationRequestIntentProposal: exit(FHIR.R4.Types.MedicationRequestIntentProposal);
    FHIR.R3.Types.MedicationRequestIntentPlan: exit(FHIR.R4.Types.MedicationRequestIntentPlan);
    FHIR.R3.Types.MedicationRequestIntentOrder: exit(FHIR.R4.Types.MedicationRequestIntentOrder);
    FHIR.R3.Types.MedicationRequestIntentInstanceOrder: exit(FHIR.R4.Types.MedicationRequestIntentInstanceOrder);
    else exit(FHIR.R4.Types.MedicationRequestIntentNull);
  end;
end;

class function TVersionConvertor_30_40.convertMedicationRequestIntent(src : FHIR.R4.Types.TFhirMedicationRequestIntentEnum) : FHIR.R3.Types.TFhirMedicationRequestIntentEnum;
begin
  case (src) of
    FHIR.R4.Types.MedicationRequestIntentProposal: exit(FHIR.R3.Types.MedicationRequestIntentProposal);
    FHIR.R4.Types.MedicationRequestIntentPlan: exit(FHIR.R3.Types.MedicationRequestIntentPlan);
    FHIR.R4.Types.MedicationRequestIntentOrder: exit(FHIR.R3.Types.MedicationRequestIntentOrder);
    FHIR.R4.Types.MedicationRequestIntentInstanceOrder: exit(FHIR.R3.Types.MedicationRequestIntentInstanceOrder);
    else exit(FHIR.R3.Types.MedicationRequestIntentNull);
  end;
end;

class function TVersionConvertor_30_40.convertMedicationRequestPriority(src : FHIR.R3.Types.TFhirMedicationRequestPriorityEnum) : FHIR.R4.Types.TFhirRequestPriorityEnum;
begin
  case (src) of
    FHIR.R3.Types.MedicationRequestPriorityRoutine: exit(FHIR.R4.Types.RequestPriorityRoutine);
    FHIR.R3.Types.MedicationRequestPriorityUrgent: exit(FHIR.R4.Types.RequestPriorityUrgent);
    FHIR.R3.Types.MedicationRequestPriorityStat: exit(FHIR.R4.Types.RequestPriorityStat);
    FHIR.R3.Types.MedicationRequestPriorityAsap: exit(FHIR.R4.Types.RequestPriorityAsap);
    else exit(FHIR.R4.Types.RequestPriorityNull);
  end;
end;

class function TVersionConvertor_30_40.convertMedicationRequestPriority(src : FHIR.R4.Types.TFhirRequestPriorityEnum) : FHIR.R3.Types.TFhirMedicationRequestPriorityEnum;
begin
  case (src) of
    FHIR.R4.Types.RequestPriorityRoutine: exit(FHIR.R3.Types.MedicationRequestPriorityRoutine);
    FHIR.R4.Types.RequestPriorityUrgent: exit(FHIR.R3.Types.MedicationRequestPriorityUrgent);
    FHIR.R4.Types.RequestPriorityStat: exit(FHIR.R3.Types.MedicationRequestPriorityStat);
    FHIR.R4.Types.RequestPriorityAsap: exit(FHIR.R3.Types.MedicationRequestPriorityAsap);
    else exit(FHIR.R3.Types.MedicationRequestPriorityNull);
  end;
end;

class function TVersionConvertor_30_40.convertMedicationStatementStatus(src : FHIR.R3.Types.TFhirMedicationStatementStatusEnum) : FHIR.R4.Types.TFhirMedicationStatementStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.MedicationStatementStatusActive: exit(FHIR.R4.Types.MedicationStatementStatusActive);
    FHIR.R3.Types.MedicationStatementStatusCompleted: exit(FHIR.R4.Types.MedicationStatementStatusCompleted);
    FHIR.R3.Types.MedicationStatementStatusEnteredInError: exit(FHIR.R4.Types.MedicationStatementStatusEnteredInError);
    FHIR.R3.Types.MedicationStatementStatusIntended: exit(FHIR.R4.Types.MedicationStatementStatusIntended);
    FHIR.R3.Types.MedicationStatementStatusStopped: exit(FHIR.R4.Types.MedicationStatementStatusStopped);
    FHIR.R3.Types.MedicationStatementStatusOnHold: exit(FHIR.R4.Types.MedicationStatementStatusOnHold);
    else exit(FHIR.R4.Types.MedicationStatementStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertMedicationStatementStatus(src : FHIR.R4.Types.TFhirMedicationStatementStatusEnum) : FHIR.R3.Types.TFhirMedicationStatementStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.MedicationStatementStatusActive: exit(FHIR.R3.Types.MedicationStatementStatusActive);
    FHIR.R4.Types.MedicationStatementStatusCompleted: exit(FHIR.R3.Types.MedicationStatementStatusCompleted);
    FHIR.R4.Types.MedicationStatementStatusEnteredInError: exit(FHIR.R3.Types.MedicationStatementStatusEnteredInError);
    FHIR.R4.Types.MedicationStatementStatusIntended: exit(FHIR.R3.Types.MedicationStatementStatusIntended);
    FHIR.R4.Types.MedicationStatementStatusStopped: exit(FHIR.R3.Types.MedicationStatementStatusStopped);
    FHIR.R4.Types.MedicationStatementStatusOnHold: exit(FHIR.R3.Types.MedicationStatementStatusOnHold);
    else exit(FHIR.R3.Types.MedicationStatementStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertMessageSignificanceCategory(src : FHIR.R3.Types.TFhirMessageSignificanceCategoryEnum) : FHIR.R4.Types.TFhirMessageSignificanceCategoryEnum;
begin
  case (src) of
    FHIR.R3.Types.MessageSignificanceCategoryConsequence: exit(FHIR.R4.Types.MessageSignificanceCategoryConsequence);
    FHIR.R3.Types.MessageSignificanceCategoryCurrency: exit(FHIR.R4.Types.MessageSignificanceCategoryCurrency);
    FHIR.R3.Types.MessageSignificanceCategoryNotification: exit(FHIR.R4.Types.MessageSignificanceCategoryNotification);
    else exit(FHIR.R4.Types.MessageSignificanceCategoryNull);
  end;
end;

class function TVersionConvertor_30_40.convertMessageSignificanceCategory(src : FHIR.R4.Types.TFhirMessageSignificanceCategoryEnum) : FHIR.R3.Types.TFhirMessageSignificanceCategoryEnum;
begin
  case (src) of
    FHIR.R4.Types.MessageSignificanceCategoryConsequence: exit(FHIR.R3.Types.MessageSignificanceCategoryConsequence);
    FHIR.R4.Types.MessageSignificanceCategoryCurrency: exit(FHIR.R3.Types.MessageSignificanceCategoryCurrency);
    FHIR.R4.Types.MessageSignificanceCategoryNotification: exit(FHIR.R3.Types.MessageSignificanceCategoryNotification);
    else exit(FHIR.R3.Types.MessageSignificanceCategoryNull);
  end;
end;

class function TVersionConvertor_30_40.convertResponseType(src : FHIR.R3.Types.TFhirResponseCodeEnum) : FHIR.R4.Types.TFhirResponseCodeEnum;
begin
  case (src) of
    FHIR.R3.Types.ResponseCodeOk: exit(FHIR.R4.Types.ResponseCodeOk);
    FHIR.R3.Types.ResponseCodeTransientError: exit(FHIR.R4.Types.ResponseCodeTransientError);
    FHIR.R3.Types.ResponseCodeFatalError: exit(FHIR.R4.Types.ResponseCodeFatalError);
    else exit(FHIR.R4.Types.ResponseCodeNull);
  end;
end;

class function TVersionConvertor_30_40.convertProvenanceEntityRole(src : FHIR.R4.Types.TFhirProvenanceEntityRoleEnum) : FHIR.R3.Types.TFhirProvenanceEntityRoleEnum;
begin
  case (src) of
    FHIR.R4.Types.ProvenanceEntityRoleDerivation: exit(FHIR.R3.Types.ProvenanceEntityRoleDerivation);
    FHIR.R4.Types.ProvenanceEntityRoleRevision: exit(FHIR.R3.Types.ProvenanceEntityRoleRevision);
    FHIR.R4.Types.ProvenanceEntityRoleQuotation: exit(FHIR.R3.Types.ProvenanceEntityRoleQuotation);
    FHIR.R4.Types.ProvenanceEntityRoleSource: exit(FHIR.R3.Types.ProvenanceEntityRoleSource);
    FHIR.R4.Types.ProvenanceEntityRoleRemoval: exit(FHIR.R3.Types.ProvenanceEntityRoleRemoval);
    else exit(FHIR.R3.Types.ProvenanceEntityRoleNull);
  end;
end;


class function TVersionConvertor_30_40.convertProvenanceEntityRole(src : FHIR.R3.Types.TFhirProvenanceEntityRoleEnum) : FHIR.R4.Types.TFhirProvenanceEntityRoleEnum;
begin
  case (src) of
    FHIR.R3.Types.ProvenanceEntityRoleDerivation: exit(FHIR.R4.Types.ProvenanceEntityRoleDerivation);
    FHIR.R3.Types.ProvenanceEntityRoleRevision: exit(FHIR.R4.Types.ProvenanceEntityRoleRevision);
    FHIR.R3.Types.ProvenanceEntityRoleQuotation: exit(FHIR.R4.Types.ProvenanceEntityRoleQuotation);
    FHIR.R3.Types.ProvenanceEntityRoleSource: exit(FHIR.R4.Types.ProvenanceEntityRoleSource);
    FHIR.R3.Types.ProvenanceEntityRoleRemoval: exit(FHIR.R4.Types.ProvenanceEntityRoleRemoval);
    else exit(FHIR.R4.Types.ProvenanceEntityRoleNull);
  end;
end;


class function TVersionConvertor_30_40.convertResponseType(src : FHIR.R4.Types.TFhirResponseCodeEnum) : FHIR.R3.Types.TFhirResponseCodeEnum;
begin
  case (src) of
    FHIR.R4.Types.ResponseCodeOk: exit(FHIR.R3.Types.ResponseCodeOk);
    FHIR.R4.Types.ResponseCodeTransientError: exit(FHIR.R3.Types.ResponseCodeTransientError);
    FHIR.R4.Types.ResponseCodeFatalError: exit(FHIR.R3.Types.ResponseCodeFatalError);
    else exit(FHIR.R3.Types.ResponseCodeNull);
  end;
end;

class function TVersionConvertor_30_40.convertNamingSystemType(src : FHIR.R3.Types.TFhirNamingsystemTypeEnum) : FHIR.R4.Types.TFhirNamingsystemTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.NamingsystemTypeCodesystem: exit(FHIR.R4.Types.NamingsystemTypeCodesystem);
    FHIR.R3.Types.NamingsystemTypeIdentifier: exit(FHIR.R4.Types.NamingsystemTypeIdentifier);
    FHIR.R3.Types.NamingsystemTypeRoot: exit(FHIR.R4.Types.NamingsystemTypeRoot);
    else exit(FHIR.R4.Types.NamingsystemTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertNamingSystemType(src : FHIR.R4.Types.TFhirNamingsystemTypeEnum) : FHIR.R3.Types.TFhirNamingsystemTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.NamingsystemTypeCodesystem: exit(FHIR.R3.Types.NamingsystemTypeCodesystem);
    FHIR.R4.Types.NamingsystemTypeIdentifier: exit(FHIR.R3.Types.NamingsystemTypeIdentifier);
    FHIR.R4.Types.NamingsystemTypeRoot: exit(FHIR.R3.Types.NamingsystemTypeRoot);
    else exit(FHIR.R3.Types.NamingsystemTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertNamingSystemIdentifierType(src : FHIR.R3.Types.TFhirNamingsystemIdentifierTypeEnum) : FHIR.R4.Types.TFhirNamingsystemIdentifierTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.NamingsystemIdentifierTypeOid: exit(FHIR.R4.Types.NamingsystemIdentifierTypeOid);
    FHIR.R3.Types.NamingsystemIdentifierTypeUuid: exit(FHIR.R4.Types.NamingsystemIdentifierTypeUuid);
    FHIR.R3.Types.NamingsystemIdentifierTypeUri: exit(FHIR.R4.Types.NamingsystemIdentifierTypeUri);
    FHIR.R3.Types.NamingsystemIdentifierTypeOther: exit(FHIR.R4.Types.NamingsystemIdentifierTypeOther);
    else exit(FHIR.R4.Types.NamingsystemIdentifierTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertNamingSystemIdentifierType(src : FHIR.R4.Types.TFhirNamingsystemIdentifierTypeEnum) : FHIR.R3.Types.TFhirNamingsystemIdentifierTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.NamingsystemIdentifierTypeOid: exit(FHIR.R3.Types.NamingsystemIdentifierTypeOid);
    FHIR.R4.Types.NamingsystemIdentifierTypeUuid: exit(FHIR.R3.Types.NamingsystemIdentifierTypeUuid);
    FHIR.R4.Types.NamingsystemIdentifierTypeUri: exit(FHIR.R3.Types.NamingsystemIdentifierTypeUri);
    FHIR.R4.Types.NamingsystemIdentifierTypeOther: exit(FHIR.R3.Types.NamingsystemIdentifierTypeOther);
    else exit(FHIR.R3.Types.NamingsystemIdentifierTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertObservationStatus(src : FHIR.R3.Types.TFhirObservationStatusEnum) : FHIR.R4.Types.TFhirObservationStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.ObservationStatusRegistered: exit(FHIR.R4.Types.ObservationStatusRegistered);
    FHIR.R3.Types.ObservationStatusPreliminary: exit(FHIR.R4.Types.ObservationStatusPreliminary);
    FHIR.R3.Types.ObservationStatusFinal: exit(FHIR.R4.Types.ObservationStatusFinal);
    FHIR.R3.Types.ObservationStatusAmended: exit(FHIR.R4.Types.ObservationStatusAmended);
    FHIR.R3.Types.ObservationStatusCorrected: exit(FHIR.R4.Types.ObservationStatusCorrected);
    FHIR.R3.Types.ObservationStatusCancelled: exit(FHIR.R4.Types.ObservationStatusCancelled);
    FHIR.R3.Types.ObservationStatusEnteredInError: exit(FHIR.R4.Types.ObservationStatusEnteredInError);
    FHIR.R3.Types.ObservationStatusUnknown: exit(FHIR.R4.Types.ObservationStatusUnknown);
    else exit(FHIR.R4.Types.ObservationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertObservationStatus(src : FHIR.R4.Types.TFhirObservationStatusEnum) : FHIR.R3.Types.TFhirObservationStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.ObservationStatusRegistered: exit(FHIR.R3.Types.ObservationStatusRegistered);
    FHIR.R4.Types.ObservationStatusPreliminary: exit(FHIR.R3.Types.ObservationStatusPreliminary);
    FHIR.R4.Types.ObservationStatusFinal: exit(FHIR.R3.Types.ObservationStatusFinal);
    FHIR.R4.Types.ObservationStatusAmended: exit(FHIR.R3.Types.ObservationStatusAmended);
    FHIR.R4.Types.ObservationStatusCorrected: exit(FHIR.R3.Types.ObservationStatusCorrected);
    FHIR.R4.Types.ObservationStatusCancelled: exit(FHIR.R3.Types.ObservationStatusCancelled);
    FHIR.R4.Types.ObservationStatusEnteredInError: exit(FHIR.R3.Types.ObservationStatusEnteredInError);
    FHIR.R4.Types.ObservationStatusUnknown: exit(FHIR.R3.Types.ObservationStatusUnknown);
    else exit(FHIR.R3.Types.ObservationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertOperationKind(src : FHIR.R3.Types.TFhirOperationKindEnum) : FHIR.R4.Types.TFhirOperationKindEnum;
begin
  case (src) of
    FHIR.R3.Types.OperationKindOperation: exit(FHIR.R4.Types.OperationKindOperation);
    FHIR.R3.Types.OperationKindQuery: exit(FHIR.R4.Types.OperationKindQuery);
    else exit(FHIR.R4.Types.OperationKindNull);
  end;
end;

class function TVersionConvertor_30_40.convertOperationKind(src : FHIR.R4.Types.TFhirOperationKindEnum) : FHIR.R3.Types.TFhirOperationKindEnum;
begin
  case (src) of
    FHIR.R4.Types.OperationKindOperation: exit(FHIR.R3.Types.OperationKindOperation);
    FHIR.R4.Types.OperationKindQuery: exit(FHIR.R3.Types.OperationKindQuery);
    else exit(FHIR.R3.Types.OperationKindNull);
  end;
end;

class function TVersionConvertor_30_40.convertOperationParameterUse(src : FHIR.R3.Types.TFhirOperationParameterUseEnum) : FHIR.R4.Types.TFhirOperationParameterUseEnum;
begin
  case (src) of
    FHIR.R3.Types.OperationParameterUseIn: exit(FHIR.R4.Types.OperationParameterUseIn);
    FHIR.R3.Types.OperationParameterUseOut: exit(FHIR.R4.Types.OperationParameterUseOut);
    else exit(FHIR.R4.Types.OperationParameterUseNull);
  end;
end;

class function TVersionConvertor_30_40.convertOperationParameterUse(src : FHIR.R4.Types.TFhirOperationParameterUseEnum) : FHIR.R3.Types.TFhirOperationParameterUseEnum;
begin
  case (src) of
    FHIR.R4.Types.OperationParameterUseIn: exit(FHIR.R3.Types.OperationParameterUseIn);
    FHIR.R4.Types.OperationParameterUseOut: exit(FHIR.R3.Types.OperationParameterUseOut);
    else exit(FHIR.R3.Types.OperationParameterUseNull);
  end;
end;

class function TVersionConvertor_30_40.convertIssueSeverity(src : FHIR.R3.Types.TFhirIssueSeverityEnum) : FHIR.R4.Types.TFhirIssueSeverityEnum;
begin
  case (src) of
    FHIR.R3.Types.IssueSeverityFatal: exit(FHIR.R4.Types.IssueSeverityFatal);
    FHIR.R3.Types.IssueSeverityError: exit(FHIR.R4.Types.IssueSeverityError);
    FHIR.R3.Types.IssueSeverityWarning: exit(FHIR.R4.Types.IssueSeverityWarning);
    FHIR.R3.Types.IssueSeverityInformation: exit(FHIR.R4.Types.IssueSeverityInformation);
    else exit(FHIR.R4.Types.IssueSeverityNull);
  end;
end;

class function TVersionConvertor_30_40.convertIssueSeverity(src : FHIR.R4.Types.TFhirIssueSeverityEnum) : FHIR.R3.Types.TFhirIssueSeverityEnum;
begin
  case (src) of
    FHIR.R4.Types.IssueSeverityFatal: exit(FHIR.R3.Types.IssueSeverityFatal);
    FHIR.R4.Types.IssueSeverityError: exit(FHIR.R3.Types.IssueSeverityError);
    FHIR.R4.Types.IssueSeverityWarning: exit(FHIR.R3.Types.IssueSeverityWarning);
    FHIR.R4.Types.IssueSeverityInformation: exit(FHIR.R3.Types.IssueSeverityInformation);
    else exit(FHIR.R3.Types.IssueSeverityNull);
  end;
end;

class function TVersionConvertor_30_40.convertIssueType(src : FHIR.R3.Types.TFhirIssueTypeEnum) : FHIR.R4.Types.TFhirIssueTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.IssueTypeInvalid: exit(FHIR.R4.Types.IssueTypeInvalid);
    FHIR.R3.Types.IssueTypeStructure: exit(FHIR.R4.Types.IssueTypeStructure);
    FHIR.R3.Types.IssueTypeRequired: exit(FHIR.R4.Types.IssueTypeRequired);
    FHIR.R3.Types.IssueTypeValue: exit(FHIR.R4.Types.IssueTypeValue);
    FHIR.R3.Types.IssueTypeInvariant: exit(FHIR.R4.Types.IssueTypeInvariant);
    FHIR.R3.Types.IssueTypeSecurity: exit(FHIR.R4.Types.IssueTypeSecurity);
    FHIR.R3.Types.IssueTypeLogin: exit(FHIR.R4.Types.IssueTypeLogin);
    FHIR.R3.Types.IssueTypeUnknown: exit(FHIR.R4.Types.IssueTypeUnknown);
    FHIR.R3.Types.IssueTypeExpired: exit(FHIR.R4.Types.IssueTypeExpired);
    FHIR.R3.Types.IssueTypeForbidden: exit(FHIR.R4.Types.IssueTypeForbidden);
    FHIR.R3.Types.IssueTypeSuppressed: exit(FHIR.R4.Types.IssueTypeSuppressed);
    FHIR.R3.Types.IssueTypeProcessing: exit(FHIR.R4.Types.IssueTypeProcessing);
    FHIR.R3.Types.IssueTypeNotSupported: exit(FHIR.R4.Types.IssueTypeNotSupported);
    FHIR.R3.Types.IssueTypeDuplicate: exit(FHIR.R4.Types.IssueTypeDuplicate);
    FHIR.R3.Types.IssueTypeNotFound: exit(FHIR.R4.Types.IssueTypeNotFound);
    FHIR.R3.Types.IssueTypeTooLong: exit(FHIR.R4.Types.IssueTypeTooLong);
    FHIR.R3.Types.IssueTypeCodeInvalid: exit(FHIR.R4.Types.IssueTypeCodeInvalid);
    FHIR.R3.Types.IssueTypeExtension: exit(FHIR.R4.Types.IssueTypeExtension);
    FHIR.R3.Types.IssueTypeTooCostly: exit(FHIR.R4.Types.IssueTypeTooCostly);
    FHIR.R3.Types.IssueTypeBusinessRule: exit(FHIR.R4.Types.IssueTypeBusinessRule);
    FHIR.R3.Types.IssueTypeConflict: exit(FHIR.R4.Types.IssueTypeConflict);
    FHIR.R3.Types.IssueTypeIncomplete: exit(FHIR.R4.Types.IssueTypeIncomplete);
    FHIR.R3.Types.IssueTypeTransient: exit(FHIR.R4.Types.IssueTypeTransient);
    FHIR.R3.Types.IssueTypeLockError: exit(FHIR.R4.Types.IssueTypeLockError);
    FHIR.R3.Types.IssueTypeNoStore: exit(FHIR.R4.Types.IssueTypeNoStore);
    FHIR.R3.Types.IssueTypeException: exit(FHIR.R4.Types.IssueTypeException);
    FHIR.R3.Types.IssueTypeTimeout: exit(FHIR.R4.Types.IssueTypeTimeout);
    FHIR.R3.Types.IssueTypeThrottled: exit(FHIR.R4.Types.IssueTypeThrottled);
    FHIR.R3.Types.IssueTypeInformational: exit(FHIR.R4.Types.IssueTypeInformational);
    else exit(FHIR.R4.Types.IssueTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertIssueType(src : FHIR.R4.Types.TFhirIssueTypeEnum) : FHIR.R3.Types.TFhirIssueTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.IssueTypeInvalid: exit(FHIR.R3.Types.IssueTypeInvalid);
    FHIR.R4.Types.IssueTypeStructure: exit(FHIR.R3.Types.IssueTypeStructure);
    FHIR.R4.Types.IssueTypeRequired: exit(FHIR.R3.Types.IssueTypeRequired);
    FHIR.R4.Types.IssueTypeValue: exit(FHIR.R3.Types.IssueTypeValue);
    FHIR.R4.Types.IssueTypeInvariant: exit(FHIR.R3.Types.IssueTypeInvariant);
    FHIR.R4.Types.IssueTypeSecurity: exit(FHIR.R3.Types.IssueTypeSecurity);
    FHIR.R4.Types.IssueTypeLogin: exit(FHIR.R3.Types.IssueTypeLogin);
    FHIR.R4.Types.IssueTypeUnknown: exit(FHIR.R3.Types.IssueTypeUnknown);
    FHIR.R4.Types.IssueTypeExpired: exit(FHIR.R3.Types.IssueTypeExpired);
    FHIR.R4.Types.IssueTypeForbidden: exit(FHIR.R3.Types.IssueTypeForbidden);
    FHIR.R4.Types.IssueTypeSuppressed: exit(FHIR.R3.Types.IssueTypeSuppressed);
    FHIR.R4.Types.IssueTypeProcessing: exit(FHIR.R3.Types.IssueTypeProcessing);
    FHIR.R4.Types.IssueTypeNotSupported: exit(FHIR.R3.Types.IssueTypeNotSupported);
    FHIR.R4.Types.IssueTypeDuplicate: exit(FHIR.R3.Types.IssueTypeDuplicate);
    FHIR.R4.Types.IssueTypeNotFound: exit(FHIR.R3.Types.IssueTypeNotFound);
    FHIR.R4.Types.IssueTypeTooLong: exit(FHIR.R3.Types.IssueTypeTooLong);
    FHIR.R4.Types.IssueTypeCodeInvalid: exit(FHIR.R3.Types.IssueTypeCodeInvalid);
    FHIR.R4.Types.IssueTypeExtension: exit(FHIR.R3.Types.IssueTypeExtension);
    FHIR.R4.Types.IssueTypeTooCostly: exit(FHIR.R3.Types.IssueTypeTooCostly);
    FHIR.R4.Types.IssueTypeBusinessRule: exit(FHIR.R3.Types.IssueTypeBusinessRule);
    FHIR.R4.Types.IssueTypeConflict: exit(FHIR.R3.Types.IssueTypeConflict);
    FHIR.R4.Types.IssueTypeIncomplete: exit(FHIR.R3.Types.IssueTypeIncomplete);
    FHIR.R4.Types.IssueTypeTransient: exit(FHIR.R3.Types.IssueTypeTransient);
    FHIR.R4.Types.IssueTypeLockError: exit(FHIR.R3.Types.IssueTypeLockError);
    FHIR.R4.Types.IssueTypeNoStore: exit(FHIR.R3.Types.IssueTypeNoStore);
    FHIR.R4.Types.IssueTypeException: exit(FHIR.R3.Types.IssueTypeException);
    FHIR.R4.Types.IssueTypeTimeout: exit(FHIR.R3.Types.IssueTypeTimeout);
    FHIR.R4.Types.IssueTypeThrottled: exit(FHIR.R3.Types.IssueTypeThrottled);
    FHIR.R4.Types.IssueTypeInformational: exit(FHIR.R3.Types.IssueTypeInformational);
    else exit(FHIR.R3.Types.IssueTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertLinkType(src : FHIR.R3.Types.TFhirLinkTypeEnum) : FHIR.R4.Types.TFhirLinkTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.LinkTypeReplacedBy: exit(FHIR.R4.Types.LinkTypeReplacedBy);
    FHIR.R3.Types.LinkTypeReplaces: exit(FHIR.R4.Types.LinkTypeReplaces);
    FHIR.R3.Types.LinkTypeRefer: exit(FHIR.R4.Types.LinkTypeRefer);
    FHIR.R3.Types.LinkTypeSeealso: exit(FHIR.R4.Types.LinkTypeSeealso);
    else exit(FHIR.R4.Types.LinkTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertLinkType(src : FHIR.R4.Types.TFhirLinkTypeEnum) : FHIR.R3.Types.TFhirLinkTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.LinkTypeReplacedBy: exit(FHIR.R3.Types.LinkTypeReplacedBy);
    FHIR.R4.Types.LinkTypeReplaces: exit(FHIR.R3.Types.LinkTypeReplaces);
    FHIR.R4.Types.LinkTypeRefer: exit(FHIR.R3.Types.LinkTypeRefer);
    FHIR.R4.Types.LinkTypeSeealso: exit(FHIR.R3.Types.LinkTypeSeealso);
    else exit(FHIR.R3.Types.LinkTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertPaymentNoticeStatus(src : FHIR.R3.Types.TFhirFmStatusEnum) : FHIR.R4.Types.TFhirFmStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.FmStatusActive: exit(FHIR.R4.Types.FmStatusActive);
    FHIR.R3.Types.FmStatusCancelled: exit(FHIR.R4.Types.FmStatusCancelled);
    FHIR.R3.Types.FmStatusDraft: exit(FHIR.R4.Types.FmStatusDraft);
    FHIR.R3.Types.FmStatusEnteredInError: exit(FHIR.R4.Types.FmStatusEnteredInError);
    else exit(FHIR.R4.Types.FmStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertPaymentNoticeStatus(src : FHIR.R4.Types.TFhirFmStatusEnum) : FHIR.R3.Types.TFhirFmStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.FmStatusActive: exit(FHIR.R3.Types.FmStatusActive);
    FHIR.R4.Types.FmStatusCancelled: exit(FHIR.R3.Types.FmStatusCancelled);
    FHIR.R4.Types.FmStatusDraft: exit(FHIR.R3.Types.FmStatusDraft);
    FHIR.R4.Types.FmStatusEnteredInError: exit(FHIR.R3.Types.FmStatusEnteredInError);
    else exit(FHIR.R3.Types.FmStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertIdentityAssuranceLevel(src : FHIR.R3.Types.TFhirIdentityAssuranceLevelEnum) : FHIR.R4.Types.TFhirIdentityAssuranceLevelEnum;
begin
  case (src) of
    FHIR.R3.Types.IdentityAssuranceLevelLevel1: exit(FHIR.R4.Types.IdentityAssuranceLevelLevel1);
    FHIR.R3.Types.IdentityAssuranceLevelLevel2: exit(FHIR.R4.Types.IdentityAssuranceLevelLevel2);
    FHIR.R3.Types.IdentityAssuranceLevelLevel3: exit(FHIR.R4.Types.IdentityAssuranceLevelLevel3);
    FHIR.R3.Types.IdentityAssuranceLevelLevel4: exit(FHIR.R4.Types.IdentityAssuranceLevelLevel4);
    else exit(FHIR.R4.Types.IdentityAssuranceLevelNull);
  end;
end;

class function TVersionConvertor_30_40.convertIdentityAssuranceLevel(src : FHIR.R4.Types.TFhirIdentityAssuranceLevelEnum) : FHIR.R3.Types.TFhirIdentityAssuranceLevelEnum;
begin
  case (src) of
    FHIR.R4.Types.IdentityAssuranceLevelLevel1: exit(FHIR.R3.Types.IdentityAssuranceLevelLevel1);
    FHIR.R4.Types.IdentityAssuranceLevelLevel2: exit(FHIR.R3.Types.IdentityAssuranceLevelLevel2);
    FHIR.R4.Types.IdentityAssuranceLevelLevel3: exit(FHIR.R3.Types.IdentityAssuranceLevelLevel3);
    FHIR.R4.Types.IdentityAssuranceLevelLevel4: exit(FHIR.R3.Types.IdentityAssuranceLevelLevel4);
    else exit(FHIR.R3.Types.IdentityAssuranceLevelNull);
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireItemType(src : FHIR.R3.Types.TFhirItemTypeEnum) : FHIR.R4.Types.TFhirItemTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.ItemTypeGroup: exit(FHIR.R4.Types.ItemTypeGroup);
    FHIR.R3.Types.ItemTypeDisplay: exit(FHIR.R4.Types.ItemTypeDisplay);
    FHIR.R3.Types.ItemTypeBoolean: exit(FHIR.R4.Types.ItemTypeBoolean);
    FHIR.R3.Types.ItemTypeDecimal: exit(FHIR.R4.Types.ItemTypeDecimal);
    FHIR.R3.Types.ItemTypeInteger: exit(FHIR.R4.Types.ItemTypeInteger);
    FHIR.R3.Types.ItemTypeDate: exit(FHIR.R4.Types.ItemTypeDate);
    FHIR.R3.Types.ItemTypeDateTime: exit(FHIR.R4.Types.ItemTypeDateTime);
    FHIR.R3.Types.ItemTypeTime: exit(FHIR.R4.Types.ItemTypeTime);
    FHIR.R3.Types.ItemTypeString: exit(FHIR.R4.Types.ItemTypeString);
    FHIR.R3.Types.ItemTypeText: exit(FHIR.R4.Types.ItemTypeText);
    FHIR.R3.Types.ItemTypeUrl: exit(FHIR.R4.Types.ItemTypeUrl);
    FHIR.R3.Types.ItemTypeChoice: exit(FHIR.R4.Types.ItemTypeChoice);
    FHIR.R3.Types.ItemTypeOpenChoice: exit(FHIR.R4.Types.ItemTypeOpenChoice);
    FHIR.R3.Types.ItemTypeAttachment: exit(FHIR.R4.Types.ItemTypeAttachment);
    FHIR.R3.Types.ItemTypeReference: exit(FHIR.R4.Types.ItemTypeReference);
    FHIR.R3.Types.ItemTypeQuantity: exit(FHIR.R4.Types.ItemTypeQuantity);
    else exit(FHIR.R4.Types.ItemTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireItemType(src : FHIR.R4.Types.TFhirItemTypeEnum) : FHIR.R3.Types.TFhirItemTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.ItemTypeGroup: exit(FHIR.R3.Types.ItemTypeGroup);
    FHIR.R4.Types.ItemTypeDisplay: exit(FHIR.R3.Types.ItemTypeDisplay);
    FHIR.R4.Types.ItemTypeBoolean: exit(FHIR.R3.Types.ItemTypeBoolean);
    FHIR.R4.Types.ItemTypeDecimal: exit(FHIR.R3.Types.ItemTypeDecimal);
    FHIR.R4.Types.ItemTypeInteger: exit(FHIR.R3.Types.ItemTypeInteger);
    FHIR.R4.Types.ItemTypeDate: exit(FHIR.R3.Types.ItemTypeDate);
    FHIR.R4.Types.ItemTypeDateTime: exit(FHIR.R3.Types.ItemTypeDateTime);
    FHIR.R4.Types.ItemTypeTime: exit(FHIR.R3.Types.ItemTypeTime);
    FHIR.R4.Types.ItemTypeString: exit(FHIR.R3.Types.ItemTypeString);
    FHIR.R4.Types.ItemTypeText: exit(FHIR.R3.Types.ItemTypeText);
    FHIR.R4.Types.ItemTypeUrl: exit(FHIR.R3.Types.ItemTypeUrl);
    FHIR.R4.Types.ItemTypeChoice: exit(FHIR.R3.Types.ItemTypeChoice);
    FHIR.R4.Types.ItemTypeOpenChoice: exit(FHIR.R3.Types.ItemTypeOpenChoice);
    FHIR.R4.Types.ItemTypeAttachment: exit(FHIR.R3.Types.ItemTypeAttachment);
    FHIR.R4.Types.ItemTypeReference: exit(FHIR.R3.Types.ItemTypeReference);
    FHIR.R4.Types.ItemTypeQuantity: exit(FHIR.R3.Types.ItemTypeQuantity);
    else exit(FHIR.R3.Types.ItemTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireResponseStatus(src : FHIR.R3.Types.TFhirQuestionnaireAnswersStatusEnum) : FHIR.R4.Types.TFhirQuestionnaireAnswersStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.QuestionnaireAnswersStatusInProgress: exit(FHIR.R4.Types.QuestionnaireAnswersStatusInProgress);
    FHIR.R3.Types.QuestionnaireAnswersStatusCompleted: exit(FHIR.R4.Types.QuestionnaireAnswersStatusCompleted);
    FHIR.R3.Types.QuestionnaireAnswersStatusAmended: exit(FHIR.R4.Types.QuestionnaireAnswersStatusAmended);
    FHIR.R3.Types.QuestionnaireAnswersStatusEnteredInError: exit(FHIR.R4.Types.QuestionnaireAnswersStatusEnteredInError);
    FHIR.R3.Types.QuestionnaireAnswersStatusStopped: exit(FHIR.R4.Types.QuestionnaireAnswersStatusStopped);
    else exit(FHIR.R4.Types.QuestionnaireAnswersStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireResponseStatus(src : FHIR.R4.Types.TFhirQuestionnaireAnswersStatusEnum) : FHIR.R3.Types.TFhirQuestionnaireAnswersStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.QuestionnaireAnswersStatusInProgress: exit(FHIR.R3.Types.QuestionnaireAnswersStatusInProgress);
    FHIR.R4.Types.QuestionnaireAnswersStatusCompleted: exit(FHIR.R3.Types.QuestionnaireAnswersStatusCompleted);
    FHIR.R4.Types.QuestionnaireAnswersStatusAmended: exit(FHIR.R3.Types.QuestionnaireAnswersStatusAmended);
    FHIR.R4.Types.QuestionnaireAnswersStatusEnteredInError: exit(FHIR.R3.Types.QuestionnaireAnswersStatusEnteredInError);
    FHIR.R4.Types.QuestionnaireAnswersStatusStopped: exit(FHIR.R3.Types.QuestionnaireAnswersStatusStopped);
    else exit(FHIR.R3.Types.QuestionnaireAnswersStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertRiskAssessmentStatus(src : FHIR.R3.Types.TFhirObservationStatusEnum) : FHIR.R4.Types.TFhirObservationStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.ObservationStatusRegistered: exit(FHIR.R4.Types.ObservationStatusRegistered);
    FHIR.R3.Types.ObservationStatusPreliminary: exit(FHIR.R4.Types.ObservationStatusPreliminary);
    FHIR.R3.Types.ObservationStatusFinal: exit(FHIR.R4.Types.ObservationStatusFinal);
    FHIR.R3.Types.ObservationStatusAmended: exit(FHIR.R4.Types.ObservationStatusAmended);
    FHIR.R3.Types.ObservationStatusCorrected: exit(FHIR.R4.Types.ObservationStatusCorrected);
    FHIR.R3.Types.ObservationStatusCancelled: exit(FHIR.R4.Types.ObservationStatusCancelled);
    FHIR.R3.Types.ObservationStatusEnteredInError: exit(FHIR.R4.Types.ObservationStatusEnteredInError);
    FHIR.R3.Types.ObservationStatusUnknown: exit(FHIR.R4.Types.ObservationStatusUnknown);
    else exit(FHIR.R4.Types.ObservationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertRiskAssessmentStatus(src : FHIR.R4.Types.TFhirObservationStatusEnum) : FHIR.R3.Types.TFhirObservationStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.ObservationStatusRegistered: exit(FHIR.R3.Types.ObservationStatusRegistered);
    FHIR.R4.Types.ObservationStatusPreliminary: exit(FHIR.R3.Types.ObservationStatusPreliminary);
    FHIR.R4.Types.ObservationStatusFinal: exit(FHIR.R3.Types.ObservationStatusFinal);
    FHIR.R4.Types.ObservationStatusAmended: exit(FHIR.R3.Types.ObservationStatusAmended);
    FHIR.R4.Types.ObservationStatusCorrected: exit(FHIR.R3.Types.ObservationStatusCorrected);
    FHIR.R4.Types.ObservationStatusCancelled: exit(FHIR.R3.Types.ObservationStatusCancelled);
    FHIR.R4.Types.ObservationStatusEnteredInError: exit(FHIR.R3.Types.ObservationStatusEnteredInError);
    FHIR.R4.Types.ObservationStatusUnknown: exit(FHIR.R3.Types.ObservationStatusUnknown);
    else exit(FHIR.R3.Types.ObservationStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertXPathUsageType(src : FHIR.R3.Types.TFhirSearchXpathUsageEnum) : FHIR.R4.Types.TFhirSearchXpathUsageEnum;
begin
  case (src) of
    FHIR.R3.Types.SearchXpathUsageNormal: exit(FHIR.R4.Types.SearchXpathUsageNormal);
    FHIR.R3.Types.SearchXpathUsagePhonetic: exit(FHIR.R4.Types.SearchXpathUsagePhonetic);
    FHIR.R3.Types.SearchXpathUsageNearby: exit(FHIR.R4.Types.SearchXpathUsageNearby);
    FHIR.R3.Types.SearchXpathUsageDistance: exit(FHIR.R4.Types.SearchXpathUsageDistance);
    FHIR.R3.Types.SearchXpathUsageOther: exit(FHIR.R4.Types.SearchXpathUsageOther);
    else exit(FHIR.R4.Types.SearchXpathUsageNull);
  end;
end;

class function TVersionConvertor_30_40.convertXPathUsageType(src : FHIR.R4.Types.TFhirSearchXpathUsageEnum) : FHIR.R3.Types.TFhirSearchXpathUsageEnum;
begin
  case (src) of
    FHIR.R4.Types.SearchXpathUsageNormal: exit(FHIR.R3.Types.SearchXpathUsageNormal);
    FHIR.R4.Types.SearchXpathUsagePhonetic: exit(FHIR.R3.Types.SearchXpathUsagePhonetic);
    FHIR.R4.Types.SearchXpathUsageNearby: exit(FHIR.R3.Types.SearchXpathUsageNearby);
    FHIR.R4.Types.SearchXpathUsageDistance: exit(FHIR.R3.Types.SearchXpathUsageDistance);
    FHIR.R4.Types.SearchXpathUsageOther: exit(FHIR.R3.Types.SearchXpathUsageOther);
    else exit(FHIR.R3.Types.SearchXpathUsageNull);
  end;
end;

class function TVersionConvertor_30_40.convertSearchComparator(src : FHIR.R3.Types.TFhirSearchComparatorEnum) : FHIR.R4.Types.TFhirSearchComparatorEnum;
begin
  case (src) of
    FHIR.R3.Types.SearchComparatorEq: exit(FHIR.R4.Types.SearchComparatorEq);
    FHIR.R3.Types.SearchComparatorNe: exit(FHIR.R4.Types.SearchComparatorNe);
    FHIR.R3.Types.SearchComparatorGt: exit(FHIR.R4.Types.SearchComparatorGt);
    FHIR.R3.Types.SearchComparatorLt: exit(FHIR.R4.Types.SearchComparatorLt);
    FHIR.R3.Types.SearchComparatorGe: exit(FHIR.R4.Types.SearchComparatorGe);
    FHIR.R3.Types.SearchComparatorLe: exit(FHIR.R4.Types.SearchComparatorLe);
    FHIR.R3.Types.SearchComparatorSa: exit(FHIR.R4.Types.SearchComparatorSa);
    FHIR.R3.Types.SearchComparatorEb: exit(FHIR.R4.Types.SearchComparatorEb);
    FHIR.R3.Types.SearchComparatorAp: exit(FHIR.R4.Types.SearchComparatorAp);
    else exit(FHIR.R4.Types.SearchComparatorNull);
  end;
end;

class function TVersionConvertor_30_40.convertSearchComparator(src : FHIR.R4.Types.TFhirSearchComparatorEnum) : FHIR.R3.Types.TFhirSearchComparatorEnum;
begin
  case (src) of
    FHIR.R4.Types.SearchComparatorEq: exit(FHIR.R3.Types.SearchComparatorEq);
    FHIR.R4.Types.SearchComparatorNe: exit(FHIR.R3.Types.SearchComparatorNe);
    FHIR.R4.Types.SearchComparatorGt: exit(FHIR.R3.Types.SearchComparatorGt);
    FHIR.R4.Types.SearchComparatorLt: exit(FHIR.R3.Types.SearchComparatorLt);
    FHIR.R4.Types.SearchComparatorGe: exit(FHIR.R3.Types.SearchComparatorGe);
    FHIR.R4.Types.SearchComparatorLe: exit(FHIR.R3.Types.SearchComparatorLe);
    FHIR.R4.Types.SearchComparatorSa: exit(FHIR.R3.Types.SearchComparatorSa);
    FHIR.R4.Types.SearchComparatorEb: exit(FHIR.R3.Types.SearchComparatorEb);
    FHIR.R4.Types.SearchComparatorAp: exit(FHIR.R3.Types.SearchComparatorAp);
    else exit(FHIR.R3.Types.SearchComparatorNull);
  end;
end;

class function TVersionConvertor_30_40.convertSearchModifierCode(src : FHIR.R3.Types.TFhirSearchModifierCodeEnum) : FHIR.R4.Types.TFhirSearchModifierCodeEnum;
begin
  case (src) of
    FHIR.R3.Types.SearchModifierCodeMissing: exit(FHIR.R4.Types.SearchModifierCodeMissing);
    FHIR.R3.Types.SearchModifierCodeExact: exit(FHIR.R4.Types.SearchModifierCodeExact);
    FHIR.R3.Types.SearchModifierCodeContains: exit(FHIR.R4.Types.SearchModifierCodeContains);
    FHIR.R3.Types.SearchModifierCodeNot: exit(FHIR.R4.Types.SearchModifierCodeNot);
    FHIR.R3.Types.SearchModifierCodeText: exit(FHIR.R4.Types.SearchModifierCodeText);
    FHIR.R3.Types.SearchModifierCodeIn: exit(FHIR.R4.Types.SearchModifierCodeIn);
    FHIR.R3.Types.SearchModifierCodeNotIn: exit(FHIR.R4.Types.SearchModifierCodeNotIn);
    FHIR.R3.Types.SearchModifierCodeBelow: exit(FHIR.R4.Types.SearchModifierCodeBelow);
    FHIR.R3.Types.SearchModifierCodeAbove: exit(FHIR.R4.Types.SearchModifierCodeAbove);
    FHIR.R3.Types.SearchModifierCodeType: exit(FHIR.R4.Types.SearchModifierCodeType);
    else exit(FHIR.R4.Types.SearchModifierCodeNull);
  end;
end;

class function TVersionConvertor_30_40.convertSearchModifierCode(src : FHIR.R4.Types.TFhirSearchModifierCodeEnum) : FHIR.R3.Types.TFhirSearchModifierCodeEnum;
begin
  case (src) of
    FHIR.R4.Types.SearchModifierCodeMissing: exit(FHIR.R3.Types.SearchModifierCodeMissing);
    FHIR.R4.Types.SearchModifierCodeExact: exit(FHIR.R3.Types.SearchModifierCodeExact);
    FHIR.R4.Types.SearchModifierCodeContains: exit(FHIR.R3.Types.SearchModifierCodeContains);
    FHIR.R4.Types.SearchModifierCodeNot: exit(FHIR.R3.Types.SearchModifierCodeNot);
    FHIR.R4.Types.SearchModifierCodeText: exit(FHIR.R3.Types.SearchModifierCodeText);
    FHIR.R4.Types.SearchModifierCodeIn: exit(FHIR.R3.Types.SearchModifierCodeIn);
    FHIR.R4.Types.SearchModifierCodeNotIn: exit(FHIR.R3.Types.SearchModifierCodeNotIn);
    FHIR.R4.Types.SearchModifierCodeBelow: exit(FHIR.R3.Types.SearchModifierCodeBelow);
    FHIR.R4.Types.SearchModifierCodeAbove: exit(FHIR.R3.Types.SearchModifierCodeAbove);
    FHIR.R4.Types.SearchModifierCodeType: exit(FHIR.R3.Types.SearchModifierCodeType);
    else exit(FHIR.R3.Types.SearchModifierCodeNull);
  end;
end;

class function TVersionConvertor_30_40.convertQualityType(src : FHIR.R3.Types.TFhirQualityTypeEnum) : FHIR.R4.Types.TFhirQualityTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.QualityTypeIndel: exit(FHIR.R4.Types.QualityTypeIndel);
    FHIR.R3.Types.QualityTypeSnp: exit(FHIR.R4.Types.QualityTypeSnp);
    FHIR.R3.Types.QualityTypeUnknown: exit(FHIR.R4.Types.QualityTypeUnknown);
    else exit(FHIR.R4.Types.QualityTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertQualityType(src : FHIR.R4.Types.TFhirQualityTypeEnum) : FHIR.R3.Types.TFhirQualityTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.QualityTypeIndel: exit(FHIR.R3.Types.QualityTypeIndel);
    FHIR.R4.Types.QualityTypeSnp: exit(FHIR.R3.Types.QualityTypeSnp);
    FHIR.R4.Types.QualityTypeUnknown: exit(FHIR.R3.Types.QualityTypeUnknown);
    else exit(FHIR.R3.Types.QualityTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertRepositoryType(src : FHIR.R3.Types.TFhirRepositoryTypeEnum) : FHIR.R4.Types.TFhirRepositoryTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.RepositoryTypeDirectlink: exit(FHIR.R4.Types.RepositoryTypeDirectlink);
    FHIR.R3.Types.RepositoryTypeOpenapi: exit(FHIR.R4.Types.RepositoryTypeOpenapi);
    FHIR.R3.Types.RepositoryTypeLogin: exit(FHIR.R4.Types.RepositoryTypeLogin);
    FHIR.R3.Types.RepositoryTypeOauth: exit(FHIR.R4.Types.RepositoryTypeOauth);
    FHIR.R3.Types.RepositoryTypeOther: exit(FHIR.R4.Types.RepositoryTypeOther);
    else exit(FHIR.R4.Types.RepositoryTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertRepositoryType(src : FHIR.R4.Types.TFhirRepositoryTypeEnum) : FHIR.R3.Types.TFhirRepositoryTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.RepositoryTypeDirectlink: exit(FHIR.R3.Types.RepositoryTypeDirectlink);
    FHIR.R4.Types.RepositoryTypeOpenapi: exit(FHIR.R3.Types.RepositoryTypeOpenapi);
    FHIR.R4.Types.RepositoryTypeLogin: exit(FHIR.R3.Types.RepositoryTypeLogin);
    FHIR.R4.Types.RepositoryTypeOauth: exit(FHIR.R3.Types.RepositoryTypeOauth);
    FHIR.R4.Types.RepositoryTypeOther: exit(FHIR.R3.Types.RepositoryTypeOther);
    else exit(FHIR.R3.Types.RepositoryTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertSlotStatus(src : FHIR.R3.Types.TFhirSlotstatusEnum) : FHIR.R4.Types.TFhirSlotstatusEnum;
begin
  case (src) of
    FHIR.R3.Types.SlotstatusBusy: exit(FHIR.R4.Types.SlotstatusBusy);
    FHIR.R3.Types.SlotstatusFree: exit(FHIR.R4.Types.SlotstatusFree);
    FHIR.R3.Types.SlotstatusBusyUnavailable: exit(FHIR.R4.Types.SlotstatusBusyUnavailable);
    FHIR.R3.Types.SlotstatusBusyTentative: exit(FHIR.R4.Types.SlotstatusBusyTentative);
    FHIR.R3.Types.SlotstatusEnteredInError: exit(FHIR.R4.Types.SlotstatusEnteredInError);
    else exit(FHIR.R4.Types.SlotstatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertSlotStatus(src : FHIR.R4.Types.TFhirSlotstatusEnum) : FHIR.R3.Types.TFhirSlotstatusEnum;
begin
  case (src) of
    FHIR.R4.Types.SlotstatusBusy: exit(FHIR.R3.Types.SlotstatusBusy);
    FHIR.R4.Types.SlotstatusFree: exit(FHIR.R3.Types.SlotstatusFree);
    FHIR.R4.Types.SlotstatusBusyUnavailable: exit(FHIR.R3.Types.SlotstatusBusyUnavailable);
    FHIR.R4.Types.SlotstatusBusyTentative: exit(FHIR.R3.Types.SlotstatusBusyTentative);
    FHIR.R4.Types.SlotstatusEnteredInError: exit(FHIR.R3.Types.SlotstatusEnteredInError);
    else exit(FHIR.R3.Types.SlotstatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertSpecimenStatus(src : FHIR.R3.Types.TFhirSpecimenStatusEnum) : FHIR.R4.Types.TFhirSpecimenStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.SpecimenStatusAvailable: exit(FHIR.R4.Types.SpecimenStatusAvailable);
    FHIR.R3.Types.SpecimenStatusUnavailable: exit(FHIR.R4.Types.SpecimenStatusUnavailable);
    FHIR.R3.Types.SpecimenStatusUnsatisfactory: exit(FHIR.R4.Types.SpecimenStatusUnsatisfactory);
    FHIR.R3.Types.SpecimenStatusEnteredInError: exit(FHIR.R4.Types.SpecimenStatusEnteredInError);
    else exit(FHIR.R4.Types.SpecimenStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertSpecimenStatus(src : FHIR.R4.Types.TFhirSpecimenStatusEnum) : FHIR.R3.Types.TFhirSpecimenStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.SpecimenStatusAvailable: exit(FHIR.R3.Types.SpecimenStatusAvailable);
    FHIR.R4.Types.SpecimenStatusUnavailable: exit(FHIR.R3.Types.SpecimenStatusUnavailable);
    FHIR.R4.Types.SpecimenStatusUnsatisfactory: exit(FHIR.R3.Types.SpecimenStatusUnsatisfactory);
    FHIR.R4.Types.SpecimenStatusEnteredInError: exit(FHIR.R3.Types.SpecimenStatusEnteredInError);
    else exit(FHIR.R3.Types.SpecimenStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureDefinitionKind(src : FHIR.R3.Types.TFhirStructureDefinitionKindEnum) : FHIR.R4.Types.TFhirStructureDefinitionKindEnum;
begin
  case (src) of
    FHIR.R3.Types.StructureDefinitionKindPrimitiveType: exit(FHIR.R4.Types.StructureDefinitionKindPrimitiveType);
    FHIR.R3.Types.StructureDefinitionKindComplexType: exit(FHIR.R4.Types.StructureDefinitionKindComplexType);
    FHIR.R3.Types.StructureDefinitionKindResource: exit(FHIR.R4.Types.StructureDefinitionKindResource);
    FHIR.R3.Types.StructureDefinitionKindLogical: exit(FHIR.R4.Types.StructureDefinitionKindLogical);
    else exit(FHIR.R4.Types.StructureDefinitionKindNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureDefinitionKind(src : FHIR.R4.Types.TFhirStructureDefinitionKindEnum) : FHIR.R3.Types.TFhirStructureDefinitionKindEnum;
begin
  case (src) of
    FHIR.R4.Types.StructureDefinitionKindPrimitiveType: exit(FHIR.R3.Types.StructureDefinitionKindPrimitiveType);
    FHIR.R4.Types.StructureDefinitionKindComplexType: exit(FHIR.R3.Types.StructureDefinitionKindComplexType);
    FHIR.R4.Types.StructureDefinitionKindResource: exit(FHIR.R3.Types.StructureDefinitionKindResource);
    FHIR.R4.Types.StructureDefinitionKindLogical: exit(FHIR.R3.Types.StructureDefinitionKindLogical);
    else exit(FHIR.R3.Types.StructureDefinitionKindNull);
  end;
end;

class function TVersionConvertor_30_40.convertExtensionContext(src : FHIR.R3.Types.TFhirExtensionContextEnum) : FHIR.R4.Types.TFhirExtensionContextTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.ExtensionContextResource: exit(FHIR.R4.Types.ExtensionContextTypeFhirpath);
    FHIR.R3.Types.ExtensionContextDatatype: exit(FHIR.R4.Types.ExtensionContextTypeElement);
    FHIR.R3.Types.ExtensionContextExtension: exit(FHIR.R4.Types.ExtensionContextTypeExtension);
    else exit(FHIR.R4.Types.ExtensionContextTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertExtensionContext(src : FHIR.R4.Types.TFhirExtensionContextTypeEnum) : FHIR.R3.Types.TFhirExtensionContextEnum;
begin
  case (src) of
    FHIR.R4.Types.ExtensionContextTypeFhirpath: exit(FHIR.R3.Types.ExtensionContextResource);
    FHIR.R4.Types.ExtensionContextTypeElement: exit(FHIR.R3.Types.ExtensionContextDatatype);
    FHIR.R4.Types.ExtensionContextTypeExtension: exit(FHIR.R3.Types.ExtensionContextExtension);
    else exit(FHIR.R3.Types.ExtensionContextNull);
  end;
end;

class function TVersionConvertor_30_40.convertTypeDerivationRule(src : FHIR.R3.Types.TFhirTypeDerivationRuleEnum) : FHIR.R4.Types.TFhirTypeDerivationRuleEnum;
begin
  case (src) of
    FHIR.R3.Types.TypeDerivationRuleSpecialization: exit(FHIR.R4.Types.TypeDerivationRuleSpecialization);
    FHIR.R3.Types.TypeDerivationRuleConstraint: exit(FHIR.R4.Types.TypeDerivationRuleConstraint);
    else exit(FHIR.R4.Types.TypeDerivationRuleNull);
  end;
end;

class function TVersionConvertor_30_40.convertTypeDerivationRule(src : FHIR.R4.Types.TFhirTypeDerivationRuleEnum) : FHIR.R3.Types.TFhirTypeDerivationRuleEnum;
begin
  case (src) of
    FHIR.R4.Types.TypeDerivationRuleSpecialization: exit(FHIR.R3.Types.TypeDerivationRuleSpecialization);
    FHIR.R4.Types.TypeDerivationRuleConstraint: exit(FHIR.R3.Types.TypeDerivationRuleConstraint);
    else exit(FHIR.R3.Types.TypeDerivationRuleNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapModelMode(src : FHIR.R3.Types.TFhirMapModelModeEnum) : FHIR.R4.Types.TFhirMapModelModeEnum;
begin
  case (src) of
    FHIR.R3.Types.MapModelModeSource: exit(FHIR.R4.Types.MapModelModeSource);
    FHIR.R3.Types.MapModelModeQueried: exit(FHIR.R4.Types.MapModelModeQueried);
    FHIR.R3.Types.MapModelModeTarget: exit(FHIR.R4.Types.MapModelModeTarget);
    FHIR.R3.Types.MapModelModeProduced: exit(FHIR.R4.Types.MapModelModeProduced);
    else exit(FHIR.R4.Types.MapModelModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapModelMode(src : FHIR.R4.Types.TFhirMapModelModeEnum) : FHIR.R3.Types.TFhirMapModelModeEnum;
begin
  case (src) of
    FHIR.R4.Types.MapModelModeSource: exit(FHIR.R3.Types.MapModelModeSource);
    FHIR.R4.Types.MapModelModeQueried: exit(FHIR.R3.Types.MapModelModeQueried);
    FHIR.R4.Types.MapModelModeTarget: exit(FHIR.R3.Types.MapModelModeTarget);
    FHIR.R4.Types.MapModelModeProduced: exit(FHIR.R3.Types.MapModelModeProduced);
    else exit(FHIR.R3.Types.MapModelModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupTypeMode(src : FHIR.R3.Types.TFhirMapGroupTypeModeEnum) : FHIR.R4.Types.TFhirMapGroupTypeModeEnum;
begin
  case (src) of
    FHIR.R3.Types.MapGroupTypeModeNone: exit(FHIR.R4.Types.MapGroupTypeModeNone);
    FHIR.R3.Types.MapGroupTypeModeTypes: exit(FHIR.R4.Types.MapGroupTypeModeTypes);
    FHIR.R3.Types.MapGroupTypeModeTypeAndTypes: exit(FHIR.R4.Types.MapGroupTypeModeTypeAndTypes);
    else exit(FHIR.R4.Types.MapGroupTypeModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupTypeMode(src : FHIR.R4.Types.TFhirMapGroupTypeModeEnum) : FHIR.R3.Types.TFhirMapGroupTypeModeEnum;
begin
  case (src) of
    FHIR.R4.Types.MapGroupTypeModeNone: exit(FHIR.R3.Types.MapGroupTypeModeNone);
    FHIR.R4.Types.MapGroupTypeModeTypes: exit(FHIR.R3.Types.MapGroupTypeModeTypes);
    FHIR.R4.Types.MapGroupTypeModeTypeAndTypes: exit(FHIR.R3.Types.MapGroupTypeModeTypeAndTypes);
    else exit(FHIR.R3.Types.MapGroupTypeModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapInputMode(src : FHIR.R3.Types.TFhirMapInputModeEnum) : FHIR.R4.Types.TFhirMapInputModeEnum;
begin
  case (src) of
    FHIR.R3.Types.MapInputModeSource: exit(FHIR.R4.Types.MapInputModeSource);
    FHIR.R3.Types.MapInputModeTarget: exit(FHIR.R4.Types.MapInputModeTarget);
    else exit(FHIR.R4.Types.MapInputModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapInputMode(src : FHIR.R4.Types.TFhirMapInputModeEnum) : FHIR.R3.Types.TFhirMapInputModeEnum;
begin
  case (src) of
    FHIR.R4.Types.MapInputModeSource: exit(FHIR.R3.Types.MapInputModeSource);
    FHIR.R4.Types.MapInputModeTarget: exit(FHIR.R3.Types.MapInputModeTarget);
    else exit(FHIR.R3.Types.MapInputModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapSourceListMode(src : FHIR.R3.Types.TFhirMapSourceListModeEnum) : FHIR.R4.Types.TFhirMapSourceListModeEnum;
begin
  case (src) of
    FHIR.R3.Types.MapSourceListModeFirst: exit(FHIR.R4.Types.MapSourceListModeFirst);
    FHIR.R3.Types.MapSourceListModeNotFirst: exit(FHIR.R4.Types.MapSourceListModeNotFirst);
    FHIR.R3.Types.MapSourceListModeLast: exit(FHIR.R4.Types.MapSourceListModeLast);
    FHIR.R3.Types.MapSourceListModeNotLast: exit(FHIR.R4.Types.MapSourceListModeNotLast);
    FHIR.R3.Types.MapSourceListModeOnlyOne: exit(FHIR.R4.Types.MapSourceListModeOnlyOne);
    else exit(FHIR.R4.Types.MapSourceListModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapSourceListMode(src : FHIR.R4.Types.TFhirMapSourceListModeEnum) : FHIR.R3.Types.TFhirMapSourceListModeEnum;
begin
  case (src) of
    FHIR.R4.Types.MapSourceListModeFirst: exit(FHIR.R3.Types.MapSourceListModeFirst);
    FHIR.R4.Types.MapSourceListModeNotFirst: exit(FHIR.R3.Types.MapSourceListModeNotFirst);
    FHIR.R4.Types.MapSourceListModeLast: exit(FHIR.R3.Types.MapSourceListModeLast);
    FHIR.R4.Types.MapSourceListModeNotLast: exit(FHIR.R3.Types.MapSourceListModeNotLast);
    FHIR.R4.Types.MapSourceListModeOnlyOne: exit(FHIR.R3.Types.MapSourceListModeOnlyOne);
    else exit(FHIR.R3.Types.MapSourceListModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapContextType(src : FHIR.R3.Types.TFhirMapContextTypeEnum) : FHIR.R4.Types.TFhirMapContextTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.MapContextTypeType: exit(FHIR.R4.Types.MapContextTypeType);
    FHIR.R3.Types.MapContextTypeVariable: exit(FHIR.R4.Types.MapContextTypeVariable);
    else exit(FHIR.R4.Types.MapContextTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapContextType(src : FHIR.R4.Types.TFhirMapContextTypeEnum) : FHIR.R3.Types.TFhirMapContextTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.MapContextTypeType: exit(FHIR.R3.Types.MapContextTypeType);
    FHIR.R4.Types.MapContextTypeVariable: exit(FHIR.R3.Types.MapContextTypeVariable);
    else exit(FHIR.R3.Types.MapContextTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapTargetListMode(src : FHIR.R3.Types.TFhirMapTargetListModeEnum) : FHIR.R4.Types.TFhirMapTargetListModeEnum;
begin
  case (src) of
    FHIR.R3.Types.MapTargetListModeFirst: exit(FHIR.R4.Types.MapTargetListModeFirst);
    FHIR.R3.Types.MapTargetListModeShare: exit(FHIR.R4.Types.MapTargetListModeShare);
    FHIR.R3.Types.MapTargetListModeLast: exit(FHIR.R4.Types.MapTargetListModeLast);
    FHIR.R3.Types.MapTargetListModeCollate: exit(FHIR.R4.Types.MapTargetListModeCollate);
    else exit(FHIR.R4.Types.MapTargetListModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapTargetListMode(src : FHIR.R4.Types.TFhirMapTargetListModeEnum) : FHIR.R3.Types.TFhirMapTargetListModeEnum;
begin
  case (src) of
    FHIR.R4.Types.MapTargetListModeFirst: exit(FHIR.R3.Types.MapTargetListModeFirst);
    FHIR.R4.Types.MapTargetListModeShare: exit(FHIR.R3.Types.MapTargetListModeShare);
    FHIR.R4.Types.MapTargetListModeLast: exit(FHIR.R3.Types.MapTargetListModeLast);
    FHIR.R4.Types.MapTargetListModeCollate: exit(FHIR.R3.Types.MapTargetListModeCollate);
    else exit(FHIR.R3.Types.MapTargetListModeNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapTransform(src : FHIR.R3.Types.TFhirMapTransformEnum) : FHIR.R4.Types.TFhirMapTransformEnum;
begin
  case (src) of
    FHIR.R3.Types.MapTransformCreate: exit(FHIR.R4.Types.MapTransformCreate);
    FHIR.R3.Types.MapTransformCopy: exit(FHIR.R4.Types.MapTransformCopy);
    FHIR.R3.Types.MapTransformTruncate: exit(FHIR.R4.Types.MapTransformTruncate);
    FHIR.R3.Types.MapTransformEscape: exit(FHIR.R4.Types.MapTransformEscape);
    FHIR.R3.Types.MapTransformCast: exit(FHIR.R4.Types.MapTransformCast);
    FHIR.R3.Types.MapTransformAppend: exit(FHIR.R4.Types.MapTransformAppend);
    FHIR.R3.Types.MapTransformTranslate: exit(FHIR.R4.Types.MapTransformTranslate);
    FHIR.R3.Types.MapTransformReference: exit(FHIR.R4.Types.MapTransformReference);
    FHIR.R3.Types.MapTransformDateOp: exit(FHIR.R4.Types.MapTransformDateOp);
    FHIR.R3.Types.MapTransformUuid: exit(FHIR.R4.Types.MapTransformUuid);
    FHIR.R3.Types.MapTransformPointer: exit(FHIR.R4.Types.MapTransformPointer);
    FHIR.R3.Types.MapTransformEvaluate: exit(FHIR.R4.Types.MapTransformEvaluate);
    FHIR.R3.Types.MapTransformCc: exit(FHIR.R4.Types.MapTransformCc);
    FHIR.R3.Types.MapTransformC: exit(FHIR.R4.Types.MapTransformC);
    FHIR.R3.Types.MapTransformQty: exit(FHIR.R4.Types.MapTransformQty);
    FHIR.R3.Types.MapTransformId: exit(FHIR.R4.Types.MapTransformId);
    FHIR.R3.Types.MapTransformCp: exit(FHIR.R4.Types.MapTransformCp);
    else exit(FHIR.R4.Types.MapTransformNull);
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapTransform(src : FHIR.R4.Types.TFhirMapTransformEnum) : FHIR.R3.Types.TFhirMapTransformEnum;
begin
  case (src) of
    FHIR.R4.Types.MapTransformCreate: exit(FHIR.R3.Types.MapTransformCreate);
    FHIR.R4.Types.MapTransformCopy: exit(FHIR.R3.Types.MapTransformCopy);
    FHIR.R4.Types.MapTransformTruncate: exit(FHIR.R3.Types.MapTransformTruncate);
    FHIR.R4.Types.MapTransformEscape: exit(FHIR.R3.Types.MapTransformEscape);
    FHIR.R4.Types.MapTransformCast: exit(FHIR.R3.Types.MapTransformCast);
    FHIR.R4.Types.MapTransformAppend: exit(FHIR.R3.Types.MapTransformAppend);
    FHIR.R4.Types.MapTransformTranslate: exit(FHIR.R3.Types.MapTransformTranslate);
    FHIR.R4.Types.MapTransformReference: exit(FHIR.R3.Types.MapTransformReference);
    FHIR.R4.Types.MapTransformDateOp: exit(FHIR.R3.Types.MapTransformDateOp);
    FHIR.R4.Types.MapTransformUuid: exit(FHIR.R3.Types.MapTransformUuid);
    FHIR.R4.Types.MapTransformPointer: exit(FHIR.R3.Types.MapTransformPointer);
    FHIR.R4.Types.MapTransformEvaluate: exit(FHIR.R3.Types.MapTransformEvaluate);
    FHIR.R4.Types.MapTransformCc: exit(FHIR.R3.Types.MapTransformCc);
    FHIR.R4.Types.MapTransformC: exit(FHIR.R3.Types.MapTransformC);
    FHIR.R4.Types.MapTransformQty: exit(FHIR.R3.Types.MapTransformQty);
    FHIR.R4.Types.MapTransformId: exit(FHIR.R3.Types.MapTransformId);
    FHIR.R4.Types.MapTransformCp: exit(FHIR.R3.Types.MapTransformCp);
    else exit(FHIR.R3.Types.MapTransformNull);
  end;
end;

class function TVersionConvertor_30_40.convertSubscriptionStatus(src : FHIR.R3.Types.TFhirSubscriptionStatusEnum) : FHIR.R4.Types.TFhirSubscriptionStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.SubscriptionStatusRequested: exit(FHIR.R4.Types.SubscriptionStatusRequested);
    FHIR.R3.Types.SubscriptionStatusActive: exit(FHIR.R4.Types.SubscriptionStatusActive);
    FHIR.R3.Types.SubscriptionStatusError: exit(FHIR.R4.Types.SubscriptionStatusError);
    FHIR.R3.Types.SubscriptionStatusOff: exit(FHIR.R4.Types.SubscriptionStatusOff);
    else exit(FHIR.R4.Types.SubscriptionStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertSubscriptionStatus(src : FHIR.R4.Types.TFhirSubscriptionStatusEnum) : FHIR.R3.Types.TFhirSubscriptionStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.SubscriptionStatusRequested: exit(FHIR.R3.Types.SubscriptionStatusRequested);
    FHIR.R4.Types.SubscriptionStatusActive: exit(FHIR.R3.Types.SubscriptionStatusActive);
    FHIR.R4.Types.SubscriptionStatusError: exit(FHIR.R3.Types.SubscriptionStatusError);
    FHIR.R4.Types.SubscriptionStatusOff: exit(FHIR.R3.Types.SubscriptionStatusOff);
    else exit(FHIR.R3.Types.SubscriptionStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertSubscriptionChannelType(src : FHIR.R3.Types.TFhirSubscriptionChannelTypeEnum) : FHIR.R4.Types.TFhirSubscriptionChannelTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.SubscriptionChannelTypeRestHook: exit(FHIR.R4.Types.SubscriptionChannelTypeRestHook);
    FHIR.R3.Types.SubscriptionChannelTypeWebsocket: exit(FHIR.R4.Types.SubscriptionChannelTypeWebsocket);
    FHIR.R3.Types.SubscriptionChannelTypeEmail: exit(FHIR.R4.Types.SubscriptionChannelTypeEmail);
    FHIR.R3.Types.SubscriptionChannelTypeSms: exit(FHIR.R4.Types.SubscriptionChannelTypeSms);
    FHIR.R3.Types.SubscriptionChannelTypeMessage: exit(FHIR.R4.Types.SubscriptionChannelTypeMessage);
    else exit(FHIR.R4.Types.SubscriptionChannelTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertSubscriptionChannelType(src : FHIR.R4.Types.TFhirSubscriptionChannelTypeEnum) : FHIR.R3.Types.TFhirSubscriptionChannelTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.SubscriptionChannelTypeRestHook: exit(FHIR.R3.Types.SubscriptionChannelTypeRestHook);
    FHIR.R4.Types.SubscriptionChannelTypeWebsocket: exit(FHIR.R3.Types.SubscriptionChannelTypeWebsocket);
    FHIR.R4.Types.SubscriptionChannelTypeEmail: exit(FHIR.R3.Types.SubscriptionChannelTypeEmail);
    FHIR.R4.Types.SubscriptionChannelTypeSms: exit(FHIR.R3.Types.SubscriptionChannelTypeSms);
    FHIR.R4.Types.SubscriptionChannelTypeMessage: exit(FHIR.R3.Types.SubscriptionChannelTypeMessage);
    else exit(FHIR.R3.Types.SubscriptionChannelTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertFHIRSubstanceStatus(src : FHIR.R3.Types.TFhirSubstanceStatusEnum) : FHIR.R4.Types.TFhirSubstanceStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.SubstanceStatusActive: exit(FHIR.R4.Types.SubstanceStatusActive);
    FHIR.R3.Types.SubstanceStatusInactive: exit(FHIR.R4.Types.SubstanceStatusInactive);
    FHIR.R3.Types.SubstanceStatusEnteredInError: exit(FHIR.R4.Types.SubstanceStatusEnteredInError);
    else exit(FHIR.R4.Types.SubstanceStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertFHIRSubstanceStatus(src : FHIR.R4.Types.TFhirSubstanceStatusEnum) : FHIR.R3.Types.TFhirSubstanceStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.SubstanceStatusActive: exit(FHIR.R3.Types.SubstanceStatusActive);
    FHIR.R4.Types.SubstanceStatusInactive: exit(FHIR.R3.Types.SubstanceStatusInactive);
    FHIR.R4.Types.SubstanceStatusEnteredInError: exit(FHIR.R3.Types.SubstanceStatusEnteredInError);
    else exit(FHIR.R3.Types.SubstanceStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertSupplyDeliveryStatus(src : FHIR.R3.Types.TFhirSupplydeliveryStatusEnum) : FHIR.R4.Types.TFhirSupplydeliveryStatusEnum;
begin
  case (src) of
    FHIR.R3.Types.SupplydeliveryStatusInProgress: exit(FHIR.R4.Types.SupplydeliveryStatusInProgress);
    FHIR.R3.Types.SupplydeliveryStatusCompleted: exit(FHIR.R4.Types.SupplydeliveryStatusCompleted);
    FHIR.R3.Types.SupplydeliveryStatusAbandoned: exit(FHIR.R4.Types.SupplydeliveryStatusAbandoned);
    FHIR.R3.Types.SupplydeliveryStatusEnteredInError: exit(FHIR.R4.Types.SupplydeliveryStatusEnteredInError);
    else exit(FHIR.R4.Types.SupplydeliveryStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertSupplyDeliveryStatus(src : FHIR.R4.Types.TFhirSupplydeliveryStatusEnum) : FHIR.R3.Types.TFhirSupplydeliveryStatusEnum;
begin
  case (src) of
    FHIR.R4.Types.SupplydeliveryStatusInProgress: exit(FHIR.R3.Types.SupplydeliveryStatusInProgress);
    FHIR.R4.Types.SupplydeliveryStatusCompleted: exit(FHIR.R3.Types.SupplydeliveryStatusCompleted);
    FHIR.R4.Types.SupplydeliveryStatusAbandoned: exit(FHIR.R3.Types.SupplydeliveryStatusAbandoned);
    FHIR.R4.Types.SupplydeliveryStatusEnteredInError: exit(FHIR.R3.Types.SupplydeliveryStatusEnteredInError);
    else exit(FHIR.R3.Types.SupplydeliveryStatusNull);
  end;
end;

class function TVersionConvertor_30_40.convertContentType(src : FHIR.R3.Types.TFhirContentTypeEnum) : String;
begin
  case (src) of
    FHIR.R3.Types.ContentTypeXml: exit('application/fhir+xml');
    FHIR.R3.Types.ContentTypeJson: exit('application/fhir+json');
    FHIR.R3.Types.ContentTypeTtl: exit('text/turtle');
    FHIR.R3.Types.ContentTypeNone: exit('');
    else exit('');
  end;
end;

class function TVersionConvertor_30_40.convertActionGroupingBehavior(src : FHIR.R3.Types.TFhirActionGroupingBehaviorEnum) : FHIR.R4.Types.TFhirActionGroupingBehaviorEnum;
begin
  case (src) of
    FHIR.R3.Types.ActionGroupingBehaviorVisualGroup: exit(FHIR.R4.Types.ActionGroupingBehaviorVisualGroup);
    FHIR.R3.Types.ActionGroupingBehaviorLogicalGroup: exit(FHIR.R4.Types.ActionGroupingBehaviorLogicalGroup);
    FHIR.R3.Types.ActionGroupingBehaviorSentenceGroup: exit(FHIR.R4.Types.ActionGroupingBehaviorSentenceGroup);
    else exit(FHIR.R4.Types.ActionGroupingBehaviorNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionGroupingBehavior(src : FHIR.R4.Types.TFhirActionGroupingBehaviorEnum) : FHIR.R3.Types.TFhirActionGroupingBehaviorEnum;
begin
  case (src) of
    FHIR.R4.Types.ActionGroupingBehaviorVisualGroup: exit(FHIR.R3.Types.ActionGroupingBehaviorVisualGroup);
    FHIR.R4.Types.ActionGroupingBehaviorLogicalGroup: exit(FHIR.R3.Types.ActionGroupingBehaviorLogicalGroup);
    FHIR.R4.Types.ActionGroupingBehaviorSentenceGroup: exit(FHIR.R3.Types.ActionGroupingBehaviorSentenceGroup);
    else exit(FHIR.R3.Types.ActionGroupingBehaviorNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionSelectionBehavior(src : FHIR.R3.Types.TFhirActionSelectionBehaviorEnum) : FHIR.R4.Types.TFhirActionSelectionBehaviorEnum;
begin
  case (src) of
    FHIR.R3.Types.ActionSelectionBehaviorAny: exit(FHIR.R4.Types.ActionSelectionBehaviorAny);
    FHIR.R3.Types.ActionSelectionBehaviorAll: exit(FHIR.R4.Types.ActionSelectionBehaviorAll);
    FHIR.R3.Types.ActionSelectionBehaviorAllOrNone: exit(FHIR.R4.Types.ActionSelectionBehaviorAllOrNone);
    FHIR.R3.Types.ActionSelectionBehaviorExactlyOne: exit(FHIR.R4.Types.ActionSelectionBehaviorExactlyOne);
    FHIR.R3.Types.ActionSelectionBehaviorAtMostOne: exit(FHIR.R4.Types.ActionSelectionBehaviorAtMostOne);
    FHIR.R3.Types.ActionSelectionBehaviorOneOrMore: exit(FHIR.R4.Types.ActionSelectionBehaviorOneOrMore);
    else exit(FHIR.R4.Types.ActionSelectionBehaviorNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionSelectionBehavior(src : FHIR.R4.Types.TFhirActionSelectionBehaviorEnum) : FHIR.R3.Types.TFhirActionSelectionBehaviorEnum;
begin
  case (src) of
    FHIR.R4.Types.ActionSelectionBehaviorAny: exit(FHIR.R3.Types.ActionSelectionBehaviorAny);
    FHIR.R4.Types.ActionSelectionBehaviorAll: exit(FHIR.R3.Types.ActionSelectionBehaviorAll);
    FHIR.R4.Types.ActionSelectionBehaviorAllOrNone: exit(FHIR.R3.Types.ActionSelectionBehaviorAllOrNone);
    FHIR.R4.Types.ActionSelectionBehaviorExactlyOne: exit(FHIR.R3.Types.ActionSelectionBehaviorExactlyOne);
    FHIR.R4.Types.ActionSelectionBehaviorAtMostOne: exit(FHIR.R3.Types.ActionSelectionBehaviorAtMostOne);
    FHIR.R4.Types.ActionSelectionBehaviorOneOrMore: exit(FHIR.R3.Types.ActionSelectionBehaviorOneOrMore);
    else exit(FHIR.R3.Types.ActionSelectionBehaviorNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionRequiredBehavior(src : FHIR.R3.Types.TFhirActionRequiredBehaviorEnum) : FHIR.R4.Types.TFhirActionRequiredBehaviorEnum;
begin
  case (src) of
    FHIR.R3.Types.ActionRequiredBehaviorMust: exit(FHIR.R4.Types.ActionRequiredBehaviorMust);
    FHIR.R3.Types.ActionRequiredBehaviorCould: exit(FHIR.R4.Types.ActionRequiredBehaviorCould);
    FHIR.R3.Types.ActionRequiredBehaviorMustUnlessDocumented: exit(FHIR.R4.Types.ActionRequiredBehaviorMustUnlessDocumented);
    else exit(FHIR.R4.Types.ActionRequiredBehaviorNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionRequiredBehavior(src : FHIR.R4.Types.TFhirActionRequiredBehaviorEnum) : FHIR.R3.Types.TFhirActionRequiredBehaviorEnum;
begin
  case (src) of
    FHIR.R4.Types.ActionRequiredBehaviorMust: exit(FHIR.R3.Types.ActionRequiredBehaviorMust);
    FHIR.R4.Types.ActionRequiredBehaviorCould: exit(FHIR.R3.Types.ActionRequiredBehaviorCould);
    FHIR.R4.Types.ActionRequiredBehaviorMustUnlessDocumented: exit(FHIR.R3.Types.ActionRequiredBehaviorMustUnlessDocumented);
    else exit(FHIR.R3.Types.ActionRequiredBehaviorNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionPrecheckBehavior(src : FHIR.R3.Types.TFhirActionPrecheckBehaviorEnum) : FHIR.R4.Types.TFhirActionPrecheckBehaviorEnum;
begin
  case (src) of
    FHIR.R3.Types.ActionPrecheckBehaviorYes: exit(FHIR.R4.Types.ActionPrecheckBehaviorYes);
    FHIR.R3.Types.ActionPrecheckBehaviorNo: exit(FHIR.R4.Types.ActionPrecheckBehaviorNo);
    else exit(FHIR.R4.Types.ActionPrecheckBehaviorNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionPrecheckBehavior(src : FHIR.R4.Types.TFhirActionPrecheckBehaviorEnum) : FHIR.R3.Types.TFhirActionPrecheckBehaviorEnum;
begin
  case (src) of
    FHIR.R4.Types.ActionPrecheckBehaviorYes: exit(FHIR.R3.Types.ActionPrecheckBehaviorYes);
    FHIR.R4.Types.ActionPrecheckBehaviorNo: exit(FHIR.R3.Types.ActionPrecheckBehaviorNo);
    else exit(FHIR.R3.Types.ActionPrecheckBehaviorNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionCardinalityBehavior(src : FHIR.R3.Types.TFhirActionCardinalityBehaviorEnum) : FHIR.R4.Types.TFhirActionCardinalityBehaviorEnum;
begin
  case (src) of
    FHIR.R3.Types.ActionCardinalityBehaviorSingle: exit(FHIR.R4.Types.ActionCardinalityBehaviorSingle);
    FHIR.R3.Types.ActionCardinalityBehaviorMultiple: exit(FHIR.R4.Types.ActionCardinalityBehaviorMultiple);
    else exit(FHIR.R4.Types.ActionCardinalityBehaviorNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionCardinalityBehavior(src : FHIR.R4.Types.TFhirActionCardinalityBehaviorEnum) : FHIR.R3.Types.TFhirActionCardinalityBehaviorEnum;
begin
  case (src) of
    FHIR.R4.Types.ActionCardinalityBehaviorSingle: exit(FHIR.R3.Types.ActionCardinalityBehaviorSingle);
    FHIR.R4.Types.ActionCardinalityBehaviorMultiple: exit(FHIR.R3.Types.ActionCardinalityBehaviorMultiple);
    else exit(FHIR.R3.Types.ActionCardinalityBehaviorNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionConditionKind(src : FHIR.R3.Types.TFhirActionConditionKindEnum) : FHIR.R4.Types.TFhirActionConditionKindEnum;
begin
  case (src) of
    FHIR.R3.Types.ActionConditionKindApplicability: exit(FHIR.R4.Types.ActionConditionKindApplicability);
    FHIR.R3.Types.ActionConditionKindStart: exit(FHIR.R4.Types.ActionConditionKindStart);
    FHIR.R3.Types.ActionConditionKindStop: exit(FHIR.R4.Types.ActionConditionKindStop);
    else exit(FHIR.R4.Types.ActionConditionKindNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionConditionKind(src : FHIR.R4.Types.TFhirActionConditionKindEnum) : FHIR.R3.Types.TFhirActionConditionKindEnum;
begin
  case (src) of
    FHIR.R4.Types.ActionConditionKindApplicability: exit(FHIR.R3.Types.ActionConditionKindApplicability);
    FHIR.R4.Types.ActionConditionKindStart: exit(FHIR.R3.Types.ActionConditionKindStart);
    FHIR.R4.Types.ActionConditionKindStop: exit(FHIR.R3.Types.ActionConditionKindStop);
    else exit(FHIR.R3.Types.ActionConditionKindNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionRelationshipType(src : FHIR.R3.Types.TFhirActionRelationshipTypeEnum) : FHIR.R4.Types.TFhirActionRelationshipTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.ActionRelationshipTypeBeforeStart: exit(FHIR.R4.Types.ActionRelationshipTypeBeforeStart);
    FHIR.R3.Types.ActionRelationshipTypeBefore: exit(FHIR.R4.Types.ActionRelationshipTypeBefore);
    FHIR.R3.Types.ActionRelationshipTypeBeforeEnd: exit(FHIR.R4.Types.ActionRelationshipTypeBeforeEnd);
    FHIR.R3.Types.ActionRelationshipTypeConcurrentWithStart: exit(FHIR.R4.Types.ActionRelationshipTypeConcurrentWithStart);
    FHIR.R3.Types.ActionRelationshipTypeConcurrent: exit(FHIR.R4.Types.ActionRelationshipTypeConcurrent);
    FHIR.R3.Types.ActionRelationshipTypeConcurrentWithEnd: exit(FHIR.R4.Types.ActionRelationshipTypeConcurrentWithEnd);
    FHIR.R3.Types.ActionRelationshipTypeAfterStart: exit(FHIR.R4.Types.ActionRelationshipTypeAfterStart);
    FHIR.R3.Types.ActionRelationshipTypeAfter: exit(FHIR.R4.Types.ActionRelationshipTypeAfter);
    FHIR.R3.Types.ActionRelationshipTypeAfterEnd: exit(FHIR.R4.Types.ActionRelationshipTypeAfterEnd);
    else exit(FHIR.R4.Types.ActionRelationshipTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionRelationshipType(src : FHIR.R4.Types.TFhirActionRelationshipTypeEnum) : FHIR.R3.Types.TFhirActionRelationshipTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.ActionRelationshipTypeBeforeStart: exit(FHIR.R3.Types.ActionRelationshipTypeBeforeStart);
    FHIR.R4.Types.ActionRelationshipTypeBefore: exit(FHIR.R3.Types.ActionRelationshipTypeBefore);
    FHIR.R4.Types.ActionRelationshipTypeBeforeEnd: exit(FHIR.R3.Types.ActionRelationshipTypeBeforeEnd);
    FHIR.R4.Types.ActionRelationshipTypeConcurrentWithStart: exit(FHIR.R3.Types.ActionRelationshipTypeConcurrentWithStart);
    FHIR.R4.Types.ActionRelationshipTypeConcurrent: exit(FHIR.R3.Types.ActionRelationshipTypeConcurrent);
    FHIR.R4.Types.ActionRelationshipTypeConcurrentWithEnd: exit(FHIR.R3.Types.ActionRelationshipTypeConcurrentWithEnd);
    FHIR.R4.Types.ActionRelationshipTypeAfterStart: exit(FHIR.R3.Types.ActionRelationshipTypeAfterStart);
    FHIR.R4.Types.ActionRelationshipTypeAfter: exit(FHIR.R3.Types.ActionRelationshipTypeAfter);
    FHIR.R4.Types.ActionRelationshipTypeAfterEnd: exit(FHIR.R3.Types.ActionRelationshipTypeAfterEnd);
    else exit(FHIR.R3.Types.ActionRelationshipTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionParticipantType(src : FHIR.R3.Types.TFhirActionParticipantTypeEnum) : FHIR.R4.Types.TFhirActionParticipantTypeEnum;
begin
  case (src) of
    FHIR.R3.Types.ActionParticipantTypePatient: exit(FHIR.R4.Types.ActionParticipantTypePatient);
    FHIR.R3.Types.ActionParticipantTypePractitioner: exit(FHIR.R4.Types.ActionParticipantTypePractitioner);
    FHIR.R3.Types.ActionParticipantTypeRelatedPerson: exit(FHIR.R4.Types.ActionParticipantTypeRelatedPerson);
    else exit(FHIR.R4.Types.ActionParticipantTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertActionParticipantType(src : FHIR.R4.Types.TFhirActionParticipantTypeEnum) : FHIR.R3.Types.TFhirActionParticipantTypeEnum;
begin
  case (src) of
    FHIR.R4.Types.ActionParticipantTypePatient: exit(FHIR.R3.Types.ActionParticipantTypePatient);
    FHIR.R4.Types.ActionParticipantTypePractitioner: exit(FHIR.R3.Types.ActionParticipantTypePractitioner);
    FHIR.R4.Types.ActionParticipantTypeRelatedPerson: exit(FHIR.R3.Types.ActionParticipantTypeRelatedPerson);
    else exit(FHIR.R3.Types.ActionParticipantTypeNull);
  end;
end;

class function TVersionConvertor_30_40.convertBase64Binary(src : FHIR.R3.Types.TFhirBase64Binary) : FHIR.R4.Types.TFhirBase64Binary;
var
  tgt : FHIR.R4.Types.TFhirBase64Binary;
begin
  tgt := FHIR.R4.Types.TFhirBase64Binary.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBase64Binary(src : FHIR.R4.Types.TFhirBase64Binary) : FHIR.R3.Types.TFhirBase64Binary;
var
  tgt : FHIR.R3.Types.TFhirBase64Binary;
begin
  tgt := FHIR.R3.Types.TFhirBase64Binary.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBoolean(src : FHIR.R3.Types.TFhirBoolean) : FHIR.R4.Types.TFhirBoolean;
var
  tgt : FHIR.R4.Types.TFhirBoolean;
begin
  tgt := FHIR.R4.Types.TFhirBoolean.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBoolean(src : FHIR.R4.Types.TFhirBoolean) : FHIR.R3.Types.TFhirBoolean;
var
  tgt : FHIR.R3.Types.TFhirBoolean;
begin
  tgt := FHIR.R3.Types.TFhirBoolean.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCode(src : FHIR.R3.Types.TFhirCode) : FHIR.R4.Types.TFhirCode;
var
  tgt : FHIR.R4.Types.TFhirCode;
begin
  tgt := FHIR.R4.Types.TFhirCode.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCode(src : FHIR.R4.Types.TFhirCode) : FHIR.R3.Types.TFhirCode;
var
  tgt : FHIR.R3.Types.TFhirCode;
begin
  tgt := FHIR.R3.Types.TFhirCode.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCode(src : FHIR.R3.Types.TFhirEnum) : FHIR.R4.Types.TFhirEnum;
var
  tgt : FHIR.R4.Types.TFhirEnum;
begin
  tgt := FHIR.R4.Types.TFhirEnum.Create(src.system, src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCode(src : FHIR.R4.Types.TFhirEnum) : FHIR.R3.Types.TFhirEnum;
var
  tgt : FHIR.R3.Types.TFhirEnum;
begin
  tgt := FHIR.R3.Types.TFhirEnum.Create(src.system, src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDate(src : FHIR.R3.Types.TFhirDate) : FHIR.R4.Types.TFhirDate;
var
  tgt : FHIR.R4.Types.TFhirDate;
begin
  tgt := FHIR.R4.Types.TFhirDate.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDate(src : FHIR.R4.Types.TFhirDate) : FHIR.R3.Types.TFhirDate;
var
  tgt : FHIR.R3.Types.TFhirDate;
begin
  tgt := FHIR.R3.Types.TFhirDate.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDateTime(src : FHIR.R3.Types.TFhirDateTime) : FHIR.R4.Types.TFhirDateTime;
var
  tgt : FHIR.R4.Types.TFhirDateTime;
begin
  tgt := FHIR.R4.Types.TFhirDateTime.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDateTime(src : FHIR.R4.Types.TFhirDateTime) : FHIR.R3.Types.TFhirDateTime;
var
  tgt : FHIR.R3.Types.TFhirDateTime;
begin
  tgt := FHIR.R3.Types.TFhirDateTime.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDecimal(src : FHIR.R3.Types.TFhirDecimal) : FHIR.R4.Types.TFhirDecimal;
var
  tgt : FHIR.R4.Types.TFhirDecimal;
begin
  tgt := FHIR.R4.Types.TFhirDecimal.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDecimal(src : FHIR.R4.Types.TFhirDecimal) : FHIR.R3.Types.TFhirDecimal;
var
  tgt : FHIR.R3.Types.TFhirDecimal;
begin
  tgt := FHIR.R3.Types.TFhirDecimal.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertId(src : FHIR.R3.Types.TFhirId) : FHIR.R4.Types.TFhirId;
var
  tgt : FHIR.R4.Types.TFhirId;
begin
  tgt := FHIR.R4.Types.TFhirId.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertId(src : FHIR.R4.Types.TFhirId) : FHIR.R3.Types.TFhirId;
var
  tgt : FHIR.R3.Types.TFhirId;
begin
  tgt := FHIR.R3.Types.TFhirId.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertInstant(src : FHIR.R3.Types.TFhirInstant) : FHIR.R4.Types.TFhirInstant;
var
  tgt : FHIR.R4.Types.TFhirInstant;
begin
  tgt := FHIR.R4.Types.TFhirInstant.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertInstant(src : FHIR.R4.Types.TFhirInstant) : FHIR.R3.Types.TFhirInstant;
var
  tgt : FHIR.R3.Types.TFhirInstant;
begin
  tgt := FHIR.R3.Types.TFhirInstant.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertInteger(src : FHIR.R3.Types.TFhirInteger) : FHIR.R4.Types.TFhirInteger;
var
  tgt : FHIR.R4.Types.TFhirInteger;
begin
  tgt := FHIR.R4.Types.TFhirInteger.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertInteger(src : FHIR.R4.Types.TFhirInteger) : FHIR.R3.Types.TFhirInteger;
var
  tgt : FHIR.R3.Types.TFhirInteger;
begin
  tgt := FHIR.R3.Types.TFhirInteger.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMarkdown(src : FHIR.R3.Types.TFhirMarkdown) : FHIR.R4.Types.TFhirMarkdown;
var
  tgt : FHIR.R4.Types.TFhirMarkdown;
begin
  tgt := FHIR.R4.Types.TFhirMarkdown.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMarkdown(src : FHIR.R4.Types.TFhirMarkdown) : FHIR.R3.Types.TFhirMarkdown;
var
  tgt : FHIR.R3.Types.TFhirMarkdown;
begin
  tgt := FHIR.R3.Types.TFhirMarkdown.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOid(src : FHIR.R3.Types.TFhirOid) : FHIR.R4.Types.TFhirOid;
var
  tgt : FHIR.R4.Types.TFhirOid;
begin
  tgt := FHIR.R4.Types.TFhirOid.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOid(src : FHIR.R4.Types.TFhirOid) : FHIR.R3.Types.TFhirOid;
var
  tgt : FHIR.R3.Types.TFhirOid;
begin
  tgt := FHIR.R3.Types.TFhirOid.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPositiveInt(src : FHIR.R3.Types.TFhirPositiveInt) : FHIR.R4.Types.TFhirPositiveInt;
var
  tgt : FHIR.R4.Types.TFhirPositiveInt;
begin
  tgt := FHIR.R4.Types.TFhirPositiveInt.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPositiveInt(src : FHIR.R4.Types.TFhirPositiveInt) : FHIR.R3.Types.TFhirPositiveInt;
var
  tgt : FHIR.R3.Types.TFhirPositiveInt;
begin
  tgt := FHIR.R3.Types.TFhirPositiveInt.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertString(src : FHIR.R3.Types.TFhirString) : FHIR.R4.Types.TFhirString;
var
  tgt : FHIR.R4.Types.TFhirString;
begin
  tgt := FHIR.R4.Types.TFhirString.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertString(src : FHIR.R4.Types.TFhirString) : FHIR.R3.Types.TFhirString;
var
  tgt : FHIR.R3.Types.TFhirString;
begin
  tgt := FHIR.R3.Types.TFhirString.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertTime(src : FHIR.R3.Types.TFhirTime) : FHIR.R4.Types.TFhirTime;
var
  tgt : FHIR.R4.Types.TFhirTime;
begin
  tgt := FHIR.R4.Types.TFhirTime.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertTime(src : FHIR.R4.Types.TFhirTime) : FHIR.R3.Types.TFhirTime;
var
  tgt : FHIR.R3.Types.TFhirTime;
begin
  tgt := FHIR.R3.Types.TFhirTime.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertUnsignedInt(src : FHIR.R3.Types.TFhirUnsignedInt) : FHIR.R4.Types.TFhirUnsignedInt;
var
  tgt : FHIR.R4.Types.TFhirUnsignedInt;
begin
  tgt := FHIR.R4.Types.TFhirUnsignedInt.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertUnsignedInt(src : FHIR.R4.Types.TFhirUnsignedInt) : FHIR.R3.Types.TFhirUnsignedInt;
var
  tgt : FHIR.R3.Types.TFhirUnsignedInt;
begin
  tgt := FHIR.R3.Types.TFhirUnsignedInt.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertUri(src : FHIR.R3.Types.TFhirUri) : FHIR.R4.Types.TFhirUri;
var
  tgt : FHIR.R4.Types.TFhirUri;
begin
  tgt := FHIR.R4.Types.TFhirUri.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertUriToUrl(src : FHIR.R3.Types.TFhirUri) : FHIR.R4.Types.TFhirUrl;
var
  tgt : FHIR.R4.Types.TFhirUrl;
begin
  tgt := FHIR.R4.Types.TFhirUrl.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertUri(src : FHIR.R4.Types.TFhirUri) : FHIR.R3.Types.TFhirUri;
var
  tgt : FHIR.R3.Types.TFhirUri;
begin
  tgt := FHIR.R3.Types.TFhirUri.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertUuid(src : FHIR.R3.Types.TFhirUuid) : FHIR.R4.Types.TFhirUuid;
var
  tgt : FHIR.R4.Types.TFhirUuid;
begin
  tgt := FHIR.R4.Types.TFhirUuid.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertUuid(src : FHIR.R4.Types.TFhirUuid) : FHIR.R3.Types.TFhirUuid;
var
  tgt : FHIR.R3.Types.TFhirUuid;
begin
  tgt := FHIR.R3.Types.TFhirUuid.Create(src.value);
  try
  copyElement(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertExtension(src : FHIR.R3.Types.TFhirExtension) : FHIR.R4.Types.TFhirExtension;
var
  tgt : FHIR.R4.Types.TFhirExtension;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirExtension.Create();
  try
  copyElement(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertExtension(src : FHIR.R4.Types.TFhirExtension) : FHIR.R3.Types.TFhirExtension;
var
  tgt : FHIR.R3.Types.TFhirExtension;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirExtension.Create();
  try
  copyElement(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertNarrative(src : FHIR.R3.Types.TFhirNarrative) : FHIR.R4.Types.TFhirNarrative;
var
  tgt : FHIR.R4.Types.TFhirNarrative;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirNarrative.Create();
  try
  copyElement(src, tgt);
  tgt.status := convertNarrativeStatus(src.status);
  tgt.div_ := src.div_.link;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertNarrative(src : FHIR.R4.Types.TFhirNarrative) : FHIR.R3.Types.TFhirNarrative;
var
  tgt : FHIR.R3.Types.TFhirNarrative;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirNarrative.Create();
  try
  copyElement(src, tgt);
  tgt.status := convertNarrativeStatus(src.status);

  tgt.div_ := src.div_.link;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAge(src : FHIR.R3.Types.TFhirAge) : FHIR.R4.Types.TFhirAge;
var
  tgt : FHIR.R4.Types.TFhirAge;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirAge.Create();
  try
  copyQuantity(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAge(src : FHIR.R4.Types.TFhirAge) : FHIR.R3.Types.TFhirAge;
var
  tgt : FHIR.R3.Types.TFhirAge;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirAge.Create();
  try
  copyQuantity(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAnnotation(src : FHIR.R3.Types.TFhirAnnotation) : FHIR.R4.Types.TFhirAnnotation;
var
  tgt : FHIR.R4.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirAnnotation.Create();
  try
  copyElement(src, tgt);
  if (src.author <> nil) then
    tgt.author := convertType(src.author);

  tgt.time := src.time.clone;
  tgt.text := src.text;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAnnotation(src : FHIR.R4.Types.TFhirAnnotation) : FHIR.R3.Types.TFhirAnnotation;
var
  tgt : FHIR.R3.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirAnnotation.Create();
  try
  copyElement(src, tgt);
  if (src.author <> nil) then
    tgt.author := convertType(src.author);

  tgt.time := src.time.clone;

  if (src.text <> '') then
    tgt.text := src.text;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAttachment(src : FHIR.R3.Types.TFhirAttachment) : FHIR.R4.Types.TFhirAttachment;
var
  tgt : FHIR.R4.Types.TFhirAttachment;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirAttachment.Create();
  try
  copyElement(src, tgt);
  if (src.contentType <> '') then
    tgt.contentType := src.contentType;

  if (src.language <> '') then
    tgt.language := src.language;

  if (src.data <> nil) then
    tgt.data := src.data;

  if (src.url <> '') then
    tgt.url := src.url;

  tgt.size := src.size;
  tgt.hash := src.hash;
  tgt.title := src.title;
  tgt.creation := src.creation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAttachment(src : FHIR.R4.Types.TFhirAttachment) : FHIR.R3.Types.TFhirAttachment;
var
  tgt : FHIR.R3.Types.TFhirAttachment;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirAttachment.Create();
  try
  copyElement(src, tgt);
  if (src.contentType <> '') then
    tgt.contentType := src.contentType;

  if (src.language <> '') then
    tgt.language := src.language;

  if (src.data <> nil) then
    tgt.data := src.data;

  tgt.url := src.url;
  tgt.size := src.size;
  tgt.hash := src.hash;
  tgt.title := src.title;
  tgt.creation := src.creation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCodeableConcept(src : FHIR.R3.Types.TFhirCodeableConcept) : FHIR.R4.Types.TFhirCodeableConcept;
var
  tgt : FHIR.R4.Types.TFhirCodeableConcept;
  t : FHIR.R3.Types.TFhirCoding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirCodeableConcept.Create();
  try
  copyElement(src, tgt);
  for t in src.codingList do
  begin
    tgt.codingList.add(convertCoding(t));
  end;
  tgt.text := src.text;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCodeableConcept(src : FHIR.R4.Types.TFhirCodeableConcept) : FHIR.R3.Types.TFhirCodeableConcept;
var
  tgt : FHIR.R3.Types.TFhirCodeableConcept;
  t : FHIR.R4.Types.TFhirCoding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirCodeableConcept.Create();
  try
  copyElement(src, tgt);
  for t in src.codingList do
  begin
    tgt.codingList.add(convertCoding(t));
  end;
  if (src.text <> '') then
    tgt.text := src.text;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCodeableConceptToCoding(src : FHIR.R4.Types.TFhirCodeableConcept) : FHIR.R3.Types.TFhirCoding;
begin
  if (src = nil) or (src.codingList.Count = 0) then
    exit(nil)
  else
    exit(convertCoding(src.codingList[0]));
end;

class function TVersionConvertor_30_40.convertCodeableConceptToCoding(src : FHIR.R3.Types.TFhirCodeableConcept) : FHIR.R4.Types.TFhirCoding;
begin
  if (src = nil) or (src.codingList.Count = 0) then
    exit(nil)
  else
    exit(convertCoding(src.codingList[0]));
end;

class function TVersionConvertor_30_40.convertCoding(src : FHIR.R3.Types.TFhirCoding) : FHIR.R4.Types.TFhirCoding;
var
  tgt : FHIR.R4.Types.TFhirCoding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirCoding.Create();
  try
  copyElement(src, tgt);
  if (src.system <> '') then
    tgt.system := src.system;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.code <> '') then
    tgt.code := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  tgt.userSelected := src.userSelected;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCoding(src : FHIR.R4.Types.TFhirCoding) : FHIR.R3.Types.TFhirCoding;
var
  tgt : FHIR.R3.Types.TFhirCoding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirCoding.Create();
  try
  copyElement(src, tgt);
  if (src.system <> '') then
    tgt.system := src.system;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.code <> '') then
    tgt.code := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  tgt.userSelected := src.userSelected;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCoding(src : FHIR.R3.Types.TFhirCodeableConcept) : FHIR.R4.Types.TFhirCoding;
begin
  if (src = nil) or (src.codingList.Count = 0)  then
    exit(nil)
  else
    result := convertCoding(src.codingList[0]);
end;

class function TVersionConvertor_30_40.convertCoding(src : FHIR.R4.Types.TFhirCodeableConcept) : FHIR.R3.Types.TFhirCoding;
begin
  if (src = nil) or (src.codingList.Count = 0)  then
    exit(nil)
  else
    result := convertCoding(src.codingList[0]);
end;

class function TVersionConvertor_30_40.convertCodingToCodeableConcept(src : FHIR.R3.Types.TFhirCoding) : FHIR.R4.Types.TFhirCodeableConcept;
var
  tgt : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirCodeableConcept.Create();
  try
    tgt.codingList.Add(convertCoding(src));
    exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCodingToCodeableConcept(src : FHIR.R4.Types.TFhirCoding) : FHIR.R3.Types.TFhirCodeableConcept;
var
  tgt : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirCodeableConcept.Create();
  try
    tgt.codingList.Add(convertCoding(src));
    exit(tgt.link);
  finally
    tgt.free;
  end;
end;


class function TVersionConvertor_30_40.convertCoding(src : FHIR.R3.Types.TFhirCode) : FHIR.R4.Types.TFhirCoding;
var
  tgt : FHIR.R4.Types.TFhirCoding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirCoding.Create();
  try
  copyElement(src, tgt);
  tgt.code := src.value;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCount(src : FHIR.R3.Types.TFhirCount) : FHIR.R4.Types.TFhirCount;
var
  tgt : FHIR.R4.Types.TFhirCount;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirCount.Create();
  try
  copyQuantity(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCount(src : FHIR.R4.Types.TFhirCount) : FHIR.R3.Types.TFhirCount;
var
  tgt : FHIR.R3.Types.TFhirCount;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirCount.Create();
  try
  copyQuantity(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDistance(src : FHIR.R3.Types.TFhirDistance) : FHIR.R4.Types.TFhirDistance;
var
  tgt : FHIR.R4.Types.TFhirDistance;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirDistance.Create();
  try
  copyQuantity(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDistance(src : FHIR.R4.Types.TFhirDistance) : FHIR.R3.Types.TFhirDistance;
var
  tgt : FHIR.R3.Types.TFhirDistance;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirDistance.Create();
  try
  copyQuantity(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDuration(src : FHIR.R3.Types.TFhirDuration) : FHIR.R4.Types.TFhirDuration;
var
  tgt : FHIR.R4.Types.TFhirDuration;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirDuration.Create();
  try
  copyQuantity(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDuration(src : FHIR.R4.Types.TFhirDuration) : FHIR.R3.Types.TFhirDuration;
var
  tgt : FHIR.R3.Types.TFhirDuration;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirDuration.Create();
  try
  copyQuantity(src, tgt);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertIdentifier(src : FHIR.R3.Types.TFhirIdentifier) : FHIR.R4.Types.TFhirIdentifier;
var
  tgt : FHIR.R4.Types.TFhirIdentifier;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirIdentifier.Create();
  try
  copyElement(src, tgt);
  tgt.use := convertIdentifierUse(src.use);

  if (src.type_ <> nil) then
    tgt.type_ := convertCodeableConcept(src.type_);

  if (src.system <> '') then
    tgt.system := src.system;

  if (src.value <> '') then
    tgt.value := src.value;

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  if (src.assigner <> nil) then
    tgt.assigner := convertReference(src.assigner);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertIdentifier(src : FHIR.R4.Types.TFhirIdentifier) : FHIR.R3.Types.TFhirIdentifier;
var
  tgt : FHIR.R3.Types.TFhirIdentifier;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirIdentifier.Create();
  try
  copyElement(src, tgt);
  tgt.use := convertIdentifierUse(src.use);

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.system <> '') then
    tgt.system := src.system;

  if (src.value <> '') then
    tgt.value := src.value;

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  if (src.assigner <> nil) then
    tgt.assigner := convertReference(src.assigner);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMoney(src : FHIR.R3.Types.TFhirMoney) : FHIR.R4.Types.TFhirMoney;
var
  tgt : FHIR.R4.Types.TFhirMoney;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirMoney.Create();
  try
  if (src.value <> '') then
    tgt.value := src.value;
  if (src.value <> '') then
    tgt.currency := src.code;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMoney(src : FHIR.R4.Types.TFhirMoney) : FHIR.R3.Types.TFhirMoney;
var
  tgt : FHIR.R3.Types.TFhirMoney;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirMoney.Create();
  try
  if (src.value <> '') then
    tgt.value := src.value;
  if (src.value <> '') then
    tgt.code := src.currency;
  tgt.system := 'urn:iso:std:iso:4217';
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPeriod(src : FHIR.R3.Types.TFhirPeriod) : FHIR.R4.Types.TFhirPeriod;
var
  tgt : FHIR.R4.Types.TFhirPeriod;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirPeriod.Create();
  try
  copyElement(src, tgt);
  tgt.start := src.start;
  tgt.end_ := src.end_;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPeriod(src : FHIR.R4.Types.TFhirPeriod) : FHIR.R3.Types.TFhirPeriod;
var
  tgt : FHIR.R3.Types.TFhirPeriod;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirPeriod.Create();
  try
  copyElement(src, tgt);
  tgt.start := src.start;
  tgt.end_ := src.end_;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class procedure TVersionConvertor_30_40.copyQuantity(src : FHIR.R3.Types.TFhirQuantity; tgt : FHIR.R4.Types.TFhirQuantity);
begin
  if (src = nil) or (tgt = nil) then
    exit();

  copyElement(src, tgt);
  tgt.value := src.value;

  tgt.comparator := convertQuantityComparator(src.comparator);
  tgt.unit_ := src.unit_;
  tgt.system := src.system;
  tgt.code := src.code;
end;

class procedure TVersionConvertor_30_40.copyQuantity(src : FHIR.R4.Types.TFhirQuantity; tgt : FHIR.R3.Types.TFhirQuantity);
begin
  if (src = nil) or (tgt = nil) then
    exit();

  copyElement(src, tgt);
  tgt.value := src.value;
  tgt.comparator := convertQuantityComparator(src.comparator);
  tgt.unit_ := src.unit_;
  tgt.system := src.system;
  tgt.code := src.code;

end;

class function TVersionConvertor_30_40.convertQuantity(src : FHIR.R3.Types.TFhirQuantity) : FHIR.R4.Types.TFhirQuantity;
var
  tgt : FHIR.R4.Types.TFhirQuantity;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirQuantity.Create();
  try
  copyElement(src, tgt);
  tgt.value := src.value;
  tgt.comparator := convertQuantityComparator(src.comparator);
  tgt.unit_ := src.unit_;
  tgt.system := src.system;
  tgt.code := src.code;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuantity(src : FHIR.R4.Types.TFhirQuantity) : FHIR.R3.Types.TFhirQuantity;
var
  tgt : FHIR.R3.Types.TFhirQuantity;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirQuantity.Create();
  try
  copyElement(src, tgt);
  tgt.value := src.value;
  tgt.comparator := convertQuantityComparator(src.comparator);
  tgt.unit_ := src.unit_;
  tgt.system := src.system;
  tgt.code := src.code;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertRange(src : FHIR.R3.Types.TFhirRange) : FHIR.R4.Types.TFhirRange;
var
  tgt : FHIR.R4.Types.TFhirRange;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirRange.Create();
  try
  copyElement(src, tgt);
  if (src.low <> nil) then
    tgt.low := convertSimpleQuantity(src.low);

  if (src.high <> nil) then
    tgt.high := convertSimpleQuantity(src.high);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertRange(src : FHIR.R4.Types.TFhirRange) : FHIR.R3.Types.TFhirRange;
var
  tgt : FHIR.R3.Types.TFhirRange;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirRange.Create();
  try
  copyElement(src, tgt);
  if (src.low <> nil) then
    tgt.low := convertSimpleQuantity(src.low);

  if (src.high <> nil) then
    tgt.high := convertSimpleQuantity(src.high);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertRatio(src : FHIR.R3.Types.TFhirRatio) : FHIR.R4.Types.TFhirRatio;
var
  tgt : FHIR.R4.Types.TFhirRatio;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirRatio.Create();
  try
  copyElement(src, tgt);
  if (src.numerator <> nil) then
    tgt.numerator := convertQuantity(src.numerator);

  if (src.denominator <> nil) then
    tgt.denominator := convertQuantity(src.denominator);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertRatio(src : FHIR.R4.Types.TFhirRatio) : FHIR.R3.Types.TFhirRatio;
var
  tgt : FHIR.R3.Types.TFhirRatio;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirRatio.Create();
  try
  copyElement(src, tgt);
  if (src.numerator <> nil) then
    tgt.numerator := convertQuantity(src.numerator);

  if (src.denominator <> nil) then
    tgt.denominator := convertQuantity(src.denominator);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertReference(src : FHIR.R3.Types.TFhirReference) : FHIR.R4.Types.TFhirReference;
var
  tgt : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirReference.Create();
  try
  copyElement(src, tgt);
  if (src.reference <> '') then
    tgt.reference := src.reference;

  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  if (src.display <> '') then
    tgt.display := src.display;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertReference(src : FHIR.R4.Types.TFhirReference) : FHIR.R3.Types.TFhirReference;
var
  tgt : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirReference.Create();
  try
  copyElement(src, tgt);
  if (src.reference <> '') then
    tgt.reference := src.reference;

  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  if (src.display <> '') then
    tgt.display := src.display;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSampledData(src : FHIR.R3.Types.TFhirSampledData) : FHIR.R4.Types.TFhirSampledData;
var
  tgt : FHIR.R4.Types.TFhirSampledData;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirSampledData.Create();
  try
  copyElement(src, tgt);
  if (src.origin <> nil) then
    tgt.origin := convertSimpleQuantity(src.origin);

  tgt.period := src.period;
  tgt.factor := src.factor;
  tgt.lowerLimit := src.lowerLimit;
  tgt.upperLimit := src.upperLimit;
  tgt.dimensions := src.dimensions;
  tgt.data := src.data;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSampledData(src : FHIR.R4.Types.TFhirSampledData) : FHIR.R3.Types.TFhirSampledData;
var
  tgt : FHIR.R3.Types.TFhirSampledData;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirSampledData.Create();
  try
  copyElement(src, tgt);
  if (src.origin <> nil) then
    tgt.origin := convertSimpleQuantity(src.origin);

  tgt.period := src.period;
  tgt.factor := src.factor;
  tgt.lowerLimit := src.lowerLimit;
  tgt.upperLimit := src.upperLimit;
  tgt.dimensions := src.dimensions;
  tgt.data := src.data;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSignature(src : FHIR.R3.Types.TFhirSignature) : FHIR.R4.Types.TFhirSignature;
var
  tgt : FHIR.R4.Types.TFhirSignature;
  t : FHIR.R3.Types.TFhirCoding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirSignature.Create();
  try
  copyElement(src, tgt);
  for t in src.type_List do
  begin
    tgt.type_List.add(convertCoding(t));
  end;
  tgt.when := src.when;

  if (src.who <> nil) then
    if src.who is FHIR.R3.Types.TFhirUri then
      tgt.who := TFhirReference.Create((src.who as FHIR.R3.Types.TFhirUri).value)
    else
      tgt.who := convertReference(src.who as FHIR.R3.Types.TFhirReference);

  if (src.onBehalfOf <> nil) then
    if src.who is FHIR.R3.Types.TFhirUri then
      tgt.onBehalfOf := TFhirReference.Create((src.onBehalfOf as FHIR.R3.Types.TFhirUri).value)
    else
      tgt.onBehalfOf := convertReference(src.onBehalfOf as FHIR.R3.Types.TFhirReference);

  if (src.contentType <> '') then
    tgt.sigFormat := src.contentType;

  tgt.data := src.blob;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSignature(src : FHIR.R4.Types.TFhirSignature) : FHIR.R3.Types.TFhirSignature;
var
  tgt : FHIR.R3.Types.TFhirSignature;
  t : FHIR.R4.Types.TFhirCoding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirSignature.Create();
  try
  copyElement(src, tgt);
  for t in src.type_List do
  begin
    tgt.type_List.add(convertCoding(t));
  end;
  tgt.when := src.when;

  if (src.who <> nil) then
    tgt.who := convertType(src.who);

  if (src.onBehalfOf <> nil) then
    tgt.onBehalfOf := convertType(src.onBehalfOf);

  if (src.sigFormat <> '') then
    tgt.contentType := src.sigFormat;

  tgt.blob := src.data;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAddress(src : FHIR.R3.Types.TFhirAddress) : FHIR.R4.Types.TFhirAddress;
var
  tgt : FHIR.R4.Types.TFhirAddress;
  t : FHIR.R3.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirAddress.Create();
  try
  copyElement(src, tgt);
  tgt.use := convertAddressUse(src.use);
  tgt.type_ := convertAddressType(src.type_);

  if (src.text <> '') then
    tgt.text := src.text;

  for t in src.lineList do
  begin
    tgt.lineList.add(t.value);
  end;
  if (src.city <> '') then
    tgt.city := src.city;

  if (src.district <> '') then
    tgt.district := src.district;

  if (src.state <> '') then
    tgt.state := src.state;

  if (src.postalCode <> '') then
    tgt.postalCode := src.postalCode;

  if (src.country <> '') then
    tgt.country := src.country;

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAddress(src : FHIR.R4.Types.TFhirAddress) : FHIR.R3.Types.TFhirAddress;
var
  tgt : FHIR.R3.Types.TFhirAddress;
  t : FHIR.R4.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirAddress.Create();
  try
  copyElement(src, tgt);
  tgt.use := convertAddressUse(src.use);
  tgt.type_ := convertAddressType(src.type_);

  if (src.text <> '') then
    tgt.text := src.text;

  for t in src.lineList do
  begin
    tgt.lineList.add(t.value);
  end;
  if (src.city <> '') then
    tgt.city := src.city;

  if (src.district <> '') then
    tgt.district := src.district;

  if (src.state <> '') then
    tgt.state := src.state;

  if (src.postalCode <> '') then
    tgt.postalCode := src.postalCode;

  if (src.country <> '') then
    tgt.country := src.country;

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertContactDetail(src : FHIR.R3.Types.TFhirContactDetail) : FHIR.R4.Types.TFhirContactDetail;
var
  tgt : FHIR.R4.Types.TFhirContactDetail;
  t : FHIR.R3.Types.TFhirContactPoint;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirContactDetail.Create();
  try
  copyElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  for t in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertContactDetail(src : FHIR.R4.Types.TFhirContactDetail) : FHIR.R3.Types.TFhirContactDetail;
var
  tgt : FHIR.R3.Types.TFhirContactDetail;
  t : FHIR.R4.Types.TFhirContactPoint;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirContactDetail.Create();
  try
  copyElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  for t in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertContactPoint(src : FHIR.R3.Types.TFhirContactPoint) : FHIR.R4.Types.TFhirContactPoint;
var
  tgt : FHIR.R4.Types.TFhirContactPoint;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirContactPoint.Create();
  try
  copyElement(src, tgt);
  tgt.system := convertContactPointSystem(src.system);

  if (src.value <> '') then
    tgt.value := src.value;

   tgt.use := convertContactPointUse(src.use);

  tgt.rank := src.rank;

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertContactPoint(src : FHIR.R4.Types.TFhirContactPoint) : FHIR.R3.Types.TFhirContactPoint;
var
  tgt : FHIR.R3.Types.TFhirContactPoint;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirContactPoint.Create();
  try
  copyElement(src, tgt);
  tgt.system := convertContactPointSystem(src.system);

  if (src.value <> '') then
    tgt.value := src.value;

  tgt.use := convertContactPointUse(src.use);

  tgt.rank := src.rank;

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertContributor(src : FHIR.R3.Types.TFhirContributor) : FHIR.R4.Types.TFhirContributor;
var
  tgt : FHIR.R4.Types.TFhirContributor;
  t : FHIR.R3.Types.TFhirContactDetail;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirContributor.Create();
  try
  copyElement(src, tgt);
  tgt.type_ := convertContributorType(src.type_);

  if (src.name <> '') then
    tgt.name := src.name;

  for t in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertContributor(src : FHIR.R4.Types.TFhirContributor) : FHIR.R3.Types.TFhirContributor;
var
  tgt : FHIR.R3.Types.TFhirContributor;
  t : FHIR.R4.Types.TFhirContactDetail;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirContributor.Create();
  try
  copyElement(src, tgt);
    tgt.type_ := convertContributorType(src.type_);

  if (src.name <> '') then
    tgt.name := src.name;

  for t in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDosage(src : FHIR.R3.Types.TFhirDosage) : FHIR.R4.Types.TFhirDosage;
var
  tgt : FHIR.R4.Types.TFhirDosage;
  t : FHIR.R3.Types.TFhirCodeableConcept;
  dr : FHIR.R4.Types.TFhirDosageDoseAndRate;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirDosage.Create();
  try
  copyElement(src, tgt);
  tgt.sequence := src.sequence;

  if (src.text <> '') then
    tgt.text := src.text;

  for t in src.additionalInstructionList do
  begin
    tgt.additionalInstructionList.add(convertCodeableConcept(t));
  end;
  if (src.patientInstruction <> '') then
    tgt.patientInstruction := src.patientInstruction;

  if (src.timing <> nil) then
    tgt.timing := convertTiming(src.timing);

  if (src.asNeeded <> nil) then
    tgt.asNeeded := convertType(src.asNeeded);

  if (src.site <> nil) then
    tgt.site := convertCodeableConcept(src.site);

  if (src.route <> nil) then
    tgt.route := convertCodeableConcept(src.route);

  if (src.method <> nil) then
    tgt.method := convertCodeableConcept(src.method);

  if (src.Dose <> nil) or (src.Rate <> nil) then
  begin
      dr := tgt.DoseAndRateList.Append;
      if (src.dose <> nil) then
        dr.dose := convertType(src.dose);

      if (src.rate <> nil) then
        dr.rate := convertType(src.rate);
  end;


  if (src.maxDosePerPeriod <> nil) then
    tgt.maxDosePerPeriod := convertRatio(src.maxDosePerPeriod);

  if (src.maxDosePerAdministration <> nil) then
    tgt.maxDosePerAdministration := convertSimpleQuantity(src.maxDosePerAdministration);

  if (src.maxDosePerLifetime <> nil) then
    tgt.maxDosePerLifetime := convertSimpleQuantity(src.maxDosePerLifetime);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDosage(src : FHIR.R4.Types.TFhirDosage) : FHIR.R3.Types.TFhirDosage;
var
  tgt : FHIR.R3.Types.TFhirDosage;
  t : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirDosage.Create();
  try
  copyElement(src, tgt);
  tgt.sequence := src.sequence;

  if (src.text <> '') then
    tgt.text := src.text;

  for t in src.additionalInstructionList do
  begin
    tgt.additionalInstructionList.add(convertCodeableConcept(t));
  end;
  if (src.patientInstruction <> '') then
    tgt.patientInstruction := src.patientInstruction;

  if (src.timing <> nil) then
    tgt.timing := convertTiming(src.timing);

  if (src.asNeeded <> nil) then
    tgt.asNeeded := convertType(src.asNeeded);

  if (src.site <> nil) then
    tgt.site := convertCodeableConcept(src.site);

  if (src.route <> nil) then
    tgt.route := convertCodeableConcept(src.route);

  if (src.method <> nil) then
    tgt.method := convertCodeableConcept(src.method);

  if (src.DoseAndRateList <> nil) and (src.DoseAndRateList[0].Dose <> nil) then
    tgt.dose := convertType(src.DoseAndRateList[0].dose);

  if (src.maxDosePerPeriod <> nil) then
    tgt.maxDosePerPeriod := convertRatio(src.maxDosePerPeriod);

  if (src.maxDosePerAdministration <> nil) then
    tgt.maxDosePerAdministration := convertSimpleQuantity(src.maxDosePerAdministration);

  if (src.maxDosePerLifetime <> nil) then
    tgt.maxDosePerLifetime := convertSimpleQuantity(src.maxDosePerLifetime);

  if (src.DoseAndRateList <> nil) and (src.DoseAndRateList[0].Rate <> nil) then
    tgt.rate := convertType(src.DoseAndRateList[0].rate);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinition(src : FHIR.R3.Types.TFhirElementDefinition) : FHIR.R4.Types.TFhirElementDefinition;
var
  tgt : FHIR.R4.Types.TFhirElementDefinition;
  t : FHIR.R3.Types.TFhirPropertyRepresentationEnum;
  a : FHIR.R4.Types.TFhirPropertyRepresentationEnumList;
  t1 : FHIR.R3.Types.TFhirCoding;
  t2 : FHIR.R3.Types.TFhirString;
  t3 : FHIR.R3.Types.TFhirElementDefinitionType;
  t4 : FHIR.R3.Types.TFhirElementDefinitionExample;
  t6 : FHIR.R3.Types.TFhirId;
  t7 : FHIR.R3.Types.TFhirElementDefinitionConstraint;
  reason : String;
  t8 : FHIR.R3.Types.TFhirElementDefinitionMapping;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirElementDefinition.Create();
  try
  copyElement(src, tgt);
  if (src.path <> '') then
    tgt.path := src.path;

  a := [];
  for t := low(FHIR.R3.Types.TFhirPropertyRepresentationEnum) to high(FHIR.R3.Types.TFhirPropertyRepresentationEnum) do
    if t in src.representation then
      a := a + [convertPropertyRepresentation(t)];
  tgt.representation := a;

  if (src.sliceName <> '') then
    tgt.sliceName := src.sliceName;

  if (src.label_ <> '') then
    tgt.label_ := src.label_;

  for t1 in src.codeList do
  begin
    tgt.codeList.add(convertCoding(t1));
  end;
  if (src.slicing <> nil) then
    tgt.slicing := convertElementDefinitionSlicingComponent(src.slicing);

  if (src.short <> '') then
    tgt.short := src.short;

  if (src.definition <> '') then
    tgt.definition := src.definition;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  if (src.requirements <> '') then
    tgt.requirements := src.requirements;

  for t2 in src.aliasList do
  begin
    tgt.aliasList.add(t2.value);
  end;
  tgt.min := src.min;
  tgt.max := src.max;

  if (src.base <> nil) then
    tgt.base := convertElementDefinitionBaseComponent(src.base);

  if (src.contentReference <> '') then
    tgt.contentReference := src.contentReference;

  for t3 in src.type_List do
  begin
    convertTypeRefComponent(t3, tgt.type_List);
  end;
  if (src.defaultValue <> nil) then
    tgt.defaultValue := convertType(src.defaultValue);

  if (src.meaningWhenMissing <> '') then
    tgt.meaningWhenMissing := src.meaningWhenMissing;

  if (src.orderMeaning <> '') then
    tgt.orderMeaning := src.orderMeaning;

  if (src.fixed <> nil) then
    tgt.fixed := convertType(src.fixed);

  if (src.pattern <> nil) then
    tgt.pattern := convertType(src.pattern);

  for t4 in src.exampleList do
  begin
    tgt.exampleList.add(convertElementDefinitionExampleComponent(t4));
  end;
  if (src.minValue <> nil) then
    tgt.minValue := convertType(src.minValue);

  if (src.maxValue <> nil) then
    tgt.maxValue := convertType(src.maxValue);

  tgt.maxLength := src.maxLength;

  for t6 in src.conditionList do
  begin
    tgt.conditionList.add(t6.link);
  end;
  for t7 in src.constraintList do
  begin
    tgt.constraintList.add(convertElementDefinitionConstraintComponent(t7));
  end;
  tgt.mustSupport := src.mustSupport;
  tgt.isModifier := src.isModifier;

  if (tgt.isModifier) then
  begin
    reason := src.getExtensionString('http://hl7.org/fhir/tooling/StructureDefinition/r4ModifierReason');
    if (reason <> '') then
      reason := 'No Modifier Reason provideed in previous versions of FHIR';
    tgt.IsModifierReason := reason;
  end;

  tgt.isSummary := src.isSummary;

  if (src.binding <> nil) then
    tgt.binding := convertElementDefinitionBindingComponent(src.binding);

  for t8 in src.mappingList do
  begin
    tgt.mappingList.add(convertElementDefinitionMappingComponent(t8));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinition(src : FHIR.R4.Types.TFhirElementDefinition) : FHIR.R3.Types.TFhirElementDefinition;
var
  tgt : FHIR.R3.Types.TFhirElementDefinition;
  t : FHIR.R4.Types.TFhirPropertyRepresentationEnum;
  a : FHIR.R3.Types.TFhirPropertyRepresentationEnumList;
  t1 : FHIR.R4.Types.TFhirCoding;
  t2 : FHIR.R4.Types.TFhirString;
  t3 : FHIR.R4.Types.TFhirElementDefinitionType;
  t4 : FHIR.R4.Types.TFhirElementDefinitionExample;
  t5 : FHIR.R4.Types.TFhirId;
  t6 : FHIR.R4.Types.TFhirElementDefinitionConstraint;
  t7 : FHIR.R4.Types.TFhirElementDefinitionMapping;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirElementDefinition.Create();
  try
  copyElement(src, tgt);
  if (src.path <> '') then
    tgt.path := src.path;

  a := [];
  for t := low(FHIR.R4.Types.TFhirPropertyRepresentationEnum) to high(FHIR.R4.Types.TFhirPropertyRepresentationEnum) do
    if t in src.representation then
      a := a + [convertPropertyRepresentation(t)];
  tgt.representation := a;

  if (src.sliceName <> '') then
    tgt.sliceName := src.sliceName;

  if (src.label_ <> '') then
    tgt.label_ := src.label_;

  for t1 in src.codeList do
  begin
    tgt.codeList.add(convertCoding(t1));
  end;
  if (src.slicing <> nil) then
    tgt.slicing := convertElementDefinitionSlicingComponent(src.slicing);

  if (src.short <> '') then
    tgt.short := src.short;

  if (src.definition <> '') then
    tgt.definition := src.definition;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  if (src.requirements <> '') then
    tgt.requirements := src.requirements;

  for t2 in src.aliasList do
  begin
    tgt.aliasList.add(t2.value);
  end;
  tgt.min := src.min;
  tgt.max := src.max;

  if (src.base <> nil) then
    tgt.base := convertElementDefinitionBaseComponent(src.base);

  if (src.contentReference <> '') then
    tgt.contentReference := src.contentReference;

  for t3 in src.type_List do
  begin
    convertTypeRefComponent(t3, tgt.Type_List);
  end;
  if (src.defaultValue <> nil) then
    tgt.defaultValue := convertType(src.defaultValue);

  if (src.meaningWhenMissing <> '') then
    tgt.meaningWhenMissing := src.meaningWhenMissing;

  if (src.orderMeaning <> '') then
    tgt.orderMeaning := src.orderMeaning;

  if (src.fixed <> nil) then
    tgt.fixed := convertType(src.fixed);

  if (src.pattern <> nil) then
    tgt.pattern := convertType(src.pattern);

  for t4 in src.exampleList do
  begin
    tgt.exampleList.add(convertElementDefinitionExampleComponent(t4));
  end;
  if (src.minValue <> nil) then
    tgt.minValue := convertType(src.minValue);

  tgt.maxValue := convertType(src.maxValue);

  tgt.maxLength := src.maxLength;

  for t5 in src.conditionList do
  begin
    tgt.conditionList.add(t5.link);
  end;
  for t6 in src.constraintList do
  begin
    tgt.constraintList.add(convertElementDefinitionConstraintComponent(t6));
  end;
  tgt.mustSupport := src.mustSupport;
  tgt.isModifier := src.isModifier;

  if (src.IsModifierReason <> '') and (src.IsModifierReason <> 'No Modifier Reason provideed in previous versions of FHIR') then
    tgt.setExtensionString('http://hl7.org/fhir/tooling/StructureDefinition/r4ModifierReason', src.IsModifierReason);

  tgt.isSummary := src.isSummary;

  if (src.binding <> nil) then
    tgt.binding := convertElementDefinitionBindingComponent(src.binding);

  for t7 in src.mappingList do
  begin
    tgt.mappingList.add(convertElementDefinitionMappingComponent(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinitionSlicingComponent(src : FHIR.R3.Types.TFhirElementDefinitionSlicing) : FHIR.R4.Types.TFhirElementDefinitionSlicing;
var
  tgt : FHIR.R4.Types.TFhirElementDefinitionSlicing;
  t : FHIR.R3.Types.TFhirElementDefinitionSlicingDiscriminator;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirElementDefinitionSlicing.Create();
  try
  copyElement(src, tgt);
  for t in src.discriminatorList do
  begin
    tgt.discriminatorList.add(convertElementDefinitionSlicingDiscriminatorComponent(t));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  tgt.ordered := src.ordered;
  tgt.rules := convertSlicingRules(src.rules);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinitionSlicingComponent(src : FHIR.R4.Types.TFhirElementDefinitionSlicing) : FHIR.R3.Types.TFhirElementDefinitionSlicing;
var
  tgt : FHIR.R3.Types.TFhirElementDefinitionSlicing;
  t : FHIR.R4.Types.TFhirElementDefinitionSlicingDiscriminator;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirElementDefinitionSlicing.Create();
  try
  copyElement(src, tgt);
  for t in src.discriminatorList do
  begin
    tgt.discriminatorList.add(convertElementDefinitionSlicingDiscriminatorComponent(t));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  tgt.ordered := src.ordered;
  tgt.rules := convertSlicingRules(src.rules);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinitionSlicingDiscriminatorComponent(src : FHIR.R3.Types.TFhirElementDefinitionSlicingDiscriminator) : FHIR.R4.Types.TFhirElementDefinitionSlicingDiscriminator;
var
  tgt : FHIR.R4.Types.TFhirElementDefinitionSlicingDiscriminator;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirElementDefinitionSlicingDiscriminator.Create();
  try
  copyElement(src, tgt);
  tgt.type_ := convertDiscriminatorType(src.type_);
  tgt.path := src.path;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinitionSlicingDiscriminatorComponent(src : FHIR.R4.Types.TFhirElementDefinitionSlicingDiscriminator) : FHIR.R3.Types.TFhirElementDefinitionSlicingDiscriminator;
var
  tgt : FHIR.R3.Types.TFhirElementDefinitionSlicingDiscriminator;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirElementDefinitionSlicingDiscriminator.Create();
  try
  copyElement(src, tgt);
  tgt.type_ := convertDiscriminatorType(src.type_);
  tgt.path := src.path;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinitionBaseComponent(src : FHIR.R3.Types.TFhirElementDefinitionBase) : FHIR.R4.Types.TFhirElementDefinitionBase;
var
  tgt : FHIR.R4.Types.TFhirElementDefinitionBase;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirElementDefinitionBase.Create();
  try
  copyElement(src, tgt);
  if (src.path <> '') then
    tgt.path := src.path;

  tgt.min := src.min;

  if (src.max <> '') then
    tgt.max := src.max;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinitionBaseComponent(src : FHIR.R4.Types.TFhirElementDefinitionBase) : FHIR.R3.Types.TFhirElementDefinitionBase;
var
  tgt : FHIR.R3.Types.TFhirElementDefinitionBase;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirElementDefinitionBase.Create();
  try
  copyElement(src, tgt);
  if (src.path <> '') then
    tgt.path := src.path;

  tgt.min := src.min;

  if (src.max <> '') then
    tgt.max := src.max;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class procedure TVersionConvertor_30_40.convertTypeRefComponent(src : FHIR.R3.Types.TFhirElementDefinitionType; list : FHIR.R4.Types.TFhirElementDefinitionTypeList);
var
  tgt : FHIR.R4.Types.TFhirElementDefinitionType;
  t1 : FHIR.R4.Types.TFhirElementDefinitionType;
  t : FHIR.R3.Types.TFhirResourceAggregationModeEnum;
  a : FHIR.R4.Types.TFhirResourceAggregationModeEnumList;
begin
  if (src = nil) then
    exit();

  tgt := nil;
  for t1 in list do
  begin
    if (t1.code = src.code) then
      tgt := t1;
  end;
  if (tgt = nil) then
  begin
    tgt := TFhirElementDefinitionType.create();
    list.add(tgt);
    copyElement(src, tgt);
    tgt.code := src.code;
  end;

  if (src.profile <> '') then
    tgt.profileList.add(FHIR.R4.Types.TFHIRUri.create(src.profile));

  if (src.targetProfile <> '') then
    tgt.targetProfileList.add(FHIR.R4.Types.TFHIRUri.create(src.targetProfile));

  a := tgt.aggregation;
  for t := low(FHIR.R3.Types.TFhirResourceAggregationModeEnum) to high(FHIR.R3.Types.TFhirResourceAggregationModeEnum) do
    if t in src.aggregation then
      a := a + [convertAggregationMode(t)];
  tgt.aggregation := a;

  tgt.versioning := convertReferenceVersionRules(src.versioning);
end;

class procedure TVersionConvertor_30_40.convertTypeRefComponent(src : FHIR.R4.Types.TFhirElementDefinitionType; list : FHIR.R3.Types.TFhirElementDefinitionTypeList);
var
  tgt : FHIR.R3.Types.TFhirElementDefinitionType;
  u : FHIR.R4.Types.TFhirUri;
begin
  if (src = nil) then
    exit();
  tgt := FHIR.R3.Types.TFhirElementDefinitionType.Create();
  copyElement(src, tgt);
  tgt.code := src.code;
  list.add(tgt);
  if (src.targetProfileList.Count > 0) then
  begin
    if (src.profileList.count > 0) then
      tgt.profile := src.ProfileList[0].value;

    for u in src.targetProfileList do
    begin
      if (tgt.targetProfile <> '') then
      begin
        tgt := FHIR.R3.Types.TFhirElementDefinitionType.create();
        list.add(tgt);
        copyElement(src, tgt);
        tgt.code := src.code;
        if (src.profileList.count > 0) then
          tgt.profile := src.ProfileList[0].value;
        tgt.targetProfile := u.value;
      end;
    end;
  end
  else
  begin
    for u in src.profileList do
    begin
      if (tgt.profile <> '') then
      begin
        tgt := FHIR.R3.Types.TFhirElementDefinitionType.create();
        list.add(tgt);
        copyElement(src, tgt);
        tgt.code := src.code;
      end;
      tgt.profile := u.value;
    end;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinitionExampleComponent(src : FHIR.R3.Types.TFhirElementDefinitionExample) : FHIR.R4.Types.TFhirElementDefinitionExample;
var
  tgt : FHIR.R4.Types.TFhirElementDefinitionExample;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirElementDefinitionExample.Create();
  try
  copyElement(src, tgt);
  if (src.label_ <> '') then
    tgt.label_ := src.label_;

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinitionExampleComponent(src : FHIR.R4.Types.TFhirElementDefinitionExample) : FHIR.R3.Types.TFhirElementDefinitionExample;
var
  tgt : FHIR.R3.Types.TFhirElementDefinitionExample;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirElementDefinitionExample.Create();
  try
  copyElement(src, tgt);
  if (src.label_ <> '') then
    tgt.label_ := src.label_;

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinitionConstraintComponent(src : FHIR.R3.Types.TFhirElementDefinitionConstraint) : FHIR.R4.Types.TFhirElementDefinitionConstraint;
var
  tgt : FHIR.R4.Types.TFhirElementDefinitionConstraint;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirElementDefinitionConstraint.Create();
  try
  copyElement(src, tgt);
  if (src.key <> '') then
    tgt.key := src.key;

  if (src.requirements <> '') then
    tgt.requirements := src.requirements;

  tgt.severity := convertConstraintSeverity(src.severity);

  if (src.human <> '') then
    tgt.human := src.human;

  if (src.expression <> '') then
    tgt.expression := src.expression;

  if (src.xpath <> '') then
    tgt.xpath := src.xpath;

  if (src.source <> '') then
    tgt.source := src.source;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinitionConstraintComponent(src : FHIR.R4.Types.TFhirElementDefinitionConstraint) : FHIR.R3.Types.TFhirElementDefinitionConstraint;
var
  tgt : FHIR.R3.Types.TFhirElementDefinitionConstraint;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirElementDefinitionConstraint.Create();
  try
  copyElement(src, tgt);
  if (src.key <> '') then
    tgt.key := src.key;

  if (src.requirements <> '') then
    tgt.requirements := src.requirements;

   tgt.severity := convertConstraintSeverity(src.severity);

  if (src.human <> '') then
    tgt.human := src.human;

  if (src.expression <> '') then
    tgt.expression := src.expression;

  if (src.xpath <> '') then
    tgt.xpath := src.xpath;

  if (src.source <> '') then
    tgt.source := src.source;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinitionBindingComponent(src : FHIR.R3.Types.TFhirElementDefinitionBinding) : FHIR.R4.Types.TFhirElementDefinitionBinding;
var
  tgt : FHIR.R4.Types.TFhirElementDefinitionBinding;
  vs : FHIR.R4.Types.TFhirType;
  vr : String;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirElementDefinitionBinding.Create();
  try
  copyElement(src, tgt);
  tgt.strength := convertBindingStrength(src.strength);

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.valueSet <> nil) then
  begin
    vs := convertType(src.ValueSet);
    try
      if (vs is FHIR.R4.Types.TFhirReference) then
        tgt.ValueSet := FHIR.R4.Types.TFhirReference(vs).Reference
      else
        tgt.ValueSet := vs.primitiveValue;
      tgt.ValueSet := refToVS(tgt.valueSet);
    finally
      vs.Free;
    end;
  end;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;


class function TVersionConvertor_30_40.convertElementDefinitionBindingComponent(src : FHIR.R4.Types.TFhirElementDefinitionBinding) : FHIR.R3.Types.TFhirElementDefinitionBinding;
var
  tgt : FHIR.R3.Types.TFhirElementDefinitionBinding;
  s : String;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirElementDefinitionBinding.Create();
  try
  copyElement(src, tgt);
  tgt.strength := convertBindingStrength(src.strength);

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.valueSet <> '') then
  begin
    s := vsToRef(src.valueSet);
    if s <> '' then
      tgt.ValueSet := FHIR.R3.Types.TFHIRUri.create(s)
    else
      tgt.ValueSet := FHIR.R3.Types.TFHIRReference.create(src.ValueSet);
  end;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinitionMappingComponent(src : FHIR.R3.Types.TFhirElementDefinitionMapping) : FHIR.R4.Types.TFhirElementDefinitionMapping;
var
  tgt : FHIR.R4.Types.TFhirElementDefinitionMapping;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirElementDefinitionMapping.Create();
  try
  copyElement(src, tgt);
  if (src.identity <> '') then
    tgt.identity := src.identity;

  if (src.language <> '') then
    tgt.language := src.language;

  if (src.map <> '') then
    tgt.map := src.map;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertElementDefinitionMappingComponent(src : FHIR.R4.Types.TFhirElementDefinitionMapping) : FHIR.R3.Types.TFhirElementDefinitionMapping;
var
  tgt : FHIR.R3.Types.TFhirElementDefinitionMapping;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirElementDefinitionMapping.Create();
  try
  copyElement(src, tgt);
  if (src.identity <> '') then
    tgt.identity := src.identity;

  if (src.language <> '') then
    tgt.language := src.language;

  if (src.map <> '') then
    tgt.map := src.map;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertHumanName(src : FHIR.R3.Types.TFhirHumanName) : FHIR.R4.Types.TFhirHumanName;
var
  tgt : FHIR.R4.Types.TFhirHumanName;
  t1 : FHIR.R3.Types.TFhirString;
  t2 : FHIR.R3.Types.TFhirString;
  t3 : FHIR.R3.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirHumanName.Create();
  try
  copyElement(src, tgt);
  tgt.use := convertNameUse(src.use);

  if (src.text <> '') then
    tgt.text := src.text;

  if (src.family <> '') then
    tgt.family := src.family;

  for t1 in src.givenList do
  begin
    tgt.givenList.add(convertString(t1));
  end;
  for t2 in src.prefixList do
  begin
    tgt.prefixList.add(convertString(t2));
  end;
  for t3 in src.suffixList do
  begin
    tgt.suffixList.add(convertString(t3));
  end;
  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertHumanName(src : FHIR.R4.Types.TFhirHumanName) : FHIR.R3.Types.TFhirHumanName;
var
  tgt : FHIR.R3.Types.TFhirHumanName;
  t : FHIR.R4.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirHumanName.Create();
  try
  copyElement(src, tgt);
  tgt.use := convertNameUse(src.use);

  if (src.text <> '') then
    tgt.text := src.text;

  if (src.family <> '') then
    tgt.family := src.family;

  for t in src.givenList do
  begin
    tgt.givenList.add(convertString(t));
  end;
  for t in src.prefixList do
  begin
    tgt.prefixList.add(convertString(t));
  end;
  for t in src.suffixList do
  begin
    tgt.suffixList.add(convertString(t));
  end;
  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMeta(src : FHIR.R3.Types.TFhirMeta) : FHIR.R4.Types.TFhirMeta;
var
  tgt : FHIR.R4.Types.TFhirMeta;
  t1 : FHIR.R3.Types.TFhirUri;
  t2 : FHIR.R3.Types.TFhirCoding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirMeta.Create();
  try
  copyElement(src, tgt);
  if (src.versionId <> '') then
    tgt.versionId := src.versionId;

  tgt.lastUpdated := src.lastUpdated;

  for t1 in src.profileList do
  begin
    tgt.profileList.add(convertUri(t1));
  end;
  for t2 in src.securityList do
  begin
    tgt.securityList.add(convertCoding(t2));
  end;
  for t2 in src.tagList do
  begin
    tgt.tagList.add(convertCoding(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMeta(src : FHIR.R4.Types.TFhirMeta) : FHIR.R3.Types.TFhirMeta;
var
  tgt : FHIR.R3.Types.TFhirMeta;
  t1 : FHIR.R4.Types.TFhirUri;
  t2 : FHIR.R4.Types.TFhirCoding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirMeta.Create();
  try
  copyElement(src, tgt);
  if (src.versionId <> '') then
    tgt.versionId := src.versionId;

  tgt.lastUpdated := src.lastUpdated;

  for t1 in src.profileList do
  begin
    tgt.profileList.add(convertUri(t1));
  end;
  for t2 in src.securityList do
  begin
    tgt.securityList.add(convertCoding(t2));
  end;
  for t2 in src.tagList do
  begin
    tgt.tagList.add(convertCoding(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertParameterDefinition(src : FHIR.R3.Types.TFhirParameterDefinition) : FHIR.R4.Types.TFhirParameterDefinition;
var
  tgt : FHIR.R4.Types.TFhirParameterDefinition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirParameterDefinition.Create();
  try
  copyElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  tgt.use := convertParameterUse(src.use);

  tgt.min := src.min;

  tgt.max := src.max;

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  tgt.type_element := convertType(src.type_Element) as FHIR.R4.Types.TFHIREnum;

  if (src.profile <> nil) then
      tgt.profile := convertReference(src.Profile).reference;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertParameterDefinition(src : FHIR.R4.Types.TFhirParameterDefinition) : FHIR.R3.Types.TFhirParameterDefinition;
var
  tgt : FHIR.R3.Types.TFhirParameterDefinition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirParameterDefinition.Create();
  try
  copyElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  tgt.use := convertParameterUse(src.use);

  tgt.min := src.min;

  tgt.max := src.max;

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  tgt.type_element := convertType(src.type_Element) as FHIR.R3.Types.TFHIREnum;

  if (src.profile <> '') then
    tgt.Profile := FHIR.R3.Types.TFhirReference.Create(src.Profile);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertRelatedArtifact(src : FHIR.R3.Types.TFhirRelatedArtifact) : FHIR.R4.Types.TFhirRelatedArtifact;
var
  tgt : FHIR.R4.Types.TFhirRelatedArtifact;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirRelatedArtifact.Create();
  try
  copyElement(src, tgt);
  tgt.type_ := convertRelatedArtifactType(src.type_);

  if (src.display <> '') then
    tgt.display := src.display;

  if (src.citation <> '') then
    tgt.citation := src.citation;

  if (src.url <> '') then
    tgt.url := src.url;

  if (src.document <> nil) then
    tgt.document := convertAttachment(src.document);

  if (src.resource <> nil) then
    tgt.resourceElement := convertReferenceToCanonical(src.resource);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertRelatedArtifact(src : FHIR.R4.Types.TFhirRelatedArtifact) : FHIR.R3.Types.TFhirRelatedArtifact;
var
  tgt : FHIR.R3.Types.TFhirRelatedArtifact;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirRelatedArtifact.Create();
  try
  copyElement(src, tgt);
  tgt.type_ := convertRelatedArtifactType(src.type_);

  if (src.display <> '') then
    tgt.display := src.display;

  if (src.citation <> '') then
    tgt.citation := src.citation;

  if (src.url <> '') then
    tgt.url := src.url;

  if (src.document <> nil) then
    tgt.document := convertAttachment(src.document);

  if (src.resource <> '') then
    tgt.resource := convertCanonicalToReference(src.resourceElement);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertTiming(src : FHIR.R3.Types.TFhirTiming) : FHIR.R4.Types.TFhirTiming;
var
  tgt : FHIR.R4.Types.TFhirTiming;
  t : FHIR.R3.Types.TFhirDateTime;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirTiming.Create();
  try
  copyElement(src, tgt);
  for t in src.eventList do
  begin
    tgt.eventList.add(convertDateTime(t));
  end;
  if (src.repeat_ <> nil) then
    tgt.repeat_ := convertTimingRepeatComponent(src.repeat_);

  if (src.code <> nil) then
    tgt.code := convertCodeableConcept(src.code);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertTiming(src : FHIR.R4.Types.TFhirTiming) : FHIR.R3.Types.TFhirTiming;
var
  tgt : FHIR.R3.Types.TFhirTiming;
  t : FHIR.R4.Types.TFhirDateTime;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirTiming.Create();
  try
  copyElement(src, tgt);
  for t in src.eventList do
  begin
    tgt.eventList.add(convertDateTime(t));
  end;
  if (src.repeat_ <> nil) then
    tgt.repeat_ := convertTimingRepeatComponent(src.repeat_);

  if (src.code <> nil) then
    tgt.code := convertCodeableConcept(src.code);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertTimingRepeatComponent(src : FHIR.R3.Types.TFhirTimingRepeat) : FHIR.R4.Types.TFhirTimingRepeat;
var
  tgt : FHIR.R4.Types.TFhirTimingRepeat;
  t : FHIR.R3.Types.TFhirDaysOfWeekEnum;
  a : FHIR.R4.Types.TFhirDaysOfWeekEnumList;
  t1 : FHIR.R3.Types.TFhirTime;
  t2 : FHIR.R3.Types.TFhirEventTimingEnum;
  a2 : FHIR.R4.Types.TFhirEventTimingEnumList;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirTimingRepeat.Create();
  try
  copyElement(src, tgt);
  if (src.bounds <> nil) then
    tgt.bounds := convertType(src.bounds);

  tgt.count := src.count;
  tgt.countMax := src.countMax;
  tgt.duration := src.duration;
  tgt.durationMax := src.durationMax;
  tgt.durationUnit := convertUnitsOfTime(src.durationUnit);
  tgt.frequency := src.frequency;
  tgt.frequencyMax := src.frequencyMax;
  tgt.period := src.period;
  tgt.periodMax := src.periodMax;
  tgt.periodUnit := convertUnitsOfTime(src.periodUnit);

  a := [];
  for t := low(FHIR.R3.Types.TFhirDaysOfWeekEnum) to high(FHIR.R3.Types.TFhirDaysOfWeekEnum) do
    if t in src.dayOfWeek then
      a := a + [convertDayOfWeek(t)];
  tgt.dayOfWeek := a;

  for t1 in src.timeOfDayList do
    tgt.timeOfDayList.add(convertTime(t1));

  a2 := [];
  for t2 := low(FHIR.R3.Types.TFhirEventTimingEnum) to high(FHIR.R3.Types.TFhirEventTimingEnum) do
    if t2 in src.when then
      a2 := a2 + [convertEventTiming(t2)];
  tgt.When := a2;
  tgt.offset := src.offset;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertTimingRepeatComponent(src : FHIR.R4.Types.TFhirTimingRepeat) : FHIR.R3.Types.TFhirTimingRepeat;
var
  tgt : FHIR.R3.Types.TFhirTimingRepeat;
  t : FHIR.R4.Types.TFhirDaysOfWeekEnum;
  a : FHIR.R3.Types.TFhirDaysOfWeekEnumList;
  t1 : FHIR.R4.Types.TFhirTime;
  t2 : FHIR.R4.Types.TFhirEventTimingEnum;
  a2 : FHIR.R3.Types.TFhirEventTimingEnumList;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirTimingRepeat.Create();
  try
  copyElement(src, tgt);
  if (src.bounds <> nil) then
    tgt.bounds := convertType(src.bounds);

  tgt.count := src.count;
  tgt.countMax := src.countMax;
  tgt.duration := src.duration;
  tgt.durationMax := src.durationMax;
  tgt.durationUnit := convertUnitsOfTime(src.durationUnit);
  tgt.frequency := src.frequency;
  tgt.frequencyMax := src.frequencyMax;
  tgt.period := src.period;
  tgt.periodMax := src.periodMax;
  tgt.periodUnit := convertUnitsOfTime(src.periodUnit);

  a := [];
  for t := low(FHIR.R4.Types.TFhirDaysOfWeekEnum) to high(FHIR.R4.Types.TFhirDaysOfWeekEnum) do
    if t in src.dayOfWeek then
      a := a + [convertDayOfWeek(t)];
  tgt.dayOfWeek := a;

  for t1 in src.timeOfDayList do
    tgt.timeOfDayList.add(convertTime(t1));

  a2 := [];
  for t2 := low(FHIR.R4.Types.TFhirEventTimingEnum) to high(FHIR.R4.Types.TFhirEventTimingEnum) do
    if t2 in src.when then
      a2 := a2 + [convertEventTiming(t2)];
  tgt.When := a2;
  tgt.offset := src.offset;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertUsageContext(src : FHIR.R3.Types.TFhirUsageContext) : FHIR.R4.Types.TFhirUsageContext;
var
  tgt : FHIR.R4.Types.TFhirUsageContext;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirUsageContext.Create();
  try
  copyElement(src, tgt);
  if (src.code <> nil) then
    tgt.code := convertCoding(src.code);

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertUsageContext(src : FHIR.R4.Types.TFhirUsageContext) : FHIR.R3.Types.TFhirUsageContext;
var
  tgt : FHIR.R3.Types.TFhirUsageContext;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirUsageContext.Create();
  try
  copyElement(src, tgt);
  if (src.code <> nil) then
    tgt.code := convertCoding(src.code);

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSimpleQuantity(src : FHIR.R3.Types.TFhirQuantity) : FHIR.R4.Types.TFhirQuantity;
var
  tgt : FHIR.R4.Types.TFhirQuantity;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirQuantity.Create();
  try
  copyElement(src, tgt);
  tgt.value := src.value;
  tgt.comparator := convertQuantityComparator(src.comparator);
  tgt.unit_ := src.unit_;
  tgt.system := src.system;
  tgt.code := src.code;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSimpleQuantity(src : FHIR.R4.Types.TFhirQuantity) : FHIR.R3.Types.TFhirQuantity;
var
  tgt : FHIR.R3.Types.TFhirQuantity;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirQuantity.Create();
  try
  copyElement(src, tgt);
  tgt.value := src.value;
  tgt.comparator := convertQuantityComparator(src.comparator);
  tgt.unit_ := src.unit_;
  tgt.system := src.system;
  tgt.code := src.code;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertTriggerDefinition(src : FHIR.R3.Types.TFhirTriggerDefinition) : FHIR.R4.Types.TFhirTriggerDefinition;
var
  tgt : FHIR.R4.Types.TFhirTriggerDefinition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirTriggerDefinition.Create();
  try
  copyElement(src, tgt);
  tgt.type_ := convertTriggerType(src.type_);

  if (src.eventName <> '') then
    tgt.name := src.eventName;

  if (src.eventTiming <> nil) then
    tgt.timing := convertType(src.eventTiming);

  if (src.eventData <> nil) then
    tgt.dataList.Add(convertDataRequirement(src.eventData));

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertTriggerDefinition(src : FHIR.R4.Types.TFhirTriggerDefinition) : FHIR.R3.Types.TFhirTriggerDefinition;
var
  tgt : FHIR.R3.Types.TFhirTriggerDefinition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirTriggerDefinition.Create();
  try
  copyElement(src, tgt);
  tgt.type_ := convertTriggerType(src.type_);

  if (src.name <> '') then
    tgt.eventName := src.name;

  if (src.timing <> nil) then
    tgt.eventTiming := convertType(src.timing);

  if (src.dataList.Count > 0) then
    tgt.eventData := convertDataRequirement(src.dataList[0]);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDataRequirement(src : FHIR.R3.Types.TFhirDataRequirement) : FHIR.R4.Types.TFhirDataRequirement;
var
  tgt : FHIR.R4.Types.TFhirDataRequirement;
  t1 : FHIR.R3.Types.TFhirUri;
  t2 : FHIR.R3.Types.TFhirString;
  t3 : FHIR.R3.Types.TFhirDataRequirementCodeFilter;
  t4 : FHIR.R3.Types.TFhirDataRequirementDateFilter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirDataRequirement.Create();
  try
  copyElement(src, tgt);
  tgt.type_element := convertType(src.type_Element) as FHIR.R4.Types.TFHIREnum;

  for t1 in src.profileList do
  begin
    tgt.profileList.add(convertUri(t1));
  end;
  for t2 in src.mustSupportList do
  begin
    tgt.mustSupportList.add(convertString(t2));
  end;
  for t3 in src.codeFilterList do
  begin
    tgt.codeFilterList.add(convertDataRequirementCodeFilterComponent(t3));
  end;
  for t4 in src.dateFilterList do
  begin
    tgt.dateFilterList.add(convertDataRequirementDateFilterComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDataRequirement(src : FHIR.R4.Types.TFhirDataRequirement) : FHIR.R3.Types.TFhirDataRequirement;
var
  tgt : FHIR.R3.Types.TFhirDataRequirement;
  t1 : FHIR.R4.Types.TFhirUri;
  t2 : FHIR.R4.Types.TFhirString;
  t3 : FHIR.R4.Types.TFhirDataRequirementCodeFilter;
  t4 : FHIR.R4.Types.TFhirDataRequirementDateFilter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirDataRequirement.Create();
  try
  copyElement(src, tgt);
  tgt.type_element := convertType(src.type_Element) as FHIR.R3.Types.TFHIREnum;

  for t1 in src.profileList do
  begin
    tgt.profileList.add(convertUri(t1));
  end;
  for t2 in src.mustSupportList do
  begin
    tgt.mustSupportList.add(convertString(t2));
  end;
  for t3 in src.codeFilterList do
  begin
    tgt.codeFilterList.add(convertDataRequirementCodeFilterComponent(t3));
  end;
  for t4 in src.dateFilterList do
  begin
    tgt.dateFilterList.add(convertDataRequirementDateFilterComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDataRequirementCodeFilterComponent(src : FHIR.R3.Types.TFhirDataRequirementCodeFilter) : FHIR.R4.Types.TFhirDataRequirementCodeFilter;
var
  tgt : FHIR.R4.Types.TFhirDataRequirementCodeFilter;
  vs : FHIR.R4.Types.TFhirType;
  t2 : FHIR.R3.Types.TFhirCode;
  t3 : FHIR.R3.Types.TFhirCoding;
  t4 : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirDataRequirementCodeFilter.Create();
  try
  copyElement(src, tgt);
  if (src.path <> '') then
    tgt.path := src.path;

  if (src.valueSet <> nil) then
  begin
    vs := convertType(src.ValueSet);
    try
      if (vs is FHIR.R4.Types.TFhirReference) then
        tgt.ValueSet := FHIR.R4.Types.TFhirReference(vs).Reference
      else
        tgt.ValueSet := vs.primitiveValue;
      tgt.ValueSet := refToVS(tgt.valueSet);
    finally
      vs.Free;
    end;
  end;

  for t2 in src.valueCodeList do
  begin
    tgt.codeList.add(convertCoding(t2));
  end;
  for t3 in src.valueCodingList do
  begin
    tgt.codeList.add(convertCoding(t3));
  end;
  for t4 in src.valueCodeableConceptList do
  begin
    tgt.codeList.add(convertCodeableConceptToCoding(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDataRequirementCodeFilterComponent(src : FHIR.R4.Types.TFhirDataRequirementCodeFilter) : FHIR.R3.Types.TFhirDataRequirementCodeFilter;
var
  tgt : FHIR.R3.Types.TFhirDataRequirementCodeFilter;
  t : FHIR.R4.Types.TFhirCoding;
  s : String;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirDataRequirementCodeFilter.Create();
  try
  copyElement(src, tgt);
  if (src.path <> '') then
    tgt.path := src.path;

  if (src.valueSet <> '') then
  begin
    s := vsToRef(src.valueSet);
    if s <> '' then
      tgt.ValueSet := FHIR.R3.Types.TFHIRUri.create(s)
    else
      tgt.ValueSet := FHIR.R3.Types.TFHIRReference.create(src.ValueSet);
  end;

  for t in src.codeList do
  begin
      tgt.valueCodingList.add(convertCoding(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDataRequirementDateFilterComponent(src : FHIR.R3.Types.TFhirDataRequirementDateFilter) : FHIR.R4.Types.TFhirDataRequirementDateFilter;
var
  tgt : FHIR.R4.Types.TFhirDataRequirementDateFilter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirDataRequirementDateFilter.Create();
  try
  copyElement(src, tgt);
  if (src.path <> '') then
    tgt.path := src.path;

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDataRequirementDateFilterComponent(src : FHIR.R4.Types.TFhirDataRequirementDateFilter) : FHIR.R3.Types.TFhirDataRequirementDateFilter;
var
  tgt : FHIR.R3.Types.TFhirDataRequirementDateFilter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Types.TFhirDataRequirementDateFilter.Create();
  try
  copyElement(src, tgt);
  if (src.path <> '') then
    tgt.path := src.path;

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertType(src : FHIR.R3.Types.TFhirType) : FHIR.R4.Types.TFhirType;
begin
  if (src = nil) then
    exit(nil);
  if (src is FHIR.R3.Types.TFhirBase64Binary) then
    exit(convertBase64Binary(src as FHIR.R3.Types.TFhirBase64Binary));
  if (src is FHIR.R3.Types.TFhirBoolean) then
    exit(convertBoolean(src as FHIR.R3.Types.TFhirBoolean));
  if (src is FHIR.R3.Types.TFhirCode) then
    exit(convertCode(src as FHIR.R3.Types.TFhirCode));
  if (src is FHIR.R3.Types.TFhirEnum) then
    exit(convertCode(src as FHIR.R3.Types.TFhirEnum));
  if (src is FHIR.R3.Types.TFhirDate) then
    exit(convertDate(src as FHIR.R3.Types.TFhirDate));
  if (src is FHIR.R3.Types.TFhirDateTime) then
    exit(convertDateTime(src as FHIR.R3.Types.TFhirDateTime));
  if (src is FHIR.R3.Types.TFhirDecimal) then
    exit(convertDecimal(src as FHIR.R3.Types.TFhirDecimal));
  if (src is FHIR.R3.Types.TFhirId) then
    exit(convertId(src as FHIR.R3.Types.TFhirId));
  if (src is FHIR.R3.Types.TFhirInstant) then
    exit(convertInstant(src as FHIR.R3.Types.TFhirInstant));
  if (src is FHIR.R3.Types.TFhirInteger) then
    exit(convertInteger(src as FHIR.R3.Types.TFhirInteger));
  if (src is FHIR.R3.Types.TFhirMarkdown) then
    exit(convertMarkdown(src as FHIR.R3.Types.TFhirMarkdown));
  if (src is FHIR.R3.Types.TFhirOid) then
    exit(convertOid(src as FHIR.R3.Types.TFhirOid));
  if (src is FHIR.R3.Types.TFhirPositiveInt) then
    exit(convertPositiveInt(src as FHIR.R3.Types.TFhirPositiveInt));
  if (src is FHIR.R3.Types.TFHIRString) then
    exit(convertString(src as FHIR.R3.Types.TFHIRString));
  if (src is FHIR.R3.Types.TFhirTime) then
    exit(convertTime(src as FHIR.R3.Types.TFhirTime));
  if (src is FHIR.R3.Types.TFhirUnsignedInt) then
    exit(convertUnsignedInt(src as FHIR.R3.Types.TFhirUnsignedInt));
  if (src is FHIR.R3.Types.TFhirUri) then
    exit(convertUri(src as FHIR.R3.Types.TFhirUri));
  if (src is FHIR.R3.Types.TFhirUuid) then
    exit(convertUuid(src as FHIR.R3.Types.TFhirUuid));

  if (src is FHIR.R3.Types.TFhirExtension) then
    exit(convertExtension(src as FHIR.R3.Types.TFhirExtension));
  if (src is FHIR.R3.Types.TFhirNarrative) then
    exit(convertNarrative(src as FHIR.R3.Types.TFhirNarrative));
  if (src is FHIR.R3.Types.TFhirAge) then
    exit(convertAge(src as FHIR.R3.Types.TFhirAge));
  if (src is FHIR.R3.Types.TFhirAnnotation) then
    exit(convertAnnotation(src as FHIR.R3.Types.TFhirAnnotation));
  if (src is FHIR.R3.Types.TFhirAttachment) then
    exit(convertAttachment(src as FHIR.R3.Types.TFhirAttachment));
  if (src is FHIR.R3.Types.TFhirCodeableConcept) then
    exit(convertCodeableConcept(src as FHIR.R3.Types.TFhirCodeableConcept));
  if (src is FHIR.R3.Types.TFhirCoding) then
    exit(convertCoding(src as FHIR.R3.Types.TFhirCoding));
  if (src is FHIR.R3.Types.TFhirCount) then
    exit(convertCount(src as FHIR.R3.Types.TFhirCount));
  if (src is FHIR.R3.Types.TFhirDistance) then
    exit(convertDistance(src as FHIR.R3.Types.TFhirDistance));
  if (src is FHIR.R3.Types.TFhirDuration) then
    exit(convertDuration(src as FHIR.R3.Types.TFhirDuration));
  if (src is FHIR.R3.Types.TFhirIdentifier) then
    exit(convertIdentifier(src as FHIR.R3.Types.TFhirIdentifier));
  if (src is FHIR.R3.Types.TFhirMoney) then
    exit(convertMoney(src as FHIR.R3.Types.TFhirMoney));
  if (src is FHIR.R3.Types.TFhirPeriod) then
    exit(convertPeriod(src as FHIR.R3.Types.TFhirPeriod));
  if (src is FHIR.R3.Types.TFhirQuantity) then
    exit(convertQuantity(src as FHIR.R3.Types.TFhirQuantity));
  if (src is FHIR.R3.Types.TFhirRange) then
    exit(convertRange(src as FHIR.R3.Types.TFhirRange));
  if (src is FHIR.R3.Types.TFhirRatio) then
    exit(convertRatio(src as FHIR.R3.Types.TFhirRatio));
  if (src is FHIR.R3.Types.TFhirReference) then
    exit(convertReference(src as FHIR.R3.Types.TFhirReference));
  if (src is FHIR.R3.Types.TFhirSampledData) then
    exit(convertSampledData(src as FHIR.R3.Types.TFhirSampledData));
  if (src is FHIR.R3.Types.TFhirSignature) then
    exit(convertSignature(src as FHIR.R3.Types.TFhirSignature));
  if (src is FHIR.R3.Types.TFhirAddress) then
    exit(convertAddress(src as FHIR.R3.Types.TFhirAddress));
  if (src is FHIR.R3.Types.TFhirContactDetail) then
    exit(convertContactDetail(src as FHIR.R3.Types.TFhirContactDetail));
  if (src is FHIR.R3.Types.TFhirContactPoint) then
    exit(convertContactPoint(src as FHIR.R3.Types.TFhirContactPoint));
  if (src is FHIR.R3.Types.TFhirContributor) then
    exit(convertContributor(src as FHIR.R3.Types.TFhirContributor));
  if (src is FHIR.R3.Types.TFhirDosage) then
    exit(convertDosage(src as FHIR.R3.Types.TFhirDosage));
  if (src is FHIR.R3.Types.TFhirHumanName) then
    exit(convertHumanName(src as FHIR.R3.Types.TFhirHumanName));
  if (src is FHIR.R3.Types.TFhirMeta) then
    exit(convertMeta(src as FHIR.R3.Types.TFhirMeta));
  if (src is FHIR.R3.Types.TFhirParameterDefinition) then
    exit(convertParameterDefinition(src as FHIR.R3.Types.TFhirParameterDefinition));
  if (src is FHIR.R3.Types.TFhirRelatedArtifact) then
    exit(convertRelatedArtifact(src as FHIR.R3.Types.TFhirRelatedArtifact));
  if (src is FHIR.R3.Types.TFhirTiming) then
    exit(convertTiming(src as FHIR.R3.Types.TFhirTiming));
  if (src is FHIR.R3.Types.TFhirUsageContext) then
    exit(convertUsageContext(src as FHIR.R3.Types.TFhirUsageContext));
  if (src is FHIR.R3.Types.TFhirElementDefinition) then
    exit(convertElementDefinition(src as FHIR.R3.Types.TFhirElementDefinition));
  if (src is FHIR.R3.Types.TFhirDataRequirement) then
    exit(convertDataRequirement(src as FHIR.R3.Types.TFhirDataRequirement));
  raise EFHIRException.create('Unknown type ' + src.fhirType());
end;

class function TVersionConvertor_30_40.convertType(src : FHIR.R4.Types.TFhirType) : FHIR.R3.Types.TFhirType;
begin
  if (src = nil) then
    exit(nil);
  if (src is FHIR.R4.Types.TFhirBase64Binary) then
    exit(convertBase64Binary(src as FHIR.R4.Types.TFhirBase64Binary));
  if (src is FHIR.R4.Types.TFhirBoolean) then
    exit(convertBoolean(src as FHIR.R4.Types.TFhirBoolean));
  if (src is FHIR.R4.Types.TFhirCode) then
    exit(convertCode(src as FHIR.R4.Types.TFhirCode));
  if (src is FHIR.R4.Types.TFhirEnum) then
    exit(convertCode(src as FHIR.R4.Types.TFhirEnum));
  if (src is FHIR.R4.Types.TFhirDate) then
    exit(convertDate(src as FHIR.R4.Types.TFhirDate));
  if (src is FHIR.R4.Types.TFhirDateTime) then
    exit(convertDateTime(src as FHIR.R4.Types.TFhirDateTime));
  if (src is FHIR.R4.Types.TFhirDecimal) then
    exit(convertDecimal(src as FHIR.R4.Types.TFhirDecimal));
  if (src is FHIR.R4.Types.TFhirId) then
    exit(convertId(src as FHIR.R4.Types.TFhirId));
  if (src is FHIR.R4.Types.TFhirInstant) then
    exit(convertInstant(src as FHIR.R4.Types.TFhirInstant));
  if (src is FHIR.R4.Types.TFhirInteger) then
    exit(convertInteger(src as FHIR.R4.Types.TFhirInteger));
  if (src is FHIR.R4.Types.TFhirMarkdown) then
    exit(convertMarkdown(src as FHIR.R4.Types.TFhirMarkdown));
  if (src is FHIR.R4.Types.TFhirOid) then
    exit(convertOid(src as FHIR.R4.Types.TFhirOid));
  if (src is FHIR.R4.Types.TFhirPositiveInt) then
    exit(convertPositiveInt(src as FHIR.R4.Types.TFhirPositiveInt));
  if (src is FHIR.R4.Types.TFhirString) then
    exit(convertString(src as FHIR.R4.Types.TFhirString));
  if (src is FHIR.R4.Types.TFhirTime) then
    exit(convertTime(src as FHIR.R4.Types.TFhirTime));
  if (src is FHIR.R4.Types.TFhirUnsignedInt) then
    exit(convertUnsignedInt(src as FHIR.R4.Types.TFhirUnsignedInt));
  if (src is FHIR.R4.Types.TFhirUri) then
    exit(convertUri(src as FHIR.R4.Types.TFhirUri));
  if (src is FHIR.R4.Types.TFhirUuid) then
    exit(convertUuid(src as FHIR.R4.Types.TFhirUuid));

  if (src is FHIR.R4.Types.TFhirExtension) then
    exit(convertExtension(src as FHIR.R4.Types.TFhirExtension));
  if (src is FHIR.R4.Types.TFhirNarrative) then
    exit(convertNarrative(src as FHIR.R4.Types.TFhirNarrative));
  if (src is FHIR.R4.Types.TFhirAge) then
    exit(convertAge(src as FHIR.R4.Types.TFhirAge));
  if (src is FHIR.R4.Types.TFhirAnnotation) then
    exit(convertAnnotation(src as FHIR.R4.Types.TFhirAnnotation));
  if (src is FHIR.R4.Types.TFhirAttachment) then
    exit(convertAttachment(src as FHIR.R4.Types.TFhirAttachment));
  if (src is FHIR.R4.Types.TFhirCodeableConcept) then
    exit(convertCodeableConcept(src as FHIR.R4.Types.TFhirCodeableConcept));
  if (src is FHIR.R4.Types.TFhirCoding) then
    exit(convertCoding(src as FHIR.R4.Types.TFhirCoding));
  if (src is FHIR.R4.Types.TFhirCount) then
    exit(convertCount(src as FHIR.R4.Types.TFhirCount));
  if (src is FHIR.R4.Types.TFhirDistance) then
    exit(convertDistance(src as FHIR.R4.Types.TFhirDistance));
  if (src is FHIR.R4.Types.TFhirDuration) then
    exit(convertDuration(src as FHIR.R4.Types.TFhirDuration));
  if (src is FHIR.R4.Types.TFhirIdentifier) then
    exit(convertIdentifier(src as FHIR.R4.Types.TFhirIdentifier));
  if (src is FHIR.R4.Types.TFhirMoney) then
    exit(convertMoney(src as FHIR.R4.Types.TFhirMoney));
  if (src is FHIR.R4.Types.TFhirPeriod) then
    exit(convertPeriod(src as FHIR.R4.Types.TFhirPeriod));
  if (src is FHIR.R4.Types.TFhirQuantity) then
    exit(convertQuantity(src as FHIR.R4.Types.TFhirQuantity));
  if (src is FHIR.R4.Types.TFhirRange) then
    exit(convertRange(src as FHIR.R4.Types.TFhirRange));
  if (src is FHIR.R4.Types.TFhirRatio) then
    exit(convertRatio(src as FHIR.R4.Types.TFhirRatio));
  if (src is FHIR.R4.Types.TFhirReference) then
    exit(convertReference(src as FHIR.R4.Types.TFhirReference));
  if (src is FHIR.R4.Types.TFhirSampledData) then
    exit(convertSampledData(src as FHIR.R4.Types.TFhirSampledData));
  if (src is FHIR.R4.Types.TFhirSignature) then
    exit(convertSignature(src as FHIR.R4.Types.TFhirSignature));
  if (src is FHIR.R4.Types.TFhirAddress) then
    exit(convertAddress(src as FHIR.R4.Types.TFhirAddress));
  if (src is FHIR.R4.Types.TFhirContactDetail) then
    exit(convertContactDetail(src as FHIR.R4.Types.TFhirContactDetail));
  if (src is FHIR.R4.Types.TFhirContactPoint) then
    exit(convertContactPoint(src as FHIR.R4.Types.TFhirContactPoint));
  if (src is FHIR.R4.Types.TFhirContributor) then
    exit(convertContributor(src as FHIR.R4.Types.TFhirContributor));
  if (src is FHIR.R4.Types.TFhirDosage) then
    exit(convertDosage(src as FHIR.R4.Types.TFhirDosage));
  if (src is FHIR.R4.Types.TFhirHumanName) then
    exit(convertHumanName(src as FHIR.R4.Types.TFhirHumanName));
  if (src is FHIR.R4.Types.TFhirMeta) then
    exit(convertMeta(src as FHIR.R4.Types.TFhirMeta));
  if (src is FHIR.R4.Types.TFhirParameterDefinition) then
    exit(convertParameterDefinition(src as FHIR.R4.Types.TFhirParameterDefinition));
  if (src is FHIR.R4.Types.TFhirRelatedArtifact) then
    exit(convertRelatedArtifact(src as FHIR.R4.Types.TFhirRelatedArtifact));
  if (src is FHIR.R4.Types.TFhirTiming) then
    exit(convertTiming(src as FHIR.R4.Types.TFhirTiming));
  if (src is FHIR.R4.Types.TFhirUsageContext) then
    exit(convertUsageContext(src as FHIR.R4.Types.TFhirUsageContext));
  if (src is FHIR.R4.Types.TFhirElementDefinition) then
    exit(convertElementDefinition(src as FHIR.R4.Types.TFhirElementDefinition));
  if (src is FHIR.R4.Types.TFhirDataRequirement) then
    exit(convertDataRequirement(src as FHIR.R4.Types.TFhirDataRequirement));
  raise EFHIRException.create('Unknown type_ ' + src.fhirType()+' for '+src.className);
end;

class function TVersionConvertor_30_40.convertParameters(src : FHIR.R3.Resources.TFhirParameters) : FHIR.R4.Resources.TFhirParameters;
var
  tgt : FHIR.R4.Resources.TFhirParameters;
  t : FHIR.R3.Resources.TFhirParametersParameter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirParameters.Create();
  try
  copyResource(src, tgt);
  for t in src.parameterList do
  begin
    tgt.parameterList.add(convertParametersParameterComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertParameters(src : FHIR.R4.Resources.TFhirParameters) : FHIR.R3.Resources.TFhirParameters;
var
  tgt : FHIR.R3.Resources.TFhirParameters;
  t : FHIR.R4.Resources.TFhirParametersParameter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirParameters.Create();
  try
  copyResource(src, tgt);
  for t in src.parameterList do
  begin
    tgt.parameterList.add(convertParametersParameterComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertParametersParameterComponent(src : FHIR.R3.Resources.TFhirParametersParameter) : FHIR.R4.Resources.TFhirParametersParameter;
var
  tgt : FHIR.R4.Resources.TFhirParametersParameter;
  t : FHIR.R3.Resources.TFhirParametersParameter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirParametersParameter.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  if (src.resource <> nil) then
    tgt.resource := convertResource(src.resource);

  for t in src.partList do
  begin
    tgt.partList.add(convertParametersParameterComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertParametersParameterComponent(src : FHIR.R4.Resources.TFhirParametersParameter) : FHIR.R3.Resources.TFhirParametersParameter;
var
  tgt : FHIR.R3.Resources.TFhirParametersParameter;
  t : FHIR.R4.Resources.TFhirParametersParameter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirParametersParameter.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  if (src.resource <> nil) then
    tgt.resource := convertResource(src.resource);

  for t in src.partList do
  begin
    tgt.partList.add(convertParametersParameterComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertActivityDefinition(src : FHIR.R3.Resources.TFhirActivityDefinition) : FHIR.R4.Resources.TFhirActivityDefinition;
var
  tgt : FHIR.R4.Resources.TFhirActivityDefinition;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirUsageContext;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Types.TFhirCodeableConcept;
  t5 : FHIR.R3.Types.TFhirContributor;
  t6 : FHIR.R3.Types.TFhirContactDetail;
  t7 : FHIR.R3.Types.TFhirRelatedArtifact;
  t8 : FHIR.R3.Types.TFhirReference;
  t9 : FHIR.R3.Resources.TFhirActivityDefinitionParticipant;
  ta : FHIR.R3.Types.TFhirDosage;
  tb : FHIR.R3.Types.TFhirCodeableConcept;
  tc : FHIR.R3.Resources.TFhirActivityDefinitionDynamicValue;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirActivityDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);

  tgt.experimental := src.experimental;
  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.usage <> '') then
    tgt.usage := src.usage;
  tgt.approvalDate := src.approvalDate;
  tgt.lastReviewDate := src.lastReviewDate;

  if (src.effectivePeriod <> nil) then
    tgt.effectivePeriod := convertPeriod(src.effectivePeriod);

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.topicList do
  begin
    tgt.topicList.add(convertCodeableConcept(t4));
  end;
  for t5 in src.contributorList do
  begin
    case t5.type_ of
      FHIR.R3.Types.ContributorTypeAuthor : for t6 in t5.contactList do tgt.authorList.Add(convertContactDetail(t6));
      FHIR.R3.Types.ContributorTypeEditor: for t6 in t5.contactList do tgt.editorList.Add(convertContactDetail(t6));
      FHIR.R3.Types.ContributorTypeReviewer: for t6 in t5.contactList do tgt.reviewerList.Add(convertContactDetail(t6));
      FHIR.R3.Types.ContributorTypeEndorser: for t6 in t5.contactList do tgt.endorserList.Add(convertContactDetail(t6));
    end;
  end;
  for t6 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t6));
  end;
  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  for t7 in src.relatedArtifactList do
  begin
    tgt.relatedArtifactList.add(convertRelatedArtifact(t7));
  end;
  for t8 in src.library_List do
  begin
    tgt.Library_List.add(convertReferenceToCanonical(t8));
  end;
//  tgt.kind := convertActivityDefinitionKind(src.kind);

  if (src.code <> nil) then
    tgt.code := convertCodeableConcept(src.code);

  if (src.timing <> nil) then
    tgt.timing := convertType(src.timing);

  if (src.location <> nil) then
    tgt.location := convertReference(src.location);

  for t9 in src.participantList do
  begin
    tgt.participantList.add(convertActivityDefinitionParticipantComponent(t9));
  end;
  if (src.product <> nil) then
    tgt.product := convertType(src.product);

  if (src.quantity <> nil) then
    tgt.quantity := convertSimpleQuantity(src.quantity);

  for ta in src.dosageList do
  begin
    tgt.dosageList.add(convertDosage(ta));
  end;
  for tb in src.bodySiteList do
  begin
    tgt.bodySiteList.add(convertCodeableConcept(tb));
  end;
  if (src.transform <> nil) then
    tgt.transformElement := convertReferenceToCanonical(src.transform);

  for tc in src.dynamicValueList do
  begin
    tgt.dynamicValueList.add(convertActivityDefinitionDynamicValueComponent(tc));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertActivityDefinition(src : FHIR.R4.Resources.TFhirActivityDefinition) : FHIR.R3.Resources.TFhirActivityDefinition;
var
  tgt : FHIR.R3.Resources.TFhirActivityDefinition;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirUsageContext;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Types.TFhirCodeableConcept;
  t5 : FHIR.R4.Types.TFhirContactDetail;
  t6 : FHIR.R4.Types.TFhirContactDetail;
  t7 : FHIR.R4.Types.TFhirRelatedArtifact;
  t8 : FHIR.R4.Types.TFhirCanonical;
  t9 : FHIR.R4.Resources.TFhirActivityDefinitionParticipant;
  ta : FHIR.R4.Types.TFhirDosage;
  tb : FHIR.R4.Types.TFhirCodeableConcept;
  tc : FHIR.R4.Resources.TFhirActivityDefinitionDynamicValue;
  tz : FHIR.R3.Types.TFhirContributor;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirActivityDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;
  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.usage <> '') then
    tgt.usage := src.usage;
  tgt.approvalDate := src.approvalDate;
  tgt.lastReviewDate := src.lastReviewDate;

  if (src.effectivePeriod <> nil) then
    tgt.effectivePeriod := convertPeriod(src.effectivePeriod);

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.topicList do
  begin
    tgt.topicList.add(convertCodeableConcept(t4));
  end;
  for t5 in src.authorList do
  begin
    tz := tgt.contributorList.Append;
    tz.type_ := FHIR.R3.Types.ContributorTypeAuthor;
    tz.contactList.Add(convertContactDetail(t5));
  end;
  for t5 in src.editorList do
  begin
    tz := tgt.contributorList.Append;
    tz.type_ := FHIR.R3.Types.ContributorTypeEditor;
    tz.contactList.Add(convertContactDetail(t5));
  end;
  for t5 in src.reviewerList do
  begin
    tz := tgt.contributorList.Append;
    tz.type_ := FHIR.R3.Types.ContributorTypeReviewer;
    tz.contactList.Add(convertContactDetail(t5));
  end;
  for t5 in src.endorserList do
  begin
    tz := tgt.contributorList.Append;
    tz.type_ := FHIR.R3.Types.ContributorTypeEndorser;
    tz.contactList.Add(convertContactDetail(t5));
  end;
  for t6 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t6));
  end;
  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  for t7 in src.relatedArtifactList do
  begin
    tgt.relatedArtifactList.add(convertRelatedArtifact(t7));
  end;
  for t8 in src.library_List do
  begin
    tgt.library_List.add(convertCanonicalToReference(t8));
  end;
//  tgt.kind := convertActivityDefinitionKind(src.kind);

  if (src.code <> nil) then
    tgt.code := convertCodeableConcept(src.code);

  if (src.timing <> nil) then
    tgt.timing := convertType(src.timing);

  if (src.location <> nil) then
    tgt.location := convertReference(src.location);

  for t9 in src.participantList do
  begin
    tgt.participantList.add(convertActivityDefinitionParticipantComponent(t9));
  end;
  if (src.product <> nil) then
    tgt.product := convertType(src.product);

  if (src.quantity <> nil) then
    tgt.quantity := convertSimpleQuantity(src.quantity);

  for ta in src.dosageList do
  begin
    tgt.dosageList.add(convertDosage(ta));
  end;
  for tb in src.bodySiteList do
  begin
    tgt.bodySiteList.add(convertCodeableConcept(tb));
  end;
  if (src.transform <> '') then
    tgt.transform := convertCanonicalToReference(src.transformElement);

  for tc in src.dynamicValueList do
  begin
    tgt.dynamicValueList.add(convertActivityDefinitionDynamicValueComponent(tc));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertActivityDefinitionParticipantComponent(src : FHIR.R3.Resources.TFhirActivityDefinitionParticipant) : FHIR.R4.Resources.TFhirActivityDefinitionParticipant;
var
  tgt : FHIR.R4.Resources.TFhirActivityDefinitionParticipant;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirActivityDefinitionParticipant.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertActivityParticipantType(src.type_);

  if (src.role <> nil) then
    tgt.role := convertCodeableConcept(src.role);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertActivityDefinitionParticipantComponent(src : FHIR.R4.Resources.TFhirActivityDefinitionParticipant) : FHIR.R3.Resources.TFhirActivityDefinitionParticipant;
var
  tgt : FHIR.R3.Resources.TFhirActivityDefinitionParticipant;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirActivityDefinitionParticipant.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertActivityParticipantType(src.type_);

  if (src.role <> nil) then
    tgt.role := convertCodeableConcept(src.role);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertActivityDefinitionDynamicValueComponent(src : FHIR.R3.Resources.TFhirActivityDefinitionDynamicValue) : FHIR.R4.Resources.TFhirActivityDefinitionDynamicValue;
var
  tgt : FHIR.R4.Resources.TFhirActivityDefinitionDynamicValue;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirActivityDefinitionDynamicValue.Create();
  try
  copyBackboneElement(src, tgt);

  if (src.path <> '') then
    tgt.path := src.path;

  if (src.description <> '') or (src.language <> '') or (src.expression <> '') then
  begin
    tgt.expression := FHIR.R4.Types.TFhirExpression.Create;
    if (src.description <> '') then
      tgt.expression.description := src.description;

    if (src.language <> '') then
      tgt.expression.language := src.language;

    if (src.expression <> '') then
      tgt.expression.expression := src.expression;
  end;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertActivityDefinitionDynamicValueComponent(src : FHIR.R4.Resources.TFhirActivityDefinitionDynamicValue) : FHIR.R3.Resources.TFhirActivityDefinitionDynamicValue;
var
  tgt : FHIR.R3.Resources.TFhirActivityDefinitionDynamicValue;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirActivityDefinitionDynamicValue.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.path <> '') then
    tgt.path := src.path;

  if (src.expression <> nil) then
  begin
  if (src.expression.description <> '') then
    tgt.description := src.expression.description;

  if (src.expression.language <> '') then
    tgt.language := src.expression.language;

  if (src.expression.expression <> '') then
    tgt.expression := src.expression.expression;
  end;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAllergyIntolerance(src : FHIR.R3.Resources.TFhirAllergyIntolerance) : FHIR.R4.Resources.TFhirAllergyIntolerance;
var
  tgt : FHIR.R4.Resources.TFhirAllergyIntolerance;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirAllergyIntoleranceCategoryEnum;
  a : FHIR.R4.Types.TFhirAllergyIntoleranceCategoryEnumList;
  t3 : FHIR.R3.Types.TFhirAnnotation;
  t4 : FHIR.R3.Resources.TFhirAllergyIntoleranceReaction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirAllergyIntolerance.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
   tgt.clinicalStatus := convertAllergyIntoleranceClinicalStatus(src.clinicalStatus);

  tgt.verificationStatus := convertAllergyIntoleranceVerificationStatus(src.verificationStatus);

  tgt.type_ := convertAllergyIntoleranceType(src.type_);

  a := [];
  for t2 := low(FHIR.R3.Types.TFhirAllergyIntoleranceCategoryEnum) to high(FHIR.R3.Types.TFhirAllergyIntoleranceCategoryEnum) do
    if t2 in src.category then
      a := a + [convertAllergyIntoleranceCategory(t2)];
  tgt.category := a;

  tgt.criticality := convertAllergyIntoleranceCriticality(src.criticality);

  if (src.code <> nil) then
    tgt.code := convertCodeableConcept(src.code);

  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  if (src.onset <> nil) then
    tgt.onset := convertType(src.onset);

  tgt.recordedDate := src.assertedDate;

  if (src.recorder <> nil) then
    tgt.recorder := convertReference(src.recorder);

  if (src.asserter <> nil) then
    tgt.asserter := convertReference(src.asserter);

  tgt.lastOccurrence := src.lastOccurrence;

  for t3 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t3));
  end;
  for t4 in src.reactionList do
  begin
    tgt.reactionList.add(convertAllergyIntoleranceReactionComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAllergyIntolerance(src : FHIR.R4.Resources.TFhirAllergyIntolerance) : FHIR.R3.Resources.TFhirAllergyIntolerance;
var
  tgt : FHIR.R3.Resources.TFhirAllergyIntolerance;
  t : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirAllergyIntoleranceCategoryEnum;
  a : FHIR.R3.Types.TFhirAllergyIntoleranceCategoryEnumList;
  t3 : FHIR.R4.Types.TFhirAnnotation;
  t4 : FHIR.R4.Resources.TFhirAllergyIntoleranceReaction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirAllergyIntolerance.Create();
  try
  copyDomainResource(src, tgt);
  for t in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t));
  end;
  tgt.clinicalStatus := convertAllergyIntoleranceClinicalStatus(src.clinicalStatus);

  tgt.verificationStatus := convertAllergyIntoleranceVerificationStatus(src.verificationStatus);

  tgt.type_ := convertAllergyIntoleranceType(src.type_);

  a := [];
  for t2 := low(FHIR.R4.Types.TFhirAllergyIntoleranceCategoryEnum) to high(FHIR.R4.Types.TFhirAllergyIntoleranceCategoryEnum) do
    if t2 in src.category then
      a := a + [convertAllergyIntoleranceCategory(t2)];
  tgt.category := a;
  tgt.criticality := convertAllergyIntoleranceCriticality(src.criticality);

  if (src.code <> nil) then
    tgt.code := convertCodeableConcept(src.code);

  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  if (src.onset <> nil) then
    tgt.onset := convertType(src.onset);

  tgt.assertedDate := src.recordedDate;

  if (src.recorder <> nil) then
    tgt.recorder := convertReference(src.recorder);

  if (src.asserter <> nil) then
    tgt.asserter := convertReference(src.asserter);

  tgt.lastOccurrence := src.lastOccurrence;

  for t3 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t3));
  end;
  for t4 in src.reactionList do
  begin
    tgt.reactionList.add(convertAllergyIntoleranceReactionComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAllergyIntoleranceReactionComponent(src : FHIR.R3.Resources.TFhirAllergyIntoleranceReaction) : FHIR.R4.Resources.TFhirAllergyIntoleranceReaction;
var
  tgt : FHIR.R4.Resources.TFhirAllergyIntoleranceReaction;
  t : FHIR.R3.Types.TFhirCodeableConcept;
  t1 : FHIR.R3.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirAllergyIntoleranceReaction.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.substance <> nil) then
    tgt.substance := convertCodeableConcept(src.substance);

  for t in src.manifestationList do
  begin
    tgt.manifestationList.add(convertCodeableConcept(t));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  tgt.onset := src.onset;

  tgt.severity := convertAllergyIntoleranceSeverity(src.severity);

  if (src.exposureRoute <> nil) then
    tgt.exposureRoute := convertCodeableConcept(src.exposureRoute);

  for t1 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t1));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAllergyIntoleranceReactionComponent(src : FHIR.R4.Resources.TFhirAllergyIntoleranceReaction) : FHIR.R3.Resources.TFhirAllergyIntoleranceReaction;
var
  tgt : FHIR.R3.Resources.TFhirAllergyIntoleranceReaction;
  t : FHIR.R4.Types.TFhirCodeableConcept;
  t1 : FHIR.R4.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirAllergyIntoleranceReaction.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.substance <> nil) then
    tgt.substance := convertCodeableConcept(src.substance);

  for t in src.manifestationList do
  begin
    tgt.manifestationList.add(convertCodeableConcept(t));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  tgt.onset := src.onset;

  tgt.severity := convertAllergyIntoleranceSeverity(src.severity);

  if (src.exposureRoute <> nil) then
    tgt.exposureRoute := convertCodeableConcept(src.exposureRoute);

  for t1 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t1));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAppointment(src : FHIR.R3.Resources.TFhirAppointment) : FHIR.R4.Resources.TFhirAppointment;
var
  tgt : FHIR.R4.Resources.TFhirAppointment;
  t : FHIR.R3.Types.TFhirIdentifier;
  t1 : FHIR.R3.Types.TFhirCodeableConcept;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Types.TFhirReference;
  t5 : FHIR.R3.Types.TFhirReference;
  t6 : FHIR.R3.Types.TFhirReference;
  t7 : FHIR.R3.Types.TFhirReference;
  t8 : FHIR.R3.Resources.TFhirAppointmentParticipant;
  t9 : FHIR.R3.Types.TFhirPeriod;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirAppointment.Create();
  try
  copyDomainResource(src, tgt);
  for t in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t));
  end;
  tgt.status := convertAppointmentStatus(src.status);

  if (src.serviceCategory <> nil) then
    tgt.serviceCategoryList.add(convertCodeableConcept(src.ServiceCategory));

  for t1 in src.serviceTypeList do
  begin
    tgt.serviceTypeList.add(convertCodeableConcept(t1));
  end;
  for t2 in src.specialtyList do
  begin
    tgt.specialtyList.add(convertCodeableConcept(t2));
  end;
  if (src.appointmentType <> nil) then
    tgt.appointmentType := convertCodeableConcept(src.appointmentType);

  for t3 in src.reasonList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.indicationList do
  begin
    tgt.reasonReferenceList.add(convertReference(t4));
  end;
  tgt.priority := src.priority;

  if (src.description <> '') then
    tgt.description := src.description;

  for t5 in src.supportingInformationList do
  begin
    tgt.supportingInformationList.add(convertReference(t5));
  end;
  tgt.start := src.start;

  tgt.end_ := src.end_;

  tgt.minutesDuration := src.minutesDuration;

  for t6 in src.slotList do
  begin
    tgt.slotList.add(convertReference(t6));
  end;
  tgt.created := src.created;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  for t7 in src.incomingReferralList do
  begin
    tgt.basedOnList.add(convertReference(t7));
  end;
  for t8 in src.participantList do
  begin
    tgt.participantList.add(convertAppointmentParticipantComponent(t8));
  end;
  for t9 in src.requestedPeriodList do
  begin
    tgt.requestedPeriodList.add(convertPeriod(t9));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAppointment(src : FHIR.R4.Resources.TFhirAppointment) : FHIR.R3.Resources.TFhirAppointment;
var
  tgt : FHIR.R3.Resources.TFhirAppointment;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirCodeableConcept;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Types.TFhirCodeableConcept;
  t5 : FHIR.R4.Types.TFhirReference;
  t6 : FHIR.R4.Types.TFhirReference;
  t7 : FHIR.R4.Types.TFhirReference;
  t8 : FHIR.R4.Types.TFhirReference;
  t9 : FHIR.R4.Resources.TFhirAppointmentParticipant;
  ta : FHIR.R4.Types.TFhirPeriod;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirAppointment.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertAppointmentStatus(src.status);

  if (src.serviceCategoryList.count > 0) then
    tgt.serviceCategory := convertCodeableConcept(src.serviceCategoryList[0]);

  for t2 in src.serviceTypeList do
  begin
    tgt.serviceTypeList.add(convertCodeableConcept(t2));
  end;
  for t3 in src.specialtyList do
  begin
    tgt.specialtyList.add(convertCodeableConcept(t3));
  end;
  if (src.appointmentType <> nil) then
    tgt.appointmentType := convertCodeableConcept(src.appointmentType);

  for t4 in src.reasonCodeList do
  begin
    tgt.reasonList.add(convertCodeableConcept(t4));
  end;
  for t5 in src.reasonReferenceList do
  begin
    tgt.indicationList.add(convertReference(t5));
  end;
  tgt.priority := src.priority;

  if (src.description <> '') then
    tgt.description := src.description;

  for t6 in src.supportingInformationList do
  begin
    tgt.supportingInformationList.add(convertReference(t6));
  end;
  tgt.start := src.start;

  tgt.end_ := src.end_;

  tgt.minutesDuration := src.minutesDuration;

  for t7 in src.slotList do
  begin
    tgt.slotList.add(convertReference(t7));
  end;
  tgt.created := src.created;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  for t8 in src.basedOnList do
  begin
    tgt.incomingReferralList.add(convertReference(t8));
  end;
  for t9 in src.participantList do
  begin
    tgt.participantList.add(convertAppointmentParticipantComponent(t9));
  end;
  for ta in src.requestedPeriodList do
  begin
    tgt.requestedPeriodList.add(convertPeriod(ta));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAppointmentParticipantComponent(src : FHIR.R3.Resources.TFhirAppointmentParticipant) : FHIR.R4.Resources.TFhirAppointmentParticipant;
var
  tgt : FHIR.R4.Resources.TFhirAppointmentParticipant;
  t : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirAppointmentParticipant.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.type_List do
  begin
    tgt.type_List.add(convertCodeableConcept(t));
  end;
  if (src.actor <> nil) then
    tgt.actor := convertReference(src.actor);

  tgt.required := convertParticipantRequired(src.required);

  tgt.status := convertParticipationStatus(src.status);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAppointmentParticipantComponent(src : FHIR.R4.Resources.TFhirAppointmentParticipant) : FHIR.R3.Resources.TFhirAppointmentParticipant;
var
  tgt : FHIR.R3.Resources.TFhirAppointmentParticipant;
  t : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirAppointmentParticipant.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.type_List do
  begin
    tgt.type_List.add(convertCodeableConcept(t));
  end;
  if (src.actor <> nil) then
    tgt.actor := convertReference(src.actor);

  tgt.required := convertParticipantRequired(src.required);

  tgt.status := convertParticipationStatus(src.status);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAppointmentResponse(src : FHIR.R3.Resources.TFhirAppointmentResponse) : FHIR.R4.Resources.TFhirAppointmentResponse;
var
  tgt : FHIR.R4.Resources.TFhirAppointmentResponse;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirAppointmentResponse.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.appointment <> nil) then
    tgt.appointment := convertReference(src.appointment);

  tgt.start := src.start;

  tgt.end_ := src.end_;

  for t2 in src.participantTypeList do
  begin
    tgt.participantTypeList.add(convertCodeableConcept(t2));
  end;
  if (src.actor <> nil) then
    tgt.actor := convertReference(src.actor);

  tgt.participantStatus := convertParticipantStatus(src.participantStatus);

  if (src.comment <> '') then
    tgt.comment := src.comment;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAppointmentResponse(src : FHIR.R4.Resources.TFhirAppointmentResponse) : FHIR.R3.Resources.TFhirAppointmentResponse;
var
  tgt : FHIR.R3.Resources.TFhirAppointmentResponse;
  t : FHIR.R4.Types.TFhirIdentifier;
  t1 : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirAppointmentResponse.Create();
  try
  copyDomainResource(src, tgt);
  for t in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t));
  end;
  if (src.appointment <> nil) then
    tgt.appointment := convertReference(src.appointment);

  tgt.start := src.start;

  tgt.end_ := src.end_;

  for t1 in src.participantTypeList do
  begin
    tgt.participantTypeList.add(convertCodeableConcept(t1));
  end;
  if (src.actor <> nil) then
    tgt.actor := convertReference(src.actor);

  tgt.participantStatus := convertParticipantStatus(src.participantStatus);

  if (src.comment <> '') then
    tgt.comment := src.comment;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAuditEvent(src : FHIR.R3.Resources.TFhirAuditEvent) : FHIR.R4.Resources.TFhirAuditEvent;
var
  tgt : FHIR.R4.Resources.TFhirAuditEvent;
  t1 : FHIR.R3.Types.TFhirCoding;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
  t3 : FHIR.R3.Resources.TFhirAuditEventAgent;
  t4 : FHIR.R3.Resources.TFhirAuditEventEntity;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirAuditEvent.Create();
  try
  copyDomainResource(src, tgt);
  tgt.type_ := convertCoding(src.type_);

  for t1 in src.subtypeList do
  begin
    tgt.subtypeList.add(convertCoding(t1));
  end;
  tgt.action := convertAuditEventAction(src.action);

  tgt.recorded := src.recorded;

  tgt.outcome := convertAuditEventOutcome(src.outcome);

  if (src.outcomeDesc <> '') then
    tgt.outcomeDesc := src.outcomeDesc;

  for t2 in src.purposeOfEventList do
  begin
    tgt.purposeOfEventList.add(convertCodeableConcept(t2));
  end;
  for t3 in src.agentList do
  begin
    tgt.agentList.add(convertAuditEventAgentComponent(t3));
  end;
  if (src.source <> nil) then
    tgt.source := convertAuditEventSourceComponent(src.source);

  for t4 in src.entityList do
  begin
    tgt.entityList.add(convertAuditEventEntityComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAuditEvent(src : FHIR.R4.Resources.TFhirAuditEvent) : FHIR.R3.Resources.TFhirAuditEvent;
var
  tgt : FHIR.R3.Resources.TFhirAuditEvent;
  t1 : FHIR.R4.Types.TFhirCoding;
  t2 : FHIR.R4.Types.TFhirCodeableConcept;
  t3 : FHIR.R4.Resources.TFhirAuditEventAgent;
  t4 : FHIR.R4.Resources.TFhirAuditEventEntity;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirAuditEvent.Create();
  try
  copyDomainResource(src, tgt);
  tgt.type_ := convertCoding(src.type_);

  for t1 in src.subtypeList do
  begin
    tgt.subtypeList.add(convertCoding(t1));
  end;
  tgt.action := convertAuditEventAction(src.action);

  tgt.recorded := src.recorded;

  tgt.outcome := convertAuditEventOutcome(src.outcome);

  if (src.outcomeDesc <> '') then
    tgt.outcomeDesc := src.outcomeDesc;

  for t2 in src.purposeOfEventList do
  begin
    tgt.purposeOfEventList.add(convertCodeableConcept(t2));
  end;
  for t3 in src.agentList do
  begin
    tgt.agentList.add(convertAuditEventAgentComponent(t3));
  end;
  if (src.source <> nil) then
    tgt.source := convertAuditEventSourceComponent(src.source);

  for t4 in src.entityList do
  begin
    tgt.entityList.add(convertAuditEventEntityComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventAgentComponent(src : FHIR.R3.Resources.TFhirAuditEventAgent) : FHIR.R4.Resources.TFhirAuditEventAgent;
var
  tgt : FHIR.R4.Resources.TFhirAuditEventAgent;
  t1 : FHIR.R3.Types.TFhirCodeableConcept;
  t2 : FHIR.R3.Types.TFhirUri;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirAuditEventAgent.Create();
  try
  copyBackboneElement(src, tgt);
  for t1 in src.roleList do
  begin
    tgt.roleList.add(convertCodeableConcept(t1));
  end;
  if (src.reference <> nil) then
    tgt.who := convertReference(src.reference);

  if (src.userId <> nil) then
  begin
    if tgt.who = nil then
      tgt.who := FHIR.R4.Types.TFhirReference.Create;
    tgt.who.identifier := convertIdentifier(src.userId);
  end;

  if (src.altId <> '') then
    tgt.altId := src.altId;

  if (src.name <> '') then
    tgt.name := src.name;

  tgt.requestor := src.requestor;

  if (src.location <> nil) then
    tgt.location := convertReference(src.location);

  for t2 in src.policyList do
  begin
    tgt.policyList.add(convertUri(t2));
  end;
  if (src.media <> nil) then
    tgt.media := convertCoding(src.media);

  if (src.network <> nil) then
    tgt.network := convertAuditEventAgentNetworkComponent(src.network);

  for t3 in src.purposeOfUseList do
  begin
    tgt.purposeOfUseList.add(convertCodeableConcept(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventAgentComponent(src : FHIR.R4.Resources.TFhirAuditEventAgent) : FHIR.R3.Resources.TFhirAuditEventAgent;
var
  tgt : FHIR.R3.Resources.TFhirAuditEventAgent;
  t1 : FHIR.R4.Types.TFhirCodeableConcept;
  t2 : FHIR.R4.Types.TFhirUri;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirAuditEventAgent.Create();
  try
  copyBackboneElement(src, tgt);
  for t1 in src.roleList do
  begin
    tgt.roleList.add(convertCodeableConcept(t1));
  end;
  if (src.who <> nil) and ((src.who.reference <> '') or (src.who.hasExtensionList) or (src.who.display <> '')) then
    tgt.reference := convertReference(src.who);

  if (src.who <> nil) and (src.who.identifier <> nil) then
    tgt.userId := convertIdentifier(src.who.identifier);

  if (src.altId <> '') then
    tgt.altId := src.altId;

  if (src.name <> '') then
    tgt.name := src.name;

   tgt.requestor := src.requestor;

  if (src.location <> nil) then
    tgt.location := convertReference(src.location);

  for t2 in src.policyList do
  begin
    tgt.policyList.add(convertUri(t2));
  end;
  if (src.media <> nil) then
    tgt.media := convertCoding(src.media);

  if (src.network <> nil) then
    tgt.network := convertAuditEventAgentNetworkComponent(src.network);

  for t3 in src.purposeOfUseList do
  begin
    tgt.purposeOfUseList.add(convertCodeableConcept(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventAgentNetworkComponent(src : FHIR.R3.Resources.TFhirAuditEventAgentNetwork) : FHIR.R4.Resources.TFhirAuditEventAgentNetwork;
var
  tgt : FHIR.R4.Resources.TFhirAuditEventAgentNetwork;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirAuditEventAgentNetwork.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.address <> '') then
    tgt.address := src.address;

  tgt.type_ := convertAuditEventAgentNetworkType(src.type_);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventAgentNetworkComponent(src : FHIR.R4.Resources.TFhirAuditEventAgentNetwork) : FHIR.R3.Resources.TFhirAuditEventAgentNetwork;
var
  tgt : FHIR.R3.Resources.TFhirAuditEventAgentNetwork;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirAuditEventAgentNetwork.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.address <> '') then
    tgt.address := src.address;

  tgt.type_ := convertAuditEventAgentNetworkType(src.type_);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventSourceComponent(src : FHIR.R3.Resources.TFhirAuditEventSource) : FHIR.R4.Resources.TFhirAuditEventSource;
var
  tgt : FHIR.R4.Resources.TFhirAuditEventSource;
  t : FHIR.R3.Types.TFhirCoding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirAuditEventSource.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.site <> '') then
    tgt.site := src.site;

  if (src.identifier <> nil) then
  begin
    tgt.observer := FHIR.R4.Types.TFhirReference.Create;
    tgt.observer.identifier := convertIdentifier(src.identifier);
  end;

  for t in src.type_List do
  begin
    tgt.type_List.add(convertCoding(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventSourceComponent(src : FHIR.R4.Resources.TFhirAuditEventSource) : FHIR.R3.Resources.TFhirAuditEventSource;
var
  tgt : FHIR.R3.Resources.TFhirAuditEventSource;
  t : FHIR.R4.Types.TFhirCoding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirAuditEventSource.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.site <> '') then
    tgt.site := src.site;

  if (src.observer <> nil) and (src.observer.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.observer.identifier);

  for t in src.type_List do
  begin
    tgt.type_List.add(convertCoding(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventEntityComponent(src : FHIR.R3.Resources.TFhirAuditEventEntity) : FHIR.R4.Resources.TFhirAuditEventEntity;
var
  tgt : FHIR.R4.Resources.TFhirAuditEventEntity;
  t1 : FHIR.R3.Types.TFhirCoding;
  t2 : FHIR.R3.Resources.TFhirAuditEventEntityDetail;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirAuditEventEntity.Create();
  try
  copyBackboneElement(src, tgt);

  if (src.reference <> nil) then
    tgt.what := convertReference(src.reference);

  if (src.identifier <> nil) then
  begin
    if tgt.what = nil then
    begin
      tgt.what := FHIR.R4.Types.TFhirReference.create;
      tgt.what.identifier := convertIdentifier(src.identifier);
    end;
  end;

  tgt.type_ := convertCoding(src.type_);

  if (src.role <> nil) then
    tgt.role := convertCoding(src.role);

  if (src.lifecycle <> nil) then
    tgt.lifecycle := convertCoding(src.lifecycle);

  for t1 in src.securityLabelList do
  begin
    tgt.securityLabelList.add(convertCoding(t1));
  end;
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.description <> '') then
    tgt.description := src.description;

  tgt.query := src.query;

  for t2 in src.detailList do
  begin
    tgt.detailList.add(convertAuditEventEntityDetailComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventEntityComponent(src : FHIR.R4.Resources.TFhirAuditEventEntity) : FHIR.R3.Resources.TFhirAuditEventEntity;
var
  tgt : FHIR.R3.Resources.TFhirAuditEventEntity;
  t1 : FHIR.R4.Types.TFhirCoding;
  t2 : FHIR.R4.Resources.TFhirAuditEventEntityDetail;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirAuditEventEntity.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.what <> nil) and (src.what.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.what.identifier);

  if (src.what <> nil) and ((src.what.reference <> '') or (src.what.hasExtensionList) or (src.what.display <> '')) then
    tgt.reference := convertReference(src.what);

  tgt.type_ := convertCoding(src.type_);

  if (src.role <> nil) then
    tgt.role := convertCoding(src.role);

  if (src.lifecycle <> nil) then
    tgt.lifecycle := convertCoding(src.lifecycle);

  for t1 in src.securityLabelList do
  begin
    tgt.securityLabelList.add(convertCoding(t1));
  end;
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.description <> '') then
    tgt.description := src.description;
  tgt.query := src.query;

  for t2 in src.detailList do
  begin
    tgt.detailList.add(convertAuditEventEntityDetailComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventEntityDetailComponent(src : FHIR.R3.Resources.TFhirAuditEventEntityDetail) : FHIR.R4.Resources.TFhirAuditEventEntityDetail;
var
  tgt : FHIR.R4.Resources.TFhirAuditEventEntityDetail;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirAuditEventEntityDetail.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.type_ <> '') then
    tgt.type_ := src.type_;

  if (src.value <> nil) then
    tgt.Value := FHIR.R4.Types.TFHirBase64Binary.create(src.Value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAuditEventEntityDetailComponent(src : FHIR.R4.Resources.TFhirAuditEventEntityDetail) : FHIR.R3.Resources.TFhirAuditEventEntityDetail;
var
  tgt : FHIR.R3.Resources.TFhirAuditEventEntityDetail;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirAuditEventEntityDetail.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.type_ <> '') then
    tgt.type_ := src.type_;

  if (src.value is TFHIRString) then
    tgt.value := TEncoding.UTF8.GetBytes((src.Value as TFHIRString).value)
  else if (src.value is TFHIRBase64Binary) then
    tgt.value := (src.value as FHIR.R4.Types.TFhirBase64Binary).value;


  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBasic(src : FHIR.R3.Resources.TFhirBasic) : FHIR.R4.Resources.TFhirBasic;
var
  tgt : FHIR.R4.Resources.TFhirBasic;
  t : FHIR.R3.Types.TFhirIdentifier;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirBasic.Create();
  try
  copyDomainResource(src, tgt);
  for t in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t));
  end;
  if (src.code <> nil) then
    tgt.code := convertCodeableConcept(src.code);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  tgt.created := src.created;

  if (src.author <> nil) then
    tgt.author := convertReference(src.author);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBasic(src : FHIR.R4.Resources.TFhirBasic) : FHIR.R3.Resources.TFhirBasic;
var
  tgt : FHIR.R3.Resources.TFhirBasic;
  t : FHIR.R4.Types.TFhirIdentifier;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirBasic.Create();
  try
  copyDomainResource(src, tgt);
  for t in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t));
  end;
  if (src.code <> nil) then
    tgt.code := convertCodeableConcept(src.code);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  tgt.created := src.created;

  if (src.author <> nil) then
    tgt.author := convertReference(src.author);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBinary(src : FHIR.R3.Resources.TFhirBinary) : FHIR.R4.Resources.TFhirBinary;
var
  tgt : FHIR.R4.Resources.TFhirBinary;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirBinary.Create();
  try
  copyResource(src, tgt);
  if (src.contentType <> '') then
    tgt.contentType := src.contentType;

  if (src.securityContext <> nil) then
    tgt.securityContext := convertReference(src.securityContext);

  tgt.data := src.content;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBinary(src : FHIR.R4.Resources.TFhirBinary) : FHIR.R3.Resources.TFhirBinary;
var
  tgt : FHIR.R3.Resources.TFhirBinary;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirBinary.Create();
  try
  copyResource(src, tgt);
  if (src.contentType <> '') then
    tgt.contentType := src.contentType;

  if (src.securityContext <> nil) then
    tgt.securityContext := convertReference(src.securityContext);

  tgt.content := src.data;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBodySite(src : FHIR.R3.Resources.TFhirBodySite) : FHIR.R4.Resources.TFhirBodyStructure;
var
  tgt : FHIR.R4.Resources.TFhirBodyStructure;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirAttachment;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirBodyStructure.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.imageList do
  begin
    tgt.imageList.add(convertAttachment(t2));
  end;
  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBodySite(src : FHIR.R4.Resources.TFhirBodyStructure) : FHIR.R3.Resources.TFhirBodySite;
var
  tgt : FHIR.R3.Resources.TFhirBodySite;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirAttachment;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirBodySite.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.imageList do
  begin
    tgt.imageList.add(convertAttachment(t2));
  end;
  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBundle(src : FHIR.R3.Resources.TFhirBundle) : FHIR.R4.Resources.TFhirBundle;
var
  tgt : FHIR.R4.Resources.TFhirBundle;
  t1 : FHIR.R3.Resources.TFhirBundleLink;
  t2 : FHIR.R3.Resources.TFhirBundleEntry;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirBundle.Create();
  try
  copyResource(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  tgt.type_ := convertBundleType(src.type_);

  tgt.total := src.total;

  for t1 in src.link_List do
  begin
    tgt.link_List.add(convertBundleLinkComponent(t1));
  end;
  for t2 in src.entryList do
  begin
    tgt.entryList.add(convertBundleEntryComponent(t2));
  end;
  if (src.signature <> nil) then
    tgt.signature := convertSignature(src.signature);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBundle(src : FHIR.R4.Resources.TFhirBundle) : FHIR.R3.Resources.TFhirBundle;
var
  tgt : FHIR.R3.Resources.TFhirBundle;
  t1 : FHIR.R4.Resources.TFhirBundleLink;
  t2 : FHIR.R4.Resources.TFhirBundleEntry;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirBundle.Create();
  try
  copyResource(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  tgt.type_ := convertBundleType(src.type_);

  tgt.total := src.total;

  for t1 in src.link_List do
  begin
    tgt.link_List.add(convertBundleLinkComponent(t1));
  end;
  for t2 in src.entryList do
  begin
    tgt.entryList.add(convertBundleEntryComponent(t2));
  end;
  if (src.signature <> nil) then
    tgt.signature := convertSignature(src.signature);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBundleLinkComponent(src : FHIR.R3.Resources.TFhirBundleLink) : FHIR.R4.Resources.TFhirBundleLink;
var
  tgt : FHIR.R4.Resources.TFhirBundleLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirBundleLink.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.relation <> '') then
    tgt.relation := src.relation;

  if (src.url <> '') then
    tgt.url := src.url;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBundleLinkComponent(src : FHIR.R4.Resources.TFhirBundleLink) : FHIR.R3.Resources.TFhirBundleLink;
var
  tgt : FHIR.R3.Resources.TFhirBundleLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirBundleLink.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.relation <> '') then
    tgt.relation := src.relation;

  if (src.url <> '') then
    tgt.url := src.url;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBundleEntryComponent(src : FHIR.R3.Resources.TFhirBundleEntry) : FHIR.R4.Resources.TFhirBundleEntry;
var
  tgt : FHIR.R4.Resources.TFhirBundleEntry;
  t : FHIR.R3.Resources.TFhirBundleLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirBundleEntry.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.link_List do
  begin
    tgt.link_List.add(convertBundleLinkComponent(t));
  end;
  if (src.fullUrl <> '') then
    tgt.fullUrl := src.fullUrl;

  if (src.resource <> nil) then
    tgt.resource := convertResource(src.resource);

  if (src.search <> nil) then
    tgt.search := convertBundleEntrySearchComponent(src.search);

  if (src.request <> nil) then
    tgt.request := convertBundleEntryRequestComponent(src.request);

  if (src.response <> nil) then
    tgt.response := convertBundleEntryResponseComponent(src.response);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBundleEntryComponent(src : FHIR.R4.Resources.TFhirBundleEntry) : FHIR.R3.Resources.TFhirBundleEntry;
var
  tgt : FHIR.R3.Resources.TFhirBundleEntry;
  t : FHIR.R4.Resources.TFhirBundleLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirBundleEntry.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.link_List do
  begin
    tgt.link_List.add(convertBundleLinkComponent(t));
  end;
  if (src.fullUrl <> '') then
    tgt.fullUrl := src.fullUrl;

  if (src.resource <> nil) then
    tgt.resource := convertResource(src.resource);

  if (src.search <> nil) then
    tgt.search := convertBundleEntrySearchComponent(src.search);

  if (src.request <> nil) then
    tgt.request := convertBundleEntryRequestComponent(src.request);

  if (src.response <> nil) then
    tgt.response := convertBundleEntryResponseComponent(src.response);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBundleEntrySearchComponent(src : FHIR.R3.Resources.TFhirBundleEntrySearch) : FHIR.R4.Resources.TFhirBundleEntrySearch;
var
  tgt : FHIR.R4.Resources.TFhirBundleEntrySearch;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirBundleEntrySearch.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.mode := convertSearchEntryMode(src.mode);

  tgt.score := src.score;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBundleEntrySearchComponent(src : FHIR.R4.Resources.TFhirBundleEntrySearch) : FHIR.R3.Resources.TFhirBundleEntrySearch;
var
  tgt : FHIR.R3.Resources.TFhirBundleEntrySearch;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirBundleEntrySearch.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.mode := convertSearchEntryMode(src.mode);

  tgt.score := src.score;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBundleEntryRequestComponent(src : FHIR.R3.Resources.TFhirBundleEntryRequest) : FHIR.R4.Resources.TFhirBundleEntryRequest;
var
  tgt : FHIR.R4.Resources.TFhirBundleEntryRequest;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirBundleEntryRequest.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.method := convertHTTPVerb(src.method);

  if (src.url <> '') then
    tgt.url := src.url;

  if (src.ifNoneMatch <> '') then
    tgt.ifNoneMatch := src.ifNoneMatch;

  tgt.ifModifiedSince := src.ifModifiedSince.link;

  if (src.ifMatch <> '') then
    tgt.ifMatch := src.ifMatch;

  if (src.ifNoneExist <> '') then
    tgt.ifNoneExist := src.ifNoneExist;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBundleEntryRequestComponent(src : FHIR.R4.Resources.TFhirBundleEntryRequest) : FHIR.R3.Resources.TFhirBundleEntryRequest;
var
  tgt : FHIR.R3.Resources.TFhirBundleEntryRequest;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirBundleEntryRequest.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.method := convertHTTPVerb(src.method);

  if (src.url <> '') then
    tgt.url := src.url;

  if (src.ifNoneMatch <> '') then
    tgt.ifNoneMatch := src.ifNoneMatch;

  tgt.ifModifiedSince := src.ifModifiedSince.link;

  if (src.ifMatch <> '') then
    tgt.ifMatch := src.ifMatch;

  if (src.ifNoneExist <> '') then
    tgt.ifNoneExist := src.ifNoneExist;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBundleEntryResponseComponent(src : FHIR.R3.Resources.TFhirBundleEntryResponse) : FHIR.R4.Resources.TFhirBundleEntryResponse;
var
  tgt : FHIR.R4.Resources.TFhirBundleEntryResponse;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirBundleEntryResponse.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.status <> '') then
    tgt.status := src.status;

  if (src.location <> '') then
    tgt.location := src.location;

  if (src.etag <> '') then
    tgt.etag := src.etag;

  tgt.lastModified := src.lastModified;

  tgt.outcome := convertResource(src.outcome);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertBundleEntryResponseComponent(src : FHIR.R4.Resources.TFhirBundleEntryResponse) : FHIR.R3.Resources.TFhirBundleEntryResponse;
var
  tgt : FHIR.R3.Resources.TFhirBundleEntryResponse;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirBundleEntryResponse.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.status <> '') then
    tgt.status := src.status;

  if (src.location <> '') then
    tgt.location := src.location;

  if (src.etag <> '') then
    tgt.etag := src.etag;

  tgt.lastModified := src.lastModified;

  tgt.outcome := convertResource(src.outcome);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatement(src : FHIR.R3.Resources.TFhirCapabilityStatement) : FHIR.R4.Resources.TFhirCapabilityStatement;
var
  tgt : FHIR.R4.Resources.TFhirCapabilityStatement;
  t1 : FHIR.R3.Types.TFhirContactDetail;
  t2 : FHIR.R3.Types.TFhirUsageContext;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Types.TFhirUri;
  t5 : FHIR.R3.Types.TFhirCode;
  t6 : FHIR.R3.Types.TFhirUri;
  t7 : FHIR.R3.Resources.TFhirCapabilityStatementRest;
  t8 : FHIR.R3.Resources.TFhirCapabilityStatementMessaging;
  t9 : FHIR.R3.Resources.TFhirCapabilityStatementDocument;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCapabilityStatement.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;
  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  tgt.kind := convertCapabilityStatementKind(src.kind);

  for t4 in src.instantiatesList do
  begin
    tgt.instantiatesList.add(convertUri(t4));
  end;
  if (src.software <> nil) then
    tgt.software := convertCapabilityStatementSoftwareComponent(src.software);

  if (src.implementation_ <> nil) then
    tgt.implementation_ := convertCapabilityStatementImplementationComponent(src.implementation_);

  if (src.fhirVersion <> '') then
    tgt.fhirVersion := FHIR.R4.Types.TFhirFHIRVersionEnum(StringArrayIndexOfSensitive(FHIR.R4.Types.CODES_TFhirFHIRVersionEnum, src.fhirVersion));

  for t5 in src.formatList do
  begin
    tgt.formatList.add(convertCode(t5));
  end;
  for t5 in src.patchFormatList do
  begin
    tgt.patchFormatList.add(convertCode(t5));
  end;
  for t6 in src.implementationGuideList do
  begin
    tgt.implementationGuideList.add(convertUri(t6));
  end;
  for t7 in src.restList do
  begin
    tgt.restList.add(convertCapabilityStatementRestComponent(t7));
  end;
  for t8 in src.messagingList do
  begin
    tgt.messagingList.add(convertCapabilityStatementMessagingComponent(t8));
  end;
  for t9 in src.documentList do
  begin
    tgt.documentList.add(convertCapabilityStatementDocumentComponent(t9));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatement(src : FHIR.R4.Resources.TFhirCapabilityStatement) : FHIR.R3.Resources.TFhirCapabilityStatement;
var
  tgt : FHIR.R3.Resources.TFhirCapabilityStatement;
  t1 : FHIR.R4.Types.TFhirContactDetail;
  t2 : FHIR.R4.Types.TFhirUsageContext;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Types.TFhirUri;
  t5 : FHIR.R4.Types.TFhirCode;
  t6 : FHIR.R4.Types.TFhirCode;
  t7 : FHIR.R4.Types.TFhirUri;
  r : FHIR.R4.Resources.TFhirCapabilityStatementRest;
  rr : FHIR.R4.Resources.TFhirCapabilityStatementRestResource;
  t8 : FHIR.R4.Types.TFhirCanonical;
  t9 : FHIR.R4.Resources.TFhirCapabilityStatementRest;
  ta : FHIR.R4.Resources.TFhirCapabilityStatementMessaging;
  tb : FHIR.R4.Resources.TFhirCapabilityStatementDocument;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCapabilityStatement.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;
  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  tgt.kind := convertCapabilityStatementKind(src.kind);

  for t4 in src.instantiatesList do
  begin
    tgt.instantiatesList.add(convertUri(t4));
  end;
  if (src.software <> nil) then
    tgt.software := convertCapabilityStatementSoftwareComponent(src.software);

  if (src.implementation_ <> nil) then
    tgt.implementation_ := convertCapabilityStatementImplementationComponent(src.implementation_);

  if (src.fhirVersion <> FHIRVersionNull) then
    tgt.fhirVersion := FHIR.R4.Types.CODES_TFhirFHIRVersionEnum[src.fhirVersion];

  for t5 in src.formatList do
  begin
    tgt.formatList.add(convertCode(t5));
  end;
  for t6 in src.patchFormatList do
  begin
    tgt.patchFormatList.add(convertCode(t6));
  end;
  for t7 in src.implementationGuideList do
  begin
    tgt.implementationGuideList.add(convertUri(t7));
  end;
  for r in src.restList do
  begin
    for rr in r.resourceList do
    begin
      for t8 in rr.supportedProfileList do
      begin
        tgt.profileList.add(convertCanonicalToReference(t8));
      end;
    end;
  end;
  for t9 in src.restList do
  begin
    tgt.restList.add(convertCapabilityStatementRestComponent(t9));
  end;
  for ta in src.messagingList do
  begin
    tgt.messagingList.add(convertCapabilityStatementMessagingComponent(ta));
  end;
  for tb in src.documentList do
  begin
    tgt.documentList.add(convertCapabilityStatementDocumentComponent(tb));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementSoftwareComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementSoftware) : FHIR.R4.Resources.TFhirCapabilityStatementSoftware;
var
  tgt : FHIR.R4.Resources.TFhirCapabilityStatementSoftware;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCapabilityStatementSoftware.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.version <> '') then
    tgt.version := src.version;

  tgt.releaseDate := src.releaseDate;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementSoftwareComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementSoftware) : FHIR.R3.Resources.TFhirCapabilityStatementSoftware;
var
  tgt : FHIR.R3.Resources.TFhirCapabilityStatementSoftware;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCapabilityStatementSoftware.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.version <> '') then
    tgt.version := src.version;

  tgt.releaseDate := src.releaseDate;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementImplementationComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementImplementation) : FHIR.R4.Resources.TFhirCapabilityStatementImplementation;
var
  tgt : FHIR.R4.Resources.TFhirCapabilityStatementImplementation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCapabilityStatementImplementation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.description <> '') then
    tgt.description := src.description;

  if (src.url <> '') then
    tgt.url := src.url;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementImplementationComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementImplementation) : FHIR.R3.Resources.TFhirCapabilityStatementImplementation;
var
  tgt : FHIR.R3.Resources.TFhirCapabilityStatementImplementation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCapabilityStatementImplementation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.description <> '') then
    tgt.description := src.description;

  if (src.url <> '') then
    tgt.url := src.url;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementRestComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementRest) : FHIR.R4.Resources.TFhirCapabilityStatementRest;
var
  tgt : FHIR.R4.Resources.TFhirCapabilityStatementRest;
  t1 : FHIR.R3.Resources.TFhirCapabilityStatementRestResource;
  t2 : FHIR.R3.Resources.TFhirCapabilityStatementRestInteraction;
  t3 : FHIR.R3.Resources.TFhirCapabilityStatementRestResourceSearchParam;
  t4 : FHIR.R3.Resources.TFhirCapabilityStatementRestOperation;
  t5 : FHIR.R3.Types.TFhirUri;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCapabilityStatementRest.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.mode := convertRestfulCapabilityMode(src.mode);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  if (src.security <> nil) then
    tgt.security := convertCapabilityStatementRestSecurityComponent(src.security);

  for t1 in src.resourceList do
  begin
    tgt.resourceList.add(convertCapabilityStatementRestResourceComponent(t1));
  end;
  for t2 in src.interactionList do
  begin
    tgt.interactionList.add(convertSystemInteractionComponent(t2));
  end;
  for t3 in src.searchParamList do
  begin
    tgt.searchParamList.add(convertCapabilityStatementRestResourceSearchParamComponent(t3));
  end;
  for t4 in src.operationList do
  begin
    tgt.operationList.add(convertCapabilityStatementRestOperationComponent(t4));
  end;
  for t5 in src.compartmentList do
  begin
    tgt.compartmentList.add(convertUri(t5));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementRestComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementRest) : FHIR.R3.Resources.TFhirCapabilityStatementRest;
var
  tgt : FHIR.R3.Resources.TFhirCapabilityStatementRest;
  t1 : FHIR.R4.Resources.TFhirCapabilityStatementRestResource;
  t2 : FHIR.R4.Resources.TFhirCapabilityStatementRestInteraction;
  t3 : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceSearchParam;
  t4 : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceOperation;
  t5 : FHIR.R4.Types.TFhirUri;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCapabilityStatementRest.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.mode := convertRestfulCapabilityMode(src.mode);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  if (src.security <> nil) then
    tgt.security := convertCapabilityStatementRestSecurityComponent(src.security);

  for t1 in src.resourceList do
  begin
    tgt.resourceList.add(convertCapabilityStatementRestResourceComponent(t1));
  end;
  for t2 in src.interactionList do
  begin
    tgt.interactionList.add(convertSystemInteractionComponent(t2));
  end;
  for t3 in src.searchParamList do
  begin
    tgt.searchParamList.add(convertCapabilityStatementRestResourceSearchParamComponent(t3));
  end;
  for t4 in src.operationList do
  begin
    tgt.operationList.add(convertCapabilityStatementRestOperationComponent(t4));
  end;
  for t5 in src.compartmentList do
  begin
    tgt.compartmentList.add(convertUri(t5));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementRestSecurityComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementRestSecurity) : FHIR.R4.Resources.TFhirCapabilityStatementRestSecurity;
var
  tgt : FHIR.R4.Resources.TFhirCapabilityStatementRestSecurity;
  t : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCapabilityStatementRestSecurity.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.cors := src.cors;

  for t in src.serviceList do
  begin
    tgt.serviceList.add(convertCodeableConcept(t));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementRestSecurityComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementRestSecurity) : FHIR.R3.Resources.TFhirCapabilityStatementRestSecurity;
var
  tgt : FHIR.R3.Resources.TFhirCapabilityStatementRestSecurity;
  t : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCapabilityStatementRestSecurity.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.cors := src.cors;

  for t in src.serviceList do
  begin
    tgt.serviceList.add(convertCodeableConcept(t));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementRestResourceComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementRestResource) : FHIR.R4.Resources.TFhirCapabilityStatementRestResource;
var
  tgt : FHIR.R4.Resources.TFhirCapabilityStatementRestResource;
  t1 : FHIR.R3.Resources.TFhirCapabilityStatementRestResourceInteraction;
  t2 : FHIR.R3.Types.TFhirReferenceHandlingPolicyEnum;
  a : FHIR.R4.Types.TFhirReferenceHandlingPolicyEnumList;
  t3 : FHIR.R3.Types.TFhirString;
  t4: FHIR.R3.Types.TFhirString;
  t5 : FHIR.R3.Resources.TFhirCapabilityStatementRestResourceSearchParam;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCapabilityStatementRestResource.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_element := convertType(src.type_Element) as FHIR.R4.Types.TFHIREnum;

  if (src.profile <> nil) then
    tgt.profileElement := convertReferenceToCanonical(src.profile);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  for t1 in src.interactionList do
  begin
    tgt.interactionList.add(convertResourceInteractionComponent(t1));
  end;
  tgt.versioning := convertResourceVersionPolicy(src.versioning);
  tgt.readHistory := src.readHistory;
  tgt.updateCreate := src.updateCreate;
  tgt.conditionalCreate := src.conditionalCreate;
  tgt.conditionalRead := convertConditionalReadStatus(src.conditionalRead);
  tgt.conditionalUpdate := src.conditionalUpdate;
  tgt.conditionalDelete := convertConditionalDeleteStatus(src.conditionalDelete);

  a := [];
  for t2 := low(FHIR.R3.Types.TFhirReferenceHandlingPolicyEnum) to high(FHIR.R3.Types.TFhirReferenceHandlingPolicyEnum) do
    if t2 in src.referencePolicy then
      a := a + [convertReferenceHandlingPolicy(t2)];
  tgt.referencePolicy := a;

  for t3 in src.searchIncludeList do
  begin
    tgt.searchIncludeList.add(convertString(t3));
  end;
  for t4 in src.searchRevIncludeList do
  begin
    tgt.searchRevIncludeList.add(convertString(t4));
  end;
  for t5 in src.searchParamList do
  begin
    tgt.searchParamList.add(convertCapabilityStatementRestResourceSearchParamComponent(t5));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementRestResourceComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementRestResource) : FHIR.R3.Resources.TFhirCapabilityStatementRestResource;
var
  tgt : FHIR.R3.Resources.TFhirCapabilityStatementRestResource;
  t1 : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceInteraction;
  t2 : FHIR.R4.Types.TFhirReferenceHandlingPolicyEnum;
  a : FHIR.R3.Types.TFhirReferenceHandlingPolicyEnumList;
  t3 : FHIR.R4.Types.TFhirString;
  t4 : FHIR.R4.Types.TFhirString;
  t5 : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceSearchParam;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCapabilityStatementRestResource.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_element := convertType(src.type_Element) as FHIR.R3.Types.TFHIREnum;

  if (src.profile <> '') then
    tgt.profile := convertCanonicalToReference(src.profileElement);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  for t1 in src.interactionList do
  begin
    tgt.interactionList.add(convertResourceInteractionComponent(t1));
  end;
  tgt.versioning := convertResourceVersionPolicy(src.versioning);
  tgt.readHistory := src.readHistory;
  tgt.updateCreate := src.updateCreate;
  tgt.conditionalCreate := src.conditionalCreate;
  tgt.conditionalRead := convertConditionalReadStatus(src.conditionalRead);
  tgt.conditionalUpdate := src.conditionalUpdate;
  tgt.conditionalDelete := convertConditionalDeleteStatus(src.conditionalDelete);

  a := [];
  for t2 := low(FHIR.R4.Types.TFhirReferenceHandlingPolicyEnum) to high(FHIR.R4.Types.TFhirReferenceHandlingPolicyEnum) do
    if t2 in src.referencePolicy then
      a := a + [convertReferenceHandlingPolicy(t2)];
  tgt.referencePolicy := a;

  for t3 in src.searchIncludeList do
  begin
    tgt.searchIncludeList.add(convertString(t3));
  end;
  for t4 in src.searchRevIncludeList do
  begin
    tgt.searchRevIncludeList.add(convertString(t4));
  end;
  for t5 in src.searchParamList do
  begin
    tgt.searchParamList.add(convertCapabilityStatementRestResourceSearchParamComponent(t5));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertResourceInteractionComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementRestResourceInteraction) : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceInteraction;
var
  tgt : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceInteraction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCapabilityStatementRestResourceInteraction.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertTypeRestfulInteraction(src.code);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertResourceInteractionComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceInteraction) : FHIR.R3.Resources.TFhirCapabilityStatementRestResourceInteraction;
var
  tgt : FHIR.R3.Resources.TFhirCapabilityStatementRestResourceInteraction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCapabilityStatementRestResourceInteraction.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertTypeRestfulInteraction(src.code);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementRestResourceSearchParamComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementRestResourceSearchParam) : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceSearchParam;
var
  tgt : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceSearchParam;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCapabilityStatementRestResourceSearchParam.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.definition <> '') then
    tgt.definition := src.definition;

  tgt.type_ := convertSearchParamType(src.type_);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementRestResourceSearchParamComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceSearchParam) : FHIR.R3.Resources.TFhirCapabilityStatementRestResourceSearchParam;
var
  tgt : FHIR.R3.Resources.TFhirCapabilityStatementRestResourceSearchParam;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCapabilityStatementRestResourceSearchParam.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.definition <> '') then
    tgt.definition := src.definition;

  tgt.type_ := convertSearchParamType(src.type_);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSystemInteractionComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementRestInteraction) : FHIR.R4.Resources.TFhirCapabilityStatementRestInteraction;
var
  tgt : FHIR.R4.Resources.TFhirCapabilityStatementRestInteraction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCapabilityStatementRestInteraction.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertSystemRestfulInteraction(src.code);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSystemInteractionComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementRestInteraction) : FHIR.R3.Resources.TFhirCapabilityStatementRestInteraction;
var
  tgt : FHIR.R3.Resources.TFhirCapabilityStatementRestInteraction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCapabilityStatementRestInteraction.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertSystemRestfulInteraction(src.code);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementRestOperationComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementRestOperation) : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceOperation;
var
  tgt : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceOperation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCapabilityStatementRestResourceOperation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.definition <> nil) then
    tgt.definitionElement := convertReferenceToCanonical(src.definition);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementRestOperationComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementRestResourceOperation) : FHIR.R3.Resources.TFhirCapabilityStatementRestOperation;
var
  tgt : FHIR.R3.Resources.TFhirCapabilityStatementRestOperation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCapabilityStatementRestOperation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.definition <> '') then
    tgt.definition := convertCanonicalToReference(src.definitionElement);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementMessagingComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementMessaging) : FHIR.R4.Resources.TFhirCapabilityStatementMessaging;
var
  tgt : FHIR.R4.Resources.TFhirCapabilityStatementMessaging;
  t : FHIR.R3.Resources.TFhirCapabilityStatementMessagingEndpoint;
  t1 : FHIR.R3.Resources.TFhirCapabilityStatementMessagingSupportedMessage;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCapabilityStatementMessaging.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.endpointList do
  begin
    tgt.endpointList.add(convertCapabilityStatementMessagingEndpointComponent(t));
  end;
  tgt.reliableCache := src.reliableCache;

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  for t1 in src.supportedMessageList do
  begin
    tgt.supportedMessageList.add(convertCapabilityStatementMessagingSupportedMessageComponent(t1));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementMessagingComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementMessaging) : FHIR.R3.Resources.TFhirCapabilityStatementMessaging;
var
  tgt : FHIR.R3.Resources.TFhirCapabilityStatementMessaging;
  t : FHIR.R4.Resources.TFhirCapabilityStatementMessagingEndpoint;
  t2 : FHIR.R4.Resources.TFhirCapabilityStatementMessagingSupportedMessage;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCapabilityStatementMessaging.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.endpointList do
  begin
    tgt.endpointList.add(convertCapabilityStatementMessagingEndpointComponent(t));
  end;
  tgt.reliableCache := src.reliableCache;

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  for t2 in src.supportedMessageList do
  begin
    tgt.supportedMessageList.add(convertCapabilityStatementMessagingSupportedMessageComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementMessagingEndpointComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementMessagingEndpoint) : FHIR.R4.Resources.TFhirCapabilityStatementMessagingEndpoint;
var
  tgt : FHIR.R4.Resources.TFhirCapabilityStatementMessagingEndpoint;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCapabilityStatementMessagingEndpoint.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.protocol <> nil) then
    tgt.protocol := convertCoding(src.protocol);

  if (src.address <> '') then
    tgt.address := src.address;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementMessagingEndpointComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementMessagingEndpoint) : FHIR.R3.Resources.TFhirCapabilityStatementMessagingEndpoint;
var
  tgt : FHIR.R3.Resources.TFhirCapabilityStatementMessagingEndpoint;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCapabilityStatementMessagingEndpoint.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.protocol <> nil) then
    tgt.protocol := convertCoding(src.protocol);

  if (src.address <> '') then
    tgt.address := src.address;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementMessagingSupportedMessageComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementMessagingSupportedMessage) : FHIR.R4.Resources.TFhirCapabilityStatementMessagingSupportedMessage;
var
  tgt : FHIR.R4.Resources.TFhirCapabilityStatementMessagingSupportedMessage;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCapabilityStatementMessagingSupportedMessage.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.mode := convertEventCapabilityMode(src.mode);

  if (src.definition <> nil) then
    tgt.definitionElement := convertReferenceToCanonical(src.definition);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementMessagingSupportedMessageComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementMessagingSupportedMessage) : FHIR.R3.Resources.TFhirCapabilityStatementMessagingSupportedMessage;
var
  tgt : FHIR.R3.Resources.TFhirCapabilityStatementMessagingSupportedMessage;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCapabilityStatementMessagingSupportedMessage.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.mode := convertEventCapabilityMode(src.mode);

  if (src.definition <> '') then
    tgt.definition := convertCanonicalToReference(src.definitionElement);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementDocumentComponent(src : FHIR.R3.Resources.TFhirCapabilityStatementDocument) : FHIR.R4.Resources.TFhirCapabilityStatementDocument;
var
  tgt : FHIR.R4.Resources.TFhirCapabilityStatementDocument;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCapabilityStatementDocument.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.mode := convertDocumentMode(src.mode);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  if (src.profile <> nil) then
    tgt.profileElement := convertReferenceToCanonical(src.profile);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCapabilityStatementDocumentComponent(src : FHIR.R4.Resources.TFhirCapabilityStatementDocument) : FHIR.R3.Resources.TFhirCapabilityStatementDocument;
var
  tgt : FHIR.R3.Resources.TFhirCapabilityStatementDocument;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCapabilityStatementDocument.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.mode := convertDocumentMode(src.mode);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  if (src.profile <> '') then
    tgt.profile := convertCanonicalToReference(src.profileElement);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCareTeam(src : FHIR.R3.Resources.TFhirCareTeam) : FHIR.R4.Resources.TFhirCareTeam;
var
  tgt : FHIR.R4.Resources.TFhirCareTeam;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
  t3 : FHIR.R3.Resources.TFhirCareTeamParticipant;
  t4 : FHIR.R3.Types.TFhirCodeableConcept;
  t5 : FHIR.R3.Types.TFhirReference;
  t6 : FHIR.R3.Types.TFhirReference;
  t7 : FHIR.R3.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCareTeam.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertCareTeamStatus(src.status);

  for t2 in src.categoryList do
  begin
    tgt.categoryList.add(convertCodeableConcept(t2));
  end;
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.context <> nil) then
    tgt.encounter := convertReference(src.context);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  for t3 in src.participantList do
  begin
    tgt.participantList.add(convertCareTeamParticipantComponent(t3));
  end;
  for t4 in src.reasonCodeList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t4));
  end;
  for t5 in src.reasonReferenceList do
  begin
    tgt.reasonReferenceList.add(convertReference(t5));
  end;
  for t6 in src.managingOrganizationList do
  begin
    tgt.managingOrganizationList.add(convertReference(t6));
  end;
  for t7 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCareTeam(src : FHIR.R4.Resources.TFhirCareTeam) : FHIR.R3.Resources.TFhirCareTeam;
var
  tgt : FHIR.R3.Resources.TFhirCareTeam;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirCodeableConcept;
  t3 : FHIR.R4.Resources.TFhirCareTeamParticipant;
  t4 : FHIR.R4.Types.TFhirCodeableConcept;
  t5 : FHIR.R4.Types.TFhirReference;
  t6 : FHIR.R4.Types.TFhirReference;
  t7 : FHIR.R4.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCareTeam.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertCareTeamStatus(src.status);

  for t2 in src.categoryList do
  begin
    tgt.categoryList.add(convertCodeableConcept(t2));
  end;
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.encounter <> nil) then
    tgt.context := convertReference(src.encounter);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  for t3 in src.participantList do
  begin
    tgt.participantList.add(convertCareTeamParticipantComponent(t3));
  end;
  for t4 in src.reasonCodeList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t4));
  end;
  for t5 in src.reasonReferenceList do
  begin
    tgt.reasonReferenceList.add(convertReference(t5));
  end;
  for t6 in src.managingOrganizationList do
  begin
    tgt.managingOrganizationList.add(convertReference(t6));
  end;
  for t7 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCareTeamParticipantComponent(src : FHIR.R3.Resources.TFhirCareTeamParticipant) : FHIR.R4.Resources.TFhirCareTeamParticipant;
var
  tgt : FHIR.R4.Resources.TFhirCareTeamParticipant;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCareTeamParticipant.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.role <> nil) then
    tgt.roleList.Add(convertCodeableConcept(src.role));

  if (src.member <> nil) then
    tgt.member := convertReference(src.member);

  if (src.onBehalfOf <> nil) then
    tgt.onBehalfOf := convertReference(src.onBehalfOf);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCareTeamParticipantComponent(src : FHIR.R4.Resources.TFhirCareTeamParticipant) : FHIR.R3.Resources.TFhirCareTeamParticipant;
var
  tgt : FHIR.R3.Resources.TFhirCareTeamParticipant;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCareTeamParticipant.Create();
  try
  copyBackboneElement(src, tgt);
  if (not src.roleList.IsEmpty) then
    tgt.role := convertCodeableConcept(src.roleList[0]);

  if (src.member <> nil) then
    tgt.member := convertReference(src.member);

  if (src.onBehalfOf <> nil) then
    tgt.onBehalfOf := convertReference(src.onBehalfOf);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertClinicalImpression(src : FHIR.R3.Resources.TFhirClinicalImpression) : FHIR.R4.Resources.TFhirClinicalImpression;
var
  tgt : FHIR.R4.Resources.TFhirClinicalImpression;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirReference;
  t3 : FHIR.R3.Resources.TFhirClinicalImpressionInvestigation;
  t4 : FHIR.R3.Types.TFhirUri;
  t5 : FHIR.R3.Resources.TFhirClinicalImpressionFinding;
  t6 : FHIR.R3.Types.TFhirCodeableConcept;
  t7 : FHIR.R3.Types.TFhirReference;
  t8 : FHIR.R3.Types.TFhirReference;
  t9 : FHIR.R3.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirClinicalImpression.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertClinicalImpressionStatus(src.status);

  tgt.code := convertCodeableConcept(src.code);

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.context <> nil) then
    tgt.encounter := convertReference(src.context);

  if (src.effective <> nil) then
    tgt.effective := convertType(src.effective);

  tgt.date := src.date;

  if (src.assessor <> nil) then
    tgt.assessor := convertReference(src.assessor);

  if (src.previous <> nil) then
    tgt.previous := convertReference(src.previous);

  for t2 in src.problemList do
  begin
    tgt.problemList.add(convertReference(t2));
  end;
  for t3 in src.investigationList do
  begin
    tgt.investigationList.add(convertClinicalImpressionInvestigationComponent(t3));
  end;
  for t4 in src.protocolList do
  begin
    tgt.protocolList.add(convertUri(t4));
  end;
  if (src.summary <> '') then
    tgt.summary := src.summary;

  for t5 in src.findingList do
  begin
    tgt.findingList.add(convertClinicalImpressionFindingComponent(t5));
  end;
  for t6 in src.prognosisCodeableConceptList do
  begin
    tgt.prognosisCodeableConceptList.add(convertCodeableConcept(t6));
  end;
  for t7 in src.prognosisReferenceList do
  begin
    tgt.prognosisReferenceList.add(convertReference(t7));
  end;
  for t8 in src.actionList do
  begin
    tgt.supportingInfoList.add(convertReference(t8));
  end;
  for t9 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t9));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertClinicalImpression(src : FHIR.R4.Resources.TFhirClinicalImpression) : FHIR.R3.Resources.TFhirClinicalImpression;
var
  tgt : FHIR.R3.Resources.TFhirClinicalImpression;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirReference;
  t3 : FHIR.R4.Resources.TFhirClinicalImpressionInvestigation;
  t4 : FHIR.R4.Types.TFhirUri;
  t5 : FHIR.R4.Resources.TFhirClinicalImpressionFinding;
  t6 : FHIR.R4.Types.TFhirCodeableConcept;
  t7 : FHIR.R4.Types.TFhirReference;
  t8 : FHIR.R4.Types.TFhirReference;
  t9 : FHIR.R4.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirClinicalImpression.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertClinicalImpressionStatus(src.status);

  tgt.code := convertCodeableConcept(src.code);

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.encounter <> nil) then
    tgt.context := convertReference(src.encounter);

  if (src.effective <> nil) then
    tgt.effective := convertType(src.effective);

  tgt.date := src.date;

  if (src.assessor <> nil) then
    tgt.assessor := convertReference(src.assessor);

  if (src.previous <> nil) then
    tgt.previous := convertReference(src.previous);

  for t2 in src.problemList do
  begin
    tgt.problemList.add(convertReference(t2));
  end;
  for t3 in src.investigationList do
  begin
    tgt.investigationList.add(convertClinicalImpressionInvestigationComponent(t3));
  end;
  for t4 in src.protocolList do
  begin
    tgt.protocolList.add(convertUri(t4));
  end;
  if (src.summary <> '') then
    tgt.summary := src.summary;

  for t5 in src.findingList do
  begin
    tgt.findingList.add(convertClinicalImpressionFindingComponent(t5));
  end;
  for t6 in src.prognosisCodeableConceptList do
  begin
    tgt.prognosisCodeableConceptList.add(convertCodeableConcept(t6));
  end;
  for t7 in src.prognosisReferenceList do
  begin
    tgt.prognosisReferenceList.add(convertReference(t7));
  end;
  for t8 in src.supportingInfoList do
  begin
    tgt.actionList.add(convertReference(t8));
  end;
  for t9 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t9));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertClinicalImpressionInvestigationComponent(src : FHIR.R3.Resources.TFhirClinicalImpressionInvestigation) : FHIR.R4.Resources.TFhirClinicalImpressionInvestigation;
var
  tgt : FHIR.R4.Resources.TFhirClinicalImpressionInvestigation;
  t : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirClinicalImpressionInvestigation.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertCodeableConcept(src.code);

  for t in src.itemList do
  begin
    tgt.itemList.add(convertReference(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertClinicalImpressionInvestigationComponent(src : FHIR.R4.Resources.TFhirClinicalImpressionInvestigation) : FHIR.R3.Resources.TFhirClinicalImpressionInvestigation;
var
  tgt : FHIR.R3.Resources.TFhirClinicalImpressionInvestigation;
  t : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirClinicalImpressionInvestigation.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertCodeableConcept(src.code);

  for t in src.itemList do
  begin
    tgt.itemList.add(convertReference(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertClinicalImpressionFindingComponent(src : FHIR.R3.Resources.TFhirClinicalImpressionFinding) : FHIR.R4.Resources.TFhirClinicalImpressionFinding;
var
  tgt : FHIR.R4.Resources.TFhirClinicalImpressionFinding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirClinicalImpressionFinding.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.item is FHIR.R3.Types.TFHIRCodeableConcept) then
    tgt.itemCodeableConcept := convertCodeableConcept(src.item as FHIR.R3.Types.TFHIRCodeableConcept);

  if (src.item is FHIR.R3.Types.TFHIRReference) then
    tgt.itemReference := convertReference(src.item as FHIR.R3.Types.TFHIRReference);

  if (src.basis <> '') then
    tgt.basis := src.basis;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertClinicalImpressionFindingComponent(src : FHIR.R4.Resources.TFhirClinicalImpressionFinding) : FHIR.R3.Resources.TFhirClinicalImpressionFinding;
var
  tgt : FHIR.R3.Resources.TFhirClinicalImpressionFinding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirClinicalImpressionFinding.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.itemCodeableConcept <> nil) then
    tgt.item := convertType(src.itemCodeableConcept)
  else
    if (src.itemReference <> nil) then
      tgt.item := convertType(src.itemReference);

  if (src.basis <> '') then
    tgt.basis := src.basis;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCodeSystem(src : FHIR.R3.Resources.TFhirCodeSystem) : FHIR.R4.Resources.TFhirCodeSystem;
var
  tgt : FHIR.R4.Resources.TFhirCodeSystem;
  t1 : FHIR.R3.Types.TFhirContactDetail;
  t2 : FHIR.R3.Types.TFhirUsageContext;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Resources.TFhirCodeSystemFilter;
  t5 : FHIR.R3.Resources.TFhirCodeSystemProperty;
  t6 : FHIR.R3.Resources.TFhirCodeSystemConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCodeSystem.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.identifier <> nil) then
    tgt.identifierList.add(convertIdentifier(src.identifier));

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  tgt.caseSensitive := src.caseSensitive;

  if (src.valueSet <> '') then
    tgt.valueSet := src.valueSet;

  tgt.hierarchyMeaning := convertCodeSystemHierarchyMeaning(src.hierarchyMeaning);

  tgt.compositional := src.compositional;

  tgt.versionNeeded := src.versionNeeded;

  tgt.content := convertCodeSystemContentMode(src.content);

  tgt.count := src.count;

  for t4 in src.filterList do
  begin
    tgt.filterList.add(convertCodeSystemFilterComponent(t4));
  end;
  for t5 in src.property_List do
  begin
    tgt.property_List.add(convertPropertyComponent(t5));
  end;
  for t6 in src.conceptList do
  begin
    tgt.conceptList.add(convertConceptDefinitionComponent(t6));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCodeSystem(src : FHIR.R4.Resources.TFhirCodeSystem) : FHIR.R3.Resources.TFhirCodeSystem;
var
  tgt : FHIR.R3.Resources.TFhirCodeSystem;
  t1 : FHIR.R4.Types.TFhirContactDetail;
  t2 : FHIR.R4.Types.TFhirUsageContext;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Resources.TFhirCodeSystemFilter;
  t5 : FHIR.R4.Resources.TFhirCodeSystemProperty;
  t6 : FHIR.R4.Resources.TFhirCodeSystemConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCodeSystem.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (not src.identifierList.IsEmpty) then
    tgt.identifier := convertIdentifier(src.identifierList[0]);

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  tgt.caseSensitive := src.caseSensitive;

  if (src.valueSet <> '') then
    tgt.valueSet := src.valueSet;

  tgt.hierarchyMeaning := convertCodeSystemHierarchyMeaning(src.hierarchyMeaning);

  tgt.compositional := src.compositional;

  tgt.versionNeeded := src.versionNeeded;

  tgt.content := convertCodeSystemContentMode(src.content);

  tgt.count := src.count;

  for t4 in src.filterList do
  begin
    tgt.filterList.add(convertCodeSystemFilterComponent(t4));
  end;
  for t5 in src.property_List do
  begin
    tgt.property_List.add(convertPropertyComponent(t5));
  end;
  for t6 in src.conceptList do
  begin
    tgt.conceptList.add(convertConceptDefinitionComponent(t6));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCodeSystemFilterComponent(src : FHIR.R3.Resources.TFhirCodeSystemFilter) : FHIR.R4.Resources.TFhirCodeSystemFilter;
var
  tgt : FHIR.R4.Resources.TFhirCodeSystemFilter;
  t : FHIR.R3.Types.TFhirFilterOperatorEnum;
  a : FHIR.R4.Types.TFhirFilterOperatorEnumList;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCodeSystemFilter.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.code <> '') then
    tgt.code := src.code;

  if (src.description <> '') then
    tgt.description := src.description;

  a := [];
  for t := low(FHIR.R3.Types.TFhirFilterOperatorEnum) to high(FHIR.R3.Types.TFhirFilterOperatorEnum) do
    if t in src.operator then
      a := a + [convertFilterOperator(t)];
  tgt.operator := a;

  if (src.value <> '') then
    tgt.value := src.value;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCodeSystemFilterComponent(src : FHIR.R4.Resources.TFhirCodeSystemFilter) : FHIR.R3.Resources.TFhirCodeSystemFilter;
var
  tgt : FHIR.R3.Resources.TFhirCodeSystemFilter;
  t : FHIR.R4.Types.TFhirFilterOperatorEnum;
  a : FHIR.R3.Types.TFhirFilterOperatorEnumList;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCodeSystemFilter.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.code <> '') then
    tgt.code := src.code;

  if (src.description <> '') then
    tgt.description := src.description;

  a := [];
  for t := low(FHIR.R4.Types.TFhirFilterOperatorEnum) to high(FHIR.R4.Types.TFhirFilterOperatorEnum) do
    if t in src.operator then
      a := a + [convertFilterOperator(t)];
  tgt.operator := a;
  if (src.value <> '') then
    tgt.value := src.value;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPropertyComponent(src : FHIR.R3.Resources.TFhirCodeSystemProperty) : FHIR.R4.Resources.TFhirCodeSystemProperty;
var
  tgt : FHIR.R4.Resources.TFhirCodeSystemProperty;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCodeSystemProperty.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.code <> '') then
    tgt.code := src.code;

  if (src.uri <> '') then
    tgt.uri := src.uri;

  if (src.description <> '') then
    tgt.description := src.description;

  tgt.type_ := convertPropertyType(src.type_);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPropertyComponent(src : FHIR.R4.Resources.TFhirCodeSystemProperty) : FHIR.R3.Resources.TFhirCodeSystemProperty;
var
  tgt : FHIR.R3.Resources.TFhirCodeSystemProperty;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCodeSystemProperty.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.code <> '') then
    tgt.code := src.code;

  if (src.uri <> '') then
    tgt.uri := src.uri;

  if (src.description <> '') then
    tgt.description := src.description;

  tgt.type_ := convertPropertyType(src.type_);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptDefinitionComponent(src : FHIR.R3.Resources.TFhirCodeSystemConcept) : FHIR.R4.Resources.TFhirCodeSystemConcept;
var
  tgt : FHIR.R4.Resources.TFhirCodeSystemConcept;
  t1 : FHIR.R3.Resources.TFhirCodeSystemConceptDesignation;
  t2 : FHIR.R3.Resources.TFhirCodeSystemConceptProperty;
  t3 : FHIR.R3.Resources.TFhirCodeSystemConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCodeSystemConcept.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.code <> '') then
    tgt.code := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  if (src.definition <> '') then
    tgt.definition := src.definition;

  for t1 in src.designationList do
  begin
    tgt.designationList.add(convertConceptDefinitionDesignationComponent(t1));
  end;
  for t2 in src.property_List do
  begin
    tgt.property_List.add(convertConceptPropertyComponent(t2));
  end;
  for t3 in src.conceptList do
  begin
    tgt.conceptList.add(convertConceptDefinitionComponent(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptDefinitionComponent(src : FHIR.R4.Resources.TFhirCodeSystemConcept) : FHIR.R3.Resources.TFhirCodeSystemConcept;
var
  tgt : FHIR.R3.Resources.TFhirCodeSystemConcept;
  t1 : FHIR.R4.Resources.TFhirCodeSystemConceptDesignation;
  t2 : FHIR.R4.Resources.TFhirCodeSystemConceptProperty;
  t3 : FHIR.R4.Resources.TFhirCodeSystemConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCodeSystemConcept.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.code <> '') then
    tgt.code := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  if (src.definition <> '') then
    tgt.definition := src.definition;

  for t1 in src.designationList do
  begin
    tgt.designationList.add(convertConceptDefinitionDesignationComponent(t1));
  end;
  for t2 in src.property_List do
  begin
    tgt.property_List.add(convertConceptPropertyComponent(t2));
  end;
  for t3 in src.conceptList do
  begin
    tgt.conceptList.add(convertConceptDefinitionComponent(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptDefinitionDesignationComponent(src : FHIR.R3.Resources.TFhirCodeSystemConceptDesignation) : FHIR.R4.Resources.TFhirCodeSystemConceptDesignation;
var
  tgt : FHIR.R4.Resources.TFhirCodeSystemConceptDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCodeSystemConceptDesignation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.language <> '') then
    tgt.language := src.language;

  if (src.use <> nil) then
    tgt.use := convertCoding(src.use);

  if (src.value <> '') then
    tgt.value := src.value;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptDefinitionDesignationComponent(src : FHIR.R4.Resources.TFhirCodeSystemConceptDesignation) : FHIR.R3.Resources.TFhirCodeSystemConceptDesignation;
var
  tgt : FHIR.R3.Resources.TFhirCodeSystemConceptDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCodeSystemConceptDesignation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.language <> '') then
    tgt.language := src.language;

  if (src.use <> nil) then
    tgt.use := convertCoding(src.use);

  if (src.value <> '') then
    tgt.value := src.value;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptPropertyComponent(src : FHIR.R3.Resources.TFhirCodeSystemConceptProperty) : FHIR.R4.Resources.TFhirCodeSystemConceptProperty;
var
  tgt : FHIR.R4.Resources.TFhirCodeSystemConceptProperty;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCodeSystemConceptProperty.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.code <> '') then
    tgt.code := src.code;

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptPropertyComponent(src : FHIR.R4.Resources.TFhirCodeSystemConceptProperty) : FHIR.R3.Resources.TFhirCodeSystemConceptProperty;
var
  tgt : FHIR.R3.Resources.TFhirCodeSystemConceptProperty;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCodeSystemConceptProperty.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.code <> '') then
    tgt.code := src.code;

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCommunication(src : FHIR.R3.Resources.TFhirCommunication) : FHIR.R4.Resources.TFhirCommunication;
var
  tgt : FHIR.R4.Resources.TFhirCommunication;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirReference;
  t3 : FHIR.R3.Types.TFhirReference;
  t4 : FHIR.R3.Types.TFhirReference;
  t5 : FHIR.R3.Types.TFhirCodeableConcept;
  t6 : FHIR.R3.Types.TFhirCodeableConcept;
  t7 : FHIR.R3.Types.TFhirReference;
  t8 : FHIR.R3.Types.TFhirCodeableConcept;
  t9 : FHIR.R3.Types.TFhirReference;
  ta : FHIR.R3.Resources.TFhirCommunicationPayload;
  tb : FHIR.R3.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCommunication.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.definitionList do
  begin
    tgt.instantiatesCanonicalList.add(FHIR.R4.Types.TFHIRCanonical.Create(t2.reference));
  end;
  for t3 in src.basedOnList do
  begin
    tgt.basedOnList.add(convertReference(t3));
  end;
  for t4 in src.partOfList do
  begin
    tgt.partOfList.add(convertReference(t4));
  end;
  if (src.notDone) then
    tgt.Status := FHIR.R4.Types.TFhirEventStatusEnum.EventStatusNull
  else
    tgt.status := convertCommunicationStatus(src.status);


  if (src.notDoneReason <> nil) then
    tgt.statusReason := convertCodeableConcept(src.notDoneReason);

  for t5 in src.categoryList do
  begin
    tgt.categoryList.add(convertCodeableConcept(t5));
  end;
  for t6 in src.mediumList do
  begin
    tgt.mediumList.add(convertCodeableConcept(t6));
  end;
  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  for t7 in src.recipientList do
  begin
    tgt.recipientList.add(convertReference(t7));
  end;
  if (src.context <> nil) then
    tgt.encounter := convertReference(src.context);

  tgt.sent := src.sent;
  tgt.received := src.received;

  if (src.sender <> nil) then
    tgt.sender := convertReference(src.sender);

  for t8 in src.reasonCodeList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t8));
  end;
  for t9 in src.reasonReferenceList do
  begin
    tgt.reasonReferenceList.add(convertReference(t9));
  end;
  for ta in src.payloadList do
  begin
    tgt.payloadList.add(convertCommunicationPayloadComponent(ta));
  end;
  for tb in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(tb));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCommunication(src : FHIR.R4.Resources.TFhirCommunication) : FHIR.R3.Resources.TFhirCommunication;
var
  tgt : FHIR.R3.Resources.TFhirCommunication;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirUri;
  t3 : FHIR.R4.Types.TFhirReference;
  t4 : FHIR.R4.Types.TFhirReference;
  t5 : FHIR.R4.Types.TFhirCodeableConcept;
  t6 : FHIR.R4.Types.TFhirCodeableConcept;
  t7 : FHIR.R4.Types.TFhirReference;
  t8 : FHIR.R4.Types.TFhirCodeableConcept;
  t9 : FHIR.R4.Types.TFhirReference;
  ta : FHIR.R4.Resources.TFhirCommunicationPayload;
  tb : FHIR.R4.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCommunication.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.instantiatesCanonicalList do
  begin
    tgt.definitionList.add(FHIR.R3.Types.TFhirReference.create(t2.Value));
  end;
  for t3 in src.basedOnList do
  begin
    tgt.basedOnList.add(convertReference(t3));
  end;
  for t4 in src.partOfList do
  begin
    tgt.partOfList.add(convertReference(t4));
  end;
  if (src.Status = FHIR.R4.Types.TFhirEventStatusEnum.EventStatusNull) then
      tgt.notDone := true
  else
      tgt.status := convertCommunicationStatus(src.status);


  if (src.statusReason <> nil) then
    tgt.notDoneReason := convertCodeableConcept(src.statusReason);

  for t5 in src.categoryList do
  begin
    tgt.categoryList.add(convertCodeableConcept(t5));
  end;
  for t6 in src.mediumList do
  begin
    tgt.mediumList.add(convertCodeableConcept(t6));
  end;
  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  for t7 in src.recipientList do
  begin
    tgt.recipientList.add(convertReference(t7));
  end;
  if (src.encounter <> nil) then
    tgt.context := convertReference(src.encounter);

  tgt.sent := src.sent;
  tgt.received := src.received;

  if (src.sender <> nil) then
    tgt.sender := convertReference(src.sender);

  for t8 in src.reasonCodeList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t8));
  end;
  for t9 in src.reasonReferenceList do
  begin
    tgt.reasonReferenceList.add(convertReference(t9));
  end;
  for ta in src.payloadList do
  begin
    tgt.payloadList.add(convertCommunicationPayloadComponent(ta));
  end;
  for tb in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(tb));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCommunicationPayloadComponent(src : FHIR.R3.Resources.TFhirCommunicationPayload) : FHIR.R4.Resources.TFhirCommunicationPayload;
var
  tgt : FHIR.R4.Resources.TFhirCommunicationPayload;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCommunicationPayload.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.content <> nil) then
    tgt.content := convertType(src.content);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCommunicationPayloadComponent(src : FHIR.R4.Resources.TFhirCommunicationPayload) : FHIR.R3.Resources.TFhirCommunicationPayload;
var
  tgt : FHIR.R3.Resources.TFhirCommunicationPayload;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCommunicationPayload.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.content <> nil) then
    tgt.content := convertType(src.content);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCompartmentDefinition(src : FHIR.R3.Resources.TFhirCompartmentDefinition) : FHIR.R4.Resources.TFhirCompartmentDefinition;
var
  tgt : FHIR.R4.Resources.TFhirCompartmentDefinition;
  t1 : FHIR.R3.Types.TFhirContactDetail;
  t2 : FHIR.R3.Types.TFhirUsageContext;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Resources.TFhirCompartmentDefinitionResource;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCompartmentDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  tgt.code := convertCompartmentType(src.code);

  tgt.search := src.search;

  for t4 in src.resourceList do
  begin
    tgt.resourceList.add(convertCompartmentDefinitionResourceComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCompartmentDefinition(src : FHIR.R4.Resources.TFhirCompartmentDefinition) : FHIR.R3.Resources.TFhirCompartmentDefinition;
var
  tgt : FHIR.R3.Resources.TFhirCompartmentDefinition;
  t1 : FHIR.R4.Types.TFhirContactDetail;
  t2 : FHIR.R4.Types.TFhirUsageContext;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Resources.TFhirCompartmentDefinitionResource;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCompartmentDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  tgt.code := convertCompartmentType(src.code);

  tgt.search := src.search;

  for t4 in src.resourceList do
  begin
    tgt.resourceList.add(convertCompartmentDefinitionResourceComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCompartmentDefinitionResourceComponent(src : FHIR.R3.Resources.TFhirCompartmentDefinitionResource) : FHIR.R4.Resources.TFhirCompartmentDefinitionResource;
var
  tgt : FHIR.R4.Resources.TFhirCompartmentDefinitionResource;
  t : FHIR.R3.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCompartmentDefinitionResource.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertActivityDefinitionKind(src.code);

  for t in src.paramList do
  begin
    tgt.paramList.add(convertString(t));
  end;
  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCompartmentDefinitionResourceComponent(src : FHIR.R4.Resources.TFhirCompartmentDefinitionResource) : FHIR.R3.Resources.TFhirCompartmentDefinitionResource;
var
  tgt : FHIR.R3.Resources.TFhirCompartmentDefinitionResource;
  t : FHIR.R4.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCompartmentDefinitionResource.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertActivityDefinitionKind(src.code);

  for t in src.paramList do
  begin
    tgt.paramList.add(convertString(t));
  end;
  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertComposition(src : FHIR.R3.Resources.TFhirComposition) : FHIR.R4.Resources.TFhirComposition;
var
  tgt : FHIR.R4.Resources.TFhirComposition;
  t1 : FHIR.R3.Types.TFhirReference;
  t2 : FHIR.R3.Resources.TFhirCompositionAttester;
  t3 : FHIR.R3.Resources.TFhirCompositionRelatesTo;
  t4 : FHIR.R3.Resources.TFhirCompositionEvent;
  t5 : FHIR.R3.Resources.TFhirCompositionSection;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirComposition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  tgt.status := convertCompositionStatus(src.status);

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.class_ <> nil) then
    tgt.categoryList.Add(convertCodeableConcept(src.class_));

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.encounter <> nil) then
    tgt.encounter := convertReference(src.encounter);

  tgt.date := src.date;

  for t1 in src.authorList do
  begin
    tgt.authorList.add(convertReference(t1));
  end;
  if (src.title <> '') then
    tgt.title := src.title;

  tgt.confidentiality := convertDocumentConfidentiality(src.confidentiality);

  for t2 in src.attesterList do
  begin
    tgt.attesterList.add(convertCompositionAttesterComponent(t2));
  end;
  if (src.custodian <> nil) then
    tgt.custodian := convertReference(src.custodian);

  for t3 in src.relatesToList do
  begin
    tgt.relatesToList.add(convertCompositionRelatesToComponent(t3));
  end;
  for t4 in src.eventList do
  begin
    tgt.eventList.add(convertCompositionEventComponent(t4));
  end;
  for t5 in src.sectionList do
  begin
    tgt.sectionList.add(convertSectionComponent(t5));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertComposition(src : FHIR.R4.Resources.TFhirComposition) : FHIR.R3.Resources.TFhirComposition;
var
  tgt : FHIR.R3.Resources.TFhirComposition;
  t1 : FHIR.R4.Types.TFhirReference;
  t2 : FHIR.R4.Resources.TFhirCompositionAttester;
  t3 : FHIR.R4.Resources.TFhirCompositionRelatesTo;
  t4 : FHIR.R4.Resources.TFhirCompositionEvent;
  t5 : FHIR.R4.Resources.TFhirCompositionSection;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirComposition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  tgt.status := convertCompositionStatus(src.status);

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.categoryList.Count > 0) then
    tgt.class_ := convertCodeableConcept(src.categoryList[0]);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.encounter <> nil) then
    tgt.encounter := convertReference(src.encounter);

  tgt.date := src.date;

  for t1 in src.authorList do
  begin
    tgt.authorList.add(convertReference(t1));
  end;
  if (src.title <> '') then
    tgt.title := src.title;

  tgt.confidentiality := convertDocumentConfidentiality(src.confidentiality);

  for t2 in src.attesterList do
  begin
    tgt.attesterList.add(convertCompositionAttesterComponent(t2));
  end;
  if (src.custodian <> nil) then
    tgt.custodian := convertReference(src.custodian);

  for t3 in src.relatesToList do
  begin
    tgt.relatesToList.add(convertCompositionRelatesToComponent(t3));
  end;
  for t4 in src.eventList do
  begin
    tgt.eventList.add(convertCompositionEventComponent(t4));
  end;
  for t5 in src.sectionList do
  begin
    tgt.sectionList.add(convertSectionComponent(t5));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCompositionAttesterComponent(src : FHIR.R3.Resources.TFhirCompositionAttester) : FHIR.R4.Resources.TFhirCompositionAttester;
var
  tgt : FHIR.R4.Resources.TFhirCompositionAttester;
  t : FHIR.R3.Types.TFhirCompositionAttestationModeEnum;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCompositionAttester.Create();
  try
  copyBackboneElement(src, tgt);
  for t := low(FHIR.R3.Types.TFhirCompositionAttestationModeEnum) to high(FHIR.R3.Types.TFhirCompositionAttestationModeEnum) do
    if t in src.mode then
      tgt.mode := convertCompositionAttestationMode(t);

  tgt.time := src.time.link;

  if (src.party <> nil) then
    tgt.party := convertReference(src.party);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCompositionAttesterComponent(src : FHIR.R4.Resources.TFhirCompositionAttester) : FHIR.R3.Resources.TFhirCompositionAttester;
var
  tgt : FHIR.R3.Resources.TFhirCompositionAttester;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCompositionAttester.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.mode := [convertCompositionAttestationMode(src.Mode)];

  tgt.time := src.time.link;

  if (src.party <> nil) then
    tgt.party := convertReference(src.party);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCompositionRelatesToComponent(src : FHIR.R3.Resources.TFhirCompositionRelatesTo) : FHIR.R4.Resources.TFhirCompositionRelatesTo;
var
  tgt : FHIR.R4.Resources.TFhirCompositionRelatesTo;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCompositionRelatesTo.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertDocumentRelationshipType(src.code);

  if (src.target <> nil) then
    tgt.target := convertType(src.target);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCompositionRelatesToComponent(src : FHIR.R4.Resources.TFhirCompositionRelatesTo) : FHIR.R3.Resources.TFhirCompositionRelatesTo;
var
  tgt : FHIR.R3.Resources.TFhirCompositionRelatesTo;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCompositionRelatesTo.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertDocumentRelationshipType(src.code);

  if (src.target <> nil) then
    tgt.target := convertType(src.target);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCompositionEventComponent(src : FHIR.R3.Resources.TFhirCompositionEvent) : FHIR.R4.Resources.TFhirCompositionEvent;
var
  tgt : FHIR.R4.Resources.TFhirCompositionEvent;
  t1 : FHIR.R3.Types.TFhirCodeableConcept;
  t2 : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCompositionEvent.Create();
  try
  copyBackboneElement(src, tgt);
  for t1 in src.codeList do
  begin
    tgt.codeList.add(convertCodeableConcept(t1));
  end;
  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  for t2 in src.detailList do
  begin
    tgt.detailList.add(convertReference(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCompositionEventComponent(src : FHIR.R4.Resources.TFhirCompositionEvent) : FHIR.R3.Resources.TFhirCompositionEvent;
var
  tgt : FHIR.R3.Resources.TFhirCompositionEvent;
  t1 : FHIR.R4.Types.TFhirCodeableConcept;
  t2 : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCompositionEvent.Create();
  try
  copyBackboneElement(src, tgt);
  for t1 in src.codeList do
  begin
    tgt.codeList.add(convertCodeableConcept(t1));
  end;
  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  for t2 in src.detailList do
  begin
    tgt.detailList.add(convertReference(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSectionComponent(src : FHIR.R3.Resources.TFhirCompositionSection) : FHIR.R4.Resources.TFhirCompositionSection;
var
  tgt : FHIR.R4.Resources.TFhirCompositionSection;
  t1 : FHIR.R3.Types.TFhirReference;
  t2 : FHIR.R3.Resources.TFhirCompositionSection;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCompositionSection.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.title <> '') then
    tgt.title := src.title;

  tgt.code := convertCodeableConcept(src.code);

  if (src.text <> nil) then
    tgt.text := convertNarrative(src.text);

  tgt.mode := convertSectionMode(src.mode);

  if (src.orderedBy <> nil) then
    tgt.orderedBy := convertCodeableConcept(src.orderedBy);

  for t1 in src.entryList do
  begin
    tgt.entryList.add(convertReference(t1));
  end;
  if (src.emptyReason <> nil) then
    tgt.emptyReason := convertCodeableConcept(src.emptyReason);

  for t2 in src.sectionList do
  begin
    tgt.sectionList.add(convertSectionComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSectionComponent(src : FHIR.R4.Resources.TFhirCompositionSection) : FHIR.R3.Resources.TFhirCompositionSection;
var
  tgt : FHIR.R3.Resources.TFhirCompositionSection;
  t1 : FHIR.R4.Types.TFhirReference;
  t2 : FHIR.R4.Resources.TFhirCompositionSection;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCompositionSection.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.title <> '') then
    tgt.title := src.title;

  tgt.code := convertCodeableConcept(src.code);

  if (src.text <> nil) then
    tgt.text := convertNarrative(src.text);

  tgt.mode := convertSectionMode(src.mode);

  if (src.orderedBy <> nil) then
    tgt.orderedBy := convertCodeableConcept(src.orderedBy);

  for t1 in src.entryList do
  begin
    tgt.entryList.add(convertReference(t1));
  end;
  if (src.emptyReason <> nil) then
    tgt.emptyReason := convertCodeableConcept(src.emptyReason);

  for t2 in src.sectionList do
  begin
    tgt.sectionList.add(convertSectionComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptMap(src : FHIR.R3.Resources.TFhirConceptMap) : FHIR.R4.Resources.TFhirConceptMap;
var
  tgt : FHIR.R4.Resources.TFhirConceptMap;
  t1 : FHIR.R3.Types.TFhirContactDetail;
  t2 : FHIR.R3.Types.TFhirUsageContext;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Types.TFhirType;
  t5 : FHIR.R4.Types.TFhirType;
  t6 : FHIR.R3.Resources.TFhirConceptMapGroup;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirConceptMap.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  if (src.source <> nil) then
  begin
    t4 := convertType(src.Source);
    if (t4 is FHIR.R4.Types.TFhirReference) then
    begin
      tgt.Source := FHIR.R4.Types.TFhirCanonical.create((t4 as FHIR.R4.Types.TFhirReference).Reference);
      t4.Free;
    end
    else
      tgt.Source := t4;
  end;

  if (src.target <> nil) then
  begin
    t5 := convertType(src.Target);
    if (t5 is FHIR.R4.Types.TFhirReference) then
    begin
      tgt.Source := FHIR.R4.Types.TFhirCanonical.create((t5 as FHIR.R4.Types.TFhirReference).Reference);
      t5.Free;
    end
    else
      tgt.Source := t5;
  end;

  for t6 in src.groupList do
  begin
    tgt.groupList.add(convertConceptMapGroupComponent(t6));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptMap(src : FHIR.R4.Resources.TFhirConceptMap) : FHIR.R3.Resources.TFhirConceptMap;
var
  tgt : FHIR.R3.Resources.TFhirConceptMap;
  t1 : FHIR.R4.Types.TFhirContactDetail;
  t2 : FHIR.R4.Types.TFhirUsageContext;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Resources.TFhirConceptMapGroup;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirConceptMap.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  if (src.source <> nil) then
    tgt.source := convertType(src.source);

  if (src.target <> nil) then
    tgt.target := convertType(src.target);

  for t4 in src.groupList do
  begin
    tgt.groupList.add(convertConceptMapGroupComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptMapGroupComponent(src : FHIR.R3.Resources.TFhirConceptMapGroup) : FHIR.R4.Resources.TFhirConceptMapGroup;
var
  tgt : FHIR.R4.Resources.TFhirConceptMapGroup;
  t : FHIR.R3.Resources.TFhirConceptMapGroupElement;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirConceptMapGroup.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.source <> '') then
    tgt.source := src.source;

  if (src.sourceVersion <> '') then
    tgt.sourceVersion := src.sourceVersion;

  if (src.target <> '') then
    tgt.target := src.target;

  if (src.targetVersion <> '') then
    tgt.targetVersion := src.targetVersion;

  for t in src.elementList do
  begin
    tgt.elementList.add(convertSourceElementComponent(t));
  end;
  if (src.unmapped <> nil) then
    tgt.unmapped := convertConceptMapGroupUnmappedComponent(src.unmapped);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptMapGroupComponent(src : FHIR.R4.Resources.TFhirConceptMapGroup) : FHIR.R3.Resources.TFhirConceptMapGroup;
var
  tgt : FHIR.R3.Resources.TFhirConceptMapGroup;
  t : FHIR.R4.Resources.TFhirConceptMapGroupElement;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirConceptMapGroup.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.source <> '') then
    tgt.source := src.source;

  if (src.sourceVersion <> '') then
    tgt.sourceVersion := src.sourceVersion;

  if (src.target <> '') then
    tgt.target := src.target;

  if (src.targetVersion <> '') then
    tgt.targetVersion := src.targetVersion;

  for t in src.elementList do
  begin
    tgt.elementList.add(convertSourceElementComponent(t));
  end;
  if (src.unmapped <> nil) then
    tgt.unmapped := convertConceptMapGroupUnmappedComponent(src.unmapped);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSourceElementComponent(src : FHIR.R3.Resources.TFhirConceptMapGroupElement) : FHIR.R4.Resources.TFhirConceptMapGroupElement;
var
  tgt : FHIR.R4.Resources.TFhirConceptMapGroupElement;
  t : FHIR.R3.Resources.TFhirConceptMapGroupElementTarget;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirConceptMapGroupElement.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.code <> '') then
    tgt.code := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  for t in src.targetList do
  begin
    tgt.targetList.add(convertTargetElementComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSourceElementComponent(src : FHIR.R4.Resources.TFhirConceptMapGroupElement) : FHIR.R3.Resources.TFhirConceptMapGroupElement;
var
  tgt : FHIR.R3.Resources.TFhirConceptMapGroupElement;
  t : FHIR.R4.Resources.TFhirConceptMapGroupElementTarget;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirConceptMapGroupElement.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.code <> '') then
    tgt.code := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  for t in src.targetList do
  begin
    tgt.targetList.add(convertTargetElementComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertTargetElementComponent(src : FHIR.R3.Resources.TFhirConceptMapGroupElementTarget) : FHIR.R4.Resources.TFhirConceptMapGroupElementTarget;
var
  tgt : FHIR.R4.Resources.TFhirConceptMapGroupElementTarget;
  t1 : FHIR.R3.Resources.TFhirConceptMapGroupElementTargetDependsOn;
  t2 : FHIR.R3.Resources.TFhirConceptMapGroupElementTargetDependsOn;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirConceptMapGroupElementTarget.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.code <> '') then
    tgt.code := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  tgt.equivalence := convertConceptMapEquivalence(src.equivalence);

  if (src.comment <> '') then
    tgt.comment := src.comment;

  for t1 in src.dependsOnList do
  begin
    tgt.dependsOnList.add(convertOtherElementComponent(t1));
  end;
  for t2 in src.productList do
  begin
    tgt.productList.add(convertOtherElementComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertTargetElementComponent(src : FHIR.R4.Resources.TFhirConceptMapGroupElementTarget) : FHIR.R3.Resources.TFhirConceptMapGroupElementTarget;
var
  tgt : FHIR.R3.Resources.TFhirConceptMapGroupElementTarget;
  t1 : FHIR.R4.Resources.TFhirConceptMapGroupElementTargetDependsOn;
  t2 : FHIR.R4.Resources.TFhirConceptMapGroupElementTargetDependsOn;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirConceptMapGroupElementTarget.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.code <> '') then
    tgt.code := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  tgt.equivalence := convertConceptMapEquivalence(src.equivalence);

  if (src.comment <> '') then
    tgt.comment := src.comment;

  for t1 in src.dependsOnList do
  begin
    tgt.dependsOnList.add(convertOtherElementComponent(t1));
  end;
  for t2 in src.productList do
  begin
    tgt.productList.add(convertOtherElementComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOtherElementComponent(src : FHIR.R3.Resources.TFhirConceptMapGroupElementTargetDependsOn) : FHIR.R4.Resources.TFhirConceptMapGroupElementTargetDependsOn;
var
  tgt : FHIR.R4.Resources.TFhirConceptMapGroupElementTargetDependsOn;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirConceptMapGroupElementTargetDependsOn.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.property_ := src.property_;

  if (src.system <> '') then
    tgt.system := src.system;

  if (src.code <> '') then
    tgt.value := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOtherElementComponent(src : FHIR.R4.Resources.TFhirConceptMapGroupElementTargetDependsOn) : FHIR.R3.Resources.TFhirConceptMapGroupElementTargetDependsOn;
var
  tgt : FHIR.R3.Resources.TFhirConceptMapGroupElementTargetDependsOn;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirConceptMapGroupElementTargetDependsOn.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.property_ := src.property_;

  if (src.system <> '') then
    tgt.system := src.system;

  if (src.value <> '') then
    tgt.code := src.value;

  if (src.display <> '') then
    tgt.display := src.display;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptMapGroupUnmappedComponent(src : FHIR.R3.Resources.TFhirConceptMapGroupUnmapped) : FHIR.R4.Resources.TFhirConceptMapGroupUnmapped;
var
  tgt : FHIR.R4.Resources.TFhirConceptMapGroupUnmapped;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirConceptMapGroupUnmapped.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.mode := convertConceptMapGroupUnmappedMode(src.mode);

  if (src.code <> '') then
    tgt.code := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  if (src.url <> '') then
    tgt.url := src.url;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptMapGroupUnmappedComponent(src : FHIR.R4.Resources.TFhirConceptMapGroupUnmapped) : FHIR.R3.Resources.TFhirConceptMapGroupUnmapped;
var
  tgt : FHIR.R3.Resources.TFhirConceptMapGroupUnmapped;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirConceptMapGroupUnmapped.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.mode := convertConceptMapGroupUnmappedMode(src.mode);

  if (src.code <> '') then
    tgt.code := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  if (src.url <> '') then
    tgt.url := src.url;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCondition(src : FHIR.R3.Resources.TFhirCondition) : FHIR.R4.Resources.TFhirCondition;
var
  tgt : FHIR.R4.Resources.TFhirCondition;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Resources.TFhirConditionEvidence;
  t5 : FHIR.R3.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirCondition.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.clinicalStatus := convertConditionClinicalStatus(src.clinicalStatus);
  tgt.verificationStatus := convertConditionVerificationStatus(src.verificationStatus);

  for t2 in src.categoryList do
  begin
    tgt.categoryList.add(convertCodeableConcept(t2));
  end;
  if (src.severity <> nil) then
    tgt.severity := convertCodeableConcept(src.severity);

  tgt.code := convertCodeableConcept(src.code);

  for t3 in src.bodySiteList do
  begin
    tgt.bodySiteList.add(convertCodeableConcept(t3));
  end;
  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.context <> nil) then
    tgt.encounter := convertReference(src.context);

  if (src.onset <> nil) then
    tgt.onset := convertType(src.onset);

  if (src.abatement <> nil) then
    tgt.abatement := convertType(src.abatement);

  tgt.recordedDate := src.assertedDate;

  if (src.asserter <> nil) then
    tgt.asserter := convertReference(src.asserter);

  if (src.stage <> nil) then
    tgt.stageList.add(convertConditionStageComponent(src.Stage));

  for t4 in src.evidenceList do
  begin
    tgt.evidenceList.add(convertConditionEvidenceComponent(t4));
  end;
  for t5 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t5));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCondition(src : FHIR.R4.Resources.TFhirCondition) : FHIR.R3.Resources.TFhirCondition;
var
  tgt : FHIR.R3.Resources.TFhirCondition;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirCodeableConcept;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Resources.TFhirConditionEvidence;
  t5 : FHIR.R4.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirCondition.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.clinicalStatus := convertConditionClinicalStatus(src.clinicalStatus);
  tgt.verificationStatus := convertConditionVerificationStatus(src.verificationStatus);

  for t2 in src.categoryList do
  begin
    tgt.categoryList.add(convertCodeableConcept(t2));
  end;
  if (src.severity <> nil) then
    tgt.severity := convertCodeableConcept(src.severity);

  tgt.code := convertCodeableConcept(src.code);

  for t3 in src.bodySiteList do
  begin
    tgt.bodySiteList.add(convertCodeableConcept(t3));
  end;
  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.encounter <> nil) then
    tgt.context := convertReference(src.encounter);

  if (src.onset <> nil) then
    tgt.onset := convertType(src.onset);

  if (src.abatement <> nil) then
    tgt.abatement := convertType(src.abatement);

  tgt.assertedDate := src.recordedDate;

  if (src.asserter <> nil) then
    tgt.asserter := convertReference(src.asserter);

  if (src.stageList.count > 0) then
    tgt.stage := convertConditionStageComponent(src.stageList[0]);

  for t4 in src.evidenceList do
  begin
    tgt.evidenceList.add(convertConditionEvidenceComponent(t4));
  end;
  for t5 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t5));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConditionStageComponent(src : FHIR.R3.Resources.TFhirConditionStage) : FHIR.R4.Resources.TFhirConditionStage;
var
  tgt : FHIR.R4.Resources.TFhirConditionStage;
  t : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirConditionStage.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.summary <> nil) then
    tgt.summary := convertCodeableConcept(src.summary);

  for t in src.assessmentList do
  begin
    tgt.assessmentList.add(convertReference(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConditionStageComponent(src : FHIR.R4.Resources.TFhirConditionStage) : FHIR.R3.Resources.TFhirConditionStage;
var
  tgt : FHIR.R3.Resources.TFhirConditionStage;
  t : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirConditionStage.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.summary <> nil) then
    tgt.summary := convertCodeableConcept(src.summary);

  for t in src.assessmentList do
  begin
    tgt.assessmentList.add(convertReference(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConditionEvidenceComponent(src : FHIR.R3.Resources.TFhirConditionEvidence) : FHIR.R4.Resources.TFhirConditionEvidence;
var
  tgt : FHIR.R4.Resources.TFhirConditionEvidence;
  t1 : FHIR.R3.Types.TFhirCodeableConcept;
  t2 : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirConditionEvidence.Create();
  try
  copyBackboneElement(src, tgt);
  for t1 in src.codeList do
  begin
    tgt.codeList.add(convertCodeableConcept(t1));
  end;
  for t2 in src.detailList do
  begin
    tgt.detailList.add(convertReference(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConditionEvidenceComponent(src : FHIR.R4.Resources.TFhirConditionEvidence) : FHIR.R3.Resources.TFhirConditionEvidence;
var
  tgt : FHIR.R3.Resources.TFhirConditionEvidence;
  t1 : FHIR.R4.Types.TFhirCodeableConcept;
  t2 : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirConditionEvidence.Create();
  try
  copyBackboneElement(src, tgt);
  for t1 in src.codeList do
  begin
    tgt.codeList.add(convertCodeableConcept(t1));
  end;
  for t2 in src.detailList do
  begin
    tgt.detailList.add(convertReference(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConsent(src : FHIR.R3.Resources.TFhirConsent) : FHIR.R4.Resources.TFhirConsent;
var
  tgt : FHIR.R4.Resources.TFhirConsent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirConsent.Create();
  try
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConsent(src : FHIR.R4.Resources.TFhirConsent) : FHIR.R3.Resources.TFhirConsent;
var
  tgt : FHIR.R3.Resources.TFhirConsent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirConsent.Create();
  try
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConsentPolicyComponent(src : FHIR.R3.Resources.TFhirConsentPolicy) : FHIR.R4.Resources.TFhirConsentPolicy;
var
  tgt : FHIR.R4.Resources.TFhirConsentPolicy;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirConsentPolicy.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.authority <> '') then
    tgt.authority := src.authority;

  if (src.uri <> '') then
    tgt.uri := src.uri;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConsentPolicyComponent(src : FHIR.R4.Resources.TFhirConsentPolicy) : FHIR.R3.Resources.TFhirConsentPolicy;
var
  tgt : FHIR.R3.Resources.TFhirConsentPolicy;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirConsentPolicy.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.authority <> '') then
    tgt.authority := src.authority;

  if (src.uri <> '') then
    tgt.uri := src.uri;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDataElement(src : FHIR.R3.Resources.TFhirDataElement) : FHIR.R4.Resources.TFhirStructureDefinition;
var
  tgt : FHIR.R4.Resources.TFhirStructureDefinition;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirContactDetail;
  t3 : FHIR.R3.Types.TFhirUsageContext;
  t4 : FHIR.R3.Types.TFhirCodeableConcept;
  t5 : FHIR.R3.Resources.TFhirDataElementMapping;
  t6 : FHIR.R3.Types.TFhirElementDefinition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.Url := src.Url.replace('/DataElement/', '/StructureDefinition/de-');

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.version <> '') then
    tgt.version := src.version;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  for t2 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t2));
  end;
  for t3 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t3));
  end;
  for t4 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t4));
  end;
  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  for t5 in src.mappingList do
  begin
    tgt.mappingList.add(convertDataElementMappingComponent(t5));
  end;
  for t6 in src.elementList do
  begin
    tgt.Snapshot.elementList.add(convertElementDefinition(t6));
  end;
  tgt.Kind := FHIR.R4.Types.StructureDefinitionKindLogical;
  tgt.abstract := false;
  tgt.type_ := tgt.name;
  tgt.baseDefinition := 'http://hl7.org/fhir/StructureDefinition/Element';
  tgt.Derivation := FHIR.R4.Types.TypeDerivationRuleSpecialization;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDataElementMappingComponent(src : FHIR.R3.Resources.TFhirDataElementMapping) : FHIR.R4.Resources.TFhirStructureDefinitionMapping;
var
  tgt : FHIR.R4.Resources.TFhirStructureDefinitionMapping;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureDefinitionMapping.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.identity <> '') then
    tgt.identity := src.identity;

  if (src.uri <> '') then
    tgt.uri := src.uri;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDetectedIssue(src : FHIR.R3.Resources.TFhirDetectedIssue) : FHIR.R4.Resources.TFhirDetectedIssue;
var
  tgt : FHIR.R4.Resources.TFhirDetectedIssue;
  t1 : FHIR.R3.Types.TFhirReference;
  t2 : FHIR.R3.Resources.TFhirDetectedIssueMitigation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirDetectedIssue.Create();
  try
  copyDomainResource(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifierList.add(convertIdentifier(src.Identifier));

  tgt.status := convertDetectedIssueStatus(src.status);

  if (src.category <> nil) then
    tgt.code := convertCodeableConcept(src.category);

  tgt.severity := convertDetectedIssueSeverity(src.severity);

  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  tgt.identified := convertDateTime(src.dateElement);

  if (src.author <> nil) then
    tgt.author := convertReference(src.author);

  for t1 in src.implicatedList do
  begin
    tgt.implicatedList.add(convertReference(t1));
  end;
  if (src.detail <> '') then
    tgt.detail := src.detail;

  if (src.reference <> '') then
    tgt.reference := src.reference;

  for t2 in src.mitigationList do
  begin
    tgt.mitigationList.add(convertDetectedIssueMitigationComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDetectedIssue(src : FHIR.R4.Resources.TFhirDetectedIssue) : FHIR.R3.Resources.TFhirDetectedIssue;
var
  tgt : FHIR.R3.Resources.TFhirDetectedIssue;
  t1 : FHIR.R4.Types.TFhirReference;
  t2 : FHIR.R4.Resources.TFhirDetectedIssueMitigation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirDetectedIssue.Create();
  try
  copyDomainResource(src, tgt);
  if (src.identifierList.count > 0) then
    tgt.identifier := convertIdentifier(src.identifierList[0]);

  tgt.status := convertDetectedIssueStatus(src.status);

  if (src.code <> nil) then
    tgt.category := convertCodeableConcept(src.code);

  tgt.severity := convertDetectedIssueSeverity(src.severity);

  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  if src.identified is FHIR.R4.Types.TFhirDateTime then
    tgt.dateElement := convertDateTime(src.identified as FHIR.R4.Types.TFhirDateTime);

  if (src.author <> nil) then
    tgt.author := convertReference(src.author);

  for t1 in src.implicatedList do
  begin
    tgt.implicatedList.add(convertReference(t1));
  end;
  if (src.detail <> '') then
    tgt.detail := src.detail;

  if (src.reference <> '') then
    tgt.reference := src.reference;

  for t2 in src.mitigationList do
  begin
    tgt.mitigationList.add(convertDetectedIssueMitigationComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDetectedIssueMitigationComponent(src : FHIR.R3.Resources.TFhirDetectedIssueMitigation) : FHIR.R4.Resources.TFhirDetectedIssueMitigation;
var
  tgt : FHIR.R4.Resources.TFhirDetectedIssueMitigation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirDetectedIssueMitigation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.action <> nil) then
    tgt.action := convertCodeableConcept(src.action);

  tgt.date := src.date;

  if (src.author <> nil) then
    tgt.author := convertReference(src.author);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDetectedIssueMitigationComponent(src : FHIR.R4.Resources.TFhirDetectedIssueMitigation) : FHIR.R3.Resources.TFhirDetectedIssueMitigation;
var
  tgt : FHIR.R3.Resources.TFhirDetectedIssueMitigation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirDetectedIssueMitigation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.action <> nil) then
    tgt.action := convertCodeableConcept(src.action);

  tgt.date := src.date;

  if (src.author <> nil) then
    tgt.author := convertReference(src.author);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDevice(src : FHIR.R3.Resources.TFhirDevice) : FHIR.R4.Resources.TFhirDevice;
var
  tgt : FHIR.R4.Resources.TFhirDevice;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirContactPoint;
  t3 : FHIR.R3.Types.TFhirAnnotation;
  t4 : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirDevice.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;

  tgt.status := convertFHIRDeviceStatus(src.status);

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.lotNumber <> '') then
    tgt.lotNumber := src.lotNumber;

  if (src.manufacturer <> '') then
    tgt.manufacturer := src.manufacturer;

  tgt.manufactureDate := src.manufactureDate.link;

  tgt.expirationDate := src.expirationDate.link;

  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  if (src.owner <> nil) then
    tgt.owner := convertReference(src.owner);

  for t2 in src.contactList do
  begin
    tgt.contactList.add(convertContactPoint(t2));
  end;
  if (src.location <> nil) then
    tgt.location := convertReference(src.location);

  if (src.url <> '') then
    tgt.url := src.url;

  for t3 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t3));
  end;
  for t4 in src.safetyList do
  begin
    tgt.safetyList.add(convertCodeableConcept(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDevice(src : FHIR.R4.Resources.TFhirDevice) : FHIR.R3.Resources.TFhirDevice;
var
  tgt : FHIR.R3.Resources.TFhirDevice;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirContactPoint;
  t3 : FHIR.R4.Types.TFhirAnnotation;
  t4 : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirDevice.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;

  tgt.status := convertFHIRDeviceStatus(src.status);

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.lotNumber <> '') then
    tgt.lotNumber := src.lotNumber;

  if (src.manufacturer <> '') then
    tgt.manufacturer := src.manufacturer;

  tgt.manufactureDate := src.manufactureDate.link;

  tgt.expirationDate := src.expirationDate.link;


  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  if (src.owner <> nil) then
    tgt.owner := convertReference(src.owner);

  for t2 in src.contactList do
  begin
    tgt.contactList.add(convertContactPoint(t2));
  end;
  if (src.location <> nil) then
    tgt.location := convertReference(src.location);

  if (src.url <> '') then
    tgt.url := src.url;

  for t3 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t3));
  end;
  for t4 in src.safetyList do
  begin
    tgt.safetyList.add(convertCodeableConcept(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDeviceMetric(src : FHIR.R3.Resources.TFhirDeviceMetric) : FHIR.R4.Resources.TFhirDeviceMetric;
var
  tgt : FHIR.R4.Resources.TFhirDeviceMetric;
  t : FHIR.R3.Resources.TFhirDeviceMetricCalibration;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirDeviceMetric.Create();
  try
  copyDomainResource(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifierList.add(convertIdentifier(src.Identifier));

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.unit_ <> nil) then
    tgt.unit_ := convertCodeableConcept(src.unit_);

  if (src.source <> nil) then
    tgt.source := convertReference(src.source);

  if (src.parent <> nil) then
    tgt.parent := convertReference(src.parent);

  tgt.operationalStatus := convertDeviceMetricOperationalStatus(src.operationalStatus);

  tgt.color := convertDeviceMetricColor(src.color);

  tgt.category := convertDeviceMetricCategory(src.category);

  if (src.measurementPeriod <> nil) then
    tgt.measurementPeriod := convertTiming(src.measurementPeriod);

  for t in src.calibrationList do
  begin
    tgt.calibrationList.add(convertDeviceMetricCalibrationComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDeviceMetric(src : FHIR.R4.Resources.TFhirDeviceMetric) : FHIR.R3.Resources.TFhirDeviceMetric;
var
  tgt : FHIR.R3.Resources.TFhirDeviceMetric;
  t : FHIR.R4.Resources.TFhirDeviceMetricCalibration;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirDeviceMetric.Create();
  try
  copyDomainResource(src, tgt);
  if (src.identifierList.count > 0) then
    tgt.identifier := convertIdentifier(src.identifierList[0]);

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.unit_ <> nil) then
    tgt.unit_ := convertCodeableConcept(src.unit_);

  if (src.source <> nil) then
    tgt.source := convertReference(src.source);

  if (src.parent <> nil) then
    tgt.parent := convertReference(src.parent);

  tgt.operationalStatus := convertDeviceMetricOperationalStatus(src.operationalStatus);
  tgt.color := convertDeviceMetricColor(src.color);
  tgt.category := convertDeviceMetricCategory(src.category);

  if (src.measurementPeriod <> nil) then
    tgt.measurementPeriod := convertTiming(src.measurementPeriod);

  for t in src.calibrationList do
  begin
    tgt.calibrationList.add(convertDeviceMetricCalibrationComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDeviceMetricCalibrationComponent(src : FHIR.R3.Resources.TFhirDeviceMetricCalibration) : FHIR.R4.Resources.TFhirDeviceMetricCalibration;
var
  tgt : FHIR.R4.Resources.TFhirDeviceMetricCalibration;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirDeviceMetricCalibration.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertDeviceMetricCalibrationType(src.type_);

  tgt.state := convertDeviceMetricCalibrationState(src.state);

  tgt.time := src.time.link;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDeviceMetricCalibrationComponent(src : FHIR.R4.Resources.TFhirDeviceMetricCalibration) : FHIR.R3.Resources.TFhirDeviceMetricCalibration;
var
  tgt : FHIR.R3.Resources.TFhirDeviceMetricCalibration;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirDeviceMetricCalibration.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertDeviceMetricCalibrationType(src.type_);

  tgt.state := convertDeviceMetricCalibrationState(src.state);

  tgt.time := src.time.link;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDeviceUseStatement(src : FHIR.R3.Resources.TFhirDeviceUseStatement) : FHIR.R4.Resources.TFhirDeviceUseStatement;
var
  tgt : FHIR.R4.Resources.TFhirDeviceUseStatement;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
  t3 : FHIR.R3.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirDeviceUseStatement.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertDeviceUseStatementStatus(src.status);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.timing <> nil) then
    tgt.timing := convertType(src.timing);

  tgt.recordedOn := src.recordedOn.link;

  if (src.source <> nil) then
    tgt.source := convertReference(src.source);

  if (src.device <> nil) then
    tgt.device := convertReference(src.device);

  for t2 in src.indicationList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t2));
  end;
  if (src.bodySite <> nil) then
    tgt.bodySite := convertCodeableConcept(src.bodySite);

  for t3 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDeviceUseStatement(src : FHIR.R4.Resources.TFhirDeviceUseStatement) : FHIR.R3.Resources.TFhirDeviceUseStatement;
var
  tgt : FHIR.R3.Resources.TFhirDeviceUseStatement;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirCodeableConcept;
  t3 : FHIR.R4.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirDeviceUseStatement.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertDeviceUseStatementStatus(src.status);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.timing <> nil) then
    tgt.timing := convertType(src.timing);

  tgt.recordedOn := src.recordedOn.link;

  if (src.source <> nil) then
    tgt.source := convertReference(src.source);

  if (src.device <> nil) then
    tgt.device := convertReference(src.device);

  for t2 in src.reasonCodeList do
  begin
    tgt.indicationList.add(convertCodeableConcept(t2));
  end;
  if (src.bodySite <> nil) then
    tgt.bodySite := convertCodeableConcept(src.bodySite);

  for t3 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDiagnosticReport(src : FHIR.R3.Resources.TFhirDiagnosticReport) : FHIR.R4.Resources.TFhirDiagnosticReport;
var
  tgt : FHIR.R4.Resources.TFhirDiagnosticReport;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirReference;
  t3 : FHIR.R3.Types.TFhirReference;
  t4 : FHIR.R3.Types.TFhirReference;
  t5 : FHIR.R3.Types.TFhirReference;
  t6 : FHIR.R3.Resources.TFhirDiagnosticReportImage;
  t7 : FHIR.R3.Types.TFhirCodeableConcept;
  t8 : FHIR.R3.Types.TFhirAttachment;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirDiagnosticReport.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.basedOnList do
  begin
    tgt.basedOnList.add(convertReference(t2));
  end;
  tgt.status := convertDiagnosticReportStatus(src.status);

  if (src.category <> nil) then
    tgt.categoryList.Add(convertCodeableConcept(src.category));

  tgt.code := convertCodeableConcept(src.code);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.context <> nil) then
    tgt.encounter := convertReference(src.context);

  if (src.effective <> nil) then
    tgt.effective := convertType(src.effective);

  tgt.issued := src.issued.link;

  for t3 in src.specimenList do
  begin
    tgt.specimenList.add(convertReference(t3));
  end;
  for t4 in src.resultList do
  begin
    tgt.resultList.add(convertReference(t4));
  end;
  for t5 in src.imagingStudyList do
  begin
    tgt.imagingStudyList.add(convertReference(t5));
  end;
  for t6 in src.imageList do
  begin
    tgt.mediaList.add(convertDiagnosticReportImageComponent(t6));
  end;
  if (src.conclusion <> '') then
    tgt.conclusion := src.conclusion;

  for t7 in src.codedDiagnosisList do
  begin
    tgt.conclusionCodeList.add(convertCodeableConcept(t7));
  end;
  for t8 in src.presentedFormList do
  begin
    tgt.presentedFormList.add(convertAttachment(t8));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDiagnosisComponent(src: FHIR.R3.Resources.TFhirEpisodeOfCareDiagnosis): FHIR.R4.Resources.TFhirEpisodeOfCareDiagnosis;
var
  tgt : FHIR.R4.Resources.TFhirEpisodeOfCareDiagnosis;
begin
  if (src = nil) then
    exit(nil);

  tgt := FHIR.R4.Resources.TFhirEpisodeOfCareDiagnosis.Create;
  try
  copyBackboneElement(src, tgt);
  tgt.Condition := convertReference(src.Condition);
  tgt.Role := convertCodeableConcept(src.Role);
  tgt.Rank := src.Rank;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDiagnosisComponent(src: FHIR.R4.Resources.TFhirEpisodeOfCareDiagnosis): FHIR.R3.Resources.TFhirEpisodeOfCareDiagnosis;
var
  tgt : FHIR.R3.Resources.TFhirEpisodeOfCareDiagnosis;
begin
  if (src = nil) then
    exit(nil);

  tgt := FHIR.R3.Resources.TFhirEpisodeOfCareDiagnosis.Create;
  try
  copyBackboneElement(src, tgt);
  tgt.Condition := convertReference(src.Condition);
  tgt.Role := convertCodeableConcept(src.Role);
  tgt.Rank := src.Rank;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDiagnosisComponent(src: FHIR.R3.Resources.TFhirEncounterDiagnosis): FHIR.R4.Resources.TFhirEncounterDiagnosis;
var
  tgt : FHIR.R4.Resources.TFhirEncounterDiagnosis;
begin
  if (src = nil) then
    exit(nil);

  tgt := FHIR.R4.Resources.TFhirEncounterDiagnosis.Create;
  try
  copyBackboneElement(src, tgt);
  tgt.Condition := convertReference(src.Condition);
  tgt.Use := convertCodeableConcept(src.Role);
  tgt.Rank := src.Rank;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDiagnosisComponent(src: FHIR.R4.Resources.TFhirEncounterDiagnosis): FHIR.R3.Resources.TFhirEncounterDiagnosis;
var
  tgt : FHIR.R3.Resources.TFhirEncounterDiagnosis;
begin
  if (src = nil) then
    exit(nil);

  tgt := FHIR.R3.Resources.TFhirEncounterDiagnosis.Create;
  try
  copyBackboneElement(src, tgt);
  tgt.Condition := convertReference(src.Condition);
  tgt.Role := convertCodeableConcept(src.Use);
  tgt.Rank := src.Rank;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDiagnosticReport(src : FHIR.R4.Resources.TFhirDiagnosticReport) : FHIR.R3.Resources.TFhirDiagnosticReport;
var
  tgt : FHIR.R3.Resources.TFhirDiagnosticReport;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirReference;
  t3 : FHIR.R4.Types.TFhirReference;
  t4 : FHIR.R4.Types.TFhirReference;
  t5 : FHIR.R4.Types.TFhirReference;
  t6 : FHIR.R4.Resources.TFhirDiagnosticReportMedia;
  t7 : FHIR.R4.Types.TFhirCodeableConcept;
  t8 : FHIR.R4.Types.TFhirAttachment;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirDiagnosticReport.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.basedOnList do
  begin
    tgt.basedOnList.add(convertReference(t2));
  end;
  tgt.status := convertDiagnosticReportStatus(src.status);

  if (src.categoryList.Count > 0) then
    tgt.category := convertCodeableConcept(src.categoryList[0]);

  tgt.code := convertCodeableConcept(src.code);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.encounter <> nil) then
    tgt.context := convertReference(src.encounter);

  if (src.effective <> nil) then
    tgt.effective := convertType(src.effective);

  tgt.issued := src.issued.link;

  for t3 in src.specimenList do
  begin
    tgt.specimenList.add(convertReference(t3));
  end;
  for t4 in src.resultList do
  begin
    tgt.resultList.add(convertReference(t4));
  end;
  for t5 in src.imagingStudyList do
  begin
    tgt.imagingStudyList.add(convertReference(t5));
  end;
  for t6 in src.mediaList do
  begin
    tgt.imageList.add(convertDiagnosticReportImageComponent(t6));
  end;
  if (src.conclusion <> '') then
    tgt.conclusion := src.conclusion;

  for t7 in src.conclusionCodeList do
  begin
    tgt.codedDiagnosisList.add(convertCodeableConcept(t7));
  end;
  for t8 in src.presentedFormList do
  begin
    tgt.presentedFormList.add(convertAttachment(t8));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDiagnosticReportImageComponent(src : FHIR.R3.Resources.TFhirDiagnosticReportImage) : FHIR.R4.Resources.TFhirDiagnosticReportMedia;
var
  tgt : FHIR.R4.Resources.TFhirDiagnosticReportMedia;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirDiagnosticReportMedia.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.comment <> '') then
    tgt.comment := src.comment;

  if (src.link_ <> nil) then
    tgt.link_ := convertReference(src.link_);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDiagnosticReportImageComponent(src : FHIR.R4.Resources.TFhirDiagnosticReportMedia) : FHIR.R3.Resources.TFhirDiagnosticReportImage;
var
  tgt : FHIR.R3.Resources.TFhirDiagnosticReportImage;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirDiagnosticReportImage.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.comment <> '') then
    tgt.comment := src.comment;

  if (src.link_ <> nil) then
    tgt.link_ := convertReference(src.link_);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDocumentManifestRelatedComponent(src : FHIR.R3.Resources.TFhirDocumentManifestRelated) : FHIR.R4.Resources.TFhirDocumentManifestRelated;
var
  tgt : FHIR.R4.Resources.TFhirDocumentManifestRelated;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirDocumentManifestRelated.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  if (src.ref <> nil) then
    tgt.ref := convertReference(src.ref);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDocumentManifestRelatedComponent(src : FHIR.R4.Resources.TFhirDocumentManifestRelated) : FHIR.R3.Resources.TFhirDocumentManifestRelated;
var
  tgt : FHIR.R3.Resources.TFhirDocumentManifestRelated;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirDocumentManifestRelated.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  if (src.ref <> nil) then
    tgt.ref := convertReference(src.ref);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDocumentReference(src : FHIR.R3.Resources.TFhirDocumentReference) : FHIR.R4.Resources.TFhirDocumentReference;
var
  tgt : FHIR.R4.Resources.TFhirDocumentReference;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Resources.TFhirDocumentReferenceRelatesTo;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Resources.TFhirDocumentReferenceContent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirDocumentReference.Create();
  try
  copyDomainResource(src, tgt);
  if (src.masterIdentifier <> nil) then
    tgt.masterIdentifier := convertIdentifier(src.masterIdentifier);

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertDocumentReferenceStatus(src.status);

  tgt.docStatus := convertReferredDocumentStatus(src.docStatus);

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.class_ <> nil) then
    tgt.categoryList.Add(convertCodeableConcept(src.class_));

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  tgt.date := src.created;

  if (src.authenticator <> nil) then
    tgt.authenticator := convertReference(src.authenticator);

  if (src.custodian <> nil) then
    tgt.custodian := convertReference(src.custodian);

  for t2 in src.relatesToList do
  begin
    tgt.relatesToList.add(convertDocumentReferenceRelatesToComponent(t2));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t3 in src.securityLabelList do
  begin
    tgt.securityLabelList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.contentList do
  begin
    tgt.contentList.add(convertDocumentReferenceContentComponent(t4));
  end;
  if (src.context <> nil) then
    tgt.context := convertDocumentReferenceContextComponent(src.context);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDocumentReference(src : FHIR.R4.Resources.TFhirDocumentReference) : FHIR.R3.Resources.TFhirDocumentReference;
var
  tgt : FHIR.R3.Resources.TFhirDocumentReference;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Resources.TFhirDocumentReferenceRelatesTo;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Resources.TFhirDocumentReferenceContent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirDocumentReference.Create();
  try
  copyDomainResource(src, tgt);
  if (src.masterIdentifier <> nil) then
    tgt.masterIdentifier := convertIdentifier(src.masterIdentifier);

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertDocumentReferenceStatus(src.status);

  tgt.docStatus := convertReferredDocumentStatus(src.docStatus);

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.categoryList.Count > 0) then
    tgt.class_ := convertCodeableConcept(src.categoryList[0]);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  tgt.created := src.date;

  if (src.authenticator <> nil) then
    tgt.authenticator := convertReference(src.authenticator);

  if (src.custodian <> nil) then
    tgt.custodian := convertReference(src.custodian);

  for t2 in src.relatesToList do
  begin
    tgt.relatesToList.add(convertDocumentReferenceRelatesToComponent(t2));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t3 in src.securityLabelList do
  begin
    tgt.securityLabelList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.contentList do
  begin
    tgt.contentList.add(convertDocumentReferenceContentComponent(t4));
  end;
  if (src.context <> nil) then
    tgt.context := convertDocumentReferenceContextComponent(src.context);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDocumentReferenceRelatesToComponent(src : FHIR.R3.Resources.TFhirDocumentReferenceRelatesTo) : FHIR.R4.Resources.TFhirDocumentReferenceRelatesTo;
var
  tgt : FHIR.R4.Resources.TFhirDocumentReferenceRelatesTo;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirDocumentReferenceRelatesTo.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertDocumentRelationshipType(src.code);

  if (src.target <> nil) then
    tgt.target := convertReference(src.target);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDocumentReferenceRelatesToComponent(src : FHIR.R4.Resources.TFhirDocumentReferenceRelatesTo) : FHIR.R3.Resources.TFhirDocumentReferenceRelatesTo;
var
  tgt : FHIR.R3.Resources.TFhirDocumentReferenceRelatesTo;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirDocumentReferenceRelatesTo.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertDocumentRelationshipType(src.code);

  if (src.target <> nil) then
    tgt.target := convertReference(src.target);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDocumentReferenceContentComponent(src : FHIR.R3.Resources.TFhirDocumentReferenceContent) : FHIR.R4.Resources.TFhirDocumentReferenceContent;
var
  tgt : FHIR.R4.Resources.TFhirDocumentReferenceContent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirDocumentReferenceContent.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.attachment <> nil) then
    tgt.attachment := convertAttachment(src.attachment);

  if (src.format <> nil) then
    tgt.format := convertCoding(src.format);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDocumentReferenceContentComponent(src : FHIR.R4.Resources.TFhirDocumentReferenceContent) : FHIR.R3.Resources.TFhirDocumentReferenceContent;
var
  tgt : FHIR.R3.Resources.TFhirDocumentReferenceContent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirDocumentReferenceContent.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.attachment <> nil) then
    tgt.attachment := convertAttachment(src.attachment);

  if (src.format <> nil) then
    tgt.format := convertCoding(src.format);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDocumentReferenceContextComponent(src : FHIR.R3.Resources.TFhirDocumentReferenceContext) : FHIR.R4.Resources.TFhirDocumentReferenceContext;
var
  tgt : FHIR.R4.Resources.TFhirDocumentReferenceContext;
  t1 : FHIR.R3.Types.TFhirCodeableConcept;
  t2 : FHIR.R3.Resources.TFhirDocumentReferenceContextRelated;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirDocumentReferenceContext.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.encounter <> nil) then
    tgt.encounterList.Add(convertReference(src.encounter));

  for t1 in src.eventList do
  begin
    tgt.eventList.add(convertCodeableConcept(t1));
  end;
  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  if (src.facilityType <> nil) then
    tgt.facilityType := convertCodeableConcept(src.facilityType);

  if (src.practiceSetting <> nil) then
    tgt.practiceSetting := convertCodeableConcept(src.practiceSetting);

  if (src.sourcePatientInfo <> nil) then
    tgt.sourcePatientInfo := convertReference(src.sourcePatientInfo);

  for t2 in src.relatedList do
  begin
    tgt.relatedList.add(convertDocumentReferenceContextRelatedComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDocumentReferenceContextComponent(src : FHIR.R4.Resources.TFhirDocumentReferenceContext) : FHIR.R3.Resources.TFhirDocumentReferenceContext;
var
  tgt : FHIR.R3.Resources.TFhirDocumentReferenceContext;
  t1 : FHIR.R4.Types.TFhirCodeableConcept;
  t2 : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirDocumentReferenceContext.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.encounterList.Count > 0) then
    tgt.encounter := convertReference(src.encounterList[0]);

  for t1 in src.eventList do
  begin
    tgt.eventList.add(convertCodeableConcept(t1));
  end;
  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  if (src.facilityType <> nil) then
    tgt.facilityType := convertCodeableConcept(src.facilityType);

  if (src.practiceSetting <> nil) then
    tgt.practiceSetting := convertCodeableConcept(src.practiceSetting);

  if (src.sourcePatientInfo <> nil) then
    tgt.sourcePatientInfo := convertReference(src.sourcePatientInfo);

  for t2 in src.relatedList do
  begin
    tgt.relatedList.add(convertDocumentReferenceContextRelatedComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDocumentReferenceContextRelatedComponent(src : FHIR.R3.Resources.TFhirDocumentReferenceContextRelated) : FHIR.R4.Types.TFhirReference;
var
  tgt : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirReference.Create();
  try
  copyElement(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  if (src.ref <> nil) then
    tgt.reference := src.ref.reference;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDocumentReferenceContextRelatedComponent(src : FHIR.R4.Types.TFhirReference) : FHIR.R3.Resources.TFhirDocumentReferenceContextRelated;
var
  tgt : FHIR.R3.Resources.TFhirDocumentReferenceContextRelated;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirDocumentReferenceContextRelated.Create();
  try
  copyElement(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  if (src.reference <> '') then
    tgt.ref := convertReference(src);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertEncounter(src : FHIR.R3.Resources.TFhirEncounter) : FHIR.R4.Resources.TFhirEncounter;
var
  tgt : FHIR.R4.Resources.TFhirEncounter;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Resources.TFhirEncounterStatusHistory;
  t3 : FHIR.R3.Resources.TFhirEncounterClassHistory;
  t4 : FHIR.R3.Types.TFhirCodeableConcept;
  t5 : FHIR.R3.Types.TFhirReference;
  t6 : FHIR.R3.Types.TFhirReference;
  t7 : FHIR.R3.Resources.TFhirEncounterParticipant;
  t8 : FHIR.R3.Types.TFhirCodeableConcept;
  t9 : FHIR.R3.Resources.TFhirEncounterDiagnosis;
  ta : FHIR.R3.Types.TFhirReference;
  tb : FHIR.R3.Resources.TFhirEncounterLocation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirEncounter.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertEncounterStatus(src.status);

  for t2 in src.statusHistoryList do
  begin
    tgt.statusHistoryList.add(convertStatusHistoryComponent(t2));
  end;
  if (src.class_ <> nil) then
    tgt.class_ := convertCoding(src.class_);

  for t3 in src.classHistoryList do
  begin
    tgt.classHistoryList.add(convertClassHistoryComponent(t3));
  end;
  for t4 in src.type_List do
  begin
    tgt.type_List.add(convertCodeableConcept(t4));
  end;
  if (src.priority <> nil) then
    tgt.priority := convertCodeableConcept(src.priority);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  for t5 in src.episodeOfCareList do
  begin
    tgt.episodeOfCareList.add(convertReference(t5));
  end;
  for t6 in src.incomingReferralList do
  begin
    tgt.basedOnList.add(convertReference(t6));
  end;
  for t7 in src.participantList do
  begin
    tgt.participantList.add(convertEncounterParticipantComponent(t7));
  end;
  if (src.appointment <> nil) then
    tgt.appointmentList.add(convertReference(src.appointment));

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  if (src.length <> nil) then
    tgt.length := convertDuration(src.length);

  for t8 in src.reasonList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t8));
  end;
  for t9 in src.diagnosisList do
  begin
    tgt.diagnosisList.add(convertDiagnosisComponent(t9));
  end;
  for ta in src.accountList do
  begin
    tgt.accountList.add(convertReference(ta));
  end;
  if (src.hospitalization <> nil) then
    tgt.hospitalization := convertEncounterHospitalizationComponent(src.hospitalization);

  for tb in src.locationList do
  begin
    tgt.locationList.add(convertEncounterLocationComponent(tb));
  end;
  if (src.serviceProvider <> nil) then
    tgt.serviceProvider := convertReference(src.serviceProvider);

  if (src.partOf <> nil) then
    tgt.partOf := convertReference(src.partOf);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertEncounter(src : FHIR.R4.Resources.TFhirEncounter) : FHIR.R3.Resources.TFhirEncounter;
var
  tgt : FHIR.R3.Resources.TFhirEncounter;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Resources.TFhirEncounterStatusHistory;
  t3 : FHIR.R4.Resources.TFhirEncounterClassHistory;
  t4 : FHIR.R4.Types.TFhirCodeableConcept;
  t5 : FHIR.R4.Types.TFhirReference;
  t6 : FHIR.R4.Types.TFhirReference;
  t7 : FHIR.R4.Resources.TFhirEncounterParticipant;
  t8 : FHIR.R4.Types.TFhirCodeableConcept;
  t9 : FHIR.R4.Resources.TFhirEncounterDiagnosis;
  ta : FHIR.R4.Types.TFhirReference;
  tb : FHIR.R4.Resources.TFhirEncounterLocation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirEncounter.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertEncounterStatus(src.status);

  for t2 in src.statusHistoryList do
  begin
    tgt.statusHistoryList.add(convertStatusHistoryComponent(t2));
  end;
  if (src.class_ <> nil) then
    tgt.class_ := convertCoding(src.class_);

  for t3 in src.classHistoryList do
  begin
    tgt.classHistoryList.add(convertClassHistoryComponent(t3));
  end;
  for t4 in src.type_List do
  begin
    tgt.type_List.add(convertCodeableConcept(t4));
  end;
  if (src.priority <> nil) then
    tgt.priority := convertCodeableConcept(src.priority);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  for t5 in src.episodeOfCareList do
  begin
    tgt.episodeOfCareList.add(convertReference(t5));
  end;
  for t6 in src.basedOnList do
  begin
    tgt.incomingReferralList.add(convertReference(t6));
  end;
  for t7 in src.participantList do
  begin
    tgt.participantList.add(convertEncounterParticipantComponent(t7));
  end;
  if (src.appointmentList.Count > 0) then
    tgt.appointment := convertReference(src.appointmentList[0]);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  if (src.length <> nil) then
    tgt.length := convertDuration(src.length);

  for t8 in src.reasonCodeList do
  begin
    tgt.reasonList.add(convertCodeableConcept(t8));
  end;
  for t9 in src.diagnosisList do
  begin
    tgt.diagnosisList.add(convertDiagnosisComponent(t9));
  end;
  for ta in src.accountList do
  begin
    tgt.accountList.add(convertReference(ta));
  end;
  if (src.hospitalization <> nil) then
    tgt.hospitalization := convertEncounterHospitalizationComponent(src.hospitalization);

  for tb in src.locationList do
  begin
    tgt.locationList.add(convertEncounterLocationComponent(tb));
  end;
  if (src.serviceProvider <> nil) then
    tgt.serviceProvider := convertReference(src.serviceProvider);

  if (src.partOf <> nil) then
    tgt.partOf := convertReference(src.partOf);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStatusHistoryComponent(src : FHIR.R3.Resources.TFhirEncounterStatusHistory) : FHIR.R4.Resources.TFhirEncounterStatusHistory;
var
  tgt : FHIR.R4.Resources.TFhirEncounterStatusHistory;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirEncounterStatusHistory.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.status := convertEncounterStatus(src.status);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStatusHistoryComponent(src : FHIR.R4.Resources.TFhirEncounterStatusHistory) : FHIR.R3.Resources.TFhirEncounterStatusHistory;
var
  tgt : FHIR.R3.Resources.TFhirEncounterStatusHistory;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirEncounterStatusHistory.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.status := convertEncounterStatus(src.status);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertClassHistoryComponent(src : FHIR.R3.Resources.TFhirEncounterClassHistory) : FHIR.R4.Resources.TFhirEncounterClassHistory;
var
  tgt : FHIR.R4.Resources.TFhirEncounterClassHistory;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirEncounterClassHistory.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.class_ <> nil) then
    tgt.class_ := convertCoding(src.class_);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertClassHistoryComponent(src : FHIR.R4.Resources.TFhirEncounterClassHistory) : FHIR.R3.Resources.TFhirEncounterClassHistory;
var
  tgt : FHIR.R3.Resources.TFhirEncounterClassHistory;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirEncounterClassHistory.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.class_ <> nil) then
    tgt.class_ := convertCoding(src.class_);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertEncounterParticipantComponent(src : FHIR.R3.Resources.TFhirEncounterParticipant) : FHIR.R4.Resources.TFhirEncounterParticipant;
var
  tgt : FHIR.R4.Resources.TFhirEncounterParticipant;
  t : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirEncounterParticipant.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.type_List do
  begin
    tgt.type_List.add(convertCodeableConcept(t));
  end;
  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  if (src.individual <> nil) then
    tgt.individual := convertReference(src.individual);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertEncounterParticipantComponent(src : FHIR.R4.Resources.TFhirEncounterParticipant) : FHIR.R3.Resources.TFhirEncounterParticipant;
var
  tgt : FHIR.R3.Resources.TFhirEncounterParticipant;
  t : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirEncounterParticipant.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.type_List do
  begin
    tgt.type_List.add(convertCodeableConcept(t));
  end;
  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  if (src.individual <> nil) then
    tgt.individual := convertReference(src.individual);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertEncounterHospitalizationComponent(src : FHIR.R3.Resources.TFhirEncounterHospitalization) : FHIR.R4.Resources.TFhirEncounterHospitalization;
var
  tgt : FHIR.R4.Resources.TFhirEncounterHospitalization;
  t1 : FHIR.R3.Types.TFhirCodeableConcept;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirEncounterHospitalization.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.preAdmissionIdentifier <> nil) then
    tgt.preAdmissionIdentifier := convertIdentifier(src.preAdmissionIdentifier);

  if (src.origin <> nil) then
    tgt.origin := convertReference(src.origin);

  if (src.admitSource <> nil) then
    tgt.admitSource := convertCodeableConcept(src.admitSource);

  if (src.reAdmission <> nil) then
    tgt.reAdmission := convertCodeableConcept(src.reAdmission);

  for t1 in src.dietPreferenceList do
  begin
    tgt.dietPreferenceList.add(convertCodeableConcept(t1));
  end;
  for t2 in src.specialCourtesyList do
  begin
    tgt.specialCourtesyList.add(convertCodeableConcept(t2));
  end;
  for t3 in src.specialArrangementList do
  begin
    tgt.specialArrangementList.add(convertCodeableConcept(t3));
  end;
  if (src.destination <> nil) then
    tgt.destination := convertReference(src.destination);

  if (src.dischargeDisposition <> nil) then
    tgt.dischargeDisposition := convertCodeableConcept(src.dischargeDisposition);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertEncounterHospitalizationComponent(src : FHIR.R4.Resources.TFhirEncounterHospitalization) : FHIR.R3.Resources.TFhirEncounterHospitalization;
var
  tgt : FHIR.R3.Resources.TFhirEncounterHospitalization;
  t1 : FHIR.R4.Types.TFhirCodeableConcept;
  t2 : FHIR.R4.Types.TFhirCodeableConcept;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirEncounterHospitalization.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.preAdmissionIdentifier <> nil) then
    tgt.preAdmissionIdentifier := convertIdentifier(src.preAdmissionIdentifier);

  if (src.origin <> nil) then
    tgt.origin := convertReference(src.origin);

  if (src.admitSource <> nil) then
    tgt.admitSource := convertCodeableConcept(src.admitSource);

  if (src.reAdmission <> nil) then
    tgt.reAdmission := convertCodeableConcept(src.reAdmission);

  for t1 in src.dietPreferenceList do
  begin
    tgt.dietPreferenceList.add(convertCodeableConcept(t1));
  end;
  for t2 in src.specialCourtesyList do
  begin
    tgt.specialCourtesyList.add(convertCodeableConcept(t2));
  end;
  for t3 in src.specialArrangementList do
  begin
    tgt.specialArrangementList.add(convertCodeableConcept(t3));
  end;
  if (src.destination <> nil) then
    tgt.destination := convertReference(src.destination);

  if (src.dischargeDisposition <> nil) then
    tgt.dischargeDisposition := convertCodeableConcept(src.dischargeDisposition);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertEncounterLocationComponent(src : FHIR.R3.Resources.TFhirEncounterLocation) : FHIR.R4.Resources.TFhirEncounterLocation;
var
  tgt : FHIR.R4.Resources.TFhirEncounterLocation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirEncounterLocation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.location <> nil) then
    tgt.location := convertReference(src.location);

  tgt.status := convertEncounterLocationStatus(src.status);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertEncounterLocationComponent(src : FHIR.R4.Resources.TFhirEncounterLocation) : FHIR.R3.Resources.TFhirEncounterLocation;
var
  tgt : FHIR.R3.Resources.TFhirEncounterLocation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirEncounterLocation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.location <> nil) then
    tgt.location := convertReference(src.location);

  tgt.status := convertEncounterLocationStatus(src.status);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertEndpoint(src : FHIR.R3.Resources.TFhirEndpoint) : FHIR.R4.Resources.TFhirEndpoint;
var
  tgt : FHIR.R4.Resources.TFhirEndpoint;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirContactPoint;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Types.TFhirCode;
  t5 : FHIR.R3.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirEndpoint.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertEndpointStatus(src.status);

  if (src.connectionType <> nil) then
    tgt.connectionType := convertCoding(src.connectionType);

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.managingOrganization <> nil) then
    tgt.managingOrganization := convertReference(src.managingOrganization);

  for t2 in src.contactList do
  begin
    tgt.contactList.add(convertContactPoint(t2));
  end;
  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  for t3 in src.payloadTypeList do
  begin
    tgt.payloadTypeList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.payloadMimeTypeList do
  begin
    tgt.payloadMimeTypeList.add(convertCode(t4));
  end;
  if (src.address <> '') then
    tgt.address := src.address;

  for t5 in src.headerList do
  begin
    tgt.headerList.add(convertString(t5));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertEndpoint(src : FHIR.R4.Resources.TFhirEndpoint) : FHIR.R3.Resources.TFhirEndpoint;
var
  tgt : FHIR.R3.Resources.TFhirEndpoint;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirContactPoint;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Types.TFhirCode;
  t5 : FHIR.R4.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirEndpoint.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertEndpointStatus(src.status);

  if (src.connectionType <> nil) then
    tgt.connectionType := convertCoding(src.connectionType);

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.managingOrganization <> nil) then
    tgt.managingOrganization := convertReference(src.managingOrganization);

  for t2 in src.contactList do
  begin
    tgt.contactList.add(convertContactPoint(t2));
  end;
  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  for t3 in src.payloadTypeList do
  begin
    tgt.payloadTypeList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.payloadMimeTypeList do
  begin
    tgt.payloadMimeTypeList.add(convertCode(t4));
  end;
  if (src.address <> '') then
    tgt.address := src.address;

  for t5 in src.headerList do
  begin
    tgt.headerList.add(convertString(t5));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertEpisodeOfCare(src : FHIR.R3.Resources.TFhirEpisodeOfCare) : FHIR.R4.Resources.TFhirEpisodeOfCare;
var
  tgt : FHIR.R4.Resources.TFhirEpisodeOfCare;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Resources.TFhirEpisodeOfCareStatusHistory;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Resources.TFhirEpisodeOfCareDiagnosis;
  t5 : FHIR.R3.Types.TFhirReference;
  t6 : FHIR.R3.Types.TFhirReference;
  t7 : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirEpisodeOfCare.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertEpisodeOfCareStatus(src.status);

  for t2 in src.statusHistoryList do
  begin
    tgt.statusHistoryList.add(convertEpisodeOfCareStatusHistoryComponent(t2));
  end;
  for t3 in src.type_List do
  begin
    tgt.type_List.add(convertCodeableConcept(t3));
  end;
  for t4 in src.diagnosisList do
  begin
    tgt.diagnosisList.add(convertDiagnosisComponent(t4));
  end;
  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  if (src.managingOrganization <> nil) then
    tgt.managingOrganization := convertReference(src.managingOrganization);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  for t5 in src.referralRequestList do
  begin
    tgt.referralRequestList.add(convertReference(t5));
  end;
  if (src.careManager <> nil) then
    tgt.careManager := convertReference(src.careManager);

  for t6 in src.teamList do
  begin
    tgt.teamList.add(convertReference(t6));
  end;
  for t7 in src.accountList do
  begin
    tgt.accountList.add(convertReference(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertEpisodeOfCare(src : FHIR.R4.Resources.TFhirEpisodeOfCare) : FHIR.R3.Resources.TFhirEpisodeOfCare;
var
  tgt : FHIR.R3.Resources.TFhirEpisodeOfCare;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Resources.TFhirEpisodeOfCareStatusHistory;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Resources.TFhirEpisodeOfCareDiagnosis;
  t5 : FHIR.R4.Types.TFhirReference;
  t6 : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirEpisodeOfCare.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertEpisodeOfCareStatus(src.status);

  for t2 in src.statusHistoryList do
  begin
    tgt.statusHistoryList.add(convertEpisodeOfCareStatusHistoryComponent(t2));
  end;
  for t3 in src.type_List do
  begin
    tgt.type_List.add(convertCodeableConcept(t3));
  end;
  for t4 in src.diagnosisList do
  begin
    tgt.diagnosisList.add(convertDiagnosisComponent(t4));
  end;
  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  if (src.managingOrganization <> nil) then
    tgt.managingOrganization := convertReference(src.managingOrganization);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  for t5 in src.referralRequestList do
  begin
    tgt.referralRequestList.add(convertReference(t5));
  end;
  if (src.careManager <> nil) then
    tgt.careManager := convertReference(src.careManager);

  for t5 in src.teamList do
  begin
    tgt.teamList.add(convertReference(t5));
  end;
  for t6 in src.accountList do
  begin
    tgt.accountList.add(convertReference(t6));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertEpisodeOfCareStatusHistoryComponent(src : FHIR.R3.Resources.TFhirEpisodeOfCareStatusHistory) : FHIR.R4.Resources.TFhirEpisodeOfCareStatusHistory;
var
  tgt : FHIR.R4.Resources.TFhirEpisodeOfCareStatusHistory;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirEpisodeOfCareStatusHistory.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.status := convertEpisodeOfCareStatus(src.status);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertEpisodeOfCareStatusHistoryComponent(src : FHIR.R4.Resources.TFhirEpisodeOfCareStatusHistory) : FHIR.R3.Resources.TFhirEpisodeOfCareStatusHistory;
var
  tgt : FHIR.R3.Resources.TFhirEpisodeOfCareStatusHistory;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirEpisodeOfCareStatusHistory.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.status := convertEpisodeOfCareStatus(src.status);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;
(*
class function TVersionConvertor_30_40.convertExpansionProfile(src : FHIR.R3.Resources.TFhirExpansionProfile) : FHIR.R4.Resources.TFHIRParameters;
var
  tgt : FHIR.R4.Resources.TFhirExpansionProfile;
  t1 : FHIR.R3.Types.TFhirContactDetail;
  t2 : FHIR.R3.Types.TFhirUsageContext;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Resources.TFhirExpansionProfileFixedVersion;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirExpansionProfile.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.fixedVersionList do
  begin
    tgt.fixedVersionList.add(convertExpansionProfileFixedVersionComponent(t4));
  end;
  if (src.excludedSystem <> nil) then
    tgt.excludedSystem := convertExpansionProfileExcludedSystemComponent(src.excludedSystem);

  tgt.includeDesignations := src.includeDesignations;

  if (src.designation <> nil) then
    tgt.designation := convertExpansionProfileDesignationComponent(src.designation);

  tgt.includeDefinition := src.includeDefinition;
  tgt.activeOnly := src.activeOnly;
  tgt.excludeNested := src.excludeNested;
  tgt.excludeNotForUI := src.excludeNotForUI;
  tgt.excludePostCoordinated := src.excludePostCoordinated;

  if (src.displayLanguage <> '') then
    tgt.displayLanguage := src.displayLanguage;

  tgt.limitedExpansion := src.limitedExpansion;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertExpansionProfile(src : FHIR.R4.Resources.TFhirExpansionProfile) : FHIR.R3.Resources.TFhirExpansionProfile;
var
  tgt : FHIR.R3.Resources.TFhirExpansionProfile;
  t1 : FHIR.R4.Types.TFhirContactDetail;
  t2 : FHIR.R4.Types.TFhirUsageContext;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Resources.TFhirExpansionProfileFixedVersion;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirExpansionProfile.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.fixedVersionList do
  begin
    tgt.fixedVersionList.add(convertExpansionProfileFixedVersionComponent(t4));
  end;
  if (src.excludedSystem <> nil) then
    tgt.excludedSystem := convertExpansionProfileExcludedSystemComponent(src.excludedSystem);

  tgt.includeDesignations := src.includeDesignations;

  if (src.designation <> nil) then
    tgt.designation := convertExpansionProfileDesignationComponent(src.designation);

  tgt.includeDefinition := src.includeDefinition;
  tgt.activeOnly := src.activeOnly;
  tgt.excludeNested := src.excludeNested;
  tgt.excludeNotForUI := src.excludeNotForUI;
  tgt.excludePostCoordinated := src.excludePostCoordinated;

  if (src.displayLanguage <> '') then
    tgt.displayLanguage := src.displayLanguage;

  tgt.limitedExpansion := src.limitedExpansion;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertExpansionProfileFixedVersionComponent(src : FHIR.R3.Resources.TFhirExpansionProfileFixedVersion) : FHIR.R4.Resources.TFhirExpansionProfileFixedVersion;
var
  tgt : FHIR.R4.Resources.TFhirExpansionProfileFixedVersion;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirExpansionProfileFixedVersion.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.system <> '') then
    tgt.system := src.system;

  if (src.version <> '') then
    tgt.version := src.version;

  tgt.mode := convertSystemVersionProcessingMode(src.mode);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertExpansionProfileFixedVersionComponent(src : FHIR.R4.Resources.TFhirExpansionProfileFixedVersion) : FHIR.R3.Resources.TFhirExpansionProfileFixedVersion;
var
  tgt : FHIR.R3.Resources.TFhirExpansionProfileFixedVersion;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirExpansionProfileFixedVersion.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.system <> '') then
    tgt.system := src.system;

  if (src.version <> '') then
    tgt.version := src.version;

  tgt.mode := convertSystemVersionProcessingMode(src.mode);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertExpansionProfileExcludedSystemComponent(src : FHIR.R3.Resources.TFhirExpansionProfileExcludedSystem) : FHIR.R4.Resources.TFhirExpansionProfileExcludedSystem;
var
  tgt : FHIR.R4.Resources.TFhirExpansionProfileExcludedSystem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirExpansionProfileExcludedSystem.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.system <> '') then
    tgt.system := src.system;

  if (src.version <> '') then
    tgt.version := src.version;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertExpansionProfileExcludedSystemComponent(src : FHIR.R4.Resources.TFhirExpansionProfileExcludedSystem) : FHIR.R3.Resources.TFhirExpansionProfileExcludedSystem;
var
  tgt : FHIR.R3.Resources.TFhirExpansionProfileExcludedSystem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirExpansionProfileExcludedSystem.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.system <> '') then
    tgt.system := src.system;

  if (src.version <> '') then
    tgt.version := src.version;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertExpansionProfileDesignationComponent(src : FHIR.R3.Resources.TFhirExpansionProfileDesignation) : FHIR.R4.Resources.TFhirExpansionProfileDesignation;
var
  tgt : FHIR.R4.Resources.TFhirExpansionProfileDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirExpansionProfileDesignation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.include <> nil) then
    tgt.include := convertDesignationIncludeComponent(src.include);

  if (src.exclude <> nil) then
    tgt.exclude := convertDesignationExcludeComponent(src.exclude);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertExpansionProfileDesignationComponent(src : FHIR.R4.Resources.TFhirExpansionProfileDesignation) : FHIR.R3.Resources.TFhirExpansionProfileDesignation;
var
  tgt : FHIR.R3.Resources.TFhirExpansionProfileDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirExpansionProfileDesignation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.include <> nil) then
    tgt.include := convertDesignationIncludeComponent(src.include);

  if (src.exclude <> nil) then
    tgt.exclude := convertDesignationExcludeComponent(src.exclude);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDesignationIncludeComponent(src : FHIR.R3.Resources.TFhirExpansionProfileDesignationInclude) : FHIR.R4.Resources.TFhirExpansionProfileDesignationInclude;
var
  tgt : FHIR.R4.Resources.TFhirExpansionProfileDesignationInclude;
  t : FHIR.R3.Resources.TFhirExpansionProfileDesignationIncludeDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirExpansionProfileDesignationInclude.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.designationList do
  begin
    tgt.designationList.add(convertDesignationIncludeDesignationComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDesignationIncludeComponent(src : FHIR.R4.Resources.TFhirExpansionProfileDesignationInclude) : FHIR.R3.Resources.TFhirExpansionProfileDesignationInclude;
var
  tgt : FHIR.R3.Resources.TFhirExpansionProfileDesignationInclude;
  t : FHIR.R4.Resources.TFhirExpansionProfileDesignationIncludeDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirExpansionProfileDesignationInclude.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.designationList do
  begin
    tgt.designationList.add(convertDesignationIncludeDesignationComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDesignationIncludeDesignationComponent(src : FHIR.R3.Resources.TFhirExpansionProfileDesignationIncludeDesignation) : FHIR.R4.Resources.TFhirExpansionProfileDesignationIncludeDesignation;
var
  tgt : FHIR.R4.Resources.TFhirExpansionProfileDesignationIncludeDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirExpansionProfileDesignationIncludeDesignation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.language <> '') then
    tgt.language := src.language;

  if (src.use <> nil) then
    tgt.use := convertCoding(src.use);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDesignationIncludeDesignationComponent(src : FHIR.R4.Resources.TFhirExpansionProfileDesignationIncludeDesignation) : FHIR.R3.Resources.TFhirExpansionProfileDesignationIncludeDesignation;
var
  tgt : FHIR.R3.Resources.TFhirExpansionProfileDesignationIncludeDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirExpansionProfileDesignationIncludeDesignation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.language <> '') then
    tgt.language := src.language;

  if (src.use <> nil) then
    tgt.use := convertCoding(src.use);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDesignationExcludeComponent(src : FHIR.R3.Resources.TFhirExpansionProfileDesignationExclude) : FHIR.R4.Resources.TFhirExpansionProfileDesignationExclude;
var
  tgt : FHIR.R4.Resources.TFhirExpansionProfileDesignationExclude;
  t : FHIR.R3.Resources.TFhirExpansionProfileDesignationExcludeDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirExpansionProfileDesignationExclude.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.designationList do
  begin
    tgt.designationList.add(convertDesignationExcludeDesignationComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDesignationExcludeComponent(src : FHIR.R4.Resources.TFhirExpansionProfileDesignationExclude) : FHIR.R3.Resources.TFhirExpansionProfileDesignationExclude;
var
  tgt : FHIR.R3.Resources.TFhirExpansionProfileDesignationExclude;
  t : FHIR.R4.Resources.TFhirExpansionProfileDesignationExcludeDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirExpansionProfileDesignationExclude.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.designationList do
  begin
    tgt.designationList.add(convertDesignationExcludeDesignationComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDesignationExcludeDesignationComponent(src : FHIR.R3.Resources.TFhirExpansionProfileDesignationExcludeDesignation) : FHIR.R4.Resources.TFhirExpansionProfileDesignationExcludeDesignation;
var
  tgt : FHIR.R4.Resources.TFhirExpansionProfileDesignationExcludeDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirExpansionProfileDesignationExcludeDesignation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.language <> '') then
    tgt.language := src.language;

  if (src.use <> nil) then
    tgt.use := convertCoding(src.use);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertDesignationExcludeDesignationComponent(src : FHIR.R4.Resources.TFhirExpansionProfileDesignationExcludeDesignation) : FHIR.R3.Resources.TFhirExpansionProfileDesignationExcludeDesignation;
var
  tgt : FHIR.R3.Resources.TFhirExpansionProfileDesignationExcludeDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirExpansionProfileDesignationExcludeDesignation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.language <> '') then
    tgt.language := src.language;

  if (src.use <> nil) then
    tgt.use := convertCoding(src.use);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

*)

class function TVersionConvertor_30_40.convertFamilyMemberHistory(src : FHIR.R3.Resources.TFhirFamilyMemberHistory) : FHIR.R4.Resources.TFhirFamilyMemberHistory;
var
  tgt : FHIR.R4.Resources.TFhirFamilyMemberHistory;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirReference;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Types.TFhirReference;
  t5 : FHIR.R3.Types.TFhirAnnotation;
  t6 : FHIR.R3.Resources.TFhirFamilyMemberHistoryCondition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirFamilyMemberHistory.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.definitionList do
  begin
    tgt.instantiatesCanonicalList.add(FHIR.R4.Types.TFhirCanonical.Create(t2.reference));
  end;
  tgt.status := convertFamilyHistoryStatus(src.status);

  if (src.notDoneReason <> nil) then
    tgt.dataAbsentReason := convertCodeableConcept(src.notDoneReason);

  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  tgt.date := src.date;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.relationship <> nil) then
    tgt.relationship := convertCodeableConcept(src.relationship);

//  tgt.gender := convertAdministrativeGender(src.gender);

  if (src.born <> nil) then
    tgt.born := convertType(src.born);

  if (src.age <> nil) then
    tgt.age := convertType(src.age);

  tgt.estimatedAge := src.estimatedAge;

  if (src.deceased <> nil) then
    tgt.deceased := convertType(src.deceased);

  for t3 in src.reasonCodeList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.reasonReferenceList do
  begin
    tgt.reasonReferenceList.add(convertReference(t4));
  end;
  for t5 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t5));
  end;
  for t6 in src.conditionList do
  begin
    tgt.conditionList.add(convertFamilyMemberHistoryConditionComponent(t6));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertFamilyMemberHistory(src : FHIR.R4.Resources.TFhirFamilyMemberHistory) : FHIR.R3.Resources.TFhirFamilyMemberHistory;
var
  tgt : FHIR.R3.Resources.TFhirFamilyMemberHistory;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirUri;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Types.TFhirReference;
  t5 : FHIR.R4.Types.TFhirAnnotation;
  t6 : FHIR.R4.Resources.TFhirFamilyMemberHistoryCondition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirFamilyMemberHistory.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.instantiatesCanonicalList do
  begin
    tgt.definitionList.add(FHIR.R3.Types.TFhirReference.create(t2.Value));
  end;
  tgt.status := convertFamilyHistoryStatus(src.status);

  if (src.dataAbsentReason <> nil) then
    tgt.notDoneReason := convertCodeableConcept(src.dataAbsentReason);

  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  tgt.date := src.date;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.relationship <> nil) then
    tgt.relationship := convertCodeableConcept(src.relationship);

//  tgt.gender := convertAdministrativeGender(src.gender);

  if (src.born <> nil) then
    tgt.born := convertType(src.born);

  if (src.age <> nil) then
    tgt.age := convertType(src.age);

  tgt.estimatedAge := src.estimatedAge;

  if (src.deceased <> nil) then
    tgt.deceased := convertType(src.deceased);

  for t3 in src.reasonCodeList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.reasonReferenceList do
  begin
    tgt.reasonReferenceList.add(convertReference(t4));
  end;
  for t5 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t5));
  end;
  for t6 in src.conditionList do
  begin
    tgt.conditionList.add(convertFamilyMemberHistoryConditionComponent(t6));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertFamilyMemberHistoryConditionComponent(src : FHIR.R3.Resources.TFhirFamilyMemberHistoryCondition) : FHIR.R4.Resources.TFhirFamilyMemberHistoryCondition;
var
  tgt : FHIR.R4.Resources.TFhirFamilyMemberHistoryCondition;
  t : FHIR.R3.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirFamilyMemberHistoryCondition.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertCodeableConcept(src.code);

  tgt.outcome := convertCodeableConcept(src.outcome);

  if (src.onset <> nil) then
    tgt.onset := convertType(src.onset);

  for t in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertFamilyMemberHistoryConditionComponent(src : FHIR.R4.Resources.TFhirFamilyMemberHistoryCondition) : FHIR.R3.Resources.TFhirFamilyMemberHistoryCondition;
var
  tgt : FHIR.R3.Resources.TFhirFamilyMemberHistoryCondition;
  t : FHIR.R4.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirFamilyMemberHistoryCondition.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertCodeableConcept(src.code);

  tgt.outcome := convertCodeableConcept(src.outcome);

  if (src.onset <> nil) then
    tgt.onset := convertType(src.onset);

  for t in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertFlag(src : FHIR.R3.Resources.TFhirFlag) : FHIR.R4.Resources.TFhirFlag;
var
  tgt : FHIR.R4.Resources.TFhirFlag;
  t : FHIR.R3.Types.TFhirIdentifier;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirFlag.Create();
  try
  copyDomainResource(src, tgt);
  for t in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t));
  end;
  tgt.status := convertFlagStatus(src.status);

  if (src.category <> nil) then
    tgt.categoryList.add(convertCodeableConcept(src.Category));

  tgt.code := convertCodeableConcept(src.code);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  if (src.encounter <> nil) then
    tgt.encounter := convertReference(src.encounter);

  if (src.author <> nil) then
    tgt.author := convertReference(src.author);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertFlag(src : FHIR.R4.Resources.TFhirFlag) : FHIR.R3.Resources.TFhirFlag;
var
  tgt : FHIR.R3.Resources.TFhirFlag;
  t : FHIR.R4.Types.TFhirIdentifier;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirFlag.Create();
  try
  copyDomainResource(src, tgt);
  for t in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t));
  end;
  tgt.status := convertFlagStatus(src.status);

  if (src.categoryList.count > 0) then
    tgt.category := convertCodeableConcept(src.categoryList[0]);

  tgt.code := convertCodeableConcept(src.code);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  if (src.encounter <> nil) then
    tgt.encounter := convertReference(src.encounter);

  if (src.author <> nil) then
    tgt.author := convertReference(src.author);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGoal(src : FHIR.R3.Resources.TFhirGoal) : FHIR.R4.Resources.TFhirGoal;
var
  tgt : FHIR.R4.Resources.TFhirGoal;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
  t3 : FHIR.R3.Types.TFhirReference;
  t4 : FHIR.R3.Types.TFhirAnnotation;
  t5 : FHIR.R3.Types.TFhirCodeableConcept;
  t6 : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirGoal.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.lifecycleStatus := convertGoalStatus(src.status);

  for t2 in src.categoryList do
  begin
    tgt.categoryList.add(convertCodeableConcept(t2));
  end;
  if (src.priority <> nil) then
    tgt.priority := convertCodeableConcept(src.priority);

  if (src.description <> nil) then
    tgt.description := convertCodeableConcept(src.description);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.start <> nil) then
    tgt.start := convertType(src.start);

  if (src.target <> nil) then
    tgt.targetList.Add(convertGoalTargetComponent(src.target));

  tgt.statusDate := src.statusDate.link;

  if (src.statusReason <> '') then
    tgt.statusReason := src.statusReason;

  if (src.expressedBy <> nil) then
    tgt.expressedBy := convertReference(src.expressedBy);

  for t3 in src.addressesList do
  begin
    tgt.addressesList.add(convertReference(t3));
  end;
  for t4 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t4));
  end;
  for t5 in src.outcomeCodeList do
  begin
    tgt.outcomeCodeList.add(convertCodeableConcept(t5));
  end;
  for t6 in src.outcomeReferenceList do
  begin
    tgt.outcomeReferenceList.add(convertReference(t6));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGoal(src : FHIR.R4.Resources.TFhirGoal) : FHIR.R3.Resources.TFhirGoal;
var
  tgt : FHIR.R3.Resources.TFhirGoal;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirCodeableConcept;
  t3 : FHIR.R4.Types.TFhirReference;
  t4 : FHIR.R4.Types.TFhirAnnotation;
  t5 : FHIR.R4.Types.TFhirCodeableConcept;
  t6 : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirGoal.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertGoalStatus(src.Lifecyclestatus);

  for t2 in src.categoryList do
  begin
    tgt.categoryList.add(convertCodeableConcept(t2));
  end;
  if (src.priority <> nil) then
    tgt.priority := convertCodeableConcept(src.priority);

  if (src.description <> nil) then
    tgt.description := convertCodeableConcept(src.description);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.start <> nil) then
    tgt.start := convertType(src.start);

  if (src.targetList.Count > 0) then
    tgt.target := convertGoalTargetComponent(src.targetList[0]);

  tgt.statusDate := src.statusDate.link;

  if (src.statusReason <> '') then
    tgt.statusReason := src.statusReason;

  if (src.expressedBy <> nil) then
    tgt.expressedBy := convertReference(src.expressedBy);

  for t3 in src.addressesList do
  begin
    tgt.addressesList.add(convertReference(t3));
  end;
  for t4 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t4));
  end;
  for t5 in src.outcomeCodeList do
  begin
    tgt.outcomeCodeList.add(convertCodeableConcept(t5));
  end;
  for t6 in src.outcomeReferenceList do
  begin
    tgt.outcomeReferenceList.add(convertReference(t6));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGoalTargetComponent(src : FHIR.R3.Resources.TFhirGoalTarget) : FHIR.R4.Resources.TFhirGoalTarget;
var
  tgt : FHIR.R4.Resources.TFhirGoalTarget;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirGoalTarget.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.measure <> nil) then
    tgt.measure := convertCodeableConcept(src.measure);

  if (src.detail <> nil) then
    tgt.detail := convertType(src.detail);

  if (src.due <> nil) then
    tgt.due := convertType(src.due);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGoalTargetComponent(src : FHIR.R4.Resources.TFhirGoalTarget) : FHIR.R3.Resources.TFhirGoalTarget;
var
  tgt : FHIR.R3.Resources.TFhirGoalTarget;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirGoalTarget.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.measure <> nil) then
    tgt.measure := convertCodeableConcept(src.measure);

  if (src.detail <> nil) then
    tgt.detail := convertType(src.detail);

  if (src.due <> nil) then
    tgt.due := convertType(src.due);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGraphDefinition(src : FHIR.R3.Resources.TFhirGraphDefinition) : FHIR.R4.Resources.TFhirGraphDefinition;
var
  tgt : FHIR.R4.Resources.TFhirGraphDefinition;
  t1 : FHIR.R3.Types.TFhirContactDetail;
  t2 : FHIR.R3.Types.TFhirUsageContext;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Resources.TFhirGraphDefinitionLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirGraphDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  tgt.start := convertActivityDefinitionKind(src.start);

  if (src.profile <> '') then
    tgt.profile := src.profile;

  for t4 in src.link_List do
  begin
    tgt.link_List.add(convertGraphDefinitionLinkComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGraphDefinition(src : FHIR.R4.Resources.TFhirGraphDefinition) : FHIR.R3.Resources.TFhirGraphDefinition;
var
  tgt : FHIR.R3.Resources.TFhirGraphDefinition;
  t1 : FHIR.R4.Types.TFhirContactDetail;
  t2 : FHIR.R4.Types.TFhirUsageContext;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Resources.TFhirGraphDefinitionLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirGraphDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  tgt.start := convertActivityDefinitionKind(src.start);

  if (src.profile <> '') then
    tgt.profile := src.profile;

  for t4 in src.link_List do
  begin
    tgt.link_List.add(convertGraphDefinitionLinkComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGraphDefinitionLinkComponent(src : FHIR.R3.Resources.TFhirGraphDefinitionLink) : FHIR.R4.Resources.TFhirGraphDefinitionLink;
var
  tgt : FHIR.R4.Resources.TFhirGraphDefinitionLink;
  t : FHIR.R3.Resources.TFhirGraphDefinitionLinkTarget;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirGraphDefinitionLink.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.path <> '') then
    tgt.path := src.path;

  if (src.sliceName <> '') then
    tgt.sliceName := src.sliceName;

  tgt.min := src.min;

  if (src.max <> '') then
    tgt.max := src.max;

  if (src.description <> '') then
    tgt.description := src.description;

  for t in src.targetList do
  begin
    tgt.targetList.add(convertGraphDefinitionLinkTargetComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGraphDefinitionLinkComponent(src : FHIR.R4.Resources.TFhirGraphDefinitionLink) : FHIR.R3.Resources.TFhirGraphDefinitionLink;
var
  tgt : FHIR.R3.Resources.TFhirGraphDefinitionLink;
  t : FHIR.R4.Resources.TFhirGraphDefinitionLinkTarget;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirGraphDefinitionLink.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.path <> '') then
    tgt.path := src.path;

  if (src.sliceName <> '') then
    tgt.sliceName := src.sliceName;

  tgt.min := src.min;

  if (src.max <> '') then
    tgt.max := src.max;

  if (src.description <> '') then
    tgt.description := src.description;

  for t in src.targetList do
  begin
    tgt.targetList.add(convertGraphDefinitionLinkTargetComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGraphDefinitionLinkTargetComponent(src : FHIR.R3.Resources.TFhirGraphDefinitionLinkTarget) : FHIR.R4.Resources.TFhirGraphDefinitionLinkTarget;
var
  tgt : FHIR.R4.Resources.TFhirGraphDefinitionLinkTarget;
  t1 : FHIR.R3.Resources.TFhirGraphDefinitionLinkTargetCompartment;
  t2 : FHIR.R3.Resources.TFhirGraphDefinitionLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirGraphDefinitionLinkTarget.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertActivityDefinitionKind(src.type_);

  if (src.profile <> '') then
    tgt.profile := src.profile;

  for t1 in src.compartmentList do
  begin
    tgt.compartmentList.add(convertGraphDefinitionLinkTargetCompartmentComponent(t1));
  end;
  for t2 in src.link_List do
  begin
    tgt.link_List.add(convertGraphDefinitionLinkComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGraphDefinitionLinkTargetComponent(src : FHIR.R4.Resources.TFhirGraphDefinitionLinkTarget) : FHIR.R3.Resources.TFhirGraphDefinitionLinkTarget;
var
  tgt : FHIR.R3.Resources.TFhirGraphDefinitionLinkTarget;
  t1 : FHIR.R4.Resources.TFhirGraphDefinitionLinkTargetCompartment;
  t2 : FHIR.R4.Resources.TFhirGraphDefinitionLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirGraphDefinitionLinkTarget.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertActivityDefinitionKind(src.type_);

  if (src.profile <> '') then
    tgt.profile := src.profile;

  for t1 in src.compartmentList do
  begin
    tgt.compartmentList.add(convertGraphDefinitionLinkTargetCompartmentComponent(t1));
  end;
  for t2 in src.link_List do
  begin
    tgt.link_List.add(convertGraphDefinitionLinkComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGraphDefinitionLinkTargetCompartmentComponent(src : FHIR.R3.Resources.TFhirGraphDefinitionLinkTargetCompartment) : FHIR.R4.Resources.TFhirGraphDefinitionLinkTargetCompartment;
var
  tgt : FHIR.R4.Resources.TFhirGraphDefinitionLinkTargetCompartment;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirGraphDefinitionLinkTargetCompartment.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertCompartmentCode(src.code);

  tgt.rule := convertGraphCompartmentRule(src.rule);

  if (src.expression <> '') then
    tgt.expression := src.expression;

  if (src.description <> '') then
    tgt.description := src.description;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGraphDefinitionLinkTargetCompartmentComponent(src : FHIR.R4.Resources.TFhirGraphDefinitionLinkTargetCompartment) : FHIR.R3.Resources.TFhirGraphDefinitionLinkTargetCompartment;
var
  tgt : FHIR.R3.Resources.TFhirGraphDefinitionLinkTargetCompartment;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirGraphDefinitionLinkTargetCompartment.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertCompartmentCode(src.code);

  tgt.rule := convertGraphCompartmentRule(src.rule);

  if (src.expression <> '') then
    tgt.expression := src.expression;

  if (src.description <> '') then
    tgt.description := src.description;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGroup(src : FHIR.R3.Resources.TFhirGroup) : FHIR.R4.Resources.TFhirGroup;
var
  tgt : FHIR.R4.Resources.TFhirGroup;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Resources.TFhirGroupCharacteristic;
  t3 : FHIR.R3.Resources.TFhirGroupMember;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirGroup.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  tgt.type_ := convertGroupType(src.type_);

  tgt.actual := src.actual;

  tgt.code := convertCodeableConcept(src.code);

  if (src.name <> '') then
    tgt.name := src.name;

  tgt.quantity := src.quantity;

  for t2 in src.characteristicList do
  begin
    tgt.characteristicList.add(convertGroupCharacteristicComponent(t2));
  end;
  for t3 in src.memberList do
  begin
    tgt.memberList.add(convertGroupMemberComponent(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGroup(src : FHIR.R4.Resources.TFhirGroup) : FHIR.R3.Resources.TFhirGroup;
var
  tgt : FHIR.R3.Resources.TFhirGroup;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Resources.TFhirGroupCharacteristic;
  t3 : FHIR.R4.Resources.TFhirGroupMember;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirGroup.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  tgt.type_ := convertGroupType(src.type_);

  tgt.actual := src.actual;

  tgt.code := convertCodeableConcept(src.code);

  if (src.name <> '') then
    tgt.name := src.name;

  tgt.quantity := src.quantity;

  for t2 in src.characteristicList do
  begin
    tgt.characteristicList.add(convertGroupCharacteristicComponent(t2));
  end;
  for t3 in src.memberList do
  begin
    tgt.memberList.add(convertGroupMemberComponent(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGroupCharacteristicComponent(src : FHIR.R3.Resources.TFhirGroupCharacteristic) : FHIR.R4.Resources.TFhirGroupCharacteristic;
var
  tgt : FHIR.R4.Resources.TFhirGroupCharacteristic;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirGroupCharacteristic.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertCodeableConcept(src.code);

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  tgt.exclude := src.exclude;

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGroupCharacteristicComponent(src : FHIR.R4.Resources.TFhirGroupCharacteristic) : FHIR.R3.Resources.TFhirGroupCharacteristic;
var
  tgt : FHIR.R3.Resources.TFhirGroupCharacteristic;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirGroupCharacteristic.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertCodeableConcept(src.code);

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  tgt.exclude := src.exclude;

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGroupMemberComponent(src : FHIR.R3.Resources.TFhirGroupMember) : FHIR.R4.Resources.TFhirGroupMember;
var
  tgt : FHIR.R4.Resources.TFhirGroupMember;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirGroupMember.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.entity <> nil) then
    tgt.entity := convertReference(src.entity);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  tgt.inactive := src.inactive;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertGroupMemberComponent(src : FHIR.R4.Resources.TFhirGroupMember) : FHIR.R3.Resources.TFhirGroupMember;
var
  tgt : FHIR.R3.Resources.TFhirGroupMember;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirGroupMember.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.entity <> nil) then
    tgt.entity := convertReference(src.entity);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  tgt.inactive := src.inactive;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertHealthcareService(src : FHIR.R3.Resources.TFhirHealthcareService) : FHIR.R4.Resources.TFhirHealthcareService;
var
  tgt : FHIR.R4.Resources.TFhirHealthcareService;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Types.TFhirReference;
  t5 : FHIR.R3.Types.TFhirContactPoint;
  t6 : FHIR.R3.Types.TFhirReference;
  t7 : FHIR.R3.Types.TFhirCodeableConcept;
  t8 : FHIR.R3.Types.TFhirString;
  t9 : FHIR.R3.Types.TFhirCodeableConcept;
  ta : FHIR.R3.Types.TFhirCodeableConcept;
  tb : FHIR.R3.Resources.TFhirHealthcareServiceAvailableTime;
  tc : FHIR.R3.Resources.TFhirHealthcareServiceNotAvailable;
  td : FHIR.R3.Types.TFhirReference;
  te : FHIR.R4.Resources.TFhirHealthcareServiceEligibility;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirHealthcareService.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  if (src.providedBy <> nil) then
    tgt.providedBy := convertReference(src.providedBy);

  if (src.category <> nil) then
    tgt.categoryList.add(convertCodeableConcept(src.Category));

  for t2 in src.type_List do
  begin
    tgt.type_List.add(convertCodeableConcept(t2));
  end;
  for t3 in src.specialtyList do
  begin
    tgt.specialtyList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.locationList do
  begin
    tgt.locationList.add(convertReference(t4));
  end;
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  if (src.extraDetails <> '') then
    tgt.extraDetails := src.extraDetails;

  if (src.photo <> nil) then
    tgt.photo := convertAttachment(src.photo);

  for t5 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t5));
  end;
  for t6 in src.coverageAreaList do
  begin
    tgt.coverageAreaList.add(convertReference(t6));
  end;
  for t7 in src.serviceProvisionCodeList do
  begin
    tgt.serviceProvisionCodeList.add(convertCodeableConcept(t7));
  end;
  if (src.eligibilityNote <> '') or (src.eligibility <> nil) then
  begin
    te := tgt.eligibilityList.Append;
    if (src.eligibility <> nil) then
      te.code := convertCodeableConcept(src.eligibility);
    if (src.eligibilityNote <> '') then
      te.comment := src.eligibilityNote;
  end;

  for t8 in src.programNameList do
  begin
    tgt.program_List.add(convertString(t8));
  end;
  for t9 in src.characteristicList do
  begin
    tgt.characteristicList.add(convertCodeableConcept(t9));
  end;
  for ta in src.referralMethodList do
  begin
    tgt.referralMethodList.add(convertCodeableConcept(ta));
  end;
  tgt.appointmentRequired := src.appointmentRequired;

  for tb in src.availableTimeList do
  begin
    tgt.availableTimeList.add(convertHealthcareServiceAvailableTimeComponent(tb));
  end;
  for tc in src.notAvailableList do
  begin
    tgt.notAvailableList.add(convertHealthcareServiceNotAvailableComponent(tc));
  end;
  if (src.availabilityExceptions <> '') then
    tgt.availabilityExceptions := src.availabilityExceptions;

  for td in src.endpointList do
  begin
    tgt.endpointList.add(convertReference(td));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertHealthcareService(src : FHIR.R4.Resources.TFhirHealthcareService) : FHIR.R3.Resources.TFhirHealthcareService;
var
  tgt : FHIR.R3.Resources.TFhirHealthcareService;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirCodeableConcept;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Types.TFhirReference;
  t5 : FHIR.R4.Types.TFhirContactPoint;
  t6 : FHIR.R4.Types.TFhirReference;
  t7 : FHIR.R4.Types.TFhirCodeableConcept;
  t8 : FHIR.R4.Types.TFhirCodeableConcept;
  t9 : FHIR.R4.Types.TFhirCodeableConcept;
  ta : FHIR.R4.Types.TFhirCodeableConcept;
  tb : FHIR.R4.Resources.TFhirHealthcareServiceAvailableTime;
  tc : FHIR.R4.Resources.TFhirHealthcareServiceNotAvailable;
  td : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirHealthcareService.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  if (src.providedBy <> nil) then
    tgt.providedBy := convertReference(src.providedBy);

  if (src.categoryList.count > 0) then
    tgt.category := convertCodeableConcept(src.categoryList[0]);

  for t2 in src.type_List do
  begin
    tgt.type_List.add(convertCodeableConcept(t2));
  end;
  for t3 in src.specialtyList do
  begin
    tgt.specialtyList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.locationList do
  begin
    tgt.locationList.add(convertReference(t4));
  end;
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  if (src.extraDetails <> '') then
    tgt.extraDetails := src.extraDetails;

  if (src.photo <> nil) then
    tgt.photo := convertAttachment(src.photo);

  for t5 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t5));
  end;
  for t6 in src.coverageAreaList do
  begin
    tgt.coverageAreaList.add(convertReference(t6));
  end;
  for t7 in src.serviceProvisionCodeList do
  begin
    tgt.serviceProvisionCodeList.add(convertCodeableConcept(t7));
  end;
  if (src.eligibilityList.Count > 0) then
  begin
    tgt.eligibility := convertCodeableConcept(src.eligibilityList[0].code);
    if (src.comment <> '') then
      tgt.eligibilityNote := src.comment;
  end;

  for t8 in src.program_List do
  begin
    tgt.programNameList.add(t8.text);
  end;
  for t9 in src.characteristicList do
  begin
    tgt.characteristicList.add(convertCodeableConcept(t9));
  end;
  for ta in src.referralMethodList do
  begin
    tgt.referralMethodList.add(convertCodeableConcept(ta));
  end;
  tgt.appointmentRequired := src.appointmentRequired;

  for tb in src.availableTimeList do
  begin
    tgt.availableTimeList.add(convertHealthcareServiceAvailableTimeComponent(tb));
  end;
  for tc in src.notAvailableList do
  begin
    tgt.notAvailableList.add(convertHealthcareServiceNotAvailableComponent(tc));
  end;
  if (src.availabilityExceptions <> '') then
    tgt.availabilityExceptions := src.availabilityExceptions;

  for td in src.endpointList do
  begin
    tgt.endpointList.add(convertReference(td));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertHealthcareServiceAvailableTimeComponent(src : FHIR.R3.Resources.TFhirHealthcareServiceAvailableTime) : FHIR.R4.Resources.TFhirHealthcareServiceAvailableTime;
var
  tgt : FHIR.R4.Resources.TFhirHealthcareServiceAvailableTime;
  t : FHIR.R3.Types.TFhirDaysOfWeekEnum;
  a : FHIR.R4.Types.TFhirDaysOfWeekEnumList;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirHealthcareServiceAvailableTime.Create();
  try
  copyBackboneElement(src, tgt);

  a := [];
  for t := low(FHIR.R3.Types.TFhirDaysOfWeekEnum) to high(FHIR.R3.Types.TFhirDaysOfWeekEnum) do
    if t in src.daysOfWeek then
      a := a + [convertDayOfWeek(t)];
  tgt.daysOfWeek := a;

  tgt.allDay := src.allDay;

  if (src.availableStartTime <> '') then
    tgt.availableStartTime := src.availableStartTime;

  if (src.availableEndTime <> '') then
    tgt.availableEndTime := src.availableEndTime;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;


class function TVersionConvertor_30_40.convertHealthcareServiceAvailableTimeComponent(src : FHIR.R4.Resources.TFhirHealthcareServiceAvailableTime) : FHIR.R3.Resources.TFhirHealthcareServiceAvailableTime;
var
  tgt : FHIR.R3.Resources.TFhirHealthcareServiceAvailableTime;
  t : FHIR.R4.Types.TFhirDaysOfWeekEnum;
  a : FHIR.R3.Types.TFhirDaysOfWeekEnumList;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirHealthcareServiceAvailableTime.Create();
  try
  copyBackboneElement(src, tgt);
  a := [];
  for t := low(FHIR.R4.Types.TFhirDaysOfWeekEnum) to high(FHIR.R4.Types.TFhirDaysOfWeekEnum) do
    if t in src.daysOfWeek then
      a := a + [convertDayOfWeek(t)];
  tgt.daysOfWeek := a;

  tgt.allDay := src.allDay;

  if (src.availableStartTime <> '') then
    tgt.availableStartTime := src.availableStartTime;

  if (src.availableEndTime <> '') then
    tgt.availableEndTime := src.availableEndTime;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertHealthcareServiceNotAvailableComponent(src : FHIR.R3.Resources.TFhirHealthcareServiceNotAvailable) : FHIR.R4.Resources.TFhirHealthcareServiceNotAvailable;
var
  tgt : FHIR.R4.Resources.TFhirHealthcareServiceNotAvailable;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirHealthcareServiceNotAvailable.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.description <> '') then
    tgt.description := src.description;

  if (src.during <> nil) then
    tgt.during := convertPeriod(src.during);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertHealthcareServiceNotAvailableComponent(src : FHIR.R4.Resources.TFhirHealthcareServiceNotAvailable) : FHIR.R3.Resources.TFhirHealthcareServiceNotAvailable;
var
  tgt : FHIR.R3.Resources.TFhirHealthcareServiceNotAvailable;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirHealthcareServiceNotAvailable.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.description <> '') then
    tgt.description := src.description;

  if (src.during <> nil) then
    tgt.during := convertPeriod(src.during);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImmunization(src : FHIR.R3.Resources.TFhirImmunization) : FHIR.R4.Resources.TFhirImmunization;
var
  tgt : FHIR.R4.Resources.TFhirImmunization;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Resources.TFhirImmunizationPractitioner;
  t3 : FHIR.R3.Types.TFhirAnnotation;
  t4 : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirImmunization.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertImmunizationStatus(src.status);

  if (src.vaccineCode <> nil) then
    tgt.vaccineCode := convertCodeableConcept(src.vaccineCode);

  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  if (src.encounter <> nil) then
    tgt.encounter := convertReference(src.encounter);

  tgt.occurrence := convertType(src.dateElement);

  tgt.primarySource := src.primarySource;

  if (src.reportOrigin <> nil) then
    tgt.reportOrigin := convertCodeableConcept(src.reportOrigin);

  if (src.location <> nil) then
    tgt.location := convertReference(src.location);

  if (src.manufacturer <> nil) then
    tgt.manufacturer := convertReference(src.manufacturer);

  if (src.lotNumber <> '') then
    tgt.lotNumber := src.lotNumber;

  tgt.expirationDate := src.expirationDate.link;

  if (src.site <> nil) then
    tgt.site := convertCodeableConcept(src.site);

  if (src.route <> nil) then
    tgt.route := convertCodeableConcept(src.route);

  if (src.doseQuantity <> nil) then
    tgt.doseQuantity := convertSimpleQuantity(src.doseQuantity);

  for t2 in src.practitionerList do
  begin
    tgt.performerList.add(convertImmunizationPractitionerComponent(t2));
  end;
  for t3 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t3));
  end;
  if src.Explanation <> nil then
    for t4 in src.Explanation.reasonList do
    begin
      tgt.reasonCodeList.add(convertCodeableConcept(t4));
    end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImmunization(src : FHIR.R4.Resources.TFhirImmunization) : FHIR.R3.Resources.TFhirImmunization;
var
  tgt : FHIR.R3.Resources.TFhirImmunization;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Resources.TFhirImmunizationPerformer;
  t3 : FHIR.R4.Types.TFhirAnnotation;
  t4 : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirImmunization.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertImmunizationStatus(src.status);

  if (src.vaccineCode <> nil) then
    tgt.vaccineCode := convertCodeableConcept(src.vaccineCode);

  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  if (src.encounter <> nil) then
    tgt.encounter := convertReference(src.encounter);

  if src.occurrence is TFhirDate then
    tgt.dateElement := convertDateTime(src.occurrence as TFhirDateTime);

  tgt.primarySource := src.primarySource;

  if (src.reportOrigin <> nil) then
    tgt.reportOrigin := convertCodeableConcept(src.reportOrigin);

  if (src.location <> nil) then
    tgt.location := convertReference(src.location);

  if (src.manufacturer <> nil) then
    tgt.manufacturer := convertReference(src.manufacturer);

  if (src.lotNumber <> '') then
    tgt.lotNumber := src.lotNumber;

  tgt.expirationDate := src.expirationDate.link;

  if (src.site <> nil) then
    tgt.site := convertCodeableConcept(src.site);

  if (src.route <> nil) then
    tgt.route := convertCodeableConcept(src.route);

  if (src.doseQuantity <> nil) then
    tgt.doseQuantity := convertSimpleQuantity(src.doseQuantity);

  for t2 in src.performerList do
  begin
    tgt.practitionerList.add(convertImmunizationPractitionerComponent(t2));
  end;
  for t3 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t3));
  end;
  for t4 in src.reasonCodeList do
  begin
    if tgt.Explanation = nil then
      tgt.Explanation := TFhirImmunizationExplanation.create;
    tgt.Explanation.reasonList.add(convertCodeableConcept(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImmunizationPractitionerComponent(src : FHIR.R3.Resources.TFhirImmunizationPractitioner) : FHIR.R4.Resources.TFhirImmunizationPerformer;
var
  tgt : FHIR.R4.Resources.TFhirImmunizationPerformer;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirImmunizationPerformer.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.role <> nil) then
    tgt.function_ := convertCodeableConcept(src.role);

  if (src.actor <> nil) then
    tgt.actor := convertReference(src.actor);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImmunizationPractitionerComponent(src : FHIR.R4.Resources.TFhirImmunizationPerformer) : FHIR.R3.Resources.TFhirImmunizationPractitioner;
var
  tgt : FHIR.R3.Resources.TFhirImmunizationPractitioner;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirImmunizationPractitioner.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.function_ <> nil) then
    tgt.role := convertCodeableConcept(src.function_);

  if (src.actor <> nil) then
    tgt.actor := convertReference(src.actor);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImplementationGuide(src : FHIR.R3.Resources.TFhirImplementationGuide) : FHIR.R4.Resources.TFhirImplementationGuide;
var
  tgt : FHIR.R4.Resources.TFhirImplementationGuide;
  t1 : FHIR.R3.Types.TFhirContactDetail;
  t2 : FHIR.R3.Types.TFhirUsageContext;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Resources.TFhirImplementationGuideDependency;
  t5 : FHIR.R3.Resources.TFhirImplementationGuidePackage;
  t6 : FHIR.R3.Resources.TFhirImplementationGuideGlobal;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirImplementationGuide.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  if (src.fhirVersion <> '') then
    tgt.fhirVersion := [FHIR.R4.Types.TFhirFHIRVersionEnum(StringArrayIndexOfSensitive(FHIR.R4.Types.CODES_TFhirFHIRVersionEnum, src.fhirVersion))];

  for t4 in src.dependencyList do
  begin
    tgt.dependsOnList.add(convertImplementationGuideDependencyComponent(t4));
  end;
  for t5 in src.packageList do
  begin
    if tgt.definition = nil then
      tgt.definition := FHIR.R4.Resources.TFhirImplementationGuideDefinition.create;

    tgt.Definition.groupingList.add(convertImplementationGuidePackageComponent(tgt.Definition, t5));
  end;
  for t6 in src.globalList do
  begin
    tgt.globalList.add(convertImplementationGuideGlobalComponent(t6));
  end;
  if (src.page <> nil) then
    tgt.Definition.page := convertImplementationGuidePageComponent(src.page);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImplementationGuide(src : FHIR.R4.Resources.TFhirImplementationGuide) : FHIR.R3.Resources.TFhirImplementationGuide;
var
  tgt : FHIR.R3.Resources.TFhirImplementationGuide;
  t1 : FHIR.R4.Types.TFhirContactDetail;
  t2 : FHIR.R4.Types.TFhirUsageContext;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Resources.TFhirImplementationGuideDependsOn;
  t5 : FHIR.R4.Resources.TFhirImplementationGuideDefinitionGrouping;
  t6 : FHIR.R4.Resources.TFhirImplementationGuideDefinitionResource;
  t7 : FHIR.R4.Resources.TFhirImplementationGuideGlobal;
  a : FHIR.R4.Types.TFhirFHIRVersionEnum;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirImplementationGuide.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  for a := low(TFhirFHIRVersionEnum) to high(TFhirFHIRVersionEnum) do
    if (a in src.fhirVersion) and (a <> FHIRVersionNull) then
      tgt.fhirVersion := FHIR.R4.Types.CODES_TFhirFHIRVersionEnum[a];

  for t4 in src.dependsOnList do
  begin
    tgt.dependencyList.add(convertImplementationGuideDependencyComponent(t4));
  end;
  for t5 in src.Definition.groupingList do
  begin
    tgt.packageList.add(convertImplementationGuidePackageComponent(t5));
  end;
  for t6 in src.Definition.resourceList do
  begin
    findPackage(tgt.packageList, t6.groupingId).resourceList.add(convertImplementationGuidePackageResourceComponent(t6));
  end;
  for t7 in src.globalList do
  begin
    tgt.globalList.add(convertImplementationGuideGlobalComponent(t7));
  end;
  if (src.Definition.page <> nil) then
    tgt.page := convertImplementationGuidePageComponent(src.Definition.page);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImplementationGuideDependencyComponent(src : FHIR.R3.Resources.TFhirImplementationGuideDependency) : FHIR.R4.Resources.TFhirImplementationGuideDependsOn;
var
  tgt : FHIR.R4.Resources.TFhirImplementationGuideDependsOn;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirImplementationGuideDependsOn.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.uri <> '') then
    tgt.uri := src.uri;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImplementationGuideDependencyComponent(src : FHIR.R4.Resources.TFhirImplementationGuideDependsOn) : FHIR.R3.Resources.TFhirImplementationGuideDependency;
var
  tgt : FHIR.R3.Resources.TFhirImplementationGuideDependency;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirImplementationGuideDependency.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := FHIR.R3.Types.GuideDependencyTypeReference;
  if (src.uri <> '') then
    tgt.uri := src.uri;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImplementationGuidePackageComponent(context : FHIR.R4.Resources.TFhirImplementationGuideDefinition; src : FHIR.R3.Resources.TFhirImplementationGuidePackage) : FHIR.R4.Resources.TFhirImplementationGuideDefinitionGrouping;
var
  tgt : FHIR.R4.Resources.TFhirImplementationGuideDefinitionGrouping;
  t : FHIR.R3.Resources.TFhirImplementationGuidePackageResource;
  tn : FHIR.R4.Resources.TFhirImplementationGuideDefinitionResource;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirImplementationGuideDefinitionGrouping.Create();
  try
  tgt.Id := 'p' + inttostr(context.groupingList.count() + 1);
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.description <> '') then
    tgt.description := src.description;

  for t in src.resourceList do
  begin
      tn := convertImplementationGuidePackageResourceComponent(t);
      tn.groupingId := tgt.id;
      context.resourceList.add(tn);
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImplementationGuidePackageComponent(src : FHIR.R4.Resources.TFhirImplementationGuideDefinitionGrouping) : FHIR.R3.Resources.TFhirImplementationGuidePackage;
var
  tgt : FHIR.R3.Resources.TFhirImplementationGuidePackage;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirImplementationGuidePackage.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.id := src.id;
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.description <> '') then
    tgt.description := src.description;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImplementationGuidePackageResourceComponent(src : FHIR.R3.Resources.TFhirImplementationGuidePackageResource) : FHIR.R4.Resources.TFhirImplementationGuideDefinitionResource;
var
  tgt : FHIR.R4.Resources.TFhirImplementationGuideDefinitionResource;
  t : FHIR.R4.Types.TFhirType;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirImplementationGuideDefinitionResource.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.exampleFor <> nil) then
  begin
    t := convertType(src.ExampleFor);
    if t is FHIR.R4.Types.TFhirReference then
    begin
      tgt.Example := FHIR.R4.Types.TFhirCanonical.create((t as FHIR.R4.Types.TFhirReference).Reference);
      t.Free;
    end
    else
      tgt.Example := t;
  end
  else if (src.example) then
    tgt.Example := FHIR.R4.Types.TFHIRBoolean.create(src.Example);

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.source is FHIR.R3.Types.TFHIRReference) then
    tgt.reference := convertReference(src.source as FHIR.R3.Types.TFHIRReference)
  else
    if (src.source is FHIR.R3.Types.TFHIRUri) then
      tgt.Reference := FHIR.R4.Types.TFhirReference.create((src.Source as FHIR.R3.Types.TFHIRUri).value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImplementationGuidePackageResourceComponent(src : FHIR.R4.Resources.TFhirImplementationGuideDefinitionResource) : FHIR.R3.Resources.TFhirImplementationGuidePackageResource;
var
  tgt : FHIR.R3.Resources.TFhirImplementationGuidePackageResource;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirImplementationGuidePackageResource.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.example is FHIR.R4.Types.TFHIRCanonical) then
  begin
    tgt.exampleFor := convertCanonicalToReference(src.example as FHIR.R4.Types.TFHIRCanonical);
    tgt.example := true;
  end
  else if (src.example is FHIR.R4.Types.TFHIRBoolean) then
    tgt.example := (src.Example as FHIR.R4.Types.TFHIRBoolean).value;


  if (src.name <> '') then
    tgt.name := src.name;

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.reference <> nil) then
    tgt.source := convertReference(src.reference);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImplementationGuideGlobalComponent(src : FHIR.R3.Resources.TFhirImplementationGuideGlobal) : FHIR.R4.Resources.TFhirImplementationGuideGlobal;
var
  tgt : FHIR.R4.Resources.TFhirImplementationGuideGlobal;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirImplementationGuideGlobal.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertActivityDefinitionKind(src.type_);

  if (src.profile <> nil) then
    tgt.profileElement := convertReferenceToCanonical(src.profile);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImplementationGuideGlobalComponent(src : FHIR.R4.Resources.TFhirImplementationGuideGlobal) : FHIR.R3.Resources.TFhirImplementationGuideGlobal;
var
  tgt : FHIR.R3.Resources.TFhirImplementationGuideGlobal;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirImplementationGuideGlobal.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertActivityDefinitionKind(src.type_);

  if (src.profile <> '') then
    tgt.profile := convertCanonicalToReference(src.profileElement);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImplementationGuidePageComponent(src : FHIR.R3.Resources.TFhirImplementationGuidePage) : FHIR.R4.Resources.TFhirImplementationGuideDefinitionPage;
var
  tgt : FHIR.R4.Resources.TFhirImplementationGuideDefinitionPage;
  t : FHIR.R3.Resources.TFhirImplementationGuidePage;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirImplementationGuideDefinitionPage.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.source <> '') then
    tgt.name := convertUriToUrl(src.sourceElement);

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.generation := convertPageGeneration(src.kind);

  for t in src.pageList do
  begin
    tgt.pageList.add(convertImplementationGuidePageComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertImplementationGuidePageComponent(src : FHIR.R4.Resources.TFhirImplementationGuideDefinitionPage) : FHIR.R3.Resources.TFhirImplementationGuidePage;
var
  tgt : FHIR.R3.Resources.TFhirImplementationGuidePage;
  t : FHIR.R4.Resources.TFhirImplementationGuideDefinitionPage;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirImplementationGuidePage.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name is FHIR.R4.Types.TFHIRUrl) then
    tgt.source := (src.Name as FHIR.R4.Types.TFHIRUrl).value;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.kind := convertPageGeneration(src.generation);

  for t in src.pageList do
  begin
    tgt.pageList.add(convertImplementationGuidePageComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertLinkage(src : FHIR.R3.Resources.TFhirLinkage) : FHIR.R4.Resources.TFhirLinkage;
var
  tgt : FHIR.R4.Resources.TFhirLinkage;
  t : FHIR.R3.Resources.TFhirLinkageItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirLinkage.Create();
  try
  copyDomainResource(src, tgt);
  tgt.active := src.active;

  if (src.author <> nil) then
    tgt.author := convertReference(src.author);

  for t in src.itemList do
  begin
    tgt.itemList.add(convertLinkageItemComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertLinkage(src : FHIR.R4.Resources.TFhirLinkage) : FHIR.R3.Resources.TFhirLinkage;
var
  tgt : FHIR.R3.Resources.TFhirLinkage;
  t : FHIR.R4.Resources.TFhirLinkageItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirLinkage.Create();
  try
  copyDomainResource(src, tgt);
  tgt.active := src.active;

  if (src.author <> nil) then
    tgt.author := convertReference(src.author);

  for t in src.itemList do
  begin
    tgt.itemList.add(convertLinkageItemComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertLinkageItemComponent(src : FHIR.R3.Resources.TFhirLinkageItem) : FHIR.R4.Resources.TFhirLinkageItem;
var
  tgt : FHIR.R4.Resources.TFhirLinkageItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirLinkageItem.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertLinkageType(src.type_);

  if (src.resource <> nil) then
    tgt.resource := convertReference(src.resource);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertLinkageItemComponent(src : FHIR.R4.Resources.TFhirLinkageItem) : FHIR.R3.Resources.TFhirLinkageItem;
var
  tgt : FHIR.R3.Resources.TFhirLinkageItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirLinkageItem.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertLinkageType(src.type_);

  if (src.resource <> nil) then
    tgt.resource := convertReference(src.resource);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertList(src : FHIR.R3.Resources.TFhirList) : FHIR.R4.Resources.TFhirList;
var
  tgt : FHIR.R4.Resources.TFhirList;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirAnnotation;
  t3 : FHIR.R3.Resources.TFhirListEntry;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirList.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertListStatus(src.status);

  tgt.mode := convertListMode(src.mode);

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.code := convertCodeableConcept(src.code);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.encounter <> nil) then
    tgt.encounter := convertReference(src.encounter);

  tgt.date := src.date;

  if (src.source <> nil) then
    tgt.source := convertReference(src.source);

  if (src.orderedBy <> nil) then
    tgt.orderedBy := convertCodeableConcept(src.orderedBy);

  for t2 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t2));
  end;
  for t3 in src.entryList do
  begin
    tgt.entryList.add(convertListEntryComponent(t3));
  end;
  if (src.emptyReason <> nil) then
    tgt.emptyReason := convertCodeableConcept(src.emptyReason);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertList(src : FHIR.R4.Resources.TFhirList) : FHIR.R3.Resources.TFhirList;
var
  tgt : FHIR.R3.Resources.TFhirList;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirAnnotation;
  t3 : FHIR.R4.Resources.TFhirListEntry;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirList.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertListStatus(src.status);

  tgt.mode := convertListMode(src.mode);

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.code := convertCodeableConcept(src.code);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.encounter <> nil) then
    tgt.encounter := convertReference(src.encounter);

  tgt.date := src.date;

  if (src.source <> nil) then
    tgt.source := convertReference(src.source);

  if (src.orderedBy <> nil) then
    tgt.orderedBy := convertCodeableConcept(src.orderedBy);

  for t2 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t2));
  end;
  for t3 in src.entryList do
  begin
    tgt.entryList.add(convertListEntryComponent(t3));
  end;
  if (src.emptyReason <> nil) then
    tgt.emptyReason := convertCodeableConcept(src.emptyReason);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertListEntryComponent(src : FHIR.R3.Resources.TFhirListEntry) : FHIR.R4.Resources.TFhirListEntry;
var
  tgt : FHIR.R4.Resources.TFhirListEntry;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirListEntry.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.flag <> nil) then
    tgt.flag := convertCodeableConcept(src.flag);

  tgt.deleted := src.deleted;

  tgt.date := src.date;

  if (src.item <> nil) then
    tgt.item := convertReference(src.item);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertListEntryComponent(src : FHIR.R4.Resources.TFhirListEntry) : FHIR.R3.Resources.TFhirListEntry;
var
  tgt : FHIR.R3.Resources.TFhirListEntry;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirListEntry.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.flag <> nil) then
    tgt.flag := convertCodeableConcept(src.flag);

  tgt.deleted := src.deleted;

  tgt.date := src.date;

  if (src.item <> nil) then
    tgt.item := convertReference(src.item);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertLocation(src : FHIR.R3.Resources.TFhirLocation) : FHIR.R4.Resources.TFhirLocation;
var
  tgt : FHIR.R4.Resources.TFhirLocation;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirString;
  t3 : FHIR.R3.Types.TFhirContactPoint;
  t4 : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirLocation.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertLocationStatus(src.status);

  if (src.operationalStatus <> nil) then
    tgt.operationalStatus := convertCoding(src.operationalStatus);

  if (src.name <> '') then
    tgt.name := src.name;

  for t2 in src.aliasList do
  begin
    tgt.aliasList.add(convertString(t2));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  tgt.mode := convertLocationMode(src.mode);

  tgt.type_List.add(convertCodeableConcept(src.Type_));

  for t3 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t3));
  end;
  if (src.address <> nil) then
    tgt.address := convertAddress(src.address);

  if (src.physicalType <> nil) then
    tgt.physicalType := convertCodeableConcept(src.physicalType);

  if (src.position <> nil) then
    tgt.position := convertLocationPositionComponent(src.position);

  if (src.managingOrganization <> nil) then
    tgt.managingOrganization := convertReference(src.managingOrganization);

  if (src.partOf <> nil) then
    tgt.partOf := convertReference(src.partOf);

  for t4 in src.endpointList do
  begin
    tgt.endpointList.add(convertReference(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertLocation(src : FHIR.R4.Resources.TFhirLocation) : FHIR.R3.Resources.TFhirLocation;
var
  tgt : FHIR.R3.Resources.TFhirLocation;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirString;
  t3 : FHIR.R4.Types.TFhirContactPoint;
  t4 : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirLocation.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertLocationStatus(src.status);

  if (src.operationalStatus <> nil) then
    tgt.operationalStatus := convertCoding(src.operationalStatus);

  if (src.name <> '') then
    tgt.name := src.name;

  for t2 in src.aliasList do
  begin
    tgt.aliasList.add(convertString(t2));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  tgt.mode := convertLocationMode(src.mode);

  if (src.type_List.count > 0) then
    tgt.type_ := convertCodeableConcept(src.type_List[0]);

  for t3 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t3));
  end;
  if (src.address <> nil) then
    tgt.address := convertAddress(src.address);

  if (src.physicalType <> nil) then
    tgt.physicalType := convertCodeableConcept(src.physicalType);

  if (src.position <> nil) then
    tgt.position := convertLocationPositionComponent(src.position);

  if (src.managingOrganization <> nil) then
    tgt.managingOrganization := convertReference(src.managingOrganization);

  if (src.partOf <> nil) then
    tgt.partOf := convertReference(src.partOf);

  for t4 in src.endpointList do
  begin
    tgt.endpointList.add(convertReference(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertLocationPositionComponent(src : FHIR.R3.Resources.TFhirLocationPosition) : FHIR.R4.Resources.TFhirLocationPosition;
var
  tgt : FHIR.R4.Resources.TFhirLocationPosition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirLocationPosition.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.longitude := src.longitude;
  tgt.latitude := src.latitude;
  tgt.altitude := src.altitude;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertLocationPositionComponent(src : FHIR.R4.Resources.TFhirLocationPosition) : FHIR.R3.Resources.TFhirLocationPosition;
var
  tgt : FHIR.R3.Resources.TFhirLocationPosition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirLocationPosition.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.longitude := src.longitude;
  tgt.latitude := src.latitude;
  tgt.altitude := src.altitude;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationIngredientComponent(src : FHIR.R3.Resources.TFhirMedicationIngredient) : FHIR.R4.Resources.TFhirMedicationIngredient;
var
  tgt : FHIR.R4.Resources.TFhirMedicationIngredient;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMedicationIngredient.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.item <> nil) then
    tgt.item := convertType(src.item);

  tgt.isActive := src.isActive;

  if (src.amount <> nil) then
    tgt.strength := convertRatio(src.amount);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationIngredientComponent(src : FHIR.R4.Resources.TFhirMedicationIngredient) : FHIR.R3.Resources.TFhirMedicationIngredient;
var
  tgt : FHIR.R3.Resources.TFhirMedicationIngredient;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMedicationIngredient.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.item <> nil) then
    tgt.item := convertType(src.item);

  tgt.isActive := src.isActive;

  if (src.strength <> nil) then
    tgt.amount := convertRatio(src.strength);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationPackageBatchComponent(src : FHIR.R3.Resources.TFhirMedicationPackageBatch) : FHIR.R4.Resources.TFhirMedicationBatch;
var
  tgt : FHIR.R4.Resources.TFhirMedicationBatch;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMedicationBatch.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.LotNumber := src.LotNumber;
  tgt.ExpirationDate := src.ExpirationDate;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationPackageBatchComponent(src : FHIR.R4.Resources.TFhirMedicationBatch) : FHIR.R3.Resources.TFhirMedicationPackageBatch;
var
  tgt : FHIR.R3.Resources.TFhirMedicationPackageBatch;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMedicationPackageBatch.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.LotNumber := src.LotNumber;
  tgt.ExpirationDate := src.ExpirationDate;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedication(src : FHIR.R4.Resources.TFhirMedication) : FHIR.R3.Resources.TFhirMedication;
var
  tgt : FHIR.R3.Resources.TFhirMedication;
  t : FHIR.R4.Resources.TFhirMedicationIngredient;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMedication.Create();
  try
  copyDomainResource(src, tgt);
  tgt.Code := convertCodeableConcept(src.Code);
  tgt.Status := convertMedicationStatus(src.Status);
  tgt.Manufacturer := convertReference(src.Manufacturer);
  tgt.Form := convertCodeableConcept(src.Form);
  for t in src.ingredientList do
    tgt.IngredientList.add(convertMedicationIngredientComponent(t));
  if (src.batch <> nil) then
  begin
    tgt.package := FHIR.R3.Resources.TFhirMedicationPackage.Create;
    tgt.package.BatchList.add(convertMedicationPackageBatchComponent(src.batch));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedication(src : FHIR.R3.Resources.TFhirMedication) : FHIR.R4.Resources.TFhirMedication;
var
  tgt : FHIR.R4.Resources.TFhirMedication;
  t : FHIR.R3.Resources.TFhirMedicationIngredient;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMedication.Create();
  try
  copyDomainResource(src, tgt);
  tgt.Code := convertCodeableConcept(src.Code);
  tgt.Status := convertMedicationStatus(src.Status);
  tgt.Manufacturer := convertReference(src.Manufacturer);
  tgt.Form := convertCodeableConcept(src.Form);
  for t in src.ingredientList do
    tgt.IngredientList.add(convertMedicationIngredientComponent(t));
  if (src.package <> nil) and (src.Package.batchList.Count > 0) then
    tgt.batch := convertMedicationPackageBatchComponent(src.Package.batchList[0]);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationAdministration(src : FHIR.R3.Resources.TFhirMedicationAdministration) : FHIR.R4.Resources.TFhirMedicationAdministration;
var
  tgt : FHIR.R4.Resources.TFhirMedicationAdministration;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirReference;
  t3 : FHIR.R3.Types.TFhirReference;
  t4 : FHIR.R3.Types.TFhirReference;
  t5 : FHIR.R3.Resources.TFhirMedicationAdministrationPerformer;
  t6 : FHIR.R3.Types.TFhirCodeableConcept;
  t7 : FHIR.R3.Types.TFhirReference;
  t8 : FHIR.R3.Types.TFhirReference;
  t9 : FHIR.R3.Types.TFhirAnnotation;
  ta : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMedicationAdministration.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.definitionList do
  begin
    tgt.instantiatesList.add(FHIR.R4.Types.TFhirCanonical.Create(t2.reference));
  end;
  for t3 in src.partOfList do
  begin
    tgt.partOfList.add(convertReference(t3));
  end;
  tgt.status := convertMedicationAdministrationStatus(src.status);

  if (src.category <> nil) then
    tgt.category := convertCodeableConcept(src.category);

  if (src.medication <> nil) then
    tgt.medication := convertType(src.medication);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.context <> nil) then
    tgt.context := convertReference(src.context);

  for t4 in src.supportingInformationList do
  begin
    tgt.supportingInformationList.add(convertReference(t4));
  end;
  if (src.effective <> nil) then
    tgt.effective := convertType(src.effective);

  for t5 in src.performerList do
  begin
    tgt.performerList.add(convertMedicationAdministrationPerformerComponent(t5));
  end;
  for t6 in src.reasonCodeList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t6));
  end;
  for t7 in src.reasonReferenceList do
  begin
    tgt.reasonReferenceList.add(convertReference(t7));
  end;
  if (src.prescription <> nil) then
    tgt.request := convertReference(src.prescription);

  for t8 in src.deviceList do
  begin
    tgt.deviceList.add(convertReference(t8));
  end;
  for t9 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t9));
  end;
  if (src.dosage <> nil) then
    tgt.dosage := convertMedicationAdministrationDosageComponent(src.dosage);

  for ta in src.eventHistoryList do
  begin
    tgt.eventHistoryList.add(convertReference(ta));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationAdministration(src : FHIR.R4.Resources.TFhirMedicationAdministration) : FHIR.R3.Resources.TFhirMedicationAdministration;
var
  tgt : FHIR.R3.Resources.TFhirMedicationAdministration;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirUri;
  t3 : FHIR.R4.Types.TFhirReference;
  t4 : FHIR.R4.Types.TFhirReference;
  t5 : FHIR.R4.Resources.TFhirMedicationAdministrationPerformer;
  t6 : FHIR.R4.Types.TFhirCodeableConcept;
  t7 : FHIR.R4.Types.TFhirReference;
  t8 : FHIR.R4.Types.TFhirReference;
  t9 : FHIR.R4.Types.TFhirAnnotation;
  ta : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMedicationAdministration.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.instantiatesList do
  begin
    tgt.definitionList.add(FHIR.R3.Types.TFhirUri.Create(t2.value));
  end;
  for t3 in src.partOfList do
  begin
    tgt.partOfList.add(convertReference(t3));
  end;
  tgt.status := convertMedicationAdministrationStatus(src.status);

  if (src.category <> nil) then
    tgt.category := convertCodeableConcept(src.category);

  if (src.medication <> nil) then
    tgt.medication := convertType(src.medication);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.context <> nil) then
    tgt.context := convertReference(src.context);

  for t4 in src.supportingInformationList do
  begin
    tgt.supportingInformationList.add(convertReference(t4));
  end;
  if (src.effective <> nil) then
    tgt.effective := convertType(src.effective);

  for t5 in src.performerList do
  begin
    tgt.performerList.add(convertMedicationAdministrationPerformerComponent(t5));
  end;
  for t6 in src.reasonCodeList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t6));
  end;
  for t7 in src.reasonReferenceList do
  begin
    tgt.reasonReferenceList.add(convertReference(t7));
  end;
  if (src.request <> nil) then
    tgt.prescription := convertReference(src.request);

  for t8 in src.deviceList do
  begin
    tgt.deviceList.add(convertReference(t8));
  end;
  for t9 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t9));
  end;
  if (src.dosage <> nil) then
    tgt.dosage := convertMedicationAdministrationDosageComponent(src.dosage);

  for ta in src.eventHistoryList do
  begin
    tgt.eventHistoryList.add(convertReference(ta));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationAdministrationPerformerComponent(src : FHIR.R3.Resources.TFhirMedicationAdministrationPerformer) : FHIR.R4.Resources.TFhirMedicationAdministrationPerformer;
var
  tgt : FHIR.R4.Resources.TFhirMedicationAdministrationPerformer;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMedicationAdministrationPerformer.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.actor <> nil) then
    tgt.actor := convertReference(src.actor);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationAdministrationPerformerComponent(src : FHIR.R4.Resources.TFhirMedicationAdministrationPerformer) : FHIR.R3.Resources.TFhirMedicationAdministrationPerformer;
var
  tgt : FHIR.R3.Resources.TFhirMedicationAdministrationPerformer;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMedicationAdministrationPerformer.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.actor <> nil) then
    tgt.actor := convertReference(src.actor);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationAdministrationDosageComponent(src : FHIR.R3.Resources.TFhirMedicationAdministrationDosage) : FHIR.R4.Resources.TFhirMedicationAdministrationDosage;
var
  tgt : FHIR.R4.Resources.TFhirMedicationAdministrationDosage;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMedicationAdministrationDosage.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.text <> '') then
    tgt.text := src.text;

  if (src.site <> nil) then
    tgt.site := convertCodeableConcept(src.site);

  if (src.route <> nil) then
    tgt.route := convertCodeableConcept(src.route);

  if (src.method <> nil) then
    tgt.method := convertCodeableConcept(src.method);

  if (src.dose <> nil) then
    tgt.dose := convertSimpleQuantity(src.dose);

  if (src.rate <> nil) then
    tgt.rate := convertType(src.rate);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationAdministrationDosageComponent(src : FHIR.R4.Resources.TFhirMedicationAdministrationDosage) : FHIR.R3.Resources.TFhirMedicationAdministrationDosage;
var
  tgt : FHIR.R3.Resources.TFhirMedicationAdministrationDosage;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMedicationAdministrationDosage.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.text <> '') then
    tgt.text := src.text;

  if (src.site <> nil) then
    tgt.site := convertCodeableConcept(src.site);

  if (src.route <> nil) then
    tgt.route := convertCodeableConcept(src.route);

  if (src.method <> nil) then
    tgt.method := convertCodeableConcept(src.method);

  if (src.dose <> nil) then
    tgt.dose := convertSimpleQuantity(src.dose);

  if (src.rate <> nil) then
    tgt.rate := convertType(src.rate);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationDispense(src : FHIR.R3.Resources.TFhirMedicationDispense) : FHIR.R4.Resources.TFhirMedicationDispense;
var
  tgt : FHIR.R4.Resources.TFhirMedicationDispense;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirReference;
  t3 : FHIR.R3.Types.TFhirReference;
  t4 : FHIR.R3.Resources.TFhirMedicationDispensePerformer;
  t5 : FHIR.R3.Types.TFhirReference;
  t6 : FHIR.R3.Types.TFhirReference;
  t7 : FHIR.R3.Types.TFhirAnnotation;
  t8 : FHIR.R3.Types.TFhirDosage;
  t9 : FHIR.R3.Types.TFhirReference;
  ta : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMedicationDispense.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.partOfList do
  begin
    tgt.partOfList.add(convertReference(t2));
  end;
  tgt.status := convertMedicationDispenseStatus(src.status);

  if (src.category <> nil) then
    tgt.category := convertCodeableConcept(src.category);

  if (src.medication <> nil) then
    tgt.medication := convertType(src.medication);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.context <> nil) then
    tgt.context := convertReference(src.context);

  for t3 in src.supportingInformationList do
  begin
    tgt.supportingInformationList.add(convertReference(t3));
  end;
  for t4 in src.performerList do
  begin
    tgt.performerList.add(convertMedicationDispensePerformerComponent(t4));
  end;
  for t5 in src.authorizingPrescriptionList do
  begin
    tgt.authorizingPrescriptionList.add(convertReference(t5));
  end;
  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.quantity <> nil) then
    tgt.quantity := convertSimpleQuantity(src.quantity);

  if (src.daysSupply <> nil) then
    tgt.daysSupply := convertSimpleQuantity(src.daysSupply);

  tgt.whenPrepared := src.whenPrepared.link;
  tgt.whenHandedOver := src.whenHandedOver.link;

  if (src.destination <> nil) then
    tgt.destination := convertReference(src.destination);

  for t6 in src.receiverList do
  begin
    tgt.receiverList.add(convertReference(t6));
  end;
  for t7 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t7));
  end;
  for t8 in src.dosageInstructionList do
  begin
    tgt.dosageInstructionList.add(convertDosage(t8));
  end;
  if (src.substitution <> nil) then
    tgt.substitution := convertMedicationDispenseSubstitutionComponent(src.substitution);

  for t9 in src.detectedIssueList do
  begin
    tgt.detectedIssueList.add(convertReference(t9));
  end;
  for ta in src.eventHistoryList do
  begin
    tgt.eventHistoryList.add(convertReference(ta));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationDispense(src : FHIR.R4.Resources.TFhirMedicationDispense) : FHIR.R3.Resources.TFhirMedicationDispense;
var
  tgt : FHIR.R3.Resources.TFhirMedicationDispense;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirReference;
  t3 : FHIR.R4.Types.TFhirReference;
  t4 : FHIR.R4.Resources.TFhirMedicationDispensePerformer;
  t5 : FHIR.R4.Types.TFhirReference;
  t6 : FHIR.R4.Types.TFhirReference;
  t7 : FHIR.R4.Types.TFhirAnnotation;
  t8 : FHIR.R4.Types.TFhirDosage;
  t9 : FHIR.R4.Types.TFhirReference;
  ta : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMedicationDispense.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.partOfList do
  begin
    tgt.partOfList.add(convertReference(t2));
  end;
  tgt.status := convertMedicationDispenseStatus(src.status);

  if (src.category <> nil) then
    tgt.category := convertCodeableConcept(src.category);

  if (src.medication <> nil) then
    tgt.medication := convertType(src.medication);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.context <> nil) then
    tgt.context := convertReference(src.context);

  for t3 in src.supportingInformationList do
  begin
    tgt.supportingInformationList.add(convertReference(t3));
  end;
  for t4 in src.performerList do
  begin
    tgt.performerList.add(convertMedicationDispensePerformerComponent(t4));
  end;
  for t5 in src.authorizingPrescriptionList do
  begin
    tgt.authorizingPrescriptionList.add(convertReference(t5));
  end;
  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.quantity <> nil) then
    tgt.quantity := convertSimpleQuantity(src.quantity);

  if (src.daysSupply <> nil) then
    tgt.daysSupply := convertSimpleQuantity(src.daysSupply);

  tgt.whenPrepared := src.whenPrepared.link;
  tgt.whenHandedOver := src.whenHandedOver.link;

  if (src.destination <> nil) then
    tgt.destination := convertReference(src.destination);

  for t6 in src.receiverList do
  begin
    tgt.receiverList.add(convertReference(t6));
  end;
  for t7 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t7));
  end;
  for t8 in src.dosageInstructionList do
  begin
    tgt.dosageInstructionList.add(convertDosage(t8));
  end;
  if (src.substitution <> nil) then
    tgt.substitution := convertMedicationDispenseSubstitutionComponent(src.substitution);

  for t9 in src.detectedIssueList do
  begin
    tgt.detectedIssueList.add(convertReference(t9));
  end;
  for ta in src.eventHistoryList do
  begin
    tgt.eventHistoryList.add(convertReference(ta));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationDispensePerformerComponent(src : FHIR.R3.Resources.TFhirMedicationDispensePerformer) : FHIR.R4.Resources.TFhirMedicationDispensePerformer;
var
  tgt : FHIR.R4.Resources.TFhirMedicationDispensePerformer;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMedicationDispensePerformer.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.actor <> nil) then
    tgt.actor := convertReference(src.actor);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationDispensePerformerComponent(src : FHIR.R4.Resources.TFhirMedicationDispensePerformer) : FHIR.R3.Resources.TFhirMedicationDispensePerformer;
var
  tgt : FHIR.R3.Resources.TFhirMedicationDispensePerformer;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMedicationDispensePerformer.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.actor <> nil) then
    tgt.actor := convertReference(src.actor);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationDispenseSubstitutionComponent(src : FHIR.R3.Resources.TFhirMedicationDispenseSubstitution) : FHIR.R4.Resources.TFhirMedicationDispenseSubstitution;
var
  tgt : FHIR.R4.Resources.TFhirMedicationDispenseSubstitution;
  t1 : FHIR.R3.Types.TFhirCodeableConcept;
  t2 : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMedicationDispenseSubstitution.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.wasSubstituted := src.wasSubstituted;

  tgt.type_ := convertCodeableConcept(src.type_);

  for t1 in src.reasonList do
  begin
    tgt.reasonList.add(convertCodeableConcept(t1));
  end;
  for t2 in src.responsiblePartyList do
  begin
    tgt.responsiblePartyList.add(convertReference(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationDispenseSubstitutionComponent(src : FHIR.R4.Resources.TFhirMedicationDispenseSubstitution) : FHIR.R3.Resources.TFhirMedicationDispenseSubstitution;
var
  tgt : FHIR.R3.Resources.TFhirMedicationDispenseSubstitution;
  t1 : FHIR.R4.Types.TFhirCodeableConcept;
  t2 : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMedicationDispenseSubstitution.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.wasSubstituted := src.wasSubstituted;

  tgt.type_ := convertCodeableConcept(src.type_);

  for t1 in src.reasonList do
  begin
    tgt.reasonList.add(convertCodeableConcept(t1));
  end;
  for t2 in src.responsiblePartyList do
  begin
    tgt.responsiblePartyList.add(convertReference(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationRequest(src : FHIR.R3.Resources.TFhirMedicationRequest) : FHIR.R4.Resources.TFhirMedicationRequest;
var
  tgt : FHIR.R4.Resources.TFhirMedicationRequest;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirReference;
  t3 : FHIR.R3.Types.TFhirReference;
  t4 : FHIR.R3.Types.TFhirCodeableConcept;
  t5 : FHIR.R3.Types.TFhirReference;
  t6 : FHIR.R3.Types.TFhirAnnotation;
  t7 : FHIR.R3.Types.TFhirDosage;
  t8 : FHIR.R3.Types.TFhirReference;
  t9 : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMedicationRequest.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.basedOnList do
  begin
    tgt.basedOnList.add(convertReference(t2));
  end;
  if (src.groupIdentifier <> nil) then
    tgt.groupIdentifier := convertIdentifier(src.groupIdentifier);

  tgt.status := convertMedicationRequestStatus(src.status);

  tgt.intent := convertMedicationRequestIntent(src.intent);

  tgt.priority := convertMedicationRequestPriority(src.priority);

  if (src.medication <> nil) then
    tgt.medication := convertType(src.medication);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.context <> nil) then
    tgt.encounter := convertReference(src.context);

  for t3 in src.supportingInformationList do
  begin
    tgt.supportingInformationList.add(convertReference(t3));
  end;
  tgt.authoredOn := src.authoredOn.link;

  if (src.recorder <> nil) then
    tgt.recorder := convertReference(src.recorder);

  for t4 in src.reasonCodeList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t4));
  end;
  for t5 in src.reasonReferenceList do
  begin
    tgt.reasonReferenceList.add(convertReference(t5));
  end;
  for t6 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t6));
  end;
  for t7 in src.dosageInstructionList do
  begin
    tgt.dosageInstructionList.add(convertDosage(t7));
  end;
  if (src.dispenseRequest <> nil) then
    tgt.dispenseRequest := convertMedicationRequestDispenseRequestComponent(src.dispenseRequest);

  if (src.substitution <> nil) then
    tgt.substitution := convertMedicationRequestSubstitutionComponent(src.substitution);

  if (src.priorPrescription <> nil) then
    tgt.priorPrescription := convertReference(src.priorPrescription);

  for t8 in src.detectedIssueList do
  begin
    tgt.detectedIssueList.add(convertReference(t8));
  end;
  for t9 in src.eventHistoryList do
  begin
    tgt.eventHistoryList.add(convertReference(t9));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationRequest(src : FHIR.R4.Resources.TFhirMedicationRequest) : FHIR.R3.Resources.TFhirMedicationRequest;
var
  tgt : FHIR.R3.Resources.TFhirMedicationRequest;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirReference;
  t3 : FHIR.R4.Types.TFhirReference;
  t4 : FHIR.R4.Types.TFhirCodeableConcept;
  t5 : FHIR.R4.Types.TFhirReference;
  t6 : FHIR.R4.Types.TFhirAnnotation;
  t7 : FHIR.R4.Types.TFhirDosage;
  t8 : FHIR.R4.Types.TFhirReference;
  t9 : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMedicationRequest.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.basedOnList do
  begin
    tgt.basedOnList.add(convertReference(t2));
  end;
  if (src.groupIdentifier <> nil) then
    tgt.groupIdentifier := convertIdentifier(src.groupIdentifier);

  tgt.status := convertMedicationRequestStatus(src.status);

  tgt.intent := convertMedicationRequestIntent(src.intent);

  tgt.priority := convertMedicationRequestPriority(src.priority);

  if (src.medication <> nil) then
    tgt.medication := convertType(src.medication);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.encounter <> nil) then
    tgt.context := convertReference(src.encounter);

  for t3 in src.supportingInformationList do
  begin
    tgt.supportingInformationList.add(convertReference(t3));
  end;
  tgt.authoredOn := src.authoredOn.link;

  if (src.recorder <> nil) then
    tgt.recorder := convertReference(src.recorder);

  for t4 in src.reasonCodeList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t4));
  end;
  for t5 in src.reasonReferenceList do
  begin
    tgt.reasonReferenceList.add(convertReference(t5));
  end;
  for t6 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t6));
  end;
  for t7 in src.dosageInstructionList do
  begin
    tgt.dosageInstructionList.add(convertDosage(t7));
  end;
  if (src.dispenseRequest <> nil) then
    tgt.dispenseRequest := convertMedicationRequestDispenseRequestComponent(src.dispenseRequest);

  if (src.substitution <> nil) then
    tgt.substitution := convertMedicationRequestSubstitutionComponent(src.substitution);

  if (src.priorPrescription <> nil) then
    tgt.priorPrescription := convertReference(src.priorPrescription);

  for t8 in src.detectedIssueList do
  begin
    tgt.detectedIssueList.add(convertReference(t8));
  end;
  for t9 in src.eventHistoryList do
  begin
    tgt.eventHistoryList.add(convertReference(t9));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationRequestDispenseRequestComponent(src : FHIR.R3.Resources.TFhirMedicationRequestDispenseRequest) : FHIR.R4.Resources.TFhirMedicationRequestDispenseRequest;
var
  tgt : FHIR.R4.Resources.TFhirMedicationRequestDispenseRequest;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMedicationRequestDispenseRequest.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.validityPeriod <> nil) then
    tgt.validityPeriod := convertPeriod(src.validityPeriod);

  tgt.numberOfRepeatsAllowed := src.numberOfRepeatsAllowed;

  if (src.quantity <> nil) then
    tgt.quantity := convertSimpleQuantity(src.quantity);

  if (src.expectedSupplyDuration <> nil) then
    tgt.expectedSupplyDuration := convertDuration(src.expectedSupplyDuration);

  if (src.performer <> nil) then
    tgt.performer := convertReference(src.performer);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationRequestDispenseRequestComponent(src : FHIR.R4.Resources.TFhirMedicationRequestDispenseRequest) : FHIR.R3.Resources.TFhirMedicationRequestDispenseRequest;
var
  tgt : FHIR.R3.Resources.TFhirMedicationRequestDispenseRequest;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMedicationRequestDispenseRequest.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.validityPeriod <> nil) then
    tgt.validityPeriod := convertPeriod(src.validityPeriod);

  tgt.numberOfRepeatsAllowed := src.numberOfRepeatsAllowed;

  if (src.quantity <> nil) then
    tgt.quantity := convertSimpleQuantity(src.quantity);

  if (src.expectedSupplyDuration <> nil) then
    tgt.expectedSupplyDuration := convertDuration(src.expectedSupplyDuration);

  if (src.performer <> nil) then
    tgt.performer := convertReference(src.performer);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationRequestSubstitutionComponent(src : FHIR.R3.Resources.TFhirMedicationRequestSubstitution) : FHIR.R4.Resources.TFhirMedicationRequestSubstitution;
var
  tgt : FHIR.R4.Resources.TFhirMedicationRequestSubstitution;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMedicationRequestSubstitution.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.allowed := convertBoolean(src.allowedElement);

  if (src.reason <> nil) then
    tgt.reason := convertCodeableConcept(src.reason);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationRequestSubstitutionComponent(src : FHIR.R4.Resources.TFhirMedicationRequestSubstitution) : FHIR.R3.Resources.TFhirMedicationRequestSubstitution;
var
  tgt : FHIR.R3.Resources.TFhirMedicationRequestSubstitution;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMedicationRequestSubstitution.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.allowed is TFhirBoolean) then

  tgt.allowedElement := ConvertBoolean(src.allowed as TFHIRBoolean);

  if (src.reason <> nil) then
    tgt.reason := convertCodeableConcept(src.reason);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationStatement(src : FHIR.R3.Resources.TFhirMedicationStatement) : FHIR.R4.Resources.TFhirMedicationStatement;
var
  tgt : FHIR.R4.Resources.TFhirMedicationStatement;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirReference;
  t3 : FHIR.R3.Types.TFhirReference;
  t4 : FHIR.R3.Types.TFhirReference;
  t5 : FHIR.R3.Types.TFhirCodeableConcept;
  t6 : FHIR.R3.Types.TFhirReference;
  t7 : FHIR.R3.Types.TFhirAnnotation;
  t8 : FHIR.R3.Types.TFhirDosage;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMedicationStatement.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.basedOnList do
  begin
    tgt.basedOnList.add(convertReference(t2));
  end;
  for t3 in src.partOfList do
  begin
    tgt.partOfList.add(convertReference(t3));
  end;
  if (src.context <> nil) then
    tgt.context := convertReference(src.context);

  tgt.status := convertMedicationStatementStatus(src.status);

  if (src.category <> nil) then
    tgt.category := convertCodeableConcept(src.category);

  if (src.medication <> nil) then
    tgt.medication := convertType(src.medication);

  if (src.effective <> nil) then
    tgt.effective := convertType(src.effective);

  tgt.dateAsserted := src.dateAsserted;

  if (src.informationSource <> nil) then
    tgt.informationSource := convertReference(src.informationSource);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  for t4 in src.derivedFromList do
  begin
    tgt.derivedFromList.add(convertReference(t4));
  end;
  for t5 in src.reasonCodeList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t5));
  end;
  for t6 in src.reasonReferenceList do
  begin
    tgt.reasonReferenceList.add(convertReference(t6));
  end;
  for t7 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t7));
  end;
  for t8 in src.dosageList do
  begin
    tgt.dosageList.add(convertDosage(t8));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMedicationStatement(src : FHIR.R4.Resources.TFhirMedicationStatement) : FHIR.R3.Resources.TFhirMedicationStatement;
var
  tgt : FHIR.R3.Resources.TFhirMedicationStatement;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirReference;
  t3 : FHIR.R4.Types.TFhirReference;
  t4 : FHIR.R4.Types.TFhirReference;
  t5 : FHIR.R4.Types.TFhirCodeableConcept;
  t6 : FHIR.R4.Types.TFhirReference;
  t7 : FHIR.R4.Types.TFhirAnnotation;
  t8 : FHIR.R4.Types.TFhirDosage;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMedicationStatement.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.basedOnList do
  begin
    tgt.basedOnList.add(convertReference(t2));
  end;
  for t3 in src.partOfList do
  begin
    tgt.partOfList.add(convertReference(t3));
  end;
  if (src.context <> nil) then
    tgt.context := convertReference(src.context);

  tgt.status := convertMedicationStatementStatus(src.status);

  if (src.category <> nil) then
    tgt.category := convertCodeableConcept(src.category);

  if (src.medication <> nil) then
    tgt.medication := convertType(src.medication);

  if (src.effective <> nil) then
    tgt.effective := convertType(src.effective);

  tgt.dateAsserted := src.dateAsserted;

  if (src.informationSource <> nil) then
    tgt.informationSource := convertReference(src.informationSource);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  for t4 in src.derivedFromList do
  begin
    tgt.derivedFromList.add(convertReference(t4));
  end;
  for t5 in src.reasonCodeList do
  begin
    tgt.reasonCodeList.add(convertCodeableConcept(t5));
  end;
  for t6 in src.reasonReferenceList do
  begin
    tgt.reasonReferenceList.add(convertReference(t6));
  end;
  for t7 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t7));
  end;
  for t8 in src.dosageList do
  begin
    tgt.dosageList.add(convertDosage(t8));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMessageDefinition(src : FHIR.R3.Resources.TFhirMessageDefinition) : FHIR.R4.Resources.TFhirMessageDefinition;
var
  tgt : FHIR.R4.Resources.TFhirMessageDefinition;
  t1 : FHIR.R3.Types.TFhirContactDetail;
  t2 : FHIR.R3.Types.TFhirUsageContext;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Types.TFhirReference;
  t5 : FHIR.R3.Types.TFhirReference;
  t6 : FHIR.R3.Resources.TFhirMessageDefinitionFocus;
  t7 : FHIR.R3.Resources.TFhirMessageDefinitionAllowedResponse;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMessageDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.identifier <> nil) then
    tgt.identifierList.Add(convertIdentifier(src.identifier));

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  if (src.base <> nil) then
    tgt.baseElement := convertReferenceToCanonical(src.base);

  for t4 in src.parentList do
  begin
    tgt.ParentList.add(convertReferenceToCanonical(t4));
  end;
  for t5 in src.replacesList do
  begin
    tgt.ReplacesList.add(convertReferenceToCanonical(t5));
  end;
  if (src.event <> nil) then
    tgt.event := convertCoding(src.event);

  tgt.category := convertMessageSignificanceCategory(src.category);

  for t6 in src.focusList do
  begin
    tgt.focusList.add(convertMessageDefinitionFocusComponent(t6));
  end;
  if (src.responseRequired) then
    tgt.ResponseRequired := FHIR.R4.Types.MessageheaderResponseRequestAlways
  else
    tgt.ResponseRequired := FHIR.R4.Types.MessageheaderResponseRequestNever;

  for t7 in src.allowedResponseList do
  begin
    tgt.allowedResponseList.add(convertMessageDefinitionAllowedResponseComponent(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertCoding2Uri(code : FHIR.R3.Types.TFhirCoding) : String;
begin
  exit( code.System + '/' + code.Code);
end;

class function TVersionConvertor_30_40.convertMessageDefinition(src : FHIR.R4.Resources.TFhirMessageDefinition) : FHIR.R3.Resources.TFhirMessageDefinition;
var
  tgt : FHIR.R3.Resources.TFhirMessageDefinition;
  t1 : FHIR.R4.Types.TFhirContactDetail;
  t2 : FHIR.R4.Types.TFhirUsageContext;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Types.TFhirCanonical;
  t5 : FHIR.R4.Types.TFhirCanonical;
  t6 : FHIR.R4.Resources.TFhirMessageDefinitionFocus;
  t7 : FHIR.R4.Resources.TFhirMessageDefinitionAllowedResponse;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMessageDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.identifierList.Count <> 0) then
    tgt.identifier := convertIdentifier(src.identifierList[0]);

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  if (src.base <> '') then
    tgt.base := convertCanonicalToReference(src.baseElement);

  for t4 in src.parentList do
  begin
    tgt.parentList.add(convertCanonicalToReference(t4));
  end;
  for t5 in src.replacesList do
  begin
    tgt.replacesList.add(convertCanonicalToReference(t5));
  end;
  if (src.event is FHIR.R4.Types.TFhirCoding) then
    tgt.event := convertCoding(src.event as FHIR.R4.Types.TFhirCoding);

  tgt.category := convertMessageSignificanceCategory(src.category);

  for t6 in src.focusList do
  begin
    tgt.focusList.add(convertMessageDefinitionFocusComponent(t6));
  end;
  tgt.ResponseRequired := src.ResponseRequired <> FHIR.R4.Types.MessageheaderResponseRequestNever;

  for t7 in src.allowedResponseList do
  begin
    tgt.allowedResponseList.add(convertMessageDefinitionAllowedResponseComponent(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertUri2Coding(uri : String) : FHIR.R3.Types.TFhirCoding;
var
  i : integer;
begin
  i := uri.lastIndexOf('/');
  exit(FHIR.R3.Types.TFHIRCoding.create(uri.substring(0, i), uri.substring(i + 1)));
end;

class function TVersionConvertor_30_40.convertMessageDefinitionFocusComponent(src : FHIR.R3.Resources.TFhirMessageDefinitionFocus) : FHIR.R4.Resources.TFhirMessageDefinitionFocus;
var
  tgt : FHIR.R4.Resources.TFhirMessageDefinitionFocus;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMessageDefinitionFocus.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertActivityDefinitionKind(src.code);

  if (src.profile <> nil) then
    tgt.profileElement := convertReferenceToCanonical(src.profile);

  tgt.min := src.min;

  if (src.max <> '') then
    tgt.max := src.max;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMessageDefinitionFocusComponent(src : FHIR.R4.Resources.TFhirMessageDefinitionFocus) : FHIR.R3.Resources.TFhirMessageDefinitionFocus;
var
  tgt : FHIR.R3.Resources.TFhirMessageDefinitionFocus;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMessageDefinitionFocus.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertActivityDefinitionKind(src.code);

  if (src.profile <> '') then
    tgt.profile := convertCanonicalToReference(src.profileElement);

  tgt.min := src.min;

  if (src.max <> '') then
    tgt.max := src.max;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMessageDefinitionAllowedResponseComponent(src : FHIR.R3.Resources.TFhirMessageDefinitionAllowedResponse) : FHIR.R4.Resources.TFhirMessageDefinitionAllowedResponse;
var
  tgt : FHIR.R4.Resources.TFhirMessageDefinitionAllowedResponse;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMessageDefinitionAllowedResponse.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.message <> nil) then
    tgt.messageElement := convertReferenceToCanonical(src.message);

  if (src.situation <> '') then
    tgt.situation := src.situation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMessageDefinitionAllowedResponseComponent(src : FHIR.R4.Resources.TFhirMessageDefinitionAllowedResponse) : FHIR.R3.Resources.TFhirMessageDefinitionAllowedResponse;
var
  tgt : FHIR.R3.Resources.TFhirMessageDefinitionAllowedResponse;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMessageDefinitionAllowedResponse.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.message <> '') then
    tgt.message := convertCanonicalToReference(src.messageElement);

  if (src.situation <> '') then
    tgt.situation := src.situation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMessageHeader(src : FHIR.R3.Resources.TFhirMessageHeader) : FHIR.R4.Resources.TFhirMessageHeader;
var
  tgt : FHIR.R4.Resources.TFhirMessageHeader;
  t1 : FHIR.R3.Resources.TFhirMessageHeaderDestination;
  t2 : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMessageHeader.Create();
  try
  copyDomainResource(src, tgt);
  if (src.event <> nil) then
    tgt.event := convertCoding(src.event);

  for t1 in src.destinationList do
  begin
    tgt.destinationList.add(convertMessageDestinationComponent(t1));
  end;
  if (src.sender <> nil) then
    tgt.sender := convertReference(src.sender);

  if (src.enterer <> nil) then
    tgt.enterer := convertReference(src.enterer);

  if (src.author <> nil) then
    tgt.author := convertReference(src.author);

  if (src.source <> nil) then
    tgt.source := convertMessageSourceComponent(src.source);

  if (src.responsible <> nil) then
    tgt.responsible := convertReference(src.responsible);

  if (src.reason <> nil) then
    tgt.reason := convertCodeableConcept(src.reason);

  if (src.response <> nil) then
    tgt.response := convertMessageHeaderResponseComponent(src.response);

  for t2 in src.focusList do
  begin
    tgt.focusList.add(convertReference(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMessageHeader(src : FHIR.R4.Resources.TFhirMessageHeader) : FHIR.R3.Resources.TFhirMessageHeader;
var
  tgt : FHIR.R3.Resources.TFhirMessageHeader;
  t1 : FHIR.R4.Resources.TFhirMessageHeaderDestination;
  t2 : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMessageHeader.Create();
  try
  copyDomainResource(src, tgt);
  if (src.event is FHIR.R4.Types.TFhirCoding) then
    tgt.event := convertCoding(src.event as FHIR.R4.Types.TFhirCoding);

  for t1 in src.destinationList do
  begin
    tgt.destinationList.add(convertMessageDestinationComponent(t1));
  end;
  if (src.sender <> nil) then
    tgt.sender := convertReference(src.sender);

  if (src.enterer <> nil) then
    tgt.enterer := convertReference(src.enterer);

  if (src.author <> nil) then
    tgt.author := convertReference(src.author);

  if (src.source <> nil) then
    tgt.source := convertMessageSourceComponent(src.source);

  if (src.responsible <> nil) then
    tgt.responsible := convertReference(src.responsible);

  if (src.reason <> nil) then
    tgt.reason := convertCodeableConcept(src.reason);

  if (src.response <> nil) then
    tgt.response := convertMessageHeaderResponseComponent(src.response);

  for t2 in src.focusList do
  begin
    tgt.focusList.add(convertReference(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMessageDestinationComponent(src : FHIR.R3.Resources.TFhirMessageHeaderDestination) : FHIR.R4.Resources.TFhirMessageHeaderDestination;
var
  tgt : FHIR.R4.Resources.TFhirMessageHeaderDestination;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMessageHeaderDestination.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.target <> nil) then
    tgt.target := convertReference(src.target);

  if (src.endpoint <> '') then
    tgt.endpoint := src.endpoint;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMessageDestinationComponent(src : FHIR.R4.Resources.TFhirMessageHeaderDestination) : FHIR.R3.Resources.TFhirMessageHeaderDestination;
var
  tgt : FHIR.R3.Resources.TFhirMessageHeaderDestination;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMessageHeaderDestination.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.target <> nil) then
    tgt.target := convertReference(src.target);

  if (src.endpoint <> '') then
    tgt.endpoint := src.endpoint;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMessageSourceComponent(src : FHIR.R3.Resources.TFhirMessageHeaderSource) : FHIR.R4.Resources.TFhirMessageHeaderSource;
var
  tgt : FHIR.R4.Resources.TFhirMessageHeaderSource;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMessageHeaderSource.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.software <> '') then
    tgt.software := src.software;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.contact <> nil) then
    tgt.contact := convertContactPoint(src.contact);

  if (src.endpoint <> '') then
    tgt.endpoint := src.endpoint;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMessageSourceComponent(src : FHIR.R4.Resources.TFhirMessageHeaderSource) : FHIR.R3.Resources.TFhirMessageHeaderSource;
var
  tgt : FHIR.R3.Resources.TFhirMessageHeaderSource;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMessageHeaderSource.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.software <> '') then
    tgt.software := src.software;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.contact <> nil) then
    tgt.contact := convertContactPoint(src.contact);

  if (src.endpoint <> '') then
    tgt.endpoint := src.endpoint;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMessageHeaderResponseComponent(src : FHIR.R3.Resources.TFhirMessageHeaderResponse) : FHIR.R4.Resources.TFhirMessageHeaderResponse;
var
  tgt : FHIR.R4.Resources.TFhirMessageHeaderResponse;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMessageHeaderResponse.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.identifier <> '') then
    tgt.identifier := src.identifier;

  tgt.code := convertResponseType(src.code);

  if (src.details <> nil) then
    tgt.details := convertReference(src.details);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertMessageHeaderResponseComponent(src : FHIR.R4.Resources.TFhirMessageHeaderResponse) : FHIR.R3.Resources.TFhirMessageHeaderResponse;
var
  tgt : FHIR.R3.Resources.TFhirMessageHeaderResponse;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirMessageHeaderResponse.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.identifier <> '') then
    tgt.identifier := src.identifier;

  tgt.code := convertResponseType(src.code);

  if (src.details <> nil) then
    tgt.details := convertReference(src.details);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertNamingSystem(src : FHIR.R3.Resources.TFhirNamingSystem) : FHIR.R4.Resources.TFhirNamingSystem;
var
  tgt : FHIR.R4.Resources.TFhirNamingSystem;
  t1 : FHIR.R3.Types.TFhirContactDetail;
  t2 : FHIR.R3.Types.TFhirUsageContext;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Resources.TFhirNamingSystemUniqueId;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirNamingSystem.Create();
  try
  copyDomainResource(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  tgt.status := convertPublicationStatus(src.status);
  tgt.kind := convertNamingSystemType(src.kind);

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.responsible <> '') then
    tgt.responsible := src.responsible;

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.usage <> '') then
    tgt.usage := src.usage;

  for t4 in src.uniqueIdList do
  begin
    tgt.uniqueIdList.add(convertNamingSystemUniqueIdComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertNamingSystem(src : FHIR.R4.Resources.TFhirNamingSystem) : FHIR.R3.Resources.TFhirNamingSystem;
var
  tgt : FHIR.R3.Resources.TFhirNamingSystem;
  t1 : FHIR.R4.Types.TFhirContactDetail;
  t2 : FHIR.R4.Types.TFhirUsageContext;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Resources.TFhirNamingSystemUniqueId;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirNamingSystem.Create();
  try
  copyDomainResource(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  tgt.status := convertPublicationStatus(src.status);
  tgt.kind := convertNamingSystemType(src.kind);

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.responsible <> '') then
    tgt.responsible := src.responsible;

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.usage <> '') then
    tgt.usage := src.usage;

  for t4 in src.uniqueIdList do
  begin
    tgt.uniqueIdList.add(convertNamingSystemUniqueIdComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertNamingSystemUniqueIdComponent(src : FHIR.R3.Resources.TFhirNamingSystemUniqueId) : FHIR.R4.Resources.TFhirNamingSystemUniqueId;
var
  tgt : FHIR.R4.Resources.TFhirNamingSystemUniqueId;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirNamingSystemUniqueId.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertNamingSystemIdentifierType(src.type_);

  if (src.value <> '') then
    tgt.value := src.value;

  tgt.preferred := src.preferred;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertNamingSystemUniqueIdComponent(src : FHIR.R4.Resources.TFhirNamingSystemUniqueId) : FHIR.R3.Resources.TFhirNamingSystemUniqueId;
var
  tgt : FHIR.R3.Resources.TFhirNamingSystemUniqueId;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirNamingSystemUniqueId.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertNamingSystemIdentifierType(src.type_);

  if (src.value <> '') then
    tgt.value := src.value;

  tgt.preferred := src.preferred;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertObservation(src : FHIR.R3.Resources.TFhirObservation) : FHIR.R4.Resources.TFhirObservation;
var
  tgt : FHIR.R4.Resources.TFhirObservation;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirReference;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Types.TFhirReference;
  t5 : FHIR.R3.Resources.TFhirObservationReferenceRange;
  t6 : FHIR.R3.Resources.TFhirObservationRelated;
  t7 : FHIR.R3.Resources.TFhirObservationComponent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirObservation.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.basedOnList do
  begin
    tgt.basedOnList.add(convertReference(t2));
  end;
  tgt.status := convertObservationStatus(src.status);

  for t3 in src.categoryList do
  begin
    tgt.categoryList.add(convertCodeableConcept(t3));
  end;
  tgt.code := convertCodeableConcept(src.code);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.context <> nil) then
    tgt.encounter := convertReference(src.context);

  if (src.effective <> nil) then
    tgt.effective := convertType(src.effective);

  tgt.issued := src.issued;

  for t4 in src.performerList do
  begin
    tgt.performerList.add(convertReference(t4));
  end;
  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  if (src.dataAbsentReason <> nil) then
    tgt.dataAbsentReason := convertCodeableConcept(src.dataAbsentReason);

  if (src.interpretation <> nil) then
    tgt.interpretationList.Add(convertCodeableConcept(src.interpretation));

  if (src.comment <> '') then
    tgt.noteList.Append.text := src.comment;

  if (src.bodySite <> nil) then
    tgt.bodySite := convertCodeableConcept(src.bodySite);

  if (src.method <> nil) then
    tgt.method := convertCodeableConcept(src.method);

  if (src.specimen <> nil) then
    tgt.specimen := convertReference(src.specimen);

  if (src.device <> nil) then
    tgt.device := convertReference(src.device);

  for t5 in src.referenceRangeList do
  begin
    tgt.referenceRangeList.add(convertObservationReferenceRangeComponent(t5));
  end;
  for t6 in src.relatedList do
  begin
    if (t6.type_ = FHIR.R3.Types.ObservationRelationshiptypesHasMember) then
      tgt.hasMemberList.add(convertReference(t6.Target))
    else if (t6.type_ = FHIR.R3.Types.ObservationRelationshiptypesDerivedFrom) then
      tgt.derivedFromList.add(convertReference(t6.Target));
  end;
  for t7 in src.componentList do
  begin
    tgt.componentList.add(convertObservationComponentComponent(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertObservation(src : FHIR.R4.Resources.TFhirObservation) : FHIR.R3.Resources.TFhirObservation;
var
  tgt : FHIR.R3.Resources.TFhirObservation;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirReference;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Types.TFhirReference;
  t5 : FHIR.R4.Resources.TFhirObservationReferenceRange;
  t6 : FHIR.R4.Types.TFhirReference;
  t7 : FHIR.R4.Types.TFhirReference;
  t8 : FHIR.R4.Resources.TFhirObservationComponent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirObservation.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.basedOnList do
  begin
    tgt.basedOnList.add(convertReference(t2));
  end;
  tgt.status := convertObservationStatus(src.status);

  for t3 in src.categoryList do
  begin
    tgt.categoryList.add(convertCodeableConcept(t3));
  end;
  tgt.code := convertCodeableConcept(src.code);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.encounter <> nil) then
    tgt.context := convertReference(src.encounter);

  if (src.effective <> nil) then
    tgt.effective := convertType(src.effective);

  tgt.issued := src.issued.link;

  for t4 in src.performerList do
  begin
    tgt.performerList.add(convertReference(t4));
  end;
  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  if (src.dataAbsentReason <> nil) then
    tgt.dataAbsentReason := convertCodeableConcept(src.dataAbsentReason);

  if (src.interpretationList.Count > 0) then
    tgt.interpretation := convertCodeableConcept(src.interpretationList[0]);

  if (src.noteList.Count > 0) then
    tgt.comment := src.noteList[0].text;

  if (src.bodySite <> nil) then
    tgt.bodySite := convertCodeableConcept(src.bodySite);

  if (src.method <> nil) then
    tgt.method := convertCodeableConcept(src.method);

  if (src.specimen <> nil) then
    tgt.specimen := convertReference(src.specimen);

  if (src.device <> nil) then
    tgt.device := convertReference(src.device);

  for t5 in src.referenceRangeList do
  begin
    tgt.referenceRangeList.add(convertObservationReferenceRangeComponent(t5));
  end;
  for t6 in src.hasMemberList do
  begin
    tgt.relatedList.add(convertObservationRelatedComponent(t6, FHIR.R3.Types.ObservationRelationshiptypesHasMember));
  end;
  for t7 in src.derivedFromList do
  begin
    tgt.relatedList.add(convertObservationRelatedComponent(t7, FHIR.R3.Types.ObservationRelationshiptypesDerivedFrom));
  end;
  for t8 in src.componentList do
  begin
    tgt.componentList.add(convertObservationComponentComponent(t8));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertObservationReferenceRangeComponent(src : FHIR.R3.Resources.TFhirObservationReferenceRange) : FHIR.R4.Resources.TFhirObservationReferenceRange;
var
  tgt : FHIR.R4.Resources.TFhirObservationReferenceRange;
  t : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirObservationReferenceRange.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.low <> nil) then
    tgt.low := convertSimpleQuantity(src.low);

  if (src.high <> nil) then
    tgt.high := convertSimpleQuantity(src.high);

  tgt.type_ := convertCodeableConcept(src.type_);

  for t in src.appliesToList do
  begin
    tgt.appliesToList.add(convertCodeableConcept(t));
  end;
  if (src.age <> nil) then
    tgt.age := convertRange(src.age);

  if (src.text <> '') then
    tgt.text := src.text;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertObservationReferenceRangeComponent(src : FHIR.R4.Resources.TFhirObservationReferenceRange) : FHIR.R3.Resources.TFhirObservationReferenceRange;
var
  tgt : FHIR.R3.Resources.TFhirObservationReferenceRange;
  t : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirObservationReferenceRange.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.low <> nil) then
    tgt.low := convertSimpleQuantity(src.low);

  if (src.high <> nil) then
    tgt.high := convertSimpleQuantity(src.high);

  tgt.type_ := convertCodeableConcept(src.type_);

  for t in src.appliesToList do
  begin
    tgt.appliesToList.add(convertCodeableConcept(t));
  end;
  if (src.age <> nil) then
    tgt.age := convertRange(src.age);

  if (src.text <> '') then
    tgt.text := src.text;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertObservationRelatedComponent(src : FHIR.R4.Types.TFhirReference; type_ : FHIR.R3.Types.TFhirObservationRelationshiptypesEnum) : FHIR.R3.Resources.TFhirObservationRelated;
var
  tgt : FHIR.R3.Resources.TFhirObservationRelated;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirObservationRelated.Create();
  try
  copyElement(src, tgt);
  tgt.type_ := type_;
  tgt.Target := convertReference(src);
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertObservationComponentComponent(src : FHIR.R3.Resources.TFhirObservationComponent) : FHIR.R4.Resources.TFhirObservationComponent;
var
  tgt : FHIR.R4.Resources.TFhirObservationComponent;
  t : FHIR.R3.Resources.TFhirObservationReferenceRange;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirObservationComponent.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertCodeableConcept(src.code);

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  if (src.dataAbsentReason <> nil) then
    tgt.dataAbsentReason := convertCodeableConcept(src.dataAbsentReason);

  if (src.interpretation <> nil) then
    tgt.interpretationList.add(convertCodeableConcept(src.interpretation));

  for t in src.referenceRangeList do
  begin
    tgt.referenceRangeList.add(convertObservationReferenceRangeComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertObservationComponentComponent(src : FHIR.R4.Resources.TFhirObservationComponent) : FHIR.R3.Resources.TFhirObservationComponent;
var
  tgt : FHIR.R3.Resources.TFhirObservationComponent;
  t : FHIR.R4.Resources.TFhirObservationReferenceRange;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirObservationComponent.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.code := convertCodeableConcept(src.code);

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  if (src.dataAbsentReason <> nil) then
    tgt.dataAbsentReason := convertCodeableConcept(src.dataAbsentReason);

  if (src.interpretationList.Count > 0) then
    tgt.interpretation := convertCodeableConcept(src.interpretationList[0]);

  for t in src.referenceRangeList do
  begin
    tgt.referenceRangeList.add(convertObservationReferenceRangeComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOperationDefinition(src : FHIR.R3.Resources.TFhirOperationDefinition) : FHIR.R4.Resources.TFhirOperationDefinition;
var
  tgt : FHIR.R4.Resources.TFhirOperationDefinition;
  t1 : FHIR.R3.Types.TFhirContactDetail;
  t2 : FHIR.R3.Types.TFhirUsageContext;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t5 : FHIR.R3.Resources.TFhirOperationDefinitionParameter;
  t6 : FHIR.R3.Resources.TFhirOperationDefinitionOverload;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirOperationDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  tgt.status := convertPublicationStatus(src.status);
  tgt.kind := convertOperationKind(src.kind);

  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  tgt.AffectsState := not src.Idempotent;

  if (src.code <> '') then
    tgt.code := src.code;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  if (src.base <> nil) then
    tgt.baseElement := convertReferenceToCanonical(src.base);

  // todo:
{
  for t4 in src.resource List do
  begin
    tgt.resourceList.add(convertCode(t4));
  end;
  }
  tgt.system := src.system;
  tgt.type_ := src.type_;
  tgt.instance := src.instance;

  for t5 in src.parameterList do
  begin
    tgt.parameterList.add(convertOperationDefinitionParameterComponent(t5));
  end;
  for t6 in src.overloadList do
  begin
    tgt.overloadList.add(convertOperationDefinitionOverloadComponent(t6));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOperationDefinition(src : FHIR.R4.Resources.TFhirOperationDefinition) : FHIR.R3.Resources.TFhirOperationDefinition;
var
  tgt : FHIR.R3.Resources.TFhirOperationDefinition;
  t1 : FHIR.R4.Types.TFhirContactDetail;
  t2 : FHIR.R4.Types.TFhirUsageContext;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t5 : FHIR.R4.Resources.TFhirOperationDefinitionParameter;
  t6 : FHIR.R4.Resources.TFhirOperationDefinitionOverload;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirOperationDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  tgt.status := convertPublicationStatus(src.status);
  tgt.kind := convertOperationKind(src.kind);

  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  tgt.Idempotent := not src.AffectsState;

  if (src.code <> '') then
    tgt.code := src.code;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  if (src.base <> '') then
    tgt.base := convertCanonicalToReference(src.baseElement);

    // todo
{
  for t4 in src.resourceList do
  begin
    tgt.resourceList.add(convertCode(t4));
  end;
  }

  tgt.system := src.system;
  tgt.type_ := src.type_;
  tgt.instance := src.instance;

  for t5 in src.parameterList do
  begin
    tgt.parameterList.add(convertOperationDefinitionParameterComponent(t5));
  end;
  for t6 in src.overloadList do
  begin
    tgt.overloadList.add(convertOperationDefinitionOverloadComponent(t6));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOperationDefinitionParameterComponent(src : FHIR.R3.Resources.TFhirOperationDefinitionParameter) : FHIR.R4.Resources.TFhirOperationDefinitionParameter;
var
  tgt : FHIR.R4.Resources.TFhirOperationDefinitionParameter;
  t : FHIR.R3.Resources.TFhirOperationDefinitionParameter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirOperationDefinitionParameter.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  tgt.use := convertOperationParameterUse(src.use);

  tgt.min := src.min;

  if (src.max <> '') then
    tgt.max := src.max;

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  tgt.type_element := convertType(src.type_Element) as FHIR.R4.Types.TFHIREnum;

  tgt.searchType := convertSearchParamType(src.searchType);

  if (src.profile <> nil) then
    tgt.targetProfileList.add(FHIR.R4.Types.TFhirCanonical.Create(src.Profile.reference));

  if (src.binding <> nil) then
    tgt.binding := convertOperationDefinitionParameterBindingComponent(src.binding);

  for t in src.partList do
  begin
    tgt.partList.add(convertOperationDefinitionParameterComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOperationDefinitionParameterComponent(src : FHIR.R4.Resources.TFhirOperationDefinitionParameter) : FHIR.R3.Resources.TFhirOperationDefinitionParameter;
var
  tgt : FHIR.R3.Resources.TFhirOperationDefinitionParameter;
  t1 : FHIR.R4.Types.TFhirUri;
  t2 : FHIR.R4.Resources.TFhirOperationDefinitionParameter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirOperationDefinitionParameter.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  tgt.use := convertOperationParameterUse(src.use);

  tgt.min := src.min;

  if (src.max <> '') then
    tgt.max := src.max;

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  tgt.type_element := convertType(src.type_Element) as FHIR.R3.Types.TFHIREnum;

  tgt.searchType := convertSearchParamType(src.searchType);

  for t1 in src.targetProfileList do
  begin
    tgt.Profile := FHIR.R3.Types.TFhirReference.create(t1.value);
  end;
  if (src.binding <> nil) then
    tgt.binding := convertOperationDefinitionParameterBindingComponent(src.binding);

  for t2 in src.partList do
  begin
    tgt.partList.add(convertOperationDefinitionParameterComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOperationDefinitionParameterBindingComponent(src : FHIR.R3.Resources.TFhirOperationDefinitionParameterBinding) : FHIR.R4.Resources.TFhirOperationDefinitionParameterBinding;
var
  tgt : FHIR.R4.Resources.TFhirOperationDefinitionParameterBinding;
  vs : FHIR.R4.Types.TFhirType;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirOperationDefinitionParameterBinding.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.strength := convertBindingStrength(src.strength);

  if (src.valueSet <> nil) then
  begin
    vs := convertType(src.ValueSet);
    try
      if (vs is FHIR.R4.Types.TFhirReference) then
        tgt.ValueSet := FHIR.R4.Types.TFhirReference(vs).Reference
      else
        tgt.ValueSet := vs.primitiveValue;
      tgt.ValueSet := refToVS(tgt.valueSet);
    finally
      vs.Free;
    end;
  end;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOperationDefinitionParameterBindingComponent(src : FHIR.R4.Resources.TFhirOperationDefinitionParameterBinding) : FHIR.R3.Resources.TFhirOperationDefinitionParameterBinding;
var
  tgt : FHIR.R3.Resources.TFhirOperationDefinitionParameterBinding;
  s : String;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirOperationDefinitionParameterBinding.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.strength := convertBindingStrength(src.strength);

  if (src.valueSet <> '') then
  begin
    s := vsToRef(src.valueSet);
    if s <> '' then
      tgt.ValueSet := FHIR.R3.Types.TFHIRUri.create(s)
    else
      tgt.ValueSet := FHIR.R3.Types.TFHIRReference.create(src.ValueSet);
  end;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOperationDefinitionOverloadComponent(src : FHIR.R3.Resources.TFhirOperationDefinitionOverload) : FHIR.R4.Resources.TFhirOperationDefinitionOverload;
var
  tgt : FHIR.R4.Resources.TFhirOperationDefinitionOverload;
  t : FHIR.R3.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirOperationDefinitionOverload.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.parameterNameList do
  begin
    tgt.parameterNameList.add(convertString(t));
  end;
  if (src.comment <> '') then
    tgt.comment := src.comment;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOperationDefinitionOverloadComponent(src : FHIR.R4.Resources.TFhirOperationDefinitionOverload) : FHIR.R3.Resources.TFhirOperationDefinitionOverload;
var
  tgt : FHIR.R3.Resources.TFhirOperationDefinitionOverload;
  t : FHIR.R4.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirOperationDefinitionOverload.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.parameterNameList do
  begin
    tgt.parameterNameList.add(convertString(t));
  end;
  if (src.comment <> '') then
    tgt.comment := src.comment;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOperationOutcome(src : FHIR.R3.Resources.TFhirOperationOutcome) : FHIR.R4.Resources.TFhirOperationOutcome;
var
  tgt : FHIR.R4.Resources.TFhirOperationOutcome;
  t : FHIR.R3.Resources.TFhirOperationOutcomeIssue;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirOperationOutcome.Create();
  try
  copyDomainResource(src, tgt);
  for t in src.issueList do
  begin
    tgt.issueList.add(convertOperationOutcomeIssueComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOperationOutcome(src : FHIR.R4.Resources.TFhirOperationOutcome) : FHIR.R3.Resources.TFhirOperationOutcome;
var
  tgt : FHIR.R3.Resources.TFhirOperationOutcome;
  t : FHIR.R4.Resources.TFhirOperationOutcomeIssue;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirOperationOutcome.Create();
  try
  copyDomainResource(src, tgt);
  for t in src.issueList do
  begin
    tgt.issueList.add(convertOperationOutcomeIssueComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOperationOutcomeIssueComponent(src : FHIR.R3.Resources.TFhirOperationOutcomeIssue) : FHIR.R4.Resources.TFhirOperationOutcomeIssue;
var
  tgt : FHIR.R4.Resources.TFhirOperationOutcomeIssue;
  t : FHIR.R3.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirOperationOutcomeIssue.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.severity := convertIssueSeverity(src.severity);

  tgt.code := convertIssueType(src.code);

  if (src.details <> nil) then
    tgt.details := convertCodeableConcept(src.details);

  if (src.diagnostics <> '') then
    tgt.diagnostics := src.diagnostics;

  for t in src.locationList do
  begin
    tgt.locationList.add(convertString(t));
  end;
  for t in src.expressionList do
  begin
    tgt.expressionList.add(convertString(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOperationOutcomeIssueComponent(src : FHIR.R4.Resources.TFhirOperationOutcomeIssue) : FHIR.R3.Resources.TFhirOperationOutcomeIssue;
var
  tgt : FHIR.R3.Resources.TFhirOperationOutcomeIssue;
  t : FHIR.R4.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirOperationOutcomeIssue.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.severity := convertIssueSeverity(src.severity);

  tgt.code := convertIssueType(src.code);

  if (src.details <> nil) then
    tgt.details := convertCodeableConcept(src.details);

  if (src.diagnostics <> '') then
    tgt.diagnostics := src.diagnostics;

  for t in src.locationList do
  begin
    tgt.locationList.add(convertString(t));
  end;
  for t in src.expressionList do
  begin
    tgt.expressionList.add(convertString(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOrganization(src : FHIR.R3.Resources.TFhirOrganization) : FHIR.R4.Resources.TFhirOrganization;
var
  tgt : FHIR.R4.Resources.TFhirOrganization;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
  t3 : FHIR.R3.Types.TFhirString;
  t4 : FHIR.R3.Types.TFhirContactPoint;
  t5 : FHIR.R3.Types.TFhirAddress;
  t6 : FHIR.R3.Resources.TFhirOrganizationContact;
  t7 : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirOrganization.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  for t2 in src.type_List do
  begin
    tgt.type_List.add(convertCodeableConcept(t2));
  end;
  if (src.name <> '') then
    tgt.name := src.name;

  for t3 in src.aliasList do
  begin
    tgt.aliasList.add(convertString(t3));
  end;
  for t4 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t4));
  end;
  for t5 in src.addressList do
  begin
    tgt.addressList.add(convertAddress(t5));
  end;
  if (src.partOf <> nil) then
    tgt.partOf := convertReference(src.partOf);

  for t6 in src.contactList do
  begin
    tgt.contactList.add(convertOrganizationContactComponent(t6));
  end;
  for t7 in src.endpointList do
  begin
    tgt.endpointList.add(convertReference(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOrganization(src : FHIR.R4.Resources.TFhirOrganization) : FHIR.R3.Resources.TFhirOrganization;
var
  tgt : FHIR.R3.Resources.TFhirOrganization;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirCodeableConcept;
  t3 : FHIR.R4.Types.TFhirString;
  t4 : FHIR.R4.Types.TFhirContactPoint;
  t5 : FHIR.R4.Types.TFhirAddress;
  t6 : FHIR.R4.Resources.TFhirOrganizationContact;
  t7 : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirOrganization.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  for t2 in src.type_List do
  begin
    tgt.type_List.add(convertCodeableConcept(t2));
  end;
  if (src.name <> '') then
    tgt.name := src.name;

  for t3 in src.aliasList do
  begin
    tgt.aliasList.add(convertString(t3));
  end;
  for t4 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t4));
  end;
  for t5 in src.addressList do
  begin
    tgt.addressList.add(convertAddress(t5));
  end;
  if (src.partOf <> nil) then
    tgt.partOf := convertReference(src.partOf);

  for t6 in src.contactList do
  begin
    tgt.contactList.add(convertOrganizationContactComponent(t6));
  end;
  for t7 in src.endpointList do
  begin
    tgt.endpointList.add(convertReference(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOrganizationContactComponent(src : FHIR.R3.Resources.TFhirOrganizationContact) : FHIR.R4.Resources.TFhirOrganizationContact;
var
  tgt : FHIR.R4.Resources.TFhirOrganizationContact;
  t : FHIR.R3.Types.TFhirContactPoint;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirOrganizationContact.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.purpose <> nil) then
    tgt.purpose := convertCodeableConcept(src.purpose);

  if (src.name <> nil) then
    tgt.name := convertHumanName(src.name);

  for t in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t));
  end;
  if (src.address <> nil) then
    tgt.address := convertAddress(src.address);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertOrganizationContactComponent(src : FHIR.R4.Resources.TFhirOrganizationContact) : FHIR.R3.Resources.TFhirOrganizationContact;
var
  tgt : FHIR.R3.Resources.TFhirOrganizationContact;
  t : FHIR.R4.Types.TFhirContactPoint;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirOrganizationContact.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.purpose <> nil) then
    tgt.purpose := convertCodeableConcept(src.purpose);

  if (src.name <> nil) then
    tgt.name := convertHumanName(src.name);

  for t in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t));
  end;
  if (src.address <> nil) then
    tgt.address := convertAddress(src.address);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPatient(src : FHIR.R3.Resources.TFhirPatient) : FHIR.R4.Resources.TFhirPatient;
var
  tgt : FHIR.R4.Resources.TFhirPatient;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirHumanName;
  t3 : FHIR.R3.Types.TFhirContactPoint;
  t4 : FHIR.R3.Types.TFhirAddress;
  t5 : FHIR.R3.Types.TFhirAttachment;
  t6 : FHIR.R3.Resources.TFhirPatientContact;
  t7 : FHIR.R3.Resources.TFhirPatientCommunication;
  t8 : FHIR.R3.Types.TFhirReference;
  t9 : FHIR.R3.Resources.TFhirPatientLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPatient.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  for t2 in src.nameList do
  begin
    tgt.nameList.add(convertHumanName(t2));
  end;
  for t3 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t3));
  end;
  tgt.gender := convertAdministrativeGender(src.gender);

  tgt.birthDate := src.birthDate.link;

  if (src.deceased <> nil) then
    tgt.deceased := convertType(src.deceased);

  for t4 in src.addressList do
  begin
    tgt.addressList.add(convertAddress(t4));
  end;
  if (src.maritalStatus <> nil) then
    tgt.maritalStatus := convertCodeableConcept(src.maritalStatus);

  if (src.multipleBirth <> nil) then
    tgt.multipleBirth := convertType(src.multipleBirth);

  for t5 in src.photoList do
  begin
    tgt.photoList.add(convertAttachment(t5));
  end;
  for t6 in src.contactList do
  begin
    tgt.contactList.add(convertContactComponent(t6));
  end;
  if (src.animal <> nil) then
    tgt.extensionList.add(convertAnimalComponent(src.Animal));

  for t7 in src.communicationList do
  begin
    tgt.communicationList.add(convertPatientCommunicationComponent(t7));
  end;
  for t8 in src.generalPractitionerList do
  begin
    tgt.generalPractitionerList.add(convertReference(t8));
  end;
  if (src.managingOrganization <> nil) then
    tgt.managingOrganization := convertReference(src.managingOrganization);

  for t9 in src.link_List do
  begin
    tgt.link_List.add(convertPatientLinkComponent(t9));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPatient(src : FHIR.R4.Resources.TFhirPatient) : FHIR.R3.Resources.TFhirPatient;
var
  tgt : FHIR.R3.Resources.TFhirPatient;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirHumanName;
  t3 : FHIR.R4.Types.TFhirContactPoint;
  t4 : FHIR.R4.Types.TFhirAddress;
  t5 : FHIR.R4.Types.TFhirAttachment;
  t6 : FHIR.R4.Resources.TFhirPatientContact;
  t7 : FHIR.R4.Resources.TFhirPatientCommunication;
  t8 : FHIR.R4.Types.TFhirReference;
  t9 : FHIR.R4.Resources.TFhirPatientLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPatient.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  for t2 in src.nameList do
  begin
    tgt.nameList.add(convertHumanName(t2));
  end;
  for t3 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t3));
  end;
  tgt.gender := convertAdministrativeGender(src.gender);

  tgt.birthDate := src.birthDate.link;

  if (src.deceased <> nil) then
    tgt.deceased := convertType(src.deceased);

  for t4 in src.addressList do
  begin
    tgt.addressList.add(convertAddress(t4));
  end;
  if (src.maritalStatus <> nil) then
    tgt.maritalStatus := convertCodeableConcept(src.maritalStatus);

  if (src.multipleBirth <> nil) then
    tgt.multipleBirth := convertType(src.multipleBirth);

  for t5 in src.photoList do
  begin
    tgt.photoList.add(convertAttachment(t5));
  end;
  for t6 in src.contactList do
  begin
    tgt.contactList.add(convertContactComponent(t6));
  end;
  if (src.hasExtension('http://hl7.org/fhir/StructureDefinition/patient-animal')) then
    tgt.Animal := convertAnimalComponent(src.getExtensionByUrl('http://hl7.org/fhir/StructureDefinition/patient-animal'));

  for t7 in src.communicationList do
  begin
    tgt.communicationList.add(convertPatientCommunicationComponent(t7));
  end;
  for t8 in src.generalPractitionerList do
  begin
    tgt.generalPractitionerList.add(convertReference(t8));
  end;
  if (src.managingOrganization <> nil) then
    tgt.managingOrganization := convertReference(src.managingOrganization);

  for t9 in src.link_List do
  begin
    tgt.link_List.add(convertPatientLinkComponent(t9));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertContactComponent(src : FHIR.R3.Resources.TFhirPatientContact) : FHIR.R4.Resources.TFhirPatientContact;
var
  tgt : FHIR.R4.Resources.TFhirPatientContact;
  t1 : FHIR.R3.Types.TFhirCodeableConcept;
  t2 : FHIR.R3.Types.TFhirContactPoint;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPatientContact.Create();
  try
  copyBackboneElement(src, tgt);
  for t1 in src.relationshipList do
  begin
    tgt.relationshipList.add(convertCodeableConcept(t1));
  end;
  if (src.name <> nil) then
    tgt.name := convertHumanName(src.name);

  for t2 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t2));
  end;
  if (src.address <> nil) then
    tgt.address := convertAddress(src.address);

  tgt.gender := convertAdministrativeGender(src.gender);

  if (src.organization <> nil) then
    tgt.organization := convertReference(src.organization);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertContactComponent(src : FHIR.R4.Resources.TFhirPatientContact) : FHIR.R3.Resources.TFhirPatientContact;
var
  tgt : FHIR.R3.Resources.TFhirPatientContact;
  t1 : FHIR.R4.Types.TFhirCodeableConcept;
  t2 : FHIR.R4.Types.TFhirContactPoint;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPatientContact.Create();
  try
  copyBackboneElement(src, tgt);
  for t1 in src.relationshipList do
  begin
    tgt.relationshipList.add(convertCodeableConcept(t1));
  end;
  if (src.name <> nil) then
    tgt.name := convertHumanName(src.name);

  for t2 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t2));
  end;
  if (src.address <> nil) then
    tgt.address := convertAddress(src.address);

  tgt.gender := convertAdministrativeGender(src.gender);

  if (src.organization <> nil) then
    tgt.organization := convertReference(src.organization);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAnimalComponent(src : FHIR.R3.Resources.TFhirPatientAnimal) : FHIR.R4.Types.TFhirExtension;
var
  tgt : FHIR.R4.Types.TFhirExtension;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Types.TFhirExtension.Create();
  try
  tgt.url := 'http://hl7.org/fhir/StructureDefinition/patient-animal';
  copyElement(src, tgt);
  if (src.species <> nil) then
    tgt.addExtension('species', convertCodeableConcept(src.Species));

  if (src.breed <> nil) then
    tgt.addExtension('breed', convertCodeableConcept(src.Breed));

  if (src.genderStatus <> nil) then
    tgt.addExtension('genderStatus', convertCodeableConcept(src.GenderStatus));

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertAnimalComponent(src : FHIR.R4.Types.TFhirExtension) : FHIR.R3.Resources.TFhirPatientAnimal;
var
  tgt : FHIR.R3.Resources.TFhirPatientAnimal;
begin
  if ( src = nil) or (src.isEmpty()) then
    exit(nil);

  tgt := FHIR.R3.Resources.TFhirPatientAnimal.Create();
  try
  copyElement(src, tgt);
  if (src.hasExtension('species')) then
    tgt.Species := convertCodeableConcept(src.getExtensionByUrl('species').Value as FHIR.R4.Types.TFhirCodeableConcept);

  if (src.hasExtension('breed')) then
    tgt.Breed := convertCodeableConcept(src.getExtensionByUrl('species').Value as FHIR.R4.Types.TFhirCodeableConcept);

  if (src.hasExtension('genderStatus')) then
    tgt.GenderStatus := convertCodeableConcept(src.getExtensionByUrl('genderStatus').Value as FHIR.R4.Types.TFhirCodeableConcept);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPatientCommunicationComponent(src : FHIR.R3.Resources.TFhirPatientCommunication) : FHIR.R4.Resources.TFhirPatientCommunication;
var
  tgt : FHIR.R4.Resources.TFhirPatientCommunication;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPatientCommunication.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.language <> nil) then
    tgt.language := convertCodeableConcept(src.language);

  tgt.preferred := src.preferred;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPatientCommunicationComponent(src : FHIR.R4.Resources.TFhirPatientCommunication) : FHIR.R3.Resources.TFhirPatientCommunication;
var
  tgt : FHIR.R3.Resources.TFhirPatientCommunication;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPatientCommunication.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.language <> nil) then
    tgt.language := convertCodeableConcept(src.language);

  tgt.preferred := src.preferred;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPatientLinkComponent(src : FHIR.R3.Resources.TFhirPatientLink) : FHIR.R4.Resources.TFhirPatientLink;
var
  tgt : FHIR.R4.Resources.TFhirPatientLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPatientLink.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.other <> nil) then
    tgt.other := convertReference(src.other);

  tgt.type_ := convertLinkType(src.type_);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPatientLinkComponent(src : FHIR.R4.Resources.TFhirPatientLink) : FHIR.R3.Resources.TFhirPatientLink;
var
  tgt : FHIR.R3.Resources.TFhirPatientLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPatientLink.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.other <> nil) then
    tgt.other := convertReference(src.other);

  tgt.type_ := convertLinkType(src.type_);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPaymentNotice(src : FHIR.R3.Resources.TFhirPaymentNotice) : FHIR.R4.Resources.TFhirPaymentNotice;
var
  tgt : FHIR.R4.Resources.TFhirPaymentNotice;
  t : FHIR.R3.Types.TFhirIdentifier;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPaymentNotice.Create();
  try
  copyDomainResource(src, tgt);
  for t in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t));
  end;
  tgt.status := convertPaymentNoticeStatus(src.status);

  if (src.request <> nil) then
    tgt.request := convertReference(src.request);

  if (src.response <> nil) then
    tgt.response := convertReference(src.response);

  tgt.paymentDate := src.statusDate.link;

  tgt.created := src.created;

  if (src.target <> nil) then
    tgt.recipient := convertReference(src.target);

  if (src.provider <> nil) then
    tgt.provider := convertReference(src.provider);

  if (src.paymentStatus <> nil) then
    tgt.paymentStatus := convertCodeableConcept(src.paymentStatus);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPaymentNotice(src : FHIR.R4.Resources.TFhirPaymentNotice) : FHIR.R3.Resources.TFhirPaymentNotice;
var
  tgt : FHIR.R3.Resources.TFhirPaymentNotice;
  t : FHIR.R4.Types.TFhirIdentifier;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPaymentNotice.Create();
  try
  copyDomainResource(src, tgt);
  for t in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t));
  end;
  tgt.status := convertPaymentNoticeStatus(src.status);

  if (src.request <> nil) then
    tgt.request := convertReference(src.request);

  if (src.response <> nil) then
    tgt.response := convertReference(src.response);

  tgt.statusDate := src.paymentDate.link;

  tgt.created := src.created;

  if (src.recipient <> nil) then
    tgt.target := convertReference(src.recipient);

  if (src.provider <> nil) then
    tgt.provider := convertReference(src.provider);

  if (src.paymentStatus <> nil) then
    tgt.paymentStatus := convertCodeableConcept(src.paymentStatus);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPerson(src : FHIR.R3.Resources.TFhirPerson) : FHIR.R4.Resources.TFhirPerson;
var
  tgt : FHIR.R4.Resources.TFhirPerson;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirHumanName;
  t3 : FHIR.R3.Types.TFhirContactPoint;
  t4 : FHIR.R3.Types.TFhirAddress;
  t5 : FHIR.R3.Resources.TFhirPersonLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPerson.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.nameList do
  begin
    tgt.nameList.add(convertHumanName(t2));
  end;
  for t3 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t3));
  end;

  tgt.gender := convertAdministrativeGender(src.gender);

  tgt.birthDate := src.birthDate.link;

  for t4 in src.addressList do
  begin
    tgt.addressList.add(convertAddress(t4));
  end;
  if (src.photo <> nil) then
    tgt.photo := convertAttachment(src.photo);

  if (src.managingOrganization <> nil) then
    tgt.managingOrganization := convertReference(src.managingOrganization);

  tgt.active := src.active;

  for t5 in src.link_List do
  begin
    tgt.link_List.add(convertPersonLinkComponent(t5));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPerson(src : FHIR.R4.Resources.TFhirPerson) : FHIR.R3.Resources.TFhirPerson;
var
  tgt : FHIR.R3.Resources.TFhirPerson;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirHumanName;
  t3 : FHIR.R4.Types.TFhirContactPoint;
  t4 : FHIR.R4.Types.TFhirAddress;
  t5 : FHIR.R4.Resources.TFhirPersonLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPerson.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  for t2 in src.nameList do
  begin
    tgt.nameList.add(convertHumanName(t2));
  end;
  for t3 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t3));
  end;
  tgt.gender := convertAdministrativeGender(src.gender);

  tgt.birthDate := src.birthDate.link;

  for t4 in src.addressList do
  begin
    tgt.addressList.add(convertAddress(t4));
  end;
  if (src.photo <> nil) then
    tgt.photo := convertAttachment(src.photo);

  if (src.managingOrganization <> nil) then
    tgt.managingOrganization := convertReference(src.managingOrganization);

  tgt.active := src.active;

  for t5 in src.link_List do
  begin
    tgt.link_List.add(convertPersonLinkComponent(t5));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPersonLinkComponent(src : FHIR.R3.Resources.TFhirPersonLink) : FHIR.R4.Resources.TFhirPersonLink;
var
  tgt : FHIR.R4.Resources.TFhirPersonLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPersonLink.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.target <> nil) then
    tgt.target := convertReference(src.target);

  tgt.assurance := convertIdentityAssuranceLevel(src.assurance);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPersonLinkComponent(src : FHIR.R4.Resources.TFhirPersonLink) : FHIR.R3.Resources.TFhirPersonLink;
var
  tgt : FHIR.R3.Resources.TFhirPersonLink;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPersonLink.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.target <> nil) then
    tgt.target := convertReference(src.target);

  tgt.assurance := convertIdentityAssuranceLevel(src.assurance);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPractitioner(src : FHIR.R3.Resources.TFhirPractitioner) : FHIR.R4.Resources.TFhirPractitioner;
var
  tgt : FHIR.R4.Resources.TFhirPractitioner;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirHumanName;
  t3 : FHIR.R3.Types.TFhirContactPoint;
  t4 : FHIR.R3.Types.TFhirAddress;
  t5 : FHIR.R3.Types.TFhirAttachment;
  t6 : FHIR.R3.Resources.TFhirPractitionerQualification;
  t7 : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPractitioner.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  for t2 in src.nameList do
  begin
    tgt.nameList.add(convertHumanName(t2));
  end;
  for t3 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t3));
  end;
  for t4 in src.addressList do
  begin
    tgt.addressList.add(convertAddress(t4));
  end;
  tgt.gender := convertAdministrativeGender(src.gender);

  tgt.birthDate := src.birthDate.link;

  for t5 in src.photoList do
  begin
    tgt.photoList.add(convertAttachment(t5));
  end;
  for t6 in src.qualificationList do
  begin
    tgt.qualificationList.add(convertPractitionerQualificationComponent(t6));
  end;
  for t7 in src.communicationList do
  begin
    tgt.communicationList.add(convertCodeableConcept(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPractitioner(src : FHIR.R4.Resources.TFhirPractitioner) : FHIR.R3.Resources.TFhirPractitioner;
var
  tgt : FHIR.R3.Resources.TFhirPractitioner;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirHumanName;
  t3 : FHIR.R4.Types.TFhirContactPoint;
  t4 : FHIR.R4.Types.TFhirAddress;
  t5 : FHIR.R4.Types.TFhirAttachment;
  t6 : FHIR.R4.Resources.TFhirPractitionerQualification;
  t7 : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPractitioner.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  for t2 in src.nameList do
  begin
    tgt.nameList.add(convertHumanName(t2));
  end;
  for t3 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t3));
  end;
  for t4 in src.addressList do
  begin
    tgt.addressList.add(convertAddress(t4));
  end;
  tgt.gender := convertAdministrativeGender(src.gender);

  tgt.birthDate := src.birthDate.link;

  for t5 in src.photoList do
  begin
    tgt.photoList.add(convertAttachment(t5));
  end;
  for t6 in src.qualificationList do
  begin
    tgt.qualificationList.add(convertPractitionerQualificationComponent(t6));
  end;
  for t7 in src.communicationList do
  begin
    tgt.communicationList.add(convertCodeableConcept(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPractitionerQualificationComponent(src : FHIR.R3.Resources.TFhirPractitionerQualification) : FHIR.R4.Resources.TFhirPractitionerQualification;
var
  tgt : FHIR.R4.Resources.TFhirPractitionerQualification;
  t : FHIR.R3.Types.TFhirIdentifier;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPractitionerQualification.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t));
  end;
  tgt.code := convertCodeableConcept(src.code);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  if (src.issuer <> nil) then
    tgt.issuer := convertReference(src.issuer);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPractitionerQualificationComponent(src : FHIR.R4.Resources.TFhirPractitionerQualification) : FHIR.R3.Resources.TFhirPractitionerQualification;
var
  tgt : FHIR.R3.Resources.TFhirPractitionerQualification;
  t : FHIR.R4.Types.TFhirIdentifier;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPractitionerQualification.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t));
  end;
  tgt.code := convertCodeableConcept(src.code);

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  if (src.issuer <> nil) then
    tgt.issuer := convertReference(src.issuer);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPractitionerRole(src : FHIR.R3.Resources.TFhirPractitionerRole) : FHIR.R4.Resources.TFhirPractitionerRole;
var
  tgt : FHIR.R4.Resources.TFhirPractitionerRole;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Types.TFhirReference;
  t5 : FHIR.R3.Types.TFhirReference;
  t6 : FHIR.R3.Types.TFhirContactPoint;
  t7 : FHIR.R3.Resources.TFhirPractitionerRoleAvailableTime;
  t8 : FHIR.R3.Resources.TFhirPractitionerRoleNotAvailable;
  t9 : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPractitionerRole.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  if (src.practitioner <> nil) then
    tgt.practitioner := convertReference(src.practitioner);

  if (src.organization <> nil) then
    tgt.organization := convertReference(src.organization);

  for t2 in src.codeList do
  begin
    tgt.codeList.add(convertCodeableConcept(t2));
  end;
  for t3 in src.specialtyList do
  begin
    tgt.specialtyList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.locationList do
  begin
    tgt.locationList.add(convertReference(t4));
  end;
  for t5 in src.healthcareServiceList do
  begin
    tgt.healthcareServiceList.add(convertReference(t5));
  end;
  for t6 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t6));
  end;
  for t7 in src.availableTimeList do
  begin
    tgt.availableTimeList.add(convertPractitionerRoleAvailableTimeComponent(t7));
  end;
  for t8 in src.notAvailableList do
  begin
    tgt.notAvailableList.add(convertPractitionerRoleNotAvailableComponent(t8));
  end;
  if (src.availabilityExceptions <> '') then
    tgt.availabilityExceptions := src.availabilityExceptions;

  for t9 in src.endpointList do
  begin
    tgt.endpointList.add(convertReference(t9));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPractitionerRole(src : FHIR.R4.Resources.TFhirPractitionerRole) : FHIR.R3.Resources.TFhirPractitionerRole;
var
  tgt : FHIR.R3.Resources.TFhirPractitionerRole;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirCodeableConcept;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Types.TFhirReference;
  t5 : FHIR.R4.Types.TFhirReference;
  t6 : FHIR.R4.Types.TFhirContactPoint;
  t7 : FHIR.R4.Resources.TFhirPractitionerRoleAvailableTime;
  t8 : FHIR.R4.Resources.TFhirPractitionerRoleNotAvailable;
  t9 : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPractitionerRole.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  if (src.period <> nil) then
    tgt.period := convertPeriod(src.period);

  if (src.practitioner <> nil) then
    tgt.practitioner := convertReference(src.practitioner);

  if (src.organization <> nil) then
    tgt.organization := convertReference(src.organization);

  for t2 in src.codeList do
  begin
    tgt.codeList.add(convertCodeableConcept(t2));
  end;
  for t3 in src.specialtyList do
  begin
    tgt.specialtyList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.locationList do
  begin
    tgt.locationList.add(convertReference(t4));
  end;
  for t5 in src.healthcareServiceList do
  begin
    tgt.healthcareServiceList.add(convertReference(t5));
  end;
  for t6 in src.telecomList do
  begin
    tgt.telecomList.add(convertContactPoint(t6));
  end;
  for t7 in src.availableTimeList do
  begin
    tgt.availableTimeList.add(convertPractitionerRoleAvailableTimeComponent(t7));
  end;
  for t8 in src.notAvailableList do
  begin
    tgt.notAvailableList.add(convertPractitionerRoleNotAvailableComponent(t8));
  end;
  if (src.availabilityExceptions <> '') then
    tgt.availabilityExceptions := src.availabilityExceptions;

  for t9 in src.endpointList do
  begin
    tgt.endpointList.add(convertReference(t9));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPractitionerRoleAvailableTimeComponent(src : FHIR.R3.Resources.TFhirPractitionerRoleAvailableTime) : FHIR.R4.Resources.TFhirPractitionerRoleAvailableTime;
var
  tgt : FHIR.R4.Resources.TFhirPractitionerRoleAvailableTime;
  t : FHIR.R3.Types.TFhirDaysOfWeekEnum;
  a : FHIR.R4.Types.TFhirDaysOfWeekEnumList;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPractitionerRoleAvailableTime.Create();
  try
  copyBackboneElement(src, tgt);
  a := [];
  for t := low(FHIR.R3.Types.TFhirDaysOfWeekEnum) to high(FHIR.R3.Types.TFhirDaysOfWeekEnum) do
    if t in src.daysOfWeek then
      a := a + [convertDayOfWeek(t)];
  tgt.daysOfWeek := a;

  tgt.allDay := src.allDay;

  if (src.availableStartTime <> '') then
    tgt.availableStartTime := src.availableStartTime;

  if (src.availableEndTime <> '') then
    tgt.availableEndTime := src.availableEndTime;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPractitionerRoleAvailableTimeComponent(src : FHIR.R4.Resources.TFhirPractitionerRoleAvailableTime) : FHIR.R3.Resources.TFhirPractitionerRoleAvailableTime;
var
  tgt : FHIR.R3.Resources.TFhirPractitionerRoleAvailableTime;
  t : FHIR.R4.Types.TFhirDaysOfWeekEnum;
  a : FHIR.R3.Types.TFhirDaysOfWeekEnumList;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPractitionerRoleAvailableTime.Create();
  try
  copyBackboneElement(src, tgt);
  a := [];
  for t := low(FHIR.R4.Types.TFhirDaysOfWeekEnum) to high(FHIR.R4.Types.TFhirDaysOfWeekEnum) do
    if t in src.daysOfWeek then
      a := a + [convertDayOfWeek(t)];
  tgt.daysOfWeek := a;
  tgt.allDay := src.allDay;

  if (src.availableStartTime <> '') then
    tgt.availableStartTime := src.availableStartTime;

  if (src.availableEndTime <> '') then
    tgt.availableEndTime := src.availableEndTime;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPractitionerRoleNotAvailableComponent(src : FHIR.R3.Resources.TFhirPractitionerRoleNotAvailable) : FHIR.R4.Resources.TFhirPractitionerRoleNotAvailable;
var
  tgt : FHIR.R4.Resources.TFhirPractitionerRoleNotAvailable;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPractitionerRoleNotAvailable.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.description <> '') then
    tgt.description := src.description;

  if (src.during <> nil) then
    tgt.during := convertPeriod(src.during);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPractitionerRoleNotAvailableComponent(src : FHIR.R4.Resources.TFhirPractitionerRoleNotAvailable) : FHIR.R3.Resources.TFhirPractitionerRoleNotAvailable;
var
  tgt : FHIR.R3.Resources.TFhirPractitionerRoleNotAvailable;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPractitionerRoleNotAvailable.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.description <> '') then
    tgt.description := src.description;

  if (src.during <> nil) then
    tgt.during := convertPeriod(src.during);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaire(src : FHIR.R3.Resources.TFhirQuestionnaire) : FHIR.R4.Resources.TFhirQuestionnaire;
var
  tgt : FHIR.R4.Resources.TFhirQuestionnaire;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirUsageContext;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Types.TFhirContactDetail;
  t5 : FHIR.R3.Types.TFhirCoding;
  t7 : FHIR.R3.Resources.TFhirQuestionnaireItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirQuestionnaire.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.purpose <> '') then
    tgt.purpose := src.purpose;
   tgt.approvalDate := src.approvalDate;
  tgt.lastReviewDate := src.lastReviewDate;

  if (src.effectivePeriod <> nil) then
    tgt.effectivePeriod := convertPeriod(src.effectivePeriod);

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t4));
  end;
  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  for t5 in src.codeList do
  begin
    tgt.codeList.add(convertCoding(t5));
  end;
{  // todo
  for t6 in src.subjectType  do
  begin
    tgt.subjectTypeList.add(convertCode(t6));
  end;}
  for t7 in src.itemList do
  begin
    tgt.itemList.add(convertQuestionnaireItemComponent(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertProvenance(src : FHIR.R3.Resources.TFhirProvenance) : FHIR.R4.Resources.TFhirProvenance;
var
  tgt : FHIR.R4.Resources.TFhirProvenance;
  t1 : FHIR.R3.Types.TFhirReference;
  t2 : FHIR.R3.Types.TFHIRUri;
  t3 : FHIR.R3.Types.TFHIRCoding;
  t4 : FHIR.R3.Resources.TFhirProvenanceAgent;
  t5 : FHIR.R3.Resources.TFhirProvenanceEntity;
  t6 : FHIR.R3.Types.TFhirSignature;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirProvenance.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.targetList do
    tgt.TargetList.add(convertReference(t1));
  tgt.Occurred := convertPeriod(src.Period);
  tgt.Recorded := src.Recorded;
  for t2 in src.policyList do
    tgt.PolicyList.add(ConvertUri(t2));
  tgt.Location := convertReference(src.Location);
  for t3 in src.reasonList do
    tgt.ReasonList.add(convertCodingToCodeableConcept(t3));
  tgt.Activity := convertCodingToCodeableConcept(src.Activity);
  for t4 in src.agentList do
    tgt.AgentList.add(convertProvenanceAgentComponent(t4));
  for t5 in src.EntityList do
    tgt.EntityList.add(convertProvenanceEntityComponent(t5));
  for t6 in src.signatureList do
    tgt.SignatureList.add(convertSignature(t6));
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertProvenance(src : FHIR.R4.Resources.TFhirProvenance) : FHIR.R3.Resources.TFhirProvenance;
var
  tgt : FHIR.R3.Resources.TFhirProvenance;
  t1 : FHIR.R4.Types.TFhirReference;
  t2 : FHIR.R4.Types.TFHIRUri;
  t3 : FHIR.R4.Types.TFHIRCodeableConcept;
  c : FHIR.R4.Types.TFHIRCoding;
  t4 : FHIR.R4.Resources.TFhirProvenanceAgent;
  t5 : FHIR.R4.Resources.TFhirProvenanceEntity;
  t6 : FHIR.R4.Types.TFhirSignature;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirProvenance.Create();
  try
  for t1 in src.targetList do
    tgt.TargetList.add(convertReference(t1));
  if src.Occurred is FHIR.R4.Types.TFhirPeriod then
    tgt.Period := convertPeriod(src.Occurred as FHIR.R4.Types.TFhirPeriod);
  tgt.Recorded := src.Recorded;
  for t2 in src.policyList do
    tgt.PolicyList.add(ConvertUri(t2));
  tgt.Location := convertReference(src.Location);
  for t3 in src.reasonList do
    for c in t3.codingList do
      tgt.ReasonList.add(convertCoding(c));
  tgt.Activity := convertCoding(src.Activity);
  for t4 in src.agentList do
    tgt.AgentList.add(convertProvenanceAgentComponent(t4));
  for t5 in src.EntityList do
    tgt.EntityList.add(convertProvenanceEntityComponent(t5));
  for t6 in src.signatureList do
    tgt.SignatureList.add(convertSignature(t6));
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertProvenanceAgentComponent(src : FHIR.R3.Resources.TFhirProvenanceAgent) : FHIR.R4.Resources.TFhirProvenanceAgent;
var
  tgt : FHIR.R4.Resources.TFhirProvenanceAgent;
  t : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirProvenanceAgent.Create();
  try
    copyBackboneElement(src, tgt);
    for t in src.roleList do
      tgt.RoleList.add(convertCodeableConcept(t));
    tgt.Who := convertType(src.Who) as FHIR.R4.Types.TFHIRReference;
    tgt.OnBehalfOf := convertType(src.OnBehalfOf) as FHIR.R4.Types.TFHIRReference;
    exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertProvenanceAgentComponent(src : FHIR.R4.Resources.TFhirProvenanceAgent) : FHIR.R3.Resources.TFhirProvenanceAgent;
var
  tgt : FHIR.R3.Resources.TFhirProvenanceAgent;
  t : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirProvenanceAgent.Create();
  try
    copyBackboneElement(src, tgt);
    for t in src.roleList do
      tgt.RoleList.add(convertCodeableConcept(t));
    tgt.Who := convertType(src.Who);
    tgt.OnBehalfOf := convertType(src.OnBehalfOf);
    exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertProvenanceEntityComponent(src : FHIR.R3.Resources.TFhirProvenanceEntity) : FHIR.R4.Resources.TFhirProvenanceEntity;
var
  tgt : FHIR.R4.Resources.TFhirProvenanceEntity;
  t : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Resources.TFhirProvenanceAgent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirProvenanceEntity.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.Role := convertProvenanceEntityRole(src.role);
  tgt.what := convertType(src.what) as FHIR.R4.Types.TFHIRReference;
  for t4 in src.agentList do
    tgt.AgentList.add(convertProvenanceAgentComponent(t4));
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertProvenanceEntityComponent(src : FHIR.R4.Resources.TFhirProvenanceEntity) : FHIR.R3.Resources.TFhirProvenanceEntity;
var
  tgt : FHIR.R3.Resources.TFhirProvenanceEntity;
  t : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Resources.TFhirProvenanceAgent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirProvenanceEntity.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.Role := convertProvenanceEntityRole(src.role);
  tgt.what := convertType(src.what);
  for t4 in src.agentList do
    tgt.AgentList.add(convertProvenanceAgentComponent(t4));
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaire(src : FHIR.R4.Resources.TFhirQuestionnaire) : FHIR.R3.Resources.TFhirQuestionnaire;
var
  tgt : FHIR.R3.Resources.TFhirQuestionnaire;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirUsageContext;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Types.TFhirContactDetail;
  t5 : FHIR.R4.Types.TFhirCoding;
  t7 : FHIR.R4.Resources.TFhirQuestionnaireItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirQuestionnaire.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.purpose <> '') then
    tgt.purpose := src.purpose;
  tgt.approvalDate := src.approvalDate;
  tgt.lastReviewDate := src.lastReviewDate;

  if (src.effectivePeriod <> nil) then
    tgt.effectivePeriod := convertPeriod(src.effectivePeriod);

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t4));
  end;
  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  for t5 in src.codeList do
  begin
    tgt.codeList.add(convertCoding(t5));
  end;
  // todo
  {
  for t6 in src.subjectTypeList do
  begin
    tgt.subjectTypeList.add(convertCode(t6));
  end;
  }
  for t7 in src.itemList do
  begin
    tgt.itemList.add(convertQuestionnaireItemComponent(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireItemComponent(src : FHIR.R3.Resources.TFhirQuestionnaireItem) : FHIR.R4.Resources.TFhirQuestionnaireItem;
var
  tgt : FHIR.R4.Resources.TFhirQuestionnaireItem;
  t1 : FHIR.R3.Types.TFhirCoding;
  t2 : FHIR.R3.Resources.TFhirQuestionnaireItemEnableWhen;
  t3 : FHIR.R3.Resources.TFhirQuestionnaireItemOption;
  t4 : FHIR.R3.Resources.TFhirQuestionnaireItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirQuestionnaireItem.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.linkId <> '') then
    tgt.linkId := src.linkId;

  if (src.definition <> '') then
    tgt.definition := src.definition;

  for t1 in src.codeList do
  begin
    tgt.codeList.add(convertCoding(t1));
  end;
  if (src.prefix <> '') then
    tgt.prefix := src.prefix;

  if (src.text <> '') then
    tgt.text := src.text;

  tgt.type_ := convertQuestionnaireItemType(src.type_);

  for t2 in src.enableWhenList do
  begin
    tgt.enableWhenList.add(convertQuestionnaireItemEnableWhenComponent(t2));
  end;
  tgt.required := src.required;
  tgt.repeats := src.repeats;
  tgt.readOnly := src.readOnly;
  tgt.maxLength := src.maxLength;

  if (src.options <> nil) then
    tgt.answerValueSetElement := convertReferenceToCanonical(src.options);

  for t3 in src.optionList do
  begin
    tgt.answerOptionList.add(convertQuestionnaireItemOptionComponent(t3));
  end;
  if (src.initial <> nil) then
    tgt.InitialList.append.value := convertType(src.initial);

  for t4 in src.itemList do
  begin
    tgt.itemList.add(convertQuestionnaireItemComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireItemComponent(src : FHIR.R4.Resources.TFhirQuestionnaireItem) : FHIR.R3.Resources.TFhirQuestionnaireItem;
var
  tgt : FHIR.R3.Resources.TFhirQuestionnaireItem;
  t1 : FHIR.R4.Types.TFhirCoding;
  t2 : FHIR.R4.Resources.TFhirQuestionnaireItemEnableWhen;
  t3 : FHIR.R4.Resources.TFhirQuestionnaireItemAnswerOption;
  t4 : FHIR.R4.Resources.TFhirQuestionnaireItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirQuestionnaireItem.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.linkId <> '') then
    tgt.linkId := src.linkId;

  if (src.definition <> '') then
    tgt.definition := src.definition;

  for t1 in src.codeList do
  begin
    tgt.codeList.add(convertCoding(t1));
  end;
  if (src.prefix <> '') then
    tgt.prefix := src.prefix;

  if (src.text <> '') then
    tgt.text := src.text;

  tgt.type_ := convertQuestionnaireItemType(src.type_);

  for t2 in src.enableWhenList do
  begin
    tgt.enableWhenList.add(convertQuestionnaireItemEnableWhenComponent(t2));
  end;
  tgt.required := src.required;
  tgt.repeats := src.repeats;
  tgt.readOnly := src.readOnly;
  tgt.maxLength := src.maxLength;

  if (src.answerValueSet <> '') then
    tgt.options := convertCanonicalToReference(src.answerValueSetElement);

  for t3 in src.answerOptionList do
  begin
    tgt.optionList.add(convertQuestionnaireItemOptionComponent(t3));
  end;
  if (src.InitialList.count > 0) then
    tgt.initial := convertType(src.InitialList[0].value);

  for t4 in src.itemList do
  begin
    tgt.itemList.add(convertQuestionnaireItemComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireItemEnableWhenComponent(src : FHIR.R3.Resources.TFhirQuestionnaireItemEnableWhen) : FHIR.R4.Resources.TFhirQuestionnaireItemEnableWhen;
var
  tgt : FHIR.R4.Resources.TFhirQuestionnaireItemEnableWhen;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirQuestionnaireItemEnableWhen.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.question <> '') then
    tgt.question := src.question;

  if (src.hasAnswerElement <> nil) then
  begin
    tgt.Operator := FHIR.R4.Types.QuestionnaireEnableOperatorExists;
    tgt.answer := convertType(src.hasAnswerElement);
  end
  else if (src.answer <> nil) then
    tgt.answer := convertType(src.answer);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireItemEnableWhenComponent(src : FHIR.R4.Resources.TFhirQuestionnaireItemEnableWhen) : FHIR.R3.Resources.TFhirQuestionnaireItemEnableWhen;
var
  tgt : FHIR.R3.Resources.TFhirQuestionnaireItemEnableWhen;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirQuestionnaireItemEnableWhen.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.question <> '') then
    tgt.question := src.question;

  if (src.Operator = FHIR.R4.Types.QuestionnaireEnableOperatorExists) then
    tgt.hasAnswer := (src.Answer as FHIR.R4.Types.TFHIRBoolean).value
  else if (src.answer <> nil) then
    tgt.answer := convertType(src.answer);


  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireItemOptionComponent(src : FHIR.R3.Resources.TFhirQuestionnaireItemOption) : FHIR.R4.Resources.TFhirQuestionnaireItemAnswerOption;
var
  tgt : FHIR.R4.Resources.TFhirQuestionnaireItemAnswerOption;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirQuestionnaireItemAnswerOption.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireItemOptionComponent(src : FHIR.R4.Resources.TFhirQuestionnaireItemAnswerOption) : FHIR.R3.Resources.TFhirQuestionnaireItemOption;
var
  tgt : FHIR.R3.Resources.TFhirQuestionnaireItemOption;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirQuestionnaireItemOption.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireResponse(src : FHIR.R3.Resources.TFhirQuestionnaireResponse) : FHIR.R4.Resources.TFhirQuestionnaireResponse;
var
  tgt : FHIR.R4.Resources.TFhirQuestionnaireResponse;
  t1 : FHIR.R3.Types.TFhirReference;
  t2 : FHIR.R3.Types.TFhirReference;
  t3 : FHIR.R3.Resources.TFhirQuestionnaireResponseItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirQuestionnaireResponse.Create();
  try
  copyDomainResource(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  for t1 in src.basedOnList do
  begin
    tgt.basedOnList.add(convertReference(t1));
  end;
  for t2 in src.parentList do
  begin
    tgt.partOfList.add(convertReference(t2));
  end;
  if (src.questionnaire <> nil) then
    tgt.questionnaireElement := convertReferenceToCanonical(src.questionnaire);

  tgt.status := convertQuestionnaireResponseStatus(src.status);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.context <> nil) then
    tgt.encounter := convertReference(src.context);

  tgt.authored := src.authored.link;

  if (src.author <> nil) then
    tgt.author := convertReference(src.author);

  if (src.source <> nil) then
    tgt.source := convertReference(src.source);

  for t3 in src.itemList do
  begin
    tgt.itemList.add(convertQuestionnaireResponseItemComponent(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireResponse(src : FHIR.R4.Resources.TFhirQuestionnaireResponse) : FHIR.R3.Resources.TFhirQuestionnaireResponse;
var
  tgt : FHIR.R3.Resources.TFhirQuestionnaireResponse;
  t1 : FHIR.R4.Types.TFhirReference;
  t2 : FHIR.R4.Types.TFhirReference;
  t3 : FHIR.R4.Resources.TFhirQuestionnaireResponseItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirQuestionnaireResponse.Create();
  try
  copyDomainResource(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  for t1 in src.basedOnList do
  begin
    tgt.basedOnList.add(convertReference(t1));
  end;
  for t2 in src.partOfList do
  begin
    tgt.parentList.add(convertReference(t2));
  end;
  if (src.questionnaire <> '') then
    tgt.questionnaire := convertCanonicalToReference(src.questionnaireElement);

  tgt.status := convertQuestionnaireResponseStatus(src.status);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.encounter <> nil) then
    tgt.context := convertReference(src.encounter);

  tgt.authored := src.authored.link;

  if (src.author <> nil) then
    tgt.author := convertReference(src.author);

  if (src.source <> nil) then
    tgt.source := convertReference(src.source);

  for t3 in src.itemList do
  begin
    tgt.itemList.add(convertQuestionnaireResponseItemComponent(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireResponseItemComponent(src : FHIR.R3.Resources.TFhirQuestionnaireResponseItem) : FHIR.R4.Resources.TFhirQuestionnaireResponseItem;
var
  tgt : FHIR.R4.Resources.TFhirQuestionnaireResponseItem;
  t1 : FHIR.R3.Resources.TFhirQuestionnaireResponseItemAnswer;
  t2 : FHIR.R3.Resources.TFhirQuestionnaireResponseItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirQuestionnaireResponseItem.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.linkId <> '') then
    tgt.linkId := src.linkId;

  if (src.definition <> '') then
    tgt.definition := src.definition;

  if (src.text <> '') then
    tgt.text := src.text;

//  if (src.subject <> nil) then
//    tgt.subject := convertReference(src.subject);

  for t1 in src.answerList do
  begin
    tgt.answerList.add(convertQuestionnaireResponseItemAnswerComponent(t1));
  end;
  for t2 in src.itemList do
  begin
    tgt.itemList.add(convertQuestionnaireResponseItemComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireResponseItemComponent(src : FHIR.R4.Resources.TFhirQuestionnaireResponseItem) : FHIR.R3.Resources.TFhirQuestionnaireResponseItem;
var
  tgt : FHIR.R3.Resources.TFhirQuestionnaireResponseItem;
  t1 : FHIR.R4.Resources.TFhirQuestionnaireResponseItemAnswer;
  t2 : FHIR.R4.Resources.TFhirQuestionnaireResponseItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirQuestionnaireResponseItem.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.linkId <> '') then
    tgt.linkId := src.linkId;

  if (src.definition <> '') then
    tgt.definition := src.definition;

  if (src.text <> '') then
    tgt.text := src.text;

//  if (src.subject <> nil) then
//    tgt.subject := convertReference(src.subject);

  for t1 in src.answerList do
  begin
    tgt.answerList.add(convertQuestionnaireResponseItemAnswerComponent(t1));
  end;
  for t2 in src.itemList do
  begin
    tgt.itemList.add(convertQuestionnaireResponseItemComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireResponseItemAnswerComponent(src : FHIR.R3.Resources.TFhirQuestionnaireResponseItemAnswer) : FHIR.R4.Resources.TFhirQuestionnaireResponseItemAnswer;
var
  tgt : FHIR.R4.Resources.TFhirQuestionnaireResponseItemAnswer;
  t : FHIR.R3.Resources.TFhirQuestionnaireResponseItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirQuestionnaireResponseItemAnswer.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  for t in src.itemList do
  begin
    tgt.itemList.add(convertQuestionnaireResponseItemComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertQuestionnaireResponseItemAnswerComponent(src : FHIR.R4.Resources.TFhirQuestionnaireResponseItemAnswer) : FHIR.R3.Resources.TFhirQuestionnaireResponseItemAnswer;
var
  tgt : FHIR.R3.Resources.TFhirQuestionnaireResponseItemAnswer;
  t : FHIR.R4.Resources.TFhirQuestionnaireResponseItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirQuestionnaireResponseItemAnswer.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  for t in src.itemList do
  begin
    tgt.itemList.add(convertQuestionnaireResponseItemComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertRiskAssessment(src : FHIR.R3.Resources.TFhirRiskAssessment) : FHIR.R4.Resources.TFhirRiskAssessment;
var
  tgt : FHIR.R4.Resources.TFhirRiskAssessment;
  t1 : FHIR.R4.Types.TFhirType;
  t2 : FHIR.R3.Types.TFhirReference;
  t3 : FHIR.R3.Resources.TFhirRiskAssessmentPrediction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirRiskAssessment.Create();
  try
  copyDomainResource(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifierList.add(convertIdentifier(src.Identifier));

  if (src.basedOn <> nil) then
    tgt.basedOn := convertReference(src.basedOn);

  if (src.parent <> nil) then
    tgt.parent := convertReference(src.parent);

  tgt.status := convertRiskAssessmentStatus(src.status);

  if (src.method <> nil) then
    tgt.method := convertCodeableConcept(src.method);

  tgt.code := convertCodeableConcept(src.code);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.context <> nil) then
    tgt.encounter := convertReference(src.context);

  if (src.occurrence <> nil) then
    tgt.occurrence := convertType(src.occurrence);

  if (src.condition <> nil) then
    tgt.condition := convertReference(src.condition);

  if (src.performer <> nil) then
    tgt.performer := convertReference(src.performer);

  if (src.reason <> nil) then
  begin
    t1 := convertType(src.Reason);
    if (t1 is FHIR.R4.Types.TFHIRCodeableConcept) then
      tgt.reasonCodeList.add(t1)
    else
      tgt.reasonReferenceList.add(t1);
  end;

  for t2 in src.basisList do
  begin
    tgt.basisList.add(convertReference(t2));
  end;
  for t3 in src.predictionList do
  begin
    tgt.predictionList.add(convertRiskAssessmentPredictionComponent(t3));
  end;
  if (src.mitigation <> '') then
    tgt.mitigation := src.mitigation;

  if (src.comment <> '') then
    tgt.NoteList.append.text := src.comment;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertRiskAssessment(src : FHIR.R4.Resources.TFhirRiskAssessment) : FHIR.R3.Resources.TFhirRiskAssessment;
var
  tgt : FHIR.R3.Resources.TFhirRiskAssessment;
  t1 : FHIR.R4.Types.TFhirReference;
  t2 : FHIR.R4.Resources.TFhirRiskAssessmentPrediction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirRiskAssessment.Create();
  try
  copyDomainResource(src, tgt);
  if (src.identifierList.count > 0) then
    tgt.identifier := convertIdentifier(src.identifierList[0]);

  if (src.basedOn <> nil) then
    tgt.basedOn := convertReference(src.basedOn);

  if (src.parent <> nil) then
    tgt.parent := convertReference(src.parent);

  tgt.status := convertRiskAssessmentStatus(src.status);

  if (src.method <> nil) then
    tgt.method := convertCodeableConcept(src.method);

  tgt.code := convertCodeableConcept(src.code);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  if (src.encounter <> nil) then
    tgt.context := convertReference(src.encounter);

  if (src.occurrence <> nil) then
    tgt.occurrence := convertType(src.occurrence);

  if (src.condition <> nil) then
    tgt.condition := convertReference(src.condition);

  if (src.performer <> nil) then
    tgt.performer := convertReference(src.performer);

  if (src.reasonCodeList.count > 0) then
    tgt.reason := convertType(src.reasonCodeList[0]);

  if (src.reasonReferenceList.count > 0) then
    tgt.reason := convertType(src.reasonReferenceList[0]);

  for t1 in src.basisList do
  begin
    tgt.basisList.add(convertReference(t1));
  end;
  for t2 in src.predictionList do
  begin
    tgt.predictionList.add(convertRiskAssessmentPredictionComponent(t2));
  end;
  if (src.mitigation <> '') then
    tgt.mitigation := src.mitigation;

  if (src.NoteList.count > 0) then
    tgt.comment := src.NoteList[0].text;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertRiskAssessmentPredictionComponent(src : FHIR.R3.Resources.TFhirRiskAssessmentPrediction) : FHIR.R4.Resources.TFhirRiskAssessmentPrediction;
var
  tgt : FHIR.R4.Resources.TFhirRiskAssessmentPrediction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirRiskAssessmentPrediction.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.outcome := convertCodeableConcept(src.outcome);

  if (src.probability <> nil) then
    tgt.probability := convertType(src.probability);

  if (src.qualitativeRisk <> nil) then
    tgt.qualitativeRisk := convertCodeableConcept(src.qualitativeRisk);

  tgt.relativeRisk := src.relativeRisk;

  if (src.when <> nil) then
    tgt.when := convertType(src.when);

  if (src.rationale <> '') then
    tgt.rationale := src.rationale;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertRiskAssessmentPredictionComponent(src : FHIR.R4.Resources.TFhirRiskAssessmentPrediction) : FHIR.R3.Resources.TFhirRiskAssessmentPrediction;
var
  tgt : FHIR.R3.Resources.TFhirRiskAssessmentPrediction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirRiskAssessmentPrediction.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.outcome := convertCodeableConcept(src.outcome);

  if (src.probability <> nil) then
    tgt.probability := convertType(src.probability);

  if (src.qualitativeRisk <> nil) then
    tgt.qualitativeRisk := convertCodeableConcept(src.qualitativeRisk);

  tgt.relativeRisk := src.relativeRisk;

  if (src.when <> nil) then
    tgt.when := convertType(src.when);

  if (src.rationale <> '') then
    tgt.rationale := src.rationale;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSchedule(src : FHIR.R3.Resources.TFhirSchedule) : FHIR.R4.Resources.TFhirSchedule;
var
  tgt : FHIR.R4.Resources.TFhirSchedule;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSchedule.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  if (src.serviceCategory <> nil) then
    tgt.serviceCategoryList.add(convertCodeableConcept(src.ServiceCategory));

  for t2 in src.serviceTypeList do
  begin
    tgt.serviceTypeList.add(convertCodeableConcept(t2));
  end;
  for t3 in src.specialtyList do
  begin
    tgt.specialtyList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.actorList do
  begin
    tgt.actorList.add(convertReference(t4));
  end;
  if (src.planningHorizon <> nil) then
    tgt.planningHorizon := convertPeriod(src.planningHorizon);

  if (src.comment <> '') then
    tgt.comment := src.comment;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSchedule(src : FHIR.R4.Resources.TFhirSchedule) : FHIR.R3.Resources.TFhirSchedule;
var
  tgt : FHIR.R3.Resources.TFhirSchedule;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirCodeableConcept;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSchedule.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.active := src.active;

  if (src.serviceCategoryList.count > 0) then
    tgt.serviceCategory := convertCodeableConcept(src.serviceCategoryList[0]);

  for t2 in src.serviceTypeList do
  begin
    tgt.serviceTypeList.add(convertCodeableConcept(t2));
  end;
  for t3 in src.specialtyList do
  begin
    tgt.specialtyList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.actorList do
  begin
    tgt.actorList.add(convertReference(t4));
  end;
  if (src.planningHorizon <> nil) then
    tgt.planningHorizon := convertPeriod(src.planningHorizon);

  if (src.comment <> '') then
    tgt.comment := src.comment;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSearchParameter(src : FHIR.R3.Resources.TFhirSearchParameter) : FHIR.R4.Resources.TFhirSearchParameter;
var
  tgt : FHIR.R4.Resources.TFhirSearchParameter;
  t1 : FHIR.R3.Types.TFhirContactDetail;
  t2 : FHIR.R3.Types.TFhirUsageContext;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t5 : FHIR.R3.Types.TFhirCode;
  t6 : FHIR.R3.Types.TFhirSearchComparatorEnum;
  a1: FHIR.R4.Types.TFhirSearchComparatorEnumList;
  t7 : FHIR.R3.Types.TFhirSearchModifierCodeEnum;
  a2: FHIR.R4.Types.TFhirSearchModifierCodeEnumList;
  t8 : FHIR.R3.Types.TFhirString;
  t9 : FHIR.R3.Resources.TFhirSearchParameterComponent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSearchParameter.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.code <> '') then
    tgt.code := src.code;

    // todo:
{
  for t4 in src.baseList do
  begin
    tgt.baseList.add(convertCode(t4));
  end;
  }
  tgt.type_ := convertSearchParamType(src.type_);

  if (src.derivedFrom <> '') then
    tgt.derivedFrom := src.derivedFrom;

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.expression <> '') then
    tgt.expression := src.expression;

  if (src.xpath <> '') then
    tgt.xpath := src.xpath;

  tgt.xpathUsage := convertXPathUsageType(src.xpathUsage);

  //todo
  {
  for t5 in src.targetList do
  begin
    tgt.targetList.add(convertCode(t5));
  end;
  }
  a1 := [];
  for t6 := low(FHIR.R3.Types.TFhirSearchComparatorEnum) to high(FHIR.R3.Types.TFhirSearchComparatorEnum) do
    if t6 in src.comparator then
      a1 := a1 + [];
  tgt.comparator := a1;

  a2 := [];
  for t7 := low(FHIR.R3.Types.TFhirSearchModifierCodeEnum) to high(FHIR.R3.Types.TFhirSearchModifierCodeEnum) do
    if t7 in src.modifier then
      a2 := a2 + [];
  tgt.modifier := a2;

  for t8 in src.chainList do
  begin
    tgt.chainList.add(convertString(t8));
  end;
  for t9 in src.componentList do
  begin
    tgt.componentList.add(convertSearchParameterComponentComponent(t9));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSearchParameter(src : FHIR.R4.Resources.TFhirSearchParameter) : FHIR.R3.Resources.TFhirSearchParameter;
var
  tgt : FHIR.R3.Resources.TFhirSearchParameter;
  t1 : FHIR.R4.Types.TFhirContactDetail;
  t2 : FHIR.R4.Types.TFhirUsageContext;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t6 : FHIR.R4.Types.TFhirSearchComparatorEnum;
  a1: FHIR.R3.Types.TFhirSearchComparatorEnumList;
  t7 : FHIR.R4.Types.TFhirSearchModifierCodeEnum;
  a2: FHIR.R3.Types.TFhirSearchModifierCodeEnumList;
  t8 : FHIR.R4.Types.TFhirString;
  t9 : FHIR.R4.Resources.TFhirSearchParameterComponent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSearchParameter.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t1));
  end;
  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.code <> '') then
    tgt.code := src.code;

    // todo:
    {
  for t in src.baseList do
  begin
    tgt.baseList.add(convertCode(t));
  end;
  }
  tgt.type_ := convertSearchParamType(src.type_);

  if (src.derivedFrom <> '') then
    tgt.derivedFrom := src.derivedFrom;

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.expression <> '') then
    tgt.expression := src.expression;

  if (src.xpath <> '') then
    tgt.xpath := src.xpath;

  tgt.xpathUsage := convertXPathUsageType(src.xpathUsage);

    // todo:
    {
  for t4 in src.targetList do
  begin
    tgt.targetList.add(convertCode(t4));
  end;
  }
  a1 := [];
  for t6 := low(FHIR.R4.Types.TFhirSearchComparatorEnum) to high(FHIR.R4.Types.TFhirSearchComparatorEnum) do
    if t6 in src.comparator then
      a1 := a1 + [];
  tgt.comparator := a1;

  a2 := [];
  for t7 := low(FHIR.R4.Types.TFhirSearchModifierCodeEnum) to high(FHIR.R4.Types.TFhirSearchModifierCodeEnum) do
    if t7 in src.modifier then
      a2 := a2 + [];
  tgt.modifier := a2;
  for t8 in src.chainList do
  begin
    tgt.chainList.add(convertString(t8));
  end;
  for t9 in src.componentList do
  begin
    tgt.componentList.add(convertSearchParameterComponentComponent(t9));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSearchParameterComponentComponent(src : FHIR.R3.Resources.TFhirSearchParameterComponent) : FHIR.R4.Resources.TFhirSearchParameterComponent;
var
  tgt : FHIR.R4.Resources.TFhirSearchParameterComponent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSearchParameterComponent.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.definition <> nil) then
    tgt.definitionElement := convertReferenceToCanonical(src.definition);

  if (src.expression <> '') then
    tgt.expression := src.expression;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSearchParameterComponentComponent(src : FHIR.R4.Resources.TFhirSearchParameterComponent) : FHIR.R3.Resources.TFhirSearchParameterComponent;
var
  tgt : FHIR.R3.Resources.TFhirSearchParameterComponent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSearchParameterComponent.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.definition <> '') then
    tgt.definition := convertCanonicalToReference(src.definitionElement);

  if (src.expression <> '') then
    tgt.expression := src.expression;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

function convertSequenceType(src : String) : FHIR.R4.Types.TFhirSequenceTypeEnum;
var
  i : integer;
begin
  i := StringArrayIndexOfSensitive(FHIR.R4.Types.CODES_TFhirSequenceTypeEnum, src);
  if i = -1 then
    result := SequenceTypeNull
  else
    result := FHIR.R4.Types.TFhirSequenceTypeEnum(i);
end;

class function TVersionConvertor_30_40.convertSequence(src : FHIR.R3.Resources.TFhirSequence) : FHIR.R4.Resources.TFhirMolecularSequence;
var
  tgt : FHIR.R4.Resources.TFhirMolecularSequence;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Resources.TFhirSequenceVariant;
  t3 : FHIR.R3.Resources.TFhirSequenceQuality;
  t4 : FHIR.R3.Resources.TFhirSequenceRepository;
  t5 : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMolecularSequence.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.type_ := convertSequenceType(src.type_);

  tgt.coordinateSystem := src.coordinateSystem;

  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  if (src.specimen <> nil) then
    tgt.specimen := convertReference(src.specimen);

  if (src.device <> nil) then
    tgt.device := convertReference(src.device);

  if (src.performer <> nil) then
    tgt.performer := convertReference(src.performer);

  if (src.quantity <> nil) then
    tgt.quantity := convertQuantity(src.quantity);

  if (src.referenceSeq <> nil) then
    tgt.referenceSeq := convertSequenceReferenceSeqComponent(src.referenceSeq);

  for t2 in src.variantList do
  begin
    tgt.variantList.add(convertSequenceVariantComponent(t2));
  end;
  if (src.observedSeq <> '') then
    tgt.observedSeq := src.observedSeq;

  for t3 in src.qualityList do
  begin
    tgt.qualityList.add(convertSequenceQualityComponent(t3));
  end;
  tgt.readCoverage := src.readCoverage;

  for t4 in src.repositoryList do
  begin
    tgt.repositoryList.add(convertSequenceRepositoryComponent(t4));
  end;
  for t5 in src.pointerList do
  begin
    tgt.pointerList.add(convertReference(t5));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSequence(src : FHIR.R4.Resources.TFhirMolecularSequence) : FHIR.R3.Resources.TFhirSequence;
var
  tgt : FHIR.R3.Resources.TFhirSequence;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Resources.TFhirMolecularSequenceVariant;
  t3 : FHIR.R4.Resources.TFhirMolecularSequenceQuality;
  t4 : FHIR.R4.Resources.TFhirMolecularSequenceRepository;
  t5 : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSequence.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.type_ := FHIR.R4.Types.CODES_TFhirSequenceTypeEnum[src.type_];

  tgt.coordinateSystem := src.coordinateSystem;

  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  if (src.specimen <> nil) then
    tgt.specimen := convertReference(src.specimen);

  if (src.device <> nil) then
    tgt.device := convertReference(src.device);

  if (src.performer <> nil) then
    tgt.performer := convertReference(src.performer);

  if (src.quantity <> nil) then
    tgt.quantity := convertQuantity(src.quantity);

  if (src.referenceSeq <> nil) then
    tgt.referenceSeq := convertSequenceReferenceSeqComponent(src.referenceSeq);

  for t2 in src.variantList do
  begin
    tgt.variantList.add(convertSequenceVariantComponent(t2));
  end;
  if (src.observedSeq <> '') then
    tgt.observedSeq := src.observedSeq;

  for t3 in src.qualityList do
  begin
    tgt.qualityList.add(convertSequenceQualityComponent(t3));
  end;
  tgt.readCoverage := src.readCoverage;

  for t4 in src.repositoryList do
  begin
    tgt.repositoryList.add(convertSequenceRepositoryComponent(t4));
  end;
  for t5 in src.pointerList do
  begin
    tgt.pointerList.add(convertReference(t5));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSequenceReferenceSeqComponent(src : FHIR.R3.Resources.TFhirSequenceReferenceSeq) : FHIR.R4.Resources.TFhirMolecularSequenceReferenceSeq;
var
  tgt : FHIR.R4.Resources.TFhirMolecularSequenceReferenceSeq;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMolecularSequenceReferenceSeq.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.chromosome <> nil) then
    tgt.chromosome := convertCodeableConcept(src.chromosome);

  if (src.genomeBuild <> '') then
    tgt.genomeBuild := src.genomeBuild;

  if (src.referenceSeqId <> nil) then
    tgt.referenceSeqId := convertCodeableConcept(src.referenceSeqId);

  if (src.referenceSeqPointer <> nil) then
    tgt.referenceSeqPointer := convertReference(src.referenceSeqPointer);

  if (src.referenceSeqString <> '') then
    tgt.referenceSeqString := src.referenceSeqString;

  tgt.windowStart := src.windowStart;

  tgt.windowEnd := src.windowEnd;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSequenceReferenceSeqComponent(src : FHIR.R4.Resources.TFhirMolecularSequenceReferenceSeq) : FHIR.R3.Resources.TFhirSequenceReferenceSeq;
var
  tgt : FHIR.R3.Resources.TFhirSequenceReferenceSeq;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSequenceReferenceSeq.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.chromosome <> nil) then
    tgt.chromosome := convertCodeableConcept(src.chromosome);

  if (src.genomeBuild <> '') then
    tgt.genomeBuild := src.genomeBuild;

  if (src.referenceSeqId <> nil) then
    tgt.referenceSeqId := convertCodeableConcept(src.referenceSeqId);

  if (src.referenceSeqPointer <> nil) then
    tgt.referenceSeqPointer := convertReference(src.referenceSeqPointer);

  if (src.referenceSeqString <> '') then
    tgt.referenceSeqString := src.referenceSeqString;

  tgt.windowStart := src.windowStart;

  tgt.windowEnd := src.windowEnd;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSequenceVariantComponent(src : FHIR.R3.Resources.TFhirSequenceVariant) : FHIR.R4.Resources.TFhirMolecularSequenceVariant;
var
  tgt : FHIR.R4.Resources.TFhirMolecularSequenceVariant;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMolecularSequenceVariant.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.start := src.start;

  tgt.end_ := src.end_;

  if (src.observedAllele <> '') then
    tgt.observedAllele := src.observedAllele;

  if (src.referenceAllele <> '') then
    tgt.referenceAllele := src.referenceAllele;

  if (src.cigar <> '') then
    tgt.cigar := src.cigar;

  if (src.variantPointer <> nil) then
    tgt.variantPointer := convertReference(src.variantPointer);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSequenceVariantComponent(src : FHIR.R4.Resources.TFhirMolecularSequenceVariant) : FHIR.R3.Resources.TFhirSequenceVariant;
var
  tgt : FHIR.R3.Resources.TFhirSequenceVariant;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSequenceVariant.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.start := src.start;

  tgt.end_ := src.end_;

  if (src.observedAllele <> '') then
    tgt.observedAllele := src.observedAllele;

  if (src.referenceAllele <> '') then
    tgt.referenceAllele := src.referenceAllele;

  if (src.cigar <> '') then
    tgt.cigar := src.cigar;

  if (src.variantPointer <> nil) then
    tgt.variantPointer := convertReference(src.variantPointer);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSequenceQualityComponent(src : FHIR.R3.Resources.TFhirSequenceQuality) : FHIR.R4.Resources.TFhirMolecularSequenceQuality;
var
  tgt : FHIR.R4.Resources.TFhirMolecularSequenceQuality;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMolecularSequenceQuality.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertQualityType(src.type_);

  if (src.standardSequence <> nil) then
    tgt.standardSequence := convertCodeableConcept(src.standardSequence);

  tgt.start := src.start;

  tgt.end_ := src.end_;

  tgt.score := convertQuantity(src.score);

  if (src.method <> nil) then
    tgt.method := convertCodeableConcept(src.method);

  tgt.truthTP := src.truthTP;

  tgt.queryTP := src.queryTP;
  tgt.truthFN := src.truthFN;
  tgt.queryFP := src.queryFP;
  tgt.gtFP := src.gtFP;
  tgt.precision := src.precision;
  tgt.recall := src.recall;
  tgt.fScore_ := src.fScore_;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSequenceQualityComponent(src : FHIR.R4.Resources.TFhirMolecularSequenceQuality) : FHIR.R3.Resources.TFhirSequenceQuality;
var
  tgt : FHIR.R3.Resources.TFhirSequenceQuality;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSequenceQuality.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertQualityType(src.type_);

  if (src.standardSequence <> nil) then
    tgt.standardSequence := convertCodeableConcept(src.standardSequence);

  tgt.start := src.start;

  tgt.end_ := src.end_;

  tgt.score := convertQuantity(src.score);

  if (src.method <> nil) then
    tgt.method := convertCodeableConcept(src.method);

  tgt.truthTP := src.truthTP;
  tgt.queryTP := src.queryTP;
  tgt.truthFN := src.truthFN;
  tgt.queryFP := src.queryFP;
  tgt.gtFP := src.gtFP;
  tgt.precision := src.precision;
  tgt.recall := src.recall;
  tgt.fScore_ := src.fScore_;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSequenceRepositoryComponent(src : FHIR.R3.Resources.TFhirSequenceRepository) : FHIR.R4.Resources.TFhirMolecularSequenceRepository;
var
  tgt : FHIR.R4.Resources.TFhirMolecularSequenceRepository;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirMolecularSequenceRepository.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertRepositoryType(src.type_);

  if (src.url <> '') then
    tgt.url := src.url;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.datasetId <> '') then
    tgt.datasetId := src.datasetId;

  if (src.variantsetId <> '') then
    tgt.variantsetId := src.variantsetId;

  if (src.readsetId <> '') then
    tgt.readsetId := src.readsetId;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSequenceRepositoryComponent(src : FHIR.R4.Resources.TFhirMolecularSequenceRepository) : FHIR.R3.Resources.TFhirSequenceRepository;
var
  tgt : FHIR.R3.Resources.TFhirSequenceRepository;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSequenceRepository.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertRepositoryType(src.type_);

  if (src.url <> '') then
    tgt.url := src.url;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.datasetId <> '') then
    tgt.datasetId := src.datasetId;

  if (src.variantsetId <> '') then
    tgt.variantsetId := src.variantsetId;

  if (src.readsetId <> '') then
    tgt.readsetId := src.readsetId;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSlot(src : FHIR.R3.Resources.TFhirSlot) : FHIR.R4.Resources.TFhirSlot;
var
  tgt : FHIR.R4.Resources.TFhirSlot;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSlot.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.serviceCategory <> nil) then
    tgt.serviceCategoryList.add(convertCodeableConcept(src.ServiceCategory));

  for t2 in src.serviceTypeList do
  begin
    tgt.serviceTypeList.add(convertCodeableConcept(t2));
  end;
  for t3 in src.specialtyList do
  begin
    tgt.specialtyList.add(convertCodeableConcept(t3));
  end;
  if (src.appointmentType <> nil) then
    tgt.appointmentType := convertCodeableConcept(src.appointmentType);

  if (src.schedule <> nil) then
    tgt.schedule := convertReference(src.schedule);

  tgt.status := convertSlotStatus(src.status);

  tgt.start := src.start;

  tgt.end_ := src.end_;

  tgt.overbooked := src.overbooked;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSlot(src : FHIR.R4.Resources.TFhirSlot) : FHIR.R3.Resources.TFhirSlot;
var
  tgt : FHIR.R3.Resources.TFhirSlot;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirCodeableConcept;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSlot.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.serviceCategoryList.count > 0) then
    tgt.serviceCategory := convertCodeableConcept(src.serviceCategoryList[0]);

  for t2 in src.serviceTypeList do
  begin
    tgt.serviceTypeList.add(convertCodeableConcept(t2));
  end;
  for t3 in src.specialtyList do
  begin
    tgt.specialtyList.add(convertCodeableConcept(t3));
  end;
  if (src.appointmentType <> nil) then
    tgt.appointmentType := convertCodeableConcept(src.appointmentType);

  if (src.schedule <> nil) then
    tgt.schedule := convertReference(src.schedule);

  tgt.status := convertSlotStatus(src.status);

  tgt.start := src.start;

  tgt.end_ := src.end_;

  tgt.overbooked := src.overbooked;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSpecimen(src : FHIR.R3.Resources.TFhirSpecimen) : FHIR.R4.Resources.TFhirSpecimen;
var
  tgt : FHIR.R4.Resources.TFhirSpecimen;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirReference;
  t3 : FHIR.R3.Types.TFhirReference;
  t4 : FHIR.R3.Resources.TFhirSpecimenProcessing;
  t5 : FHIR.R3.Resources.TFhirSpecimenContainer;
  t6 : FHIR.R3.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSpecimen.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.accessionIdentifier <> nil) then
    tgt.accessionIdentifier := convertIdentifier(src.accessionIdentifier);

  tgt.status := convertSpecimenStatus(src.status);

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  tgt.receivedTime := src.receivedTime.link;

  for t2 in src.parentList do
  begin
    tgt.parentList.add(convertReference(t2));
  end;
  for t3 in src.requestList do
  begin
    tgt.requestList.add(convertReference(t3));
  end;
  if (src.collection <> nil) then
    tgt.collection := convertSpecimenCollectionComponent(src.collection);

  for t4 in src.processingList do
  begin
    tgt.processingList.add(convertSpecimenProcessingComponent(t4));
  end;
  for t5 in src.containerList do
  begin
    tgt.containerList.add(convertSpecimenContainerComponent(t5));
  end;
  for t6 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t6));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSpecimen(src : FHIR.R4.Resources.TFhirSpecimen) : FHIR.R3.Resources.TFhirSpecimen;
var
  tgt : FHIR.R3.Resources.TFhirSpecimen;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirReference;
  t3 : FHIR.R4.Types.TFhirReference;
  t4 : FHIR.R4.Resources.TFhirSpecimenProcessing;
  t5 : FHIR.R4.Resources.TFhirSpecimenContainer;
  t6 : FHIR.R4.Types.TFhirAnnotation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSpecimen.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.accessionIdentifier <> nil) then
    tgt.accessionIdentifier := convertIdentifier(src.accessionIdentifier);

  tgt.status := convertSpecimenStatus(src.status);

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.subject <> nil) then
    tgt.subject := convertReference(src.subject);

  tgt.receivedTime := src.receivedTime.link;

  for t2 in src.parentList do
  begin
    tgt.parentList.add(convertReference(t2));
  end;
  for t3 in src.requestList do
  begin
    tgt.requestList.add(convertReference(t3));
  end;
  if (src.collection <> nil) then
    tgt.collection := convertSpecimenCollectionComponent(src.collection);

  for t4 in src.processingList do
  begin
    tgt.processingList.add(convertSpecimenProcessingComponent(t4));
  end;
  for t5 in src.containerList do
  begin
    tgt.containerList.add(convertSpecimenContainerComponent(t5));
  end;
  for t6 in src.noteList do
  begin
    tgt.noteList.add(convertAnnotation(t6));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSpecimenCollectionComponent(src : FHIR.R3.Resources.TFhirSpecimenCollection) : FHIR.R4.Resources.TFhirSpecimenCollection;
var
  tgt : FHIR.R4.Resources.TFhirSpecimenCollection;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSpecimenCollection.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.collector <> nil) then
    tgt.collector := convertReference(src.collector);

  if (src.collected <> nil) then
    tgt.collected := convertType(src.collected);

  if (src.quantity <> nil) then
    tgt.quantity := convertSimpleQuantity(src.quantity);

  if (src.method <> nil) then
    tgt.method := convertCodeableConcept(src.method);

  if (src.bodySite <> nil) then
    tgt.bodySite := convertCodeableConcept(src.bodySite);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSpecimenCollectionComponent(src : FHIR.R4.Resources.TFhirSpecimenCollection) : FHIR.R3.Resources.TFhirSpecimenCollection;
var
  tgt : FHIR.R3.Resources.TFhirSpecimenCollection;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSpecimenCollection.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.collector <> nil) then
    tgt.collector := convertReference(src.collector);

  if (src.collected <> nil) then
    tgt.collected := convertType(src.collected);

  if (src.quantity <> nil) then
    tgt.quantity := convertSimpleQuantity(src.quantity);

  if (src.method <> nil) then
    tgt.method := convertCodeableConcept(src.method);

  if (src.bodySite <> nil) then
    tgt.bodySite := convertCodeableConcept(src.bodySite);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSpecimenProcessingComponent(src : FHIR.R3.Resources.TFhirSpecimenProcessing) : FHIR.R4.Resources.TFhirSpecimenProcessing;
var
  tgt : FHIR.R4.Resources.TFhirSpecimenProcessing;
  t : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSpecimenProcessing.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.description <> '') then
    tgt.description := src.description;

  if (src.procedure_ <> nil) then
    tgt.procedure_ := convertCodeableConcept(src.procedure_);

  for t in src.additiveList do
  begin
    tgt.additiveList.add(convertReference(t));
  end;
  if (src.time <> nil) then
    tgt.time := convertType(src.time);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSpecimenProcessingComponent(src : FHIR.R4.Resources.TFhirSpecimenProcessing) : FHIR.R3.Resources.TFhirSpecimenProcessing;
var
  tgt : FHIR.R3.Resources.TFhirSpecimenProcessing;
  t : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSpecimenProcessing.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.description <> '') then
    tgt.description := src.description;

  if (src.procedure_ <> nil) then
    tgt.procedure_ := convertCodeableConcept(src.procedure_);

  for t in src.additiveList do
  begin
    tgt.additiveList.add(convertReference(t));
  end;
  if (src.time <> nil) then
    tgt.time := convertType(src.time);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSpecimenContainerComponent(src : FHIR.R3.Resources.TFhirSpecimenContainer) : FHIR.R4.Resources.TFhirSpecimenContainer;
var
  tgt : FHIR.R4.Resources.TFhirSpecimenContainer;
  t : FHIR.R3.Types.TFhirIdentifier;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSpecimenContainer.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.capacity <> nil) then
    tgt.capacity := convertSimpleQuantity(src.capacity);

  if (src.specimenQuantity <> nil) then
    tgt.specimenQuantity := convertSimpleQuantity(src.specimenQuantity);

  if (src.additive <> nil) then
    tgt.additive := convertType(src.additive);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSpecimenContainerComponent(src : FHIR.R4.Resources.TFhirSpecimenContainer) : FHIR.R3.Resources.TFhirSpecimenContainer;
var
  tgt : FHIR.R3.Resources.TFhirSpecimenContainer;
  t : FHIR.R4.Types.TFhirIdentifier;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSpecimenContainer.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.capacity <> nil) then
    tgt.capacity := convertSimpleQuantity(src.capacity);

  if (src.specimenQuantity <> nil) then
    tgt.specimenQuantity := convertSimpleQuantity(src.specimenQuantity);

  if (src.additive <> nil) then
    tgt.additive := convertType(src.additive);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureDefinition(src : FHIR.R3.Resources.TFhirStructureDefinition) : FHIR.R4.Resources.TFhirStructureDefinition;
var
  tgt : FHIR.R4.Resources.TFhirStructureDefinition;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirContactDetail;
  t3 : FHIR.R3.Types.TFhirUsageContext;
  t4 : FHIR.R3.Types.TFhirCodeableConcept;
  t5 : FHIR.R3.Types.TFhirCoding;
  t6 : FHIR.R3.Resources.TFhirStructureDefinitionMapping;
  t7 : FHIR.R3.Types.TFhirString;
  ec : FHIR.R4.Resources.TFhirStructureDefinitionContext;
  t8 : FHIR.R3.Types.TFhirString;
  ed : FHIR.R4.Types.TFhirElementDefinition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t2 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t2));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t3 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t3));
  end;
  for t4 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t4));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  for t5 in src.keywordList do
  begin
    tgt.keywordList.add(convertCoding(t5));
  end;
  if (src.fhirVersion <> '') then
    tgt.fhirVersion := FHIR.R4.Types.TFhirFHIRVersionEnum(StringArrayIndexOfSensitive(FHIR.R4.Types.CODES_TFhirFHIRVersionEnum, src.fhirVersion));

  for t6 in src.mappingList do
  begin
    tgt.mappingList.add(convertStructureDefinitionMappingComponent(t6));
  end;
  tgt.kind := convertStructureDefinitionKind(src.kind);

  tgt.abstract := src.abstract;

  for t7 in src.contextList do
  begin
     ec := tgt.ContextList.Append;
     ec.type_ := convertExtensionContext(src.contextType);
     ec.expression := t7.value;
  end;
  for t8 in src.contextInvariantList do
  begin
    tgt.contextInvariantList.add(convertString(t8));
  end;
  if (src.type_ <> '') then
    tgt.type_ := src.type_;

  if (src.baseDefinition <> '') then
    tgt.baseDefinition := src.baseDefinition;

  tgt.derivation := convertTypeDerivationRule(src.derivation);

  if (src.snapshot <> nil) then
    tgt.snapshot := convertStructureDefinitionSnapshotComponent(src.snapshot);

  if (src.differential <> nil) then
    tgt.differential := convertStructureDefinitionDifferentialComponent(src.differential);

  if (tgt.Derivation = FHIR.R4.Types.TypeDerivationRuleSpecialization) then
  begin
    for ed in tgt.Snapshot.elementList do
    begin
      if (ed.Base = nil) then
      begin
        ed.base := FHIR.R4.Types.TFhirElementDefinitionBase.create;
        ed.Base.Path := ed.Path;
        ed.Base.Min := ed.Min;
        ed.Base.max := ed.max;
      end;
    end;
  end;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureDefinition(src : FHIR.R4.Resources.TFhirStructureDefinition) : FHIR.R3.Resources.TFhirStructureDefinition;
var
  tgt : FHIR.R3.Resources.TFhirStructureDefinition;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirContactDetail;
  t3 : FHIR.R4.Types.TFhirUsageContext;
  t4 : FHIR.R4.Types.TFhirCodeableConcept;
  t5 : FHIR.R4.Types.TFhirCoding;
  t6 : FHIR.R4.Resources.TFhirStructureDefinitionMapping;
  t7 : FHIR.R4.Resources.TFhirStructureDefinitionContext;
  t8 : FHIR.R4.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirStructureDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t2 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t2));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t3 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t3));
  end;
  for t4 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t4));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  for t5 in src.keywordList do
  begin
    tgt.keywordList.add(convertCoding(t5));
  end;
  if (src.fhirVersion <> FHIRVersionNull) then
    tgt.fhirVersion := FHIR.R4.Types.CODES_TFhirFHIRVersionEnum[src.fhirVersion];

  for t6 in src.mappingList do
  begin
    tgt.mappingList.add(convertStructureDefinitionMappingComponent(t6));
  end;
  tgt.kind := convertStructureDefinitionKind(src.kind);

  tgt.abstract := src.abstract;

  for t7 in src.contextList do
  begin
    if (tgt.ContextType <> FHIR.R3.Types.ExtensionContextNull) then
    begin
      tgt.contextType := convertExtensionContext(t7.type_);
      tgt.contextList.add(t7.expression);
    end;
  end;
  for t8 in src.contextInvariantList do
  begin
    tgt.contextInvariantList.add(convertString(t8));
  end;
  if (src.type_ <> '') then
    tgt.type_ := src.type_;

  if (src.baseDefinition <> '') then
    tgt.baseDefinition := src.baseDefinition;

  tgt.derivation := convertTypeDerivationRule(src.derivation);

  if (src.snapshot <> nil) then
    tgt.snapshot := convertStructureDefinitionSnapshotComponent(src.snapshot);

  if (src.differential <> nil) then
    tgt.differential := convertStructureDefinitionDifferentialComponent(src.differential);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureDefinitionMappingComponent(src : FHIR.R3.Resources.TFhirStructureDefinitionMapping) : FHIR.R4.Resources.TFhirStructureDefinitionMapping;
var
  tgt : FHIR.R4.Resources.TFhirStructureDefinitionMapping;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureDefinitionMapping.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.identity <> '') then
    tgt.identity := src.identity;

  if (src.uri <> '') then
    tgt.uri := src.uri;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureDefinitionMappingComponent(src : FHIR.R4.Resources.TFhirStructureDefinitionMapping) : FHIR.R3.Resources.TFhirStructureDefinitionMapping;
var
  tgt : FHIR.R3.Resources.TFhirStructureDefinitionMapping;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirStructureDefinitionMapping.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.identity <> '') then
    tgt.identity := src.identity;

  if (src.uri <> '') then
    tgt.uri := src.uri;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.comment <> '') then
    tgt.comment := src.comment;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureDefinitionSnapshotComponent(src : FHIR.R3.Resources.TFhirStructureDefinitionSnapshot) : FHIR.R4.Resources.TFhirStructureDefinitionSnapshot;
var
  tgt : FHIR.R4.Resources.TFhirStructureDefinitionSnapshot;
  t : FHIR.R3.Types.TFhirElementDefinition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureDefinitionSnapshot.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.elementList do
  begin
    tgt.elementList.add(convertElementDefinition(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureDefinitionSnapshotComponent(src : FHIR.R4.Resources.TFhirStructureDefinitionSnapshot) : FHIR.R3.Resources.TFhirStructureDefinitionSnapshot;
var
  tgt : FHIR.R3.Resources.TFhirStructureDefinitionSnapshot;
  t : FHIR.R4.Types.TFhirElementDefinition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirStructureDefinitionSnapshot.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.elementList do
  begin
    tgt.elementList.add(convertElementDefinition(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureDefinitionDifferentialComponent(src : FHIR.R3.Resources.TFhirStructureDefinitionDifferential) : FHIR.R4.Resources.TFhirStructureDefinitionDifferential;
var
  tgt : FHIR.R4.Resources.TFhirStructureDefinitionDifferential;
  t : FHIR.R3.Types.TFhirElementDefinition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureDefinitionDifferential.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.elementList do
  begin
    tgt.elementList.add(convertElementDefinition(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureDefinitionDifferentialComponent(src : FHIR.R4.Resources.TFhirStructureDefinitionDifferential) : FHIR.R3.Resources.TFhirStructureDefinitionDifferential;
var
  tgt : FHIR.R3.Resources.TFhirStructureDefinitionDifferential;
  t : FHIR.R4.Types.TFhirElementDefinition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirStructureDefinitionDifferential.Create();
  try
  copyBackboneElement(src, tgt);
  for t in src.elementList do
  begin
    tgt.elementList.add(convertElementDefinition(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMap(src : FHIR.R3.Resources.TFhirStructureMap) : FHIR.R4.Resources.TFhirStructureMap;
var
  tgt : FHIR.R4.Resources.TFhirStructureMap;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirContactDetail;
  t3 : FHIR.R3.Types.TFhirUsageContext;
  t4 : FHIR.R3.Types.TFhirCodeableConcept;
  t5 : FHIR.R3.Resources.TFhirStructureMapStructure;
  t6 : FHIR.R3.Types.TFhirUri;
  t7 : FHIR.R3.Resources.TFhirStructureMapGroup;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureMap.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t2 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t2));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t3 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t3));
  end;
  for t4 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t4));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  for t5 in src.structureList do
  begin
    tgt.structureList.add(convertStructureMapStructureComponent(t5));
  end;
  for t6 in src.importList do
  begin
    tgt.importList.add(convertUri(t6));
  end;
  for t7 in src.groupList do
  begin
    tgt.groupList.add(convertStructureMapGroupComponent(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMap(src : FHIR.R4.Resources.TFhirStructureMap) : FHIR.R3.Resources.TFhirStructureMap;
var
  tgt : FHIR.R3.Resources.TFhirStructureMap;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirContactDetail;
  t3 : FHIR.R4.Types.TFhirUsageContext;
  t4 : FHIR.R4.Types.TFhirCodeableConcept;
  t5 : FHIR.R4.Resources.TFhirStructureMapStructure;
  t6 : FHIR.R4.Types.TFhirUri;
  t7 : FHIR.R4.Resources.TFhirStructureMapGroup;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirStructureMap.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t2 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t2));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t3 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t3));
  end;
  for t4 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t4));
  end;
  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  for t5 in src.structureList do
  begin
    tgt.structureList.add(convertStructureMapStructureComponent(t5));
  end;
  for t6 in src.importList do
  begin
    tgt.importList.add(convertUri(t6));
  end;
  for t7 in src.groupList do
  begin
    tgt.groupList.add(convertStructureMapGroupComponent(t7));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapStructureComponent(src : FHIR.R3.Resources.TFhirStructureMapStructure) : FHIR.R4.Resources.TFhirStructureMapStructure;
var
  tgt : FHIR.R4.Resources.TFhirStructureMapStructure;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureMapStructure.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  tgt.mode := convertStructureMapModelMode(src.mode);

  if (src.alias <> '') then
    tgt.alias := src.alias;

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapStructureComponent(src : FHIR.R4.Resources.TFhirStructureMapStructure) : FHIR.R3.Resources.TFhirStructureMapStructure;
var
  tgt : FHIR.R3.Resources.TFhirStructureMapStructure;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirStructureMapStructure.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  tgt.mode := convertStructureMapModelMode(src.mode);

  if (src.alias <> '') then
    tgt.alias := src.alias;

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupComponent(src : FHIR.R3.Resources.TFhirStructureMapGroup) : FHIR.R4.Resources.TFhirStructureMapGroup;
var
  tgt : FHIR.R4.Resources.TFhirStructureMapGroup;
  t1 : FHIR.R3.Resources.TFhirStructureMapGroupInput;
  t2 : FHIR.R3.Resources.TFhirStructureMapGroupRule;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureMapGroup.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.extends <> '') then
    tgt.extends := src.extends;

  tgt.typeMode := convertStructureMapGroupTypeMode(src.typeMode);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  for t1 in src.inputList do
  begin
    tgt.inputList.add(convertStructureMapGroupInputComponent(t1));
  end;
  for t2 in src.ruleList do
  begin
    tgt.ruleList.add(convertStructureMapGroupRuleComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupComponent(src : FHIR.R4.Resources.TFhirStructureMapGroup) : FHIR.R3.Resources.TFhirStructureMapGroup;
var
  tgt : FHIR.R3.Resources.TFhirStructureMapGroup;
  t1 : FHIR.R4.Resources.TFhirStructureMapGroupInput;
  t2 : FHIR.R4.Resources.TFhirStructureMapGroupRule;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirStructureMapGroup.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.extends <> '') then
    tgt.extends := src.extends;

  tgt.typeMode := convertStructureMapGroupTypeMode(src.typeMode);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  for t1 in src.inputList do
  begin
    tgt.inputList.add(convertStructureMapGroupInputComponent(t1));
  end;
  for t2 in src.ruleList do
  begin
    tgt.ruleList.add(convertStructureMapGroupRuleComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupInputComponent(src : FHIR.R3.Resources.TFhirStructureMapGroupInput) : FHIR.R4.Resources.TFhirStructureMapGroupInput;
var
  tgt : FHIR.R4.Resources.TFhirStructureMapGroupInput;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureMapGroupInput.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.type_ <> '') then
    tgt.type_ := src.type_;

  tgt.mode := convertStructureMapInputMode(src.mode);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupInputComponent(src : FHIR.R4.Resources.TFhirStructureMapGroupInput) : FHIR.R3.Resources.TFhirStructureMapGroupInput;
var
  tgt : FHIR.R3.Resources.TFhirStructureMapGroupInput;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirStructureMapGroupInput.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.type_ <> '') then
    tgt.type_ := src.type_;

  tgt.mode := convertStructureMapInputMode(src.mode);

  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupRuleComponent(src : FHIR.R3.Resources.TFhirStructureMapGroupRule) : FHIR.R4.Resources.TFhirStructureMapGroupRule;
var
  tgt : FHIR.R4.Resources.TFhirStructureMapGroupRule;
  t1 : FHIR.R3.Resources.TFhirStructureMapGroupRuleSource;
  t2 : FHIR.R3.Resources.TFhirStructureMapGroupRuleTarget;
  t3 : FHIR.R3.Resources.TFhirStructureMapGroupRule;
  t4 : FHIR.R3.Resources.TFhirStructureMapGroupRuleDependent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureMapGroupRule.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  for t1 in src.sourceList do
  begin
    tgt.sourceList.add(convertStructureMapGroupRuleSourceComponent(t1));
  end;
  for t2 in src.targetList do
  begin
    tgt.targetList.add(convertStructureMapGroupRuleTargetComponent(t2));
  end;
  for t3 in src.ruleList do
  begin
    tgt.ruleList.add(convertStructureMapGroupRuleComponent(t3));
  end;
  for t4 in src.dependentList do
  begin
    tgt.dependentList.add(convertStructureMapGroupRuleDependentComponent(t4));
  end;
  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupRuleComponent(src : FHIR.R4.Resources.TFhirStructureMapGroupRule) : FHIR.R3.Resources.TFhirStructureMapGroupRule;
var
  tgt : FHIR.R3.Resources.TFhirStructureMapGroupRule;
  t1 : FHIR.R4.Resources.TFhirStructureMapGroupRuleSource;
  t2 : FHIR.R4.Resources.TFhirStructureMapGroupRuleTarget;
  t3 : FHIR.R4.Resources.TFhirStructureMapGroupRule;
  t4 : FHIR.R4.Resources.TFhirStructureMapGroupRuleDependent;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirStructureMapGroupRule.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  for t1 in src.sourceList do
  begin
    tgt.sourceList.add(convertStructureMapGroupRuleSourceComponent(t1));
  end;
  for t2 in src.targetList do
  begin
    tgt.targetList.add(convertStructureMapGroupRuleTargetComponent(t2));
  end;
  for t3 in src.ruleList do
  begin
    tgt.ruleList.add(convertStructureMapGroupRuleComponent(t3));
  end;
  for t4 in src.dependentList do
  begin
    tgt.dependentList.add(convertStructureMapGroupRuleDependentComponent(t4));
  end;
  if (src.documentation <> '') then
    tgt.documentation := src.documentation;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupRuleSourceComponent(src : FHIR.R3.Resources.TFhirStructureMapGroupRuleSource) : FHIR.R4.Resources.TFhirStructureMapGroupRuleSource;
var
  tgt : FHIR.R4.Resources.TFhirStructureMapGroupRuleSource;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureMapGroupRuleSource.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.context <> '') then
    tgt.context := src.context;

  tgt.min := src.min;

  if (src.max <> '') then
    tgt.max := src.max;

  if (src.type_ <> '') then
    tgt.type_ := src.type_;

  if (src.defaultValue <> nil) then
    tgt.defaultValue := convertType(src.defaultValue);

  if (src.element <> '') then
    tgt.element := src.element;

  tgt.listMode := convertStructureMapSourceListMode(src.listMode);

  if (src.variable <> '') then
    tgt.variable := src.variable;

  if (src.condition <> '') then
    tgt.condition := src.condition;

  if (src.check <> '') then
    tgt.check := src.check;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupRuleSourceComponent(src : FHIR.R4.Resources.TFhirStructureMapGroupRuleSource) : FHIR.R3.Resources.TFhirStructureMapGroupRuleSource;
var
  tgt : FHIR.R3.Resources.TFhirStructureMapGroupRuleSource;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirStructureMapGroupRuleSource.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.context <> '') then
    tgt.context := src.context;

  tgt.min := src.min;

  if (src.max <> '') then
    tgt.max := src.max;

  if (src.type_ <> '') then
    tgt.type_ := src.type_;

  if (src.defaultValue <> nil) then
    tgt.defaultValue := convertType(src.defaultValue);

  if (src.element <> '') then
    tgt.element := src.element;

   tgt.listMode := convertStructureMapSourceListMode(src.listMode);

  if (src.variable <> '') then
    tgt.variable := src.variable;

  if (src.condition <> '') then
    tgt.condition := src.condition;

  if (src.check <> '') then
    tgt.check := src.check;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupRuleTargetComponent(src : FHIR.R3.Resources.TFhirStructureMapGroupRuleTarget) : FHIR.R4.Resources.TFhirStructureMapGroupRuleTarget;
var
  tgt : FHIR.R4.Resources.TFhirStructureMapGroupRuleTarget;
  t1 : FHIR.R3.Types.TFhirMapTargetListModeEnum;
  a : FHIR.R4.Types.TFhirMapTargetListModeEnumList;
  t2 : FHIR.R3.Resources.TFhirStructureMapGroupRuleTargetParameter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureMapGroupRuleTarget.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.context <> '') then
    tgt.context := src.context;

  tgt.contextType := convertStructureMapContextType(src.contextType);

  if (src.element <> '') then
    tgt.element := src.element;

  if (src.variable <> '') then
    tgt.variable := src.variable;

  a := [];
  for t1 := low(FHIR.R3.Types.TFhirMapTargetListModeEnum) to high(FHIR.R3.Types.TFhirMapTargetListModeEnum) do
    if t1 in src.listMode then
      a := a + [convertStructureMapTargetListMode(t1)];
  tgt.listMode := a;

  if (src.listRuleId <> '') then
    tgt.listRuleId := src.listRuleId;

  tgt.transform := convertStructureMapTransform(src.transform);

  for t2 in src.parameterList do
  begin
    tgt.parameterList.add(convertStructureMapGroupRuleTargetParameterComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupRuleTargetComponent(src : FHIR.R4.Resources.TFhirStructureMapGroupRuleTarget) : FHIR.R3.Resources.TFhirStructureMapGroupRuleTarget;
var
  tgt : FHIR.R3.Resources.TFhirStructureMapGroupRuleTarget;
  t1 : FHIR.R4.Types.TFhirMapTargetListModeEnum;
  a : FHIR.R3.Types.TFhirMapTargetListModeEnumList;
  t2 : FHIR.R4.Resources.TFhirStructureMapGroupRuleTargetParameter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirStructureMapGroupRuleTarget.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.context <> '') then
    tgt.context := src.context;

  tgt.contextType := convertStructureMapContextType(src.contextType);

  if (src.element <> '') then
    tgt.element := src.element;

  if (src.variable <> '') then
    tgt.variable := src.variable;

  a := [];
  for t1 := low(FHIR.R4.Types.TFhirMapTargetListModeEnum) to high(FHIR.R4.Types.TFhirMapTargetListModeEnum) do
    if t1 in src.listMode then
      a := a + [convertStructureMapTargetListMode(t1)];
  tgt.listMode := a;
  if (src.listRuleId <> '') then
    tgt.listRuleId := src.listRuleId;

  tgt.transform := convertStructureMapTransform(src.transform);

  for t2 in src.parameterList do
  begin
    tgt.parameterList.add(convertStructureMapGroupRuleTargetParameterComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupRuleTargetParameterComponent(src : FHIR.R3.Resources.TFhirStructureMapGroupRuleTargetParameter) : FHIR.R4.Resources.TFhirStructureMapGroupRuleTargetParameter;
var
  tgt : FHIR.R4.Resources.TFhirStructureMapGroupRuleTargetParameter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureMapGroupRuleTargetParameter.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupRuleTargetParameterComponent(src : FHIR.R4.Resources.TFhirStructureMapGroupRuleTargetParameter) : FHIR.R3.Resources.TFhirStructureMapGroupRuleTargetParameter;
var
  tgt : FHIR.R3.Resources.TFhirStructureMapGroupRuleTargetParameter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirStructureMapGroupRuleTargetParameter.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupRuleDependentComponent(src : FHIR.R3.Resources.TFhirStructureMapGroupRuleDependent) : FHIR.R4.Resources.TFhirStructureMapGroupRuleDependent;
var
  tgt : FHIR.R4.Resources.TFhirStructureMapGroupRuleDependent;
  t : FHIR.R3.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirStructureMapGroupRuleDependent.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  for t in src.variableList do
  begin
    tgt.variableList.add(convertString(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertStructureMapGroupRuleDependentComponent(src : FHIR.R4.Resources.TFhirStructureMapGroupRuleDependent) : FHIR.R3.Resources.TFhirStructureMapGroupRuleDependent;
var
  tgt : FHIR.R3.Resources.TFhirStructureMapGroupRuleDependent;
  t : FHIR.R4.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirStructureMapGroupRuleDependent.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  for t in src.variableList do
  begin
    tgt.variableList.add(convertString(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSubscription(src : FHIR.R3.Resources.TFhirSubscription) : FHIR.R4.Resources.TFhirSubscription;
var
  tgt : FHIR.R4.Resources.TFhirSubscription;
  t1 : FHIR.R3.Types.TFhirContactPoint;
  t2 : FHIR.R3.Types.TFhirCoding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSubscription.Create();
  try
  copyDomainResource(src, tgt);
  tgt.status := convertSubscriptionStatus(src.status);

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactPoint(t1));
  end;
  tgt.end_ := src.end_;

  if (src.reason <> '') then
    tgt.reason := src.reason;

  if (src.criteria <> '') then
    tgt.criteria := src.criteria;

  if (src.error <> '') then
    tgt.error := src.error;

  if (src.channel <> nil) then
    tgt.channel := convertSubscriptionChannelComponent(src.channel);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSubscription(src : FHIR.R4.Resources.TFhirSubscription) : FHIR.R3.Resources.TFhirSubscription;
var
  tgt : FHIR.R3.Resources.TFhirSubscription;
  t1 : FHIR.R4.Types.TFhirContactPoint;
  t2 : FHIR.R4.Types.TFhirCoding;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSubscription.Create();
  try
  copyDomainResource(src, tgt);
  tgt.status := convertSubscriptionStatus(src.status);

  for t1 in src.contactList do
  begin
    tgt.contactList.add(convertContactPoint(t1));
  end;
  tgt.end_ := src.end_;

  if (src.reason <> '') then
    tgt.reason := src.reason;

  if (src.criteria <> '') then
    tgt.criteria := src.criteria;

  if (src.error <> '') then
    tgt.error := src.error;

  if (src.channel <> nil) then
    tgt.channel := convertSubscriptionChannelComponent(src.channel);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSubscriptionChannelComponent(src : FHIR.R3.Resources.TFhirSubscriptionChannel) : FHIR.R4.Resources.TFhirSubscriptionChannel;
var
  tgt : FHIR.R4.Resources.TFhirSubscriptionChannel;
  t : FHIR.R3.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSubscriptionChannel.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertSubscriptionChannelType(src.type_);

  if (src.endpoint <> '') then
    tgt.endpoint := src.endpoint;

  if (src.payload <> '') then
    tgt.payload := src.payload;

  for t in src.headerList do
  begin
    tgt.headerList.add(convertString(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSubscriptionChannelComponent(src : FHIR.R4.Resources.TFhirSubscriptionChannel) : FHIR.R3.Resources.TFhirSubscriptionChannel;
var
  tgt : FHIR.R3.Resources.TFhirSubscriptionChannel;
  t : FHIR.R4.Types.TFhirString;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSubscriptionChannel.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertSubscriptionChannelType(src.type_);

  if (src.endpoint <> '') then
    tgt.endpoint := src.endpoint;

  if (src.payload <> '') then
    tgt.payload := src.payload;

  for t in src.headerList do
  begin
    tgt.headerList.add(convertString(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSubstance(src : FHIR.R3.Resources.TFhirSubstance) : FHIR.R4.Resources.TFhirSubstance;
var
  tgt : FHIR.R4.Resources.TFhirSubstance;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
  t3 : FHIR.R3.Resources.TFhirSubstanceInstance;
  t4 : FHIR.R3.Resources.TFhirSubstanceIngredient;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSubstance.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertFHIRSubstanceStatus(src.status);

  for t2 in src.categoryList do
  begin
    tgt.categoryList.add(convertCodeableConcept(t2));
  end;
  tgt.code := convertCodeableConcept(src.code);

  if (src.description <> '') then
    tgt.description := src.description;

  for t3 in src.instanceList do
  begin
    tgt.instanceList.add(convertSubstanceInstanceComponent(t3));
  end;
  for t4 in src.ingredientList do
  begin
    tgt.ingredientList.add(convertSubstanceIngredientComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSubstance(src : FHIR.R4.Resources.TFhirSubstance) : FHIR.R3.Resources.TFhirSubstance;
var
  tgt : FHIR.R3.Resources.TFhirSubstance;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirCodeableConcept;
  t3 : FHIR.R4.Resources.TFhirSubstanceInstance;
  t4 : FHIR.R4.Resources.TFhirSubstanceIngredient;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSubstance.Create();
  try
  copyDomainResource(src, tgt);
  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  tgt.status := convertFHIRSubstanceStatus(src.status);

  for t2 in src.categoryList do
  begin
    tgt.categoryList.add(convertCodeableConcept(t2));
  end;
  tgt.code := convertCodeableConcept(src.code);

  if (src.description <> '') then
    tgt.description := src.description;

  for t3 in src.instanceList do
  begin
    tgt.instanceList.add(convertSubstanceInstanceComponent(t3));
  end;
  for t4 in src.ingredientList do
  begin
    tgt.ingredientList.add(convertSubstanceIngredientComponent(t4));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSubstanceInstanceComponent(src : FHIR.R3.Resources.TFhirSubstanceInstance) : FHIR.R4.Resources.TFhirSubstanceInstance;
var
  tgt : FHIR.R4.Resources.TFhirSubstanceInstance;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSubstanceInstance.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  tgt.expiry := src.expiry.link;

  if (src.quantity <> nil) then
    tgt.quantity := convertSimpleQuantity(src.quantity);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSubstanceInstanceComponent(src : FHIR.R4.Resources.TFhirSubstanceInstance) : FHIR.R3.Resources.TFhirSubstanceInstance;
var
  tgt : FHIR.R3.Resources.TFhirSubstanceInstance;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSubstanceInstance.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifier := convertIdentifier(src.identifier);

  tgt.expiry := src.expiry.link;

  if (src.quantity <> nil) then
    tgt.quantity := convertSimpleQuantity(src.quantity);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSubstanceIngredientComponent(src : FHIR.R3.Resources.TFhirSubstanceIngredient) : FHIR.R4.Resources.TFhirSubstanceIngredient;
var
  tgt : FHIR.R4.Resources.TFhirSubstanceIngredient;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSubstanceIngredient.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.quantity <> nil) then
    tgt.quantity := convertRatio(src.quantity);

  if (src.substance <> nil) then
    tgt.substance := convertType(src.substance);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSubstanceIngredientComponent(src : FHIR.R4.Resources.TFhirSubstanceIngredient) : FHIR.R3.Resources.TFhirSubstanceIngredient;
var
  tgt : FHIR.R3.Resources.TFhirSubstanceIngredient;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSubstanceIngredient.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.quantity <> nil) then
    tgt.quantity := convertRatio(src.quantity);

  if (src.substance <> nil) then
    tgt.substance := convertType(src.substance);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSupplyDelivery(src : FHIR.R3.Resources.TFhirSupplyDelivery) : FHIR.R4.Resources.TFhirSupplyDelivery;
var
  tgt : FHIR.R4.Resources.TFhirSupplyDelivery;
  t1 : FHIR.R3.Types.TFhirReference;
  t2 : FHIR.R3.Types.TFhirReference;
  t3 : FHIR.R3.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSupplyDelivery.Create();
  try
  copyDomainResource(src, tgt);
  if (src.identifier <> nil) then
    tgt.identifierList.add(convertIdentifier(src.Identifier));

  for t1 in src.basedOnList do
  begin
    tgt.basedOnList.add(convertReference(t1));
  end;
  for t2 in src.partOfList do
  begin
    tgt.partOfList.add(convertReference(t2));
  end;
  tgt.status := convertSupplyDeliveryStatus(src.status);

  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.suppliedItem <> nil) then
    tgt.suppliedItem := convertSupplyDeliverySuppliedItemComponent(src.suppliedItem);

  if (src.occurrence <> nil) then
    tgt.occurrence := convertType(src.occurrence);

  if (src.supplier <> nil) then
    tgt.supplier := convertReference(src.supplier);

  if (src.destination <> nil) then
    tgt.destination := convertReference(src.destination);

  for t3 in src.receiverList do
  begin
    tgt.receiverList.add(convertReference(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSupplyDelivery(src : FHIR.R4.Resources.TFhirSupplyDelivery) : FHIR.R3.Resources.TFhirSupplyDelivery;
var
  tgt : FHIR.R3.Resources.TFhirSupplyDelivery;
  t1 : FHIR.R4.Types.TFhirReference;
  t2 : FHIR.R4.Types.TFhirReference;
  t3 : FHIR.R4.Types.TFhirReference;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSupplyDelivery.Create();
  try
  copyDomainResource(src, tgt);
  if (src.identifierList.count > 0) then
    tgt.identifier := convertIdentifier(src.identifierList[0]);

  for t1 in src.basedOnList do
  begin
    tgt.basedOnList.add(convertReference(t1));
  end;
  for t2 in src.partOfList do
  begin
    tgt.partOfList.add(convertReference(t2));
  end;
  tgt.status := convertSupplyDeliveryStatus(src.status);

  if (src.patient <> nil) then
    tgt.patient := convertReference(src.patient);

  tgt.type_ := convertCodeableConcept(src.type_);

  if (src.suppliedItem <> nil) then
    tgt.suppliedItem := convertSupplyDeliverySuppliedItemComponent(src.suppliedItem);

  if (src.occurrence <> nil) then
    tgt.occurrence := convertType(src.occurrence);

  if (src.supplier <> nil) then
    tgt.supplier := convertReference(src.supplier);

  if (src.destination <> nil) then
    tgt.destination := convertReference(src.destination);

  for t3 in src.receiverList do
  begin
    tgt.receiverList.add(convertReference(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSupplyDeliverySuppliedItemComponent(src : FHIR.R3.Resources.TFhirSupplyDeliverySuppliedItem) : FHIR.R4.Resources.TFhirSupplyDeliverySuppliedItem;
var
  tgt : FHIR.R4.Resources.TFhirSupplyDeliverySuppliedItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirSupplyDeliverySuppliedItem.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.quantity <> nil) then
    tgt.quantity := convertSimpleQuantity(src.quantity);

  if (src.item <> nil) then
    tgt.item := convertType(src.item);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertSupplyDeliverySuppliedItemComponent(src : FHIR.R4.Resources.TFhirSupplyDeliverySuppliedItem) : FHIR.R3.Resources.TFhirSupplyDeliverySuppliedItem;
var
  tgt : FHIR.R3.Resources.TFhirSupplyDeliverySuppliedItem;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirSupplyDeliverySuppliedItem.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.quantity <> nil) then
    tgt.quantity := convertSimpleQuantity(src.quantity);

  if (src.item <> nil) then
    tgt.item := convertType(src.item);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertValueSet(src : FHIR.R3.Resources.TFhirValueSet) : FHIR.R4.Resources.TFhirValueSet;
var
  tgt : FHIR.R4.Resources.TFhirValueSet;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirContactDetail;
  t3 : FHIR.R3.Types.TFhirUsageContext;
  t4 : FHIR.R3.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirValueSet.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t2 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t2));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t3 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t3));
  end;
  for t4 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t4));
  end;
  tgt.immutable := src.immutable;

  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  if (src.compose <> nil) then
    tgt.compose := convertValueSetComposeComponent(src.compose);

  if (src.expansion <> nil) then
    tgt.expansion := convertValueSetExpansionComponent(src.expansion);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertValueSet(src : FHIR.R4.Resources.TFhirValueSet) : FHIR.R3.Resources.TFhirValueSet;
var
  tgt : FHIR.R3.Resources.TFhirValueSet;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirContactDetail;
  t3 : FHIR.R4.Types.TFhirUsageContext;
  t4 : FHIR.R4.Types.TFhirCodeableConcept;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirValueSet.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  for t2 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t2));
  end;
  if (src.description <> '') then
    tgt.description := src.description;

  for t3 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t3));
  end;
  for t4 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t4));
  end;
  tgt.immutable := src.immutable;

  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  if (src.compose <> nil) then
    tgt.compose := convertValueSetComposeComponent(src.compose);

  if (src.expansion <> nil) then
    tgt.expansion := convertValueSetExpansionComponent(src.expansion);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertValueSetComposeComponent(src : FHIR.R3.Resources.TFhirValueSetCompose) : FHIR.R4.Resources.TFhirValueSetCompose;
var
  tgt : FHIR.R4.Resources.TFhirValueSetCompose;
  t1 : FHIR.R3.Resources.TFhirValueSetComposeInclude;
  t2 : FHIR.R3.Resources.TFhirValueSetComposeInclude;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirValueSetCompose.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.lockedDate := src.lockedDate.link;

  tgt.inactive := src.inactive;

  for t1 in src.includeList do
  begin
    tgt.includeList.add(convertConceptSetComponent(t1));
  end;
  for t2 in src.excludeList do
  begin
    tgt.excludeList.add(convertConceptSetComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertValueSetComposeComponent(src : FHIR.R4.Resources.TFhirValueSetCompose) : FHIR.R3.Resources.TFhirValueSetCompose;
var
  tgt : FHIR.R3.Resources.TFhirValueSetCompose;
  t1 : FHIR.R4.Resources.TFhirValueSetComposeInclude;
  t2 : FHIR.R4.Resources.TFhirValueSetComposeInclude;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirValueSetCompose.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.lockedDate := src.lockedDate.link;

  tgt.inactive := src.inactive;

  for t1 in src.includeList do
  begin
    tgt.includeList.add(convertConceptSetComponent(t1));
  end;
  for t2 in src.excludeList do
  begin
    tgt.excludeList.add(convertConceptSetComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptSetComponent(src : FHIR.R3.Resources.TFhirValueSetComposeInclude) : FHIR.R4.Resources.TFhirValueSetComposeInclude;
var
  tgt : FHIR.R4.Resources.TFhirValueSetComposeInclude;
  t1 : FHIR.R3.Resources.TFhirValueSetComposeIncludeConcept;
  t2 : FHIR.R3.Resources.TFhirValueSetComposeIncludeFilter;
  t3 : FHIR.R3.Types.TFhirUri;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirValueSetComposeInclude.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.system <> '') then
    tgt.system := src.system;

  if (src.version <> '') then
    tgt.version := src.version;

  for t1 in src.conceptList do
  begin
    tgt.conceptList.add(convertConceptReferenceComponent(t1));
  end;
  for t2 in src.filterList do
  begin
    tgt.filterList.add(convertConceptSetFilterComponent(t2));
  end;
  for t3 in src.valueSetList do
  begin
    tgt.valueSetList.add(convertUri(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptSetComponent(src : FHIR.R4.Resources.TFhirValueSetComposeInclude) : FHIR.R3.Resources.TFhirValueSetComposeInclude;
var
  tgt : FHIR.R3.Resources.TFhirValueSetComposeInclude;
  t1 : FHIR.R4.Resources.TFhirValueSetComposeIncludeConcept;
  t2 : FHIR.R4.Resources.TFhirValueSetComposeIncludeFilter;
  t3 : FHIR.R4.Types.TFhirUri;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirValueSetComposeInclude.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.system <> '') then
    tgt.system := src.system;

  if (src.version <> '') then
    tgt.version := src.version;

  for t1 in src.conceptList do
  begin
    tgt.conceptList.add(convertConceptReferenceComponent(t1));
  end;
  for t2 in src.filterList do
  begin
    tgt.filterList.add(convertConceptSetFilterComponent(t2));
  end;
  for t3 in src.valueSetList do
  begin
    tgt.valueSetList.add(convertUri(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptReferenceComponent(src : FHIR.R3.Resources.TFhirValueSetComposeIncludeConcept) : FHIR.R4.Resources.TFhirValueSetComposeIncludeConcept;
var
  tgt : FHIR.R4.Resources.TFhirValueSetComposeIncludeConcept;
  t : FHIR.R3.Resources.TFhirValueSetComposeIncludeConceptDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirValueSetComposeIncludeConcept.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.code <> '') then
    tgt.code := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  for t in src.designationList do
  begin
    tgt.designationList.add(convertConceptReferenceDesignationComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptReferenceComponent(src : FHIR.R4.Resources.TFhirValueSetComposeIncludeConcept) : FHIR.R3.Resources.TFhirValueSetComposeIncludeConcept;
var
  tgt : FHIR.R3.Resources.TFhirValueSetComposeIncludeConcept;
  t : FHIR.R4.Resources.TFhirValueSetComposeIncludeConceptDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirValueSetComposeIncludeConcept.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.code <> '') then
    tgt.code := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  for t in src.designationList do
  begin
    tgt.designationList.add(convertConceptReferenceDesignationComponent(t));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptReferenceDesignationComponent(src : FHIR.R3.Resources.TFhirValueSetComposeIncludeConceptDesignation) : FHIR.R4.Resources.TFhirValueSetComposeIncludeConceptDesignation;
var
  tgt : FHIR.R4.Resources.TFhirValueSetComposeIncludeConceptDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirValueSetComposeIncludeConceptDesignation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.language <> '') then
    tgt.language := src.language;

  if (src.use <> nil) then
    tgt.use := convertCoding(src.use);

  if (src.value <> '') then
    tgt.value := src.value;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptReferenceDesignationComponent(src : FHIR.R4.Resources.TFhirValueSetComposeIncludeConceptDesignation) : FHIR.R3.Resources.TFhirValueSetComposeIncludeConceptDesignation;
var
  tgt : FHIR.R3.Resources.TFhirValueSetComposeIncludeConceptDesignation;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirValueSetComposeIncludeConceptDesignation.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.language <> '') then
    tgt.language := src.language;

  if (src.use <> nil) then
    tgt.use := convertCoding(src.use);

  if (src.value <> '') then
    tgt.value := src.value;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptSetFilterComponent(src : FHIR.R3.Resources.TFhirValueSetComposeIncludeFilter) : FHIR.R4.Resources.TFhirValueSetComposeIncludeFilter;
var
  tgt : FHIR.R4.Resources.TFhirValueSetComposeIncludeFilter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirValueSetComposeIncludeFilter.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.property_ := src.property_;
  tgt.op := convertFilterOperator(src.op);

  if (src.value <> '') then
    tgt.value := src.value;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertConceptSetFilterComponent(src : FHIR.R4.Resources.TFhirValueSetComposeIncludeFilter) : FHIR.R3.Resources.TFhirValueSetComposeIncludeFilter;
var
  tgt : FHIR.R3.Resources.TFhirValueSetComposeIncludeFilter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirValueSetComposeIncludeFilter.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.property_ := src.property_;
  tgt.op := convertFilterOperator(src.op);
  tgt.value := src.value;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertValueSetExpansionComponent(src : FHIR.R3.Resources.TFhirValueSetExpansion) : FHIR.R4.Resources.TFhirValueSetExpansion;
var
  tgt : FHIR.R4.Resources.TFhirValueSetExpansion;
  t1 : FHIR.R3.Resources.TFhirValueSetExpansionParameter;
  t2 : FHIR.R3.Resources.TFhirValueSetExpansionContains;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirValueSetExpansion.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.identifier <> '') then
    tgt.identifier := src.identifier;

  tgt.timestamp := src.timestamp.link;

  tgt.total := src.total;

  tgt.offset := src.offset;

  for t1 in src.parameterList do
  begin
    tgt.parameterList.add(convertValueSetExpansionParameterComponent(t1));
  end;
  for t2 in src.containsList do
  begin
    tgt.containsList.add(convertValueSetExpansionContainsComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertValueSetExpansionComponent(src : FHIR.R4.Resources.TFhirValueSetExpansion) : FHIR.R3.Resources.TFhirValueSetExpansion;
var
  tgt : FHIR.R3.Resources.TFhirValueSetExpansion;
  t1 : FHIR.R4.Resources.TFhirValueSetExpansionParameter;
  t2 : FHIR.R4.Resources.TFhirValueSetExpansionContains;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirValueSetExpansion.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.identifier <> '') then
    tgt.identifier := src.identifier;

  tgt.timestamp := src.timestamp.link;

  tgt.total := src.total;

  tgt.offset := src.offset;

  for t1 in src.parameterList do
  begin
    tgt.parameterList.add(convertValueSetExpansionParameterComponent(t1));
  end;
  for t2 in src.containsList do
  begin
    tgt.containsList.add(convertValueSetExpansionContainsComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertValueSetExpansionParameterComponent(src : FHIR.R3.Resources.TFhirValueSetExpansionParameter) : FHIR.R4.Resources.TFhirValueSetExpansionParameter;
var
  tgt : FHIR.R4.Resources.TFhirValueSetExpansionParameter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirValueSetExpansionParameter.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertValueSetExpansionParameterComponent(src : FHIR.R4.Resources.TFhirValueSetExpansionParameter) : FHIR.R3.Resources.TFhirValueSetExpansionParameter;
var
  tgt : FHIR.R3.Resources.TFhirValueSetExpansionParameter;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirValueSetExpansionParameter.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.name <> '') then
    tgt.name := src.name;

  if (src.value <> nil) then
    tgt.value := convertType(src.value);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertValueSetExpansionContainsComponent(src : FHIR.R3.Resources.TFhirValueSetExpansionContains) : FHIR.R4.Resources.TFhirValueSetExpansionContains;
var
  tgt : FHIR.R4.Resources.TFhirValueSetExpansionContains;
  t1 : FHIR.R3.Resources.TFhirValueSetComposeIncludeConceptDesignation;
  t2 : FHIR.R3.Resources.TFhirValueSetExpansionContains;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirValueSetExpansionContains.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.system <> '') then
    tgt.system := src.system;

  tgt.abstract := src.abstract;

  tgt.inactive := src.inactive;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.code <> '') then
    tgt.code := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  for t1 in src.designationList do
  begin
    tgt.designationList.add(convertConceptReferenceDesignationComponent(t1));
  end;
  for t2 in src.containsList do
  begin
    tgt.containsList.add(convertValueSetExpansionContainsComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertValueSetExpansionContainsComponent(src : FHIR.R4.Resources.TFhirValueSetExpansionContains) : FHIR.R3.Resources.TFhirValueSetExpansionContains;
var
  tgt : FHIR.R3.Resources.TFhirValueSetExpansionContains;
  t1 : FHIR.R4.Resources.TFhirValueSetComposeIncludeConceptDesignation;
  t2 : FHIR.R4.Resources.TFhirValueSetExpansionContains;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirValueSetExpansionContains.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.system <> '') then
    tgt.system := src.system;

  tgt.abstract := src.abstract;
  tgt.inactive := src.inactive;

  if (src.version <> '') then
    tgt.version := src.version;

  if (src.code <> '') then
    tgt.code := src.code;

  if (src.display <> '') then
    tgt.display := src.display;

  for t1 in src.designationList do
  begin
    tgt.designationList.add(convertConceptReferenceDesignationComponent(t1));
  end;
  for t2 in src.containsList do
  begin
    tgt.containsList.add(convertValueSetExpansionContainsComponent(t2));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinition(src : FHIR.R3.Resources.TFhirPlanDefinition) : FHIR.R4.Resources.TFhirPlanDefinition;
var
  tgt : FHIR.R4.Resources.TFhirPlanDefinition;
  t1 : FHIR.R3.Types.TFhirIdentifier;
  t2 : FHIR.R3.Types.TFhirUsageContext;
  t3 : FHIR.R3.Types.TFhirCodeableConcept;
  t4 : FHIR.R3.Types.TFhirCodeableConcept;
  t5 : FHIR.R3.Types.TFhirContributor;
  t6 : FHIR.R3.Types.TFhirContactDetail;
  t7 : FHIR.R3.Types.TFhirRelatedArtifact;
  t8 : FHIR.R3.Types.TFhirReference;
  t9 : FHIR.R3.Resources.TFhirPlanDefinitionGoal;
  ta : FHIR.R3.Resources.TFhirPlanDefinitionAction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPlanDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.type_ := convertCodeableConcept(src.type_);

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.usage <> '') then
    tgt.usage := src.usage;
  tgt.approvalDate := src.approvalDate;
  tgt.lastReviewDate := src.lastReviewDate;

  if (src.effectivePeriod <> nil) then
    tgt.effectivePeriod := convertPeriod(src.effectivePeriod);

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.topicList do
  begin
    tgt.topicList.add(convertCodeableConcept(t4));
  end;
  for t5 in src.contributorList do
  begin
    case t5.type_ of
      FHIR.R3.Types.ContributorTypeAuthor : for t6 in t5.contactList do tgt.authorList.Add(convertContactDetail(t6));
      FHIR.R3.Types.ContributorTypeEditor: for t6 in t5.contactList do tgt.editorList.Add(convertContactDetail(t6));
      FHIR.R3.Types.ContributorTypeReviewer: for t6 in t5.contactList do tgt.reviewerList.Add(convertContactDetail(t6));
      FHIR.R3.Types.ContributorTypeEndorser: for t6 in t5.contactList do tgt.endorserList.Add(convertContactDetail(t6));
    end;
  end;
  for t6 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t6));
  end;
  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  for t7 in src.relatedArtifactList do
  begin
    tgt.relatedArtifactList.add(convertRelatedArtifact(t7));
  end;
  for t8 in src.library_List do
  begin
    tgt.Library_List.add(convertReferenceToCanonical(t8));
  end;
  for t9 in src.goalList do
  begin
    tgt.goalList.add(convertPlanDefinitionGoalComponent(t9));
  end;
  for ta in src.actionList do
  begin
    tgt.actionList.add(convertPlanDefinitionActionComponent(ta));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinition(src : FHIR.R4.Resources.TFhirPlanDefinition) : FHIR.R3.Resources.TFhirPlanDefinition;
var
  tgt : FHIR.R3.Resources.TFhirPlanDefinition;
  t1 : FHIR.R4.Types.TFhirIdentifier;
  t2 : FHIR.R4.Types.TFhirUsageContext;
  t3 : FHIR.R4.Types.TFhirCodeableConcept;
  t4 : FHIR.R4.Types.TFhirCodeableConcept;
  t5 : FHIR.R4.Types.TFhirContactDetail;
  t6 : FHIR.R4.Types.TFhirContactDetail;
  t7 : FHIR.R4.Types.TFhirRelatedArtifact;
  t8 : FHIR.R4.Types.TFhirCanonical;
  t9 : FHIR.R4.Resources.TFhirPlanDefinitionGoal;
  ta : FHIR.R4.Resources.TFhirPlanDefinitionAction;
  tz : FHIR.R3.Types.TFhirContributor;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPlanDefinition.Create();
  try
  copyDomainResource(src, tgt);
  if (src.url <> '') then
    tgt.url := src.url;

  for t1 in src.identifierList do
  begin
    tgt.identifierList.add(convertIdentifier(t1));
  end;
  if (src.version <> '') then
    tgt.version := src.version;

  if (src.name <> '') then
    tgt.name := src.name;

  if (src.title <> '') then
    tgt.title := src.title;

  tgt.type_ := convertCodeableConcept(src.type_);

  tgt.status := convertPublicationStatus(src.status);
  tgt.experimental := src.experimental;

  tgt.date := src.date;

  if (src.publisher <> '') then
    tgt.publisher := src.publisher;

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.purpose <> '') then
    tgt.purpose := src.purpose;

  if (src.usage <> '') then
    tgt.usage := src.usage;
  tgt.approvalDate := src.approvalDate;
  tgt.lastReviewDate := src.lastReviewDate;

  if (src.effectivePeriod <> nil) then
    tgt.effectivePeriod := convertPeriod(src.effectivePeriod);

  for t2 in src.useContextList do
  begin
    tgt.useContextList.add(convertUsageContext(t2));
  end;
  for t3 in src.jurisdictionList do
  begin
    tgt.jurisdictionList.add(convertCodeableConcept(t3));
  end;
  for t4 in src.topicList do
  begin
    tgt.topicList.add(convertCodeableConcept(t4));
  end;
  for t5 in src.authorList do
  begin
    tz := tgt.contributorList.Append;
    tz.type_ := FHIR.R3.Types.ContributorTypeAuthor;
    tz.contactList.Add(convertContactDetail(t5));
  end;
  for t5 in src.editorList do
  begin
    tz := tgt.contributorList.Append;
    tz.type_ := FHIR.R3.Types.ContributorTypeEditor;
    tz.contactList.Add(convertContactDetail(t5));
  end;
  for t5 in src.reviewerList do
  begin
    tz := tgt.contributorList.Append;
    tz.type_ := FHIR.R3.Types.ContributorTypeReviewer;
    tz.contactList.Add(convertContactDetail(t5));
  end;
  for t5 in src.endorserList do
  begin
    tz := tgt.contributorList.Append;
    tz.type_ := FHIR.R3.Types.ContributorTypeEndorser;
    tz.contactList.Add(convertContactDetail(t5));
  end;
  for t6 in src.contactList do
  begin
    tgt.contactList.add(convertContactDetail(t6));
  end;
  if (src.copyright <> '') then
    tgt.copyright := src.copyright;

  for t7 in src.relatedArtifactList do
  begin
    tgt.relatedArtifactList.add(convertRelatedArtifact(t7));
  end;
  for t8 in src.library_List do
  begin
    tgt.library_List.add(convertCanonicalToReference(t8));
  end;
  for t9 in src.goalList do
  begin
    tgt.goalList.add(convertPlanDefinitionGoalComponent(t9));
  end;
  for ta in src.actionList do
  begin
    tgt.actionList.add(convertPlanDefinitionActionComponent(ta));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinitionGoalComponent(src : FHIR.R3.Resources.TFhirPlanDefinitionGoal) : FHIR.R4.Resources.TFhirPlanDefinitionGoal;
var
  tgt : FHIR.R4.Resources.TFhirPlanDefinitionGoal;
  t1 : FHIR.R3.Types.TFhirCodeableConcept;
  t2 : FHIR.R3.Types.TFhirRelatedArtifact;
  t3 : FHIR.R3.Resources.TFhirPlanDefinitionGoalTarget;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPlanDefinitionGoal.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.category <> nil) then
    tgt.category := convertCodeableConcept(src.category);

  if (src.description <> nil) then
    tgt.description := convertCodeableConcept(src.description);

  if (src.priority <> nil) then
    tgt.priority := convertCodeableConcept(src.priority);

  if (src.start <> nil) then
    tgt.start := convertCodeableConcept(src.start);

  for t1 in src.addressesList do
  begin
    tgt.addressesList.add(convertCodeableConcept(t1));
  end;
  for t2 in src.documentationList do
  begin
    tgt.documentationList.add(convertRelatedArtifact(t2));
  end;
  for t3 in src.targetList do
  begin
    tgt.targetList.add(convertPlanDefinitionGoalTargetComponent(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinitionGoalComponent(src : FHIR.R4.Resources.TFhirPlanDefinitionGoal) : FHIR.R3.Resources.TFhirPlanDefinitionGoal;
var
  tgt : FHIR.R3.Resources.TFhirPlanDefinitionGoal;
  t1 : FHIR.R4.Types.TFhirCodeableConcept;
  t2 : FHIR.R4.Types.TFhirRelatedArtifact;
  t3 : FHIR.R4.Resources.TFhirPlanDefinitionGoalTarget;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPlanDefinitionGoal.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.category <> nil) then
    tgt.category := convertCodeableConcept(src.category);

  if (src.description <> nil) then
    tgt.description := convertCodeableConcept(src.description);

  if (src.priority <> nil) then
    tgt.priority := convertCodeableConcept(src.priority);

  if (src.start <> nil) then
    tgt.start := convertCodeableConcept(src.start);

  for t1 in src.addressesList do
  begin
    tgt.addressesList.add(convertCodeableConcept(t1));
  end;
  for t2 in src.documentationList do
  begin
    tgt.documentationList.add(convertRelatedArtifact(t2));
  end;
  for t3 in src.targetList do
  begin
    tgt.targetList.add(convertPlanDefinitionGoalTargetComponent(t3));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinitionGoalTargetComponent(src : FHIR.R3.Resources.TFhirPlanDefinitionGoalTarget) : FHIR.R4.Resources.TFhirPlanDefinitionGoalTarget;
var
  tgt : FHIR.R4.Resources.TFhirPlanDefinitionGoalTarget;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPlanDefinitionGoalTarget.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.measure <> nil) then
    tgt.measure := convertCodeableConcept(src.measure);

  if (src.detail <> nil) then
    tgt.detail := convertType(src.detail);

  if (src.due <> nil) then
    tgt.due := convertDuration(src.due);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinitionGoalTargetComponent(src : FHIR.R4.Resources.TFhirPlanDefinitionGoalTarget) : FHIR.R3.Resources.TFhirPlanDefinitionGoalTarget;
var
  tgt : FHIR.R3.Resources.TFhirPlanDefinitionGoalTarget;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPlanDefinitionGoalTarget.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.measure <> nil) then
    tgt.measure := convertCodeableConcept(src.measure);

  if (src.detail <> nil) then
    tgt.detail := convertType(src.detail);

  if (src.due <> nil) then
    tgt.due := convertDuration(src.due);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinitionActionComponent(src : FHIR.R3.Resources.TFhirPlanDefinitionAction) : FHIR.R4.Resources.TFhirPlanDefinitionAction;
var
  tgt : FHIR.R4.Resources.TFhirPlanDefinitionAction;
  t1 : FHIR.R3.Types.TFhirCodeableConcept;
  t2 : FHIR.R3.Types.TFhirCodeableConcept;
  t3 : FHIR.R3.Types.TFhirRelatedArtifact;
  t4 : FHIR.R3.Types.TFhirId;
  t5 : FHIR.R3.Types.TFhirTriggerDefinition;
  t6 : FHIR.R3.Resources.TFhirPlanDefinitionActionCondition;
  t7 : FHIR.R3.Types.TFhirDataRequirement;
  t8 : FHIR.R3.Types.TFhirDataRequirement;
  t9 : FHIR.R3.Resources.TFhirPlanDefinitionActionRelatedAction;
  ta : FHIR.R3.Resources.TFhirPlanDefinitionActionParticipant;
  tb : FHIR.R3.Resources.TFhirPlanDefinitionActionDynamicValue;
  tc : FHIR.R3.Resources.TFhirPlanDefinitionAction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPlanDefinitionAction.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.label_ <> '') then
    tgt.prefix := src.label_;

  if (src.title <> '') then
    tgt.title := src.title;

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.textEquivalent <> '') then
    tgt.textEquivalent := src.textEquivalent;

  for t1 in src.codeList do
  begin
    tgt.codeList.add(convertCodeableConcept(t1));
  end;
  for t2 in src.reasonList do
  begin
    tgt.reasonList.add(convertCodeableConcept(t2));
  end;
  for t3 in src.documentationList do
  begin
    tgt.documentationList.add(convertRelatedArtifact(t3));
  end;
  for t4 in src.goalIdList do
  begin
    tgt.goalIdList.add(convertId(t4));
  end;
  for t5 in src.triggerDefinitionList do
  begin
    tgt.triggerList.add(convertTriggerDefinition(t5));
  end;
  for t6 in src.conditionList do
  begin
    tgt.conditionList.add(convertPlanDefinitionActionConditionComponent(t6));
  end;
  for t7 in src.inputList do
  begin
    tgt.inputList.add(convertDataRequirement(t7));
  end;
  for t8 in src.outputList do
  begin
    tgt.outputList.add(convertDataRequirement(t8));
  end;
  for t9 in src.relatedActionList do
  begin
    tgt.relatedActionList.add(convertPlanDefinitionActionRelatedActionComponent(t9));
  end;
  if (src.timing <> nil) then
    tgt.timing := convertType(src.timing);

  for ta in src.participantList do
  begin
    tgt.participantList.add(convertPlanDefinitionActionParticipantComponent(ta));
  end;
  if src.type_ <> nil then
  begin
    if tgt.Type_ = nil then
      tgt.type_ := FHIR.R4.Types.TFhirCodeableConcept.Create();
    tgt.Type_.codingList.add(convertCoding(src.Type_));
  end;

  tgt.groupingBehavior := convertActionGroupingBehavior(src.groupingBehavior);
  tgt.selectionBehavior := convertActionSelectionBehavior(src.selectionBehavior);
  tgt.requiredBehavior := convertActionRequiredBehavior(src.requiredBehavior);
  tgt.precheckBehavior := convertActionPrecheckBehavior(src.precheckBehavior);
  tgt.cardinalityBehavior := convertActionCardinalityBehavior(src.cardinalityBehavior);

  if (src.definition <> nil) then
    tgt.definitionElement := convertReferenceToCanonical(src.definition);

  if (src.transform <> nil) then
    tgt.transformElement := convertReferenceToCanonical(src.transform);

  for tb in src.dynamicValueList do
  begin
    tgt.dynamicValueList.add(convertPlanDefinitionActionDynamicValueComponent(tb));
  end;
  for tc in src.actionList do
  begin
    tgt.actionList.add(convertPlanDefinitionActionComponent(tc));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinitionActionComponent(src : FHIR.R4.Resources.TFhirPlanDefinitionAction) : FHIR.R3.Resources.TFhirPlanDefinitionAction;
var
  tgt : FHIR.R3.Resources.TFhirPlanDefinitionAction;
  t1 : FHIR.R4.Types.TFhirCodeableConcept;
  t2 : FHIR.R4.Types.TFhirCodeableConcept;
  t3 : FHIR.R4.Types.TFhirRelatedArtifact;
  t4 : FHIR.R4.Types.TFhirId;
  t5 : FHIR.R4.Types.TFhirTriggerDefinition;
  t6 : FHIR.R4.Resources.TFhirPlanDefinitionActionCondition;
  t7 : FHIR.R4.Types.TFhirDataRequirement;
  t8 : FHIR.R4.Types.TFhirDataRequirement;
  t9 : FHIR.R4.Resources.TFhirPlanDefinitionActionRelatedAction;
  ta : FHIR.R4.Resources.TFhirPlanDefinitionActionParticipant;
  tb : FHIR.R4.Resources.TFhirPlanDefinitionActionDynamicValue;
  tc : FHIR.R4.Resources.TFhirPlanDefinitionAction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPlanDefinitionAction.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.prefix <> '') then
    tgt.label_ := src.prefix;

  if (src.title <> '') then
    tgt.title := src.title;

  if (src.description <> '') then
    tgt.description := src.description;

  if (src.textEquivalent <> '') then
    tgt.textEquivalent := src.textEquivalent;

  for t1 in src.codeList do
  begin
    tgt.codeList.add(convertCodeableConcept(t1));
  end;
  for t2 in src.reasonList do
  begin
    tgt.reasonList.add(convertCodeableConcept(t2));
  end;
  for t3 in src.documentationList do
  begin
    tgt.documentationList.add(convertRelatedArtifact(t3));
  end;
  for t4 in src.goalIdList do
  begin
    tgt.goalIdList.add(convertId(t4));
  end;
  for t5 in src.triggerList do
  begin
    tgt.triggerDefinitionList.add(convertTriggerDefinition(t5));
  end;
  for t6 in src.conditionList do
  begin
    tgt.conditionList.add(convertPlanDefinitionActionConditionComponent(t6));
  end;
  for t7 in src.inputList do
  begin
    tgt.inputList.add(convertDataRequirement(t7));
  end;
  for t8 in src.outputList do
  begin
    tgt.outputList.add(convertDataRequirement(t8));
  end;
  for t9 in src.relatedActionList do
  begin
    tgt.relatedActionList.add(convertPlanDefinitionActionRelatedActionComponent(t9));
  end;
  if (src.timing <> nil) then
    tgt.timing := convertType(src.timing);

  for ta in src.participantList do
  begin
    tgt.participantList.add(convertPlanDefinitionActionParticipantComponent(ta));
  end;
  if (src.Type_ <> nil) and (src.type_.codingList.count > 0) then
    tgt.type_ := convertCoding(src.Type_.codingList[0]);

  tgt.groupingBehavior := convertActionGroupingBehavior(src.groupingBehavior);
  tgt.selectionBehavior := convertActionSelectionBehavior(src.selectionBehavior);
  tgt.requiredBehavior := convertActionRequiredBehavior(src.requiredBehavior);
  tgt.precheckBehavior := convertActionPrecheckBehavior(src.precheckBehavior);
  tgt.cardinalityBehavior := convertActionCardinalityBehavior(src.cardinalityBehavior);

  if (src.definition is TFhirCanonical) then
    tgt.definition := convertCanonicalToReference(src.definition as TFhirCanonical);

  if (src.transform <> '') then
    tgt.transform := convertCanonicalToReference(src.transformElement);

  for tb in src.dynamicValueList do
  begin
    tgt.dynamicValueList.add(convertPlanDefinitionActionDynamicValueComponent(tb));
  end;
  for tc in src.actionList do
  begin
    tgt.actionList.add(convertPlanDefinitionActionComponent(tc));
  end;
  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinitionActionConditionComponent(src : FHIR.R3.Resources.TFhirPlanDefinitionActionCondition) : FHIR.R4.Resources.TFhirPlanDefinitionActionCondition;
var
  tgt : FHIR.R4.Resources.TFhirPlanDefinitionActionCondition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPlanDefinitionActionCondition.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.kind := convertActionConditionKind(src.kind);

  if (src.description <> '') or (src.language <> '') or (src.expression <> '') then
  begin
    tgt.expression := TFHIRExpression.Create;
    if (src.description <> '') then
      tgt.expression.description := src.description;

    if (src.language <> '') then
      tgt.expression.language := src.language;

    if (src.expression <> '') then
      tgt.expression.expression := src.expression;
  end;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinitionActionConditionComponent(src : FHIR.R4.Resources.TFhirPlanDefinitionActionCondition) : FHIR.R3.Resources.TFhirPlanDefinitionActionCondition;
var
  tgt : FHIR.R3.Resources.TFhirPlanDefinitionActionCondition;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPlanDefinitionActionCondition.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.kind := convertActionConditionKind(src.kind);

  if src.expression <> nil then
  begin
    if (src.expression.description <> '') then
      tgt.description := src.expression.description;

    if (src.expression.language <> '') then
      tgt.language := src.expression.language;

    if (src.expression.expression <> '') then
      tgt.expression := src.expression.expression;
  end;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinitionActionRelatedActionComponent(src : FHIR.R3.Resources.TFhirPlanDefinitionActionRelatedAction) : FHIR.R4.Resources.TFhirPlanDefinitionActionRelatedAction;
var
  tgt : FHIR.R4.Resources.TFhirPlanDefinitionActionRelatedAction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPlanDefinitionActionRelatedAction.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.actionId <> '') then
    tgt.actionId := src.actionId;

  tgt.relationship := convertActionRelationshipType(src.relationship);

  if (src.offset <> nil) then
    tgt.offset := convertType(src.offset);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinitionActionRelatedActionComponent(src : FHIR.R4.Resources.TFhirPlanDefinitionActionRelatedAction) : FHIR.R3.Resources.TFhirPlanDefinitionActionRelatedAction;
var
  tgt : FHIR.R3.Resources.TFhirPlanDefinitionActionRelatedAction;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPlanDefinitionActionRelatedAction.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.actionId <> '') then
    tgt.actionId := src.actionId;

  tgt.relationship := convertActionRelationshipType(src.relationship);

  if (src.offset <> nil) then
    tgt.offset := convertType(src.offset);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinitionActionParticipantComponent(src : FHIR.R3.Resources.TFhirPlanDefinitionActionParticipant) : FHIR.R4.Resources.TFhirPlanDefinitionActionParticipant;
var
  tgt : FHIR.R4.Resources.TFhirPlanDefinitionActionParticipant;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPlanDefinitionActionParticipant.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertActionParticipantType(src.type_);

  if (src.role <> nil) then
    tgt.role := convertCodeableConcept(src.role);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinitionActionParticipantComponent(src : FHIR.R4.Resources.TFhirPlanDefinitionActionParticipant) : FHIR.R3.Resources.TFhirPlanDefinitionActionParticipant;
var
  tgt : FHIR.R3.Resources.TFhirPlanDefinitionActionParticipant;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPlanDefinitionActionParticipant.Create();
  try
  copyBackboneElement(src, tgt);
  tgt.type_ := convertActionParticipantType(src.type_);

  if (src.role <> nil) then
    tgt.role := convertCodeableConcept(src.role);

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinitionActionDynamicValueComponent(src : FHIR.R3.Resources.TFhirPlanDefinitionActionDynamicValue) : FHIR.R4.Resources.TFhirPlanDefinitionActionDynamicValue;
var
  tgt : FHIR.R4.Resources.TFhirPlanDefinitionActionDynamicValue;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R4.Resources.TFhirPlanDefinitionActionDynamicValue.Create();
  try
  copyBackboneElement(src, tgt);

  if (src.path <> '') then
    tgt.path := src.path;

  if (src.description <> '') or (src.language <> '') or (src.expression <> '') then
  begin
    tgt.expression := TFhirExpression.Create;
    if (src.description <> '') then
      tgt.expression.description := src.description;

    if (src.language <> '') then
      tgt.expression.language := src.language;

    if (src.expression <> '') then
      tgt.expression.expression := src.expression;
  end;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertPlanDefinitionActionDynamicValueComponent(src : FHIR.R4.Resources.TFhirPlanDefinitionActionDynamicValue) : FHIR.R3.Resources.TFhirPlanDefinitionActionDynamicValue;
var
  tgt : FHIR.R3.Resources.TFhirPlanDefinitionActionDynamicValue;
begin
  if (src = nil) then
    exit(nil);
  tgt := FHIR.R3.Resources.TFhirPlanDefinitionActionDynamicValue.Create();
  try
  copyBackboneElement(src, tgt);
  if (src.path <> '') then
    tgt.path := src.path;

  if src.expression <> nil then
  begin
    if (src.expression.description <> '') then
      tgt.description := src.expression.description;

    if (src.expression.language <> '') then
      tgt.language := src.expression.language;

    if (src.expression.expression <> '') then
      tgt.expression := src.expression.expression;
  end;

  exit(tgt.link);
  finally
    tgt.free;
  end;
end;

class function TVersionConvertor_30_40.convertResource(src : FHIR.R3.Resources.TFhirResource) : FHIR.R4.Resources.TFhirResource;
begin
  if (src = nil) then
    exit(nil);
  if (src is FHIR.R3.Resources.TFhirParameters) then
    exit(convertParameters(src as FHIR.R3.Resources.TFhirParameters));
  if (src is FHIR.R3.Resources.TFhirActivityDefinition) then
    exit(convertActivityDefinition(src as FHIR.R3.Resources.TFhirActivityDefinition));
  if (src is FHIR.R3.Resources.TFhirAllergyIntolerance) then
    exit(convertAllergyIntolerance(src as FHIR.R3.Resources.TFhirAllergyIntolerance));
  if (src is FHIR.R3.Resources.TFhirAppointment) then
    exit(convertAppointment(src as FHIR.R3.Resources.TFhirAppointment));
  if (src is FHIR.R3.Resources.TFhirAppointmentResponse) then
    exit(convertAppointmentResponse(src as FHIR.R3.Resources.TFhirAppointmentResponse));
  if (src is FHIR.R3.Resources.TFhirAuditEvent) then
    exit(convertAuditEvent(src as FHIR.R3.Resources.TFhirAuditEvent));
  if (src is FHIR.R3.Resources.TFhirBasic) then
    exit(convertBasic(src as FHIR.R3.Resources.TFhirBasic));
  if (src is FHIR.R3.Resources.TFhirBinary) then
    exit(convertBinary(src as FHIR.R3.Resources.TFhirBinary));
  if (src is FHIR.R3.Resources.TFhirBodySite) then
    exit(convertBodySite(src as FHIR.R3.Resources.TFhirBodySite));
  if (src is FHIR.R3.Resources.TFhirBundle) then
    exit(convertBundle(src as FHIR.R3.Resources.TFhirBundle));
  if (src is FHIR.R3.Resources.TFhirCapabilityStatement) then
    exit(convertCapabilityStatement(src as FHIR.R3.Resources.TFhirCapabilityStatement));
  if (src is FHIR.R3.Resources.TFhirCareTeam) then
    exit(convertCareTeam(src as FHIR.R3.Resources.TFhirCareTeam));
  if (src is FHIR.R3.Resources.TFhirClinicalImpression) then
    exit(convertClinicalImpression(src as FHIR.R3.Resources.TFhirClinicalImpression));
  if (src is FHIR.R3.Resources.TFhirCodeSystem) then
    exit(convertCodeSystem(src as FHIR.R3.Resources.TFhirCodeSystem));
  if (src is FHIR.R3.Resources.TFhirCommunication) then
    exit(convertCommunication(src as FHIR.R3.Resources.TFhirCommunication));
  if (src is FHIR.R3.Resources.TFhirCompartmentDefinition) then
    exit(convertCompartmentDefinition(src as FHIR.R3.Resources.TFhirCompartmentDefinition));
  if (src is FHIR.R3.Resources.TFhirComposition) then
    exit(convertComposition(src as FHIR.R3.Resources.TFhirComposition));
  if (src is FHIR.R3.Resources.TFhirConceptMap) then
    exit(convertConceptMap(src as FHIR.R3.Resources.TFhirConceptMap));
  if (src is FHIR.R3.Resources.TFhirCondition) then
    exit(convertCondition(src as FHIR.R3.Resources.TFhirCondition));
  if (src is FHIR.R3.Resources.TFhirConsent) then
    exit(convertConsent(src as FHIR.R3.Resources.TFhirConsent));
  if (src is FHIR.R3.Resources.TFhirDataElement) then
    exit(convertDataElement(src as FHIR.R3.Resources.TFhirDataElement));
  if (src is FHIR.R3.Resources.TFhirDetectedIssue) then
    exit(convertDetectedIssue(src as FHIR.R3.Resources.TFhirDetectedIssue));
  if (src is FHIR.R3.Resources.TFhirDevice) then
    exit(convertDevice(src as FHIR.R3.Resources.TFhirDevice));
  if (src is FHIR.R3.Resources.TFhirDeviceMetric) then
    exit(convertDeviceMetric(src as FHIR.R3.Resources.TFhirDeviceMetric));
  if (src is FHIR.R3.Resources.TFhirDeviceUseStatement) then
    exit(convertDeviceUseStatement(src as FHIR.R3.Resources.TFhirDeviceUseStatement));
  if (src is FHIR.R3.Resources.TFhirDiagnosticReport) then
    exit(convertDiagnosticReport(src as FHIR.R3.Resources.TFhirDiagnosticReport));
  if (src is FHIR.R3.Resources.TFhirDocumentReference) then
    exit(convertDocumentReference(src as FHIR.R3.Resources.TFhirDocumentReference));
  if (src is FHIR.R3.Resources.TFhirEncounter) then
    exit(convertEncounter(src as FHIR.R3.Resources.TFhirEncounter));
  if (src is FHIR.R3.Resources.TFhirendpoint) then
    exit(convertEndpoint(src as FHIR.R3.Resources.TFhirendpoint));
  if (src is FHIR.R3.Resources.TFhirEpisodeOfCare) then
    exit(convertEpisodeOfCare(src as FHIR.R3.Resources.TFhirEpisodeOfCare));
//  if (src is FHIR.R3.Resources.TFhirExpansionProfile) then
//    exit(convertExpansionProfile(src as FHIR.R3.Resources.TFhirExpansionProfile));
  if (src is FHIR.R3.Resources.TFhirFamilyMemberHistory) then
    exit(convertFamilyMemberHistory(src as FHIR.R3.Resources.TFhirFamilyMemberHistory));
  if (src is FHIR.R3.Resources.TFhirFlag) then
    exit(convertFlag(src as FHIR.R3.Resources.TFhirFlag));
  if (src is FHIR.R3.Resources.TFhirGoal) then
    exit(convertGoal(src as FHIR.R3.Resources.TFhirGoal));
  if (src is FHIR.R3.Resources.TFhirGraphDefinition) then
    exit(convertGraphDefinition(src as FHIR.R3.Resources.TFhirGraphDefinition));
  if (src is FHIR.R3.Resources.TFhirGroup) then
    exit(convertGroup(src as FHIR.R3.Resources.TFhirGroup));
  if (src is FHIR.R3.Resources.TFhirHealthcareService) then
    exit(convertHealthcareService(src as FHIR.R3.Resources.TFhirHealthcareService));
  if (src is FHIR.R3.Resources.TFhirImmunization) then
    exit(convertImmunization(src as FHIR.R3.Resources.TFhirImmunization));
  if (src is FHIR.R3.Resources.TFhirImplementationGuide) then
    exit(convertImplementationGuide(src as FHIR.R3.Resources.TFhirImplementationGuide));
  if (src is FHIR.R3.Resources.TFhirLinkage) then
    exit(convertLinkage(src as FHIR.R3.Resources.TFhirLinkage));
  if (src is FHIR.R3.Resources.TFhirList) then
    exit(convertList(src as FHIR.R3.Resources.TFhirList));
  if (src is FHIR.R3.Resources.TFhirLocation) then
    exit(convertLocation(src as FHIR.R3.Resources.TFhirLocation));
  if (src is FHIR.R3.Resources.TFhirMedication) then
    exit(convertMedication(src as FHIR.R3.Resources.TFhirMedication));
  if (src is FHIR.R3.Resources.TFhirMedicationAdministration) then
    exit(convertMedicationAdministration(src as FHIR.R3.Resources.TFhirMedicationAdministration));
  if (src is FHIR.R3.Resources.TFhirMedicationDispense) then
    exit(convertMedicationDispense(src as FHIR.R3.Resources.TFhirMedicationDispense));
  if (src is FHIR.R3.Resources.TFhirMedicationRequest) then
    exit(convertMedicationRequest(src as FHIR.R3.Resources.TFhirMedicationRequest));
  if (src is FHIR.R3.Resources.TFhirMedicationStatement) then
    exit(convertMedicationStatement(src as FHIR.R3.Resources.TFhirMedicationStatement));
  if (src is FHIR.R3.Resources.TFhirMessageDefinition) then
    exit(convertMessageDefinition(src as FHIR.R3.Resources.TFhirMessageDefinition));
  if (src is FHIR.R3.Resources.TFhirMessageHeader) then
    exit(convertMessageHeader(src as FHIR.R3.Resources.TFhirMessageHeader));
  if (src is FHIR.R3.Resources.TFhirNamingSystem) then
    exit(convertNamingSystem(src as FHIR.R3.Resources.TFhirNamingSystem));
  if (src is FHIR.R3.Resources.TFhirObservation) then
    exit(convertObservation(src as FHIR.R3.Resources.TFhirObservation));
  if (src is FHIR.R3.Resources.TFhirOperationDefinition) then
    exit(convertOperationDefinition(src as FHIR.R3.Resources.TFhirOperationDefinition));
  if (src is FHIR.R3.Resources.TFhirOperationOutcome) then
    exit(convertOperationOutcome(src as FHIR.R3.Resources.TFhirOperationOutcome));
  if (src is FHIR.R3.Resources.TFhirOrganization) then
    exit(convertOrganization(src as FHIR.R3.Resources.TFhirOrganization));
  if (src is FHIR.R3.Resources.TFhirPatient) then
    exit(convertPatient(src as FHIR.R3.Resources.TFhirPatient));
  if (src is FHIR.R3.Resources.TFhirPaymentNotice) then
    exit(convertPaymentNotice(src as FHIR.R3.Resources.TFhirPaymentNotice));
  if (src is FHIR.R3.Resources.TFhirPerson) then
    exit(convertPerson(src as FHIR.R3.Resources.TFhirPerson));
  if (src is FHIR.R3.Resources.TFhirPractitioner) then
    exit(convertPractitioner(src as FHIR.R3.Resources.TFhirPractitioner));
  if (src is FHIR.R3.Resources.TFhirPractitionerRole) then
    exit(convertPractitionerRole(src as FHIR.R3.Resources.TFhirPractitionerRole));
  if (src is FHIR.R3.Resources.TFhirProvenance) then
    exit(convertProvenance(src as FHIR.R3.Resources.TFhirProvenance));
  if (src is FHIR.R3.Resources.TFhirQuestionnaire) then
    exit(convertQuestionnaire(src as FHIR.R3.Resources.TFhirQuestionnaire));
  if (src is FHIR.R3.Resources.TFhirQuestionnaireResponse) then
    exit(convertQuestionnaireResponse(src as FHIR.R3.Resources.TFhirQuestionnaireResponse));
  if (src is FHIR.R3.Resources.TFhirRiskAssessment) then
    exit(convertRiskAssessment(src as FHIR.R3.Resources.TFhirRiskAssessment));
  if (src is FHIR.R3.Resources.TFhirSchedule) then
    exit(convertSchedule(src as FHIR.R3.Resources.TFhirSchedule));
  if (src is FHIR.R3.Resources.TFhirSearchParameter) then
    exit(convertSearchParameter(src as FHIR.R3.Resources.TFhirSearchParameter));
  if (src is FHIR.R3.Resources.TFhirSequence) then
    exit(convertSequence(src as FHIR.R3.Resources.TFhirSequence));
  if (src is FHIR.R3.Resources.TFhirSlot) then
    exit(convertSlot(src as FHIR.R3.Resources.TFhirSlot));
  if (src is FHIR.R3.Resources.TFhirSpecimen) then
    exit(convertSpecimen(src as FHIR.R3.Resources.TFhirSpecimen));
  if (src is FHIR.R3.Resources.TFhirStructureDefinition) then
    exit(convertStructureDefinition(src as FHIR.R3.Resources.TFhirStructureDefinition));
  if (src is FHIR.R3.Resources.TFhirStructureMap) then
    exit(convertStructureMap(src as FHIR.R3.Resources.TFhirStructureMap));
  if (src is FHIR.R3.Resources.TFhirSubscription) then
    exit(convertSubscription(src as FHIR.R3.Resources.TFhirSubscription));
  if (src is FHIR.R3.Resources.TFhirSubstance) then
    exit(convertSubstance(src as FHIR.R3.Resources.TFhirSubstance));
  if (src is FHIR.R3.Resources.TFhirSupplyDelivery) then
    exit(convertSupplyDelivery(src as FHIR.R3.Resources.TFhirSupplyDelivery));
  if (src is FHIR.R3.Resources.TFhirValueSet) then
    exit(convertValueSet(src as FHIR.R3.Resources.TFhirValueSet));
  raise EFHIRException.create('Unknown resource converting 3 -> 4' + src.fhirType);
end;

class function TVersionConvertor_30_40.convertResource(src : FHIR.R4.Resources.TFhirResource) : FHIR.R3.Resources.TFhirResource;
begin
  if (src = nil) then
    exit(nil);
  if (src is FHIR.R4.Resources.TFhirParameters) then
    exit(convertParameters(src as FHIR.R4.Resources.TFhirParameters));
  if (src is FHIR.R4.Resources.TFhirActivityDefinition) then
    exit(convertActivityDefinition(src as FHIR.R4.Resources.TFhirActivityDefinition));
  if (src is FHIR.R4.Resources.TFhirAllergyIntolerance) then
    exit(convertAllergyIntolerance(src as FHIR.R4.Resources.TFhirAllergyIntolerance));
  if (src is FHIR.R4.Resources.TFhirAppointment) then
    exit(convertAppointment(src as FHIR.R4.Resources.TFhirAppointment));
  if (src is FHIR.R4.Resources.TFhirAppointmentResponse) then
    exit(convertAppointmentResponse(src as FHIR.R4.Resources.TFhirAppointmentResponse));
  if (src is FHIR.R4.Resources.TFhirAuditEvent) then
    exit(convertAuditEvent(src as FHIR.R4.Resources.TFhirAuditEvent));
  if (src is FHIR.R4.Resources.TFhirBasic) then
    exit(convertBasic(src as FHIR.R4.Resources.TFhirBasic));
  if (src is FHIR.R4.Resources.TFhirBinary) then
    exit(convertBinary(src as FHIR.R4.Resources.TFhirBinary));
  if (src is FHIR.R4.Resources.TFhirBodyStructure) then
    exit(convertBodySite(src as FHIR.R4.Resources.TFhirBodyStructure));
  if (src is FHIR.R4.Resources.TFhirBundle) then
    exit(convertBundle(src as FHIR.R4.Resources.TFhirBundle));
  if (src is FHIR.R4.Resources.TFhirCapabilityStatement) then
    exit(convertCapabilityStatement(src as FHIR.R4.Resources.TFhirCapabilityStatement));
  if (src is FHIR.R4.Resources.TFhirCareTeam) then
    exit(convertCareTeam(src as FHIR.R4.Resources.TFhirCareTeam));
  if (src is FHIR.R4.Resources.TFhirClinicalImpression) then
    exit(convertClinicalImpression(src as FHIR.R4.Resources.TFhirClinicalImpression));
  if (src is FHIR.R4.Resources.TFhirCodeSystem) then
    exit(convertCodeSystem(src as FHIR.R4.Resources.TFhirCodeSystem));
  if (src is FHIR.R4.Resources.TFhirCommunication) then
    exit(convertCommunication(src as FHIR.R4.Resources.TFhirCommunication));
  if (src is FHIR.R4.Resources.TFhirCompartmentDefinition) then
    exit(convertCompartmentDefinition(src as FHIR.R4.Resources.TFhirCompartmentDefinition));
  if (src is FHIR.R4.Resources.TFhirComposition) then
    exit(convertComposition(src as FHIR.R4.Resources.TFhirComposition));
  if (src is FHIR.R4.Resources.TFhirConceptMap) then
    exit(convertConceptMap(src as FHIR.R4.Resources.TFhirConceptMap));
  if (src is FHIR.R4.Resources.TFhirCondition) then
    exit(convertCondition(src as FHIR.R4.Resources.TFhirCondition));
  if (src is FHIR.R4.Resources.TFhirConsent) then
    exit(convertConsent(src as FHIR.R4.Resources.TFhirConsent));
  if (src is FHIR.R4.Resources.TFhirDetectedIssue) then
    exit(convertDetectedIssue(src as FHIR.R4.Resources.TFhirDetectedIssue));
  if (src is FHIR.R4.Resources.TFhirDevice) then
    exit(convertDevice(src as FHIR.R4.Resources.TFhirDevice));
  if (src is FHIR.R4.Resources.TFhirDeviceMetric) then
    exit(convertDeviceMetric(src as FHIR.R4.Resources.TFhirDeviceMetric));
  if (src is FHIR.R4.Resources.TFhirDeviceUseStatement) then
    exit(convertDeviceUseStatement(src as FHIR.R4.Resources.TFhirDeviceUseStatement));
  if (src is FHIR.R4.Resources.TFhirDiagnosticReport) then
    exit(convertDiagnosticReport(src as FHIR.R4.Resources.TFhirDiagnosticReport));
  if (src is FHIR.R4.Resources.TFhirDocumentReference) then
    exit(convertDocumentReference(src as FHIR.R4.Resources.TFhirDocumentReference));
  if (src is FHIR.R4.Resources.TFhirEncounter) then
    exit(convertEncounter(src as FHIR.R4.Resources.TFhirEncounter));
  if (src is FHIR.R4.Resources.TFhirendpoint) then
    exit(convertEndpoint(src as FHIR.R4.Resources.TFhirendpoint));
  if (src is FHIR.R4.Resources.TFhirEpisodeOfCare) then
    exit(convertEpisodeOfCare(src as FHIR.R4.Resources.TFhirEpisodeOfCare));
//  if (src is FHIR.R4.Resources.TFhirExpansionProfile) then
//    exit(convertExpansionProfile(src as FHIR.R4.Resources.TFhirExpansionProfile));
  if (src is FHIR.R4.Resources.TFhirFamilyMemberHistory) then
    exit(convertFamilyMemberHistory(src as FHIR.R4.Resources.TFhirFamilyMemberHistory));
  if (src is FHIR.R4.Resources.TFhirFlag) then
    exit(convertFlag(src as FHIR.R4.Resources.TFhirFlag));
  if (src is FHIR.R4.Resources.TFhirGoal) then
    exit(convertGoal(src as FHIR.R4.Resources.TFhirGoal));
  if (src is FHIR.R4.Resources.TFhirGraphDefinition) then
    exit(convertGraphDefinition(src as FHIR.R4.Resources.TFhirGraphDefinition));
  if (src is FHIR.R4.Resources.TFhirGroup) then
    exit(convertGroup(src as FHIR.R4.Resources.TFhirGroup));
  if (src is FHIR.R4.Resources.TFhirHealthcareService) then
    exit(convertHealthcareService(src as FHIR.R4.Resources.TFhirHealthcareService));
  if (src is FHIR.R4.Resources.TFhirImmunization) then
    exit(convertImmunization(src as FHIR.R4.Resources.TFhirImmunization));
  if (src is FHIR.R4.Resources.TFhirImplementationGuide) then
    exit(convertImplementationGuide(src as FHIR.R4.Resources.TFhirImplementationGuide));
  if (src is FHIR.R4.Resources.TFhirLinkage) then
    exit(convertLinkage(src as FHIR.R4.Resources.TFhirLinkage));
  if (src is FHIR.R4.Resources.TFhirList) then
    exit(convertList(src as FHIR.R4.Resources.TFhirList));
  if (src is FHIR.R4.Resources.TFhirLocation) then
    exit(convertLocation(src as FHIR.R4.Resources.TFhirLocation));
  if (src is FHIR.R4.Resources.TFhirMedication) then
    exit(convertMedication(src as FHIR.R4.Resources.TFhirMedication));
  if (src is FHIR.R4.Resources.TFhirMedicationAdministration) then
    exit(convertMedicationAdministration(src as FHIR.R4.Resources.TFhirMedicationAdministration));
  if (src is FHIR.R4.Resources.TFhirMedicationDispense) then
    exit(convertMedicationDispense(src as FHIR.R4.Resources.TFhirMedicationDispense));
  if (src is FHIR.R4.Resources.TFhirMedicationRequest) then
    exit(convertMedicationRequest(src as FHIR.R4.Resources.TFhirMedicationRequest));
  if (src is FHIR.R4.Resources.TFhirMedicationStatement) then
    exit(convertMedicationStatement(src as FHIR.R4.Resources.TFhirMedicationStatement));
  if (src is FHIR.R4.Resources.TFhirMessageDefinition) then
    exit(convertMessageDefinition(src as FHIR.R4.Resources.TFhirMessageDefinition));
  if (src is FHIR.R4.Resources.TFhirMessageHeader) then
    exit(convertMessageHeader(src as FHIR.R4.Resources.TFhirMessageHeader));
  if (src is FHIR.R4.Resources.TFhirNamingSystem) then
    exit(convertNamingSystem(src as FHIR.R4.Resources.TFhirNamingSystem));
  if (src is FHIR.R4.Resources.TFhirObservation) then
    exit(convertObservation(src as FHIR.R4.Resources.TFhirObservation));
  if (src is FHIR.R4.Resources.TFhirOperationDefinition) then
    exit(convertOperationDefinition(src as FHIR.R4.Resources.TFhirOperationDefinition));
  if (src is FHIR.R4.Resources.TFhirOperationOutcome) then
    exit(convertOperationOutcome(src as FHIR.R4.Resources.TFhirOperationOutcome));
  if (src is FHIR.R4.Resources.TFhirOrganization) then
    exit(convertOrganization(src as FHIR.R4.Resources.TFhirOrganization));
  if (src is FHIR.R4.Resources.TFhirPatient) then
    exit(convertPatient(src as FHIR.R4.Resources.TFhirPatient));
  if (src is FHIR.R4.Resources.TFhirPaymentNotice) then
    exit(convertPaymentNotice(src as FHIR.R4.Resources.TFhirPaymentNotice));
  if (src is FHIR.R4.Resources.TFhirPerson) then
    exit(convertPerson(src as FHIR.R4.Resources.TFhirPerson));
  if (src is FHIR.R4.Resources.TFhirPractitioner) then
    exit(convertPractitioner(src as FHIR.R4.Resources.TFhirPractitioner));
  if (src is FHIR.R4.Resources.TFhirPractitionerRole) then
    exit(convertPractitionerRole(src as FHIR.R4.Resources.TFhirPractitionerRole));
  if (src is FHIR.R4.Resources.TFhirProvenance) then
    exit(convertProvenance(src as FHIR.R4.Resources.TFhirProvenance));
  if (src is FHIR.R4.Resources.TFhirQuestionnaire) then
    exit(convertQuestionnaire(src as FHIR.R4.Resources.TFhirQuestionnaire));
  if (src is FHIR.R4.Resources.TFhirQuestionnaireResponse) then
    exit(convertQuestionnaireResponse(src as FHIR.R4.Resources.TFhirQuestionnaireResponse));
  if (src is FHIR.R4.Resources.TFhirRiskAssessment) then
    exit(convertRiskAssessment(src as FHIR.R4.Resources.TFhirRiskAssessment));
  if (src is FHIR.R4.Resources.TFhirSchedule) then
    exit(convertSchedule(src as FHIR.R4.Resources.TFhirSchedule));
  if (src is FHIR.R4.Resources.TFhirSearchParameter) then
    exit(convertSearchParameter(src as FHIR.R4.Resources.TFhirSearchParameter));
  if (src is FHIR.R4.Resources.TFhirMolecularSequence) then
    exit(convertSequence(src as FHIR.R4.Resources.TFhirMolecularSequence));
  if (src is FHIR.R4.Resources.TFhirSlot) then
    exit(convertSlot(src as FHIR.R4.Resources.TFhirSlot));
  if (src is FHIR.R4.Resources.TFhirSpecimen) then
    exit(convertSpecimen(src as FHIR.R4.Resources.TFhirSpecimen));
  if (src is FHIR.R4.Resources.TFhirStructureDefinition) then
    exit(convertStructureDefinition(src as FHIR.R4.Resources.TFhirStructureDefinition));
  if (src is FHIR.R4.Resources.TFhirStructureMap) then
    exit(convertStructureMap(src as FHIR.R4.Resources.TFhirStructureMap));
  if (src is FHIR.R4.Resources.TFhirSubscription) then
    exit(convertSubscription(src as FHIR.R4.Resources.TFhirSubscription));
  if (src is FHIR.R4.Resources.TFhirSubstance) then
    exit(convertSubstance(src as FHIR.R4.Resources.TFhirSubstance));
  if (src is FHIR.R4.Resources.TFhirSupplyDelivery) then
    exit(convertSupplyDelivery(src as FHIR.R4.Resources.TFhirSupplyDelivery));
  if (src is FHIR.R4.Resources.TFhirValueSet) then
    exit(convertValueSet(src as FHIR.R4.Resources.TFhirValueSet));
  raise EFHIRException.create('Unknown resource converting 4 -> 3' + src.fhirType);
end;

end.

