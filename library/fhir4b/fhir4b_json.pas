unit fhir4b_json;

{
  Copyright (c) 2011+, HL7 and Health Intersections Pty Ltd (http://www.healthintersections.com.au)
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
}

{$I fhir.inc}
{$I fhir4b.inc}

interface

// Generated on Mon, Dec 27, 2021 21:46+1100 for FHIR v4.3.0



uses
  SysUtils, Classes,
  fsl_base, fsl_utilities, fsl_collections, fsl_json,
  fhir_parser, fhir_objects,
  fhir4b_base, fhir4b_constants, fhir4b_enums, fhir4b_types, fhir4b_parserBase, fhir4b_resources, fhir4b_resources_base;

Type

  TFHIRJsonParser = class (TFHIRJsonParserBase4b)
  private
    procedure ParseBaseProperties(jsn : TJsonObject; value : TFhirBase); overload;
    procedure ParseBaseProperties(jsn : TJsonObject; value : TFhirResource); overload;
  
  protected
    procedure ParseElementProperties(jsn : TJsonObject; value : TFhirElement);
    procedure ParseBackboneElementProperties(jsn : TJsonObject; value : TFhirBackboneElement);
    procedure ParseDataTypeProperties(jsn : TJsonObject; value : TFhirDataType);
    procedure ParseBackboneTypeProperties(jsn : TJsonObject; value : TFhirBackboneType);


    procedure ParseEnum(path :String; value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList; Const aNames, aSystems : Array Of String); overload;
    function ParseEnum(path : String; value : TJsonNode; jsn : TJsonObject; Const aNames, aSystems : Array Of String) : TFHIREnum; overload;
    procedure ParseDate(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseDate(value : TJsonNode; jsn : TJsonObject) : TFHIRDate; overload;
    procedure ParseDateTime(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseDateTime(value : TJsonNode; jsn : TJsonObject) : TFHIRDateTime; overload;
    procedure ParseString(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseString(value : TJsonNode; jsn : TJsonObject) : TFHIRString; overload;
    procedure ParseInteger(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseInteger(value : TJsonNode; jsn : TJsonObject) : TFHIRInteger; overload;
    procedure ParseUri(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseUri(value : TJsonNode; jsn : TJsonObject) : TFHIRUri; overload;
    procedure ParseInstant(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseInstant(value : TJsonNode; jsn : TJsonObject) : TFHIRInstant; overload;
    procedure ParseXhtml(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseXhtml(value : TJsonNode; jsn : TJsonObject) : TFHIRXhtml; overload;
    procedure ParseBoolean(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseBoolean(value : TJsonNode; jsn : TJsonObject) : TFHIRBoolean; overload;
    procedure ParseBase64Binary(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseBase64Binary(value : TJsonNode; jsn : TJsonObject) : TFHIRBase64Binary; overload;
    procedure ParseTime(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseTime(value : TJsonNode; jsn : TJsonObject) : TFHIRTime; overload;
    procedure ParseDecimal(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseDecimal(value : TJsonNode; jsn : TJsonObject) : TFHIRDecimal; overload;
    procedure ParseCode(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseCode(value : TJsonNode; jsn : TJsonObject) : TFHIRCode; overload;
    procedure ParseCanonical(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseCanonical(value : TJsonNode; jsn : TJsonObject) : TFHIRCanonical; overload;
    procedure ParseOid(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseOid(value : TJsonNode; jsn : TJsonObject) : TFHIROid; overload;
    procedure ParseUuid(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseUuid(value : TJsonNode; jsn : TJsonObject) : TFHIRUuid; overload;
    procedure ParseUrl(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseUrl(value : TJsonNode; jsn : TJsonObject) : TFHIRUrl; overload;
    procedure ParseMarkdown(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseMarkdown(value : TJsonNode; jsn : TJsonObject) : TFHIRMarkdown; overload;
    procedure ParseUnsignedInt(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseUnsignedInt(value : TJsonNode; jsn : TJsonObject) : TFHIRUnsignedInt; overload;
    procedure ParseId(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseId(value : TJsonNode; jsn : TJsonObject) : TFHIRId; overload;
    procedure ParsePositiveInt(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParsePositiveInt(value : TJsonNode; jsn : TJsonObject) : TFHIRPositiveInt; overload;
    procedure ParseInteger64(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseInteger64(value : TJsonNode; jsn : TJsonObject) : TFHIRInteger64; overload;

    function ParseCodeableReference(jsn : TJsonObject) : TFhirCodeableReference; overload; 
    procedure ParseCodeableReferenceProperties(jsn : TJsonObject; value : TFhirCodeableReference); overload;
    procedure ParseCodeableReference(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseRatioRange(jsn : TJsonObject) : TFhirRatioRange; overload; 
    procedure ParseRatioRangeProperties(jsn : TJsonObject; value : TFhirRatioRange); overload;
    procedure ParseRatioRange(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAddress(jsn : TJsonObject) : TFhirAddress; overload; 
    procedure ParseAddressProperties(jsn : TJsonObject; value : TFhirAddress); overload;
    procedure ParseAddress(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAge(jsn : TJsonObject) : TFhirAge; overload; 
    procedure ParseAgeProperties(jsn : TJsonObject; value : TFhirAge); overload;
    procedure ParseAge(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAnnotation(jsn : TJsonObject) : TFhirAnnotation; overload; 
    procedure ParseAnnotationProperties(jsn : TJsonObject; value : TFhirAnnotation); overload;
    procedure ParseAnnotation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAttachment(jsn : TJsonObject) : TFhirAttachment; overload; 
    procedure ParseAttachmentProperties(jsn : TJsonObject; value : TFhirAttachment); overload;
    procedure ParseAttachment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCodeableConcept(jsn : TJsonObject) : TFhirCodeableConcept; overload; 
    procedure ParseCodeableConceptProperties(jsn : TJsonObject; value : TFhirCodeableConcept); overload;
    procedure ParseCodeableConcept(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCoding(jsn : TJsonObject) : TFhirCoding; overload; 
    procedure ParseCodingProperties(jsn : TJsonObject; value : TFhirCoding); overload;
    procedure ParseCoding(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContactDetail(jsn : TJsonObject) : TFhirContactDetail; overload; 
    procedure ParseContactDetailProperties(jsn : TJsonObject; value : TFhirContactDetail); overload;
    procedure ParseContactDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContactPoint(jsn : TJsonObject) : TFhirContactPoint; overload; 
    procedure ParseContactPointProperties(jsn : TJsonObject; value : TFhirContactPoint); overload;
    procedure ParseContactPoint(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContributor(jsn : TJsonObject) : TFhirContributor; overload; 
    procedure ParseContributorProperties(jsn : TJsonObject; value : TFhirContributor); overload;
    procedure ParseContributor(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCount(jsn : TJsonObject) : TFhirCount; overload; 
    procedure ParseCountProperties(jsn : TJsonObject; value : TFhirCount); overload;
    procedure ParseCount(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDataRequirementCodeFilter(jsn : TJsonObject) : TFhirDataRequirementCodeFilter; overload; 
    procedure ParseDataRequirementCodeFilterProperties(jsn : TJsonObject; value : TFhirDataRequirementCodeFilter); overload;
    procedure ParseDataRequirementCodeFilter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDataRequirementDateFilter(jsn : TJsonObject) : TFhirDataRequirementDateFilter; overload; 
    procedure ParseDataRequirementDateFilterProperties(jsn : TJsonObject; value : TFhirDataRequirementDateFilter); overload;
    procedure ParseDataRequirementDateFilter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDataRequirementSort(jsn : TJsonObject) : TFhirDataRequirementSort; overload; 
    procedure ParseDataRequirementSortProperties(jsn : TJsonObject; value : TFhirDataRequirementSort); overload;
    procedure ParseDataRequirementSort(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDataRequirement(jsn : TJsonObject) : TFhirDataRequirement; overload; 
    procedure ParseDataRequirementProperties(jsn : TJsonObject; value : TFhirDataRequirement); overload;
    procedure ParseDataRequirement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDistance(jsn : TJsonObject) : TFhirDistance; overload; 
    procedure ParseDistanceProperties(jsn : TJsonObject; value : TFhirDistance); overload;
    procedure ParseDistance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDosageDoseAndRate(jsn : TJsonObject) : TFhirDosageDoseAndRate; overload; 
    procedure ParseDosageDoseAndRateProperties(jsn : TJsonObject; value : TFhirDosageDoseAndRate); overload;
    procedure ParseDosageDoseAndRate(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDosage(jsn : TJsonObject) : TFhirDosage; overload; 
    procedure ParseDosageProperties(jsn : TJsonObject; value : TFhirDosage); overload;
    procedure ParseDosage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDuration(jsn : TJsonObject) : TFhirDuration; overload; 
    procedure ParseDurationProperties(jsn : TJsonObject; value : TFhirDuration); overload;
    procedure ParseDuration(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseElementDefinitionSlicing(jsn : TJsonObject) : TFhirElementDefinitionSlicing; overload; 
    procedure ParseElementDefinitionSlicingProperties(jsn : TJsonObject; value : TFhirElementDefinitionSlicing); overload;
    procedure ParseElementDefinitionSlicing(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseElementDefinitionSlicingDiscriminator(jsn : TJsonObject) : TFhirElementDefinitionSlicingDiscriminator; overload; 
    procedure ParseElementDefinitionSlicingDiscriminatorProperties(jsn : TJsonObject; value : TFhirElementDefinitionSlicingDiscriminator); overload;
    procedure ParseElementDefinitionSlicingDiscriminator(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseElementDefinitionBase(jsn : TJsonObject) : TFhirElementDefinitionBase; overload; 
    procedure ParseElementDefinitionBaseProperties(jsn : TJsonObject; value : TFhirElementDefinitionBase); overload;
    procedure ParseElementDefinitionBase(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseElementDefinitionType(jsn : TJsonObject) : TFhirElementDefinitionType; overload; 
    procedure ParseElementDefinitionTypeProperties(jsn : TJsonObject; value : TFhirElementDefinitionType); overload;
    procedure ParseElementDefinitionType(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseElementDefinitionExample(jsn : TJsonObject) : TFhirElementDefinitionExample; overload; 
    procedure ParseElementDefinitionExampleProperties(jsn : TJsonObject; value : TFhirElementDefinitionExample); overload;
    procedure ParseElementDefinitionExample(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseElementDefinitionConstraint(jsn : TJsonObject) : TFhirElementDefinitionConstraint; overload; 
    procedure ParseElementDefinitionConstraintProperties(jsn : TJsonObject; value : TFhirElementDefinitionConstraint); overload;
    procedure ParseElementDefinitionConstraint(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseElementDefinitionBinding(jsn : TJsonObject) : TFhirElementDefinitionBinding; overload; 
    procedure ParseElementDefinitionBindingProperties(jsn : TJsonObject; value : TFhirElementDefinitionBinding); overload;
    procedure ParseElementDefinitionBinding(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseElementDefinitionMapping(jsn : TJsonObject) : TFhirElementDefinitionMapping; overload; 
    procedure ParseElementDefinitionMappingProperties(jsn : TJsonObject; value : TFhirElementDefinitionMapping); overload;
    procedure ParseElementDefinitionMapping(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseElementDefinition(jsn : TJsonObject) : TFhirElementDefinition; overload; 
    procedure ParseElementDefinitionProperties(jsn : TJsonObject; value : TFhirElementDefinition); overload;
    procedure ParseElementDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExpression(jsn : TJsonObject) : TFhirExpression; overload; 
    procedure ParseExpressionProperties(jsn : TJsonObject; value : TFhirExpression); overload;
    procedure ParseExpression(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExtension(jsn : TJsonObject) : TFhirExtension; overload; 
    procedure ParseExtensionProperties(jsn : TJsonObject; value : TFhirExtension); overload;
    procedure ParseExtension(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseHumanName(jsn : TJsonObject) : TFhirHumanName; overload; 
    procedure ParseHumanNameProperties(jsn : TJsonObject; value : TFhirHumanName); overload;
    procedure ParseHumanName(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseIdentifier(jsn : TJsonObject) : TFhirIdentifier; overload; 
    procedure ParseIdentifierProperties(jsn : TJsonObject; value : TFhirIdentifier); overload;
    procedure ParseIdentifier(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMarketingStatus(jsn : TJsonObject) : TFhirMarketingStatus; overload; 
    procedure ParseMarketingStatusProperties(jsn : TJsonObject; value : TFhirMarketingStatus); overload;
    procedure ParseMarketingStatus(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMeta(jsn : TJsonObject) : TFhirMeta; overload; 
    procedure ParseMetaProperties(jsn : TJsonObject; value : TFhirMeta); overload;
    procedure ParseMeta(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMoney(jsn : TJsonObject) : TFhirMoney; overload; 
    procedure ParseMoneyProperties(jsn : TJsonObject; value : TFhirMoney); overload;
    procedure ParseMoney(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseNarrative(jsn : TJsonObject) : TFhirNarrative; overload; 
    procedure ParseNarrativeProperties(jsn : TJsonObject; value : TFhirNarrative); overload;
    procedure ParseNarrative(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseParameterDefinition(jsn : TJsonObject) : TFhirParameterDefinition; overload; 
    procedure ParseParameterDefinitionProperties(jsn : TJsonObject; value : TFhirParameterDefinition); overload;
    procedure ParseParameterDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePeriod(jsn : TJsonObject) : TFhirPeriod; overload; 
    procedure ParsePeriodProperties(jsn : TJsonObject; value : TFhirPeriod); overload;
    procedure ParsePeriod(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePopulation(jsn : TJsonObject) : TFhirPopulation; overload; 
    procedure ParsePopulationProperties(jsn : TJsonObject; value : TFhirPopulation); overload;
    procedure ParsePopulation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseProdCharacteristic(jsn : TJsonObject) : TFhirProdCharacteristic; overload; 
    procedure ParseProdCharacteristicProperties(jsn : TJsonObject; value : TFhirProdCharacteristic); overload;
    procedure ParseProdCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseProductShelfLife(jsn : TJsonObject) : TFhirProductShelfLife; overload; 
    procedure ParseProductShelfLifeProperties(jsn : TJsonObject; value : TFhirProductShelfLife); overload;
    procedure ParseProductShelfLife(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseQuantity(jsn : TJsonObject) : TFhirQuantity; overload; 
    procedure ParseQuantityProperties(jsn : TJsonObject; value : TFhirQuantity); overload;
    procedure ParseQuantity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseRange(jsn : TJsonObject) : TFhirRange; overload; 
    procedure ParseRangeProperties(jsn : TJsonObject; value : TFhirRange); overload;
    procedure ParseRange(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseRatio(jsn : TJsonObject) : TFhirRatio; overload; 
    procedure ParseRatioProperties(jsn : TJsonObject; value : TFhirRatio); overload;
    procedure ParseRatio(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseReference(jsn : TJsonObject) : TFhirReference; overload; 
    procedure ParseReferenceProperties(jsn : TJsonObject; value : TFhirReference); overload;
    procedure ParseReference(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseRelatedArtifact(jsn : TJsonObject) : TFhirRelatedArtifact; overload; 
    procedure ParseRelatedArtifactProperties(jsn : TJsonObject; value : TFhirRelatedArtifact); overload;
    procedure ParseRelatedArtifact(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSampledData(jsn : TJsonObject) : TFhirSampledData; overload; 
    procedure ParseSampledDataProperties(jsn : TJsonObject; value : TFhirSampledData); overload;
    procedure ParseSampledData(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSignature(jsn : TJsonObject) : TFhirSignature; overload; 
    procedure ParseSignatureProperties(jsn : TJsonObject; value : TFhirSignature); overload;
    procedure ParseSignature(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTimingRepeat(jsn : TJsonObject) : TFhirTimingRepeat; overload; 
    procedure ParseTimingRepeatProperties(jsn : TJsonObject; value : TFhirTimingRepeat); overload;
    procedure ParseTimingRepeat(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTiming(jsn : TJsonObject) : TFhirTiming; overload; 
    procedure ParseTimingProperties(jsn : TJsonObject; value : TFhirTiming); overload;
    procedure ParseTiming(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTriggerDefinition(jsn : TJsonObject) : TFhirTriggerDefinition; overload; 
    procedure ParseTriggerDefinitionProperties(jsn : TJsonObject; value : TFhirTriggerDefinition); overload;
    procedure ParseTriggerDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseUsageContext(jsn : TJsonObject) : TFhirUsageContext; overload; 
    procedure ParseUsageContextProperties(jsn : TJsonObject; value : TFhirUsageContext); overload;
    procedure ParseUsageContext(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 


    procedure ParseResourceProperties(jsn : TJsonObject; value : TFhirResource);
    procedure ParseDomainResourceProperties(jsn : TJsonObject; value : TFhirDomainResource);
{$IFDEF FHIR_ACCOUNT}
    function ParseAccountCoverage(jsn : TJsonObject) : TFhirAccountCoverage; overload; 
    procedure ParseAccountCoverageProperties(jsn : TJsonObject; value : TFhirAccountCoverage); overload;
    procedure ParseAccountCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAccountGuarantor(jsn : TJsonObject) : TFhirAccountGuarantor; overload; 
    procedure ParseAccountGuarantorProperties(jsn : TJsonObject; value : TFhirAccountGuarantor); overload;
    procedure ParseAccountGuarantor(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAccount(jsn : TJsonObject) : TFhirAccount; overload; 
    procedure ParseAccountProperties(jsn : TJsonObject; value : TFhirAccount); overload;
    procedure ParseAccount(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
    function ParseActivityDefinitionParticipant(jsn : TJsonObject) : TFhirActivityDefinitionParticipant; overload; 
    procedure ParseActivityDefinitionParticipantProperties(jsn : TJsonObject; value : TFhirActivityDefinitionParticipant); overload;
    procedure ParseActivityDefinitionParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseActivityDefinitionDynamicValue(jsn : TJsonObject) : TFhirActivityDefinitionDynamicValue; overload; 
    procedure ParseActivityDefinitionDynamicValueProperties(jsn : TJsonObject; value : TFhirActivityDefinitionDynamicValue); overload;
    procedure ParseActivityDefinitionDynamicValue(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseActivityDefinition(jsn : TJsonObject) : TFhirActivityDefinition; overload; 
    procedure ParseActivityDefinitionProperties(jsn : TJsonObject; value : TFhirActivityDefinition); overload;
    procedure ParseActivityDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
    function ParseAdministrableProductDefinitionProperty(jsn : TJsonObject) : TFhirAdministrableProductDefinitionProperty; overload; 
    procedure ParseAdministrableProductDefinitionPropertyProperties(jsn : TJsonObject; value : TFhirAdministrableProductDefinitionProperty); overload;
    procedure ParseAdministrableProductDefinitionProperty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAdministrableProductDefinitionRouteOfAdministration(jsn : TJsonObject) : TFhirAdministrableProductDefinitionRouteOfAdministration; overload; 
    procedure ParseAdministrableProductDefinitionRouteOfAdministrationProperties(jsn : TJsonObject; value : TFhirAdministrableProductDefinitionRouteOfAdministration); overload;
    procedure ParseAdministrableProductDefinitionRouteOfAdministration(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(jsn : TJsonObject) : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies; overload; 
    procedure ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesProperties(jsn : TJsonObject; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies); overload;
    procedure ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(jsn : TJsonObject) : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod; overload; 
    procedure ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriodProperties(jsn : TJsonObject; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod); overload;
    procedure ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAdministrableProductDefinition(jsn : TJsonObject) : TFhirAdministrableProductDefinition; overload; 
    procedure ParseAdministrableProductDefinitionProperties(jsn : TJsonObject; value : TFhirAdministrableProductDefinition); overload;
    procedure ParseAdministrableProductDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
    function ParseAdverseEventSuspectEntity(jsn : TJsonObject) : TFhirAdverseEventSuspectEntity; overload; 
    procedure ParseAdverseEventSuspectEntityProperties(jsn : TJsonObject; value : TFhirAdverseEventSuspectEntity); overload;
    procedure ParseAdverseEventSuspectEntity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAdverseEventSuspectEntityCausality(jsn : TJsonObject) : TFhirAdverseEventSuspectEntityCausality; overload; 
    procedure ParseAdverseEventSuspectEntityCausalityProperties(jsn : TJsonObject; value : TFhirAdverseEventSuspectEntityCausality); overload;
    procedure ParseAdverseEventSuspectEntityCausality(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAdverseEvent(jsn : TJsonObject) : TFhirAdverseEvent; overload; 
    procedure ParseAdverseEventProperties(jsn : TJsonObject; value : TFhirAdverseEvent); overload;
    procedure ParseAdverseEvent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
    function ParseAllergyIntoleranceReaction(jsn : TJsonObject) : TFhirAllergyIntoleranceReaction; overload; 
    procedure ParseAllergyIntoleranceReactionProperties(jsn : TJsonObject; value : TFhirAllergyIntoleranceReaction); overload;
    procedure ParseAllergyIntoleranceReaction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAllergyIntolerance(jsn : TJsonObject) : TFhirAllergyIntolerance; overload; 
    procedure ParseAllergyIntoleranceProperties(jsn : TJsonObject; value : TFhirAllergyIntolerance); overload;
    procedure ParseAllergyIntolerance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
    function ParseAppointmentParticipant(jsn : TJsonObject) : TFhirAppointmentParticipant; overload; 
    procedure ParseAppointmentParticipantProperties(jsn : TJsonObject; value : TFhirAppointmentParticipant); overload;
    procedure ParseAppointmentParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAppointment(jsn : TJsonObject) : TFhirAppointment; overload; 
    procedure ParseAppointmentProperties(jsn : TJsonObject; value : TFhirAppointment); overload;
    procedure ParseAppointment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
    function ParseAppointmentResponse(jsn : TJsonObject) : TFhirAppointmentResponse; overload; 
    procedure ParseAppointmentResponseProperties(jsn : TJsonObject; value : TFhirAppointmentResponse); overload;
    procedure ParseAppointmentResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
    function ParseAuditEventAgent(jsn : TJsonObject) : TFhirAuditEventAgent; overload; 
    procedure ParseAuditEventAgentProperties(jsn : TJsonObject; value : TFhirAuditEventAgent); overload;
    procedure ParseAuditEventAgent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAuditEventAgentNetwork(jsn : TJsonObject) : TFhirAuditEventAgentNetwork; overload; 
    procedure ParseAuditEventAgentNetworkProperties(jsn : TJsonObject; value : TFhirAuditEventAgentNetwork); overload;
    procedure ParseAuditEventAgentNetwork(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAuditEventSource(jsn : TJsonObject) : TFhirAuditEventSource; overload; 
    procedure ParseAuditEventSourceProperties(jsn : TJsonObject; value : TFhirAuditEventSource); overload;
    procedure ParseAuditEventSource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAuditEventEntity(jsn : TJsonObject) : TFhirAuditEventEntity; overload; 
    procedure ParseAuditEventEntityProperties(jsn : TJsonObject; value : TFhirAuditEventEntity); overload;
    procedure ParseAuditEventEntity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAuditEventEntityDetail(jsn : TJsonObject) : TFhirAuditEventEntityDetail; overload; 
    procedure ParseAuditEventEntityDetailProperties(jsn : TJsonObject; value : TFhirAuditEventEntityDetail); overload;
    procedure ParseAuditEventEntityDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseAuditEvent(jsn : TJsonObject) : TFhirAuditEvent; overload; 
    procedure ParseAuditEventProperties(jsn : TJsonObject; value : TFhirAuditEvent); overload;
    procedure ParseAuditEvent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
    function ParseBasic(jsn : TJsonObject) : TFhirBasic; overload; 
    procedure ParseBasicProperties(jsn : TJsonObject; value : TFhirBasic); overload;
    procedure ParseBasic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
    function ParseBinary(jsn : TJsonObject) : TFhirBinary; overload; 
    procedure ParseBinaryProperties(jsn : TJsonObject; value : TFhirBinary); overload;
    procedure ParseBinary(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
    function ParseBiologicallyDerivedProductCollection(jsn : TJsonObject) : TFhirBiologicallyDerivedProductCollection; overload; 
    procedure ParseBiologicallyDerivedProductCollectionProperties(jsn : TJsonObject; value : TFhirBiologicallyDerivedProductCollection); overload;
    procedure ParseBiologicallyDerivedProductCollection(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseBiologicallyDerivedProductProcessing(jsn : TJsonObject) : TFhirBiologicallyDerivedProductProcessing; overload; 
    procedure ParseBiologicallyDerivedProductProcessingProperties(jsn : TJsonObject; value : TFhirBiologicallyDerivedProductProcessing); overload;
    procedure ParseBiologicallyDerivedProductProcessing(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseBiologicallyDerivedProductManipulation(jsn : TJsonObject) : TFhirBiologicallyDerivedProductManipulation; overload; 
    procedure ParseBiologicallyDerivedProductManipulationProperties(jsn : TJsonObject; value : TFhirBiologicallyDerivedProductManipulation); overload;
    procedure ParseBiologicallyDerivedProductManipulation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseBiologicallyDerivedProductStorage(jsn : TJsonObject) : TFhirBiologicallyDerivedProductStorage; overload; 
    procedure ParseBiologicallyDerivedProductStorageProperties(jsn : TJsonObject; value : TFhirBiologicallyDerivedProductStorage); overload;
    procedure ParseBiologicallyDerivedProductStorage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseBiologicallyDerivedProduct(jsn : TJsonObject) : TFhirBiologicallyDerivedProduct; overload; 
    procedure ParseBiologicallyDerivedProductProperties(jsn : TJsonObject; value : TFhirBiologicallyDerivedProduct); overload;
    procedure ParseBiologicallyDerivedProduct(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
    function ParseBodyStructure(jsn : TJsonObject) : TFhirBodyStructure; overload; 
    procedure ParseBodyStructureProperties(jsn : TJsonObject; value : TFhirBodyStructure); overload;
    procedure ParseBodyStructure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
    function ParseBundleLink(jsn : TJsonObject) : TFhirBundleLink; overload; 
    procedure ParseBundleLinkProperties(jsn : TJsonObject; value : TFhirBundleLink); overload;
    procedure ParseBundleLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseBundleEntry(jsn : TJsonObject) : TFhirBundleEntry; overload; 
    procedure ParseBundleEntryProperties(jsn : TJsonObject; value : TFhirBundleEntry); overload;
    procedure ParseBundleEntry(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseBundleEntrySearch(jsn : TJsonObject) : TFhirBundleEntrySearch; overload; 
    procedure ParseBundleEntrySearchProperties(jsn : TJsonObject; value : TFhirBundleEntrySearch); overload;
    procedure ParseBundleEntrySearch(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseBundleEntryRequest(jsn : TJsonObject) : TFhirBundleEntryRequest; overload; 
    procedure ParseBundleEntryRequestProperties(jsn : TJsonObject; value : TFhirBundleEntryRequest); overload;
    procedure ParseBundleEntryRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseBundleEntryResponse(jsn : TJsonObject) : TFhirBundleEntryResponse; overload; 
    procedure ParseBundleEntryResponseProperties(jsn : TJsonObject; value : TFhirBundleEntryResponse); overload;
    procedure ParseBundleEntryResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseBundle(jsn : TJsonObject) : TFhirBundle; overload; 
    procedure ParseBundleProperties(jsn : TJsonObject; value : TFhirBundle); overload;
    procedure ParseBundle(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
    function ParseCapabilityStatementSoftware(jsn : TJsonObject) : TFhirCapabilityStatementSoftware; overload; 
    procedure ParseCapabilityStatementSoftwareProperties(jsn : TJsonObject; value : TFhirCapabilityStatementSoftware); overload;
    procedure ParseCapabilityStatementSoftware(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCapabilityStatementImplementation(jsn : TJsonObject) : TFhirCapabilityStatementImplementation; overload; 
    procedure ParseCapabilityStatementImplementationProperties(jsn : TJsonObject; value : TFhirCapabilityStatementImplementation); overload;
    procedure ParseCapabilityStatementImplementation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCapabilityStatementRest(jsn : TJsonObject) : TFhirCapabilityStatementRest; overload; 
    procedure ParseCapabilityStatementRestProperties(jsn : TJsonObject; value : TFhirCapabilityStatementRest); overload;
    procedure ParseCapabilityStatementRest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCapabilityStatementRestSecurity(jsn : TJsonObject) : TFhirCapabilityStatementRestSecurity; overload; 
    procedure ParseCapabilityStatementRestSecurityProperties(jsn : TJsonObject; value : TFhirCapabilityStatementRestSecurity); overload;
    procedure ParseCapabilityStatementRestSecurity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCapabilityStatementRestResource(jsn : TJsonObject) : TFhirCapabilityStatementRestResource; overload; 
    procedure ParseCapabilityStatementRestResourceProperties(jsn : TJsonObject; value : TFhirCapabilityStatementRestResource); overload;
    procedure ParseCapabilityStatementRestResource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCapabilityStatementRestResourceInteraction(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceInteraction; overload; 
    procedure ParseCapabilityStatementRestResourceInteractionProperties(jsn : TJsonObject; value : TFhirCapabilityStatementRestResourceInteraction); overload;
    procedure ParseCapabilityStatementRestResourceInteraction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCapabilityStatementRestResourceSearchParam(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceSearchParam; overload; 
    procedure ParseCapabilityStatementRestResourceSearchParamProperties(jsn : TJsonObject; value : TFhirCapabilityStatementRestResourceSearchParam); overload;
    procedure ParseCapabilityStatementRestResourceSearchParam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCapabilityStatementRestResourceOperation(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceOperation; overload; 
    procedure ParseCapabilityStatementRestResourceOperationProperties(jsn : TJsonObject; value : TFhirCapabilityStatementRestResourceOperation); overload;
    procedure ParseCapabilityStatementRestResourceOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCapabilityStatementRestInteraction(jsn : TJsonObject) : TFhirCapabilityStatementRestInteraction; overload; 
    procedure ParseCapabilityStatementRestInteractionProperties(jsn : TJsonObject; value : TFhirCapabilityStatementRestInteraction); overload;
    procedure ParseCapabilityStatementRestInteraction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCapabilityStatementMessaging(jsn : TJsonObject) : TFhirCapabilityStatementMessaging; overload; 
    procedure ParseCapabilityStatementMessagingProperties(jsn : TJsonObject; value : TFhirCapabilityStatementMessaging); overload;
    procedure ParseCapabilityStatementMessaging(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCapabilityStatementMessagingEndpoint(jsn : TJsonObject) : TFhirCapabilityStatementMessagingEndpoint; overload; 
    procedure ParseCapabilityStatementMessagingEndpointProperties(jsn : TJsonObject; value : TFhirCapabilityStatementMessagingEndpoint); overload;
    procedure ParseCapabilityStatementMessagingEndpoint(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCapabilityStatementMessagingSupportedMessage(jsn : TJsonObject) : TFhirCapabilityStatementMessagingSupportedMessage; overload; 
    procedure ParseCapabilityStatementMessagingSupportedMessageProperties(jsn : TJsonObject; value : TFhirCapabilityStatementMessagingSupportedMessage); overload;
    procedure ParseCapabilityStatementMessagingSupportedMessage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCapabilityStatementDocument(jsn : TJsonObject) : TFhirCapabilityStatementDocument; overload; 
    procedure ParseCapabilityStatementDocumentProperties(jsn : TJsonObject; value : TFhirCapabilityStatementDocument); overload;
    procedure ParseCapabilityStatementDocument(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCapabilityStatement(jsn : TJsonObject) : TFhirCapabilityStatement; overload; 
    procedure ParseCapabilityStatementProperties(jsn : TJsonObject; value : TFhirCapabilityStatement); overload;
    procedure ParseCapabilityStatement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
    function ParseCarePlanActivity(jsn : TJsonObject) : TFhirCarePlanActivity; overload; 
    procedure ParseCarePlanActivityProperties(jsn : TJsonObject; value : TFhirCarePlanActivity); overload;
    procedure ParseCarePlanActivity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCarePlanActivityDetail(jsn : TJsonObject) : TFhirCarePlanActivityDetail; overload; 
    procedure ParseCarePlanActivityDetailProperties(jsn : TJsonObject; value : TFhirCarePlanActivityDetail); overload;
    procedure ParseCarePlanActivityDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCarePlan(jsn : TJsonObject) : TFhirCarePlan; overload; 
    procedure ParseCarePlanProperties(jsn : TJsonObject; value : TFhirCarePlan); overload;
    procedure ParseCarePlan(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
    function ParseCareTeamParticipant(jsn : TJsonObject) : TFhirCareTeamParticipant; overload; 
    procedure ParseCareTeamParticipantProperties(jsn : TJsonObject; value : TFhirCareTeamParticipant); overload;
    procedure ParseCareTeamParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCareTeam(jsn : TJsonObject) : TFhirCareTeam; overload; 
    procedure ParseCareTeamProperties(jsn : TJsonObject; value : TFhirCareTeam); overload;
    procedure ParseCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
    function ParseCatalogEntryRelatedEntry(jsn : TJsonObject) : TFhirCatalogEntryRelatedEntry; overload; 
    procedure ParseCatalogEntryRelatedEntryProperties(jsn : TJsonObject; value : TFhirCatalogEntryRelatedEntry); overload;
    procedure ParseCatalogEntryRelatedEntry(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCatalogEntry(jsn : TJsonObject) : TFhirCatalogEntry; overload; 
    procedure ParseCatalogEntryProperties(jsn : TJsonObject; value : TFhirCatalogEntry); overload;
    procedure ParseCatalogEntry(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
    function ParseChargeItemPerformer(jsn : TJsonObject) : TFhirChargeItemPerformer; overload; 
    procedure ParseChargeItemPerformerProperties(jsn : TJsonObject; value : TFhirChargeItemPerformer); overload;
    procedure ParseChargeItemPerformer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseChargeItem(jsn : TJsonObject) : TFhirChargeItem; overload; 
    procedure ParseChargeItemProperties(jsn : TJsonObject; value : TFhirChargeItem); overload;
    procedure ParseChargeItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
    function ParseChargeItemDefinitionApplicability(jsn : TJsonObject) : TFhirChargeItemDefinitionApplicability; overload; 
    procedure ParseChargeItemDefinitionApplicabilityProperties(jsn : TJsonObject; value : TFhirChargeItemDefinitionApplicability); overload;
    procedure ParseChargeItemDefinitionApplicability(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseChargeItemDefinitionPropertyGroup(jsn : TJsonObject) : TFhirChargeItemDefinitionPropertyGroup; overload; 
    procedure ParseChargeItemDefinitionPropertyGroupProperties(jsn : TJsonObject; value : TFhirChargeItemDefinitionPropertyGroup); overload;
    procedure ParseChargeItemDefinitionPropertyGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseChargeItemDefinitionPropertyGroupPriceComponent(jsn : TJsonObject) : TFhirChargeItemDefinitionPropertyGroupPriceComponent; overload; 
    procedure ParseChargeItemDefinitionPropertyGroupPriceComponentProperties(jsn : TJsonObject; value : TFhirChargeItemDefinitionPropertyGroupPriceComponent); overload;
    procedure ParseChargeItemDefinitionPropertyGroupPriceComponent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseChargeItemDefinition(jsn : TJsonObject) : TFhirChargeItemDefinition; overload; 
    procedure ParseChargeItemDefinitionProperties(jsn : TJsonObject; value : TFhirChargeItemDefinition); overload;
    procedure ParseChargeItemDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CITATION}
    function ParseCitationClassification(jsn : TJsonObject) : TFhirCitationClassification; overload; 
    procedure ParseCitationClassificationProperties(jsn : TJsonObject; value : TFhirCitationClassification); overload;
    procedure ParseCitationClassification(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationStatusDate(jsn : TJsonObject) : TFhirCitationStatusDate; overload; 
    procedure ParseCitationStatusDateProperties(jsn : TJsonObject; value : TFhirCitationStatusDate); overload;
    procedure ParseCitationStatusDate(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationRelatesTo(jsn : TJsonObject) : TFhirCitationRelatesTo; overload; 
    procedure ParseCitationRelatesToProperties(jsn : TJsonObject; value : TFhirCitationRelatesTo); overload;
    procedure ParseCitationRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifact(jsn : TJsonObject) : TFhirCitationCitedArtifact; overload; 
    procedure ParseCitationCitedArtifactProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifact); overload;
    procedure ParseCitationCitedArtifact(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactVersion(jsn : TJsonObject) : TFhirCitationCitedArtifactVersion; overload; 
    procedure ParseCitationCitedArtifactVersionProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactVersion); overload;
    procedure ParseCitationCitedArtifactVersion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactStatusDate(jsn : TJsonObject) : TFhirCitationCitedArtifactStatusDate; overload; 
    procedure ParseCitationCitedArtifactStatusDateProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactStatusDate); overload;
    procedure ParseCitationCitedArtifactStatusDate(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactTitle(jsn : TJsonObject) : TFhirCitationCitedArtifactTitle; overload; 
    procedure ParseCitationCitedArtifactTitleProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactTitle); overload;
    procedure ParseCitationCitedArtifactTitle(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactAbstract(jsn : TJsonObject) : TFhirCitationCitedArtifactAbstract; overload; 
    procedure ParseCitationCitedArtifactAbstractProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactAbstract); overload;
    procedure ParseCitationCitedArtifactAbstract(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactPart(jsn : TJsonObject) : TFhirCitationCitedArtifactPart; overload; 
    procedure ParseCitationCitedArtifactPartProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactPart); overload;
    procedure ParseCitationCitedArtifactPart(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactRelatesTo(jsn : TJsonObject) : TFhirCitationCitedArtifactRelatesTo; overload; 
    procedure ParseCitationCitedArtifactRelatesToProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactRelatesTo); overload;
    procedure ParseCitationCitedArtifactRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactPublicationForm(jsn : TJsonObject) : TFhirCitationCitedArtifactPublicationForm; overload; 
    procedure ParseCitationCitedArtifactPublicationFormProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactPublicationForm); overload;
    procedure ParseCitationCitedArtifactPublicationForm(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactPublicationFormPublishedIn(jsn : TJsonObject) : TFhirCitationCitedArtifactPublicationFormPublishedIn; overload; 
    procedure ParseCitationCitedArtifactPublicationFormPublishedInProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactPublicationFormPublishedIn); overload;
    procedure ParseCitationCitedArtifactPublicationFormPublishedIn(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactPublicationFormPeriodicRelease(jsn : TJsonObject) : TFhirCitationCitedArtifactPublicationFormPeriodicRelease; overload; 
    procedure ParseCitationCitedArtifactPublicationFormPeriodicReleaseProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactPublicationFormPeriodicRelease); overload;
    procedure ParseCitationCitedArtifactPublicationFormPeriodicRelease(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication(jsn : TJsonObject) : TFhirCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication; overload; 
    procedure ParseCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublicationProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication); overload;
    procedure ParseCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactWebLocation(jsn : TJsonObject) : TFhirCitationCitedArtifactWebLocation; overload; 
    procedure ParseCitationCitedArtifactWebLocationProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactWebLocation); overload;
    procedure ParseCitationCitedArtifactWebLocation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactClassification(jsn : TJsonObject) : TFhirCitationCitedArtifactClassification; overload; 
    procedure ParseCitationCitedArtifactClassificationProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactClassification); overload;
    procedure ParseCitationCitedArtifactClassification(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactClassificationWhoClassified(jsn : TJsonObject) : TFhirCitationCitedArtifactClassificationWhoClassified; overload; 
    procedure ParseCitationCitedArtifactClassificationWhoClassifiedProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactClassificationWhoClassified); overload;
    procedure ParseCitationCitedArtifactClassificationWhoClassified(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactContributorship(jsn : TJsonObject) : TFhirCitationCitedArtifactContributorship; overload; 
    procedure ParseCitationCitedArtifactContributorshipProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactContributorship); overload;
    procedure ParseCitationCitedArtifactContributorship(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactContributorshipEntry(jsn : TJsonObject) : TFhirCitationCitedArtifactContributorshipEntry; overload; 
    procedure ParseCitationCitedArtifactContributorshipEntryProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactContributorshipEntry); overload;
    procedure ParseCitationCitedArtifactContributorshipEntry(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactContributorshipEntryAffiliationInfo(jsn : TJsonObject) : TFhirCitationCitedArtifactContributorshipEntryAffiliationInfo; overload; 
    procedure ParseCitationCitedArtifactContributorshipEntryAffiliationInfoProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactContributorshipEntryAffiliationInfo); overload;
    procedure ParseCitationCitedArtifactContributorshipEntryAffiliationInfo(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactContributorshipEntryContributionInstance(jsn : TJsonObject) : TFhirCitationCitedArtifactContributorshipEntryContributionInstance; overload; 
    procedure ParseCitationCitedArtifactContributorshipEntryContributionInstanceProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactContributorshipEntryContributionInstance); overload;
    procedure ParseCitationCitedArtifactContributorshipEntryContributionInstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitationCitedArtifactContributorshipSummary(jsn : TJsonObject) : TFhirCitationCitedArtifactContributorshipSummary; overload; 
    procedure ParseCitationCitedArtifactContributorshipSummaryProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactContributorshipSummary); overload;
    procedure ParseCitationCitedArtifactContributorshipSummary(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCitation(jsn : TJsonObject) : TFhirCitation; overload; 
    procedure ParseCitationProperties(jsn : TJsonObject; value : TFhirCitation); overload;
    procedure ParseCitation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CITATION}
{$IFDEF FHIR_CLAIM}
    function ParseClaimRelated(jsn : TJsonObject) : TFhirClaimRelated; overload; 
    procedure ParseClaimRelatedProperties(jsn : TJsonObject; value : TFhirClaimRelated); overload;
    procedure ParseClaimRelated(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimPayee(jsn : TJsonObject) : TFhirClaimPayee; overload; 
    procedure ParseClaimPayeeProperties(jsn : TJsonObject; value : TFhirClaimPayee); overload;
    procedure ParseClaimPayee(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimCareTeam(jsn : TJsonObject) : TFhirClaimCareTeam; overload; 
    procedure ParseClaimCareTeamProperties(jsn : TJsonObject; value : TFhirClaimCareTeam); overload;
    procedure ParseClaimCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimSupportingInfo(jsn : TJsonObject) : TFhirClaimSupportingInfo; overload; 
    procedure ParseClaimSupportingInfoProperties(jsn : TJsonObject; value : TFhirClaimSupportingInfo); overload;
    procedure ParseClaimSupportingInfo(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimDiagnosis(jsn : TJsonObject) : TFhirClaimDiagnosis; overload; 
    procedure ParseClaimDiagnosisProperties(jsn : TJsonObject; value : TFhirClaimDiagnosis); overload;
    procedure ParseClaimDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimProcedure(jsn : TJsonObject) : TFhirClaimProcedure; overload; 
    procedure ParseClaimProcedureProperties(jsn : TJsonObject; value : TFhirClaimProcedure); overload;
    procedure ParseClaimProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimInsurance(jsn : TJsonObject) : TFhirClaimInsurance; overload; 
    procedure ParseClaimInsuranceProperties(jsn : TJsonObject; value : TFhirClaimInsurance); overload;
    procedure ParseClaimInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimAccident(jsn : TJsonObject) : TFhirClaimAccident; overload; 
    procedure ParseClaimAccidentProperties(jsn : TJsonObject; value : TFhirClaimAccident); overload;
    procedure ParseClaimAccident(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimItem(jsn : TJsonObject) : TFhirClaimItem; overload; 
    procedure ParseClaimItemProperties(jsn : TJsonObject; value : TFhirClaimItem); overload;
    procedure ParseClaimItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimItemDetail(jsn : TJsonObject) : TFhirClaimItemDetail; overload; 
    procedure ParseClaimItemDetailProperties(jsn : TJsonObject; value : TFhirClaimItemDetail); overload;
    procedure ParseClaimItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimItemDetailSubDetail(jsn : TJsonObject) : TFhirClaimItemDetailSubDetail; overload; 
    procedure ParseClaimItemDetailSubDetailProperties(jsn : TJsonObject; value : TFhirClaimItemDetailSubDetail); overload;
    procedure ParseClaimItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaim(jsn : TJsonObject) : TFhirClaim; overload; 
    procedure ParseClaimProperties(jsn : TJsonObject; value : TFhirClaim); overload;
    procedure ParseClaim(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
    function ParseClaimResponseItem(jsn : TJsonObject) : TFhirClaimResponseItem; overload; 
    procedure ParseClaimResponseItemProperties(jsn : TJsonObject; value : TFhirClaimResponseItem); overload;
    procedure ParseClaimResponseItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimResponseItemAdjudication(jsn : TJsonObject) : TFhirClaimResponseItemAdjudication; overload; 
    procedure ParseClaimResponseItemAdjudicationProperties(jsn : TJsonObject; value : TFhirClaimResponseItemAdjudication); overload;
    procedure ParseClaimResponseItemAdjudication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimResponseItemDetail(jsn : TJsonObject) : TFhirClaimResponseItemDetail; overload; 
    procedure ParseClaimResponseItemDetailProperties(jsn : TJsonObject; value : TFhirClaimResponseItemDetail); overload;
    procedure ParseClaimResponseItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimResponseItemDetailSubDetail(jsn : TJsonObject) : TFhirClaimResponseItemDetailSubDetail; overload; 
    procedure ParseClaimResponseItemDetailSubDetailProperties(jsn : TJsonObject; value : TFhirClaimResponseItemDetailSubDetail); overload;
    procedure ParseClaimResponseItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimResponseAddItem(jsn : TJsonObject) : TFhirClaimResponseAddItem; overload; 
    procedure ParseClaimResponseAddItemProperties(jsn : TJsonObject; value : TFhirClaimResponseAddItem); overload;
    procedure ParseClaimResponseAddItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimResponseAddItemDetail(jsn : TJsonObject) : TFhirClaimResponseAddItemDetail; overload; 
    procedure ParseClaimResponseAddItemDetailProperties(jsn : TJsonObject; value : TFhirClaimResponseAddItemDetail); overload;
    procedure ParseClaimResponseAddItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimResponseAddItemDetailSubDetail(jsn : TJsonObject) : TFhirClaimResponseAddItemDetailSubDetail; overload; 
    procedure ParseClaimResponseAddItemDetailSubDetailProperties(jsn : TJsonObject; value : TFhirClaimResponseAddItemDetailSubDetail); overload;
    procedure ParseClaimResponseAddItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimResponseTotal(jsn : TJsonObject) : TFhirClaimResponseTotal; overload; 
    procedure ParseClaimResponseTotalProperties(jsn : TJsonObject; value : TFhirClaimResponseTotal); overload;
    procedure ParseClaimResponseTotal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimResponsePayment(jsn : TJsonObject) : TFhirClaimResponsePayment; overload; 
    procedure ParseClaimResponsePaymentProperties(jsn : TJsonObject; value : TFhirClaimResponsePayment); overload;
    procedure ParseClaimResponsePayment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimResponseProcessNote(jsn : TJsonObject) : TFhirClaimResponseProcessNote; overload; 
    procedure ParseClaimResponseProcessNoteProperties(jsn : TJsonObject; value : TFhirClaimResponseProcessNote); overload;
    procedure ParseClaimResponseProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimResponseInsurance(jsn : TJsonObject) : TFhirClaimResponseInsurance; overload; 
    procedure ParseClaimResponseInsuranceProperties(jsn : TJsonObject; value : TFhirClaimResponseInsurance); overload;
    procedure ParseClaimResponseInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimResponseError(jsn : TJsonObject) : TFhirClaimResponseError; overload; 
    procedure ParseClaimResponseErrorProperties(jsn : TJsonObject; value : TFhirClaimResponseError); overload;
    procedure ParseClaimResponseError(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClaimResponse(jsn : TJsonObject) : TFhirClaimResponse; overload; 
    procedure ParseClaimResponseProperties(jsn : TJsonObject; value : TFhirClaimResponse); overload;
    procedure ParseClaimResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
    function ParseClinicalImpressionInvestigation(jsn : TJsonObject) : TFhirClinicalImpressionInvestigation; overload; 
    procedure ParseClinicalImpressionInvestigationProperties(jsn : TJsonObject; value : TFhirClinicalImpressionInvestigation); overload;
    procedure ParseClinicalImpressionInvestigation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClinicalImpressionFinding(jsn : TJsonObject) : TFhirClinicalImpressionFinding; overload; 
    procedure ParseClinicalImpressionFindingProperties(jsn : TJsonObject; value : TFhirClinicalImpressionFinding); overload;
    procedure ParseClinicalImpressionFinding(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClinicalImpression(jsn : TJsonObject) : TFhirClinicalImpression; overload; 
    procedure ParseClinicalImpressionProperties(jsn : TJsonObject; value : TFhirClinicalImpression); overload;
    procedure ParseClinicalImpression(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CLINICALUSEDEFINITION}
    function ParseClinicalUseDefinitionContraindication(jsn : TJsonObject) : TFhirClinicalUseDefinitionContraindication; overload; 
    procedure ParseClinicalUseDefinitionContraindicationProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinitionContraindication); overload;
    procedure ParseClinicalUseDefinitionContraindication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClinicalUseDefinitionContraindicationOtherTherapy(jsn : TJsonObject) : TFhirClinicalUseDefinitionContraindicationOtherTherapy; overload; 
    procedure ParseClinicalUseDefinitionContraindicationOtherTherapyProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinitionContraindicationOtherTherapy); overload;
    procedure ParseClinicalUseDefinitionContraindicationOtherTherapy(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClinicalUseDefinitionIndication(jsn : TJsonObject) : TFhirClinicalUseDefinitionIndication; overload; 
    procedure ParseClinicalUseDefinitionIndicationProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinitionIndication); overload;
    procedure ParseClinicalUseDefinitionIndication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClinicalUseDefinitionInteraction(jsn : TJsonObject) : TFhirClinicalUseDefinitionInteraction; overload; 
    procedure ParseClinicalUseDefinitionInteractionProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinitionInteraction); overload;
    procedure ParseClinicalUseDefinitionInteraction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClinicalUseDefinitionInteractionInteractant(jsn : TJsonObject) : TFhirClinicalUseDefinitionInteractionInteractant; overload; 
    procedure ParseClinicalUseDefinitionInteractionInteractantProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinitionInteractionInteractant); overload;
    procedure ParseClinicalUseDefinitionInteractionInteractant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClinicalUseDefinitionUndesirableEffect(jsn : TJsonObject) : TFhirClinicalUseDefinitionUndesirableEffect; overload; 
    procedure ParseClinicalUseDefinitionUndesirableEffectProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinitionUndesirableEffect); overload;
    procedure ParseClinicalUseDefinitionUndesirableEffect(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClinicalUseDefinitionWarning(jsn : TJsonObject) : TFhirClinicalUseDefinitionWarning; overload; 
    procedure ParseClinicalUseDefinitionWarningProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinitionWarning); overload;
    procedure ParseClinicalUseDefinitionWarning(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseClinicalUseDefinition(jsn : TJsonObject) : TFhirClinicalUseDefinition; overload; 
    procedure ParseClinicalUseDefinitionProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinition); overload;
    procedure ParseClinicalUseDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CLINICALUSEDEFINITION}
{$IFDEF FHIR_CODESYSTEM}
    function ParseCodeSystemFilter(jsn : TJsonObject) : TFhirCodeSystemFilter; overload; 
    procedure ParseCodeSystemFilterProperties(jsn : TJsonObject; value : TFhirCodeSystemFilter); overload;
    procedure ParseCodeSystemFilter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCodeSystemProperty(jsn : TJsonObject) : TFhirCodeSystemProperty; overload; 
    procedure ParseCodeSystemPropertyProperties(jsn : TJsonObject; value : TFhirCodeSystemProperty); overload;
    procedure ParseCodeSystemProperty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCodeSystemConcept(jsn : TJsonObject) : TFhirCodeSystemConcept; overload; 
    procedure ParseCodeSystemConceptProperties(jsn : TJsonObject; value : TFhirCodeSystemConcept); overload;
    procedure ParseCodeSystemConcept(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCodeSystemConceptDesignation(jsn : TJsonObject) : TFhirCodeSystemConceptDesignation; overload; 
    procedure ParseCodeSystemConceptDesignationProperties(jsn : TJsonObject; value : TFhirCodeSystemConceptDesignation); overload;
    procedure ParseCodeSystemConceptDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCodeSystemConceptProperty(jsn : TJsonObject) : TFhirCodeSystemConceptProperty; overload; 
    procedure ParseCodeSystemConceptPropertyProperties(jsn : TJsonObject; value : TFhirCodeSystemConceptProperty); overload;
    procedure ParseCodeSystemConceptProperty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCodeSystem(jsn : TJsonObject) : TFhirCodeSystem; overload; 
    procedure ParseCodeSystemProperties(jsn : TJsonObject; value : TFhirCodeSystem); overload;
    procedure ParseCodeSystem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
    function ParseCommunicationPayload(jsn : TJsonObject) : TFhirCommunicationPayload; overload; 
    procedure ParseCommunicationPayloadProperties(jsn : TJsonObject; value : TFhirCommunicationPayload); overload;
    procedure ParseCommunicationPayload(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCommunication(jsn : TJsonObject) : TFhirCommunication; overload; 
    procedure ParseCommunicationProperties(jsn : TJsonObject; value : TFhirCommunication); overload;
    procedure ParseCommunication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
    function ParseCommunicationRequestPayload(jsn : TJsonObject) : TFhirCommunicationRequestPayload; overload; 
    procedure ParseCommunicationRequestPayloadProperties(jsn : TJsonObject; value : TFhirCommunicationRequestPayload); overload;
    procedure ParseCommunicationRequestPayload(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCommunicationRequest(jsn : TJsonObject) : TFhirCommunicationRequest; overload; 
    procedure ParseCommunicationRequestProperties(jsn : TJsonObject; value : TFhirCommunicationRequest); overload;
    procedure ParseCommunicationRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
    function ParseCompartmentDefinitionResource(jsn : TJsonObject) : TFhirCompartmentDefinitionResource; overload; 
    procedure ParseCompartmentDefinitionResourceProperties(jsn : TJsonObject; value : TFhirCompartmentDefinitionResource); overload;
    procedure ParseCompartmentDefinitionResource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCompartmentDefinition(jsn : TJsonObject) : TFhirCompartmentDefinition; overload; 
    procedure ParseCompartmentDefinitionProperties(jsn : TJsonObject; value : TFhirCompartmentDefinition); overload;
    procedure ParseCompartmentDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
    function ParseCompositionAttester(jsn : TJsonObject) : TFhirCompositionAttester; overload; 
    procedure ParseCompositionAttesterProperties(jsn : TJsonObject; value : TFhirCompositionAttester); overload;
    procedure ParseCompositionAttester(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCompositionRelatesTo(jsn : TJsonObject) : TFhirCompositionRelatesTo; overload; 
    procedure ParseCompositionRelatesToProperties(jsn : TJsonObject; value : TFhirCompositionRelatesTo); overload;
    procedure ParseCompositionRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCompositionEvent(jsn : TJsonObject) : TFhirCompositionEvent; overload; 
    procedure ParseCompositionEventProperties(jsn : TJsonObject; value : TFhirCompositionEvent); overload;
    procedure ParseCompositionEvent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCompositionSection(jsn : TJsonObject) : TFhirCompositionSection; overload; 
    procedure ParseCompositionSectionProperties(jsn : TJsonObject; value : TFhirCompositionSection); overload;
    procedure ParseCompositionSection(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseComposition(jsn : TJsonObject) : TFhirComposition; overload; 
    procedure ParseCompositionProperties(jsn : TJsonObject; value : TFhirComposition); overload;
    procedure ParseComposition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
    function ParseConceptMapGroup(jsn : TJsonObject) : TFhirConceptMapGroup; overload; 
    procedure ParseConceptMapGroupProperties(jsn : TJsonObject; value : TFhirConceptMapGroup); overload;
    procedure ParseConceptMapGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseConceptMapGroupElement(jsn : TJsonObject) : TFhirConceptMapGroupElement; overload; 
    procedure ParseConceptMapGroupElementProperties(jsn : TJsonObject; value : TFhirConceptMapGroupElement); overload;
    procedure ParseConceptMapGroupElement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseConceptMapGroupElementTarget(jsn : TJsonObject) : TFhirConceptMapGroupElementTarget; overload; 
    procedure ParseConceptMapGroupElementTargetProperties(jsn : TJsonObject; value : TFhirConceptMapGroupElementTarget); overload;
    procedure ParseConceptMapGroupElementTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseConceptMapGroupElementTargetDependsOn(jsn : TJsonObject) : TFhirConceptMapGroupElementTargetDependsOn; overload; 
    procedure ParseConceptMapGroupElementTargetDependsOnProperties(jsn : TJsonObject; value : TFhirConceptMapGroupElementTargetDependsOn); overload;
    procedure ParseConceptMapGroupElementTargetDependsOn(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseConceptMapGroupUnmapped(jsn : TJsonObject) : TFhirConceptMapGroupUnmapped; overload; 
    procedure ParseConceptMapGroupUnmappedProperties(jsn : TJsonObject; value : TFhirConceptMapGroupUnmapped); overload;
    procedure ParseConceptMapGroupUnmapped(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseConceptMap(jsn : TJsonObject) : TFhirConceptMap; overload; 
    procedure ParseConceptMapProperties(jsn : TJsonObject; value : TFhirConceptMap); overload;
    procedure ParseConceptMap(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
    function ParseConditionStage(jsn : TJsonObject) : TFhirConditionStage; overload; 
    procedure ParseConditionStageProperties(jsn : TJsonObject; value : TFhirConditionStage); overload;
    procedure ParseConditionStage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseConditionEvidence(jsn : TJsonObject) : TFhirConditionEvidence; overload; 
    procedure ParseConditionEvidenceProperties(jsn : TJsonObject; value : TFhirConditionEvidence); overload;
    procedure ParseConditionEvidence(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCondition(jsn : TJsonObject) : TFhirCondition; overload; 
    procedure ParseConditionProperties(jsn : TJsonObject; value : TFhirCondition); overload;
    procedure ParseCondition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
    function ParseConsentPolicy(jsn : TJsonObject) : TFhirConsentPolicy; overload; 
    procedure ParseConsentPolicyProperties(jsn : TJsonObject; value : TFhirConsentPolicy); overload;
    procedure ParseConsentPolicy(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseConsentVerification(jsn : TJsonObject) : TFhirConsentVerification; overload; 
    procedure ParseConsentVerificationProperties(jsn : TJsonObject; value : TFhirConsentVerification); overload;
    procedure ParseConsentVerification(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseConsentProvision(jsn : TJsonObject) : TFhirConsentProvision; overload; 
    procedure ParseConsentProvisionProperties(jsn : TJsonObject; value : TFhirConsentProvision); overload;
    procedure ParseConsentProvision(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseConsentProvisionActor(jsn : TJsonObject) : TFhirConsentProvisionActor; overload; 
    procedure ParseConsentProvisionActorProperties(jsn : TJsonObject; value : TFhirConsentProvisionActor); overload;
    procedure ParseConsentProvisionActor(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseConsentProvisionData(jsn : TJsonObject) : TFhirConsentProvisionData; overload; 
    procedure ParseConsentProvisionDataProperties(jsn : TJsonObject; value : TFhirConsentProvisionData); overload;
    procedure ParseConsentProvisionData(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseConsent(jsn : TJsonObject) : TFhirConsent; overload; 
    procedure ParseConsentProperties(jsn : TJsonObject; value : TFhirConsent); overload;
    procedure ParseConsent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
    function ParseContractContentDefinition(jsn : TJsonObject) : TFhirContractContentDefinition; overload; 
    procedure ParseContractContentDefinitionProperties(jsn : TJsonObject; value : TFhirContractContentDefinition); overload;
    procedure ParseContractContentDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContractTerm(jsn : TJsonObject) : TFhirContractTerm; overload; 
    procedure ParseContractTermProperties(jsn : TJsonObject; value : TFhirContractTerm); overload;
    procedure ParseContractTerm(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContractTermSecurityLabel(jsn : TJsonObject) : TFhirContractTermSecurityLabel; overload; 
    procedure ParseContractTermSecurityLabelProperties(jsn : TJsonObject; value : TFhirContractTermSecurityLabel); overload;
    procedure ParseContractTermSecurityLabel(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContractTermOffer(jsn : TJsonObject) : TFhirContractTermOffer; overload; 
    procedure ParseContractTermOfferProperties(jsn : TJsonObject; value : TFhirContractTermOffer); overload;
    procedure ParseContractTermOffer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContractTermOfferParty(jsn : TJsonObject) : TFhirContractTermOfferParty; overload; 
    procedure ParseContractTermOfferPartyProperties(jsn : TJsonObject; value : TFhirContractTermOfferParty); overload;
    procedure ParseContractTermOfferParty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContractTermOfferAnswer(jsn : TJsonObject) : TFhirContractTermOfferAnswer; overload; 
    procedure ParseContractTermOfferAnswerProperties(jsn : TJsonObject; value : TFhirContractTermOfferAnswer); overload;
    procedure ParseContractTermOfferAnswer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContractTermAsset(jsn : TJsonObject) : TFhirContractTermAsset; overload; 
    procedure ParseContractTermAssetProperties(jsn : TJsonObject; value : TFhirContractTermAsset); overload;
    procedure ParseContractTermAsset(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContractTermAssetContext(jsn : TJsonObject) : TFhirContractTermAssetContext; overload; 
    procedure ParseContractTermAssetContextProperties(jsn : TJsonObject; value : TFhirContractTermAssetContext); overload;
    procedure ParseContractTermAssetContext(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContractTermAssetValuedItem(jsn : TJsonObject) : TFhirContractTermAssetValuedItem; overload; 
    procedure ParseContractTermAssetValuedItemProperties(jsn : TJsonObject; value : TFhirContractTermAssetValuedItem); overload;
    procedure ParseContractTermAssetValuedItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContractTermAction(jsn : TJsonObject) : TFhirContractTermAction; overload; 
    procedure ParseContractTermActionProperties(jsn : TJsonObject; value : TFhirContractTermAction); overload;
    procedure ParseContractTermAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContractTermActionSubject(jsn : TJsonObject) : TFhirContractTermActionSubject; overload; 
    procedure ParseContractTermActionSubjectProperties(jsn : TJsonObject; value : TFhirContractTermActionSubject); overload;
    procedure ParseContractTermActionSubject(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContractSigner(jsn : TJsonObject) : TFhirContractSigner; overload; 
    procedure ParseContractSignerProperties(jsn : TJsonObject; value : TFhirContractSigner); overload;
    procedure ParseContractSigner(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContractFriendly(jsn : TJsonObject) : TFhirContractFriendly; overload; 
    procedure ParseContractFriendlyProperties(jsn : TJsonObject; value : TFhirContractFriendly); overload;
    procedure ParseContractFriendly(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContractLegal(jsn : TJsonObject) : TFhirContractLegal; overload; 
    procedure ParseContractLegalProperties(jsn : TJsonObject; value : TFhirContractLegal); overload;
    procedure ParseContractLegal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContractRule(jsn : TJsonObject) : TFhirContractRule; overload; 
    procedure ParseContractRuleProperties(jsn : TJsonObject; value : TFhirContractRule); overload;
    procedure ParseContractRule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseContract(jsn : TJsonObject) : TFhirContract; overload; 
    procedure ParseContractProperties(jsn : TJsonObject; value : TFhirContract); overload;
    procedure ParseContract(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
    function ParseCoverageClass(jsn : TJsonObject) : TFhirCoverageClass; overload; 
    procedure ParseCoverageClassProperties(jsn : TJsonObject; value : TFhirCoverageClass); overload;
    procedure ParseCoverageClass(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCoverageCostToBeneficiary(jsn : TJsonObject) : TFhirCoverageCostToBeneficiary; overload; 
    procedure ParseCoverageCostToBeneficiaryProperties(jsn : TJsonObject; value : TFhirCoverageCostToBeneficiary); overload;
    procedure ParseCoverageCostToBeneficiary(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCoverageCostToBeneficiaryException(jsn : TJsonObject) : TFhirCoverageCostToBeneficiaryException; overload; 
    procedure ParseCoverageCostToBeneficiaryExceptionProperties(jsn : TJsonObject; value : TFhirCoverageCostToBeneficiaryException); overload;
    procedure ParseCoverageCostToBeneficiaryException(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCoverage(jsn : TJsonObject) : TFhirCoverage; overload; 
    procedure ParseCoverageProperties(jsn : TJsonObject; value : TFhirCoverage); overload;
    procedure ParseCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
    function ParseCoverageEligibilityRequestSupportingInfo(jsn : TJsonObject) : TFhirCoverageEligibilityRequestSupportingInfo; overload; 
    procedure ParseCoverageEligibilityRequestSupportingInfoProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityRequestSupportingInfo); overload;
    procedure ParseCoverageEligibilityRequestSupportingInfo(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCoverageEligibilityRequestInsurance(jsn : TJsonObject) : TFhirCoverageEligibilityRequestInsurance; overload; 
    procedure ParseCoverageEligibilityRequestInsuranceProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityRequestInsurance); overload;
    procedure ParseCoverageEligibilityRequestInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCoverageEligibilityRequestItem(jsn : TJsonObject) : TFhirCoverageEligibilityRequestItem; overload; 
    procedure ParseCoverageEligibilityRequestItemProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityRequestItem); overload;
    procedure ParseCoverageEligibilityRequestItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCoverageEligibilityRequestItemDiagnosis(jsn : TJsonObject) : TFhirCoverageEligibilityRequestItemDiagnosis; overload; 
    procedure ParseCoverageEligibilityRequestItemDiagnosisProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityRequestItemDiagnosis); overload;
    procedure ParseCoverageEligibilityRequestItemDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCoverageEligibilityRequest(jsn : TJsonObject) : TFhirCoverageEligibilityRequest; overload; 
    procedure ParseCoverageEligibilityRequestProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityRequest); overload;
    procedure ParseCoverageEligibilityRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
    function ParseCoverageEligibilityResponseInsurance(jsn : TJsonObject) : TFhirCoverageEligibilityResponseInsurance; overload; 
    procedure ParseCoverageEligibilityResponseInsuranceProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityResponseInsurance); overload;
    procedure ParseCoverageEligibilityResponseInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCoverageEligibilityResponseInsuranceItem(jsn : TJsonObject) : TFhirCoverageEligibilityResponseInsuranceItem; overload; 
    procedure ParseCoverageEligibilityResponseInsuranceItemProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityResponseInsuranceItem); overload;
    procedure ParseCoverageEligibilityResponseInsuranceItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCoverageEligibilityResponseInsuranceItemBenefit(jsn : TJsonObject) : TFhirCoverageEligibilityResponseInsuranceItemBenefit; overload; 
    procedure ParseCoverageEligibilityResponseInsuranceItemBenefitProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityResponseInsuranceItemBenefit); overload;
    procedure ParseCoverageEligibilityResponseInsuranceItemBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCoverageEligibilityResponseError(jsn : TJsonObject) : TFhirCoverageEligibilityResponseError; overload; 
    procedure ParseCoverageEligibilityResponseErrorProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityResponseError); overload;
    procedure ParseCoverageEligibilityResponseError(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseCoverageEligibilityResponse(jsn : TJsonObject) : TFhirCoverageEligibilityResponse; overload; 
    procedure ParseCoverageEligibilityResponseProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityResponse); overload;
    procedure ParseCoverageEligibilityResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
    function ParseDetectedIssueEvidence(jsn : TJsonObject) : TFhirDetectedIssueEvidence; overload; 
    procedure ParseDetectedIssueEvidenceProperties(jsn : TJsonObject; value : TFhirDetectedIssueEvidence); overload;
    procedure ParseDetectedIssueEvidence(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDetectedIssueMitigation(jsn : TJsonObject) : TFhirDetectedIssueMitigation; overload; 
    procedure ParseDetectedIssueMitigationProperties(jsn : TJsonObject; value : TFhirDetectedIssueMitigation); overload;
    procedure ParseDetectedIssueMitigation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDetectedIssue(jsn : TJsonObject) : TFhirDetectedIssue; overload; 
    procedure ParseDetectedIssueProperties(jsn : TJsonObject; value : TFhirDetectedIssue); overload;
    procedure ParseDetectedIssue(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
    function ParseDeviceUdiCarrier(jsn : TJsonObject) : TFhirDeviceUdiCarrier; overload; 
    procedure ParseDeviceUdiCarrierProperties(jsn : TJsonObject; value : TFhirDeviceUdiCarrier); overload;
    procedure ParseDeviceUdiCarrier(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDeviceDeviceName(jsn : TJsonObject) : TFhirDeviceDeviceName; overload; 
    procedure ParseDeviceDeviceNameProperties(jsn : TJsonObject; value : TFhirDeviceDeviceName); overload;
    procedure ParseDeviceDeviceName(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDeviceSpecialization(jsn : TJsonObject) : TFhirDeviceSpecialization; overload; 
    procedure ParseDeviceSpecializationProperties(jsn : TJsonObject; value : TFhirDeviceSpecialization); overload;
    procedure ParseDeviceSpecialization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDeviceVersion(jsn : TJsonObject) : TFhirDeviceVersion; overload; 
    procedure ParseDeviceVersionProperties(jsn : TJsonObject; value : TFhirDeviceVersion); overload;
    procedure ParseDeviceVersion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDeviceProperty(jsn : TJsonObject) : TFhirDeviceProperty; overload; 
    procedure ParseDevicePropertyProperties(jsn : TJsonObject; value : TFhirDeviceProperty); overload;
    procedure ParseDeviceProperty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDevice(jsn : TJsonObject) : TFhirDevice; overload; 
    procedure ParseDeviceProperties(jsn : TJsonObject; value : TFhirDevice); overload;
    procedure ParseDevice(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
    function ParseDeviceDefinitionUdiDeviceIdentifier(jsn : TJsonObject) : TFhirDeviceDefinitionUdiDeviceIdentifier; overload; 
    procedure ParseDeviceDefinitionUdiDeviceIdentifierProperties(jsn : TJsonObject; value : TFhirDeviceDefinitionUdiDeviceIdentifier); overload;
    procedure ParseDeviceDefinitionUdiDeviceIdentifier(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDeviceDefinitionDeviceName(jsn : TJsonObject) : TFhirDeviceDefinitionDeviceName; overload; 
    procedure ParseDeviceDefinitionDeviceNameProperties(jsn : TJsonObject; value : TFhirDeviceDefinitionDeviceName); overload;
    procedure ParseDeviceDefinitionDeviceName(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDeviceDefinitionSpecialization(jsn : TJsonObject) : TFhirDeviceDefinitionSpecialization; overload; 
    procedure ParseDeviceDefinitionSpecializationProperties(jsn : TJsonObject; value : TFhirDeviceDefinitionSpecialization); overload;
    procedure ParseDeviceDefinitionSpecialization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDeviceDefinitionCapability(jsn : TJsonObject) : TFhirDeviceDefinitionCapability; overload; 
    procedure ParseDeviceDefinitionCapabilityProperties(jsn : TJsonObject; value : TFhirDeviceDefinitionCapability); overload;
    procedure ParseDeviceDefinitionCapability(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDeviceDefinitionProperty(jsn : TJsonObject) : TFhirDeviceDefinitionProperty; overload; 
    procedure ParseDeviceDefinitionPropertyProperties(jsn : TJsonObject; value : TFhirDeviceDefinitionProperty); overload;
    procedure ParseDeviceDefinitionProperty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDeviceDefinitionMaterial(jsn : TJsonObject) : TFhirDeviceDefinitionMaterial; overload; 
    procedure ParseDeviceDefinitionMaterialProperties(jsn : TJsonObject; value : TFhirDeviceDefinitionMaterial); overload;
    procedure ParseDeviceDefinitionMaterial(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDeviceDefinition(jsn : TJsonObject) : TFhirDeviceDefinition; overload; 
    procedure ParseDeviceDefinitionProperties(jsn : TJsonObject; value : TFhirDeviceDefinition); overload;
    procedure ParseDeviceDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
    function ParseDeviceMetricCalibration(jsn : TJsonObject) : TFhirDeviceMetricCalibration; overload; 
    procedure ParseDeviceMetricCalibrationProperties(jsn : TJsonObject; value : TFhirDeviceMetricCalibration); overload;
    procedure ParseDeviceMetricCalibration(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDeviceMetric(jsn : TJsonObject) : TFhirDeviceMetric; overload; 
    procedure ParseDeviceMetricProperties(jsn : TJsonObject; value : TFhirDeviceMetric); overload;
    procedure ParseDeviceMetric(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
    function ParseDeviceRequestParameter(jsn : TJsonObject) : TFhirDeviceRequestParameter; overload; 
    procedure ParseDeviceRequestParameterProperties(jsn : TJsonObject; value : TFhirDeviceRequestParameter); overload;
    procedure ParseDeviceRequestParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDeviceRequest(jsn : TJsonObject) : TFhirDeviceRequest; overload; 
    procedure ParseDeviceRequestProperties(jsn : TJsonObject; value : TFhirDeviceRequest); overload;
    procedure ParseDeviceRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
    function ParseDeviceUseStatement(jsn : TJsonObject) : TFhirDeviceUseStatement; overload; 
    procedure ParseDeviceUseStatementProperties(jsn : TJsonObject; value : TFhirDeviceUseStatement); overload;
    procedure ParseDeviceUseStatement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
    function ParseDiagnosticReportMedia(jsn : TJsonObject) : TFhirDiagnosticReportMedia; overload; 
    procedure ParseDiagnosticReportMediaProperties(jsn : TJsonObject; value : TFhirDiagnosticReportMedia); overload;
    procedure ParseDiagnosticReportMedia(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDiagnosticReport(jsn : TJsonObject) : TFhirDiagnosticReport; overload; 
    procedure ParseDiagnosticReportProperties(jsn : TJsonObject; value : TFhirDiagnosticReport); overload;
    procedure ParseDiagnosticReport(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
    function ParseDocumentManifestRelated(jsn : TJsonObject) : TFhirDocumentManifestRelated; overload; 
    procedure ParseDocumentManifestRelatedProperties(jsn : TJsonObject; value : TFhirDocumentManifestRelated); overload;
    procedure ParseDocumentManifestRelated(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDocumentManifest(jsn : TJsonObject) : TFhirDocumentManifest; overload; 
    procedure ParseDocumentManifestProperties(jsn : TJsonObject; value : TFhirDocumentManifest); overload;
    procedure ParseDocumentManifest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
    function ParseDocumentReferenceRelatesTo(jsn : TJsonObject) : TFhirDocumentReferenceRelatesTo; overload; 
    procedure ParseDocumentReferenceRelatesToProperties(jsn : TJsonObject; value : TFhirDocumentReferenceRelatesTo); overload;
    procedure ParseDocumentReferenceRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDocumentReferenceContent(jsn : TJsonObject) : TFhirDocumentReferenceContent; overload; 
    procedure ParseDocumentReferenceContentProperties(jsn : TJsonObject; value : TFhirDocumentReferenceContent); overload;
    procedure ParseDocumentReferenceContent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDocumentReferenceContext(jsn : TJsonObject) : TFhirDocumentReferenceContext; overload; 
    procedure ParseDocumentReferenceContextProperties(jsn : TJsonObject; value : TFhirDocumentReferenceContext); overload;
    procedure ParseDocumentReferenceContext(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseDocumentReference(jsn : TJsonObject) : TFhirDocumentReference; overload; 
    procedure ParseDocumentReferenceProperties(jsn : TJsonObject; value : TFhirDocumentReference); overload;
    procedure ParseDocumentReference(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ENCOUNTER}
    function ParseEncounterStatusHistory(jsn : TJsonObject) : TFhirEncounterStatusHistory; overload; 
    procedure ParseEncounterStatusHistoryProperties(jsn : TJsonObject; value : TFhirEncounterStatusHistory); overload;
    procedure ParseEncounterStatusHistory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEncounterClassHistory(jsn : TJsonObject) : TFhirEncounterClassHistory; overload; 
    procedure ParseEncounterClassHistoryProperties(jsn : TJsonObject; value : TFhirEncounterClassHistory); overload;
    procedure ParseEncounterClassHistory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEncounterParticipant(jsn : TJsonObject) : TFhirEncounterParticipant; overload; 
    procedure ParseEncounterParticipantProperties(jsn : TJsonObject; value : TFhirEncounterParticipant); overload;
    procedure ParseEncounterParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEncounterDiagnosis(jsn : TJsonObject) : TFhirEncounterDiagnosis; overload; 
    procedure ParseEncounterDiagnosisProperties(jsn : TJsonObject; value : TFhirEncounterDiagnosis); overload;
    procedure ParseEncounterDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEncounterHospitalization(jsn : TJsonObject) : TFhirEncounterHospitalization; overload; 
    procedure ParseEncounterHospitalizationProperties(jsn : TJsonObject; value : TFhirEncounterHospitalization); overload;
    procedure ParseEncounterHospitalization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEncounterLocation(jsn : TJsonObject) : TFhirEncounterLocation; overload; 
    procedure ParseEncounterLocationProperties(jsn : TJsonObject; value : TFhirEncounterLocation); overload;
    procedure ParseEncounterLocation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEncounter(jsn : TJsonObject) : TFhirEncounter; overload; 
    procedure ParseEncounterProperties(jsn : TJsonObject; value : TFhirEncounter); overload;
    procedure ParseEncounter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
    function ParseEndpoint(jsn : TJsonObject) : TFhirEndpoint; overload; 
    procedure ParseEndpointProperties(jsn : TJsonObject; value : TFhirEndpoint); overload;
    procedure ParseEndpoint(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
    function ParseEnrollmentRequest(jsn : TJsonObject) : TFhirEnrollmentRequest; overload; 
    procedure ParseEnrollmentRequestProperties(jsn : TJsonObject; value : TFhirEnrollmentRequest); overload;
    procedure ParseEnrollmentRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
    function ParseEnrollmentResponse(jsn : TJsonObject) : TFhirEnrollmentResponse; overload; 
    procedure ParseEnrollmentResponseProperties(jsn : TJsonObject; value : TFhirEnrollmentResponse); overload;
    procedure ParseEnrollmentResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
    function ParseEpisodeOfCareStatusHistory(jsn : TJsonObject) : TFhirEpisodeOfCareStatusHistory; overload; 
    procedure ParseEpisodeOfCareStatusHistoryProperties(jsn : TJsonObject; value : TFhirEpisodeOfCareStatusHistory); overload;
    procedure ParseEpisodeOfCareStatusHistory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEpisodeOfCareDiagnosis(jsn : TJsonObject) : TFhirEpisodeOfCareDiagnosis; overload; 
    procedure ParseEpisodeOfCareDiagnosisProperties(jsn : TJsonObject; value : TFhirEpisodeOfCareDiagnosis); overload;
    procedure ParseEpisodeOfCareDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEpisodeOfCare(jsn : TJsonObject) : TFhirEpisodeOfCare; overload; 
    procedure ParseEpisodeOfCareProperties(jsn : TJsonObject; value : TFhirEpisodeOfCare); overload;
    procedure ParseEpisodeOfCare(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
    function ParseEventDefinition(jsn : TJsonObject) : TFhirEventDefinition; overload; 
    procedure ParseEventDefinitionProperties(jsn : TJsonObject; value : TFhirEventDefinition); overload;
    procedure ParseEventDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
    function ParseEvidenceVariableDefinition(jsn : TJsonObject) : TFhirEvidenceVariableDefinition; overload; 
    procedure ParseEvidenceVariableDefinitionProperties(jsn : TJsonObject; value : TFhirEvidenceVariableDefinition); overload;
    procedure ParseEvidenceVariableDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEvidenceStatistic(jsn : TJsonObject) : TFhirEvidenceStatistic; overload; 
    procedure ParseEvidenceStatisticProperties(jsn : TJsonObject; value : TFhirEvidenceStatistic); overload;
    procedure ParseEvidenceStatistic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEvidenceStatisticSampleSize(jsn : TJsonObject) : TFhirEvidenceStatisticSampleSize; overload; 
    procedure ParseEvidenceStatisticSampleSizeProperties(jsn : TJsonObject; value : TFhirEvidenceStatisticSampleSize); overload;
    procedure ParseEvidenceStatisticSampleSize(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEvidenceStatisticAttributeEstimate(jsn : TJsonObject) : TFhirEvidenceStatisticAttributeEstimate; overload; 
    procedure ParseEvidenceStatisticAttributeEstimateProperties(jsn : TJsonObject; value : TFhirEvidenceStatisticAttributeEstimate); overload;
    procedure ParseEvidenceStatisticAttributeEstimate(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEvidenceStatisticModelCharacteristic(jsn : TJsonObject) : TFhirEvidenceStatisticModelCharacteristic; overload; 
    procedure ParseEvidenceStatisticModelCharacteristicProperties(jsn : TJsonObject; value : TFhirEvidenceStatisticModelCharacteristic); overload;
    procedure ParseEvidenceStatisticModelCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEvidenceStatisticModelCharacteristicVariable(jsn : TJsonObject) : TFhirEvidenceStatisticModelCharacteristicVariable; overload; 
    procedure ParseEvidenceStatisticModelCharacteristicVariableProperties(jsn : TJsonObject; value : TFhirEvidenceStatisticModelCharacteristicVariable); overload;
    procedure ParseEvidenceStatisticModelCharacteristicVariable(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEvidenceCertainty(jsn : TJsonObject) : TFhirEvidenceCertainty; overload; 
    procedure ParseEvidenceCertaintyProperties(jsn : TJsonObject; value : TFhirEvidenceCertainty); overload;
    procedure ParseEvidenceCertainty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEvidence(jsn : TJsonObject) : TFhirEvidence; overload; 
    procedure ParseEvidenceProperties(jsn : TJsonObject; value : TFhirEvidence); overload;
    procedure ParseEvidence(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEREPORT}
    function ParseEvidenceReportSubject(jsn : TJsonObject) : TFhirEvidenceReportSubject; overload; 
    procedure ParseEvidenceReportSubjectProperties(jsn : TJsonObject; value : TFhirEvidenceReportSubject); overload;
    procedure ParseEvidenceReportSubject(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEvidenceReportSubjectCharacteristic(jsn : TJsonObject) : TFhirEvidenceReportSubjectCharacteristic; overload; 
    procedure ParseEvidenceReportSubjectCharacteristicProperties(jsn : TJsonObject; value : TFhirEvidenceReportSubjectCharacteristic); overload;
    procedure ParseEvidenceReportSubjectCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEvidenceReportRelatesTo(jsn : TJsonObject) : TFhirEvidenceReportRelatesTo; overload; 
    procedure ParseEvidenceReportRelatesToProperties(jsn : TJsonObject; value : TFhirEvidenceReportRelatesTo); overload;
    procedure ParseEvidenceReportRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEvidenceReportSection(jsn : TJsonObject) : TFhirEvidenceReportSection; overload; 
    procedure ParseEvidenceReportSectionProperties(jsn : TJsonObject; value : TFhirEvidenceReportSection); overload;
    procedure ParseEvidenceReportSection(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEvidenceReport(jsn : TJsonObject) : TFhirEvidenceReport; overload; 
    procedure ParseEvidenceReportProperties(jsn : TJsonObject; value : TFhirEvidenceReport); overload;
    procedure ParseEvidenceReport(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_EVIDENCEREPORT}
{$IFDEF FHIR_EVIDENCEVARIABLE}
    function ParseEvidenceVariableCharacteristic(jsn : TJsonObject) : TFhirEvidenceVariableCharacteristic; overload; 
    procedure ParseEvidenceVariableCharacteristicProperties(jsn : TJsonObject; value : TFhirEvidenceVariableCharacteristic); overload;
    procedure ParseEvidenceVariableCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEvidenceVariableCharacteristicTimeFromStart(jsn : TJsonObject) : TFhirEvidenceVariableCharacteristicTimeFromStart; overload; 
    procedure ParseEvidenceVariableCharacteristicTimeFromStartProperties(jsn : TJsonObject; value : TFhirEvidenceVariableCharacteristicTimeFromStart); overload;
    procedure ParseEvidenceVariableCharacteristicTimeFromStart(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEvidenceVariableCategory(jsn : TJsonObject) : TFhirEvidenceVariableCategory; overload; 
    procedure ParseEvidenceVariableCategoryProperties(jsn : TJsonObject; value : TFhirEvidenceVariableCategory); overload;
    procedure ParseEvidenceVariableCategory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseEvidenceVariable(jsn : TJsonObject) : TFhirEvidenceVariable; overload; 
    procedure ParseEvidenceVariableProperties(jsn : TJsonObject; value : TFhirEvidenceVariable); overload;
    procedure ParseEvidenceVariable(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
    function ParseExampleScenarioActor(jsn : TJsonObject) : TFhirExampleScenarioActor; overload; 
    procedure ParseExampleScenarioActorProperties(jsn : TJsonObject; value : TFhirExampleScenarioActor); overload;
    procedure ParseExampleScenarioActor(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExampleScenarioInstance(jsn : TJsonObject) : TFhirExampleScenarioInstance; overload; 
    procedure ParseExampleScenarioInstanceProperties(jsn : TJsonObject; value : TFhirExampleScenarioInstance); overload;
    procedure ParseExampleScenarioInstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExampleScenarioInstanceVersion(jsn : TJsonObject) : TFhirExampleScenarioInstanceVersion; overload; 
    procedure ParseExampleScenarioInstanceVersionProperties(jsn : TJsonObject; value : TFhirExampleScenarioInstanceVersion); overload;
    procedure ParseExampleScenarioInstanceVersion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExampleScenarioInstanceContainedInstance(jsn : TJsonObject) : TFhirExampleScenarioInstanceContainedInstance; overload; 
    procedure ParseExampleScenarioInstanceContainedInstanceProperties(jsn : TJsonObject; value : TFhirExampleScenarioInstanceContainedInstance); overload;
    procedure ParseExampleScenarioInstanceContainedInstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExampleScenarioProcess(jsn : TJsonObject) : TFhirExampleScenarioProcess; overload; 
    procedure ParseExampleScenarioProcessProperties(jsn : TJsonObject; value : TFhirExampleScenarioProcess); overload;
    procedure ParseExampleScenarioProcess(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExampleScenarioProcessStep(jsn : TJsonObject) : TFhirExampleScenarioProcessStep; overload; 
    procedure ParseExampleScenarioProcessStepProperties(jsn : TJsonObject; value : TFhirExampleScenarioProcessStep); overload;
    procedure ParseExampleScenarioProcessStep(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExampleScenarioProcessStepOperation(jsn : TJsonObject) : TFhirExampleScenarioProcessStepOperation; overload; 
    procedure ParseExampleScenarioProcessStepOperationProperties(jsn : TJsonObject; value : TFhirExampleScenarioProcessStepOperation); overload;
    procedure ParseExampleScenarioProcessStepOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExampleScenarioProcessStepAlternative(jsn : TJsonObject) : TFhirExampleScenarioProcessStepAlternative; overload; 
    procedure ParseExampleScenarioProcessStepAlternativeProperties(jsn : TJsonObject; value : TFhirExampleScenarioProcessStepAlternative); overload;
    procedure ParseExampleScenarioProcessStepAlternative(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExampleScenario(jsn : TJsonObject) : TFhirExampleScenario; overload; 
    procedure ParseExampleScenarioProperties(jsn : TJsonObject; value : TFhirExampleScenario); overload;
    procedure ParseExampleScenario(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
    function ParseExplanationOfBenefitRelated(jsn : TJsonObject) : TFhirExplanationOfBenefitRelated; overload; 
    procedure ParseExplanationOfBenefitRelatedProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitRelated); overload;
    procedure ParseExplanationOfBenefitRelated(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitPayee(jsn : TJsonObject) : TFhirExplanationOfBenefitPayee; overload; 
    procedure ParseExplanationOfBenefitPayeeProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitPayee); overload;
    procedure ParseExplanationOfBenefitPayee(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitCareTeam(jsn : TJsonObject) : TFhirExplanationOfBenefitCareTeam; overload; 
    procedure ParseExplanationOfBenefitCareTeamProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitCareTeam); overload;
    procedure ParseExplanationOfBenefitCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitSupportingInfo(jsn : TJsonObject) : TFhirExplanationOfBenefitSupportingInfo; overload; 
    procedure ParseExplanationOfBenefitSupportingInfoProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitSupportingInfo); overload;
    procedure ParseExplanationOfBenefitSupportingInfo(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitDiagnosis(jsn : TJsonObject) : TFhirExplanationOfBenefitDiagnosis; overload; 
    procedure ParseExplanationOfBenefitDiagnosisProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitDiagnosis); overload;
    procedure ParseExplanationOfBenefitDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitProcedure(jsn : TJsonObject) : TFhirExplanationOfBenefitProcedure; overload; 
    procedure ParseExplanationOfBenefitProcedureProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitProcedure); overload;
    procedure ParseExplanationOfBenefitProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitInsurance(jsn : TJsonObject) : TFhirExplanationOfBenefitInsurance; overload; 
    procedure ParseExplanationOfBenefitInsuranceProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitInsurance); overload;
    procedure ParseExplanationOfBenefitInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitAccident(jsn : TJsonObject) : TFhirExplanationOfBenefitAccident; overload; 
    procedure ParseExplanationOfBenefitAccidentProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitAccident); overload;
    procedure ParseExplanationOfBenefitAccident(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitItem(jsn : TJsonObject) : TFhirExplanationOfBenefitItem; overload; 
    procedure ParseExplanationOfBenefitItemProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitItem); overload;
    procedure ParseExplanationOfBenefitItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitItemAdjudication(jsn : TJsonObject) : TFhirExplanationOfBenefitItemAdjudication; overload; 
    procedure ParseExplanationOfBenefitItemAdjudicationProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitItemAdjudication); overload;
    procedure ParseExplanationOfBenefitItemAdjudication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitItemDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitItemDetail; overload; 
    procedure ParseExplanationOfBenefitItemDetailProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitItemDetail); overload;
    procedure ParseExplanationOfBenefitItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitItemDetailSubDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitItemDetailSubDetail; overload; 
    procedure ParseExplanationOfBenefitItemDetailSubDetailProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitItemDetailSubDetail); overload;
    procedure ParseExplanationOfBenefitItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitAddItem(jsn : TJsonObject) : TFhirExplanationOfBenefitAddItem; overload; 
    procedure ParseExplanationOfBenefitAddItemProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitAddItem); overload;
    procedure ParseExplanationOfBenefitAddItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitAddItemDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitAddItemDetail; overload; 
    procedure ParseExplanationOfBenefitAddItemDetailProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitAddItemDetail); overload;
    procedure ParseExplanationOfBenefitAddItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitAddItemDetailSubDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitAddItemDetailSubDetail; overload; 
    procedure ParseExplanationOfBenefitAddItemDetailSubDetailProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitAddItemDetailSubDetail); overload;
    procedure ParseExplanationOfBenefitAddItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitTotal(jsn : TJsonObject) : TFhirExplanationOfBenefitTotal; overload; 
    procedure ParseExplanationOfBenefitTotalProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitTotal); overload;
    procedure ParseExplanationOfBenefitTotal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitPayment(jsn : TJsonObject) : TFhirExplanationOfBenefitPayment; overload; 
    procedure ParseExplanationOfBenefitPaymentProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitPayment); overload;
    procedure ParseExplanationOfBenefitPayment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitProcessNote(jsn : TJsonObject) : TFhirExplanationOfBenefitProcessNote; overload; 
    procedure ParseExplanationOfBenefitProcessNoteProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitProcessNote); overload;
    procedure ParseExplanationOfBenefitProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitBenefitBalance(jsn : TJsonObject) : TFhirExplanationOfBenefitBenefitBalance; overload; 
    procedure ParseExplanationOfBenefitBenefitBalanceProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitBenefitBalance); overload;
    procedure ParseExplanationOfBenefitBenefitBalance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefitBenefitBalanceFinancial(jsn : TJsonObject) : TFhirExplanationOfBenefitBenefitBalanceFinancial; overload; 
    procedure ParseExplanationOfBenefitBenefitBalanceFinancialProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitBenefitBalanceFinancial); overload;
    procedure ParseExplanationOfBenefitBenefitBalanceFinancial(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseExplanationOfBenefit(jsn : TJsonObject) : TFhirExplanationOfBenefit; overload; 
    procedure ParseExplanationOfBenefitProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefit); overload;
    procedure ParseExplanationOfBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
    function ParseFamilyMemberHistoryCondition(jsn : TJsonObject) : TFhirFamilyMemberHistoryCondition; overload; 
    procedure ParseFamilyMemberHistoryConditionProperties(jsn : TJsonObject; value : TFhirFamilyMemberHistoryCondition); overload;
    procedure ParseFamilyMemberHistoryCondition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseFamilyMemberHistory(jsn : TJsonObject) : TFhirFamilyMemberHistory; overload; 
    procedure ParseFamilyMemberHistoryProperties(jsn : TJsonObject; value : TFhirFamilyMemberHistory); overload;
    procedure ParseFamilyMemberHistory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
    function ParseFlag(jsn : TJsonObject) : TFhirFlag; overload; 
    procedure ParseFlagProperties(jsn : TJsonObject; value : TFhirFlag); overload;
    procedure ParseFlag(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
    function ParseGoalTarget(jsn : TJsonObject) : TFhirGoalTarget; overload; 
    procedure ParseGoalTargetProperties(jsn : TJsonObject; value : TFhirGoalTarget); overload;
    procedure ParseGoalTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseGoal(jsn : TJsonObject) : TFhirGoal; overload; 
    procedure ParseGoalProperties(jsn : TJsonObject; value : TFhirGoal); overload;
    procedure ParseGoal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
    function ParseGraphDefinitionLink(jsn : TJsonObject) : TFhirGraphDefinitionLink; overload; 
    procedure ParseGraphDefinitionLinkProperties(jsn : TJsonObject; value : TFhirGraphDefinitionLink); overload;
    procedure ParseGraphDefinitionLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseGraphDefinitionLinkTarget(jsn : TJsonObject) : TFhirGraphDefinitionLinkTarget; overload; 
    procedure ParseGraphDefinitionLinkTargetProperties(jsn : TJsonObject; value : TFhirGraphDefinitionLinkTarget); overload;
    procedure ParseGraphDefinitionLinkTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseGraphDefinitionLinkTargetCompartment(jsn : TJsonObject) : TFhirGraphDefinitionLinkTargetCompartment; overload; 
    procedure ParseGraphDefinitionLinkTargetCompartmentProperties(jsn : TJsonObject; value : TFhirGraphDefinitionLinkTargetCompartment); overload;
    procedure ParseGraphDefinitionLinkTargetCompartment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseGraphDefinition(jsn : TJsonObject) : TFhirGraphDefinition; overload; 
    procedure ParseGraphDefinitionProperties(jsn : TJsonObject; value : TFhirGraphDefinition); overload;
    procedure ParseGraphDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
    function ParseGroupCharacteristic(jsn : TJsonObject) : TFhirGroupCharacteristic; overload; 
    procedure ParseGroupCharacteristicProperties(jsn : TJsonObject; value : TFhirGroupCharacteristic); overload;
    procedure ParseGroupCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseGroupMember(jsn : TJsonObject) : TFhirGroupMember; overload; 
    procedure ParseGroupMemberProperties(jsn : TJsonObject; value : TFhirGroupMember); overload;
    procedure ParseGroupMember(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseGroup(jsn : TJsonObject) : TFhirGroup; overload; 
    procedure ParseGroupProperties(jsn : TJsonObject; value : TFhirGroup); overload;
    procedure ParseGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
    function ParseGuidanceResponse(jsn : TJsonObject) : TFhirGuidanceResponse; overload; 
    procedure ParseGuidanceResponseProperties(jsn : TJsonObject; value : TFhirGuidanceResponse); overload;
    procedure ParseGuidanceResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
    function ParseHealthcareServiceEligibility(jsn : TJsonObject) : TFhirHealthcareServiceEligibility; overload; 
    procedure ParseHealthcareServiceEligibilityProperties(jsn : TJsonObject; value : TFhirHealthcareServiceEligibility); overload;
    procedure ParseHealthcareServiceEligibility(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseHealthcareServiceAvailableTime(jsn : TJsonObject) : TFhirHealthcareServiceAvailableTime; overload; 
    procedure ParseHealthcareServiceAvailableTimeProperties(jsn : TJsonObject; value : TFhirHealthcareServiceAvailableTime); overload;
    procedure ParseHealthcareServiceAvailableTime(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseHealthcareServiceNotAvailable(jsn : TJsonObject) : TFhirHealthcareServiceNotAvailable; overload; 
    procedure ParseHealthcareServiceNotAvailableProperties(jsn : TJsonObject; value : TFhirHealthcareServiceNotAvailable); overload;
    procedure ParseHealthcareServiceNotAvailable(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseHealthcareService(jsn : TJsonObject) : TFhirHealthcareService; overload; 
    procedure ParseHealthcareServiceProperties(jsn : TJsonObject; value : TFhirHealthcareService); overload;
    procedure ParseHealthcareService(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
    function ParseImagingStudySeries(jsn : TJsonObject) : TFhirImagingStudySeries; overload; 
    procedure ParseImagingStudySeriesProperties(jsn : TJsonObject; value : TFhirImagingStudySeries); overload;
    procedure ParseImagingStudySeries(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImagingStudySeriesPerformer(jsn : TJsonObject) : TFhirImagingStudySeriesPerformer; overload; 
    procedure ParseImagingStudySeriesPerformerProperties(jsn : TJsonObject; value : TFhirImagingStudySeriesPerformer); overload;
    procedure ParseImagingStudySeriesPerformer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImagingStudySeriesInstance(jsn : TJsonObject) : TFhirImagingStudySeriesInstance; overload; 
    procedure ParseImagingStudySeriesInstanceProperties(jsn : TJsonObject; value : TFhirImagingStudySeriesInstance); overload;
    procedure ParseImagingStudySeriesInstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImagingStudy(jsn : TJsonObject) : TFhirImagingStudy; overload; 
    procedure ParseImagingStudyProperties(jsn : TJsonObject; value : TFhirImagingStudy); overload;
    procedure ParseImagingStudy(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
    function ParseImmunizationPerformer(jsn : TJsonObject) : TFhirImmunizationPerformer; overload; 
    procedure ParseImmunizationPerformerProperties(jsn : TJsonObject; value : TFhirImmunizationPerformer); overload;
    procedure ParseImmunizationPerformer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImmunizationEducation(jsn : TJsonObject) : TFhirImmunizationEducation; overload; 
    procedure ParseImmunizationEducationProperties(jsn : TJsonObject; value : TFhirImmunizationEducation); overload;
    procedure ParseImmunizationEducation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImmunizationReaction(jsn : TJsonObject) : TFhirImmunizationReaction; overload; 
    procedure ParseImmunizationReactionProperties(jsn : TJsonObject; value : TFhirImmunizationReaction); overload;
    procedure ParseImmunizationReaction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImmunizationProtocolApplied(jsn : TJsonObject) : TFhirImmunizationProtocolApplied; overload; 
    procedure ParseImmunizationProtocolAppliedProperties(jsn : TJsonObject; value : TFhirImmunizationProtocolApplied); overload;
    procedure ParseImmunizationProtocolApplied(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImmunization(jsn : TJsonObject) : TFhirImmunization; overload; 
    procedure ParseImmunizationProperties(jsn : TJsonObject; value : TFhirImmunization); overload;
    procedure ParseImmunization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
    function ParseImmunizationEvaluation(jsn : TJsonObject) : TFhirImmunizationEvaluation; overload; 
    procedure ParseImmunizationEvaluationProperties(jsn : TJsonObject; value : TFhirImmunizationEvaluation); overload;
    procedure ParseImmunizationEvaluation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
    function ParseImmunizationRecommendationRecommendation(jsn : TJsonObject) : TFhirImmunizationRecommendationRecommendation; overload; 
    procedure ParseImmunizationRecommendationRecommendationProperties(jsn : TJsonObject; value : TFhirImmunizationRecommendationRecommendation); overload;
    procedure ParseImmunizationRecommendationRecommendation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImmunizationRecommendationRecommendationDateCriterion(jsn : TJsonObject) : TFhirImmunizationRecommendationRecommendationDateCriterion; overload; 
    procedure ParseImmunizationRecommendationRecommendationDateCriterionProperties(jsn : TJsonObject; value : TFhirImmunizationRecommendationRecommendationDateCriterion); overload;
    procedure ParseImmunizationRecommendationRecommendationDateCriterion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImmunizationRecommendation(jsn : TJsonObject) : TFhirImmunizationRecommendation; overload; 
    procedure ParseImmunizationRecommendationProperties(jsn : TJsonObject; value : TFhirImmunizationRecommendation); overload;
    procedure ParseImmunizationRecommendation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
    function ParseImplementationGuideDependsOn(jsn : TJsonObject) : TFhirImplementationGuideDependsOn; overload; 
    procedure ParseImplementationGuideDependsOnProperties(jsn : TJsonObject; value : TFhirImplementationGuideDependsOn); overload;
    procedure ParseImplementationGuideDependsOn(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImplementationGuideGlobal(jsn : TJsonObject) : TFhirImplementationGuideGlobal; overload; 
    procedure ParseImplementationGuideGlobalProperties(jsn : TJsonObject; value : TFhirImplementationGuideGlobal); overload;
    procedure ParseImplementationGuideGlobal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImplementationGuideDefinition(jsn : TJsonObject) : TFhirImplementationGuideDefinition; overload; 
    procedure ParseImplementationGuideDefinitionProperties(jsn : TJsonObject; value : TFhirImplementationGuideDefinition); overload;
    procedure ParseImplementationGuideDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImplementationGuideDefinitionGrouping(jsn : TJsonObject) : TFhirImplementationGuideDefinitionGrouping; overload; 
    procedure ParseImplementationGuideDefinitionGroupingProperties(jsn : TJsonObject; value : TFhirImplementationGuideDefinitionGrouping); overload;
    procedure ParseImplementationGuideDefinitionGrouping(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImplementationGuideDefinitionResource(jsn : TJsonObject) : TFhirImplementationGuideDefinitionResource; overload; 
    procedure ParseImplementationGuideDefinitionResourceProperties(jsn : TJsonObject; value : TFhirImplementationGuideDefinitionResource); overload;
    procedure ParseImplementationGuideDefinitionResource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImplementationGuideDefinitionPage(jsn : TJsonObject) : TFhirImplementationGuideDefinitionPage; overload; 
    procedure ParseImplementationGuideDefinitionPageProperties(jsn : TJsonObject; value : TFhirImplementationGuideDefinitionPage); overload;
    procedure ParseImplementationGuideDefinitionPage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImplementationGuideDefinitionParameter(jsn : TJsonObject) : TFhirImplementationGuideDefinitionParameter; overload; 
    procedure ParseImplementationGuideDefinitionParameterProperties(jsn : TJsonObject; value : TFhirImplementationGuideDefinitionParameter); overload;
    procedure ParseImplementationGuideDefinitionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImplementationGuideDefinitionTemplate(jsn : TJsonObject) : TFhirImplementationGuideDefinitionTemplate; overload; 
    procedure ParseImplementationGuideDefinitionTemplateProperties(jsn : TJsonObject; value : TFhirImplementationGuideDefinitionTemplate); overload;
    procedure ParseImplementationGuideDefinitionTemplate(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImplementationGuideManifest(jsn : TJsonObject) : TFhirImplementationGuideManifest; overload; 
    procedure ParseImplementationGuideManifestProperties(jsn : TJsonObject; value : TFhirImplementationGuideManifest); overload;
    procedure ParseImplementationGuideManifest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImplementationGuideManifestResource(jsn : TJsonObject) : TFhirImplementationGuideManifestResource; overload; 
    procedure ParseImplementationGuideManifestResourceProperties(jsn : TJsonObject; value : TFhirImplementationGuideManifestResource); overload;
    procedure ParseImplementationGuideManifestResource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImplementationGuideManifestPage(jsn : TJsonObject) : TFhirImplementationGuideManifestPage; overload; 
    procedure ParseImplementationGuideManifestPageProperties(jsn : TJsonObject; value : TFhirImplementationGuideManifestPage); overload;
    procedure ParseImplementationGuideManifestPage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseImplementationGuide(jsn : TJsonObject) : TFhirImplementationGuide; overload; 
    procedure ParseImplementationGuideProperties(jsn : TJsonObject; value : TFhirImplementationGuide); overload;
    procedure ParseImplementationGuide(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INGREDIENT}
    function ParseIngredientManufacturer(jsn : TJsonObject) : TFhirIngredientManufacturer; overload; 
    procedure ParseIngredientManufacturerProperties(jsn : TJsonObject; value : TFhirIngredientManufacturer); overload;
    procedure ParseIngredientManufacturer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseIngredientSubstance(jsn : TJsonObject) : TFhirIngredientSubstance; overload; 
    procedure ParseIngredientSubstanceProperties(jsn : TJsonObject; value : TFhirIngredientSubstance); overload;
    procedure ParseIngredientSubstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseIngredientSubstanceStrength(jsn : TJsonObject) : TFhirIngredientSubstanceStrength; overload; 
    procedure ParseIngredientSubstanceStrengthProperties(jsn : TJsonObject; value : TFhirIngredientSubstanceStrength); overload;
    procedure ParseIngredientSubstanceStrength(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseIngredientSubstanceStrengthReferenceStrength(jsn : TJsonObject) : TFhirIngredientSubstanceStrengthReferenceStrength; overload; 
    procedure ParseIngredientSubstanceStrengthReferenceStrengthProperties(jsn : TJsonObject; value : TFhirIngredientSubstanceStrengthReferenceStrength); overload;
    procedure ParseIngredientSubstanceStrengthReferenceStrength(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseIngredient(jsn : TJsonObject) : TFhirIngredient; overload; 
    procedure ParseIngredientProperties(jsn : TJsonObject; value : TFhirIngredient); overload;
    procedure ParseIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_INGREDIENT}
{$IFDEF FHIR_INSURANCEPLAN}
    function ParseInsurancePlanContact(jsn : TJsonObject) : TFhirInsurancePlanContact; overload; 
    procedure ParseInsurancePlanContactProperties(jsn : TJsonObject; value : TFhirInsurancePlanContact); overload;
    procedure ParseInsurancePlanContact(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseInsurancePlanCoverage(jsn : TJsonObject) : TFhirInsurancePlanCoverage; overload; 
    procedure ParseInsurancePlanCoverageProperties(jsn : TJsonObject; value : TFhirInsurancePlanCoverage); overload;
    procedure ParseInsurancePlanCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseInsurancePlanCoverageBenefit(jsn : TJsonObject) : TFhirInsurancePlanCoverageBenefit; overload; 
    procedure ParseInsurancePlanCoverageBenefitProperties(jsn : TJsonObject; value : TFhirInsurancePlanCoverageBenefit); overload;
    procedure ParseInsurancePlanCoverageBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseInsurancePlanCoverageBenefitLimit(jsn : TJsonObject) : TFhirInsurancePlanCoverageBenefitLimit; overload; 
    procedure ParseInsurancePlanCoverageBenefitLimitProperties(jsn : TJsonObject; value : TFhirInsurancePlanCoverageBenefitLimit); overload;
    procedure ParseInsurancePlanCoverageBenefitLimit(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseInsurancePlanPlan(jsn : TJsonObject) : TFhirInsurancePlanPlan; overload; 
    procedure ParseInsurancePlanPlanProperties(jsn : TJsonObject; value : TFhirInsurancePlanPlan); overload;
    procedure ParseInsurancePlanPlan(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseInsurancePlanPlanGeneralCost(jsn : TJsonObject) : TFhirInsurancePlanPlanGeneralCost; overload; 
    procedure ParseInsurancePlanPlanGeneralCostProperties(jsn : TJsonObject; value : TFhirInsurancePlanPlanGeneralCost); overload;
    procedure ParseInsurancePlanPlanGeneralCost(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseInsurancePlanPlanSpecificCost(jsn : TJsonObject) : TFhirInsurancePlanPlanSpecificCost; overload; 
    procedure ParseInsurancePlanPlanSpecificCostProperties(jsn : TJsonObject; value : TFhirInsurancePlanPlanSpecificCost); overload;
    procedure ParseInsurancePlanPlanSpecificCost(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseInsurancePlanPlanSpecificCostBenefit(jsn : TJsonObject) : TFhirInsurancePlanPlanSpecificCostBenefit; overload; 
    procedure ParseInsurancePlanPlanSpecificCostBenefitProperties(jsn : TJsonObject; value : TFhirInsurancePlanPlanSpecificCostBenefit); overload;
    procedure ParseInsurancePlanPlanSpecificCostBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseInsurancePlanPlanSpecificCostBenefitCost(jsn : TJsonObject) : TFhirInsurancePlanPlanSpecificCostBenefitCost; overload; 
    procedure ParseInsurancePlanPlanSpecificCostBenefitCostProperties(jsn : TJsonObject; value : TFhirInsurancePlanPlanSpecificCostBenefitCost); overload;
    procedure ParseInsurancePlanPlanSpecificCostBenefitCost(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseInsurancePlan(jsn : TJsonObject) : TFhirInsurancePlan; overload; 
    procedure ParseInsurancePlanProperties(jsn : TJsonObject; value : TFhirInsurancePlan); overload;
    procedure ParseInsurancePlan(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
    function ParseInvoiceParticipant(jsn : TJsonObject) : TFhirInvoiceParticipant; overload; 
    procedure ParseInvoiceParticipantProperties(jsn : TJsonObject; value : TFhirInvoiceParticipant); overload;
    procedure ParseInvoiceParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseInvoiceLineItem(jsn : TJsonObject) : TFhirInvoiceLineItem; overload; 
    procedure ParseInvoiceLineItemProperties(jsn : TJsonObject; value : TFhirInvoiceLineItem); overload;
    procedure ParseInvoiceLineItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseInvoiceLineItemPriceComponent(jsn : TJsonObject) : TFhirInvoiceLineItemPriceComponent; overload; 
    procedure ParseInvoiceLineItemPriceComponentProperties(jsn : TJsonObject; value : TFhirInvoiceLineItemPriceComponent); overload;
    procedure ParseInvoiceLineItemPriceComponent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseInvoice(jsn : TJsonObject) : TFhirInvoice; overload; 
    procedure ParseInvoiceProperties(jsn : TJsonObject; value : TFhirInvoice); overload;
    procedure ParseInvoice(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
    function ParseLibrary(jsn : TJsonObject) : TFhirLibrary; overload; 
    procedure ParseLibraryProperties(jsn : TJsonObject; value : TFhirLibrary); overload;
    procedure ParseLibrary(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
    function ParseLinkageItem(jsn : TJsonObject) : TFhirLinkageItem; overload; 
    procedure ParseLinkageItemProperties(jsn : TJsonObject; value : TFhirLinkageItem); overload;
    procedure ParseLinkageItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseLinkage(jsn : TJsonObject) : TFhirLinkage; overload; 
    procedure ParseLinkageProperties(jsn : TJsonObject; value : TFhirLinkage); overload;
    procedure ParseLinkage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
    function ParseListEntry(jsn : TJsonObject) : TFhirListEntry; overload; 
    procedure ParseListEntryProperties(jsn : TJsonObject; value : TFhirListEntry); overload;
    procedure ParseListEntry(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseList(jsn : TJsonObject) : TFhirList; overload; 
    procedure ParseListProperties(jsn : TJsonObject; value : TFhirList); overload;
    procedure ParseList(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
    function ParseLocationPosition(jsn : TJsonObject) : TFhirLocationPosition; overload; 
    procedure ParseLocationPositionProperties(jsn : TJsonObject; value : TFhirLocationPosition); overload;
    procedure ParseLocationPosition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseLocationHoursOfOperation(jsn : TJsonObject) : TFhirLocationHoursOfOperation; overload; 
    procedure ParseLocationHoursOfOperationProperties(jsn : TJsonObject; value : TFhirLocationHoursOfOperation); overload;
    procedure ParseLocationHoursOfOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseLocation(jsn : TJsonObject) : TFhirLocation; overload; 
    procedure ParseLocationProperties(jsn : TJsonObject; value : TFhirLocation); overload;
    procedure ParseLocation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MANUFACTUREDITEMDEFINITION}
    function ParseManufacturedItemDefinitionProperty(jsn : TJsonObject) : TFhirManufacturedItemDefinitionProperty; overload; 
    procedure ParseManufacturedItemDefinitionPropertyProperties(jsn : TJsonObject; value : TFhirManufacturedItemDefinitionProperty); overload;
    procedure ParseManufacturedItemDefinitionProperty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseManufacturedItemDefinition(jsn : TJsonObject) : TFhirManufacturedItemDefinition; overload; 
    procedure ParseManufacturedItemDefinitionProperties(jsn : TJsonObject; value : TFhirManufacturedItemDefinition); overload;
    procedure ParseManufacturedItemDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_MANUFACTUREDITEMDEFINITION}
{$IFDEF FHIR_MEASURE}
    function ParseMeasureGroup(jsn : TJsonObject) : TFhirMeasureGroup; overload; 
    procedure ParseMeasureGroupProperties(jsn : TJsonObject; value : TFhirMeasureGroup); overload;
    procedure ParseMeasureGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMeasureGroupPopulation(jsn : TJsonObject) : TFhirMeasureGroupPopulation; overload; 
    procedure ParseMeasureGroupPopulationProperties(jsn : TJsonObject; value : TFhirMeasureGroupPopulation); overload;
    procedure ParseMeasureGroupPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMeasureGroupStratifier(jsn : TJsonObject) : TFhirMeasureGroupStratifier; overload; 
    procedure ParseMeasureGroupStratifierProperties(jsn : TJsonObject; value : TFhirMeasureGroupStratifier); overload;
    procedure ParseMeasureGroupStratifier(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMeasureGroupStratifierComponent(jsn : TJsonObject) : TFhirMeasureGroupStratifierComponent; overload; 
    procedure ParseMeasureGroupStratifierComponentProperties(jsn : TJsonObject; value : TFhirMeasureGroupStratifierComponent); overload;
    procedure ParseMeasureGroupStratifierComponent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMeasureSupplementalData(jsn : TJsonObject) : TFhirMeasureSupplementalData; overload; 
    procedure ParseMeasureSupplementalDataProperties(jsn : TJsonObject; value : TFhirMeasureSupplementalData); overload;
    procedure ParseMeasureSupplementalData(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMeasure(jsn : TJsonObject) : TFhirMeasure; overload; 
    procedure ParseMeasureProperties(jsn : TJsonObject; value : TFhirMeasure); overload;
    procedure ParseMeasure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
    function ParseMeasureReportGroup(jsn : TJsonObject) : TFhirMeasureReportGroup; overload; 
    procedure ParseMeasureReportGroupProperties(jsn : TJsonObject; value : TFhirMeasureReportGroup); overload;
    procedure ParseMeasureReportGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMeasureReportGroupPopulation(jsn : TJsonObject) : TFhirMeasureReportGroupPopulation; overload; 
    procedure ParseMeasureReportGroupPopulationProperties(jsn : TJsonObject; value : TFhirMeasureReportGroupPopulation); overload;
    procedure ParseMeasureReportGroupPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMeasureReportGroupStratifier(jsn : TJsonObject) : TFhirMeasureReportGroupStratifier; overload; 
    procedure ParseMeasureReportGroupStratifierProperties(jsn : TJsonObject; value : TFhirMeasureReportGroupStratifier); overload;
    procedure ParseMeasureReportGroupStratifier(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMeasureReportGroupStratifierStratum(jsn : TJsonObject) : TFhirMeasureReportGroupStratifierStratum; overload; 
    procedure ParseMeasureReportGroupStratifierStratumProperties(jsn : TJsonObject; value : TFhirMeasureReportGroupStratifierStratum); overload;
    procedure ParseMeasureReportGroupStratifierStratum(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMeasureReportGroupStratifierStratumComponent(jsn : TJsonObject) : TFhirMeasureReportGroupStratifierStratumComponent; overload; 
    procedure ParseMeasureReportGroupStratifierStratumComponentProperties(jsn : TJsonObject; value : TFhirMeasureReportGroupStratifierStratumComponent); overload;
    procedure ParseMeasureReportGroupStratifierStratumComponent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMeasureReportGroupStratifierStratumPopulation(jsn : TJsonObject) : TFhirMeasureReportGroupStratifierStratumPopulation; overload; 
    procedure ParseMeasureReportGroupStratifierStratumPopulationProperties(jsn : TJsonObject; value : TFhirMeasureReportGroupStratifierStratumPopulation); overload;
    procedure ParseMeasureReportGroupStratifierStratumPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMeasureReport(jsn : TJsonObject) : TFhirMeasureReport; overload; 
    procedure ParseMeasureReportProperties(jsn : TJsonObject; value : TFhirMeasureReport); overload;
    procedure ParseMeasureReport(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
    function ParseMedia(jsn : TJsonObject) : TFhirMedia; overload; 
    procedure ParseMediaProperties(jsn : TJsonObject; value : TFhirMedia); overload;
    procedure ParseMedia(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
    function ParseMedicationIngredient(jsn : TJsonObject) : TFhirMedicationIngredient; overload; 
    procedure ParseMedicationIngredientProperties(jsn : TJsonObject; value : TFhirMedicationIngredient); overload;
    procedure ParseMedicationIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationBatch(jsn : TJsonObject) : TFhirMedicationBatch; overload; 
    procedure ParseMedicationBatchProperties(jsn : TJsonObject; value : TFhirMedicationBatch); overload;
    procedure ParseMedicationBatch(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedication(jsn : TJsonObject) : TFhirMedication; overload; 
    procedure ParseMedicationProperties(jsn : TJsonObject; value : TFhirMedication); overload;
    procedure ParseMedication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
    function ParseMedicationAdministrationPerformer(jsn : TJsonObject) : TFhirMedicationAdministrationPerformer; overload; 
    procedure ParseMedicationAdministrationPerformerProperties(jsn : TJsonObject; value : TFhirMedicationAdministrationPerformer); overload;
    procedure ParseMedicationAdministrationPerformer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationAdministrationDosage(jsn : TJsonObject) : TFhirMedicationAdministrationDosage; overload; 
    procedure ParseMedicationAdministrationDosageProperties(jsn : TJsonObject; value : TFhirMedicationAdministrationDosage); overload;
    procedure ParseMedicationAdministrationDosage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationAdministration(jsn : TJsonObject) : TFhirMedicationAdministration; overload; 
    procedure ParseMedicationAdministrationProperties(jsn : TJsonObject; value : TFhirMedicationAdministration); overload;
    procedure ParseMedicationAdministration(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
    function ParseMedicationDispensePerformer(jsn : TJsonObject) : TFhirMedicationDispensePerformer; overload; 
    procedure ParseMedicationDispensePerformerProperties(jsn : TJsonObject; value : TFhirMedicationDispensePerformer); overload;
    procedure ParseMedicationDispensePerformer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationDispenseSubstitution(jsn : TJsonObject) : TFhirMedicationDispenseSubstitution; overload; 
    procedure ParseMedicationDispenseSubstitutionProperties(jsn : TJsonObject; value : TFhirMedicationDispenseSubstitution); overload;
    procedure ParseMedicationDispenseSubstitution(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationDispense(jsn : TJsonObject) : TFhirMedicationDispense; overload; 
    procedure ParseMedicationDispenseProperties(jsn : TJsonObject; value : TFhirMedicationDispense); overload;
    procedure ParseMedicationDispense(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
    function ParseMedicationKnowledgeRelatedMedicationKnowledge(jsn : TJsonObject) : TFhirMedicationKnowledgeRelatedMedicationKnowledge; overload; 
    procedure ParseMedicationKnowledgeRelatedMedicationKnowledgeProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeRelatedMedicationKnowledge); overload;
    procedure ParseMedicationKnowledgeRelatedMedicationKnowledge(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgeMonograph(jsn : TJsonObject) : TFhirMedicationKnowledgeMonograph; overload; 
    procedure ParseMedicationKnowledgeMonographProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeMonograph); overload;
    procedure ParseMedicationKnowledgeMonograph(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgeIngredient(jsn : TJsonObject) : TFhirMedicationKnowledgeIngredient; overload; 
    procedure ParseMedicationKnowledgeIngredientProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeIngredient); overload;
    procedure ParseMedicationKnowledgeIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgeCost(jsn : TJsonObject) : TFhirMedicationKnowledgeCost; overload; 
    procedure ParseMedicationKnowledgeCostProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeCost); overload;
    procedure ParseMedicationKnowledgeCost(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgeMonitoringProgram(jsn : TJsonObject) : TFhirMedicationKnowledgeMonitoringProgram; overload; 
    procedure ParseMedicationKnowledgeMonitoringProgramProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeMonitoringProgram); overload;
    procedure ParseMedicationKnowledgeMonitoringProgram(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgeAdministrationGuidelines(jsn : TJsonObject) : TFhirMedicationKnowledgeAdministrationGuidelines; overload; 
    procedure ParseMedicationKnowledgeAdministrationGuidelinesProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeAdministrationGuidelines); overload;
    procedure ParseMedicationKnowledgeAdministrationGuidelines(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgeAdministrationGuidelinesDosage(jsn : TJsonObject) : TFhirMedicationKnowledgeAdministrationGuidelinesDosage; overload; 
    procedure ParseMedicationKnowledgeAdministrationGuidelinesDosageProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeAdministrationGuidelinesDosage); overload;
    procedure ParseMedicationKnowledgeAdministrationGuidelinesDosage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(jsn : TJsonObject) : TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics; overload; 
    procedure ParseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristicsProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics); overload;
    procedure ParseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgeMedicineClassification(jsn : TJsonObject) : TFhirMedicationKnowledgeMedicineClassification; overload; 
    procedure ParseMedicationKnowledgeMedicineClassificationProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeMedicineClassification); overload;
    procedure ParseMedicationKnowledgeMedicineClassification(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgePackaging(jsn : TJsonObject) : TFhirMedicationKnowledgePackaging; overload; 
    procedure ParseMedicationKnowledgePackagingProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgePackaging); overload;
    procedure ParseMedicationKnowledgePackaging(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgeDrugCharacteristic(jsn : TJsonObject) : TFhirMedicationKnowledgeDrugCharacteristic; overload; 
    procedure ParseMedicationKnowledgeDrugCharacteristicProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeDrugCharacteristic); overload;
    procedure ParseMedicationKnowledgeDrugCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgeRegulatory(jsn : TJsonObject) : TFhirMedicationKnowledgeRegulatory; overload; 
    procedure ParseMedicationKnowledgeRegulatoryProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeRegulatory); overload;
    procedure ParseMedicationKnowledgeRegulatory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgeRegulatorySubstitution(jsn : TJsonObject) : TFhirMedicationKnowledgeRegulatorySubstitution; overload; 
    procedure ParseMedicationKnowledgeRegulatorySubstitutionProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeRegulatorySubstitution); overload;
    procedure ParseMedicationKnowledgeRegulatorySubstitution(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgeRegulatorySchedule(jsn : TJsonObject) : TFhirMedicationKnowledgeRegulatorySchedule; overload; 
    procedure ParseMedicationKnowledgeRegulatoryScheduleProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeRegulatorySchedule); overload;
    procedure ParseMedicationKnowledgeRegulatorySchedule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgeRegulatoryMaxDispense(jsn : TJsonObject) : TFhirMedicationKnowledgeRegulatoryMaxDispense; overload; 
    procedure ParseMedicationKnowledgeRegulatoryMaxDispenseProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeRegulatoryMaxDispense); overload;
    procedure ParseMedicationKnowledgeRegulatoryMaxDispense(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledgeKinetics(jsn : TJsonObject) : TFhirMedicationKnowledgeKinetics; overload; 
    procedure ParseMedicationKnowledgeKineticsProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeKinetics); overload;
    procedure ParseMedicationKnowledgeKinetics(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationKnowledge(jsn : TJsonObject) : TFhirMedicationKnowledge; overload; 
    procedure ParseMedicationKnowledgeProperties(jsn : TJsonObject; value : TFhirMedicationKnowledge); overload;
    procedure ParseMedicationKnowledge(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
    function ParseMedicationRequestDispenseRequest(jsn : TJsonObject) : TFhirMedicationRequestDispenseRequest; overload; 
    procedure ParseMedicationRequestDispenseRequestProperties(jsn : TJsonObject; value : TFhirMedicationRequestDispenseRequest); overload;
    procedure ParseMedicationRequestDispenseRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationRequestDispenseRequestInitialFill(jsn : TJsonObject) : TFhirMedicationRequestDispenseRequestInitialFill; overload; 
    procedure ParseMedicationRequestDispenseRequestInitialFillProperties(jsn : TJsonObject; value : TFhirMedicationRequestDispenseRequestInitialFill); overload;
    procedure ParseMedicationRequestDispenseRequestInitialFill(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationRequestSubstitution(jsn : TJsonObject) : TFhirMedicationRequestSubstitution; overload; 
    procedure ParseMedicationRequestSubstitutionProperties(jsn : TJsonObject; value : TFhirMedicationRequestSubstitution); overload;
    procedure ParseMedicationRequestSubstitution(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicationRequest(jsn : TJsonObject) : TFhirMedicationRequest; overload; 
    procedure ParseMedicationRequestProperties(jsn : TJsonObject; value : TFhirMedicationRequest); overload;
    procedure ParseMedicationRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
    function ParseMedicationStatement(jsn : TJsonObject) : TFhirMedicationStatement; overload; 
    procedure ParseMedicationStatementProperties(jsn : TJsonObject; value : TFhirMedicationStatement); overload;
    procedure ParseMedicationStatement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCTDEFINITION}
    function ParseMedicinalProductDefinitionContact(jsn : TJsonObject) : TFhirMedicinalProductDefinitionContact; overload; 
    procedure ParseMedicinalProductDefinitionContactProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinitionContact); overload;
    procedure ParseMedicinalProductDefinitionContact(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicinalProductDefinitionName(jsn : TJsonObject) : TFhirMedicinalProductDefinitionName; overload; 
    procedure ParseMedicinalProductDefinitionNameProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinitionName); overload;
    procedure ParseMedicinalProductDefinitionName(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicinalProductDefinitionNameNamePart(jsn : TJsonObject) : TFhirMedicinalProductDefinitionNameNamePart; overload; 
    procedure ParseMedicinalProductDefinitionNameNamePartProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinitionNameNamePart); overload;
    procedure ParseMedicinalProductDefinitionNameNamePart(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicinalProductDefinitionNameCountryLanguage(jsn : TJsonObject) : TFhirMedicinalProductDefinitionNameCountryLanguage; overload; 
    procedure ParseMedicinalProductDefinitionNameCountryLanguageProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinitionNameCountryLanguage); overload;
    procedure ParseMedicinalProductDefinitionNameCountryLanguage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicinalProductDefinitionCrossReference(jsn : TJsonObject) : TFhirMedicinalProductDefinitionCrossReference; overload; 
    procedure ParseMedicinalProductDefinitionCrossReferenceProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinitionCrossReference); overload;
    procedure ParseMedicinalProductDefinitionCrossReference(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicinalProductDefinitionOperation(jsn : TJsonObject) : TFhirMedicinalProductDefinitionOperation; overload; 
    procedure ParseMedicinalProductDefinitionOperationProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinitionOperation); overload;
    procedure ParseMedicinalProductDefinitionOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicinalProductDefinitionCharacteristic(jsn : TJsonObject) : TFhirMedicinalProductDefinitionCharacteristic; overload; 
    procedure ParseMedicinalProductDefinitionCharacteristicProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinitionCharacteristic); overload;
    procedure ParseMedicinalProductDefinitionCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMedicinalProductDefinition(jsn : TJsonObject) : TFhirMedicinalProductDefinition; overload; 
    procedure ParseMedicinalProductDefinitionProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinition); overload;
    procedure ParseMedicinalProductDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_MEDICINALPRODUCTDEFINITION}
{$IFDEF FHIR_MESSAGEDEFINITION}
    function ParseMessageDefinitionFocus(jsn : TJsonObject) : TFhirMessageDefinitionFocus; overload; 
    procedure ParseMessageDefinitionFocusProperties(jsn : TJsonObject; value : TFhirMessageDefinitionFocus); overload;
    procedure ParseMessageDefinitionFocus(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMessageDefinitionAllowedResponse(jsn : TJsonObject) : TFhirMessageDefinitionAllowedResponse; overload; 
    procedure ParseMessageDefinitionAllowedResponseProperties(jsn : TJsonObject; value : TFhirMessageDefinitionAllowedResponse); overload;
    procedure ParseMessageDefinitionAllowedResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMessageDefinition(jsn : TJsonObject) : TFhirMessageDefinition; overload; 
    procedure ParseMessageDefinitionProperties(jsn : TJsonObject; value : TFhirMessageDefinition); overload;
    procedure ParseMessageDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
    function ParseMessageHeaderDestination(jsn : TJsonObject) : TFhirMessageHeaderDestination; overload; 
    procedure ParseMessageHeaderDestinationProperties(jsn : TJsonObject; value : TFhirMessageHeaderDestination); overload;
    procedure ParseMessageHeaderDestination(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMessageHeaderSource(jsn : TJsonObject) : TFhirMessageHeaderSource; overload; 
    procedure ParseMessageHeaderSourceProperties(jsn : TJsonObject; value : TFhirMessageHeaderSource); overload;
    procedure ParseMessageHeaderSource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMessageHeaderResponse(jsn : TJsonObject) : TFhirMessageHeaderResponse; overload; 
    procedure ParseMessageHeaderResponseProperties(jsn : TJsonObject; value : TFhirMessageHeaderResponse); overload;
    procedure ParseMessageHeaderResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMessageHeader(jsn : TJsonObject) : TFhirMessageHeader; overload; 
    procedure ParseMessageHeaderProperties(jsn : TJsonObject; value : TFhirMessageHeader); overload;
    procedure ParseMessageHeader(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
    function ParseMolecularSequenceReferenceSeq(jsn : TJsonObject) : TFhirMolecularSequenceReferenceSeq; overload; 
    procedure ParseMolecularSequenceReferenceSeqProperties(jsn : TJsonObject; value : TFhirMolecularSequenceReferenceSeq); overload;
    procedure ParseMolecularSequenceReferenceSeq(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMolecularSequenceVariant(jsn : TJsonObject) : TFhirMolecularSequenceVariant; overload; 
    procedure ParseMolecularSequenceVariantProperties(jsn : TJsonObject; value : TFhirMolecularSequenceVariant); overload;
    procedure ParseMolecularSequenceVariant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMolecularSequenceQuality(jsn : TJsonObject) : TFhirMolecularSequenceQuality; overload; 
    procedure ParseMolecularSequenceQualityProperties(jsn : TJsonObject; value : TFhirMolecularSequenceQuality); overload;
    procedure ParseMolecularSequenceQuality(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMolecularSequenceQualityRoc(jsn : TJsonObject) : TFhirMolecularSequenceQualityRoc; overload; 
    procedure ParseMolecularSequenceQualityRocProperties(jsn : TJsonObject; value : TFhirMolecularSequenceQualityRoc); overload;
    procedure ParseMolecularSequenceQualityRoc(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMolecularSequenceRepository(jsn : TJsonObject) : TFhirMolecularSequenceRepository; overload; 
    procedure ParseMolecularSequenceRepositoryProperties(jsn : TJsonObject; value : TFhirMolecularSequenceRepository); overload;
    procedure ParseMolecularSequenceRepository(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMolecularSequenceStructureVariant(jsn : TJsonObject) : TFhirMolecularSequenceStructureVariant; overload; 
    procedure ParseMolecularSequenceStructureVariantProperties(jsn : TJsonObject; value : TFhirMolecularSequenceStructureVariant); overload;
    procedure ParseMolecularSequenceStructureVariant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMolecularSequenceStructureVariantOuter(jsn : TJsonObject) : TFhirMolecularSequenceStructureVariantOuter; overload; 
    procedure ParseMolecularSequenceStructureVariantOuterProperties(jsn : TJsonObject; value : TFhirMolecularSequenceStructureVariantOuter); overload;
    procedure ParseMolecularSequenceStructureVariantOuter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMolecularSequenceStructureVariantInner(jsn : TJsonObject) : TFhirMolecularSequenceStructureVariantInner; overload; 
    procedure ParseMolecularSequenceStructureVariantInnerProperties(jsn : TJsonObject; value : TFhirMolecularSequenceStructureVariantInner); overload;
    procedure ParseMolecularSequenceStructureVariantInner(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseMolecularSequence(jsn : TJsonObject) : TFhirMolecularSequence; overload; 
    procedure ParseMolecularSequenceProperties(jsn : TJsonObject; value : TFhirMolecularSequence); overload;
    procedure ParseMolecularSequence(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
    function ParseNamingSystemUniqueId(jsn : TJsonObject) : TFhirNamingSystemUniqueId; overload; 
    procedure ParseNamingSystemUniqueIdProperties(jsn : TJsonObject; value : TFhirNamingSystemUniqueId); overload;
    procedure ParseNamingSystemUniqueId(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseNamingSystem(jsn : TJsonObject) : TFhirNamingSystem; overload; 
    procedure ParseNamingSystemProperties(jsn : TJsonObject; value : TFhirNamingSystem); overload;
    procedure ParseNamingSystem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
    function ParseNutritionOrderOralDiet(jsn : TJsonObject) : TFhirNutritionOrderOralDiet; overload; 
    procedure ParseNutritionOrderOralDietProperties(jsn : TJsonObject; value : TFhirNutritionOrderOralDiet); overload;
    procedure ParseNutritionOrderOralDiet(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseNutritionOrderOralDietNutrient(jsn : TJsonObject) : TFhirNutritionOrderOralDietNutrient; overload; 
    procedure ParseNutritionOrderOralDietNutrientProperties(jsn : TJsonObject; value : TFhirNutritionOrderOralDietNutrient); overload;
    procedure ParseNutritionOrderOralDietNutrient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseNutritionOrderOralDietTexture(jsn : TJsonObject) : TFhirNutritionOrderOralDietTexture; overload; 
    procedure ParseNutritionOrderOralDietTextureProperties(jsn : TJsonObject; value : TFhirNutritionOrderOralDietTexture); overload;
    procedure ParseNutritionOrderOralDietTexture(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseNutritionOrderSupplement(jsn : TJsonObject) : TFhirNutritionOrderSupplement; overload; 
    procedure ParseNutritionOrderSupplementProperties(jsn : TJsonObject; value : TFhirNutritionOrderSupplement); overload;
    procedure ParseNutritionOrderSupplement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseNutritionOrderEnteralFormula(jsn : TJsonObject) : TFhirNutritionOrderEnteralFormula; overload; 
    procedure ParseNutritionOrderEnteralFormulaProperties(jsn : TJsonObject; value : TFhirNutritionOrderEnteralFormula); overload;
    procedure ParseNutritionOrderEnteralFormula(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseNutritionOrderEnteralFormulaAdministration(jsn : TJsonObject) : TFhirNutritionOrderEnteralFormulaAdministration; overload; 
    procedure ParseNutritionOrderEnteralFormulaAdministrationProperties(jsn : TJsonObject; value : TFhirNutritionOrderEnteralFormulaAdministration); overload;
    procedure ParseNutritionOrderEnteralFormulaAdministration(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseNutritionOrder(jsn : TJsonObject) : TFhirNutritionOrder; overload; 
    procedure ParseNutritionOrderProperties(jsn : TJsonObject; value : TFhirNutritionOrder); overload;
    procedure ParseNutritionOrder(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_NUTRITIONPRODUCT}
    function ParseNutritionProductNutrient(jsn : TJsonObject) : TFhirNutritionProductNutrient; overload; 
    procedure ParseNutritionProductNutrientProperties(jsn : TJsonObject; value : TFhirNutritionProductNutrient); overload;
    procedure ParseNutritionProductNutrient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseNutritionProductIngredient(jsn : TJsonObject) : TFhirNutritionProductIngredient; overload; 
    procedure ParseNutritionProductIngredientProperties(jsn : TJsonObject; value : TFhirNutritionProductIngredient); overload;
    procedure ParseNutritionProductIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseNutritionProductProductCharacteristic(jsn : TJsonObject) : TFhirNutritionProductProductCharacteristic; overload; 
    procedure ParseNutritionProductProductCharacteristicProperties(jsn : TJsonObject; value : TFhirNutritionProductProductCharacteristic); overload;
    procedure ParseNutritionProductProductCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseNutritionProductInstance(jsn : TJsonObject) : TFhirNutritionProductInstance; overload; 
    procedure ParseNutritionProductInstanceProperties(jsn : TJsonObject; value : TFhirNutritionProductInstance); overload;
    procedure ParseNutritionProductInstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseNutritionProduct(jsn : TJsonObject) : TFhirNutritionProduct; overload; 
    procedure ParseNutritionProductProperties(jsn : TJsonObject; value : TFhirNutritionProduct); overload;
    procedure ParseNutritionProduct(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_NUTRITIONPRODUCT}
{$IFDEF FHIR_OBSERVATION}
    function ParseObservationReferenceRange(jsn : TJsonObject) : TFhirObservationReferenceRange; overload; 
    procedure ParseObservationReferenceRangeProperties(jsn : TJsonObject; value : TFhirObservationReferenceRange); overload;
    procedure ParseObservationReferenceRange(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseObservationComponent(jsn : TJsonObject) : TFhirObservationComponent; overload; 
    procedure ParseObservationComponentProperties(jsn : TJsonObject; value : TFhirObservationComponent); overload;
    procedure ParseObservationComponent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseObservation(jsn : TJsonObject) : TFhirObservation; overload; 
    procedure ParseObservationProperties(jsn : TJsonObject; value : TFhirObservation); overload;
    procedure ParseObservation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
    function ParseObservationDefinitionQuantitativeDetails(jsn : TJsonObject) : TFhirObservationDefinitionQuantitativeDetails; overload; 
    procedure ParseObservationDefinitionQuantitativeDetailsProperties(jsn : TJsonObject; value : TFhirObservationDefinitionQuantitativeDetails); overload;
    procedure ParseObservationDefinitionQuantitativeDetails(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseObservationDefinitionQualifiedInterval(jsn : TJsonObject) : TFhirObservationDefinitionQualifiedInterval; overload; 
    procedure ParseObservationDefinitionQualifiedIntervalProperties(jsn : TJsonObject; value : TFhirObservationDefinitionQualifiedInterval); overload;
    procedure ParseObservationDefinitionQualifiedInterval(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseObservationDefinition(jsn : TJsonObject) : TFhirObservationDefinition; overload; 
    procedure ParseObservationDefinitionProperties(jsn : TJsonObject; value : TFhirObservationDefinition); overload;
    procedure ParseObservationDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
    function ParseOperationDefinitionParameter(jsn : TJsonObject) : TFhirOperationDefinitionParameter; overload; 
    procedure ParseOperationDefinitionParameterProperties(jsn : TJsonObject; value : TFhirOperationDefinitionParameter); overload;
    procedure ParseOperationDefinitionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseOperationDefinitionParameterBinding(jsn : TJsonObject) : TFhirOperationDefinitionParameterBinding; overload; 
    procedure ParseOperationDefinitionParameterBindingProperties(jsn : TJsonObject; value : TFhirOperationDefinitionParameterBinding); overload;
    procedure ParseOperationDefinitionParameterBinding(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseOperationDefinitionParameterReferencedFrom(jsn : TJsonObject) : TFhirOperationDefinitionParameterReferencedFrom; overload; 
    procedure ParseOperationDefinitionParameterReferencedFromProperties(jsn : TJsonObject; value : TFhirOperationDefinitionParameterReferencedFrom); overload;
    procedure ParseOperationDefinitionParameterReferencedFrom(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseOperationDefinitionOverload(jsn : TJsonObject) : TFhirOperationDefinitionOverload; overload; 
    procedure ParseOperationDefinitionOverloadProperties(jsn : TJsonObject; value : TFhirOperationDefinitionOverload); overload;
    procedure ParseOperationDefinitionOverload(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseOperationDefinition(jsn : TJsonObject) : TFhirOperationDefinition; overload; 
    procedure ParseOperationDefinitionProperties(jsn : TJsonObject; value : TFhirOperationDefinition); overload;
    procedure ParseOperationDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
    function ParseOperationOutcomeIssue(jsn : TJsonObject) : TFhirOperationOutcomeIssue; overload; 
    procedure ParseOperationOutcomeIssueProperties(jsn : TJsonObject; value : TFhirOperationOutcomeIssue); overload;
    procedure ParseOperationOutcomeIssue(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseOperationOutcome(jsn : TJsonObject) : TFhirOperationOutcome; overload; 
    procedure ParseOperationOutcomeProperties(jsn : TJsonObject; value : TFhirOperationOutcome); overload;
    procedure ParseOperationOutcome(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
    function ParseOrganizationContact(jsn : TJsonObject) : TFhirOrganizationContact; overload; 
    procedure ParseOrganizationContactProperties(jsn : TJsonObject; value : TFhirOrganizationContact); overload;
    procedure ParseOrganizationContact(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseOrganization(jsn : TJsonObject) : TFhirOrganization; overload; 
    procedure ParseOrganizationProperties(jsn : TJsonObject; value : TFhirOrganization); overload;
    procedure ParseOrganization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
    function ParseOrganizationAffiliation(jsn : TJsonObject) : TFhirOrganizationAffiliation; overload; 
    procedure ParseOrganizationAffiliationProperties(jsn : TJsonObject; value : TFhirOrganizationAffiliation); overload;
    procedure ParseOrganizationAffiliation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PACKAGEDPRODUCTDEFINITION}
    function ParsePackagedProductDefinitionLegalStatusOfSupply(jsn : TJsonObject) : TFhirPackagedProductDefinitionLegalStatusOfSupply; overload; 
    procedure ParsePackagedProductDefinitionLegalStatusOfSupplyProperties(jsn : TJsonObject; value : TFhirPackagedProductDefinitionLegalStatusOfSupply); overload;
    procedure ParsePackagedProductDefinitionLegalStatusOfSupply(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePackagedProductDefinitionPackage(jsn : TJsonObject) : TFhirPackagedProductDefinitionPackage; overload; 
    procedure ParsePackagedProductDefinitionPackageProperties(jsn : TJsonObject; value : TFhirPackagedProductDefinitionPackage); overload;
    procedure ParsePackagedProductDefinitionPackage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePackagedProductDefinitionPackageProperty(jsn : TJsonObject) : TFhirPackagedProductDefinitionPackageProperty; overload; 
    procedure ParsePackagedProductDefinitionPackagePropertyProperties(jsn : TJsonObject; value : TFhirPackagedProductDefinitionPackageProperty); overload;
    procedure ParsePackagedProductDefinitionPackageProperty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePackagedProductDefinitionPackageContainedItem(jsn : TJsonObject) : TFhirPackagedProductDefinitionPackageContainedItem; overload; 
    procedure ParsePackagedProductDefinitionPackageContainedItemProperties(jsn : TJsonObject; value : TFhirPackagedProductDefinitionPackageContainedItem); overload;
    procedure ParsePackagedProductDefinitionPackageContainedItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePackagedProductDefinition(jsn : TJsonObject) : TFhirPackagedProductDefinition; overload; 
    procedure ParsePackagedProductDefinitionProperties(jsn : TJsonObject; value : TFhirPackagedProductDefinition); overload;
    procedure ParsePackagedProductDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_PACKAGEDPRODUCTDEFINITION}
{$IFDEF FHIR_PARAMETERS}
    function ParseParametersParameter(jsn : TJsonObject) : TFhirParametersParameter; overload; 
    procedure ParseParametersParameterProperties(jsn : TJsonObject; value : TFhirParametersParameter); overload;
    procedure ParseParametersParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseParameters(jsn : TJsonObject) : TFhirParameters; overload; 
    procedure ParseParametersProperties(jsn : TJsonObject; value : TFhirParameters); overload;
    procedure ParseParameters(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_PATIENT}
    function ParsePatientContact(jsn : TJsonObject) : TFhirPatientContact; overload; 
    procedure ParsePatientContactProperties(jsn : TJsonObject; value : TFhirPatientContact); overload;
    procedure ParsePatientContact(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePatientCommunication(jsn : TJsonObject) : TFhirPatientCommunication; overload; 
    procedure ParsePatientCommunicationProperties(jsn : TJsonObject; value : TFhirPatientCommunication); overload;
    procedure ParsePatientCommunication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePatientLink(jsn : TJsonObject) : TFhirPatientLink; overload; 
    procedure ParsePatientLinkProperties(jsn : TJsonObject; value : TFhirPatientLink); overload;
    procedure ParsePatientLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePatient(jsn : TJsonObject) : TFhirPatient; overload; 
    procedure ParsePatientProperties(jsn : TJsonObject; value : TFhirPatient); overload;
    procedure ParsePatient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
    function ParsePaymentNotice(jsn : TJsonObject) : TFhirPaymentNotice; overload; 
    procedure ParsePaymentNoticeProperties(jsn : TJsonObject; value : TFhirPaymentNotice); overload;
    procedure ParsePaymentNotice(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
    function ParsePaymentReconciliationDetail(jsn : TJsonObject) : TFhirPaymentReconciliationDetail; overload; 
    procedure ParsePaymentReconciliationDetailProperties(jsn : TJsonObject; value : TFhirPaymentReconciliationDetail); overload;
    procedure ParsePaymentReconciliationDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePaymentReconciliationProcessNote(jsn : TJsonObject) : TFhirPaymentReconciliationProcessNote; overload; 
    procedure ParsePaymentReconciliationProcessNoteProperties(jsn : TJsonObject; value : TFhirPaymentReconciliationProcessNote); overload;
    procedure ParsePaymentReconciliationProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePaymentReconciliation(jsn : TJsonObject) : TFhirPaymentReconciliation; overload; 
    procedure ParsePaymentReconciliationProperties(jsn : TJsonObject; value : TFhirPaymentReconciliation); overload;
    procedure ParsePaymentReconciliation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
    function ParsePersonLink(jsn : TJsonObject) : TFhirPersonLink; overload; 
    procedure ParsePersonLinkProperties(jsn : TJsonObject; value : TFhirPersonLink); overload;
    procedure ParsePersonLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePerson(jsn : TJsonObject) : TFhirPerson; overload; 
    procedure ParsePersonProperties(jsn : TJsonObject; value : TFhirPerson); overload;
    procedure ParsePerson(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
    function ParsePlanDefinitionGoal(jsn : TJsonObject) : TFhirPlanDefinitionGoal; overload; 
    procedure ParsePlanDefinitionGoalProperties(jsn : TJsonObject; value : TFhirPlanDefinitionGoal); overload;
    procedure ParsePlanDefinitionGoal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePlanDefinitionGoalTarget(jsn : TJsonObject) : TFhirPlanDefinitionGoalTarget; overload; 
    procedure ParsePlanDefinitionGoalTargetProperties(jsn : TJsonObject; value : TFhirPlanDefinitionGoalTarget); overload;
    procedure ParsePlanDefinitionGoalTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePlanDefinitionAction(jsn : TJsonObject) : TFhirPlanDefinitionAction; overload; 
    procedure ParsePlanDefinitionActionProperties(jsn : TJsonObject; value : TFhirPlanDefinitionAction); overload;
    procedure ParsePlanDefinitionAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePlanDefinitionActionCondition(jsn : TJsonObject) : TFhirPlanDefinitionActionCondition; overload; 
    procedure ParsePlanDefinitionActionConditionProperties(jsn : TJsonObject; value : TFhirPlanDefinitionActionCondition); overload;
    procedure ParsePlanDefinitionActionCondition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePlanDefinitionActionRelatedAction(jsn : TJsonObject) : TFhirPlanDefinitionActionRelatedAction; overload; 
    procedure ParsePlanDefinitionActionRelatedActionProperties(jsn : TJsonObject; value : TFhirPlanDefinitionActionRelatedAction); overload;
    procedure ParsePlanDefinitionActionRelatedAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePlanDefinitionActionParticipant(jsn : TJsonObject) : TFhirPlanDefinitionActionParticipant; overload; 
    procedure ParsePlanDefinitionActionParticipantProperties(jsn : TJsonObject; value : TFhirPlanDefinitionActionParticipant); overload;
    procedure ParsePlanDefinitionActionParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePlanDefinitionActionDynamicValue(jsn : TJsonObject) : TFhirPlanDefinitionActionDynamicValue; overload; 
    procedure ParsePlanDefinitionActionDynamicValueProperties(jsn : TJsonObject; value : TFhirPlanDefinitionActionDynamicValue); overload;
    procedure ParsePlanDefinitionActionDynamicValue(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePlanDefinition(jsn : TJsonObject) : TFhirPlanDefinition; overload; 
    procedure ParsePlanDefinitionProperties(jsn : TJsonObject; value : TFhirPlanDefinition); overload;
    procedure ParsePlanDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
    function ParsePractitionerQualification(jsn : TJsonObject) : TFhirPractitionerQualification; overload; 
    procedure ParsePractitionerQualificationProperties(jsn : TJsonObject; value : TFhirPractitionerQualification); overload;
    procedure ParsePractitionerQualification(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePractitioner(jsn : TJsonObject) : TFhirPractitioner; overload; 
    procedure ParsePractitionerProperties(jsn : TJsonObject; value : TFhirPractitioner); overload;
    procedure ParsePractitioner(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
    function ParsePractitionerRoleAvailableTime(jsn : TJsonObject) : TFhirPractitionerRoleAvailableTime; overload; 
    procedure ParsePractitionerRoleAvailableTimeProperties(jsn : TJsonObject; value : TFhirPractitionerRoleAvailableTime); overload;
    procedure ParsePractitionerRoleAvailableTime(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePractitionerRoleNotAvailable(jsn : TJsonObject) : TFhirPractitionerRoleNotAvailable; overload; 
    procedure ParsePractitionerRoleNotAvailableProperties(jsn : TJsonObject; value : TFhirPractitionerRoleNotAvailable); overload;
    procedure ParsePractitionerRoleNotAvailable(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParsePractitionerRole(jsn : TJsonObject) : TFhirPractitionerRole; overload; 
    procedure ParsePractitionerRoleProperties(jsn : TJsonObject; value : TFhirPractitionerRole); overload;
    procedure ParsePractitionerRole(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
    function ParseProcedurePerformer(jsn : TJsonObject) : TFhirProcedurePerformer; overload; 
    procedure ParseProcedurePerformerProperties(jsn : TJsonObject; value : TFhirProcedurePerformer); overload;
    procedure ParseProcedurePerformer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseProcedureFocalDevice(jsn : TJsonObject) : TFhirProcedureFocalDevice; overload; 
    procedure ParseProcedureFocalDeviceProperties(jsn : TJsonObject; value : TFhirProcedureFocalDevice); overload;
    procedure ParseProcedureFocalDevice(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseProcedure(jsn : TJsonObject) : TFhirProcedure; overload; 
    procedure ParseProcedureProperties(jsn : TJsonObject; value : TFhirProcedure); overload;
    procedure ParseProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
    function ParseProvenanceAgent(jsn : TJsonObject) : TFhirProvenanceAgent; overload; 
    procedure ParseProvenanceAgentProperties(jsn : TJsonObject; value : TFhirProvenanceAgent); overload;
    procedure ParseProvenanceAgent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseProvenanceEntity(jsn : TJsonObject) : TFhirProvenanceEntity; overload; 
    procedure ParseProvenanceEntityProperties(jsn : TJsonObject; value : TFhirProvenanceEntity); overload;
    procedure ParseProvenanceEntity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseProvenance(jsn : TJsonObject) : TFhirProvenance; overload; 
    procedure ParseProvenanceProperties(jsn : TJsonObject; value : TFhirProvenance); overload;
    procedure ParseProvenance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
    function ParseQuestionnaireItem(jsn : TJsonObject) : TFhirQuestionnaireItem; overload; 
    procedure ParseQuestionnaireItemProperties(jsn : TJsonObject; value : TFhirQuestionnaireItem); overload;
    procedure ParseQuestionnaireItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseQuestionnaireItemEnableWhen(jsn : TJsonObject) : TFhirQuestionnaireItemEnableWhen; overload; 
    procedure ParseQuestionnaireItemEnableWhenProperties(jsn : TJsonObject; value : TFhirQuestionnaireItemEnableWhen); overload;
    procedure ParseQuestionnaireItemEnableWhen(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseQuestionnaireItemAnswerOption(jsn : TJsonObject) : TFhirQuestionnaireItemAnswerOption; overload; 
    procedure ParseQuestionnaireItemAnswerOptionProperties(jsn : TJsonObject; value : TFhirQuestionnaireItemAnswerOption); overload;
    procedure ParseQuestionnaireItemAnswerOption(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseQuestionnaireItemInitial(jsn : TJsonObject) : TFhirQuestionnaireItemInitial; overload; 
    procedure ParseQuestionnaireItemInitialProperties(jsn : TJsonObject; value : TFhirQuestionnaireItemInitial); overload;
    procedure ParseQuestionnaireItemInitial(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseQuestionnaire(jsn : TJsonObject) : TFhirQuestionnaire; overload; 
    procedure ParseQuestionnaireProperties(jsn : TJsonObject; value : TFhirQuestionnaire); overload;
    procedure ParseQuestionnaire(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
    function ParseQuestionnaireResponseItem(jsn : TJsonObject) : TFhirQuestionnaireResponseItem; overload; 
    procedure ParseQuestionnaireResponseItemProperties(jsn : TJsonObject; value : TFhirQuestionnaireResponseItem); overload;
    procedure ParseQuestionnaireResponseItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseQuestionnaireResponseItemAnswer(jsn : TJsonObject) : TFhirQuestionnaireResponseItemAnswer; overload; 
    procedure ParseQuestionnaireResponseItemAnswerProperties(jsn : TJsonObject; value : TFhirQuestionnaireResponseItemAnswer); overload;
    procedure ParseQuestionnaireResponseItemAnswer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseQuestionnaireResponse(jsn : TJsonObject) : TFhirQuestionnaireResponse; overload; 
    procedure ParseQuestionnaireResponseProperties(jsn : TJsonObject; value : TFhirQuestionnaireResponse); overload;
    procedure ParseQuestionnaireResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REGULATEDAUTHORIZATION}
    function ParseRegulatedAuthorizationCase(jsn : TJsonObject) : TFhirRegulatedAuthorizationCase; overload; 
    procedure ParseRegulatedAuthorizationCaseProperties(jsn : TJsonObject; value : TFhirRegulatedAuthorizationCase); overload;
    procedure ParseRegulatedAuthorizationCase(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseRegulatedAuthorization(jsn : TJsonObject) : TFhirRegulatedAuthorization; overload; 
    procedure ParseRegulatedAuthorizationProperties(jsn : TJsonObject; value : TFhirRegulatedAuthorization); overload;
    procedure ParseRegulatedAuthorization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_REGULATEDAUTHORIZATION}
{$IFDEF FHIR_RELATEDPERSON}
    function ParseRelatedPersonCommunication(jsn : TJsonObject) : TFhirRelatedPersonCommunication; overload; 
    procedure ParseRelatedPersonCommunicationProperties(jsn : TJsonObject; value : TFhirRelatedPersonCommunication); overload;
    procedure ParseRelatedPersonCommunication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseRelatedPerson(jsn : TJsonObject) : TFhirRelatedPerson; overload; 
    procedure ParseRelatedPersonProperties(jsn : TJsonObject; value : TFhirRelatedPerson); overload;
    procedure ParseRelatedPerson(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
    function ParseRequestGroupAction(jsn : TJsonObject) : TFhirRequestGroupAction; overload; 
    procedure ParseRequestGroupActionProperties(jsn : TJsonObject; value : TFhirRequestGroupAction); overload;
    procedure ParseRequestGroupAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseRequestGroupActionCondition(jsn : TJsonObject) : TFhirRequestGroupActionCondition; overload; 
    procedure ParseRequestGroupActionConditionProperties(jsn : TJsonObject; value : TFhirRequestGroupActionCondition); overload;
    procedure ParseRequestGroupActionCondition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseRequestGroupActionRelatedAction(jsn : TJsonObject) : TFhirRequestGroupActionRelatedAction; overload; 
    procedure ParseRequestGroupActionRelatedActionProperties(jsn : TJsonObject; value : TFhirRequestGroupActionRelatedAction); overload;
    procedure ParseRequestGroupActionRelatedAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseRequestGroup(jsn : TJsonObject) : TFhirRequestGroup; overload; 
    procedure ParseRequestGroupProperties(jsn : TJsonObject; value : TFhirRequestGroup); overload;
    procedure ParseRequestGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHDEFINITION}
    function ParseResearchDefinition(jsn : TJsonObject) : TFhirResearchDefinition; overload; 
    procedure ParseResearchDefinitionProperties(jsn : TJsonObject; value : TFhirResearchDefinition); overload;
    procedure ParseResearchDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_RESEARCHDEFINITION}
{$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
    function ParseResearchElementDefinitionCharacteristic(jsn : TJsonObject) : TFhirResearchElementDefinitionCharacteristic; overload; 
    procedure ParseResearchElementDefinitionCharacteristicProperties(jsn : TJsonObject; value : TFhirResearchElementDefinitionCharacteristic); overload;
    procedure ParseResearchElementDefinitionCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseResearchElementDefinition(jsn : TJsonObject) : TFhirResearchElementDefinition; overload; 
    procedure ParseResearchElementDefinitionProperties(jsn : TJsonObject; value : TFhirResearchElementDefinition); overload;
    procedure ParseResearchElementDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_RESEARCHELEMENTDEFINITION}
{$IFDEF FHIR_RESEARCHSTUDY}
    function ParseResearchStudyArm(jsn : TJsonObject) : TFhirResearchStudyArm; overload; 
    procedure ParseResearchStudyArmProperties(jsn : TJsonObject; value : TFhirResearchStudyArm); overload;
    procedure ParseResearchStudyArm(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseResearchStudyObjective(jsn : TJsonObject) : TFhirResearchStudyObjective; overload; 
    procedure ParseResearchStudyObjectiveProperties(jsn : TJsonObject; value : TFhirResearchStudyObjective); overload;
    procedure ParseResearchStudyObjective(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseResearchStudy(jsn : TJsonObject) : TFhirResearchStudy; overload; 
    procedure ParseResearchStudyProperties(jsn : TJsonObject; value : TFhirResearchStudy); overload;
    procedure ParseResearchStudy(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
    function ParseResearchSubject(jsn : TJsonObject) : TFhirResearchSubject; overload; 
    procedure ParseResearchSubjectProperties(jsn : TJsonObject; value : TFhirResearchSubject); overload;
    procedure ParseResearchSubject(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
    function ParseRiskAssessmentPrediction(jsn : TJsonObject) : TFhirRiskAssessmentPrediction; overload; 
    procedure ParseRiskAssessmentPredictionProperties(jsn : TJsonObject; value : TFhirRiskAssessmentPrediction); overload;
    procedure ParseRiskAssessmentPrediction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseRiskAssessment(jsn : TJsonObject) : TFhirRiskAssessment; overload; 
    procedure ParseRiskAssessmentProperties(jsn : TJsonObject; value : TFhirRiskAssessment); overload;
    procedure ParseRiskAssessment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
    function ParseSchedule(jsn : TJsonObject) : TFhirSchedule; overload; 
    procedure ParseScheduleProperties(jsn : TJsonObject; value : TFhirSchedule); overload;
    procedure ParseSchedule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
    function ParseSearchParameterComponent(jsn : TJsonObject) : TFhirSearchParameterComponent; overload; 
    procedure ParseSearchParameterComponentProperties(jsn : TJsonObject; value : TFhirSearchParameterComponent); overload;
    procedure ParseSearchParameterComponent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSearchParameter(jsn : TJsonObject) : TFhirSearchParameter; overload; 
    procedure ParseSearchParameterProperties(jsn : TJsonObject; value : TFhirSearchParameter); overload;
    procedure ParseSearchParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
    function ParseServiceRequest(jsn : TJsonObject) : TFhirServiceRequest; overload; 
    procedure ParseServiceRequestProperties(jsn : TJsonObject; value : TFhirServiceRequest); overload;
    procedure ParseServiceRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
    function ParseSlot(jsn : TJsonObject) : TFhirSlot; overload; 
    procedure ParseSlotProperties(jsn : TJsonObject; value : TFhirSlot); overload;
    procedure ParseSlot(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
    function ParseSpecimenCollection(jsn : TJsonObject) : TFhirSpecimenCollection; overload; 
    procedure ParseSpecimenCollectionProperties(jsn : TJsonObject; value : TFhirSpecimenCollection); overload;
    procedure ParseSpecimenCollection(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSpecimenProcessing(jsn : TJsonObject) : TFhirSpecimenProcessing; overload; 
    procedure ParseSpecimenProcessingProperties(jsn : TJsonObject; value : TFhirSpecimenProcessing); overload;
    procedure ParseSpecimenProcessing(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSpecimenContainer(jsn : TJsonObject) : TFhirSpecimenContainer; overload; 
    procedure ParseSpecimenContainerProperties(jsn : TJsonObject; value : TFhirSpecimenContainer); overload;
    procedure ParseSpecimenContainer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSpecimen(jsn : TJsonObject) : TFhirSpecimen; overload; 
    procedure ParseSpecimenProperties(jsn : TJsonObject; value : TFhirSpecimen); overload;
    procedure ParseSpecimen(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
    function ParseSpecimenDefinitionTypeTested(jsn : TJsonObject) : TFhirSpecimenDefinitionTypeTested; overload; 
    procedure ParseSpecimenDefinitionTypeTestedProperties(jsn : TJsonObject; value : TFhirSpecimenDefinitionTypeTested); overload;
    procedure ParseSpecimenDefinitionTypeTested(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSpecimenDefinitionTypeTestedContainer(jsn : TJsonObject) : TFhirSpecimenDefinitionTypeTestedContainer; overload; 
    procedure ParseSpecimenDefinitionTypeTestedContainerProperties(jsn : TJsonObject; value : TFhirSpecimenDefinitionTypeTestedContainer); overload;
    procedure ParseSpecimenDefinitionTypeTestedContainer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSpecimenDefinitionTypeTestedContainerAdditive(jsn : TJsonObject) : TFhirSpecimenDefinitionTypeTestedContainerAdditive; overload; 
    procedure ParseSpecimenDefinitionTypeTestedContainerAdditiveProperties(jsn : TJsonObject; value : TFhirSpecimenDefinitionTypeTestedContainerAdditive); overload;
    procedure ParseSpecimenDefinitionTypeTestedContainerAdditive(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSpecimenDefinitionTypeTestedHandling(jsn : TJsonObject) : TFhirSpecimenDefinitionTypeTestedHandling; overload; 
    procedure ParseSpecimenDefinitionTypeTestedHandlingProperties(jsn : TJsonObject; value : TFhirSpecimenDefinitionTypeTestedHandling); overload;
    procedure ParseSpecimenDefinitionTypeTestedHandling(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSpecimenDefinition(jsn : TJsonObject) : TFhirSpecimenDefinition; overload; 
    procedure ParseSpecimenDefinitionProperties(jsn : TJsonObject; value : TFhirSpecimenDefinition); overload;
    procedure ParseSpecimenDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
    function ParseStructureDefinitionMapping(jsn : TJsonObject) : TFhirStructureDefinitionMapping; overload; 
    procedure ParseStructureDefinitionMappingProperties(jsn : TJsonObject; value : TFhirStructureDefinitionMapping); overload;
    procedure ParseStructureDefinitionMapping(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseStructureDefinitionContext(jsn : TJsonObject) : TFhirStructureDefinitionContext; overload; 
    procedure ParseStructureDefinitionContextProperties(jsn : TJsonObject; value : TFhirStructureDefinitionContext); overload;
    procedure ParseStructureDefinitionContext(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseStructureDefinitionSnapshot(jsn : TJsonObject) : TFhirStructureDefinitionSnapshot; overload; 
    procedure ParseStructureDefinitionSnapshotProperties(jsn : TJsonObject; value : TFhirStructureDefinitionSnapshot); overload;
    procedure ParseStructureDefinitionSnapshot(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseStructureDefinitionDifferential(jsn : TJsonObject) : TFhirStructureDefinitionDifferential; overload; 
    procedure ParseStructureDefinitionDifferentialProperties(jsn : TJsonObject; value : TFhirStructureDefinitionDifferential); overload;
    procedure ParseStructureDefinitionDifferential(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseStructureDefinition(jsn : TJsonObject) : TFhirStructureDefinition; overload; 
    procedure ParseStructureDefinitionProperties(jsn : TJsonObject; value : TFhirStructureDefinition); overload;
    procedure ParseStructureDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
    function ParseStructureMapStructure(jsn : TJsonObject) : TFhirStructureMapStructure; overload; 
    procedure ParseStructureMapStructureProperties(jsn : TJsonObject; value : TFhirStructureMapStructure); overload;
    procedure ParseStructureMapStructure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseStructureMapGroup(jsn : TJsonObject) : TFhirStructureMapGroup; overload; 
    procedure ParseStructureMapGroupProperties(jsn : TJsonObject; value : TFhirStructureMapGroup); overload;
    procedure ParseStructureMapGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseStructureMapGroupInput(jsn : TJsonObject) : TFhirStructureMapGroupInput; overload; 
    procedure ParseStructureMapGroupInputProperties(jsn : TJsonObject; value : TFhirStructureMapGroupInput); overload;
    procedure ParseStructureMapGroupInput(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseStructureMapGroupRule(jsn : TJsonObject) : TFhirStructureMapGroupRule; overload; 
    procedure ParseStructureMapGroupRuleProperties(jsn : TJsonObject; value : TFhirStructureMapGroupRule); overload;
    procedure ParseStructureMapGroupRule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseStructureMapGroupRuleSource(jsn : TJsonObject) : TFhirStructureMapGroupRuleSource; overload; 
    procedure ParseStructureMapGroupRuleSourceProperties(jsn : TJsonObject; value : TFhirStructureMapGroupRuleSource); overload;
    procedure ParseStructureMapGroupRuleSource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseStructureMapGroupRuleTarget(jsn : TJsonObject) : TFhirStructureMapGroupRuleTarget; overload; 
    procedure ParseStructureMapGroupRuleTargetProperties(jsn : TJsonObject; value : TFhirStructureMapGroupRuleTarget); overload;
    procedure ParseStructureMapGroupRuleTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseStructureMapGroupRuleTargetParameter(jsn : TJsonObject) : TFhirStructureMapGroupRuleTargetParameter; overload; 
    procedure ParseStructureMapGroupRuleTargetParameterProperties(jsn : TJsonObject; value : TFhirStructureMapGroupRuleTargetParameter); overload;
    procedure ParseStructureMapGroupRuleTargetParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseStructureMapGroupRuleDependent(jsn : TJsonObject) : TFhirStructureMapGroupRuleDependent; overload; 
    procedure ParseStructureMapGroupRuleDependentProperties(jsn : TJsonObject; value : TFhirStructureMapGroupRuleDependent); overload;
    procedure ParseStructureMapGroupRuleDependent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseStructureMap(jsn : TJsonObject) : TFhirStructureMap; overload; 
    procedure ParseStructureMapProperties(jsn : TJsonObject; value : TFhirStructureMap); overload;
    procedure ParseStructureMap(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
    function ParseSubscriptionChannel(jsn : TJsonObject) : TFhirSubscriptionChannel; overload; 
    procedure ParseSubscriptionChannelProperties(jsn : TJsonObject; value : TFhirSubscriptionChannel); overload;
    procedure ParseSubscriptionChannel(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubscription(jsn : TJsonObject) : TFhirSubscription; overload; 
    procedure ParseSubscriptionProperties(jsn : TJsonObject; value : TFhirSubscription); overload;
    procedure ParseSubscription(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSCRIPTIONSTATUS}
    function ParseSubscriptionStatusNotificationEvent(jsn : TJsonObject) : TFhirSubscriptionStatusNotificationEvent; overload; 
    procedure ParseSubscriptionStatusNotificationEventProperties(jsn : TJsonObject; value : TFhirSubscriptionStatusNotificationEvent); overload;
    procedure ParseSubscriptionStatusNotificationEvent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubscriptionStatus(jsn : TJsonObject) : TFhirSubscriptionStatus; overload; 
    procedure ParseSubscriptionStatusProperties(jsn : TJsonObject; value : TFhirSubscriptionStatus); overload;
    procedure ParseSubscriptionStatus(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_SUBSCRIPTIONSTATUS}
{$IFDEF FHIR_SUBSCRIPTIONTOPIC}
    function ParseSubscriptionTopicResourceTrigger(jsn : TJsonObject) : TFhirSubscriptionTopicResourceTrigger; overload; 
    procedure ParseSubscriptionTopicResourceTriggerProperties(jsn : TJsonObject; value : TFhirSubscriptionTopicResourceTrigger); overload;
    procedure ParseSubscriptionTopicResourceTrigger(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubscriptionTopicResourceTriggerQueryCriteria(jsn : TJsonObject) : TFhirSubscriptionTopicResourceTriggerQueryCriteria; overload; 
    procedure ParseSubscriptionTopicResourceTriggerQueryCriteriaProperties(jsn : TJsonObject; value : TFhirSubscriptionTopicResourceTriggerQueryCriteria); overload;
    procedure ParseSubscriptionTopicResourceTriggerQueryCriteria(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubscriptionTopicEventTrigger(jsn : TJsonObject) : TFhirSubscriptionTopicEventTrigger; overload; 
    procedure ParseSubscriptionTopicEventTriggerProperties(jsn : TJsonObject; value : TFhirSubscriptionTopicEventTrigger); overload;
    procedure ParseSubscriptionTopicEventTrigger(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubscriptionTopicCanFilterBy(jsn : TJsonObject) : TFhirSubscriptionTopicCanFilterBy; overload; 
    procedure ParseSubscriptionTopicCanFilterByProperties(jsn : TJsonObject; value : TFhirSubscriptionTopicCanFilterBy); overload;
    procedure ParseSubscriptionTopicCanFilterBy(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubscriptionTopicNotificationShape(jsn : TJsonObject) : TFhirSubscriptionTopicNotificationShape; overload; 
    procedure ParseSubscriptionTopicNotificationShapeProperties(jsn : TJsonObject; value : TFhirSubscriptionTopicNotificationShape); overload;
    procedure ParseSubscriptionTopicNotificationShape(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubscriptionTopic(jsn : TJsonObject) : TFhirSubscriptionTopic; overload; 
    procedure ParseSubscriptionTopicProperties(jsn : TJsonObject; value : TFhirSubscriptionTopic); overload;
    procedure ParseSubscriptionTopic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_SUBSCRIPTIONTOPIC}
{$IFDEF FHIR_SUBSTANCE}
    function ParseSubstanceInstance(jsn : TJsonObject) : TFhirSubstanceInstance; overload; 
    procedure ParseSubstanceInstanceProperties(jsn : TJsonObject; value : TFhirSubstanceInstance); overload;
    procedure ParseSubstanceInstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubstanceIngredient(jsn : TJsonObject) : TFhirSubstanceIngredient; overload; 
    procedure ParseSubstanceIngredientProperties(jsn : TJsonObject; value : TFhirSubstanceIngredient); overload;
    procedure ParseSubstanceIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubstance(jsn : TJsonObject) : TFhirSubstance; overload; 
    procedure ParseSubstanceProperties(jsn : TJsonObject; value : TFhirSubstance); overload;
    procedure ParseSubstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEDEFINITION}
    function ParseSubstanceDefinitionMoiety(jsn : TJsonObject) : TFhirSubstanceDefinitionMoiety; overload; 
    procedure ParseSubstanceDefinitionMoietyProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionMoiety); overload;
    procedure ParseSubstanceDefinitionMoiety(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubstanceDefinitionProperty(jsn : TJsonObject) : TFhirSubstanceDefinitionProperty; overload; 
    procedure ParseSubstanceDefinitionPropertyProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionProperty); overload;
    procedure ParseSubstanceDefinitionProperty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubstanceDefinitionMolecularWeight(jsn : TJsonObject) : TFhirSubstanceDefinitionMolecularWeight; overload; 
    procedure ParseSubstanceDefinitionMolecularWeightProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionMolecularWeight); overload;
    procedure ParseSubstanceDefinitionMolecularWeight(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubstanceDefinitionStructure(jsn : TJsonObject) : TFhirSubstanceDefinitionStructure; overload; 
    procedure ParseSubstanceDefinitionStructureProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionStructure); overload;
    procedure ParseSubstanceDefinitionStructure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubstanceDefinitionStructureRepresentation(jsn : TJsonObject) : TFhirSubstanceDefinitionStructureRepresentation; overload; 
    procedure ParseSubstanceDefinitionStructureRepresentationProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionStructureRepresentation); overload;
    procedure ParseSubstanceDefinitionStructureRepresentation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubstanceDefinitionCode(jsn : TJsonObject) : TFhirSubstanceDefinitionCode; overload; 
    procedure ParseSubstanceDefinitionCodeProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionCode); overload;
    procedure ParseSubstanceDefinitionCode(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubstanceDefinitionName(jsn : TJsonObject) : TFhirSubstanceDefinitionName; overload; 
    procedure ParseSubstanceDefinitionNameProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionName); overload;
    procedure ParseSubstanceDefinitionName(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubstanceDefinitionNameOfficial(jsn : TJsonObject) : TFhirSubstanceDefinitionNameOfficial; overload; 
    procedure ParseSubstanceDefinitionNameOfficialProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionNameOfficial); overload;
    procedure ParseSubstanceDefinitionNameOfficial(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubstanceDefinitionRelationship(jsn : TJsonObject) : TFhirSubstanceDefinitionRelationship; overload; 
    procedure ParseSubstanceDefinitionRelationshipProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionRelationship); overload;
    procedure ParseSubstanceDefinitionRelationship(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubstanceDefinitionSourceMaterial(jsn : TJsonObject) : TFhirSubstanceDefinitionSourceMaterial; overload; 
    procedure ParseSubstanceDefinitionSourceMaterialProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionSourceMaterial); overload;
    procedure ParseSubstanceDefinitionSourceMaterial(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSubstanceDefinition(jsn : TJsonObject) : TFhirSubstanceDefinition; overload; 
    procedure ParseSubstanceDefinitionProperties(jsn : TJsonObject; value : TFhirSubstanceDefinition); overload;
    procedure ParseSubstanceDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_SUBSTANCEDEFINITION}
{$IFDEF FHIR_SUPPLYDELIVERY}
    function ParseSupplyDeliverySuppliedItem(jsn : TJsonObject) : TFhirSupplyDeliverySuppliedItem; overload; 
    procedure ParseSupplyDeliverySuppliedItemProperties(jsn : TJsonObject; value : TFhirSupplyDeliverySuppliedItem); overload;
    procedure ParseSupplyDeliverySuppliedItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSupplyDelivery(jsn : TJsonObject) : TFhirSupplyDelivery; overload; 
    procedure ParseSupplyDeliveryProperties(jsn : TJsonObject; value : TFhirSupplyDelivery); overload;
    procedure ParseSupplyDelivery(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
    function ParseSupplyRequestParameter(jsn : TJsonObject) : TFhirSupplyRequestParameter; overload; 
    procedure ParseSupplyRequestParameterProperties(jsn : TJsonObject; value : TFhirSupplyRequestParameter); overload;
    procedure ParseSupplyRequestParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseSupplyRequest(jsn : TJsonObject) : TFhirSupplyRequest; overload; 
    procedure ParseSupplyRequestProperties(jsn : TJsonObject; value : TFhirSupplyRequest); overload;
    procedure ParseSupplyRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
    function ParseTaskRestriction(jsn : TJsonObject) : TFhirTaskRestriction; overload; 
    procedure ParseTaskRestrictionProperties(jsn : TJsonObject; value : TFhirTaskRestriction); overload;
    procedure ParseTaskRestriction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTaskInput(jsn : TJsonObject) : TFhirTaskInput; overload; 
    procedure ParseTaskInputProperties(jsn : TJsonObject; value : TFhirTaskInput); overload;
    procedure ParseTaskInput(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTaskOutput(jsn : TJsonObject) : TFhirTaskOutput; overload; 
    procedure ParseTaskOutputProperties(jsn : TJsonObject; value : TFhirTaskOutput); overload;
    procedure ParseTaskOutput(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTask(jsn : TJsonObject) : TFhirTask; overload; 
    procedure ParseTaskProperties(jsn : TJsonObject; value : TFhirTask); overload;
    procedure ParseTask(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
    function ParseTerminologyCapabilitiesSoftware(jsn : TJsonObject) : TFhirTerminologyCapabilitiesSoftware; overload; 
    procedure ParseTerminologyCapabilitiesSoftwareProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesSoftware); overload;
    procedure ParseTerminologyCapabilitiesSoftware(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTerminologyCapabilitiesImplementation(jsn : TJsonObject) : TFhirTerminologyCapabilitiesImplementation; overload; 
    procedure ParseTerminologyCapabilitiesImplementationProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesImplementation); overload;
    procedure ParseTerminologyCapabilitiesImplementation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTerminologyCapabilitiesCodeSystem(jsn : TJsonObject) : TFhirTerminologyCapabilitiesCodeSystem; overload; 
    procedure ParseTerminologyCapabilitiesCodeSystemProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesCodeSystem); overload;
    procedure ParseTerminologyCapabilitiesCodeSystem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTerminologyCapabilitiesCodeSystemVersion(jsn : TJsonObject) : TFhirTerminologyCapabilitiesCodeSystemVersion; overload; 
    procedure ParseTerminologyCapabilitiesCodeSystemVersionProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesCodeSystemVersion); overload;
    procedure ParseTerminologyCapabilitiesCodeSystemVersion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTerminologyCapabilitiesCodeSystemVersionFilter(jsn : TJsonObject) : TFhirTerminologyCapabilitiesCodeSystemVersionFilter; overload; 
    procedure ParseTerminologyCapabilitiesCodeSystemVersionFilterProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesCodeSystemVersionFilter); overload;
    procedure ParseTerminologyCapabilitiesCodeSystemVersionFilter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTerminologyCapabilitiesExpansion(jsn : TJsonObject) : TFhirTerminologyCapabilitiesExpansion; overload; 
    procedure ParseTerminologyCapabilitiesExpansionProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesExpansion); overload;
    procedure ParseTerminologyCapabilitiesExpansion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTerminologyCapabilitiesExpansionParameter(jsn : TJsonObject) : TFhirTerminologyCapabilitiesExpansionParameter; overload; 
    procedure ParseTerminologyCapabilitiesExpansionParameterProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesExpansionParameter); overload;
    procedure ParseTerminologyCapabilitiesExpansionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTerminologyCapabilitiesValidateCode(jsn : TJsonObject) : TFhirTerminologyCapabilitiesValidateCode; overload; 
    procedure ParseTerminologyCapabilitiesValidateCodeProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesValidateCode); overload;
    procedure ParseTerminologyCapabilitiesValidateCode(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTerminologyCapabilitiesTranslation(jsn : TJsonObject) : TFhirTerminologyCapabilitiesTranslation; overload; 
    procedure ParseTerminologyCapabilitiesTranslationProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesTranslation); overload;
    procedure ParseTerminologyCapabilitiesTranslation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTerminologyCapabilitiesClosure(jsn : TJsonObject) : TFhirTerminologyCapabilitiesClosure; overload; 
    procedure ParseTerminologyCapabilitiesClosureProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesClosure); overload;
    procedure ParseTerminologyCapabilitiesClosure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTerminologyCapabilities(jsn : TJsonObject) : TFhirTerminologyCapabilities; overload; 
    procedure ParseTerminologyCapabilitiesProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilities); overload;
    procedure ParseTerminologyCapabilities(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
    function ParseTestReportParticipant(jsn : TJsonObject) : TFhirTestReportParticipant; overload; 
    procedure ParseTestReportParticipantProperties(jsn : TJsonObject; value : TFhirTestReportParticipant); overload;
    procedure ParseTestReportParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestReportSetup(jsn : TJsonObject) : TFhirTestReportSetup; overload; 
    procedure ParseTestReportSetupProperties(jsn : TJsonObject; value : TFhirTestReportSetup); overload;
    procedure ParseTestReportSetup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestReportSetupAction(jsn : TJsonObject) : TFhirTestReportSetupAction; overload; 
    procedure ParseTestReportSetupActionProperties(jsn : TJsonObject; value : TFhirTestReportSetupAction); overload;
    procedure ParseTestReportSetupAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestReportSetupActionOperation(jsn : TJsonObject) : TFhirTestReportSetupActionOperation; overload; 
    procedure ParseTestReportSetupActionOperationProperties(jsn : TJsonObject; value : TFhirTestReportSetupActionOperation); overload;
    procedure ParseTestReportSetupActionOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestReportSetupActionAssert(jsn : TJsonObject) : TFhirTestReportSetupActionAssert; overload; 
    procedure ParseTestReportSetupActionAssertProperties(jsn : TJsonObject; value : TFhirTestReportSetupActionAssert); overload;
    procedure ParseTestReportSetupActionAssert(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestReportTest(jsn : TJsonObject) : TFhirTestReportTest; overload; 
    procedure ParseTestReportTestProperties(jsn : TJsonObject; value : TFhirTestReportTest); overload;
    procedure ParseTestReportTest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestReportTestAction(jsn : TJsonObject) : TFhirTestReportTestAction; overload; 
    procedure ParseTestReportTestActionProperties(jsn : TJsonObject; value : TFhirTestReportTestAction); overload;
    procedure ParseTestReportTestAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestReportTeardown(jsn : TJsonObject) : TFhirTestReportTeardown; overload; 
    procedure ParseTestReportTeardownProperties(jsn : TJsonObject; value : TFhirTestReportTeardown); overload;
    procedure ParseTestReportTeardown(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestReportTeardownAction(jsn : TJsonObject) : TFhirTestReportTeardownAction; overload; 
    procedure ParseTestReportTeardownActionProperties(jsn : TJsonObject; value : TFhirTestReportTeardownAction); overload;
    procedure ParseTestReportTeardownAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestReport(jsn : TJsonObject) : TFhirTestReport; overload; 
    procedure ParseTestReportProperties(jsn : TJsonObject; value : TFhirTestReport); overload;
    procedure ParseTestReport(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
    function ParseTestScriptOrigin(jsn : TJsonObject) : TFhirTestScriptOrigin; overload; 
    procedure ParseTestScriptOriginProperties(jsn : TJsonObject; value : TFhirTestScriptOrigin); overload;
    procedure ParseTestScriptOrigin(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptDestination(jsn : TJsonObject) : TFhirTestScriptDestination; overload; 
    procedure ParseTestScriptDestinationProperties(jsn : TJsonObject; value : TFhirTestScriptDestination); overload;
    procedure ParseTestScriptDestination(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptMetadata(jsn : TJsonObject) : TFhirTestScriptMetadata; overload; 
    procedure ParseTestScriptMetadataProperties(jsn : TJsonObject; value : TFhirTestScriptMetadata); overload;
    procedure ParseTestScriptMetadata(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptMetadataLink(jsn : TJsonObject) : TFhirTestScriptMetadataLink; overload; 
    procedure ParseTestScriptMetadataLinkProperties(jsn : TJsonObject; value : TFhirTestScriptMetadataLink); overload;
    procedure ParseTestScriptMetadataLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptMetadataCapability(jsn : TJsonObject) : TFhirTestScriptMetadataCapability; overload; 
    procedure ParseTestScriptMetadataCapabilityProperties(jsn : TJsonObject; value : TFhirTestScriptMetadataCapability); overload;
    procedure ParseTestScriptMetadataCapability(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptFixture(jsn : TJsonObject) : TFhirTestScriptFixture; overload; 
    procedure ParseTestScriptFixtureProperties(jsn : TJsonObject; value : TFhirTestScriptFixture); overload;
    procedure ParseTestScriptFixture(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptVariable(jsn : TJsonObject) : TFhirTestScriptVariable; overload; 
    procedure ParseTestScriptVariableProperties(jsn : TJsonObject; value : TFhirTestScriptVariable); overload;
    procedure ParseTestScriptVariable(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptSetup(jsn : TJsonObject) : TFhirTestScriptSetup; overload; 
    procedure ParseTestScriptSetupProperties(jsn : TJsonObject; value : TFhirTestScriptSetup); overload;
    procedure ParseTestScriptSetup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptSetupAction(jsn : TJsonObject) : TFhirTestScriptSetupAction; overload; 
    procedure ParseTestScriptSetupActionProperties(jsn : TJsonObject; value : TFhirTestScriptSetupAction); overload;
    procedure ParseTestScriptSetupAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptSetupActionOperation(jsn : TJsonObject) : TFhirTestScriptSetupActionOperation; overload; 
    procedure ParseTestScriptSetupActionOperationProperties(jsn : TJsonObject; value : TFhirTestScriptSetupActionOperation); overload;
    procedure ParseTestScriptSetupActionOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptSetupActionOperationRequestHeader(jsn : TJsonObject) : TFhirTestScriptSetupActionOperationRequestHeader; overload; 
    procedure ParseTestScriptSetupActionOperationRequestHeaderProperties(jsn : TJsonObject; value : TFhirTestScriptSetupActionOperationRequestHeader); overload;
    procedure ParseTestScriptSetupActionOperationRequestHeader(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptSetupActionAssert(jsn : TJsonObject) : TFhirTestScriptSetupActionAssert; overload; 
    procedure ParseTestScriptSetupActionAssertProperties(jsn : TJsonObject; value : TFhirTestScriptSetupActionAssert); overload;
    procedure ParseTestScriptSetupActionAssert(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptTest(jsn : TJsonObject) : TFhirTestScriptTest; overload; 
    procedure ParseTestScriptTestProperties(jsn : TJsonObject; value : TFhirTestScriptTest); overload;
    procedure ParseTestScriptTest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptTestAction(jsn : TJsonObject) : TFhirTestScriptTestAction; overload; 
    procedure ParseTestScriptTestActionProperties(jsn : TJsonObject; value : TFhirTestScriptTestAction); overload;
    procedure ParseTestScriptTestAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptTeardown(jsn : TJsonObject) : TFhirTestScriptTeardown; overload; 
    procedure ParseTestScriptTeardownProperties(jsn : TJsonObject; value : TFhirTestScriptTeardown); overload;
    procedure ParseTestScriptTeardown(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScriptTeardownAction(jsn : TJsonObject) : TFhirTestScriptTeardownAction; overload; 
    procedure ParseTestScriptTeardownActionProperties(jsn : TJsonObject; value : TFhirTestScriptTeardownAction); overload;
    procedure ParseTestScriptTeardownAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseTestScript(jsn : TJsonObject) : TFhirTestScript; overload; 
    procedure ParseTestScriptProperties(jsn : TJsonObject; value : TFhirTestScript); overload;
    procedure ParseTestScript(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
    function ParseValueSetCompose(jsn : TJsonObject) : TFhirValueSetCompose; overload; 
    procedure ParseValueSetComposeProperties(jsn : TJsonObject; value : TFhirValueSetCompose); overload;
    procedure ParseValueSetCompose(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseValueSetComposeInclude(jsn : TJsonObject) : TFhirValueSetComposeInclude; overload; 
    procedure ParseValueSetComposeIncludeProperties(jsn : TJsonObject; value : TFhirValueSetComposeInclude); overload;
    procedure ParseValueSetComposeInclude(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseValueSetComposeIncludeConcept(jsn : TJsonObject) : TFhirValueSetComposeIncludeConcept; overload; 
    procedure ParseValueSetComposeIncludeConceptProperties(jsn : TJsonObject; value : TFhirValueSetComposeIncludeConcept); overload;
    procedure ParseValueSetComposeIncludeConcept(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseValueSetComposeIncludeConceptDesignation(jsn : TJsonObject) : TFhirValueSetComposeIncludeConceptDesignation; overload; 
    procedure ParseValueSetComposeIncludeConceptDesignationProperties(jsn : TJsonObject; value : TFhirValueSetComposeIncludeConceptDesignation); overload;
    procedure ParseValueSetComposeIncludeConceptDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseValueSetComposeIncludeFilter(jsn : TJsonObject) : TFhirValueSetComposeIncludeFilter; overload; 
    procedure ParseValueSetComposeIncludeFilterProperties(jsn : TJsonObject; value : TFhirValueSetComposeIncludeFilter); overload;
    procedure ParseValueSetComposeIncludeFilter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseValueSetExpansion(jsn : TJsonObject) : TFhirValueSetExpansion; overload; 
    procedure ParseValueSetExpansionProperties(jsn : TJsonObject; value : TFhirValueSetExpansion); overload;
    procedure ParseValueSetExpansion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseValueSetExpansionParameter(jsn : TJsonObject) : TFhirValueSetExpansionParameter; overload; 
    procedure ParseValueSetExpansionParameterProperties(jsn : TJsonObject; value : TFhirValueSetExpansionParameter); overload;
    procedure ParseValueSetExpansionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseValueSetExpansionContains(jsn : TJsonObject) : TFhirValueSetExpansionContains; overload; 
    procedure ParseValueSetExpansionContainsProperties(jsn : TJsonObject; value : TFhirValueSetExpansionContains); overload;
    procedure ParseValueSetExpansionContains(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseValueSet(jsn : TJsonObject) : TFhirValueSet; overload; 
    procedure ParseValueSetProperties(jsn : TJsonObject; value : TFhirValueSet); overload;
    procedure ParseValueSet(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
    function ParseVerificationResultPrimarySource(jsn : TJsonObject) : TFhirVerificationResultPrimarySource; overload; 
    procedure ParseVerificationResultPrimarySourceProperties(jsn : TJsonObject; value : TFhirVerificationResultPrimarySource); overload;
    procedure ParseVerificationResultPrimarySource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseVerificationResultAttestation(jsn : TJsonObject) : TFhirVerificationResultAttestation; overload; 
    procedure ParseVerificationResultAttestationProperties(jsn : TJsonObject; value : TFhirVerificationResultAttestation); overload;
    procedure ParseVerificationResultAttestation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseVerificationResultValidator(jsn : TJsonObject) : TFhirVerificationResultValidator; overload; 
    procedure ParseVerificationResultValidatorProperties(jsn : TJsonObject; value : TFhirVerificationResultValidator); overload;
    procedure ParseVerificationResultValidator(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseVerificationResult(jsn : TJsonObject) : TFhirVerificationResult; overload; 
    procedure ParseVerificationResultProperties(jsn : TJsonObject; value : TFhirVerificationResult); overload;
    procedure ParseVerificationResult(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
    function ParseVisionPrescriptionLensSpecification(jsn : TJsonObject) : TFhirVisionPrescriptionLensSpecification; overload; 
    procedure ParseVisionPrescriptionLensSpecificationProperties(jsn : TJsonObject; value : TFhirVisionPrescriptionLensSpecification); overload;
    procedure ParseVisionPrescriptionLensSpecification(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseVisionPrescriptionLensSpecificationPrism(jsn : TJsonObject) : TFhirVisionPrescriptionLensSpecificationPrism; overload; 
    procedure ParseVisionPrescriptionLensSpecificationPrismProperties(jsn : TJsonObject; value : TFhirVisionPrescriptionLensSpecificationPrism); overload;
    procedure ParseVisionPrescriptionLensSpecificationPrism(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
    function ParseVisionPrescription(jsn : TJsonObject) : TFhirVisionPrescription; overload; 
    procedure ParseVisionPrescriptionProperties(jsn : TJsonObject; value : TFhirVisionPrescription); overload;
    procedure ParseVisionPrescription(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; 
{$ENDIF FHIR_VISIONPRESCRIPTION}


    function ParseResource(jsn : TJsonObject) : TFhirResource; override;
    function ParseDataType(jsn : TJsonObject; name : String; type_ : TFHIRDataTypeClass) : TFHIRDataType; override;
  public
    function ParseFragment(jsn : TJsonObject; type_ : String) : TFHIRObject;  overload;
  end;

  TFHIRJsonComposer = class (TFHIRJsonComposerBase4B)
  private
    Procedure ComposeBaseProperties(json : TJSONWriter; value : TFhirBase); overload;
    Procedure ComposeBaseProperties(json : TJSONWriter; value : TFhirResource); overload;
  protected
    Procedure ComposeElementProperties(json : TJSONWriter; value : TFhirElement);
    Procedure ComposeBackboneElementProperties(json : TJSONWriter; value : TFhirBackboneElement);
    Procedure ComposeDataTypeProperties(json : TJSONWriter; value : TFhirDataType);
    Procedure ComposeBackboneTypeProperties(json : TJSONWriter; value : TFhirBackboneType);


    Procedure ComposeEnumValue(json : TJSONWriter; name : String; value : TFhirEnum; Const aNames : Array Of String; inArray : boolean);
    Procedure ComposeEnumProps(json : TJSONWriter; name : String; value : TFhirEnum; Const aNames : Array Of String; inArray : boolean);
    Procedure ComposeDateValue(json : TJSONWriter; name : String; value : TFhirDate; inArray : boolean);
    Procedure ComposeDateProps(json : TJSONWriter; name : String; value : TFhirDate; inArray : boolean);
    Procedure ComposeDateTimeValue(json : TJSONWriter; name : String; value : TFhirDateTime; inArray : boolean);
    Procedure ComposeDateTimeProps(json : TJSONWriter; name : String; value : TFhirDateTime; inArray : boolean);
    Procedure ComposeStringValue(json : TJSONWriter; name : String; value : TFhirString; inArray : boolean);
    Procedure ComposeStringProps(json : TJSONWriter; name : String; value : TFhirString; inArray : boolean);
    Procedure ComposeIntegerValue(json : TJSONWriter; name : String; value : TFhirInteger; inArray : boolean);
    Procedure ComposeIntegerProps(json : TJSONWriter; name : String; value : TFhirInteger; inArray : boolean);
    Procedure ComposeUriValue(json : TJSONWriter; name : String; value : TFhirUri; inArray : boolean);
    Procedure ComposeUriProps(json : TJSONWriter; name : String; value : TFhirUri; inArray : boolean);
    Procedure ComposeInstantValue(json : TJSONWriter; name : String; value : TFhirInstant; inArray : boolean);
    Procedure ComposeInstantProps(json : TJSONWriter; name : String; value : TFhirInstant; inArray : boolean);
    Procedure ComposeXhtmlValue(json : TJSONWriter; name : String; value : TFhirXhtml; inArray : boolean);
    Procedure ComposeXhtmlProps(json : TJSONWriter; name : String; value : TFhirXhtml; inArray : boolean);
    Procedure ComposeBooleanValue(json : TJSONWriter; name : String; value : TFhirBoolean; inArray : boolean);
    Procedure ComposeBooleanProps(json : TJSONWriter; name : String; value : TFhirBoolean; inArray : boolean);
    Procedure ComposeBase64BinaryValue(json : TJSONWriter; name : String; value : TFhirBase64Binary; inArray : boolean);
    Procedure ComposeBase64BinaryProps(json : TJSONWriter; name : String; value : TFhirBase64Binary; inArray : boolean);
    Procedure ComposeTimeValue(json : TJSONWriter; name : String; value : TFhirTime; inArray : boolean);
    Procedure ComposeTimeProps(json : TJSONWriter; name : String; value : TFhirTime; inArray : boolean);
    Procedure ComposeDecimalValue(json : TJSONWriter; name : String; value : TFhirDecimal; inArray : boolean);
    Procedure ComposeDecimalProps(json : TJSONWriter; name : String; value : TFhirDecimal; inArray : boolean);
    Procedure ComposeCodeValue(json : TJSONWriter; name : String; value : TFhirCode; inArray : boolean);
    Procedure ComposeCodeProps(json : TJSONWriter; name : String; value : TFhirCode; inArray : boolean);
    Procedure ComposeCanonicalValue(json : TJSONWriter; name : String; value : TFhirCanonical; inArray : boolean);
    Procedure ComposeCanonicalProps(json : TJSONWriter; name : String; value : TFhirCanonical; inArray : boolean);
    Procedure ComposeOidValue(json : TJSONWriter; name : String; value : TFhirOid; inArray : boolean);
    Procedure ComposeOidProps(json : TJSONWriter; name : String; value : TFhirOid; inArray : boolean);
    Procedure ComposeUuidValue(json : TJSONWriter; name : String; value : TFhirUuid; inArray : boolean);
    Procedure ComposeUuidProps(json : TJSONWriter; name : String; value : TFhirUuid; inArray : boolean);
    Procedure ComposeUrlValue(json : TJSONWriter; name : String; value : TFhirUrl; inArray : boolean);
    Procedure ComposeUrlProps(json : TJSONWriter; name : String; value : TFhirUrl; inArray : boolean);
    Procedure ComposeMarkdownValue(json : TJSONWriter; name : String; value : TFhirMarkdown; inArray : boolean);
    Procedure ComposeMarkdownProps(json : TJSONWriter; name : String; value : TFhirMarkdown; inArray : boolean);
    Procedure ComposeUnsignedIntValue(json : TJSONWriter; name : String; value : TFhirUnsignedInt; inArray : boolean);
    Procedure ComposeUnsignedIntProps(json : TJSONWriter; name : String; value : TFhirUnsignedInt; inArray : boolean);
    Procedure ComposeIdValue(json : TJSONWriter; name : String; value : TFhirId; inArray : boolean);
    Procedure ComposeIdProps(json : TJSONWriter; name : String; value : TFhirId; inArray : boolean);
    Procedure ComposePositiveIntValue(json : TJSONWriter; name : String; value : TFhirPositiveInt; inArray : boolean);
    Procedure ComposePositiveIntProps(json : TJSONWriter; name : String; value : TFhirPositiveInt; inArray : boolean);
    Procedure ComposeInteger64Value(json : TJSONWriter; name : String; value : TFhirInteger64; inArray : boolean);
    Procedure ComposeInteger64Props(json : TJSONWriter; name : String; value : TFhirInteger64; inArray : boolean);

    procedure ComposeCodeableReference(json : TJSONWriter; name : string; value : TFhirCodeableReference; noObj : boolean = false);
    procedure ComposeRatioRange(json : TJSONWriter; name : string; value : TFhirRatioRange; noObj : boolean = false);
    procedure ComposeAddress(json : TJSONWriter; name : string; value : TFhirAddress; noObj : boolean = false);
    procedure ComposeAge(json : TJSONWriter; name : string; value : TFhirAge; noObj : boolean = false);
    procedure ComposeAnnotation(json : TJSONWriter; name : string; value : TFhirAnnotation; noObj : boolean = false);
    procedure ComposeAttachment(json : TJSONWriter; name : string; value : TFhirAttachment; noObj : boolean = false);
    procedure ComposeCodeableConcept(json : TJSONWriter; name : string; value : TFhirCodeableConcept; noObj : boolean = false);
    procedure ComposeCoding(json : TJSONWriter; name : string; value : TFhirCoding; noObj : boolean = false);
    procedure ComposeContactDetail(json : TJSONWriter; name : string; value : TFhirContactDetail; noObj : boolean = false);
    procedure ComposeContactPoint(json : TJSONWriter; name : string; value : TFhirContactPoint; noObj : boolean = false);
    procedure ComposeContributor(json : TJSONWriter; name : string; value : TFhirContributor; noObj : boolean = false);
    procedure ComposeCount(json : TJSONWriter; name : string; value : TFhirCount; noObj : boolean = false);
    procedure ComposeDataRequirementCodeFilter(json : TJSONWriter; name : string; value : TFhirDataRequirementCodeFilter; noObj : boolean = false);
    procedure ComposeDataRequirementDateFilter(json : TJSONWriter; name : string; value : TFhirDataRequirementDateFilter; noObj : boolean = false);
    procedure ComposeDataRequirementSort(json : TJSONWriter; name : string; value : TFhirDataRequirementSort; noObj : boolean = false);
    procedure ComposeDataRequirement(json : TJSONWriter; name : string; value : TFhirDataRequirement; noObj : boolean = false);
    procedure ComposeDistance(json : TJSONWriter; name : string; value : TFhirDistance; noObj : boolean = false);
    procedure ComposeDosageDoseAndRate(json : TJSONWriter; name : string; value : TFhirDosageDoseAndRate; noObj : boolean = false);
    procedure ComposeDosage(json : TJSONWriter; name : string; value : TFhirDosage; noObj : boolean = false);
    procedure ComposeDuration(json : TJSONWriter; name : string; value : TFhirDuration; noObj : boolean = false);
    procedure ComposeElementDefinitionSlicing(json : TJSONWriter; name : string; value : TFhirElementDefinitionSlicing; noObj : boolean = false);
    procedure ComposeElementDefinitionSlicingDiscriminator(json : TJSONWriter; name : string; value : TFhirElementDefinitionSlicingDiscriminator; noObj : boolean = false);
    procedure ComposeElementDefinitionBase(json : TJSONWriter; name : string; value : TFhirElementDefinitionBase; noObj : boolean = false);
    procedure ComposeElementDefinitionType(json : TJSONWriter; name : string; value : TFhirElementDefinitionType; noObj : boolean = false);
    procedure ComposeElementDefinitionExample(json : TJSONWriter; name : string; value : TFhirElementDefinitionExample; noObj : boolean = false);
    procedure ComposeElementDefinitionConstraint(json : TJSONWriter; name : string; value : TFhirElementDefinitionConstraint; noObj : boolean = false);
    procedure ComposeElementDefinitionBinding(json : TJSONWriter; name : string; value : TFhirElementDefinitionBinding; noObj : boolean = false);
    procedure ComposeElementDefinitionMapping(json : TJSONWriter; name : string; value : TFhirElementDefinitionMapping; noObj : boolean = false);
    procedure ComposeElementDefinition(json : TJSONWriter; name : string; value : TFhirElementDefinition; noObj : boolean = false);
    procedure ComposeExpression(json : TJSONWriter; name : string; value : TFhirExpression; noObj : boolean = false);
    procedure ComposeExtension(json : TJSONWriter; name : string; value : TFhirExtension; noObj : boolean = false);
    procedure ComposeHumanName(json : TJSONWriter; name : string; value : TFhirHumanName; noObj : boolean = false);
    procedure ComposeIdentifier(json : TJSONWriter; name : string; value : TFhirIdentifier; noObj : boolean = false);
    procedure ComposeMarketingStatus(json : TJSONWriter; name : string; value : TFhirMarketingStatus; noObj : boolean = false);
    procedure ComposeMeta(json : TJSONWriter; name : string; value : TFhirMeta; noObj : boolean = false);
    procedure ComposeMoney(json : TJSONWriter; name : string; value : TFhirMoney; noObj : boolean = false);
    procedure ComposeNarrative(json : TJSONWriter; name : string; value : TFhirNarrative; noObj : boolean = false);
    procedure ComposeParameterDefinition(json : TJSONWriter; name : string; value : TFhirParameterDefinition; noObj : boolean = false);
    procedure ComposePeriod(json : TJSONWriter; name : string; value : TFhirPeriod; noObj : boolean = false);
    procedure ComposePopulation(json : TJSONWriter; name : string; value : TFhirPopulation; noObj : boolean = false);
    procedure ComposeProdCharacteristic(json : TJSONWriter; name : string; value : TFhirProdCharacteristic; noObj : boolean = false);
    procedure ComposeProductShelfLife(json : TJSONWriter; name : string; value : TFhirProductShelfLife; noObj : boolean = false);
    procedure ComposeQuantity(json : TJSONWriter; name : string; value : TFhirQuantity; noObj : boolean = false);
    procedure ComposeRange(json : TJSONWriter; name : string; value : TFhirRange; noObj : boolean = false);
    procedure ComposeRatio(json : TJSONWriter; name : string; value : TFhirRatio; noObj : boolean = false);
    procedure ComposeReference(json : TJSONWriter; name : string; value : TFhirReference; noObj : boolean = false);
    procedure ComposeRelatedArtifact(json : TJSONWriter; name : string; value : TFhirRelatedArtifact; noObj : boolean = false);
    procedure ComposeSampledData(json : TJSONWriter; name : string; value : TFhirSampledData; noObj : boolean = false);
    procedure ComposeSignature(json : TJSONWriter; name : string; value : TFhirSignature; noObj : boolean = false);
    procedure ComposeTimingRepeat(json : TJSONWriter; name : string; value : TFhirTimingRepeat; noObj : boolean = false);
    procedure ComposeTiming(json : TJSONWriter; name : string; value : TFhirTiming; noObj : boolean = false);
    procedure ComposeTriggerDefinition(json : TJSONWriter; name : string; value : TFhirTriggerDefinition; noObj : boolean = false);
    procedure ComposeUsageContext(json : TJSONWriter; name : string; value : TFhirUsageContext; noObj : boolean = false);


    Procedure ComposeResourceProperties(json : TJSONWriter; value : TFhirResource);
    Procedure ComposeDomainResourceProperties(json : TJSONWriter; value : TFhirDomainResource);
{$IFDEF FHIR_ACCOUNT}
    procedure ComposeAccountCoverage(json : TJSONWriter; name : string; value : TFhirAccountCoverage; noObj : boolean = false);
    procedure ComposeAccountGuarantor(json : TJSONWriter; name : string; value : TFhirAccountGuarantor; noObj : boolean = false);
    procedure ComposeAccount(json : TJSONWriter; name : string; value : TFhirAccount; noObj : boolean = false);
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
    procedure ComposeActivityDefinitionParticipant(json : TJSONWriter; name : string; value : TFhirActivityDefinitionParticipant; noObj : boolean = false);
    procedure ComposeActivityDefinitionDynamicValue(json : TJSONWriter; name : string; value : TFhirActivityDefinitionDynamicValue; noObj : boolean = false);
    procedure ComposeActivityDefinition(json : TJSONWriter; name : string; value : TFhirActivityDefinition; noObj : boolean = false);
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
    procedure ComposeAdministrableProductDefinitionProperty(json : TJSONWriter; name : string; value : TFhirAdministrableProductDefinitionProperty; noObj : boolean = false);
    procedure ComposeAdministrableProductDefinitionRouteOfAdministration(json : TJSONWriter; name : string; value : TFhirAdministrableProductDefinitionRouteOfAdministration; noObj : boolean = false);
    procedure ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(json : TJSONWriter; name : string; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies; noObj : boolean = false);
    procedure ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(json : TJSONWriter; name : string; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod; noObj : boolean = false);
    procedure ComposeAdministrableProductDefinition(json : TJSONWriter; name : string; value : TFhirAdministrableProductDefinition; noObj : boolean = false);
{$ENDIF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
    procedure ComposeAdverseEventSuspectEntity(json : TJSONWriter; name : string; value : TFhirAdverseEventSuspectEntity; noObj : boolean = false);
    procedure ComposeAdverseEventSuspectEntityCausality(json : TJSONWriter; name : string; value : TFhirAdverseEventSuspectEntityCausality; noObj : boolean = false);
    procedure ComposeAdverseEvent(json : TJSONWriter; name : string; value : TFhirAdverseEvent; noObj : boolean = false);
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
    procedure ComposeAllergyIntoleranceReaction(json : TJSONWriter; name : string; value : TFhirAllergyIntoleranceReaction; noObj : boolean = false);
    procedure ComposeAllergyIntolerance(json : TJSONWriter; name : string; value : TFhirAllergyIntolerance; noObj : boolean = false);
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
    procedure ComposeAppointmentParticipant(json : TJSONWriter; name : string; value : TFhirAppointmentParticipant; noObj : boolean = false);
    procedure ComposeAppointment(json : TJSONWriter; name : string; value : TFhirAppointment; noObj : boolean = false);
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
    procedure ComposeAppointmentResponse(json : TJSONWriter; name : string; value : TFhirAppointmentResponse; noObj : boolean = false);
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
    procedure ComposeAuditEventAgent(json : TJSONWriter; name : string; value : TFhirAuditEventAgent; noObj : boolean = false);
    procedure ComposeAuditEventAgentNetwork(json : TJSONWriter; name : string; value : TFhirAuditEventAgentNetwork; noObj : boolean = false);
    procedure ComposeAuditEventSource(json : TJSONWriter; name : string; value : TFhirAuditEventSource; noObj : boolean = false);
    procedure ComposeAuditEventEntity(json : TJSONWriter; name : string; value : TFhirAuditEventEntity; noObj : boolean = false);
    procedure ComposeAuditEventEntityDetail(json : TJSONWriter; name : string; value : TFhirAuditEventEntityDetail; noObj : boolean = false);
    procedure ComposeAuditEvent(json : TJSONWriter; name : string; value : TFhirAuditEvent; noObj : boolean = false);
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
    procedure ComposeBasic(json : TJSONWriter; name : string; value : TFhirBasic; noObj : boolean = false);
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
    procedure ComposeBinary(json : TJSONWriter; name : string; value : TFhirBinary; noObj : boolean = false);
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
    procedure ComposeBiologicallyDerivedProductCollection(json : TJSONWriter; name : string; value : TFhirBiologicallyDerivedProductCollection; noObj : boolean = false);
    procedure ComposeBiologicallyDerivedProductProcessing(json : TJSONWriter; name : string; value : TFhirBiologicallyDerivedProductProcessing; noObj : boolean = false);
    procedure ComposeBiologicallyDerivedProductManipulation(json : TJSONWriter; name : string; value : TFhirBiologicallyDerivedProductManipulation; noObj : boolean = false);
    procedure ComposeBiologicallyDerivedProductStorage(json : TJSONWriter; name : string; value : TFhirBiologicallyDerivedProductStorage; noObj : boolean = false);
    procedure ComposeBiologicallyDerivedProduct(json : TJSONWriter; name : string; value : TFhirBiologicallyDerivedProduct; noObj : boolean = false);
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
    procedure ComposeBodyStructure(json : TJSONWriter; name : string; value : TFhirBodyStructure; noObj : boolean = false);
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
    procedure ComposeBundleLink(json : TJSONWriter; name : string; value : TFhirBundleLink; noObj : boolean = false);
    procedure ComposeBundleEntry(json : TJSONWriter; name : string; value : TFhirBundleEntry; noObj : boolean = false);
    procedure ComposeBundleEntrySearch(json : TJSONWriter; name : string; value : TFhirBundleEntrySearch; noObj : boolean = false);
    procedure ComposeBundleEntryRequest(json : TJSONWriter; name : string; value : TFhirBundleEntryRequest; noObj : boolean = false);
    procedure ComposeBundleEntryResponse(json : TJSONWriter; name : string; value : TFhirBundleEntryResponse; noObj : boolean = false);
    procedure ComposeBundle(json : TJSONWriter; name : string; value : TFhirBundle; noObj : boolean = false);
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
    procedure ComposeCapabilityStatementSoftware(json : TJSONWriter; name : string; value : TFhirCapabilityStatementSoftware; noObj : boolean = false);
    procedure ComposeCapabilityStatementImplementation(json : TJSONWriter; name : string; value : TFhirCapabilityStatementImplementation; noObj : boolean = false);
    procedure ComposeCapabilityStatementRest(json : TJSONWriter; name : string; value : TFhirCapabilityStatementRest; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestSecurity(json : TJSONWriter; name : string; value : TFhirCapabilityStatementRestSecurity; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestResource(json : TJSONWriter; name : string; value : TFhirCapabilityStatementRestResource; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestResourceInteraction(json : TJSONWriter; name : string; value : TFhirCapabilityStatementRestResourceInteraction; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestResourceSearchParam(json : TJSONWriter; name : string; value : TFhirCapabilityStatementRestResourceSearchParam; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestResourceOperation(json : TJSONWriter; name : string; value : TFhirCapabilityStatementRestResourceOperation; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestInteraction(json : TJSONWriter; name : string; value : TFhirCapabilityStatementRestInteraction; noObj : boolean = false);
    procedure ComposeCapabilityStatementMessaging(json : TJSONWriter; name : string; value : TFhirCapabilityStatementMessaging; noObj : boolean = false);
    procedure ComposeCapabilityStatementMessagingEndpoint(json : TJSONWriter; name : string; value : TFhirCapabilityStatementMessagingEndpoint; noObj : boolean = false);
    procedure ComposeCapabilityStatementMessagingSupportedMessage(json : TJSONWriter; name : string; value : TFhirCapabilityStatementMessagingSupportedMessage; noObj : boolean = false);
    procedure ComposeCapabilityStatementDocument(json : TJSONWriter; name : string; value : TFhirCapabilityStatementDocument; noObj : boolean = false);
    procedure ComposeCapabilityStatement(json : TJSONWriter; name : string; value : TFhirCapabilityStatement; noObj : boolean = false);
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
    procedure ComposeCarePlanActivity(json : TJSONWriter; name : string; value : TFhirCarePlanActivity; noObj : boolean = false);
    procedure ComposeCarePlanActivityDetail(json : TJSONWriter; name : string; value : TFhirCarePlanActivityDetail; noObj : boolean = false);
    procedure ComposeCarePlan(json : TJSONWriter; name : string; value : TFhirCarePlan; noObj : boolean = false);
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
    procedure ComposeCareTeamParticipant(json : TJSONWriter; name : string; value : TFhirCareTeamParticipant; noObj : boolean = false);
    procedure ComposeCareTeam(json : TJSONWriter; name : string; value : TFhirCareTeam; noObj : boolean = false);
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
    procedure ComposeCatalogEntryRelatedEntry(json : TJSONWriter; name : string; value : TFhirCatalogEntryRelatedEntry; noObj : boolean = false);
    procedure ComposeCatalogEntry(json : TJSONWriter; name : string; value : TFhirCatalogEntry; noObj : boolean = false);
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
    procedure ComposeChargeItemPerformer(json : TJSONWriter; name : string; value : TFhirChargeItemPerformer; noObj : boolean = false);
    procedure ComposeChargeItem(json : TJSONWriter; name : string; value : TFhirChargeItem; noObj : boolean = false);
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
    procedure ComposeChargeItemDefinitionApplicability(json : TJSONWriter; name : string; value : TFhirChargeItemDefinitionApplicability; noObj : boolean = false);
    procedure ComposeChargeItemDefinitionPropertyGroup(json : TJSONWriter; name : string; value : TFhirChargeItemDefinitionPropertyGroup; noObj : boolean = false);
    procedure ComposeChargeItemDefinitionPropertyGroupPriceComponent(json : TJSONWriter; name : string; value : TFhirChargeItemDefinitionPropertyGroupPriceComponent; noObj : boolean = false);
    procedure ComposeChargeItemDefinition(json : TJSONWriter; name : string; value : TFhirChargeItemDefinition; noObj : boolean = false);
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CITATION}
    procedure ComposeCitationClassification(json : TJSONWriter; name : string; value : TFhirCitationClassification; noObj : boolean = false);
    procedure ComposeCitationStatusDate(json : TJSONWriter; name : string; value : TFhirCitationStatusDate; noObj : boolean = false);
    procedure ComposeCitationRelatesTo(json : TJSONWriter; name : string; value : TFhirCitationRelatesTo; noObj : boolean = false);
    procedure ComposeCitationCitedArtifact(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifact; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactVersion(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactVersion; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactStatusDate(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactStatusDate; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactTitle(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactTitle; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactAbstract(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactAbstract; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactPart(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactPart; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactRelatesTo(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactRelatesTo; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactPublicationForm(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactPublicationForm; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactPublicationFormPublishedIn(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactPublicationFormPublishedIn; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactPublicationFormPeriodicRelease(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactPublicationFormPeriodicRelease; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactWebLocation(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactWebLocation; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactClassification(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactClassification; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactClassificationWhoClassified(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactClassificationWhoClassified; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactContributorship(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactContributorship; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactContributorshipEntry(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactContributorshipEntry; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactContributorshipEntryAffiliationInfo(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactContributorshipEntryAffiliationInfo; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactContributorshipEntryContributionInstance(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactContributorshipEntryContributionInstance; noObj : boolean = false);
    procedure ComposeCitationCitedArtifactContributorshipSummary(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactContributorshipSummary; noObj : boolean = false);
    procedure ComposeCitation(json : TJSONWriter; name : string; value : TFhirCitation; noObj : boolean = false);
{$ENDIF FHIR_CITATION}
{$IFDEF FHIR_CLAIM}
    procedure ComposeClaimRelated(json : TJSONWriter; name : string; value : TFhirClaimRelated; noObj : boolean = false);
    procedure ComposeClaimPayee(json : TJSONWriter; name : string; value : TFhirClaimPayee; noObj : boolean = false);
    procedure ComposeClaimCareTeam(json : TJSONWriter; name : string; value : TFhirClaimCareTeam; noObj : boolean = false);
    procedure ComposeClaimSupportingInfo(json : TJSONWriter; name : string; value : TFhirClaimSupportingInfo; noObj : boolean = false);
    procedure ComposeClaimDiagnosis(json : TJSONWriter; name : string; value : TFhirClaimDiagnosis; noObj : boolean = false);
    procedure ComposeClaimProcedure(json : TJSONWriter; name : string; value : TFhirClaimProcedure; noObj : boolean = false);
    procedure ComposeClaimInsurance(json : TJSONWriter; name : string; value : TFhirClaimInsurance; noObj : boolean = false);
    procedure ComposeClaimAccident(json : TJSONWriter; name : string; value : TFhirClaimAccident; noObj : boolean = false);
    procedure ComposeClaimItem(json : TJSONWriter; name : string; value : TFhirClaimItem; noObj : boolean = false);
    procedure ComposeClaimItemDetail(json : TJSONWriter; name : string; value : TFhirClaimItemDetail; noObj : boolean = false);
    procedure ComposeClaimItemDetailSubDetail(json : TJSONWriter; name : string; value : TFhirClaimItemDetailSubDetail; noObj : boolean = false);
    procedure ComposeClaim(json : TJSONWriter; name : string; value : TFhirClaim; noObj : boolean = false);
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
    procedure ComposeClaimResponseItem(json : TJSONWriter; name : string; value : TFhirClaimResponseItem; noObj : boolean = false);
    procedure ComposeClaimResponseItemAdjudication(json : TJSONWriter; name : string; value : TFhirClaimResponseItemAdjudication; noObj : boolean = false);
    procedure ComposeClaimResponseItemDetail(json : TJSONWriter; name : string; value : TFhirClaimResponseItemDetail; noObj : boolean = false);
    procedure ComposeClaimResponseItemDetailSubDetail(json : TJSONWriter; name : string; value : TFhirClaimResponseItemDetailSubDetail; noObj : boolean = false);
    procedure ComposeClaimResponseAddItem(json : TJSONWriter; name : string; value : TFhirClaimResponseAddItem; noObj : boolean = false);
    procedure ComposeClaimResponseAddItemDetail(json : TJSONWriter; name : string; value : TFhirClaimResponseAddItemDetail; noObj : boolean = false);
    procedure ComposeClaimResponseAddItemDetailSubDetail(json : TJSONWriter; name : string; value : TFhirClaimResponseAddItemDetailSubDetail; noObj : boolean = false);
    procedure ComposeClaimResponseTotal(json : TJSONWriter; name : string; value : TFhirClaimResponseTotal; noObj : boolean = false);
    procedure ComposeClaimResponsePayment(json : TJSONWriter; name : string; value : TFhirClaimResponsePayment; noObj : boolean = false);
    procedure ComposeClaimResponseProcessNote(json : TJSONWriter; name : string; value : TFhirClaimResponseProcessNote; noObj : boolean = false);
    procedure ComposeClaimResponseInsurance(json : TJSONWriter; name : string; value : TFhirClaimResponseInsurance; noObj : boolean = false);
    procedure ComposeClaimResponseError(json : TJSONWriter; name : string; value : TFhirClaimResponseError; noObj : boolean = false);
    procedure ComposeClaimResponse(json : TJSONWriter; name : string; value : TFhirClaimResponse; noObj : boolean = false);
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
    procedure ComposeClinicalImpressionInvestigation(json : TJSONWriter; name : string; value : TFhirClinicalImpressionInvestigation; noObj : boolean = false);
    procedure ComposeClinicalImpressionFinding(json : TJSONWriter; name : string; value : TFhirClinicalImpressionFinding; noObj : boolean = false);
    procedure ComposeClinicalImpression(json : TJSONWriter; name : string; value : TFhirClinicalImpression; noObj : boolean = false);
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CLINICALUSEDEFINITION}
    procedure ComposeClinicalUseDefinitionContraindication(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinitionContraindication; noObj : boolean = false);
    procedure ComposeClinicalUseDefinitionContraindicationOtherTherapy(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinitionContraindicationOtherTherapy; noObj : boolean = false);
    procedure ComposeClinicalUseDefinitionIndication(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinitionIndication; noObj : boolean = false);
    procedure ComposeClinicalUseDefinitionInteraction(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinitionInteraction; noObj : boolean = false);
    procedure ComposeClinicalUseDefinitionInteractionInteractant(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinitionInteractionInteractant; noObj : boolean = false);
    procedure ComposeClinicalUseDefinitionUndesirableEffect(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinitionUndesirableEffect; noObj : boolean = false);
    procedure ComposeClinicalUseDefinitionWarning(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinitionWarning; noObj : boolean = false);
    procedure ComposeClinicalUseDefinition(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinition; noObj : boolean = false);
{$ENDIF FHIR_CLINICALUSEDEFINITION}
{$IFDEF FHIR_CODESYSTEM}
    procedure ComposeCodeSystemFilter(json : TJSONWriter; name : string; value : TFhirCodeSystemFilter; noObj : boolean = false);
    procedure ComposeCodeSystemProperty(json : TJSONWriter; name : string; value : TFhirCodeSystemProperty; noObj : boolean = false);
    procedure ComposeCodeSystemConcept(json : TJSONWriter; name : string; value : TFhirCodeSystemConcept; noObj : boolean = false);
    procedure ComposeCodeSystemConceptDesignation(json : TJSONWriter; name : string; value : TFhirCodeSystemConceptDesignation; noObj : boolean = false);
    procedure ComposeCodeSystemConceptProperty(json : TJSONWriter; name : string; value : TFhirCodeSystemConceptProperty; noObj : boolean = false);
    procedure ComposeCodeSystem(json : TJSONWriter; name : string; value : TFhirCodeSystem; noObj : boolean = false);
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
    procedure ComposeCommunicationPayload(json : TJSONWriter; name : string; value : TFhirCommunicationPayload; noObj : boolean = false);
    procedure ComposeCommunication(json : TJSONWriter; name : string; value : TFhirCommunication; noObj : boolean = false);
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
    procedure ComposeCommunicationRequestPayload(json : TJSONWriter; name : string; value : TFhirCommunicationRequestPayload; noObj : boolean = false);
    procedure ComposeCommunicationRequest(json : TJSONWriter; name : string; value : TFhirCommunicationRequest; noObj : boolean = false);
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
    procedure ComposeCompartmentDefinitionResource(json : TJSONWriter; name : string; value : TFhirCompartmentDefinitionResource; noObj : boolean = false);
    procedure ComposeCompartmentDefinition(json : TJSONWriter; name : string; value : TFhirCompartmentDefinition; noObj : boolean = false);
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
    procedure ComposeCompositionAttester(json : TJSONWriter; name : string; value : TFhirCompositionAttester; noObj : boolean = false);
    procedure ComposeCompositionRelatesTo(json : TJSONWriter; name : string; value : TFhirCompositionRelatesTo; noObj : boolean = false);
    procedure ComposeCompositionEvent(json : TJSONWriter; name : string; value : TFhirCompositionEvent; noObj : boolean = false);
    procedure ComposeCompositionSection(json : TJSONWriter; name : string; value : TFhirCompositionSection; noObj : boolean = false);
    procedure ComposeComposition(json : TJSONWriter; name : string; value : TFhirComposition; noObj : boolean = false);
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
    procedure ComposeConceptMapGroup(json : TJSONWriter; name : string; value : TFhirConceptMapGroup; noObj : boolean = false);
    procedure ComposeConceptMapGroupElement(json : TJSONWriter; name : string; value : TFhirConceptMapGroupElement; noObj : boolean = false);
    procedure ComposeConceptMapGroupElementTarget(json : TJSONWriter; name : string; value : TFhirConceptMapGroupElementTarget; noObj : boolean = false);
    procedure ComposeConceptMapGroupElementTargetDependsOn(json : TJSONWriter; name : string; value : TFhirConceptMapGroupElementTargetDependsOn; noObj : boolean = false);
    procedure ComposeConceptMapGroupUnmapped(json : TJSONWriter; name : string; value : TFhirConceptMapGroupUnmapped; noObj : boolean = false);
    procedure ComposeConceptMap(json : TJSONWriter; name : string; value : TFhirConceptMap; noObj : boolean = false);
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
    procedure ComposeConditionStage(json : TJSONWriter; name : string; value : TFhirConditionStage; noObj : boolean = false);
    procedure ComposeConditionEvidence(json : TJSONWriter; name : string; value : TFhirConditionEvidence; noObj : boolean = false);
    procedure ComposeCondition(json : TJSONWriter; name : string; value : TFhirCondition; noObj : boolean = false);
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
    procedure ComposeConsentPolicy(json : TJSONWriter; name : string; value : TFhirConsentPolicy; noObj : boolean = false);
    procedure ComposeConsentVerification(json : TJSONWriter; name : string; value : TFhirConsentVerification; noObj : boolean = false);
    procedure ComposeConsentProvision(json : TJSONWriter; name : string; value : TFhirConsentProvision; noObj : boolean = false);
    procedure ComposeConsentProvisionActor(json : TJSONWriter; name : string; value : TFhirConsentProvisionActor; noObj : boolean = false);
    procedure ComposeConsentProvisionData(json : TJSONWriter; name : string; value : TFhirConsentProvisionData; noObj : boolean = false);
    procedure ComposeConsent(json : TJSONWriter; name : string; value : TFhirConsent; noObj : boolean = false);
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
    procedure ComposeContractContentDefinition(json : TJSONWriter; name : string; value : TFhirContractContentDefinition; noObj : boolean = false);
    procedure ComposeContractTerm(json : TJSONWriter; name : string; value : TFhirContractTerm; noObj : boolean = false);
    procedure ComposeContractTermSecurityLabel(json : TJSONWriter; name : string; value : TFhirContractTermSecurityLabel; noObj : boolean = false);
    procedure ComposeContractTermOffer(json : TJSONWriter; name : string; value : TFhirContractTermOffer; noObj : boolean = false);
    procedure ComposeContractTermOfferParty(json : TJSONWriter; name : string; value : TFhirContractTermOfferParty; noObj : boolean = false);
    procedure ComposeContractTermOfferAnswer(json : TJSONWriter; name : string; value : TFhirContractTermOfferAnswer; noObj : boolean = false);
    procedure ComposeContractTermAsset(json : TJSONWriter; name : string; value : TFhirContractTermAsset; noObj : boolean = false);
    procedure ComposeContractTermAssetContext(json : TJSONWriter; name : string; value : TFhirContractTermAssetContext; noObj : boolean = false);
    procedure ComposeContractTermAssetValuedItem(json : TJSONWriter; name : string; value : TFhirContractTermAssetValuedItem; noObj : boolean = false);
    procedure ComposeContractTermAction(json : TJSONWriter; name : string; value : TFhirContractTermAction; noObj : boolean = false);
    procedure ComposeContractTermActionSubject(json : TJSONWriter; name : string; value : TFhirContractTermActionSubject; noObj : boolean = false);
    procedure ComposeContractSigner(json : TJSONWriter; name : string; value : TFhirContractSigner; noObj : boolean = false);
    procedure ComposeContractFriendly(json : TJSONWriter; name : string; value : TFhirContractFriendly; noObj : boolean = false);
    procedure ComposeContractLegal(json : TJSONWriter; name : string; value : TFhirContractLegal; noObj : boolean = false);
    procedure ComposeContractRule(json : TJSONWriter; name : string; value : TFhirContractRule; noObj : boolean = false);
    procedure ComposeContract(json : TJSONWriter; name : string; value : TFhirContract; noObj : boolean = false);
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
    procedure ComposeCoverageClass(json : TJSONWriter; name : string; value : TFhirCoverageClass; noObj : boolean = false);
    procedure ComposeCoverageCostToBeneficiary(json : TJSONWriter; name : string; value : TFhirCoverageCostToBeneficiary; noObj : boolean = false);
    procedure ComposeCoverageCostToBeneficiaryException(json : TJSONWriter; name : string; value : TFhirCoverageCostToBeneficiaryException; noObj : boolean = false);
    procedure ComposeCoverage(json : TJSONWriter; name : string; value : TFhirCoverage; noObj : boolean = false);
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
    procedure ComposeCoverageEligibilityRequestSupportingInfo(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityRequestSupportingInfo; noObj : boolean = false);
    procedure ComposeCoverageEligibilityRequestInsurance(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityRequestInsurance; noObj : boolean = false);
    procedure ComposeCoverageEligibilityRequestItem(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityRequestItem; noObj : boolean = false);
    procedure ComposeCoverageEligibilityRequestItemDiagnosis(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityRequestItemDiagnosis; noObj : boolean = false);
    procedure ComposeCoverageEligibilityRequest(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityRequest; noObj : boolean = false);
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
    procedure ComposeCoverageEligibilityResponseInsurance(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityResponseInsurance; noObj : boolean = false);
    procedure ComposeCoverageEligibilityResponseInsuranceItem(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityResponseInsuranceItem; noObj : boolean = false);
    procedure ComposeCoverageEligibilityResponseInsuranceItemBenefit(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityResponseInsuranceItemBenefit; noObj : boolean = false);
    procedure ComposeCoverageEligibilityResponseError(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityResponseError; noObj : boolean = false);
    procedure ComposeCoverageEligibilityResponse(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityResponse; noObj : boolean = false);
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
    procedure ComposeDetectedIssueEvidence(json : TJSONWriter; name : string; value : TFhirDetectedIssueEvidence; noObj : boolean = false);
    procedure ComposeDetectedIssueMitigation(json : TJSONWriter; name : string; value : TFhirDetectedIssueMitigation; noObj : boolean = false);
    procedure ComposeDetectedIssue(json : TJSONWriter; name : string; value : TFhirDetectedIssue; noObj : boolean = false);
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
    procedure ComposeDeviceUdiCarrier(json : TJSONWriter; name : string; value : TFhirDeviceUdiCarrier; noObj : boolean = false);
    procedure ComposeDeviceDeviceName(json : TJSONWriter; name : string; value : TFhirDeviceDeviceName; noObj : boolean = false);
    procedure ComposeDeviceSpecialization(json : TJSONWriter; name : string; value : TFhirDeviceSpecialization; noObj : boolean = false);
    procedure ComposeDeviceVersion(json : TJSONWriter; name : string; value : TFhirDeviceVersion; noObj : boolean = false);
    procedure ComposeDeviceProperty(json : TJSONWriter; name : string; value : TFhirDeviceProperty; noObj : boolean = false);
    procedure ComposeDevice(json : TJSONWriter; name : string; value : TFhirDevice; noObj : boolean = false);
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
    procedure ComposeDeviceDefinitionUdiDeviceIdentifier(json : TJSONWriter; name : string; value : TFhirDeviceDefinitionUdiDeviceIdentifier; noObj : boolean = false);
    procedure ComposeDeviceDefinitionDeviceName(json : TJSONWriter; name : string; value : TFhirDeviceDefinitionDeviceName; noObj : boolean = false);
    procedure ComposeDeviceDefinitionSpecialization(json : TJSONWriter; name : string; value : TFhirDeviceDefinitionSpecialization; noObj : boolean = false);
    procedure ComposeDeviceDefinitionCapability(json : TJSONWriter; name : string; value : TFhirDeviceDefinitionCapability; noObj : boolean = false);
    procedure ComposeDeviceDefinitionProperty(json : TJSONWriter; name : string; value : TFhirDeviceDefinitionProperty; noObj : boolean = false);
    procedure ComposeDeviceDefinitionMaterial(json : TJSONWriter; name : string; value : TFhirDeviceDefinitionMaterial; noObj : boolean = false);
    procedure ComposeDeviceDefinition(json : TJSONWriter; name : string; value : TFhirDeviceDefinition; noObj : boolean = false);
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
    procedure ComposeDeviceMetricCalibration(json : TJSONWriter; name : string; value : TFhirDeviceMetricCalibration; noObj : boolean = false);
    procedure ComposeDeviceMetric(json : TJSONWriter; name : string; value : TFhirDeviceMetric; noObj : boolean = false);
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
    procedure ComposeDeviceRequestParameter(json : TJSONWriter; name : string; value : TFhirDeviceRequestParameter; noObj : boolean = false);
    procedure ComposeDeviceRequest(json : TJSONWriter; name : string; value : TFhirDeviceRequest; noObj : boolean = false);
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
    procedure ComposeDeviceUseStatement(json : TJSONWriter; name : string; value : TFhirDeviceUseStatement; noObj : boolean = false);
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
    procedure ComposeDiagnosticReportMedia(json : TJSONWriter; name : string; value : TFhirDiagnosticReportMedia; noObj : boolean = false);
    procedure ComposeDiagnosticReport(json : TJSONWriter; name : string; value : TFhirDiagnosticReport; noObj : boolean = false);
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
    procedure ComposeDocumentManifestRelated(json : TJSONWriter; name : string; value : TFhirDocumentManifestRelated; noObj : boolean = false);
    procedure ComposeDocumentManifest(json : TJSONWriter; name : string; value : TFhirDocumentManifest; noObj : boolean = false);
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
    procedure ComposeDocumentReferenceRelatesTo(json : TJSONWriter; name : string; value : TFhirDocumentReferenceRelatesTo; noObj : boolean = false);
    procedure ComposeDocumentReferenceContent(json : TJSONWriter; name : string; value : TFhirDocumentReferenceContent; noObj : boolean = false);
    procedure ComposeDocumentReferenceContext(json : TJSONWriter; name : string; value : TFhirDocumentReferenceContext; noObj : boolean = false);
    procedure ComposeDocumentReference(json : TJSONWriter; name : string; value : TFhirDocumentReference; noObj : boolean = false);
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ENCOUNTER}
    procedure ComposeEncounterStatusHistory(json : TJSONWriter; name : string; value : TFhirEncounterStatusHistory; noObj : boolean = false);
    procedure ComposeEncounterClassHistory(json : TJSONWriter; name : string; value : TFhirEncounterClassHistory; noObj : boolean = false);
    procedure ComposeEncounterParticipant(json : TJSONWriter; name : string; value : TFhirEncounterParticipant; noObj : boolean = false);
    procedure ComposeEncounterDiagnosis(json : TJSONWriter; name : string; value : TFhirEncounterDiagnosis; noObj : boolean = false);
    procedure ComposeEncounterHospitalization(json : TJSONWriter; name : string; value : TFhirEncounterHospitalization; noObj : boolean = false);
    procedure ComposeEncounterLocation(json : TJSONWriter; name : string; value : TFhirEncounterLocation; noObj : boolean = false);
    procedure ComposeEncounter(json : TJSONWriter; name : string; value : TFhirEncounter; noObj : boolean = false);
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
    procedure ComposeEndpoint(json : TJSONWriter; name : string; value : TFhirEndpoint; noObj : boolean = false);
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
    procedure ComposeEnrollmentRequest(json : TJSONWriter; name : string; value : TFhirEnrollmentRequest; noObj : boolean = false);
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
    procedure ComposeEnrollmentResponse(json : TJSONWriter; name : string; value : TFhirEnrollmentResponse; noObj : boolean = false);
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
    procedure ComposeEpisodeOfCareStatusHistory(json : TJSONWriter; name : string; value : TFhirEpisodeOfCareStatusHistory; noObj : boolean = false);
    procedure ComposeEpisodeOfCareDiagnosis(json : TJSONWriter; name : string; value : TFhirEpisodeOfCareDiagnosis; noObj : boolean = false);
    procedure ComposeEpisodeOfCare(json : TJSONWriter; name : string; value : TFhirEpisodeOfCare; noObj : boolean = false);
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
    procedure ComposeEventDefinition(json : TJSONWriter; name : string; value : TFhirEventDefinition; noObj : boolean = false);
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
    procedure ComposeEvidenceVariableDefinition(json : TJSONWriter; name : string; value : TFhirEvidenceVariableDefinition; noObj : boolean = false);
    procedure ComposeEvidenceStatistic(json : TJSONWriter; name : string; value : TFhirEvidenceStatistic; noObj : boolean = false);
    procedure ComposeEvidenceStatisticSampleSize(json : TJSONWriter; name : string; value : TFhirEvidenceStatisticSampleSize; noObj : boolean = false);
    procedure ComposeEvidenceStatisticAttributeEstimate(json : TJSONWriter; name : string; value : TFhirEvidenceStatisticAttributeEstimate; noObj : boolean = false);
    procedure ComposeEvidenceStatisticModelCharacteristic(json : TJSONWriter; name : string; value : TFhirEvidenceStatisticModelCharacteristic; noObj : boolean = false);
    procedure ComposeEvidenceStatisticModelCharacteristicVariable(json : TJSONWriter; name : string; value : TFhirEvidenceStatisticModelCharacteristicVariable; noObj : boolean = false);
    procedure ComposeEvidenceCertainty(json : TJSONWriter; name : string; value : TFhirEvidenceCertainty; noObj : boolean = false);
    procedure ComposeEvidence(json : TJSONWriter; name : string; value : TFhirEvidence; noObj : boolean = false);
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEREPORT}
    procedure ComposeEvidenceReportSubject(json : TJSONWriter; name : string; value : TFhirEvidenceReportSubject; noObj : boolean = false);
    procedure ComposeEvidenceReportSubjectCharacteristic(json : TJSONWriter; name : string; value : TFhirEvidenceReportSubjectCharacteristic; noObj : boolean = false);
    procedure ComposeEvidenceReportRelatesTo(json : TJSONWriter; name : string; value : TFhirEvidenceReportRelatesTo; noObj : boolean = false);
    procedure ComposeEvidenceReportSection(json : TJSONWriter; name : string; value : TFhirEvidenceReportSection; noObj : boolean = false);
    procedure ComposeEvidenceReport(json : TJSONWriter; name : string; value : TFhirEvidenceReport; noObj : boolean = false);
{$ENDIF FHIR_EVIDENCEREPORT}
{$IFDEF FHIR_EVIDENCEVARIABLE}
    procedure ComposeEvidenceVariableCharacteristic(json : TJSONWriter; name : string; value : TFhirEvidenceVariableCharacteristic; noObj : boolean = false);
    procedure ComposeEvidenceVariableCharacteristicTimeFromStart(json : TJSONWriter; name : string; value : TFhirEvidenceVariableCharacteristicTimeFromStart; noObj : boolean = false);
    procedure ComposeEvidenceVariableCategory(json : TJSONWriter; name : string; value : TFhirEvidenceVariableCategory; noObj : boolean = false);
    procedure ComposeEvidenceVariable(json : TJSONWriter; name : string; value : TFhirEvidenceVariable; noObj : boolean = false);
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
    procedure ComposeExampleScenarioActor(json : TJSONWriter; name : string; value : TFhirExampleScenarioActor; noObj : boolean = false);
    procedure ComposeExampleScenarioInstance(json : TJSONWriter; name : string; value : TFhirExampleScenarioInstance; noObj : boolean = false);
    procedure ComposeExampleScenarioInstanceVersion(json : TJSONWriter; name : string; value : TFhirExampleScenarioInstanceVersion; noObj : boolean = false);
    procedure ComposeExampleScenarioInstanceContainedInstance(json : TJSONWriter; name : string; value : TFhirExampleScenarioInstanceContainedInstance; noObj : boolean = false);
    procedure ComposeExampleScenarioProcess(json : TJSONWriter; name : string; value : TFhirExampleScenarioProcess; noObj : boolean = false);
    procedure ComposeExampleScenarioProcessStep(json : TJSONWriter; name : string; value : TFhirExampleScenarioProcessStep; noObj : boolean = false);
    procedure ComposeExampleScenarioProcessStepOperation(json : TJSONWriter; name : string; value : TFhirExampleScenarioProcessStepOperation; noObj : boolean = false);
    procedure ComposeExampleScenarioProcessStepAlternative(json : TJSONWriter; name : string; value : TFhirExampleScenarioProcessStepAlternative; noObj : boolean = false);
    procedure ComposeExampleScenario(json : TJSONWriter; name : string; value : TFhirExampleScenario; noObj : boolean = false);
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
    procedure ComposeExplanationOfBenefitRelated(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitRelated; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitPayee(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitPayee; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitCareTeam(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitCareTeam; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitSupportingInfo(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitSupportingInfo; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitDiagnosis(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitDiagnosis; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitProcedure(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitProcedure; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitInsurance(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitInsurance; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitAccident(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitAccident; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitItem(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitItem; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitItemAdjudication(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitItemAdjudication; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitItemDetail(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitItemDetail; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitItemDetailSubDetail(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitItemDetailSubDetail; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitAddItem(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitAddItem; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitAddItemDetail(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitAddItemDetail; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitAddItemDetailSubDetail(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitAddItemDetailSubDetail; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitTotal(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitTotal; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitPayment(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitPayment; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitProcessNote(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitProcessNote; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitBenefitBalance(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitBenefitBalance; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitBenefitBalanceFinancial(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitBenefitBalanceFinancial; noObj : boolean = false);
    procedure ComposeExplanationOfBenefit(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefit; noObj : boolean = false);
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
    procedure ComposeFamilyMemberHistoryCondition(json : TJSONWriter; name : string; value : TFhirFamilyMemberHistoryCondition; noObj : boolean = false);
    procedure ComposeFamilyMemberHistory(json : TJSONWriter; name : string; value : TFhirFamilyMemberHistory; noObj : boolean = false);
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
    procedure ComposeFlag(json : TJSONWriter; name : string; value : TFhirFlag; noObj : boolean = false);
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
    procedure ComposeGoalTarget(json : TJSONWriter; name : string; value : TFhirGoalTarget; noObj : boolean = false);
    procedure ComposeGoal(json : TJSONWriter; name : string; value : TFhirGoal; noObj : boolean = false);
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
    procedure ComposeGraphDefinitionLink(json : TJSONWriter; name : string; value : TFhirGraphDefinitionLink; noObj : boolean = false);
    procedure ComposeGraphDefinitionLinkTarget(json : TJSONWriter; name : string; value : TFhirGraphDefinitionLinkTarget; noObj : boolean = false);
    procedure ComposeGraphDefinitionLinkTargetCompartment(json : TJSONWriter; name : string; value : TFhirGraphDefinitionLinkTargetCompartment; noObj : boolean = false);
    procedure ComposeGraphDefinition(json : TJSONWriter; name : string; value : TFhirGraphDefinition; noObj : boolean = false);
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
    procedure ComposeGroupCharacteristic(json : TJSONWriter; name : string; value : TFhirGroupCharacteristic; noObj : boolean = false);
    procedure ComposeGroupMember(json : TJSONWriter; name : string; value : TFhirGroupMember; noObj : boolean = false);
    procedure ComposeGroup(json : TJSONWriter; name : string; value : TFhirGroup; noObj : boolean = false);
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
    procedure ComposeGuidanceResponse(json : TJSONWriter; name : string; value : TFhirGuidanceResponse; noObj : boolean = false);
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
    procedure ComposeHealthcareServiceEligibility(json : TJSONWriter; name : string; value : TFhirHealthcareServiceEligibility; noObj : boolean = false);
    procedure ComposeHealthcareServiceAvailableTime(json : TJSONWriter; name : string; value : TFhirHealthcareServiceAvailableTime; noObj : boolean = false);
    procedure ComposeHealthcareServiceNotAvailable(json : TJSONWriter; name : string; value : TFhirHealthcareServiceNotAvailable; noObj : boolean = false);
    procedure ComposeHealthcareService(json : TJSONWriter; name : string; value : TFhirHealthcareService; noObj : boolean = false);
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
    procedure ComposeImagingStudySeries(json : TJSONWriter; name : string; value : TFhirImagingStudySeries; noObj : boolean = false);
    procedure ComposeImagingStudySeriesPerformer(json : TJSONWriter; name : string; value : TFhirImagingStudySeriesPerformer; noObj : boolean = false);
    procedure ComposeImagingStudySeriesInstance(json : TJSONWriter; name : string; value : TFhirImagingStudySeriesInstance; noObj : boolean = false);
    procedure ComposeImagingStudy(json : TJSONWriter; name : string; value : TFhirImagingStudy; noObj : boolean = false);
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
    procedure ComposeImmunizationPerformer(json : TJSONWriter; name : string; value : TFhirImmunizationPerformer; noObj : boolean = false);
    procedure ComposeImmunizationEducation(json : TJSONWriter; name : string; value : TFhirImmunizationEducation; noObj : boolean = false);
    procedure ComposeImmunizationReaction(json : TJSONWriter; name : string; value : TFhirImmunizationReaction; noObj : boolean = false);
    procedure ComposeImmunizationProtocolApplied(json : TJSONWriter; name : string; value : TFhirImmunizationProtocolApplied; noObj : boolean = false);
    procedure ComposeImmunization(json : TJSONWriter; name : string; value : TFhirImmunization; noObj : boolean = false);
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
    procedure ComposeImmunizationEvaluation(json : TJSONWriter; name : string; value : TFhirImmunizationEvaluation; noObj : boolean = false);
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
    procedure ComposeImmunizationRecommendationRecommendation(json : TJSONWriter; name : string; value : TFhirImmunizationRecommendationRecommendation; noObj : boolean = false);
    procedure ComposeImmunizationRecommendationRecommendationDateCriterion(json : TJSONWriter; name : string; value : TFhirImmunizationRecommendationRecommendationDateCriterion; noObj : boolean = false);
    procedure ComposeImmunizationRecommendation(json : TJSONWriter; name : string; value : TFhirImmunizationRecommendation; noObj : boolean = false);
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
    procedure ComposeImplementationGuideDependsOn(json : TJSONWriter; name : string; value : TFhirImplementationGuideDependsOn; noObj : boolean = false);
    procedure ComposeImplementationGuideGlobal(json : TJSONWriter; name : string; value : TFhirImplementationGuideGlobal; noObj : boolean = false);
    procedure ComposeImplementationGuideDefinition(json : TJSONWriter; name : string; value : TFhirImplementationGuideDefinition; noObj : boolean = false);
    procedure ComposeImplementationGuideDefinitionGrouping(json : TJSONWriter; name : string; value : TFhirImplementationGuideDefinitionGrouping; noObj : boolean = false);
    procedure ComposeImplementationGuideDefinitionResource(json : TJSONWriter; name : string; value : TFhirImplementationGuideDefinitionResource; noObj : boolean = false);
    procedure ComposeImplementationGuideDefinitionPage(json : TJSONWriter; name : string; value : TFhirImplementationGuideDefinitionPage; noObj : boolean = false);
    procedure ComposeImplementationGuideDefinitionParameter(json : TJSONWriter; name : string; value : TFhirImplementationGuideDefinitionParameter; noObj : boolean = false);
    procedure ComposeImplementationGuideDefinitionTemplate(json : TJSONWriter; name : string; value : TFhirImplementationGuideDefinitionTemplate; noObj : boolean = false);
    procedure ComposeImplementationGuideManifest(json : TJSONWriter; name : string; value : TFhirImplementationGuideManifest; noObj : boolean = false);
    procedure ComposeImplementationGuideManifestResource(json : TJSONWriter; name : string; value : TFhirImplementationGuideManifestResource; noObj : boolean = false);
    procedure ComposeImplementationGuideManifestPage(json : TJSONWriter; name : string; value : TFhirImplementationGuideManifestPage; noObj : boolean = false);
    procedure ComposeImplementationGuide(json : TJSONWriter; name : string; value : TFhirImplementationGuide; noObj : boolean = false);
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INGREDIENT}
    procedure ComposeIngredientManufacturer(json : TJSONWriter; name : string; value : TFhirIngredientManufacturer; noObj : boolean = false);
    procedure ComposeIngredientSubstance(json : TJSONWriter; name : string; value : TFhirIngredientSubstance; noObj : boolean = false);
    procedure ComposeIngredientSubstanceStrength(json : TJSONWriter; name : string; value : TFhirIngredientSubstanceStrength; noObj : boolean = false);
    procedure ComposeIngredientSubstanceStrengthReferenceStrength(json : TJSONWriter; name : string; value : TFhirIngredientSubstanceStrengthReferenceStrength; noObj : boolean = false);
    procedure ComposeIngredient(json : TJSONWriter; name : string; value : TFhirIngredient; noObj : boolean = false);
{$ENDIF FHIR_INGREDIENT}
{$IFDEF FHIR_INSURANCEPLAN}
    procedure ComposeInsurancePlanContact(json : TJSONWriter; name : string; value : TFhirInsurancePlanContact; noObj : boolean = false);
    procedure ComposeInsurancePlanCoverage(json : TJSONWriter; name : string; value : TFhirInsurancePlanCoverage; noObj : boolean = false);
    procedure ComposeInsurancePlanCoverageBenefit(json : TJSONWriter; name : string; value : TFhirInsurancePlanCoverageBenefit; noObj : boolean = false);
    procedure ComposeInsurancePlanCoverageBenefitLimit(json : TJSONWriter; name : string; value : TFhirInsurancePlanCoverageBenefitLimit; noObj : boolean = false);
    procedure ComposeInsurancePlanPlan(json : TJSONWriter; name : string; value : TFhirInsurancePlanPlan; noObj : boolean = false);
    procedure ComposeInsurancePlanPlanGeneralCost(json : TJSONWriter; name : string; value : TFhirInsurancePlanPlanGeneralCost; noObj : boolean = false);
    procedure ComposeInsurancePlanPlanSpecificCost(json : TJSONWriter; name : string; value : TFhirInsurancePlanPlanSpecificCost; noObj : boolean = false);
    procedure ComposeInsurancePlanPlanSpecificCostBenefit(json : TJSONWriter; name : string; value : TFhirInsurancePlanPlanSpecificCostBenefit; noObj : boolean = false);
    procedure ComposeInsurancePlanPlanSpecificCostBenefitCost(json : TJSONWriter; name : string; value : TFhirInsurancePlanPlanSpecificCostBenefitCost; noObj : boolean = false);
    procedure ComposeInsurancePlan(json : TJSONWriter; name : string; value : TFhirInsurancePlan; noObj : boolean = false);
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
    procedure ComposeInvoiceParticipant(json : TJSONWriter; name : string; value : TFhirInvoiceParticipant; noObj : boolean = false);
    procedure ComposeInvoiceLineItem(json : TJSONWriter; name : string; value : TFhirInvoiceLineItem; noObj : boolean = false);
    procedure ComposeInvoiceLineItemPriceComponent(json : TJSONWriter; name : string; value : TFhirInvoiceLineItemPriceComponent; noObj : boolean = false);
    procedure ComposeInvoice(json : TJSONWriter; name : string; value : TFhirInvoice; noObj : boolean = false);
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
    procedure ComposeLibrary(json : TJSONWriter; name : string; value : TFhirLibrary; noObj : boolean = false);
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
    procedure ComposeLinkageItem(json : TJSONWriter; name : string; value : TFhirLinkageItem; noObj : boolean = false);
    procedure ComposeLinkage(json : TJSONWriter; name : string; value : TFhirLinkage; noObj : boolean = false);
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
    procedure ComposeListEntry(json : TJSONWriter; name : string; value : TFhirListEntry; noObj : boolean = false);
    procedure ComposeList(json : TJSONWriter; name : string; value : TFhirList; noObj : boolean = false);
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
    procedure ComposeLocationPosition(json : TJSONWriter; name : string; value : TFhirLocationPosition; noObj : boolean = false);
    procedure ComposeLocationHoursOfOperation(json : TJSONWriter; name : string; value : TFhirLocationHoursOfOperation; noObj : boolean = false);
    procedure ComposeLocation(json : TJSONWriter; name : string; value : TFhirLocation; noObj : boolean = false);
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MANUFACTUREDITEMDEFINITION}
    procedure ComposeManufacturedItemDefinitionProperty(json : TJSONWriter; name : string; value : TFhirManufacturedItemDefinitionProperty; noObj : boolean = false);
    procedure ComposeManufacturedItemDefinition(json : TJSONWriter; name : string; value : TFhirManufacturedItemDefinition; noObj : boolean = false);
{$ENDIF FHIR_MANUFACTUREDITEMDEFINITION}
{$IFDEF FHIR_MEASURE}
    procedure ComposeMeasureGroup(json : TJSONWriter; name : string; value : TFhirMeasureGroup; noObj : boolean = false);
    procedure ComposeMeasureGroupPopulation(json : TJSONWriter; name : string; value : TFhirMeasureGroupPopulation; noObj : boolean = false);
    procedure ComposeMeasureGroupStratifier(json : TJSONWriter; name : string; value : TFhirMeasureGroupStratifier; noObj : boolean = false);
    procedure ComposeMeasureGroupStratifierComponent(json : TJSONWriter; name : string; value : TFhirMeasureGroupStratifierComponent; noObj : boolean = false);
    procedure ComposeMeasureSupplementalData(json : TJSONWriter; name : string; value : TFhirMeasureSupplementalData; noObj : boolean = false);
    procedure ComposeMeasure(json : TJSONWriter; name : string; value : TFhirMeasure; noObj : boolean = false);
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
    procedure ComposeMeasureReportGroup(json : TJSONWriter; name : string; value : TFhirMeasureReportGroup; noObj : boolean = false);
    procedure ComposeMeasureReportGroupPopulation(json : TJSONWriter; name : string; value : TFhirMeasureReportGroupPopulation; noObj : boolean = false);
    procedure ComposeMeasureReportGroupStratifier(json : TJSONWriter; name : string; value : TFhirMeasureReportGroupStratifier; noObj : boolean = false);
    procedure ComposeMeasureReportGroupStratifierStratum(json : TJSONWriter; name : string; value : TFhirMeasureReportGroupStratifierStratum; noObj : boolean = false);
    procedure ComposeMeasureReportGroupStratifierStratumComponent(json : TJSONWriter; name : string; value : TFhirMeasureReportGroupStratifierStratumComponent; noObj : boolean = false);
    procedure ComposeMeasureReportGroupStratifierStratumPopulation(json : TJSONWriter; name : string; value : TFhirMeasureReportGroupStratifierStratumPopulation; noObj : boolean = false);
    procedure ComposeMeasureReport(json : TJSONWriter; name : string; value : TFhirMeasureReport; noObj : boolean = false);
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
    procedure ComposeMedia(json : TJSONWriter; name : string; value : TFhirMedia; noObj : boolean = false);
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
    procedure ComposeMedicationIngredient(json : TJSONWriter; name : string; value : TFhirMedicationIngredient; noObj : boolean = false);
    procedure ComposeMedicationBatch(json : TJSONWriter; name : string; value : TFhirMedicationBatch; noObj : boolean = false);
    procedure ComposeMedication(json : TJSONWriter; name : string; value : TFhirMedication; noObj : boolean = false);
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
    procedure ComposeMedicationAdministrationPerformer(json : TJSONWriter; name : string; value : TFhirMedicationAdministrationPerformer; noObj : boolean = false);
    procedure ComposeMedicationAdministrationDosage(json : TJSONWriter; name : string; value : TFhirMedicationAdministrationDosage; noObj : boolean = false);
    procedure ComposeMedicationAdministration(json : TJSONWriter; name : string; value : TFhirMedicationAdministration; noObj : boolean = false);
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
    procedure ComposeMedicationDispensePerformer(json : TJSONWriter; name : string; value : TFhirMedicationDispensePerformer; noObj : boolean = false);
    procedure ComposeMedicationDispenseSubstitution(json : TJSONWriter; name : string; value : TFhirMedicationDispenseSubstitution; noObj : boolean = false);
    procedure ComposeMedicationDispense(json : TJSONWriter; name : string; value : TFhirMedicationDispense; noObj : boolean = false);
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
    procedure ComposeMedicationKnowledgeRelatedMedicationKnowledge(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeRelatedMedicationKnowledge; noObj : boolean = false);
    procedure ComposeMedicationKnowledgeMonograph(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeMonograph; noObj : boolean = false);
    procedure ComposeMedicationKnowledgeIngredient(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeIngredient; noObj : boolean = false);
    procedure ComposeMedicationKnowledgeCost(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeCost; noObj : boolean = false);
    procedure ComposeMedicationKnowledgeMonitoringProgram(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeMonitoringProgram; noObj : boolean = false);
    procedure ComposeMedicationKnowledgeAdministrationGuidelines(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeAdministrationGuidelines; noObj : boolean = false);
    procedure ComposeMedicationKnowledgeAdministrationGuidelinesDosage(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeAdministrationGuidelinesDosage; noObj : boolean = false);
    procedure ComposeMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics; noObj : boolean = false);
    procedure ComposeMedicationKnowledgeMedicineClassification(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeMedicineClassification; noObj : boolean = false);
    procedure ComposeMedicationKnowledgePackaging(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgePackaging; noObj : boolean = false);
    procedure ComposeMedicationKnowledgeDrugCharacteristic(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeDrugCharacteristic; noObj : boolean = false);
    procedure ComposeMedicationKnowledgeRegulatory(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeRegulatory; noObj : boolean = false);
    procedure ComposeMedicationKnowledgeRegulatorySubstitution(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeRegulatorySubstitution; noObj : boolean = false);
    procedure ComposeMedicationKnowledgeRegulatorySchedule(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeRegulatorySchedule; noObj : boolean = false);
    procedure ComposeMedicationKnowledgeRegulatoryMaxDispense(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeRegulatoryMaxDispense; noObj : boolean = false);
    procedure ComposeMedicationKnowledgeKinetics(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeKinetics; noObj : boolean = false);
    procedure ComposeMedicationKnowledge(json : TJSONWriter; name : string; value : TFhirMedicationKnowledge; noObj : boolean = false);
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
    procedure ComposeMedicationRequestDispenseRequest(json : TJSONWriter; name : string; value : TFhirMedicationRequestDispenseRequest; noObj : boolean = false);
    procedure ComposeMedicationRequestDispenseRequestInitialFill(json : TJSONWriter; name : string; value : TFhirMedicationRequestDispenseRequestInitialFill; noObj : boolean = false);
    procedure ComposeMedicationRequestSubstitution(json : TJSONWriter; name : string; value : TFhirMedicationRequestSubstitution; noObj : boolean = false);
    procedure ComposeMedicationRequest(json : TJSONWriter; name : string; value : TFhirMedicationRequest; noObj : boolean = false);
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
    procedure ComposeMedicationStatement(json : TJSONWriter; name : string; value : TFhirMedicationStatement; noObj : boolean = false);
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCTDEFINITION}
    procedure ComposeMedicinalProductDefinitionContact(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinitionContact; noObj : boolean = false);
    procedure ComposeMedicinalProductDefinitionName(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinitionName; noObj : boolean = false);
    procedure ComposeMedicinalProductDefinitionNameNamePart(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinitionNameNamePart; noObj : boolean = false);
    procedure ComposeMedicinalProductDefinitionNameCountryLanguage(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinitionNameCountryLanguage; noObj : boolean = false);
    procedure ComposeMedicinalProductDefinitionCrossReference(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinitionCrossReference; noObj : boolean = false);
    procedure ComposeMedicinalProductDefinitionOperation(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinitionOperation; noObj : boolean = false);
    procedure ComposeMedicinalProductDefinitionCharacteristic(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinitionCharacteristic; noObj : boolean = false);
    procedure ComposeMedicinalProductDefinition(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinition; noObj : boolean = false);
{$ENDIF FHIR_MEDICINALPRODUCTDEFINITION}
{$IFDEF FHIR_MESSAGEDEFINITION}
    procedure ComposeMessageDefinitionFocus(json : TJSONWriter; name : string; value : TFhirMessageDefinitionFocus; noObj : boolean = false);
    procedure ComposeMessageDefinitionAllowedResponse(json : TJSONWriter; name : string; value : TFhirMessageDefinitionAllowedResponse; noObj : boolean = false);
    procedure ComposeMessageDefinition(json : TJSONWriter; name : string; value : TFhirMessageDefinition; noObj : boolean = false);
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
    procedure ComposeMessageHeaderDestination(json : TJSONWriter; name : string; value : TFhirMessageHeaderDestination; noObj : boolean = false);
    procedure ComposeMessageHeaderSource(json : TJSONWriter; name : string; value : TFhirMessageHeaderSource; noObj : boolean = false);
    procedure ComposeMessageHeaderResponse(json : TJSONWriter; name : string; value : TFhirMessageHeaderResponse; noObj : boolean = false);
    procedure ComposeMessageHeader(json : TJSONWriter; name : string; value : TFhirMessageHeader; noObj : boolean = false);
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
    procedure ComposeMolecularSequenceReferenceSeq(json : TJSONWriter; name : string; value : TFhirMolecularSequenceReferenceSeq; noObj : boolean = false);
    procedure ComposeMolecularSequenceVariant(json : TJSONWriter; name : string; value : TFhirMolecularSequenceVariant; noObj : boolean = false);
    procedure ComposeMolecularSequenceQuality(json : TJSONWriter; name : string; value : TFhirMolecularSequenceQuality; noObj : boolean = false);
    procedure ComposeMolecularSequenceQualityRoc(json : TJSONWriter; name : string; value : TFhirMolecularSequenceQualityRoc; noObj : boolean = false);
    procedure ComposeMolecularSequenceRepository(json : TJSONWriter; name : string; value : TFhirMolecularSequenceRepository; noObj : boolean = false);
    procedure ComposeMolecularSequenceStructureVariant(json : TJSONWriter; name : string; value : TFhirMolecularSequenceStructureVariant; noObj : boolean = false);
    procedure ComposeMolecularSequenceStructureVariantOuter(json : TJSONWriter; name : string; value : TFhirMolecularSequenceStructureVariantOuter; noObj : boolean = false);
    procedure ComposeMolecularSequenceStructureVariantInner(json : TJSONWriter; name : string; value : TFhirMolecularSequenceStructureVariantInner; noObj : boolean = false);
    procedure ComposeMolecularSequence(json : TJSONWriter; name : string; value : TFhirMolecularSequence; noObj : boolean = false);
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
    procedure ComposeNamingSystemUniqueId(json : TJSONWriter; name : string; value : TFhirNamingSystemUniqueId; noObj : boolean = false);
    procedure ComposeNamingSystem(json : TJSONWriter; name : string; value : TFhirNamingSystem; noObj : boolean = false);
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
    procedure ComposeNutritionOrderOralDiet(json : TJSONWriter; name : string; value : TFhirNutritionOrderOralDiet; noObj : boolean = false);
    procedure ComposeNutritionOrderOralDietNutrient(json : TJSONWriter; name : string; value : TFhirNutritionOrderOralDietNutrient; noObj : boolean = false);
    procedure ComposeNutritionOrderOralDietTexture(json : TJSONWriter; name : string; value : TFhirNutritionOrderOralDietTexture; noObj : boolean = false);
    procedure ComposeNutritionOrderSupplement(json : TJSONWriter; name : string; value : TFhirNutritionOrderSupplement; noObj : boolean = false);
    procedure ComposeNutritionOrderEnteralFormula(json : TJSONWriter; name : string; value : TFhirNutritionOrderEnteralFormula; noObj : boolean = false);
    procedure ComposeNutritionOrderEnteralFormulaAdministration(json : TJSONWriter; name : string; value : TFhirNutritionOrderEnteralFormulaAdministration; noObj : boolean = false);
    procedure ComposeNutritionOrder(json : TJSONWriter; name : string; value : TFhirNutritionOrder; noObj : boolean = false);
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_NUTRITIONPRODUCT}
    procedure ComposeNutritionProductNutrient(json : TJSONWriter; name : string; value : TFhirNutritionProductNutrient; noObj : boolean = false);
    procedure ComposeNutritionProductIngredient(json : TJSONWriter; name : string; value : TFhirNutritionProductIngredient; noObj : boolean = false);
    procedure ComposeNutritionProductProductCharacteristic(json : TJSONWriter; name : string; value : TFhirNutritionProductProductCharacteristic; noObj : boolean = false);
    procedure ComposeNutritionProductInstance(json : TJSONWriter; name : string; value : TFhirNutritionProductInstance; noObj : boolean = false);
    procedure ComposeNutritionProduct(json : TJSONWriter; name : string; value : TFhirNutritionProduct; noObj : boolean = false);
{$ENDIF FHIR_NUTRITIONPRODUCT}
{$IFDEF FHIR_OBSERVATION}
    procedure ComposeObservationReferenceRange(json : TJSONWriter; name : string; value : TFhirObservationReferenceRange; noObj : boolean = false);
    procedure ComposeObservationComponent(json : TJSONWriter; name : string; value : TFhirObservationComponent; noObj : boolean = false);
    procedure ComposeObservation(json : TJSONWriter; name : string; value : TFhirObservation; noObj : boolean = false);
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
    procedure ComposeObservationDefinitionQuantitativeDetails(json : TJSONWriter; name : string; value : TFhirObservationDefinitionQuantitativeDetails; noObj : boolean = false);
    procedure ComposeObservationDefinitionQualifiedInterval(json : TJSONWriter; name : string; value : TFhirObservationDefinitionQualifiedInterval; noObj : boolean = false);
    procedure ComposeObservationDefinition(json : TJSONWriter; name : string; value : TFhirObservationDefinition; noObj : boolean = false);
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
    procedure ComposeOperationDefinitionParameter(json : TJSONWriter; name : string; value : TFhirOperationDefinitionParameter; noObj : boolean = false);
    procedure ComposeOperationDefinitionParameterBinding(json : TJSONWriter; name : string; value : TFhirOperationDefinitionParameterBinding; noObj : boolean = false);
    procedure ComposeOperationDefinitionParameterReferencedFrom(json : TJSONWriter; name : string; value : TFhirOperationDefinitionParameterReferencedFrom; noObj : boolean = false);
    procedure ComposeOperationDefinitionOverload(json : TJSONWriter; name : string; value : TFhirOperationDefinitionOverload; noObj : boolean = false);
    procedure ComposeOperationDefinition(json : TJSONWriter; name : string; value : TFhirOperationDefinition; noObj : boolean = false);
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
    procedure ComposeOperationOutcomeIssue(json : TJSONWriter; name : string; value : TFhirOperationOutcomeIssue; noObj : boolean = false);
    procedure ComposeOperationOutcome(json : TJSONWriter; name : string; value : TFhirOperationOutcome; noObj : boolean = false);
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
    procedure ComposeOrganizationContact(json : TJSONWriter; name : string; value : TFhirOrganizationContact; noObj : boolean = false);
    procedure ComposeOrganization(json : TJSONWriter; name : string; value : TFhirOrganization; noObj : boolean = false);
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
    procedure ComposeOrganizationAffiliation(json : TJSONWriter; name : string; value : TFhirOrganizationAffiliation; noObj : boolean = false);
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PACKAGEDPRODUCTDEFINITION}
    procedure ComposePackagedProductDefinitionLegalStatusOfSupply(json : TJSONWriter; name : string; value : TFhirPackagedProductDefinitionLegalStatusOfSupply; noObj : boolean = false);
    procedure ComposePackagedProductDefinitionPackage(json : TJSONWriter; name : string; value : TFhirPackagedProductDefinitionPackage; noObj : boolean = false);
    procedure ComposePackagedProductDefinitionPackageProperty(json : TJSONWriter; name : string; value : TFhirPackagedProductDefinitionPackageProperty; noObj : boolean = false);
    procedure ComposePackagedProductDefinitionPackageContainedItem(json : TJSONWriter; name : string; value : TFhirPackagedProductDefinitionPackageContainedItem; noObj : boolean = false);
    procedure ComposePackagedProductDefinition(json : TJSONWriter; name : string; value : TFhirPackagedProductDefinition; noObj : boolean = false);
{$ENDIF FHIR_PACKAGEDPRODUCTDEFINITION}
{$IFDEF FHIR_PARAMETERS}
    procedure ComposeParametersParameter(json : TJSONWriter; name : string; value : TFhirParametersParameter; noObj : boolean = false);
    procedure ComposeParameters(json : TJSONWriter; name : string; value : TFhirParameters; noObj : boolean = false);
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_PATIENT}
    procedure ComposePatientContact(json : TJSONWriter; name : string; value : TFhirPatientContact; noObj : boolean = false);
    procedure ComposePatientCommunication(json : TJSONWriter; name : string; value : TFhirPatientCommunication; noObj : boolean = false);
    procedure ComposePatientLink(json : TJSONWriter; name : string; value : TFhirPatientLink; noObj : boolean = false);
    procedure ComposePatient(json : TJSONWriter; name : string; value : TFhirPatient; noObj : boolean = false);
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
    procedure ComposePaymentNotice(json : TJSONWriter; name : string; value : TFhirPaymentNotice; noObj : boolean = false);
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
    procedure ComposePaymentReconciliationDetail(json : TJSONWriter; name : string; value : TFhirPaymentReconciliationDetail; noObj : boolean = false);
    procedure ComposePaymentReconciliationProcessNote(json : TJSONWriter; name : string; value : TFhirPaymentReconciliationProcessNote; noObj : boolean = false);
    procedure ComposePaymentReconciliation(json : TJSONWriter; name : string; value : TFhirPaymentReconciliation; noObj : boolean = false);
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
    procedure ComposePersonLink(json : TJSONWriter; name : string; value : TFhirPersonLink; noObj : boolean = false);
    procedure ComposePerson(json : TJSONWriter; name : string; value : TFhirPerson; noObj : boolean = false);
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
    procedure ComposePlanDefinitionGoal(json : TJSONWriter; name : string; value : TFhirPlanDefinitionGoal; noObj : boolean = false);
    procedure ComposePlanDefinitionGoalTarget(json : TJSONWriter; name : string; value : TFhirPlanDefinitionGoalTarget; noObj : boolean = false);
    procedure ComposePlanDefinitionAction(json : TJSONWriter; name : string; value : TFhirPlanDefinitionAction; noObj : boolean = false);
    procedure ComposePlanDefinitionActionCondition(json : TJSONWriter; name : string; value : TFhirPlanDefinitionActionCondition; noObj : boolean = false);
    procedure ComposePlanDefinitionActionRelatedAction(json : TJSONWriter; name : string; value : TFhirPlanDefinitionActionRelatedAction; noObj : boolean = false);
    procedure ComposePlanDefinitionActionParticipant(json : TJSONWriter; name : string; value : TFhirPlanDefinitionActionParticipant; noObj : boolean = false);
    procedure ComposePlanDefinitionActionDynamicValue(json : TJSONWriter; name : string; value : TFhirPlanDefinitionActionDynamicValue; noObj : boolean = false);
    procedure ComposePlanDefinition(json : TJSONWriter; name : string; value : TFhirPlanDefinition; noObj : boolean = false);
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
    procedure ComposePractitionerQualification(json : TJSONWriter; name : string; value : TFhirPractitionerQualification; noObj : boolean = false);
    procedure ComposePractitioner(json : TJSONWriter; name : string; value : TFhirPractitioner; noObj : boolean = false);
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
    procedure ComposePractitionerRoleAvailableTime(json : TJSONWriter; name : string; value : TFhirPractitionerRoleAvailableTime; noObj : boolean = false);
    procedure ComposePractitionerRoleNotAvailable(json : TJSONWriter; name : string; value : TFhirPractitionerRoleNotAvailable; noObj : boolean = false);
    procedure ComposePractitionerRole(json : TJSONWriter; name : string; value : TFhirPractitionerRole; noObj : boolean = false);
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
    procedure ComposeProcedurePerformer(json : TJSONWriter; name : string; value : TFhirProcedurePerformer; noObj : boolean = false);
    procedure ComposeProcedureFocalDevice(json : TJSONWriter; name : string; value : TFhirProcedureFocalDevice; noObj : boolean = false);
    procedure ComposeProcedure(json : TJSONWriter; name : string; value : TFhirProcedure; noObj : boolean = false);
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
    procedure ComposeProvenanceAgent(json : TJSONWriter; name : string; value : TFhirProvenanceAgent; noObj : boolean = false);
    procedure ComposeProvenanceEntity(json : TJSONWriter; name : string; value : TFhirProvenanceEntity; noObj : boolean = false);
    procedure ComposeProvenance(json : TJSONWriter; name : string; value : TFhirProvenance; noObj : boolean = false);
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
    procedure ComposeQuestionnaireItem(json : TJSONWriter; name : string; value : TFhirQuestionnaireItem; noObj : boolean = false);
    procedure ComposeQuestionnaireItemEnableWhen(json : TJSONWriter; name : string; value : TFhirQuestionnaireItemEnableWhen; noObj : boolean = false);
    procedure ComposeQuestionnaireItemAnswerOption(json : TJSONWriter; name : string; value : TFhirQuestionnaireItemAnswerOption; noObj : boolean = false);
    procedure ComposeQuestionnaireItemInitial(json : TJSONWriter; name : string; value : TFhirQuestionnaireItemInitial; noObj : boolean = false);
    procedure ComposeQuestionnaire(json : TJSONWriter; name : string; value : TFhirQuestionnaire; noObj : boolean = false);
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
    procedure ComposeQuestionnaireResponseItem(json : TJSONWriter; name : string; value : TFhirQuestionnaireResponseItem; noObj : boolean = false);
    procedure ComposeQuestionnaireResponseItemAnswer(json : TJSONWriter; name : string; value : TFhirQuestionnaireResponseItemAnswer; noObj : boolean = false);
    procedure ComposeQuestionnaireResponse(json : TJSONWriter; name : string; value : TFhirQuestionnaireResponse; noObj : boolean = false);
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REGULATEDAUTHORIZATION}
    procedure ComposeRegulatedAuthorizationCase(json : TJSONWriter; name : string; value : TFhirRegulatedAuthorizationCase; noObj : boolean = false);
    procedure ComposeRegulatedAuthorization(json : TJSONWriter; name : string; value : TFhirRegulatedAuthorization; noObj : boolean = false);
{$ENDIF FHIR_REGULATEDAUTHORIZATION}
{$IFDEF FHIR_RELATEDPERSON}
    procedure ComposeRelatedPersonCommunication(json : TJSONWriter; name : string; value : TFhirRelatedPersonCommunication; noObj : boolean = false);
    procedure ComposeRelatedPerson(json : TJSONWriter; name : string; value : TFhirRelatedPerson; noObj : boolean = false);
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
    procedure ComposeRequestGroupAction(json : TJSONWriter; name : string; value : TFhirRequestGroupAction; noObj : boolean = false);
    procedure ComposeRequestGroupActionCondition(json : TJSONWriter; name : string; value : TFhirRequestGroupActionCondition; noObj : boolean = false);
    procedure ComposeRequestGroupActionRelatedAction(json : TJSONWriter; name : string; value : TFhirRequestGroupActionRelatedAction; noObj : boolean = false);
    procedure ComposeRequestGroup(json : TJSONWriter; name : string; value : TFhirRequestGroup; noObj : boolean = false);
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHDEFINITION}
    procedure ComposeResearchDefinition(json : TJSONWriter; name : string; value : TFhirResearchDefinition; noObj : boolean = false);
{$ENDIF FHIR_RESEARCHDEFINITION}
{$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
    procedure ComposeResearchElementDefinitionCharacteristic(json : TJSONWriter; name : string; value : TFhirResearchElementDefinitionCharacteristic; noObj : boolean = false);
    procedure ComposeResearchElementDefinition(json : TJSONWriter; name : string; value : TFhirResearchElementDefinition; noObj : boolean = false);
{$ENDIF FHIR_RESEARCHELEMENTDEFINITION}
{$IFDEF FHIR_RESEARCHSTUDY}
    procedure ComposeResearchStudyArm(json : TJSONWriter; name : string; value : TFhirResearchStudyArm; noObj : boolean = false);
    procedure ComposeResearchStudyObjective(json : TJSONWriter; name : string; value : TFhirResearchStudyObjective; noObj : boolean = false);
    procedure ComposeResearchStudy(json : TJSONWriter; name : string; value : TFhirResearchStudy; noObj : boolean = false);
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
    procedure ComposeResearchSubject(json : TJSONWriter; name : string; value : TFhirResearchSubject; noObj : boolean = false);
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
    procedure ComposeRiskAssessmentPrediction(json : TJSONWriter; name : string; value : TFhirRiskAssessmentPrediction; noObj : boolean = false);
    procedure ComposeRiskAssessment(json : TJSONWriter; name : string; value : TFhirRiskAssessment; noObj : boolean = false);
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
    procedure ComposeSchedule(json : TJSONWriter; name : string; value : TFhirSchedule; noObj : boolean = false);
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
    procedure ComposeSearchParameterComponent(json : TJSONWriter; name : string; value : TFhirSearchParameterComponent; noObj : boolean = false);
    procedure ComposeSearchParameter(json : TJSONWriter; name : string; value : TFhirSearchParameter; noObj : boolean = false);
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
    procedure ComposeServiceRequest(json : TJSONWriter; name : string; value : TFhirServiceRequest; noObj : boolean = false);
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
    procedure ComposeSlot(json : TJSONWriter; name : string; value : TFhirSlot; noObj : boolean = false);
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
    procedure ComposeSpecimenCollection(json : TJSONWriter; name : string; value : TFhirSpecimenCollection; noObj : boolean = false);
    procedure ComposeSpecimenProcessing(json : TJSONWriter; name : string; value : TFhirSpecimenProcessing; noObj : boolean = false);
    procedure ComposeSpecimenContainer(json : TJSONWriter; name : string; value : TFhirSpecimenContainer; noObj : boolean = false);
    procedure ComposeSpecimen(json : TJSONWriter; name : string; value : TFhirSpecimen; noObj : boolean = false);
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
    procedure ComposeSpecimenDefinitionTypeTested(json : TJSONWriter; name : string; value : TFhirSpecimenDefinitionTypeTested; noObj : boolean = false);
    procedure ComposeSpecimenDefinitionTypeTestedContainer(json : TJSONWriter; name : string; value : TFhirSpecimenDefinitionTypeTestedContainer; noObj : boolean = false);
    procedure ComposeSpecimenDefinitionTypeTestedContainerAdditive(json : TJSONWriter; name : string; value : TFhirSpecimenDefinitionTypeTestedContainerAdditive; noObj : boolean = false);
    procedure ComposeSpecimenDefinitionTypeTestedHandling(json : TJSONWriter; name : string; value : TFhirSpecimenDefinitionTypeTestedHandling; noObj : boolean = false);
    procedure ComposeSpecimenDefinition(json : TJSONWriter; name : string; value : TFhirSpecimenDefinition; noObj : boolean = false);
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
    procedure ComposeStructureDefinitionMapping(json : TJSONWriter; name : string; value : TFhirStructureDefinitionMapping; noObj : boolean = false);
    procedure ComposeStructureDefinitionContext(json : TJSONWriter; name : string; value : TFhirStructureDefinitionContext; noObj : boolean = false);
    procedure ComposeStructureDefinitionSnapshot(json : TJSONWriter; name : string; value : TFhirStructureDefinitionSnapshot; noObj : boolean = false);
    procedure ComposeStructureDefinitionDifferential(json : TJSONWriter; name : string; value : TFhirStructureDefinitionDifferential; noObj : boolean = false);
    procedure ComposeStructureDefinition(json : TJSONWriter; name : string; value : TFhirStructureDefinition; noObj : boolean = false);
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
    procedure ComposeStructureMapStructure(json : TJSONWriter; name : string; value : TFhirStructureMapStructure; noObj : boolean = false);
    procedure ComposeStructureMapGroup(json : TJSONWriter; name : string; value : TFhirStructureMapGroup; noObj : boolean = false);
    procedure ComposeStructureMapGroupInput(json : TJSONWriter; name : string; value : TFhirStructureMapGroupInput; noObj : boolean = false);
    procedure ComposeStructureMapGroupRule(json : TJSONWriter; name : string; value : TFhirStructureMapGroupRule; noObj : boolean = false);
    procedure ComposeStructureMapGroupRuleSource(json : TJSONWriter; name : string; value : TFhirStructureMapGroupRuleSource; noObj : boolean = false);
    procedure ComposeStructureMapGroupRuleTarget(json : TJSONWriter; name : string; value : TFhirStructureMapGroupRuleTarget; noObj : boolean = false);
    procedure ComposeStructureMapGroupRuleTargetParameter(json : TJSONWriter; name : string; value : TFhirStructureMapGroupRuleTargetParameter; noObj : boolean = false);
    procedure ComposeStructureMapGroupRuleDependent(json : TJSONWriter; name : string; value : TFhirStructureMapGroupRuleDependent; noObj : boolean = false);
    procedure ComposeStructureMap(json : TJSONWriter; name : string; value : TFhirStructureMap; noObj : boolean = false);
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
    procedure ComposeSubscriptionChannel(json : TJSONWriter; name : string; value : TFhirSubscriptionChannel; noObj : boolean = false);
    procedure ComposeSubscription(json : TJSONWriter; name : string; value : TFhirSubscription; noObj : boolean = false);
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSCRIPTIONSTATUS}
    procedure ComposeSubscriptionStatusNotificationEvent(json : TJSONWriter; name : string; value : TFhirSubscriptionStatusNotificationEvent; noObj : boolean = false);
    procedure ComposeSubscriptionStatus(json : TJSONWriter; name : string; value : TFhirSubscriptionStatus; noObj : boolean = false);
{$ENDIF FHIR_SUBSCRIPTIONSTATUS}
{$IFDEF FHIR_SUBSCRIPTIONTOPIC}
    procedure ComposeSubscriptionTopicResourceTrigger(json : TJSONWriter; name : string; value : TFhirSubscriptionTopicResourceTrigger; noObj : boolean = false);
    procedure ComposeSubscriptionTopicResourceTriggerQueryCriteria(json : TJSONWriter; name : string; value : TFhirSubscriptionTopicResourceTriggerQueryCriteria; noObj : boolean = false);
    procedure ComposeSubscriptionTopicEventTrigger(json : TJSONWriter; name : string; value : TFhirSubscriptionTopicEventTrigger; noObj : boolean = false);
    procedure ComposeSubscriptionTopicCanFilterBy(json : TJSONWriter; name : string; value : TFhirSubscriptionTopicCanFilterBy; noObj : boolean = false);
    procedure ComposeSubscriptionTopicNotificationShape(json : TJSONWriter; name : string; value : TFhirSubscriptionTopicNotificationShape; noObj : boolean = false);
    procedure ComposeSubscriptionTopic(json : TJSONWriter; name : string; value : TFhirSubscriptionTopic; noObj : boolean = false);
{$ENDIF FHIR_SUBSCRIPTIONTOPIC}
{$IFDEF FHIR_SUBSTANCE}
    procedure ComposeSubstanceInstance(json : TJSONWriter; name : string; value : TFhirSubstanceInstance; noObj : boolean = false);
    procedure ComposeSubstanceIngredient(json : TJSONWriter; name : string; value : TFhirSubstanceIngredient; noObj : boolean = false);
    procedure ComposeSubstance(json : TJSONWriter; name : string; value : TFhirSubstance; noObj : boolean = false);
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEDEFINITION}
    procedure ComposeSubstanceDefinitionMoiety(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionMoiety; noObj : boolean = false);
    procedure ComposeSubstanceDefinitionProperty(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionProperty; noObj : boolean = false);
    procedure ComposeSubstanceDefinitionMolecularWeight(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionMolecularWeight; noObj : boolean = false);
    procedure ComposeSubstanceDefinitionStructure(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionStructure; noObj : boolean = false);
    procedure ComposeSubstanceDefinitionStructureRepresentation(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionStructureRepresentation; noObj : boolean = false);
    procedure ComposeSubstanceDefinitionCode(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionCode; noObj : boolean = false);
    procedure ComposeSubstanceDefinitionName(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionName; noObj : boolean = false);
    procedure ComposeSubstanceDefinitionNameOfficial(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionNameOfficial; noObj : boolean = false);
    procedure ComposeSubstanceDefinitionRelationship(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionRelationship; noObj : boolean = false);
    procedure ComposeSubstanceDefinitionSourceMaterial(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionSourceMaterial; noObj : boolean = false);
    procedure ComposeSubstanceDefinition(json : TJSONWriter; name : string; value : TFhirSubstanceDefinition; noObj : boolean = false);
{$ENDIF FHIR_SUBSTANCEDEFINITION}
{$IFDEF FHIR_SUPPLYDELIVERY}
    procedure ComposeSupplyDeliverySuppliedItem(json : TJSONWriter; name : string; value : TFhirSupplyDeliverySuppliedItem; noObj : boolean = false);
    procedure ComposeSupplyDelivery(json : TJSONWriter; name : string; value : TFhirSupplyDelivery; noObj : boolean = false);
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
    procedure ComposeSupplyRequestParameter(json : TJSONWriter; name : string; value : TFhirSupplyRequestParameter; noObj : boolean = false);
    procedure ComposeSupplyRequest(json : TJSONWriter; name : string; value : TFhirSupplyRequest; noObj : boolean = false);
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
    procedure ComposeTaskRestriction(json : TJSONWriter; name : string; value : TFhirTaskRestriction; noObj : boolean = false);
    procedure ComposeTaskInput(json : TJSONWriter; name : string; value : TFhirTaskInput; noObj : boolean = false);
    procedure ComposeTaskOutput(json : TJSONWriter; name : string; value : TFhirTaskOutput; noObj : boolean = false);
    procedure ComposeTask(json : TJSONWriter; name : string; value : TFhirTask; noObj : boolean = false);
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
    procedure ComposeTerminologyCapabilitiesSoftware(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesSoftware; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesImplementation(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesImplementation; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesCodeSystem(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesCodeSystem; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesCodeSystemVersion(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesCodeSystemVersion; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesCodeSystemVersionFilter(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesCodeSystemVersionFilter; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesExpansion(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesExpansion; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesExpansionParameter(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesExpansionParameter; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesValidateCode(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesValidateCode; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesTranslation(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesTranslation; noObj : boolean = false);
    procedure ComposeTerminologyCapabilitiesClosure(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesClosure; noObj : boolean = false);
    procedure ComposeTerminologyCapabilities(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilities; noObj : boolean = false);
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
    procedure ComposeTestReportParticipant(json : TJSONWriter; name : string; value : TFhirTestReportParticipant; noObj : boolean = false);
    procedure ComposeTestReportSetup(json : TJSONWriter; name : string; value : TFhirTestReportSetup; noObj : boolean = false);
    procedure ComposeTestReportSetupAction(json : TJSONWriter; name : string; value : TFhirTestReportSetupAction; noObj : boolean = false);
    procedure ComposeTestReportSetupActionOperation(json : TJSONWriter; name : string; value : TFhirTestReportSetupActionOperation; noObj : boolean = false);
    procedure ComposeTestReportSetupActionAssert(json : TJSONWriter; name : string; value : TFhirTestReportSetupActionAssert; noObj : boolean = false);
    procedure ComposeTestReportTest(json : TJSONWriter; name : string; value : TFhirTestReportTest; noObj : boolean = false);
    procedure ComposeTestReportTestAction(json : TJSONWriter; name : string; value : TFhirTestReportTestAction; noObj : boolean = false);
    procedure ComposeTestReportTeardown(json : TJSONWriter; name : string; value : TFhirTestReportTeardown; noObj : boolean = false);
    procedure ComposeTestReportTeardownAction(json : TJSONWriter; name : string; value : TFhirTestReportTeardownAction; noObj : boolean = false);
    procedure ComposeTestReport(json : TJSONWriter; name : string; value : TFhirTestReport; noObj : boolean = false);
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
    procedure ComposeTestScriptOrigin(json : TJSONWriter; name : string; value : TFhirTestScriptOrigin; noObj : boolean = false);
    procedure ComposeTestScriptDestination(json : TJSONWriter; name : string; value : TFhirTestScriptDestination; noObj : boolean = false);
    procedure ComposeTestScriptMetadata(json : TJSONWriter; name : string; value : TFhirTestScriptMetadata; noObj : boolean = false);
    procedure ComposeTestScriptMetadataLink(json : TJSONWriter; name : string; value : TFhirTestScriptMetadataLink; noObj : boolean = false);
    procedure ComposeTestScriptMetadataCapability(json : TJSONWriter; name : string; value : TFhirTestScriptMetadataCapability; noObj : boolean = false);
    procedure ComposeTestScriptFixture(json : TJSONWriter; name : string; value : TFhirTestScriptFixture; noObj : boolean = false);
    procedure ComposeTestScriptVariable(json : TJSONWriter; name : string; value : TFhirTestScriptVariable; noObj : boolean = false);
    procedure ComposeTestScriptSetup(json : TJSONWriter; name : string; value : TFhirTestScriptSetup; noObj : boolean = false);
    procedure ComposeTestScriptSetupAction(json : TJSONWriter; name : string; value : TFhirTestScriptSetupAction; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionOperation(json : TJSONWriter; name : string; value : TFhirTestScriptSetupActionOperation; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionOperationRequestHeader(json : TJSONWriter; name : string; value : TFhirTestScriptSetupActionOperationRequestHeader; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionAssert(json : TJSONWriter; name : string; value : TFhirTestScriptSetupActionAssert; noObj : boolean = false);
    procedure ComposeTestScriptTest(json : TJSONWriter; name : string; value : TFhirTestScriptTest; noObj : boolean = false);
    procedure ComposeTestScriptTestAction(json : TJSONWriter; name : string; value : TFhirTestScriptTestAction; noObj : boolean = false);
    procedure ComposeTestScriptTeardown(json : TJSONWriter; name : string; value : TFhirTestScriptTeardown; noObj : boolean = false);
    procedure ComposeTestScriptTeardownAction(json : TJSONWriter; name : string; value : TFhirTestScriptTeardownAction; noObj : boolean = false);
    procedure ComposeTestScript(json : TJSONWriter; name : string; value : TFhirTestScript; noObj : boolean = false);
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
    procedure ComposeValueSetCompose(json : TJSONWriter; name : string; value : TFhirValueSetCompose; noObj : boolean = false);
    procedure ComposeValueSetComposeInclude(json : TJSONWriter; name : string; value : TFhirValueSetComposeInclude; noObj : boolean = false);
    procedure ComposeValueSetComposeIncludeConcept(json : TJSONWriter; name : string; value : TFhirValueSetComposeIncludeConcept; noObj : boolean = false);
    procedure ComposeValueSetComposeIncludeConceptDesignation(json : TJSONWriter; name : string; value : TFhirValueSetComposeIncludeConceptDesignation; noObj : boolean = false);
    procedure ComposeValueSetComposeIncludeFilter(json : TJSONWriter; name : string; value : TFhirValueSetComposeIncludeFilter; noObj : boolean = false);
    procedure ComposeValueSetExpansion(json : TJSONWriter; name : string; value : TFhirValueSetExpansion; noObj : boolean = false);
    procedure ComposeValueSetExpansionParameter(json : TJSONWriter; name : string; value : TFhirValueSetExpansionParameter; noObj : boolean = false);
    procedure ComposeValueSetExpansionContains(json : TJSONWriter; name : string; value : TFhirValueSetExpansionContains; noObj : boolean = false);
    procedure ComposeValueSet(json : TJSONWriter; name : string; value : TFhirValueSet; noObj : boolean = false);
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
    procedure ComposeVerificationResultPrimarySource(json : TJSONWriter; name : string; value : TFhirVerificationResultPrimarySource; noObj : boolean = false);
    procedure ComposeVerificationResultAttestation(json : TJSONWriter; name : string; value : TFhirVerificationResultAttestation; noObj : boolean = false);
    procedure ComposeVerificationResultValidator(json : TJSONWriter; name : string; value : TFhirVerificationResultValidator; noObj : boolean = false);
    procedure ComposeVerificationResult(json : TJSONWriter; name : string; value : TFhirVerificationResult; noObj : boolean = false);
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
    procedure ComposeVisionPrescriptionLensSpecification(json : TJSONWriter; name : string; value : TFhirVisionPrescriptionLensSpecification; noObj : boolean = false);
    procedure ComposeVisionPrescriptionLensSpecificationPrism(json : TJSONWriter; name : string; value : TFhirVisionPrescriptionLensSpecificationPrism; noObj : boolean = false);
    procedure ComposeVisionPrescription(json : TJSONWriter; name : string; value : TFhirVisionPrescription; noObj : boolean = false);
{$ENDIF FHIR_VISIONPRESCRIPTION}


  public
    procedure ComposeResource(json : TJSONWriter; resource : TFhirResource); override;
    procedure ComposeBase(json : TJSONWriter; name : String; base : TFHIRObject); override;
  end;


implementation

{ TFHIRJsonParser }

procedure TFHIRJsonParser.ParseBaseProperties(jsn : TJsonObject; value : TFhirBase); 
begin
  parseComments(value, jsn);
  if KeepParseLocations then
  begin
    value.LocationData.ParseStart := jsn.LocationStart;
    value.LocationData.ParseFinish := jsn.LocationEnd;
  end;
end;

procedure TFHIRJsonParser.ParseBaseProperties(jsn : TJsonObject; value : TFhirResource);
begin
  parseComments(value, jsn);
  if KeepParseLocations then
  begin
    value.LocationData.ParseStart := jsn.LocationStart;
    value.LocationData.ParseFinish := jsn.LocationEnd;
  end;
end;

Procedure TFHIRJsonComposer.ComposeBaseProperties(json : TJSONWriter; value : TFhirBase); 
begin
  {no-comments composeComments(json, elem);}
end;

Procedure TFHIRJsonComposer.ComposeBaseProperties(json : TJSONWriter; value : TFhirResource); 
begin
  {no-comments composeComments(json, elem);}
end;

procedure TFHIRJsonParser.ParseElementProperties(jsn : TJsonObject; value : TFhirElement);
begin
  ParseBaseProperties(jsn, value); {jp2}
  if jsn.has('id') or jsn.has('_id') then
    value.idElement := parseString(jsn.node['id'], jsn.vObj['_id']); {L749}
  if jsn.has('extension') then
    iterateArray(jsn.vArr['extension'], value.extensionList, parseExtension);
end;

Procedure TFHIRJsonComposer.ComposeElementProperties(json : TJSONWriter; value : TFhirElement);
var
  i : integer {L426};
begin
  ComposeBaseProperties(json, value);  {L430}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'id', value.idElement, false); {L769}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'id', value.idElement, false); {L770}
  if (SummaryOption in [soFull, soData]) and (value.extensionList.Count > 0) then
  begin
    startArray(json, 'extension', value.extensionList, false);
    for i := 0 to value.extensionList.Count - 1 do
      ComposeExtension(json, '', value.extensionList[i]); {L682}
    finishArray(json, value.extensionList);
  end;
end;

procedure TFHIRJsonParser.ParseBackboneElementProperties(jsn : TJsonObject; value : TFhirBackboneElement);
begin
  ParseElementProperties(jsn, value); {jp2}
  if jsn.has('modifierExtension') then
    iterateArray(jsn.vArr['modifierExtension'], value.modifierExtensionList, parseExtension);
end;

Procedure TFHIRJsonComposer.ComposeBackboneElementProperties(json : TJSONWriter; value : TFhirBackboneElement);
var
  i : integer {L426};
begin
  ComposeElementProperties(json, value);  {L430}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.modifierExtensionList.Count > 0) then
  begin
    startArray(json, 'modifierExtension', value.modifierExtensionList, false);
    for i := 0 to value.modifierExtensionList.Count - 1 do
      ComposeExtension(json, '', value.modifierExtensionList[i]); {L682}
    finishArray(json, value.modifierExtensionList);
  end;
end;

procedure TFHIRJsonParser.ParseDataTypeProperties(jsn : TJsonObject; value : TFhirDataType);
begin
  ParseElementProperties(jsn, value); {jp2}
end;

Procedure TFHIRJsonComposer.ComposeDataTypeProperties(json : TJSONWriter; value : TFhirDataType);
begin
  ComposeElementProperties(json, value);  {L430}
end;

procedure TFHIRJsonParser.ParseBackboneTypeProperties(jsn : TJsonObject; value : TFhirBackboneType);
begin
  ParseDataTypeProperties(jsn, value); {jp2}
  if jsn.has('modifierExtension') then
    iterateArray(jsn.vArr['modifierExtension'], value.modifierExtensionList, parseExtension);
end;

Procedure TFHIRJsonComposer.ComposeBackboneTypeProperties(json : TJSONWriter; value : TFhirBackboneType);
var
  i : integer {L426};
begin
  ComposeDataTypeProperties(json, value);  {L430}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.modifierExtensionList.Count > 0) then
  begin
    startArray(json, 'modifierExtension', value.modifierExtensionList, false);
    for i := 0 to value.modifierExtensionList.Count - 1 do
      ComposeExtension(json, '', value.modifierExtensionList[i]); {L682}
    finishArray(json, value.modifierExtensionList);
  end;
end;

procedure TFHIRJsonParser.ParseEnum(path : String; value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList; Const aNames, aSystems : Array Of String);
begin
  ctxt.add(ParseEnum(path, value, jsn, aNames, aSystems));
end;

function TFHIRJsonParser.ParseEnum(path : String; value : TJsonNode; jsn : TJsonObject; Const aNames, aSystems : Array Of String) : TFHIREnum;
var
  i : integer;
begin
  i := StringArrayIndexOfSensitive(aNames, JsonToString(value));
  if (value <> nil) and (i < 0) then
    raise value.LocationStart.exception('unknown code: '+JsonToString(value)+' from a set of choices of '+StringArrayToCommaString(aNames)+' for "'+path+'"');
  result := TFHIREnum.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    result.system := aSystems[i];
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeEnumValue(json : TJSONWriter; name : String; value : TFhirEnum; Const aNames : Array Of String; inArray : boolean);
begin
  if (value = nil) or (value.Value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeEnumProps(json : TJSONWriter; name : String; value : TFhirEnum; Const aNames : Array Of String; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments) }) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseDate(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDate(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseDate(value : TJsonNode; jsn : TJsonObject) : TFHIRDate;
begin
  result := TFhirDate.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
     result.value := toTFslDateTime(JsonToString(value));
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeDateValue(json : TJSONWriter; name : String; value : TFhirDate; inArray : boolean);
begin
  if (value = nil) or (value.value.null) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, asString(value.value));
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeDateProps(json : TJSONWriter; name : String; value : TFhirDate; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseDateTime(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDateTime(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseDateTime(value : TJsonNode; jsn : TJsonObject) : TFHIRDateTime;
begin
  result := TFhirDateTime.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
     result.value := toTFslDateTime(JsonToString(value));
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeDateTimeValue(json : TJSONWriter; name : String; value : TFhirDateTime; inArray : boolean);
begin
  if (value = nil) or (value.value.null) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, asString(value.value));
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeDateTimeProps(json : TJSONWriter; name : String; value : TFhirDateTime; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseString(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseString(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseString(value : TJsonNode; jsn : TJsonObject) : TFHIRString;
begin
  result := TFhirString.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeStringValue(json : TJSONWriter; name : String; value : TFhirString; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeStringProps(json : TJSONWriter; name : String; value : TFhirString; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseInteger(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInteger(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseInteger(value : TJsonNode; jsn : TJsonObject) : TFHIRInteger;
begin
  result := TFhirInteger.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeIntegerValue(json : TJSONWriter; name : String; value : TFhirInteger; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    propNumber(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeIntegerProps(json : TJSONWriter; name : String; value : TFhirInteger; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseUri(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUri(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseUri(value : TJsonNode; jsn : TJsonObject) : TFHIRUri;
begin
  result := TFhirUri.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeUriValue(json : TJSONWriter; name : String; value : TFhirUri; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeUriProps(json : TJSONWriter; name : String; value : TFhirUri; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseInstant(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInstant(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseInstant(value : TJsonNode; jsn : TJsonObject) : TFHIRInstant;
begin
  result := TFhirInstant.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
     result.value := toTFslDateTime(JsonToString(value));
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeInstantValue(json : TJSONWriter; name : String; value : TFhirInstant; inArray : boolean);
begin
  if (value = nil) or (value.value.null) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, asString(value.value));
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeInstantProps(json : TJSONWriter; name : String; value : TFhirInstant; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseXhtml(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseXhtml(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseXhtml(value : TJsonNode; jsn : TJsonObject) : TFHIRXhtml;
begin
  result := TFhirXhtml.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeXhtmlValue(json : TJSONWriter; name : String; value : TFhirXhtml; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeXhtmlProps(json : TJSONWriter; name : String; value : TFhirXhtml; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseBoolean(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBoolean(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseBoolean(value : TJsonNode; jsn : TJsonObject) : TFHIRBoolean;
begin
  result := TFhirBoolean.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := StringToBoolean(JsonToString(value));
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeBooleanValue(json : TJSONWriter; name : String; value : TFhirBoolean; inArray : boolean);
begin
  if (value = nil) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeBooleanProps(json : TJSONWriter; name : String; value : TFhirBoolean; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseBase64Binary(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBase64Binary(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseBase64Binary(value : TJsonNode; jsn : TJsonObject) : TFHIRBase64Binary;
begin
  result := TFhirBase64Binary.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
     result.value := toTBytes(JsonToString(value));
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeBase64BinaryValue(json : TJSONWriter; name : String; value : TFhirBase64Binary; inArray : boolean);
begin
  if (value = nil) or (value.value = nil) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, asString(value.value));
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeBase64BinaryProps(json : TJSONWriter; name : String; value : TFhirBase64Binary; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseTime(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTime(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseTime(value : TJsonNode; jsn : TJsonObject) : TFHIRTime;
begin
  result := TFhirTime.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeTimeValue(json : TJSONWriter; name : String; value : TFhirTime; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeTimeProps(json : TJSONWriter; name : String; value : TFhirTime; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseDecimal(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDecimal(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseDecimal(value : TJsonNode; jsn : TJsonObject) : TFHIRDecimal;
begin
  result := TFhirDecimal.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeDecimalValue(json : TJSONWriter; name : String; value : TFhirDecimal; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    propNumber(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeDecimalProps(json : TJSONWriter; name : String; value : TFhirDecimal; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseCode(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCode(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseCode(value : TJsonNode; jsn : TJsonObject) : TFHIRCode;
begin
  result := TFhirCode.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeCodeValue(json : TJSONWriter; name : String; value : TFhirCode; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeCodeProps(json : TJSONWriter; name : String; value : TFhirCode; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseCanonical(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCanonical(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseCanonical(value : TJsonNode; jsn : TJsonObject) : TFHIRCanonical;
begin
  result := TFhirCanonical.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeCanonicalValue(json : TJSONWriter; name : String; value : TFhirCanonical; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeCanonicalProps(json : TJSONWriter; name : String; value : TFhirCanonical; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseOid(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOid(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseOid(value : TJsonNode; jsn : TJsonObject) : TFHIROid;
begin
  result := TFhirOid.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeOidValue(json : TJSONWriter; name : String; value : TFhirOid; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeOidProps(json : TJSONWriter; name : String; value : TFhirOid; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseUuid(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUuid(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseUuid(value : TJsonNode; jsn : TJsonObject) : TFHIRUuid;
begin
  result := TFhirUuid.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeUuidValue(json : TJSONWriter; name : String; value : TFhirUuid; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeUuidProps(json : TJSONWriter; name : String; value : TFhirUuid; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseUrl(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUrl(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseUrl(value : TJsonNode; jsn : TJsonObject) : TFHIRUrl;
begin
  result := TFhirUrl.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeUrlValue(json : TJSONWriter; name : String; value : TFhirUrl; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeUrlProps(json : TJSONWriter; name : String; value : TFhirUrl; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseMarkdown(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMarkdown(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseMarkdown(value : TJsonNode; jsn : TJsonObject) : TFHIRMarkdown;
begin
  result := TFhirMarkdown.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeMarkdownValue(json : TJSONWriter; name : String; value : TFhirMarkdown; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeMarkdownProps(json : TJSONWriter; name : String; value : TFhirMarkdown; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseUnsignedInt(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUnsignedInt(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseUnsignedInt(value : TJsonNode; jsn : TJsonObject) : TFHIRUnsignedInt;
begin
  result := TFhirUnsignedInt.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeUnsignedIntValue(json : TJSONWriter; name : String; value : TFhirUnsignedInt; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    propNumber(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeUnsignedIntProps(json : TJSONWriter; name : String; value : TFhirUnsignedInt; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseId(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseId(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseId(value : TJsonNode; jsn : TJsonObject) : TFHIRId;
begin
  result := TFhirId.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeIdValue(json : TJSONWriter; name : String; value : TFhirId; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    prop(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeIdProps(json : TJSONWriter; name : String; value : TFhirId; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParsePositiveInt(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePositiveInt(value, jsn)) {1};
end;

function TFHIRJsonParser.ParsePositiveInt(value : TJsonNode; jsn : TJsonObject) : TFHIRPositiveInt;
begin
  result := TFhirPositiveInt.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposePositiveIntValue(json : TJSONWriter; name : String; value : TFhirPositiveInt; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    propNumber(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposePositiveIntProps(json : TJSONWriter; name : String; value : TFhirPositiveInt; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;

procedure TFHIRJsonParser.ParseInteger64(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInteger64(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseInteger64(value : TJsonNode; jsn : TJsonObject) : TFHIRInteger64;
begin
  result := TFhirInteger64.Create;
  try
    if (value <> nil) then
    begin
      if KeepParseLocations then
      begin
        result.LocationData.ParseStart2 := value.LocationStart;
        result.LocationData.ParseFinish2 := value.LocationEnd;
      end;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeInteger64Value(json : TJSONWriter; name : String; value : TFhirInteger64; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart2 := json.SourceLocation;
    propNumber(json, name, value.value);
    if KeepLocationData then value.LocationData.ComposeFinish2 := json.SourceLocation;
  end;
end;

Procedure TFHIRJsonComposer.ComposeInteger64Props(json : TJSONWriter; name : String; value : TFhirInteger64; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
    begin
      if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
      propNull(json, name);
      if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
    end;
    exit;
  end
  else
  begin
    if KeepLocationData then value.LocationData.ComposeStart := json.SourceLocation;
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
    if KeepLocationData then value.LocationData.ComposeFinish := json.SourceLocation;
  end;
end;


procedure TFHIRJsonParser.ParseCodeableReference(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeableReference(jsn)); 
end;

function TFHIRJsonParser.ParseCodeableReference(jsn : TJsonObject) : TFhirCodeableReference;
begin
  result := TFhirCodeableReference.Create;
  try
    ParseCodeableReferenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeableReferenceProperties(jsn : TJsonObject; value : TFhirCodeableReference);
begin
    ParseDataTypeProperties(jsn, value);
    if jsn.has('concept') then
        value.concept := ParseCodeableConcept(jsn.vObj['concept']);
    if jsn.has('reference') then
        value.reference := ParseReference(jsn.vObj['reference']);
end;

procedure TFHIRJsonComposer.ComposeCodeableReference(json : TJSONWriter; name : string; value : TFhirCodeableReference; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeDataTypeProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'concept', value.concept);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'reference', value.reference);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseRatioRange(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRatioRange(jsn)); 
end;

function TFHIRJsonParser.ParseRatioRange(jsn : TJsonObject) : TFhirRatioRange;
begin
  result := TFhirRatioRange.Create;
  try
    ParseRatioRangeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRatioRangeProperties(jsn : TJsonObject; value : TFhirRatioRange);
begin
    ParseDataTypeProperties(jsn, value);
    if jsn.has('lowNumerator') then
        value.lowNumerator := ParseQuantity(jsn.vObj['lowNumerator']);
    if jsn.has('highNumerator') then
        value.highNumerator := ParseQuantity(jsn.vObj['highNumerator']);
    if jsn.has('denominator') then
        value.denominator := ParseQuantity(jsn.vObj['denominator']);
end;

procedure TFHIRJsonComposer.ComposeRatioRange(json : TJSONWriter; name : string; value : TFhirRatioRange; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeDataTypeProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'lowNumerator', value.lowNumerator);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'highNumerator', value.highNumerator);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'denominator', value.denominator);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAddress(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAddress(jsn)); 
end;

function TFHIRJsonParser.ParseAddress(jsn : TJsonObject) : TFhirAddress;
begin
  result := TFhirAddress.Create;
  try
    ParseAddressProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAddressProperties(jsn : TJsonObject; value : TFhirAddress);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('use') or jsn.has('_use') then
        value.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirAddressUseEnum, SYSTEMS_TFhirAddressUseEnum);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirAddressTypeEnum, SYSTEMS_TFhirAddressTypeEnum);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
      if jsn.has('line') or jsn.has('_line') then
      iteratePrimitiveArray(jsn.vArr['line'], jsn.vArr['_line'], value.lineList, parseString);
    if jsn.has('city') or jsn.has('_city') then
        value.cityElement := parseString(jsn.node['city'], jsn.vObj['_city']);
    if jsn.has('district') or jsn.has('_district') then
        value.districtElement := parseString(jsn.node['district'], jsn.vObj['_district']);
    if jsn.has('state') or jsn.has('_state') then
        value.stateElement := parseString(jsn.node['state'], jsn.vObj['_state']);
    if jsn.has('postalCode') or jsn.has('_postalCode') then
        value.postalCodeElement := parseString(jsn.node['postalCode'], jsn.vObj['_postalCode']);
    if jsn.has('country') or jsn.has('_country') then
        value.countryElement := parseString(jsn.node['country'], jsn.vObj['_country']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeAddress(json : TJSONWriter; name : string; value : TFhirAddress; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'use', value.useElement, CODES_TFhirAddressUseEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirAddressTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.lineList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.lineList.Count - 1 do
    begin
      ext := ext or ((value.lineList[i].id <> '') or (value.lineList[i].hasExtensionList) {no-comments or (value.lineList[i].hasComments)});
      val := val or (value.lineList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'line', value.lineList, true);
      for i := 0 to value.lineList.Count - 1 do
        ComposeStringValue(json, '', value.lineList[i], true);
      finishArray(json, value.lineList);
    end;
    if ext then
    begin
      startArray(json, '_line', value.lineList, false);
      for i := 0 to value.lineList.Count - 1 do
        ComposeStringProps(json, '', value.lineList[i], true);
      finishArray(json, value.lineList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'city', value.cityElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'city', value.cityElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'district', value.districtElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'district', value.districtElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'state', value.stateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'state', value.stateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'postalCode', value.postalCodeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'postalCode', value.postalCodeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'country', value.countryElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'country', value.countryElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAge(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAge(jsn)); 
end;

function TFHIRJsonParser.ParseAge(jsn : TJsonObject) : TFhirAge;
begin
  result := TFhirAge.Create;
  try
    ParseAgeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAgeProperties(jsn : TJsonObject; value : TFhirAge);
begin
    ParseQuantityProperties(jsn, value);
end;

procedure TFHIRJsonComposer.ComposeAge(json : TJSONWriter; name : string; value : TFhirAge; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeQuantity(json, '', value, true);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAnnotation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAnnotation(jsn)); 
end;

function TFHIRJsonParser.ParseAnnotation(jsn : TJsonObject) : TFhirAnnotation;
begin
  result := TFhirAnnotation.Create;
  try
    ParseAnnotationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAnnotationProperties(jsn : TJsonObject; value : TFhirAnnotation);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('authorReference') {a3} then
      value.author := ParseReference(jsn.vObj['authorReference']);
    if jsn.has('authorString') or jsn.has('_authorString') then
      value.author := parseString(jsn.node['authorString'], jsn.vObj['_authorString']);
    if jsn.has('time') or jsn.has('_time') then
        value.timeElement := parseDateTime(jsn.node['time'], jsn.vObj['_time']);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseMarkdown(jsn.node['text'], jsn.vObj['_text']);
end;

procedure TFHIRJsonComposer.ComposeAnnotation(json : TJSONWriter; name : string; value : TFhirAnnotation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.author is TFhirReference) then
    ComposeReference(json, 'authorReference', TFhirReference(value.author))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.author is TFhirString) then 
  begin
    ComposeStringValue(json, 'authorString', TFhirString(value.author), false);
    ComposeStringProps(json, 'authorString', TFhirString(value.author), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'time', value.timeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'time', value.timeElement, false);
  ComposeMarkdownValue(json, 'text', value.textElement, false);
  ComposeMarkdownProps(json, 'text', value.textElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAttachment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAttachment(jsn)); 
end;

function TFHIRJsonParser.ParseAttachment(jsn : TJsonObject) : TFhirAttachment;
begin
  result := TFhirAttachment.Create;
  try
    ParseAttachmentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAttachmentProperties(jsn : TJsonObject; value : TFhirAttachment);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('contentType') or jsn.has('_contentType') then
        value.contentTypeElement := parseCode(jsn.node['contentType'], jsn.vObj['_contentType']);
    if jsn.has('language') or jsn.has('_language') then
        value.languageElement := parseCode(jsn.node['language'], jsn.vObj['_language']);
    if jsn.has('data') or jsn.has('_data') then
        value.dataElement := parseBase64Binary(jsn.node['data'], jsn.vObj['_data']);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUrl(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('size') or jsn.has('_size') then
        value.sizeElement := parseUnsignedInt(jsn.node['size'], jsn.vObj['_size']);
    if jsn.has('hash') or jsn.has('_hash') then
        value.hashElement := parseBase64Binary(jsn.node['hash'], jsn.vObj['_hash']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('creation') or jsn.has('_creation') then
        value.creationElement := parseDateTime(jsn.node['creation'], jsn.vObj['_creation']);
end;

procedure TFHIRJsonComposer.ComposeAttachment(json : TJSONWriter; name : string; value : TFhirAttachment; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'contentType', value.contentTypeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'contentType', value.contentTypeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'language', value.languageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'language', value.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBase64BinaryValue(json, 'data', value.dataElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBase64BinaryProps(json, 'data', value.dataElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrlValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrlProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'size', value.sizeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'size', value.sizeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryValue(json, 'hash', value.hashElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryProps(json, 'hash', value.hashElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'creation', value.creationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'creation', value.creationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCodeableConcept(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeableConcept(jsn)); 
end;

function TFHIRJsonParser.ParseCodeableConcept(jsn : TJsonObject) : TFhirCodeableConcept;
begin
  result := TFhirCodeableConcept.Create;
  try
    ParseCodeableConceptProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeableConceptProperties(jsn : TJsonObject; value : TFhirCodeableConcept);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('coding') then
      iterateArray(jsn.vArr['coding'], value.codingList, parseCoding);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
end;

procedure TFHIRJsonComposer.ComposeCodeableConcept(json : TJSONWriter; name : string; value : TFhirCodeableConcept; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.codingList.Count > 0) then
  begin
    startArray(json, 'coding', value.codingList, false);
    for i := 0 to value.codingList.Count - 1 do
      ComposeCoding(json, '', value.codingList[i]);
    finishArray(json, value.codingList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCoding(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoding(jsn)); 
end;

function TFHIRJsonParser.ParseCoding(jsn : TJsonObject) : TFhirCoding;
begin
  result := TFhirCoding.Create;
  try
    ParseCodingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodingProperties(jsn : TJsonObject; value : TFhirCoding);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('system') or jsn.has('_system') then
        value.systemElement := parseUri(jsn.node['system'], jsn.vObj['_system']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
    if jsn.has('display') or jsn.has('_display') then
        value.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);
    if jsn.has('userSelected') or jsn.has('_userSelected') then
        value.userSelectedElement := parseBoolean(jsn.node['userSelected'], jsn.vObj['_userSelected']);
end;

procedure TFHIRJsonComposer.ComposeCoding(json : TJSONWriter; name : string; value : TFhirCoding; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'system', value.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'system', value.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'userSelected', value.userSelectedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'userSelected', value.userSelectedElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContactDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContactDetail(jsn)); 
end;

function TFHIRJsonParser.ParseContactDetail(jsn : TJsonObject) : TFhirContactDetail;
begin
  result := TFhirContactDetail.Create;
  try
    ParseContactDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContactDetailProperties(jsn : TJsonObject; value : TFhirContactDetail);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
end;

procedure TFHIRJsonComposer.ComposeContactDetail(json : TJSONWriter; name : string; value : TFhirContactDetail; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContactPoint(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContactPoint(jsn)); 
end;

function TFHIRJsonParser.ParseContactPoint(jsn : TJsonObject) : TFhirContactPoint;
begin
  result := TFhirContactPoint.Create;
  try
    ParseContactPointProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContactPointProperties(jsn : TJsonObject; value : TFhirContactPoint);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('system') or jsn.has('_system') then
        value.systemElement := parseEnum(jsn.path+'/system', jsn.node['system'], jsn.vObj['_system'], CODES_TFhirContactPointSystemEnum, SYSTEMS_TFhirContactPointSystemEnum);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
    if jsn.has('use') or jsn.has('_use') then
        value.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirContactPointUseEnum, SYSTEMS_TFhirContactPointUseEnum);
    if jsn.has('rank') or jsn.has('_rank') then
        value.rankElement := parsePositiveInt(jsn.node['rank'], jsn.vObj['_rank']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeContactPoint(json : TJSONWriter; name : string; value : TFhirContactPoint; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'system', value.systemElement, CODES_TFhirContactPointSystemEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'use', value.useElement, CODES_TFhirContactPointUseEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'rank', value.rankElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'rank', value.rankElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContributor(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContributor(jsn)); 
end;

function TFHIRJsonParser.ParseContributor(jsn : TJsonObject) : TFhirContributor;
begin
  result := TFhirContributor.Create;
  try
    ParseContributorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContributorProperties(jsn : TJsonObject; value : TFhirContributor);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirContributorTypeEnum, SYSTEMS_TFhirContributorTypeEnum);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
end;

procedure TFHIRJsonComposer.ComposeContributor(json : TJSONWriter; name : string; value : TFhirContributor; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirContributorTypeEnum, false);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCount(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCount(jsn)); 
end;

function TFHIRJsonParser.ParseCount(jsn : TJsonObject) : TFhirCount;
begin
  result := TFhirCount.Create;
  try
    ParseCountProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCountProperties(jsn : TJsonObject; value : TFhirCount);
begin
    ParseQuantityProperties(jsn, value);
end;

procedure TFHIRJsonComposer.ComposeCount(json : TJSONWriter; name : string; value : TFhirCount; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeQuantity(json, '', value, true);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDataRequirementCodeFilter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDataRequirementCodeFilter(jsn)); 
end;

function TFHIRJsonParser.ParseDataRequirementCodeFilter(jsn : TJsonObject) : TFhirDataRequirementCodeFilter;
begin
  result := TFhirDataRequirementCodeFilter.Create;
  try
    ParseDataRequirementCodeFilterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDataRequirementCodeFilterProperties(jsn : TJsonObject; value : TFhirDataRequirementCodeFilter);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('path') or jsn.has('_path') then
        value.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);
    if jsn.has('searchParam') or jsn.has('_searchParam') then
        value.searchParamElement := parseString(jsn.node['searchParam'], jsn.vObj['_searchParam']);
    if jsn.has('valueSet') or jsn.has('_valueSet') then
        value.valueSetElement := parseCanonical(jsn.node['valueSet'], jsn.vObj['_valueSet']);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCoding);
end;

procedure TFHIRJsonComposer.ComposeDataRequirementCodeFilter(json : TJSONWriter; name : string; value : TFhirDataRequirementCodeFilter; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'path', value.pathElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'path', value.pathElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'searchParam', value.searchParamElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'searchParam', value.searchParamElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'valueSet', value.valueSetElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'valueSet', value.valueSetElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCoding(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDataRequirementDateFilter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDataRequirementDateFilter(jsn)); 
end;

function TFHIRJsonParser.ParseDataRequirementDateFilter(jsn : TJsonObject) : TFhirDataRequirementDateFilter;
begin
  result := TFhirDataRequirementDateFilter.Create;
  try
    ParseDataRequirementDateFilterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDataRequirementDateFilterProperties(jsn : TJsonObject; value : TFhirDataRequirementDateFilter);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('path') or jsn.has('_path') then
        value.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);
    if jsn.has('searchParam') or jsn.has('_searchParam') then
        value.searchParamElement := parseString(jsn.node['searchParam'], jsn.vObj['_searchParam']);
    if jsn.has('valuePeriod') {a4} then
      value.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueDuration') {a4} then
      value.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      value.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
end;

procedure TFHIRJsonComposer.ComposeDataRequirementDateFilter(json : TJSONWriter; name : string; value : TFhirDataRequirementDateFilter; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'path', value.pathElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'path', value.pathElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'searchParam', value.searchParamElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'searchParam', value.searchParamElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(value.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDataRequirementSort(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDataRequirementSort(jsn)); 
end;

function TFHIRJsonParser.ParseDataRequirementSort(jsn : TJsonObject) : TFhirDataRequirementSort;
begin
  result := TFhirDataRequirementSort.Create;
  try
    ParseDataRequirementSortProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDataRequirementSortProperties(jsn : TJsonObject; value : TFhirDataRequirementSort);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('path') or jsn.has('_path') then
        value.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);
    if jsn.has('direction') or jsn.has('_direction') then
        value.directionElement := parseEnum(jsn.path+'/direction', jsn.node['direction'], jsn.vObj['_direction'], CODES_TFhirSortDirectionEnum, SYSTEMS_TFhirSortDirectionEnum);
end;

procedure TFHIRJsonComposer.ComposeDataRequirementSort(json : TJSONWriter; name : string; value : TFhirDataRequirementSort; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeStringValue(json, 'path', value.pathElement, false);
  ComposeStringProps(json, 'path', value.pathElement, false);
  ComposeEnumValue(json, 'direction', value.directionElement, CODES_TFhirSortDirectionEnum, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDataRequirement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDataRequirement(jsn)); 
end;

function TFHIRJsonParser.ParseDataRequirement(jsn : TJsonObject) : TFhirDataRequirement;
begin
  result := TFhirDataRequirement.Create;
  try
    ParseDataRequirementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDataRequirementProperties(jsn : TJsonObject; value : TFhirDataRequirement);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum);
      if jsn.has('profile') or jsn.has('_profile') then
      iteratePrimitiveArray(jsn.vArr['profile'], jsn.vArr['_profile'], value.profileList, parseCanonical);
    if jsn.has('subjectCodeableConcept') {a4} then
      value.subject := ParseCodeableConcept(jsn.vObj['subjectCodeableConcept']);
    if jsn.has('subjectReference') {a3} then
      value.subject := ParseReference(jsn.vObj['subjectReference']);
      if jsn.has('mustSupport') or jsn.has('_mustSupport') then
      iteratePrimitiveArray(jsn.vArr['mustSupport'], jsn.vArr['_mustSupport'], value.mustSupportList, parseString);
    if jsn.has('codeFilter') then
      iterateArray(jsn.vArr['codeFilter'], value.codeFilterList, parseDataRequirementCodeFilter);
    if jsn.has('dateFilter') then
      iterateArray(jsn.vArr['dateFilter'], value.dateFilterList, parseDataRequirementDateFilter);
    if jsn.has('limit') or jsn.has('_limit') then
        value.limitElement := parsePositiveInt(jsn.node['limit'], jsn.vObj['_limit']);
    if jsn.has('sort') then
      iterateArray(jsn.vArr['sort'], value.sortList, parseDataRequirementSort);
end;

procedure TFHIRJsonComposer.ComposeDataRequirement(json : TJSONWriter; name : string; value : TFhirDataRequirement; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirAllTypesEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.profileList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.profileList.Count - 1 do
    begin
      ext := ext or ((value.profileList[i].id <> '') or (value.profileList[i].hasExtensionList) {no-comments or (value.profileList[i].hasComments)});
      val := val or (value.profileList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'profile', value.profileList, true);
      for i := 0 to value.profileList.Count - 1 do
        ComposeCanonicalValue(json, '', value.profileList[i], true);
      finishArray(json, value.profileList);
    end;
    if ext then
    begin
      startArray(json, '_profile', value.profileList, false);
      for i := 0 to value.profileList.Count - 1 do
        ComposeCanonicalProps(json, '', value.profileList[i], true);
      finishArray(json, value.profileList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.subject is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.subject is TFhirReference) then
    ComposeReference(json, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soSummary, soData]) and (value.mustSupportList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.mustSupportList.Count - 1 do
    begin
      ext := ext or ((value.mustSupportList[i].id <> '') or (value.mustSupportList[i].hasExtensionList) {no-comments or (value.mustSupportList[i].hasComments)});
      val := val or (value.mustSupportList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'mustSupport', value.mustSupportList, true);
      for i := 0 to value.mustSupportList.Count - 1 do
        ComposeStringValue(json, '', value.mustSupportList[i], true);
      finishArray(json, value.mustSupportList);
    end;
    if ext then
    begin
      startArray(json, '_mustSupport', value.mustSupportList, false);
      for i := 0 to value.mustSupportList.Count - 1 do
        ComposeStringProps(json, '', value.mustSupportList[i], true);
      finishArray(json, value.mustSupportList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.codeFilterList.Count > 0) then
  begin
    startArray(json, 'codeFilter', value.codeFilterList, false);
    for i := 0 to value.codeFilterList.Count - 1 do
      ComposeDataRequirementCodeFilter(json, '', value.codeFilterList[i]);
    finishArray(json, value.codeFilterList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.dateFilterList.Count > 0) then
  begin
    startArray(json, 'dateFilter', value.dateFilterList, false);
    for i := 0 to value.dateFilterList.Count - 1 do
      ComposeDataRequirementDateFilter(json, '', value.dateFilterList[i]);
    finishArray(json, value.dateFilterList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'limit', value.limitElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'limit', value.limitElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.sortList.Count > 0) then
  begin
    startArray(json, 'sort', value.sortList, false);
    for i := 0 to value.sortList.Count - 1 do
      ComposeDataRequirementSort(json, '', value.sortList[i]);
    finishArray(json, value.sortList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDistance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDistance(jsn)); 
end;

function TFHIRJsonParser.ParseDistance(jsn : TJsonObject) : TFhirDistance;
begin
  result := TFhirDistance.Create;
  try
    ParseDistanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDistanceProperties(jsn : TJsonObject; value : TFhirDistance);
begin
    ParseQuantityProperties(jsn, value);
end;

procedure TFHIRJsonComposer.ComposeDistance(json : TJSONWriter; name : string; value : TFhirDistance; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeQuantity(json, '', value, true);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDosageDoseAndRate(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDosageDoseAndRate(jsn)); 
end;

function TFHIRJsonParser.ParseDosageDoseAndRate(jsn : TJsonObject) : TFhirDosageDoseAndRate;
begin
  result := TFhirDosageDoseAndRate.Create;
  try
    ParseDosageDoseAndRateProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDosageDoseAndRateProperties(jsn : TJsonObject; value : TFhirDosageDoseAndRate);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('doseRange') {a4} then
      value.dose := ParseRange(jsn.vObj['doseRange']);
    if jsn.has('doseQuantity') {a4} then
      value.dose := ParseQuantity(jsn.vObj['doseQuantity']);
    if jsn.has('rateRatio') {a4} then
      value.rate := ParseRatio(jsn.vObj['rateRatio']);
    if jsn.has('rateRange') {a4} then
      value.rate := ParseRange(jsn.vObj['rateRange']);
    if jsn.has('rateQuantity') {a4} then
      value.rate := ParseQuantity(jsn.vObj['rateQuantity']);
end;

procedure TFHIRJsonComposer.ComposeDosageDoseAndRate(json : TJSONWriter; name : string; value : TFhirDosageDoseAndRate; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.dose is TFhirRange) then 
    ComposeRange(json, 'doseRange', TFhirRange(value.dose)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.dose is TFhirQuantity) then 
    ComposeQuantity(json, 'doseQuantity', TFhirQuantity(value.dose)) ;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.rate is TFhirRatio) then 
    ComposeRatio(json, 'rateRatio', TFhirRatio(value.rate)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.rate is TFhirRange) then 
    ComposeRange(json, 'rateRange', TFhirRange(value.rate)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.rate is TFhirQuantity) then 
    ComposeQuantity(json, 'rateQuantity', TFhirQuantity(value.rate)) ;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDosage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDosage(jsn)); 
end;

function TFHIRJsonParser.ParseDosage(jsn : TJsonObject) : TFhirDosage;
begin
  result := TFhirDosage.Create;
  try
    ParseDosageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDosageProperties(jsn : TJsonObject; value : TFhirDosage);
begin
    ParseBackboneTypeProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parseInteger(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
    if jsn.has('additionalInstruction') then
      iterateArray(jsn.vArr['additionalInstruction'], value.additionalInstructionList, parseCodeableConcept);
    if jsn.has('patientInstruction') or jsn.has('_patientInstruction') then
        value.patientInstructionElement := parseString(jsn.node['patientInstruction'], jsn.vObj['_patientInstruction']);
    if jsn.has('timing') then
        value.timing := ParseTiming(jsn.vObj['timing']);
    if jsn.has('asNeededCodeableConcept') {a4} then
      value.asNeeded := ParseCodeableConcept(jsn.vObj['asNeededCodeableConcept']);
    if jsn.has('asNeededBoolean') or jsn.has('_asNeededBoolean') then
      value.asNeeded := parseBoolean(jsn.node['asNeededBoolean'], jsn.vObj['_asNeededBoolean']);
    if jsn.has('site') then
        value.site := ParseCodeableConcept(jsn.vObj['site']);
    if jsn.has('route') then
        value.route := ParseCodeableConcept(jsn.vObj['route']);
    if jsn.has('method') then
        value.method := ParseCodeableConcept(jsn.vObj['method']);
    if jsn.has('doseAndRate') then
      iterateArray(jsn.vArr['doseAndRate'], value.doseAndRateList, parseDosageDoseAndRate);
    if jsn.has('maxDosePerPeriod') then
        value.maxDosePerPeriod := ParseRatio(jsn.vObj['maxDosePerPeriod']);
    if jsn.has('maxDosePerAdministration') then
        value.maxDosePerAdministration := ParseQuantity(jsn.vObj['maxDosePerAdministration']);
    if jsn.has('maxDosePerLifetime') then
        value.maxDosePerLifetime := ParseQuantity(jsn.vObj['maxDosePerLifetime']);
end;

procedure TFHIRJsonComposer.ComposeDosage(json : TJSONWriter; name : string; value : TFhirDosage; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  composeBackboneTypeProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'sequence', value.sequenceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'sequence', value.sequenceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.additionalInstructionList.Count > 0) then
  begin
    startArray(json, 'additionalInstruction', value.additionalInstructionList, false);
    for i := 0 to value.additionalInstructionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.additionalInstructionList[i]);
    finishArray(json, value.additionalInstructionList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'patientInstruction', value.patientInstructionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'patientInstruction', value.patientInstructionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeTiming(json, 'timing', value.timing);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.asNeeded is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'asNeededCodeableConcept', TFhirCodeableConcept(value.asNeeded)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.asNeeded is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'asNeededBoolean', TFhirBoolean(value.asNeeded), false);
    ComposeBooleanProps(json, 'asNeededBoolean', TFhirBoolean(value.asNeeded), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'site', value.site);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'route', value.route);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'method', value.method);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.doseAndRateList.Count > 0) then
  begin
    startArray(json, 'doseAndRate', value.doseAndRateList, false);
    for i := 0 to value.doseAndRateList.Count - 1 do
      ComposeDosageDoseAndRate(json, '', value.doseAndRateList[i]);
    finishArray(json, value.doseAndRateList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(json, 'maxDosePerPeriod', value.maxDosePerPeriod);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'maxDosePerAdministration', value.maxDosePerAdministration);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'maxDosePerLifetime', value.maxDosePerLifetime);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDuration(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDuration(jsn)); 
end;

function TFHIRJsonParser.ParseDuration(jsn : TJsonObject) : TFhirDuration;
begin
  result := TFhirDuration.Create;
  try
    ParseDurationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDurationProperties(jsn : TJsonObject; value : TFhirDuration);
begin
    ParseQuantityProperties(jsn, value);
end;

procedure TFHIRJsonComposer.ComposeDuration(json : TJSONWriter; name : string; value : TFhirDuration; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeQuantity(json, '', value, true);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseElementDefinitionSlicing(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionSlicing(jsn)); 
end;

function TFHIRJsonParser.ParseElementDefinitionSlicing(jsn : TJsonObject) : TFhirElementDefinitionSlicing;
begin
  result := TFhirElementDefinitionSlicing.Create;
  try
    ParseElementDefinitionSlicingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionSlicingProperties(jsn : TJsonObject; value : TFhirElementDefinitionSlicing);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('discriminator') then
      iterateArray(jsn.vArr['discriminator'], value.discriminatorList, parseElementDefinitionSlicingDiscriminator);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('ordered') or jsn.has('_ordered') then
        value.orderedElement := parseBoolean(jsn.node['ordered'], jsn.vObj['_ordered']);
    if jsn.has('rules') or jsn.has('_rules') then
        value.rulesElement := parseEnum(jsn.path+'/rules', jsn.node['rules'], jsn.vObj['_rules'], CODES_TFhirSlicingRulesEnum, SYSTEMS_TFhirSlicingRulesEnum);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionSlicing(json : TJSONWriter; name : string; value : TFhirElementDefinitionSlicing; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.discriminatorList.Count > 0) then
  begin
    startArray(json, 'discriminator', value.discriminatorList, false);
    for i := 0 to value.discriminatorList.Count - 1 do
      ComposeElementDefinitionSlicingDiscriminator(json, '', value.discriminatorList[i]);
    finishArray(json, value.discriminatorList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'ordered', value.orderedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'ordered', value.orderedElement, false);
  ComposeEnumValue(json, 'rules', value.rulesElement, CODES_TFhirSlicingRulesEnum, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseElementDefinitionSlicingDiscriminator(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionSlicingDiscriminator(jsn)); 
end;

function TFHIRJsonParser.ParseElementDefinitionSlicingDiscriminator(jsn : TJsonObject) : TFhirElementDefinitionSlicingDiscriminator;
begin
  result := TFhirElementDefinitionSlicingDiscriminator.Create;
  try
    ParseElementDefinitionSlicingDiscriminatorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionSlicingDiscriminatorProperties(jsn : TJsonObject; value : TFhirElementDefinitionSlicingDiscriminator);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirDiscriminatorTypeEnum, SYSTEMS_TFhirDiscriminatorTypeEnum);
    if jsn.has('path') or jsn.has('_path') then
        value.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionSlicingDiscriminator(json : TJSONWriter; name : string; value : TFhirElementDefinitionSlicingDiscriminator; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirDiscriminatorTypeEnum, false);
  ComposeStringValue(json, 'path', value.pathElement, false);
  ComposeStringProps(json, 'path', value.pathElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseElementDefinitionBase(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionBase(jsn)); 
end;

function TFHIRJsonParser.ParseElementDefinitionBase(jsn : TJsonObject) : TFhirElementDefinitionBase;
begin
  result := TFhirElementDefinitionBase.Create;
  try
    ParseElementDefinitionBaseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionBaseProperties(jsn : TJsonObject; value : TFhirElementDefinitionBase);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('path') or jsn.has('_path') then
        value.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);
    if jsn.has('min') or jsn.has('_min') then
        value.minElement := parseUnsignedInt(jsn.node['min'], jsn.vObj['_min']);
    if jsn.has('max') or jsn.has('_max') then
        value.maxElement := parseString(jsn.node['max'], jsn.vObj['_max']);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionBase(json : TJSONWriter; name : string; value : TFhirElementDefinitionBase; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeStringValue(json, 'path', value.pathElement, false);
  ComposeStringProps(json, 'path', value.pathElement, false);
  ComposeUnsignedIntValue(json, 'min', value.minElement, false);
  ComposeUnsignedIntProps(json, 'min', value.minElement, false);
  ComposeStringValue(json, 'max', value.maxElement, false);
  ComposeStringProps(json, 'max', value.maxElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseElementDefinitionType(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionType(jsn)); 
end;

function TFHIRJsonParser.ParseElementDefinitionType(jsn : TJsonObject) : TFhirElementDefinitionType;
begin
  result := TFhirElementDefinitionType.Create;
  try
    ParseElementDefinitionTypeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionTypeProperties(jsn : TJsonObject; value : TFhirElementDefinitionType);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseUri(jsn.node['code'], jsn.vObj['_code']);
      if jsn.has('profile') or jsn.has('_profile') then
      iteratePrimitiveArray(jsn.vArr['profile'], jsn.vArr['_profile'], value.profileList, parseCanonical);
      if jsn.has('targetProfile') or jsn.has('_targetProfile') then
      iteratePrimitiveArray(jsn.vArr['targetProfile'], jsn.vArr['_targetProfile'], value.targetProfileList, parseCanonical);
    if jsn.has('aggregation') or jsn.has('_aggregation') then
      iterateEnumArray(jsn.vArr['aggregation'], jsn.vArr['_aggregation'], jsn.path+'/aggregation', value.aggregationList, parseEnum, CODES_TFhirAggregationModeEnum, SYSTEMS_TFhirAggregationModeEnum);
    if jsn.has('versioning') or jsn.has('_versioning') then
        value.versioningElement := parseEnum(jsn.path+'/versioning', jsn.node['versioning'], jsn.vObj['_versioning'], CODES_TFhirReferenceVersionRulesEnum, SYSTEMS_TFhirReferenceVersionRulesEnum);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionType(json : TJSONWriter; name : string; value : TFhirElementDefinitionType; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeUriValue(json, 'code', value.codeElement, false);
  ComposeUriProps(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.profileList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.profileList.Count - 1 do
    begin
      ext := ext or ((value.profileList[i].id <> '') or (value.profileList[i].hasExtensionList) {no-comments or (value.profileList[i].hasComments)});
      val := val or (value.profileList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'profile', value.profileList, true);
      for i := 0 to value.profileList.Count - 1 do
        ComposeCanonicalValue(json, '', value.profileList[i], true);
      finishArray(json, value.profileList);
    end;
    if ext then
    begin
      startArray(json, '_profile', value.profileList, false);
      for i := 0 to value.profileList.Count - 1 do
        ComposeCanonicalProps(json, '', value.profileList[i], true);
      finishArray(json, value.profileList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.targetProfileList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.targetProfileList.Count - 1 do
    begin
      ext := ext or ((value.targetProfileList[i].id <> '') or (value.targetProfileList[i].hasExtensionList) {no-comments or (value.targetProfileList[i].hasComments)});
      val := val or (value.targetProfileList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'targetProfile', value.targetProfileList, true);
      for i := 0 to value.targetProfileList.Count - 1 do
        ComposeCanonicalValue(json, '', value.targetProfileList[i], true);
      finishArray(json, value.targetProfileList);
    end;
    if ext then
    begin
      startArray(json, '_targetProfile', value.targetProfileList, false);
      for i := 0 to value.targetProfileList.Count - 1 do
        ComposeCanonicalProps(json, '', value.targetProfileList[i], true);
      finishArray(json, value.targetProfileList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.aggregationList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.aggregationList.Count - 1 do
    begin
      val := val or (value.aggregationList[i].hasPrimitiveValue);
      ext := ext or ((value.aggregationList[i].id <> '') or (value.aggregationList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'aggregation', value.aggregationList, true);
      for i := 0 to value.aggregationList.Count - 1 do
        ComposeEnumValue(json, '', value.aggregationList[i], CODES_TFhirAggregationModeEnum, true);
      finishArray(json, value.aggregationList);
    end;
    if ext then
    begin
      startArray(json, '_aggregation', value.aggregationList, false);
      for i := 0 to value.aggregationList.Count - 1 do
        ComposeEnumProps(json, '', value.aggregationList[i], CODES_TFhirAggregationModeEnum, true);
      finishArray(json, value.aggregationList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'versioning', value.versioningElement, CODES_TFhirReferenceVersionRulesEnum, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseElementDefinitionExample(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionExample(jsn)); 
end;

function TFHIRJsonParser.ParseElementDefinitionExample(jsn : TJsonObject) : TFhirElementDefinitionExample;
begin
  result := TFhirElementDefinitionExample.Create;
  try
    ParseElementDefinitionExampleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionExampleProperties(jsn : TJsonObject; value : TFhirElementDefinitionExample);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('label') or jsn.has('_label') then
        value.label_Element := parseString(jsn.node['label'], jsn.vObj['_label']);
    if jsn.has('valueCanonical') or jsn.has('_valueCanonical') then
      value.value := parseCanonical(jsn.node['valueCanonical'], jsn.vObj['_valueCanonical']);
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      value.value := parseCode(jsn.node['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      value.value := parseId(jsn.node['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      value.value := parseMarkdown(jsn.node['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      value.value := parseOid(jsn.node['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      value.value := parsePositiveInt(jsn.node['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      value.value := parseUnsignedInt(jsn.node['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueUrl') or jsn.has('_valueUrl') then
      value.value := parseUrl(jsn.node['valueUrl'], jsn.vObj['_valueUrl']);
    if jsn.has('valueUuid') or jsn.has('_valueUuid') then
      value.value := parseUuid(jsn.node['valueUuid'], jsn.vObj['_valueUuid']);
    if jsn.has('valueAddress') {a4} then
      value.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      value.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      value.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCodeableReference') {a4} then
      value.value := ParseCodeableReference(jsn.vObj['valueCodeableReference']);
    if jsn.has('valueCoding') {a4} then
      value.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      value.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      value.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      value.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      value.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      value.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      value.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      value.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      value.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      value.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      value.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueRatioRange') {a4} then
      value.value := ParseRatioRange(jsn.vObj['valueRatioRange']);
    if jsn.has('valueReference') {a4} then
      value.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      value.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      value.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      value.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueContactDetail') {a4} then
      value.value := ParseContactDetail(jsn.vObj['valueContactDetail']);
    if jsn.has('valueContributor') {a4} then
      value.value := ParseContributor(jsn.vObj['valueContributor']);
    if jsn.has('valueDataRequirement') {a4} then
      value.value := ParseDataRequirement(jsn.vObj['valueDataRequirement']);
    if jsn.has('valueExpression') {a4} then
      value.value := ParseExpression(jsn.vObj['valueExpression']);
    if jsn.has('valueParameterDefinition') {a4} then
      value.value := ParseParameterDefinition(jsn.vObj['valueParameterDefinition']);
    if jsn.has('valueRelatedArtifact') {a4} then
      value.value := ParseRelatedArtifact(jsn.vObj['valueRelatedArtifact']);
    if jsn.has('valueTriggerDefinition') {a4} then
      value.value := ParseTriggerDefinition(jsn.vObj['valueTriggerDefinition']);
    if jsn.has('valueUsageContext') {a4} then
      value.value := ParseUsageContext(jsn.vObj['valueUsageContext']);
    if jsn.has('valueDosage') {a4} then
      value.value := ParseDosage(jsn.vObj['valueDosage']);
    if jsn.has('valueMeta') {a4} then
      value.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      value.value := parseBase64Binary(jsn.node['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      value.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      value.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      value.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      value.value := parseInstant(jsn.node['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      value.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      value.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      value.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionExample(json : TJSONWriter; name : string; value : TFhirElementDefinitionExample; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeStringValue(json, 'label', value.label_Element, false);
  ComposeStringProps(json, 'label', value.label_Element, false);
  if (value.value is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'valueCanonical', TFhirCanonical(value.value), false);
    ComposeCanonicalProps(json, 'valueCanonical', TFhirCanonical(value.value), false);
  end
  else if (value.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(value.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(value.value), false);
  end
  else if (value.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(value.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(value.value), false);
  end
  else if (value.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(value.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(value.value), false);
  end
  else if (value.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(value.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(value.value), false);
  end
  else if (value.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(value.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(value.value), false);
  end
  else if (value.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(value.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(value.value), false);
  end
  else if (value.value is TFhirUrl) then 
  begin
    ComposeUrlValue(json, 'valueUrl', TFhirUrl(value.value), false);
    ComposeUrlProps(json, 'valueUrl', TFhirUrl(value.value), false);
  end
  else if (value.value is TFhirUuid) then 
  begin
    ComposeUuidValue(json, 'valueUuid', TFhirUuid(value.value), false);
    ComposeUuidProps(json, 'valueUuid', TFhirUuid(value.value), false);
  end
  else if (value.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(value.value)) 
  else if (value.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(value.value)) 
  else if (value.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(value.value)) 
  else if (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (value.value is TFhirCodeableReference) then 
    ComposeCodeableReference(json, 'valueCodeableReference', TFhirCodeableReference(value.value)) 
  else if (value.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(value.value)) 
  else if (value.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(value.value)) 
  else if (value.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(value.value)) 
  else if (value.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(value.value)) 
  else if (value.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(value.value)) 
  else if (value.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(value.value)) 
  else if (value.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(value.value)) 
  else if (value.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(value.value)) 
  else if (value.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(value.value)) 
  else if (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (value.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(value.value)) 
  else if (value.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(value.value)) 
  else if (value.value is TFhirRatioRange) then 
    ComposeRatioRange(json, 'valueRatioRange', TFhirRatioRange(value.value)) 
  else if (value.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(value.value)) 
  else if (value.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(value.value)) 
  else if (value.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(value.value)) 
  else if (value.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(value.value)) 
  else if (value.value is TFhirContactDetail) then 
    ComposeContactDetail(json, 'valueContactDetail', TFhirContactDetail(value.value)) 
  else if (value.value is TFhirContributor) then 
    ComposeContributor(json, 'valueContributor', TFhirContributor(value.value)) 
  else if (value.value is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'valueDataRequirement', TFhirDataRequirement(value.value)) 
  else if (value.value is TFhirExpression) then 
    ComposeExpression(json, 'valueExpression', TFhirExpression(value.value)) 
  else if (value.value is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'valueParameterDefinition', TFhirParameterDefinition(value.value)) 
  else if (value.value is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'valueRelatedArtifact', TFhirRelatedArtifact(value.value)) 
  else if (value.value is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'valueTriggerDefinition', TFhirTriggerDefinition(value.value)) 
  else if (value.value is TFhirUsageContext) then 
    ComposeUsageContext(json, 'valueUsageContext', TFhirUsageContext(value.value)) 
  else if (value.value is TFhirDosage) then 
    ComposeDosage(json, 'valueDosage', TFhirDosage(value.value)) 
  else if (value.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(value.value)) 
  else if (value.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
  end
  else if (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (value.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(value.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(value.value), false);
  end
  else if (value.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(value.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(value.value), false);
  end
  else if (value.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(value.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(value.value), false);
  end
  else if (value.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(value.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(value.value), false);
  end
  else if (value.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(value.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(value.value), false);
  end
  else if (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (value.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(value.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(value.value), false);
  end
  else if (value.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(value.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseElementDefinitionConstraint(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionConstraint(jsn)); 
end;

function TFHIRJsonParser.ParseElementDefinitionConstraint(jsn : TJsonObject) : TFhirElementDefinitionConstraint;
begin
  result := TFhirElementDefinitionConstraint.Create;
  try
    ParseElementDefinitionConstraintProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionConstraintProperties(jsn : TJsonObject; value : TFhirElementDefinitionConstraint);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('key') or jsn.has('_key') then
        value.keyElement := parseId(jsn.node['key'], jsn.vObj['_key']);
    if jsn.has('requirements') or jsn.has('_requirements') then
        value.requirementsElement := parseString(jsn.node['requirements'], jsn.vObj['_requirements']);
    if jsn.has('severity') or jsn.has('_severity') then
        value.severityElement := parseEnum(jsn.path+'/severity', jsn.node['severity'], jsn.vObj['_severity'], CODES_TFhirConstraintSeverityEnum, SYSTEMS_TFhirConstraintSeverityEnum);
    if jsn.has('human') or jsn.has('_human') then
        value.humanElement := parseString(jsn.node['human'], jsn.vObj['_human']);
    if jsn.has('expression') or jsn.has('_expression') then
        value.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);
    if jsn.has('xpath') or jsn.has('_xpath') then
        value.xpathElement := parseString(jsn.node['xpath'], jsn.vObj['_xpath']);
    if jsn.has('source') or jsn.has('_source') then
        value.sourceElement := parseCanonical(jsn.node['source'], jsn.vObj['_source']);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionConstraint(json : TJSONWriter; name : string; value : TFhirElementDefinitionConstraint; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeIdValue(json, 'key', value.keyElement, false);
  ComposeIdProps(json, 'key', value.keyElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'requirements', value.requirementsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'requirements', value.requirementsElement, false);
  ComposeEnumValue(json, 'severity', value.severityElement, CODES_TFhirConstraintSeverityEnum, false);
  ComposeStringValue(json, 'human', value.humanElement, false);
  ComposeStringProps(json, 'human', value.humanElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'expression', value.expressionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'expression', value.expressionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'xpath', value.xpathElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'xpath', value.xpathElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'source', value.sourceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'source', value.sourceElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseElementDefinitionBinding(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionBinding(jsn)); 
end;

function TFHIRJsonParser.ParseElementDefinitionBinding(jsn : TJsonObject) : TFhirElementDefinitionBinding;
begin
  result := TFhirElementDefinitionBinding.Create;
  try
    ParseElementDefinitionBindingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionBindingProperties(jsn : TJsonObject; value : TFhirElementDefinitionBinding);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('strength') or jsn.has('_strength') then
        value.strengthElement := parseEnum(jsn.path+'/strength', jsn.node['strength'], jsn.vObj['_strength'], CODES_TFhirBindingStrengthEnum, SYSTEMS_TFhirBindingStrengthEnum);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('valueSet') or jsn.has('_valueSet') then
        value.valueSetElement := parseCanonical(jsn.node['valueSet'], jsn.vObj['_valueSet']);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionBinding(json : TJSONWriter; name : string; value : TFhirElementDefinitionBinding; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeEnumValue(json, 'strength', value.strengthElement, CODES_TFhirBindingStrengthEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'valueSet', value.valueSetElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'valueSet', value.valueSetElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseElementDefinitionMapping(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionMapping(jsn)); 
end;

function TFHIRJsonParser.ParseElementDefinitionMapping(jsn : TJsonObject) : TFhirElementDefinitionMapping;
begin
  result := TFhirElementDefinitionMapping.Create;
  try
    ParseElementDefinitionMappingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionMappingProperties(jsn : TJsonObject; value : TFhirElementDefinitionMapping);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('identity') or jsn.has('_identity') then
        value.identityElement := parseId(jsn.node['identity'], jsn.vObj['_identity']);
    if jsn.has('language') or jsn.has('_language') then
        value.languageElement := parseCode(jsn.node['language'], jsn.vObj['_language']);
    if jsn.has('map') or jsn.has('_map') then
        value.mapElement := parseString(jsn.node['map'], jsn.vObj['_map']);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionMapping(json : TJSONWriter; name : string; value : TFhirElementDefinitionMapping; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeIdValue(json, 'identity', value.identityElement, false);
  ComposeIdProps(json, 'identity', value.identityElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'language', value.languageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'language', value.languageElement, false);
  ComposeStringValue(json, 'map', value.mapElement, false);
  ComposeStringProps(json, 'map', value.mapElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'comment', value.commentElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseElementDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseElementDefinition(jsn : TJsonObject) : TFhirElementDefinition;
begin
  result := TFhirElementDefinition.Create;
  try
    ParseElementDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionProperties(jsn : TJsonObject; value : TFhirElementDefinition);
begin
    ParseBackboneTypeProperties(jsn, value);
    if jsn.has('path') or jsn.has('_path') then
        value.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);
    if jsn.has('representation') or jsn.has('_representation') then
      iterateEnumArray(jsn.vArr['representation'], jsn.vArr['_representation'], jsn.path+'/representation', value.representationList, parseEnum, CODES_TFhirPropertyRepresentationEnum, SYSTEMS_TFhirPropertyRepresentationEnum);
    if jsn.has('sliceName') or jsn.has('_sliceName') then
        value.sliceNameElement := parseString(jsn.node['sliceName'], jsn.vObj['_sliceName']);
    if jsn.has('sliceIsConstraining') or jsn.has('_sliceIsConstraining') then
        value.sliceIsConstrainingElement := parseBoolean(jsn.node['sliceIsConstraining'], jsn.vObj['_sliceIsConstraining']);
    if jsn.has('label') or jsn.has('_label') then
        value.label_Element := parseString(jsn.node['label'], jsn.vObj['_label']);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCoding);
    if jsn.has('slicing') then
        value.slicing := ParseElementDefinitionSlicing(jsn.vObj['slicing']);
    if jsn.has('short') or jsn.has('_short') then
        value.shortElement := parseString(jsn.node['short'], jsn.vObj['_short']);
    if jsn.has('definition') or jsn.has('_definition') then
        value.definitionElement := parseMarkdown(jsn.node['definition'], jsn.vObj['_definition']);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseMarkdown(jsn.node['comment'], jsn.vObj['_comment']);
    if jsn.has('requirements') or jsn.has('_requirements') then
        value.requirementsElement := parseMarkdown(jsn.node['requirements'], jsn.vObj['_requirements']);
      if jsn.has('alias') or jsn.has('_alias') then
      iteratePrimitiveArray(jsn.vArr['alias'], jsn.vArr['_alias'], value.aliasList, parseString);
    if jsn.has('min') or jsn.has('_min') then
        value.minElement := parseUnsignedInt(jsn.node['min'], jsn.vObj['_min']);
    if jsn.has('max') or jsn.has('_max') then
        value.maxElement := parseString(jsn.node['max'], jsn.vObj['_max']);
    if jsn.has('base') then
        value.base := ParseElementDefinitionBase(jsn.vObj['base']);
    if jsn.has('contentReference') or jsn.has('_contentReference') then
        value.contentReferenceElement := parseUri(jsn.node['contentReference'], jsn.vObj['_contentReference']);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseElementDefinitionType);
    if jsn.has('defaultValueCanonical') or jsn.has('_defaultValueCanonical') then
      value.defaultValue := parseCanonical(jsn.node['defaultValueCanonical'], jsn.vObj['_defaultValueCanonical']);
    if jsn.has('defaultValueCode') or jsn.has('_defaultValueCode') then
      value.defaultValue := parseCode(jsn.node['defaultValueCode'], jsn.vObj['_defaultValueCode']);
    if jsn.has('defaultValueId') or jsn.has('_defaultValueId') then
      value.defaultValue := parseId(jsn.node['defaultValueId'], jsn.vObj['_defaultValueId']);
    if jsn.has('defaultValueMarkdown') or jsn.has('_defaultValueMarkdown') then
      value.defaultValue := parseMarkdown(jsn.node['defaultValueMarkdown'], jsn.vObj['_defaultValueMarkdown']);
    if jsn.has('defaultValueOid') or jsn.has('_defaultValueOid') then
      value.defaultValue := parseOid(jsn.node['defaultValueOid'], jsn.vObj['_defaultValueOid']);
    if jsn.has('defaultValuePositiveInt') or jsn.has('_defaultValuePositiveInt') then
      value.defaultValue := parsePositiveInt(jsn.node['defaultValuePositiveInt'], jsn.vObj['_defaultValuePositiveInt']);
    if jsn.has('defaultValueUnsignedInt') or jsn.has('_defaultValueUnsignedInt') then
      value.defaultValue := parseUnsignedInt(jsn.node['defaultValueUnsignedInt'], jsn.vObj['_defaultValueUnsignedInt']);
    if jsn.has('defaultValueUrl') or jsn.has('_defaultValueUrl') then
      value.defaultValue := parseUrl(jsn.node['defaultValueUrl'], jsn.vObj['_defaultValueUrl']);
    if jsn.has('defaultValueUuid') or jsn.has('_defaultValueUuid') then
      value.defaultValue := parseUuid(jsn.node['defaultValueUuid'], jsn.vObj['_defaultValueUuid']);
    if jsn.has('defaultValueAddress') {a4} then
      value.defaultValue := ParseAddress(jsn.vObj['defaultValueAddress']);
    if jsn.has('defaultValueAge') {a4} then
      value.defaultValue := ParseAge(jsn.vObj['defaultValueAge']);
    if jsn.has('defaultValueAnnotation') {a4} then
      value.defaultValue := ParseAnnotation(jsn.vObj['defaultValueAnnotation']);
    if jsn.has('defaultValueAttachment') {a4} then
      value.defaultValue := ParseAttachment(jsn.vObj['defaultValueAttachment']);
    if jsn.has('defaultValueCodeableConcept') {a4} then
      value.defaultValue := ParseCodeableConcept(jsn.vObj['defaultValueCodeableConcept']);
    if jsn.has('defaultValueCodeableReference') {a4} then
      value.defaultValue := ParseCodeableReference(jsn.vObj['defaultValueCodeableReference']);
    if jsn.has('defaultValueCoding') {a4} then
      value.defaultValue := ParseCoding(jsn.vObj['defaultValueCoding']);
    if jsn.has('defaultValueContactPoint') {a4} then
      value.defaultValue := ParseContactPoint(jsn.vObj['defaultValueContactPoint']);
    if jsn.has('defaultValueCount') {a4} then
      value.defaultValue := ParseCount(jsn.vObj['defaultValueCount']);
    if jsn.has('defaultValueDistance') {a4} then
      value.defaultValue := ParseDistance(jsn.vObj['defaultValueDistance']);
    if jsn.has('defaultValueDuration') {a4} then
      value.defaultValue := ParseDuration(jsn.vObj['defaultValueDuration']);
    if jsn.has('defaultValueHumanName') {a4} then
      value.defaultValue := ParseHumanName(jsn.vObj['defaultValueHumanName']);
    if jsn.has('defaultValueIdentifier') {a4} then
      value.defaultValue := ParseIdentifier(jsn.vObj['defaultValueIdentifier']);
    if jsn.has('defaultValueMoney') {a4} then
      value.defaultValue := ParseMoney(jsn.vObj['defaultValueMoney']);
    if jsn.has('defaultValuePeriod') {a4} then
      value.defaultValue := ParsePeriod(jsn.vObj['defaultValuePeriod']);
    if jsn.has('defaultValueQuantity') {a4} then
      value.defaultValue := ParseQuantity(jsn.vObj['defaultValueQuantity']);
    if jsn.has('defaultValueRange') {a4} then
      value.defaultValue := ParseRange(jsn.vObj['defaultValueRange']);
    if jsn.has('defaultValueRatio') {a4} then
      value.defaultValue := ParseRatio(jsn.vObj['defaultValueRatio']);
    if jsn.has('defaultValueRatioRange') {a4} then
      value.defaultValue := ParseRatioRange(jsn.vObj['defaultValueRatioRange']);
    if jsn.has('defaultValueReference') {a4} then
      value.defaultValue := ParseReference(jsn.vObj['defaultValueReference']);
    if jsn.has('defaultValueSampledData') {a4} then
      value.defaultValue := ParseSampledData(jsn.vObj['defaultValueSampledData']);
    if jsn.has('defaultValueSignature') {a4} then
      value.defaultValue := ParseSignature(jsn.vObj['defaultValueSignature']);
    if jsn.has('defaultValueTiming') {a4} then
      value.defaultValue := ParseTiming(jsn.vObj['defaultValueTiming']);
    if jsn.has('defaultValueContactDetail') {a4} then
      value.defaultValue := ParseContactDetail(jsn.vObj['defaultValueContactDetail']);
    if jsn.has('defaultValueContributor') {a4} then
      value.defaultValue := ParseContributor(jsn.vObj['defaultValueContributor']);
    if jsn.has('defaultValueDataRequirement') {a4} then
      value.defaultValue := ParseDataRequirement(jsn.vObj['defaultValueDataRequirement']);
    if jsn.has('defaultValueExpression') {a4} then
      value.defaultValue := ParseExpression(jsn.vObj['defaultValueExpression']);
    if jsn.has('defaultValueParameterDefinition') {a4} then
      value.defaultValue := ParseParameterDefinition(jsn.vObj['defaultValueParameterDefinition']);
    if jsn.has('defaultValueRelatedArtifact') {a4} then
      value.defaultValue := ParseRelatedArtifact(jsn.vObj['defaultValueRelatedArtifact']);
    if jsn.has('defaultValueTriggerDefinition') {a4} then
      value.defaultValue := ParseTriggerDefinition(jsn.vObj['defaultValueTriggerDefinition']);
    if jsn.has('defaultValueUsageContext') {a4} then
      value.defaultValue := ParseUsageContext(jsn.vObj['defaultValueUsageContext']);
    if jsn.has('defaultValueDosage') {a4} then
      value.defaultValue := ParseDosage(jsn.vObj['defaultValueDosage']);
    if jsn.has('defaultValueMeta') {a4} then
      value.defaultValue := ParseMeta(jsn.vObj['defaultValueMeta']);
    if jsn.has('defaultValueBase64Binary') or jsn.has('_defaultValueBase64Binary') then
      value.defaultValue := parseBase64Binary(jsn.node['defaultValueBase64Binary'], jsn.vObj['_defaultValueBase64Binary']);
    if jsn.has('defaultValueBoolean') or jsn.has('_defaultValueBoolean') then
      value.defaultValue := parseBoolean(jsn.node['defaultValueBoolean'], jsn.vObj['_defaultValueBoolean']);
    if jsn.has('defaultValueDate') or jsn.has('_defaultValueDate') then
      value.defaultValue := parseDate(jsn.node['defaultValueDate'], jsn.vObj['_defaultValueDate']);
    if jsn.has('defaultValueDateTime') or jsn.has('_defaultValueDateTime') then
      value.defaultValue := parseDateTime(jsn.node['defaultValueDateTime'], jsn.vObj['_defaultValueDateTime']);
    if jsn.has('defaultValueDecimal') or jsn.has('_defaultValueDecimal') then
      value.defaultValue := parseDecimal(jsn.node['defaultValueDecimal'], jsn.vObj['_defaultValueDecimal']);
    if jsn.has('defaultValueInstant') or jsn.has('_defaultValueInstant') then
      value.defaultValue := parseInstant(jsn.node['defaultValueInstant'], jsn.vObj['_defaultValueInstant']);
    if jsn.has('defaultValueInteger') or jsn.has('_defaultValueInteger') then
      value.defaultValue := parseInteger(jsn.node['defaultValueInteger'], jsn.vObj['_defaultValueInteger']);
    if jsn.has('defaultValueString') or jsn.has('_defaultValueString') then
      value.defaultValue := parseString(jsn.node['defaultValueString'], jsn.vObj['_defaultValueString']);
    if jsn.has('defaultValueTime') or jsn.has('_defaultValueTime') then
      value.defaultValue := parseTime(jsn.node['defaultValueTime'], jsn.vObj['_defaultValueTime']);
    if jsn.has('defaultValueUri') or jsn.has('_defaultValueUri') then
      value.defaultValue := parseUri(jsn.node['defaultValueUri'], jsn.vObj['_defaultValueUri']);
    if jsn.has('meaningWhenMissing') or jsn.has('_meaningWhenMissing') then
        value.meaningWhenMissingElement := parseMarkdown(jsn.node['meaningWhenMissing'], jsn.vObj['_meaningWhenMissing']);
    if jsn.has('orderMeaning') or jsn.has('_orderMeaning') then
        value.orderMeaningElement := parseString(jsn.node['orderMeaning'], jsn.vObj['_orderMeaning']);
    if jsn.has('fixedCanonical') or jsn.has('_fixedCanonical') then
      value.fixed := parseCanonical(jsn.node['fixedCanonical'], jsn.vObj['_fixedCanonical']);
    if jsn.has('fixedCode') or jsn.has('_fixedCode') then
      value.fixed := parseCode(jsn.node['fixedCode'], jsn.vObj['_fixedCode']);
    if jsn.has('fixedId') or jsn.has('_fixedId') then
      value.fixed := parseId(jsn.node['fixedId'], jsn.vObj['_fixedId']);
    if jsn.has('fixedMarkdown') or jsn.has('_fixedMarkdown') then
      value.fixed := parseMarkdown(jsn.node['fixedMarkdown'], jsn.vObj['_fixedMarkdown']);
    if jsn.has('fixedOid') or jsn.has('_fixedOid') then
      value.fixed := parseOid(jsn.node['fixedOid'], jsn.vObj['_fixedOid']);
    if jsn.has('fixedPositiveInt') or jsn.has('_fixedPositiveInt') then
      value.fixed := parsePositiveInt(jsn.node['fixedPositiveInt'], jsn.vObj['_fixedPositiveInt']);
    if jsn.has('fixedUnsignedInt') or jsn.has('_fixedUnsignedInt') then
      value.fixed := parseUnsignedInt(jsn.node['fixedUnsignedInt'], jsn.vObj['_fixedUnsignedInt']);
    if jsn.has('fixedUrl') or jsn.has('_fixedUrl') then
      value.fixed := parseUrl(jsn.node['fixedUrl'], jsn.vObj['_fixedUrl']);
    if jsn.has('fixedUuid') or jsn.has('_fixedUuid') then
      value.fixed := parseUuid(jsn.node['fixedUuid'], jsn.vObj['_fixedUuid']);
    if jsn.has('fixedAddress') {a4} then
      value.fixed := ParseAddress(jsn.vObj['fixedAddress']);
    if jsn.has('fixedAge') {a4} then
      value.fixed := ParseAge(jsn.vObj['fixedAge']);
    if jsn.has('fixedAnnotation') {a4} then
      value.fixed := ParseAnnotation(jsn.vObj['fixedAnnotation']);
    if jsn.has('fixedAttachment') {a4} then
      value.fixed := ParseAttachment(jsn.vObj['fixedAttachment']);
    if jsn.has('fixedCodeableConcept') {a4} then
      value.fixed := ParseCodeableConcept(jsn.vObj['fixedCodeableConcept']);
    if jsn.has('fixedCodeableReference') {a4} then
      value.fixed := ParseCodeableReference(jsn.vObj['fixedCodeableReference']);
    if jsn.has('fixedCoding') {a4} then
      value.fixed := ParseCoding(jsn.vObj['fixedCoding']);
    if jsn.has('fixedContactPoint') {a4} then
      value.fixed := ParseContactPoint(jsn.vObj['fixedContactPoint']);
    if jsn.has('fixedCount') {a4} then
      value.fixed := ParseCount(jsn.vObj['fixedCount']);
    if jsn.has('fixedDistance') {a4} then
      value.fixed := ParseDistance(jsn.vObj['fixedDistance']);
    if jsn.has('fixedDuration') {a4} then
      value.fixed := ParseDuration(jsn.vObj['fixedDuration']);
    if jsn.has('fixedHumanName') {a4} then
      value.fixed := ParseHumanName(jsn.vObj['fixedHumanName']);
    if jsn.has('fixedIdentifier') {a4} then
      value.fixed := ParseIdentifier(jsn.vObj['fixedIdentifier']);
    if jsn.has('fixedMoney') {a4} then
      value.fixed := ParseMoney(jsn.vObj['fixedMoney']);
    if jsn.has('fixedPeriod') {a4} then
      value.fixed := ParsePeriod(jsn.vObj['fixedPeriod']);
    if jsn.has('fixedQuantity') {a4} then
      value.fixed := ParseQuantity(jsn.vObj['fixedQuantity']);
    if jsn.has('fixedRange') {a4} then
      value.fixed := ParseRange(jsn.vObj['fixedRange']);
    if jsn.has('fixedRatio') {a4} then
      value.fixed := ParseRatio(jsn.vObj['fixedRatio']);
    if jsn.has('fixedRatioRange') {a4} then
      value.fixed := ParseRatioRange(jsn.vObj['fixedRatioRange']);
    if jsn.has('fixedReference') {a4} then
      value.fixed := ParseReference(jsn.vObj['fixedReference']);
    if jsn.has('fixedSampledData') {a4} then
      value.fixed := ParseSampledData(jsn.vObj['fixedSampledData']);
    if jsn.has('fixedSignature') {a4} then
      value.fixed := ParseSignature(jsn.vObj['fixedSignature']);
    if jsn.has('fixedTiming') {a4} then
      value.fixed := ParseTiming(jsn.vObj['fixedTiming']);
    if jsn.has('fixedContactDetail') {a4} then
      value.fixed := ParseContactDetail(jsn.vObj['fixedContactDetail']);
    if jsn.has('fixedContributor') {a4} then
      value.fixed := ParseContributor(jsn.vObj['fixedContributor']);
    if jsn.has('fixedDataRequirement') {a4} then
      value.fixed := ParseDataRequirement(jsn.vObj['fixedDataRequirement']);
    if jsn.has('fixedExpression') {a4} then
      value.fixed := ParseExpression(jsn.vObj['fixedExpression']);
    if jsn.has('fixedParameterDefinition') {a4} then
      value.fixed := ParseParameterDefinition(jsn.vObj['fixedParameterDefinition']);
    if jsn.has('fixedRelatedArtifact') {a4} then
      value.fixed := ParseRelatedArtifact(jsn.vObj['fixedRelatedArtifact']);
    if jsn.has('fixedTriggerDefinition') {a4} then
      value.fixed := ParseTriggerDefinition(jsn.vObj['fixedTriggerDefinition']);
    if jsn.has('fixedUsageContext') {a4} then
      value.fixed := ParseUsageContext(jsn.vObj['fixedUsageContext']);
    if jsn.has('fixedDosage') {a4} then
      value.fixed := ParseDosage(jsn.vObj['fixedDosage']);
    if jsn.has('fixedMeta') {a4} then
      value.fixed := ParseMeta(jsn.vObj['fixedMeta']);
    if jsn.has('fixedBase64Binary') or jsn.has('_fixedBase64Binary') then
      value.fixed := parseBase64Binary(jsn.node['fixedBase64Binary'], jsn.vObj['_fixedBase64Binary']);
    if jsn.has('fixedBoolean') or jsn.has('_fixedBoolean') then
      value.fixed := parseBoolean(jsn.node['fixedBoolean'], jsn.vObj['_fixedBoolean']);
    if jsn.has('fixedDate') or jsn.has('_fixedDate') then
      value.fixed := parseDate(jsn.node['fixedDate'], jsn.vObj['_fixedDate']);
    if jsn.has('fixedDateTime') or jsn.has('_fixedDateTime') then
      value.fixed := parseDateTime(jsn.node['fixedDateTime'], jsn.vObj['_fixedDateTime']);
    if jsn.has('fixedDecimal') or jsn.has('_fixedDecimal') then
      value.fixed := parseDecimal(jsn.node['fixedDecimal'], jsn.vObj['_fixedDecimal']);
    if jsn.has('fixedInstant') or jsn.has('_fixedInstant') then
      value.fixed := parseInstant(jsn.node['fixedInstant'], jsn.vObj['_fixedInstant']);
    if jsn.has('fixedInteger') or jsn.has('_fixedInteger') then
      value.fixed := parseInteger(jsn.node['fixedInteger'], jsn.vObj['_fixedInteger']);
    if jsn.has('fixedString') or jsn.has('_fixedString') then
      value.fixed := parseString(jsn.node['fixedString'], jsn.vObj['_fixedString']);
    if jsn.has('fixedTime') or jsn.has('_fixedTime') then
      value.fixed := parseTime(jsn.node['fixedTime'], jsn.vObj['_fixedTime']);
    if jsn.has('fixedUri') or jsn.has('_fixedUri') then
      value.fixed := parseUri(jsn.node['fixedUri'], jsn.vObj['_fixedUri']);
    if jsn.has('patternCanonical') or jsn.has('_patternCanonical') then
      value.pattern := parseCanonical(jsn.node['patternCanonical'], jsn.vObj['_patternCanonical']);
    if jsn.has('patternCode') or jsn.has('_patternCode') then
      value.pattern := parseCode(jsn.node['patternCode'], jsn.vObj['_patternCode']);
    if jsn.has('patternId') or jsn.has('_patternId') then
      value.pattern := parseId(jsn.node['patternId'], jsn.vObj['_patternId']);
    if jsn.has('patternMarkdown') or jsn.has('_patternMarkdown') then
      value.pattern := parseMarkdown(jsn.node['patternMarkdown'], jsn.vObj['_patternMarkdown']);
    if jsn.has('patternOid') or jsn.has('_patternOid') then
      value.pattern := parseOid(jsn.node['patternOid'], jsn.vObj['_patternOid']);
    if jsn.has('patternPositiveInt') or jsn.has('_patternPositiveInt') then
      value.pattern := parsePositiveInt(jsn.node['patternPositiveInt'], jsn.vObj['_patternPositiveInt']);
    if jsn.has('patternUnsignedInt') or jsn.has('_patternUnsignedInt') then
      value.pattern := parseUnsignedInt(jsn.node['patternUnsignedInt'], jsn.vObj['_patternUnsignedInt']);
    if jsn.has('patternUrl') or jsn.has('_patternUrl') then
      value.pattern := parseUrl(jsn.node['patternUrl'], jsn.vObj['_patternUrl']);
    if jsn.has('patternUuid') or jsn.has('_patternUuid') then
      value.pattern := parseUuid(jsn.node['patternUuid'], jsn.vObj['_patternUuid']);
    if jsn.has('patternAddress') {a4} then
      value.pattern := ParseAddress(jsn.vObj['patternAddress']);
    if jsn.has('patternAge') {a4} then
      value.pattern := ParseAge(jsn.vObj['patternAge']);
    if jsn.has('patternAnnotation') {a4} then
      value.pattern := ParseAnnotation(jsn.vObj['patternAnnotation']);
    if jsn.has('patternAttachment') {a4} then
      value.pattern := ParseAttachment(jsn.vObj['patternAttachment']);
    if jsn.has('patternCodeableConcept') {a4} then
      value.pattern := ParseCodeableConcept(jsn.vObj['patternCodeableConcept']);
    if jsn.has('patternCodeableReference') {a4} then
      value.pattern := ParseCodeableReference(jsn.vObj['patternCodeableReference']);
    if jsn.has('patternCoding') {a4} then
      value.pattern := ParseCoding(jsn.vObj['patternCoding']);
    if jsn.has('patternContactPoint') {a4} then
      value.pattern := ParseContactPoint(jsn.vObj['patternContactPoint']);
    if jsn.has('patternCount') {a4} then
      value.pattern := ParseCount(jsn.vObj['patternCount']);
    if jsn.has('patternDistance') {a4} then
      value.pattern := ParseDistance(jsn.vObj['patternDistance']);
    if jsn.has('patternDuration') {a4} then
      value.pattern := ParseDuration(jsn.vObj['patternDuration']);
    if jsn.has('patternHumanName') {a4} then
      value.pattern := ParseHumanName(jsn.vObj['patternHumanName']);
    if jsn.has('patternIdentifier') {a4} then
      value.pattern := ParseIdentifier(jsn.vObj['patternIdentifier']);
    if jsn.has('patternMoney') {a4} then
      value.pattern := ParseMoney(jsn.vObj['patternMoney']);
    if jsn.has('patternPeriod') {a4} then
      value.pattern := ParsePeriod(jsn.vObj['patternPeriod']);
    if jsn.has('patternQuantity') {a4} then
      value.pattern := ParseQuantity(jsn.vObj['patternQuantity']);
    if jsn.has('patternRange') {a4} then
      value.pattern := ParseRange(jsn.vObj['patternRange']);
    if jsn.has('patternRatio') {a4} then
      value.pattern := ParseRatio(jsn.vObj['patternRatio']);
    if jsn.has('patternRatioRange') {a4} then
      value.pattern := ParseRatioRange(jsn.vObj['patternRatioRange']);
    if jsn.has('patternReference') {a4} then
      value.pattern := ParseReference(jsn.vObj['patternReference']);
    if jsn.has('patternSampledData') {a4} then
      value.pattern := ParseSampledData(jsn.vObj['patternSampledData']);
    if jsn.has('patternSignature') {a4} then
      value.pattern := ParseSignature(jsn.vObj['patternSignature']);
    if jsn.has('patternTiming') {a4} then
      value.pattern := ParseTiming(jsn.vObj['patternTiming']);
    if jsn.has('patternContactDetail') {a4} then
      value.pattern := ParseContactDetail(jsn.vObj['patternContactDetail']);
    if jsn.has('patternContributor') {a4} then
      value.pattern := ParseContributor(jsn.vObj['patternContributor']);
    if jsn.has('patternDataRequirement') {a4} then
      value.pattern := ParseDataRequirement(jsn.vObj['patternDataRequirement']);
    if jsn.has('patternExpression') {a4} then
      value.pattern := ParseExpression(jsn.vObj['patternExpression']);
    if jsn.has('patternParameterDefinition') {a4} then
      value.pattern := ParseParameterDefinition(jsn.vObj['patternParameterDefinition']);
    if jsn.has('patternRelatedArtifact') {a4} then
      value.pattern := ParseRelatedArtifact(jsn.vObj['patternRelatedArtifact']);
    if jsn.has('patternTriggerDefinition') {a4} then
      value.pattern := ParseTriggerDefinition(jsn.vObj['patternTriggerDefinition']);
    if jsn.has('patternUsageContext') {a4} then
      value.pattern := ParseUsageContext(jsn.vObj['patternUsageContext']);
    if jsn.has('patternDosage') {a4} then
      value.pattern := ParseDosage(jsn.vObj['patternDosage']);
    if jsn.has('patternMeta') {a4} then
      value.pattern := ParseMeta(jsn.vObj['patternMeta']);
    if jsn.has('patternBase64Binary') or jsn.has('_patternBase64Binary') then
      value.pattern := parseBase64Binary(jsn.node['patternBase64Binary'], jsn.vObj['_patternBase64Binary']);
    if jsn.has('patternBoolean') or jsn.has('_patternBoolean') then
      value.pattern := parseBoolean(jsn.node['patternBoolean'], jsn.vObj['_patternBoolean']);
    if jsn.has('patternDate') or jsn.has('_patternDate') then
      value.pattern := parseDate(jsn.node['patternDate'], jsn.vObj['_patternDate']);
    if jsn.has('patternDateTime') or jsn.has('_patternDateTime') then
      value.pattern := parseDateTime(jsn.node['patternDateTime'], jsn.vObj['_patternDateTime']);
    if jsn.has('patternDecimal') or jsn.has('_patternDecimal') then
      value.pattern := parseDecimal(jsn.node['patternDecimal'], jsn.vObj['_patternDecimal']);
    if jsn.has('patternInstant') or jsn.has('_patternInstant') then
      value.pattern := parseInstant(jsn.node['patternInstant'], jsn.vObj['_patternInstant']);
    if jsn.has('patternInteger') or jsn.has('_patternInteger') then
      value.pattern := parseInteger(jsn.node['patternInteger'], jsn.vObj['_patternInteger']);
    if jsn.has('patternString') or jsn.has('_patternString') then
      value.pattern := parseString(jsn.node['patternString'], jsn.vObj['_patternString']);
    if jsn.has('patternTime') or jsn.has('_patternTime') then
      value.pattern := parseTime(jsn.node['patternTime'], jsn.vObj['_patternTime']);
    if jsn.has('patternUri') or jsn.has('_patternUri') then
      value.pattern := parseUri(jsn.node['patternUri'], jsn.vObj['_patternUri']);
    if jsn.has('example') then
      iterateArray(jsn.vArr['example'], value.exampleList, parseElementDefinitionExample);
    if jsn.has('minValuePositiveInt') or jsn.has('_minValuePositiveInt') then
      value.minValue := parsePositiveInt(jsn.node['minValuePositiveInt'], jsn.vObj['_minValuePositiveInt']);
    if jsn.has('minValueUnsignedInt') or jsn.has('_minValueUnsignedInt') then
      value.minValue := parseUnsignedInt(jsn.node['minValueUnsignedInt'], jsn.vObj['_minValueUnsignedInt']);
    if jsn.has('minValueQuantity') {a4} then
      value.minValue := ParseQuantity(jsn.vObj['minValueQuantity']);
    if jsn.has('minValueDate') or jsn.has('_minValueDate') then
      value.minValue := parseDate(jsn.node['minValueDate'], jsn.vObj['_minValueDate']);
    if jsn.has('minValueDateTime') or jsn.has('_minValueDateTime') then
      value.minValue := parseDateTime(jsn.node['minValueDateTime'], jsn.vObj['_minValueDateTime']);
    if jsn.has('minValueInstant') or jsn.has('_minValueInstant') then
      value.minValue := parseInstant(jsn.node['minValueInstant'], jsn.vObj['_minValueInstant']);
    if jsn.has('minValueTime') or jsn.has('_minValueTime') then
      value.minValue := parseTime(jsn.node['minValueTime'], jsn.vObj['_minValueTime']);
    if jsn.has('minValueDecimal') or jsn.has('_minValueDecimal') then
      value.minValue := parseDecimal(jsn.node['minValueDecimal'], jsn.vObj['_minValueDecimal']);
    if jsn.has('minValueInteger') or jsn.has('_minValueInteger') then
      value.minValue := parseInteger(jsn.node['minValueInteger'], jsn.vObj['_minValueInteger']);
    if jsn.has('maxValuePositiveInt') or jsn.has('_maxValuePositiveInt') then
      value.maxValue := parsePositiveInt(jsn.node['maxValuePositiveInt'], jsn.vObj['_maxValuePositiveInt']);
    if jsn.has('maxValueUnsignedInt') or jsn.has('_maxValueUnsignedInt') then
      value.maxValue := parseUnsignedInt(jsn.node['maxValueUnsignedInt'], jsn.vObj['_maxValueUnsignedInt']);
    if jsn.has('maxValueQuantity') {a4} then
      value.maxValue := ParseQuantity(jsn.vObj['maxValueQuantity']);
    if jsn.has('maxValueDate') or jsn.has('_maxValueDate') then
      value.maxValue := parseDate(jsn.node['maxValueDate'], jsn.vObj['_maxValueDate']);
    if jsn.has('maxValueDateTime') or jsn.has('_maxValueDateTime') then
      value.maxValue := parseDateTime(jsn.node['maxValueDateTime'], jsn.vObj['_maxValueDateTime']);
    if jsn.has('maxValueInstant') or jsn.has('_maxValueInstant') then
      value.maxValue := parseInstant(jsn.node['maxValueInstant'], jsn.vObj['_maxValueInstant']);
    if jsn.has('maxValueTime') or jsn.has('_maxValueTime') then
      value.maxValue := parseTime(jsn.node['maxValueTime'], jsn.vObj['_maxValueTime']);
    if jsn.has('maxValueDecimal') or jsn.has('_maxValueDecimal') then
      value.maxValue := parseDecimal(jsn.node['maxValueDecimal'], jsn.vObj['_maxValueDecimal']);
    if jsn.has('maxValueInteger') or jsn.has('_maxValueInteger') then
      value.maxValue := parseInteger(jsn.node['maxValueInteger'], jsn.vObj['_maxValueInteger']);
    if jsn.has('maxLength') or jsn.has('_maxLength') then
        value.maxLengthElement := parseInteger(jsn.node['maxLength'], jsn.vObj['_maxLength']);
      if jsn.has('condition') or jsn.has('_condition') then
      iteratePrimitiveArray(jsn.vArr['condition'], jsn.vArr['_condition'], value.conditionList, parseId);
    if jsn.has('constraint') then
      iterateArray(jsn.vArr['constraint'], value.constraintList, parseElementDefinitionConstraint);
    if jsn.has('mustSupport') or jsn.has('_mustSupport') then
        value.mustSupportElement := parseBoolean(jsn.node['mustSupport'], jsn.vObj['_mustSupport']);
    if jsn.has('isModifier') or jsn.has('_isModifier') then
        value.isModifierElement := parseBoolean(jsn.node['isModifier'], jsn.vObj['_isModifier']);
    if jsn.has('isModifierReason') or jsn.has('_isModifierReason') then
        value.isModifierReasonElement := parseString(jsn.node['isModifierReason'], jsn.vObj['_isModifierReason']);
    if jsn.has('isSummary') or jsn.has('_isSummary') then
        value.isSummaryElement := parseBoolean(jsn.node['isSummary'], jsn.vObj['_isSummary']);
    if jsn.has('binding') then
        value.binding := ParseElementDefinitionBinding(jsn.vObj['binding']);
    if jsn.has('mapping') then
      iterateArray(jsn.vArr['mapping'], value.mappingList, parseElementDefinitionMapping);
end;

procedure TFHIRJsonComposer.ComposeElementDefinition(json : TJSONWriter; name : string; value : TFhirElementDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneTypeProperties(json, value);
  ComposeStringValue(json, 'path', value.pathElement, false);
  ComposeStringProps(json, 'path', value.pathElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.representationList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.representationList.Count - 1 do
    begin
      val := val or (value.representationList[i].hasPrimitiveValue);
      ext := ext or ((value.representationList[i].id <> '') or (value.representationList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'representation', value.representationList, true);
      for i := 0 to value.representationList.Count - 1 do
        ComposeEnumValue(json, '', value.representationList[i], CODES_TFhirPropertyRepresentationEnum, true);
      finishArray(json, value.representationList);
    end;
    if ext then
    begin
      startArray(json, '_representation', value.representationList, false);
      for i := 0 to value.representationList.Count - 1 do
        ComposeEnumProps(json, '', value.representationList[i], CODES_TFhirPropertyRepresentationEnum, true);
      finishArray(json, value.representationList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'sliceName', value.sliceNameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'sliceName', value.sliceNameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'sliceIsConstraining', value.sliceIsConstrainingElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'sliceIsConstraining', value.sliceIsConstrainingElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'label', value.label_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'label', value.label_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCoding(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeElementDefinitionSlicing(json, 'slicing', value.slicing);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'short', value.shortElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'short', value.shortElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'definition', value.definitionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'definition', value.definitionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'requirements', value.requirementsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'requirements', value.requirementsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.aliasList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.aliasList.Count - 1 do
    begin
      ext := ext or ((value.aliasList[i].id <> '') or (value.aliasList[i].hasExtensionList) {no-comments or (value.aliasList[i].hasComments)});
      val := val or (value.aliasList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'alias', value.aliasList, true);
      for i := 0 to value.aliasList.Count - 1 do
        ComposeStringValue(json, '', value.aliasList[i], true);
      finishArray(json, value.aliasList);
    end;
    if ext then
    begin
      startArray(json, '_alias', value.aliasList, false);
      for i := 0 to value.aliasList.Count - 1 do
        ComposeStringProps(json, '', value.aliasList[i], true);
      finishArray(json, value.aliasList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'min', value.minElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'min', value.minElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'max', value.maxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'max', value.maxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeElementDefinitionBase(json, 'base', value.base);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'contentReference', value.contentReferenceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'contentReference', value.contentReferenceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeElementDefinitionType(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'defaultValueCanonical', TFhirCanonical(value.defaultValue), false);
    ComposeCanonicalProps(json, 'defaultValueCanonical', TFhirCanonical(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'defaultValueCode', TFhirCode(value.defaultValue), false);
    ComposeCodeProps(json, 'defaultValueCode', TFhirCode(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirId) then 
  begin
    ComposeIdValue(json, 'defaultValueId', TFhirId(value.defaultValue), false);
    ComposeIdProps(json, 'defaultValueId', TFhirId(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'defaultValueMarkdown', TFhirMarkdown(value.defaultValue), false);
    ComposeMarkdownProps(json, 'defaultValueMarkdown', TFhirMarkdown(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirOid) then 
  begin
    ComposeOidValue(json, 'defaultValueOid', TFhirOid(value.defaultValue), false);
    ComposeOidProps(json, 'defaultValueOid', TFhirOid(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'defaultValuePositiveInt', TFhirPositiveInt(value.defaultValue), false);
    ComposePositiveIntProps(json, 'defaultValuePositiveInt', TFhirPositiveInt(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'defaultValueUnsignedInt', TFhirUnsignedInt(value.defaultValue), false);
    ComposeUnsignedIntProps(json, 'defaultValueUnsignedInt', TFhirUnsignedInt(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUrl) then 
  begin
    ComposeUrlValue(json, 'defaultValueUrl', TFhirUrl(value.defaultValue), false);
    ComposeUrlProps(json, 'defaultValueUrl', TFhirUrl(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUuid) then 
  begin
    ComposeUuidValue(json, 'defaultValueUuid', TFhirUuid(value.defaultValue), false);
    ComposeUuidProps(json, 'defaultValueUuid', TFhirUuid(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAddress) then 
    ComposeAddress(json, 'defaultValueAddress', TFhirAddress(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAge) then 
    ComposeAge(json, 'defaultValueAge', TFhirAge(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAnnotation) then 
    ComposeAnnotation(json, 'defaultValueAnnotation', TFhirAnnotation(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAttachment) then 
    ComposeAttachment(json, 'defaultValueAttachment', TFhirAttachment(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'defaultValueCodeableConcept', TFhirCodeableConcept(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCodeableReference) then 
    ComposeCodeableReference(json, 'defaultValueCodeableReference', TFhirCodeableReference(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCoding) then 
    ComposeCoding(json, 'defaultValueCoding', TFhirCoding(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirContactPoint) then 
    ComposeContactPoint(json, 'defaultValueContactPoint', TFhirContactPoint(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCount) then 
    ComposeCount(json, 'defaultValueCount', TFhirCount(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDistance) then 
    ComposeDistance(json, 'defaultValueDistance', TFhirDistance(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDuration) then 
    ComposeDuration(json, 'defaultValueDuration', TFhirDuration(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirHumanName) then 
    ComposeHumanName(json, 'defaultValueHumanName', TFhirHumanName(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirIdentifier) then 
    ComposeIdentifier(json, 'defaultValueIdentifier', TFhirIdentifier(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirMoney) then 
    ComposeMoney(json, 'defaultValueMoney', TFhirMoney(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirPeriod) then 
    ComposePeriod(json, 'defaultValuePeriod', TFhirPeriod(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirQuantity) then 
    ComposeQuantity(json, 'defaultValueQuantity', TFhirQuantity(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirRange) then 
    ComposeRange(json, 'defaultValueRange', TFhirRange(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirRatio) then 
    ComposeRatio(json, 'defaultValueRatio', TFhirRatio(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirRatioRange) then 
    ComposeRatioRange(json, 'defaultValueRatioRange', TFhirRatioRange(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirReference) then 
    ComposeReference(json, 'defaultValueReference', TFhirReference(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirSampledData) then 
    ComposeSampledData(json, 'defaultValueSampledData', TFhirSampledData(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirSignature) then 
    ComposeSignature(json, 'defaultValueSignature', TFhirSignature(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirTiming) then 
    ComposeTiming(json, 'defaultValueTiming', TFhirTiming(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirContactDetail) then 
    ComposeContactDetail(json, 'defaultValueContactDetail', TFhirContactDetail(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirContributor) then 
    ComposeContributor(json, 'defaultValueContributor', TFhirContributor(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'defaultValueDataRequirement', TFhirDataRequirement(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirExpression) then 
    ComposeExpression(json, 'defaultValueExpression', TFhirExpression(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'defaultValueParameterDefinition', TFhirParameterDefinition(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'defaultValueRelatedArtifact', TFhirRelatedArtifact(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'defaultValueTriggerDefinition', TFhirTriggerDefinition(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUsageContext) then 
    ComposeUsageContext(json, 'defaultValueUsageContext', TFhirUsageContext(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDosage) then 
    ComposeDosage(json, 'defaultValueDosage', TFhirDosage(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirMeta) then 
    ComposeMeta(json, 'defaultValueMeta', TFhirMeta(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'defaultValueBase64Binary', TFhirBase64Binary(value.defaultValue), false);
    ComposeBase64BinaryProps(json, 'defaultValueBase64Binary', TFhirBase64Binary(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'defaultValueBoolean', TFhirBoolean(value.defaultValue), false);
    ComposeBooleanProps(json, 'defaultValueBoolean', TFhirBoolean(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDate) then 
  begin
    ComposeDateValue(json, 'defaultValueDate', TFhirDate(value.defaultValue), false);
    ComposeDateProps(json, 'defaultValueDate', TFhirDate(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'defaultValueDateTime', TFhirDateTime(value.defaultValue), false);
    ComposeDateTimeProps(json, 'defaultValueDateTime', TFhirDateTime(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'defaultValueDecimal', TFhirDecimal(value.defaultValue), false);
    ComposeDecimalProps(json, 'defaultValueDecimal', TFhirDecimal(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'defaultValueInstant', TFhirInstant(value.defaultValue), false);
    ComposeInstantProps(json, 'defaultValueInstant', TFhirInstant(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'defaultValueInteger', TFhirInteger(value.defaultValue), false);
    ComposeIntegerProps(json, 'defaultValueInteger', TFhirInteger(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirString) then 
  begin
    ComposeStringValue(json, 'defaultValueString', TFhirString(value.defaultValue), false);
    ComposeStringProps(json, 'defaultValueString', TFhirString(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'defaultValueTime', TFhirTime(value.defaultValue), false);
    ComposeTimeProps(json, 'defaultValueTime', TFhirTime(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUri) then 
  begin
    ComposeUriValue(json, 'defaultValueUri', TFhirUri(value.defaultValue), false);
    ComposeUriProps(json, 'defaultValueUri', TFhirUri(value.defaultValue), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'meaningWhenMissing', value.meaningWhenMissingElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'meaningWhenMissing', value.meaningWhenMissingElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'orderMeaning', value.orderMeaningElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'orderMeaning', value.orderMeaningElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'fixedCanonical', TFhirCanonical(value.fixed), false);
    ComposeCanonicalProps(json, 'fixedCanonical', TFhirCanonical(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'fixedCode', TFhirCode(value.fixed), false);
    ComposeCodeProps(json, 'fixedCode', TFhirCode(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirId) then 
  begin
    ComposeIdValue(json, 'fixedId', TFhirId(value.fixed), false);
    ComposeIdProps(json, 'fixedId', TFhirId(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'fixedMarkdown', TFhirMarkdown(value.fixed), false);
    ComposeMarkdownProps(json, 'fixedMarkdown', TFhirMarkdown(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirOid) then 
  begin
    ComposeOidValue(json, 'fixedOid', TFhirOid(value.fixed), false);
    ComposeOidProps(json, 'fixedOid', TFhirOid(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'fixedPositiveInt', TFhirPositiveInt(value.fixed), false);
    ComposePositiveIntProps(json, 'fixedPositiveInt', TFhirPositiveInt(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'fixedUnsignedInt', TFhirUnsignedInt(value.fixed), false);
    ComposeUnsignedIntProps(json, 'fixedUnsignedInt', TFhirUnsignedInt(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirUrl) then 
  begin
    ComposeUrlValue(json, 'fixedUrl', TFhirUrl(value.fixed), false);
    ComposeUrlProps(json, 'fixedUrl', TFhirUrl(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirUuid) then 
  begin
    ComposeUuidValue(json, 'fixedUuid', TFhirUuid(value.fixed), false);
    ComposeUuidProps(json, 'fixedUuid', TFhirUuid(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirAddress) then 
    ComposeAddress(json, 'fixedAddress', TFhirAddress(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirAge) then 
    ComposeAge(json, 'fixedAge', TFhirAge(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirAnnotation) then 
    ComposeAnnotation(json, 'fixedAnnotation', TFhirAnnotation(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirAttachment) then 
    ComposeAttachment(json, 'fixedAttachment', TFhirAttachment(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'fixedCodeableConcept', TFhirCodeableConcept(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirCodeableReference) then 
    ComposeCodeableReference(json, 'fixedCodeableReference', TFhirCodeableReference(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirCoding) then 
    ComposeCoding(json, 'fixedCoding', TFhirCoding(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirContactPoint) then 
    ComposeContactPoint(json, 'fixedContactPoint', TFhirContactPoint(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirCount) then 
    ComposeCount(json, 'fixedCount', TFhirCount(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirDistance) then 
    ComposeDistance(json, 'fixedDistance', TFhirDistance(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirDuration) then 
    ComposeDuration(json, 'fixedDuration', TFhirDuration(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirHumanName) then 
    ComposeHumanName(json, 'fixedHumanName', TFhirHumanName(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirIdentifier) then 
    ComposeIdentifier(json, 'fixedIdentifier', TFhirIdentifier(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirMoney) then 
    ComposeMoney(json, 'fixedMoney', TFhirMoney(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirPeriod) then 
    ComposePeriod(json, 'fixedPeriod', TFhirPeriod(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirQuantity) then 
    ComposeQuantity(json, 'fixedQuantity', TFhirQuantity(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirRange) then 
    ComposeRange(json, 'fixedRange', TFhirRange(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirRatio) then 
    ComposeRatio(json, 'fixedRatio', TFhirRatio(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirRatioRange) then 
    ComposeRatioRange(json, 'fixedRatioRange', TFhirRatioRange(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirReference) then 
    ComposeReference(json, 'fixedReference', TFhirReference(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirSampledData) then 
    ComposeSampledData(json, 'fixedSampledData', TFhirSampledData(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirSignature) then 
    ComposeSignature(json, 'fixedSignature', TFhirSignature(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirTiming) then 
    ComposeTiming(json, 'fixedTiming', TFhirTiming(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirContactDetail) then 
    ComposeContactDetail(json, 'fixedContactDetail', TFhirContactDetail(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirContributor) then 
    ComposeContributor(json, 'fixedContributor', TFhirContributor(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'fixedDataRequirement', TFhirDataRequirement(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirExpression) then 
    ComposeExpression(json, 'fixedExpression', TFhirExpression(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'fixedParameterDefinition', TFhirParameterDefinition(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'fixedRelatedArtifact', TFhirRelatedArtifact(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'fixedTriggerDefinition', TFhirTriggerDefinition(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirUsageContext) then 
    ComposeUsageContext(json, 'fixedUsageContext', TFhirUsageContext(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirDosage) then 
    ComposeDosage(json, 'fixedDosage', TFhirDosage(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirMeta) then 
    ComposeMeta(json, 'fixedMeta', TFhirMeta(value.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'fixedBase64Binary', TFhirBase64Binary(value.fixed), false);
    ComposeBase64BinaryProps(json, 'fixedBase64Binary', TFhirBase64Binary(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'fixedBoolean', TFhirBoolean(value.fixed), false);
    ComposeBooleanProps(json, 'fixedBoolean', TFhirBoolean(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirDate) then 
  begin
    ComposeDateValue(json, 'fixedDate', TFhirDate(value.fixed), false);
    ComposeDateProps(json, 'fixedDate', TFhirDate(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'fixedDateTime', TFhirDateTime(value.fixed), false);
    ComposeDateTimeProps(json, 'fixedDateTime', TFhirDateTime(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'fixedDecimal', TFhirDecimal(value.fixed), false);
    ComposeDecimalProps(json, 'fixedDecimal', TFhirDecimal(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'fixedInstant', TFhirInstant(value.fixed), false);
    ComposeInstantProps(json, 'fixedInstant', TFhirInstant(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'fixedInteger', TFhirInteger(value.fixed), false);
    ComposeIntegerProps(json, 'fixedInteger', TFhirInteger(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirString) then 
  begin
    ComposeStringValue(json, 'fixedString', TFhirString(value.fixed), false);
    ComposeStringProps(json, 'fixedString', TFhirString(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'fixedTime', TFhirTime(value.fixed), false);
    ComposeTimeProps(json, 'fixedTime', TFhirTime(value.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirUri) then 
  begin
    ComposeUriValue(json, 'fixedUri', TFhirUri(value.fixed), false);
    ComposeUriProps(json, 'fixedUri', TFhirUri(value.fixed), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'patternCanonical', TFhirCanonical(value.pattern), false);
    ComposeCanonicalProps(json, 'patternCanonical', TFhirCanonical(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'patternCode', TFhirCode(value.pattern), false);
    ComposeCodeProps(json, 'patternCode', TFhirCode(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirId) then 
  begin
    ComposeIdValue(json, 'patternId', TFhirId(value.pattern), false);
    ComposeIdProps(json, 'patternId', TFhirId(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'patternMarkdown', TFhirMarkdown(value.pattern), false);
    ComposeMarkdownProps(json, 'patternMarkdown', TFhirMarkdown(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirOid) then 
  begin
    ComposeOidValue(json, 'patternOid', TFhirOid(value.pattern), false);
    ComposeOidProps(json, 'patternOid', TFhirOid(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'patternPositiveInt', TFhirPositiveInt(value.pattern), false);
    ComposePositiveIntProps(json, 'patternPositiveInt', TFhirPositiveInt(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'patternUnsignedInt', TFhirUnsignedInt(value.pattern), false);
    ComposeUnsignedIntProps(json, 'patternUnsignedInt', TFhirUnsignedInt(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirUrl) then 
  begin
    ComposeUrlValue(json, 'patternUrl', TFhirUrl(value.pattern), false);
    ComposeUrlProps(json, 'patternUrl', TFhirUrl(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirUuid) then 
  begin
    ComposeUuidValue(json, 'patternUuid', TFhirUuid(value.pattern), false);
    ComposeUuidProps(json, 'patternUuid', TFhirUuid(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirAddress) then 
    ComposeAddress(json, 'patternAddress', TFhirAddress(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirAge) then 
    ComposeAge(json, 'patternAge', TFhirAge(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirAnnotation) then 
    ComposeAnnotation(json, 'patternAnnotation', TFhirAnnotation(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirAttachment) then 
    ComposeAttachment(json, 'patternAttachment', TFhirAttachment(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'patternCodeableConcept', TFhirCodeableConcept(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirCodeableReference) then 
    ComposeCodeableReference(json, 'patternCodeableReference', TFhirCodeableReference(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirCoding) then 
    ComposeCoding(json, 'patternCoding', TFhirCoding(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirContactPoint) then 
    ComposeContactPoint(json, 'patternContactPoint', TFhirContactPoint(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirCount) then 
    ComposeCount(json, 'patternCount', TFhirCount(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirDistance) then 
    ComposeDistance(json, 'patternDistance', TFhirDistance(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirDuration) then 
    ComposeDuration(json, 'patternDuration', TFhirDuration(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirHumanName) then 
    ComposeHumanName(json, 'patternHumanName', TFhirHumanName(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirIdentifier) then 
    ComposeIdentifier(json, 'patternIdentifier', TFhirIdentifier(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirMoney) then 
    ComposeMoney(json, 'patternMoney', TFhirMoney(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirPeriod) then 
    ComposePeriod(json, 'patternPeriod', TFhirPeriod(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirQuantity) then 
    ComposeQuantity(json, 'patternQuantity', TFhirQuantity(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirRange) then 
    ComposeRange(json, 'patternRange', TFhirRange(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirRatio) then 
    ComposeRatio(json, 'patternRatio', TFhirRatio(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirRatioRange) then 
    ComposeRatioRange(json, 'patternRatioRange', TFhirRatioRange(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirReference) then 
    ComposeReference(json, 'patternReference', TFhirReference(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirSampledData) then 
    ComposeSampledData(json, 'patternSampledData', TFhirSampledData(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirSignature) then 
    ComposeSignature(json, 'patternSignature', TFhirSignature(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirTiming) then 
    ComposeTiming(json, 'patternTiming', TFhirTiming(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirContactDetail) then 
    ComposeContactDetail(json, 'patternContactDetail', TFhirContactDetail(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirContributor) then 
    ComposeContributor(json, 'patternContributor', TFhirContributor(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'patternDataRequirement', TFhirDataRequirement(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirExpression) then 
    ComposeExpression(json, 'patternExpression', TFhirExpression(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'patternParameterDefinition', TFhirParameterDefinition(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'patternRelatedArtifact', TFhirRelatedArtifact(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'patternTriggerDefinition', TFhirTriggerDefinition(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirUsageContext) then 
    ComposeUsageContext(json, 'patternUsageContext', TFhirUsageContext(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirDosage) then 
    ComposeDosage(json, 'patternDosage', TFhirDosage(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirMeta) then 
    ComposeMeta(json, 'patternMeta', TFhirMeta(value.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'patternBase64Binary', TFhirBase64Binary(value.pattern), false);
    ComposeBase64BinaryProps(json, 'patternBase64Binary', TFhirBase64Binary(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'patternBoolean', TFhirBoolean(value.pattern), false);
    ComposeBooleanProps(json, 'patternBoolean', TFhirBoolean(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirDate) then 
  begin
    ComposeDateValue(json, 'patternDate', TFhirDate(value.pattern), false);
    ComposeDateProps(json, 'patternDate', TFhirDate(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'patternDateTime', TFhirDateTime(value.pattern), false);
    ComposeDateTimeProps(json, 'patternDateTime', TFhirDateTime(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'patternDecimal', TFhirDecimal(value.pattern), false);
    ComposeDecimalProps(json, 'patternDecimal', TFhirDecimal(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'patternInstant', TFhirInstant(value.pattern), false);
    ComposeInstantProps(json, 'patternInstant', TFhirInstant(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'patternInteger', TFhirInteger(value.pattern), false);
    ComposeIntegerProps(json, 'patternInteger', TFhirInteger(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirString) then 
  begin
    ComposeStringValue(json, 'patternString', TFhirString(value.pattern), false);
    ComposeStringProps(json, 'patternString', TFhirString(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'patternTime', TFhirTime(value.pattern), false);
    ComposeTimeProps(json, 'patternTime', TFhirTime(value.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirUri) then 
  begin
    ComposeUriValue(json, 'patternUri', TFhirUri(value.pattern), false);
    ComposeUriProps(json, 'patternUri', TFhirUri(value.pattern), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.exampleList.Count > 0) then
  begin
    startArray(json, 'example', value.exampleList, false);
    for i := 0 to value.exampleList.Count - 1 do
      ComposeElementDefinitionExample(json, '', value.exampleList[i]);
    finishArray(json, value.exampleList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'minValuePositiveInt', TFhirPositiveInt(value.minValue), false);
    ComposePositiveIntProps(json, 'minValuePositiveInt', TFhirPositiveInt(value.minValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'minValueUnsignedInt', TFhirUnsignedInt(value.minValue), false);
    ComposeUnsignedIntProps(json, 'minValueUnsignedInt', TFhirUnsignedInt(value.minValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirQuantity) then 
    ComposeQuantity(json, 'minValueQuantity', TFhirQuantity(value.minValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirDate) then 
  begin
    ComposeDateValue(json, 'minValueDate', TFhirDate(value.minValue), false);
    ComposeDateProps(json, 'minValueDate', TFhirDate(value.minValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'minValueDateTime', TFhirDateTime(value.minValue), false);
    ComposeDateTimeProps(json, 'minValueDateTime', TFhirDateTime(value.minValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'minValueInstant', TFhirInstant(value.minValue), false);
    ComposeInstantProps(json, 'minValueInstant', TFhirInstant(value.minValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'minValueTime', TFhirTime(value.minValue), false);
    ComposeTimeProps(json, 'minValueTime', TFhirTime(value.minValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'minValueDecimal', TFhirDecimal(value.minValue), false);
    ComposeDecimalProps(json, 'minValueDecimal', TFhirDecimal(value.minValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'minValueInteger', TFhirInteger(value.minValue), false);
    ComposeIntegerProps(json, 'minValueInteger', TFhirInteger(value.minValue), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'maxValuePositiveInt', TFhirPositiveInt(value.maxValue), false);
    ComposePositiveIntProps(json, 'maxValuePositiveInt', TFhirPositiveInt(value.maxValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'maxValueUnsignedInt', TFhirUnsignedInt(value.maxValue), false);
    ComposeUnsignedIntProps(json, 'maxValueUnsignedInt', TFhirUnsignedInt(value.maxValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirQuantity) then 
    ComposeQuantity(json, 'maxValueQuantity', TFhirQuantity(value.maxValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirDate) then 
  begin
    ComposeDateValue(json, 'maxValueDate', TFhirDate(value.maxValue), false);
    ComposeDateProps(json, 'maxValueDate', TFhirDate(value.maxValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'maxValueDateTime', TFhirDateTime(value.maxValue), false);
    ComposeDateTimeProps(json, 'maxValueDateTime', TFhirDateTime(value.maxValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'maxValueInstant', TFhirInstant(value.maxValue), false);
    ComposeInstantProps(json, 'maxValueInstant', TFhirInstant(value.maxValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'maxValueTime', TFhirTime(value.maxValue), false);
    ComposeTimeProps(json, 'maxValueTime', TFhirTime(value.maxValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'maxValueDecimal', TFhirDecimal(value.maxValue), false);
    ComposeDecimalProps(json, 'maxValueDecimal', TFhirDecimal(value.maxValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'maxValueInteger', TFhirInteger(value.maxValue), false);
    ComposeIntegerProps(json, 'maxValueInteger', TFhirInteger(value.maxValue), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'maxLength', value.maxLengthElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'maxLength', value.maxLengthElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.conditionList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.conditionList.Count - 1 do
    begin
      ext := ext or ((value.conditionList[i].id <> '') or (value.conditionList[i].hasExtensionList) {no-comments or (value.conditionList[i].hasComments)});
      val := val or (value.conditionList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'condition', value.conditionList, true);
      for i := 0 to value.conditionList.Count - 1 do
        ComposeIdValue(json, '', value.conditionList[i], true);
      finishArray(json, value.conditionList);
    end;
    if ext then
    begin
      startArray(json, '_condition', value.conditionList, false);
      for i := 0 to value.conditionList.Count - 1 do
        ComposeIdProps(json, '', value.conditionList[i], true);
      finishArray(json, value.conditionList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.constraintList.Count > 0) then
  begin
    startArray(json, 'constraint', value.constraintList, false);
    for i := 0 to value.constraintList.Count - 1 do
      ComposeElementDefinitionConstraint(json, '', value.constraintList[i]);
    finishArray(json, value.constraintList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'mustSupport', value.mustSupportElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'mustSupport', value.mustSupportElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'isModifier', value.isModifierElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'isModifier', value.isModifierElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'isModifierReason', value.isModifierReasonElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'isModifierReason', value.isModifierReasonElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'isSummary', value.isSummaryElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'isSummary', value.isSummaryElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeElementDefinitionBinding(json, 'binding', value.binding);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.mappingList.Count > 0) then
  begin
    startArray(json, 'mapping', value.mappingList, false);
    for i := 0 to value.mappingList.Count - 1 do
      ComposeElementDefinitionMapping(json, '', value.mappingList[i]);
    finishArray(json, value.mappingList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExpression(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpression(jsn)); 
end;

function TFHIRJsonParser.ParseExpression(jsn : TJsonObject) : TFhirExpression;
begin
  result := TFhirExpression.Create;
  try
    ParseExpressionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpressionProperties(jsn : TJsonObject; value : TFhirExpression);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseId(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('language') or jsn.has('_language') then
        value.languageElement := parseCode(jsn.node['language'], jsn.vObj['_language']);
    if jsn.has('expression') or jsn.has('_expression') then
        value.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);
    if jsn.has('reference') or jsn.has('_reference') then
        value.referenceElement := parseUri(jsn.node['reference'], jsn.vObj['_reference']);
end;

procedure TFHIRJsonComposer.ComposeExpression(json : TJSONWriter; name : string; value : TFhirExpression; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'name', value.nameElement, false);
  ComposeCodeValue(json, 'language', value.languageElement, false);
  ComposeCodeProps(json, 'language', value.languageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'expression', value.expressionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'expression', value.expressionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'reference', value.referenceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'reference', value.referenceElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExtension(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExtension(jsn)); 
end;

function TFHIRJsonParser.ParseExtension(jsn : TJsonObject) : TFhirExtension;
begin
  result := TFhirExtension.Create;
  try
    ParseExtensionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExtensionProperties(jsn : TJsonObject; value : TFhirExtension);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('valueCanonical') or jsn.has('_valueCanonical') then
      value.value := parseCanonical(jsn.node['valueCanonical'], jsn.vObj['_valueCanonical']);
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      value.value := parseCode(jsn.node['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      value.value := parseId(jsn.node['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      value.value := parseMarkdown(jsn.node['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      value.value := parseOid(jsn.node['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      value.value := parsePositiveInt(jsn.node['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      value.value := parseUnsignedInt(jsn.node['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueUrl') or jsn.has('_valueUrl') then
      value.value := parseUrl(jsn.node['valueUrl'], jsn.vObj['_valueUrl']);
    if jsn.has('valueUuid') or jsn.has('_valueUuid') then
      value.value := parseUuid(jsn.node['valueUuid'], jsn.vObj['_valueUuid']);
    if jsn.has('valueAddress') {a4} then
      value.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      value.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      value.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCodeableReference') {a4} then
      value.value := ParseCodeableReference(jsn.vObj['valueCodeableReference']);
    if jsn.has('valueCoding') {a4} then
      value.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      value.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      value.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      value.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      value.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      value.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      value.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      value.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      value.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      value.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      value.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueRatioRange') {a4} then
      value.value := ParseRatioRange(jsn.vObj['valueRatioRange']);
    if jsn.has('valueReference') {a4} then
      value.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      value.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      value.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      value.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueContactDetail') {a4} then
      value.value := ParseContactDetail(jsn.vObj['valueContactDetail']);
    if jsn.has('valueContributor') {a4} then
      value.value := ParseContributor(jsn.vObj['valueContributor']);
    if jsn.has('valueDataRequirement') {a4} then
      value.value := ParseDataRequirement(jsn.vObj['valueDataRequirement']);
    if jsn.has('valueExpression') {a4} then
      value.value := ParseExpression(jsn.vObj['valueExpression']);
    if jsn.has('valueParameterDefinition') {a4} then
      value.value := ParseParameterDefinition(jsn.vObj['valueParameterDefinition']);
    if jsn.has('valueRelatedArtifact') {a4} then
      value.value := ParseRelatedArtifact(jsn.vObj['valueRelatedArtifact']);
    if jsn.has('valueTriggerDefinition') {a4} then
      value.value := ParseTriggerDefinition(jsn.vObj['valueTriggerDefinition']);
    if jsn.has('valueUsageContext') {a4} then
      value.value := ParseUsageContext(jsn.vObj['valueUsageContext']);
    if jsn.has('valueDosage') {a4} then
      value.value := ParseDosage(jsn.vObj['valueDosage']);
    if jsn.has('valueMeta') {a4} then
      value.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      value.value := parseBase64Binary(jsn.node['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      value.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      value.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      value.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      value.value := parseInstant(jsn.node['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      value.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      value.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      value.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeExtension(json : TJSONWriter; name : string; value : TFhirExtension; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeUriValue(json, 'url', value.urlElement, false);
  ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'valueCanonical', TFhirCanonical(value.value), false);
    ComposeCanonicalProps(json, 'valueCanonical', TFhirCanonical(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(value.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(value.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(value.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(value.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(value.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(value.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirUrl) then 
  begin
    ComposeUrlValue(json, 'valueUrl', TFhirUrl(value.value), false);
    ComposeUrlProps(json, 'valueUrl', TFhirUrl(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirUuid) then 
  begin
    ComposeUuidValue(json, 'valueUuid', TFhirUuid(value.value), false);
    ComposeUuidProps(json, 'valueUuid', TFhirUuid(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirCodeableReference) then 
    ComposeCodeableReference(json, 'valueCodeableReference', TFhirCodeableReference(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirRatioRange) then 
    ComposeRatioRange(json, 'valueRatioRange', TFhirRatioRange(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirContactDetail) then 
    ComposeContactDetail(json, 'valueContactDetail', TFhirContactDetail(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirContributor) then 
    ComposeContributor(json, 'valueContributor', TFhirContributor(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'valueDataRequirement', TFhirDataRequirement(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirExpression) then 
    ComposeExpression(json, 'valueExpression', TFhirExpression(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'valueParameterDefinition', TFhirParameterDefinition(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'valueRelatedArtifact', TFhirRelatedArtifact(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'valueTriggerDefinition', TFhirTriggerDefinition(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirUsageContext) then 
    ComposeUsageContext(json, 'valueUsageContext', TFhirUsageContext(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDosage) then 
    ComposeDosage(json, 'valueDosage', TFhirDosage(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(value.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(value.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(value.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(value.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(value.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(value.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(value.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseHumanName(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseHumanName(jsn)); 
end;

function TFHIRJsonParser.ParseHumanName(jsn : TJsonObject) : TFhirHumanName;
begin
  result := TFhirHumanName.Create;
  try
    ParseHumanNameProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseHumanNameProperties(jsn : TJsonObject; value : TFhirHumanName);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('use') or jsn.has('_use') then
        value.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirNameUseEnum, SYSTEMS_TFhirNameUseEnum);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
    if jsn.has('family') or jsn.has('_family') then
        value.familyElement := parseString(jsn.node['family'], jsn.vObj['_family']);
      if jsn.has('given') or jsn.has('_given') then
      iteratePrimitiveArray(jsn.vArr['given'], jsn.vArr['_given'], value.givenList, parseString);
      if jsn.has('prefix') or jsn.has('_prefix') then
      iteratePrimitiveArray(jsn.vArr['prefix'], jsn.vArr['_prefix'], value.prefixList, parseString);
      if jsn.has('suffix') or jsn.has('_suffix') then
      iteratePrimitiveArray(jsn.vArr['suffix'], jsn.vArr['_suffix'], value.suffixList, parseString);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeHumanName(json : TJSONWriter; name : string; value : TFhirHumanName; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'use', value.useElement, CODES_TFhirNameUseEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'family', value.familyElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'family', value.familyElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.givenList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.givenList.Count - 1 do
    begin
      ext := ext or ((value.givenList[i].id <> '') or (value.givenList[i].hasExtensionList) {no-comments or (value.givenList[i].hasComments)});
      val := val or (value.givenList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'given', value.givenList, true);
      for i := 0 to value.givenList.Count - 1 do
        ComposeStringValue(json, '', value.givenList[i], true);
      finishArray(json, value.givenList);
    end;
    if ext then
    begin
      startArray(json, '_given', value.givenList, false);
      for i := 0 to value.givenList.Count - 1 do
        ComposeStringProps(json, '', value.givenList[i], true);
      finishArray(json, value.givenList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.prefixList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.prefixList.Count - 1 do
    begin
      ext := ext or ((value.prefixList[i].id <> '') or (value.prefixList[i].hasExtensionList) {no-comments or (value.prefixList[i].hasComments)});
      val := val or (value.prefixList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'prefix', value.prefixList, true);
      for i := 0 to value.prefixList.Count - 1 do
        ComposeStringValue(json, '', value.prefixList[i], true);
      finishArray(json, value.prefixList);
    end;
    if ext then
    begin
      startArray(json, '_prefix', value.prefixList, false);
      for i := 0 to value.prefixList.Count - 1 do
        ComposeStringProps(json, '', value.prefixList[i], true);
      finishArray(json, value.prefixList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.suffixList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.suffixList.Count - 1 do
    begin
      ext := ext or ((value.suffixList[i].id <> '') or (value.suffixList[i].hasExtensionList) {no-comments or (value.suffixList[i].hasComments)});
      val := val or (value.suffixList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'suffix', value.suffixList, true);
      for i := 0 to value.suffixList.Count - 1 do
        ComposeStringValue(json, '', value.suffixList[i], true);
      finishArray(json, value.suffixList);
    end;
    if ext then
    begin
      startArray(json, '_suffix', value.suffixList, false);
      for i := 0 to value.suffixList.Count - 1 do
        ComposeStringProps(json, '', value.suffixList[i], true);
      finishArray(json, value.suffixList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseIdentifier(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseIdentifier(jsn)); 
end;

function TFHIRJsonParser.ParseIdentifier(jsn : TJsonObject) : TFhirIdentifier;
begin
  result := TFhirIdentifier.Create;
  try
    ParseIdentifierProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseIdentifierProperties(jsn : TJsonObject; value : TFhirIdentifier);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('use') or jsn.has('_use') then
        value.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirIdentifierUseEnum, SYSTEMS_TFhirIdentifierUseEnum);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('system') or jsn.has('_system') then
        value.systemElement := parseUri(jsn.node['system'], jsn.vObj['_system']);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('assigner') then
        value.assigner := ParseReference(jsn.vObj['assigner']);
end;

procedure TFHIRJsonComposer.ComposeIdentifier(json : TJSONWriter; name : string; value : TFhirIdentifier; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'use', value.useElement, CODES_TFhirIdentifierUseEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'system', value.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'system', value.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'assigner', value.assigner);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMarketingStatus(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMarketingStatus(jsn)); 
end;

function TFHIRJsonParser.ParseMarketingStatus(jsn : TJsonObject) : TFhirMarketingStatus;
begin
  result := TFhirMarketingStatus.Create;
  try
    ParseMarketingStatusProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMarketingStatusProperties(jsn : TJsonObject; value : TFhirMarketingStatus);
begin
    ParseBackboneTypeProperties(jsn, value);
    if jsn.has('country') then
        value.country := ParseCodeableConcept(jsn.vObj['country']);
    if jsn.has('jurisdiction') then
        value.jurisdiction := ParseCodeableConcept(jsn.vObj['jurisdiction']);
    if jsn.has('status') then
        value.status := ParseCodeableConcept(jsn.vObj['status']);
    if jsn.has('dateRange') then
        value.dateRange := ParsePeriod(jsn.vObj['dateRange']);
    if jsn.has('restoreDate') or jsn.has('_restoreDate') then
        value.restoreDateElement := parseDateTime(jsn.node['restoreDate'], jsn.vObj['_restoreDate']);
end;

procedure TFHIRJsonComposer.ComposeMarketingStatus(json : TJSONWriter; name : string; value : TFhirMarketingStatus; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneTypeProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'country', value.country);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'jurisdiction', value.jurisdiction);
  ComposeCodeableConcept(json, 'status', value.status);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'dateRange', value.dateRange);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'restoreDate', value.restoreDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'restoreDate', value.restoreDateElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMeta(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeta(jsn)); 
end;

function TFHIRJsonParser.ParseMeta(jsn : TJsonObject) : TFhirMeta;
begin
  result := TFhirMeta.Create;
  try
    ParseMetaProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMetaProperties(jsn : TJsonObject; value : TFhirMeta);
begin
    ParseDataTypeProperties(jsn, value);
    if jsn.has('versionId') or jsn.has('_versionId') then
        value.versionIdElement := parseId(jsn.node['versionId'], jsn.vObj['_versionId']);
    if jsn.has('lastUpdated') or jsn.has('_lastUpdated') then
        value.lastUpdatedElement := parseInstant(jsn.node['lastUpdated'], jsn.vObj['_lastUpdated']);
    if jsn.has('source') or jsn.has('_source') then
        value.sourceElement := parseUri(jsn.node['source'], jsn.vObj['_source']);
      if jsn.has('profile') or jsn.has('_profile') then
      iteratePrimitiveArray(jsn.vArr['profile'], jsn.vArr['_profile'], value.profileList, parseCanonical);
    if jsn.has('security') then
      iterateArray(jsn.vArr['security'], value.securityList, parseCoding);
    if jsn.has('tag') then
      iterateArray(jsn.vArr['tag'], value.tagList, parseCoding);
end;

procedure TFHIRJsonComposer.ComposeMeta(json : TJSONWriter; name : string; value : TFhirMeta; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeDataTypeProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'versionId', value.versionIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'versionId', value.versionIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'lastUpdated', value.lastUpdatedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'lastUpdated', value.lastUpdatedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'source', value.sourceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'source', value.sourceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.profileList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.profileList.Count - 1 do
    begin
      ext := ext or ((value.profileList[i].id <> '') or (value.profileList[i].hasExtensionList) {no-comments or (value.profileList[i].hasComments)});
      val := val or (value.profileList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'profile', value.profileList, true);
      for i := 0 to value.profileList.Count - 1 do
        ComposeCanonicalValue(json, '', value.profileList[i], true);
      finishArray(json, value.profileList);
    end;
    if ext then
    begin
      startArray(json, '_profile', value.profileList, false);
      for i := 0 to value.profileList.Count - 1 do
        ComposeCanonicalProps(json, '', value.profileList[i], true);
      finishArray(json, value.profileList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.securityList.Count > 0) then
  begin
    startArray(json, 'security', value.securityList, false);
    for i := 0 to value.securityList.Count - 1 do
      ComposeCoding(json, '', value.securityList[i]);
    finishArray(json, value.securityList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.tagList.Count > 0) or (hasSubsettedTag(value.tagList)) then
  begin
    startArray(json, 'tag', value.tagList, false);
    for i := 0 to value.tagList.Count - 1 do
      if (SummaryOption in [soFull, soSummary, soText, soData]) or (isSubsettedTag(value.tagList[i])) then
      ComposeCoding(json, '', value.tagList[i]);
    finishArray(json, value.tagList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMoney(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMoney(jsn)); 
end;

function TFHIRJsonParser.ParseMoney(jsn : TJsonObject) : TFhirMoney;
begin
  result := TFhirMoney.Create;
  try
    ParseMoneyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMoneyProperties(jsn : TJsonObject; value : TFhirMoney);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseDecimal(jsn.node['value'], jsn.vObj['_value']);
    if jsn.has('currency') or jsn.has('_currency') then
        value.currencyElement := parseCode(jsn.node['currency'], jsn.vObj['_currency']);
end;

procedure TFHIRJsonComposer.ComposeMoney(json : TJSONWriter; name : string; value : TFhirMoney; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'currency', value.currencyElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'currency', value.currencyElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseNarrative(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNarrative(jsn)); 
end;

function TFHIRJsonParser.ParseNarrative(jsn : TJsonObject) : TFhirNarrative;
begin
  result := TFhirNarrative.Create;
  try
    ParseNarrativeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNarrativeProperties(jsn : TJsonObject; value : TFhirNarrative);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirNarrativeStatusEnum, SYSTEMS_TFhirNarrativeStatusEnum);
    if jsn.has('div') then
        value.div_ := parseXHtmlNode(jsn.path+'.div', jsn.node['div']);
end;

procedure TFHIRJsonComposer.ComposeNarrative(json : TJSONWriter; name : string; value : TFhirNarrative; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirNarrativeStatusEnum, false);
  ComposeXHtmlNode(json, 'div', value.div_);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseParameterDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseParameterDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseParameterDefinition(jsn : TJsonObject) : TFhirParameterDefinition;
begin
  result := TFhirParameterDefinition.Create;
  try
    ParseParameterDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseParameterDefinitionProperties(jsn : TJsonObject; value : TFhirParameterDefinition);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseCode(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('use') or jsn.has('_use') then
        value.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirOperationParameterUseEnum, SYSTEMS_TFhirOperationParameterUseEnum);
    if jsn.has('min') or jsn.has('_min') then
        value.minElement := parseInteger(jsn.node['min'], jsn.vObj['_min']);
    if jsn.has('max') or jsn.has('_max') then
        value.maxElement := parseString(jsn.node['max'], jsn.vObj['_max']);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum);
    if jsn.has('profile') or jsn.has('_profile') then
        value.profileElement := parseCanonical(jsn.node['profile'], jsn.vObj['_profile']);
end;

procedure TFHIRJsonComposer.ComposeParameterDefinition(json : TJSONWriter; name : string; value : TFhirParameterDefinition; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'name', value.nameElement, false);
  ComposeEnumValue(json, 'use', value.useElement, CODES_TFhirOperationParameterUseEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'min', value.minElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'min', value.minElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'max', value.maxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'max', value.maxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'documentation', value.documentationElement, false);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirAllTypesEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'profile', value.profileElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'profile', value.profileElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePeriod(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePeriod(jsn)); 
end;

function TFHIRJsonParser.ParsePeriod(jsn : TJsonObject) : TFhirPeriod;
begin
  result := TFhirPeriod.Create;
  try
    ParsePeriodProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePeriodProperties(jsn : TJsonObject; value : TFhirPeriod);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('start') or jsn.has('_start') then
        value.startElement := parseDateTime(jsn.node['start'], jsn.vObj['_start']);
    if jsn.has('end') or jsn.has('_end') then
        value.end_Element := parseDateTime(jsn.node['end'], jsn.vObj['_end']);
end;

procedure TFHIRJsonComposer.ComposePeriod(json : TJSONWriter; name : string; value : TFhirPeriod; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'start', value.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'start', value.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'end', value.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'end', value.end_Element, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePopulation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePopulation(jsn)); 
end;

function TFHIRJsonParser.ParsePopulation(jsn : TJsonObject) : TFhirPopulation;
begin
  result := TFhirPopulation.Create;
  try
    ParsePopulationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePopulationProperties(jsn : TJsonObject; value : TFhirPopulation);
begin
    ParseBackboneTypeProperties(jsn, value);
    if jsn.has('ageRange') {a4} then
      value.age := ParseRange(jsn.vObj['ageRange']);
    if jsn.has('ageCodeableConcept') {a4} then
      value.age := ParseCodeableConcept(jsn.vObj['ageCodeableConcept']);
    if jsn.has('gender') then
        value.gender := ParseCodeableConcept(jsn.vObj['gender']);
    if jsn.has('race') then
        value.race := ParseCodeableConcept(jsn.vObj['race']);
    if jsn.has('physiologicalCondition') then
        value.physiologicalCondition := ParseCodeableConcept(jsn.vObj['physiologicalCondition']);
end;

procedure TFHIRJsonComposer.ComposePopulation(json : TJSONWriter; name : string; value : TFhirPopulation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneTypeProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.age is TFhirRange) then 
    ComposeRange(json, 'ageRange', TFhirRange(value.age)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.age is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'ageCodeableConcept', TFhirCodeableConcept(value.age)) ;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'gender', value.gender);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'race', value.race);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'physiologicalCondition', value.physiologicalCondition);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseProdCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProdCharacteristic(jsn)); 
end;

function TFHIRJsonParser.ParseProdCharacteristic(jsn : TJsonObject) : TFhirProdCharacteristic;
begin
  result := TFhirProdCharacteristic.Create;
  try
    ParseProdCharacteristicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProdCharacteristicProperties(jsn : TJsonObject; value : TFhirProdCharacteristic);
begin
    ParseBackboneTypeProperties(jsn, value);
    if jsn.has('height') then
        value.height := ParseQuantity(jsn.vObj['height']);
    if jsn.has('width') then
        value.width := ParseQuantity(jsn.vObj['width']);
    if jsn.has('depth') then
        value.depth := ParseQuantity(jsn.vObj['depth']);
    if jsn.has('weight') then
        value.weight := ParseQuantity(jsn.vObj['weight']);
    if jsn.has('nominalVolume') then
        value.nominalVolume := ParseQuantity(jsn.vObj['nominalVolume']);
    if jsn.has('externalDiameter') then
        value.externalDiameter := ParseQuantity(jsn.vObj['externalDiameter']);
    if jsn.has('shape') or jsn.has('_shape') then
        value.shapeElement := parseString(jsn.node['shape'], jsn.vObj['_shape']);
      if jsn.has('color') or jsn.has('_color') then
      iteratePrimitiveArray(jsn.vArr['color'], jsn.vArr['_color'], value.colorList, parseString);
      if jsn.has('imprint') or jsn.has('_imprint') then
      iteratePrimitiveArray(jsn.vArr['imprint'], jsn.vArr['_imprint'], value.imprintList, parseString);
    if jsn.has('image') then
      iterateArray(jsn.vArr['image'], value.imageList, parseAttachment);
    if jsn.has('scoring') then
        value.scoring := ParseCodeableConcept(jsn.vObj['scoring']);
end;

procedure TFHIRJsonComposer.ComposeProdCharacteristic(json : TJSONWriter; name : string; value : TFhirProdCharacteristic; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneTypeProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'height', value.height);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'width', value.width);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'depth', value.depth);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'weight', value.weight);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'nominalVolume', value.nominalVolume);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'externalDiameter', value.externalDiameter);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'shape', value.shapeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'shape', value.shapeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.colorList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.colorList.Count - 1 do
    begin
      ext := ext or ((value.colorList[i].id <> '') or (value.colorList[i].hasExtensionList) {no-comments or (value.colorList[i].hasComments)});
      val := val or (value.colorList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'color', value.colorList, true);
      for i := 0 to value.colorList.Count - 1 do
        ComposeStringValue(json, '', value.colorList[i], true);
      finishArray(json, value.colorList);
    end;
    if ext then
    begin
      startArray(json, '_color', value.colorList, false);
      for i := 0 to value.colorList.Count - 1 do
        ComposeStringProps(json, '', value.colorList[i], true);
      finishArray(json, value.colorList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.imprintList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.imprintList.Count - 1 do
    begin
      ext := ext or ((value.imprintList[i].id <> '') or (value.imprintList[i].hasExtensionList) {no-comments or (value.imprintList[i].hasComments)});
      val := val or (value.imprintList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'imprint', value.imprintList, true);
      for i := 0 to value.imprintList.Count - 1 do
        ComposeStringValue(json, '', value.imprintList[i], true);
      finishArray(json, value.imprintList);
    end;
    if ext then
    begin
      startArray(json, '_imprint', value.imprintList, false);
      for i := 0 to value.imprintList.Count - 1 do
        ComposeStringProps(json, '', value.imprintList[i], true);
      finishArray(json, value.imprintList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.imageList.Count > 0) then
  begin
    startArray(json, 'image', value.imageList, false);
    for i := 0 to value.imageList.Count - 1 do
      ComposeAttachment(json, '', value.imageList[i]);
    finishArray(json, value.imageList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'scoring', value.scoring);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseProductShelfLife(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProductShelfLife(jsn)); 
end;

function TFHIRJsonParser.ParseProductShelfLife(jsn : TJsonObject) : TFhirProductShelfLife;
begin
  result := TFhirProductShelfLife.Create;
  try
    ParseProductShelfLifeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProductShelfLifeProperties(jsn : TJsonObject; value : TFhirProductShelfLife);
begin
    ParseBackboneTypeProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('periodDuration') {a4} then
      value.period := ParseDuration(jsn.vObj['periodDuration']);
    if jsn.has('periodString') or jsn.has('_periodString') then
      value.period := parseString(jsn.node['periodString'], jsn.vObj['_periodString']);
    if jsn.has('specialPrecautionsForStorage') then
      iterateArray(jsn.vArr['specialPrecautionsForStorage'], value.specialPrecautionsForStorageList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeProductShelfLife(json : TJSONWriter; name : string; value : TFhirProductShelfLife; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneTypeProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.period is TFhirDuration) then 
    ComposeDuration(json, 'periodDuration', TFhirDuration(value.period)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.period is TFhirString) then 
  begin
    ComposeStringValue(json, 'periodString', TFhirString(value.period), false);
    ComposeStringProps(json, 'periodString', TFhirString(value.period), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.specialPrecautionsForStorageList.Count > 0) then
  begin
    startArray(json, 'specialPrecautionsForStorage', value.specialPrecautionsForStorageList, false);
    for i := 0 to value.specialPrecautionsForStorageList.Count - 1 do
      ComposeCodeableConcept(json, '', value.specialPrecautionsForStorageList[i]);
    finishArray(json, value.specialPrecautionsForStorageList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseQuantity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuantity(jsn)); 
end;

function TFHIRJsonParser.ParseQuantity(jsn : TJsonObject) : TFhirQuantity;
begin
  result := TFhirQuantity.Create;
  try
    ParseQuantityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuantityProperties(jsn : TJsonObject; value : TFhirQuantity);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseDecimal(jsn.node['value'], jsn.vObj['_value']);
    if jsn.has('comparator') or jsn.has('_comparator') then
        value.comparatorElement := parseEnum(jsn.path+'/comparator', jsn.node['comparator'], jsn.vObj['_comparator'], CODES_TFhirQuantityComparatorEnum, SYSTEMS_TFhirQuantityComparatorEnum);
    if jsn.has('unit') or jsn.has('_unit') then
        value.unit_Element := parseString(jsn.node['unit'], jsn.vObj['_unit']);
    if jsn.has('system') or jsn.has('_system') then
        value.systemElement := parseUri(jsn.node['system'], jsn.vObj['_system']);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
end;

procedure TFHIRJsonComposer.ComposeQuantity(json : TJSONWriter; name : string; value : TFhirQuantity; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'comparator', value.comparatorElement, CODES_TFhirQuantityComparatorEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'unit', value.unit_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'unit', value.unit_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'system', value.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'system', value.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'code', value.codeElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseRange(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRange(jsn)); 
end;

function TFHIRJsonParser.ParseRange(jsn : TJsonObject) : TFhirRange;
begin
  result := TFhirRange.Create;
  try
    ParseRangeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRangeProperties(jsn : TJsonObject; value : TFhirRange);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('low') then
        value.low := ParseQuantity(jsn.vObj['low']);
    if jsn.has('high') then
        value.high := ParseQuantity(jsn.vObj['high']);
end;

procedure TFHIRJsonComposer.ComposeRange(json : TJSONWriter; name : string; value : TFhirRange; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'low', value.low);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'high', value.high);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseRatio(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRatio(jsn)); 
end;

function TFHIRJsonParser.ParseRatio(jsn : TJsonObject) : TFhirRatio;
begin
  result := TFhirRatio.Create;
  try
    ParseRatioProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRatioProperties(jsn : TJsonObject; value : TFhirRatio);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('numerator') then
        value.numerator := ParseQuantity(jsn.vObj['numerator']);
    if jsn.has('denominator') then
        value.denominator := ParseQuantity(jsn.vObj['denominator']);
end;

procedure TFHIRJsonComposer.ComposeRatio(json : TJSONWriter; name : string; value : TFhirRatio; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'numerator', value.numerator);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'denominator', value.denominator);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseReference(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseReference(jsn)); 
end;

function TFHIRJsonParser.ParseReference(jsn : TJsonObject) : TFhirReference;
begin
  result := TFhirReference.Create;
  try
    ParseReferenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseReferenceProperties(jsn : TJsonObject; value : TFhirReference);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('reference') or jsn.has('_reference') then
        value.referenceElement := parseString(jsn.node['reference'], jsn.vObj['_reference']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseUri(jsn.node['type'], jsn.vObj['_type']);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('display') or jsn.has('_display') then
        value.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);
end;

procedure TFHIRJsonComposer.ComposeReference(json : TJSONWriter; name : string; value : TFhirReference; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'reference', value.referenceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'reference', value.referenceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'type', value.type_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'type', value.type_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'display', value.displayElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseRelatedArtifact(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRelatedArtifact(jsn)); 
end;

function TFHIRJsonParser.ParseRelatedArtifact(jsn : TJsonObject) : TFhirRelatedArtifact;
begin
  result := TFhirRelatedArtifact.Create;
  try
    ParseRelatedArtifactProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRelatedArtifactProperties(jsn : TJsonObject; value : TFhirRelatedArtifact);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirRelatedArtifactTypeEnum, SYSTEMS_TFhirRelatedArtifactTypeEnum);
    if jsn.has('label') or jsn.has('_label') then
        value.label_Element := parseString(jsn.node['label'], jsn.vObj['_label']);
    if jsn.has('display') or jsn.has('_display') then
        value.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);
    if jsn.has('citation') or jsn.has('_citation') then
        value.citationElement := parseMarkdown(jsn.node['citation'], jsn.vObj['_citation']);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUrl(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('document') then
        value.document := ParseAttachment(jsn.vObj['document']);
    if jsn.has('resource') or jsn.has('_resource') then
        value.resourceElement := parseCanonical(jsn.node['resource'], jsn.vObj['_resource']);
end;

procedure TFHIRJsonComposer.ComposeRelatedArtifact(json : TJSONWriter; name : string; value : TFhirRelatedArtifact; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirRelatedArtifactTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'label', value.label_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'label', value.label_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'citation', value.citationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'citation', value.citationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrlValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrlProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(json, 'document', value.document);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'resource', value.resourceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'resource', value.resourceElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSampledData(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSampledData(jsn)); 
end;

function TFHIRJsonParser.ParseSampledData(jsn : TJsonObject) : TFhirSampledData;
begin
  result := TFhirSampledData.Create;
  try
    ParseSampledDataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSampledDataProperties(jsn : TJsonObject; value : TFhirSampledData);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('origin') then
        value.origin := ParseQuantity(jsn.vObj['origin']);
    if jsn.has('period') or jsn.has('_period') then
        value.periodElement := parseDecimal(jsn.node['period'], jsn.vObj['_period']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('lowerLimit') or jsn.has('_lowerLimit') then
        value.lowerLimitElement := parseDecimal(jsn.node['lowerLimit'], jsn.vObj['_lowerLimit']);
    if jsn.has('upperLimit') or jsn.has('_upperLimit') then
        value.upperLimitElement := parseDecimal(jsn.node['upperLimit'], jsn.vObj['_upperLimit']);
    if jsn.has('dimensions') or jsn.has('_dimensions') then
        value.dimensionsElement := parsePositiveInt(jsn.node['dimensions'], jsn.vObj['_dimensions']);
    if jsn.has('data') or jsn.has('_data') then
        value.dataElement := parseString(jsn.node['data'], jsn.vObj['_data']);
end;

procedure TFHIRJsonComposer.ComposeSampledData(json : TJSONWriter; name : string; value : TFhirSampledData; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeQuantity(json, 'origin', value.origin);
  ComposeDecimalValue(json, 'period', value.periodElement, false);
  ComposeDecimalProps(json, 'period', value.periodElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'lowerLimit', value.lowerLimitElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'lowerLimit', value.lowerLimitElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'upperLimit', value.upperLimitElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'upperLimit', value.upperLimitElement, false);
  ComposePositiveIntValue(json, 'dimensions', value.dimensionsElement, false);
  ComposePositiveIntProps(json, 'dimensions', value.dimensionsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'data', value.dataElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'data', value.dataElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSignature(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSignature(jsn)); 
end;

function TFHIRJsonParser.ParseSignature(jsn : TJsonObject) : TFhirSignature;
begin
  result := TFhirSignature.Create;
  try
    ParseSignatureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSignatureProperties(jsn : TJsonObject; value : TFhirSignature);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCoding);
    if jsn.has('when') or jsn.has('_when') then
        value.whenElement := parseInstant(jsn.node['when'], jsn.vObj['_when']);
    if jsn.has('who') then
        value.who := ParseReference(jsn.vObj['who']);
    if jsn.has('onBehalfOf') then
        value.onBehalfOf := ParseReference(jsn.vObj['onBehalfOf']);
    if jsn.has('targetFormat') or jsn.has('_targetFormat') then
        value.targetFormatElement := parseCode(jsn.node['targetFormat'], jsn.vObj['_targetFormat']);
    if jsn.has('sigFormat') or jsn.has('_sigFormat') then
        value.sigFormatElement := parseCode(jsn.node['sigFormat'], jsn.vObj['_sigFormat']);
    if jsn.has('data') or jsn.has('_data') then
        value.dataElement := parseBase64Binary(jsn.node['data'], jsn.vObj['_data']);
end;

procedure TFHIRJsonComposer.ComposeSignature(json : TJSONWriter; name : string; value : TFhirSignature; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCoding(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  ComposeInstantValue(json, 'when', value.whenElement, false);
  ComposeInstantProps(json, 'when', value.whenElement, false);
  ComposeReference(json, 'who', value.who);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'onBehalfOf', value.onBehalfOf);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'targetFormat', value.targetFormatElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'targetFormat', value.targetFormatElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'sigFormat', value.sigFormatElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'sigFormat', value.sigFormatElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBase64BinaryValue(json, 'data', value.dataElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBase64BinaryProps(json, 'data', value.dataElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTimingRepeat(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTimingRepeat(jsn)); 
end;

function TFHIRJsonParser.ParseTimingRepeat(jsn : TJsonObject) : TFhirTimingRepeat;
begin
  result := TFhirTimingRepeat.Create;
  try
    ParseTimingRepeatProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTimingRepeatProperties(jsn : TJsonObject; value : TFhirTimingRepeat);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('boundsDuration') {a4} then
      value.bounds := ParseDuration(jsn.vObj['boundsDuration']);
    if jsn.has('boundsRange') {a4} then
      value.bounds := ParseRange(jsn.vObj['boundsRange']);
    if jsn.has('boundsPeriod') {a4} then
      value.bounds := ParsePeriod(jsn.vObj['boundsPeriod']);
    if jsn.has('count') or jsn.has('_count') then
        value.countElement := parsePositiveInt(jsn.node['count'], jsn.vObj['_count']);
    if jsn.has('countMax') or jsn.has('_countMax') then
        value.countMaxElement := parsePositiveInt(jsn.node['countMax'], jsn.vObj['_countMax']);
    if jsn.has('duration') or jsn.has('_duration') then
        value.durationElement := parseDecimal(jsn.node['duration'], jsn.vObj['_duration']);
    if jsn.has('durationMax') or jsn.has('_durationMax') then
        value.durationMaxElement := parseDecimal(jsn.node['durationMax'], jsn.vObj['_durationMax']);
    if jsn.has('durationUnit') or jsn.has('_durationUnit') then
        value.durationUnitElement := parseEnum(jsn.path+'/durationUnit', jsn.node['durationUnit'], jsn.vObj['_durationUnit'], CODES_TFhirUnitsOfTimeEnum, SYSTEMS_TFhirUnitsOfTimeEnum);
    if jsn.has('frequency') or jsn.has('_frequency') then
        value.frequencyElement := parsePositiveInt(jsn.node['frequency'], jsn.vObj['_frequency']);
    if jsn.has('frequencyMax') or jsn.has('_frequencyMax') then
        value.frequencyMaxElement := parsePositiveInt(jsn.node['frequencyMax'], jsn.vObj['_frequencyMax']);
    if jsn.has('period') or jsn.has('_period') then
        value.periodElement := parseDecimal(jsn.node['period'], jsn.vObj['_period']);
    if jsn.has('periodMax') or jsn.has('_periodMax') then
        value.periodMaxElement := parseDecimal(jsn.node['periodMax'], jsn.vObj['_periodMax']);
    if jsn.has('periodUnit') or jsn.has('_periodUnit') then
        value.periodUnitElement := parseEnum(jsn.path+'/periodUnit', jsn.node['periodUnit'], jsn.vObj['_periodUnit'], CODES_TFhirUnitsOfTimeEnum, SYSTEMS_TFhirUnitsOfTimeEnum);
    if jsn.has('dayOfWeek') or jsn.has('_dayOfWeek') then
      iterateEnumArray(jsn.vArr['dayOfWeek'], jsn.vArr['_dayOfWeek'], jsn.path+'/dayOfWeek', value.dayOfWeekList, parseEnum, CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum);
      if jsn.has('timeOfDay') or jsn.has('_timeOfDay') then
      iteratePrimitiveArray(jsn.vArr['timeOfDay'], jsn.vArr['_timeOfDay'], value.timeOfDayList, parseTime);
    if jsn.has('when') or jsn.has('_when') then
      iterateEnumArray(jsn.vArr['when'], jsn.vArr['_when'], jsn.path+'/when', value.whenList, parseEnum, CODES_TFhirEventTimingEnum, SYSTEMS_TFhirEventTimingEnum);
    if jsn.has('offset') or jsn.has('_offset') then
        value.offsetElement := parseUnsignedInt(jsn.node['offset'], jsn.vObj['_offset']);
end;

procedure TFHIRJsonComposer.ComposeTimingRepeat(json : TJSONWriter; name : string; value : TFhirTimingRepeat; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.bounds is TFhirDuration) then 
    ComposeDuration(json, 'boundsDuration', TFhirDuration(value.bounds)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.bounds is TFhirRange) then 
    ComposeRange(json, 'boundsRange', TFhirRange(value.bounds)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.bounds is TFhirPeriod) then 
    ComposePeriod(json, 'boundsPeriod', TFhirPeriod(value.bounds)) ;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'count', value.countElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'count', value.countElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'countMax', value.countMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'countMax', value.countMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'duration', value.durationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'duration', value.durationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'durationMax', value.durationMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'durationMax', value.durationMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'durationUnit', value.durationUnitElement, CODES_TFhirUnitsOfTimeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'frequency', value.frequencyElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'frequency', value.frequencyElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'frequencyMax', value.frequencyMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'frequencyMax', value.frequencyMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'period', value.periodElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'period', value.periodElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'periodMax', value.periodMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'periodMax', value.periodMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'periodUnit', value.periodUnitElement, CODES_TFhirUnitsOfTimeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.dayOfWeekList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.dayOfWeekList.Count - 1 do
    begin
      val := val or (value.dayOfWeekList[i].hasPrimitiveValue);
      ext := ext or ((value.dayOfWeekList[i].id <> '') or (value.dayOfWeekList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'dayOfWeek', value.dayOfWeekList, true);
      for i := 0 to value.dayOfWeekList.Count - 1 do
        ComposeEnumValue(json, '', value.dayOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      finishArray(json, value.dayOfWeekList);
    end;
    if ext then
    begin
      startArray(json, '_dayOfWeek', value.dayOfWeekList, false);
      for i := 0 to value.dayOfWeekList.Count - 1 do
        ComposeEnumProps(json, '', value.dayOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      finishArray(json, value.dayOfWeekList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.timeOfDayList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.timeOfDayList.Count - 1 do
    begin
      ext := ext or ((value.timeOfDayList[i].id <> '') or (value.timeOfDayList[i].hasExtensionList) {no-comments or (value.timeOfDayList[i].hasComments)});
      val := val or (value.timeOfDayList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'timeOfDay', value.timeOfDayList, true);
      for i := 0 to value.timeOfDayList.Count - 1 do
        ComposeTimeValue(json, '', value.timeOfDayList[i], true);
      finishArray(json, value.timeOfDayList);
    end;
    if ext then
    begin
      startArray(json, '_timeOfDay', value.timeOfDayList, false);
      for i := 0 to value.timeOfDayList.Count - 1 do
        ComposeTimeProps(json, '', value.timeOfDayList[i], true);
      finishArray(json, value.timeOfDayList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.whenList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.whenList.Count - 1 do
    begin
      val := val or (value.whenList[i].hasPrimitiveValue);
      ext := ext or ((value.whenList[i].id <> '') or (value.whenList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'when', value.whenList, true);
      for i := 0 to value.whenList.Count - 1 do
        ComposeEnumValue(json, '', value.whenList[i], CODES_TFhirEventTimingEnum, true);
      finishArray(json, value.whenList);
    end;
    if ext then
    begin
      startArray(json, '_when', value.whenList, false);
      for i := 0 to value.whenList.Count - 1 do
        ComposeEnumProps(json, '', value.whenList[i], CODES_TFhirEventTimingEnum, true);
      finishArray(json, value.whenList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'offset', value.offsetElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'offset', value.offsetElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTiming(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTiming(jsn)); 
end;

function TFHIRJsonParser.ParseTiming(jsn : TJsonObject) : TFhirTiming;
begin
  result := TFhirTiming.Create;
  try
    ParseTimingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTimingProperties(jsn : TJsonObject; value : TFhirTiming);
begin
    ParseBackboneTypeProperties(jsn, value);
      if jsn.has('event') or jsn.has('_event') then
      iteratePrimitiveArray(jsn.vArr['event'], jsn.vArr['_event'], value.eventList, parseDateTime);
    if jsn.has('repeat') then
        value.repeat_ := ParseTimingRepeat(jsn.vObj['repeat']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
end;

procedure TFHIRJsonComposer.ComposeTiming(json : TJSONWriter; name : string; value : TFhirTiming; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneTypeProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.eventList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.eventList.Count - 1 do
    begin
      ext := ext or ((value.eventList[i].id <> '') or (value.eventList[i].hasExtensionList) {no-comments or (value.eventList[i].hasComments)});
      val := val or (value.eventList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'event', value.eventList, true);
      for i := 0 to value.eventList.Count - 1 do
        ComposeDateTimeValue(json, '', value.eventList[i], true);
      finishArray(json, value.eventList);
    end;
    if ext then
    begin
      startArray(json, '_event', value.eventList, false);
      for i := 0 to value.eventList.Count - 1 do
        ComposeDateTimeProps(json, '', value.eventList[i], true);
      finishArray(json, value.eventList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeTimingRepeat(json, 'repeat', value.repeat_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTriggerDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTriggerDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseTriggerDefinition(jsn : TJsonObject) : TFhirTriggerDefinition;
begin
  result := TFhirTriggerDefinition.Create;
  try
    ParseTriggerDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTriggerDefinitionProperties(jsn : TJsonObject; value : TFhirTriggerDefinition);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirTriggerTypeEnum, SYSTEMS_TFhirTriggerTypeEnum);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('timingTiming') {a4} then
      value.timing := ParseTiming(jsn.vObj['timingTiming']);
    if jsn.has('timingReference') {a3} then
      value.timing := ParseReference(jsn.vObj['timingReference']);
    if jsn.has('timingDate') or jsn.has('_timingDate') then
      value.timing := parseDate(jsn.node['timingDate'], jsn.vObj['_timingDate']);
    if jsn.has('timingDateTime') or jsn.has('_timingDateTime') then
      value.timing := parseDateTime(jsn.node['timingDateTime'], jsn.vObj['_timingDateTime']);
    if jsn.has('data') then
      iterateArray(jsn.vArr['data'], value.dataList, parseDataRequirement);
    if jsn.has('condition') then
        value.condition := ParseExpression(jsn.vObj['condition']);
end;

procedure TFHIRJsonComposer.ComposeTriggerDefinition(json : TJSONWriter; name : string; value : TFhirTriggerDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirTriggerTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.timing is TFhirTiming) then 
    ComposeTiming(json, 'timingTiming', TFhirTiming(value.timing)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.timing is TFhirReference) then
    ComposeReference(json, 'timingReference', TFhirReference(value.timing))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.timing is TFhirDate) then 
  begin
    ComposeDateValue(json, 'timingDate', TFhirDate(value.timing), false);
    ComposeDateProps(json, 'timingDate', TFhirDate(value.timing), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.timing is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timingDateTime', TFhirDateTime(value.timing), false);
    ComposeDateTimeProps(json, 'timingDateTime', TFhirDateTime(value.timing), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.dataList.Count > 0) then
  begin
    startArray(json, 'data', value.dataList, false);
    for i := 0 to value.dataList.Count - 1 do
      ComposeDataRequirement(json, '', value.dataList[i]);
    finishArray(json, value.dataList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeExpression(json, 'condition', value.condition);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseUsageContext(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUsageContext(jsn)); 
end;

function TFHIRJsonParser.ParseUsageContext(jsn : TJsonObject) : TFhirUsageContext;
begin
  result := TFhirUsageContext.Create;
  try
    ParseUsageContextProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseUsageContextProperties(jsn : TJsonObject; value : TFhirUsageContext);
begin
    ParseElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCoding(jsn.vObj['code']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      value.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueReference') {a3} then
      value.value := ParseReference(jsn.vObj['valueReference']);
end;

procedure TFHIRJsonComposer.ComposeUsageContext(json : TJSONWriter; name : string; value : TFhirUsageContext; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeElementProperties(json, value);
  ComposeCoding(json, 'code', value.code);
  if (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (value.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(value.value)) 
  else if (value.value is TFhirReference) then
    ComposeReference(json, 'valueReference', TFhirReference(value.value));
  finishElement(json, name, value, noObj);
end;


procedure TFHIRJsonParser.ParseResourceProperties(jsn : TJsonObject; value : TFhirResource);
begin
  ParseBaseProperties(jsn, value); {jp2}
  if jsn.has('id') or jsn.has('_id') then
    value.idElement := parseId(jsn.node['id'], jsn.vObj['_id']);
  if jsn.has('meta') then
    value.meta := ParseMeta(jsn.vObj['meta']);
  if jsn.has('implicitRules') or jsn.has('_implicitRules') then
    value.implicitRulesElement := parseUri(jsn.node['implicitRules'], jsn.vObj['_implicitRules']);
  if jsn.has('language') or jsn.has('_language') then
    value.languageElement := parseCode(jsn.node['language'], jsn.vObj['_language']);
end;

Procedure TFHIRJsonComposer.ComposeResourceProperties(json : TJSONWriter; value : TFhirResource);
begin
  ComposeBaseProperties(json, value); 
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdValue(json, 'id', value.idElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdProps(json, 'id', value.idElement, false);
  // we always compose meta - special case. if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMeta(json, 'meta', value.meta);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'implicitRules', value.implicitRulesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'implicitRules', value.implicitRulesElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'language', value.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'language', value.languageElement, false);
end;

procedure TFHIRJsonParser.ParseDomainResourceProperties(jsn : TJsonObject; value : TFhirDomainResource);
begin
  ParseResourceProperties(jsn, value); {jp2}
  if jsn.has('text') then
    value.text := ParseNarrative(jsn.vObj['text']);
  if jsn.has('contained') then
    iterateArray(jsn.vArr['contained'], value.containedList, parseInnerResource);
  if jsn.has('extension') then
    iterateArray(jsn.vArr['extension'], value.extensionList, parseExtension);
  if jsn.has('modifierExtension') then
    iterateArray(jsn.vArr['modifierExtension'], value.modifierExtensionList, parseExtension);
end;

Procedure TFHIRJsonComposer.ComposeDomainResourceProperties(json : TJSONWriter; value : TFhirDomainResource);
var
  i : integer;
begin
  ComposeResourceProperties(json, value); 
  if (SummaryOption in [soFull, soData]) then
    ComposeNarrative(json, 'text', value.text);
  if (SummaryOption in [soFull, soData]) and (value.containedList.Count > 0) then
  begin
    startArray(json, 'contained', value.containedList, false);
    for i := 0 to value.containedList.Count - 1 do
      ComposeInnerResource(json, '', value, value.containedList[i]);
    finishArray(json, value.containedList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.extensionList.Count > 0) then
  begin
    startArray(json, 'extension', value.extensionList, false);
    for i := 0 to value.extensionList.Count - 1 do
      ComposeExtension(json, '', value.extensionList[i]);
    finishArray(json, value.extensionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.modifierExtensionList.Count > 0) then
  begin
    startArray(json, 'modifierExtension', value.modifierExtensionList, false);
    for i := 0 to value.modifierExtensionList.Count - 1 do
      ComposeExtension(json, '', value.modifierExtensionList[i]);
    finishArray(json, value.modifierExtensionList);
  end;
end;

{$IFDEF FHIR_ACCOUNT}
procedure TFHIRJsonParser.ParseAccountCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAccountCoverage(jsn)); 
end;

function TFHIRJsonParser.ParseAccountCoverage(jsn : TJsonObject) : TFhirAccountCoverage;
begin
  result := TFhirAccountCoverage.Create;
  try
    ParseAccountCoverageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAccountCoverageProperties(jsn : TJsonObject; value : TFhirAccountCoverage);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('coverage') then
        value.coverage := ParseReference(jsn.vObj['coverage']);
    if jsn.has('priority') or jsn.has('_priority') then
        value.priorityElement := parsePositiveInt(jsn.node['priority'], jsn.vObj['_priority']);
end;

procedure TFHIRJsonComposer.ComposeAccountCoverage(json : TJSONWriter; name : string; value : TFhirAccountCoverage; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'coverage', value.coverage);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'priority', value.priorityElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'priority', value.priorityElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAccountGuarantor(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAccountGuarantor(jsn)); 
end;

function TFHIRJsonParser.ParseAccountGuarantor(jsn : TJsonObject) : TFhirAccountGuarantor;
begin
  result := TFhirAccountGuarantor.Create;
  try
    ParseAccountGuarantorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAccountGuarantorProperties(jsn : TJsonObject; value : TFhirAccountGuarantor);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('party') then
        value.party := ParseReference(jsn.vObj['party']);
    if jsn.has('onHold') or jsn.has('_onHold') then
        value.onHoldElement := parseBoolean(jsn.node['onHold'], jsn.vObj['_onHold']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeAccountGuarantor(json : TJSONWriter; name : string; value : TFhirAccountGuarantor; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'party', value.party);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'onHold', value.onHoldElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'onHold', value.onHoldElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAccount(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAccount(jsn)); 
end;

function TFHIRJsonParser.ParseAccount(jsn : TJsonObject) : TFhirAccount;
begin
  result := TFhirAccount.Create;
  try
    ParseAccountProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAccountProperties(jsn : TJsonObject; value : TFhirAccount);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirAccountStatusEnum, SYSTEMS_TFhirAccountStatusEnum);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('subject') then
      iterateArray(jsn.vArr['subject'], value.subjectList, parseReference);
    if jsn.has('servicePeriod') then
        value.servicePeriod := ParsePeriod(jsn.vObj['servicePeriod']);
    if jsn.has('coverage') then
      iterateArray(jsn.vArr['coverage'], value.coverageList, parseAccountCoverage);
    if jsn.has('owner') then
        value.owner := ParseReference(jsn.vObj['owner']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('guarantor') then
      iterateArray(jsn.vArr['guarantor'], value.guarantorList, parseAccountGuarantor);
    if jsn.has('partOf') then
        value.partOf := ParseReference(jsn.vObj['partOf']);
end;

procedure TFHIRJsonComposer.ComposeAccount(json : TJSONWriter; name : string; value : TFhirAccount; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirAccountStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.subjectList.Count > 0) then
  begin
    startArray(json, 'subject', value.subjectList, false);
    for i := 0 to value.subjectList.Count - 1 do
      ComposeReference(json, '', value.subjectList[i]);
    finishArray(json, value.subjectList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'servicePeriod', value.servicePeriod);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.coverageList.Count > 0) then
  begin
    startArray(json, 'coverage', value.coverageList, false);
    for i := 0 to value.coverageList.Count - 1 do
      ComposeAccountCoverage(json, '', value.coverageList[i]);
    finishArray(json, value.coverageList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'owner', value.owner);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.guarantorList.Count > 0) then
  begin
    startArray(json, 'guarantor', value.guarantorList, false);
    for i := 0 to value.guarantorList.Count - 1 do
      ComposeAccountGuarantor(json, '', value.guarantorList[i]);
    finishArray(json, value.guarantorList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'partOf', value.partOf);
end;

{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
procedure TFHIRJsonParser.ParseActivityDefinitionParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseActivityDefinitionParticipant(jsn)); 
end;

function TFHIRJsonParser.ParseActivityDefinitionParticipant(jsn : TJsonObject) : TFhirActivityDefinitionParticipant;
begin
  result := TFhirActivityDefinitionParticipant.Create;
  try
    ParseActivityDefinitionParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseActivityDefinitionParticipantProperties(jsn : TJsonObject; value : TFhirActivityDefinitionParticipant);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirActionParticipantTypeEnum, SYSTEMS_TFhirActionParticipantTypeEnum);
    if jsn.has('role') then
        value.role := ParseCodeableConcept(jsn.vObj['role']);
end;

procedure TFHIRJsonComposer.ComposeActivityDefinitionParticipant(json : TJSONWriter; name : string; value : TFhirActivityDefinitionParticipant; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirActionParticipantTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', value.role);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseActivityDefinitionDynamicValue(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseActivityDefinitionDynamicValue(jsn)); 
end;

function TFHIRJsonParser.ParseActivityDefinitionDynamicValue(jsn : TJsonObject) : TFhirActivityDefinitionDynamicValue;
begin
  result := TFhirActivityDefinitionDynamicValue.Create;
  try
    ParseActivityDefinitionDynamicValueProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseActivityDefinitionDynamicValueProperties(jsn : TJsonObject; value : TFhirActivityDefinitionDynamicValue);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('path') or jsn.has('_path') then
        value.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);
    if jsn.has('expression') then
        value.expression := ParseExpression(jsn.vObj['expression']);
end;

procedure TFHIRJsonComposer.ComposeActivityDefinitionDynamicValue(json : TJSONWriter; name : string; value : TFhirActivityDefinitionDynamicValue; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'path', value.pathElement, false);
  ComposeStringProps(json, 'path', value.pathElement, false);
  ComposeExpression(json, 'expression', value.expression);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseActivityDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseActivityDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseActivityDefinition(jsn : TJsonObject) : TFhirActivityDefinition;
begin
  result := TFhirActivityDefinition.Create;
  try
    ParseActivityDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseActivityDefinitionProperties(jsn : TJsonObject; value : TFhirActivityDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('subtitle') or jsn.has('_subtitle') then
        value.subtitleElement := parseString(jsn.node['subtitle'], jsn.vObj['_subtitle']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('subjectCodeableConcept') {a4} then
      value.subject := ParseCodeableConcept(jsn.vObj['subjectCodeableConcept']);
    if jsn.has('subjectReference') {a3} then
      value.subject := ParseReference(jsn.vObj['subjectReference']);
    if jsn.has('subjectCanonical') or jsn.has('_subjectCanonical') then
      value.subject := parseCanonical(jsn.node['subjectCanonical'], jsn.vObj['_subjectCanonical']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('usage') or jsn.has('_usage') then
        value.usageElement := parseString(jsn.node['usage'], jsn.vObj['_usage']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        value.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        value.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);
    if jsn.has('effectivePeriod') then
        value.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], value.topicList, parseCodeableConcept);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseContactDetail);
    if jsn.has('editor') then
      iterateArray(jsn.vArr['editor'], value.editorList, parseContactDetail);
    if jsn.has('reviewer') then
      iterateArray(jsn.vArr['reviewer'], value.reviewerList, parseContactDetail);
    if jsn.has('endorser') then
      iterateArray(jsn.vArr['endorser'], value.endorserList, parseContactDetail);
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], value.relatedArtifactList, parseRelatedArtifact);
      if jsn.has('library') or jsn.has('_library') then
      iteratePrimitiveArray(jsn.vArr['library'], jsn.vArr['_library'], value.library_List, parseCanonical);
    if jsn.has('kind') or jsn.has('_kind') then
        value.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirRequestResourceTypeEnum, SYSTEMS_TFhirRequestResourceTypeEnum);
    if jsn.has('profile') or jsn.has('_profile') then
        value.profileElement := parseCanonical(jsn.node['profile'], jsn.vObj['_profile']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('intent') or jsn.has('_intent') then
        value.intentElement := parseEnum(jsn.path+'/intent', jsn.node['intent'], jsn.vObj['_intent'], CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum);
    if jsn.has('priority') or jsn.has('_priority') then
        value.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('doNotPerform') or jsn.has('_doNotPerform') then
        value.doNotPerformElement := parseBoolean(jsn.node['doNotPerform'], jsn.vObj['_doNotPerform']);
    if jsn.has('timingTiming') {a4} then
      value.timing := ParseTiming(jsn.vObj['timingTiming']);
    if jsn.has('timingAge') {a4} then
      value.timing := ParseAge(jsn.vObj['timingAge']);
    if jsn.has('timingPeriod') {a4} then
      value.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingRange') {a4} then
      value.timing := ParseRange(jsn.vObj['timingRange']);
    if jsn.has('timingDuration') {a4} then
      value.timing := ParseDuration(jsn.vObj['timingDuration']);
    if jsn.has('timingDateTime') or jsn.has('_timingDateTime') then
      value.timing := parseDateTime(jsn.node['timingDateTime'], jsn.vObj['_timingDateTime']);
    if jsn.has('location') then
        value.location := ParseReference(jsn.vObj['location']);
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], value.participantList, parseActivityDefinitionParticipant);
    if jsn.has('productReference') {a3} then
      value.product := ParseReference(jsn.vObj['productReference']);
    if jsn.has('productCodeableConcept') {a4} then
      value.product := ParseCodeableConcept(jsn.vObj['productCodeableConcept']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('dosage') then
      iterateArray(jsn.vArr['dosage'], value.dosageList, parseDosage);
    if jsn.has('bodySite') then
      iterateArray(jsn.vArr['bodySite'], value.bodySiteList, parseCodeableConcept);
    if jsn.has('specimenRequirement') then
      iterateArray(jsn.vArr['specimenRequirement'], value.specimenRequirementList, parseReference);
    if jsn.has('observationRequirement') then
      iterateArray(jsn.vArr['observationRequirement'], value.observationRequirementList, parseReference);
    if jsn.has('observationResultRequirement') then
      iterateArray(jsn.vArr['observationResultRequirement'], value.observationResultRequirementList, parseReference);
    if jsn.has('transform') or jsn.has('_transform') then
        value.transformElement := parseCanonical(jsn.node['transform'], jsn.vObj['_transform']);
    if jsn.has('dynamicValue') then
      iterateArray(jsn.vArr['dynamicValue'], value.dynamicValueList, parseActivityDefinitionDynamicValue);
end;

procedure TFHIRJsonComposer.ComposeActivityDefinition(json : TJSONWriter; name : string; value : TFhirActivityDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'subtitle', value.subtitleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'subtitle', value.subtitleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject)) 
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirReference) then
    ComposeReference(json, 'subjectReference', TFhirReference(value.subject))
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'subjectCanonical', TFhirCanonical(value.subject), false);
    ComposeCanonicalProps(json, 'subjectCanonical', TFhirCanonical(value.subject), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', value.effectivePeriod);
  if (SummaryOption in [soFull, soData]) and (value.topicList.Count > 0) then
  begin
    startArray(json, 'topic', value.topicList, false);
    for i := 0 to value.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', value.topicList[i]);
    finishArray(json, value.topicList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.editorList.Count > 0) then
  begin
    startArray(json, 'editor', value.editorList, false);
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(json, '', value.editorList[i]);
    finishArray(json, value.editorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reviewerList.Count > 0) then
  begin
    startArray(json, 'reviewer', value.reviewerList, false);
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(json, '', value.reviewerList[i]);
    finishArray(json, value.reviewerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.endorserList.Count > 0) then
  begin
    startArray(json, 'endorser', value.endorserList, false);
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(json, '', value.endorserList[i]);
    finishArray(json, value.endorserList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedArtifactList.Count > 0) then
  begin
    startArray(json, 'relatedArtifact', value.relatedArtifactList, false);
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', value.relatedArtifactList[i]);
    finishArray(json, value.relatedArtifactList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.library_List.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.library_List.Count - 1 do
    begin
      ext := ext or ((value.library_List[i].id <> '') or (value.library_List[i].hasExtensionList) {no-comments or (value.library_List[i].hasComments)});
      val := val or (value.library_List[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'library', value.library_List, true);
      for i := 0 to value.library_List.Count - 1 do
        ComposeCanonicalValue(json, '', value.library_List[i], true);
      finishArray(json, value.library_List);
    end;
    if ext then
    begin
      startArray(json, '_library', value.library_List, false);
      for i := 0 to value.library_List.Count - 1 do
        ComposeCanonicalProps(json, '', value.library_List[i], true);
      finishArray(json, value.library_List);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'kind', value.kindElement, CODES_TFhirRequestResourceTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalValue(json, 'profile', value.profileElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalProps(json, 'profile', value.profileElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'intent', value.intentElement, CODES_TFhirRequestIntentEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'doNotPerform', value.doNotPerformElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'doNotPerform', value.doNotPerformElement, false);
  if (SummaryOption in [soFull, soData]) and (value.timing is TFhirTiming) then 
    ComposeTiming(json, 'timingTiming', TFhirTiming(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirAge) then 
    ComposeAge(json, 'timingAge', TFhirAge(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirRange) then 
    ComposeRange(json, 'timingRange', TFhirRange(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDuration) then 
    ComposeDuration(json, 'timingDuration', TFhirDuration(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timingDateTime', TFhirDateTime(value.timing), false);
    ComposeDateTimeProps(json, 'timingDateTime', TFhirDateTime(value.timing), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'location', value.location);
  if (SummaryOption in [soFull, soData]) and (value.participantList.Count > 0) then
  begin
    startArray(json, 'participant', value.participantList, false);
    for i := 0 to value.participantList.Count - 1 do
      ComposeActivityDefinitionParticipant(json, '', value.participantList[i]);
    finishArray(json, value.participantList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.product is TFhirReference) then
    ComposeReference(json, 'productReference', TFhirReference(value.product))
  else if (SummaryOption in [soFull, soData]) and (value.product is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'productCodeableConcept', TFhirCodeableConcept(value.product)) ;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) and (value.dosageList.Count > 0) then
  begin
    startArray(json, 'dosage', value.dosageList, false);
    for i := 0 to value.dosageList.Count - 1 do
      ComposeDosage(json, '', value.dosageList[i]);
    finishArray(json, value.dosageList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.bodySiteList.Count > 0) then
  begin
    startArray(json, 'bodySite', value.bodySiteList, false);
    for i := 0 to value.bodySiteList.Count - 1 do
      ComposeCodeableConcept(json, '', value.bodySiteList[i]);
    finishArray(json, value.bodySiteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.specimenRequirementList.Count > 0) then
  begin
    startArray(json, 'specimenRequirement', value.specimenRequirementList, false);
    for i := 0 to value.specimenRequirementList.Count - 1 do
      ComposeReference(json, '', value.specimenRequirementList[i]);
    finishArray(json, value.specimenRequirementList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.observationRequirementList.Count > 0) then
  begin
    startArray(json, 'observationRequirement', value.observationRequirementList, false);
    for i := 0 to value.observationRequirementList.Count - 1 do
      ComposeReference(json, '', value.observationRequirementList[i]);
    finishArray(json, value.observationRequirementList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.observationResultRequirementList.Count > 0) then
  begin
    startArray(json, 'observationResultRequirement', value.observationResultRequirementList, false);
    for i := 0 to value.observationResultRequirementList.Count - 1 do
      ComposeReference(json, '', value.observationResultRequirementList[i]);
    finishArray(json, value.observationResultRequirementList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalValue(json, 'transform', value.transformElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalProps(json, 'transform', value.transformElement, false);
  if (SummaryOption in [soFull, soData]) and (value.dynamicValueList.Count > 0) then
  begin
    startArray(json, 'dynamicValue', value.dynamicValueList, false);
    for i := 0 to value.dynamicValueList.Count - 1 do
      ComposeActivityDefinitionDynamicValue(json, '', value.dynamicValueList[i]);
    finishArray(json, value.dynamicValueList);
  end;
end;

{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
procedure TFHIRJsonParser.ParseAdministrableProductDefinitionProperty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAdministrableProductDefinitionProperty(jsn)); 
end;

function TFHIRJsonParser.ParseAdministrableProductDefinitionProperty(jsn : TJsonObject) : TFhirAdministrableProductDefinitionProperty;
begin
  result := TFhirAdministrableProductDefinitionProperty.Create;
  try
    ParseAdministrableProductDefinitionPropertyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAdministrableProductDefinitionPropertyProperties(jsn : TJsonObject; value : TFhirAdministrableProductDefinitionProperty);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      value.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('status') then
        value.status := ParseCodeableConcept(jsn.vObj['status']);
end;

procedure TFHIRJsonComposer.ComposeAdministrableProductDefinitionProperty(json : TJSONWriter; name : string; value : TFhirAdministrableProductDefinitionProperty; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(value.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', value.status);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAdministrableProductDefinitionRouteOfAdministration(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAdministrableProductDefinitionRouteOfAdministration(jsn)); 
end;

function TFHIRJsonParser.ParseAdministrableProductDefinitionRouteOfAdministration(jsn : TJsonObject) : TFhirAdministrableProductDefinitionRouteOfAdministration;
begin
  result := TFhirAdministrableProductDefinitionRouteOfAdministration.Create;
  try
    ParseAdministrableProductDefinitionRouteOfAdministrationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAdministrableProductDefinitionRouteOfAdministrationProperties(jsn : TJsonObject; value : TFhirAdministrableProductDefinitionRouteOfAdministration);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('firstDose') then
        value.firstDose := ParseQuantity(jsn.vObj['firstDose']);
    if jsn.has('maxSingleDose') then
        value.maxSingleDose := ParseQuantity(jsn.vObj['maxSingleDose']);
    if jsn.has('maxDosePerDay') then
        value.maxDosePerDay := ParseQuantity(jsn.vObj['maxDosePerDay']);
    if jsn.has('maxDosePerTreatmentPeriod') then
        value.maxDosePerTreatmentPeriod := ParseRatio(jsn.vObj['maxDosePerTreatmentPeriod']);
    if jsn.has('maxTreatmentPeriod') then
        value.maxTreatmentPeriod := ParseDuration(jsn.vObj['maxTreatmentPeriod']);
    if jsn.has('targetSpecies') then
      iterateArray(jsn.vArr['targetSpecies'], value.targetSpeciesList, parseAdministrableProductDefinitionRouteOfAdministrationTargetSpecies);
end;

procedure TFHIRJsonComposer.ComposeAdministrableProductDefinitionRouteOfAdministration(json : TJSONWriter; name : string; value : TFhirAdministrableProductDefinitionRouteOfAdministration; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'firstDose', value.firstDose);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'maxSingleDose', value.maxSingleDose);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'maxDosePerDay', value.maxDosePerDay);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(json, 'maxDosePerTreatmentPeriod', value.maxDosePerTreatmentPeriod);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDuration(json, 'maxTreatmentPeriod', value.maxTreatmentPeriod);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.targetSpeciesList.Count > 0) then
  begin
    startArray(json, 'targetSpecies', value.targetSpeciesList, false);
    for i := 0 to value.targetSpeciesList.Count - 1 do
      ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(json, '', value.targetSpeciesList[i]);
    finishArray(json, value.targetSpeciesList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(jsn)); 
end;

function TFHIRJsonParser.ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(jsn : TJsonObject) : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies;
begin
  result := TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies.Create;
  try
    ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesProperties(jsn : TJsonObject; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('withdrawalPeriod') then
      iterateArray(jsn.vArr['withdrawalPeriod'], value.withdrawalPeriodList, parseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod);
end;

procedure TFHIRJsonComposer.ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(json : TJSONWriter; name : string; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.withdrawalPeriodList.Count > 0) then
  begin
    startArray(json, 'withdrawalPeriod', value.withdrawalPeriodList, false);
    for i := 0 to value.withdrawalPeriodList.Count - 1 do
      ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(json, '', value.withdrawalPeriodList[i]);
    finishArray(json, value.withdrawalPeriodList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(jsn)); 
end;

function TFHIRJsonParser.ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(jsn : TJsonObject) : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod;
begin
  result := TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod.Create;
  try
    ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriodProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriodProperties(jsn : TJsonObject; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('tissue') then
        value.tissue := ParseCodeableConcept(jsn.vObj['tissue']);
    if jsn.has('value') then
        value.value := ParseQuantity(jsn.vObj['value']);
    if jsn.has('supportingInformation') or jsn.has('_supportingInformation') then
        value.supportingInformationElement := parseString(jsn.node['supportingInformation'], jsn.vObj['_supportingInformation']);
end;

procedure TFHIRJsonComposer.ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(json : TJSONWriter; name : string; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'tissue', value.tissue);
  ComposeQuantity(json, 'value', value.value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'supportingInformation', value.supportingInformationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'supportingInformation', value.supportingInformationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAdministrableProductDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAdministrableProductDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseAdministrableProductDefinition(jsn : TJsonObject) : TFhirAdministrableProductDefinition;
begin
  result := TFhirAdministrableProductDefinition.Create;
  try
    ParseAdministrableProductDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAdministrableProductDefinitionProperties(jsn : TJsonObject; value : TFhirAdministrableProductDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('formOf') then
      iterateArray(jsn.vArr['formOf'], value.formOfList, parseReference);
    if jsn.has('administrableDoseForm') then
        value.administrableDoseForm := ParseCodeableConcept(jsn.vObj['administrableDoseForm']);
    if jsn.has('unitOfPresentation') then
        value.unitOfPresentation := ParseCodeableConcept(jsn.vObj['unitOfPresentation']);
    if jsn.has('producedFrom') then
      iterateArray(jsn.vArr['producedFrom'], value.producedFromList, parseReference);
    if jsn.has('ingredient') then
      iterateArray(jsn.vArr['ingredient'], value.ingredientList, parseCodeableConcept);
    if jsn.has('device') then
        value.device := ParseReference(jsn.vObj['device']);
    if jsn.has('property') then
      iterateArray(jsn.vArr['property'], value.property_List, parseAdministrableProductDefinitionProperty);
    if jsn.has('routeOfAdministration') then
      iterateArray(jsn.vArr['routeOfAdministration'], value.routeOfAdministrationList, parseAdministrableProductDefinitionRouteOfAdministration);
end;

procedure TFHIRJsonComposer.ComposeAdministrableProductDefinition(json : TJSONWriter; name : string; value : TFhirAdministrableProductDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.formOfList.Count > 0) then
  begin
    startArray(json, 'formOf', value.formOfList, false);
    for i := 0 to value.formOfList.Count - 1 do
      ComposeReference(json, '', value.formOfList[i]);
    finishArray(json, value.formOfList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'administrableDoseForm', value.administrableDoseForm);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'unitOfPresentation', value.unitOfPresentation);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.producedFromList.Count > 0) then
  begin
    startArray(json, 'producedFrom', value.producedFromList, false);
    for i := 0 to value.producedFromList.Count - 1 do
      ComposeReference(json, '', value.producedFromList[i]);
    finishArray(json, value.producedFromList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.ingredientList.Count > 0) then
  begin
    startArray(json, 'ingredient', value.ingredientList, false);
    for i := 0 to value.ingredientList.Count - 1 do
      ComposeCodeableConcept(json, '', value.ingredientList[i]);
    finishArray(json, value.ingredientList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'device', value.device);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.property_List.Count > 0) then
  begin
    startArray(json, 'property', value.property_List, false);
    for i := 0 to value.property_List.Count - 1 do
      ComposeAdministrableProductDefinitionProperty(json, '', value.property_List[i]);
    finishArray(json, value.property_List);
  end;
  if (value.routeOfAdministrationList.Count > 0) then
  begin
    startArray(json, 'routeOfAdministration', value.routeOfAdministrationList, false);
    for i := 0 to value.routeOfAdministrationList.Count - 1 do
      ComposeAdministrableProductDefinitionRouteOfAdministration(json, '', value.routeOfAdministrationList[i]);
    finishArray(json, value.routeOfAdministrationList);
  end;
end;

{$ENDIF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
procedure TFHIRJsonParser.ParseAdverseEventSuspectEntity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAdverseEventSuspectEntity(jsn)); 
end;

function TFHIRJsonParser.ParseAdverseEventSuspectEntity(jsn : TJsonObject) : TFhirAdverseEventSuspectEntity;
begin
  result := TFhirAdverseEventSuspectEntity.Create;
  try
    ParseAdverseEventSuspectEntityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAdverseEventSuspectEntityProperties(jsn : TJsonObject; value : TFhirAdverseEventSuspectEntity);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('instance') then
        value.instance := ParseReference(jsn.vObj['instance']);
    if jsn.has('causality') then
      iterateArray(jsn.vArr['causality'], value.causalityList, parseAdverseEventSuspectEntityCausality);
end;

procedure TFHIRJsonComposer.ComposeAdverseEventSuspectEntity(json : TJSONWriter; name : string; value : TFhirAdverseEventSuspectEntity; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'instance', value.instance);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.causalityList.Count > 0) then
  begin
    startArray(json, 'causality', value.causalityList, false);
    for i := 0 to value.causalityList.Count - 1 do
      ComposeAdverseEventSuspectEntityCausality(json, '', value.causalityList[i]);
    finishArray(json, value.causalityList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAdverseEventSuspectEntityCausality(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAdverseEventSuspectEntityCausality(jsn)); 
end;

function TFHIRJsonParser.ParseAdverseEventSuspectEntityCausality(jsn : TJsonObject) : TFhirAdverseEventSuspectEntityCausality;
begin
  result := TFhirAdverseEventSuspectEntityCausality.Create;
  try
    ParseAdverseEventSuspectEntityCausalityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAdverseEventSuspectEntityCausalityProperties(jsn : TJsonObject; value : TFhirAdverseEventSuspectEntityCausality);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('assessment') then
        value.assessment := ParseCodeableConcept(jsn.vObj['assessment']);
    if jsn.has('productRelatedness') or jsn.has('_productRelatedness') then
        value.productRelatednessElement := parseString(jsn.node['productRelatedness'], jsn.vObj['_productRelatedness']);
    if jsn.has('author') then
        value.author := ParseReference(jsn.vObj['author']);
    if jsn.has('method') then
        value.method := ParseCodeableConcept(jsn.vObj['method']);
end;

procedure TFHIRJsonComposer.ComposeAdverseEventSuspectEntityCausality(json : TJSONWriter; name : string; value : TFhirAdverseEventSuspectEntityCausality; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'assessment', value.assessment);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'productRelatedness', value.productRelatednessElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'productRelatedness', value.productRelatednessElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'author', value.author);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'method', value.method);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAdverseEvent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAdverseEvent(jsn)); 
end;

function TFHIRJsonParser.ParseAdverseEvent(jsn : TJsonObject) : TFhirAdverseEvent;
begin
  result := TFhirAdverseEvent.Create;
  try
    ParseAdverseEventProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAdverseEventProperties(jsn : TJsonObject; value : TFhirAdverseEvent);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('actuality') or jsn.has('_actuality') then
        value.actualityElement := parseEnum(jsn.path+'/actuality', jsn.node['actuality'], jsn.vObj['_actuality'], CODES_TFhirAdverseEventActualityEnum, SYSTEMS_TFhirAdverseEventActualityEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('event') then
        value.event := ParseCodeableConcept(jsn.vObj['event']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('detected') or jsn.has('_detected') then
        value.detectedElement := parseDateTime(jsn.node['detected'], jsn.vObj['_detected']);
    if jsn.has('recordedDate') or jsn.has('_recordedDate') then
        value.recordedDateElement := parseDateTime(jsn.node['recordedDate'], jsn.vObj['_recordedDate']);
    if jsn.has('resultingCondition') then
      iterateArray(jsn.vArr['resultingCondition'], value.resultingConditionList, parseReference);
    if jsn.has('location') then
        value.location := ParseReference(jsn.vObj['location']);
    if jsn.has('seriousness') then
        value.seriousness := ParseCodeableConcept(jsn.vObj['seriousness']);
    if jsn.has('severity') then
        value.severity := ParseCodeableConcept(jsn.vObj['severity']);
    if jsn.has('outcome') then
        value.outcome := ParseCodeableConcept(jsn.vObj['outcome']);
    if jsn.has('recorder') then
        value.recorder := ParseReference(jsn.vObj['recorder']);
    if jsn.has('contributor') then
      iterateArray(jsn.vArr['contributor'], value.contributorList, parseReference);
    if jsn.has('suspectEntity') then
      iterateArray(jsn.vArr['suspectEntity'], value.suspectEntityList, parseAdverseEventSuspectEntity);
    if jsn.has('subjectMedicalHistory') then
      iterateArray(jsn.vArr['subjectMedicalHistory'], value.subjectMedicalHistoryList, parseReference);
    if jsn.has('referenceDocument') then
      iterateArray(jsn.vArr['referenceDocument'], value.referenceDocumentList, parseReference);
    if jsn.has('study') then
      iterateArray(jsn.vArr['study'], value.studyList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeAdverseEvent(json : TJSONWriter; name : string; value : TFhirAdverseEvent; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  ComposeEnumValue(json, 'actuality', value.actualityElement, CODES_TFhirAdverseEventActualityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'event', value.event);
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'detected', value.detectedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'detected', value.detectedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'recordedDate', value.recordedDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'recordedDate', value.recordedDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.resultingConditionList.Count > 0) then
  begin
    startArray(json, 'resultingCondition', value.resultingConditionList, false);
    for i := 0 to value.resultingConditionList.Count - 1 do
      ComposeReference(json, '', value.resultingConditionList[i]);
    finishArray(json, value.resultingConditionList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'location', value.location);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'seriousness', value.seriousness);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'severity', value.severity);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'outcome', value.outcome);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'recorder', value.recorder);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contributorList.Count > 0) then
  begin
    startArray(json, 'contributor', value.contributorList, false);
    for i := 0 to value.contributorList.Count - 1 do
      ComposeReference(json, '', value.contributorList[i]);
    finishArray(json, value.contributorList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.suspectEntityList.Count > 0) then
  begin
    startArray(json, 'suspectEntity', value.suspectEntityList, false);
    for i := 0 to value.suspectEntityList.Count - 1 do
      ComposeAdverseEventSuspectEntity(json, '', value.suspectEntityList[i]);
    finishArray(json, value.suspectEntityList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.subjectMedicalHistoryList.Count > 0) then
  begin
    startArray(json, 'subjectMedicalHistory', value.subjectMedicalHistoryList, false);
    for i := 0 to value.subjectMedicalHistoryList.Count - 1 do
      ComposeReference(json, '', value.subjectMedicalHistoryList[i]);
    finishArray(json, value.subjectMedicalHistoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.referenceDocumentList.Count > 0) then
  begin
    startArray(json, 'referenceDocument', value.referenceDocumentList, false);
    for i := 0 to value.referenceDocumentList.Count - 1 do
      ComposeReference(json, '', value.referenceDocumentList[i]);
    finishArray(json, value.referenceDocumentList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.studyList.Count > 0) then
  begin
    startArray(json, 'study', value.studyList, false);
    for i := 0 to value.studyList.Count - 1 do
      ComposeReference(json, '', value.studyList[i]);
    finishArray(json, value.studyList);
  end;
end;

{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
procedure TFHIRJsonParser.ParseAllergyIntoleranceReaction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAllergyIntoleranceReaction(jsn)); 
end;

function TFHIRJsonParser.ParseAllergyIntoleranceReaction(jsn : TJsonObject) : TFhirAllergyIntoleranceReaction;
begin
  result := TFhirAllergyIntoleranceReaction.Create;
  try
    ParseAllergyIntoleranceReactionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAllergyIntoleranceReactionProperties(jsn : TJsonObject; value : TFhirAllergyIntoleranceReaction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('substance') then
        value.substance := ParseCodeableConcept(jsn.vObj['substance']);
    if jsn.has('manifestation') then
      iterateArray(jsn.vArr['manifestation'], value.manifestationList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('onset') or jsn.has('_onset') then
        value.onsetElement := parseDateTime(jsn.node['onset'], jsn.vObj['_onset']);
    if jsn.has('severity') or jsn.has('_severity') then
        value.severityElement := parseEnum(jsn.path+'/severity', jsn.node['severity'], jsn.vObj['_severity'], CODES_TFhirAllergyIntoleranceSeverityEnum, SYSTEMS_TFhirAllergyIntoleranceSeverityEnum);
    if jsn.has('exposureRoute') then
        value.exposureRoute := ParseCodeableConcept(jsn.vObj['exposureRoute']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeAllergyIntoleranceReaction(json : TJSONWriter; name : string; value : TFhirAllergyIntoleranceReaction; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'substance', value.substance);
  if (value.manifestationList.Count > 0) then
  begin
    startArray(json, 'manifestation', value.manifestationList, false);
    for i := 0 to value.manifestationList.Count - 1 do
      ComposeCodeableConcept(json, '', value.manifestationList[i]);
    finishArray(json, value.manifestationList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'onset', value.onsetElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'onset', value.onsetElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'severity', value.severityElement, CODES_TFhirAllergyIntoleranceSeverityEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'exposureRoute', value.exposureRoute);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAllergyIntolerance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAllergyIntolerance(jsn)); 
end;

function TFHIRJsonParser.ParseAllergyIntolerance(jsn : TJsonObject) : TFhirAllergyIntolerance;
begin
  result := TFhirAllergyIntolerance.Create;
  try
    ParseAllergyIntoleranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAllergyIntoleranceProperties(jsn : TJsonObject; value : TFhirAllergyIntolerance);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('clinicalStatus') then
        value.clinicalStatus := ParseCodeableConcept(jsn.vObj['clinicalStatus']);
    if jsn.has('verificationStatus') then
        value.verificationStatus := ParseCodeableConcept(jsn.vObj['verificationStatus']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirAllergyIntoleranceTypeEnum, SYSTEMS_TFhirAllergyIntoleranceTypeEnum);
    if jsn.has('category') or jsn.has('_category') then
      iterateEnumArray(jsn.vArr['category'], jsn.vArr['_category'], jsn.path+'/category', value.categoryList, parseEnum, CODES_TFhirAllergyIntoleranceCategoryEnum, SYSTEMS_TFhirAllergyIntoleranceCategoryEnum);
    if jsn.has('criticality') or jsn.has('_criticality') then
        value.criticalityElement := parseEnum(jsn.path+'/criticality', jsn.node['criticality'], jsn.vObj['_criticality'], CODES_TFhirAllergyIntoleranceCriticalityEnum, SYSTEMS_TFhirAllergyIntoleranceCriticalityEnum);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('onsetAge') {a4} then
      value.onset := ParseAge(jsn.vObj['onsetAge']);
    if jsn.has('onsetPeriod') {a4} then
      value.onset := ParsePeriod(jsn.vObj['onsetPeriod']);
    if jsn.has('onsetRange') {a4} then
      value.onset := ParseRange(jsn.vObj['onsetRange']);
    if jsn.has('onsetDateTime') or jsn.has('_onsetDateTime') then
      value.onset := parseDateTime(jsn.node['onsetDateTime'], jsn.vObj['_onsetDateTime']);
    if jsn.has('onsetString') or jsn.has('_onsetString') then
      value.onset := parseString(jsn.node['onsetString'], jsn.vObj['_onsetString']);
    if jsn.has('recordedDate') or jsn.has('_recordedDate') then
        value.recordedDateElement := parseDateTime(jsn.node['recordedDate'], jsn.vObj['_recordedDate']);
    if jsn.has('recorder') then
        value.recorder := ParseReference(jsn.vObj['recorder']);
    if jsn.has('asserter') then
        value.asserter := ParseReference(jsn.vObj['asserter']);
    if jsn.has('lastOccurrence') or jsn.has('_lastOccurrence') then
        value.lastOccurrenceElement := parseDateTime(jsn.node['lastOccurrence'], jsn.vObj['_lastOccurrence']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('reaction') then
      iterateArray(jsn.vArr['reaction'], value.reactionList, parseAllergyIntoleranceReaction);
end;

procedure TFHIRJsonComposer.ComposeAllergyIntolerance(json : TJSONWriter; name : string; value : TFhirAllergyIntolerance; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'clinicalStatus', value.clinicalStatus);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'verificationStatus', value.verificationStatus);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirAllergyIntoleranceTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.categoryList.Count - 1 do
    begin
      val := val or (value.categoryList[i].hasPrimitiveValue);
      ext := ext or ((value.categoryList[i].id <> '') or (value.categoryList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'category', value.categoryList, true);
      for i := 0 to value.categoryList.Count - 1 do
        ComposeEnumValue(json, '', value.categoryList[i], CODES_TFhirAllergyIntoleranceCategoryEnum, true);
      finishArray(json, value.categoryList);
    end;
    if ext then
    begin
      startArray(json, '_category', value.categoryList, false);
      for i := 0 to value.categoryList.Count - 1 do
        ComposeEnumProps(json, '', value.categoryList[i], CODES_TFhirAllergyIntoleranceCategoryEnum, true);
      finishArray(json, value.categoryList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'criticality', value.criticalityElement, CODES_TFhirAllergyIntoleranceCriticalityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soData]) and (value.onset is TFhirAge) then 
    ComposeAge(json, 'onsetAge', TFhirAge(value.onset)) 
  else if (SummaryOption in [soFull, soData]) and (value.onset is TFhirPeriod) then 
    ComposePeriod(json, 'onsetPeriod', TFhirPeriod(value.onset)) 
  else if (SummaryOption in [soFull, soData]) and (value.onset is TFhirRange) then 
    ComposeRange(json, 'onsetRange', TFhirRange(value.onset)) 
  else if (SummaryOption in [soFull, soData]) and (value.onset is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'onsetDateTime', TFhirDateTime(value.onset), false);
    ComposeDateTimeProps(json, 'onsetDateTime', TFhirDateTime(value.onset), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.onset is TFhirString) then 
  begin
    ComposeStringValue(json, 'onsetString', TFhirString(value.onset), false);
    ComposeStringProps(json, 'onsetString', TFhirString(value.onset), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'recordedDate', value.recordedDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'recordedDate', value.recordedDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'recorder', value.recorder);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'asserter', value.asserter);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'lastOccurrence', value.lastOccurrenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'lastOccurrence', value.lastOccurrenceElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reactionList.Count > 0) then
  begin
    startArray(json, 'reaction', value.reactionList, false);
    for i := 0 to value.reactionList.Count - 1 do
      ComposeAllergyIntoleranceReaction(json, '', value.reactionList[i]);
    finishArray(json, value.reactionList);
  end;
end;

{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
procedure TFHIRJsonParser.ParseAppointmentParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAppointmentParticipant(jsn)); 
end;

function TFHIRJsonParser.ParseAppointmentParticipant(jsn : TJsonObject) : TFhirAppointmentParticipant;
begin
  result := TFhirAppointmentParticipant.Create;
  try
    ParseAppointmentParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAppointmentParticipantProperties(jsn : TJsonObject; value : TFhirAppointmentParticipant);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('actor') then
        value.actor := ParseReference(jsn.vObj['actor']);
    if jsn.has('required') or jsn.has('_required') then
        value.requiredElement := parseEnum(jsn.path+'/required', jsn.node['required'], jsn.vObj['_required'], CODES_TFhirParticipantRequiredEnum, SYSTEMS_TFhirParticipantRequiredEnum);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirParticipationStatusEnum, SYSTEMS_TFhirParticipationStatusEnum);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeAppointmentParticipant(json : TJSONWriter; name : string; value : TFhirAppointmentParticipant; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'actor', value.actor);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'required', value.requiredElement, CODES_TFhirParticipantRequiredEnum, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirParticipationStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAppointment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAppointment(jsn)); 
end;

function TFHIRJsonParser.ParseAppointment(jsn : TJsonObject) : TFhirAppointment;
begin
  result := TFhirAppointment.Create;
  try
    ParseAppointmentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAppointmentProperties(jsn : TJsonObject; value : TFhirAppointment);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirAppointmentStatusEnum, SYSTEMS_TFhirAppointmentStatusEnum);
    if jsn.has('cancelationReason') then
        value.cancelationReason := ParseCodeableConcept(jsn.vObj['cancelationReason']);
    if jsn.has('serviceCategory') then
      iterateArray(jsn.vArr['serviceCategory'], value.serviceCategoryList, parseCodeableConcept);
    if jsn.has('serviceType') then
      iterateArray(jsn.vArr['serviceType'], value.serviceTypeList, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], value.specialtyList, parseCodeableConcept);
    if jsn.has('appointmentType') then
        value.appointmentType := ParseCodeableConcept(jsn.vObj['appointmentType']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('priority') or jsn.has('_priority') then
        value.priorityElement := parseUnsignedInt(jsn.node['priority'], jsn.vObj['_priority']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], value.supportingInformationList, parseReference);
    if jsn.has('start') or jsn.has('_start') then
        value.startElement := parseInstant(jsn.node['start'], jsn.vObj['_start']);
    if jsn.has('end') or jsn.has('_end') then
        value.end_Element := parseInstant(jsn.node['end'], jsn.vObj['_end']);
    if jsn.has('minutesDuration') or jsn.has('_minutesDuration') then
        value.minutesDurationElement := parsePositiveInt(jsn.node['minutesDuration'], jsn.vObj['_minutesDuration']);
    if jsn.has('slot') then
      iterateArray(jsn.vArr['slot'], value.slotList, parseReference);
    if jsn.has('created') or jsn.has('_created') then
        value.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);
    if jsn.has('patientInstruction') or jsn.has('_patientInstruction') then
        value.patientInstructionElement := parseString(jsn.node['patientInstruction'], jsn.vObj['_patientInstruction']);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], value.participantList, parseAppointmentParticipant);
    if jsn.has('requestedPeriod') then
      iterateArray(jsn.vArr['requestedPeriod'], value.requestedPeriodList, parsePeriod);
end;

procedure TFHIRJsonComposer.ComposeAppointment(json : TJSONWriter; name : string; value : TFhirAppointment; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirAppointmentStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'cancelationReason', value.cancelationReason);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.serviceCategoryList.Count > 0) then
  begin
    startArray(json, 'serviceCategory', value.serviceCategoryList, false);
    for i := 0 to value.serviceCategoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.serviceCategoryList[i]);
    finishArray(json, value.serviceCategoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.serviceTypeList.Count > 0) then
  begin
    startArray(json, 'serviceType', value.serviceTypeList, false);
    for i := 0 to value.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.serviceTypeList[i]);
    finishArray(json, value.serviceTypeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.specialtyList.Count > 0) then
  begin
    startArray(json, 'specialty', value.specialtyList, false);
    for i := 0 to value.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', value.specialtyList[i]);
    finishArray(json, value.specialtyList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'appointmentType', value.appointmentType);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'priority', value.priorityElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'priority', value.priorityElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.supportingInformationList.Count > 0) then
  begin
    startArray(json, 'supportingInformation', value.supportingInformationList, false);
    for i := 0 to value.supportingInformationList.Count - 1 do
      ComposeReference(json, '', value.supportingInformationList[i]);
    finishArray(json, value.supportingInformationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'start', value.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'start', value.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'end', value.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'end', value.end_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'minutesDuration', value.minutesDurationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'minutesDuration', value.minutesDurationElement, false);
  if (SummaryOption in [soFull, soData]) and (value.slotList.Count > 0) then
  begin
    startArray(json, 'slot', value.slotList, false);
    for i := 0 to value.slotList.Count - 1 do
      ComposeReference(json, '', value.slotList[i]);
    finishArray(json, value.slotList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'patientInstruction', value.patientInstructionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'patientInstruction', value.patientInstructionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (value.participantList.Count > 0) then
  begin
    startArray(json, 'participant', value.participantList, false);
    for i := 0 to value.participantList.Count - 1 do
      ComposeAppointmentParticipant(json, '', value.participantList[i]);
    finishArray(json, value.participantList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.requestedPeriodList.Count > 0) then
  begin
    startArray(json, 'requestedPeriod', value.requestedPeriodList, false);
    for i := 0 to value.requestedPeriodList.Count - 1 do
      ComposePeriod(json, '', value.requestedPeriodList[i]);
    finishArray(json, value.requestedPeriodList);
  end;
end;

{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
procedure TFHIRJsonParser.ParseAppointmentResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAppointmentResponse(jsn)); 
end;

function TFHIRJsonParser.ParseAppointmentResponse(jsn : TJsonObject) : TFhirAppointmentResponse;
begin
  result := TFhirAppointmentResponse.Create;
  try
    ParseAppointmentResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAppointmentResponseProperties(jsn : TJsonObject; value : TFhirAppointmentResponse);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('appointment') then
        value.appointment := ParseReference(jsn.vObj['appointment']);
    if jsn.has('start') or jsn.has('_start') then
        value.startElement := parseInstant(jsn.node['start'], jsn.vObj['_start']);
    if jsn.has('end') or jsn.has('_end') then
        value.end_Element := parseInstant(jsn.node['end'], jsn.vObj['_end']);
    if jsn.has('participantType') then
      iterateArray(jsn.vArr['participantType'], value.participantTypeList, parseCodeableConcept);
    if jsn.has('actor') then
        value.actor := ParseReference(jsn.vObj['actor']);
    if jsn.has('participantStatus') or jsn.has('_participantStatus') then
        value.participantStatusElement := parseEnum(jsn.path+'/participantStatus', jsn.node['participantStatus'], jsn.vObj['_participantStatus'], CODES_TFhirParticipationStatusEnum, SYSTEMS_TFhirParticipationStatusEnum);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);
end;

procedure TFHIRJsonComposer.ComposeAppointmentResponse(json : TJSONWriter; name : string; value : TFhirAppointmentResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeReference(json, 'appointment', value.appointment);
  if (SummaryOption in [soFull, soData]) then
    ComposeInstantValue(json, 'start', value.startElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeInstantProps(json, 'start', value.startElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeInstantValue(json, 'end', value.end_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeInstantProps(json, 'end', value.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.participantTypeList.Count > 0) then
  begin
    startArray(json, 'participantType', value.participantTypeList, false);
    for i := 0 to value.participantTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.participantTypeList[i]);
    finishArray(json, value.participantTypeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'actor', value.actor);
  ComposeEnumValue(json, 'participantStatus', value.participantStatusElement, CODES_TFhirParticipationStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', value.commentElement, false);
end;

{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
procedure TFHIRJsonParser.ParseAuditEventAgent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventAgent(jsn)); 
end;

function TFHIRJsonParser.ParseAuditEventAgent(jsn : TJsonObject) : TFhirAuditEventAgent;
begin
  result := TFhirAuditEventAgent.Create;
  try
    ParseAuditEventAgentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventAgentProperties(jsn : TJsonObject; value : TFhirAuditEventAgent);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('role') then
      iterateArray(jsn.vArr['role'], value.roleList, parseCodeableConcept);
    if jsn.has('who') then
        value.who := ParseReference(jsn.vObj['who']);
    if jsn.has('altId') or jsn.has('_altId') then
        value.altIdElement := parseString(jsn.node['altId'], jsn.vObj['_altId']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('requestor') or jsn.has('_requestor') then
        value.requestorElement := parseBoolean(jsn.node['requestor'], jsn.vObj['_requestor']);
    if jsn.has('location') then
        value.location := ParseReference(jsn.vObj['location']);
      if jsn.has('policy') or jsn.has('_policy') then
      iteratePrimitiveArray(jsn.vArr['policy'], jsn.vArr['_policy'], value.policyList, parseUri);
    if jsn.has('media') then
        value.media := ParseCoding(jsn.vObj['media']);
    if jsn.has('network') then
        value.network := ParseAuditEventAgentNetwork(jsn.vObj['network']);
    if jsn.has('purposeOfUse') then
      iterateArray(jsn.vArr['purposeOfUse'], value.purposeOfUseList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeAuditEventAgent(json : TJSONWriter; name : string; value : TFhirAuditEventAgent; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.roleList.Count > 0) then
  begin
    startArray(json, 'role', value.roleList, false);
    for i := 0 to value.roleList.Count - 1 do
      ComposeCodeableConcept(json, '', value.roleList[i]);
    finishArray(json, value.roleList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'who', value.who);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'altId', value.altIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'altId', value.altIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  ComposeBooleanValue(json, 'requestor', value.requestorElement, false);
  ComposeBooleanProps(json, 'requestor', value.requestorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'location', value.location);
  if (SummaryOption in [soFull, soData]) and (value.policyList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.policyList.Count - 1 do
    begin
      ext := ext or ((value.policyList[i].id <> '') or (value.policyList[i].hasExtensionList) {no-comments or (value.policyList[i].hasComments)});
      val := val or (value.policyList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'policy', value.policyList, true);
      for i := 0 to value.policyList.Count - 1 do
        ComposeUriValue(json, '', value.policyList[i], true);
      finishArray(json, value.policyList);
    end;
    if ext then
    begin
      startArray(json, '_policy', value.policyList, false);
      for i := 0 to value.policyList.Count - 1 do
        ComposeUriProps(json, '', value.policyList[i], true);
      finishArray(json, value.policyList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'media', value.media);
  if (SummaryOption in [soFull, soData]) then
    ComposeAuditEventAgentNetwork(json, 'network', value.network);
  if (SummaryOption in [soFull, soData]) and (value.purposeOfUseList.Count > 0) then
  begin
    startArray(json, 'purposeOfUse', value.purposeOfUseList, false);
    for i := 0 to value.purposeOfUseList.Count - 1 do
      ComposeCodeableConcept(json, '', value.purposeOfUseList[i]);
    finishArray(json, value.purposeOfUseList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAuditEventAgentNetwork(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventAgentNetwork(jsn)); 
end;

function TFHIRJsonParser.ParseAuditEventAgentNetwork(jsn : TJsonObject) : TFhirAuditEventAgentNetwork;
begin
  result := TFhirAuditEventAgentNetwork.Create;
  try
    ParseAuditEventAgentNetworkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventAgentNetworkProperties(jsn : TJsonObject; value : TFhirAuditEventAgentNetwork);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('address') or jsn.has('_address') then
        value.addressElement := parseString(jsn.node['address'], jsn.vObj['_address']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirAuditEventAgentNetworkTypeEnum, SYSTEMS_TFhirAuditEventAgentNetworkTypeEnum);
end;

procedure TFHIRJsonComposer.ComposeAuditEventAgentNetwork(json : TJSONWriter; name : string; value : TFhirAuditEventAgentNetwork; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'address', value.addressElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'address', value.addressElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirAuditEventAgentNetworkTypeEnum, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAuditEventSource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventSource(jsn)); 
end;

function TFHIRJsonParser.ParseAuditEventSource(jsn : TJsonObject) : TFhirAuditEventSource;
begin
  result := TFhirAuditEventSource.Create;
  try
    ParseAuditEventSourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventSourceProperties(jsn : TJsonObject; value : TFhirAuditEventSource);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('site') or jsn.has('_site') then
        value.siteElement := parseString(jsn.node['site'], jsn.vObj['_site']);
    if jsn.has('observer') then
        value.observer := ParseReference(jsn.vObj['observer']);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCoding);
end;

procedure TFHIRJsonComposer.ComposeAuditEventSource(json : TJSONWriter; name : string; value : TFhirAuditEventSource; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'site', value.siteElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'site', value.siteElement, false);
  ComposeReference(json, 'observer', value.observer);
  if (SummaryOption in [soFull, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCoding(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAuditEventEntity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventEntity(jsn)); 
end;

function TFHIRJsonParser.ParseAuditEventEntity(jsn : TJsonObject) : TFhirAuditEventEntity;
begin
  result := TFhirAuditEventEntity.Create;
  try
    ParseAuditEventEntityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventEntityProperties(jsn : TJsonObject; value : TFhirAuditEventEntity);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('what') then
        value.what := ParseReference(jsn.vObj['what']);
    if jsn.has('type') then
        value.type_ := ParseCoding(jsn.vObj['type']);
    if jsn.has('role') then
        value.role := ParseCoding(jsn.vObj['role']);
    if jsn.has('lifecycle') then
        value.lifecycle := ParseCoding(jsn.vObj['lifecycle']);
    if jsn.has('securityLabel') then
      iterateArray(jsn.vArr['securityLabel'], value.securityLabelList, parseCoding);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('query') or jsn.has('_query') then
        value.queryElement := parseBase64Binary(jsn.node['query'], jsn.vObj['_query']);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], value.detailList, parseAuditEventEntityDetail);
end;

procedure TFHIRJsonComposer.ComposeAuditEventEntity(json : TJSONWriter; name : string; value : TFhirAuditEventEntity; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'what', value.what);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'role', value.role);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'lifecycle', value.lifecycle);
  if (SummaryOption in [soFull, soData]) and (value.securityLabelList.Count > 0) then
  begin
    startArray(json, 'securityLabel', value.securityLabelList, false);
    for i := 0 to value.securityLabelList.Count - 1 do
      ComposeCoding(json, '', value.securityLabelList[i]);
    finishArray(json, value.securityLabelList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryValue(json, 'query', value.queryElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryProps(json, 'query', value.queryElement, false);
  if (SummaryOption in [soFull, soData]) and (value.detailList.Count > 0) then
  begin
    startArray(json, 'detail', value.detailList, false);
    for i := 0 to value.detailList.Count - 1 do
      ComposeAuditEventEntityDetail(json, '', value.detailList[i]);
    finishArray(json, value.detailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAuditEventEntityDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventEntityDetail(jsn)); 
end;

function TFHIRJsonParser.ParseAuditEventEntityDetail(jsn : TJsonObject) : TFhirAuditEventEntityDetail;
begin
  result := TFhirAuditEventEntityDetail.Create;
  try
    ParseAuditEventEntityDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventEntityDetailProperties(jsn : TJsonObject; value : TFhirAuditEventEntityDetail);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseString(jsn.node['type'], jsn.vObj['_type']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      value.value := parseBase64Binary(jsn.node['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
end;

procedure TFHIRJsonComposer.ComposeAuditEventEntityDetail(json : TJSONWriter; name : string; value : TFhirAuditEventEntityDetail; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'type', value.type_Element, false);
  ComposeStringProps(json, 'type', value.type_Element, false);
  if (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (value.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseAuditEvent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEvent(jsn)); 
end;

function TFHIRJsonParser.ParseAuditEvent(jsn : TJsonObject) : TFhirAuditEvent;
begin
  result := TFhirAuditEvent.Create;
  try
    ParseAuditEventProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventProperties(jsn : TJsonObject; value : TFhirAuditEvent);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCoding(jsn.vObj['type']);
    if jsn.has('subtype') then
      iterateArray(jsn.vArr['subtype'], value.subtypeList, parseCoding);
    if jsn.has('action') or jsn.has('_action') then
        value.actionElement := parseEnum(jsn.path+'/action', jsn.node['action'], jsn.vObj['_action'], CODES_TFhirAuditEventActionEnum, SYSTEMS_TFhirAuditEventActionEnum);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('recorded') or jsn.has('_recorded') then
        value.recordedElement := parseInstant(jsn.node['recorded'], jsn.vObj['_recorded']);
    if jsn.has('outcome') or jsn.has('_outcome') then
        value.outcomeElement := parseEnum(jsn.path+'/outcome', jsn.node['outcome'], jsn.vObj['_outcome'], CODES_TFhirAuditEventOutcomeEnum, SYSTEMS_TFhirAuditEventOutcomeEnum);
    if jsn.has('outcomeDesc') or jsn.has('_outcomeDesc') then
        value.outcomeDescElement := parseString(jsn.node['outcomeDesc'], jsn.vObj['_outcomeDesc']);
    if jsn.has('purposeOfEvent') then
      iterateArray(jsn.vArr['purposeOfEvent'], value.purposeOfEventList, parseCodeableConcept);
    if jsn.has('agent') then
      iterateArray(jsn.vArr['agent'], value.agentList, parseAuditEventAgent);
    if jsn.has('source') then
        value.source := ParseAuditEventSource(jsn.vObj['source']);
    if jsn.has('entity') then
      iterateArray(jsn.vArr['entity'], value.entityList, parseAuditEventEntity);
end;

procedure TFHIRJsonComposer.ComposeAuditEvent(json : TJSONWriter; name : string; value : TFhirAuditEvent; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  ComposeCoding(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.subtypeList.Count > 0) then
  begin
    startArray(json, 'subtype', value.subtypeList, false);
    for i := 0 to value.subtypeList.Count - 1 do
      ComposeCoding(json, '', value.subtypeList[i]);
    finishArray(json, value.subtypeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'action', value.actionElement, CODES_TFhirAuditEventActionEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  ComposeInstantValue(json, 'recorded', value.recordedElement, false);
  ComposeInstantProps(json, 'recorded', value.recordedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'outcome', value.outcomeElement, CODES_TFhirAuditEventOutcomeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'outcomeDesc', value.outcomeDescElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'outcomeDesc', value.outcomeDescElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.purposeOfEventList.Count > 0) then
  begin
    startArray(json, 'purposeOfEvent', value.purposeOfEventList, false);
    for i := 0 to value.purposeOfEventList.Count - 1 do
      ComposeCodeableConcept(json, '', value.purposeOfEventList[i]);
    finishArray(json, value.purposeOfEventList);
  end;
  if (value.agentList.Count > 0) then
  begin
    startArray(json, 'agent', value.agentList, false);
    for i := 0 to value.agentList.Count - 1 do
      ComposeAuditEventAgent(json, '', value.agentList[i]);
    finishArray(json, value.agentList);
  end;
  ComposeAuditEventSource(json, 'source', value.source);
  if (SummaryOption in [soFull, soData]) and (value.entityList.Count > 0) then
  begin
    startArray(json, 'entity', value.entityList, false);
    for i := 0 to value.entityList.Count - 1 do
      ComposeAuditEventEntity(json, '', value.entityList[i]);
    finishArray(json, value.entityList);
  end;
end;

{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
procedure TFHIRJsonParser.ParseBasic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBasic(jsn)); 
end;

function TFHIRJsonParser.ParseBasic(jsn : TJsonObject) : TFhirBasic;
begin
  result := TFhirBasic.Create;
  try
    ParseBasicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBasicProperties(jsn : TJsonObject; value : TFhirBasic);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('created') or jsn.has('_created') then
        value.createdElement := parseDate(jsn.node['created'], jsn.vObj['_created']);
    if jsn.has('author') then
        value.author := ParseReference(jsn.vObj['author']);
end;

procedure TFHIRJsonComposer.ComposeBasic(json : TJSONWriter; name : string; value : TFhirBasic; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'author', value.author);
end;

{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
procedure TFHIRJsonParser.ParseBinary(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBinary(jsn)); 
end;

function TFHIRJsonParser.ParseBinary(jsn : TJsonObject) : TFhirBinary;
begin
  result := TFhirBinary.Create;
  try
    ParseBinaryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBinaryProperties(jsn : TJsonObject; value : TFhirBinary);
begin
    ParseResourceProperties(jsn, value);
    if jsn.has('contentType') or jsn.has('_contentType') then
        value.contentTypeElement := parseCode(jsn.node['contentType'], jsn.vObj['_contentType']);
    if jsn.has('securityContext') then
        value.securityContext := ParseReference(jsn.vObj['securityContext']);
    if jsn.has('data') or jsn.has('_data') then
        value.dataElement := parseBase64Binary(jsn.node['data'], jsn.vObj['_data']);
end;

procedure TFHIRJsonComposer.ComposeBinary(json : TJSONWriter; name : string; value : TFhirBinary; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  ComposeResourceProperties(json, value);
  ComposeCodeValue(json, 'contentType', value.contentTypeElement, false);
  ComposeCodeProps(json, 'contentType', value.contentTypeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'securityContext', value.securityContext);
  if (SummaryOption in [soFull, soData]) then
    ComposeBase64BinaryValue(json, 'data', value.dataElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBase64BinaryProps(json, 'data', value.dataElement, false);
end;

{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
procedure TFHIRJsonParser.ParseBiologicallyDerivedProductCollection(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBiologicallyDerivedProductCollection(jsn)); 
end;

function TFHIRJsonParser.ParseBiologicallyDerivedProductCollection(jsn : TJsonObject) : TFhirBiologicallyDerivedProductCollection;
begin
  result := TFhirBiologicallyDerivedProductCollection.Create;
  try
    ParseBiologicallyDerivedProductCollectionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductCollectionProperties(jsn : TJsonObject; value : TFhirBiologicallyDerivedProductCollection);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('collector') then
        value.collector := ParseReference(jsn.vObj['collector']);
    if jsn.has('source') then
        value.source := ParseReference(jsn.vObj['source']);
    if jsn.has('collectedPeriod') {a4} then
      value.collected := ParsePeriod(jsn.vObj['collectedPeriod']);
    if jsn.has('collectedDateTime') or jsn.has('_collectedDateTime') then
      value.collected := parseDateTime(jsn.node['collectedDateTime'], jsn.vObj['_collectedDateTime']);
end;

procedure TFHIRJsonComposer.ComposeBiologicallyDerivedProductCollection(json : TJSONWriter; name : string; value : TFhirBiologicallyDerivedProductCollection; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'collector', value.collector);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'source', value.source);
  if (SummaryOption in [soFull, soData]) and (value.collected is TFhirPeriod) then 
    ComposePeriod(json, 'collectedPeriod', TFhirPeriod(value.collected)) 
  else if (SummaryOption in [soFull, soData]) and (value.collected is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'collectedDateTime', TFhirDateTime(value.collected), false);
    ComposeDateTimeProps(json, 'collectedDateTime', TFhirDateTime(value.collected), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductProcessing(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBiologicallyDerivedProductProcessing(jsn)); 
end;

function TFHIRJsonParser.ParseBiologicallyDerivedProductProcessing(jsn : TJsonObject) : TFhirBiologicallyDerivedProductProcessing;
begin
  result := TFhirBiologicallyDerivedProductProcessing.Create;
  try
    ParseBiologicallyDerivedProductProcessingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductProcessingProperties(jsn : TJsonObject; value : TFhirBiologicallyDerivedProductProcessing);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('procedure') then
        value.procedure_ := ParseCodeableConcept(jsn.vObj['procedure']);
    if jsn.has('additive') then
        value.additive := ParseReference(jsn.vObj['additive']);
    if jsn.has('timePeriod') {a4} then
      value.time := ParsePeriod(jsn.vObj['timePeriod']);
    if jsn.has('timeDateTime') or jsn.has('_timeDateTime') then
      value.time := parseDateTime(jsn.node['timeDateTime'], jsn.vObj['_timeDateTime']);
end;

procedure TFHIRJsonComposer.ComposeBiologicallyDerivedProductProcessing(json : TJSONWriter; name : string; value : TFhirBiologicallyDerivedProductProcessing; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'procedure', value.procedure_);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'additive', value.additive);
  if (SummaryOption in [soFull, soData]) and (value.time is TFhirPeriod) then 
    ComposePeriod(json, 'timePeriod', TFhirPeriod(value.time)) 
  else if (SummaryOption in [soFull, soData]) and (value.time is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timeDateTime', TFhirDateTime(value.time), false);
    ComposeDateTimeProps(json, 'timeDateTime', TFhirDateTime(value.time), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductManipulation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBiologicallyDerivedProductManipulation(jsn)); 
end;

function TFHIRJsonParser.ParseBiologicallyDerivedProductManipulation(jsn : TJsonObject) : TFhirBiologicallyDerivedProductManipulation;
begin
  result := TFhirBiologicallyDerivedProductManipulation.Create;
  try
    ParseBiologicallyDerivedProductManipulationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductManipulationProperties(jsn : TJsonObject; value : TFhirBiologicallyDerivedProductManipulation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('timePeriod') {a4} then
      value.time := ParsePeriod(jsn.vObj['timePeriod']);
    if jsn.has('timeDateTime') or jsn.has('_timeDateTime') then
      value.time := parseDateTime(jsn.node['timeDateTime'], jsn.vObj['_timeDateTime']);
end;

procedure TFHIRJsonComposer.ComposeBiologicallyDerivedProductManipulation(json : TJSONWriter; name : string; value : TFhirBiologicallyDerivedProductManipulation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.time is TFhirPeriod) then 
    ComposePeriod(json, 'timePeriod', TFhirPeriod(value.time)) 
  else if (SummaryOption in [soFull, soData]) and (value.time is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timeDateTime', TFhirDateTime(value.time), false);
    ComposeDateTimeProps(json, 'timeDateTime', TFhirDateTime(value.time), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductStorage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBiologicallyDerivedProductStorage(jsn)); 
end;

function TFHIRJsonParser.ParseBiologicallyDerivedProductStorage(jsn : TJsonObject) : TFhirBiologicallyDerivedProductStorage;
begin
  result := TFhirBiologicallyDerivedProductStorage.Create;
  try
    ParseBiologicallyDerivedProductStorageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductStorageProperties(jsn : TJsonObject; value : TFhirBiologicallyDerivedProductStorage);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('temperature') or jsn.has('_temperature') then
        value.temperatureElement := parseDecimal(jsn.node['temperature'], jsn.vObj['_temperature']);
    if jsn.has('scale') or jsn.has('_scale') then
        value.scaleElement := parseEnum(jsn.path+'/scale', jsn.node['scale'], jsn.vObj['_scale'], CODES_TFhirBiologicallyDerivedProductStorageScaleEnum, SYSTEMS_TFhirBiologicallyDerivedProductStorageScaleEnum);
    if jsn.has('duration') then
        value.duration := ParsePeriod(jsn.vObj['duration']);
end;

procedure TFHIRJsonComposer.ComposeBiologicallyDerivedProductStorage(json : TJSONWriter; name : string; value : TFhirBiologicallyDerivedProductStorage; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'temperature', value.temperatureElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'temperature', value.temperatureElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'scale', value.scaleElement, CODES_TFhirBiologicallyDerivedProductStorageScaleEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'duration', value.duration);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProduct(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBiologicallyDerivedProduct(jsn)); 
end;

function TFHIRJsonParser.ParseBiologicallyDerivedProduct(jsn : TJsonObject) : TFhirBiologicallyDerivedProduct;
begin
  result := TFhirBiologicallyDerivedProduct.Create;
  try
    ParseBiologicallyDerivedProductProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBiologicallyDerivedProductProperties(jsn : TJsonObject; value : TFhirBiologicallyDerivedProduct);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('productCategory') or jsn.has('_productCategory') then
        value.productCategoryElement := parseEnum(jsn.path+'/productCategory', jsn.node['productCategory'], jsn.vObj['_productCategory'], CODES_TFhirBiologicallyDerivedProductCategoryEnum, SYSTEMS_TFhirBiologicallyDerivedProductCategoryEnum);
    if jsn.has('productCode') then
        value.productCode := ParseCodeableConcept(jsn.vObj['productCode']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirBiologicallyDerivedProductStatusEnum, SYSTEMS_TFhirBiologicallyDerivedProductStatusEnum);
    if jsn.has('request') then
      iterateArray(jsn.vArr['request'], value.requestList, parseReference);
    if jsn.has('quantity') or jsn.has('_quantity') then
        value.quantityElement := parseInteger(jsn.node['quantity'], jsn.vObj['_quantity']);
    if jsn.has('parent') then
      iterateArray(jsn.vArr['parent'], value.parentList, parseReference);
    if jsn.has('collection') then
        value.collection := ParseBiologicallyDerivedProductCollection(jsn.vObj['collection']);
    if jsn.has('processing') then
      iterateArray(jsn.vArr['processing'], value.processingList, parseBiologicallyDerivedProductProcessing);
    if jsn.has('manipulation') then
        value.manipulation := ParseBiologicallyDerivedProductManipulation(jsn.vObj['manipulation']);
    if jsn.has('storage') then
      iterateArray(jsn.vArr['storage'], value.storageList, parseBiologicallyDerivedProductStorage);
end;

procedure TFHIRJsonComposer.ComposeBiologicallyDerivedProduct(json : TJSONWriter; name : string; value : TFhirBiologicallyDerivedProduct; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'productCategory', value.productCategoryElement, CODES_TFhirBiologicallyDerivedProductCategoryEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'productCode', value.productCode);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirBiologicallyDerivedProductStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.requestList.Count > 0) then
  begin
    startArray(json, 'request', value.requestList, false);
    for i := 0 to value.requestList.Count - 1 do
      ComposeReference(json, '', value.requestList[i]);
    finishArray(json, value.requestList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'quantity', value.quantityElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'quantity', value.quantityElement, false);
  if (SummaryOption in [soFull, soData]) and (value.parentList.Count > 0) then
  begin
    startArray(json, 'parent', value.parentList, false);
    for i := 0 to value.parentList.Count - 1 do
      ComposeReference(json, '', value.parentList[i]);
    finishArray(json, value.parentList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBiologicallyDerivedProductCollection(json, 'collection', value.collection);
  if (SummaryOption in [soFull, soData]) and (value.processingList.Count > 0) then
  begin
    startArray(json, 'processing', value.processingList, false);
    for i := 0 to value.processingList.Count - 1 do
      ComposeBiologicallyDerivedProductProcessing(json, '', value.processingList[i]);
    finishArray(json, value.processingList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBiologicallyDerivedProductManipulation(json, 'manipulation', value.manipulation);
  if (SummaryOption in [soFull, soData]) and (value.storageList.Count > 0) then
  begin
    startArray(json, 'storage', value.storageList, false);
    for i := 0 to value.storageList.Count - 1 do
      ComposeBiologicallyDerivedProductStorage(json, '', value.storageList[i]);
    finishArray(json, value.storageList);
  end;
end;

{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
procedure TFHIRJsonParser.ParseBodyStructure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBodyStructure(jsn)); 
end;

function TFHIRJsonParser.ParseBodyStructure(jsn : TJsonObject) : TFhirBodyStructure;
begin
  result := TFhirBodyStructure.Create;
  try
    ParseBodyStructureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBodyStructureProperties(jsn : TJsonObject; value : TFhirBodyStructure);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        value.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);
    if jsn.has('morphology') then
        value.morphology := ParseCodeableConcept(jsn.vObj['morphology']);
    if jsn.has('location') then
        value.location := ParseCodeableConcept(jsn.vObj['location']);
    if jsn.has('locationQualifier') then
      iterateArray(jsn.vArr['locationQualifier'], value.locationQualifierList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('image') then
      iterateArray(jsn.vArr['image'], value.imageList, parseAttachment);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
end;

procedure TFHIRJsonComposer.ComposeBodyStructure(json : TJSONWriter; name : string; value : TFhirBodyStructure; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'morphology', value.morphology);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'location', value.location);
  if (SummaryOption in [soFull, soData]) and (value.locationQualifierList.Count > 0) then
  begin
    startArray(json, 'locationQualifier', value.locationQualifierList, false);
    for i := 0 to value.locationQualifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.locationQualifierList[i]);
    finishArray(json, value.locationQualifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.imageList.Count > 0) then
  begin
    startArray(json, 'image', value.imageList, false);
    for i := 0 to value.imageList.Count - 1 do
      ComposeAttachment(json, '', value.imageList[i]);
    finishArray(json, value.imageList);
  end;
  ComposeReference(json, 'patient', value.patient);
end;

{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
procedure TFHIRJsonParser.ParseBundleLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleLink(jsn)); 
end;

function TFHIRJsonParser.ParseBundleLink(jsn : TJsonObject) : TFhirBundleLink;
begin
  result := TFhirBundleLink.Create;
  try
    ParseBundleLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleLinkProperties(jsn : TJsonObject; value : TFhirBundleLink);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('relation') or jsn.has('_relation') then
        value.relationElement := parseString(jsn.node['relation'], jsn.vObj['_relation']);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
end;

procedure TFHIRJsonComposer.ComposeBundleLink(json : TJSONWriter; name : string; value : TFhirBundleLink; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'relation', value.relationElement, false);
  ComposeStringProps(json, 'relation', value.relationElement, false);
  ComposeUriValue(json, 'url', value.urlElement, false);
  ComposeUriProps(json, 'url', value.urlElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseBundleEntry(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleEntry(jsn)); 
end;

function TFHIRJsonParser.ParseBundleEntry(jsn : TJsonObject) : TFhirBundleEntry;
begin
  result := TFhirBundleEntry.Create;
  try
    ParseBundleEntryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleEntryProperties(jsn : TJsonObject; value : TFhirBundleEntry);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], value.link_List, parseBundleLink);
    if jsn.has('fullUrl') or jsn.has('_fullUrl') then
        value.fullUrlElement := parseUri(jsn.node['fullUrl'], jsn.vObj['_fullUrl']);
    if jsn.has('resource') then
        value.resource := ParseInnerResource(jsn.vObj['resource']);
    if jsn.has('search') then
        value.search := ParseBundleEntrySearch(jsn.vObj['search']);
    if jsn.has('request') then
        value.request := ParseBundleEntryRequest(jsn.vObj['request']);
    if jsn.has('response') then
        value.response := ParseBundleEntryResponse(jsn.vObj['response']);
end;

procedure TFHIRJsonComposer.ComposeBundleEntry(json : TJSONWriter; name : string; value : TFhirBundleEntry; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.link_List.Count > 0) then
  begin
    startArray(json, 'link', value.link_List, false);
    for i := 0 to value.link_List.Count - 1 do
      ComposeBundleLink(json, '', value.link_List[i]);
    finishArray(json, value.link_List);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'fullUrl', value.fullUrlElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'fullUrl', value.fullUrlElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(json, 'resource', value, value.resource);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntrySearch(json, 'search', value.search);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntryRequest(json, 'request', value.request);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntryResponse(json, 'response', value.response);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseBundleEntrySearch(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleEntrySearch(jsn)); 
end;

function TFHIRJsonParser.ParseBundleEntrySearch(jsn : TJsonObject) : TFhirBundleEntrySearch;
begin
  result := TFhirBundleEntrySearch.Create;
  try
    ParseBundleEntrySearchProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleEntrySearchProperties(jsn : TJsonObject; value : TFhirBundleEntrySearch);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('mode') or jsn.has('_mode') then
        value.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirSearchEntryModeEnum, SYSTEMS_TFhirSearchEntryModeEnum);
    if jsn.has('score') or jsn.has('_score') then
        value.scoreElement := parseDecimal(jsn.node['score'], jsn.vObj['_score']);
end;

procedure TFHIRJsonComposer.ComposeBundleEntrySearch(json : TJSONWriter; name : string; value : TFhirBundleEntrySearch; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumValue(json, 'mode', value.modeElement, CODES_TFhirSearchEntryModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalValue(json, 'score', value.scoreElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalProps(json, 'score', value.scoreElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseBundleEntryRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleEntryRequest(jsn)); 
end;

function TFHIRJsonParser.ParseBundleEntryRequest(jsn : TJsonObject) : TFhirBundleEntryRequest;
begin
  result := TFhirBundleEntryRequest.Create;
  try
    ParseBundleEntryRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleEntryRequestProperties(jsn : TJsonObject; value : TFhirBundleEntryRequest);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('method') or jsn.has('_method') then
        value.methodElement := parseEnum(jsn.path+'/method', jsn.node['method'], jsn.vObj['_method'], CODES_TFhirHTTPVerbEnum, SYSTEMS_TFhirHTTPVerbEnum);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('ifNoneMatch') or jsn.has('_ifNoneMatch') then
        value.ifNoneMatchElement := parseString(jsn.node['ifNoneMatch'], jsn.vObj['_ifNoneMatch']);
    if jsn.has('ifModifiedSince') or jsn.has('_ifModifiedSince') then
        value.ifModifiedSinceElement := parseInstant(jsn.node['ifModifiedSince'], jsn.vObj['_ifModifiedSince']);
    if jsn.has('ifMatch') or jsn.has('_ifMatch') then
        value.ifMatchElement := parseString(jsn.node['ifMatch'], jsn.vObj['_ifMatch']);
    if jsn.has('ifNoneExist') or jsn.has('_ifNoneExist') then
        value.ifNoneExistElement := parseString(jsn.node['ifNoneExist'], jsn.vObj['_ifNoneExist']);
end;

procedure TFHIRJsonComposer.ComposeBundleEntryRequest(json : TJSONWriter; name : string; value : TFhirBundleEntryRequest; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'method', value.methodElement, CODES_TFhirHTTPVerbEnum, false);
  ComposeUriValue(json, 'url', value.urlElement, false);
  ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'ifNoneMatch', value.ifNoneMatchElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'ifNoneMatch', value.ifNoneMatchElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantValue(json, 'ifModifiedSince', value.ifModifiedSinceElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantProps(json, 'ifModifiedSince', value.ifModifiedSinceElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'ifMatch', value.ifMatchElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'ifMatch', value.ifMatchElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'ifNoneExist', value.ifNoneExistElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'ifNoneExist', value.ifNoneExistElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseBundleEntryResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleEntryResponse(jsn)); 
end;

function TFHIRJsonParser.ParseBundleEntryResponse(jsn : TJsonObject) : TFhirBundleEntryResponse;
begin
  result := TFhirBundleEntryResponse.Create;
  try
    ParseBundleEntryResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleEntryResponseProperties(jsn : TJsonObject; value : TFhirBundleEntryResponse);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseString(jsn.node['status'], jsn.vObj['_status']);
    if jsn.has('location') or jsn.has('_location') then
        value.locationElement := parseUri(jsn.node['location'], jsn.vObj['_location']);
    if jsn.has('etag') or jsn.has('_etag') then
        value.etagElement := parseString(jsn.node['etag'], jsn.vObj['_etag']);
    if jsn.has('lastModified') or jsn.has('_lastModified') then
        value.lastModifiedElement := parseInstant(jsn.node['lastModified'], jsn.vObj['_lastModified']);
    if jsn.has('outcome') then
        value.outcome := ParseInnerResource(jsn.vObj['outcome']);
end;

procedure TFHIRJsonComposer.ComposeBundleEntryResponse(json : TJSONWriter; name : string; value : TFhirBundleEntryResponse; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'status', value.statusElement, false);
  ComposeStringProps(json, 'status', value.statusElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'location', value.locationElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'location', value.locationElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'etag', value.etagElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'etag', value.etagElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantValue(json, 'lastModified', value.lastModifiedElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantProps(json, 'lastModified', value.lastModifiedElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(json, 'outcome', value, value.outcome);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseBundle(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundle(jsn)); 
end;

function TFHIRJsonParser.ParseBundle(jsn : TJsonObject) : TFhirBundle;
begin
  result := TFhirBundle.Create;
  try
    ParseBundleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleProperties(jsn : TJsonObject; value : TFhirBundle);
begin
    ParseResourceProperties(jsn, value);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirBundleTypeEnum, SYSTEMS_TFhirBundleTypeEnum);
    if jsn.has('timestamp') or jsn.has('_timestamp') then
        value.timestampElement := parseInstant(jsn.node['timestamp'], jsn.vObj['_timestamp']);
    if jsn.has('total') or jsn.has('_total') then
        value.totalElement := parseUnsignedInt(jsn.node['total'], jsn.vObj['_total']);
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], value.link_List, parseBundleLink);
    if jsn.has('entry') then
      iterateArray(jsn.vArr['entry'], value.entryList, parseBundleEntry);
    if jsn.has('signature') then
        value.signature := ParseSignature(jsn.vObj['signature']);
end;

procedure TFHIRJsonComposer.ComposeBundle(json : TJSONWriter; name : string; value : TFhirBundle; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirBundleTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantValue(json, 'timestamp', value.timestampElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantProps(json, 'timestamp', value.timestampElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData, soCount]) then
    ComposeUnsignedIntValue(json, 'total', value.totalElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData, soCount]) then
    ComposeUnsignedIntProps(json, 'total', value.totalElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.link_List.Count > 0) then
  begin
    startArray(json, 'link', value.link_List, false);
    for i := 0 to value.link_List.Count - 1 do
      ComposeBundleLink(json, '', value.link_List[i]);
    finishArray(json, value.link_List);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.entryList.Count > 0) then
  begin
    startArray(json, 'entry', value.entryList, false);
    for i := 0 to value.entryList.Count - 1 do
      ComposeBundleEntry(json, '', value.entryList[i]);
    finishArray(json, value.entryList);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeSignature(json, 'signature', value.signature);
end;

{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
procedure TFHIRJsonParser.ParseCapabilityStatementSoftware(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementSoftware(jsn)); 
end;

function TFHIRJsonParser.ParseCapabilityStatementSoftware(jsn : TJsonObject) : TFhirCapabilityStatementSoftware;
begin
  result := TFhirCapabilityStatementSoftware.Create;
  try
    ParseCapabilityStatementSoftwareProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementSoftwareProperties(jsn : TJsonObject; value : TFhirCapabilityStatementSoftware);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('releaseDate') or jsn.has('_releaseDate') then
        value.releaseDateElement := parseDateTime(jsn.node['releaseDate'], jsn.vObj['_releaseDate']);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementSoftware(json : TJSONWriter; name : string; value : TFhirCapabilityStatementSoftware; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'releaseDate', value.releaseDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'releaseDate', value.releaseDateElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCapabilityStatementImplementation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementImplementation(jsn)); 
end;

function TFHIRJsonParser.ParseCapabilityStatementImplementation(jsn : TJsonObject) : TFhirCapabilityStatementImplementation;
begin
  result := TFhirCapabilityStatementImplementation.Create;
  try
    ParseCapabilityStatementImplementationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementImplementationProperties(jsn : TJsonObject; value : TFhirCapabilityStatementImplementation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUrl(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('custodian') then
        value.custodian := ParseReference(jsn.vObj['custodian']);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementImplementation(json : TJSONWriter; name : string; value : TFhirCapabilityStatementImplementation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'description', value.descriptionElement, false);
  ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrlValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrlProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'custodian', value.custodian);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRest(jsn)); 
end;

function TFHIRJsonParser.ParseCapabilityStatementRest(jsn : TJsonObject) : TFhirCapabilityStatementRest;
begin
  result := TFhirCapabilityStatementRest.Create;
  try
    ParseCapabilityStatementRestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestProperties(jsn : TJsonObject; value : TFhirCapabilityStatementRest);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('mode') or jsn.has('_mode') then
        value.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirRestfulCapabilityModeEnum, SYSTEMS_TFhirRestfulCapabilityModeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseMarkdown(jsn.node['documentation'], jsn.vObj['_documentation']);
    if jsn.has('security') then
        value.security := ParseCapabilityStatementRestSecurity(jsn.vObj['security']);
    if jsn.has('resource') then
      iterateArray(jsn.vArr['resource'], value.resourceList, parseCapabilityStatementRestResource);
    if jsn.has('interaction') then
      iterateArray(jsn.vArr['interaction'], value.interactionList, parseCapabilityStatementRestInteraction);
    if jsn.has('searchParam') then
      iterateArray(jsn.vArr['searchParam'], value.searchParamList, parseCapabilityStatementRestResourceSearchParam);
    if jsn.has('operation') then
      iterateArray(jsn.vArr['operation'], value.operationList, parseCapabilityStatementRestResourceOperation);
      if jsn.has('compartment') or jsn.has('_compartment') then
      iteratePrimitiveArray(jsn.vArr['compartment'], jsn.vArr['_compartment'], value.compartmentList, parseCanonical);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRest(json : TJSONWriter; name : string; value : TFhirCapabilityStatementRest; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'mode', value.modeElement, CODES_TFhirRestfulCapabilityModeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCapabilityStatementRestSecurity(json, 'security', value.security);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.resourceList.Count > 0) then
  begin
    startArray(json, 'resource', value.resourceList, false);
    for i := 0 to value.resourceList.Count - 1 do
      ComposeCapabilityStatementRestResource(json, '', value.resourceList[i]);
    finishArray(json, value.resourceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.interactionList.Count > 0) then
  begin
    startArray(json, 'interaction', value.interactionList, false);
    for i := 0 to value.interactionList.Count - 1 do
      ComposeCapabilityStatementRestInteraction(json, '', value.interactionList[i]);
    finishArray(json, value.interactionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.searchParamList.Count > 0) then
  begin
    startArray(json, 'searchParam', value.searchParamList, false);
    for i := 0 to value.searchParamList.Count - 1 do
      ComposeCapabilityStatementRestResourceSearchParam(json, '', value.searchParamList[i]);
    finishArray(json, value.searchParamList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.operationList.Count > 0) then
  begin
    startArray(json, 'operation', value.operationList, false);
    for i := 0 to value.operationList.Count - 1 do
      ComposeCapabilityStatementRestResourceOperation(json, '', value.operationList[i]);
    finishArray(json, value.operationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.compartmentList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.compartmentList.Count - 1 do
    begin
      ext := ext or ((value.compartmentList[i].id <> '') or (value.compartmentList[i].hasExtensionList) {no-comments or (value.compartmentList[i].hasComments)});
      val := val or (value.compartmentList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'compartment', value.compartmentList, true);
      for i := 0 to value.compartmentList.Count - 1 do
        ComposeCanonicalValue(json, '', value.compartmentList[i], true);
      finishArray(json, value.compartmentList);
    end;
    if ext then
    begin
      startArray(json, '_compartment', value.compartmentList, false);
      for i := 0 to value.compartmentList.Count - 1 do
        ComposeCanonicalProps(json, '', value.compartmentList[i], true);
      finishArray(json, value.compartmentList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestSecurity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestSecurity(jsn)); 
end;

function TFHIRJsonParser.ParseCapabilityStatementRestSecurity(jsn : TJsonObject) : TFhirCapabilityStatementRestSecurity;
begin
  result := TFhirCapabilityStatementRestSecurity.Create;
  try
    ParseCapabilityStatementRestSecurityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestSecurityProperties(jsn : TJsonObject; value : TFhirCapabilityStatementRestSecurity);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('cors') or jsn.has('_cors') then
        value.corsElement := parseBoolean(jsn.node['cors'], jsn.vObj['_cors']);
    if jsn.has('service') then
      iterateArray(jsn.vArr['service'], value.serviceList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestSecurity(json : TJSONWriter; name : string; value : TFhirCapabilityStatementRestSecurity; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'cors', value.corsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'cors', value.corsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.serviceList.Count > 0) then
  begin
    startArray(json, 'service', value.serviceList, false);
    for i := 0 to value.serviceList.Count - 1 do
      ComposeCodeableConcept(json, '', value.serviceList[i]);
    finishArray(json, value.serviceList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestResource(jsn)); 
end;

function TFHIRJsonParser.ParseCapabilityStatementRestResource(jsn : TJsonObject) : TFhirCapabilityStatementRestResource;
begin
  result := TFhirCapabilityStatementRestResource.Create;
  try
    ParseCapabilityStatementRestResourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceProperties(jsn : TJsonObject; value : TFhirCapabilityStatementRestResource);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') or jsn.has('_profile') then
        value.profileElement := parseCanonical(jsn.node['profile'], jsn.vObj['_profile']);
      if jsn.has('supportedProfile') or jsn.has('_supportedProfile') then
      iteratePrimitiveArray(jsn.vArr['supportedProfile'], jsn.vArr['_supportedProfile'], value.supportedProfileList, parseCanonical);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseMarkdown(jsn.node['documentation'], jsn.vObj['_documentation']);
    if jsn.has('interaction') then
      iterateArray(jsn.vArr['interaction'], value.interactionList, parseCapabilityStatementRestResourceInteraction);
    if jsn.has('versioning') or jsn.has('_versioning') then
        value.versioningElement := parseEnum(jsn.path+'/versioning', jsn.node['versioning'], jsn.vObj['_versioning'], CODES_TFhirResourceVersionPolicyEnum, SYSTEMS_TFhirResourceVersionPolicyEnum);
    if jsn.has('readHistory') or jsn.has('_readHistory') then
        value.readHistoryElement := parseBoolean(jsn.node['readHistory'], jsn.vObj['_readHistory']);
    if jsn.has('updateCreate') or jsn.has('_updateCreate') then
        value.updateCreateElement := parseBoolean(jsn.node['updateCreate'], jsn.vObj['_updateCreate']);
    if jsn.has('conditionalCreate') or jsn.has('_conditionalCreate') then
        value.conditionalCreateElement := parseBoolean(jsn.node['conditionalCreate'], jsn.vObj['_conditionalCreate']);
    if jsn.has('conditionalRead') or jsn.has('_conditionalRead') then
        value.conditionalReadElement := parseEnum(jsn.path+'/conditionalRead', jsn.node['conditionalRead'], jsn.vObj['_conditionalRead'], CODES_TFhirConditionalReadStatusEnum, SYSTEMS_TFhirConditionalReadStatusEnum);
    if jsn.has('conditionalUpdate') or jsn.has('_conditionalUpdate') then
        value.conditionalUpdateElement := parseBoolean(jsn.node['conditionalUpdate'], jsn.vObj['_conditionalUpdate']);
    if jsn.has('conditionalDelete') or jsn.has('_conditionalDelete') then
        value.conditionalDeleteElement := parseEnum(jsn.path+'/conditionalDelete', jsn.node['conditionalDelete'], jsn.vObj['_conditionalDelete'], CODES_TFhirConditionalDeleteStatusEnum, SYSTEMS_TFhirConditionalDeleteStatusEnum);
    if jsn.has('referencePolicy') or jsn.has('_referencePolicy') then
      iterateEnumArray(jsn.vArr['referencePolicy'], jsn.vArr['_referencePolicy'], jsn.path+'/referencePolicy', value.referencePolicyList, parseEnum, CODES_TFhirReferenceHandlingPolicyEnum, SYSTEMS_TFhirReferenceHandlingPolicyEnum);
      if jsn.has('searchInclude') or jsn.has('_searchInclude') then
      iteratePrimitiveArray(jsn.vArr['searchInclude'], jsn.vArr['_searchInclude'], value.searchIncludeList, parseString);
      if jsn.has('searchRevInclude') or jsn.has('_searchRevInclude') then
      iteratePrimitiveArray(jsn.vArr['searchRevInclude'], jsn.vArr['_searchRevInclude'], value.searchRevIncludeList, parseString);
    if jsn.has('searchParam') then
      iterateArray(jsn.vArr['searchParam'], value.searchParamList, parseCapabilityStatementRestResourceSearchParam);
    if jsn.has('operation') then
      iterateArray(jsn.vArr['operation'], value.operationList, parseCapabilityStatementRestResourceOperation);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestResource(json : TJSONWriter; name : string; value : TFhirCapabilityStatementRestResource; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirResourceTypesEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'profile', value.profileElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'profile', value.profileElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.supportedProfileList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.supportedProfileList.Count - 1 do
    begin
      ext := ext or ((value.supportedProfileList[i].id <> '') or (value.supportedProfileList[i].hasExtensionList) {no-comments or (value.supportedProfileList[i].hasComments)});
      val := val or (value.supportedProfileList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'supportedProfile', value.supportedProfileList, true);
      for i := 0 to value.supportedProfileList.Count - 1 do
        ComposeCanonicalValue(json, '', value.supportedProfileList[i], true);
      finishArray(json, value.supportedProfileList);
    end;
    if ext then
    begin
      startArray(json, '_supportedProfile', value.supportedProfileList, false);
      for i := 0 to value.supportedProfileList.Count - 1 do
        ComposeCanonicalProps(json, '', value.supportedProfileList[i], true);
      finishArray(json, value.supportedProfileList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) and (value.interactionList.Count > 0) then
  begin
    startArray(json, 'interaction', value.interactionList, false);
    for i := 0 to value.interactionList.Count - 1 do
      ComposeCapabilityStatementRestResourceInteraction(json, '', value.interactionList[i]);
    finishArray(json, value.interactionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'versioning', value.versioningElement, CODES_TFhirResourceVersionPolicyEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'readHistory', value.readHistoryElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'readHistory', value.readHistoryElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'updateCreate', value.updateCreateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'updateCreate', value.updateCreateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'conditionalCreate', value.conditionalCreateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'conditionalCreate', value.conditionalCreateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'conditionalRead', value.conditionalReadElement, CODES_TFhirConditionalReadStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'conditionalUpdate', value.conditionalUpdateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'conditionalUpdate', value.conditionalUpdateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'conditionalDelete', value.conditionalDeleteElement, CODES_TFhirConditionalDeleteStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.referencePolicyList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.referencePolicyList.Count - 1 do
    begin
      val := val or (value.referencePolicyList[i].hasPrimitiveValue);
      ext := ext or ((value.referencePolicyList[i].id <> '') or (value.referencePolicyList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'referencePolicy', value.referencePolicyList, true);
      for i := 0 to value.referencePolicyList.Count - 1 do
        ComposeEnumValue(json, '', value.referencePolicyList[i], CODES_TFhirReferenceHandlingPolicyEnum, true);
      finishArray(json, value.referencePolicyList);
    end;
    if ext then
    begin
      startArray(json, '_referencePolicy', value.referencePolicyList, false);
      for i := 0 to value.referencePolicyList.Count - 1 do
        ComposeEnumProps(json, '', value.referencePolicyList[i], CODES_TFhirReferenceHandlingPolicyEnum, true);
      finishArray(json, value.referencePolicyList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.searchIncludeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.searchIncludeList.Count - 1 do
    begin
      ext := ext or ((value.searchIncludeList[i].id <> '') or (value.searchIncludeList[i].hasExtensionList) {no-comments or (value.searchIncludeList[i].hasComments)});
      val := val or (value.searchIncludeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'searchInclude', value.searchIncludeList, true);
      for i := 0 to value.searchIncludeList.Count - 1 do
        ComposeStringValue(json, '', value.searchIncludeList[i], true);
      finishArray(json, value.searchIncludeList);
    end;
    if ext then
    begin
      startArray(json, '_searchInclude', value.searchIncludeList, false);
      for i := 0 to value.searchIncludeList.Count - 1 do
        ComposeStringProps(json, '', value.searchIncludeList[i], true);
      finishArray(json, value.searchIncludeList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.searchRevIncludeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.searchRevIncludeList.Count - 1 do
    begin
      ext := ext or ((value.searchRevIncludeList[i].id <> '') or (value.searchRevIncludeList[i].hasExtensionList) {no-comments or (value.searchRevIncludeList[i].hasComments)});
      val := val or (value.searchRevIncludeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'searchRevInclude', value.searchRevIncludeList, true);
      for i := 0 to value.searchRevIncludeList.Count - 1 do
        ComposeStringValue(json, '', value.searchRevIncludeList[i], true);
      finishArray(json, value.searchRevIncludeList);
    end;
    if ext then
    begin
      startArray(json, '_searchRevInclude', value.searchRevIncludeList, false);
      for i := 0 to value.searchRevIncludeList.Count - 1 do
        ComposeStringProps(json, '', value.searchRevIncludeList[i], true);
      finishArray(json, value.searchRevIncludeList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.searchParamList.Count > 0) then
  begin
    startArray(json, 'searchParam', value.searchParamList, false);
    for i := 0 to value.searchParamList.Count - 1 do
      ComposeCapabilityStatementRestResourceSearchParam(json, '', value.searchParamList[i]);
    finishArray(json, value.searchParamList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.operationList.Count > 0) then
  begin
    startArray(json, 'operation', value.operationList, false);
    for i := 0 to value.operationList.Count - 1 do
      ComposeCapabilityStatementRestResourceOperation(json, '', value.operationList[i]);
    finishArray(json, value.operationList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceInteraction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestResourceInteraction(jsn)); 
end;

function TFHIRJsonParser.ParseCapabilityStatementRestResourceInteraction(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceInteraction;
begin
  result := TFhirCapabilityStatementRestResourceInteraction.Create;
  try
    ParseCapabilityStatementRestResourceInteractionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceInteractionProperties(jsn : TJsonObject; value : TFhirCapabilityStatementRestResourceInteraction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirTypeRestfulInteractionEnum, SYSTEMS_TFhirTypeRestfulInteractionEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseMarkdown(jsn.node['documentation'], jsn.vObj['_documentation']);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestResourceInteraction(json : TJSONWriter; name : string; value : TFhirCapabilityStatementRestResourceInteraction; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'code', value.codeElement, CODES_TFhirTypeRestfulInteractionEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'documentation', value.documentationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceSearchParam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestResourceSearchParam(jsn)); 
end;

function TFHIRJsonParser.ParseCapabilityStatementRestResourceSearchParam(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceSearchParam;
begin
  result := TFhirCapabilityStatementRestResourceSearchParam.Create;
  try
    ParseCapabilityStatementRestResourceSearchParamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceSearchParamProperties(jsn : TJsonObject; value : TFhirCapabilityStatementRestResourceSearchParam);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('definition') or jsn.has('_definition') then
        value.definitionElement := parseCanonical(jsn.node['definition'], jsn.vObj['_definition']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseMarkdown(jsn.node['documentation'], jsn.vObj['_documentation']);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestResourceSearchParam(json : TJSONWriter; name : string; value : TFhirCapabilityStatementRestResourceSearchParam; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalValue(json, 'definition', value.definitionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalProps(json, 'definition', value.definitionElement, false);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirSearchParamTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'documentation', value.documentationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestResourceOperation(jsn)); 
end;

function TFHIRJsonParser.ParseCapabilityStatementRestResourceOperation(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceOperation;
begin
  result := TFhirCapabilityStatementRestResourceOperation.Create;
  try
    ParseCapabilityStatementRestResourceOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceOperationProperties(jsn : TJsonObject; value : TFhirCapabilityStatementRestResourceOperation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('definition') or jsn.has('_definition') then
        value.definitionElement := parseCanonical(jsn.node['definition'], jsn.vObj['_definition']);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseMarkdown(jsn.node['documentation'], jsn.vObj['_documentation']);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestResourceOperation(json : TJSONWriter; name : string; value : TFhirCapabilityStatementRestResourceOperation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  ComposeCanonicalValue(json, 'definition', value.definitionElement, false);
  ComposeCanonicalProps(json, 'definition', value.definitionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'documentation', value.documentationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestInteraction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestInteraction(jsn)); 
end;

function TFHIRJsonParser.ParseCapabilityStatementRestInteraction(jsn : TJsonObject) : TFhirCapabilityStatementRestInteraction;
begin
  result := TFhirCapabilityStatementRestInteraction.Create;
  try
    ParseCapabilityStatementRestInteractionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestInteractionProperties(jsn : TJsonObject; value : TFhirCapabilityStatementRestInteraction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirSystemRestfulInteractionEnum, SYSTEMS_TFhirSystemRestfulInteractionEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseMarkdown(jsn.node['documentation'], jsn.vObj['_documentation']);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestInteraction(json : TJSONWriter; name : string; value : TFhirCapabilityStatementRestInteraction; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'code', value.codeElement, CODES_TFhirSystemRestfulInteractionEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'documentation', value.documentationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessaging(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementMessaging(jsn)); 
end;

function TFHIRJsonParser.ParseCapabilityStatementMessaging(jsn : TJsonObject) : TFhirCapabilityStatementMessaging;
begin
  result := TFhirCapabilityStatementMessaging.Create;
  try
    ParseCapabilityStatementMessagingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingProperties(jsn : TJsonObject; value : TFhirCapabilityStatementMessaging);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], value.endpointList, parseCapabilityStatementMessagingEndpoint);
    if jsn.has('reliableCache') or jsn.has('_reliableCache') then
        value.reliableCacheElement := parseUnsignedInt(jsn.node['reliableCache'], jsn.vObj['_reliableCache']);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseMarkdown(jsn.node['documentation'], jsn.vObj['_documentation']);
    if jsn.has('supportedMessage') then
      iterateArray(jsn.vArr['supportedMessage'], value.supportedMessageList, parseCapabilityStatementMessagingSupportedMessage);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementMessaging(json : TJSONWriter; name : string; value : TFhirCapabilityStatementMessaging; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.endpointList.Count > 0) then
  begin
    startArray(json, 'endpoint', value.endpointList, false);
    for i := 0 to value.endpointList.Count - 1 do
      ComposeCapabilityStatementMessagingEndpoint(json, '', value.endpointList[i]);
    finishArray(json, value.endpointList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'reliableCache', value.reliableCacheElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'reliableCache', value.reliableCacheElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.supportedMessageList.Count > 0) then
  begin
    startArray(json, 'supportedMessage', value.supportedMessageList, false);
    for i := 0 to value.supportedMessageList.Count - 1 do
      ComposeCapabilityStatementMessagingSupportedMessage(json, '', value.supportedMessageList[i]);
    finishArray(json, value.supportedMessageList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingEndpoint(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementMessagingEndpoint(jsn)); 
end;

function TFHIRJsonParser.ParseCapabilityStatementMessagingEndpoint(jsn : TJsonObject) : TFhirCapabilityStatementMessagingEndpoint;
begin
  result := TFhirCapabilityStatementMessagingEndpoint.Create;
  try
    ParseCapabilityStatementMessagingEndpointProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingEndpointProperties(jsn : TJsonObject; value : TFhirCapabilityStatementMessagingEndpoint);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('protocol') then
        value.protocol := ParseCoding(jsn.vObj['protocol']);
    if jsn.has('address') or jsn.has('_address') then
        value.addressElement := parseUrl(jsn.node['address'], jsn.vObj['_address']);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementMessagingEndpoint(json : TJSONWriter; name : string; value : TFhirCapabilityStatementMessagingEndpoint; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCoding(json, 'protocol', value.protocol);
  ComposeUrlValue(json, 'address', value.addressElement, false);
  ComposeUrlProps(json, 'address', value.addressElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingSupportedMessage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementMessagingSupportedMessage(jsn)); 
end;

function TFHIRJsonParser.ParseCapabilityStatementMessagingSupportedMessage(jsn : TJsonObject) : TFhirCapabilityStatementMessagingSupportedMessage;
begin
  result := TFhirCapabilityStatementMessagingSupportedMessage.Create;
  try
    ParseCapabilityStatementMessagingSupportedMessageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingSupportedMessageProperties(jsn : TJsonObject; value : TFhirCapabilityStatementMessagingSupportedMessage);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('mode') or jsn.has('_mode') then
        value.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirEventCapabilityModeEnum, SYSTEMS_TFhirEventCapabilityModeEnum);
    if jsn.has('definition') or jsn.has('_definition') then
        value.definitionElement := parseCanonical(jsn.node['definition'], jsn.vObj['_definition']);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementMessagingSupportedMessage(json : TJSONWriter; name : string; value : TFhirCapabilityStatementMessagingSupportedMessage; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'mode', value.modeElement, CODES_TFhirEventCapabilityModeEnum, false);
  ComposeCanonicalValue(json, 'definition', value.definitionElement, false);
  ComposeCanonicalProps(json, 'definition', value.definitionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCapabilityStatementDocument(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementDocument(jsn)); 
end;

function TFHIRJsonParser.ParseCapabilityStatementDocument(jsn : TJsonObject) : TFhirCapabilityStatementDocument;
begin
  result := TFhirCapabilityStatementDocument.Create;
  try
    ParseCapabilityStatementDocumentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementDocumentProperties(jsn : TJsonObject; value : TFhirCapabilityStatementDocument);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('mode') or jsn.has('_mode') then
        value.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirDocumentModeEnum, SYSTEMS_TFhirDocumentModeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseMarkdown(jsn.node['documentation'], jsn.vObj['_documentation']);
    if jsn.has('profile') or jsn.has('_profile') then
        value.profileElement := parseCanonical(jsn.node['profile'], jsn.vObj['_profile']);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementDocument(json : TJSONWriter; name : string; value : TFhirCapabilityStatementDocument; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'mode', value.modeElement, CODES_TFhirDocumentModeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'documentation', value.documentationElement, false);
  ComposeCanonicalValue(json, 'profile', value.profileElement, false);
  ComposeCanonicalProps(json, 'profile', value.profileElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCapabilityStatement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatement(jsn)); 
end;

function TFHIRJsonParser.ParseCapabilityStatement(jsn : TJsonObject) : TFhirCapabilityStatement;
begin
  result := TFhirCapabilityStatement.Create;
  try
    ParseCapabilityStatementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementProperties(jsn : TJsonObject; value : TFhirCapabilityStatement);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('kind') or jsn.has('_kind') then
        value.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirCapabilityStatementKindEnum, SYSTEMS_TFhirCapabilityStatementKindEnum);
      if jsn.has('instantiates') or jsn.has('_instantiates') then
      iteratePrimitiveArray(jsn.vArr['instantiates'], jsn.vArr['_instantiates'], value.instantiatesList, parseCanonical);
      if jsn.has('imports') or jsn.has('_imports') then
      iteratePrimitiveArray(jsn.vArr['imports'], jsn.vArr['_imports'], value.importsList, parseCanonical);
    if jsn.has('software') then
        value.software := ParseCapabilityStatementSoftware(jsn.vObj['software']);
    if jsn.has('implementation') then
        value.implementation_ := ParseCapabilityStatementImplementation(jsn.vObj['implementation']);
    if jsn.has('fhirVersion') or jsn.has('_fhirVersion') then
        value.fhirVersionElement := parseEnum(jsn.path+'/fhirVersion', jsn.node['fhirVersion'], jsn.vObj['_fhirVersion'], CODES_TFhirFHIRVersionEnum, SYSTEMS_TFhirFHIRVersionEnum);
      if jsn.has('format') or jsn.has('_format') then
      iteratePrimitiveArray(jsn.vArr['format'], jsn.vArr['_format'], value.formatList, parseCode);
      if jsn.has('patchFormat') or jsn.has('_patchFormat') then
      iteratePrimitiveArray(jsn.vArr['patchFormat'], jsn.vArr['_patchFormat'], value.patchFormatList, parseCode);
      if jsn.has('implementationGuide') or jsn.has('_implementationGuide') then
      iteratePrimitiveArray(jsn.vArr['implementationGuide'], jsn.vArr['_implementationGuide'], value.implementationGuideList, parseCanonical);
    if jsn.has('rest') then
      iterateArray(jsn.vArr['rest'], value.restList, parseCapabilityStatementRest);
    if jsn.has('messaging') then
      iterateArray(jsn.vArr['messaging'], value.messagingList, parseCapabilityStatementMessaging);
    if jsn.has('document') then
      iterateArray(jsn.vArr['document'], value.documentList, parseCapabilityStatementDocument);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatement(json : TJSONWriter; name : string; value : TFhirCapabilityStatement; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  ComposeDateTimeValue(json, 'date', value.dateElement, false);
  ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  ComposeEnumValue(json, 'kind', value.kindElement, CODES_TFhirCapabilityStatementKindEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesList[i].id <> '') or (value.instantiatesList[i].hasExtensionList) {no-comments or (value.instantiatesList[i].hasComments)});
      val := val or (value.instantiatesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiates', value.instantiatesList, true);
      for i := 0 to value.instantiatesList.Count - 1 do
        ComposeCanonicalValue(json, '', value.instantiatesList[i], true);
      finishArray(json, value.instantiatesList);
    end;
    if ext then
    begin
      startArray(json, '_instantiates', value.instantiatesList, false);
      for i := 0 to value.instantiatesList.Count - 1 do
        ComposeCanonicalProps(json, '', value.instantiatesList[i], true);
      finishArray(json, value.instantiatesList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.importsList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.importsList.Count - 1 do
    begin
      ext := ext or ((value.importsList[i].id <> '') or (value.importsList[i].hasExtensionList) {no-comments or (value.importsList[i].hasComments)});
      val := val or (value.importsList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'imports', value.importsList, true);
      for i := 0 to value.importsList.Count - 1 do
        ComposeCanonicalValue(json, '', value.importsList[i], true);
      finishArray(json, value.importsList);
    end;
    if ext then
    begin
      startArray(json, '_imports', value.importsList, false);
      for i := 0 to value.importsList.Count - 1 do
        ComposeCanonicalProps(json, '', value.importsList[i], true);
      finishArray(json, value.importsList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCapabilityStatementSoftware(json, 'software', value.software);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCapabilityStatementImplementation(json, 'implementation', value.implementation_);
  ComposeEnumValue(json, 'fhirVersion', value.fhirVersionElement, CODES_TFhirFHIRVersionEnum, false);
  if (value.formatList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.formatList.Count - 1 do
    begin
      ext := ext or ((value.formatList[i].id <> '') or (value.formatList[i].hasExtensionList) {no-comments or (value.formatList[i].hasComments)});
      val := val or (value.formatList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'format', value.formatList, true);
      for i := 0 to value.formatList.Count - 1 do
        ComposeCodeValue(json, '', value.formatList[i], true);
      finishArray(json, value.formatList);
    end;
    if ext then
    begin
      startArray(json, '_format', value.formatList, false);
      for i := 0 to value.formatList.Count - 1 do
        ComposeCodeProps(json, '', value.formatList[i], true);
      finishArray(json, value.formatList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.patchFormatList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.patchFormatList.Count - 1 do
    begin
      ext := ext or ((value.patchFormatList[i].id <> '') or (value.patchFormatList[i].hasExtensionList) {no-comments or (value.patchFormatList[i].hasComments)});
      val := val or (value.patchFormatList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'patchFormat', value.patchFormatList, true);
      for i := 0 to value.patchFormatList.Count - 1 do
        ComposeCodeValue(json, '', value.patchFormatList[i], true);
      finishArray(json, value.patchFormatList);
    end;
    if ext then
    begin
      startArray(json, '_patchFormat', value.patchFormatList, false);
      for i := 0 to value.patchFormatList.Count - 1 do
        ComposeCodeProps(json, '', value.patchFormatList[i], true);
      finishArray(json, value.patchFormatList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.implementationGuideList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.implementationGuideList.Count - 1 do
    begin
      ext := ext or ((value.implementationGuideList[i].id <> '') or (value.implementationGuideList[i].hasExtensionList) {no-comments or (value.implementationGuideList[i].hasComments)});
      val := val or (value.implementationGuideList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'implementationGuide', value.implementationGuideList, true);
      for i := 0 to value.implementationGuideList.Count - 1 do
        ComposeCanonicalValue(json, '', value.implementationGuideList[i], true);
      finishArray(json, value.implementationGuideList);
    end;
    if ext then
    begin
      startArray(json, '_implementationGuide', value.implementationGuideList, false);
      for i := 0 to value.implementationGuideList.Count - 1 do
        ComposeCanonicalProps(json, '', value.implementationGuideList[i], true);
      finishArray(json, value.implementationGuideList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.restList.Count > 0) then
  begin
    startArray(json, 'rest', value.restList, false);
    for i := 0 to value.restList.Count - 1 do
      ComposeCapabilityStatementRest(json, '', value.restList[i]);
    finishArray(json, value.restList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.messagingList.Count > 0) then
  begin
    startArray(json, 'messaging', value.messagingList, false);
    for i := 0 to value.messagingList.Count - 1 do
      ComposeCapabilityStatementMessaging(json, '', value.messagingList[i]);
    finishArray(json, value.messagingList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.documentList.Count > 0) then
  begin
    startArray(json, 'document', value.documentList, false);
    for i := 0 to value.documentList.Count - 1 do
      ComposeCapabilityStatementDocument(json, '', value.documentList[i]);
    finishArray(json, value.documentList);
  end;
end;

{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
procedure TFHIRJsonParser.ParseCarePlanActivity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCarePlanActivity(jsn)); 
end;

function TFHIRJsonParser.ParseCarePlanActivity(jsn : TJsonObject) : TFhirCarePlanActivity;
begin
  result := TFhirCarePlanActivity.Create;
  try
    ParseCarePlanActivityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCarePlanActivityProperties(jsn : TJsonObject; value : TFhirCarePlanActivity);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('outcomeCodeableConcept') then
      iterateArray(jsn.vArr['outcomeCodeableConcept'], value.outcomeCodeableConceptList, parseCodeableConcept);
    if jsn.has('outcomeReference') then
      iterateArray(jsn.vArr['outcomeReference'], value.outcomeReferenceList, parseReference);
    if jsn.has('progress') then
      iterateArray(jsn.vArr['progress'], value.progressList, parseAnnotation);
    if jsn.has('reference') then
        value.reference := ParseReference(jsn.vObj['reference']);
    if jsn.has('detail') then
        value.detail := ParseCarePlanActivityDetail(jsn.vObj['detail']);
end;

procedure TFHIRJsonComposer.ComposeCarePlanActivity(json : TJSONWriter; name : string; value : TFhirCarePlanActivity; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.outcomeCodeableConceptList.Count > 0) then
  begin
    startArray(json, 'outcomeCodeableConcept', value.outcomeCodeableConceptList, false);
    for i := 0 to value.outcomeCodeableConceptList.Count - 1 do
      ComposeCodeableConcept(json, '', value.outcomeCodeableConceptList[i]);
    finishArray(json, value.outcomeCodeableConceptList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.outcomeReferenceList.Count > 0) then
  begin
    startArray(json, 'outcomeReference', value.outcomeReferenceList, false);
    for i := 0 to value.outcomeReferenceList.Count - 1 do
      ComposeReference(json, '', value.outcomeReferenceList[i]);
    finishArray(json, value.outcomeReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.progressList.Count > 0) then
  begin
    startArray(json, 'progress', value.progressList, false);
    for i := 0 to value.progressList.Count - 1 do
      ComposeAnnotation(json, '', value.progressList[i]);
    finishArray(json, value.progressList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'reference', value.reference);
  if (SummaryOption in [soFull, soData]) then
    ComposeCarePlanActivityDetail(json, 'detail', value.detail);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCarePlanActivityDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCarePlanActivityDetail(jsn)); 
end;

function TFHIRJsonParser.ParseCarePlanActivityDetail(jsn : TJsonObject) : TFhirCarePlanActivityDetail;
begin
  result := TFhirCarePlanActivityDetail.Create;
  try
    ParseCarePlanActivityDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCarePlanActivityDetailProperties(jsn : TJsonObject; value : TFhirCarePlanActivityDetail);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('kind') or jsn.has('_kind') then
        value.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirCarePlanActivityKindEnum, SYSTEMS_TFhirCarePlanActivityKindEnum);
      if jsn.has('instantiatesCanonical') or jsn.has('_instantiatesCanonical') then
      iteratePrimitiveArray(jsn.vArr['instantiatesCanonical'], jsn.vArr['_instantiatesCanonical'], value.instantiatesCanonicalList, parseCanonical);
      if jsn.has('instantiatesUri') or jsn.has('_instantiatesUri') then
      iteratePrimitiveArray(jsn.vArr['instantiatesUri'], jsn.vArr['_instantiatesUri'], value.instantiatesUriList, parseUri);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('goal') then
      iterateArray(jsn.vArr['goal'], value.goalList, parseReference);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirCarePlanActivityStatusEnum, SYSTEMS_TFhirCarePlanActivityStatusEnum);
    if jsn.has('statusReason') then
        value.statusReason := ParseCodeableConcept(jsn.vObj['statusReason']);
    if jsn.has('doNotPerform') or jsn.has('_doNotPerform') then
        value.doNotPerformElement := parseBoolean(jsn.node['doNotPerform'], jsn.vObj['_doNotPerform']);
    if jsn.has('scheduledTiming') {a4} then
      value.scheduled := ParseTiming(jsn.vObj['scheduledTiming']);
    if jsn.has('scheduledPeriod') {a4} then
      value.scheduled := ParsePeriod(jsn.vObj['scheduledPeriod']);
    if jsn.has('scheduledString') or jsn.has('_scheduledString') then
      value.scheduled := parseString(jsn.node['scheduledString'], jsn.vObj['_scheduledString']);
    if jsn.has('location') then
        value.location := ParseReference(jsn.vObj['location']);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], value.performerList, parseReference);
    if jsn.has('productCodeableConcept') {a4} then
      value.product := ParseCodeableConcept(jsn.vObj['productCodeableConcept']);
    if jsn.has('productReference') {a3} then
      value.product := ParseReference(jsn.vObj['productReference']);
    if jsn.has('dailyAmount') then
        value.dailyAmount := ParseQuantity(jsn.vObj['dailyAmount']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
end;

procedure TFHIRJsonComposer.ComposeCarePlanActivityDetail(json : TJSONWriter; name : string; value : TFhirCarePlanActivityDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'kind', value.kindElement, CODES_TFhirCarePlanActivityKindEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.instantiatesCanonicalList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesCanonicalList[i].id <> '') or (value.instantiatesCanonicalList[i].hasExtensionList) {no-comments or (value.instantiatesCanonicalList[i].hasComments)});
      val := val or (value.instantiatesCanonicalList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesCanonical', value.instantiatesCanonicalList, true);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalValue(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesCanonical', value.instantiatesCanonicalList, false);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalProps(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.instantiatesUriList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesUriList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesUriList[i].id <> '') or (value.instantiatesUriList[i].hasExtensionList) {no-comments or (value.instantiatesUriList[i].hasComments)});
      val := val or (value.instantiatesUriList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesUri', value.instantiatesUriList, true);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriValue(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesUri', value.instantiatesUriList, false);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriProps(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.goalList.Count > 0) then
  begin
    startArray(json, 'goal', value.goalList, false);
    for i := 0 to value.goalList.Count - 1 do
      ComposeReference(json, '', value.goalList[i]);
    finishArray(json, value.goalList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirCarePlanActivityStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'statusReason', value.statusReason);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'doNotPerform', value.doNotPerformElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'doNotPerform', value.doNotPerformElement, false);
  if (SummaryOption in [soFull, soData]) and (value.scheduled is TFhirTiming) then 
    ComposeTiming(json, 'scheduledTiming', TFhirTiming(value.scheduled)) 
  else if (SummaryOption in [soFull, soData]) and (value.scheduled is TFhirPeriod) then 
    ComposePeriod(json, 'scheduledPeriod', TFhirPeriod(value.scheduled)) 
  else if (SummaryOption in [soFull, soData]) and (value.scheduled is TFhirString) then 
  begin
    ComposeStringValue(json, 'scheduledString', TFhirString(value.scheduled), false);
    ComposeStringProps(json, 'scheduledString', TFhirString(value.scheduled), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'location', value.location);
  if (SummaryOption in [soFull, soData]) and (value.performerList.Count > 0) then
  begin
    startArray(json, 'performer', value.performerList, false);
    for i := 0 to value.performerList.Count - 1 do
      ComposeReference(json, '', value.performerList[i]);
    finishArray(json, value.performerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.product is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'productCodeableConcept', TFhirCodeableConcept(value.product)) 
  else if (SummaryOption in [soFull, soData]) and (value.product is TFhirReference) then
    ComposeReference(json, 'productReference', TFhirReference(value.product));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'dailyAmount', value.dailyAmount);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCarePlan(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCarePlan(jsn)); 
end;

function TFHIRJsonParser.ParseCarePlan(jsn : TJsonObject) : TFhirCarePlan;
begin
  result := TFhirCarePlan.Create;
  try
    ParseCarePlanProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCarePlanProperties(jsn : TJsonObject; value : TFhirCarePlan);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
      if jsn.has('instantiatesCanonical') or jsn.has('_instantiatesCanonical') then
      iteratePrimitiveArray(jsn.vArr['instantiatesCanonical'], jsn.vArr['_instantiatesCanonical'], value.instantiatesCanonicalList, parseCanonical);
      if jsn.has('instantiatesUri') or jsn.has('_instantiatesUri') then
      iteratePrimitiveArray(jsn.vArr['instantiatesUri'], jsn.vArr['_instantiatesUri'], value.instantiatesUriList, parseUri);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], value.replacesList, parseReference);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], value.partOfList, parseReference);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('intent') or jsn.has('_intent') then
        value.intentElement := parseEnum(jsn.path+'/intent', jsn.node['intent'], jsn.vObj['_intent'], CODES_TFhirCarePlanIntentEnum, SYSTEMS_TFhirCarePlanIntentEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('created') or jsn.has('_created') then
        value.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);
    if jsn.has('author') then
        value.author := ParseReference(jsn.vObj['author']);
    if jsn.has('contributor') then
      iterateArray(jsn.vArr['contributor'], value.contributorList, parseReference);
    if jsn.has('careTeam') then
      iterateArray(jsn.vArr['careTeam'], value.careTeamList, parseReference);
    if jsn.has('addresses') then
      iterateArray(jsn.vArr['addresses'], value.addressesList, parseReference);
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], value.supportingInfoList, parseReference);
    if jsn.has('goal') then
      iterateArray(jsn.vArr['goal'], value.goalList, parseReference);
    if jsn.has('activity') then
      iterateArray(jsn.vArr['activity'], value.activityList, parseCarePlanActivity);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCarePlan(json : TJSONWriter; name : string; value : TFhirCarePlan; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesCanonicalList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesCanonicalList[i].id <> '') or (value.instantiatesCanonicalList[i].hasExtensionList) {no-comments or (value.instantiatesCanonicalList[i].hasComments)});
      val := val or (value.instantiatesCanonicalList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesCanonical', value.instantiatesCanonicalList, true);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalValue(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesCanonical', value.instantiatesCanonicalList, false);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalProps(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesUriList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesUriList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesUriList[i].id <> '') or (value.instantiatesUriList[i].hasExtensionList) {no-comments or (value.instantiatesUriList[i].hasComments)});
      val := val or (value.instantiatesUriList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesUri', value.instantiatesUriList, true);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriValue(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesUri', value.instantiatesUriList, false);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriProps(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.replacesList.Count > 0) then
  begin
    startArray(json, 'replaces', value.replacesList, false);
    for i := 0 to value.replacesList.Count - 1 do
      ComposeReference(json, '', value.replacesList[i]);
    finishArray(json, value.replacesList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.partOfList.Count > 0) then
  begin
    startArray(json, 'partOf', value.partOfList, false);
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(json, '', value.partOfList[i]);
    finishArray(json, value.partOfList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirRequestStatusEnum, false);
  ComposeEnumValue(json, 'intent', value.intentElement, CODES_TFhirCarePlanIntentEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'author', value.author);
  if (SummaryOption in [soFull, soData]) and (value.contributorList.Count > 0) then
  begin
    startArray(json, 'contributor', value.contributorList, false);
    for i := 0 to value.contributorList.Count - 1 do
      ComposeReference(json, '', value.contributorList[i]);
    finishArray(json, value.contributorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.careTeamList.Count > 0) then
  begin
    startArray(json, 'careTeam', value.careTeamList, false);
    for i := 0 to value.careTeamList.Count - 1 do
      ComposeReference(json, '', value.careTeamList[i]);
    finishArray(json, value.careTeamList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.addressesList.Count > 0) then
  begin
    startArray(json, 'addresses', value.addressesList, false);
    for i := 0 to value.addressesList.Count - 1 do
      ComposeReference(json, '', value.addressesList[i]);
    finishArray(json, value.addressesList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.supportingInfoList.Count > 0) then
  begin
    startArray(json, 'supportingInfo', value.supportingInfoList, false);
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeReference(json, '', value.supportingInfoList[i]);
    finishArray(json, value.supportingInfoList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.goalList.Count > 0) then
  begin
    startArray(json, 'goal', value.goalList, false);
    for i := 0 to value.goalList.Count - 1 do
      ComposeReference(json, '', value.goalList[i]);
    finishArray(json, value.goalList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.activityList.Count > 0) then
  begin
    startArray(json, 'activity', value.activityList, false);
    for i := 0 to value.activityList.Count - 1 do
      ComposeCarePlanActivity(json, '', value.activityList[i]);
    finishArray(json, value.activityList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
end;

{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
procedure TFHIRJsonParser.ParseCareTeamParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCareTeamParticipant(jsn)); 
end;

function TFHIRJsonParser.ParseCareTeamParticipant(jsn : TJsonObject) : TFhirCareTeamParticipant;
begin
  result := TFhirCareTeamParticipant.Create;
  try
    ParseCareTeamParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCareTeamParticipantProperties(jsn : TJsonObject; value : TFhirCareTeamParticipant);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('role') then
      iterateArray(jsn.vArr['role'], value.roleList, parseCodeableConcept);
    if jsn.has('member') then
        value.member := ParseReference(jsn.vObj['member']);
    if jsn.has('onBehalfOf') then
        value.onBehalfOf := ParseReference(jsn.vObj['onBehalfOf']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeCareTeamParticipant(json : TJSONWriter; name : string; value : TFhirCareTeamParticipant; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.roleList.Count > 0) then
  begin
    startArray(json, 'role', value.roleList, false);
    for i := 0 to value.roleList.Count - 1 do
      ComposeCodeableConcept(json, '', value.roleList[i]);
    finishArray(json, value.roleList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'member', value.member);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'onBehalfOf', value.onBehalfOf);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCareTeam(jsn)); 
end;

function TFHIRJsonParser.ParseCareTeam(jsn : TJsonObject) : TFhirCareTeam;
begin
  result := TFhirCareTeam.Create;
  try
    ParseCareTeamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCareTeamProperties(jsn : TJsonObject; value : TFhirCareTeam);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirCareTeamStatusEnum, SYSTEMS_TFhirCareTeamStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], value.participantList, parseCareTeamParticipant);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('managingOrganization') then
      iterateArray(jsn.vArr['managingOrganization'], value.managingOrganizationList, parseReference);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCareTeam(json : TJSONWriter; name : string; value : TFhirCareTeam; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirCareTeamStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soData]) and (value.participantList.Count > 0) then
  begin
    startArray(json, 'participant', value.participantList, false);
    for i := 0 to value.participantList.Count - 1 do
      ComposeCareTeamParticipant(json, '', value.participantList[i]);
    finishArray(json, value.participantList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.managingOrganizationList.Count > 0) then
  begin
    startArray(json, 'managingOrganization', value.managingOrganizationList, false);
    for i := 0 to value.managingOrganizationList.Count - 1 do
      ComposeReference(json, '', value.managingOrganizationList[i]);
    finishArray(json, value.managingOrganizationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
end;

{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
procedure TFHIRJsonParser.ParseCatalogEntryRelatedEntry(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCatalogEntryRelatedEntry(jsn)); 
end;

function TFHIRJsonParser.ParseCatalogEntryRelatedEntry(jsn : TJsonObject) : TFhirCatalogEntryRelatedEntry;
begin
  result := TFhirCatalogEntryRelatedEntry.Create;
  try
    ParseCatalogEntryRelatedEntryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCatalogEntryRelatedEntryProperties(jsn : TJsonObject; value : TFhirCatalogEntryRelatedEntry);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('relationtype') or jsn.has('_relationtype') then
        value.relationtypeElement := parseEnum(jsn.path+'/relationtype', jsn.node['relationtype'], jsn.vObj['_relationtype'], CODES_TFhirCatalogEntryRelationTypeEnum, SYSTEMS_TFhirCatalogEntryRelationTypeEnum);
    if jsn.has('item') then
        value.item := ParseReference(jsn.vObj['item']);
end;

procedure TFHIRJsonComposer.ComposeCatalogEntryRelatedEntry(json : TJSONWriter; name : string; value : TFhirCatalogEntryRelatedEntry; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'relationtype', value.relationtypeElement, CODES_TFhirCatalogEntryRelationTypeEnum, false);
  ComposeReference(json, 'item', value.item);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCatalogEntry(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCatalogEntry(jsn)); 
end;

function TFHIRJsonParser.ParseCatalogEntry(jsn : TJsonObject) : TFhirCatalogEntry;
begin
  result := TFhirCatalogEntry.Create;
  try
    ParseCatalogEntryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCatalogEntryProperties(jsn : TJsonObject; value : TFhirCatalogEntry);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('orderable') or jsn.has('_orderable') then
        value.orderableElement := parseBoolean(jsn.node['orderable'], jsn.vObj['_orderable']);
    if jsn.has('referencedItem') then
        value.referencedItem := ParseReference(jsn.vObj['referencedItem']);
    if jsn.has('additionalIdentifier') then
      iterateArray(jsn.vArr['additionalIdentifier'], value.additionalIdentifierList, parseIdentifier);
    if jsn.has('classification') then
      iterateArray(jsn.vArr['classification'], value.classificationList, parseCodeableConcept);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('validityPeriod') then
        value.validityPeriod := ParsePeriod(jsn.vObj['validityPeriod']);
    if jsn.has('validTo') or jsn.has('_validTo') then
        value.validToElement := parseDateTime(jsn.node['validTo'], jsn.vObj['_validTo']);
    if jsn.has('lastUpdated') or jsn.has('_lastUpdated') then
        value.lastUpdatedElement := parseDateTime(jsn.node['lastUpdated'], jsn.vObj['_lastUpdated']);
    if jsn.has('additionalCharacteristic') then
      iterateArray(jsn.vArr['additionalCharacteristic'], value.additionalCharacteristicList, parseCodeableConcept);
    if jsn.has('additionalClassification') then
      iterateArray(jsn.vArr['additionalClassification'], value.additionalClassificationList, parseCodeableConcept);
    if jsn.has('relatedEntry') then
      iterateArray(jsn.vArr['relatedEntry'], value.relatedEntryList, parseCatalogEntryRelatedEntry);
end;

procedure TFHIRJsonComposer.ComposeCatalogEntry(json : TJSONWriter; name : string; value : TFhirCatalogEntry; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  ComposeBooleanValue(json, 'orderable', value.orderableElement, false);
  ComposeBooleanProps(json, 'orderable', value.orderableElement, false);
  ComposeReference(json, 'referencedItem', value.referencedItem);
  if (SummaryOption in [soFull, soData]) and (value.additionalIdentifierList.Count > 0) then
  begin
    startArray(json, 'additionalIdentifier', value.additionalIdentifierList, false);
    for i := 0 to value.additionalIdentifierList.Count - 1 do
      ComposeIdentifier(json, '', value.additionalIdentifierList[i]);
    finishArray(json, value.additionalIdentifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.classificationList.Count > 0) then
  begin
    startArray(json, 'classification', value.classificationList, false);
    for i := 0 to value.classificationList.Count - 1 do
      ComposeCodeableConcept(json, '', value.classificationList[i]);
    finishArray(json, value.classificationList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'validityPeriod', value.validityPeriod);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'validTo', value.validToElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'validTo', value.validToElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'lastUpdated', value.lastUpdatedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'lastUpdated', value.lastUpdatedElement, false);
  if (SummaryOption in [soFull, soData]) and (value.additionalCharacteristicList.Count > 0) then
  begin
    startArray(json, 'additionalCharacteristic', value.additionalCharacteristicList, false);
    for i := 0 to value.additionalCharacteristicList.Count - 1 do
      ComposeCodeableConcept(json, '', value.additionalCharacteristicList[i]);
    finishArray(json, value.additionalCharacteristicList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.additionalClassificationList.Count > 0) then
  begin
    startArray(json, 'additionalClassification', value.additionalClassificationList, false);
    for i := 0 to value.additionalClassificationList.Count - 1 do
      ComposeCodeableConcept(json, '', value.additionalClassificationList[i]);
    finishArray(json, value.additionalClassificationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedEntryList.Count > 0) then
  begin
    startArray(json, 'relatedEntry', value.relatedEntryList, false);
    for i := 0 to value.relatedEntryList.Count - 1 do
      ComposeCatalogEntryRelatedEntry(json, '', value.relatedEntryList[i]);
    finishArray(json, value.relatedEntryList);
  end;
end;

{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
procedure TFHIRJsonParser.ParseChargeItemPerformer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseChargeItemPerformer(jsn)); 
end;

function TFHIRJsonParser.ParseChargeItemPerformer(jsn : TJsonObject) : TFhirChargeItemPerformer;
begin
  result := TFhirChargeItemPerformer.Create;
  try
    ParseChargeItemPerformerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseChargeItemPerformerProperties(jsn : TJsonObject; value : TFhirChargeItemPerformer);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('function') then
        value.function_ := ParseCodeableConcept(jsn.vObj['function']);
    if jsn.has('actor') then
        value.actor := ParseReference(jsn.vObj['actor']);
end;

procedure TFHIRJsonComposer.ComposeChargeItemPerformer(json : TJSONWriter; name : string; value : TFhirChargeItemPerformer; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'function', value.function_);
  ComposeReference(json, 'actor', value.actor);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseChargeItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseChargeItem(jsn)); 
end;

function TFHIRJsonParser.ParseChargeItem(jsn : TJsonObject) : TFhirChargeItem;
begin
  result := TFhirChargeItem.Create;
  try
    ParseChargeItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseChargeItemProperties(jsn : TJsonObject; value : TFhirChargeItem);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
      if jsn.has('definitionUri') or jsn.has('_definitionUri') then
      iteratePrimitiveArray(jsn.vArr['definitionUri'], jsn.vArr['_definitionUri'], value.definitionUriList, parseUri);
      if jsn.has('definitionCanonical') or jsn.has('_definitionCanonical') then
      iteratePrimitiveArray(jsn.vArr['definitionCanonical'], jsn.vArr['_definitionCanonical'], value.definitionCanonicalList, parseCanonical);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirChargeItemStatusEnum, SYSTEMS_TFhirChargeItemStatusEnum);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], value.partOfList, parseReference);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('context') then
        value.context := ParseReference(jsn.vObj['context']);
    if jsn.has('occurrencePeriod') {a4} then
      value.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      value.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      value.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], value.performerList, parseChargeItemPerformer);
    if jsn.has('performingOrganization') then
        value.performingOrganization := ParseReference(jsn.vObj['performingOrganization']);
    if jsn.has('requestingOrganization') then
        value.requestingOrganization := ParseReference(jsn.vObj['requestingOrganization']);
    if jsn.has('costCenter') then
        value.costCenter := ParseReference(jsn.vObj['costCenter']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('bodysite') then
      iterateArray(jsn.vArr['bodysite'], value.bodysiteList, parseCodeableConcept);
    if jsn.has('factorOverride') or jsn.has('_factorOverride') then
        value.factorOverrideElement := parseDecimal(jsn.node['factorOverride'], jsn.vObj['_factorOverride']);
    if jsn.has('priceOverride') then
        value.priceOverride := ParseMoney(jsn.vObj['priceOverride']);
    if jsn.has('overrideReason') or jsn.has('_overrideReason') then
        value.overrideReasonElement := parseString(jsn.node['overrideReason'], jsn.vObj['_overrideReason']);
    if jsn.has('enterer') then
        value.enterer := ParseReference(jsn.vObj['enterer']);
    if jsn.has('enteredDate') or jsn.has('_enteredDate') then
        value.enteredDateElement := parseDateTime(jsn.node['enteredDate'], jsn.vObj['_enteredDate']);
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], value.reasonList, parseCodeableConcept);
    if jsn.has('service') then
      iterateArray(jsn.vArr['service'], value.serviceList, parseReference);
    if jsn.has('productReference') {a3} then
      value.product := ParseReference(jsn.vObj['productReference']);
    if jsn.has('productCodeableConcept') {a4} then
      value.product := ParseCodeableConcept(jsn.vObj['productCodeableConcept']);
    if jsn.has('account') then
      iterateArray(jsn.vArr['account'], value.accountList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], value.supportingInformationList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeChargeItem(json : TJSONWriter; name : string; value : TFhirChargeItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.definitionUriList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.definitionUriList.Count - 1 do
    begin
      ext := ext or ((value.definitionUriList[i].id <> '') or (value.definitionUriList[i].hasExtensionList) {no-comments or (value.definitionUriList[i].hasComments)});
      val := val or (value.definitionUriList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'definitionUri', value.definitionUriList, true);
      for i := 0 to value.definitionUriList.Count - 1 do
        ComposeUriValue(json, '', value.definitionUriList[i], true);
      finishArray(json, value.definitionUriList);
    end;
    if ext then
    begin
      startArray(json, '_definitionUri', value.definitionUriList, false);
      for i := 0 to value.definitionUriList.Count - 1 do
        ComposeUriProps(json, '', value.definitionUriList[i], true);
      finishArray(json, value.definitionUriList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.definitionCanonicalList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.definitionCanonicalList.Count - 1 do
    begin
      ext := ext or ((value.definitionCanonicalList[i].id <> '') or (value.definitionCanonicalList[i].hasExtensionList) {no-comments or (value.definitionCanonicalList[i].hasComments)});
      val := val or (value.definitionCanonicalList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'definitionCanonical', value.definitionCanonicalList, true);
      for i := 0 to value.definitionCanonicalList.Count - 1 do
        ComposeCanonicalValue(json, '', value.definitionCanonicalList[i], true);
      finishArray(json, value.definitionCanonicalList);
    end;
    if ext then
    begin
      startArray(json, '_definitionCanonical', value.definitionCanonicalList, false);
      for i := 0 to value.definitionCanonicalList.Count - 1 do
        ComposeCanonicalProps(json, '', value.definitionCanonicalList[i], true);
      finishArray(json, value.definitionCanonicalList);
    end;
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirChargeItemStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.partOfList.Count > 0) then
  begin
    startArray(json, 'partOf', value.partOfList, false);
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(json, '', value.partOfList[i]);
    finishArray(json, value.partOfList);
  end;
  ComposeCodeableConcept(json, 'code', value.code);
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'context', value.context);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(value.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(value.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.performerList.Count > 0) then
  begin
    startArray(json, 'performer', value.performerList, false);
    for i := 0 to value.performerList.Count - 1 do
      ComposeChargeItemPerformer(json, '', value.performerList[i]);
    finishArray(json, value.performerList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'performingOrganization', value.performingOrganization);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'requestingOrganization', value.requestingOrganization);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'costCenter', value.costCenter);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.bodysiteList.Count > 0) then
  begin
    startArray(json, 'bodysite', value.bodysiteList, false);
    for i := 0 to value.bodysiteList.Count - 1 do
      ComposeCodeableConcept(json, '', value.bodysiteList[i]);
    finishArray(json, value.bodysiteList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factorOverride', value.factorOverrideElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factorOverride', value.factorOverrideElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'priceOverride', value.priceOverride);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'overrideReason', value.overrideReasonElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'overrideReason', value.overrideReasonElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'enterer', value.enterer);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'enteredDate', value.enteredDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'enteredDate', value.enteredDateElement, false);
  if (SummaryOption in [soFull, soData]) and (value.reasonList.Count > 0) then
  begin
    startArray(json, 'reason', value.reasonList, false);
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonList[i]);
    finishArray(json, value.reasonList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.serviceList.Count > 0) then
  begin
    startArray(json, 'service', value.serviceList, false);
    for i := 0 to value.serviceList.Count - 1 do
      ComposeReference(json, '', value.serviceList[i]);
    finishArray(json, value.serviceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.product is TFhirReference) then
    ComposeReference(json, 'productReference', TFhirReference(value.product))
  else if (SummaryOption in [soFull, soData]) and (value.product is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'productCodeableConcept', TFhirCodeableConcept(value.product)) ;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.accountList.Count > 0) then
  begin
    startArray(json, 'account', value.accountList, false);
    for i := 0 to value.accountList.Count - 1 do
      ComposeReference(json, '', value.accountList[i]);
    finishArray(json, value.accountList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.supportingInformationList.Count > 0) then
  begin
    startArray(json, 'supportingInformation', value.supportingInformationList, false);
    for i := 0 to value.supportingInformationList.Count - 1 do
      ComposeReference(json, '', value.supportingInformationList[i]);
    finishArray(json, value.supportingInformationList);
  end;
end;

{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
procedure TFHIRJsonParser.ParseChargeItemDefinitionApplicability(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseChargeItemDefinitionApplicability(jsn)); 
end;

function TFHIRJsonParser.ParseChargeItemDefinitionApplicability(jsn : TJsonObject) : TFhirChargeItemDefinitionApplicability;
begin
  result := TFhirChargeItemDefinitionApplicability.Create;
  try
    ParseChargeItemDefinitionApplicabilityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseChargeItemDefinitionApplicabilityProperties(jsn : TJsonObject; value : TFhirChargeItemDefinitionApplicability);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('language') or jsn.has('_language') then
        value.languageElement := parseString(jsn.node['language'], jsn.vObj['_language']);
    if jsn.has('expression') or jsn.has('_expression') then
        value.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);
end;

procedure TFHIRJsonComposer.ComposeChargeItemDefinitionApplicability(json : TJSONWriter; name : string; value : TFhirChargeItemDefinitionApplicability; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'language', value.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'language', value.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', value.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', value.expressionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseChargeItemDefinitionPropertyGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseChargeItemDefinitionPropertyGroup(jsn)); 
end;

function TFHIRJsonParser.ParseChargeItemDefinitionPropertyGroup(jsn : TJsonObject) : TFhirChargeItemDefinitionPropertyGroup;
begin
  result := TFhirChargeItemDefinitionPropertyGroup.Create;
  try
    ParseChargeItemDefinitionPropertyGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseChargeItemDefinitionPropertyGroupProperties(jsn : TJsonObject; value : TFhirChargeItemDefinitionPropertyGroup);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('applicability') then
      iterateArray(jsn.vArr['applicability'], value.applicabilityList, parseChargeItemDefinitionApplicability);
    if jsn.has('priceComponent') then
      iterateArray(jsn.vArr['priceComponent'], value.priceComponentList, parseChargeItemDefinitionPropertyGroupPriceComponent);
end;

procedure TFHIRJsonComposer.ComposeChargeItemDefinitionPropertyGroup(json : TJSONWriter; name : string; value : TFhirChargeItemDefinitionPropertyGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.applicabilityList.Count > 0) then
  begin
    startArray(json, 'applicability', value.applicabilityList, false);
    for i := 0 to value.applicabilityList.Count - 1 do
      ComposeChargeItemDefinitionApplicability(json, '', value.applicabilityList[i]);
    finishArray(json, value.applicabilityList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.priceComponentList.Count > 0) then
  begin
    startArray(json, 'priceComponent', value.priceComponentList, false);
    for i := 0 to value.priceComponentList.Count - 1 do
      ComposeChargeItemDefinitionPropertyGroupPriceComponent(json, '', value.priceComponentList[i]);
    finishArray(json, value.priceComponentList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseChargeItemDefinitionPropertyGroupPriceComponent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseChargeItemDefinitionPropertyGroupPriceComponent(jsn)); 
end;

function TFHIRJsonParser.ParseChargeItemDefinitionPropertyGroupPriceComponent(jsn : TJsonObject) : TFhirChargeItemDefinitionPropertyGroupPriceComponent;
begin
  result := TFhirChargeItemDefinitionPropertyGroupPriceComponent.Create;
  try
    ParseChargeItemDefinitionPropertyGroupPriceComponentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseChargeItemDefinitionPropertyGroupPriceComponentProperties(jsn : TJsonObject; value : TFhirChargeItemDefinitionPropertyGroupPriceComponent);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirInvoicePriceComponentTypeEnum, SYSTEMS_TFhirInvoicePriceComponentTypeEnum);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('amount') then
        value.amount := ParseMoney(jsn.vObj['amount']);
end;

procedure TFHIRJsonComposer.ComposeChargeItemDefinitionPropertyGroupPriceComponent(json : TJSONWriter; name : string; value : TFhirChargeItemDefinitionPropertyGroupPriceComponent; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirInvoicePriceComponentTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', value.amount);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseChargeItemDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseChargeItemDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseChargeItemDefinition(jsn : TJsonObject) : TFhirChargeItemDefinition;
begin
  result := TFhirChargeItemDefinition.Create;
  try
    ParseChargeItemDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseChargeItemDefinitionProperties(jsn : TJsonObject; value : TFhirChargeItemDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
      if jsn.has('derivedFromUri') or jsn.has('_derivedFromUri') then
      iteratePrimitiveArray(jsn.vArr['derivedFromUri'], jsn.vArr['_derivedFromUri'], value.derivedFromUriList, parseUri);
      if jsn.has('partOf') or jsn.has('_partOf') then
      iteratePrimitiveArray(jsn.vArr['partOf'], jsn.vArr['_partOf'], value.partOfList, parseCanonical);
      if jsn.has('replaces') or jsn.has('_replaces') then
      iteratePrimitiveArray(jsn.vArr['replaces'], jsn.vArr['_replaces'], value.replacesList, parseCanonical);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        value.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        value.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);
    if jsn.has('effectivePeriod') then
        value.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('instance') then
      iterateArray(jsn.vArr['instance'], value.instanceList, parseReference);
    if jsn.has('applicability') then
      iterateArray(jsn.vArr['applicability'], value.applicabilityList, parseChargeItemDefinitionApplicability);
    if jsn.has('propertyGroup') then
      iterateArray(jsn.vArr['propertyGroup'], value.propertyGroupList, parseChargeItemDefinitionPropertyGroup);
end;

procedure TFHIRJsonComposer.ComposeChargeItemDefinition(json : TJSONWriter; name : string; value : TFhirChargeItemDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  ComposeUriValue(json, 'url', value.urlElement, false);
  ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.derivedFromUriList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.derivedFromUriList.Count - 1 do
    begin
      ext := ext or ((value.derivedFromUriList[i].id <> '') or (value.derivedFromUriList[i].hasExtensionList) {no-comments or (value.derivedFromUriList[i].hasComments)});
      val := val or (value.derivedFromUriList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'derivedFromUri', value.derivedFromUriList, true);
      for i := 0 to value.derivedFromUriList.Count - 1 do
        ComposeUriValue(json, '', value.derivedFromUriList[i], true);
      finishArray(json, value.derivedFromUriList);
    end;
    if ext then
    begin
      startArray(json, '_derivedFromUri', value.derivedFromUriList, false);
      for i := 0 to value.derivedFromUriList.Count - 1 do
        ComposeUriProps(json, '', value.derivedFromUriList[i], true);
      finishArray(json, value.derivedFromUriList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.partOfList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.partOfList.Count - 1 do
    begin
      ext := ext or ((value.partOfList[i].id <> '') or (value.partOfList[i].hasExtensionList) {no-comments or (value.partOfList[i].hasComments)});
      val := val or (value.partOfList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'partOf', value.partOfList, true);
      for i := 0 to value.partOfList.Count - 1 do
        ComposeCanonicalValue(json, '', value.partOfList[i], true);
      finishArray(json, value.partOfList);
    end;
    if ext then
    begin
      startArray(json, '_partOf', value.partOfList, false);
      for i := 0 to value.partOfList.Count - 1 do
        ComposeCanonicalProps(json, '', value.partOfList[i], true);
      finishArray(json, value.partOfList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.replacesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.replacesList.Count - 1 do
    begin
      ext := ext or ((value.replacesList[i].id <> '') or (value.replacesList[i].hasExtensionList) {no-comments or (value.replacesList[i].hasComments)});
      val := val or (value.replacesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'replaces', value.replacesList, true);
      for i := 0 to value.replacesList.Count - 1 do
        ComposeCanonicalValue(json, '', value.replacesList[i], true);
      finishArray(json, value.replacesList);
    end;
    if ext then
    begin
      startArray(json, '_replaces', value.replacesList, false);
      for i := 0 to value.replacesList.Count - 1 do
        ComposeCanonicalProps(json, '', value.replacesList[i], true);
      finishArray(json, value.replacesList);
    end;
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', value.effectivePeriod);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) and (value.instanceList.Count > 0) then
  begin
    startArray(json, 'instance', value.instanceList, false);
    for i := 0 to value.instanceList.Count - 1 do
      ComposeReference(json, '', value.instanceList[i]);
    finishArray(json, value.instanceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.applicabilityList.Count > 0) then
  begin
    startArray(json, 'applicability', value.applicabilityList, false);
    for i := 0 to value.applicabilityList.Count - 1 do
      ComposeChargeItemDefinitionApplicability(json, '', value.applicabilityList[i]);
    finishArray(json, value.applicabilityList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.propertyGroupList.Count > 0) then
  begin
    startArray(json, 'propertyGroup', value.propertyGroupList, false);
    for i := 0 to value.propertyGroupList.Count - 1 do
      ComposeChargeItemDefinitionPropertyGroup(json, '', value.propertyGroupList[i]);
    finishArray(json, value.propertyGroupList);
  end;
end;

{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CITATION}
procedure TFHIRJsonParser.ParseCitationClassification(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationClassification(jsn)); 
end;

function TFHIRJsonParser.ParseCitationClassification(jsn : TJsonObject) : TFhirCitationClassification;
begin
  result := TFhirCitationClassification.Create;
  try
    ParseCitationClassificationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationClassificationProperties(jsn : TJsonObject; value : TFhirCitationClassification);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('classifier') then
      iterateArray(jsn.vArr['classifier'], value.classifierList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeCitationClassification(json : TJSONWriter; name : string; value : TFhirCitationClassification; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.classifierList.Count > 0) then
  begin
    startArray(json, 'classifier', value.classifierList, false);
    for i := 0 to value.classifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.classifierList[i]);
    finishArray(json, value.classifierList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationStatusDate(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationStatusDate(jsn)); 
end;

function TFHIRJsonParser.ParseCitationStatusDate(jsn : TJsonObject) : TFhirCitationStatusDate;
begin
  result := TFhirCitationStatusDate.Create;
  try
    ParseCitationStatusDateProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationStatusDateProperties(jsn : TJsonObject; value : TFhirCitationStatusDate);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('activity') then
        value.activity := ParseCodeableConcept(jsn.vObj['activity']);
    if jsn.has('actual') or jsn.has('_actual') then
        value.actualElement := parseBoolean(jsn.node['actual'], jsn.vObj['_actual']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeCitationStatusDate(json : TJSONWriter; name : string; value : TFhirCitationStatusDate; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'activity', value.activity);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'actual', value.actualElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'actual', value.actualElement, false);
  ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationRelatesTo(jsn)); 
end;

function TFHIRJsonParser.ParseCitationRelatesTo(jsn : TJsonObject) : TFhirCitationRelatesTo;
begin
  result := TFhirCitationRelatesTo.Create;
  try
    ParseCitationRelatesToProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationRelatesToProperties(jsn : TJsonObject; value : TFhirCitationRelatesTo);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('relationshipType') then
        value.relationshipType := ParseCodeableConcept(jsn.vObj['relationshipType']);
    if jsn.has('targetClassifier') then
      iterateArray(jsn.vArr['targetClassifier'], value.targetClassifierList, parseCodeableConcept);
    if jsn.has('targetIdentifier') {a4} then
      value.target := ParseIdentifier(jsn.vObj['targetIdentifier']);
    if jsn.has('targetReference') {a3} then
      value.target := ParseReference(jsn.vObj['targetReference']);
    if jsn.has('targetAttachment') {a4} then
      value.target := ParseAttachment(jsn.vObj['targetAttachment']);
    if jsn.has('targetUri') or jsn.has('_targetUri') then
      value.target := parseUri(jsn.node['targetUri'], jsn.vObj['_targetUri']);
end;

procedure TFHIRJsonComposer.ComposeCitationRelatesTo(json : TJSONWriter; name : string; value : TFhirCitationRelatesTo; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'relationshipType', value.relationshipType);
  if (SummaryOption in [soFull, soData]) and (value.targetClassifierList.Count > 0) then
  begin
    startArray(json, 'targetClassifier', value.targetClassifierList, false);
    for i := 0 to value.targetClassifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.targetClassifierList[i]);
    finishArray(json, value.targetClassifierList);
  end;
  if (value.target is TFhirIdentifier) then 
    ComposeIdentifier(json, 'targetIdentifier', TFhirIdentifier(value.target)) 
  else if (value.target is TFhirReference) then
    ComposeReference(json, 'targetReference', TFhirReference(value.target))
  else if (value.target is TFhirAttachment) then 
    ComposeAttachment(json, 'targetAttachment', TFhirAttachment(value.target)) 
  else if (value.target is TFhirUri) then 
  begin
    ComposeUriValue(json, 'targetUri', TFhirUri(value.target), false);
    ComposeUriProps(json, 'targetUri', TFhirUri(value.target), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifact(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifact(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifact(jsn : TJsonObject) : TFhirCitationCitedArtifact;
begin
  result := TFhirCitationCitedArtifact.Create;
  try
    ParseCitationCitedArtifactProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifact);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('relatedIdentifier') then
      iterateArray(jsn.vArr['relatedIdentifier'], value.relatedIdentifierList, parseIdentifier);
    if jsn.has('dateAccessed') or jsn.has('_dateAccessed') then
        value.dateAccessedElement := parseDateTime(jsn.node['dateAccessed'], jsn.vObj['_dateAccessed']);
    if jsn.has('version') then
        value.version := ParseCitationCitedArtifactVersion(jsn.vObj['version']);
    if jsn.has('currentState') then
      iterateArray(jsn.vArr['currentState'], value.currentStateList, parseCodeableConcept);
    if jsn.has('statusDate') then
      iterateArray(jsn.vArr['statusDate'], value.statusDateList, parseCitationCitedArtifactStatusDate);
    if jsn.has('title') then
      iterateArray(jsn.vArr['title'], value.titleList, parseCitationCitedArtifactTitle);
    if jsn.has('abstract') then
      iterateArray(jsn.vArr['abstract'], value.abstractList, parseCitationCitedArtifactAbstract);
    if jsn.has('part') then
        value.part := ParseCitationCitedArtifactPart(jsn.vObj['part']);
    if jsn.has('relatesTo') then
      iterateArray(jsn.vArr['relatesTo'], value.relatesToList, parseCitationCitedArtifactRelatesTo);
    if jsn.has('publicationForm') then
      iterateArray(jsn.vArr['publicationForm'], value.publicationFormList, parseCitationCitedArtifactPublicationForm);
    if jsn.has('webLocation') then
      iterateArray(jsn.vArr['webLocation'], value.webLocationList, parseCitationCitedArtifactWebLocation);
    if jsn.has('classification') then
      iterateArray(jsn.vArr['classification'], value.classificationList, parseCitationCitedArtifactClassification);
    if jsn.has('contributorship') then
        value.contributorship := ParseCitationCitedArtifactContributorship(jsn.vObj['contributorship']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifact(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifact; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.relatedIdentifierList.Count > 0) then
  begin
    startArray(json, 'relatedIdentifier', value.relatedIdentifierList, false);
    for i := 0 to value.relatedIdentifierList.Count - 1 do
      ComposeIdentifier(json, '', value.relatedIdentifierList[i]);
    finishArray(json, value.relatedIdentifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'dateAccessed', value.dateAccessedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'dateAccessed', value.dateAccessedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationCitedArtifactVersion(json, 'version', value.version);
  if (SummaryOption in [soFull, soData]) and (value.currentStateList.Count > 0) then
  begin
    startArray(json, 'currentState', value.currentStateList, false);
    for i := 0 to value.currentStateList.Count - 1 do
      ComposeCodeableConcept(json, '', value.currentStateList[i]);
    finishArray(json, value.currentStateList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.statusDateList.Count > 0) then
  begin
    startArray(json, 'statusDate', value.statusDateList, false);
    for i := 0 to value.statusDateList.Count - 1 do
      ComposeCitationCitedArtifactStatusDate(json, '', value.statusDateList[i]);
    finishArray(json, value.statusDateList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.titleList.Count > 0) then
  begin
    startArray(json, 'title', value.titleList, false);
    for i := 0 to value.titleList.Count - 1 do
      ComposeCitationCitedArtifactTitle(json, '', value.titleList[i]);
    finishArray(json, value.titleList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.abstractList.Count > 0) then
  begin
    startArray(json, 'abstract', value.abstractList, false);
    for i := 0 to value.abstractList.Count - 1 do
      ComposeCitationCitedArtifactAbstract(json, '', value.abstractList[i]);
    finishArray(json, value.abstractList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationCitedArtifactPart(json, 'part', value.part);
  if (SummaryOption in [soFull, soData]) and (value.relatesToList.Count > 0) then
  begin
    startArray(json, 'relatesTo', value.relatesToList, false);
    for i := 0 to value.relatesToList.Count - 1 do
      ComposeCitationCitedArtifactRelatesTo(json, '', value.relatesToList[i]);
    finishArray(json, value.relatesToList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.publicationFormList.Count > 0) then
  begin
    startArray(json, 'publicationForm', value.publicationFormList, false);
    for i := 0 to value.publicationFormList.Count - 1 do
      ComposeCitationCitedArtifactPublicationForm(json, '', value.publicationFormList[i]);
    finishArray(json, value.publicationFormList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.webLocationList.Count > 0) then
  begin
    startArray(json, 'webLocation', value.webLocationList, false);
    for i := 0 to value.webLocationList.Count - 1 do
      ComposeCitationCitedArtifactWebLocation(json, '', value.webLocationList[i]);
    finishArray(json, value.webLocationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.classificationList.Count > 0) then
  begin
    startArray(json, 'classification', value.classificationList, false);
    for i := 0 to value.classificationList.Count - 1 do
      ComposeCitationCitedArtifactClassification(json, '', value.classificationList[i]);
    finishArray(json, value.classificationList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationCitedArtifactContributorship(json, 'contributorship', value.contributorship);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactVersion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactVersion(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactVersion(jsn : TJsonObject) : TFhirCitationCitedArtifactVersion;
begin
  result := TFhirCitationCitedArtifactVersion.Create;
  try
    ParseCitationCitedArtifactVersionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactVersionProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactVersion);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
    if jsn.has('baseCitation') then
        value.baseCitation := ParseReference(jsn.vObj['baseCitation']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactVersion(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactVersion; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'value', value.valueElement, false);
  ComposeStringProps(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'baseCitation', value.baseCitation);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactStatusDate(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactStatusDate(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactStatusDate(jsn : TJsonObject) : TFhirCitationCitedArtifactStatusDate;
begin
  result := TFhirCitationCitedArtifactStatusDate.Create;
  try
    ParseCitationCitedArtifactStatusDateProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactStatusDateProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactStatusDate);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('activity') then
        value.activity := ParseCodeableConcept(jsn.vObj['activity']);
    if jsn.has('actual') or jsn.has('_actual') then
        value.actualElement := parseBoolean(jsn.node['actual'], jsn.vObj['_actual']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactStatusDate(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactStatusDate; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'activity', value.activity);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'actual', value.actualElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'actual', value.actualElement, false);
  ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactTitle(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactTitle(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactTitle(jsn : TJsonObject) : TFhirCitationCitedArtifactTitle;
begin
  result := TFhirCitationCitedArtifactTitle.Create;
  try
    ParseCitationCitedArtifactTitleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactTitleProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactTitle);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('language') then
        value.language := ParseCodeableConcept(jsn.vObj['language']);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseMarkdown(jsn.node['text'], jsn.vObj['_text']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactTitle(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactTitle; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'language', value.language);
  ComposeMarkdownValue(json, 'text', value.textElement, false);
  ComposeMarkdownProps(json, 'text', value.textElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactAbstract(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactAbstract(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactAbstract(jsn : TJsonObject) : TFhirCitationCitedArtifactAbstract;
begin
  result := TFhirCitationCitedArtifactAbstract.Create;
  try
    ParseCitationCitedArtifactAbstractProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactAbstractProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactAbstract);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('language') then
        value.language := ParseCodeableConcept(jsn.vObj['language']);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseMarkdown(jsn.node['text'], jsn.vObj['_text']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactAbstract(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactAbstract; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'language', value.language);
  ComposeMarkdownValue(json, 'text', value.textElement, false);
  ComposeMarkdownProps(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactPart(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactPart(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactPart(jsn : TJsonObject) : TFhirCitationCitedArtifactPart;
begin
  result := TFhirCitationCitedArtifactPart.Create;
  try
    ParseCitationCitedArtifactPartProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactPartProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactPart);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
    if jsn.has('baseCitation') then
        value.baseCitation := ParseReference(jsn.vObj['baseCitation']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactPart(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactPart; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'baseCitation', value.baseCitation);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactRelatesTo(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactRelatesTo(jsn : TJsonObject) : TFhirCitationCitedArtifactRelatesTo;
begin
  result := TFhirCitationCitedArtifactRelatesTo.Create;
  try
    ParseCitationCitedArtifactRelatesToProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactRelatesToProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactRelatesTo);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('relationshipType') then
        value.relationshipType := ParseCodeableConcept(jsn.vObj['relationshipType']);
    if jsn.has('targetClassifier') then
      iterateArray(jsn.vArr['targetClassifier'], value.targetClassifierList, parseCodeableConcept);
    if jsn.has('targetIdentifier') {a4} then
      value.target := ParseIdentifier(jsn.vObj['targetIdentifier']);
    if jsn.has('targetReference') {a3} then
      value.target := ParseReference(jsn.vObj['targetReference']);
    if jsn.has('targetAttachment') {a4} then
      value.target := ParseAttachment(jsn.vObj['targetAttachment']);
    if jsn.has('targetUri') or jsn.has('_targetUri') then
      value.target := parseUri(jsn.node['targetUri'], jsn.vObj['_targetUri']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactRelatesTo(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactRelatesTo; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'relationshipType', value.relationshipType);
  if (SummaryOption in [soFull, soData]) and (value.targetClassifierList.Count > 0) then
  begin
    startArray(json, 'targetClassifier', value.targetClassifierList, false);
    for i := 0 to value.targetClassifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.targetClassifierList[i]);
    finishArray(json, value.targetClassifierList);
  end;
  if (value.target is TFhirIdentifier) then 
    ComposeIdentifier(json, 'targetIdentifier', TFhirIdentifier(value.target)) 
  else if (value.target is TFhirReference) then
    ComposeReference(json, 'targetReference', TFhirReference(value.target))
  else if (value.target is TFhirAttachment) then 
    ComposeAttachment(json, 'targetAttachment', TFhirAttachment(value.target)) 
  else if (value.target is TFhirUri) then 
  begin
    ComposeUriValue(json, 'targetUri', TFhirUri(value.target), false);
    ComposeUriProps(json, 'targetUri', TFhirUri(value.target), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactPublicationForm(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactPublicationForm(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactPublicationForm(jsn : TJsonObject) : TFhirCitationCitedArtifactPublicationForm;
begin
  result := TFhirCitationCitedArtifactPublicationForm.Create;
  try
    ParseCitationCitedArtifactPublicationFormProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactPublicationFormProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactPublicationForm);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('publishedIn') then
        value.publishedIn := ParseCitationCitedArtifactPublicationFormPublishedIn(jsn.vObj['publishedIn']);
    if jsn.has('periodicRelease') then
        value.periodicRelease := ParseCitationCitedArtifactPublicationFormPeriodicRelease(jsn.vObj['periodicRelease']);
    if jsn.has('articleDate') or jsn.has('_articleDate') then
        value.articleDateElement := parseDateTime(jsn.node['articleDate'], jsn.vObj['_articleDate']);
    if jsn.has('lastRevisionDate') or jsn.has('_lastRevisionDate') then
        value.lastRevisionDateElement := parseDateTime(jsn.node['lastRevisionDate'], jsn.vObj['_lastRevisionDate']);
    if jsn.has('language') then
      iterateArray(jsn.vArr['language'], value.languageList, parseCodeableConcept);
    if jsn.has('accessionNumber') or jsn.has('_accessionNumber') then
        value.accessionNumberElement := parseString(jsn.node['accessionNumber'], jsn.vObj['_accessionNumber']);
    if jsn.has('pageString') or jsn.has('_pageString') then
        value.pageStringElement := parseString(jsn.node['pageString'], jsn.vObj['_pageString']);
    if jsn.has('firstPage') or jsn.has('_firstPage') then
        value.firstPageElement := parseString(jsn.node['firstPage'], jsn.vObj['_firstPage']);
    if jsn.has('lastPage') or jsn.has('_lastPage') then
        value.lastPageElement := parseString(jsn.node['lastPage'], jsn.vObj['_lastPage']);
    if jsn.has('pageCount') or jsn.has('_pageCount') then
        value.pageCountElement := parseString(jsn.node['pageCount'], jsn.vObj['_pageCount']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactPublicationForm(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactPublicationForm; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationCitedArtifactPublicationFormPublishedIn(json, 'publishedIn', value.publishedIn);
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationCitedArtifactPublicationFormPeriodicRelease(json, 'periodicRelease', value.periodicRelease);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'articleDate', value.articleDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'articleDate', value.articleDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'lastRevisionDate', value.lastRevisionDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'lastRevisionDate', value.lastRevisionDateElement, false);
  if (SummaryOption in [soFull, soData]) and (value.languageList.Count > 0) then
  begin
    startArray(json, 'language', value.languageList, false);
    for i := 0 to value.languageList.Count - 1 do
      ComposeCodeableConcept(json, '', value.languageList[i]);
    finishArray(json, value.languageList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'accessionNumber', value.accessionNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'accessionNumber', value.accessionNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'pageString', value.pageStringElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'pageString', value.pageStringElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'firstPage', value.firstPageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'firstPage', value.firstPageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'lastPage', value.lastPageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'lastPage', value.lastPageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'pageCount', value.pageCountElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'pageCount', value.pageCountElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactPublicationFormPublishedIn(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactPublicationFormPublishedIn(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactPublicationFormPublishedIn(jsn : TJsonObject) : TFhirCitationCitedArtifactPublicationFormPublishedIn;
begin
  result := TFhirCitationCitedArtifactPublicationFormPublishedIn.Create;
  try
    ParseCitationCitedArtifactPublicationFormPublishedInProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactPublicationFormPublishedInProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactPublicationFormPublishedIn);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('publisher') then
        value.publisher := ParseReference(jsn.vObj['publisher']);
    if jsn.has('publisherLocation') or jsn.has('_publisherLocation') then
        value.publisherLocationElement := parseString(jsn.node['publisherLocation'], jsn.vObj['_publisherLocation']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactPublicationFormPublishedIn(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactPublicationFormPublishedIn; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'publisher', value.publisher);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'publisherLocation', value.publisherLocationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'publisherLocation', value.publisherLocationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactPublicationFormPeriodicRelease(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactPublicationFormPeriodicRelease(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactPublicationFormPeriodicRelease(jsn : TJsonObject) : TFhirCitationCitedArtifactPublicationFormPeriodicRelease;
begin
  result := TFhirCitationCitedArtifactPublicationFormPeriodicRelease.Create;
  try
    ParseCitationCitedArtifactPublicationFormPeriodicReleaseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactPublicationFormPeriodicReleaseProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactPublicationFormPeriodicRelease);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('citedMedium') then
        value.citedMedium := ParseCodeableConcept(jsn.vObj['citedMedium']);
    if jsn.has('volume') or jsn.has('_volume') then
        value.volumeElement := parseString(jsn.node['volume'], jsn.vObj['_volume']);
    if jsn.has('issue') or jsn.has('_issue') then
        value.issueElement := parseString(jsn.node['issue'], jsn.vObj['_issue']);
    if jsn.has('dateOfPublication') then
        value.dateOfPublication := ParseCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication(jsn.vObj['dateOfPublication']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactPublicationFormPeriodicRelease(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactPublicationFormPeriodicRelease; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'citedMedium', value.citedMedium);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'volume', value.volumeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'volume', value.volumeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'issue', value.issueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'issue', value.issueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication(json, 'dateOfPublication', value.dateOfPublication);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication(jsn : TJsonObject) : TFhirCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication;
begin
  result := TFhirCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication.Create;
  try
    ParseCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublicationProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDate(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('year') or jsn.has('_year') then
        value.yearElement := parseString(jsn.node['year'], jsn.vObj['_year']);
    if jsn.has('month') or jsn.has('_month') then
        value.monthElement := parseString(jsn.node['month'], jsn.vObj['_month']);
    if jsn.has('day') or jsn.has('_day') then
        value.dayElement := parseString(jsn.node['day'], jsn.vObj['_day']);
    if jsn.has('season') or jsn.has('_season') then
        value.seasonElement := parseString(jsn.node['season'], jsn.vObj['_season']);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactPublicationFormPeriodicReleaseDateOfPublication; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'year', value.yearElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'year', value.yearElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'month', value.monthElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'month', value.monthElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'day', value.dayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'day', value.dayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'season', value.seasonElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'season', value.seasonElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactWebLocation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactWebLocation(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactWebLocation(jsn : TJsonObject) : TFhirCitationCitedArtifactWebLocation;
begin
  result := TFhirCitationCitedArtifactWebLocation.Create;
  try
    ParseCitationCitedArtifactWebLocationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactWebLocationProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactWebLocation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactWebLocation(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactWebLocation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactClassification(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactClassification(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactClassification(jsn : TJsonObject) : TFhirCitationCitedArtifactClassification;
begin
  result := TFhirCitationCitedArtifactClassification.Create;
  try
    ParseCitationCitedArtifactClassificationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactClassificationProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactClassification);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('classifier') then
      iterateArray(jsn.vArr['classifier'], value.classifierList, parseCodeableConcept);
    if jsn.has('whoClassified') then
        value.whoClassified := ParseCitationCitedArtifactClassificationWhoClassified(jsn.vObj['whoClassified']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactClassification(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactClassification; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.classifierList.Count > 0) then
  begin
    startArray(json, 'classifier', value.classifierList, false);
    for i := 0 to value.classifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.classifierList[i]);
    finishArray(json, value.classifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationCitedArtifactClassificationWhoClassified(json, 'whoClassified', value.whoClassified);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactClassificationWhoClassified(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactClassificationWhoClassified(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactClassificationWhoClassified(jsn : TJsonObject) : TFhirCitationCitedArtifactClassificationWhoClassified;
begin
  result := TFhirCitationCitedArtifactClassificationWhoClassified.Create;
  try
    ParseCitationCitedArtifactClassificationWhoClassifiedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactClassificationWhoClassifiedProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactClassificationWhoClassified);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('person') then
        value.person := ParseReference(jsn.vObj['person']);
    if jsn.has('organization') then
        value.organization := ParseReference(jsn.vObj['organization']);
    if jsn.has('publisher') then
        value.publisher := ParseReference(jsn.vObj['publisher']);
    if jsn.has('classifierCopyright') or jsn.has('_classifierCopyright') then
        value.classifierCopyrightElement := parseString(jsn.node['classifierCopyright'], jsn.vObj['_classifierCopyright']);
    if jsn.has('freeToShare') or jsn.has('_freeToShare') then
        value.freeToShareElement := parseBoolean(jsn.node['freeToShare'], jsn.vObj['_freeToShare']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactClassificationWhoClassified(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactClassificationWhoClassified; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'person', value.person);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'organization', value.organization);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'publisher', value.publisher);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'classifierCopyright', value.classifierCopyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'classifierCopyright', value.classifierCopyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'freeToShare', value.freeToShareElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'freeToShare', value.freeToShareElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactContributorship(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactContributorship(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactContributorship(jsn : TJsonObject) : TFhirCitationCitedArtifactContributorship;
begin
  result := TFhirCitationCitedArtifactContributorship.Create;
  try
    ParseCitationCitedArtifactContributorshipProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactContributorshipProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactContributorship);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('complete') or jsn.has('_complete') then
        value.completeElement := parseBoolean(jsn.node['complete'], jsn.vObj['_complete']);
    if jsn.has('entry') then
      iterateArray(jsn.vArr['entry'], value.entryList, parseCitationCitedArtifactContributorshipEntry);
    if jsn.has('summary') then
      iterateArray(jsn.vArr['summary'], value.summaryList, parseCitationCitedArtifactContributorshipSummary);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactContributorship(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactContributorship; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'complete', value.completeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'complete', value.completeElement, false);
  if (SummaryOption in [soFull, soData]) and (value.entryList.Count > 0) then
  begin
    startArray(json, 'entry', value.entryList, false);
    for i := 0 to value.entryList.Count - 1 do
      ComposeCitationCitedArtifactContributorshipEntry(json, '', value.entryList[i]);
    finishArray(json, value.entryList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.summaryList.Count > 0) then
  begin
    startArray(json, 'summary', value.summaryList, false);
    for i := 0 to value.summaryList.Count - 1 do
      ComposeCitationCitedArtifactContributorshipSummary(json, '', value.summaryList[i]);
    finishArray(json, value.summaryList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactContributorshipEntry(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactContributorshipEntry(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactContributorshipEntry(jsn : TJsonObject) : TFhirCitationCitedArtifactContributorshipEntry;
begin
  result := TFhirCitationCitedArtifactContributorshipEntry.Create;
  try
    ParseCitationCitedArtifactContributorshipEntryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactContributorshipEntryProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactContributorshipEntry);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') then
        value.name := ParseHumanName(jsn.vObj['name']);
    if jsn.has('initials') or jsn.has('_initials') then
        value.initialsElement := parseString(jsn.node['initials'], jsn.vObj['_initials']);
    if jsn.has('collectiveName') or jsn.has('_collectiveName') then
        value.collectiveNameElement := parseString(jsn.node['collectiveName'], jsn.vObj['_collectiveName']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('affiliationInfo') then
      iterateArray(jsn.vArr['affiliationInfo'], value.affiliationInfoList, parseCitationCitedArtifactContributorshipEntryAffiliationInfo);
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], value.addressList, parseAddress);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
    if jsn.has('contributionType') then
      iterateArray(jsn.vArr['contributionType'], value.contributionTypeList, parseCodeableConcept);
    if jsn.has('role') then
        value.role := ParseCodeableConcept(jsn.vObj['role']);
    if jsn.has('contributionInstance') then
      iterateArray(jsn.vArr['contributionInstance'], value.contributionInstanceList, parseCitationCitedArtifactContributorshipEntryContributionInstance);
    if jsn.has('correspondingContact') or jsn.has('_correspondingContact') then
        value.correspondingContactElement := parseBoolean(jsn.node['correspondingContact'], jsn.vObj['_correspondingContact']);
    if jsn.has('listOrder') or jsn.has('_listOrder') then
        value.listOrderElement := parsePositiveInt(jsn.node['listOrder'], jsn.vObj['_listOrder']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactContributorshipEntry(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactContributorshipEntry; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeHumanName(json, 'name', value.name);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'initials', value.initialsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'initials', value.initialsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'collectiveName', value.collectiveNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'collectiveName', value.collectiveNameElement, false);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.affiliationInfoList.Count > 0) then
  begin
    startArray(json, 'affiliationInfo', value.affiliationInfoList, false);
    for i := 0 to value.affiliationInfoList.Count - 1 do
      ComposeCitationCitedArtifactContributorshipEntryAffiliationInfo(json, '', value.affiliationInfoList[i]);
    finishArray(json, value.affiliationInfoList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.addressList.Count > 0) then
  begin
    startArray(json, 'address', value.addressList, false);
    for i := 0 to value.addressList.Count - 1 do
      ComposeAddress(json, '', value.addressList[i]);
    finishArray(json, value.addressList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.contributionTypeList.Count > 0) then
  begin
    startArray(json, 'contributionType', value.contributionTypeList, false);
    for i := 0 to value.contributionTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.contributionTypeList[i]);
    finishArray(json, value.contributionTypeList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', value.role);
  if (SummaryOption in [soFull, soData]) and (value.contributionInstanceList.Count > 0) then
  begin
    startArray(json, 'contributionInstance', value.contributionInstanceList, false);
    for i := 0 to value.contributionInstanceList.Count - 1 do
      ComposeCitationCitedArtifactContributorshipEntryContributionInstance(json, '', value.contributionInstanceList[i]);
    finishArray(json, value.contributionInstanceList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'correspondingContact', value.correspondingContactElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'correspondingContact', value.correspondingContactElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'listOrder', value.listOrderElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'listOrder', value.listOrderElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactContributorshipEntryAffiliationInfo(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactContributorshipEntryAffiliationInfo(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactContributorshipEntryAffiliationInfo(jsn : TJsonObject) : TFhirCitationCitedArtifactContributorshipEntryAffiliationInfo;
begin
  result := TFhirCitationCitedArtifactContributorshipEntryAffiliationInfo.Create;
  try
    ParseCitationCitedArtifactContributorshipEntryAffiliationInfoProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactContributorshipEntryAffiliationInfoProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactContributorshipEntryAffiliationInfo);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('affiliation') or jsn.has('_affiliation') then
        value.affiliationElement := parseString(jsn.node['affiliation'], jsn.vObj['_affiliation']);
    if jsn.has('role') or jsn.has('_role') then
        value.roleElement := parseString(jsn.node['role'], jsn.vObj['_role']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactContributorshipEntryAffiliationInfo(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactContributorshipEntryAffiliationInfo; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'affiliation', value.affiliationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'affiliation', value.affiliationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'role', value.roleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'role', value.roleElement, false);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactContributorshipEntryContributionInstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactContributorshipEntryContributionInstance(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactContributorshipEntryContributionInstance(jsn : TJsonObject) : TFhirCitationCitedArtifactContributorshipEntryContributionInstance;
begin
  result := TFhirCitationCitedArtifactContributorshipEntryContributionInstance.Create;
  try
    ParseCitationCitedArtifactContributorshipEntryContributionInstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactContributorshipEntryContributionInstanceProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactContributorshipEntryContributionInstance);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('time') or jsn.has('_time') then
        value.timeElement := parseDateTime(jsn.node['time'], jsn.vObj['_time']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactContributorshipEntryContributionInstance(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactContributorshipEntryContributionInstance; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'time', value.timeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'time', value.timeElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactContributorshipSummary(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitationCitedArtifactContributorshipSummary(jsn)); 
end;

function TFHIRJsonParser.ParseCitationCitedArtifactContributorshipSummary(jsn : TJsonObject) : TFhirCitationCitedArtifactContributorshipSummary;
begin
  result := TFhirCitationCitedArtifactContributorshipSummary.Create;
  try
    ParseCitationCitedArtifactContributorshipSummaryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationCitedArtifactContributorshipSummaryProperties(jsn : TJsonObject; value : TFhirCitationCitedArtifactContributorshipSummary);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('style') then
        value.style := ParseCodeableConcept(jsn.vObj['style']);
    if jsn.has('source') then
        value.source := ParseCodeableConcept(jsn.vObj['source']);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseMarkdown(jsn.node['value'], jsn.vObj['_value']);
end;

procedure TFHIRJsonComposer.ComposeCitationCitedArtifactContributorshipSummary(json : TJSONWriter; name : string; value : TFhirCitationCitedArtifactContributorshipSummary; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'style', value.style);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'source', value.source);
  ComposeMarkdownValue(json, 'value', value.valueElement, false);
  ComposeMarkdownProps(json, 'value', value.valueElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCitation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCitation(jsn)); 
end;

function TFHIRJsonParser.ParseCitation(jsn : TJsonObject) : TFhirCitation;
begin
  result := TFhirCitation.Create;
  try
    ParseCitationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCitationProperties(jsn : TJsonObject; value : TFhirCitation);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        value.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        value.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);
    if jsn.has('effectivePeriod') then
        value.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseContactDetail);
    if jsn.has('editor') then
      iterateArray(jsn.vArr['editor'], value.editorList, parseContactDetail);
    if jsn.has('reviewer') then
      iterateArray(jsn.vArr['reviewer'], value.reviewerList, parseContactDetail);
    if jsn.has('endorser') then
      iterateArray(jsn.vArr['endorser'], value.endorserList, parseContactDetail);
    if jsn.has('summary') then
      iterateArray(jsn.vArr['summary'], value.summaryList, parseContactDetail);
    if jsn.has('classification') then
      iterateArray(jsn.vArr['classification'], value.classificationList, parseCitationClassification);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('currentState') then
      iterateArray(jsn.vArr['currentState'], value.currentStateList, parseCodeableConcept);
    if jsn.has('statusDate') then
      iterateArray(jsn.vArr['statusDate'], value.statusDateList, parseCitationStatusDate);
    if jsn.has('relatesTo') then
      iterateArray(jsn.vArr['relatesTo'], value.relatesToList, parseCitationRelatesTo);
    if jsn.has('citedArtifact') then
        value.citedArtifact := ParseCitationCitedArtifact(jsn.vObj['citedArtifact']);
end;

procedure TFHIRJsonComposer.ComposeCitation(json : TJSONWriter; name : string; value : TFhirCitation; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', value.effectivePeriod);
  if (SummaryOption in [soFull, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.editorList.Count > 0) then
  begin
    startArray(json, 'editor', value.editorList, false);
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(json, '', value.editorList[i]);
    finishArray(json, value.editorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reviewerList.Count > 0) then
  begin
    startArray(json, 'reviewer', value.reviewerList, false);
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(json, '', value.reviewerList[i]);
    finishArray(json, value.reviewerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.endorserList.Count > 0) then
  begin
    startArray(json, 'endorser', value.endorserList, false);
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(json, '', value.endorserList[i]);
    finishArray(json, value.endorserList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.summaryList.Count > 0) then
  begin
    startArray(json, 'summary', value.summaryList, false);
    for i := 0 to value.summaryList.Count - 1 do
      ComposeContactDetail(json, '', value.summaryList[i]);
    finishArray(json, value.summaryList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.classificationList.Count > 0) then
  begin
    startArray(json, 'classification', value.classificationList, false);
    for i := 0 to value.classificationList.Count - 1 do
      ComposeCitationClassification(json, '', value.classificationList[i]);
    finishArray(json, value.classificationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.currentStateList.Count > 0) then
  begin
    startArray(json, 'currentState', value.currentStateList, false);
    for i := 0 to value.currentStateList.Count - 1 do
      ComposeCodeableConcept(json, '', value.currentStateList[i]);
    finishArray(json, value.currentStateList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.statusDateList.Count > 0) then
  begin
    startArray(json, 'statusDate', value.statusDateList, false);
    for i := 0 to value.statusDateList.Count - 1 do
      ComposeCitationStatusDate(json, '', value.statusDateList[i]);
    finishArray(json, value.statusDateList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatesToList.Count > 0) then
  begin
    startArray(json, 'relatesTo', value.relatesToList, false);
    for i := 0 to value.relatesToList.Count - 1 do
      ComposeCitationRelatesTo(json, '', value.relatesToList[i]);
    finishArray(json, value.relatesToList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationCitedArtifact(json, 'citedArtifact', value.citedArtifact);
end;

{$ENDIF FHIR_CITATION}
{$IFDEF FHIR_CLAIM}
procedure TFHIRJsonParser.ParseClaimRelated(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimRelated(jsn)); 
end;

function TFHIRJsonParser.ParseClaimRelated(jsn : TJsonObject) : TFhirClaimRelated;
begin
  result := TFhirClaimRelated.Create;
  try
    ParseClaimRelatedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimRelatedProperties(jsn : TJsonObject; value : TFhirClaimRelated);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('claim') then
        value.claim := ParseReference(jsn.vObj['claim']);
    if jsn.has('relationship') then
        value.relationship := ParseCodeableConcept(jsn.vObj['relationship']);
    if jsn.has('reference') then
        value.reference := ParseIdentifier(jsn.vObj['reference']);
end;

procedure TFHIRJsonComposer.ComposeClaimRelated(json : TJSONWriter; name : string; value : TFhirClaimRelated; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'claim', value.claim);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'relationship', value.relationship);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'reference', value.reference);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimPayee(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimPayee(jsn)); 
end;

function TFHIRJsonParser.ParseClaimPayee(jsn : TJsonObject) : TFhirClaimPayee;
begin
  result := TFhirClaimPayee.Create;
  try
    ParseClaimPayeeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimPayeeProperties(jsn : TJsonObject; value : TFhirClaimPayee);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('party') then
        value.party := ParseReference(jsn.vObj['party']);
end;

procedure TFHIRJsonComposer.ComposeClaimPayee(json : TJSONWriter; name : string; value : TFhirClaimPayee; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'party', value.party);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimCareTeam(jsn)); 
end;

function TFHIRJsonParser.ParseClaimCareTeam(jsn : TJsonObject) : TFhirClaimCareTeam;
begin
  result := TFhirClaimCareTeam.Create;
  try
    ParseClaimCareTeamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimCareTeamProperties(jsn : TJsonObject; value : TFhirClaimCareTeam);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('provider') then
        value.provider := ParseReference(jsn.vObj['provider']);
    if jsn.has('responsible') or jsn.has('_responsible') then
        value.responsibleElement := parseBoolean(jsn.node['responsible'], jsn.vObj['_responsible']);
    if jsn.has('role') then
        value.role := ParseCodeableConcept(jsn.vObj['role']);
    if jsn.has('qualification') then
        value.qualification := ParseCodeableConcept(jsn.vObj['qualification']);
end;

procedure TFHIRJsonComposer.ComposeClaimCareTeam(json : TJSONWriter; name : string; value : TFhirClaimCareTeam; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  ComposeReference(json, 'provider', value.provider);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'responsible', value.responsibleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'responsible', value.responsibleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', value.role);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'qualification', value.qualification);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimSupportingInfo(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimSupportingInfo(jsn)); 
end;

function TFHIRJsonParser.ParseClaimSupportingInfo(jsn : TJsonObject) : TFhirClaimSupportingInfo;
begin
  result := TFhirClaimSupportingInfo.Create;
  try
    ParseClaimSupportingInfoProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimSupportingInfoProperties(jsn : TJsonObject; value : TFhirClaimSupportingInfo);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('timingPeriod') {a4} then
      value.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDate') or jsn.has('_timingDate') then
      value.timing := parseDate(jsn.node['timingDate'], jsn.vObj['_timingDate']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueReference') {a3} then
      value.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('reason') then
        value.reason := ParseCodeableConcept(jsn.vObj['reason']);
end;

procedure TFHIRJsonComposer.ComposeClaimSupportingInfo(json : TJSONWriter; name : string; value : TFhirClaimSupportingInfo; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  ComposeCodeableConcept(json, 'category', value.category);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) and (value.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDate) then 
  begin
    ComposeDateValue(json, 'timingDate', TFhirDate(value.timing), false);
    ComposeDateProps(json, 'timingDate', TFhirDate(value.timing), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirReference) then
    ComposeReference(json, 'valueReference', TFhirReference(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reason', value.reason);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimDiagnosis(jsn)); 
end;

function TFHIRJsonParser.ParseClaimDiagnosis(jsn : TJsonObject) : TFhirClaimDiagnosis;
begin
  result := TFhirClaimDiagnosis.Create;
  try
    ParseClaimDiagnosisProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimDiagnosisProperties(jsn : TJsonObject; value : TFhirClaimDiagnosis);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('diagnosisCodeableConcept') {a4} then
      value.diagnosis := ParseCodeableConcept(jsn.vObj['diagnosisCodeableConcept']);
    if jsn.has('diagnosisReference') {a3} then
      value.diagnosis := ParseReference(jsn.vObj['diagnosisReference']);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('onAdmission') then
        value.onAdmission := ParseCodeableConcept(jsn.vObj['onAdmission']);
    if jsn.has('packageCode') then
        value.packageCode := ParseCodeableConcept(jsn.vObj['packageCode']);
end;

procedure TFHIRJsonComposer.ComposeClaimDiagnosis(json : TJSONWriter; name : string; value : TFhirClaimDiagnosis; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  if (value.diagnosis is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'diagnosisCodeableConcept', TFhirCodeableConcept(value.diagnosis)) 
  else if (value.diagnosis is TFhirReference) then
    ComposeReference(json, 'diagnosisReference', TFhirReference(value.diagnosis));
  if (SummaryOption in [soFull, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'onAdmission', value.onAdmission);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'packageCode', value.packageCode);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimProcedure(jsn)); 
end;

function TFHIRJsonParser.ParseClaimProcedure(jsn : TJsonObject) : TFhirClaimProcedure;
begin
  result := TFhirClaimProcedure.Create;
  try
    ParseClaimProcedureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimProcedureProperties(jsn : TJsonObject; value : TFhirClaimProcedure);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('procedureCodeableConcept') {a4} then
      value.procedure_ := ParseCodeableConcept(jsn.vObj['procedureCodeableConcept']);
    if jsn.has('procedureReference') {a3} then
      value.procedure_ := ParseReference(jsn.vObj['procedureReference']);
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], value.udiList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeClaimProcedure(json : TJSONWriter; name : string; value : TFhirClaimProcedure; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (value.procedure_ is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'procedureCodeableConcept', TFhirCodeableConcept(value.procedure_)) 
  else if (value.procedure_ is TFhirReference) then
    ComposeReference(json, 'procedureReference', TFhirReference(value.procedure_));
  if (SummaryOption in [soFull, soData]) and (value.udiList.Count > 0) then
  begin
    startArray(json, 'udi', value.udiList, false);
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(json, '', value.udiList[i]);
    finishArray(json, value.udiList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimInsurance(jsn)); 
end;

function TFHIRJsonParser.ParseClaimInsurance(jsn : TJsonObject) : TFhirClaimInsurance;
begin
  result := TFhirClaimInsurance.Create;
  try
    ParseClaimInsuranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimInsuranceProperties(jsn : TJsonObject; value : TFhirClaimInsurance);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('focal') or jsn.has('_focal') then
        value.focalElement := parseBoolean(jsn.node['focal'], jsn.vObj['_focal']);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('coverage') then
        value.coverage := ParseReference(jsn.vObj['coverage']);
    if jsn.has('businessArrangement') or jsn.has('_businessArrangement') then
        value.businessArrangementElement := parseString(jsn.node['businessArrangement'], jsn.vObj['_businessArrangement']);
      if jsn.has('preAuthRef') or jsn.has('_preAuthRef') then
      iteratePrimitiveArray(jsn.vArr['preAuthRef'], jsn.vArr['_preAuthRef'], value.preAuthRefList, parseString);
    if jsn.has('claimResponse') then
        value.claimResponse := ParseReference(jsn.vObj['claimResponse']);
end;

procedure TFHIRJsonComposer.ComposeClaimInsurance(json : TJSONWriter; name : string; value : TFhirClaimInsurance; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  ComposeBooleanValue(json, 'focal', value.focalElement, false);
  ComposeBooleanProps(json, 'focal', value.focalElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  ComposeReference(json, 'coverage', value.coverage);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'businessArrangement', value.businessArrangementElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'businessArrangement', value.businessArrangementElement, false);
  if (SummaryOption in [soFull, soData]) and (value.preAuthRefList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.preAuthRefList.Count - 1 do
    begin
      ext := ext or ((value.preAuthRefList[i].id <> '') or (value.preAuthRefList[i].hasExtensionList) {no-comments or (value.preAuthRefList[i].hasComments)});
      val := val or (value.preAuthRefList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'preAuthRef', value.preAuthRefList, true);
      for i := 0 to value.preAuthRefList.Count - 1 do
        ComposeStringValue(json, '', value.preAuthRefList[i], true);
      finishArray(json, value.preAuthRefList);
    end;
    if ext then
    begin
      startArray(json, '_preAuthRef', value.preAuthRefList, false);
      for i := 0 to value.preAuthRefList.Count - 1 do
        ComposeStringProps(json, '', value.preAuthRefList[i], true);
      finishArray(json, value.preAuthRefList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'claimResponse', value.claimResponse);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimAccident(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimAccident(jsn)); 
end;

function TFHIRJsonParser.ParseClaimAccident(jsn : TJsonObject) : TFhirClaimAccident;
begin
  result := TFhirClaimAccident.Create;
  try
    ParseClaimAccidentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimAccidentProperties(jsn : TJsonObject; value : TFhirClaimAccident);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDate(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('locationAddress') {a4} then
      value.location := ParseAddress(jsn.vObj['locationAddress']);
    if jsn.has('locationReference') {a3} then
      value.location := ParseReference(jsn.vObj['locationReference']);
end;

procedure TFHIRJsonComposer.ComposeClaimAccident(json : TJSONWriter; name : string; value : TFhirClaimAccident; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeDateValue(json, 'date', value.dateElement, false);
  ComposeDateProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.location is TFhirAddress) then 
    ComposeAddress(json, 'locationAddress', TFhirAddress(value.location)) 
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirReference) then
    ComposeReference(json, 'locationReference', TFhirReference(value.location));
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimItem(jsn)); 
end;

function TFHIRJsonParser.ParseClaimItem(jsn : TJsonObject) : TFhirClaimItem;
begin
  result := TFhirClaimItem.Create;
  try
    ParseClaimItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimItemProperties(jsn : TJsonObject; value : TFhirClaimItem);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
      if jsn.has('careTeamSequence') or jsn.has('_careTeamSequence') then
      iteratePrimitiveArray(jsn.vArr['careTeamSequence'], jsn.vArr['_careTeamSequence'], value.careTeamSequenceList, parsePositiveInt);
      if jsn.has('diagnosisSequence') or jsn.has('_diagnosisSequence') then
      iteratePrimitiveArray(jsn.vArr['diagnosisSequence'], jsn.vArr['_diagnosisSequence'], value.diagnosisSequenceList, parsePositiveInt);
      if jsn.has('procedureSequence') or jsn.has('_procedureSequence') then
      iteratePrimitiveArray(jsn.vArr['procedureSequence'], jsn.vArr['_procedureSequence'], value.procedureSequenceList, parsePositiveInt);
      if jsn.has('informationSequence') or jsn.has('_informationSequence') then
      iteratePrimitiveArray(jsn.vArr['informationSequence'], jsn.vArr['_informationSequence'], value.informationSequenceList, parsePositiveInt);
    if jsn.has('revenue') then
        value.revenue := ParseCodeableConcept(jsn.vObj['revenue']);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('productOrService') then
        value.productOrService := ParseCodeableConcept(jsn.vObj['productOrService']);
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], value.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], value.programCodeList, parseCodeableConcept);
    if jsn.has('servicedPeriod') {a4} then
      value.serviced := ParsePeriod(jsn.vObj['servicedPeriod']);
    if jsn.has('servicedDate') or jsn.has('_servicedDate') then
      value.serviced := parseDate(jsn.node['servicedDate'], jsn.vObj['_servicedDate']);
    if jsn.has('locationCodeableConcept') {a4} then
      value.location := ParseCodeableConcept(jsn.vObj['locationCodeableConcept']);
    if jsn.has('locationAddress') {a4} then
      value.location := ParseAddress(jsn.vObj['locationAddress']);
    if jsn.has('locationReference') {a3} then
      value.location := ParseReference(jsn.vObj['locationReference']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('unitPrice') then
        value.unitPrice := ParseMoney(jsn.vObj['unitPrice']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('net') then
        value.net := ParseMoney(jsn.vObj['net']);
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], value.udiList, parseReference);
    if jsn.has('bodySite') then
        value.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);
    if jsn.has('subSite') then
      iterateArray(jsn.vArr['subSite'], value.subSiteList, parseCodeableConcept);
    if jsn.has('encounter') then
      iterateArray(jsn.vArr['encounter'], value.encounterList, parseReference);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], value.detailList, parseClaimItemDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimItem(json : TJSONWriter; name : string; value : TFhirClaimItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) and (value.careTeamSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.careTeamSequenceList.Count - 1 do
    begin
      ext := ext or ((value.careTeamSequenceList[i].id <> '') or (value.careTeamSequenceList[i].hasExtensionList) {no-comments or (value.careTeamSequenceList[i].hasComments)});
      val := val or (value.careTeamSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'careTeamSequence', value.careTeamSequenceList, true);
      for i := 0 to value.careTeamSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.careTeamSequenceList[i], true);
      finishArray(json, value.careTeamSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_careTeamSequence', value.careTeamSequenceList, false);
      for i := 0 to value.careTeamSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.careTeamSequenceList[i], true);
      finishArray(json, value.careTeamSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.diagnosisSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.diagnosisSequenceList.Count - 1 do
    begin
      ext := ext or ((value.diagnosisSequenceList[i].id <> '') or (value.diagnosisSequenceList[i].hasExtensionList) {no-comments or (value.diagnosisSequenceList[i].hasComments)});
      val := val or (value.diagnosisSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'diagnosisSequence', value.diagnosisSequenceList, true);
      for i := 0 to value.diagnosisSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.diagnosisSequenceList[i], true);
      finishArray(json, value.diagnosisSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_diagnosisSequence', value.diagnosisSequenceList, false);
      for i := 0 to value.diagnosisSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.diagnosisSequenceList[i], true);
      finishArray(json, value.diagnosisSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.procedureSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.procedureSequenceList.Count - 1 do
    begin
      ext := ext or ((value.procedureSequenceList[i].id <> '') or (value.procedureSequenceList[i].hasExtensionList) {no-comments or (value.procedureSequenceList[i].hasComments)});
      val := val or (value.procedureSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'procedureSequence', value.procedureSequenceList, true);
      for i := 0 to value.procedureSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.procedureSequenceList[i], true);
      finishArray(json, value.procedureSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_procedureSequence', value.procedureSequenceList, false);
      for i := 0 to value.procedureSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.procedureSequenceList[i], true);
      finishArray(json, value.procedureSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.informationSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.informationSequenceList.Count - 1 do
    begin
      ext := ext or ((value.informationSequenceList[i].id <> '') or (value.informationSequenceList[i].hasExtensionList) {no-comments or (value.informationSequenceList[i].hasComments)});
      val := val or (value.informationSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'informationSequence', value.informationSequenceList, true);
      for i := 0 to value.informationSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.informationSequenceList[i], true);
      finishArray(json, value.informationSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_informationSequence', value.informationSequenceList, false);
      for i := 0 to value.informationSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.informationSequenceList[i], true);
      finishArray(json, value.informationSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', value.revenue);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  ComposeCodeableConcept(json, 'productOrService', value.productOrService);
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    startArray(json, 'modifier', value.modifierList, false);
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.modifierList[i]);
    finishArray(json, value.modifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.programCodeList.Count > 0) then
  begin
    startArray(json, 'programCode', value.programCodeList, false);
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.programCodeList[i]);
    finishArray(json, value.programCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirPeriod) then 
    ComposePeriod(json, 'servicedPeriod', TFhirPeriod(value.serviced)) 
  else if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirDate) then 
  begin
    ComposeDateValue(json, 'servicedDate', TFhirDate(value.serviced), false);
    ComposeDateProps(json, 'servicedDate', TFhirDate(value.serviced), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.location is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'locationCodeableConcept', TFhirCodeableConcept(value.location)) 
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirAddress) then 
    ComposeAddress(json, 'locationAddress', TFhirAddress(value.location)) 
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirReference) then
    ComposeReference(json, 'locationReference', TFhirReference(value.location));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', value.unitPrice);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', value.net);
  if (SummaryOption in [soFull, soData]) and (value.udiList.Count > 0) then
  begin
    startArray(json, 'udi', value.udiList, false);
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(json, '', value.udiList[i]);
    finishArray(json, value.udiList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'bodySite', value.bodySite);
  if (SummaryOption in [soFull, soData]) and (value.subSiteList.Count > 0) then
  begin
    startArray(json, 'subSite', value.subSiteList, false);
    for i := 0 to value.subSiteList.Count - 1 do
      ComposeCodeableConcept(json, '', value.subSiteList[i]);
    finishArray(json, value.subSiteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.encounterList.Count > 0) then
  begin
    startArray(json, 'encounter', value.encounterList, false);
    for i := 0 to value.encounterList.Count - 1 do
      ComposeReference(json, '', value.encounterList[i]);
    finishArray(json, value.encounterList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.detailList.Count > 0) then
  begin
    startArray(json, 'detail', value.detailList, false);
    for i := 0 to value.detailList.Count - 1 do
      ComposeClaimItemDetail(json, '', value.detailList[i]);
    finishArray(json, value.detailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimItemDetail(jsn)); 
end;

function TFHIRJsonParser.ParseClaimItemDetail(jsn : TJsonObject) : TFhirClaimItemDetail;
begin
  result := TFhirClaimItemDetail.Create;
  try
    ParseClaimItemDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimItemDetailProperties(jsn : TJsonObject; value : TFhirClaimItemDetail);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('revenue') then
        value.revenue := ParseCodeableConcept(jsn.vObj['revenue']);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('productOrService') then
        value.productOrService := ParseCodeableConcept(jsn.vObj['productOrService']);
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], value.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], value.programCodeList, parseCodeableConcept);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('unitPrice') then
        value.unitPrice := ParseMoney(jsn.vObj['unitPrice']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('net') then
        value.net := ParseMoney(jsn.vObj['net']);
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], value.udiList, parseReference);
    if jsn.has('subDetail') then
      iterateArray(jsn.vArr['subDetail'], value.subDetailList, parseClaimItemDetailSubDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimItemDetail(json : TJSONWriter; name : string; value : TFhirClaimItemDetail; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', value.revenue);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  ComposeCodeableConcept(json, 'productOrService', value.productOrService);
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    startArray(json, 'modifier', value.modifierList, false);
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.modifierList[i]);
    finishArray(json, value.modifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.programCodeList.Count > 0) then
  begin
    startArray(json, 'programCode', value.programCodeList, false);
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.programCodeList[i]);
    finishArray(json, value.programCodeList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', value.unitPrice);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', value.net);
  if (SummaryOption in [soFull, soData]) and (value.udiList.Count > 0) then
  begin
    startArray(json, 'udi', value.udiList, false);
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(json, '', value.udiList[i]);
    finishArray(json, value.udiList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.subDetailList.Count > 0) then
  begin
    startArray(json, 'subDetail', value.subDetailList, false);
    for i := 0 to value.subDetailList.Count - 1 do
      ComposeClaimItemDetailSubDetail(json, '', value.subDetailList[i]);
    finishArray(json, value.subDetailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimItemDetailSubDetail(jsn)); 
end;

function TFHIRJsonParser.ParseClaimItemDetailSubDetail(jsn : TJsonObject) : TFhirClaimItemDetailSubDetail;
begin
  result := TFhirClaimItemDetailSubDetail.Create;
  try
    ParseClaimItemDetailSubDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimItemDetailSubDetailProperties(jsn : TJsonObject; value : TFhirClaimItemDetailSubDetail);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('revenue') then
        value.revenue := ParseCodeableConcept(jsn.vObj['revenue']);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('productOrService') then
        value.productOrService := ParseCodeableConcept(jsn.vObj['productOrService']);
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], value.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], value.programCodeList, parseCodeableConcept);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('unitPrice') then
        value.unitPrice := ParseMoney(jsn.vObj['unitPrice']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('net') then
        value.net := ParseMoney(jsn.vObj['net']);
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], value.udiList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeClaimItemDetailSubDetail(json : TJSONWriter; name : string; value : TFhirClaimItemDetailSubDetail; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', value.revenue);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  ComposeCodeableConcept(json, 'productOrService', value.productOrService);
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    startArray(json, 'modifier', value.modifierList, false);
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.modifierList[i]);
    finishArray(json, value.modifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.programCodeList.Count > 0) then
  begin
    startArray(json, 'programCode', value.programCodeList, false);
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.programCodeList[i]);
    finishArray(json, value.programCodeList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', value.unitPrice);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', value.net);
  if (SummaryOption in [soFull, soData]) and (value.udiList.Count > 0) then
  begin
    startArray(json, 'udi', value.udiList, false);
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(json, '', value.udiList[i]);
    finishArray(json, value.udiList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaim(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaim(jsn)); 
end;

function TFHIRJsonParser.ParseClaim(jsn : TJsonObject) : TFhirClaim;
begin
  result := TFhirClaim.Create;
  try
    ParseClaimProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimProperties(jsn : TJsonObject; value : TFhirClaim);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('subType') then
        value.subType := ParseCodeableConcept(jsn.vObj['subType']);
    if jsn.has('use') or jsn.has('_use') then
        value.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirUseEnum, SYSTEMS_TFhirUseEnum);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('billablePeriod') then
        value.billablePeriod := ParsePeriod(jsn.vObj['billablePeriod']);
    if jsn.has('created') or jsn.has('_created') then
        value.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);
    if jsn.has('enterer') then
        value.enterer := ParseReference(jsn.vObj['enterer']);
    if jsn.has('insurer') then
        value.insurer := ParseReference(jsn.vObj['insurer']);
    if jsn.has('provider') then
        value.provider := ParseReference(jsn.vObj['provider']);
    if jsn.has('priority') then
        value.priority := ParseCodeableConcept(jsn.vObj['priority']);
    if jsn.has('fundsReserve') then
        value.fundsReserve := ParseCodeableConcept(jsn.vObj['fundsReserve']);
    if jsn.has('related') then
      iterateArray(jsn.vArr['related'], value.relatedList, parseClaimRelated);
    if jsn.has('prescription') then
        value.prescription := ParseReference(jsn.vObj['prescription']);
    if jsn.has('originalPrescription') then
        value.originalPrescription := ParseReference(jsn.vObj['originalPrescription']);
    if jsn.has('payee') then
        value.payee := ParseClaimPayee(jsn.vObj['payee']);
    if jsn.has('referral') then
        value.referral := ParseReference(jsn.vObj['referral']);
    if jsn.has('facility') then
        value.facility := ParseReference(jsn.vObj['facility']);
    if jsn.has('careTeam') then
      iterateArray(jsn.vArr['careTeam'], value.careTeamList, parseClaimCareTeam);
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], value.supportingInfoList, parseClaimSupportingInfo);
    if jsn.has('diagnosis') then
      iterateArray(jsn.vArr['diagnosis'], value.diagnosisList, parseClaimDiagnosis);
    if jsn.has('procedure') then
      iterateArray(jsn.vArr['procedure'], value.procedure_List, parseClaimProcedure);
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], value.insuranceList, parseClaimInsurance);
    if jsn.has('accident') then
        value.accident := ParseClaimAccident(jsn.vObj['accident']);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], value.itemList, parseClaimItem);
    if jsn.has('total') then
        value.total := ParseMoney(jsn.vObj['total']);
end;

procedure TFHIRJsonComposer.ComposeClaim(json : TJSONWriter; name : string; value : TFhirClaim; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum, false);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'subType', value.subType);
  ComposeEnumValue(json, 'use', value.useElement, CODES_TFhirUseEnum, false);
  ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'billablePeriod', value.billablePeriod);
  ComposeDateTimeValue(json, 'created', value.createdElement, false);
  ComposeDateTimeProps(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'enterer', value.enterer);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'insurer', value.insurer);
  ComposeReference(json, 'provider', value.provider);
  ComposeCodeableConcept(json, 'priority', value.priority);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'fundsReserve', value.fundsReserve);
  if (SummaryOption in [soFull, soData]) and (value.relatedList.Count > 0) then
  begin
    startArray(json, 'related', value.relatedList, false);
    for i := 0 to value.relatedList.Count - 1 do
      ComposeClaimRelated(json, '', value.relatedList[i]);
    finishArray(json, value.relatedList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'prescription', value.prescription);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'originalPrescription', value.originalPrescription);
  if (SummaryOption in [soFull, soData]) then
    ComposeClaimPayee(json, 'payee', value.payee);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'referral', value.referral);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'facility', value.facility);
  if (SummaryOption in [soFull, soData]) and (value.careTeamList.Count > 0) then
  begin
    startArray(json, 'careTeam', value.careTeamList, false);
    for i := 0 to value.careTeamList.Count - 1 do
      ComposeClaimCareTeam(json, '', value.careTeamList[i]);
    finishArray(json, value.careTeamList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.supportingInfoList.Count > 0) then
  begin
    startArray(json, 'supportingInfo', value.supportingInfoList, false);
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeClaimSupportingInfo(json, '', value.supportingInfoList[i]);
    finishArray(json, value.supportingInfoList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.diagnosisList.Count > 0) then
  begin
    startArray(json, 'diagnosis', value.diagnosisList, false);
    for i := 0 to value.diagnosisList.Count - 1 do
      ComposeClaimDiagnosis(json, '', value.diagnosisList[i]);
    finishArray(json, value.diagnosisList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.procedure_List.Count > 0) then
  begin
    startArray(json, 'procedure', value.procedure_List, false);
    for i := 0 to value.procedure_List.Count - 1 do
      ComposeClaimProcedure(json, '', value.procedure_List[i]);
    finishArray(json, value.procedure_List);
  end;
  if (value.insuranceList.Count > 0) then
  begin
    startArray(json, 'insurance', value.insuranceList, false);
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeClaimInsurance(json, '', value.insuranceList[i]);
    finishArray(json, value.insuranceList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeClaimAccident(json, 'accident', value.accident);
  if (SummaryOption in [soFull, soData]) and (value.itemList.Count > 0) then
  begin
    startArray(json, 'item', value.itemList, false);
    for i := 0 to value.itemList.Count - 1 do
      ComposeClaimItem(json, '', value.itemList[i]);
    finishArray(json, value.itemList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'total', value.total);
end;

{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
procedure TFHIRJsonParser.ParseClaimResponseItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseItem(jsn)); 
end;

function TFHIRJsonParser.ParseClaimResponseItem(jsn : TJsonObject) : TFhirClaimResponseItem;
begin
  result := TFhirClaimResponseItem.Create;
  try
    ParseClaimResponseItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemProperties(jsn : TJsonObject; value : TFhirClaimResponseItem);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('itemSequence') or jsn.has('_itemSequence') then
        value.itemSequenceElement := parsePositiveInt(jsn.node['itemSequence'], jsn.vObj['_itemSequence']);
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], value.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], value.adjudicationList, parseClaimResponseItemAdjudication);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], value.detailList, parseClaimResponseItemDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseItem(json : TJSONWriter; name : string; value : TFhirClaimResponseItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'itemSequence', value.itemSequenceElement, false);
  ComposePositiveIntProps(json, 'itemSequence', value.itemSequenceElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.noteNumberList.Count - 1 do
    begin
      ext := ext or ((value.noteNumberList[i].id <> '') or (value.noteNumberList[i].hasExtensionList) {no-comments or (value.noteNumberList[i].hasComments)});
      val := val or (value.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'noteNumber', value.noteNumberList, true);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
    if ext then
    begin
      startArray(json, '_noteNumber', value.noteNumberList, false);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
  end;
  if (value.adjudicationList.Count > 0) then
  begin
    startArray(json, 'adjudication', value.adjudicationList, false);
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', value.adjudicationList[i]);
    finishArray(json, value.adjudicationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.detailList.Count > 0) then
  begin
    startArray(json, 'detail', value.detailList, false);
    for i := 0 to value.detailList.Count - 1 do
      ComposeClaimResponseItemDetail(json, '', value.detailList[i]);
    finishArray(json, value.detailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimResponseItemAdjudication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseItemAdjudication(jsn)); 
end;

function TFHIRJsonParser.ParseClaimResponseItemAdjudication(jsn : TJsonObject) : TFhirClaimResponseItemAdjudication;
begin
  result := TFhirClaimResponseItemAdjudication.Create;
  try
    ParseClaimResponseItemAdjudicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemAdjudicationProperties(jsn : TJsonObject; value : TFhirClaimResponseItemAdjudication);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('reason') then
        value.reason := ParseCodeableConcept(jsn.vObj['reason']);
    if jsn.has('amount') then
        value.amount := ParseMoney(jsn.vObj['amount']);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseDecimal(jsn.node['value'], jsn.vObj['_value']);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseItemAdjudication(json : TJSONWriter; name : string; value : TFhirClaimResponseItemAdjudication; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'category', value.category);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reason', value.reason);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', value.amount);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'value', value.valueElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimResponseItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseItemDetail(jsn)); 
end;

function TFHIRJsonParser.ParseClaimResponseItemDetail(jsn : TJsonObject) : TFhirClaimResponseItemDetail;
begin
  result := TFhirClaimResponseItemDetail.Create;
  try
    ParseClaimResponseItemDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemDetailProperties(jsn : TJsonObject; value : TFhirClaimResponseItemDetail);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('detailSequence') or jsn.has('_detailSequence') then
        value.detailSequenceElement := parsePositiveInt(jsn.node['detailSequence'], jsn.vObj['_detailSequence']);
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], value.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], value.adjudicationList, parseClaimResponseItemAdjudication);
    if jsn.has('subDetail') then
      iterateArray(jsn.vArr['subDetail'], value.subDetailList, parseClaimResponseItemDetailSubDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseItemDetail(json : TJSONWriter; name : string; value : TFhirClaimResponseItemDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'detailSequence', value.detailSequenceElement, false);
  ComposePositiveIntProps(json, 'detailSequence', value.detailSequenceElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.noteNumberList.Count - 1 do
    begin
      ext := ext or ((value.noteNumberList[i].id <> '') or (value.noteNumberList[i].hasExtensionList) {no-comments or (value.noteNumberList[i].hasComments)});
      val := val or (value.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'noteNumber', value.noteNumberList, true);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
    if ext then
    begin
      startArray(json, '_noteNumber', value.noteNumberList, false);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
  end;
  if (value.adjudicationList.Count > 0) then
  begin
    startArray(json, 'adjudication', value.adjudicationList, false);
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', value.adjudicationList[i]);
    finishArray(json, value.adjudicationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.subDetailList.Count > 0) then
  begin
    startArray(json, 'subDetail', value.subDetailList, false);
    for i := 0 to value.subDetailList.Count - 1 do
      ComposeClaimResponseItemDetailSubDetail(json, '', value.subDetailList[i]);
    finishArray(json, value.subDetailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimResponseItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseItemDetailSubDetail(jsn)); 
end;

function TFHIRJsonParser.ParseClaimResponseItemDetailSubDetail(jsn : TJsonObject) : TFhirClaimResponseItemDetailSubDetail;
begin
  result := TFhirClaimResponseItemDetailSubDetail.Create;
  try
    ParseClaimResponseItemDetailSubDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemDetailSubDetailProperties(jsn : TJsonObject; value : TFhirClaimResponseItemDetailSubDetail);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('subDetailSequence') or jsn.has('_subDetailSequence') then
        value.subDetailSequenceElement := parsePositiveInt(jsn.node['subDetailSequence'], jsn.vObj['_subDetailSequence']);
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], value.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], value.adjudicationList, parseClaimResponseItemAdjudication);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseItemDetailSubDetail(json : TJSONWriter; name : string; value : TFhirClaimResponseItemDetailSubDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'subDetailSequence', value.subDetailSequenceElement, false);
  ComposePositiveIntProps(json, 'subDetailSequence', value.subDetailSequenceElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.noteNumberList.Count - 1 do
    begin
      ext := ext or ((value.noteNumberList[i].id <> '') or (value.noteNumberList[i].hasExtensionList) {no-comments or (value.noteNumberList[i].hasComments)});
      val := val or (value.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'noteNumber', value.noteNumberList, true);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
    if ext then
    begin
      startArray(json, '_noteNumber', value.noteNumberList, false);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.adjudicationList.Count > 0) then
  begin
    startArray(json, 'adjudication', value.adjudicationList, false);
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', value.adjudicationList[i]);
    finishArray(json, value.adjudicationList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimResponseAddItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseAddItem(jsn)); 
end;

function TFHIRJsonParser.ParseClaimResponseAddItem(jsn : TJsonObject) : TFhirClaimResponseAddItem;
begin
  result := TFhirClaimResponseAddItem.Create;
  try
    ParseClaimResponseAddItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseAddItemProperties(jsn : TJsonObject; value : TFhirClaimResponseAddItem);
begin
    ParseBackboneElementProperties(jsn, value);
      if jsn.has('itemSequence') or jsn.has('_itemSequence') then
      iteratePrimitiveArray(jsn.vArr['itemSequence'], jsn.vArr['_itemSequence'], value.itemSequenceList, parsePositiveInt);
      if jsn.has('detailSequence') or jsn.has('_detailSequence') then
      iteratePrimitiveArray(jsn.vArr['detailSequence'], jsn.vArr['_detailSequence'], value.detailSequenceList, parsePositiveInt);
      if jsn.has('subdetailSequence') or jsn.has('_subdetailSequence') then
      iteratePrimitiveArray(jsn.vArr['subdetailSequence'], jsn.vArr['_subdetailSequence'], value.subdetailSequenceList, parsePositiveInt);
    if jsn.has('provider') then
      iterateArray(jsn.vArr['provider'], value.providerList, parseReference);
    if jsn.has('productOrService') then
        value.productOrService := ParseCodeableConcept(jsn.vObj['productOrService']);
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], value.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], value.programCodeList, parseCodeableConcept);
    if jsn.has('servicedPeriod') {a4} then
      value.serviced := ParsePeriod(jsn.vObj['servicedPeriod']);
    if jsn.has('servicedDate') or jsn.has('_servicedDate') then
      value.serviced := parseDate(jsn.node['servicedDate'], jsn.vObj['_servicedDate']);
    if jsn.has('locationCodeableConcept') {a4} then
      value.location := ParseCodeableConcept(jsn.vObj['locationCodeableConcept']);
    if jsn.has('locationAddress') {a4} then
      value.location := ParseAddress(jsn.vObj['locationAddress']);
    if jsn.has('locationReference') {a3} then
      value.location := ParseReference(jsn.vObj['locationReference']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('unitPrice') then
        value.unitPrice := ParseMoney(jsn.vObj['unitPrice']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('net') then
        value.net := ParseMoney(jsn.vObj['net']);
    if jsn.has('bodySite') then
        value.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);
    if jsn.has('subSite') then
      iterateArray(jsn.vArr['subSite'], value.subSiteList, parseCodeableConcept);
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], value.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], value.adjudicationList, parseClaimResponseItemAdjudication);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], value.detailList, parseClaimResponseAddItemDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseAddItem(json : TJSONWriter; name : string; value : TFhirClaimResponseAddItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.itemSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.itemSequenceList.Count - 1 do
    begin
      ext := ext or ((value.itemSequenceList[i].id <> '') or (value.itemSequenceList[i].hasExtensionList) {no-comments or (value.itemSequenceList[i].hasComments)});
      val := val or (value.itemSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'itemSequence', value.itemSequenceList, true);
      for i := 0 to value.itemSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.itemSequenceList[i], true);
      finishArray(json, value.itemSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_itemSequence', value.itemSequenceList, false);
      for i := 0 to value.itemSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.itemSequenceList[i], true);
      finishArray(json, value.itemSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.detailSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.detailSequenceList.Count - 1 do
    begin
      ext := ext or ((value.detailSequenceList[i].id <> '') or (value.detailSequenceList[i].hasExtensionList) {no-comments or (value.detailSequenceList[i].hasComments)});
      val := val or (value.detailSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'detailSequence', value.detailSequenceList, true);
      for i := 0 to value.detailSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.detailSequenceList[i], true);
      finishArray(json, value.detailSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_detailSequence', value.detailSequenceList, false);
      for i := 0 to value.detailSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.detailSequenceList[i], true);
      finishArray(json, value.detailSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.subdetailSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.subdetailSequenceList.Count - 1 do
    begin
      ext := ext or ((value.subdetailSequenceList[i].id <> '') or (value.subdetailSequenceList[i].hasExtensionList) {no-comments or (value.subdetailSequenceList[i].hasComments)});
      val := val or (value.subdetailSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'subdetailSequence', value.subdetailSequenceList, true);
      for i := 0 to value.subdetailSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.subdetailSequenceList[i], true);
      finishArray(json, value.subdetailSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_subdetailSequence', value.subdetailSequenceList, false);
      for i := 0 to value.subdetailSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.subdetailSequenceList[i], true);
      finishArray(json, value.subdetailSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.providerList.Count > 0) then
  begin
    startArray(json, 'provider', value.providerList, false);
    for i := 0 to value.providerList.Count - 1 do
      ComposeReference(json, '', value.providerList[i]);
    finishArray(json, value.providerList);
  end;
  ComposeCodeableConcept(json, 'productOrService', value.productOrService);
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    startArray(json, 'modifier', value.modifierList, false);
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.modifierList[i]);
    finishArray(json, value.modifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.programCodeList.Count > 0) then
  begin
    startArray(json, 'programCode', value.programCodeList, false);
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.programCodeList[i]);
    finishArray(json, value.programCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirPeriod) then 
    ComposePeriod(json, 'servicedPeriod', TFhirPeriod(value.serviced)) 
  else if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirDate) then 
  begin
    ComposeDateValue(json, 'servicedDate', TFhirDate(value.serviced), false);
    ComposeDateProps(json, 'servicedDate', TFhirDate(value.serviced), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.location is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'locationCodeableConcept', TFhirCodeableConcept(value.location)) 
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirAddress) then 
    ComposeAddress(json, 'locationAddress', TFhirAddress(value.location)) 
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirReference) then
    ComposeReference(json, 'locationReference', TFhirReference(value.location));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', value.unitPrice);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', value.net);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'bodySite', value.bodySite);
  if (SummaryOption in [soFull, soData]) and (value.subSiteList.Count > 0) then
  begin
    startArray(json, 'subSite', value.subSiteList, false);
    for i := 0 to value.subSiteList.Count - 1 do
      ComposeCodeableConcept(json, '', value.subSiteList[i]);
    finishArray(json, value.subSiteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.noteNumberList.Count - 1 do
    begin
      ext := ext or ((value.noteNumberList[i].id <> '') or (value.noteNumberList[i].hasExtensionList) {no-comments or (value.noteNumberList[i].hasComments)});
      val := val or (value.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'noteNumber', value.noteNumberList, true);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
    if ext then
    begin
      startArray(json, '_noteNumber', value.noteNumberList, false);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
  end;
  if (value.adjudicationList.Count > 0) then
  begin
    startArray(json, 'adjudication', value.adjudicationList, false);
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', value.adjudicationList[i]);
    finishArray(json, value.adjudicationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.detailList.Count > 0) then
  begin
    startArray(json, 'detail', value.detailList, false);
    for i := 0 to value.detailList.Count - 1 do
      ComposeClaimResponseAddItemDetail(json, '', value.detailList[i]);
    finishArray(json, value.detailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimResponseAddItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseAddItemDetail(jsn)); 
end;

function TFHIRJsonParser.ParseClaimResponseAddItemDetail(jsn : TJsonObject) : TFhirClaimResponseAddItemDetail;
begin
  result := TFhirClaimResponseAddItemDetail.Create;
  try
    ParseClaimResponseAddItemDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseAddItemDetailProperties(jsn : TJsonObject; value : TFhirClaimResponseAddItemDetail);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('productOrService') then
        value.productOrService := ParseCodeableConcept(jsn.vObj['productOrService']);
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], value.modifierList, parseCodeableConcept);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('unitPrice') then
        value.unitPrice := ParseMoney(jsn.vObj['unitPrice']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('net') then
        value.net := ParseMoney(jsn.vObj['net']);
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], value.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], value.adjudicationList, parseClaimResponseItemAdjudication);
    if jsn.has('subDetail') then
      iterateArray(jsn.vArr['subDetail'], value.subDetailList, parseClaimResponseAddItemDetailSubDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseAddItemDetail(json : TJSONWriter; name : string; value : TFhirClaimResponseAddItemDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'productOrService', value.productOrService);
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    startArray(json, 'modifier', value.modifierList, false);
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.modifierList[i]);
    finishArray(json, value.modifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', value.unitPrice);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', value.net);
  if (SummaryOption in [soFull, soData]) and (value.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.noteNumberList.Count - 1 do
    begin
      ext := ext or ((value.noteNumberList[i].id <> '') or (value.noteNumberList[i].hasExtensionList) {no-comments or (value.noteNumberList[i].hasComments)});
      val := val or (value.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'noteNumber', value.noteNumberList, true);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
    if ext then
    begin
      startArray(json, '_noteNumber', value.noteNumberList, false);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
  end;
  if (value.adjudicationList.Count > 0) then
  begin
    startArray(json, 'adjudication', value.adjudicationList, false);
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', value.adjudicationList[i]);
    finishArray(json, value.adjudicationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.subDetailList.Count > 0) then
  begin
    startArray(json, 'subDetail', value.subDetailList, false);
    for i := 0 to value.subDetailList.Count - 1 do
      ComposeClaimResponseAddItemDetailSubDetail(json, '', value.subDetailList[i]);
    finishArray(json, value.subDetailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimResponseAddItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseAddItemDetailSubDetail(jsn)); 
end;

function TFHIRJsonParser.ParseClaimResponseAddItemDetailSubDetail(jsn : TJsonObject) : TFhirClaimResponseAddItemDetailSubDetail;
begin
  result := TFhirClaimResponseAddItemDetailSubDetail.Create;
  try
    ParseClaimResponseAddItemDetailSubDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseAddItemDetailSubDetailProperties(jsn : TJsonObject; value : TFhirClaimResponseAddItemDetailSubDetail);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('productOrService') then
        value.productOrService := ParseCodeableConcept(jsn.vObj['productOrService']);
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], value.modifierList, parseCodeableConcept);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('unitPrice') then
        value.unitPrice := ParseMoney(jsn.vObj['unitPrice']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('net') then
        value.net := ParseMoney(jsn.vObj['net']);
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], value.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], value.adjudicationList, parseClaimResponseItemAdjudication);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseAddItemDetailSubDetail(json : TJSONWriter; name : string; value : TFhirClaimResponseAddItemDetailSubDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'productOrService', value.productOrService);
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    startArray(json, 'modifier', value.modifierList, false);
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.modifierList[i]);
    finishArray(json, value.modifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', value.unitPrice);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', value.net);
  if (SummaryOption in [soFull, soData]) and (value.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.noteNumberList.Count - 1 do
    begin
      ext := ext or ((value.noteNumberList[i].id <> '') or (value.noteNumberList[i].hasExtensionList) {no-comments or (value.noteNumberList[i].hasComments)});
      val := val or (value.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'noteNumber', value.noteNumberList, true);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
    if ext then
    begin
      startArray(json, '_noteNumber', value.noteNumberList, false);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
  end;
  if (value.adjudicationList.Count > 0) then
  begin
    startArray(json, 'adjudication', value.adjudicationList, false);
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', value.adjudicationList[i]);
    finishArray(json, value.adjudicationList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimResponseTotal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseTotal(jsn)); 
end;

function TFHIRJsonParser.ParseClaimResponseTotal(jsn : TJsonObject) : TFhirClaimResponseTotal;
begin
  result := TFhirClaimResponseTotal.Create;
  try
    ParseClaimResponseTotalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseTotalProperties(jsn : TJsonObject; value : TFhirClaimResponseTotal);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('amount') then
        value.amount := ParseMoney(jsn.vObj['amount']);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseTotal(json : TJSONWriter; name : string; value : TFhirClaimResponseTotal; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'category', value.category);
  ComposeMoney(json, 'amount', value.amount);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimResponsePayment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponsePayment(jsn)); 
end;

function TFHIRJsonParser.ParseClaimResponsePayment(jsn : TJsonObject) : TFhirClaimResponsePayment;
begin
  result := TFhirClaimResponsePayment.Create;
  try
    ParseClaimResponsePaymentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponsePaymentProperties(jsn : TJsonObject; value : TFhirClaimResponsePayment);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('adjustment') then
        value.adjustment := ParseMoney(jsn.vObj['adjustment']);
    if jsn.has('adjustmentReason') then
        value.adjustmentReason := ParseCodeableConcept(jsn.vObj['adjustmentReason']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDate(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('amount') then
        value.amount := ParseMoney(jsn.vObj['amount']);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
end;

procedure TFHIRJsonComposer.ComposeClaimResponsePayment(json : TJSONWriter; name : string; value : TFhirClaimResponsePayment; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'adjustment', value.adjustment);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'adjustmentReason', value.adjustmentReason);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'date', value.dateElement, false);
  ComposeMoney(json, 'amount', value.amount);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimResponseProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseProcessNote(jsn)); 
end;

function TFHIRJsonParser.ParseClaimResponseProcessNote(jsn : TJsonObject) : TFhirClaimResponseProcessNote;
begin
  result := TFhirClaimResponseProcessNote.Create;
  try
    ParseClaimResponseProcessNoteProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseProcessNoteProperties(jsn : TJsonObject; value : TFhirClaimResponseProcessNote);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('number') or jsn.has('_number') then
        value.numberElement := parsePositiveInt(jsn.node['number'], jsn.vObj['_number']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirNoteTypeEnum, SYSTEMS_TFhirNoteTypeEnum);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
    if jsn.has('language') then
        value.language := ParseCodeableConcept(jsn.vObj['language']);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseProcessNote(json : TJSONWriter; name : string; value : TFhirClaimResponseProcessNote; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'number', value.numberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'number', value.numberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirNoteTypeEnum, false);
  ComposeStringValue(json, 'text', value.textElement, false);
  ComposeStringProps(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'language', value.language);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimResponseInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseInsurance(jsn)); 
end;

function TFHIRJsonParser.ParseClaimResponseInsurance(jsn : TJsonObject) : TFhirClaimResponseInsurance;
begin
  result := TFhirClaimResponseInsurance.Create;
  try
    ParseClaimResponseInsuranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseInsuranceProperties(jsn : TJsonObject; value : TFhirClaimResponseInsurance);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('focal') or jsn.has('_focal') then
        value.focalElement := parseBoolean(jsn.node['focal'], jsn.vObj['_focal']);
    if jsn.has('coverage') then
        value.coverage := ParseReference(jsn.vObj['coverage']);
    if jsn.has('businessArrangement') or jsn.has('_businessArrangement') then
        value.businessArrangementElement := parseString(jsn.node['businessArrangement'], jsn.vObj['_businessArrangement']);
    if jsn.has('claimResponse') then
        value.claimResponse := ParseReference(jsn.vObj['claimResponse']);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseInsurance(json : TJSONWriter; name : string; value : TFhirClaimResponseInsurance; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  ComposeBooleanValue(json, 'focal', value.focalElement, false);
  ComposeBooleanProps(json, 'focal', value.focalElement, false);
  ComposeReference(json, 'coverage', value.coverage);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'businessArrangement', value.businessArrangementElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'businessArrangement', value.businessArrangementElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'claimResponse', value.claimResponse);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimResponseError(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseError(jsn)); 
end;

function TFHIRJsonParser.ParseClaimResponseError(jsn : TJsonObject) : TFhirClaimResponseError;
begin
  result := TFhirClaimResponseError.Create;
  try
    ParseClaimResponseErrorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseErrorProperties(jsn : TJsonObject; value : TFhirClaimResponseError);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('itemSequence') or jsn.has('_itemSequence') then
        value.itemSequenceElement := parsePositiveInt(jsn.node['itemSequence'], jsn.vObj['_itemSequence']);
    if jsn.has('detailSequence') or jsn.has('_detailSequence') then
        value.detailSequenceElement := parsePositiveInt(jsn.node['detailSequence'], jsn.vObj['_detailSequence']);
    if jsn.has('subDetailSequence') or jsn.has('_subDetailSequence') then
        value.subDetailSequenceElement := parsePositiveInt(jsn.node['subDetailSequence'], jsn.vObj['_subDetailSequence']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseError(json : TJSONWriter; name : string; value : TFhirClaimResponseError; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'itemSequence', value.itemSequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'itemSequence', value.itemSequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'detailSequence', value.detailSequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'detailSequence', value.detailSequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'subDetailSequence', value.subDetailSequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'subDetailSequence', value.subDetailSequenceElement, false);
  ComposeCodeableConcept(json, 'code', value.code);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClaimResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponse(jsn)); 
end;

function TFHIRJsonParser.ParseClaimResponse(jsn : TJsonObject) : TFhirClaimResponse;
begin
  result := TFhirClaimResponse.Create;
  try
    ParseClaimResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseProperties(jsn : TJsonObject; value : TFhirClaimResponse);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('subType') then
        value.subType := ParseCodeableConcept(jsn.vObj['subType']);
    if jsn.has('use') or jsn.has('_use') then
        value.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirUseEnum, SYSTEMS_TFhirUseEnum);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('created') or jsn.has('_created') then
        value.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);
    if jsn.has('insurer') then
        value.insurer := ParseReference(jsn.vObj['insurer']);
    if jsn.has('requestor') then
        value.requestor := ParseReference(jsn.vObj['requestor']);
    if jsn.has('request') then
        value.request := ParseReference(jsn.vObj['request']);
    if jsn.has('outcome') or jsn.has('_outcome') then
        value.outcomeElement := parseEnum(jsn.path+'/outcome', jsn.node['outcome'], jsn.vObj['_outcome'], CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum);
    if jsn.has('disposition') or jsn.has('_disposition') then
        value.dispositionElement := parseString(jsn.node['disposition'], jsn.vObj['_disposition']);
    if jsn.has('preAuthRef') or jsn.has('_preAuthRef') then
        value.preAuthRefElement := parseString(jsn.node['preAuthRef'], jsn.vObj['_preAuthRef']);
    if jsn.has('preAuthPeriod') then
        value.preAuthPeriod := ParsePeriod(jsn.vObj['preAuthPeriod']);
    if jsn.has('payeeType') then
        value.payeeType := ParseCodeableConcept(jsn.vObj['payeeType']);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], value.itemList, parseClaimResponseItem);
    if jsn.has('addItem') then
      iterateArray(jsn.vArr['addItem'], value.addItemList, parseClaimResponseAddItem);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], value.adjudicationList, parseClaimResponseItemAdjudication);
    if jsn.has('total') then
      iterateArray(jsn.vArr['total'], value.totalList, parseClaimResponseTotal);
    if jsn.has('payment') then
        value.payment := ParseClaimResponsePayment(jsn.vObj['payment']);
    if jsn.has('fundsReserve') then
        value.fundsReserve := ParseCodeableConcept(jsn.vObj['fundsReserve']);
    if jsn.has('formCode') then
        value.formCode := ParseCodeableConcept(jsn.vObj['formCode']);
    if jsn.has('form') then
        value.form := ParseAttachment(jsn.vObj['form']);
    if jsn.has('processNote') then
      iterateArray(jsn.vArr['processNote'], value.processNoteList, parseClaimResponseProcessNote);
    if jsn.has('communicationRequest') then
      iterateArray(jsn.vArr['communicationRequest'], value.communicationRequestList, parseReference);
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], value.insuranceList, parseClaimResponseInsurance);
    if jsn.has('error') then
      iterateArray(jsn.vArr['error'], value.errorList, parseClaimResponseError);
end;

procedure TFHIRJsonComposer.ComposeClaimResponse(json : TJSONWriter; name : string; value : TFhirClaimResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum, false);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'subType', value.subType);
  ComposeEnumValue(json, 'use', value.useElement, CODES_TFhirUseEnum, false);
  ComposeReference(json, 'patient', value.patient);
  ComposeDateTimeValue(json, 'created', value.createdElement, false);
  ComposeDateTimeProps(json, 'created', value.createdElement, false);
  ComposeReference(json, 'insurer', value.insurer);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'requestor', value.requestor);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'request', value.request);
  ComposeEnumValue(json, 'outcome', value.outcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'disposition', value.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'disposition', value.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'preAuthRef', value.preAuthRefElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'preAuthRef', value.preAuthRefElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'preAuthPeriod', value.preAuthPeriod);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'payeeType', value.payeeType);
  if (SummaryOption in [soFull, soData]) and (value.itemList.Count > 0) then
  begin
    startArray(json, 'item', value.itemList, false);
    for i := 0 to value.itemList.Count - 1 do
      ComposeClaimResponseItem(json, '', value.itemList[i]);
    finishArray(json, value.itemList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.addItemList.Count > 0) then
  begin
    startArray(json, 'addItem', value.addItemList, false);
    for i := 0 to value.addItemList.Count - 1 do
      ComposeClaimResponseAddItem(json, '', value.addItemList[i]);
    finishArray(json, value.addItemList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.adjudicationList.Count > 0) then
  begin
    startArray(json, 'adjudication', value.adjudicationList, false);
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', value.adjudicationList[i]);
    finishArray(json, value.adjudicationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.totalList.Count > 0) then
  begin
    startArray(json, 'total', value.totalList, false);
    for i := 0 to value.totalList.Count - 1 do
      ComposeClaimResponseTotal(json, '', value.totalList[i]);
    finishArray(json, value.totalList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeClaimResponsePayment(json, 'payment', value.payment);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'fundsReserve', value.fundsReserve);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'formCode', value.formCode);
  if (SummaryOption in [soFull, soData]) then
    ComposeAttachment(json, 'form', value.form);
  if (SummaryOption in [soFull, soData]) and (value.processNoteList.Count > 0) then
  begin
    startArray(json, 'processNote', value.processNoteList, false);
    for i := 0 to value.processNoteList.Count - 1 do
      ComposeClaimResponseProcessNote(json, '', value.processNoteList[i]);
    finishArray(json, value.processNoteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.communicationRequestList.Count > 0) then
  begin
    startArray(json, 'communicationRequest', value.communicationRequestList, false);
    for i := 0 to value.communicationRequestList.Count - 1 do
      ComposeReference(json, '', value.communicationRequestList[i]);
    finishArray(json, value.communicationRequestList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.insuranceList.Count > 0) then
  begin
    startArray(json, 'insurance', value.insuranceList, false);
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeClaimResponseInsurance(json, '', value.insuranceList[i]);
    finishArray(json, value.insuranceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.errorList.Count > 0) then
  begin
    startArray(json, 'error', value.errorList, false);
    for i := 0 to value.errorList.Count - 1 do
      ComposeClaimResponseError(json, '', value.errorList[i]);
    finishArray(json, value.errorList);
  end;
end;

{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
procedure TFHIRJsonParser.ParseClinicalImpressionInvestigation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalImpressionInvestigation(jsn)); 
end;

function TFHIRJsonParser.ParseClinicalImpressionInvestigation(jsn : TJsonObject) : TFhirClinicalImpressionInvestigation;
begin
  result := TFhirClinicalImpressionInvestigation.Create;
  try
    ParseClinicalImpressionInvestigationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalImpressionInvestigationProperties(jsn : TJsonObject; value : TFhirClinicalImpressionInvestigation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], value.itemList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeClinicalImpressionInvestigation(json : TJSONWriter; name : string; value : TFhirClinicalImpressionInvestigation; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) and (value.itemList.Count > 0) then
  begin
    startArray(json, 'item', value.itemList, false);
    for i := 0 to value.itemList.Count - 1 do
      ComposeReference(json, '', value.itemList[i]);
    finishArray(json, value.itemList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClinicalImpressionFinding(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalImpressionFinding(jsn)); 
end;

function TFHIRJsonParser.ParseClinicalImpressionFinding(jsn : TJsonObject) : TFhirClinicalImpressionFinding;
begin
  result := TFhirClinicalImpressionFinding.Create;
  try
    ParseClinicalImpressionFindingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalImpressionFindingProperties(jsn : TJsonObject; value : TFhirClinicalImpressionFinding);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('itemCodeableConcept') then
        value.itemCodeableConcept := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
    if jsn.has('itemReference') then
        value.itemReference := ParseReference(jsn.vObj['itemReference']);
    if jsn.has('basis') or jsn.has('_basis') then
        value.basisElement := parseString(jsn.node['basis'], jsn.vObj['_basis']);
end;

procedure TFHIRJsonComposer.ComposeClinicalImpressionFinding(json : TJSONWriter; name : string; value : TFhirClinicalImpressionFinding; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'itemCodeableConcept', value.itemCodeableConcept);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'itemReference', value.itemReference);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'basis', value.basisElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'basis', value.basisElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClinicalImpression(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalImpression(jsn)); 
end;

function TFHIRJsonParser.ParseClinicalImpression(jsn : TJsonObject) : TFhirClinicalImpression;
begin
  result := TFhirClinicalImpression.Create;
  try
    ParseClinicalImpressionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalImpressionProperties(jsn : TJsonObject; value : TFhirClinicalImpression);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirClinicalImpressionStatusEnum, SYSTEMS_TFhirClinicalImpressionStatusEnum);
    if jsn.has('statusReason') then
        value.statusReason := ParseCodeableConcept(jsn.vObj['statusReason']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('effectivePeriod') {a4} then
      value.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      value.effective := parseDateTime(jsn.node['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('assessor') then
        value.assessor := ParseReference(jsn.vObj['assessor']);
    if jsn.has('previous') then
        value.previous := ParseReference(jsn.vObj['previous']);
    if jsn.has('problem') then
      iterateArray(jsn.vArr['problem'], value.problemList, parseReference);
    if jsn.has('investigation') then
      iterateArray(jsn.vArr['investigation'], value.investigationList, parseClinicalImpressionInvestigation);
      if jsn.has('protocol') or jsn.has('_protocol') then
      iteratePrimitiveArray(jsn.vArr['protocol'], jsn.vArr['_protocol'], value.protocolList, parseUri);
    if jsn.has('summary') or jsn.has('_summary') then
        value.summaryElement := parseString(jsn.node['summary'], jsn.vObj['_summary']);
    if jsn.has('finding') then
      iterateArray(jsn.vArr['finding'], value.findingList, parseClinicalImpressionFinding);
    if jsn.has('prognosisCodeableConcept') then
      iterateArray(jsn.vArr['prognosisCodeableConcept'], value.prognosisCodeableConceptList, parseCodeableConcept);
    if jsn.has('prognosisReference') then
      iterateArray(jsn.vArr['prognosisReference'], value.prognosisReferenceList, parseReference);
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], value.supportingInfoList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeClinicalImpression(json : TJSONWriter; name : string; value : TFhirClinicalImpression; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirClinicalImpressionStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'statusReason', value.statusReason);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(value.effective)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(value.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(value.effective), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'assessor', value.assessor);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'previous', value.previous);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.problemList.Count > 0) then
  begin
    startArray(json, 'problem', value.problemList, false);
    for i := 0 to value.problemList.Count - 1 do
      ComposeReference(json, '', value.problemList[i]);
    finishArray(json, value.problemList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.investigationList.Count > 0) then
  begin
    startArray(json, 'investigation', value.investigationList, false);
    for i := 0 to value.investigationList.Count - 1 do
      ComposeClinicalImpressionInvestigation(json, '', value.investigationList[i]);
    finishArray(json, value.investigationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.protocolList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.protocolList.Count - 1 do
    begin
      ext := ext or ((value.protocolList[i].id <> '') or (value.protocolList[i].hasExtensionList) {no-comments or (value.protocolList[i].hasComments)});
      val := val or (value.protocolList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'protocol', value.protocolList, true);
      for i := 0 to value.protocolList.Count - 1 do
        ComposeUriValue(json, '', value.protocolList[i], true);
      finishArray(json, value.protocolList);
    end;
    if ext then
    begin
      startArray(json, '_protocol', value.protocolList, false);
      for i := 0 to value.protocolList.Count - 1 do
        ComposeUriProps(json, '', value.protocolList[i], true);
      finishArray(json, value.protocolList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'summary', value.summaryElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'summary', value.summaryElement, false);
  if (SummaryOption in [soFull, soData]) and (value.findingList.Count > 0) then
  begin
    startArray(json, 'finding', value.findingList, false);
    for i := 0 to value.findingList.Count - 1 do
      ComposeClinicalImpressionFinding(json, '', value.findingList[i]);
    finishArray(json, value.findingList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.prognosisCodeableConceptList.Count > 0) then
  begin
    startArray(json, 'prognosisCodeableConcept', value.prognosisCodeableConceptList, false);
    for i := 0 to value.prognosisCodeableConceptList.Count - 1 do
      ComposeCodeableConcept(json, '', value.prognosisCodeableConceptList[i]);
    finishArray(json, value.prognosisCodeableConceptList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.prognosisReferenceList.Count > 0) then
  begin
    startArray(json, 'prognosisReference', value.prognosisReferenceList, false);
    for i := 0 to value.prognosisReferenceList.Count - 1 do
      ComposeReference(json, '', value.prognosisReferenceList[i]);
    finishArray(json, value.prognosisReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.supportingInfoList.Count > 0) then
  begin
    startArray(json, 'supportingInfo', value.supportingInfoList, false);
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeReference(json, '', value.supportingInfoList[i]);
    finishArray(json, value.supportingInfoList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
end;

{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CLINICALUSEDEFINITION}
procedure TFHIRJsonParser.ParseClinicalUseDefinitionContraindication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalUseDefinitionContraindication(jsn)); 
end;

function TFHIRJsonParser.ParseClinicalUseDefinitionContraindication(jsn : TJsonObject) : TFhirClinicalUseDefinitionContraindication;
begin
  result := TFhirClinicalUseDefinitionContraindication.Create;
  try
    ParseClinicalUseDefinitionContraindicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinitionContraindicationProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinitionContraindication);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('diseaseSymptomProcedure') then
        value.diseaseSymptomProcedure := ParseCodeableReference(jsn.vObj['diseaseSymptomProcedure']);
    if jsn.has('diseaseStatus') then
        value.diseaseStatus := ParseCodeableReference(jsn.vObj['diseaseStatus']);
    if jsn.has('comorbidity') then
      iterateArray(jsn.vArr['comorbidity'], value.comorbidityList, parseCodeableReference);
    if jsn.has('indication') then
      iterateArray(jsn.vArr['indication'], value.indicationList, parseReference);
    if jsn.has('otherTherapy') then
      iterateArray(jsn.vArr['otherTherapy'], value.otherTherapyList, parseClinicalUseDefinitionContraindicationOtherTherapy);
end;

procedure TFHIRJsonComposer.ComposeClinicalUseDefinitionContraindication(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinitionContraindication; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableReference(json, 'diseaseSymptomProcedure', value.diseaseSymptomProcedure);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableReference(json, 'diseaseStatus', value.diseaseStatus);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.comorbidityList.Count > 0) then
  begin
    startArray(json, 'comorbidity', value.comorbidityList, false);
    for i := 0 to value.comorbidityList.Count - 1 do
      ComposeCodeableReference(json, '', value.comorbidityList[i]);
    finishArray(json, value.comorbidityList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.indicationList.Count > 0) then
  begin
    startArray(json, 'indication', value.indicationList, false);
    for i := 0 to value.indicationList.Count - 1 do
      ComposeReference(json, '', value.indicationList[i]);
    finishArray(json, value.indicationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.otherTherapyList.Count > 0) then
  begin
    startArray(json, 'otherTherapy', value.otherTherapyList, false);
    for i := 0 to value.otherTherapyList.Count - 1 do
      ComposeClinicalUseDefinitionContraindicationOtherTherapy(json, '', value.otherTherapyList[i]);
    finishArray(json, value.otherTherapyList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinitionContraindicationOtherTherapy(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalUseDefinitionContraindicationOtherTherapy(jsn)); 
end;

function TFHIRJsonParser.ParseClinicalUseDefinitionContraindicationOtherTherapy(jsn : TJsonObject) : TFhirClinicalUseDefinitionContraindicationOtherTherapy;
begin
  result := TFhirClinicalUseDefinitionContraindicationOtherTherapy.Create;
  try
    ParseClinicalUseDefinitionContraindicationOtherTherapyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinitionContraindicationOtherTherapyProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinitionContraindicationOtherTherapy);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('relationshipType') then
        value.relationshipType := ParseCodeableConcept(jsn.vObj['relationshipType']);
    if jsn.has('therapy') then
        value.therapy := ParseCodeableReference(jsn.vObj['therapy']);
end;

procedure TFHIRJsonComposer.ComposeClinicalUseDefinitionContraindicationOtherTherapy(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinitionContraindicationOtherTherapy; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'relationshipType', value.relationshipType);
  ComposeCodeableReference(json, 'therapy', value.therapy);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinitionIndication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalUseDefinitionIndication(jsn)); 
end;

function TFHIRJsonParser.ParseClinicalUseDefinitionIndication(jsn : TJsonObject) : TFhirClinicalUseDefinitionIndication;
begin
  result := TFhirClinicalUseDefinitionIndication.Create;
  try
    ParseClinicalUseDefinitionIndicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinitionIndicationProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinitionIndication);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('diseaseSymptomProcedure') then
        value.diseaseSymptomProcedure := ParseCodeableReference(jsn.vObj['diseaseSymptomProcedure']);
    if jsn.has('diseaseStatus') then
        value.diseaseStatus := ParseCodeableReference(jsn.vObj['diseaseStatus']);
    if jsn.has('comorbidity') then
      iterateArray(jsn.vArr['comorbidity'], value.comorbidityList, parseCodeableReference);
    if jsn.has('intendedEffect') then
        value.intendedEffect := ParseCodeableReference(jsn.vObj['intendedEffect']);
    if jsn.has('duration') then
        value.duration := ParseQuantity(jsn.vObj['duration']);
    if jsn.has('undesirableEffect') then
      iterateArray(jsn.vArr['undesirableEffect'], value.undesirableEffectList, parseReference);
    if jsn.has('otherTherapy') then
      iterateArray(jsn.vArr['otherTherapy'], value.otherTherapyList, parseClinicalUseDefinitionContraindicationOtherTherapy);
end;

procedure TFHIRJsonComposer.ComposeClinicalUseDefinitionIndication(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinitionIndication; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableReference(json, 'diseaseSymptomProcedure', value.diseaseSymptomProcedure);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableReference(json, 'diseaseStatus', value.diseaseStatus);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.comorbidityList.Count > 0) then
  begin
    startArray(json, 'comorbidity', value.comorbidityList, false);
    for i := 0 to value.comorbidityList.Count - 1 do
      ComposeCodeableReference(json, '', value.comorbidityList[i]);
    finishArray(json, value.comorbidityList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableReference(json, 'intendedEffect', value.intendedEffect);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'duration', value.duration);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.undesirableEffectList.Count > 0) then
  begin
    startArray(json, 'undesirableEffect', value.undesirableEffectList, false);
    for i := 0 to value.undesirableEffectList.Count - 1 do
      ComposeReference(json, '', value.undesirableEffectList[i]);
    finishArray(json, value.undesirableEffectList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.otherTherapyList.Count > 0) then
  begin
    startArray(json, 'otherTherapy', value.otherTherapyList, false);
    for i := 0 to value.otherTherapyList.Count - 1 do
      ComposeClinicalUseDefinitionContraindicationOtherTherapy(json, '', value.otherTherapyList[i]);
    finishArray(json, value.otherTherapyList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinitionInteraction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalUseDefinitionInteraction(jsn)); 
end;

function TFHIRJsonParser.ParseClinicalUseDefinitionInteraction(jsn : TJsonObject) : TFhirClinicalUseDefinitionInteraction;
begin
  result := TFhirClinicalUseDefinitionInteraction.Create;
  try
    ParseClinicalUseDefinitionInteractionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinitionInteractionProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinitionInteraction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('interactant') then
      iterateArray(jsn.vArr['interactant'], value.interactantList, parseClinicalUseDefinitionInteractionInteractant);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('effect') then
        value.effect := ParseCodeableReference(jsn.vObj['effect']);
    if jsn.has('incidence') then
        value.incidence := ParseCodeableConcept(jsn.vObj['incidence']);
    if jsn.has('management') then
      iterateArray(jsn.vArr['management'], value.managementList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeClinicalUseDefinitionInteraction(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinitionInteraction; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.interactantList.Count > 0) then
  begin
    startArray(json, 'interactant', value.interactantList, false);
    for i := 0 to value.interactantList.Count - 1 do
      ComposeClinicalUseDefinitionInteractionInteractant(json, '', value.interactantList[i]);
    finishArray(json, value.interactantList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableReference(json, 'effect', value.effect);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'incidence', value.incidence);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.managementList.Count > 0) then
  begin
    startArray(json, 'management', value.managementList, false);
    for i := 0 to value.managementList.Count - 1 do
      ComposeCodeableConcept(json, '', value.managementList[i]);
    finishArray(json, value.managementList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinitionInteractionInteractant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalUseDefinitionInteractionInteractant(jsn)); 
end;

function TFHIRJsonParser.ParseClinicalUseDefinitionInteractionInteractant(jsn : TJsonObject) : TFhirClinicalUseDefinitionInteractionInteractant;
begin
  result := TFhirClinicalUseDefinitionInteractionInteractant.Create;
  try
    ParseClinicalUseDefinitionInteractionInteractantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinitionInteractionInteractantProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinitionInteractionInteractant);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('itemReference') {a3} then
      value.item := ParseReference(jsn.vObj['itemReference']);
    if jsn.has('itemCodeableConcept') {a4} then
      value.item := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
end;

procedure TFHIRJsonComposer.ComposeClinicalUseDefinitionInteractionInteractant(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinitionInteractionInteractant; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.item is TFhirReference) then
    ComposeReference(json, 'itemReference', TFhirReference(value.item))
  else if (value.item is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'itemCodeableConcept', TFhirCodeableConcept(value.item)) ;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinitionUndesirableEffect(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalUseDefinitionUndesirableEffect(jsn)); 
end;

function TFHIRJsonParser.ParseClinicalUseDefinitionUndesirableEffect(jsn : TJsonObject) : TFhirClinicalUseDefinitionUndesirableEffect;
begin
  result := TFhirClinicalUseDefinitionUndesirableEffect.Create;
  try
    ParseClinicalUseDefinitionUndesirableEffectProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinitionUndesirableEffectProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinitionUndesirableEffect);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('symptomConditionEffect') then
        value.symptomConditionEffect := ParseCodeableReference(jsn.vObj['symptomConditionEffect']);
    if jsn.has('classification') then
        value.classification := ParseCodeableConcept(jsn.vObj['classification']);
    if jsn.has('frequencyOfOccurrence') then
        value.frequencyOfOccurrence := ParseCodeableConcept(jsn.vObj['frequencyOfOccurrence']);
end;

procedure TFHIRJsonComposer.ComposeClinicalUseDefinitionUndesirableEffect(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinitionUndesirableEffect; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableReference(json, 'symptomConditionEffect', value.symptomConditionEffect);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'classification', value.classification);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'frequencyOfOccurrence', value.frequencyOfOccurrence);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinitionWarning(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalUseDefinitionWarning(jsn)); 
end;

function TFHIRJsonParser.ParseClinicalUseDefinitionWarning(jsn : TJsonObject) : TFhirClinicalUseDefinitionWarning;
begin
  result := TFhirClinicalUseDefinitionWarning.Create;
  try
    ParseClinicalUseDefinitionWarningProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinitionWarningProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinitionWarning);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
end;

procedure TFHIRJsonComposer.ComposeClinicalUseDefinitionWarning(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinitionWarning; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalUseDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseClinicalUseDefinition(jsn : TJsonObject) : TFhirClinicalUseDefinition;
begin
  result := TFhirClinicalUseDefinition.Create;
  try
    ParseClinicalUseDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalUseDefinitionProperties(jsn : TJsonObject; value : TFhirClinicalUseDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirClinicalUseIssueTypeEnum, SYSTEMS_TFhirClinicalUseIssueTypeEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('subject') then
      iterateArray(jsn.vArr['subject'], value.subjectList, parseReference);
    if jsn.has('status') then
        value.status := ParseCodeableConcept(jsn.vObj['status']);
    if jsn.has('contraindication') then
        value.contraindication := ParseClinicalUseDefinitionContraindication(jsn.vObj['contraindication']);
    if jsn.has('indication') then
        value.indication := ParseClinicalUseDefinitionIndication(jsn.vObj['indication']);
    if jsn.has('interaction') then
        value.interaction := ParseClinicalUseDefinitionInteraction(jsn.vObj['interaction']);
    if jsn.has('population') then
      iterateArray(jsn.vArr['population'], value.populationList, parseReference);
    if jsn.has('undesirableEffect') then
        value.undesirableEffect := ParseClinicalUseDefinitionUndesirableEffect(jsn.vObj['undesirableEffect']);
    if jsn.has('warning') then
        value.warning := ParseClinicalUseDefinitionWarning(jsn.vObj['warning']);
end;

procedure TFHIRJsonComposer.ComposeClinicalUseDefinition(json : TJSONWriter; name : string; value : TFhirClinicalUseDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirClinicalUseIssueTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.subjectList.Count > 0) then
  begin
    startArray(json, 'subject', value.subjectList, false);
    for i := 0 to value.subjectList.Count - 1 do
      ComposeReference(json, '', value.subjectList[i]);
    finishArray(json, value.subjectList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', value.status);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeClinicalUseDefinitionContraindication(json, 'contraindication', value.contraindication);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeClinicalUseDefinitionIndication(json, 'indication', value.indication);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeClinicalUseDefinitionInteraction(json, 'interaction', value.interaction);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.populationList.Count > 0) then
  begin
    startArray(json, 'population', value.populationList, false);
    for i := 0 to value.populationList.Count - 1 do
      ComposeReference(json, '', value.populationList[i]);
    finishArray(json, value.populationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeClinicalUseDefinitionUndesirableEffect(json, 'undesirableEffect', value.undesirableEffect);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeClinicalUseDefinitionWarning(json, 'warning', value.warning);
end;

{$ENDIF FHIR_CLINICALUSEDEFINITION}
{$IFDEF FHIR_CODESYSTEM}
procedure TFHIRJsonParser.ParseCodeSystemFilter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemFilter(jsn)); 
end;

function TFHIRJsonParser.ParseCodeSystemFilter(jsn : TJsonObject) : TFhirCodeSystemFilter;
begin
  result := TFhirCodeSystemFilter.Create;
  try
    ParseCodeSystemFilterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemFilterProperties(jsn : TJsonObject; value : TFhirCodeSystemFilter);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('operator') or jsn.has('_operator') then
      iterateEnumArray(jsn.vArr['operator'], jsn.vArr['_operator'], jsn.path+'/operator', value.operatorList, parseEnum, CODES_TFhirFilterOperatorEnum, SYSTEMS_TFhirFilterOperatorEnum);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
end;

procedure TFHIRJsonComposer.ComposeCodeSystemFilter(json : TJSONWriter; name : string; value : TFhirCodeSystemFilter; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeValue(json, 'code', value.codeElement, false);
  ComposeCodeProps(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (value.operatorList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.operatorList.Count - 1 do
    begin
      val := val or (value.operatorList[i].hasPrimitiveValue);
      ext := ext or ((value.operatorList[i].id <> '') or (value.operatorList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'operator', value.operatorList, true);
      for i := 0 to value.operatorList.Count - 1 do
        ComposeEnumValue(json, '', value.operatorList[i], CODES_TFhirFilterOperatorEnum, true);
      finishArray(json, value.operatorList);
    end;
    if ext then
    begin
      startArray(json, '_operator', value.operatorList, false);
      for i := 0 to value.operatorList.Count - 1 do
        ComposeEnumProps(json, '', value.operatorList[i], CODES_TFhirFilterOperatorEnum, true);
      finishArray(json, value.operatorList);
    end;
  end;
  ComposeStringValue(json, 'value', value.valueElement, false);
  ComposeStringProps(json, 'value', value.valueElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCodeSystemProperty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemProperty(jsn)); 
end;

function TFHIRJsonParser.ParseCodeSystemProperty(jsn : TJsonObject) : TFhirCodeSystemProperty;
begin
  result := TFhirCodeSystemProperty.Create;
  try
    ParseCodeSystemPropertyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemPropertyProperties(jsn : TJsonObject; value : TFhirCodeSystemProperty);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
    if jsn.has('uri') or jsn.has('_uri') then
        value.uriElement := parseUri(jsn.node['uri'], jsn.vObj['_uri']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirConceptPropertyTypeEnum, SYSTEMS_TFhirConceptPropertyTypeEnum);
end;

procedure TFHIRJsonComposer.ComposeCodeSystemProperty(json : TJSONWriter; name : string; value : TFhirCodeSystemProperty; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeValue(json, 'code', value.codeElement, false);
  ComposeCodeProps(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'uri', value.uriElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'uri', value.uriElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirConceptPropertyTypeEnum, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCodeSystemConcept(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemConcept(jsn)); 
end;

function TFHIRJsonParser.ParseCodeSystemConcept(jsn : TJsonObject) : TFhirCodeSystemConcept;
begin
  result := TFhirCodeSystemConcept.Create;
  try
    ParseCodeSystemConceptProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptProperties(jsn : TJsonObject; value : TFhirCodeSystemConcept);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
    if jsn.has('display') or jsn.has('_display') then
        value.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);
    if jsn.has('definition') or jsn.has('_definition') then
        value.definitionElement := parseString(jsn.node['definition'], jsn.vObj['_definition']);
    if jsn.has('designation') then
      iterateArray(jsn.vArr['designation'], value.designationList, parseCodeSystemConceptDesignation);
    if jsn.has('property') then
      iterateArray(jsn.vArr['property'], value.property_List, parseCodeSystemConceptProperty);
    if jsn.has('concept') then
      iterateArray(jsn.vArr['concept'], value.conceptList, parseCodeSystemConcept);
end;

procedure TFHIRJsonComposer.ComposeCodeSystemConcept(json : TJSONWriter; name : string; value : TFhirCodeSystemConcept; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeValue(json, 'code', value.codeElement, false);
  ComposeCodeProps(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'definition', value.definitionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'definition', value.definitionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.designationList.Count > 0) then
  begin
    startArray(json, 'designation', value.designationList, false);
    for i := 0 to value.designationList.Count - 1 do
      ComposeCodeSystemConceptDesignation(json, '', value.designationList[i]);
    finishArray(json, value.designationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.property_List.Count > 0) then
  begin
    startArray(json, 'property', value.property_List, false);
    for i := 0 to value.property_List.Count - 1 do
      ComposeCodeSystemConceptProperty(json, '', value.property_List[i]);
    finishArray(json, value.property_List);
  end;
  if (SummaryOption in [soFull, soData]) and (value.conceptList.Count > 0) then
  begin
    startArray(json, 'concept', value.conceptList, false);
    for i := 0 to value.conceptList.Count - 1 do
      ComposeCodeSystemConcept(json, '', value.conceptList[i]);
    finishArray(json, value.conceptList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemConceptDesignation(jsn)); 
end;

function TFHIRJsonParser.ParseCodeSystemConceptDesignation(jsn : TJsonObject) : TFhirCodeSystemConceptDesignation;
begin
  result := TFhirCodeSystemConceptDesignation.Create;
  try
    ParseCodeSystemConceptDesignationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptDesignationProperties(jsn : TJsonObject; value : TFhirCodeSystemConceptDesignation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('language') or jsn.has('_language') then
        value.languageElement := parseCode(jsn.node['language'], jsn.vObj['_language']);
    if jsn.has('use') then
        value.use := ParseCoding(jsn.vObj['use']);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
end;

procedure TFHIRJsonComposer.ComposeCodeSystemConceptDesignation(json : TJSONWriter; name : string; value : TFhirCodeSystemConceptDesignation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'language', value.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'language', value.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'use', value.use);
  ComposeStringValue(json, 'value', value.valueElement, false);
  ComposeStringProps(json, 'value', value.valueElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptProperty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemConceptProperty(jsn)); 
end;

function TFHIRJsonParser.ParseCodeSystemConceptProperty(jsn : TJsonObject) : TFhirCodeSystemConceptProperty;
begin
  result := TFhirCodeSystemConceptProperty.Create;
  try
    ParseCodeSystemConceptPropertyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptPropertyProperties(jsn : TJsonObject; value : TFhirCodeSystemConceptProperty);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      value.value := parseCode(jsn.node['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueCoding') {a4} then
      value.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      value.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      value.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      value.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
end;

procedure TFHIRJsonComposer.ComposeCodeSystemConceptProperty(json : TJSONWriter; name : string; value : TFhirCodeSystemConceptProperty; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeValue(json, 'code', value.codeElement, false);
  ComposeCodeProps(json, 'code', value.codeElement, false);
  if (value.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(value.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(value.value), false);
  end
  else if (value.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(value.value)) 
  else if (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (value.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(value.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(value.value), false);
  end
  else if (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (value.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(value.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(value.value), false);
  end
  else if (value.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(value.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCodeSystem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystem(jsn)); 
end;

function TFHIRJsonParser.ParseCodeSystem(jsn : TJsonObject) : TFhirCodeSystem;
begin
  result := TFhirCodeSystem.Create;
  try
    ParseCodeSystemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemProperties(jsn : TJsonObject; value : TFhirCodeSystem);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('caseSensitive') or jsn.has('_caseSensitive') then
        value.caseSensitiveElement := parseBoolean(jsn.node['caseSensitive'], jsn.vObj['_caseSensitive']);
    if jsn.has('valueSet') or jsn.has('_valueSet') then
        value.valueSetElement := parseCanonical(jsn.node['valueSet'], jsn.vObj['_valueSet']);
    if jsn.has('hierarchyMeaning') or jsn.has('_hierarchyMeaning') then
        value.hierarchyMeaningElement := parseEnum(jsn.path+'/hierarchyMeaning', jsn.node['hierarchyMeaning'], jsn.vObj['_hierarchyMeaning'], CODES_TFhirCodeSystemHierarchyMeaningEnum, SYSTEMS_TFhirCodeSystemHierarchyMeaningEnum);
    if jsn.has('compositional') or jsn.has('_compositional') then
        value.compositionalElement := parseBoolean(jsn.node['compositional'], jsn.vObj['_compositional']);
    if jsn.has('versionNeeded') or jsn.has('_versionNeeded') then
        value.versionNeededElement := parseBoolean(jsn.node['versionNeeded'], jsn.vObj['_versionNeeded']);
    if jsn.has('content') or jsn.has('_content') then
        value.contentElement := parseEnum(jsn.path+'/content', jsn.node['content'], jsn.vObj['_content'], CODES_TFhirCodeSystemContentModeEnum, SYSTEMS_TFhirCodeSystemContentModeEnum);
    if jsn.has('supplements') or jsn.has('_supplements') then
        value.supplementsElement := parseCanonical(jsn.node['supplements'], jsn.vObj['_supplements']);
    if jsn.has('count') or jsn.has('_count') then
        value.countElement := parseUnsignedInt(jsn.node['count'], jsn.vObj['_count']);
    if jsn.has('filter') then
      iterateArray(jsn.vArr['filter'], value.filterList, parseCodeSystemFilter);
    if jsn.has('property') then
      iterateArray(jsn.vArr['property'], value.property_List, parseCodeSystemProperty);
    if jsn.has('concept') then
      iterateArray(jsn.vArr['concept'], value.conceptList, parseCodeSystemConcept);
end;

procedure TFHIRJsonComposer.ComposeCodeSystem(json : TJSONWriter; name : string; value : TFhirCodeSystem; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'caseSensitive', value.caseSensitiveElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'caseSensitive', value.caseSensitiveElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'valueSet', value.valueSetElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'valueSet', value.valueSetElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'hierarchyMeaning', value.hierarchyMeaningElement, CODES_TFhirCodeSystemHierarchyMeaningEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'compositional', value.compositionalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'compositional', value.compositionalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'versionNeeded', value.versionNeededElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'versionNeeded', value.versionNeededElement, false);
  ComposeEnumValue(json, 'content', value.contentElement, CODES_TFhirCodeSystemContentModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'supplements', value.supplementsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'supplements', value.supplementsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'count', value.countElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'count', value.countElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.filterList.Count > 0) then
  begin
    startArray(json, 'filter', value.filterList, false);
    for i := 0 to value.filterList.Count - 1 do
      ComposeCodeSystemFilter(json, '', value.filterList[i]);
    finishArray(json, value.filterList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.property_List.Count > 0) then
  begin
    startArray(json, 'property', value.property_List, false);
    for i := 0 to value.property_List.Count - 1 do
      ComposeCodeSystemProperty(json, '', value.property_List[i]);
    finishArray(json, value.property_List);
  end;
  if (SummaryOption in [soFull, soData]) and (value.conceptList.Count > 0) then
  begin
    startArray(json, 'concept', value.conceptList, false);
    for i := 0 to value.conceptList.Count - 1 do
      ComposeCodeSystemConcept(json, '', value.conceptList[i]);
    finishArray(json, value.conceptList);
  end;
end;

{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
procedure TFHIRJsonParser.ParseCommunicationPayload(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCommunicationPayload(jsn)); 
end;

function TFHIRJsonParser.ParseCommunicationPayload(jsn : TJsonObject) : TFhirCommunicationPayload;
begin
  result := TFhirCommunicationPayload.Create;
  try
    ParseCommunicationPayloadProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCommunicationPayloadProperties(jsn : TJsonObject; value : TFhirCommunicationPayload);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('contentAttachment') {a4} then
      value.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      value.content := ParseReference(jsn.vObj['contentReference']);
    if jsn.has('contentString') or jsn.has('_contentString') then
      value.content := parseString(jsn.node['contentString'], jsn.vObj['_contentString']);
end;

procedure TFHIRJsonComposer.ComposeCommunicationPayload(json : TJSONWriter; name : string; value : TFhirCommunicationPayload; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(value.content)) 
  else if (value.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(value.content))
  else if (value.content is TFhirString) then 
  begin
    ComposeStringValue(json, 'contentString', TFhirString(value.content), false);
    ComposeStringProps(json, 'contentString', TFhirString(value.content), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCommunication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCommunication(jsn)); 
end;

function TFHIRJsonParser.ParseCommunication(jsn : TJsonObject) : TFhirCommunication;
begin
  result := TFhirCommunication.Create;
  try
    ParseCommunicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCommunicationProperties(jsn : TJsonObject; value : TFhirCommunication);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
      if jsn.has('instantiatesCanonical') or jsn.has('_instantiatesCanonical') then
      iteratePrimitiveArray(jsn.vArr['instantiatesCanonical'], jsn.vArr['_instantiatesCanonical'], value.instantiatesCanonicalList, parseCanonical);
      if jsn.has('instantiatesUri') or jsn.has('_instantiatesUri') then
      iteratePrimitiveArray(jsn.vArr['instantiatesUri'], jsn.vArr['_instantiatesUri'], value.instantiatesUriList, parseUri);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], value.partOfList, parseReference);
    if jsn.has('inResponseTo') then
      iterateArray(jsn.vArr['inResponseTo'], value.inResponseToList, parseReference);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEventStatusEnum, SYSTEMS_TFhirEventStatusEnum);
    if jsn.has('statusReason') then
        value.statusReason := ParseCodeableConcept(jsn.vObj['statusReason']);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('priority') or jsn.has('_priority') then
        value.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('medium') then
      iterateArray(jsn.vArr['medium'], value.mediumList, parseCodeableConcept);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('topic') then
        value.topic := ParseCodeableConcept(jsn.vObj['topic']);
    if jsn.has('about') then
      iterateArray(jsn.vArr['about'], value.aboutList, parseReference);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('sent') or jsn.has('_sent') then
        value.sentElement := parseDateTime(jsn.node['sent'], jsn.vObj['_sent']);
    if jsn.has('received') or jsn.has('_received') then
        value.receivedElement := parseDateTime(jsn.node['received'], jsn.vObj['_received']);
    if jsn.has('recipient') then
      iterateArray(jsn.vArr['recipient'], value.recipientList, parseReference);
    if jsn.has('sender') then
        value.sender := ParseReference(jsn.vObj['sender']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('payload') then
      iterateArray(jsn.vArr['payload'], value.payloadList, parseCommunicationPayload);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCommunication(json : TJSONWriter; name : string; value : TFhirCommunication; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesCanonicalList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesCanonicalList[i].id <> '') or (value.instantiatesCanonicalList[i].hasExtensionList) {no-comments or (value.instantiatesCanonicalList[i].hasComments)});
      val := val or (value.instantiatesCanonicalList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesCanonical', value.instantiatesCanonicalList, true);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalValue(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesCanonical', value.instantiatesCanonicalList, false);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalProps(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesUriList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesUriList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesUriList[i].id <> '') or (value.instantiatesUriList[i].hasExtensionList) {no-comments or (value.instantiatesUriList[i].hasComments)});
      val := val or (value.instantiatesUriList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesUri', value.instantiatesUriList, true);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriValue(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesUri', value.instantiatesUriList, false);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriProps(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.partOfList.Count > 0) then
  begin
    startArray(json, 'partOf', value.partOfList, false);
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(json, '', value.partOfList[i]);
    finishArray(json, value.partOfList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.inResponseToList.Count > 0) then
  begin
    startArray(json, 'inResponseTo', value.inResponseToList, false);
    for i := 0 to value.inResponseToList.Count - 1 do
      ComposeReference(json, '', value.inResponseToList[i]);
    finishArray(json, value.inResponseToList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirEventStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'statusReason', value.statusReason);
  if (SummaryOption in [soFull, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.mediumList.Count > 0) then
  begin
    startArray(json, 'medium', value.mediumList, false);
    for i := 0 to value.mediumList.Count - 1 do
      ComposeCodeableConcept(json, '', value.mediumList[i]);
    finishArray(json, value.mediumList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'topic', value.topic);
  if (SummaryOption in [soFull, soData]) and (value.aboutList.Count > 0) then
  begin
    startArray(json, 'about', value.aboutList, false);
    for i := 0 to value.aboutList.Count - 1 do
      ComposeReference(json, '', value.aboutList[i]);
    finishArray(json, value.aboutList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'sent', value.sentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'sent', value.sentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'received', value.receivedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'received', value.receivedElement, false);
  if (SummaryOption in [soFull, soData]) and (value.recipientList.Count > 0) then
  begin
    startArray(json, 'recipient', value.recipientList, false);
    for i := 0 to value.recipientList.Count - 1 do
      ComposeReference(json, '', value.recipientList[i]);
    finishArray(json, value.recipientList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'sender', value.sender);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.payloadList.Count > 0) then
  begin
    startArray(json, 'payload', value.payloadList, false);
    for i := 0 to value.payloadList.Count - 1 do
      ComposeCommunicationPayload(json, '', value.payloadList[i]);
    finishArray(json, value.payloadList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
end;

{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
procedure TFHIRJsonParser.ParseCommunicationRequestPayload(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCommunicationRequestPayload(jsn)); 
end;

function TFHIRJsonParser.ParseCommunicationRequestPayload(jsn : TJsonObject) : TFhirCommunicationRequestPayload;
begin
  result := TFhirCommunicationRequestPayload.Create;
  try
    ParseCommunicationRequestPayloadProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCommunicationRequestPayloadProperties(jsn : TJsonObject; value : TFhirCommunicationRequestPayload);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('contentAttachment') {a4} then
      value.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      value.content := ParseReference(jsn.vObj['contentReference']);
    if jsn.has('contentString') or jsn.has('_contentString') then
      value.content := parseString(jsn.node['contentString'], jsn.vObj['_contentString']);
end;

procedure TFHIRJsonComposer.ComposeCommunicationRequestPayload(json : TJSONWriter; name : string; value : TFhirCommunicationRequestPayload; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(value.content)) 
  else if (value.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(value.content))
  else if (value.content is TFhirString) then 
  begin
    ComposeStringValue(json, 'contentString', TFhirString(value.content), false);
    ComposeStringProps(json, 'contentString', TFhirString(value.content), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCommunicationRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCommunicationRequest(jsn)); 
end;

function TFHIRJsonParser.ParseCommunicationRequest(jsn : TJsonObject) : TFhirCommunicationRequest;
begin
  result := TFhirCommunicationRequest.Create;
  try
    ParseCommunicationRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCommunicationRequestProperties(jsn : TJsonObject; value : TFhirCommunicationRequest);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], value.replacesList, parseReference);
    if jsn.has('groupIdentifier') then
        value.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('statusReason') then
        value.statusReason := ParseCodeableConcept(jsn.vObj['statusReason']);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('priority') or jsn.has('_priority') then
        value.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('doNotPerform') or jsn.has('_doNotPerform') then
        value.doNotPerformElement := parseBoolean(jsn.node['doNotPerform'], jsn.vObj['_doNotPerform']);
    if jsn.has('medium') then
      iterateArray(jsn.vArr['medium'], value.mediumList, parseCodeableConcept);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('about') then
      iterateArray(jsn.vArr['about'], value.aboutList, parseReference);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('payload') then
      iterateArray(jsn.vArr['payload'], value.payloadList, parseCommunicationRequestPayload);
    if jsn.has('occurrencePeriod') {a4} then
      value.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      value.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        value.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);
    if jsn.has('requester') then
        value.requester := ParseReference(jsn.vObj['requester']);
    if jsn.has('recipient') then
      iterateArray(jsn.vArr['recipient'], value.recipientList, parseReference);
    if jsn.has('sender') then
        value.sender := ParseReference(jsn.vObj['sender']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCommunicationRequest(json : TJSONWriter; name : string; value : TFhirCommunicationRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.replacesList.Count > 0) then
  begin
    startArray(json, 'replaces', value.replacesList, false);
    for i := 0 to value.replacesList.Count - 1 do
      ComposeReference(json, '', value.replacesList[i]);
    finishArray(json, value.replacesList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'groupIdentifier', value.groupIdentifier);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirRequestStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'statusReason', value.statusReason);
  if (SummaryOption in [soFull, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'doNotPerform', value.doNotPerformElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'doNotPerform', value.doNotPerformElement, false);
  if (SummaryOption in [soFull, soData]) and (value.mediumList.Count > 0) then
  begin
    startArray(json, 'medium', value.mediumList, false);
    for i := 0 to value.mediumList.Count - 1 do
      ComposeCodeableConcept(json, '', value.mediumList[i]);
    finishArray(json, value.mediumList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soData]) and (value.aboutList.Count > 0) then
  begin
    startArray(json, 'about', value.aboutList, false);
    for i := 0 to value.aboutList.Count - 1 do
      ComposeReference(json, '', value.aboutList[i]);
    finishArray(json, value.aboutList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soData]) and (value.payloadList.Count > 0) then
  begin
    startArray(json, 'payload', value.payloadList, false);
    for i := 0 to value.payloadList.Count - 1 do
      ComposeCommunicationRequestPayload(json, '', value.payloadList[i]);
    finishArray(json, value.payloadList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(value.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'authoredOn', value.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'authoredOn', value.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'requester', value.requester);
  if (SummaryOption in [soFull, soData]) and (value.recipientList.Count > 0) then
  begin
    startArray(json, 'recipient', value.recipientList, false);
    for i := 0 to value.recipientList.Count - 1 do
      ComposeReference(json, '', value.recipientList[i]);
    finishArray(json, value.recipientList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'sender', value.sender);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
end;

{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
procedure TFHIRJsonParser.ParseCompartmentDefinitionResource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompartmentDefinitionResource(jsn)); 
end;

function TFHIRJsonParser.ParseCompartmentDefinitionResource(jsn : TJsonObject) : TFhirCompartmentDefinitionResource;
begin
  result := TFhirCompartmentDefinitionResource.Create;
  try
    ParseCompartmentDefinitionResourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompartmentDefinitionResourceProperties(jsn : TJsonObject; value : TFhirCompartmentDefinitionResource);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
      if jsn.has('param') or jsn.has('_param') then
      iteratePrimitiveArray(jsn.vArr['param'], jsn.vArr['_param'], value.paramList, parseString);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);
end;

procedure TFHIRJsonComposer.ComposeCompartmentDefinitionResource(json : TJSONWriter; name : string; value : TFhirCompartmentDefinitionResource; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'code', value.codeElement, CODES_TFhirResourceTypesEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.paramList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.paramList.Count - 1 do
    begin
      ext := ext or ((value.paramList[i].id <> '') or (value.paramList[i].hasExtensionList) {no-comments or (value.paramList[i].hasComments)});
      val := val or (value.paramList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'param', value.paramList, true);
      for i := 0 to value.paramList.Count - 1 do
        ComposeStringValue(json, '', value.paramList[i], true);
      finishArray(json, value.paramList);
    end;
    if ext then
    begin
      startArray(json, '_param', value.paramList, false);
      for i := 0 to value.paramList.Count - 1 do
        ComposeStringProps(json, '', value.paramList[i], true);
      finishArray(json, value.paramList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', value.documentationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCompartmentDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompartmentDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseCompartmentDefinition(jsn : TJsonObject) : TFhirCompartmentDefinition;
begin
  result := TFhirCompartmentDefinition.Create;
  try
    ParseCompartmentDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompartmentDefinitionProperties(jsn : TJsonObject; value : TFhirCompartmentDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirCompartmentTypeEnum, SYSTEMS_TFhirCompartmentTypeEnum);
    if jsn.has('search') or jsn.has('_search') then
        value.searchElement := parseBoolean(jsn.node['search'], jsn.vObj['_search']);
    if jsn.has('resource') then
      iterateArray(jsn.vArr['resource'], value.resourceList, parseCompartmentDefinitionResource);
end;

procedure TFHIRJsonComposer.ComposeCompartmentDefinition(json : TJSONWriter; name : string; value : TFhirCompartmentDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  ComposeUriValue(json, 'url', value.urlElement, false);
  ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  ComposeEnumValue(json, 'code', value.codeElement, CODES_TFhirCompartmentTypeEnum, false);
  ComposeBooleanValue(json, 'search', value.searchElement, false);
  ComposeBooleanProps(json, 'search', value.searchElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.resourceList.Count > 0) then
  begin
    startArray(json, 'resource', value.resourceList, false);
    for i := 0 to value.resourceList.Count - 1 do
      ComposeCompartmentDefinitionResource(json, '', value.resourceList[i]);
    finishArray(json, value.resourceList);
  end;
end;

{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
procedure TFHIRJsonParser.ParseCompositionAttester(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompositionAttester(jsn)); 
end;

function TFHIRJsonParser.ParseCompositionAttester(jsn : TJsonObject) : TFhirCompositionAttester;
begin
  result := TFhirCompositionAttester.Create;
  try
    ParseCompositionAttesterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionAttesterProperties(jsn : TJsonObject; value : TFhirCompositionAttester);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('mode') or jsn.has('_mode') then
        value.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirCompositionAttestationModeEnum, SYSTEMS_TFhirCompositionAttestationModeEnum);
    if jsn.has('time') or jsn.has('_time') then
        value.timeElement := parseDateTime(jsn.node['time'], jsn.vObj['_time']);
    if jsn.has('party') then
        value.party := ParseReference(jsn.vObj['party']);
end;

procedure TFHIRJsonComposer.ComposeCompositionAttester(json : TJSONWriter; name : string; value : TFhirCompositionAttester; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'mode', value.modeElement, CODES_TFhirCompositionAttestationModeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'time', value.timeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'time', value.timeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'party', value.party);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCompositionRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompositionRelatesTo(jsn)); 
end;

function TFHIRJsonParser.ParseCompositionRelatesTo(jsn : TJsonObject) : TFhirCompositionRelatesTo;
begin
  result := TFhirCompositionRelatesTo.Create;
  try
    ParseCompositionRelatesToProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionRelatesToProperties(jsn : TJsonObject; value : TFhirCompositionRelatesTo);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirDocumentRelationshipTypeEnum, SYSTEMS_TFhirDocumentRelationshipTypeEnum);
    if jsn.has('targetIdentifier') {a4} then
      value.target := ParseIdentifier(jsn.vObj['targetIdentifier']);
    if jsn.has('targetReference') {a3} then
      value.target := ParseReference(jsn.vObj['targetReference']);
end;

procedure TFHIRJsonComposer.ComposeCompositionRelatesTo(json : TJSONWriter; name : string; value : TFhirCompositionRelatesTo; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'code', value.codeElement, CODES_TFhirDocumentRelationshipTypeEnum, false);
  if (value.target is TFhirIdentifier) then 
    ComposeIdentifier(json, 'targetIdentifier', TFhirIdentifier(value.target)) 
  else if (value.target is TFhirReference) then
    ComposeReference(json, 'targetReference', TFhirReference(value.target));
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCompositionEvent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompositionEvent(jsn)); 
end;

function TFHIRJsonParser.ParseCompositionEvent(jsn : TJsonObject) : TFhirCompositionEvent;
begin
  result := TFhirCompositionEvent.Create;
  try
    ParseCompositionEventProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionEventProperties(jsn : TJsonObject; value : TFhirCompositionEvent);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCodeableConcept);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], value.detailList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeCompositionEvent(json : TJSONWriter; name : string; value : TFhirCompositionEvent; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.detailList.Count > 0) then
  begin
    startArray(json, 'detail', value.detailList, false);
    for i := 0 to value.detailList.Count - 1 do
      ComposeReference(json, '', value.detailList[i]);
    finishArray(json, value.detailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCompositionSection(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompositionSection(jsn)); 
end;

function TFHIRJsonParser.ParseCompositionSection(jsn : TJsonObject) : TFhirCompositionSection;
begin
  result := TFhirCompositionSection.Create;
  try
    ParseCompositionSectionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionSectionProperties(jsn : TJsonObject; value : TFhirCompositionSection);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseReference);
    if jsn.has('focus') then
        value.focus := ParseReference(jsn.vObj['focus']);
    if jsn.has('text') then
        value.text := ParseNarrative(jsn.vObj['text']);
    if jsn.has('mode') or jsn.has('_mode') then
        value.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirListModeEnum, SYSTEMS_TFhirListModeEnum);
    if jsn.has('orderedBy') then
        value.orderedBy := ParseCodeableConcept(jsn.vObj['orderedBy']);
    if jsn.has('entry') then
      iterateArray(jsn.vArr['entry'], value.entryList, parseReference);
    if jsn.has('emptyReason') then
        value.emptyReason := ParseCodeableConcept(jsn.vObj['emptyReason']);
    if jsn.has('section') then
      iterateArray(jsn.vArr['section'], value.sectionList, parseCompositionSection);
end;

procedure TFHIRJsonComposer.ComposeCompositionSection(json : TJSONWriter; name : string; value : TFhirCompositionSection; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeReference(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'focus', value.focus);
  if (SummaryOption in [soFull, soData]) then
    ComposeNarrative(json, 'text', value.text);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'mode', value.modeElement, CODES_TFhirListModeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'orderedBy', value.orderedBy);
  if (SummaryOption in [soFull, soData]) and (value.entryList.Count > 0) then
  begin
    startArray(json, 'entry', value.entryList, false);
    for i := 0 to value.entryList.Count - 1 do
      ComposeReference(json, '', value.entryList[i]);
    finishArray(json, value.entryList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'emptyReason', value.emptyReason);
  if (SummaryOption in [soFull, soData]) and (value.sectionList.Count > 0) then
  begin
    startArray(json, 'section', value.sectionList, false);
    for i := 0 to value.sectionList.Count - 1 do
      ComposeCompositionSection(json, '', value.sectionList[i]);
    finishArray(json, value.sectionList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseComposition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseComposition(jsn)); 
end;

function TFHIRJsonParser.ParseComposition(jsn : TJsonObject) : TFhirComposition;
begin
  result := TFhirComposition.Create;
  try
    ParseCompositionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionProperties(jsn : TJsonObject; value : TFhirComposition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirCompositionStatusEnum, SYSTEMS_TFhirCompositionStatusEnum);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseReference);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('confidentiality') or jsn.has('_confidentiality') then
        value.confidentialityElement := parseCode(jsn.node['confidentiality'], jsn.vObj['_confidentiality']);
    if jsn.has('attester') then
      iterateArray(jsn.vArr['attester'], value.attesterList, parseCompositionAttester);
    if jsn.has('custodian') then
        value.custodian := ParseReference(jsn.vObj['custodian']);
    if jsn.has('relatesTo') then
      iterateArray(jsn.vArr['relatesTo'], value.relatesToList, parseCompositionRelatesTo);
    if jsn.has('event') then
      iterateArray(jsn.vArr['event'], value.eventList, parseCompositionEvent);
    if jsn.has('section') then
      iterateArray(jsn.vArr['section'], value.sectionList, parseCompositionSection);
end;

procedure TFHIRJsonComposer.ComposeComposition(json : TJSONWriter; name : string; value : TFhirComposition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirCompositionStatusEnum, false);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  ComposeDateTimeValue(json, 'date', value.dateElement, false);
  ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeReference(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  ComposeStringValue(json, 'title', value.titleElement, false);
  ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'confidentiality', value.confidentialityElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'confidentiality', value.confidentialityElement, false);
  if (SummaryOption in [soFull, soData]) and (value.attesterList.Count > 0) then
  begin
    startArray(json, 'attester', value.attesterList, false);
    for i := 0 to value.attesterList.Count - 1 do
      ComposeCompositionAttester(json, '', value.attesterList[i]);
    finishArray(json, value.attesterList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'custodian', value.custodian);
  if (SummaryOption in [soFull, soData]) and (value.relatesToList.Count > 0) then
  begin
    startArray(json, 'relatesTo', value.relatesToList, false);
    for i := 0 to value.relatesToList.Count - 1 do
      ComposeCompositionRelatesTo(json, '', value.relatesToList[i]);
    finishArray(json, value.relatesToList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.eventList.Count > 0) then
  begin
    startArray(json, 'event', value.eventList, false);
    for i := 0 to value.eventList.Count - 1 do
      ComposeCompositionEvent(json, '', value.eventList[i]);
    finishArray(json, value.eventList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.sectionList.Count > 0) then
  begin
    startArray(json, 'section', value.sectionList, false);
    for i := 0 to value.sectionList.Count - 1 do
      ComposeCompositionSection(json, '', value.sectionList[i]);
    finishArray(json, value.sectionList);
  end;
end;

{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
procedure TFHIRJsonParser.ParseConceptMapGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroup(jsn)); 
end;

function TFHIRJsonParser.ParseConceptMapGroup(jsn : TJsonObject) : TFhirConceptMapGroup;
begin
  result := TFhirConceptMapGroup.Create;
  try
    ParseConceptMapGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupProperties(jsn : TJsonObject; value : TFhirConceptMapGroup);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('source') or jsn.has('_source') then
        value.sourceElement := parseUri(jsn.node['source'], jsn.vObj['_source']);
    if jsn.has('sourceVersion') or jsn.has('_sourceVersion') then
        value.sourceVersionElement := parseString(jsn.node['sourceVersion'], jsn.vObj['_sourceVersion']);
    if jsn.has('target') or jsn.has('_target') then
        value.targetElement := parseUri(jsn.node['target'], jsn.vObj['_target']);
    if jsn.has('targetVersion') or jsn.has('_targetVersion') then
        value.targetVersionElement := parseString(jsn.node['targetVersion'], jsn.vObj['_targetVersion']);
    if jsn.has('element') then
      iterateArray(jsn.vArr['element'], value.elementList, parseConceptMapGroupElement);
    if jsn.has('unmapped') then
        value.unmapped := ParseConceptMapGroupUnmapped(jsn.vObj['unmapped']);
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroup(json : TJSONWriter; name : string; value : TFhirConceptMapGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'source', value.sourceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'source', value.sourceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'sourceVersion', value.sourceVersionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'sourceVersion', value.sourceVersionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'target', value.targetElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'target', value.targetElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'targetVersion', value.targetVersionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'targetVersion', value.targetVersionElement, false);
  if (value.elementList.Count > 0) then
  begin
    startArray(json, 'element', value.elementList, false);
    for i := 0 to value.elementList.Count - 1 do
      ComposeConceptMapGroupElement(json, '', value.elementList[i]);
    finishArray(json, value.elementList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeConceptMapGroupUnmapped(json, 'unmapped', value.unmapped);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroupElement(jsn)); 
end;

function TFHIRJsonParser.ParseConceptMapGroupElement(jsn : TJsonObject) : TFhirConceptMapGroupElement;
begin
  result := TFhirConceptMapGroupElement.Create;
  try
    ParseConceptMapGroupElementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementProperties(jsn : TJsonObject; value : TFhirConceptMapGroupElement);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
    if jsn.has('display') or jsn.has('_display') then
        value.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], value.targetList, parseConceptMapGroupElementTarget);
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroupElement(json : TJSONWriter; name : string; value : TFhirConceptMapGroupElement; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soData]) and (value.targetList.Count > 0) then
  begin
    startArray(json, 'target', value.targetList, false);
    for i := 0 to value.targetList.Count - 1 do
      ComposeConceptMapGroupElementTarget(json, '', value.targetList[i]);
    finishArray(json, value.targetList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroupElementTarget(jsn)); 
end;

function TFHIRJsonParser.ParseConceptMapGroupElementTarget(jsn : TJsonObject) : TFhirConceptMapGroupElementTarget;
begin
  result := TFhirConceptMapGroupElementTarget.Create;
  try
    ParseConceptMapGroupElementTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementTargetProperties(jsn : TJsonObject; value : TFhirConceptMapGroupElementTarget);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
    if jsn.has('display') or jsn.has('_display') then
        value.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);
    if jsn.has('equivalence') or jsn.has('_equivalence') then
        value.equivalenceElement := parseEnum(jsn.path+'/equivalence', jsn.node['equivalence'], jsn.vObj['_equivalence'], CODES_TFhirConceptMapEquivalenceEnum, SYSTEMS_TFhirConceptMapEquivalenceEnum);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);
    if jsn.has('dependsOn') then
      iterateArray(jsn.vArr['dependsOn'], value.dependsOnList, parseConceptMapGroupElementTargetDependsOn);
    if jsn.has('product') then
      iterateArray(jsn.vArr['product'], value.productList, parseConceptMapGroupElementTargetDependsOn);
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroupElementTarget(json : TJSONWriter; name : string; value : TFhirConceptMapGroupElementTarget; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', value.displayElement, false);
  ComposeEnumValue(json, 'equivalence', value.equivalenceElement, CODES_TFhirConceptMapEquivalenceEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) and (value.dependsOnList.Count > 0) then
  begin
    startArray(json, 'dependsOn', value.dependsOnList, false);
    for i := 0 to value.dependsOnList.Count - 1 do
      ComposeConceptMapGroupElementTargetDependsOn(json, '', value.dependsOnList[i]);
    finishArray(json, value.dependsOnList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.productList.Count > 0) then
  begin
    startArray(json, 'product', value.productList, false);
    for i := 0 to value.productList.Count - 1 do
      ComposeConceptMapGroupElementTargetDependsOn(json, '', value.productList[i]);
    finishArray(json, value.productList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementTargetDependsOn(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroupElementTargetDependsOn(jsn)); 
end;

function TFHIRJsonParser.ParseConceptMapGroupElementTargetDependsOn(jsn : TJsonObject) : TFhirConceptMapGroupElementTargetDependsOn;
begin
  result := TFhirConceptMapGroupElementTargetDependsOn.Create;
  try
    ParseConceptMapGroupElementTargetDependsOnProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementTargetDependsOnProperties(jsn : TJsonObject; value : TFhirConceptMapGroupElementTargetDependsOn);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('property') or jsn.has('_property') then
        value.property_Element := parseUri(jsn.node['property'], jsn.vObj['_property']);
    if jsn.has('system') or jsn.has('_system') then
        value.systemElement := parseCanonical(jsn.node['system'], jsn.vObj['_system']);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
    if jsn.has('display') or jsn.has('_display') then
        value.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroupElementTargetDependsOn(json : TJSONWriter; name : string; value : TFhirConceptMapGroupElementTargetDependsOn; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeUriValue(json, 'property', value.property_Element, false);
  ComposeUriProps(json, 'property', value.property_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalValue(json, 'system', value.systemElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalProps(json, 'system', value.systemElement, false);
  ComposeStringValue(json, 'value', value.valueElement, false);
  ComposeStringProps(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', value.displayElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseConceptMapGroupUnmapped(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroupUnmapped(jsn)); 
end;

function TFHIRJsonParser.ParseConceptMapGroupUnmapped(jsn : TJsonObject) : TFhirConceptMapGroupUnmapped;
begin
  result := TFhirConceptMapGroupUnmapped.Create;
  try
    ParseConceptMapGroupUnmappedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupUnmappedProperties(jsn : TJsonObject; value : TFhirConceptMapGroupUnmapped);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('mode') or jsn.has('_mode') then
        value.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirConceptMapGroupUnmappedModeEnum, SYSTEMS_TFhirConceptMapGroupUnmappedModeEnum);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
    if jsn.has('display') or jsn.has('_display') then
        value.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseCanonical(jsn.node['url'], jsn.vObj['_url']);
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroupUnmapped(json : TJSONWriter; name : string; value : TFhirConceptMapGroupUnmapped; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'mode', value.modeElement, CODES_TFhirConceptMapGroupUnmappedModeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalProps(json, 'url', value.urlElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseConceptMap(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMap(jsn)); 
end;

function TFHIRJsonParser.ParseConceptMap(jsn : TJsonObject) : TFhirConceptMap;
begin
  result := TFhirConceptMap.Create;
  try
    ParseConceptMapProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapProperties(jsn : TJsonObject; value : TFhirConceptMap);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('sourceCanonical') or jsn.has('_sourceCanonical') then
      value.source := parseCanonical(jsn.node['sourceCanonical'], jsn.vObj['_sourceCanonical']);
    if jsn.has('sourceUri') or jsn.has('_sourceUri') then
      value.source := parseUri(jsn.node['sourceUri'], jsn.vObj['_sourceUri']);
    if jsn.has('targetCanonical') or jsn.has('_targetCanonical') then
      value.target := parseCanonical(jsn.node['targetCanonical'], jsn.vObj['_targetCanonical']);
    if jsn.has('targetUri') or jsn.has('_targetUri') then
      value.target := parseUri(jsn.node['targetUri'], jsn.vObj['_targetUri']);
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], value.groupList, parseConceptMapGroup);
end;

procedure TFHIRJsonComposer.ComposeConceptMap(json : TJSONWriter; name : string; value : TFhirConceptMap; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.source is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'sourceCanonical', TFhirCanonical(value.source), false);
    ComposeCanonicalProps(json, 'sourceCanonical', TFhirCanonical(value.source), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.source is TFhirUri) then 
  begin
    ComposeUriValue(json, 'sourceUri', TFhirUri(value.source), false);
    ComposeUriProps(json, 'sourceUri', TFhirUri(value.source), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.target is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'targetCanonical', TFhirCanonical(value.target), false);
    ComposeCanonicalProps(json, 'targetCanonical', TFhirCanonical(value.target), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.target is TFhirUri) then 
  begin
    ComposeUriValue(json, 'targetUri', TFhirUri(value.target), false);
    ComposeUriProps(json, 'targetUri', TFhirUri(value.target), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.groupList.Count > 0) then
  begin
    startArray(json, 'group', value.groupList, false);
    for i := 0 to value.groupList.Count - 1 do
      ComposeConceptMapGroup(json, '', value.groupList[i]);
    finishArray(json, value.groupList);
  end;
end;

{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
procedure TFHIRJsonParser.ParseConditionStage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConditionStage(jsn)); 
end;

function TFHIRJsonParser.ParseConditionStage(jsn : TJsonObject) : TFhirConditionStage;
begin
  result := TFhirConditionStage.Create;
  try
    ParseConditionStageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConditionStageProperties(jsn : TJsonObject; value : TFhirConditionStage);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('summary') then
        value.summary := ParseCodeableConcept(jsn.vObj['summary']);
    if jsn.has('assessment') then
      iterateArray(jsn.vArr['assessment'], value.assessmentList, parseReference);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
end;

procedure TFHIRJsonComposer.ComposeConditionStage(json : TJSONWriter; name : string; value : TFhirConditionStage; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'summary', value.summary);
  if (SummaryOption in [soFull, soData]) and (value.assessmentList.Count > 0) then
  begin
    startArray(json, 'assessment', value.assessmentList, false);
    for i := 0 to value.assessmentList.Count - 1 do
      ComposeReference(json, '', value.assessmentList[i]);
    finishArray(json, value.assessmentList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseConditionEvidence(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConditionEvidence(jsn)); 
end;

function TFHIRJsonParser.ParseConditionEvidence(jsn : TJsonObject) : TFhirConditionEvidence;
begin
  result := TFhirConditionEvidence.Create;
  try
    ParseConditionEvidenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConditionEvidenceProperties(jsn : TJsonObject; value : TFhirConditionEvidence);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCodeableConcept);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], value.detailList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeConditionEvidence(json : TJSONWriter; name : string; value : TFhirConditionEvidence; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.detailList.Count > 0) then
  begin
    startArray(json, 'detail', value.detailList, false);
    for i := 0 to value.detailList.Count - 1 do
      ComposeReference(json, '', value.detailList[i]);
    finishArray(json, value.detailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCondition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCondition(jsn)); 
end;

function TFHIRJsonParser.ParseCondition(jsn : TJsonObject) : TFhirCondition;
begin
  result := TFhirCondition.Create;
  try
    ParseConditionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConditionProperties(jsn : TJsonObject; value : TFhirCondition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('clinicalStatus') then
        value.clinicalStatus := ParseCodeableConcept(jsn.vObj['clinicalStatus']);
    if jsn.has('verificationStatus') then
        value.verificationStatus := ParseCodeableConcept(jsn.vObj['verificationStatus']);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('severity') then
        value.severity := ParseCodeableConcept(jsn.vObj['severity']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('bodySite') then
      iterateArray(jsn.vArr['bodySite'], value.bodySiteList, parseCodeableConcept);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('onsetAge') {a4} then
      value.onset := ParseAge(jsn.vObj['onsetAge']);
    if jsn.has('onsetPeriod') {a4} then
      value.onset := ParsePeriod(jsn.vObj['onsetPeriod']);
    if jsn.has('onsetRange') {a4} then
      value.onset := ParseRange(jsn.vObj['onsetRange']);
    if jsn.has('onsetDateTime') or jsn.has('_onsetDateTime') then
      value.onset := parseDateTime(jsn.node['onsetDateTime'], jsn.vObj['_onsetDateTime']);
    if jsn.has('onsetString') or jsn.has('_onsetString') then
      value.onset := parseString(jsn.node['onsetString'], jsn.vObj['_onsetString']);
    if jsn.has('abatementAge') {a4} then
      value.abatement := ParseAge(jsn.vObj['abatementAge']);
    if jsn.has('abatementPeriod') {a4} then
      value.abatement := ParsePeriod(jsn.vObj['abatementPeriod']);
    if jsn.has('abatementRange') {a4} then
      value.abatement := ParseRange(jsn.vObj['abatementRange']);
    if jsn.has('abatementDateTime') or jsn.has('_abatementDateTime') then
      value.abatement := parseDateTime(jsn.node['abatementDateTime'], jsn.vObj['_abatementDateTime']);
    if jsn.has('abatementString') or jsn.has('_abatementString') then
      value.abatement := parseString(jsn.node['abatementString'], jsn.vObj['_abatementString']);
    if jsn.has('recordedDate') or jsn.has('_recordedDate') then
        value.recordedDateElement := parseDateTime(jsn.node['recordedDate'], jsn.vObj['_recordedDate']);
    if jsn.has('recorder') then
        value.recorder := ParseReference(jsn.vObj['recorder']);
    if jsn.has('asserter') then
        value.asserter := ParseReference(jsn.vObj['asserter']);
    if jsn.has('stage') then
      iterateArray(jsn.vArr['stage'], value.stageList, parseConditionStage);
    if jsn.has('evidence') then
      iterateArray(jsn.vArr['evidence'], value.evidenceList, parseConditionEvidence);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCondition(json : TJSONWriter; name : string; value : TFhirCondition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'clinicalStatus', value.clinicalStatus);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'verificationStatus', value.verificationStatus);
  if (SummaryOption in [soFull, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'severity', value.severity);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.bodySiteList.Count > 0) then
  begin
    startArray(json, 'bodySite', value.bodySiteList, false);
    for i := 0 to value.bodySiteList.Count - 1 do
      ComposeCodeableConcept(json, '', value.bodySiteList[i]);
    finishArray(json, value.bodySiteList);
  end;
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.onset is TFhirAge) then 
    ComposeAge(json, 'onsetAge', TFhirAge(value.onset)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.onset is TFhirPeriod) then 
    ComposePeriod(json, 'onsetPeriod', TFhirPeriod(value.onset)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.onset is TFhirRange) then 
    ComposeRange(json, 'onsetRange', TFhirRange(value.onset)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.onset is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'onsetDateTime', TFhirDateTime(value.onset), false);
    ComposeDateTimeProps(json, 'onsetDateTime', TFhirDateTime(value.onset), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.onset is TFhirString) then 
  begin
    ComposeStringValue(json, 'onsetString', TFhirString(value.onset), false);
    ComposeStringProps(json, 'onsetString', TFhirString(value.onset), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.abatement is TFhirAge) then 
    ComposeAge(json, 'abatementAge', TFhirAge(value.abatement)) 
  else if (SummaryOption in [soFull, soData]) and (value.abatement is TFhirPeriod) then 
    ComposePeriod(json, 'abatementPeriod', TFhirPeriod(value.abatement)) 
  else if (SummaryOption in [soFull, soData]) and (value.abatement is TFhirRange) then 
    ComposeRange(json, 'abatementRange', TFhirRange(value.abatement)) 
  else if (SummaryOption in [soFull, soData]) and (value.abatement is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'abatementDateTime', TFhirDateTime(value.abatement), false);
    ComposeDateTimeProps(json, 'abatementDateTime', TFhirDateTime(value.abatement), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.abatement is TFhirString) then 
  begin
    ComposeStringValue(json, 'abatementString', TFhirString(value.abatement), false);
    ComposeStringProps(json, 'abatementString', TFhirString(value.abatement), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'recordedDate', value.recordedDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'recordedDate', value.recordedDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'recorder', value.recorder);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'asserter', value.asserter);
  if (SummaryOption in [soFull, soData]) and (value.stageList.Count > 0) then
  begin
    startArray(json, 'stage', value.stageList, false);
    for i := 0 to value.stageList.Count - 1 do
      ComposeConditionStage(json, '', value.stageList[i]);
    finishArray(json, value.stageList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.evidenceList.Count > 0) then
  begin
    startArray(json, 'evidence', value.evidenceList, false);
    for i := 0 to value.evidenceList.Count - 1 do
      ComposeConditionEvidence(json, '', value.evidenceList[i]);
    finishArray(json, value.evidenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
end;

{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
procedure TFHIRJsonParser.ParseConsentPolicy(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentPolicy(jsn)); 
end;

function TFHIRJsonParser.ParseConsentPolicy(jsn : TJsonObject) : TFhirConsentPolicy;
begin
  result := TFhirConsentPolicy.Create;
  try
    ParseConsentPolicyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentPolicyProperties(jsn : TJsonObject; value : TFhirConsentPolicy);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('authority') or jsn.has('_authority') then
        value.authorityElement := parseUri(jsn.node['authority'], jsn.vObj['_authority']);
    if jsn.has('uri') or jsn.has('_uri') then
        value.uriElement := parseUri(jsn.node['uri'], jsn.vObj['_uri']);
end;

procedure TFHIRJsonComposer.ComposeConsentPolicy(json : TJSONWriter; name : string; value : TFhirConsentPolicy; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'authority', value.authorityElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'authority', value.authorityElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'uri', value.uriElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'uri', value.uriElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseConsentVerification(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentVerification(jsn)); 
end;

function TFHIRJsonParser.ParseConsentVerification(jsn : TJsonObject) : TFhirConsentVerification;
begin
  result := TFhirConsentVerification.Create;
  try
    ParseConsentVerificationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentVerificationProperties(jsn : TJsonObject; value : TFhirConsentVerification);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('verified') or jsn.has('_verified') then
        value.verifiedElement := parseBoolean(jsn.node['verified'], jsn.vObj['_verified']);
    if jsn.has('verifiedWith') then
        value.verifiedWith := ParseReference(jsn.vObj['verifiedWith']);
    if jsn.has('verificationDate') or jsn.has('_verificationDate') then
        value.verificationDateElement := parseDateTime(jsn.node['verificationDate'], jsn.vObj['_verificationDate']);
end;

procedure TFHIRJsonComposer.ComposeConsentVerification(json : TJSONWriter; name : string; value : TFhirConsentVerification; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeBooleanValue(json, 'verified', value.verifiedElement, false);
  ComposeBooleanProps(json, 'verified', value.verifiedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'verifiedWith', value.verifiedWith);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'verificationDate', value.verificationDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'verificationDate', value.verificationDateElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseConsentProvision(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentProvision(jsn)); 
end;

function TFHIRJsonParser.ParseConsentProvision(jsn : TJsonObject) : TFhirConsentProvision;
begin
  result := TFhirConsentProvision.Create;
  try
    ParseConsentProvisionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentProvisionProperties(jsn : TJsonObject; value : TFhirConsentProvision);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirConsentProvisionTypeEnum, SYSTEMS_TFhirConsentProvisionTypeEnum);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('actor') then
      iterateArray(jsn.vArr['actor'], value.actorList, parseConsentProvisionActor);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], value.actionList, parseCodeableConcept);
    if jsn.has('securityLabel') then
      iterateArray(jsn.vArr['securityLabel'], value.securityLabelList, parseCoding);
    if jsn.has('purpose') then
      iterateArray(jsn.vArr['purpose'], value.purposeList, parseCoding);
    if jsn.has('class') then
      iterateArray(jsn.vArr['class'], value.class_List, parseCoding);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCodeableConcept);
    if jsn.has('dataPeriod') then
        value.dataPeriod := ParsePeriod(jsn.vObj['dataPeriod']);
    if jsn.has('data') then
      iterateArray(jsn.vArr['data'], value.dataList, parseConsentProvisionData);
    if jsn.has('provision') then
      iterateArray(jsn.vArr['provision'], value.provisionList, parseConsentProvision);
end;

procedure TFHIRJsonComposer.ComposeConsentProvision(json : TJSONWriter; name : string; value : TFhirConsentProvision; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirConsentProvisionTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soData]) and (value.actorList.Count > 0) then
  begin
    startArray(json, 'actor', value.actorList, false);
    for i := 0 to value.actorList.Count - 1 do
      ComposeConsentProvisionActor(json, '', value.actorList[i]);
    finishArray(json, value.actorList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.actionList.Count > 0) then
  begin
    startArray(json, 'action', value.actionList, false);
    for i := 0 to value.actionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.actionList[i]);
    finishArray(json, value.actionList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.securityLabelList.Count > 0) then
  begin
    startArray(json, 'securityLabel', value.securityLabelList, false);
    for i := 0 to value.securityLabelList.Count - 1 do
      ComposeCoding(json, '', value.securityLabelList[i]);
    finishArray(json, value.securityLabelList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.purposeList.Count > 0) then
  begin
    startArray(json, 'purpose', value.purposeList, false);
    for i := 0 to value.purposeList.Count - 1 do
      ComposeCoding(json, '', value.purposeList[i]);
    finishArray(json, value.purposeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.class_List.Count > 0) then
  begin
    startArray(json, 'class', value.class_List, false);
    for i := 0 to value.class_List.Count - 1 do
      ComposeCoding(json, '', value.class_List[i]);
    finishArray(json, value.class_List);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'dataPeriod', value.dataPeriod);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.dataList.Count > 0) then
  begin
    startArray(json, 'data', value.dataList, false);
    for i := 0 to value.dataList.Count - 1 do
      ComposeConsentProvisionData(json, '', value.dataList[i]);
    finishArray(json, value.dataList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.provisionList.Count > 0) then
  begin
    startArray(json, 'provision', value.provisionList, false);
    for i := 0 to value.provisionList.Count - 1 do
      ComposeConsentProvision(json, '', value.provisionList[i]);
    finishArray(json, value.provisionList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseConsentProvisionActor(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentProvisionActor(jsn)); 
end;

function TFHIRJsonParser.ParseConsentProvisionActor(jsn : TJsonObject) : TFhirConsentProvisionActor;
begin
  result := TFhirConsentProvisionActor.Create;
  try
    ParseConsentProvisionActorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentProvisionActorProperties(jsn : TJsonObject; value : TFhirConsentProvisionActor);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('role') then
        value.role := ParseCodeableConcept(jsn.vObj['role']);
    if jsn.has('reference') then
        value.reference := ParseReference(jsn.vObj['reference']);
end;

procedure TFHIRJsonComposer.ComposeConsentProvisionActor(json : TJSONWriter; name : string; value : TFhirConsentProvisionActor; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'role', value.role);
  ComposeReference(json, 'reference', value.reference);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseConsentProvisionData(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentProvisionData(jsn)); 
end;

function TFHIRJsonParser.ParseConsentProvisionData(jsn : TJsonObject) : TFhirConsentProvisionData;
begin
  result := TFhirConsentProvisionData.Create;
  try
    ParseConsentProvisionDataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentProvisionDataProperties(jsn : TJsonObject; value : TFhirConsentProvisionData);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('meaning') or jsn.has('_meaning') then
        value.meaningElement := parseEnum(jsn.path+'/meaning', jsn.node['meaning'], jsn.vObj['_meaning'], CODES_TFhirConsentDataMeaningEnum, SYSTEMS_TFhirConsentDataMeaningEnum);
    if jsn.has('reference') then
        value.reference := ParseReference(jsn.vObj['reference']);
end;

procedure TFHIRJsonComposer.ComposeConsentProvisionData(json : TJSONWriter; name : string; value : TFhirConsentProvisionData; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'meaning', value.meaningElement, CODES_TFhirConsentDataMeaningEnum, false);
  ComposeReference(json, 'reference', value.reference);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseConsent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsent(jsn)); 
end;

function TFHIRJsonParser.ParseConsent(jsn : TJsonObject) : TFhirConsent;
begin
  result := TFhirConsent.Create;
  try
    ParseConsentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentProperties(jsn : TJsonObject; value : TFhirConsent);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirConsentStateEnum, SYSTEMS_TFhirConsentStateEnum);
    if jsn.has('scope') then
        value.scope := ParseCodeableConcept(jsn.vObj['scope']);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('dateTime') or jsn.has('_dateTime') then
        value.dateTimeElement := parseDateTime(jsn.node['dateTime'], jsn.vObj['_dateTime']);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], value.performerList, parseReference);
    if jsn.has('organization') then
      iterateArray(jsn.vArr['organization'], value.organizationList, parseReference);
    if jsn.has('sourceAttachment') {a4} then
      value.source := ParseAttachment(jsn.vObj['sourceAttachment']);
    if jsn.has('sourceReference') {a3} then
      value.source := ParseReference(jsn.vObj['sourceReference']);
    if jsn.has('policy') then
      iterateArray(jsn.vArr['policy'], value.policyList, parseConsentPolicy);
    if jsn.has('policyRule') then
        value.policyRule := ParseCodeableConcept(jsn.vObj['policyRule']);
    if jsn.has('verification') then
      iterateArray(jsn.vArr['verification'], value.verificationList, parseConsentVerification);
    if jsn.has('provision') then
        value.provision := ParseConsentProvision(jsn.vObj['provision']);
end;

procedure TFHIRJsonComposer.ComposeConsent(json : TJSONWriter; name : string; value : TFhirConsent; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirConsentStateEnum, false);
  ComposeCodeableConcept(json, 'scope', value.scope);
  if (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'dateTime', value.dateTimeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'dateTime', value.dateTimeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.performerList.Count > 0) then
  begin
    startArray(json, 'performer', value.performerList, false);
    for i := 0 to value.performerList.Count - 1 do
      ComposeReference(json, '', value.performerList[i]);
    finishArray(json, value.performerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.organizationList.Count > 0) then
  begin
    startArray(json, 'organization', value.organizationList, false);
    for i := 0 to value.organizationList.Count - 1 do
      ComposeReference(json, '', value.organizationList[i]);
    finishArray(json, value.organizationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.source is TFhirAttachment) then 
    ComposeAttachment(json, 'sourceAttachment', TFhirAttachment(value.source)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.source is TFhirReference) then
    ComposeReference(json, 'sourceReference', TFhirReference(value.source));
  if (SummaryOption in [soFull, soData]) and (value.policyList.Count > 0) then
  begin
    startArray(json, 'policy', value.policyList, false);
    for i := 0 to value.policyList.Count - 1 do
      ComposeConsentPolicy(json, '', value.policyList[i]);
    finishArray(json, value.policyList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'policyRule', value.policyRule);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.verificationList.Count > 0) then
  begin
    startArray(json, 'verification', value.verificationList, false);
    for i := 0 to value.verificationList.Count - 1 do
      ComposeConsentVerification(json, '', value.verificationList[i]);
    finishArray(json, value.verificationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeConsentProvision(json, 'provision', value.provision);
end;

{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
procedure TFHIRJsonParser.ParseContractContentDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractContentDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseContractContentDefinition(jsn : TJsonObject) : TFhirContractContentDefinition;
begin
  result := TFhirContractContentDefinition.Create;
  try
    ParseContractContentDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractContentDefinitionProperties(jsn : TJsonObject; value : TFhirContractContentDefinition);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('subType') then
        value.subType := ParseCodeableConcept(jsn.vObj['subType']);
    if jsn.has('publisher') then
        value.publisher := ParseReference(jsn.vObj['publisher']);
    if jsn.has('publicationDate') or jsn.has('_publicationDate') then
        value.publicationDateElement := parseDateTime(jsn.node['publicationDate'], jsn.vObj['_publicationDate']);
    if jsn.has('publicationStatus') or jsn.has('_publicationStatus') then
        value.publicationStatusElement := parseEnum(jsn.path+'/publicationStatus', jsn.node['publicationStatus'], jsn.vObj['_publicationStatus'], CODES_TFhirContractResourcePublicationStatusCodesEnum, SYSTEMS_TFhirContractResourcePublicationStatusCodesEnum);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
end;

procedure TFHIRJsonComposer.ComposeContractContentDefinition(json : TJSONWriter; name : string; value : TFhirContractContentDefinition; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'subType', value.subType);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'publisher', value.publisher);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'publicationDate', value.publicationDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'publicationDate', value.publicationDateElement, false);
  ComposeEnumValue(json, 'publicationStatus', value.publicationStatusElement, CODES_TFhirContractResourcePublicationStatusCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContractTerm(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTerm(jsn)); 
end;

function TFHIRJsonParser.ParseContractTerm(jsn : TJsonObject) : TFhirContractTerm;
begin
  result := TFhirContractTerm.Create;
  try
    ParseContractTermProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermProperties(jsn : TJsonObject; value : TFhirContractTerm);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('issued') or jsn.has('_issued') then
        value.issuedElement := parseDateTime(jsn.node['issued'], jsn.vObj['_issued']);
    if jsn.has('applies') then
        value.applies := ParsePeriod(jsn.vObj['applies']);
    if jsn.has('topicCodeableConcept') {a4} then
      value.topic := ParseCodeableConcept(jsn.vObj['topicCodeableConcept']);
    if jsn.has('topicReference') {a3} then
      value.topic := ParseReference(jsn.vObj['topicReference']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('subType') then
        value.subType := ParseCodeableConcept(jsn.vObj['subType']);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
    if jsn.has('securityLabel') then
      iterateArray(jsn.vArr['securityLabel'], value.securityLabelList, parseContractTermSecurityLabel);
    if jsn.has('offer') then
        value.offer := ParseContractTermOffer(jsn.vObj['offer']);
    if jsn.has('asset') then
      iterateArray(jsn.vArr['asset'], value.assetList, parseContractTermAsset);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], value.actionList, parseContractTermAction);
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], value.groupList, parseContractTerm);
end;

procedure TFHIRJsonComposer.ComposeContractTerm(json : TJSONWriter; name : string; value : TFhirContractTerm; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'issued', value.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'issued', value.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'applies', value.applies);
  if (SummaryOption in [soFull, soData]) and (value.topic is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'topicCodeableConcept', TFhirCodeableConcept(value.topic)) 
  else if (SummaryOption in [soFull, soData]) and (value.topic is TFhirReference) then
    ComposeReference(json, 'topicReference', TFhirReference(value.topic));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'subType', value.subType);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) and (value.securityLabelList.Count > 0) then
  begin
    startArray(json, 'securityLabel', value.securityLabelList, false);
    for i := 0 to value.securityLabelList.Count - 1 do
      ComposeContractTermSecurityLabel(json, '', value.securityLabelList[i]);
    finishArray(json, value.securityLabelList);
  end;
  ComposeContractTermOffer(json, 'offer', value.offer);
  if (SummaryOption in [soFull, soData]) and (value.assetList.Count > 0) then
  begin
    startArray(json, 'asset', value.assetList, false);
    for i := 0 to value.assetList.Count - 1 do
      ComposeContractTermAsset(json, '', value.assetList[i]);
    finishArray(json, value.assetList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.actionList.Count > 0) then
  begin
    startArray(json, 'action', value.actionList, false);
    for i := 0 to value.actionList.Count - 1 do
      ComposeContractTermAction(json, '', value.actionList[i]);
    finishArray(json, value.actionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.groupList.Count > 0) then
  begin
    startArray(json, 'group', value.groupList, false);
    for i := 0 to value.groupList.Count - 1 do
      ComposeContractTerm(json, '', value.groupList[i]);
    finishArray(json, value.groupList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContractTermSecurityLabel(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermSecurityLabel(jsn)); 
end;

function TFHIRJsonParser.ParseContractTermSecurityLabel(jsn : TJsonObject) : TFhirContractTermSecurityLabel;
begin
  result := TFhirContractTermSecurityLabel.Create;
  try
    ParseContractTermSecurityLabelProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermSecurityLabelProperties(jsn : TJsonObject; value : TFhirContractTermSecurityLabel);
begin
    ParseBackboneElementProperties(jsn, value);
      if jsn.has('number') or jsn.has('_number') then
      iteratePrimitiveArray(jsn.vArr['number'], jsn.vArr['_number'], value.numberList, parseUnsignedInt);
    if jsn.has('classification') then
        value.classification := ParseCoding(jsn.vObj['classification']);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCoding);
    if jsn.has('control') then
      iterateArray(jsn.vArr['control'], value.controlList, parseCoding);
end;

procedure TFHIRJsonComposer.ComposeContractTermSecurityLabel(json : TJSONWriter; name : string; value : TFhirContractTermSecurityLabel; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.numberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.numberList.Count - 1 do
    begin
      ext := ext or ((value.numberList[i].id <> '') or (value.numberList[i].hasExtensionList) {no-comments or (value.numberList[i].hasComments)});
      val := val or (value.numberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'number', value.numberList, true);
      for i := 0 to value.numberList.Count - 1 do
        ComposeUnsignedIntValue(json, '', value.numberList[i], true);
      finishArray(json, value.numberList);
    end;
    if ext then
    begin
      startArray(json, '_number', value.numberList, false);
      for i := 0 to value.numberList.Count - 1 do
        ComposeUnsignedIntProps(json, '', value.numberList[i], true);
      finishArray(json, value.numberList);
    end;
  end;
  ComposeCoding(json, 'classification', value.classification);
  if (SummaryOption in [soFull, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCoding(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.controlList.Count > 0) then
  begin
    startArray(json, 'control', value.controlList, false);
    for i := 0 to value.controlList.Count - 1 do
      ComposeCoding(json, '', value.controlList[i]);
    finishArray(json, value.controlList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContractTermOffer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermOffer(jsn)); 
end;

function TFHIRJsonParser.ParseContractTermOffer(jsn : TJsonObject) : TFhirContractTermOffer;
begin
  result := TFhirContractTermOffer.Create;
  try
    ParseContractTermOfferProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermOfferProperties(jsn : TJsonObject; value : TFhirContractTermOffer);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('party') then
      iterateArray(jsn.vArr['party'], value.partyList, parseContractTermOfferParty);
    if jsn.has('topic') then
        value.topic := ParseReference(jsn.vObj['topic']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('decision') then
        value.decision := ParseCodeableConcept(jsn.vObj['decision']);
    if jsn.has('decisionMode') then
      iterateArray(jsn.vArr['decisionMode'], value.decisionModeList, parseCodeableConcept);
    if jsn.has('answer') then
      iterateArray(jsn.vArr['answer'], value.answerList, parseContractTermOfferAnswer);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
      if jsn.has('linkId') or jsn.has('_linkId') then
      iteratePrimitiveArray(jsn.vArr['linkId'], jsn.vArr['_linkId'], value.linkIdList, parseString);
      if jsn.has('securityLabelNumber') or jsn.has('_securityLabelNumber') then
      iteratePrimitiveArray(jsn.vArr['securityLabelNumber'], jsn.vArr['_securityLabelNumber'], value.securityLabelNumberList, parseUnsignedInt);
end;

procedure TFHIRJsonComposer.ComposeContractTermOffer(json : TJSONWriter; name : string; value : TFhirContractTermOffer; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.partyList.Count > 0) then
  begin
    startArray(json, 'party', value.partyList, false);
    for i := 0 to value.partyList.Count - 1 do
      ComposeContractTermOfferParty(json, '', value.partyList[i]);
    finishArray(json, value.partyList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'topic', value.topic);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'decision', value.decision);
  if (SummaryOption in [soFull, soData]) and (value.decisionModeList.Count > 0) then
  begin
    startArray(json, 'decisionMode', value.decisionModeList, false);
    for i := 0 to value.decisionModeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.decisionModeList[i]);
    finishArray(json, value.decisionModeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.answerList.Count > 0) then
  begin
    startArray(json, 'answer', value.answerList, false);
    for i := 0 to value.answerList.Count - 1 do
      ComposeContractTermOfferAnswer(json, '', value.answerList[i]);
    finishArray(json, value.answerList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) and (value.linkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.linkIdList.Count - 1 do
    begin
      ext := ext or ((value.linkIdList[i].id <> '') or (value.linkIdList[i].hasExtensionList) {no-comments or (value.linkIdList[i].hasComments)});
      val := val or (value.linkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'linkId', value.linkIdList, true);
      for i := 0 to value.linkIdList.Count - 1 do
        ComposeStringValue(json, '', value.linkIdList[i], true);
      finishArray(json, value.linkIdList);
    end;
    if ext then
    begin
      startArray(json, '_linkId', value.linkIdList, false);
      for i := 0 to value.linkIdList.Count - 1 do
        ComposeStringProps(json, '', value.linkIdList[i], true);
      finishArray(json, value.linkIdList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.securityLabelNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.securityLabelNumberList.Count - 1 do
    begin
      ext := ext or ((value.securityLabelNumberList[i].id <> '') or (value.securityLabelNumberList[i].hasExtensionList) {no-comments or (value.securityLabelNumberList[i].hasComments)});
      val := val or (value.securityLabelNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'securityLabelNumber', value.securityLabelNumberList, true);
      for i := 0 to value.securityLabelNumberList.Count - 1 do
        ComposeUnsignedIntValue(json, '', value.securityLabelNumberList[i], true);
      finishArray(json, value.securityLabelNumberList);
    end;
    if ext then
    begin
      startArray(json, '_securityLabelNumber', value.securityLabelNumberList, false);
      for i := 0 to value.securityLabelNumberList.Count - 1 do
        ComposeUnsignedIntProps(json, '', value.securityLabelNumberList[i], true);
      finishArray(json, value.securityLabelNumberList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContractTermOfferParty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermOfferParty(jsn)); 
end;

function TFHIRJsonParser.ParseContractTermOfferParty(jsn : TJsonObject) : TFhirContractTermOfferParty;
begin
  result := TFhirContractTermOfferParty.Create;
  try
    ParseContractTermOfferPartyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermOfferPartyProperties(jsn : TJsonObject; value : TFhirContractTermOfferParty);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('reference') then
      iterateArray(jsn.vArr['reference'], value.referenceList, parseReference);
    if jsn.has('role') then
        value.role := ParseCodeableConcept(jsn.vObj['role']);
end;

procedure TFHIRJsonComposer.ComposeContractTermOfferParty(json : TJSONWriter; name : string; value : TFhirContractTermOfferParty; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.referenceList.Count > 0) then
  begin
    startArray(json, 'reference', value.referenceList, false);
    for i := 0 to value.referenceList.Count - 1 do
      ComposeReference(json, '', value.referenceList[i]);
    finishArray(json, value.referenceList);
  end;
  ComposeCodeableConcept(json, 'role', value.role);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContractTermOfferAnswer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermOfferAnswer(jsn)); 
end;

function TFHIRJsonParser.ParseContractTermOfferAnswer(jsn : TJsonObject) : TFhirContractTermOfferAnswer;
begin
  result := TFhirContractTermOfferAnswer.Create;
  try
    ParseContractTermOfferAnswerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermOfferAnswerProperties(jsn : TJsonObject; value : TFhirContractTermOfferAnswer);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCoding') {a4} then
      value.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueReference') {a3} then
      value.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      value.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      value.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      value.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      value.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      value.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      value.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeContractTermOfferAnswer(json : TJSONWriter; name : string; value : TFhirContractTermOfferAnswer; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (value.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(value.value)) 
  else if (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (value.value is TFhirReference) then
    ComposeReference(json, 'valueReference', TFhirReference(value.value))
  else if (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (value.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(value.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(value.value), false);
  end
  else if (value.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(value.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(value.value), false);
  end
  else if (value.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(value.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(value.value), false);
  end
  else if (value.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(value.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(value.value), false);
  end
  else if (value.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(value.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(value.value), false);
  end
  else if (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (value.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(value.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContractTermAsset(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermAsset(jsn)); 
end;

function TFHIRJsonParser.ParseContractTermAsset(jsn : TJsonObject) : TFhirContractTermAsset;
begin
  result := TFhirContractTermAsset.Create;
  try
    ParseContractTermAssetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermAssetProperties(jsn : TJsonObject; value : TFhirContractTermAsset);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('scope') then
        value.scope := ParseCodeableConcept(jsn.vObj['scope']);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('typeReference') then
      iterateArray(jsn.vArr['typeReference'], value.typeReferenceList, parseReference);
    if jsn.has('subtype') then
      iterateArray(jsn.vArr['subtype'], value.subtypeList, parseCodeableConcept);
    if jsn.has('relationship') then
        value.relationship := ParseCoding(jsn.vObj['relationship']);
    if jsn.has('context') then
      iterateArray(jsn.vArr['context'], value.contextList, parseContractTermAssetContext);
    if jsn.has('condition') or jsn.has('_condition') then
        value.conditionElement := parseString(jsn.node['condition'], jsn.vObj['_condition']);
    if jsn.has('periodType') then
      iterateArray(jsn.vArr['periodType'], value.periodTypeList, parseCodeableConcept);
    if jsn.has('period') then
      iterateArray(jsn.vArr['period'], value.periodList, parsePeriod);
    if jsn.has('usePeriod') then
      iterateArray(jsn.vArr['usePeriod'], value.usePeriodList, parsePeriod);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
      if jsn.has('linkId') or jsn.has('_linkId') then
      iteratePrimitiveArray(jsn.vArr['linkId'], jsn.vArr['_linkId'], value.linkIdList, parseString);
    if jsn.has('answer') then
      iterateArray(jsn.vArr['answer'], value.answerList, parseContractTermOfferAnswer);
      if jsn.has('securityLabelNumber') or jsn.has('_securityLabelNumber') then
      iteratePrimitiveArray(jsn.vArr['securityLabelNumber'], jsn.vArr['_securityLabelNumber'], value.securityLabelNumberList, parseUnsignedInt);
    if jsn.has('valuedItem') then
      iterateArray(jsn.vArr['valuedItem'], value.valuedItemList, parseContractTermAssetValuedItem);
end;

procedure TFHIRJsonComposer.ComposeContractTermAsset(json : TJSONWriter; name : string; value : TFhirContractTermAsset; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'scope', value.scope);
  if (SummaryOption in [soFull, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soData]) and (value.typeReferenceList.Count > 0) then
  begin
    startArray(json, 'typeReference', value.typeReferenceList, false);
    for i := 0 to value.typeReferenceList.Count - 1 do
      ComposeReference(json, '', value.typeReferenceList[i]);
    finishArray(json, value.typeReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.subtypeList.Count > 0) then
  begin
    startArray(json, 'subtype', value.subtypeList, false);
    for i := 0 to value.subtypeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.subtypeList[i]);
    finishArray(json, value.subtypeList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'relationship', value.relationship);
  if (SummaryOption in [soFull, soData]) and (value.contextList.Count > 0) then
  begin
    startArray(json, 'context', value.contextList, false);
    for i := 0 to value.contextList.Count - 1 do
      ComposeContractTermAssetContext(json, '', value.contextList[i]);
    finishArray(json, value.contextList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'condition', value.conditionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'condition', value.conditionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.periodTypeList.Count > 0) then
  begin
    startArray(json, 'periodType', value.periodTypeList, false);
    for i := 0 to value.periodTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.periodTypeList[i]);
    finishArray(json, value.periodTypeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.periodList.Count > 0) then
  begin
    startArray(json, 'period', value.periodList, false);
    for i := 0 to value.periodList.Count - 1 do
      ComposePeriod(json, '', value.periodList[i]);
    finishArray(json, value.periodList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.usePeriodList.Count > 0) then
  begin
    startArray(json, 'usePeriod', value.usePeriodList, false);
    for i := 0 to value.usePeriodList.Count - 1 do
      ComposePeriod(json, '', value.usePeriodList[i]);
    finishArray(json, value.usePeriodList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) and (value.linkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.linkIdList.Count - 1 do
    begin
      ext := ext or ((value.linkIdList[i].id <> '') or (value.linkIdList[i].hasExtensionList) {no-comments or (value.linkIdList[i].hasComments)});
      val := val or (value.linkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'linkId', value.linkIdList, true);
      for i := 0 to value.linkIdList.Count - 1 do
        ComposeStringValue(json, '', value.linkIdList[i], true);
      finishArray(json, value.linkIdList);
    end;
    if ext then
    begin
      startArray(json, '_linkId', value.linkIdList, false);
      for i := 0 to value.linkIdList.Count - 1 do
        ComposeStringProps(json, '', value.linkIdList[i], true);
      finishArray(json, value.linkIdList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.answerList.Count > 0) then
  begin
    startArray(json, 'answer', value.answerList, false);
    for i := 0 to value.answerList.Count - 1 do
      ComposeContractTermOfferAnswer(json, '', value.answerList[i]);
    finishArray(json, value.answerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.securityLabelNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.securityLabelNumberList.Count - 1 do
    begin
      ext := ext or ((value.securityLabelNumberList[i].id <> '') or (value.securityLabelNumberList[i].hasExtensionList) {no-comments or (value.securityLabelNumberList[i].hasComments)});
      val := val or (value.securityLabelNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'securityLabelNumber', value.securityLabelNumberList, true);
      for i := 0 to value.securityLabelNumberList.Count - 1 do
        ComposeUnsignedIntValue(json, '', value.securityLabelNumberList[i], true);
      finishArray(json, value.securityLabelNumberList);
    end;
    if ext then
    begin
      startArray(json, '_securityLabelNumber', value.securityLabelNumberList, false);
      for i := 0 to value.securityLabelNumberList.Count - 1 do
        ComposeUnsignedIntProps(json, '', value.securityLabelNumberList[i], true);
      finishArray(json, value.securityLabelNumberList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.valuedItemList.Count > 0) then
  begin
    startArray(json, 'valuedItem', value.valuedItemList, false);
    for i := 0 to value.valuedItemList.Count - 1 do
      ComposeContractTermAssetValuedItem(json, '', value.valuedItemList[i]);
    finishArray(json, value.valuedItemList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContractTermAssetContext(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermAssetContext(jsn)); 
end;

function TFHIRJsonParser.ParseContractTermAssetContext(jsn : TJsonObject) : TFhirContractTermAssetContext;
begin
  result := TFhirContractTermAssetContext.Create;
  try
    ParseContractTermAssetContextProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermAssetContextProperties(jsn : TJsonObject; value : TFhirContractTermAssetContext);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('reference') then
        value.reference := ParseReference(jsn.vObj['reference']);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCodeableConcept);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
end;

procedure TFHIRJsonComposer.ComposeContractTermAssetContext(json : TJSONWriter; name : string; value : TFhirContractTermAssetContext; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'reference', value.reference);
  if (SummaryOption in [soFull, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContractTermAssetValuedItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermAssetValuedItem(jsn)); 
end;

function TFHIRJsonParser.ParseContractTermAssetValuedItem(jsn : TJsonObject) : TFhirContractTermAssetValuedItem;
begin
  result := TFhirContractTermAssetValuedItem.Create;
  try
    ParseContractTermAssetValuedItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermAssetValuedItemProperties(jsn : TJsonObject; value : TFhirContractTermAssetValuedItem);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('entityCodeableConcept') {a4} then
      value.entity := ParseCodeableConcept(jsn.vObj['entityCodeableConcept']);
    if jsn.has('entityReference') {a3} then
      value.entity := ParseReference(jsn.vObj['entityReference']);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('effectiveTime') or jsn.has('_effectiveTime') then
        value.effectiveTimeElement := parseDateTime(jsn.node['effectiveTime'], jsn.vObj['_effectiveTime']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('unitPrice') then
        value.unitPrice := ParseMoney(jsn.vObj['unitPrice']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('points') or jsn.has('_points') then
        value.pointsElement := parseDecimal(jsn.node['points'], jsn.vObj['_points']);
    if jsn.has('net') then
        value.net := ParseMoney(jsn.vObj['net']);
    if jsn.has('payment') or jsn.has('_payment') then
        value.paymentElement := parseString(jsn.node['payment'], jsn.vObj['_payment']);
    if jsn.has('paymentDate') or jsn.has('_paymentDate') then
        value.paymentDateElement := parseDateTime(jsn.node['paymentDate'], jsn.vObj['_paymentDate']);
    if jsn.has('responsible') then
        value.responsible := ParseReference(jsn.vObj['responsible']);
    if jsn.has('recipient') then
        value.recipient := ParseReference(jsn.vObj['recipient']);
      if jsn.has('linkId') or jsn.has('_linkId') then
      iteratePrimitiveArray(jsn.vArr['linkId'], jsn.vArr['_linkId'], value.linkIdList, parseString);
      if jsn.has('securityLabelNumber') or jsn.has('_securityLabelNumber') then
      iteratePrimitiveArray(jsn.vArr['securityLabelNumber'], jsn.vArr['_securityLabelNumber'], value.securityLabelNumberList, parseUnsignedInt);
end;

procedure TFHIRJsonComposer.ComposeContractTermAssetValuedItem(json : TJSONWriter; name : string; value : TFhirContractTermAssetValuedItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.entity is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'entityCodeableConcept', TFhirCodeableConcept(value.entity)) 
  else if (SummaryOption in [soFull, soData]) and (value.entity is TFhirReference) then
    ComposeReference(json, 'entityReference', TFhirReference(value.entity));
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'effectiveTime', value.effectiveTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'effectiveTime', value.effectiveTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', value.unitPrice);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'points', value.pointsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'points', value.pointsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', value.net);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'payment', value.paymentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'payment', value.paymentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'paymentDate', value.paymentDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'paymentDate', value.paymentDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'responsible', value.responsible);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'recipient', value.recipient);
  if (SummaryOption in [soFull, soData]) and (value.linkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.linkIdList.Count - 1 do
    begin
      ext := ext or ((value.linkIdList[i].id <> '') or (value.linkIdList[i].hasExtensionList) {no-comments or (value.linkIdList[i].hasComments)});
      val := val or (value.linkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'linkId', value.linkIdList, true);
      for i := 0 to value.linkIdList.Count - 1 do
        ComposeStringValue(json, '', value.linkIdList[i], true);
      finishArray(json, value.linkIdList);
    end;
    if ext then
    begin
      startArray(json, '_linkId', value.linkIdList, false);
      for i := 0 to value.linkIdList.Count - 1 do
        ComposeStringProps(json, '', value.linkIdList[i], true);
      finishArray(json, value.linkIdList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.securityLabelNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.securityLabelNumberList.Count - 1 do
    begin
      ext := ext or ((value.securityLabelNumberList[i].id <> '') or (value.securityLabelNumberList[i].hasExtensionList) {no-comments or (value.securityLabelNumberList[i].hasComments)});
      val := val or (value.securityLabelNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'securityLabelNumber', value.securityLabelNumberList, true);
      for i := 0 to value.securityLabelNumberList.Count - 1 do
        ComposeUnsignedIntValue(json, '', value.securityLabelNumberList[i], true);
      finishArray(json, value.securityLabelNumberList);
    end;
    if ext then
    begin
      startArray(json, '_securityLabelNumber', value.securityLabelNumberList, false);
      for i := 0 to value.securityLabelNumberList.Count - 1 do
        ComposeUnsignedIntProps(json, '', value.securityLabelNumberList[i], true);
      finishArray(json, value.securityLabelNumberList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContractTermAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermAction(jsn)); 
end;

function TFHIRJsonParser.ParseContractTermAction(jsn : TJsonObject) : TFhirContractTermAction;
begin
  result := TFhirContractTermAction.Create;
  try
    ParseContractTermActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermActionProperties(jsn : TJsonObject; value : TFhirContractTermAction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('doNotPerform') or jsn.has('_doNotPerform') then
        value.doNotPerformElement := parseBoolean(jsn.node['doNotPerform'], jsn.vObj['_doNotPerform']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('subject') then
      iterateArray(jsn.vArr['subject'], value.subjectList, parseContractTermActionSubject);
    if jsn.has('intent') then
        value.intent := ParseCodeableConcept(jsn.vObj['intent']);
      if jsn.has('linkId') or jsn.has('_linkId') then
      iteratePrimitiveArray(jsn.vArr['linkId'], jsn.vArr['_linkId'], value.linkIdList, parseString);
    if jsn.has('status') then
        value.status := ParseCodeableConcept(jsn.vObj['status']);
    if jsn.has('context') then
        value.context := ParseReference(jsn.vObj['context']);
      if jsn.has('contextLinkId') or jsn.has('_contextLinkId') then
      iteratePrimitiveArray(jsn.vArr['contextLinkId'], jsn.vArr['_contextLinkId'], value.contextLinkIdList, parseString);
    if jsn.has('occurrencePeriod') {a4} then
      value.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      value.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      value.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('requester') then
      iterateArray(jsn.vArr['requester'], value.requesterList, parseReference);
      if jsn.has('requesterLinkId') or jsn.has('_requesterLinkId') then
      iteratePrimitiveArray(jsn.vArr['requesterLinkId'], jsn.vArr['_requesterLinkId'], value.requesterLinkIdList, parseString);
    if jsn.has('performerType') then
      iterateArray(jsn.vArr['performerType'], value.performerTypeList, parseCodeableConcept);
    if jsn.has('performerRole') then
        value.performerRole := ParseCodeableConcept(jsn.vObj['performerRole']);
    if jsn.has('performer') then
        value.performer := ParseReference(jsn.vObj['performer']);
      if jsn.has('performerLinkId') or jsn.has('_performerLinkId') then
      iteratePrimitiveArray(jsn.vArr['performerLinkId'], jsn.vArr['_performerLinkId'], value.performerLinkIdList, parseString);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
      if jsn.has('reason') or jsn.has('_reason') then
      iteratePrimitiveArray(jsn.vArr['reason'], jsn.vArr['_reason'], value.reasonList, parseString);
      if jsn.has('reasonLinkId') or jsn.has('_reasonLinkId') then
      iteratePrimitiveArray(jsn.vArr['reasonLinkId'], jsn.vArr['_reasonLinkId'], value.reasonLinkIdList, parseString);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
      if jsn.has('securityLabelNumber') or jsn.has('_securityLabelNumber') then
      iteratePrimitiveArray(jsn.vArr['securityLabelNumber'], jsn.vArr['_securityLabelNumber'], value.securityLabelNumberList, parseUnsignedInt);
end;

procedure TFHIRJsonComposer.ComposeContractTermAction(json : TJSONWriter; name : string; value : TFhirContractTermAction; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'doNotPerform', value.doNotPerformElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'doNotPerform', value.doNotPerformElement, false);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.subjectList.Count > 0) then
  begin
    startArray(json, 'subject', value.subjectList, false);
    for i := 0 to value.subjectList.Count - 1 do
      ComposeContractTermActionSubject(json, '', value.subjectList[i]);
    finishArray(json, value.subjectList);
  end;
  ComposeCodeableConcept(json, 'intent', value.intent);
  if (SummaryOption in [soFull, soData]) and (value.linkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.linkIdList.Count - 1 do
    begin
      ext := ext or ((value.linkIdList[i].id <> '') or (value.linkIdList[i].hasExtensionList) {no-comments or (value.linkIdList[i].hasComments)});
      val := val or (value.linkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'linkId', value.linkIdList, true);
      for i := 0 to value.linkIdList.Count - 1 do
        ComposeStringValue(json, '', value.linkIdList[i], true);
      finishArray(json, value.linkIdList);
    end;
    if ext then
    begin
      startArray(json, '_linkId', value.linkIdList, false);
      for i := 0 to value.linkIdList.Count - 1 do
        ComposeStringProps(json, '', value.linkIdList[i], true);
      finishArray(json, value.linkIdList);
    end;
  end;
  ComposeCodeableConcept(json, 'status', value.status);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'context', value.context);
  if (SummaryOption in [soFull, soData]) and (value.contextLinkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.contextLinkIdList.Count - 1 do
    begin
      ext := ext or ((value.contextLinkIdList[i].id <> '') or (value.contextLinkIdList[i].hasExtensionList) {no-comments or (value.contextLinkIdList[i].hasComments)});
      val := val or (value.contextLinkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'contextLinkId', value.contextLinkIdList, true);
      for i := 0 to value.contextLinkIdList.Count - 1 do
        ComposeStringValue(json, '', value.contextLinkIdList[i], true);
      finishArray(json, value.contextLinkIdList);
    end;
    if ext then
    begin
      startArray(json, '_contextLinkId', value.contextLinkIdList, false);
      for i := 0 to value.contextLinkIdList.Count - 1 do
        ComposeStringProps(json, '', value.contextLinkIdList[i], true);
      finishArray(json, value.contextLinkIdList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(value.occurrence)) 
  else if (SummaryOption in [soFull, soData]) and (value.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(value.occurrence)) 
  else if (SummaryOption in [soFull, soData]) and (value.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.requesterList.Count > 0) then
  begin
    startArray(json, 'requester', value.requesterList, false);
    for i := 0 to value.requesterList.Count - 1 do
      ComposeReference(json, '', value.requesterList[i]);
    finishArray(json, value.requesterList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.requesterLinkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.requesterLinkIdList.Count - 1 do
    begin
      ext := ext or ((value.requesterLinkIdList[i].id <> '') or (value.requesterLinkIdList[i].hasExtensionList) {no-comments or (value.requesterLinkIdList[i].hasComments)});
      val := val or (value.requesterLinkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'requesterLinkId', value.requesterLinkIdList, true);
      for i := 0 to value.requesterLinkIdList.Count - 1 do
        ComposeStringValue(json, '', value.requesterLinkIdList[i], true);
      finishArray(json, value.requesterLinkIdList);
    end;
    if ext then
    begin
      startArray(json, '_requesterLinkId', value.requesterLinkIdList, false);
      for i := 0 to value.requesterLinkIdList.Count - 1 do
        ComposeStringProps(json, '', value.requesterLinkIdList[i], true);
      finishArray(json, value.requesterLinkIdList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.performerTypeList.Count > 0) then
  begin
    startArray(json, 'performerType', value.performerTypeList, false);
    for i := 0 to value.performerTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.performerTypeList[i]);
    finishArray(json, value.performerTypeList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'performerRole', value.performerRole);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'performer', value.performer);
  if (SummaryOption in [soFull, soData]) and (value.performerLinkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.performerLinkIdList.Count - 1 do
    begin
      ext := ext or ((value.performerLinkIdList[i].id <> '') or (value.performerLinkIdList[i].hasExtensionList) {no-comments or (value.performerLinkIdList[i].hasComments)});
      val := val or (value.performerLinkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'performerLinkId', value.performerLinkIdList, true);
      for i := 0 to value.performerLinkIdList.Count - 1 do
        ComposeStringValue(json, '', value.performerLinkIdList[i], true);
      finishArray(json, value.performerLinkIdList);
    end;
    if ext then
    begin
      startArray(json, '_performerLinkId', value.performerLinkIdList, false);
      for i := 0 to value.performerLinkIdList.Count - 1 do
        ComposeStringProps(json, '', value.performerLinkIdList[i], true);
      finishArray(json, value.performerLinkIdList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.reasonList.Count - 1 do
    begin
      ext := ext or ((value.reasonList[i].id <> '') or (value.reasonList[i].hasExtensionList) {no-comments or (value.reasonList[i].hasComments)});
      val := val or (value.reasonList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'reason', value.reasonList, true);
      for i := 0 to value.reasonList.Count - 1 do
        ComposeStringValue(json, '', value.reasonList[i], true);
      finishArray(json, value.reasonList);
    end;
    if ext then
    begin
      startArray(json, '_reason', value.reasonList, false);
      for i := 0 to value.reasonList.Count - 1 do
        ComposeStringProps(json, '', value.reasonList[i], true);
      finishArray(json, value.reasonList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonLinkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.reasonLinkIdList.Count - 1 do
    begin
      ext := ext or ((value.reasonLinkIdList[i].id <> '') or (value.reasonLinkIdList[i].hasExtensionList) {no-comments or (value.reasonLinkIdList[i].hasComments)});
      val := val or (value.reasonLinkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'reasonLinkId', value.reasonLinkIdList, true);
      for i := 0 to value.reasonLinkIdList.Count - 1 do
        ComposeStringValue(json, '', value.reasonLinkIdList[i], true);
      finishArray(json, value.reasonLinkIdList);
    end;
    if ext then
    begin
      startArray(json, '_reasonLinkId', value.reasonLinkIdList, false);
      for i := 0 to value.reasonLinkIdList.Count - 1 do
        ComposeStringProps(json, '', value.reasonLinkIdList[i], true);
      finishArray(json, value.reasonLinkIdList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.securityLabelNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.securityLabelNumberList.Count - 1 do
    begin
      ext := ext or ((value.securityLabelNumberList[i].id <> '') or (value.securityLabelNumberList[i].hasExtensionList) {no-comments or (value.securityLabelNumberList[i].hasComments)});
      val := val or (value.securityLabelNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'securityLabelNumber', value.securityLabelNumberList, true);
      for i := 0 to value.securityLabelNumberList.Count - 1 do
        ComposeUnsignedIntValue(json, '', value.securityLabelNumberList[i], true);
      finishArray(json, value.securityLabelNumberList);
    end;
    if ext then
    begin
      startArray(json, '_securityLabelNumber', value.securityLabelNumberList, false);
      for i := 0 to value.securityLabelNumberList.Count - 1 do
        ComposeUnsignedIntProps(json, '', value.securityLabelNumberList[i], true);
      finishArray(json, value.securityLabelNumberList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContractTermActionSubject(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermActionSubject(jsn)); 
end;

function TFHIRJsonParser.ParseContractTermActionSubject(jsn : TJsonObject) : TFhirContractTermActionSubject;
begin
  result := TFhirContractTermActionSubject.Create;
  try
    ParseContractTermActionSubjectProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermActionSubjectProperties(jsn : TJsonObject; value : TFhirContractTermActionSubject);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('reference') then
      iterateArray(jsn.vArr['reference'], value.referenceList, parseReference);
    if jsn.has('role') then
        value.role := ParseCodeableConcept(jsn.vObj['role']);
end;

procedure TFHIRJsonComposer.ComposeContractTermActionSubject(json : TJSONWriter; name : string; value : TFhirContractTermActionSubject; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.referenceList.Count > 0) then
  begin
    startArray(json, 'reference', value.referenceList, false);
    for i := 0 to value.referenceList.Count - 1 do
      ComposeReference(json, '', value.referenceList[i]);
    finishArray(json, value.referenceList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', value.role);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContractSigner(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractSigner(jsn)); 
end;

function TFHIRJsonParser.ParseContractSigner(jsn : TJsonObject) : TFhirContractSigner;
begin
  result := TFhirContractSigner.Create;
  try
    ParseContractSignerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractSignerProperties(jsn : TJsonObject; value : TFhirContractSigner);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCoding(jsn.vObj['type']);
    if jsn.has('party') then
        value.party := ParseReference(jsn.vObj['party']);
    if jsn.has('signature') then
      iterateArray(jsn.vArr['signature'], value.signatureList, parseSignature);
end;

procedure TFHIRJsonComposer.ComposeContractSigner(json : TJSONWriter; name : string; value : TFhirContractSigner; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCoding(json, 'type', value.type_);
  ComposeReference(json, 'party', value.party);
  if (value.signatureList.Count > 0) then
  begin
    startArray(json, 'signature', value.signatureList, false);
    for i := 0 to value.signatureList.Count - 1 do
      ComposeSignature(json, '', value.signatureList[i]);
    finishArray(json, value.signatureList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContractFriendly(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractFriendly(jsn)); 
end;

function TFHIRJsonParser.ParseContractFriendly(jsn : TJsonObject) : TFhirContractFriendly;
begin
  result := TFhirContractFriendly.Create;
  try
    ParseContractFriendlyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractFriendlyProperties(jsn : TJsonObject; value : TFhirContractFriendly);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('contentAttachment') {a4} then
      value.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      value.content := ParseReference(jsn.vObj['contentReference']);
end;

procedure TFHIRJsonComposer.ComposeContractFriendly(json : TJSONWriter; name : string; value : TFhirContractFriendly; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(value.content)) 
  else if (value.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(value.content));
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContractLegal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractLegal(jsn)); 
end;

function TFHIRJsonParser.ParseContractLegal(jsn : TJsonObject) : TFhirContractLegal;
begin
  result := TFhirContractLegal.Create;
  try
    ParseContractLegalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractLegalProperties(jsn : TJsonObject; value : TFhirContractLegal);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('contentAttachment') {a4} then
      value.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      value.content := ParseReference(jsn.vObj['contentReference']);
end;

procedure TFHIRJsonComposer.ComposeContractLegal(json : TJSONWriter; name : string; value : TFhirContractLegal; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(value.content)) 
  else if (value.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(value.content));
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContractRule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractRule(jsn)); 
end;

function TFHIRJsonParser.ParseContractRule(jsn : TJsonObject) : TFhirContractRule;
begin
  result := TFhirContractRule.Create;
  try
    ParseContractRuleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractRuleProperties(jsn : TJsonObject; value : TFhirContractRule);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('contentAttachment') {a4} then
      value.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      value.content := ParseReference(jsn.vObj['contentReference']);
end;

procedure TFHIRJsonComposer.ComposeContractRule(json : TJSONWriter; name : string; value : TFhirContractRule; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(value.content)) 
  else if (value.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(value.content));
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseContract(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContract(jsn)); 
end;

function TFHIRJsonParser.ParseContract(jsn : TJsonObject) : TFhirContract;
begin
  result := TFhirContract.Create;
  try
    ParseContractProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractProperties(jsn : TJsonObject; value : TFhirContract);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirContractResourceStatusCodesEnum, SYSTEMS_TFhirContractResourceStatusCodesEnum);
    if jsn.has('legalState') then
        value.legalState := ParseCodeableConcept(jsn.vObj['legalState']);
    if jsn.has('instantiatesCanonical') then
        value.instantiatesCanonical := ParseReference(jsn.vObj['instantiatesCanonical']);
    if jsn.has('instantiatesUri') or jsn.has('_instantiatesUri') then
        value.instantiatesUriElement := parseUri(jsn.node['instantiatesUri'], jsn.vObj['_instantiatesUri']);
    if jsn.has('contentDerivative') then
        value.contentDerivative := ParseCodeableConcept(jsn.vObj['contentDerivative']);
    if jsn.has('issued') or jsn.has('_issued') then
        value.issuedElement := parseDateTime(jsn.node['issued'], jsn.vObj['_issued']);
    if jsn.has('applies') then
        value.applies := ParsePeriod(jsn.vObj['applies']);
    if jsn.has('expirationType') then
        value.expirationType := ParseCodeableConcept(jsn.vObj['expirationType']);
    if jsn.has('subject') then
      iterateArray(jsn.vArr['subject'], value.subjectList, parseReference);
    if jsn.has('authority') then
      iterateArray(jsn.vArr['authority'], value.authorityList, parseReference);
    if jsn.has('domain') then
      iterateArray(jsn.vArr['domain'], value.domainList, parseReference);
    if jsn.has('site') then
      iterateArray(jsn.vArr['site'], value.siteList, parseReference);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('subtitle') or jsn.has('_subtitle') then
        value.subtitleElement := parseString(jsn.node['subtitle'], jsn.vObj['_subtitle']);
      if jsn.has('alias') or jsn.has('_alias') then
      iteratePrimitiveArray(jsn.vArr['alias'], jsn.vArr['_alias'], value.aliasList, parseString);
    if jsn.has('author') then
        value.author := ParseReference(jsn.vObj['author']);
    if jsn.has('scope') then
        value.scope := ParseCodeableConcept(jsn.vObj['scope']);
    if jsn.has('topicCodeableConcept') {a4} then
      value.topic := ParseCodeableConcept(jsn.vObj['topicCodeableConcept']);
    if jsn.has('topicReference') {a3} then
      value.topic := ParseReference(jsn.vObj['topicReference']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('subType') then
      iterateArray(jsn.vArr['subType'], value.subTypeList, parseCodeableConcept);
    if jsn.has('contentDefinition') then
        value.contentDefinition := ParseContractContentDefinition(jsn.vObj['contentDefinition']);
    if jsn.has('term') then
      iterateArray(jsn.vArr['term'], value.termList, parseContractTerm);
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], value.supportingInfoList, parseReference);
    if jsn.has('relevantHistory') then
      iterateArray(jsn.vArr['relevantHistory'], value.relevantHistoryList, parseReference);
    if jsn.has('signer') then
      iterateArray(jsn.vArr['signer'], value.signerList, parseContractSigner);
    if jsn.has('friendly') then
      iterateArray(jsn.vArr['friendly'], value.friendlyList, parseContractFriendly);
    if jsn.has('legal') then
      iterateArray(jsn.vArr['legal'], value.legalList, parseContractLegal);
    if jsn.has('rule') then
      iterateArray(jsn.vArr['rule'], value.ruleList, parseContractRule);
    if jsn.has('legallyBindingAttachment') {a4} then
      value.legallyBinding := ParseAttachment(jsn.vObj['legallyBindingAttachment']);
    if jsn.has('legallyBindingReference') {a3} then
      value.legallyBinding := ParseReference(jsn.vObj['legallyBindingReference']);
end;

procedure TFHIRJsonComposer.ComposeContract(json : TJSONWriter; name : string; value : TFhirContract; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirContractResourceStatusCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'legalState', value.legalState);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'instantiatesCanonical', value.instantiatesCanonical);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'instantiatesUri', value.instantiatesUriElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'instantiatesUri', value.instantiatesUriElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'contentDerivative', value.contentDerivative);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'issued', value.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'issued', value.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'applies', value.applies);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'expirationType', value.expirationType);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.subjectList.Count > 0) then
  begin
    startArray(json, 'subject', value.subjectList, false);
    for i := 0 to value.subjectList.Count - 1 do
      ComposeReference(json, '', value.subjectList[i]);
    finishArray(json, value.subjectList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.authorityList.Count > 0) then
  begin
    startArray(json, 'authority', value.authorityList, false);
    for i := 0 to value.authorityList.Count - 1 do
      ComposeReference(json, '', value.authorityList[i]);
    finishArray(json, value.authorityList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.domainList.Count > 0) then
  begin
    startArray(json, 'domain', value.domainList, false);
    for i := 0 to value.domainList.Count - 1 do
      ComposeReference(json, '', value.domainList[i]);
    finishArray(json, value.domainList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.siteList.Count > 0) then
  begin
    startArray(json, 'site', value.siteList, false);
    for i := 0 to value.siteList.Count - 1 do
      ComposeReference(json, '', value.siteList[i]);
    finishArray(json, value.siteList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'subtitle', value.subtitleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'subtitle', value.subtitleElement, false);
  if (SummaryOption in [soFull, soData]) and (value.aliasList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.aliasList.Count - 1 do
    begin
      ext := ext or ((value.aliasList[i].id <> '') or (value.aliasList[i].hasExtensionList) {no-comments or (value.aliasList[i].hasComments)});
      val := val or (value.aliasList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'alias', value.aliasList, true);
      for i := 0 to value.aliasList.Count - 1 do
        ComposeStringValue(json, '', value.aliasList[i], true);
      finishArray(json, value.aliasList);
    end;
    if ext then
    begin
      startArray(json, '_alias', value.aliasList, false);
      for i := 0 to value.aliasList.Count - 1 do
        ComposeStringProps(json, '', value.aliasList[i], true);
      finishArray(json, value.aliasList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'author', value.author);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'scope', value.scope);
  if (SummaryOption in [soFull, soData]) and (value.topic is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'topicCodeableConcept', TFhirCodeableConcept(value.topic)) 
  else if (SummaryOption in [soFull, soData]) and (value.topic is TFhirReference) then
    ComposeReference(json, 'topicReference', TFhirReference(value.topic));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.subTypeList.Count > 0) then
  begin
    startArray(json, 'subType', value.subTypeList, false);
    for i := 0 to value.subTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.subTypeList[i]);
    finishArray(json, value.subTypeList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeContractContentDefinition(json, 'contentDefinition', value.contentDefinition);
  if (SummaryOption in [soFull, soData]) and (value.termList.Count > 0) then
  begin
    startArray(json, 'term', value.termList, false);
    for i := 0 to value.termList.Count - 1 do
      ComposeContractTerm(json, '', value.termList[i]);
    finishArray(json, value.termList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.supportingInfoList.Count > 0) then
  begin
    startArray(json, 'supportingInfo', value.supportingInfoList, false);
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeReference(json, '', value.supportingInfoList[i]);
    finishArray(json, value.supportingInfoList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relevantHistoryList.Count > 0) then
  begin
    startArray(json, 'relevantHistory', value.relevantHistoryList, false);
    for i := 0 to value.relevantHistoryList.Count - 1 do
      ComposeReference(json, '', value.relevantHistoryList[i]);
    finishArray(json, value.relevantHistoryList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.signerList.Count > 0) then
  begin
    startArray(json, 'signer', value.signerList, false);
    for i := 0 to value.signerList.Count - 1 do
      ComposeContractSigner(json, '', value.signerList[i]);
    finishArray(json, value.signerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.friendlyList.Count > 0) then
  begin
    startArray(json, 'friendly', value.friendlyList, false);
    for i := 0 to value.friendlyList.Count - 1 do
      ComposeContractFriendly(json, '', value.friendlyList[i]);
    finishArray(json, value.friendlyList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.legalList.Count > 0) then
  begin
    startArray(json, 'legal', value.legalList, false);
    for i := 0 to value.legalList.Count - 1 do
      ComposeContractLegal(json, '', value.legalList[i]);
    finishArray(json, value.legalList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.ruleList.Count > 0) then
  begin
    startArray(json, 'rule', value.ruleList, false);
    for i := 0 to value.ruleList.Count - 1 do
      ComposeContractRule(json, '', value.ruleList[i]);
    finishArray(json, value.ruleList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.legallyBinding is TFhirAttachment) then 
    ComposeAttachment(json, 'legallyBindingAttachment', TFhirAttachment(value.legallyBinding)) 
  else if (SummaryOption in [soFull, soData]) and (value.legallyBinding is TFhirReference) then
    ComposeReference(json, 'legallyBindingReference', TFhirReference(value.legallyBinding));
end;

{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
procedure TFHIRJsonParser.ParseCoverageClass(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageClass(jsn)); 
end;

function TFHIRJsonParser.ParseCoverageClass(jsn : TJsonObject) : TFhirCoverageClass;
begin
  result := TFhirCoverageClass.Create;
  try
    ParseCoverageClassProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageClassProperties(jsn : TJsonObject; value : TFhirCoverageClass);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
end;

procedure TFHIRJsonComposer.ComposeCoverageClass(json : TJSONWriter; name : string; value : TFhirCoverageClass; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  ComposeStringValue(json, 'value', value.valueElement, false);
  ComposeStringProps(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCoverageCostToBeneficiary(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageCostToBeneficiary(jsn)); 
end;

function TFHIRJsonParser.ParseCoverageCostToBeneficiary(jsn : TJsonObject) : TFhirCoverageCostToBeneficiary;
begin
  result := TFhirCoverageCostToBeneficiary.Create;
  try
    ParseCoverageCostToBeneficiaryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageCostToBeneficiaryProperties(jsn : TJsonObject; value : TFhirCoverageCostToBeneficiary);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueMoney') {a4} then
      value.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('exception') then
      iterateArray(jsn.vArr['exception'], value.exceptionList, parseCoverageCostToBeneficiaryException);
end;

procedure TFHIRJsonComposer.ComposeCoverageCostToBeneficiary(json : TJSONWriter; name : string; value : TFhirCoverageCostToBeneficiary; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (value.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(value.value)) ;
  if (SummaryOption in [soFull, soData]) and (value.exceptionList.Count > 0) then
  begin
    startArray(json, 'exception', value.exceptionList, false);
    for i := 0 to value.exceptionList.Count - 1 do
      ComposeCoverageCostToBeneficiaryException(json, '', value.exceptionList[i]);
    finishArray(json, value.exceptionList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCoverageCostToBeneficiaryException(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageCostToBeneficiaryException(jsn)); 
end;

function TFHIRJsonParser.ParseCoverageCostToBeneficiaryException(jsn : TJsonObject) : TFhirCoverageCostToBeneficiaryException;
begin
  result := TFhirCoverageCostToBeneficiaryException.Create;
  try
    ParseCoverageCostToBeneficiaryExceptionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageCostToBeneficiaryExceptionProperties(jsn : TJsonObject; value : TFhirCoverageCostToBeneficiaryException);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeCoverageCostToBeneficiaryException(json : TJSONWriter; name : string; value : TFhirCoverageCostToBeneficiaryException; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverage(jsn)); 
end;

function TFHIRJsonParser.ParseCoverage(jsn : TJsonObject) : TFhirCoverage;
begin
  result := TFhirCoverage.Create;
  try
    ParseCoverageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageProperties(jsn : TJsonObject; value : TFhirCoverage);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('policyHolder') then
        value.policyHolder := ParseReference(jsn.vObj['policyHolder']);
    if jsn.has('subscriber') then
        value.subscriber := ParseReference(jsn.vObj['subscriber']);
    if jsn.has('subscriberId') or jsn.has('_subscriberId') then
        value.subscriberIdElement := parseString(jsn.node['subscriberId'], jsn.vObj['_subscriberId']);
    if jsn.has('beneficiary') then
        value.beneficiary := ParseReference(jsn.vObj['beneficiary']);
    if jsn.has('dependent') or jsn.has('_dependent') then
        value.dependentElement := parseString(jsn.node['dependent'], jsn.vObj['_dependent']);
    if jsn.has('relationship') then
        value.relationship := ParseCodeableConcept(jsn.vObj['relationship']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('payor') then
      iterateArray(jsn.vArr['payor'], value.payorList, parseReference);
    if jsn.has('class') then
      iterateArray(jsn.vArr['class'], value.class_List, parseCoverageClass);
    if jsn.has('order') or jsn.has('_order') then
        value.orderElement := parsePositiveInt(jsn.node['order'], jsn.vObj['_order']);
    if jsn.has('network') or jsn.has('_network') then
        value.networkElement := parseString(jsn.node['network'], jsn.vObj['_network']);
    if jsn.has('costToBeneficiary') then
      iterateArray(jsn.vArr['costToBeneficiary'], value.costToBeneficiaryList, parseCoverageCostToBeneficiary);
    if jsn.has('subrogation') or jsn.has('_subrogation') then
        value.subrogationElement := parseBoolean(jsn.node['subrogation'], jsn.vObj['_subrogation']);
    if jsn.has('contract') then
      iterateArray(jsn.vArr['contract'], value.contractList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeCoverage(json : TJSONWriter; name : string; value : TFhirCoverage; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'policyHolder', value.policyHolder);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subscriber', value.subscriber);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'subscriberId', value.subscriberIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'subscriberId', value.subscriberIdElement, false);
  ComposeReference(json, 'beneficiary', value.beneficiary);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'dependent', value.dependentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'dependent', value.dependentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'relationship', value.relationship);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (value.payorList.Count > 0) then
  begin
    startArray(json, 'payor', value.payorList, false);
    for i := 0 to value.payorList.Count - 1 do
      ComposeReference(json, '', value.payorList[i]);
    finishArray(json, value.payorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.class_List.Count > 0) then
  begin
    startArray(json, 'class', value.class_List, false);
    for i := 0 to value.class_List.Count - 1 do
      ComposeCoverageClass(json, '', value.class_List[i]);
    finishArray(json, value.class_List);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'order', value.orderElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'order', value.orderElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'network', value.networkElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'network', value.networkElement, false);
  if (SummaryOption in [soFull, soData]) and (value.costToBeneficiaryList.Count > 0) then
  begin
    startArray(json, 'costToBeneficiary', value.costToBeneficiaryList, false);
    for i := 0 to value.costToBeneficiaryList.Count - 1 do
      ComposeCoverageCostToBeneficiary(json, '', value.costToBeneficiaryList[i]);
    finishArray(json, value.costToBeneficiaryList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'subrogation', value.subrogationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'subrogation', value.subrogationElement, false);
  if (SummaryOption in [soFull, soData]) and (value.contractList.Count > 0) then
  begin
    startArray(json, 'contract', value.contractList, false);
    for i := 0 to value.contractList.Count - 1 do
      ComposeReference(json, '', value.contractList[i]);
    finishArray(json, value.contractList);
  end;
end;

{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
procedure TFHIRJsonParser.ParseCoverageEligibilityRequestSupportingInfo(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageEligibilityRequestSupportingInfo(jsn)); 
end;

function TFHIRJsonParser.ParseCoverageEligibilityRequestSupportingInfo(jsn : TJsonObject) : TFhirCoverageEligibilityRequestSupportingInfo;
begin
  result := TFhirCoverageEligibilityRequestSupportingInfo.Create;
  try
    ParseCoverageEligibilityRequestSupportingInfoProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityRequestSupportingInfoProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityRequestSupportingInfo);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('information') then
        value.information := ParseReference(jsn.vObj['information']);
    if jsn.has('appliesToAll') or jsn.has('_appliesToAll') then
        value.appliesToAllElement := parseBoolean(jsn.node['appliesToAll'], jsn.vObj['_appliesToAll']);
end;

procedure TFHIRJsonComposer.ComposeCoverageEligibilityRequestSupportingInfo(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityRequestSupportingInfo; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  ComposeReference(json, 'information', value.information);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'appliesToAll', value.appliesToAllElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'appliesToAll', value.appliesToAllElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityRequestInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageEligibilityRequestInsurance(jsn)); 
end;

function TFHIRJsonParser.ParseCoverageEligibilityRequestInsurance(jsn : TJsonObject) : TFhirCoverageEligibilityRequestInsurance;
begin
  result := TFhirCoverageEligibilityRequestInsurance.Create;
  try
    ParseCoverageEligibilityRequestInsuranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityRequestInsuranceProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityRequestInsurance);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('focal') or jsn.has('_focal') then
        value.focalElement := parseBoolean(jsn.node['focal'], jsn.vObj['_focal']);
    if jsn.has('coverage') then
        value.coverage := ParseReference(jsn.vObj['coverage']);
    if jsn.has('businessArrangement') or jsn.has('_businessArrangement') then
        value.businessArrangementElement := parseString(jsn.node['businessArrangement'], jsn.vObj['_businessArrangement']);
end;

procedure TFHIRJsonComposer.ComposeCoverageEligibilityRequestInsurance(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityRequestInsurance; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'focal', value.focalElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'focal', value.focalElement, false);
  ComposeReference(json, 'coverage', value.coverage);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'businessArrangement', value.businessArrangementElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'businessArrangement', value.businessArrangementElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityRequestItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageEligibilityRequestItem(jsn)); 
end;

function TFHIRJsonParser.ParseCoverageEligibilityRequestItem(jsn : TJsonObject) : TFhirCoverageEligibilityRequestItem;
begin
  result := TFhirCoverageEligibilityRequestItem.Create;
  try
    ParseCoverageEligibilityRequestItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityRequestItemProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityRequestItem);
begin
    ParseBackboneElementProperties(jsn, value);
      if jsn.has('supportingInfoSequence') or jsn.has('_supportingInfoSequence') then
      iteratePrimitiveArray(jsn.vArr['supportingInfoSequence'], jsn.vArr['_supportingInfoSequence'], value.supportingInfoSequenceList, parsePositiveInt);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('productOrService') then
        value.productOrService := ParseCodeableConcept(jsn.vObj['productOrService']);
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], value.modifierList, parseCodeableConcept);
    if jsn.has('provider') then
        value.provider := ParseReference(jsn.vObj['provider']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('unitPrice') then
        value.unitPrice := ParseMoney(jsn.vObj['unitPrice']);
    if jsn.has('facility') then
        value.facility := ParseReference(jsn.vObj['facility']);
    if jsn.has('diagnosis') then
      iterateArray(jsn.vArr['diagnosis'], value.diagnosisList, parseCoverageEligibilityRequestItemDiagnosis);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], value.detailList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeCoverageEligibilityRequestItem(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityRequestItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.supportingInfoSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.supportingInfoSequenceList.Count - 1 do
    begin
      ext := ext or ((value.supportingInfoSequenceList[i].id <> '') or (value.supportingInfoSequenceList[i].hasExtensionList) {no-comments or (value.supportingInfoSequenceList[i].hasComments)});
      val := val or (value.supportingInfoSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'supportingInfoSequence', value.supportingInfoSequenceList, true);
      for i := 0 to value.supportingInfoSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.supportingInfoSequenceList[i], true);
      finishArray(json, value.supportingInfoSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_supportingInfoSequence', value.supportingInfoSequenceList, false);
      for i := 0 to value.supportingInfoSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.supportingInfoSequenceList[i], true);
      finishArray(json, value.supportingInfoSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'productOrService', value.productOrService);
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    startArray(json, 'modifier', value.modifierList, false);
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.modifierList[i]);
    finishArray(json, value.modifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'provider', value.provider);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', value.unitPrice);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'facility', value.facility);
  if (SummaryOption in [soFull, soData]) and (value.diagnosisList.Count > 0) then
  begin
    startArray(json, 'diagnosis', value.diagnosisList, false);
    for i := 0 to value.diagnosisList.Count - 1 do
      ComposeCoverageEligibilityRequestItemDiagnosis(json, '', value.diagnosisList[i]);
    finishArray(json, value.diagnosisList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.detailList.Count > 0) then
  begin
    startArray(json, 'detail', value.detailList, false);
    for i := 0 to value.detailList.Count - 1 do
      ComposeReference(json, '', value.detailList[i]);
    finishArray(json, value.detailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityRequestItemDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageEligibilityRequestItemDiagnosis(jsn)); 
end;

function TFHIRJsonParser.ParseCoverageEligibilityRequestItemDiagnosis(jsn : TJsonObject) : TFhirCoverageEligibilityRequestItemDiagnosis;
begin
  result := TFhirCoverageEligibilityRequestItemDiagnosis.Create;
  try
    ParseCoverageEligibilityRequestItemDiagnosisProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityRequestItemDiagnosisProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityRequestItemDiagnosis);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('diagnosisCodeableConcept') {a4} then
      value.diagnosis := ParseCodeableConcept(jsn.vObj['diagnosisCodeableConcept']);
    if jsn.has('diagnosisReference') {a3} then
      value.diagnosis := ParseReference(jsn.vObj['diagnosisReference']);
end;

procedure TFHIRJsonComposer.ComposeCoverageEligibilityRequestItemDiagnosis(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityRequestItemDiagnosis; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.diagnosis is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'diagnosisCodeableConcept', TFhirCodeableConcept(value.diagnosis)) 
  else if (SummaryOption in [soFull, soData]) and (value.diagnosis is TFhirReference) then
    ComposeReference(json, 'diagnosisReference', TFhirReference(value.diagnosis));
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageEligibilityRequest(jsn)); 
end;

function TFHIRJsonParser.ParseCoverageEligibilityRequest(jsn : TJsonObject) : TFhirCoverageEligibilityRequest;
begin
  result := TFhirCoverageEligibilityRequest.Create;
  try
    ParseCoverageEligibilityRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityRequestProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityRequest);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum);
    if jsn.has('priority') then
        value.priority := ParseCodeableConcept(jsn.vObj['priority']);
    if jsn.has('purpose') or jsn.has('_purpose') then
      iterateEnumArray(jsn.vArr['purpose'], jsn.vArr['_purpose'], jsn.path+'/purpose', value.purposeList, parseEnum, CODES_TFhirEligibilityRequestPurposeEnum, SYSTEMS_TFhirEligibilityRequestPurposeEnum);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('servicedPeriod') {a4} then
      value.serviced := ParsePeriod(jsn.vObj['servicedPeriod']);
    if jsn.has('servicedDate') or jsn.has('_servicedDate') then
      value.serviced := parseDate(jsn.node['servicedDate'], jsn.vObj['_servicedDate']);
    if jsn.has('created') or jsn.has('_created') then
        value.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);
    if jsn.has('enterer') then
        value.enterer := ParseReference(jsn.vObj['enterer']);
    if jsn.has('provider') then
        value.provider := ParseReference(jsn.vObj['provider']);
    if jsn.has('insurer') then
        value.insurer := ParseReference(jsn.vObj['insurer']);
    if jsn.has('facility') then
        value.facility := ParseReference(jsn.vObj['facility']);
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], value.supportingInfoList, parseCoverageEligibilityRequestSupportingInfo);
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], value.insuranceList, parseCoverageEligibilityRequestInsurance);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], value.itemList, parseCoverageEligibilityRequestItem);
end;

procedure TFHIRJsonComposer.ComposeCoverageEligibilityRequest(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityRequest; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'priority', value.priority);
  if (value.purposeList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.purposeList.Count - 1 do
    begin
      val := val or (value.purposeList[i].hasPrimitiveValue);
      ext := ext or ((value.purposeList[i].id <> '') or (value.purposeList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'purpose', value.purposeList, true);
      for i := 0 to value.purposeList.Count - 1 do
        ComposeEnumValue(json, '', value.purposeList[i], CODES_TFhirEligibilityRequestPurposeEnum, true);
      finishArray(json, value.purposeList);
    end;
    if ext then
    begin
      startArray(json, '_purpose', value.purposeList, false);
      for i := 0 to value.purposeList.Count - 1 do
        ComposeEnumProps(json, '', value.purposeList[i], CODES_TFhirEligibilityRequestPurposeEnum, true);
      finishArray(json, value.purposeList);
    end;
  end;
  ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirPeriod) then 
    ComposePeriod(json, 'servicedPeriod', TFhirPeriod(value.serviced)) 
  else if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirDate) then 
  begin
    ComposeDateValue(json, 'servicedDate', TFhirDate(value.serviced), false);
    ComposeDateProps(json, 'servicedDate', TFhirDate(value.serviced), false);
  end;
  ComposeDateTimeValue(json, 'created', value.createdElement, false);
  ComposeDateTimeProps(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'enterer', value.enterer);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'provider', value.provider);
  ComposeReference(json, 'insurer', value.insurer);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'facility', value.facility);
  if (SummaryOption in [soFull, soData]) and (value.supportingInfoList.Count > 0) then
  begin
    startArray(json, 'supportingInfo', value.supportingInfoList, false);
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeCoverageEligibilityRequestSupportingInfo(json, '', value.supportingInfoList[i]);
    finishArray(json, value.supportingInfoList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.insuranceList.Count > 0) then
  begin
    startArray(json, 'insurance', value.insuranceList, false);
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeCoverageEligibilityRequestInsurance(json, '', value.insuranceList[i]);
    finishArray(json, value.insuranceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.itemList.Count > 0) then
  begin
    startArray(json, 'item', value.itemList, false);
    for i := 0 to value.itemList.Count - 1 do
      ComposeCoverageEligibilityRequestItem(json, '', value.itemList[i]);
    finishArray(json, value.itemList);
  end;
end;

{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
procedure TFHIRJsonParser.ParseCoverageEligibilityResponseInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageEligibilityResponseInsurance(jsn)); 
end;

function TFHIRJsonParser.ParseCoverageEligibilityResponseInsurance(jsn : TJsonObject) : TFhirCoverageEligibilityResponseInsurance;
begin
  result := TFhirCoverageEligibilityResponseInsurance.Create;
  try
    ParseCoverageEligibilityResponseInsuranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityResponseInsuranceProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityResponseInsurance);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('coverage') then
        value.coverage := ParseReference(jsn.vObj['coverage']);
    if jsn.has('inforce') or jsn.has('_inforce') then
        value.inforceElement := parseBoolean(jsn.node['inforce'], jsn.vObj['_inforce']);
    if jsn.has('benefitPeriod') then
        value.benefitPeriod := ParsePeriod(jsn.vObj['benefitPeriod']);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], value.itemList, parseCoverageEligibilityResponseInsuranceItem);
end;

procedure TFHIRJsonComposer.ComposeCoverageEligibilityResponseInsurance(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityResponseInsurance; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'coverage', value.coverage);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'inforce', value.inforceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'inforce', value.inforceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'benefitPeriod', value.benefitPeriod);
  if (SummaryOption in [soFull, soData]) and (value.itemList.Count > 0) then
  begin
    startArray(json, 'item', value.itemList, false);
    for i := 0 to value.itemList.Count - 1 do
      ComposeCoverageEligibilityResponseInsuranceItem(json, '', value.itemList[i]);
    finishArray(json, value.itemList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityResponseInsuranceItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageEligibilityResponseInsuranceItem(jsn)); 
end;

function TFHIRJsonParser.ParseCoverageEligibilityResponseInsuranceItem(jsn : TJsonObject) : TFhirCoverageEligibilityResponseInsuranceItem;
begin
  result := TFhirCoverageEligibilityResponseInsuranceItem.Create;
  try
    ParseCoverageEligibilityResponseInsuranceItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityResponseInsuranceItemProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityResponseInsuranceItem);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('productOrService') then
        value.productOrService := ParseCodeableConcept(jsn.vObj['productOrService']);
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], value.modifierList, parseCodeableConcept);
    if jsn.has('provider') then
        value.provider := ParseReference(jsn.vObj['provider']);
    if jsn.has('excluded') or jsn.has('_excluded') then
        value.excludedElement := parseBoolean(jsn.node['excluded'], jsn.vObj['_excluded']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('network') then
        value.network := ParseCodeableConcept(jsn.vObj['network']);
    if jsn.has('unit') then
        value.unit_ := ParseCodeableConcept(jsn.vObj['unit']);
    if jsn.has('term') then
        value.term := ParseCodeableConcept(jsn.vObj['term']);
    if jsn.has('benefit') then
      iterateArray(jsn.vArr['benefit'], value.benefitList, parseCoverageEligibilityResponseInsuranceItemBenefit);
    if jsn.has('authorizationRequired') or jsn.has('_authorizationRequired') then
        value.authorizationRequiredElement := parseBoolean(jsn.node['authorizationRequired'], jsn.vObj['_authorizationRequired']);
    if jsn.has('authorizationSupporting') then
      iterateArray(jsn.vArr['authorizationSupporting'], value.authorizationSupportingList, parseCodeableConcept);
    if jsn.has('authorizationUrl') or jsn.has('_authorizationUrl') then
        value.authorizationUrlElement := parseUri(jsn.node['authorizationUrl'], jsn.vObj['_authorizationUrl']);
end;

procedure TFHIRJsonComposer.ComposeCoverageEligibilityResponseInsuranceItem(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityResponseInsuranceItem; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'productOrService', value.productOrService);
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    startArray(json, 'modifier', value.modifierList, false);
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.modifierList[i]);
    finishArray(json, value.modifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'provider', value.provider);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'excluded', value.excludedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'excluded', value.excludedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'network', value.network);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'unit', value.unit_);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'term', value.term);
  if (SummaryOption in [soFull, soData]) and (value.benefitList.Count > 0) then
  begin
    startArray(json, 'benefit', value.benefitList, false);
    for i := 0 to value.benefitList.Count - 1 do
      ComposeCoverageEligibilityResponseInsuranceItemBenefit(json, '', value.benefitList[i]);
    finishArray(json, value.benefitList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'authorizationRequired', value.authorizationRequiredElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'authorizationRequired', value.authorizationRequiredElement, false);
  if (SummaryOption in [soFull, soData]) and (value.authorizationSupportingList.Count > 0) then
  begin
    startArray(json, 'authorizationSupporting', value.authorizationSupportingList, false);
    for i := 0 to value.authorizationSupportingList.Count - 1 do
      ComposeCodeableConcept(json, '', value.authorizationSupportingList[i]);
    finishArray(json, value.authorizationSupportingList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'authorizationUrl', value.authorizationUrlElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'authorizationUrl', value.authorizationUrlElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityResponseInsuranceItemBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageEligibilityResponseInsuranceItemBenefit(jsn)); 
end;

function TFHIRJsonParser.ParseCoverageEligibilityResponseInsuranceItemBenefit(jsn : TJsonObject) : TFhirCoverageEligibilityResponseInsuranceItemBenefit;
begin
  result := TFhirCoverageEligibilityResponseInsuranceItemBenefit.Create;
  try
    ParseCoverageEligibilityResponseInsuranceItemBenefitProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityResponseInsuranceItemBenefitProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityResponseInsuranceItemBenefit);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('allowedUnsignedInt') or jsn.has('_allowedUnsignedInt') then
      value.allowed := parseUnsignedInt(jsn.node['allowedUnsignedInt'], jsn.vObj['_allowedUnsignedInt']);
    if jsn.has('allowedMoney') {a4} then
      value.allowed := ParseMoney(jsn.vObj['allowedMoney']);
    if jsn.has('allowedString') or jsn.has('_allowedString') then
      value.allowed := parseString(jsn.node['allowedString'], jsn.vObj['_allowedString']);
    if jsn.has('usedUnsignedInt') or jsn.has('_usedUnsignedInt') then
      value.used := parseUnsignedInt(jsn.node['usedUnsignedInt'], jsn.vObj['_usedUnsignedInt']);
    if jsn.has('usedMoney') {a4} then
      value.used := ParseMoney(jsn.vObj['usedMoney']);
    if jsn.has('usedString') or jsn.has('_usedString') then
      value.used := parseString(jsn.node['usedString'], jsn.vObj['_usedString']);
end;

procedure TFHIRJsonComposer.ComposeCoverageEligibilityResponseInsuranceItemBenefit(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityResponseInsuranceItemBenefit; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.allowed is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'allowedUnsignedInt', TFhirUnsignedInt(value.allowed), false);
    ComposeUnsignedIntProps(json, 'allowedUnsignedInt', TFhirUnsignedInt(value.allowed), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.allowed is TFhirMoney) then 
    ComposeMoney(json, 'allowedMoney', TFhirMoney(value.allowed)) 
  else if (SummaryOption in [soFull, soData]) and (value.allowed is TFhirString) then 
  begin
    ComposeStringValue(json, 'allowedString', TFhirString(value.allowed), false);
    ComposeStringProps(json, 'allowedString', TFhirString(value.allowed), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.used is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'usedUnsignedInt', TFhirUnsignedInt(value.used), false);
    ComposeUnsignedIntProps(json, 'usedUnsignedInt', TFhirUnsignedInt(value.used), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.used is TFhirMoney) then 
    ComposeMoney(json, 'usedMoney', TFhirMoney(value.used)) 
  else if (SummaryOption in [soFull, soData]) and (value.used is TFhirString) then 
  begin
    ComposeStringValue(json, 'usedString', TFhirString(value.used), false);
    ComposeStringProps(json, 'usedString', TFhirString(value.used), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityResponseError(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageEligibilityResponseError(jsn)); 
end;

function TFHIRJsonParser.ParseCoverageEligibilityResponseError(jsn : TJsonObject) : TFhirCoverageEligibilityResponseError;
begin
  result := TFhirCoverageEligibilityResponseError.Create;
  try
    ParseCoverageEligibilityResponseErrorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityResponseErrorProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityResponseError);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
end;

procedure TFHIRJsonComposer.ComposeCoverageEligibilityResponseError(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityResponseError; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'code', value.code);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageEligibilityResponse(jsn)); 
end;

function TFHIRJsonParser.ParseCoverageEligibilityResponse(jsn : TJsonObject) : TFhirCoverageEligibilityResponse;
begin
  result := TFhirCoverageEligibilityResponse.Create;
  try
    ParseCoverageEligibilityResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageEligibilityResponseProperties(jsn : TJsonObject; value : TFhirCoverageEligibilityResponse);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum);
    if jsn.has('purpose') or jsn.has('_purpose') then
      iterateEnumArray(jsn.vArr['purpose'], jsn.vArr['_purpose'], jsn.path+'/purpose', value.purposeList, parseEnum, CODES_TFhirEligibilityResponsePurposeEnum, SYSTEMS_TFhirEligibilityResponsePurposeEnum);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('servicedPeriod') {a4} then
      value.serviced := ParsePeriod(jsn.vObj['servicedPeriod']);
    if jsn.has('servicedDate') or jsn.has('_servicedDate') then
      value.serviced := parseDate(jsn.node['servicedDate'], jsn.vObj['_servicedDate']);
    if jsn.has('created') or jsn.has('_created') then
        value.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);
    if jsn.has('requestor') then
        value.requestor := ParseReference(jsn.vObj['requestor']);
    if jsn.has('request') then
        value.request := ParseReference(jsn.vObj['request']);
    if jsn.has('outcome') or jsn.has('_outcome') then
        value.outcomeElement := parseEnum(jsn.path+'/outcome', jsn.node['outcome'], jsn.vObj['_outcome'], CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum);
    if jsn.has('disposition') or jsn.has('_disposition') then
        value.dispositionElement := parseString(jsn.node['disposition'], jsn.vObj['_disposition']);
    if jsn.has('insurer') then
        value.insurer := ParseReference(jsn.vObj['insurer']);
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], value.insuranceList, parseCoverageEligibilityResponseInsurance);
    if jsn.has('preAuthRef') or jsn.has('_preAuthRef') then
        value.preAuthRefElement := parseString(jsn.node['preAuthRef'], jsn.vObj['_preAuthRef']);
    if jsn.has('form') then
        value.form := ParseCodeableConcept(jsn.vObj['form']);
    if jsn.has('error') then
      iterateArray(jsn.vArr['error'], value.errorList, parseCoverageEligibilityResponseError);
end;

procedure TFHIRJsonComposer.ComposeCoverageEligibilityResponse(json : TJSONWriter; name : string; value : TFhirCoverageEligibilityResponse; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum, false);
  if (value.purposeList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.purposeList.Count - 1 do
    begin
      val := val or (value.purposeList[i].hasPrimitiveValue);
      ext := ext or ((value.purposeList[i].id <> '') or (value.purposeList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'purpose', value.purposeList, true);
      for i := 0 to value.purposeList.Count - 1 do
        ComposeEnumValue(json, '', value.purposeList[i], CODES_TFhirEligibilityResponsePurposeEnum, true);
      finishArray(json, value.purposeList);
    end;
    if ext then
    begin
      startArray(json, '_purpose', value.purposeList, false);
      for i := 0 to value.purposeList.Count - 1 do
        ComposeEnumProps(json, '', value.purposeList[i], CODES_TFhirEligibilityResponsePurposeEnum, true);
      finishArray(json, value.purposeList);
    end;
  end;
  ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirPeriod) then 
    ComposePeriod(json, 'servicedPeriod', TFhirPeriod(value.serviced)) 
  else if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirDate) then 
  begin
    ComposeDateValue(json, 'servicedDate', TFhirDate(value.serviced), false);
    ComposeDateProps(json, 'servicedDate', TFhirDate(value.serviced), false);
  end;
  ComposeDateTimeValue(json, 'created', value.createdElement, false);
  ComposeDateTimeProps(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'requestor', value.requestor);
  ComposeReference(json, 'request', value.request);
  ComposeEnumValue(json, 'outcome', value.outcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'disposition', value.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'disposition', value.dispositionElement, false);
  ComposeReference(json, 'insurer', value.insurer);
  if (SummaryOption in [soFull, soData]) and (value.insuranceList.Count > 0) then
  begin
    startArray(json, 'insurance', value.insuranceList, false);
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeCoverageEligibilityResponseInsurance(json, '', value.insuranceList[i]);
    finishArray(json, value.insuranceList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'preAuthRef', value.preAuthRefElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'preAuthRef', value.preAuthRefElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'form', value.form);
  if (SummaryOption in [soFull, soData]) and (value.errorList.Count > 0) then
  begin
    startArray(json, 'error', value.errorList, false);
    for i := 0 to value.errorList.Count - 1 do
      ComposeCoverageEligibilityResponseError(json, '', value.errorList[i]);
    finishArray(json, value.errorList);
  end;
end;

{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
procedure TFHIRJsonParser.ParseDetectedIssueEvidence(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDetectedIssueEvidence(jsn)); 
end;

function TFHIRJsonParser.ParseDetectedIssueEvidence(jsn : TJsonObject) : TFhirDetectedIssueEvidence;
begin
  result := TFhirDetectedIssueEvidence.Create;
  try
    ParseDetectedIssueEvidenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDetectedIssueEvidenceProperties(jsn : TJsonObject; value : TFhirDetectedIssueEvidence);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCodeableConcept);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], value.detailList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeDetectedIssueEvidence(json : TJSONWriter; name : string; value : TFhirDetectedIssueEvidence; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.detailList.Count > 0) then
  begin
    startArray(json, 'detail', value.detailList, false);
    for i := 0 to value.detailList.Count - 1 do
      ComposeReference(json, '', value.detailList[i]);
    finishArray(json, value.detailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDetectedIssueMitigation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDetectedIssueMitigation(jsn)); 
end;

function TFHIRJsonParser.ParseDetectedIssueMitigation(jsn : TJsonObject) : TFhirDetectedIssueMitigation;
begin
  result := TFhirDetectedIssueMitigation.Create;
  try
    ParseDetectedIssueMitigationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDetectedIssueMitigationProperties(jsn : TJsonObject; value : TFhirDetectedIssueMitigation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('action') then
        value.action := ParseCodeableConcept(jsn.vObj['action']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('author') then
        value.author := ParseReference(jsn.vObj['author']);
end;

procedure TFHIRJsonComposer.ComposeDetectedIssueMitigation(json : TJSONWriter; name : string; value : TFhirDetectedIssueMitigation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'action', value.action);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'author', value.author);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDetectedIssue(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDetectedIssue(jsn)); 
end;

function TFHIRJsonParser.ParseDetectedIssue(jsn : TJsonObject) : TFhirDetectedIssue;
begin
  result := TFhirDetectedIssue.Create;
  try
    ParseDetectedIssueProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDetectedIssueProperties(jsn : TJsonObject; value : TFhirDetectedIssue);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('severity') or jsn.has('_severity') then
        value.severityElement := parseEnum(jsn.path+'/severity', jsn.node['severity'], jsn.vObj['_severity'], CODES_TFhirDetectedIssueSeverityEnum, SYSTEMS_TFhirDetectedIssueSeverityEnum);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('identifiedPeriod') {a4} then
      value.identified := ParsePeriod(jsn.vObj['identifiedPeriod']);
    if jsn.has('identifiedDateTime') or jsn.has('_identifiedDateTime') then
      value.identified := parseDateTime(jsn.node['identifiedDateTime'], jsn.vObj['_identifiedDateTime']);
    if jsn.has('author') then
        value.author := ParseReference(jsn.vObj['author']);
    if jsn.has('implicated') then
      iterateArray(jsn.vArr['implicated'], value.implicatedList, parseReference);
    if jsn.has('evidence') then
      iterateArray(jsn.vArr['evidence'], value.evidenceList, parseDetectedIssueEvidence);
    if jsn.has('detail') or jsn.has('_detail') then
        value.detailElement := parseString(jsn.node['detail'], jsn.vObj['_detail']);
    if jsn.has('reference') or jsn.has('_reference') then
        value.referenceElement := parseUri(jsn.node['reference'], jsn.vObj['_reference']);
    if jsn.has('mitigation') then
      iterateArray(jsn.vArr['mitigation'], value.mitigationList, parseDetectedIssueMitigation);
end;

procedure TFHIRJsonComposer.ComposeDetectedIssue(json : TJSONWriter; name : string; value : TFhirDetectedIssue; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirObservationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'severity', value.severityElement, CODES_TFhirDetectedIssueSeverityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identified is TFhirPeriod) then 
    ComposePeriod(json, 'identifiedPeriod', TFhirPeriod(value.identified)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.identified is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'identifiedDateTime', TFhirDateTime(value.identified), false);
    ComposeDateTimeProps(json, 'identifiedDateTime', TFhirDateTime(value.identified), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'author', value.author);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.implicatedList.Count > 0) then
  begin
    startArray(json, 'implicated', value.implicatedList, false);
    for i := 0 to value.implicatedList.Count - 1 do
      ComposeReference(json, '', value.implicatedList[i]);
    finishArray(json, value.implicatedList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.evidenceList.Count > 0) then
  begin
    startArray(json, 'evidence', value.evidenceList, false);
    for i := 0 to value.evidenceList.Count - 1 do
      ComposeDetectedIssueEvidence(json, '', value.evidenceList[i]);
    finishArray(json, value.evidenceList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'detail', value.detailElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'detail', value.detailElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'reference', value.referenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'reference', value.referenceElement, false);
  if (SummaryOption in [soFull, soData]) and (value.mitigationList.Count > 0) then
  begin
    startArray(json, 'mitigation', value.mitigationList, false);
    for i := 0 to value.mitigationList.Count - 1 do
      ComposeDetectedIssueMitigation(json, '', value.mitigationList[i]);
    finishArray(json, value.mitigationList);
  end;
end;

{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
procedure TFHIRJsonParser.ParseDeviceUdiCarrier(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceUdiCarrier(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceUdiCarrier(jsn : TJsonObject) : TFhirDeviceUdiCarrier;
begin
  result := TFhirDeviceUdiCarrier.Create;
  try
    ParseDeviceUdiCarrierProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceUdiCarrierProperties(jsn : TJsonObject; value : TFhirDeviceUdiCarrier);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('deviceIdentifier') or jsn.has('_deviceIdentifier') then
        value.deviceIdentifierElement := parseString(jsn.node['deviceIdentifier'], jsn.vObj['_deviceIdentifier']);
    if jsn.has('issuer') or jsn.has('_issuer') then
        value.issuerElement := parseUri(jsn.node['issuer'], jsn.vObj['_issuer']);
    if jsn.has('jurisdiction') or jsn.has('_jurisdiction') then
        value.jurisdictionElement := parseUri(jsn.node['jurisdiction'], jsn.vObj['_jurisdiction']);
    if jsn.has('carrierAIDC') or jsn.has('_carrierAIDC') then
        value.carrierAIDCElement := parseBase64Binary(jsn.node['carrierAIDC'], jsn.vObj['_carrierAIDC']);
    if jsn.has('carrierHRF') or jsn.has('_carrierHRF') then
        value.carrierHRFElement := parseString(jsn.node['carrierHRF'], jsn.vObj['_carrierHRF']);
    if jsn.has('entryType') or jsn.has('_entryType') then
        value.entryTypeElement := parseEnum(jsn.path+'/entryType', jsn.node['entryType'], jsn.vObj['_entryType'], CODES_TFhirUDIEntryTypeEnum, SYSTEMS_TFhirUDIEntryTypeEnum);
end;

procedure TFHIRJsonComposer.ComposeDeviceUdiCarrier(json : TJSONWriter; name : string; value : TFhirDeviceUdiCarrier; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'deviceIdentifier', value.deviceIdentifierElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'deviceIdentifier', value.deviceIdentifierElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'issuer', value.issuerElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'issuer', value.issuerElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'jurisdiction', value.jurisdictionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'jurisdiction', value.jurisdictionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryValue(json, 'carrierAIDC', value.carrierAIDCElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryProps(json, 'carrierAIDC', value.carrierAIDCElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'carrierHRF', value.carrierHRFElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'carrierHRF', value.carrierHRFElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'entryType', value.entryTypeElement, CODES_TFhirUDIEntryTypeEnum, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDeviceDeviceName(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceDeviceName(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceDeviceName(jsn : TJsonObject) : TFhirDeviceDeviceName;
begin
  result := TFhirDeviceDeviceName.Create;
  try
    ParseDeviceDeviceNameProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceDeviceNameProperties(jsn : TJsonObject; value : TFhirDeviceDeviceName);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirDeviceNameTypeEnum, SYSTEMS_TFhirDeviceNameTypeEnum);
end;

procedure TFHIRJsonComposer.ComposeDeviceDeviceName(json : TJSONWriter; name : string; value : TFhirDeviceDeviceName; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirDeviceNameTypeEnum, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDeviceSpecialization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceSpecialization(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceSpecialization(jsn : TJsonObject) : TFhirDeviceSpecialization;
begin
  result := TFhirDeviceSpecialization.Create;
  try
    ParseDeviceSpecializationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceSpecializationProperties(jsn : TJsonObject; value : TFhirDeviceSpecialization);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('systemType') then
        value.systemType := ParseCodeableConcept(jsn.vObj['systemType']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
end;

procedure TFHIRJsonComposer.ComposeDeviceSpecialization(json : TJSONWriter; name : string; value : TFhirDeviceSpecialization; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'systemType', value.systemType);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDeviceVersion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceVersion(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceVersion(jsn : TJsonObject) : TFhirDeviceVersion;
begin
  result := TFhirDeviceVersion.Create;
  try
    ParseDeviceVersionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceVersionProperties(jsn : TJsonObject; value : TFhirDeviceVersion);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('component') then
        value.component := ParseIdentifier(jsn.vObj['component']);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
end;

procedure TFHIRJsonComposer.ComposeDeviceVersion(json : TJSONWriter; name : string; value : TFhirDeviceVersion; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'component', value.component);
  ComposeStringValue(json, 'value', value.valueElement, false);
  ComposeStringProps(json, 'value', value.valueElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDeviceProperty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceProperty(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceProperty(jsn : TJsonObject) : TFhirDeviceProperty;
begin
  result := TFhirDeviceProperty.Create;
  try
    ParseDevicePropertyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDevicePropertyProperties(jsn : TJsonObject; value : TFhirDeviceProperty);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('valueQuantity') then
      iterateArray(jsn.vArr['valueQuantity'], value.valueQuantityList, parseQuantity);
    if jsn.has('valueCode') then
      iterateArray(jsn.vArr['valueCode'], value.valueCodeList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeDeviceProperty(json : TJSONWriter; name : string; value : TFhirDeviceProperty; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.valueQuantityList.Count > 0) then
  begin
    startArray(json, 'valueQuantity', value.valueQuantityList, false);
    for i := 0 to value.valueQuantityList.Count - 1 do
      ComposeQuantity(json, '', value.valueQuantityList[i]);
    finishArray(json, value.valueQuantityList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.valueCodeList.Count > 0) then
  begin
    startArray(json, 'valueCode', value.valueCodeList, false);
    for i := 0 to value.valueCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.valueCodeList[i]);
    finishArray(json, value.valueCodeList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDevice(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDevice(jsn)); 
end;

function TFHIRJsonParser.ParseDevice(jsn : TJsonObject) : TFhirDevice;
begin
  result := TFhirDevice.Create;
  try
    ParseDeviceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceProperties(jsn : TJsonObject; value : TFhirDevice);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('definition') then
        value.definition := ParseReference(jsn.vObj['definition']);
    if jsn.has('udiCarrier') then
      iterateArray(jsn.vArr['udiCarrier'], value.udiCarrierList, parseDeviceUdiCarrier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFHIRDeviceStatusEnum, SYSTEMS_TFhirFHIRDeviceStatusEnum);
    if jsn.has('statusReason') then
      iterateArray(jsn.vArr['statusReason'], value.statusReasonList, parseCodeableConcept);
    if jsn.has('distinctIdentifier') or jsn.has('_distinctIdentifier') then
        value.distinctIdentifierElement := parseString(jsn.node['distinctIdentifier'], jsn.vObj['_distinctIdentifier']);
    if jsn.has('manufacturer') or jsn.has('_manufacturer') then
        value.manufacturerElement := parseString(jsn.node['manufacturer'], jsn.vObj['_manufacturer']);
    if jsn.has('manufactureDate') or jsn.has('_manufactureDate') then
        value.manufactureDateElement := parseDateTime(jsn.node['manufactureDate'], jsn.vObj['_manufactureDate']);
    if jsn.has('expirationDate') or jsn.has('_expirationDate') then
        value.expirationDateElement := parseDateTime(jsn.node['expirationDate'], jsn.vObj['_expirationDate']);
    if jsn.has('lotNumber') or jsn.has('_lotNumber') then
        value.lotNumberElement := parseString(jsn.node['lotNumber'], jsn.vObj['_lotNumber']);
    if jsn.has('serialNumber') or jsn.has('_serialNumber') then
        value.serialNumberElement := parseString(jsn.node['serialNumber'], jsn.vObj['_serialNumber']);
    if jsn.has('deviceName') then
      iterateArray(jsn.vArr['deviceName'], value.deviceNameList, parseDeviceDeviceName);
    if jsn.has('modelNumber') or jsn.has('_modelNumber') then
        value.modelNumberElement := parseString(jsn.node['modelNumber'], jsn.vObj['_modelNumber']);
    if jsn.has('partNumber') or jsn.has('_partNumber') then
        value.partNumberElement := parseString(jsn.node['partNumber'], jsn.vObj['_partNumber']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('specialization') then
      iterateArray(jsn.vArr['specialization'], value.specializationList, parseDeviceSpecialization);
    if jsn.has('version') then
      iterateArray(jsn.vArr['version'], value.versionList, parseDeviceVersion);
    if jsn.has('property') then
      iterateArray(jsn.vArr['property'], value.property_List, parseDeviceProperty);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('owner') then
        value.owner := ParseReference(jsn.vObj['owner']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactPoint);
    if jsn.has('location') then
        value.location := ParseReference(jsn.vObj['location']);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('safety') then
      iterateArray(jsn.vArr['safety'], value.safetyList, parseCodeableConcept);
    if jsn.has('parent') then
        value.parent := ParseReference(jsn.vObj['parent']);
end;

procedure TFHIRJsonComposer.ComposeDevice(json : TJSONWriter; name : string; value : TFhirDevice; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'definition', value.definition);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.udiCarrierList.Count > 0) then
  begin
    startArray(json, 'udiCarrier', value.udiCarrierList, false);
    for i := 0 to value.udiCarrierList.Count - 1 do
      ComposeDeviceUdiCarrier(json, '', value.udiCarrierList[i]);
    finishArray(json, value.udiCarrierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirFHIRDeviceStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.statusReasonList.Count > 0) then
  begin
    startArray(json, 'statusReason', value.statusReasonList, false);
    for i := 0 to value.statusReasonList.Count - 1 do
      ComposeCodeableConcept(json, '', value.statusReasonList[i]);
    finishArray(json, value.statusReasonList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'distinctIdentifier', value.distinctIdentifierElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'distinctIdentifier', value.distinctIdentifierElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'manufacturer', value.manufacturerElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'manufacturer', value.manufacturerElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'manufactureDate', value.manufactureDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'manufactureDate', value.manufactureDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'expirationDate', value.expirationDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'expirationDate', value.expirationDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'lotNumber', value.lotNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'lotNumber', value.lotNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'serialNumber', value.serialNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'serialNumber', value.serialNumberElement, false);
  if (SummaryOption in [soFull, soData]) and (value.deviceNameList.Count > 0) then
  begin
    startArray(json, 'deviceName', value.deviceNameList, false);
    for i := 0 to value.deviceNameList.Count - 1 do
      ComposeDeviceDeviceName(json, '', value.deviceNameList[i]);
    finishArray(json, value.deviceNameList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'modelNumber', value.modelNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'modelNumber', value.modelNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'partNumber', value.partNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'partNumber', value.partNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.specializationList.Count > 0) then
  begin
    startArray(json, 'specialization', value.specializationList, false);
    for i := 0 to value.specializationList.Count - 1 do
      ComposeDeviceSpecialization(json, '', value.specializationList[i]);
    finishArray(json, value.specializationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.versionList.Count > 0) then
  begin
    startArray(json, 'version', value.versionList, false);
    for i := 0 to value.versionList.Count - 1 do
      ComposeDeviceVersion(json, '', value.versionList[i]);
    finishArray(json, value.versionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.property_List.Count > 0) then
  begin
    startArray(json, 'property', value.property_List, false);
    for i := 0 to value.property_List.Count - 1 do
      ComposeDeviceProperty(json, '', value.property_List[i]);
    finishArray(json, value.property_List);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'owner', value.owner);
  if (SummaryOption in [soFull, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactPoint(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'location', value.location);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.safetyList.Count > 0) then
  begin
    startArray(json, 'safety', value.safetyList, false);
    for i := 0 to value.safetyList.Count - 1 do
      ComposeCodeableConcept(json, '', value.safetyList[i]);
    finishArray(json, value.safetyList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'parent', value.parent);
end;

{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
procedure TFHIRJsonParser.ParseDeviceDefinitionUdiDeviceIdentifier(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceDefinitionUdiDeviceIdentifier(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceDefinitionUdiDeviceIdentifier(jsn : TJsonObject) : TFhirDeviceDefinitionUdiDeviceIdentifier;
begin
  result := TFhirDeviceDefinitionUdiDeviceIdentifier.Create;
  try
    ParseDeviceDefinitionUdiDeviceIdentifierProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceDefinitionUdiDeviceIdentifierProperties(jsn : TJsonObject; value : TFhirDeviceDefinitionUdiDeviceIdentifier);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('deviceIdentifier') or jsn.has('_deviceIdentifier') then
        value.deviceIdentifierElement := parseString(jsn.node['deviceIdentifier'], jsn.vObj['_deviceIdentifier']);
    if jsn.has('issuer') or jsn.has('_issuer') then
        value.issuerElement := parseUri(jsn.node['issuer'], jsn.vObj['_issuer']);
    if jsn.has('jurisdiction') or jsn.has('_jurisdiction') then
        value.jurisdictionElement := parseUri(jsn.node['jurisdiction'], jsn.vObj['_jurisdiction']);
end;

procedure TFHIRJsonComposer.ComposeDeviceDefinitionUdiDeviceIdentifier(json : TJSONWriter; name : string; value : TFhirDeviceDefinitionUdiDeviceIdentifier; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'deviceIdentifier', value.deviceIdentifierElement, false);
  ComposeStringProps(json, 'deviceIdentifier', value.deviceIdentifierElement, false);
  ComposeUriValue(json, 'issuer', value.issuerElement, false);
  ComposeUriProps(json, 'issuer', value.issuerElement, false);
  ComposeUriValue(json, 'jurisdiction', value.jurisdictionElement, false);
  ComposeUriProps(json, 'jurisdiction', value.jurisdictionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDeviceDefinitionDeviceName(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceDefinitionDeviceName(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceDefinitionDeviceName(jsn : TJsonObject) : TFhirDeviceDefinitionDeviceName;
begin
  result := TFhirDeviceDefinitionDeviceName.Create;
  try
    ParseDeviceDefinitionDeviceNameProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceDefinitionDeviceNameProperties(jsn : TJsonObject; value : TFhirDeviceDefinitionDeviceName);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirDeviceNameTypeEnum, SYSTEMS_TFhirDeviceNameTypeEnum);
end;

procedure TFHIRJsonComposer.ComposeDeviceDefinitionDeviceName(json : TJSONWriter; name : string; value : TFhirDeviceDefinitionDeviceName; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirDeviceNameTypeEnum, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDeviceDefinitionSpecialization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceDefinitionSpecialization(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceDefinitionSpecialization(jsn : TJsonObject) : TFhirDeviceDefinitionSpecialization;
begin
  result := TFhirDeviceDefinitionSpecialization.Create;
  try
    ParseDeviceDefinitionSpecializationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceDefinitionSpecializationProperties(jsn : TJsonObject; value : TFhirDeviceDefinitionSpecialization);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('systemType') or jsn.has('_systemType') then
        value.systemTypeElement := parseString(jsn.node['systemType'], jsn.vObj['_systemType']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
end;

procedure TFHIRJsonComposer.ComposeDeviceDefinitionSpecialization(json : TJSONWriter; name : string; value : TFhirDeviceDefinitionSpecialization; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'systemType', value.systemTypeElement, false);
  ComposeStringProps(json, 'systemType', value.systemTypeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDeviceDefinitionCapability(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceDefinitionCapability(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceDefinitionCapability(jsn : TJsonObject) : TFhirDeviceDefinitionCapability;
begin
  result := TFhirDeviceDefinitionCapability.Create;
  try
    ParseDeviceDefinitionCapabilityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceDefinitionCapabilityProperties(jsn : TJsonObject; value : TFhirDeviceDefinitionCapability);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('description') then
      iterateArray(jsn.vArr['description'], value.descriptionList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeDeviceDefinitionCapability(json : TJSONWriter; name : string; value : TFhirDeviceDefinitionCapability; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.descriptionList.Count > 0) then
  begin
    startArray(json, 'description', value.descriptionList, false);
    for i := 0 to value.descriptionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.descriptionList[i]);
    finishArray(json, value.descriptionList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDeviceDefinitionProperty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceDefinitionProperty(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceDefinitionProperty(jsn : TJsonObject) : TFhirDeviceDefinitionProperty;
begin
  result := TFhirDeviceDefinitionProperty.Create;
  try
    ParseDeviceDefinitionPropertyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceDefinitionPropertyProperties(jsn : TJsonObject; value : TFhirDeviceDefinitionProperty);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('valueQuantity') then
      iterateArray(jsn.vArr['valueQuantity'], value.valueQuantityList, parseQuantity);
    if jsn.has('valueCode') then
      iterateArray(jsn.vArr['valueCode'], value.valueCodeList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeDeviceDefinitionProperty(json : TJSONWriter; name : string; value : TFhirDeviceDefinitionProperty; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.valueQuantityList.Count > 0) then
  begin
    startArray(json, 'valueQuantity', value.valueQuantityList, false);
    for i := 0 to value.valueQuantityList.Count - 1 do
      ComposeQuantity(json, '', value.valueQuantityList[i]);
    finishArray(json, value.valueQuantityList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.valueCodeList.Count > 0) then
  begin
    startArray(json, 'valueCode', value.valueCodeList, false);
    for i := 0 to value.valueCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.valueCodeList[i]);
    finishArray(json, value.valueCodeList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDeviceDefinitionMaterial(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceDefinitionMaterial(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceDefinitionMaterial(jsn : TJsonObject) : TFhirDeviceDefinitionMaterial;
begin
  result := TFhirDeviceDefinitionMaterial.Create;
  try
    ParseDeviceDefinitionMaterialProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceDefinitionMaterialProperties(jsn : TJsonObject; value : TFhirDeviceDefinitionMaterial);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('substance') then
        value.substance := ParseCodeableConcept(jsn.vObj['substance']);
    if jsn.has('alternate') or jsn.has('_alternate') then
        value.alternateElement := parseBoolean(jsn.node['alternate'], jsn.vObj['_alternate']);
    if jsn.has('allergenicIndicator') or jsn.has('_allergenicIndicator') then
        value.allergenicIndicatorElement := parseBoolean(jsn.node['allergenicIndicator'], jsn.vObj['_allergenicIndicator']);
end;

procedure TFHIRJsonComposer.ComposeDeviceDefinitionMaterial(json : TJSONWriter; name : string; value : TFhirDeviceDefinitionMaterial; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'substance', value.substance);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'alternate', value.alternateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'alternate', value.alternateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'allergenicIndicator', value.allergenicIndicatorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'allergenicIndicator', value.allergenicIndicatorElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDeviceDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceDefinition(jsn : TJsonObject) : TFhirDeviceDefinition;
begin
  result := TFhirDeviceDefinition.Create;
  try
    ParseDeviceDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceDefinitionProperties(jsn : TJsonObject; value : TFhirDeviceDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('udiDeviceIdentifier') then
      iterateArray(jsn.vArr['udiDeviceIdentifier'], value.udiDeviceIdentifierList, parseDeviceDefinitionUdiDeviceIdentifier);
    if jsn.has('manufacturerReference') {a3} then
      value.manufacturer := ParseReference(jsn.vObj['manufacturerReference']);
    if jsn.has('manufacturerString') or jsn.has('_manufacturerString') then
      value.manufacturer := parseString(jsn.node['manufacturerString'], jsn.vObj['_manufacturerString']);
    if jsn.has('deviceName') then
      iterateArray(jsn.vArr['deviceName'], value.deviceNameList, parseDeviceDefinitionDeviceName);
    if jsn.has('modelNumber') or jsn.has('_modelNumber') then
        value.modelNumberElement := parseString(jsn.node['modelNumber'], jsn.vObj['_modelNumber']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('specialization') then
      iterateArray(jsn.vArr['specialization'], value.specializationList, parseDeviceDefinitionSpecialization);
      if jsn.has('version') or jsn.has('_version') then
      iteratePrimitiveArray(jsn.vArr['version'], jsn.vArr['_version'], value.versionList, parseString);
    if jsn.has('safety') then
      iterateArray(jsn.vArr['safety'], value.safetyList, parseCodeableConcept);
    if jsn.has('shelfLifeStorage') then
      iterateArray(jsn.vArr['shelfLifeStorage'], value.shelfLifeStorageList, parseProductShelfLife);
    if jsn.has('physicalCharacteristics') then
        value.physicalCharacteristics := ParseProdCharacteristic(jsn.vObj['physicalCharacteristics']);
    if jsn.has('languageCode') then
      iterateArray(jsn.vArr['languageCode'], value.languageCodeList, parseCodeableConcept);
    if jsn.has('capability') then
      iterateArray(jsn.vArr['capability'], value.capabilityList, parseDeviceDefinitionCapability);
    if jsn.has('property') then
      iterateArray(jsn.vArr['property'], value.property_List, parseDeviceDefinitionProperty);
    if jsn.has('owner') then
        value.owner := ParseReference(jsn.vObj['owner']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactPoint);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('onlineInformation') or jsn.has('_onlineInformation') then
        value.onlineInformationElement := parseUri(jsn.node['onlineInformation'], jsn.vObj['_onlineInformation']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('parentDevice') then
        value.parentDevice := ParseReference(jsn.vObj['parentDevice']);
    if jsn.has('material') then
      iterateArray(jsn.vArr['material'], value.materialList, parseDeviceDefinitionMaterial);
end;

procedure TFHIRJsonComposer.ComposeDeviceDefinition(json : TJSONWriter; name : string; value : TFhirDeviceDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.udiDeviceIdentifierList.Count > 0) then
  begin
    startArray(json, 'udiDeviceIdentifier', value.udiDeviceIdentifierList, false);
    for i := 0 to value.udiDeviceIdentifierList.Count - 1 do
      ComposeDeviceDefinitionUdiDeviceIdentifier(json, '', value.udiDeviceIdentifierList[i]);
    finishArray(json, value.udiDeviceIdentifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.manufacturer is TFhirReference) then
    ComposeReference(json, 'manufacturerReference', TFhirReference(value.manufacturer))
  else if (SummaryOption in [soFull, soData]) and (value.manufacturer is TFhirString) then 
  begin
    ComposeStringValue(json, 'manufacturerString', TFhirString(value.manufacturer), false);
    ComposeStringProps(json, 'manufacturerString', TFhirString(value.manufacturer), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.deviceNameList.Count > 0) then
  begin
    startArray(json, 'deviceName', value.deviceNameList, false);
    for i := 0 to value.deviceNameList.Count - 1 do
      ComposeDeviceDefinitionDeviceName(json, '', value.deviceNameList[i]);
    finishArray(json, value.deviceNameList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'modelNumber', value.modelNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'modelNumber', value.modelNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.specializationList.Count > 0) then
  begin
    startArray(json, 'specialization', value.specializationList, false);
    for i := 0 to value.specializationList.Count - 1 do
      ComposeDeviceDefinitionSpecialization(json, '', value.specializationList[i]);
    finishArray(json, value.specializationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.versionList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.versionList.Count - 1 do
    begin
      ext := ext or ((value.versionList[i].id <> '') or (value.versionList[i].hasExtensionList) {no-comments or (value.versionList[i].hasComments)});
      val := val or (value.versionList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'version', value.versionList, true);
      for i := 0 to value.versionList.Count - 1 do
        ComposeStringValue(json, '', value.versionList[i], true);
      finishArray(json, value.versionList);
    end;
    if ext then
    begin
      startArray(json, '_version', value.versionList, false);
      for i := 0 to value.versionList.Count - 1 do
        ComposeStringProps(json, '', value.versionList[i], true);
      finishArray(json, value.versionList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.safetyList.Count > 0) then
  begin
    startArray(json, 'safety', value.safetyList, false);
    for i := 0 to value.safetyList.Count - 1 do
      ComposeCodeableConcept(json, '', value.safetyList[i]);
    finishArray(json, value.safetyList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.shelfLifeStorageList.Count > 0) then
  begin
    startArray(json, 'shelfLifeStorage', value.shelfLifeStorageList, false);
    for i := 0 to value.shelfLifeStorageList.Count - 1 do
      ComposeProductShelfLife(json, '', value.shelfLifeStorageList[i]);
    finishArray(json, value.shelfLifeStorageList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeProdCharacteristic(json, 'physicalCharacteristics', value.physicalCharacteristics);
  if (SummaryOption in [soFull, soData]) and (value.languageCodeList.Count > 0) then
  begin
    startArray(json, 'languageCode', value.languageCodeList, false);
    for i := 0 to value.languageCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.languageCodeList[i]);
    finishArray(json, value.languageCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.capabilityList.Count > 0) then
  begin
    startArray(json, 'capability', value.capabilityList, false);
    for i := 0 to value.capabilityList.Count - 1 do
      ComposeDeviceDefinitionCapability(json, '', value.capabilityList[i]);
    finishArray(json, value.capabilityList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.property_List.Count > 0) then
  begin
    startArray(json, 'property', value.property_List, false);
    for i := 0 to value.property_List.Count - 1 do
      ComposeDeviceDefinitionProperty(json, '', value.property_List[i]);
    finishArray(json, value.property_List);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'owner', value.owner);
  if (SummaryOption in [soFull, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactPoint(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'onlineInformation', value.onlineInformationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'onlineInformation', value.onlineInformationElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'parentDevice', value.parentDevice);
  if (SummaryOption in [soFull, soData]) and (value.materialList.Count > 0) then
  begin
    startArray(json, 'material', value.materialList, false);
    for i := 0 to value.materialList.Count - 1 do
      ComposeDeviceDefinitionMaterial(json, '', value.materialList[i]);
    finishArray(json, value.materialList);
  end;
end;

{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
procedure TFHIRJsonParser.ParseDeviceMetricCalibration(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceMetricCalibration(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceMetricCalibration(jsn : TJsonObject) : TFhirDeviceMetricCalibration;
begin
  result := TFhirDeviceMetricCalibration.Create;
  try
    ParseDeviceMetricCalibrationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceMetricCalibrationProperties(jsn : TJsonObject; value : TFhirDeviceMetricCalibration);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirDeviceMetricCalibrationTypeEnum, SYSTEMS_TFhirDeviceMetricCalibrationTypeEnum);
    if jsn.has('state') or jsn.has('_state') then
        value.stateElement := parseEnum(jsn.path+'/state', jsn.node['state'], jsn.vObj['_state'], CODES_TFhirDeviceMetricCalibrationStateEnum, SYSTEMS_TFhirDeviceMetricCalibrationStateEnum);
    if jsn.has('time') or jsn.has('_time') then
        value.timeElement := parseInstant(jsn.node['time'], jsn.vObj['_time']);
end;

procedure TFHIRJsonComposer.ComposeDeviceMetricCalibration(json : TJSONWriter; name : string; value : TFhirDeviceMetricCalibration; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirDeviceMetricCalibrationTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'state', value.stateElement, CODES_TFhirDeviceMetricCalibrationStateEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'time', value.timeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'time', value.timeElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDeviceMetric(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceMetric(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceMetric(jsn : TJsonObject) : TFhirDeviceMetric;
begin
  result := TFhirDeviceMetric.Create;
  try
    ParseDeviceMetricProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceMetricProperties(jsn : TJsonObject; value : TFhirDeviceMetric);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('unit') then
        value.unit_ := ParseCodeableConcept(jsn.vObj['unit']);
    if jsn.has('source') then
        value.source := ParseReference(jsn.vObj['source']);
    if jsn.has('parent') then
        value.parent := ParseReference(jsn.vObj['parent']);
    if jsn.has('operationalStatus') or jsn.has('_operationalStatus') then
        value.operationalStatusElement := parseEnum(jsn.path+'/operationalStatus', jsn.node['operationalStatus'], jsn.vObj['_operationalStatus'], CODES_TFhirDeviceMetricOperationalStatusEnum, SYSTEMS_TFhirDeviceMetricOperationalStatusEnum);
    if jsn.has('color') or jsn.has('_color') then
        value.colorElement := parseEnum(jsn.path+'/color', jsn.node['color'], jsn.vObj['_color'], CODES_TFhirDeviceMetricColorEnum, SYSTEMS_TFhirDeviceMetricColorEnum);
    if jsn.has('category') or jsn.has('_category') then
        value.categoryElement := parseEnum(jsn.path+'/category', jsn.node['category'], jsn.vObj['_category'], CODES_TFhirDeviceMetricCategoryEnum, SYSTEMS_TFhirDeviceMetricCategoryEnum);
    if jsn.has('measurementPeriod') then
        value.measurementPeriod := ParseTiming(jsn.vObj['measurementPeriod']);
    if jsn.has('calibration') then
      iterateArray(jsn.vArr['calibration'], value.calibrationList, parseDeviceMetricCalibration);
end;

procedure TFHIRJsonComposer.ComposeDeviceMetric(json : TJSONWriter; name : string; value : TFhirDeviceMetric; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'unit', value.unit_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'source', value.source);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'parent', value.parent);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'operationalStatus', value.operationalStatusElement, CODES_TFhirDeviceMetricOperationalStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'color', value.colorElement, CODES_TFhirDeviceMetricColorEnum, false);
  ComposeEnumValue(json, 'category', value.categoryElement, CODES_TFhirDeviceMetricCategoryEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeTiming(json, 'measurementPeriod', value.measurementPeriod);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.calibrationList.Count > 0) then
  begin
    startArray(json, 'calibration', value.calibrationList, false);
    for i := 0 to value.calibrationList.Count - 1 do
      ComposeDeviceMetricCalibration(json, '', value.calibrationList[i]);
    finishArray(json, value.calibrationList);
  end;
end;

{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
procedure TFHIRJsonParser.ParseDeviceRequestParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceRequestParameter(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceRequestParameter(jsn : TJsonObject) : TFhirDeviceRequestParameter;
begin
  result := TFhirDeviceRequestParameter.Create;
  try
    ParseDeviceRequestParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceRequestParameterProperties(jsn : TJsonObject; value : TFhirDeviceRequestParameter);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      value.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
end;

procedure TFHIRJsonComposer.ComposeDeviceRequestParameter(json : TJSONWriter; name : string; value : TFhirDeviceRequestParameter; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDeviceRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceRequest(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceRequest(jsn : TJsonObject) : TFhirDeviceRequest;
begin
  result := TFhirDeviceRequest.Create;
  try
    ParseDeviceRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceRequestProperties(jsn : TJsonObject; value : TFhirDeviceRequest);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
      if jsn.has('instantiatesCanonical') or jsn.has('_instantiatesCanonical') then
      iteratePrimitiveArray(jsn.vArr['instantiatesCanonical'], jsn.vArr['_instantiatesCanonical'], value.instantiatesCanonicalList, parseCanonical);
      if jsn.has('instantiatesUri') or jsn.has('_instantiatesUri') then
      iteratePrimitiveArray(jsn.vArr['instantiatesUri'], jsn.vArr['_instantiatesUri'], value.instantiatesUriList, parseUri);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('priorRequest') then
      iterateArray(jsn.vArr['priorRequest'], value.priorRequestList, parseReference);
    if jsn.has('groupIdentifier') then
        value.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('intent') or jsn.has('_intent') then
        value.intentElement := parseEnum(jsn.path+'/intent', jsn.node['intent'], jsn.vObj['_intent'], CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum);
    if jsn.has('priority') or jsn.has('_priority') then
        value.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('codeReference') {a3} then
      value.code := ParseReference(jsn.vObj['codeReference']);
    if jsn.has('codeCodeableConcept') {a4} then
      value.code := ParseCodeableConcept(jsn.vObj['codeCodeableConcept']);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], value.parameterList, parseDeviceRequestParameter);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('occurrencePeriod') {a4} then
      value.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      value.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      value.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        value.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);
    if jsn.has('requester') then
        value.requester := ParseReference(jsn.vObj['requester']);
    if jsn.has('performerType') then
        value.performerType := ParseCodeableConcept(jsn.vObj['performerType']);
    if jsn.has('performer') then
        value.performer := ParseReference(jsn.vObj['performer']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], value.insuranceList, parseReference);
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], value.supportingInfoList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('relevantHistory') then
      iterateArray(jsn.vArr['relevantHistory'], value.relevantHistoryList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeDeviceRequest(json : TJSONWriter; name : string; value : TFhirDeviceRequest; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesCanonicalList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesCanonicalList[i].id <> '') or (value.instantiatesCanonicalList[i].hasExtensionList) {no-comments or (value.instantiatesCanonicalList[i].hasComments)});
      val := val or (value.instantiatesCanonicalList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesCanonical', value.instantiatesCanonicalList, true);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalValue(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesCanonical', value.instantiatesCanonicalList, false);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalProps(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesUriList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesUriList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesUriList[i].id <> '') or (value.instantiatesUriList[i].hasExtensionList) {no-comments or (value.instantiatesUriList[i].hasComments)});
      val := val or (value.instantiatesUriList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesUri', value.instantiatesUriList, true);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriValue(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesUri', value.instantiatesUriList, false);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriProps(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.priorRequestList.Count > 0) then
  begin
    startArray(json, 'priorRequest', value.priorRequestList, false);
    for i := 0 to value.priorRequestList.Count - 1 do
      ComposeReference(json, '', value.priorRequestList[i]);
    finishArray(json, value.priorRequestList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'groupIdentifier', value.groupIdentifier);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirRequestStatusEnum, false);
  ComposeEnumValue(json, 'intent', value.intentElement, CODES_TFhirRequestIntentEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (value.code is TFhirReference) then
    ComposeReference(json, 'codeReference', TFhirReference(value.code))
  else if (value.code is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'codeCodeableConcept', TFhirCodeableConcept(value.code)) ;
  if (SummaryOption in [soFull, soData]) and (value.parameterList.Count > 0) then
  begin
    startArray(json, 'parameter', value.parameterList, false);
    for i := 0 to value.parameterList.Count - 1 do
      ComposeDeviceRequestParameter(json, '', value.parameterList[i]);
    finishArray(json, value.parameterList);
  end;
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(value.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(value.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'authoredOn', value.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'authoredOn', value.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'requester', value.requester);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'performerType', value.performerType);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'performer', value.performer);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.insuranceList.Count > 0) then
  begin
    startArray(json, 'insurance', value.insuranceList, false);
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeReference(json, '', value.insuranceList[i]);
    finishArray(json, value.insuranceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.supportingInfoList.Count > 0) then
  begin
    startArray(json, 'supportingInfo', value.supportingInfoList, false);
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeReference(json, '', value.supportingInfoList[i]);
    finishArray(json, value.supportingInfoList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relevantHistoryList.Count > 0) then
  begin
    startArray(json, 'relevantHistory', value.relevantHistoryList, false);
    for i := 0 to value.relevantHistoryList.Count - 1 do
      ComposeReference(json, '', value.relevantHistoryList[i]);
    finishArray(json, value.relevantHistoryList);
  end;
end;

{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
procedure TFHIRJsonParser.ParseDeviceUseStatement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceUseStatement(jsn)); 
end;

function TFHIRJsonParser.ParseDeviceUseStatement(jsn : TJsonObject) : TFhirDeviceUseStatement;
begin
  result := TFhirDeviceUseStatement.Create;
  try
    ParseDeviceUseStatementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceUseStatementProperties(jsn : TJsonObject; value : TFhirDeviceUseStatement);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirDeviceUseStatementStatusEnum, SYSTEMS_TFhirDeviceUseStatementStatusEnum);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('derivedFrom') then
      iterateArray(jsn.vArr['derivedFrom'], value.derivedFromList, parseReference);
    if jsn.has('timingTiming') {a4} then
      value.timing := ParseTiming(jsn.vObj['timingTiming']);
    if jsn.has('timingPeriod') {a4} then
      value.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDateTime') or jsn.has('_timingDateTime') then
      value.timing := parseDateTime(jsn.node['timingDateTime'], jsn.vObj['_timingDateTime']);
    if jsn.has('recordedOn') or jsn.has('_recordedOn') then
        value.recordedOnElement := parseDateTime(jsn.node['recordedOn'], jsn.vObj['_recordedOn']);
    if jsn.has('source') then
        value.source := ParseReference(jsn.vObj['source']);
    if jsn.has('device') then
        value.device := ParseReference(jsn.vObj['device']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('bodySite') then
        value.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeDeviceUseStatement(json : TJSONWriter; name : string; value : TFhirDeviceUseStatement; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirDeviceUseStatementStatusEnum, false);
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.derivedFromList.Count > 0) then
  begin
    startArray(json, 'derivedFrom', value.derivedFromList, false);
    for i := 0 to value.derivedFromList.Count - 1 do
      ComposeReference(json, '', value.derivedFromList[i]);
    finishArray(json, value.derivedFromList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.timing is TFhirTiming) then 
    ComposeTiming(json, 'timingTiming', TFhirTiming(value.timing)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(value.timing)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.timing is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timingDateTime', TFhirDateTime(value.timing), false);
    ComposeDateTimeProps(json, 'timingDateTime', TFhirDateTime(value.timing), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'recordedOn', value.recordedOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'recordedOn', value.recordedOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'source', value.source);
  ComposeReference(json, 'device', value.device);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'bodySite', value.bodySite);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
end;

{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
procedure TFHIRJsonParser.ParseDiagnosticReportMedia(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDiagnosticReportMedia(jsn)); 
end;

function TFHIRJsonParser.ParseDiagnosticReportMedia(jsn : TJsonObject) : TFhirDiagnosticReportMedia;
begin
  result := TFhirDiagnosticReportMedia.Create;
  try
    ParseDiagnosticReportMediaProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDiagnosticReportMediaProperties(jsn : TJsonObject; value : TFhirDiagnosticReportMedia);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);
    if jsn.has('link') then
        value.link_ := ParseReference(jsn.vObj['link']);
end;

procedure TFHIRJsonComposer.ComposeDiagnosticReportMedia(json : TJSONWriter; name : string; value : TFhirDiagnosticReportMedia; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', value.commentElement, false);
  ComposeReference(json, 'link', value.link_);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDiagnosticReport(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDiagnosticReport(jsn)); 
end;

function TFHIRJsonParser.ParseDiagnosticReport(jsn : TJsonObject) : TFhirDiagnosticReport;
begin
  result := TFhirDiagnosticReport.Create;
  try
    ParseDiagnosticReportProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDiagnosticReportProperties(jsn : TJsonObject; value : TFhirDiagnosticReport);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirDiagnosticReportStatusEnum, SYSTEMS_TFhirDiagnosticReportStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('effectivePeriod') {a4} then
      value.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      value.effective := parseDateTime(jsn.node['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('issued') or jsn.has('_issued') then
        value.issuedElement := parseInstant(jsn.node['issued'], jsn.vObj['_issued']);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], value.performerList, parseReference);
    if jsn.has('resultsInterpreter') then
      iterateArray(jsn.vArr['resultsInterpreter'], value.resultsInterpreterList, parseReference);
    if jsn.has('specimen') then
      iterateArray(jsn.vArr['specimen'], value.specimenList, parseReference);
    if jsn.has('result') then
      iterateArray(jsn.vArr['result'], value.resultList, parseReference);
    if jsn.has('imagingStudy') then
      iterateArray(jsn.vArr['imagingStudy'], value.imagingStudyList, parseReference);
    if jsn.has('media') then
      iterateArray(jsn.vArr['media'], value.mediaList, parseDiagnosticReportMedia);
    if jsn.has('conclusion') or jsn.has('_conclusion') then
        value.conclusionElement := parseString(jsn.node['conclusion'], jsn.vObj['_conclusion']);
    if jsn.has('conclusionCode') then
      iterateArray(jsn.vArr['conclusionCode'], value.conclusionCodeList, parseCodeableConcept);
    if jsn.has('presentedForm') then
      iterateArray(jsn.vArr['presentedForm'], value.presentedFormList, parseAttachment);
end;

procedure TFHIRJsonComposer.ComposeDiagnosticReport(json : TJSONWriter; name : string; value : TFhirDiagnosticReport; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirDiagnosticReportStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(value.effective)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(value.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(value.effective), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'issued', value.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'issued', value.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.performerList.Count > 0) then
  begin
    startArray(json, 'performer', value.performerList, false);
    for i := 0 to value.performerList.Count - 1 do
      ComposeReference(json, '', value.performerList[i]);
    finishArray(json, value.performerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.resultsInterpreterList.Count > 0) then
  begin
    startArray(json, 'resultsInterpreter', value.resultsInterpreterList, false);
    for i := 0 to value.resultsInterpreterList.Count - 1 do
      ComposeReference(json, '', value.resultsInterpreterList[i]);
    finishArray(json, value.resultsInterpreterList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.specimenList.Count > 0) then
  begin
    startArray(json, 'specimen', value.specimenList, false);
    for i := 0 to value.specimenList.Count - 1 do
      ComposeReference(json, '', value.specimenList[i]);
    finishArray(json, value.specimenList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.resultList.Count > 0) then
  begin
    startArray(json, 'result', value.resultList, false);
    for i := 0 to value.resultList.Count - 1 do
      ComposeReference(json, '', value.resultList[i]);
    finishArray(json, value.resultList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.imagingStudyList.Count > 0) then
  begin
    startArray(json, 'imagingStudy', value.imagingStudyList, false);
    for i := 0 to value.imagingStudyList.Count - 1 do
      ComposeReference(json, '', value.imagingStudyList[i]);
    finishArray(json, value.imagingStudyList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.mediaList.Count > 0) then
  begin
    startArray(json, 'media', value.mediaList, false);
    for i := 0 to value.mediaList.Count - 1 do
      ComposeDiagnosticReportMedia(json, '', value.mediaList[i]);
    finishArray(json, value.mediaList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'conclusion', value.conclusionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'conclusion', value.conclusionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.conclusionCodeList.Count > 0) then
  begin
    startArray(json, 'conclusionCode', value.conclusionCodeList, false);
    for i := 0 to value.conclusionCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.conclusionCodeList[i]);
    finishArray(json, value.conclusionCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.presentedFormList.Count > 0) then
  begin
    startArray(json, 'presentedForm', value.presentedFormList, false);
    for i := 0 to value.presentedFormList.Count - 1 do
      ComposeAttachment(json, '', value.presentedFormList[i]);
    finishArray(json, value.presentedFormList);
  end;
end;

{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
procedure TFHIRJsonParser.ParseDocumentManifestRelated(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentManifestRelated(jsn)); 
end;

function TFHIRJsonParser.ParseDocumentManifestRelated(jsn : TJsonObject) : TFhirDocumentManifestRelated;
begin
  result := TFhirDocumentManifestRelated.Create;
  try
    ParseDocumentManifestRelatedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentManifestRelatedProperties(jsn : TJsonObject; value : TFhirDocumentManifestRelated);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('ref') then
        value.ref := ParseReference(jsn.vObj['ref']);
end;

procedure TFHIRJsonComposer.ComposeDocumentManifestRelated(json : TJSONWriter; name : string; value : TFhirDocumentManifestRelated; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'ref', value.ref);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDocumentManifest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentManifest(jsn)); 
end;

function TFHIRJsonParser.ParseDocumentManifest(jsn : TJsonObject) : TFhirDocumentManifest;
begin
  result := TFhirDocumentManifest.Create;
  try
    ParseDocumentManifestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentManifestProperties(jsn : TJsonObject; value : TFhirDocumentManifest);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('masterIdentifier') then
        value.masterIdentifier := ParseIdentifier(jsn.vObj['masterIdentifier']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirDocumentReferenceStatusEnum, SYSTEMS_TFhirDocumentReferenceStatusEnum);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('created') or jsn.has('_created') then
        value.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseReference);
    if jsn.has('recipient') then
      iterateArray(jsn.vArr['recipient'], value.recipientList, parseReference);
    if jsn.has('source') or jsn.has('_source') then
        value.sourceElement := parseUri(jsn.node['source'], jsn.vObj['_source']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('content') then
      iterateArray(jsn.vArr['content'], value.contentList, parseReference);
    if jsn.has('related') then
      iterateArray(jsn.vArr['related'], value.relatedList, parseDocumentManifestRelated);
end;

procedure TFHIRJsonComposer.ComposeDocumentManifest(json : TJSONWriter; name : string; value : TFhirDocumentManifest; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'masterIdentifier', value.masterIdentifier);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirDocumentReferenceStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeReference(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.recipientList.Count > 0) then
  begin
    startArray(json, 'recipient', value.recipientList, false);
    for i := 0 to value.recipientList.Count - 1 do
      ComposeReference(json, '', value.recipientList[i]);
    finishArray(json, value.recipientList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'source', value.sourceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'source', value.sourceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (value.contentList.Count > 0) then
  begin
    startArray(json, 'content', value.contentList, false);
    for i := 0 to value.contentList.Count - 1 do
      ComposeReference(json, '', value.contentList[i]);
    finishArray(json, value.contentList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedList.Count > 0) then
  begin
    startArray(json, 'related', value.relatedList, false);
    for i := 0 to value.relatedList.Count - 1 do
      ComposeDocumentManifestRelated(json, '', value.relatedList[i]);
    finishArray(json, value.relatedList);
  end;
end;

{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
procedure TFHIRJsonParser.ParseDocumentReferenceRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReferenceRelatesTo(jsn)); 
end;

function TFHIRJsonParser.ParseDocumentReferenceRelatesTo(jsn : TJsonObject) : TFhirDocumentReferenceRelatesTo;
begin
  result := TFhirDocumentReferenceRelatesTo.Create;
  try
    ParseDocumentReferenceRelatesToProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceRelatesToProperties(jsn : TJsonObject; value : TFhirDocumentReferenceRelatesTo);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirDocumentRelationshipTypeEnum, SYSTEMS_TFhirDocumentRelationshipTypeEnum);
    if jsn.has('target') then
        value.target := ParseReference(jsn.vObj['target']);
end;

procedure TFHIRJsonComposer.ComposeDocumentReferenceRelatesTo(json : TJSONWriter; name : string; value : TFhirDocumentReferenceRelatesTo; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'code', value.codeElement, CODES_TFhirDocumentRelationshipTypeEnum, false);
  ComposeReference(json, 'target', value.target);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReferenceContent(jsn)); 
end;

function TFHIRJsonParser.ParseDocumentReferenceContent(jsn : TJsonObject) : TFhirDocumentReferenceContent;
begin
  result := TFhirDocumentReferenceContent.Create;
  try
    ParseDocumentReferenceContentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContentProperties(jsn : TJsonObject; value : TFhirDocumentReferenceContent);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('attachment') then
        value.attachment := ParseAttachment(jsn.vObj['attachment']);
    if jsn.has('format') then
        value.format := ParseCoding(jsn.vObj['format']);
end;

procedure TFHIRJsonComposer.ComposeDocumentReferenceContent(json : TJSONWriter; name : string; value : TFhirDocumentReferenceContent; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeAttachment(json, 'attachment', value.attachment);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'format', value.format);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContext(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReferenceContext(jsn)); 
end;

function TFHIRJsonParser.ParseDocumentReferenceContext(jsn : TJsonObject) : TFhirDocumentReferenceContext;
begin
  result := TFhirDocumentReferenceContext.Create;
  try
    ParseDocumentReferenceContextProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContextProperties(jsn : TJsonObject; value : TFhirDocumentReferenceContext);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('encounter') then
      iterateArray(jsn.vArr['encounter'], value.encounterList, parseReference);
    if jsn.has('event') then
      iterateArray(jsn.vArr['event'], value.eventList, parseCodeableConcept);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('facilityType') then
        value.facilityType := ParseCodeableConcept(jsn.vObj['facilityType']);
    if jsn.has('practiceSetting') then
        value.practiceSetting := ParseCodeableConcept(jsn.vObj['practiceSetting']);
    if jsn.has('sourcePatientInfo') then
        value.sourcePatientInfo := ParseReference(jsn.vObj['sourcePatientInfo']);
    if jsn.has('related') then
      iterateArray(jsn.vArr['related'], value.relatedList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeDocumentReferenceContext(json : TJSONWriter; name : string; value : TFhirDocumentReferenceContext; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.encounterList.Count > 0) then
  begin
    startArray(json, 'encounter', value.encounterList, false);
    for i := 0 to value.encounterList.Count - 1 do
      ComposeReference(json, '', value.encounterList[i]);
    finishArray(json, value.encounterList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.eventList.Count > 0) then
  begin
    startArray(json, 'event', value.eventList, false);
    for i := 0 to value.eventList.Count - 1 do
      ComposeCodeableConcept(json, '', value.eventList[i]);
    finishArray(json, value.eventList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'facilityType', value.facilityType);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'practiceSetting', value.practiceSetting);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'sourcePatientInfo', value.sourcePatientInfo);
  if (SummaryOption in [soFull, soData]) and (value.relatedList.Count > 0) then
  begin
    startArray(json, 'related', value.relatedList, false);
    for i := 0 to value.relatedList.Count - 1 do
      ComposeReference(json, '', value.relatedList[i]);
    finishArray(json, value.relatedList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseDocumentReference(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReference(jsn)); 
end;

function TFHIRJsonParser.ParseDocumentReference(jsn : TJsonObject) : TFhirDocumentReference;
begin
  result := TFhirDocumentReference.Create;
  try
    ParseDocumentReferenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceProperties(jsn : TJsonObject; value : TFhirDocumentReference);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('masterIdentifier') then
        value.masterIdentifier := ParseIdentifier(jsn.vObj['masterIdentifier']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirDocumentReferenceStatusEnum, SYSTEMS_TFhirDocumentReferenceStatusEnum);
    if jsn.has('docStatus') or jsn.has('_docStatus') then
        value.docStatusElement := parseEnum(jsn.path+'/docStatus', jsn.node['docStatus'], jsn.vObj['_docStatus'], CODES_TFhirCompositionStatusEnum, SYSTEMS_TFhirCompositionStatusEnum);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseInstant(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseReference);
    if jsn.has('authenticator') then
        value.authenticator := ParseReference(jsn.vObj['authenticator']);
    if jsn.has('custodian') then
        value.custodian := ParseReference(jsn.vObj['custodian']);
    if jsn.has('relatesTo') then
      iterateArray(jsn.vArr['relatesTo'], value.relatesToList, parseDocumentReferenceRelatesTo);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('securityLabel') then
      iterateArray(jsn.vArr['securityLabel'], value.securityLabelList, parseCodeableConcept);
    if jsn.has('content') then
      iterateArray(jsn.vArr['content'], value.contentList, parseDocumentReferenceContent);
    if jsn.has('context') then
        value.context := ParseDocumentReferenceContext(jsn.vObj['context']);
end;

procedure TFHIRJsonComposer.ComposeDocumentReference(json : TJSONWriter; name : string; value : TFhirDocumentReference; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'masterIdentifier', value.masterIdentifier);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirDocumentReferenceStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'docStatus', value.docStatusElement, CODES_TFhirCompositionStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeReference(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'authenticator', value.authenticator);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'custodian', value.custodian);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.relatesToList.Count > 0) then
  begin
    startArray(json, 'relatesTo', value.relatesToList, false);
    for i := 0 to value.relatesToList.Count - 1 do
      ComposeDocumentReferenceRelatesTo(json, '', value.relatesToList[i]);
    finishArray(json, value.relatesToList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.securityLabelList.Count > 0) then
  begin
    startArray(json, 'securityLabel', value.securityLabelList, false);
    for i := 0 to value.securityLabelList.Count - 1 do
      ComposeCodeableConcept(json, '', value.securityLabelList[i]);
    finishArray(json, value.securityLabelList);
  end;
  if (value.contentList.Count > 0) then
  begin
    startArray(json, 'content', value.contentList, false);
    for i := 0 to value.contentList.Count - 1 do
      ComposeDocumentReferenceContent(json, '', value.contentList[i]);
    finishArray(json, value.contentList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDocumentReferenceContext(json, 'context', value.context);
end;

{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ENCOUNTER}
procedure TFHIRJsonParser.ParseEncounterStatusHistory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterStatusHistory(jsn)); 
end;

function TFHIRJsonParser.ParseEncounterStatusHistory(jsn : TJsonObject) : TFhirEncounterStatusHistory;
begin
  result := TFhirEncounterStatusHistory.Create;
  try
    ParseEncounterStatusHistoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterStatusHistoryProperties(jsn : TJsonObject; value : TFhirEncounterStatusHistory);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEncounterStatusEnum, SYSTEMS_TFhirEncounterStatusEnum);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeEncounterStatusHistory(json : TJSONWriter; name : string; value : TFhirEncounterStatusHistory; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirEncounterStatusEnum, false);
  ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEncounterClassHistory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterClassHistory(jsn)); 
end;

function TFHIRJsonParser.ParseEncounterClassHistory(jsn : TJsonObject) : TFhirEncounterClassHistory;
begin
  result := TFhirEncounterClassHistory.Create;
  try
    ParseEncounterClassHistoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterClassHistoryProperties(jsn : TJsonObject; value : TFhirEncounterClassHistory);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('class') then
        value.class_ := ParseCoding(jsn.vObj['class']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeEncounterClassHistory(json : TJSONWriter; name : string; value : TFhirEncounterClassHistory; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCoding(json, 'class', value.class_);
  ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEncounterParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterParticipant(jsn)); 
end;

function TFHIRJsonParser.ParseEncounterParticipant(jsn : TJsonObject) : TFhirEncounterParticipant;
begin
  result := TFhirEncounterParticipant.Create;
  try
    ParseEncounterParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterParticipantProperties(jsn : TJsonObject; value : TFhirEncounterParticipant);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('individual') then
        value.individual := ParseReference(jsn.vObj['individual']);
end;

procedure TFHIRJsonComposer.ComposeEncounterParticipant(json : TJSONWriter; name : string; value : TFhirEncounterParticipant; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'individual', value.individual);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEncounterDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterDiagnosis(jsn)); 
end;

function TFHIRJsonParser.ParseEncounterDiagnosis(jsn : TJsonObject) : TFhirEncounterDiagnosis;
begin
  result := TFhirEncounterDiagnosis.Create;
  try
    ParseEncounterDiagnosisProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterDiagnosisProperties(jsn : TJsonObject; value : TFhirEncounterDiagnosis);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('condition') then
        value.condition := ParseReference(jsn.vObj['condition']);
    if jsn.has('use') then
        value.use := ParseCodeableConcept(jsn.vObj['use']);
    if jsn.has('rank') or jsn.has('_rank') then
        value.rankElement := parsePositiveInt(jsn.node['rank'], jsn.vObj['_rank']);
end;

procedure TFHIRJsonComposer.ComposeEncounterDiagnosis(json : TJSONWriter; name : string; value : TFhirEncounterDiagnosis; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'condition', value.condition);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'use', value.use);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'rank', value.rankElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'rank', value.rankElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEncounterHospitalization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterHospitalization(jsn)); 
end;

function TFHIRJsonParser.ParseEncounterHospitalization(jsn : TJsonObject) : TFhirEncounterHospitalization;
begin
  result := TFhirEncounterHospitalization.Create;
  try
    ParseEncounterHospitalizationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterHospitalizationProperties(jsn : TJsonObject; value : TFhirEncounterHospitalization);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('preAdmissionIdentifier') then
        value.preAdmissionIdentifier := ParseIdentifier(jsn.vObj['preAdmissionIdentifier']);
    if jsn.has('origin') then
        value.origin := ParseReference(jsn.vObj['origin']);
    if jsn.has('admitSource') then
        value.admitSource := ParseCodeableConcept(jsn.vObj['admitSource']);
    if jsn.has('reAdmission') then
        value.reAdmission := ParseCodeableConcept(jsn.vObj['reAdmission']);
    if jsn.has('dietPreference') then
      iterateArray(jsn.vArr['dietPreference'], value.dietPreferenceList, parseCodeableConcept);
    if jsn.has('specialCourtesy') then
      iterateArray(jsn.vArr['specialCourtesy'], value.specialCourtesyList, parseCodeableConcept);
    if jsn.has('specialArrangement') then
      iterateArray(jsn.vArr['specialArrangement'], value.specialArrangementList, parseCodeableConcept);
    if jsn.has('destination') then
        value.destination := ParseReference(jsn.vObj['destination']);
    if jsn.has('dischargeDisposition') then
        value.dischargeDisposition := ParseCodeableConcept(jsn.vObj['dischargeDisposition']);
end;

procedure TFHIRJsonComposer.ComposeEncounterHospitalization(json : TJSONWriter; name : string; value : TFhirEncounterHospitalization; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'preAdmissionIdentifier', value.preAdmissionIdentifier);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'origin', value.origin);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'admitSource', value.admitSource);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reAdmission', value.reAdmission);
  if (SummaryOption in [soFull, soData]) and (value.dietPreferenceList.Count > 0) then
  begin
    startArray(json, 'dietPreference', value.dietPreferenceList, false);
    for i := 0 to value.dietPreferenceList.Count - 1 do
      ComposeCodeableConcept(json, '', value.dietPreferenceList[i]);
    finishArray(json, value.dietPreferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.specialCourtesyList.Count > 0) then
  begin
    startArray(json, 'specialCourtesy', value.specialCourtesyList, false);
    for i := 0 to value.specialCourtesyList.Count - 1 do
      ComposeCodeableConcept(json, '', value.specialCourtesyList[i]);
    finishArray(json, value.specialCourtesyList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.specialArrangementList.Count > 0) then
  begin
    startArray(json, 'specialArrangement', value.specialArrangementList, false);
    for i := 0 to value.specialArrangementList.Count - 1 do
      ComposeCodeableConcept(json, '', value.specialArrangementList[i]);
    finishArray(json, value.specialArrangementList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'destination', value.destination);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'dischargeDisposition', value.dischargeDisposition);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEncounterLocation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterLocation(jsn)); 
end;

function TFHIRJsonParser.ParseEncounterLocation(jsn : TJsonObject) : TFhirEncounterLocation;
begin
  result := TFhirEncounterLocation.Create;
  try
    ParseEncounterLocationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterLocationProperties(jsn : TJsonObject; value : TFhirEncounterLocation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('location') then
        value.location := ParseReference(jsn.vObj['location']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEncounterLocationStatusEnum, SYSTEMS_TFhirEncounterLocationStatusEnum);
    if jsn.has('physicalType') then
        value.physicalType := ParseCodeableConcept(jsn.vObj['physicalType']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeEncounterLocation(json : TJSONWriter; name : string; value : TFhirEncounterLocation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'location', value.location);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirEncounterLocationStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'physicalType', value.physicalType);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEncounter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounter(jsn)); 
end;

function TFHIRJsonParser.ParseEncounter(jsn : TJsonObject) : TFhirEncounter;
begin
  result := TFhirEncounter.Create;
  try
    ParseEncounterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterProperties(jsn : TJsonObject; value : TFhirEncounter);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEncounterStatusEnum, SYSTEMS_TFhirEncounterStatusEnum);
    if jsn.has('statusHistory') then
      iterateArray(jsn.vArr['statusHistory'], value.statusHistoryList, parseEncounterStatusHistory);
    if jsn.has('class') then
        value.class_ := ParseCoding(jsn.vObj['class']);
    if jsn.has('classHistory') then
      iterateArray(jsn.vArr['classHistory'], value.classHistoryList, parseEncounterClassHistory);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('serviceType') then
        value.serviceType := ParseCodeableConcept(jsn.vObj['serviceType']);
    if jsn.has('priority') then
        value.priority := ParseCodeableConcept(jsn.vObj['priority']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('episodeOfCare') then
      iterateArray(jsn.vArr['episodeOfCare'], value.episodeOfCareList, parseReference);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], value.participantList, parseEncounterParticipant);
    if jsn.has('appointment') then
      iterateArray(jsn.vArr['appointment'], value.appointmentList, parseReference);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('length') then
        value.length := ParseDuration(jsn.vObj['length']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('diagnosis') then
      iterateArray(jsn.vArr['diagnosis'], value.diagnosisList, parseEncounterDiagnosis);
    if jsn.has('account') then
      iterateArray(jsn.vArr['account'], value.accountList, parseReference);
    if jsn.has('hospitalization') then
        value.hospitalization := ParseEncounterHospitalization(jsn.vObj['hospitalization']);
    if jsn.has('location') then
      iterateArray(jsn.vArr['location'], value.locationList, parseEncounterLocation);
    if jsn.has('serviceProvider') then
        value.serviceProvider := ParseReference(jsn.vObj['serviceProvider']);
    if jsn.has('partOf') then
        value.partOf := ParseReference(jsn.vObj['partOf']);
end;

procedure TFHIRJsonComposer.ComposeEncounter(json : TJSONWriter; name : string; value : TFhirEncounter; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirEncounterStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.statusHistoryList.Count > 0) then
  begin
    startArray(json, 'statusHistory', value.statusHistoryList, false);
    for i := 0 to value.statusHistoryList.Count - 1 do
      ComposeEncounterStatusHistory(json, '', value.statusHistoryList[i]);
    finishArray(json, value.statusHistoryList);
  end;
  ComposeCoding(json, 'class', value.class_);
  if (SummaryOption in [soFull, soData]) and (value.classHistoryList.Count > 0) then
  begin
    startArray(json, 'classHistory', value.classHistoryList, false);
    for i := 0 to value.classHistoryList.Count - 1 do
      ComposeEncounterClassHistory(json, '', value.classHistoryList[i]);
    finishArray(json, value.classHistoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'serviceType', value.serviceType);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'priority', value.priority);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.episodeOfCareList.Count > 0) then
  begin
    startArray(json, 'episodeOfCare', value.episodeOfCareList, false);
    for i := 0 to value.episodeOfCareList.Count - 1 do
      ComposeReference(json, '', value.episodeOfCareList[i]);
    finishArray(json, value.episodeOfCareList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.participantList.Count > 0) then
  begin
    startArray(json, 'participant', value.participantList, false);
    for i := 0 to value.participantList.Count - 1 do
      ComposeEncounterParticipant(json, '', value.participantList[i]);
    finishArray(json, value.participantList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.appointmentList.Count > 0) then
  begin
    startArray(json, 'appointment', value.appointmentList, false);
    for i := 0 to value.appointmentList.Count - 1 do
      ComposeReference(json, '', value.appointmentList[i]);
    finishArray(json, value.appointmentList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'length', value.length);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.diagnosisList.Count > 0) then
  begin
    startArray(json, 'diagnosis', value.diagnosisList, false);
    for i := 0 to value.diagnosisList.Count - 1 do
      ComposeEncounterDiagnosis(json, '', value.diagnosisList[i]);
    finishArray(json, value.diagnosisList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.accountList.Count > 0) then
  begin
    startArray(json, 'account', value.accountList, false);
    for i := 0 to value.accountList.Count - 1 do
      ComposeReference(json, '', value.accountList[i]);
    finishArray(json, value.accountList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeEncounterHospitalization(json, 'hospitalization', value.hospitalization);
  if (SummaryOption in [soFull, soData]) and (value.locationList.Count > 0) then
  begin
    startArray(json, 'location', value.locationList, false);
    for i := 0 to value.locationList.Count - 1 do
      ComposeEncounterLocation(json, '', value.locationList[i]);
    finishArray(json, value.locationList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'serviceProvider', value.serviceProvider);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'partOf', value.partOf);
end;

{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
procedure TFHIRJsonParser.ParseEndpoint(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEndpoint(jsn)); 
end;

function TFHIRJsonParser.ParseEndpoint(jsn : TJsonObject) : TFhirEndpoint;
begin
  result := TFhirEndpoint.Create;
  try
    ParseEndpointProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEndpointProperties(jsn : TJsonObject; value : TFhirEndpoint);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEndpointStatusEnum, SYSTEMS_TFhirEndpointStatusEnum);
    if jsn.has('connectionType') then
        value.connectionType := ParseCoding(jsn.vObj['connectionType']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('managingOrganization') then
        value.managingOrganization := ParseReference(jsn.vObj['managingOrganization']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactPoint);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('payloadType') then
      iterateArray(jsn.vArr['payloadType'], value.payloadTypeList, parseCodeableConcept);
      if jsn.has('payloadMimeType') or jsn.has('_payloadMimeType') then
      iteratePrimitiveArray(jsn.vArr['payloadMimeType'], jsn.vArr['_payloadMimeType'], value.payloadMimeTypeList, parseCode);
    if jsn.has('address') or jsn.has('_address') then
        value.addressElement := parseUrl(jsn.node['address'], jsn.vObj['_address']);
      if jsn.has('header') or jsn.has('_header') then
      iteratePrimitiveArray(jsn.vArr['header'], jsn.vArr['_header'], value.headerList, parseString);
end;

procedure TFHIRJsonComposer.ComposeEndpoint(json : TJSONWriter; name : string; value : TFhirEndpoint; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirEndpointStatusEnum, false);
  ComposeCoding(json, 'connectionType', value.connectionType);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'managingOrganization', value.managingOrganization);
  if (SummaryOption in [soFull, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactPoint(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (value.payloadTypeList.Count > 0) then
  begin
    startArray(json, 'payloadType', value.payloadTypeList, false);
    for i := 0 to value.payloadTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.payloadTypeList[i]);
    finishArray(json, value.payloadTypeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.payloadMimeTypeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.payloadMimeTypeList.Count - 1 do
    begin
      ext := ext or ((value.payloadMimeTypeList[i].id <> '') or (value.payloadMimeTypeList[i].hasExtensionList) {no-comments or (value.payloadMimeTypeList[i].hasComments)});
      val := val or (value.payloadMimeTypeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'payloadMimeType', value.payloadMimeTypeList, true);
      for i := 0 to value.payloadMimeTypeList.Count - 1 do
        ComposeCodeValue(json, '', value.payloadMimeTypeList[i], true);
      finishArray(json, value.payloadMimeTypeList);
    end;
    if ext then
    begin
      startArray(json, '_payloadMimeType', value.payloadMimeTypeList, false);
      for i := 0 to value.payloadMimeTypeList.Count - 1 do
        ComposeCodeProps(json, '', value.payloadMimeTypeList[i], true);
      finishArray(json, value.payloadMimeTypeList);
    end;
  end;
  ComposeUrlValue(json, 'address', value.addressElement, false);
  ComposeUrlProps(json, 'address', value.addressElement, false);
  if (SummaryOption in [soFull, soData]) and (value.headerList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.headerList.Count - 1 do
    begin
      ext := ext or ((value.headerList[i].id <> '') or (value.headerList[i].hasExtensionList) {no-comments or (value.headerList[i].hasComments)});
      val := val or (value.headerList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'header', value.headerList, true);
      for i := 0 to value.headerList.Count - 1 do
        ComposeStringValue(json, '', value.headerList[i], true);
      finishArray(json, value.headerList);
    end;
    if ext then
    begin
      startArray(json, '_header', value.headerList, false);
      for i := 0 to value.headerList.Count - 1 do
        ComposeStringProps(json, '', value.headerList[i], true);
      finishArray(json, value.headerList);
    end;
  end;
end;

{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
procedure TFHIRJsonParser.ParseEnrollmentRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEnrollmentRequest(jsn)); 
end;

function TFHIRJsonParser.ParseEnrollmentRequest(jsn : TJsonObject) : TFhirEnrollmentRequest;
begin
  result := TFhirEnrollmentRequest.Create;
  try
    ParseEnrollmentRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEnrollmentRequestProperties(jsn : TJsonObject; value : TFhirEnrollmentRequest);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum);
    if jsn.has('created') or jsn.has('_created') then
        value.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);
    if jsn.has('insurer') then
        value.insurer := ParseReference(jsn.vObj['insurer']);
    if jsn.has('provider') then
        value.provider := ParseReference(jsn.vObj['provider']);
    if jsn.has('candidate') then
        value.candidate := ParseReference(jsn.vObj['candidate']);
    if jsn.has('coverage') then
        value.coverage := ParseReference(jsn.vObj['coverage']);
end;

procedure TFHIRJsonComposer.ComposeEnrollmentRequest(json : TJSONWriter; name : string; value : TFhirEnrollmentRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'insurer', value.insurer);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'provider', value.provider);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'candidate', value.candidate);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'coverage', value.coverage);
end;

{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
procedure TFHIRJsonParser.ParseEnrollmentResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEnrollmentResponse(jsn)); 
end;

function TFHIRJsonParser.ParseEnrollmentResponse(jsn : TJsonObject) : TFhirEnrollmentResponse;
begin
  result := TFhirEnrollmentResponse.Create;
  try
    ParseEnrollmentResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEnrollmentResponseProperties(jsn : TJsonObject; value : TFhirEnrollmentResponse);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum);
    if jsn.has('request') then
        value.request := ParseReference(jsn.vObj['request']);
    if jsn.has('outcome') or jsn.has('_outcome') then
        value.outcomeElement := parseEnum(jsn.path+'/outcome', jsn.node['outcome'], jsn.vObj['_outcome'], CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum);
    if jsn.has('disposition') or jsn.has('_disposition') then
        value.dispositionElement := parseString(jsn.node['disposition'], jsn.vObj['_disposition']);
    if jsn.has('created') or jsn.has('_created') then
        value.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);
    if jsn.has('organization') then
        value.organization := ParseReference(jsn.vObj['organization']);
    if jsn.has('requestProvider') then
        value.requestProvider := ParseReference(jsn.vObj['requestProvider']);
end;

procedure TFHIRJsonComposer.ComposeEnrollmentResponse(json : TJSONWriter; name : string; value : TFhirEnrollmentResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'request', value.request);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'outcome', value.outcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'disposition', value.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'disposition', value.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'organization', value.organization);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'requestProvider', value.requestProvider);
end;

{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
procedure TFHIRJsonParser.ParseEpisodeOfCareStatusHistory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEpisodeOfCareStatusHistory(jsn)); 
end;

function TFHIRJsonParser.ParseEpisodeOfCareStatusHistory(jsn : TJsonObject) : TFhirEpisodeOfCareStatusHistory;
begin
  result := TFhirEpisodeOfCareStatusHistory.Create;
  try
    ParseEpisodeOfCareStatusHistoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEpisodeOfCareStatusHistoryProperties(jsn : TJsonObject; value : TFhirEpisodeOfCareStatusHistory);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEpisodeOfCareStatusEnum, SYSTEMS_TFhirEpisodeOfCareStatusEnum);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeEpisodeOfCareStatusHistory(json : TJSONWriter; name : string; value : TFhirEpisodeOfCareStatusHistory; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirEpisodeOfCareStatusEnum, false);
  ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEpisodeOfCareDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEpisodeOfCareDiagnosis(jsn)); 
end;

function TFHIRJsonParser.ParseEpisodeOfCareDiagnosis(jsn : TJsonObject) : TFhirEpisodeOfCareDiagnosis;
begin
  result := TFhirEpisodeOfCareDiagnosis.Create;
  try
    ParseEpisodeOfCareDiagnosisProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEpisodeOfCareDiagnosisProperties(jsn : TJsonObject; value : TFhirEpisodeOfCareDiagnosis);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('condition') then
        value.condition := ParseReference(jsn.vObj['condition']);
    if jsn.has('role') then
        value.role := ParseCodeableConcept(jsn.vObj['role']);
    if jsn.has('rank') or jsn.has('_rank') then
        value.rankElement := parsePositiveInt(jsn.node['rank'], jsn.vObj['_rank']);
end;

procedure TFHIRJsonComposer.ComposeEpisodeOfCareDiagnosis(json : TJSONWriter; name : string; value : TFhirEpisodeOfCareDiagnosis; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'condition', value.condition);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'role', value.role);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'rank', value.rankElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'rank', value.rankElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEpisodeOfCare(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEpisodeOfCare(jsn)); 
end;

function TFHIRJsonParser.ParseEpisodeOfCare(jsn : TJsonObject) : TFhirEpisodeOfCare;
begin
  result := TFhirEpisodeOfCare.Create;
  try
    ParseEpisodeOfCareProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEpisodeOfCareProperties(jsn : TJsonObject; value : TFhirEpisodeOfCare);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEpisodeOfCareStatusEnum, SYSTEMS_TFhirEpisodeOfCareStatusEnum);
    if jsn.has('statusHistory') then
      iterateArray(jsn.vArr['statusHistory'], value.statusHistoryList, parseEpisodeOfCareStatusHistory);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('diagnosis') then
      iterateArray(jsn.vArr['diagnosis'], value.diagnosisList, parseEpisodeOfCareDiagnosis);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('managingOrganization') then
        value.managingOrganization := ParseReference(jsn.vObj['managingOrganization']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('referralRequest') then
      iterateArray(jsn.vArr['referralRequest'], value.referralRequestList, parseReference);
    if jsn.has('careManager') then
        value.careManager := ParseReference(jsn.vObj['careManager']);
    if jsn.has('team') then
      iterateArray(jsn.vArr['team'], value.teamList, parseReference);
    if jsn.has('account') then
      iterateArray(jsn.vArr['account'], value.accountList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeEpisodeOfCare(json : TJSONWriter; name : string; value : TFhirEpisodeOfCare; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirEpisodeOfCareStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.statusHistoryList.Count > 0) then
  begin
    startArray(json, 'statusHistory', value.statusHistoryList, false);
    for i := 0 to value.statusHistoryList.Count - 1 do
      ComposeEpisodeOfCareStatusHistory(json, '', value.statusHistoryList[i]);
    finishArray(json, value.statusHistoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.diagnosisList.Count > 0) then
  begin
    startArray(json, 'diagnosis', value.diagnosisList, false);
    for i := 0 to value.diagnosisList.Count - 1 do
      ComposeEpisodeOfCareDiagnosis(json, '', value.diagnosisList[i]);
    finishArray(json, value.diagnosisList);
  end;
  ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'managingOrganization', value.managingOrganization);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soData]) and (value.referralRequestList.Count > 0) then
  begin
    startArray(json, 'referralRequest', value.referralRequestList, false);
    for i := 0 to value.referralRequestList.Count - 1 do
      ComposeReference(json, '', value.referralRequestList[i]);
    finishArray(json, value.referralRequestList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'careManager', value.careManager);
  if (SummaryOption in [soFull, soData]) and (value.teamList.Count > 0) then
  begin
    startArray(json, 'team', value.teamList, false);
    for i := 0 to value.teamList.Count - 1 do
      ComposeReference(json, '', value.teamList[i]);
    finishArray(json, value.teamList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.accountList.Count > 0) then
  begin
    startArray(json, 'account', value.accountList, false);
    for i := 0 to value.accountList.Count - 1 do
      ComposeReference(json, '', value.accountList[i]);
    finishArray(json, value.accountList);
  end;
end;

{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
procedure TFHIRJsonParser.ParseEventDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEventDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseEventDefinition(jsn : TJsonObject) : TFhirEventDefinition;
begin
  result := TFhirEventDefinition.Create;
  try
    ParseEventDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEventDefinitionProperties(jsn : TJsonObject; value : TFhirEventDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('subtitle') or jsn.has('_subtitle') then
        value.subtitleElement := parseString(jsn.node['subtitle'], jsn.vObj['_subtitle']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('subjectCodeableConcept') {a4} then
      value.subject := ParseCodeableConcept(jsn.vObj['subjectCodeableConcept']);
    if jsn.has('subjectReference') {a3} then
      value.subject := ParseReference(jsn.vObj['subjectReference']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('usage') or jsn.has('_usage') then
        value.usageElement := parseString(jsn.node['usage'], jsn.vObj['_usage']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        value.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        value.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);
    if jsn.has('effectivePeriod') then
        value.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], value.topicList, parseCodeableConcept);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseContactDetail);
    if jsn.has('editor') then
      iterateArray(jsn.vArr['editor'], value.editorList, parseContactDetail);
    if jsn.has('reviewer') then
      iterateArray(jsn.vArr['reviewer'], value.reviewerList, parseContactDetail);
    if jsn.has('endorser') then
      iterateArray(jsn.vArr['endorser'], value.endorserList, parseContactDetail);
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], value.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('trigger') then
      iterateArray(jsn.vArr['trigger'], value.triggerList, parseTriggerDefinition);
end;

procedure TFHIRJsonComposer.ComposeEventDefinition(json : TJSONWriter; name : string; value : TFhirEventDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'subtitle', value.subtitleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'subtitle', value.subtitleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject)) 
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirReference) then
    ComposeReference(json, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', value.effectivePeriod);
  if (SummaryOption in [soFull, soData]) and (value.topicList.Count > 0) then
  begin
    startArray(json, 'topic', value.topicList, false);
    for i := 0 to value.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', value.topicList[i]);
    finishArray(json, value.topicList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.editorList.Count > 0) then
  begin
    startArray(json, 'editor', value.editorList, false);
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(json, '', value.editorList[i]);
    finishArray(json, value.editorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reviewerList.Count > 0) then
  begin
    startArray(json, 'reviewer', value.reviewerList, false);
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(json, '', value.reviewerList[i]);
    finishArray(json, value.reviewerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.endorserList.Count > 0) then
  begin
    startArray(json, 'endorser', value.endorserList, false);
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(json, '', value.endorserList[i]);
    finishArray(json, value.endorserList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedArtifactList.Count > 0) then
  begin
    startArray(json, 'relatedArtifact', value.relatedArtifactList, false);
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', value.relatedArtifactList[i]);
    finishArray(json, value.relatedArtifactList);
  end;
  if (value.triggerList.Count > 0) then
  begin
    startArray(json, 'trigger', value.triggerList, false);
    for i := 0 to value.triggerList.Count - 1 do
      ComposeTriggerDefinition(json, '', value.triggerList[i]);
    finishArray(json, value.triggerList);
  end;
end;

{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
procedure TFHIRJsonParser.ParseEvidenceVariableDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceVariableDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceVariableDefinition(jsn : TJsonObject) : TFhirEvidenceVariableDefinition;
begin
  result := TFhirEvidenceVariableDefinition.Create;
  try
    ParseEvidenceVariableDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceVariableDefinitionProperties(jsn : TJsonObject; value : TFhirEvidenceVariableDefinition);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('variableRole') then
        value.variableRole := ParseCodeableConcept(jsn.vObj['variableRole']);
    if jsn.has('observed') then
        value.observed := ParseReference(jsn.vObj['observed']);
    if jsn.has('intended') then
        value.intended := ParseReference(jsn.vObj['intended']);
    if jsn.has('directnessMatch') then
        value.directnessMatch := ParseCodeableConcept(jsn.vObj['directnessMatch']);
end;

procedure TFHIRJsonComposer.ComposeEvidenceVariableDefinition(json : TJSONWriter; name : string; value : TFhirEvidenceVariableDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  ComposeCodeableConcept(json, 'variableRole', value.variableRole);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'observed', value.observed);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'intended', value.intended);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'directnessMatch', value.directnessMatch);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEvidenceStatistic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceStatistic(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceStatistic(jsn : TJsonObject) : TFhirEvidenceStatistic;
begin
  result := TFhirEvidenceStatistic.Create;
  try
    ParseEvidenceStatisticProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceStatisticProperties(jsn : TJsonObject; value : TFhirEvidenceStatistic);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('statisticType') then
        value.statisticType := ParseCodeableConcept(jsn.vObj['statisticType']);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('numberOfEvents') or jsn.has('_numberOfEvents') then
        value.numberOfEventsElement := parseUnsignedInt(jsn.node['numberOfEvents'], jsn.vObj['_numberOfEvents']);
    if jsn.has('numberAffected') or jsn.has('_numberAffected') then
        value.numberAffectedElement := parseUnsignedInt(jsn.node['numberAffected'], jsn.vObj['_numberAffected']);
    if jsn.has('sampleSize') then
        value.sampleSize := ParseEvidenceStatisticSampleSize(jsn.vObj['sampleSize']);
    if jsn.has('attributeEstimate') then
      iterateArray(jsn.vArr['attributeEstimate'], value.attributeEstimateList, parseEvidenceStatisticAttributeEstimate);
    if jsn.has('modelCharacteristic') then
      iterateArray(jsn.vArr['modelCharacteristic'], value.modelCharacteristicList, parseEvidenceStatisticModelCharacteristic);
end;

procedure TFHIRJsonComposer.ComposeEvidenceStatistic(json : TJSONWriter; name : string; value : TFhirEvidenceStatistic; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'statisticType', value.statisticType);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'numberOfEvents', value.numberOfEventsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'numberOfEvents', value.numberOfEventsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'numberAffected', value.numberAffectedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'numberAffected', value.numberAffectedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEvidenceStatisticSampleSize(json, 'sampleSize', value.sampleSize);
  if (SummaryOption in [soFull, soData]) and (value.attributeEstimateList.Count > 0) then
  begin
    startArray(json, 'attributeEstimate', value.attributeEstimateList, false);
    for i := 0 to value.attributeEstimateList.Count - 1 do
      ComposeEvidenceStatisticAttributeEstimate(json, '', value.attributeEstimateList[i]);
    finishArray(json, value.attributeEstimateList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.modelCharacteristicList.Count > 0) then
  begin
    startArray(json, 'modelCharacteristic', value.modelCharacteristicList, false);
    for i := 0 to value.modelCharacteristicList.Count - 1 do
      ComposeEvidenceStatisticModelCharacteristic(json, '', value.modelCharacteristicList[i]);
    finishArray(json, value.modelCharacteristicList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEvidenceStatisticSampleSize(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceStatisticSampleSize(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceStatisticSampleSize(jsn : TJsonObject) : TFhirEvidenceStatisticSampleSize;
begin
  result := TFhirEvidenceStatisticSampleSize.Create;
  try
    ParseEvidenceStatisticSampleSizeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceStatisticSampleSizeProperties(jsn : TJsonObject; value : TFhirEvidenceStatisticSampleSize);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('numberOfStudies') or jsn.has('_numberOfStudies') then
        value.numberOfStudiesElement := parseUnsignedInt(jsn.node['numberOfStudies'], jsn.vObj['_numberOfStudies']);
    if jsn.has('numberOfParticipants') or jsn.has('_numberOfParticipants') then
        value.numberOfParticipantsElement := parseUnsignedInt(jsn.node['numberOfParticipants'], jsn.vObj['_numberOfParticipants']);
    if jsn.has('knownDataCount') or jsn.has('_knownDataCount') then
        value.knownDataCountElement := parseUnsignedInt(jsn.node['knownDataCount'], jsn.vObj['_knownDataCount']);
end;

procedure TFHIRJsonComposer.ComposeEvidenceStatisticSampleSize(json : TJSONWriter; name : string; value : TFhirEvidenceStatisticSampleSize; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'numberOfStudies', value.numberOfStudiesElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'numberOfStudies', value.numberOfStudiesElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'numberOfParticipants', value.numberOfParticipantsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'numberOfParticipants', value.numberOfParticipantsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'knownDataCount', value.knownDataCountElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'knownDataCount', value.knownDataCountElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEvidenceStatisticAttributeEstimate(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceStatisticAttributeEstimate(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceStatisticAttributeEstimate(jsn : TJsonObject) : TFhirEvidenceStatisticAttributeEstimate;
begin
  result := TFhirEvidenceStatisticAttributeEstimate.Create;
  try
    ParseEvidenceStatisticAttributeEstimateProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceStatisticAttributeEstimateProperties(jsn : TJsonObject; value : TFhirEvidenceStatisticAttributeEstimate);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('level') or jsn.has('_level') then
        value.levelElement := parseDecimal(jsn.node['level'], jsn.vObj['_level']);
    if jsn.has('range') then
        value.range := ParseRange(jsn.vObj['range']);
    if jsn.has('attributeEstimate') then
      iterateArray(jsn.vArr['attributeEstimate'], value.attributeEstimateList, parseEvidenceStatisticAttributeEstimate);
end;

procedure TFHIRJsonComposer.ComposeEvidenceStatisticAttributeEstimate(json : TJSONWriter; name : string; value : TFhirEvidenceStatisticAttributeEstimate; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'level', value.levelElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'level', value.levelElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(json, 'range', value.range);
  if (SummaryOption in [soFull, soData]) and (value.attributeEstimateList.Count > 0) then
  begin
    startArray(json, 'attributeEstimate', value.attributeEstimateList, false);
    for i := 0 to value.attributeEstimateList.Count - 1 do
      ComposeEvidenceStatisticAttributeEstimate(json, '', value.attributeEstimateList[i]);
    finishArray(json, value.attributeEstimateList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEvidenceStatisticModelCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceStatisticModelCharacteristic(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceStatisticModelCharacteristic(jsn : TJsonObject) : TFhirEvidenceStatisticModelCharacteristic;
begin
  result := TFhirEvidenceStatisticModelCharacteristic.Create;
  try
    ParseEvidenceStatisticModelCharacteristicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceStatisticModelCharacteristicProperties(jsn : TJsonObject; value : TFhirEvidenceStatisticModelCharacteristic);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('value') then
        value.value := ParseQuantity(jsn.vObj['value']);
    if jsn.has('variable') then
      iterateArray(jsn.vArr['variable'], value.variableList, parseEvidenceStatisticModelCharacteristicVariable);
    if jsn.has('attributeEstimate') then
      iterateArray(jsn.vArr['attributeEstimate'], value.attributeEstimateList, parseEvidenceStatisticAttributeEstimate);
end;

procedure TFHIRJsonComposer.ComposeEvidenceStatisticModelCharacteristic(json : TJSONWriter; name : string; value : TFhirEvidenceStatisticModelCharacteristic; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'value', value.value);
  if (SummaryOption in [soFull, soData]) and (value.variableList.Count > 0) then
  begin
    startArray(json, 'variable', value.variableList, false);
    for i := 0 to value.variableList.Count - 1 do
      ComposeEvidenceStatisticModelCharacteristicVariable(json, '', value.variableList[i]);
    finishArray(json, value.variableList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.attributeEstimateList.Count > 0) then
  begin
    startArray(json, 'attributeEstimate', value.attributeEstimateList, false);
    for i := 0 to value.attributeEstimateList.Count - 1 do
      ComposeEvidenceStatisticAttributeEstimate(json, '', value.attributeEstimateList[i]);
    finishArray(json, value.attributeEstimateList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEvidenceStatisticModelCharacteristicVariable(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceStatisticModelCharacteristicVariable(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceStatisticModelCharacteristicVariable(jsn : TJsonObject) : TFhirEvidenceStatisticModelCharacteristicVariable;
begin
  result := TFhirEvidenceStatisticModelCharacteristicVariable.Create;
  try
    ParseEvidenceStatisticModelCharacteristicVariableProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceStatisticModelCharacteristicVariableProperties(jsn : TJsonObject; value : TFhirEvidenceStatisticModelCharacteristicVariable);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('variableDefinition') then
        value.variableDefinition := ParseReference(jsn.vObj['variableDefinition']);
    if jsn.has('handling') or jsn.has('_handling') then
        value.handlingElement := parseEnum(jsn.path+'/handling', jsn.node['handling'], jsn.vObj['_handling'], CODES_TFhirEvidenceVariableHandlingEnum, SYSTEMS_TFhirEvidenceVariableHandlingEnum);
    if jsn.has('valueCategory') then
      iterateArray(jsn.vArr['valueCategory'], value.valueCategoryList, parseCodeableConcept);
    if jsn.has('valueQuantity') then
      iterateArray(jsn.vArr['valueQuantity'], value.valueQuantityList, parseQuantity);
    if jsn.has('valueRange') then
      iterateArray(jsn.vArr['valueRange'], value.valueRangeList, parseRange);
end;

procedure TFHIRJsonComposer.ComposeEvidenceStatisticModelCharacteristicVariable(json : TJSONWriter; name : string; value : TFhirEvidenceStatisticModelCharacteristicVariable; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'variableDefinition', value.variableDefinition);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'handling', value.handlingElement, CODES_TFhirEvidenceVariableHandlingEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.valueCategoryList.Count > 0) then
  begin
    startArray(json, 'valueCategory', value.valueCategoryList, false);
    for i := 0 to value.valueCategoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.valueCategoryList[i]);
    finishArray(json, value.valueCategoryList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.valueQuantityList.Count > 0) then
  begin
    startArray(json, 'valueQuantity', value.valueQuantityList, false);
    for i := 0 to value.valueQuantityList.Count - 1 do
      ComposeQuantity(json, '', value.valueQuantityList[i]);
    finishArray(json, value.valueQuantityList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.valueRangeList.Count > 0) then
  begin
    startArray(json, 'valueRange', value.valueRangeList, false);
    for i := 0 to value.valueRangeList.Count - 1 do
      ComposeRange(json, '', value.valueRangeList[i]);
    finishArray(json, value.valueRangeList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEvidenceCertainty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceCertainty(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceCertainty(jsn : TJsonObject) : TFhirEvidenceCertainty;
begin
  result := TFhirEvidenceCertainty.Create;
  try
    ParseEvidenceCertaintyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceCertaintyProperties(jsn : TJsonObject; value : TFhirEvidenceCertainty);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('rating') then
        value.rating := ParseCodeableConcept(jsn.vObj['rating']);
    if jsn.has('rater') or jsn.has('_rater') then
        value.raterElement := parseString(jsn.node['rater'], jsn.vObj['_rater']);
    if jsn.has('subcomponent') then
      iterateArray(jsn.vArr['subcomponent'], value.subcomponentList, parseEvidenceCertainty);
end;

procedure TFHIRJsonComposer.ComposeEvidenceCertainty(json : TJSONWriter; name : string; value : TFhirEvidenceCertainty; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'rating', value.rating);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'rater', value.raterElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'rater', value.raterElement, false);
  if (SummaryOption in [soFull, soData]) and (value.subcomponentList.Count > 0) then
  begin
    startArray(json, 'subcomponent', value.subcomponentList, false);
    for i := 0 to value.subcomponentList.Count - 1 do
      ComposeEvidenceCertainty(json, '', value.subcomponentList[i]);
    finishArray(json, value.subcomponentList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEvidence(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidence(jsn)); 
end;

function TFHIRJsonParser.ParseEvidence(jsn : TJsonObject) : TFhirEvidence;
begin
  result := TFhirEvidence.Create;
  try
    ParseEvidenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceProperties(jsn : TJsonObject; value : TFhirEvidence);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('citeAsReference') {a3} then
      value.citeAs := ParseReference(jsn.vObj['citeAsReference']);
    if jsn.has('citeAsMarkdown') or jsn.has('_citeAsMarkdown') then
      value.citeAs := parseMarkdown(jsn.node['citeAsMarkdown'], jsn.vObj['_citeAsMarkdown']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        value.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        value.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseContactDetail);
    if jsn.has('editor') then
      iterateArray(jsn.vArr['editor'], value.editorList, parseContactDetail);
    if jsn.has('reviewer') then
      iterateArray(jsn.vArr['reviewer'], value.reviewerList, parseContactDetail);
    if jsn.has('endorser') then
      iterateArray(jsn.vArr['endorser'], value.endorserList, parseContactDetail);
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], value.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('assertion') or jsn.has('_assertion') then
        value.assertionElement := parseMarkdown(jsn.node['assertion'], jsn.vObj['_assertion']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('variableDefinition') then
      iterateArray(jsn.vArr['variableDefinition'], value.variableDefinitionList, parseEvidenceVariableDefinition);
    if jsn.has('synthesisType') then
        value.synthesisType := ParseCodeableConcept(jsn.vObj['synthesisType']);
    if jsn.has('studyType') then
        value.studyType := ParseCodeableConcept(jsn.vObj['studyType']);
    if jsn.has('statistic') then
      iterateArray(jsn.vArr['statistic'], value.statisticList, parseEvidenceStatistic);
    if jsn.has('certainty') then
      iterateArray(jsn.vArr['certainty'], value.certaintyList, parseEvidenceCertainty);
end;

procedure TFHIRJsonComposer.ComposeEvidence(json : TJSONWriter; name : string; value : TFhirEvidence; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) and (value.citeAs is TFhirReference) then
    ComposeReference(json, 'citeAsReference', TFhirReference(value.citeAs))
  else if (SummaryOption in [soFull, soData]) and (value.citeAs is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'citeAsMarkdown', TFhirMarkdown(value.citeAs), false);
    ComposeMarkdownProps(json, 'citeAsMarkdown', TFhirMarkdown(value.citeAs), false);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.editorList.Count > 0) then
  begin
    startArray(json, 'editor', value.editorList, false);
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(json, '', value.editorList[i]);
    finishArray(json, value.editorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reviewerList.Count > 0) then
  begin
    startArray(json, 'reviewer', value.reviewerList, false);
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(json, '', value.reviewerList[i]);
    finishArray(json, value.reviewerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.endorserList.Count > 0) then
  begin
    startArray(json, 'endorser', value.endorserList, false);
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(json, '', value.endorserList[i]);
    finishArray(json, value.endorserList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedArtifactList.Count > 0) then
  begin
    startArray(json, 'relatedArtifact', value.relatedArtifactList, false);
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', value.relatedArtifactList[i]);
    finishArray(json, value.relatedArtifactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'assertion', value.assertionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'assertion', value.assertionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (value.variableDefinitionList.Count > 0) then
  begin
    startArray(json, 'variableDefinition', value.variableDefinitionList, false);
    for i := 0 to value.variableDefinitionList.Count - 1 do
      ComposeEvidenceVariableDefinition(json, '', value.variableDefinitionList[i]);
    finishArray(json, value.variableDefinitionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'synthesisType', value.synthesisType);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'studyType', value.studyType);
  if (SummaryOption in [soFull, soData]) and (value.statisticList.Count > 0) then
  begin
    startArray(json, 'statistic', value.statisticList, false);
    for i := 0 to value.statisticList.Count - 1 do
      ComposeEvidenceStatistic(json, '', value.statisticList[i]);
    finishArray(json, value.statisticList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.certaintyList.Count > 0) then
  begin
    startArray(json, 'certainty', value.certaintyList, false);
    for i := 0 to value.certaintyList.Count - 1 do
      ComposeEvidenceCertainty(json, '', value.certaintyList[i]);
    finishArray(json, value.certaintyList);
  end;
end;

{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEREPORT}
procedure TFHIRJsonParser.ParseEvidenceReportSubject(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceReportSubject(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceReportSubject(jsn : TJsonObject) : TFhirEvidenceReportSubject;
begin
  result := TFhirEvidenceReportSubject.Create;
  try
    ParseEvidenceReportSubjectProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceReportSubjectProperties(jsn : TJsonObject; value : TFhirEvidenceReportSubject);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('characteristic') then
      iterateArray(jsn.vArr['characteristic'], value.characteristicList, parseEvidenceReportSubjectCharacteristic);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeEvidenceReportSubject(json : TJSONWriter; name : string; value : TFhirEvidenceReportSubject; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.characteristicList.Count > 0) then
  begin
    startArray(json, 'characteristic', value.characteristicList, false);
    for i := 0 to value.characteristicList.Count - 1 do
      ComposeEvidenceReportSubjectCharacteristic(json, '', value.characteristicList[i]);
    finishArray(json, value.characteristicList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEvidenceReportSubjectCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceReportSubjectCharacteristic(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceReportSubjectCharacteristic(jsn : TJsonObject) : TFhirEvidenceReportSubjectCharacteristic;
begin
  result := TFhirEvidenceReportSubjectCharacteristic.Create;
  try
    ParseEvidenceReportSubjectCharacteristicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceReportSubjectCharacteristicProperties(jsn : TJsonObject; value : TFhirEvidenceReportSubjectCharacteristic);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('valueReference') {a3} then
      value.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      value.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('exclude') or jsn.has('_exclude') then
        value.excludeElement := parseBoolean(jsn.node['exclude'], jsn.vObj['_exclude']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeEvidenceReportSubjectCharacteristic(json : TJSONWriter; name : string; value : TFhirEvidenceReportSubjectCharacteristic; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'code', value.code);
  if (value.value is TFhirReference) then
    ComposeReference(json, 'valueReference', TFhirReference(value.value))
  else if (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (value.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(value.value)) 
  else if (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'exclude', value.excludeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'exclude', value.excludeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEvidenceReportRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceReportRelatesTo(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceReportRelatesTo(jsn : TJsonObject) : TFhirEvidenceReportRelatesTo;
begin
  result := TFhirEvidenceReportRelatesTo.Create;
  try
    ParseEvidenceReportRelatesToProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceReportRelatesToProperties(jsn : TJsonObject; value : TFhirEvidenceReportRelatesTo);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirReportRelationshipTypeEnum, SYSTEMS_TFhirReportRelationshipTypeEnum);
    if jsn.has('targetIdentifier') {a4} then
      value.target := ParseIdentifier(jsn.vObj['targetIdentifier']);
    if jsn.has('targetReference') {a3} then
      value.target := ParseReference(jsn.vObj['targetReference']);
end;

procedure TFHIRJsonComposer.ComposeEvidenceReportRelatesTo(json : TJSONWriter; name : string; value : TFhirEvidenceReportRelatesTo; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'code', value.codeElement, CODES_TFhirReportRelationshipTypeEnum, false);
  if (value.target is TFhirIdentifier) then 
    ComposeIdentifier(json, 'targetIdentifier', TFhirIdentifier(value.target)) 
  else if (value.target is TFhirReference) then
    ComposeReference(json, 'targetReference', TFhirReference(value.target));
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEvidenceReportSection(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceReportSection(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceReportSection(jsn : TJsonObject) : TFhirEvidenceReportSection;
begin
  result := TFhirEvidenceReportSection.Create;
  try
    ParseEvidenceReportSectionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceReportSectionProperties(jsn : TJsonObject; value : TFhirEvidenceReportSection);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('focus') then
        value.focus := ParseCodeableConcept(jsn.vObj['focus']);
    if jsn.has('focusReference') then
        value.focusReference := ParseReference(jsn.vObj['focusReference']);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseReference);
    if jsn.has('text') then
        value.text := ParseNarrative(jsn.vObj['text']);
    if jsn.has('mode') or jsn.has('_mode') then
        value.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirListModeEnum, SYSTEMS_TFhirListModeEnum);
    if jsn.has('orderedBy') then
        value.orderedBy := ParseCodeableConcept(jsn.vObj['orderedBy']);
    if jsn.has('entryClassifier') then
      iterateArray(jsn.vArr['entryClassifier'], value.entryClassifierList, parseCodeableConcept);
    if jsn.has('entryReference') then
      iterateArray(jsn.vArr['entryReference'], value.entryReferenceList, parseReference);
    if jsn.has('entryQuantity') then
      iterateArray(jsn.vArr['entryQuantity'], value.entryQuantityList, parseQuantity);
    if jsn.has('emptyReason') then
        value.emptyReason := ParseCodeableConcept(jsn.vObj['emptyReason']);
    if jsn.has('section') then
      iterateArray(jsn.vArr['section'], value.sectionList, parseEvidenceReportSection);
end;

procedure TFHIRJsonComposer.ComposeEvidenceReportSection(json : TJSONWriter; name : string; value : TFhirEvidenceReportSection; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'focus', value.focus);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'focusReference', value.focusReference);
  if (SummaryOption in [soFull, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeReference(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeNarrative(json, 'text', value.text);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'mode', value.modeElement, CODES_TFhirListModeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'orderedBy', value.orderedBy);
  if (SummaryOption in [soFull, soData]) and (value.entryClassifierList.Count > 0) then
  begin
    startArray(json, 'entryClassifier', value.entryClassifierList, false);
    for i := 0 to value.entryClassifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.entryClassifierList[i]);
    finishArray(json, value.entryClassifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.entryReferenceList.Count > 0) then
  begin
    startArray(json, 'entryReference', value.entryReferenceList, false);
    for i := 0 to value.entryReferenceList.Count - 1 do
      ComposeReference(json, '', value.entryReferenceList[i]);
    finishArray(json, value.entryReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.entryQuantityList.Count > 0) then
  begin
    startArray(json, 'entryQuantity', value.entryQuantityList, false);
    for i := 0 to value.entryQuantityList.Count - 1 do
      ComposeQuantity(json, '', value.entryQuantityList[i]);
    finishArray(json, value.entryQuantityList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'emptyReason', value.emptyReason);
  if (SummaryOption in [soFull, soData]) and (value.sectionList.Count > 0) then
  begin
    startArray(json, 'section', value.sectionList, false);
    for i := 0 to value.sectionList.Count - 1 do
      ComposeEvidenceReportSection(json, '', value.sectionList[i]);
    finishArray(json, value.sectionList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEvidenceReport(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceReport(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceReport(jsn : TJsonObject) : TFhirEvidenceReport;
begin
  result := TFhirEvidenceReport.Create;
  try
    ParseEvidenceReportProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceReportProperties(jsn : TJsonObject; value : TFhirEvidenceReport);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('relatedIdentifier') then
      iterateArray(jsn.vArr['relatedIdentifier'], value.relatedIdentifierList, parseIdentifier);
    if jsn.has('citeAsReference') {a3} then
      value.citeAs := ParseReference(jsn.vObj['citeAsReference']);
    if jsn.has('citeAsMarkdown') or jsn.has('_citeAsMarkdown') then
      value.citeAs := parseMarkdown(jsn.node['citeAsMarkdown'], jsn.vObj['_citeAsMarkdown']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], value.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('subject') then
        value.subject := ParseEvidenceReportSubject(jsn.vObj['subject']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseContactDetail);
    if jsn.has('editor') then
      iterateArray(jsn.vArr['editor'], value.editorList, parseContactDetail);
    if jsn.has('reviewer') then
      iterateArray(jsn.vArr['reviewer'], value.reviewerList, parseContactDetail);
    if jsn.has('endorser') then
      iterateArray(jsn.vArr['endorser'], value.endorserList, parseContactDetail);
    if jsn.has('relatesTo') then
      iterateArray(jsn.vArr['relatesTo'], value.relatesToList, parseEvidenceReportRelatesTo);
    if jsn.has('section') then
      iterateArray(jsn.vArr['section'], value.sectionList, parseEvidenceReportSection);
end;

procedure TFHIRJsonComposer.ComposeEvidenceReport(json : TJSONWriter; name : string; value : TFhirEvidenceReport; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.relatedIdentifierList.Count > 0) then
  begin
    startArray(json, 'relatedIdentifier', value.relatedIdentifierList, false);
    for i := 0 to value.relatedIdentifierList.Count - 1 do
      ComposeIdentifier(json, '', value.relatedIdentifierList[i]);
    finishArray(json, value.relatedIdentifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.citeAs is TFhirReference) then
    ComposeReference(json, 'citeAsReference', TFhirReference(value.citeAs))
  else if (SummaryOption in [soFull, soData]) and (value.citeAs is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'citeAsMarkdown', TFhirMarkdown(value.citeAs), false);
    ComposeMarkdownProps(json, 'citeAsMarkdown', TFhirMarkdown(value.citeAs), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedArtifactList.Count > 0) then
  begin
    startArray(json, 'relatedArtifact', value.relatedArtifactList, false);
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', value.relatedArtifactList[i]);
    finishArray(json, value.relatedArtifactList);
  end;
  ComposeEvidenceReportSubject(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.editorList.Count > 0) then
  begin
    startArray(json, 'editor', value.editorList, false);
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(json, '', value.editorList[i]);
    finishArray(json, value.editorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reviewerList.Count > 0) then
  begin
    startArray(json, 'reviewer', value.reviewerList, false);
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(json, '', value.reviewerList[i]);
    finishArray(json, value.reviewerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.endorserList.Count > 0) then
  begin
    startArray(json, 'endorser', value.endorserList, false);
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(json, '', value.endorserList[i]);
    finishArray(json, value.endorserList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatesToList.Count > 0) then
  begin
    startArray(json, 'relatesTo', value.relatesToList, false);
    for i := 0 to value.relatesToList.Count - 1 do
      ComposeEvidenceReportRelatesTo(json, '', value.relatesToList[i]);
    finishArray(json, value.relatesToList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.sectionList.Count > 0) then
  begin
    startArray(json, 'section', value.sectionList, false);
    for i := 0 to value.sectionList.Count - 1 do
      ComposeEvidenceReportSection(json, '', value.sectionList[i]);
    finishArray(json, value.sectionList);
  end;
end;

{$ENDIF FHIR_EVIDENCEREPORT}
{$IFDEF FHIR_EVIDENCEVARIABLE}
procedure TFHIRJsonParser.ParseEvidenceVariableCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceVariableCharacteristic(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceVariableCharacteristic(jsn : TJsonObject) : TFhirEvidenceVariableCharacteristic;
begin
  result := TFhirEvidenceVariableCharacteristic.Create;
  try
    ParseEvidenceVariableCharacteristicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceVariableCharacteristicProperties(jsn : TJsonObject; value : TFhirEvidenceVariableCharacteristic);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('definitionReference') {a3} then
      value.definition := ParseReference(jsn.vObj['definitionReference']);
    if jsn.has('definitionCanonical') or jsn.has('_definitionCanonical') then
      value.definition := parseCanonical(jsn.node['definitionCanonical'], jsn.vObj['_definitionCanonical']);
    if jsn.has('definitionCodeableConcept') {a4} then
      value.definition := ParseCodeableConcept(jsn.vObj['definitionCodeableConcept']);
    if jsn.has('definitionExpression') {a4} then
      value.definition := ParseExpression(jsn.vObj['definitionExpression']);
    if jsn.has('method') then
        value.method := ParseCodeableConcept(jsn.vObj['method']);
    if jsn.has('device') then
        value.device := ParseReference(jsn.vObj['device']);
    if jsn.has('exclude') or jsn.has('_exclude') then
        value.excludeElement := parseBoolean(jsn.node['exclude'], jsn.vObj['_exclude']);
    if jsn.has('timeFromStart') then
        value.timeFromStart := ParseEvidenceVariableCharacteristicTimeFromStart(jsn.vObj['timeFromStart']);
    if jsn.has('groupMeasure') or jsn.has('_groupMeasure') then
        value.groupMeasureElement := parseEnum(jsn.path+'/groupMeasure', jsn.node['groupMeasure'], jsn.vObj['_groupMeasure'], CODES_TFhirGroupMeasureEnum, SYSTEMS_TFhirGroupMeasureEnum);
end;

procedure TFHIRJsonComposer.ComposeEvidenceVariableCharacteristic(json : TJSONWriter; name : string; value : TFhirEvidenceVariableCharacteristic; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (value.definition is TFhirReference) then
    ComposeReference(json, 'definitionReference', TFhirReference(value.definition))
  else if (value.definition is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'definitionCanonical', TFhirCanonical(value.definition), false);
    ComposeCanonicalProps(json, 'definitionCanonical', TFhirCanonical(value.definition), false);
  end
  else if (value.definition is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'definitionCodeableConcept', TFhirCodeableConcept(value.definition)) 
  else if (value.definition is TFhirExpression) then 
    ComposeExpression(json, 'definitionExpression', TFhirExpression(value.definition)) ;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'method', value.method);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'device', value.device);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'exclude', value.excludeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'exclude', value.excludeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEvidenceVariableCharacteristicTimeFromStart(json, 'timeFromStart', value.timeFromStart);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'groupMeasure', value.groupMeasureElement, CODES_TFhirGroupMeasureEnum, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEvidenceVariableCharacteristicTimeFromStart(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceVariableCharacteristicTimeFromStart(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceVariableCharacteristicTimeFromStart(jsn : TJsonObject) : TFhirEvidenceVariableCharacteristicTimeFromStart;
begin
  result := TFhirEvidenceVariableCharacteristicTimeFromStart.Create;
  try
    ParseEvidenceVariableCharacteristicTimeFromStartProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceVariableCharacteristicTimeFromStartProperties(jsn : TJsonObject; value : TFhirEvidenceVariableCharacteristicTimeFromStart);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('range') then
        value.range := ParseRange(jsn.vObj['range']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeEvidenceVariableCharacteristicTimeFromStart(json : TJSONWriter; name : string; value : TFhirEvidenceVariableCharacteristicTimeFromStart; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(json, 'range', value.range);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEvidenceVariableCategory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceVariableCategory(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceVariableCategory(jsn : TJsonObject) : TFhirEvidenceVariableCategory;
begin
  result := TFhirEvidenceVariableCategory.Create;
  try
    ParseEvidenceVariableCategoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceVariableCategoryProperties(jsn : TJsonObject; value : TFhirEvidenceVariableCategory);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      value.value := ParseRange(jsn.vObj['valueRange']);
end;

procedure TFHIRJsonComposer.ComposeEvidenceVariableCategory(json : TJSONWriter; name : string; value : TFhirEvidenceVariableCategory; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(value.value)) ;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseEvidenceVariable(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEvidenceVariable(jsn)); 
end;

function TFHIRJsonParser.ParseEvidenceVariable(jsn : TJsonObject) : TFhirEvidenceVariable;
begin
  result := TFhirEvidenceVariable.Create;
  try
    ParseEvidenceVariableProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEvidenceVariableProperties(jsn : TJsonObject; value : TFhirEvidenceVariable);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('shortTitle') or jsn.has('_shortTitle') then
        value.shortTitleElement := parseString(jsn.node['shortTitle'], jsn.vObj['_shortTitle']);
    if jsn.has('subtitle') or jsn.has('_subtitle') then
        value.subtitleElement := parseString(jsn.node['subtitle'], jsn.vObj['_subtitle']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseContactDetail);
    if jsn.has('editor') then
      iterateArray(jsn.vArr['editor'], value.editorList, parseContactDetail);
    if jsn.has('reviewer') then
      iterateArray(jsn.vArr['reviewer'], value.reviewerList, parseContactDetail);
    if jsn.has('endorser') then
      iterateArray(jsn.vArr['endorser'], value.endorserList, parseContactDetail);
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], value.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('actual') or jsn.has('_actual') then
        value.actualElement := parseBoolean(jsn.node['actual'], jsn.vObj['_actual']);
    if jsn.has('characteristicCombination') or jsn.has('_characteristicCombination') then
        value.characteristicCombinationElement := parseEnum(jsn.path+'/characteristicCombination', jsn.node['characteristicCombination'], jsn.vObj['_characteristicCombination'], CODES_TFhirCharacteristicCombinationEnum, SYSTEMS_TFhirCharacteristicCombinationEnum);
    if jsn.has('characteristic') then
      iterateArray(jsn.vArr['characteristic'], value.characteristicList, parseEvidenceVariableCharacteristic);
    if jsn.has('handling') or jsn.has('_handling') then
        value.handlingElement := parseEnum(jsn.path+'/handling', jsn.node['handling'], jsn.vObj['_handling'], CODES_TFhirEvidenceVariableHandlingEnum, SYSTEMS_TFhirEvidenceVariableHandlingEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseEvidenceVariableCategory);
end;

procedure TFHIRJsonComposer.ComposeEvidenceVariable(json : TJSONWriter; name : string; value : TFhirEvidenceVariable; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'shortTitle', value.shortTitleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'shortTitle', value.shortTitleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'subtitle', value.subtitleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'subtitle', value.subtitleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.editorList.Count > 0) then
  begin
    startArray(json, 'editor', value.editorList, false);
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(json, '', value.editorList[i]);
    finishArray(json, value.editorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reviewerList.Count > 0) then
  begin
    startArray(json, 'reviewer', value.reviewerList, false);
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(json, '', value.reviewerList[i]);
    finishArray(json, value.reviewerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.endorserList.Count > 0) then
  begin
    startArray(json, 'endorser', value.endorserList, false);
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(json, '', value.endorserList[i]);
    finishArray(json, value.endorserList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedArtifactList.Count > 0) then
  begin
    startArray(json, 'relatedArtifact', value.relatedArtifactList, false);
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', value.relatedArtifactList[i]);
    finishArray(json, value.relatedArtifactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'actual', value.actualElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'actual', value.actualElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'characteristicCombination', value.characteristicCombinationElement, CODES_TFhirCharacteristicCombinationEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.characteristicList.Count > 0) then
  begin
    startArray(json, 'characteristic', value.characteristicList, false);
    for i := 0 to value.characteristicList.Count - 1 do
      ComposeEvidenceVariableCharacteristic(json, '', value.characteristicList[i]);
    finishArray(json, value.characteristicList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'handling', value.handlingElement, CODES_TFhirEvidenceVariableHandlingEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeEvidenceVariableCategory(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
end;

{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
procedure TFHIRJsonParser.ParseExampleScenarioActor(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioActor(jsn)); 
end;

function TFHIRJsonParser.ParseExampleScenarioActor(jsn : TJsonObject) : TFhirExampleScenarioActor;
begin
  result := TFhirExampleScenarioActor.Create;
  try
    ParseExampleScenarioActorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioActorProperties(jsn : TJsonObject; value : TFhirExampleScenarioActor);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('actorId') or jsn.has('_actorId') then
        value.actorIdElement := parseString(jsn.node['actorId'], jsn.vObj['_actorId']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirExampleScenarioActorTypeEnum, SYSTEMS_TFhirExampleScenarioActorTypeEnum);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioActor(json : TJSONWriter; name : string; value : TFhirExampleScenarioActor; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'actorId', value.actorIdElement, false);
  ComposeStringProps(json, 'actorId', value.actorIdElement, false);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirExampleScenarioActorTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExampleScenarioInstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioInstance(jsn)); 
end;

function TFHIRJsonParser.ParseExampleScenarioInstance(jsn : TJsonObject) : TFhirExampleScenarioInstance;
begin
  result := TFhirExampleScenarioInstance.Create;
  try
    ParseExampleScenarioInstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioInstanceProperties(jsn : TJsonObject; value : TFhirExampleScenarioInstance);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('resourceId') or jsn.has('_resourceId') then
        value.resourceIdElement := parseString(jsn.node['resourceId'], jsn.vObj['_resourceId']);
    if jsn.has('resourceType') or jsn.has('_resourceType') then
        value.resourceTypeElement := parseEnum(jsn.path+'/resourceType', jsn.node['resourceType'], jsn.vObj['_resourceType'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('version') then
      iterateArray(jsn.vArr['version'], value.versionList, parseExampleScenarioInstanceVersion);
    if jsn.has('containedInstance') then
      iterateArray(jsn.vArr['containedInstance'], value.containedInstanceList, parseExampleScenarioInstanceContainedInstance);
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioInstance(json : TJSONWriter; name : string; value : TFhirExampleScenarioInstance; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'resourceId', value.resourceIdElement, false);
  ComposeStringProps(json, 'resourceId', value.resourceIdElement, false);
  ComposeEnumValue(json, 'resourceType', value.resourceTypeElement, CODES_TFhirResourceTypesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.versionList.Count > 0) then
  begin
    startArray(json, 'version', value.versionList, false);
    for i := 0 to value.versionList.Count - 1 do
      ComposeExampleScenarioInstanceVersion(json, '', value.versionList[i]);
    finishArray(json, value.versionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.containedInstanceList.Count > 0) then
  begin
    startArray(json, 'containedInstance', value.containedInstanceList, false);
    for i := 0 to value.containedInstanceList.Count - 1 do
      ComposeExampleScenarioInstanceContainedInstance(json, '', value.containedInstanceList[i]);
    finishArray(json, value.containedInstanceList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExampleScenarioInstanceVersion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioInstanceVersion(jsn)); 
end;

function TFHIRJsonParser.ParseExampleScenarioInstanceVersion(jsn : TJsonObject) : TFhirExampleScenarioInstanceVersion;
begin
  result := TFhirExampleScenarioInstanceVersion.Create;
  try
    ParseExampleScenarioInstanceVersionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioInstanceVersionProperties(jsn : TJsonObject; value : TFhirExampleScenarioInstanceVersion);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('versionId') or jsn.has('_versionId') then
        value.versionIdElement := parseString(jsn.node['versionId'], jsn.vObj['_versionId']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioInstanceVersion(json : TJSONWriter; name : string; value : TFhirExampleScenarioInstanceVersion; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'versionId', value.versionIdElement, false);
  ComposeStringProps(json, 'versionId', value.versionIdElement, false);
  ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExampleScenarioInstanceContainedInstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioInstanceContainedInstance(jsn)); 
end;

function TFHIRJsonParser.ParseExampleScenarioInstanceContainedInstance(jsn : TJsonObject) : TFhirExampleScenarioInstanceContainedInstance;
begin
  result := TFhirExampleScenarioInstanceContainedInstance.Create;
  try
    ParseExampleScenarioInstanceContainedInstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioInstanceContainedInstanceProperties(jsn : TJsonObject; value : TFhirExampleScenarioInstanceContainedInstance);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('resourceId') or jsn.has('_resourceId') then
        value.resourceIdElement := parseString(jsn.node['resourceId'], jsn.vObj['_resourceId']);
    if jsn.has('versionId') or jsn.has('_versionId') then
        value.versionIdElement := parseString(jsn.node['versionId'], jsn.vObj['_versionId']);
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioInstanceContainedInstance(json : TJSONWriter; name : string; value : TFhirExampleScenarioInstanceContainedInstance; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'resourceId', value.resourceIdElement, false);
  ComposeStringProps(json, 'resourceId', value.resourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'versionId', value.versionIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'versionId', value.versionIdElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcess(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioProcess(jsn)); 
end;

function TFHIRJsonParser.ParseExampleScenarioProcess(jsn : TJsonObject) : TFhirExampleScenarioProcess;
begin
  result := TFhirExampleScenarioProcess.Create;
  try
    ParseExampleScenarioProcessProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessProperties(jsn : TJsonObject; value : TFhirExampleScenarioProcess);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('preConditions') or jsn.has('_preConditions') then
        value.preConditionsElement := parseMarkdown(jsn.node['preConditions'], jsn.vObj['_preConditions']);
    if jsn.has('postConditions') or jsn.has('_postConditions') then
        value.postConditionsElement := parseMarkdown(jsn.node['postConditions'], jsn.vObj['_postConditions']);
    if jsn.has('step') then
      iterateArray(jsn.vArr['step'], value.stepList, parseExampleScenarioProcessStep);
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioProcess(json : TJSONWriter; name : string; value : TFhirExampleScenarioProcess; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'title', value.titleElement, false);
  ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'preConditions', value.preConditionsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'preConditions', value.preConditionsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'postConditions', value.postConditionsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'postConditions', value.postConditionsElement, false);
  if (SummaryOption in [soFull, soData]) and (value.stepList.Count > 0) then
  begin
    startArray(json, 'step', value.stepList, false);
    for i := 0 to value.stepList.Count - 1 do
      ComposeExampleScenarioProcessStep(json, '', value.stepList[i]);
    finishArray(json, value.stepList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessStep(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioProcessStep(jsn)); 
end;

function TFHIRJsonParser.ParseExampleScenarioProcessStep(jsn : TJsonObject) : TFhirExampleScenarioProcessStep;
begin
  result := TFhirExampleScenarioProcessStep.Create;
  try
    ParseExampleScenarioProcessStepProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessStepProperties(jsn : TJsonObject; value : TFhirExampleScenarioProcessStep);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('process') then
      iterateArray(jsn.vArr['process'], value.processList, parseExampleScenarioProcess);
    if jsn.has('pause') or jsn.has('_pause') then
        value.pauseElement := parseBoolean(jsn.node['pause'], jsn.vObj['_pause']);
    if jsn.has('operation') then
        value.operation := ParseExampleScenarioProcessStepOperation(jsn.vObj['operation']);
    if jsn.has('alternative') then
      iterateArray(jsn.vArr['alternative'], value.alternativeList, parseExampleScenarioProcessStepAlternative);
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioProcessStep(json : TJSONWriter; name : string; value : TFhirExampleScenarioProcessStep; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.processList.Count > 0) then
  begin
    startArray(json, 'process', value.processList, false);
    for i := 0 to value.processList.Count - 1 do
      ComposeExampleScenarioProcess(json, '', value.processList[i]);
    finishArray(json, value.processList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'pause', value.pauseElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'pause', value.pauseElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeExampleScenarioProcessStepOperation(json, 'operation', value.operation);
  if (SummaryOption in [soFull, soData]) and (value.alternativeList.Count > 0) then
  begin
    startArray(json, 'alternative', value.alternativeList, false);
    for i := 0 to value.alternativeList.Count - 1 do
      ComposeExampleScenarioProcessStepAlternative(json, '', value.alternativeList[i]);
    finishArray(json, value.alternativeList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessStepOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioProcessStepOperation(jsn)); 
end;

function TFHIRJsonParser.ParseExampleScenarioProcessStepOperation(jsn : TJsonObject) : TFhirExampleScenarioProcessStepOperation;
begin
  result := TFhirExampleScenarioProcessStepOperation.Create;
  try
    ParseExampleScenarioProcessStepOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessStepOperationProperties(jsn : TJsonObject; value : TFhirExampleScenarioProcessStepOperation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('number') or jsn.has('_number') then
        value.numberElement := parseString(jsn.node['number'], jsn.vObj['_number']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseString(jsn.node['type'], jsn.vObj['_type']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('initiator') or jsn.has('_initiator') then
        value.initiatorElement := parseString(jsn.node['initiator'], jsn.vObj['_initiator']);
    if jsn.has('receiver') or jsn.has('_receiver') then
        value.receiverElement := parseString(jsn.node['receiver'], jsn.vObj['_receiver']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('initiatorActive') or jsn.has('_initiatorActive') then
        value.initiatorActiveElement := parseBoolean(jsn.node['initiatorActive'], jsn.vObj['_initiatorActive']);
    if jsn.has('receiverActive') or jsn.has('_receiverActive') then
        value.receiverActiveElement := parseBoolean(jsn.node['receiverActive'], jsn.vObj['_receiverActive']);
    if jsn.has('request') then
        value.request := ParseExampleScenarioInstanceContainedInstance(jsn.vObj['request']);
    if jsn.has('response') then
        value.response := ParseExampleScenarioInstanceContainedInstance(jsn.vObj['response']);
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioProcessStepOperation(json : TJSONWriter; name : string; value : TFhirExampleScenarioProcessStepOperation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'number', value.numberElement, false);
  ComposeStringProps(json, 'number', value.numberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'type', value.type_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'type', value.type_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'initiator', value.initiatorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'initiator', value.initiatorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'receiver', value.receiverElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'receiver', value.receiverElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'initiatorActive', value.initiatorActiveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'initiatorActive', value.initiatorActiveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'receiverActive', value.receiverActiveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'receiverActive', value.receiverActiveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeExampleScenarioInstanceContainedInstance(json, 'request', value.request);
  if (SummaryOption in [soFull, soData]) then
    ComposeExampleScenarioInstanceContainedInstance(json, 'response', value.response);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessStepAlternative(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenarioProcessStepAlternative(jsn)); 
end;

function TFHIRJsonParser.ParseExampleScenarioProcessStepAlternative(jsn : TJsonObject) : TFhirExampleScenarioProcessStepAlternative;
begin
  result := TFhirExampleScenarioProcessStepAlternative.Create;
  try
    ParseExampleScenarioProcessStepAlternativeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProcessStepAlternativeProperties(jsn : TJsonObject; value : TFhirExampleScenarioProcessStepAlternative);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('step') then
      iterateArray(jsn.vArr['step'], value.stepList, parseExampleScenarioProcessStep);
end;

procedure TFHIRJsonComposer.ComposeExampleScenarioProcessStepAlternative(json : TJSONWriter; name : string; value : TFhirExampleScenarioProcessStepAlternative; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'title', value.titleElement, false);
  ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.stepList.Count > 0) then
  begin
    startArray(json, 'step', value.stepList, false);
    for i := 0 to value.stepList.Count - 1 do
      ComposeExampleScenarioProcessStep(json, '', value.stepList[i]);
    finishArray(json, value.stepList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExampleScenario(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExampleScenario(jsn)); 
end;

function TFHIRJsonParser.ParseExampleScenario(jsn : TJsonObject) : TFhirExampleScenario;
begin
  result := TFhirExampleScenario.Create;
  try
    ParseExampleScenarioProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExampleScenarioProperties(jsn : TJsonObject; value : TFhirExampleScenario);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('actor') then
      iterateArray(jsn.vArr['actor'], value.actorList, parseExampleScenarioActor);
    if jsn.has('instance') then
      iterateArray(jsn.vArr['instance'], value.instanceList, parseExampleScenarioInstance);
    if jsn.has('process') then
      iterateArray(jsn.vArr['process'], value.processList, parseExampleScenarioProcess);
      if jsn.has('workflow') or jsn.has('_workflow') then
      iteratePrimitiveArray(jsn.vArr['workflow'], jsn.vArr['_workflow'], value.workflowList, parseCanonical);
end;

procedure TFHIRJsonComposer.ComposeExampleScenario(json : TJSONWriter; name : string; value : TFhirExampleScenario; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and (value.actorList.Count > 0) then
  begin
    startArray(json, 'actor', value.actorList, false);
    for i := 0 to value.actorList.Count - 1 do
      ComposeExampleScenarioActor(json, '', value.actorList[i]);
    finishArray(json, value.actorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.instanceList.Count > 0) then
  begin
    startArray(json, 'instance', value.instanceList, false);
    for i := 0 to value.instanceList.Count - 1 do
      ComposeExampleScenarioInstance(json, '', value.instanceList[i]);
    finishArray(json, value.instanceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.processList.Count > 0) then
  begin
    startArray(json, 'process', value.processList, false);
    for i := 0 to value.processList.Count - 1 do
      ComposeExampleScenarioProcess(json, '', value.processList[i]);
    finishArray(json, value.processList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.workflowList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.workflowList.Count - 1 do
    begin
      ext := ext or ((value.workflowList[i].id <> '') or (value.workflowList[i].hasExtensionList) {no-comments or (value.workflowList[i].hasComments)});
      val := val or (value.workflowList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'workflow', value.workflowList, true);
      for i := 0 to value.workflowList.Count - 1 do
        ComposeCanonicalValue(json, '', value.workflowList[i], true);
      finishArray(json, value.workflowList);
    end;
    if ext then
    begin
      startArray(json, '_workflow', value.workflowList, false);
      for i := 0 to value.workflowList.Count - 1 do
        ComposeCanonicalProps(json, '', value.workflowList[i], true);
      finishArray(json, value.workflowList);
    end;
  end;
end;

{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
procedure TFHIRJsonParser.ParseExplanationOfBenefitRelated(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitRelated(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitRelated(jsn : TJsonObject) : TFhirExplanationOfBenefitRelated;
begin
  result := TFhirExplanationOfBenefitRelated.Create;
  try
    ParseExplanationOfBenefitRelatedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitRelatedProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitRelated);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('claim') then
        value.claim := ParseReference(jsn.vObj['claim']);
    if jsn.has('relationship') then
        value.relationship := ParseCodeableConcept(jsn.vObj['relationship']);
    if jsn.has('reference') then
        value.reference := ParseIdentifier(jsn.vObj['reference']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitRelated(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitRelated; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'claim', value.claim);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'relationship', value.relationship);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'reference', value.reference);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitPayee(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitPayee(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitPayee(jsn : TJsonObject) : TFhirExplanationOfBenefitPayee;
begin
  result := TFhirExplanationOfBenefitPayee.Create;
  try
    ParseExplanationOfBenefitPayeeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitPayeeProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitPayee);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('party') then
        value.party := ParseReference(jsn.vObj['party']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitPayee(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitPayee; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'party', value.party);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitCareTeam(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitCareTeam(jsn : TJsonObject) : TFhirExplanationOfBenefitCareTeam;
begin
  result := TFhirExplanationOfBenefitCareTeam.Create;
  try
    ParseExplanationOfBenefitCareTeamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitCareTeamProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitCareTeam);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('provider') then
        value.provider := ParseReference(jsn.vObj['provider']);
    if jsn.has('responsible') or jsn.has('_responsible') then
        value.responsibleElement := parseBoolean(jsn.node['responsible'], jsn.vObj['_responsible']);
    if jsn.has('role') then
        value.role := ParseCodeableConcept(jsn.vObj['role']);
    if jsn.has('qualification') then
        value.qualification := ParseCodeableConcept(jsn.vObj['qualification']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitCareTeam(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitCareTeam; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  ComposeReference(json, 'provider', value.provider);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'responsible', value.responsibleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'responsible', value.responsibleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', value.role);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'qualification', value.qualification);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitSupportingInfo(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitSupportingInfo(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitSupportingInfo(jsn : TJsonObject) : TFhirExplanationOfBenefitSupportingInfo;
begin
  result := TFhirExplanationOfBenefitSupportingInfo.Create;
  try
    ParseExplanationOfBenefitSupportingInfoProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitSupportingInfoProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitSupportingInfo);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('timingPeriod') {a4} then
      value.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDate') or jsn.has('_timingDate') then
      value.timing := parseDate(jsn.node['timingDate'], jsn.vObj['_timingDate']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueReference') {a3} then
      value.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('reason') then
        value.reason := ParseCoding(jsn.vObj['reason']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitSupportingInfo(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitSupportingInfo; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  ComposeCodeableConcept(json, 'category', value.category);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) and (value.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDate) then 
  begin
    ComposeDateValue(json, 'timingDate', TFhirDate(value.timing), false);
    ComposeDateProps(json, 'timingDate', TFhirDate(value.timing), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirReference) then
    ComposeReference(json, 'valueReference', TFhirReference(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'reason', value.reason);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitDiagnosis(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitDiagnosis(jsn : TJsonObject) : TFhirExplanationOfBenefitDiagnosis;
begin
  result := TFhirExplanationOfBenefitDiagnosis.Create;
  try
    ParseExplanationOfBenefitDiagnosisProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitDiagnosisProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitDiagnosis);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('diagnosisCodeableConcept') {a4} then
      value.diagnosis := ParseCodeableConcept(jsn.vObj['diagnosisCodeableConcept']);
    if jsn.has('diagnosisReference') {a3} then
      value.diagnosis := ParseReference(jsn.vObj['diagnosisReference']);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('onAdmission') then
        value.onAdmission := ParseCodeableConcept(jsn.vObj['onAdmission']);
    if jsn.has('packageCode') then
        value.packageCode := ParseCodeableConcept(jsn.vObj['packageCode']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitDiagnosis(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitDiagnosis; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  if (value.diagnosis is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'diagnosisCodeableConcept', TFhirCodeableConcept(value.diagnosis)) 
  else if (value.diagnosis is TFhirReference) then
    ComposeReference(json, 'diagnosisReference', TFhirReference(value.diagnosis));
  if (SummaryOption in [soFull, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'onAdmission', value.onAdmission);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'packageCode', value.packageCode);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitProcedure(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitProcedure(jsn : TJsonObject) : TFhirExplanationOfBenefitProcedure;
begin
  result := TFhirExplanationOfBenefitProcedure.Create;
  try
    ParseExplanationOfBenefitProcedureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProcedureProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitProcedure);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('procedureCodeableConcept') {a4} then
      value.procedure_ := ParseCodeableConcept(jsn.vObj['procedureCodeableConcept']);
    if jsn.has('procedureReference') {a3} then
      value.procedure_ := ParseReference(jsn.vObj['procedureReference']);
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], value.udiList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitProcedure(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitProcedure; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (value.procedure_ is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'procedureCodeableConcept', TFhirCodeableConcept(value.procedure_)) 
  else if (value.procedure_ is TFhirReference) then
    ComposeReference(json, 'procedureReference', TFhirReference(value.procedure_));
  if (SummaryOption in [soFull, soData]) and (value.udiList.Count > 0) then
  begin
    startArray(json, 'udi', value.udiList, false);
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(json, '', value.udiList[i]);
    finishArray(json, value.udiList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitInsurance(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitInsurance(jsn : TJsonObject) : TFhirExplanationOfBenefitInsurance;
begin
  result := TFhirExplanationOfBenefitInsurance.Create;
  try
    ParseExplanationOfBenefitInsuranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitInsuranceProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitInsurance);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('focal') or jsn.has('_focal') then
        value.focalElement := parseBoolean(jsn.node['focal'], jsn.vObj['_focal']);
    if jsn.has('coverage') then
        value.coverage := ParseReference(jsn.vObj['coverage']);
      if jsn.has('preAuthRef') or jsn.has('_preAuthRef') then
      iteratePrimitiveArray(jsn.vArr['preAuthRef'], jsn.vArr['_preAuthRef'], value.preAuthRefList, parseString);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitInsurance(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitInsurance; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeBooleanValue(json, 'focal', value.focalElement, false);
  ComposeBooleanProps(json, 'focal', value.focalElement, false);
  ComposeReference(json, 'coverage', value.coverage);
  if (SummaryOption in [soFull, soData]) and (value.preAuthRefList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.preAuthRefList.Count - 1 do
    begin
      ext := ext or ((value.preAuthRefList[i].id <> '') or (value.preAuthRefList[i].hasExtensionList) {no-comments or (value.preAuthRefList[i].hasComments)});
      val := val or (value.preAuthRefList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'preAuthRef', value.preAuthRefList, true);
      for i := 0 to value.preAuthRefList.Count - 1 do
        ComposeStringValue(json, '', value.preAuthRefList[i], true);
      finishArray(json, value.preAuthRefList);
    end;
    if ext then
    begin
      startArray(json, '_preAuthRef', value.preAuthRefList, false);
      for i := 0 to value.preAuthRefList.Count - 1 do
        ComposeStringProps(json, '', value.preAuthRefList[i], true);
      finishArray(json, value.preAuthRefList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAccident(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitAccident(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitAccident(jsn : TJsonObject) : TFhirExplanationOfBenefitAccident;
begin
  result := TFhirExplanationOfBenefitAccident.Create;
  try
    ParseExplanationOfBenefitAccidentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAccidentProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitAccident);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDate(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('locationAddress') {a4} then
      value.location := ParseAddress(jsn.vObj['locationAddress']);
    if jsn.has('locationReference') {a3} then
      value.location := ParseReference(jsn.vObj['locationReference']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitAccident(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitAccident; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.location is TFhirAddress) then 
    ComposeAddress(json, 'locationAddress', TFhirAddress(value.location)) 
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirReference) then
    ComposeReference(json, 'locationReference', TFhirReference(value.location));
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitItem(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitItem(jsn : TJsonObject) : TFhirExplanationOfBenefitItem;
begin
  result := TFhirExplanationOfBenefitItem.Create;
  try
    ParseExplanationOfBenefitItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitItem);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
      if jsn.has('careTeamSequence') or jsn.has('_careTeamSequence') then
      iteratePrimitiveArray(jsn.vArr['careTeamSequence'], jsn.vArr['_careTeamSequence'], value.careTeamSequenceList, parsePositiveInt);
      if jsn.has('diagnosisSequence') or jsn.has('_diagnosisSequence') then
      iteratePrimitiveArray(jsn.vArr['diagnosisSequence'], jsn.vArr['_diagnosisSequence'], value.diagnosisSequenceList, parsePositiveInt);
      if jsn.has('procedureSequence') or jsn.has('_procedureSequence') then
      iteratePrimitiveArray(jsn.vArr['procedureSequence'], jsn.vArr['_procedureSequence'], value.procedureSequenceList, parsePositiveInt);
      if jsn.has('informationSequence') or jsn.has('_informationSequence') then
      iteratePrimitiveArray(jsn.vArr['informationSequence'], jsn.vArr['_informationSequence'], value.informationSequenceList, parsePositiveInt);
    if jsn.has('revenue') then
        value.revenue := ParseCodeableConcept(jsn.vObj['revenue']);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('productOrService') then
        value.productOrService := ParseCodeableConcept(jsn.vObj['productOrService']);
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], value.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], value.programCodeList, parseCodeableConcept);
    if jsn.has('servicedPeriod') {a4} then
      value.serviced := ParsePeriod(jsn.vObj['servicedPeriod']);
    if jsn.has('servicedDate') or jsn.has('_servicedDate') then
      value.serviced := parseDate(jsn.node['servicedDate'], jsn.vObj['_servicedDate']);
    if jsn.has('locationCodeableConcept') {a4} then
      value.location := ParseCodeableConcept(jsn.vObj['locationCodeableConcept']);
    if jsn.has('locationAddress') {a4} then
      value.location := ParseAddress(jsn.vObj['locationAddress']);
    if jsn.has('locationReference') {a3} then
      value.location := ParseReference(jsn.vObj['locationReference']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('unitPrice') then
        value.unitPrice := ParseMoney(jsn.vObj['unitPrice']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('net') then
        value.net := ParseMoney(jsn.vObj['net']);
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], value.udiList, parseReference);
    if jsn.has('bodySite') then
        value.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);
    if jsn.has('subSite') then
      iterateArray(jsn.vArr['subSite'], value.subSiteList, parseCodeableConcept);
    if jsn.has('encounter') then
      iterateArray(jsn.vArr['encounter'], value.encounterList, parseReference);
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], value.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], value.adjudicationList, parseExplanationOfBenefitItemAdjudication);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], value.detailList, parseExplanationOfBenefitItemDetail);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitItem(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) and (value.careTeamSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.careTeamSequenceList.Count - 1 do
    begin
      ext := ext or ((value.careTeamSequenceList[i].id <> '') or (value.careTeamSequenceList[i].hasExtensionList) {no-comments or (value.careTeamSequenceList[i].hasComments)});
      val := val or (value.careTeamSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'careTeamSequence', value.careTeamSequenceList, true);
      for i := 0 to value.careTeamSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.careTeamSequenceList[i], true);
      finishArray(json, value.careTeamSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_careTeamSequence', value.careTeamSequenceList, false);
      for i := 0 to value.careTeamSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.careTeamSequenceList[i], true);
      finishArray(json, value.careTeamSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.diagnosisSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.diagnosisSequenceList.Count - 1 do
    begin
      ext := ext or ((value.diagnosisSequenceList[i].id <> '') or (value.diagnosisSequenceList[i].hasExtensionList) {no-comments or (value.diagnosisSequenceList[i].hasComments)});
      val := val or (value.diagnosisSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'diagnosisSequence', value.diagnosisSequenceList, true);
      for i := 0 to value.diagnosisSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.diagnosisSequenceList[i], true);
      finishArray(json, value.diagnosisSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_diagnosisSequence', value.diagnosisSequenceList, false);
      for i := 0 to value.diagnosisSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.diagnosisSequenceList[i], true);
      finishArray(json, value.diagnosisSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.procedureSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.procedureSequenceList.Count - 1 do
    begin
      ext := ext or ((value.procedureSequenceList[i].id <> '') or (value.procedureSequenceList[i].hasExtensionList) {no-comments or (value.procedureSequenceList[i].hasComments)});
      val := val or (value.procedureSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'procedureSequence', value.procedureSequenceList, true);
      for i := 0 to value.procedureSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.procedureSequenceList[i], true);
      finishArray(json, value.procedureSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_procedureSequence', value.procedureSequenceList, false);
      for i := 0 to value.procedureSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.procedureSequenceList[i], true);
      finishArray(json, value.procedureSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.informationSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.informationSequenceList.Count - 1 do
    begin
      ext := ext or ((value.informationSequenceList[i].id <> '') or (value.informationSequenceList[i].hasExtensionList) {no-comments or (value.informationSequenceList[i].hasComments)});
      val := val or (value.informationSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'informationSequence', value.informationSequenceList, true);
      for i := 0 to value.informationSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.informationSequenceList[i], true);
      finishArray(json, value.informationSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_informationSequence', value.informationSequenceList, false);
      for i := 0 to value.informationSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.informationSequenceList[i], true);
      finishArray(json, value.informationSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', value.revenue);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  ComposeCodeableConcept(json, 'productOrService', value.productOrService);
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    startArray(json, 'modifier', value.modifierList, false);
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.modifierList[i]);
    finishArray(json, value.modifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.programCodeList.Count > 0) then
  begin
    startArray(json, 'programCode', value.programCodeList, false);
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.programCodeList[i]);
    finishArray(json, value.programCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirPeriod) then 
    ComposePeriod(json, 'servicedPeriod', TFhirPeriod(value.serviced)) 
  else if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirDate) then 
  begin
    ComposeDateValue(json, 'servicedDate', TFhirDate(value.serviced), false);
    ComposeDateProps(json, 'servicedDate', TFhirDate(value.serviced), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.location is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'locationCodeableConcept', TFhirCodeableConcept(value.location)) 
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirAddress) then 
    ComposeAddress(json, 'locationAddress', TFhirAddress(value.location)) 
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirReference) then
    ComposeReference(json, 'locationReference', TFhirReference(value.location));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', value.unitPrice);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', value.net);
  if (SummaryOption in [soFull, soData]) and (value.udiList.Count > 0) then
  begin
    startArray(json, 'udi', value.udiList, false);
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(json, '', value.udiList[i]);
    finishArray(json, value.udiList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'bodySite', value.bodySite);
  if (SummaryOption in [soFull, soData]) and (value.subSiteList.Count > 0) then
  begin
    startArray(json, 'subSite', value.subSiteList, false);
    for i := 0 to value.subSiteList.Count - 1 do
      ComposeCodeableConcept(json, '', value.subSiteList[i]);
    finishArray(json, value.subSiteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.encounterList.Count > 0) then
  begin
    startArray(json, 'encounter', value.encounterList, false);
    for i := 0 to value.encounterList.Count - 1 do
      ComposeReference(json, '', value.encounterList[i]);
    finishArray(json, value.encounterList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.noteNumberList.Count - 1 do
    begin
      ext := ext or ((value.noteNumberList[i].id <> '') or (value.noteNumberList[i].hasExtensionList) {no-comments or (value.noteNumberList[i].hasComments)});
      val := val or (value.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'noteNumber', value.noteNumberList, true);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
    if ext then
    begin
      startArray(json, '_noteNumber', value.noteNumberList, false);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.adjudicationList.Count > 0) then
  begin
    startArray(json, 'adjudication', value.adjudicationList, false);
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', value.adjudicationList[i]);
    finishArray(json, value.adjudicationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.detailList.Count > 0) then
  begin
    startArray(json, 'detail', value.detailList, false);
    for i := 0 to value.detailList.Count - 1 do
      ComposeExplanationOfBenefitItemDetail(json, '', value.detailList[i]);
    finishArray(json, value.detailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemAdjudication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitItemAdjudication(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitItemAdjudication(jsn : TJsonObject) : TFhirExplanationOfBenefitItemAdjudication;
begin
  result := TFhirExplanationOfBenefitItemAdjudication.Create;
  try
    ParseExplanationOfBenefitItemAdjudicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemAdjudicationProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitItemAdjudication);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('reason') then
        value.reason := ParseCodeableConcept(jsn.vObj['reason']);
    if jsn.has('amount') then
        value.amount := ParseMoney(jsn.vObj['amount']);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseDecimal(jsn.node['value'], jsn.vObj['_value']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitItemAdjudication(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitItemAdjudication; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'category', value.category);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reason', value.reason);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', value.amount);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'value', value.valueElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitItemDetail(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitItemDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitItemDetail;
begin
  result := TFhirExplanationOfBenefitItemDetail.Create;
  try
    ParseExplanationOfBenefitItemDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemDetailProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitItemDetail);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('revenue') then
        value.revenue := ParseCodeableConcept(jsn.vObj['revenue']);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('productOrService') then
        value.productOrService := ParseCodeableConcept(jsn.vObj['productOrService']);
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], value.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], value.programCodeList, parseCodeableConcept);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('unitPrice') then
        value.unitPrice := ParseMoney(jsn.vObj['unitPrice']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('net') then
        value.net := ParseMoney(jsn.vObj['net']);
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], value.udiList, parseReference);
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], value.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], value.adjudicationList, parseExplanationOfBenefitItemAdjudication);
    if jsn.has('subDetail') then
      iterateArray(jsn.vArr['subDetail'], value.subDetailList, parseExplanationOfBenefitItemDetailSubDetail);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitItemDetail(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitItemDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', value.revenue);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  ComposeCodeableConcept(json, 'productOrService', value.productOrService);
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    startArray(json, 'modifier', value.modifierList, false);
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.modifierList[i]);
    finishArray(json, value.modifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.programCodeList.Count > 0) then
  begin
    startArray(json, 'programCode', value.programCodeList, false);
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.programCodeList[i]);
    finishArray(json, value.programCodeList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', value.unitPrice);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', value.net);
  if (SummaryOption in [soFull, soData]) and (value.udiList.Count > 0) then
  begin
    startArray(json, 'udi', value.udiList, false);
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(json, '', value.udiList[i]);
    finishArray(json, value.udiList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.noteNumberList.Count - 1 do
    begin
      ext := ext or ((value.noteNumberList[i].id <> '') or (value.noteNumberList[i].hasExtensionList) {no-comments or (value.noteNumberList[i].hasComments)});
      val := val or (value.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'noteNumber', value.noteNumberList, true);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
    if ext then
    begin
      startArray(json, '_noteNumber', value.noteNumberList, false);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.adjudicationList.Count > 0) then
  begin
    startArray(json, 'adjudication', value.adjudicationList, false);
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', value.adjudicationList[i]);
    finishArray(json, value.adjudicationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.subDetailList.Count > 0) then
  begin
    startArray(json, 'subDetail', value.subDetailList, false);
    for i := 0 to value.subDetailList.Count - 1 do
      ComposeExplanationOfBenefitItemDetailSubDetail(json, '', value.subDetailList[i]);
    finishArray(json, value.subDetailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitItemDetailSubDetail(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitItemDetailSubDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitItemDetailSubDetail;
begin
  result := TFhirExplanationOfBenefitItemDetailSubDetail.Create;
  try
    ParseExplanationOfBenefitItemDetailSubDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemDetailSubDetailProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitItemDetailSubDetail);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('revenue') then
        value.revenue := ParseCodeableConcept(jsn.vObj['revenue']);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('productOrService') then
        value.productOrService := ParseCodeableConcept(jsn.vObj['productOrService']);
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], value.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], value.programCodeList, parseCodeableConcept);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('unitPrice') then
        value.unitPrice := ParseMoney(jsn.vObj['unitPrice']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('net') then
        value.net := ParseMoney(jsn.vObj['net']);
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], value.udiList, parseReference);
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], value.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], value.adjudicationList, parseExplanationOfBenefitItemAdjudication);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitItemDetailSubDetail(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitItemDetailSubDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', value.revenue);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  ComposeCodeableConcept(json, 'productOrService', value.productOrService);
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    startArray(json, 'modifier', value.modifierList, false);
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.modifierList[i]);
    finishArray(json, value.modifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.programCodeList.Count > 0) then
  begin
    startArray(json, 'programCode', value.programCodeList, false);
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.programCodeList[i]);
    finishArray(json, value.programCodeList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', value.unitPrice);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', value.net);
  if (SummaryOption in [soFull, soData]) and (value.udiList.Count > 0) then
  begin
    startArray(json, 'udi', value.udiList, false);
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(json, '', value.udiList[i]);
    finishArray(json, value.udiList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.noteNumberList.Count - 1 do
    begin
      ext := ext or ((value.noteNumberList[i].id <> '') or (value.noteNumberList[i].hasExtensionList) {no-comments or (value.noteNumberList[i].hasComments)});
      val := val or (value.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'noteNumber', value.noteNumberList, true);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
    if ext then
    begin
      startArray(json, '_noteNumber', value.noteNumberList, false);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.adjudicationList.Count > 0) then
  begin
    startArray(json, 'adjudication', value.adjudicationList, false);
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', value.adjudicationList[i]);
    finishArray(json, value.adjudicationList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAddItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitAddItem(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitAddItem(jsn : TJsonObject) : TFhirExplanationOfBenefitAddItem;
begin
  result := TFhirExplanationOfBenefitAddItem.Create;
  try
    ParseExplanationOfBenefitAddItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAddItemProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitAddItem);
begin
    ParseBackboneElementProperties(jsn, value);
      if jsn.has('itemSequence') or jsn.has('_itemSequence') then
      iteratePrimitiveArray(jsn.vArr['itemSequence'], jsn.vArr['_itemSequence'], value.itemSequenceList, parsePositiveInt);
      if jsn.has('detailSequence') or jsn.has('_detailSequence') then
      iteratePrimitiveArray(jsn.vArr['detailSequence'], jsn.vArr['_detailSequence'], value.detailSequenceList, parsePositiveInt);
      if jsn.has('subDetailSequence') or jsn.has('_subDetailSequence') then
      iteratePrimitiveArray(jsn.vArr['subDetailSequence'], jsn.vArr['_subDetailSequence'], value.subDetailSequenceList, parsePositiveInt);
    if jsn.has('provider') then
      iterateArray(jsn.vArr['provider'], value.providerList, parseReference);
    if jsn.has('productOrService') then
        value.productOrService := ParseCodeableConcept(jsn.vObj['productOrService']);
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], value.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], value.programCodeList, parseCodeableConcept);
    if jsn.has('servicedPeriod') {a4} then
      value.serviced := ParsePeriod(jsn.vObj['servicedPeriod']);
    if jsn.has('servicedDate') or jsn.has('_servicedDate') then
      value.serviced := parseDate(jsn.node['servicedDate'], jsn.vObj['_servicedDate']);
    if jsn.has('locationCodeableConcept') {a4} then
      value.location := ParseCodeableConcept(jsn.vObj['locationCodeableConcept']);
    if jsn.has('locationAddress') {a4} then
      value.location := ParseAddress(jsn.vObj['locationAddress']);
    if jsn.has('locationReference') {a3} then
      value.location := ParseReference(jsn.vObj['locationReference']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('unitPrice') then
        value.unitPrice := ParseMoney(jsn.vObj['unitPrice']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('net') then
        value.net := ParseMoney(jsn.vObj['net']);
    if jsn.has('bodySite') then
        value.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);
    if jsn.has('subSite') then
      iterateArray(jsn.vArr['subSite'], value.subSiteList, parseCodeableConcept);
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], value.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], value.adjudicationList, parseExplanationOfBenefitItemAdjudication);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], value.detailList, parseExplanationOfBenefitAddItemDetail);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitAddItem(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitAddItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.itemSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.itemSequenceList.Count - 1 do
    begin
      ext := ext or ((value.itemSequenceList[i].id <> '') or (value.itemSequenceList[i].hasExtensionList) {no-comments or (value.itemSequenceList[i].hasComments)});
      val := val or (value.itemSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'itemSequence', value.itemSequenceList, true);
      for i := 0 to value.itemSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.itemSequenceList[i], true);
      finishArray(json, value.itemSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_itemSequence', value.itemSequenceList, false);
      for i := 0 to value.itemSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.itemSequenceList[i], true);
      finishArray(json, value.itemSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.detailSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.detailSequenceList.Count - 1 do
    begin
      ext := ext or ((value.detailSequenceList[i].id <> '') or (value.detailSequenceList[i].hasExtensionList) {no-comments or (value.detailSequenceList[i].hasComments)});
      val := val or (value.detailSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'detailSequence', value.detailSequenceList, true);
      for i := 0 to value.detailSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.detailSequenceList[i], true);
      finishArray(json, value.detailSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_detailSequence', value.detailSequenceList, false);
      for i := 0 to value.detailSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.detailSequenceList[i], true);
      finishArray(json, value.detailSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.subDetailSequenceList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.subDetailSequenceList.Count - 1 do
    begin
      ext := ext or ((value.subDetailSequenceList[i].id <> '') or (value.subDetailSequenceList[i].hasExtensionList) {no-comments or (value.subDetailSequenceList[i].hasComments)});
      val := val or (value.subDetailSequenceList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'subDetailSequence', value.subDetailSequenceList, true);
      for i := 0 to value.subDetailSequenceList.Count - 1 do
        ComposePositiveIntValue(json, '', value.subDetailSequenceList[i], true);
      finishArray(json, value.subDetailSequenceList);
    end;
    if ext then
    begin
      startArray(json, '_subDetailSequence', value.subDetailSequenceList, false);
      for i := 0 to value.subDetailSequenceList.Count - 1 do
        ComposePositiveIntProps(json, '', value.subDetailSequenceList[i], true);
      finishArray(json, value.subDetailSequenceList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.providerList.Count > 0) then
  begin
    startArray(json, 'provider', value.providerList, false);
    for i := 0 to value.providerList.Count - 1 do
      ComposeReference(json, '', value.providerList[i]);
    finishArray(json, value.providerList);
  end;
  ComposeCodeableConcept(json, 'productOrService', value.productOrService);
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    startArray(json, 'modifier', value.modifierList, false);
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.modifierList[i]);
    finishArray(json, value.modifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.programCodeList.Count > 0) then
  begin
    startArray(json, 'programCode', value.programCodeList, false);
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.programCodeList[i]);
    finishArray(json, value.programCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirPeriod) then 
    ComposePeriod(json, 'servicedPeriod', TFhirPeriod(value.serviced)) 
  else if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirDate) then 
  begin
    ComposeDateValue(json, 'servicedDate', TFhirDate(value.serviced), false);
    ComposeDateProps(json, 'servicedDate', TFhirDate(value.serviced), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.location is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'locationCodeableConcept', TFhirCodeableConcept(value.location)) 
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirAddress) then 
    ComposeAddress(json, 'locationAddress', TFhirAddress(value.location)) 
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirReference) then
    ComposeReference(json, 'locationReference', TFhirReference(value.location));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', value.unitPrice);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', value.net);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'bodySite', value.bodySite);
  if (SummaryOption in [soFull, soData]) and (value.subSiteList.Count > 0) then
  begin
    startArray(json, 'subSite', value.subSiteList, false);
    for i := 0 to value.subSiteList.Count - 1 do
      ComposeCodeableConcept(json, '', value.subSiteList[i]);
    finishArray(json, value.subSiteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.noteNumberList.Count - 1 do
    begin
      ext := ext or ((value.noteNumberList[i].id <> '') or (value.noteNumberList[i].hasExtensionList) {no-comments or (value.noteNumberList[i].hasComments)});
      val := val or (value.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'noteNumber', value.noteNumberList, true);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
    if ext then
    begin
      startArray(json, '_noteNumber', value.noteNumberList, false);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.adjudicationList.Count > 0) then
  begin
    startArray(json, 'adjudication', value.adjudicationList, false);
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', value.adjudicationList[i]);
    finishArray(json, value.adjudicationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.detailList.Count > 0) then
  begin
    startArray(json, 'detail', value.detailList, false);
    for i := 0 to value.detailList.Count - 1 do
      ComposeExplanationOfBenefitAddItemDetail(json, '', value.detailList[i]);
    finishArray(json, value.detailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAddItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitAddItemDetail(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitAddItemDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitAddItemDetail;
begin
  result := TFhirExplanationOfBenefitAddItemDetail.Create;
  try
    ParseExplanationOfBenefitAddItemDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAddItemDetailProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitAddItemDetail);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('productOrService') then
        value.productOrService := ParseCodeableConcept(jsn.vObj['productOrService']);
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], value.modifierList, parseCodeableConcept);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('unitPrice') then
        value.unitPrice := ParseMoney(jsn.vObj['unitPrice']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('net') then
        value.net := ParseMoney(jsn.vObj['net']);
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], value.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], value.adjudicationList, parseExplanationOfBenefitItemAdjudication);
    if jsn.has('subDetail') then
      iterateArray(jsn.vArr['subDetail'], value.subDetailList, parseExplanationOfBenefitAddItemDetailSubDetail);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitAddItemDetail(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitAddItemDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'productOrService', value.productOrService);
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    startArray(json, 'modifier', value.modifierList, false);
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.modifierList[i]);
    finishArray(json, value.modifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', value.unitPrice);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', value.net);
  if (SummaryOption in [soFull, soData]) and (value.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.noteNumberList.Count - 1 do
    begin
      ext := ext or ((value.noteNumberList[i].id <> '') or (value.noteNumberList[i].hasExtensionList) {no-comments or (value.noteNumberList[i].hasComments)});
      val := val or (value.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'noteNumber', value.noteNumberList, true);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
    if ext then
    begin
      startArray(json, '_noteNumber', value.noteNumberList, false);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.adjudicationList.Count > 0) then
  begin
    startArray(json, 'adjudication', value.adjudicationList, false);
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', value.adjudicationList[i]);
    finishArray(json, value.adjudicationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.subDetailList.Count > 0) then
  begin
    startArray(json, 'subDetail', value.subDetailList, false);
    for i := 0 to value.subDetailList.Count - 1 do
      ComposeExplanationOfBenefitAddItemDetailSubDetail(json, '', value.subDetailList[i]);
    finishArray(json, value.subDetailList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAddItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitAddItemDetailSubDetail(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitAddItemDetailSubDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitAddItemDetailSubDetail;
begin
  result := TFhirExplanationOfBenefitAddItemDetailSubDetail.Create;
  try
    ParseExplanationOfBenefitAddItemDetailSubDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAddItemDetailSubDetailProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitAddItemDetailSubDetail);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('productOrService') then
        value.productOrService := ParseCodeableConcept(jsn.vObj['productOrService']);
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], value.modifierList, parseCodeableConcept);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('unitPrice') then
        value.unitPrice := ParseMoney(jsn.vObj['unitPrice']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('net') then
        value.net := ParseMoney(jsn.vObj['net']);
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], value.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], value.adjudicationList, parseExplanationOfBenefitItemAdjudication);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitAddItemDetailSubDetail(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitAddItemDetailSubDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'productOrService', value.productOrService);
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    startArray(json, 'modifier', value.modifierList, false);
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.modifierList[i]);
    finishArray(json, value.modifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', value.unitPrice);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', value.net);
  if (SummaryOption in [soFull, soData]) and (value.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.noteNumberList.Count - 1 do
    begin
      ext := ext or ((value.noteNumberList[i].id <> '') or (value.noteNumberList[i].hasExtensionList) {no-comments or (value.noteNumberList[i].hasComments)});
      val := val or (value.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'noteNumber', value.noteNumberList, true);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
    if ext then
    begin
      startArray(json, '_noteNumber', value.noteNumberList, false);
      for i := 0 to value.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '', value.noteNumberList[i], true);
      finishArray(json, value.noteNumberList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.adjudicationList.Count > 0) then
  begin
    startArray(json, 'adjudication', value.adjudicationList, false);
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', value.adjudicationList[i]);
    finishArray(json, value.adjudicationList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitTotal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitTotal(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitTotal(jsn : TJsonObject) : TFhirExplanationOfBenefitTotal;
begin
  result := TFhirExplanationOfBenefitTotal.Create;
  try
    ParseExplanationOfBenefitTotalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitTotalProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitTotal);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('amount') then
        value.amount := ParseMoney(jsn.vObj['amount']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitTotal(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitTotal; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'category', value.category);
  ComposeMoney(json, 'amount', value.amount);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitPayment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitPayment(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitPayment(jsn : TJsonObject) : TFhirExplanationOfBenefitPayment;
begin
  result := TFhirExplanationOfBenefitPayment.Create;
  try
    ParseExplanationOfBenefitPaymentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitPaymentProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitPayment);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('adjustment') then
        value.adjustment := ParseMoney(jsn.vObj['adjustment']);
    if jsn.has('adjustmentReason') then
        value.adjustmentReason := ParseCodeableConcept(jsn.vObj['adjustmentReason']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDate(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('amount') then
        value.amount := ParseMoney(jsn.vObj['amount']);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitPayment(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitPayment; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'adjustment', value.adjustment);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'adjustmentReason', value.adjustmentReason);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', value.amount);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitProcessNote(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitProcessNote(jsn : TJsonObject) : TFhirExplanationOfBenefitProcessNote;
begin
  result := TFhirExplanationOfBenefitProcessNote.Create;
  try
    ParseExplanationOfBenefitProcessNoteProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProcessNoteProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitProcessNote);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('number') or jsn.has('_number') then
        value.numberElement := parsePositiveInt(jsn.node['number'], jsn.vObj['_number']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirNoteTypeEnum, SYSTEMS_TFhirNoteTypeEnum);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
    if jsn.has('language') then
        value.language := ParseCodeableConcept(jsn.vObj['language']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitProcessNote(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitProcessNote; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'number', value.numberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'number', value.numberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirNoteTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'language', value.language);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitBenefitBalance(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalance(jsn : TJsonObject) : TFhirExplanationOfBenefitBenefitBalance;
begin
  result := TFhirExplanationOfBenefitBenefitBalance.Create;
  try
    ParseExplanationOfBenefitBenefitBalanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalanceProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitBenefitBalance);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('excluded') or jsn.has('_excluded') then
        value.excludedElement := parseBoolean(jsn.node['excluded'], jsn.vObj['_excluded']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('network') then
        value.network := ParseCodeableConcept(jsn.vObj['network']);
    if jsn.has('unit') then
        value.unit_ := ParseCodeableConcept(jsn.vObj['unit']);
    if jsn.has('term') then
        value.term := ParseCodeableConcept(jsn.vObj['term']);
    if jsn.has('financial') then
      iterateArray(jsn.vArr['financial'], value.financialList, parseExplanationOfBenefitBenefitBalanceFinancial);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitBenefitBalance(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitBenefitBalance; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'category', value.category);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'excluded', value.excludedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'excluded', value.excludedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'network', value.network);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'unit', value.unit_);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'term', value.term);
  if (SummaryOption in [soFull, soData]) and (value.financialList.Count > 0) then
  begin
    startArray(json, 'financial', value.financialList, false);
    for i := 0 to value.financialList.Count - 1 do
      ComposeExplanationOfBenefitBenefitBalanceFinancial(json, '', value.financialList[i]);
    finishArray(json, value.financialList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalanceFinancial(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitBenefitBalanceFinancial(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalanceFinancial(jsn : TJsonObject) : TFhirExplanationOfBenefitBenefitBalanceFinancial;
begin
  result := TFhirExplanationOfBenefitBenefitBalanceFinancial.Create;
  try
    ParseExplanationOfBenefitBenefitBalanceFinancialProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalanceFinancialProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefitBenefitBalanceFinancial);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('allowedUnsignedInt') or jsn.has('_allowedUnsignedInt') then
      value.allowed := parseUnsignedInt(jsn.node['allowedUnsignedInt'], jsn.vObj['_allowedUnsignedInt']);
    if jsn.has('allowedMoney') {a4} then
      value.allowed := ParseMoney(jsn.vObj['allowedMoney']);
    if jsn.has('allowedString') or jsn.has('_allowedString') then
      value.allowed := parseString(jsn.node['allowedString'], jsn.vObj['_allowedString']);
    if jsn.has('usedUnsignedInt') or jsn.has('_usedUnsignedInt') then
      value.used := parseUnsignedInt(jsn.node['usedUnsignedInt'], jsn.vObj['_usedUnsignedInt']);
    if jsn.has('usedMoney') {a4} then
      value.used := ParseMoney(jsn.vObj['usedMoney']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitBenefitBalanceFinancial(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefitBenefitBalanceFinancial; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.allowed is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'allowedUnsignedInt', TFhirUnsignedInt(value.allowed), false);
    ComposeUnsignedIntProps(json, 'allowedUnsignedInt', TFhirUnsignedInt(value.allowed), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.allowed is TFhirMoney) then 
    ComposeMoney(json, 'allowedMoney', TFhirMoney(value.allowed)) 
  else if (SummaryOption in [soFull, soData]) and (value.allowed is TFhirString) then 
  begin
    ComposeStringValue(json, 'allowedString', TFhirString(value.allowed), false);
    ComposeStringProps(json, 'allowedString', TFhirString(value.allowed), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.used is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'usedUnsignedInt', TFhirUnsignedInt(value.used), false);
    ComposeUnsignedIntProps(json, 'usedUnsignedInt', TFhirUnsignedInt(value.used), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.used is TFhirMoney) then 
    ComposeMoney(json, 'usedMoney', TFhirMoney(value.used)) ;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefit(jsn)); 
end;

function TFHIRJsonParser.ParseExplanationOfBenefit(jsn : TJsonObject) : TFhirExplanationOfBenefit;
begin
  result := TFhirExplanationOfBenefit.Create;
  try
    ParseExplanationOfBenefitProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProperties(jsn : TJsonObject; value : TFhirExplanationOfBenefit);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirExplanationOfBenefitStatusEnum, SYSTEMS_TFhirExplanationOfBenefitStatusEnum);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('subType') then
        value.subType := ParseCodeableConcept(jsn.vObj['subType']);
    if jsn.has('use') or jsn.has('_use') then
        value.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirUseEnum, SYSTEMS_TFhirUseEnum);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('billablePeriod') then
        value.billablePeriod := ParsePeriod(jsn.vObj['billablePeriod']);
    if jsn.has('created') or jsn.has('_created') then
        value.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);
    if jsn.has('enterer') then
        value.enterer := ParseReference(jsn.vObj['enterer']);
    if jsn.has('insurer') then
        value.insurer := ParseReference(jsn.vObj['insurer']);
    if jsn.has('provider') then
        value.provider := ParseReference(jsn.vObj['provider']);
    if jsn.has('priority') then
        value.priority := ParseCodeableConcept(jsn.vObj['priority']);
    if jsn.has('fundsReserveRequested') then
        value.fundsReserveRequested := ParseCodeableConcept(jsn.vObj['fundsReserveRequested']);
    if jsn.has('fundsReserve') then
        value.fundsReserve := ParseCodeableConcept(jsn.vObj['fundsReserve']);
    if jsn.has('related') then
      iterateArray(jsn.vArr['related'], value.relatedList, parseExplanationOfBenefitRelated);
    if jsn.has('prescription') then
        value.prescription := ParseReference(jsn.vObj['prescription']);
    if jsn.has('originalPrescription') then
        value.originalPrescription := ParseReference(jsn.vObj['originalPrescription']);
    if jsn.has('payee') then
        value.payee := ParseExplanationOfBenefitPayee(jsn.vObj['payee']);
    if jsn.has('referral') then
        value.referral := ParseReference(jsn.vObj['referral']);
    if jsn.has('facility') then
        value.facility := ParseReference(jsn.vObj['facility']);
    if jsn.has('claim') then
        value.claim := ParseReference(jsn.vObj['claim']);
    if jsn.has('claimResponse') then
        value.claimResponse := ParseReference(jsn.vObj['claimResponse']);
    if jsn.has('outcome') or jsn.has('_outcome') then
        value.outcomeElement := parseEnum(jsn.path+'/outcome', jsn.node['outcome'], jsn.vObj['_outcome'], CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum);
    if jsn.has('disposition') or jsn.has('_disposition') then
        value.dispositionElement := parseString(jsn.node['disposition'], jsn.vObj['_disposition']);
      if jsn.has('preAuthRef') or jsn.has('_preAuthRef') then
      iteratePrimitiveArray(jsn.vArr['preAuthRef'], jsn.vArr['_preAuthRef'], value.preAuthRefList, parseString);
    if jsn.has('preAuthRefPeriod') then
      iterateArray(jsn.vArr['preAuthRefPeriod'], value.preAuthRefPeriodList, parsePeriod);
    if jsn.has('careTeam') then
      iterateArray(jsn.vArr['careTeam'], value.careTeamList, parseExplanationOfBenefitCareTeam);
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], value.supportingInfoList, parseExplanationOfBenefitSupportingInfo);
    if jsn.has('diagnosis') then
      iterateArray(jsn.vArr['diagnosis'], value.diagnosisList, parseExplanationOfBenefitDiagnosis);
    if jsn.has('procedure') then
      iterateArray(jsn.vArr['procedure'], value.procedure_List, parseExplanationOfBenefitProcedure);
    if jsn.has('precedence') or jsn.has('_precedence') then
        value.precedenceElement := parsePositiveInt(jsn.node['precedence'], jsn.vObj['_precedence']);
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], value.insuranceList, parseExplanationOfBenefitInsurance);
    if jsn.has('accident') then
        value.accident := ParseExplanationOfBenefitAccident(jsn.vObj['accident']);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], value.itemList, parseExplanationOfBenefitItem);
    if jsn.has('addItem') then
      iterateArray(jsn.vArr['addItem'], value.addItemList, parseExplanationOfBenefitAddItem);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], value.adjudicationList, parseExplanationOfBenefitItemAdjudication);
    if jsn.has('total') then
      iterateArray(jsn.vArr['total'], value.totalList, parseExplanationOfBenefitTotal);
    if jsn.has('payment') then
        value.payment := ParseExplanationOfBenefitPayment(jsn.vObj['payment']);
    if jsn.has('formCode') then
        value.formCode := ParseCodeableConcept(jsn.vObj['formCode']);
    if jsn.has('form') then
        value.form := ParseAttachment(jsn.vObj['form']);
    if jsn.has('processNote') then
      iterateArray(jsn.vArr['processNote'], value.processNoteList, parseExplanationOfBenefitProcessNote);
    if jsn.has('benefitPeriod') then
        value.benefitPeriod := ParsePeriod(jsn.vObj['benefitPeriod']);
    if jsn.has('benefitBalance') then
      iterateArray(jsn.vArr['benefitBalance'], value.benefitBalanceList, parseExplanationOfBenefitBenefitBalance);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefit(json : TJSONWriter; name : string; value : TFhirExplanationOfBenefit; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirExplanationOfBenefitStatusEnum, false);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'subType', value.subType);
  ComposeEnumValue(json, 'use', value.useElement, CODES_TFhirUseEnum, false);
  ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'billablePeriod', value.billablePeriod);
  ComposeDateTimeValue(json, 'created', value.createdElement, false);
  ComposeDateTimeProps(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'enterer', value.enterer);
  ComposeReference(json, 'insurer', value.insurer);
  ComposeReference(json, 'provider', value.provider);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'priority', value.priority);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'fundsReserveRequested', value.fundsReserveRequested);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'fundsReserve', value.fundsReserve);
  if (SummaryOption in [soFull, soData]) and (value.relatedList.Count > 0) then
  begin
    startArray(json, 'related', value.relatedList, false);
    for i := 0 to value.relatedList.Count - 1 do
      ComposeExplanationOfBenefitRelated(json, '', value.relatedList[i]);
    finishArray(json, value.relatedList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'prescription', value.prescription);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'originalPrescription', value.originalPrescription);
  if (SummaryOption in [soFull, soData]) then
    ComposeExplanationOfBenefitPayee(json, 'payee', value.payee);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'referral', value.referral);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'facility', value.facility);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'claim', value.claim);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'claimResponse', value.claimResponse);
  ComposeEnumValue(json, 'outcome', value.outcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'disposition', value.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'disposition', value.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.preAuthRefList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.preAuthRefList.Count - 1 do
    begin
      ext := ext or ((value.preAuthRefList[i].id <> '') or (value.preAuthRefList[i].hasExtensionList) {no-comments or (value.preAuthRefList[i].hasComments)});
      val := val or (value.preAuthRefList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'preAuthRef', value.preAuthRefList, true);
      for i := 0 to value.preAuthRefList.Count - 1 do
        ComposeStringValue(json, '', value.preAuthRefList[i], true);
      finishArray(json, value.preAuthRefList);
    end;
    if ext then
    begin
      startArray(json, '_preAuthRef', value.preAuthRefList, false);
      for i := 0 to value.preAuthRefList.Count - 1 do
        ComposeStringProps(json, '', value.preAuthRefList[i], true);
      finishArray(json, value.preAuthRefList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.preAuthRefPeriodList.Count > 0) then
  begin
    startArray(json, 'preAuthRefPeriod', value.preAuthRefPeriodList, false);
    for i := 0 to value.preAuthRefPeriodList.Count - 1 do
      ComposePeriod(json, '', value.preAuthRefPeriodList[i]);
    finishArray(json, value.preAuthRefPeriodList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.careTeamList.Count > 0) then
  begin
    startArray(json, 'careTeam', value.careTeamList, false);
    for i := 0 to value.careTeamList.Count - 1 do
      ComposeExplanationOfBenefitCareTeam(json, '', value.careTeamList[i]);
    finishArray(json, value.careTeamList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.supportingInfoList.Count > 0) then
  begin
    startArray(json, 'supportingInfo', value.supportingInfoList, false);
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeExplanationOfBenefitSupportingInfo(json, '', value.supportingInfoList[i]);
    finishArray(json, value.supportingInfoList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.diagnosisList.Count > 0) then
  begin
    startArray(json, 'diagnosis', value.diagnosisList, false);
    for i := 0 to value.diagnosisList.Count - 1 do
      ComposeExplanationOfBenefitDiagnosis(json, '', value.diagnosisList[i]);
    finishArray(json, value.diagnosisList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.procedure_List.Count > 0) then
  begin
    startArray(json, 'procedure', value.procedure_List, false);
    for i := 0 to value.procedure_List.Count - 1 do
      ComposeExplanationOfBenefitProcedure(json, '', value.procedure_List[i]);
    finishArray(json, value.procedure_List);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'precedence', value.precedenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'precedence', value.precedenceElement, false);
  if (value.insuranceList.Count > 0) then
  begin
    startArray(json, 'insurance', value.insuranceList, false);
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeExplanationOfBenefitInsurance(json, '', value.insuranceList[i]);
    finishArray(json, value.insuranceList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeExplanationOfBenefitAccident(json, 'accident', value.accident);
  if (SummaryOption in [soFull, soData]) and (value.itemList.Count > 0) then
  begin
    startArray(json, 'item', value.itemList, false);
    for i := 0 to value.itemList.Count - 1 do
      ComposeExplanationOfBenefitItem(json, '', value.itemList[i]);
    finishArray(json, value.itemList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.addItemList.Count > 0) then
  begin
    startArray(json, 'addItem', value.addItemList, false);
    for i := 0 to value.addItemList.Count - 1 do
      ComposeExplanationOfBenefitAddItem(json, '', value.addItemList[i]);
    finishArray(json, value.addItemList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.adjudicationList.Count > 0) then
  begin
    startArray(json, 'adjudication', value.adjudicationList, false);
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', value.adjudicationList[i]);
    finishArray(json, value.adjudicationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.totalList.Count > 0) then
  begin
    startArray(json, 'total', value.totalList, false);
    for i := 0 to value.totalList.Count - 1 do
      ComposeExplanationOfBenefitTotal(json, '', value.totalList[i]);
    finishArray(json, value.totalList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeExplanationOfBenefitPayment(json, 'payment', value.payment);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'formCode', value.formCode);
  if (SummaryOption in [soFull, soData]) then
    ComposeAttachment(json, 'form', value.form);
  if (SummaryOption in [soFull, soData]) and (value.processNoteList.Count > 0) then
  begin
    startArray(json, 'processNote', value.processNoteList, false);
    for i := 0 to value.processNoteList.Count - 1 do
      ComposeExplanationOfBenefitProcessNote(json, '', value.processNoteList[i]);
    finishArray(json, value.processNoteList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'benefitPeriod', value.benefitPeriod);
  if (SummaryOption in [soFull, soData]) and (value.benefitBalanceList.Count > 0) then
  begin
    startArray(json, 'benefitBalance', value.benefitBalanceList, false);
    for i := 0 to value.benefitBalanceList.Count - 1 do
      ComposeExplanationOfBenefitBenefitBalance(json, '', value.benefitBalanceList[i]);
    finishArray(json, value.benefitBalanceList);
  end;
end;

{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
procedure TFHIRJsonParser.ParseFamilyMemberHistoryCondition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseFamilyMemberHistoryCondition(jsn)); 
end;

function TFHIRJsonParser.ParseFamilyMemberHistoryCondition(jsn : TJsonObject) : TFhirFamilyMemberHistoryCondition;
begin
  result := TFhirFamilyMemberHistoryCondition.Create;
  try
    ParseFamilyMemberHistoryConditionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseFamilyMemberHistoryConditionProperties(jsn : TJsonObject; value : TFhirFamilyMemberHistoryCondition);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('outcome') then
        value.outcome := ParseCodeableConcept(jsn.vObj['outcome']);
    if jsn.has('contributedToDeath') or jsn.has('_contributedToDeath') then
        value.contributedToDeathElement := parseBoolean(jsn.node['contributedToDeath'], jsn.vObj['_contributedToDeath']);
    if jsn.has('onsetAge') {a4} then
      value.onset := ParseAge(jsn.vObj['onsetAge']);
    if jsn.has('onsetRange') {a4} then
      value.onset := ParseRange(jsn.vObj['onsetRange']);
    if jsn.has('onsetPeriod') {a4} then
      value.onset := ParsePeriod(jsn.vObj['onsetPeriod']);
    if jsn.has('onsetString') or jsn.has('_onsetString') then
      value.onset := parseString(jsn.node['onsetString'], jsn.vObj['_onsetString']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeFamilyMemberHistoryCondition(json : TJSONWriter; name : string; value : TFhirFamilyMemberHistoryCondition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'outcome', value.outcome);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'contributedToDeath', value.contributedToDeathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'contributedToDeath', value.contributedToDeathElement, false);
  if (SummaryOption in [soFull, soData]) and (value.onset is TFhirAge) then 
    ComposeAge(json, 'onsetAge', TFhirAge(value.onset)) 
  else if (SummaryOption in [soFull, soData]) and (value.onset is TFhirRange) then 
    ComposeRange(json, 'onsetRange', TFhirRange(value.onset)) 
  else if (SummaryOption in [soFull, soData]) and (value.onset is TFhirPeriod) then 
    ComposePeriod(json, 'onsetPeriod', TFhirPeriod(value.onset)) 
  else if (SummaryOption in [soFull, soData]) and (value.onset is TFhirString) then 
  begin
    ComposeStringValue(json, 'onsetString', TFhirString(value.onset), false);
    ComposeStringProps(json, 'onsetString', TFhirString(value.onset), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseFamilyMemberHistory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseFamilyMemberHistory(jsn)); 
end;

function TFHIRJsonParser.ParseFamilyMemberHistory(jsn : TJsonObject) : TFhirFamilyMemberHistory;
begin
  result := TFhirFamilyMemberHistory.Create;
  try
    ParseFamilyMemberHistoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseFamilyMemberHistoryProperties(jsn : TJsonObject; value : TFhirFamilyMemberHistory);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
      if jsn.has('instantiatesCanonical') or jsn.has('_instantiatesCanonical') then
      iteratePrimitiveArray(jsn.vArr['instantiatesCanonical'], jsn.vArr['_instantiatesCanonical'], value.instantiatesCanonicalList, parseCanonical);
      if jsn.has('instantiatesUri') or jsn.has('_instantiatesUri') then
      iteratePrimitiveArray(jsn.vArr['instantiatesUri'], jsn.vArr['_instantiatesUri'], value.instantiatesUriList, parseUri);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFamilyHistoryStatusEnum, SYSTEMS_TFhirFamilyHistoryStatusEnum);
    if jsn.has('dataAbsentReason') then
        value.dataAbsentReason := ParseCodeableConcept(jsn.vObj['dataAbsentReason']);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('relationship') then
        value.relationship := ParseCodeableConcept(jsn.vObj['relationship']);
    if jsn.has('sex') then
        value.sex := ParseCodeableConcept(jsn.vObj['sex']);
    if jsn.has('bornPeriod') {a4} then
      value.born := ParsePeriod(jsn.vObj['bornPeriod']);
    if jsn.has('bornDate') or jsn.has('_bornDate') then
      value.born := parseDate(jsn.node['bornDate'], jsn.vObj['_bornDate']);
    if jsn.has('bornString') or jsn.has('_bornString') then
      value.born := parseString(jsn.node['bornString'], jsn.vObj['_bornString']);
    if jsn.has('ageAge') {a4} then
      value.age := ParseAge(jsn.vObj['ageAge']);
    if jsn.has('ageRange') {a4} then
      value.age := ParseRange(jsn.vObj['ageRange']);
    if jsn.has('ageString') or jsn.has('_ageString') then
      value.age := parseString(jsn.node['ageString'], jsn.vObj['_ageString']);
    if jsn.has('estimatedAge') or jsn.has('_estimatedAge') then
        value.estimatedAgeElement := parseBoolean(jsn.node['estimatedAge'], jsn.vObj['_estimatedAge']);
    if jsn.has('deceasedAge') {a4} then
      value.deceased := ParseAge(jsn.vObj['deceasedAge']);
    if jsn.has('deceasedRange') {a4} then
      value.deceased := ParseRange(jsn.vObj['deceasedRange']);
    if jsn.has('deceasedBoolean') or jsn.has('_deceasedBoolean') then
      value.deceased := parseBoolean(jsn.node['deceasedBoolean'], jsn.vObj['_deceasedBoolean']);
    if jsn.has('deceasedDate') or jsn.has('_deceasedDate') then
      value.deceased := parseDate(jsn.node['deceasedDate'], jsn.vObj['_deceasedDate']);
    if jsn.has('deceasedString') or jsn.has('_deceasedString') then
      value.deceased := parseString(jsn.node['deceasedString'], jsn.vObj['_deceasedString']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('condition') then
      iterateArray(jsn.vArr['condition'], value.conditionList, parseFamilyMemberHistoryCondition);
end;

procedure TFHIRJsonComposer.ComposeFamilyMemberHistory(json : TJSONWriter; name : string; value : TFhirFamilyMemberHistory; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesCanonicalList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesCanonicalList[i].id <> '') or (value.instantiatesCanonicalList[i].hasExtensionList) {no-comments or (value.instantiatesCanonicalList[i].hasComments)});
      val := val or (value.instantiatesCanonicalList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesCanonical', value.instantiatesCanonicalList, true);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalValue(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesCanonical', value.instantiatesCanonicalList, false);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalProps(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesUriList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesUriList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesUriList[i].id <> '') or (value.instantiatesUriList[i].hasExtensionList) {no-comments or (value.instantiatesUriList[i].hasComments)});
      val := val or (value.instantiatesUriList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesUri', value.instantiatesUriList, true);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriValue(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesUri', value.instantiatesUriList, false);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriProps(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirFamilyHistoryStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'dataAbsentReason', value.dataAbsentReason);
  ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  ComposeCodeableConcept(json, 'relationship', value.relationship);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'sex', value.sex);
  if (SummaryOption in [soFull, soData]) and (value.born is TFhirPeriod) then 
    ComposePeriod(json, 'bornPeriod', TFhirPeriod(value.born)) 
  else if (SummaryOption in [soFull, soData]) and (value.born is TFhirDate) then 
  begin
    ComposeDateValue(json, 'bornDate', TFhirDate(value.born), false);
    ComposeDateProps(json, 'bornDate', TFhirDate(value.born), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.born is TFhirString) then 
  begin
    ComposeStringValue(json, 'bornString', TFhirString(value.born), false);
    ComposeStringProps(json, 'bornString', TFhirString(value.born), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.age is TFhirAge) then 
    ComposeAge(json, 'ageAge', TFhirAge(value.age)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.age is TFhirRange) then 
    ComposeRange(json, 'ageRange', TFhirRange(value.age)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.age is TFhirString) then 
  begin
    ComposeStringValue(json, 'ageString', TFhirString(value.age), false);
    ComposeStringProps(json, 'ageString', TFhirString(value.age), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'estimatedAge', value.estimatedAgeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'estimatedAge', value.estimatedAgeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.deceased is TFhirAge) then 
    ComposeAge(json, 'deceasedAge', TFhirAge(value.deceased)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.deceased is TFhirRange) then 
    ComposeRange(json, 'deceasedRange', TFhirRange(value.deceased)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.deceased is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'deceasedBoolean', TFhirBoolean(value.deceased), false);
    ComposeBooleanProps(json, 'deceasedBoolean', TFhirBoolean(value.deceased), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.deceased is TFhirDate) then 
  begin
    ComposeDateValue(json, 'deceasedDate', TFhirDate(value.deceased), false);
    ComposeDateProps(json, 'deceasedDate', TFhirDate(value.deceased), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.deceased is TFhirString) then 
  begin
    ComposeStringValue(json, 'deceasedString', TFhirString(value.deceased), false);
    ComposeStringProps(json, 'deceasedString', TFhirString(value.deceased), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.conditionList.Count > 0) then
  begin
    startArray(json, 'condition', value.conditionList, false);
    for i := 0 to value.conditionList.Count - 1 do
      ComposeFamilyMemberHistoryCondition(json, '', value.conditionList[i]);
    finishArray(json, value.conditionList);
  end;
end;

{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
procedure TFHIRJsonParser.ParseFlag(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseFlag(jsn)); 
end;

function TFHIRJsonParser.ParseFlag(jsn : TJsonObject) : TFhirFlag;
begin
  result := TFhirFlag.Create;
  try
    ParseFlagProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseFlagProperties(jsn : TJsonObject; value : TFhirFlag);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFlagStatusEnum, SYSTEMS_TFhirFlagStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('author') then
        value.author := ParseReference(jsn.vObj['author']);
end;

procedure TFHIRJsonComposer.ComposeFlag(json : TJSONWriter; name : string; value : TFhirFlag; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirFlagStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  ComposeCodeableConcept(json, 'code', value.code);
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'author', value.author);
end;

{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
procedure TFHIRJsonParser.ParseGoalTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGoalTarget(jsn)); 
end;

function TFHIRJsonParser.ParseGoalTarget(jsn : TJsonObject) : TFhirGoalTarget;
begin
  result := TFhirGoalTarget.Create;
  try
    ParseGoalTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGoalTargetProperties(jsn : TJsonObject; value : TFhirGoalTarget);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('measure') then
        value.measure := ParseCodeableConcept(jsn.vObj['measure']);
    if jsn.has('detailQuantity') {a4} then
      value.detail := ParseQuantity(jsn.vObj['detailQuantity']);
    if jsn.has('detailRange') {a4} then
      value.detail := ParseRange(jsn.vObj['detailRange']);
    if jsn.has('detailCodeableConcept') {a4} then
      value.detail := ParseCodeableConcept(jsn.vObj['detailCodeableConcept']);
    if jsn.has('detailRatio') {a4} then
      value.detail := ParseRatio(jsn.vObj['detailRatio']);
    if jsn.has('detailString') or jsn.has('_detailString') then
      value.detail := parseString(jsn.node['detailString'], jsn.vObj['_detailString']);
    if jsn.has('detailBoolean') or jsn.has('_detailBoolean') then
      value.detail := parseBoolean(jsn.node['detailBoolean'], jsn.vObj['_detailBoolean']);
    if jsn.has('detailInteger') or jsn.has('_detailInteger') then
      value.detail := parseInteger(jsn.node['detailInteger'], jsn.vObj['_detailInteger']);
    if jsn.has('dueDuration') {a4} then
      value.due := ParseDuration(jsn.vObj['dueDuration']);
    if jsn.has('dueDate') or jsn.has('_dueDate') then
      value.due := parseDate(jsn.node['dueDate'], jsn.vObj['_dueDate']);
end;

procedure TFHIRJsonComposer.ComposeGoalTarget(json : TJSONWriter; name : string; value : TFhirGoalTarget; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'measure', value.measure);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.detail is TFhirQuantity) then 
    ComposeQuantity(json, 'detailQuantity', TFhirQuantity(value.detail)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.detail is TFhirRange) then 
    ComposeRange(json, 'detailRange', TFhirRange(value.detail)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.detail is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'detailCodeableConcept', TFhirCodeableConcept(value.detail)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.detail is TFhirRatio) then 
    ComposeRatio(json, 'detailRatio', TFhirRatio(value.detail)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.detail is TFhirString) then 
  begin
    ComposeStringValue(json, 'detailString', TFhirString(value.detail), false);
    ComposeStringProps(json, 'detailString', TFhirString(value.detail), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.detail is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'detailBoolean', TFhirBoolean(value.detail), false);
    ComposeBooleanProps(json, 'detailBoolean', TFhirBoolean(value.detail), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.detail is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'detailInteger', TFhirInteger(value.detail), false);
    ComposeIntegerProps(json, 'detailInteger', TFhirInteger(value.detail), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.due is TFhirDuration) then 
    ComposeDuration(json, 'dueDuration', TFhirDuration(value.due)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.due is TFhirDate) then 
  begin
    ComposeDateValue(json, 'dueDate', TFhirDate(value.due), false);
    ComposeDateProps(json, 'dueDate', TFhirDate(value.due), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseGoal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGoal(jsn)); 
end;

function TFHIRJsonParser.ParseGoal(jsn : TJsonObject) : TFhirGoal;
begin
  result := TFhirGoal.Create;
  try
    ParseGoalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGoalProperties(jsn : TJsonObject; value : TFhirGoal);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('lifecycleStatus') or jsn.has('_lifecycleStatus') then
        value.lifecycleStatusElement := parseEnum(jsn.path+'/lifecycleStatus', jsn.node['lifecycleStatus'], jsn.vObj['_lifecycleStatus'], CODES_TFhirGoalLifecycleStatusEnum, SYSTEMS_TFhirGoalLifecycleStatusEnum);
    if jsn.has('achievementStatus') then
        value.achievementStatus := ParseCodeableConcept(jsn.vObj['achievementStatus']);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('priority') then
        value.priority := ParseCodeableConcept(jsn.vObj['priority']);
    if jsn.has('description') then
        value.description := ParseCodeableConcept(jsn.vObj['description']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('startCodeableConcept') {a4} then
      value.start := ParseCodeableConcept(jsn.vObj['startCodeableConcept']);
    if jsn.has('startDate') or jsn.has('_startDate') then
      value.start := parseDate(jsn.node['startDate'], jsn.vObj['_startDate']);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], value.targetList, parseGoalTarget);
    if jsn.has('statusDate') or jsn.has('_statusDate') then
        value.statusDateElement := parseDate(jsn.node['statusDate'], jsn.vObj['_statusDate']);
    if jsn.has('statusReason') or jsn.has('_statusReason') then
        value.statusReasonElement := parseString(jsn.node['statusReason'], jsn.vObj['_statusReason']);
    if jsn.has('expressedBy') then
        value.expressedBy := ParseReference(jsn.vObj['expressedBy']);
    if jsn.has('addresses') then
      iterateArray(jsn.vArr['addresses'], value.addressesList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('outcomeCode') then
      iterateArray(jsn.vArr['outcomeCode'], value.outcomeCodeList, parseCodeableConcept);
    if jsn.has('outcomeReference') then
      iterateArray(jsn.vArr['outcomeReference'], value.outcomeReferenceList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeGoal(json : TJSONWriter; name : string; value : TFhirGoal; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'lifecycleStatus', value.lifecycleStatusElement, CODES_TFhirGoalLifecycleStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'achievementStatus', value.achievementStatus);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'priority', value.priority);
  ComposeCodeableConcept(json, 'description', value.description);
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.start is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'startCodeableConcept', TFhirCodeableConcept(value.start)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.start is TFhirDate) then 
  begin
    ComposeDateValue(json, 'startDate', TFhirDate(value.start), false);
    ComposeDateProps(json, 'startDate', TFhirDate(value.start), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.targetList.Count > 0) then
  begin
    startArray(json, 'target', value.targetList, false);
    for i := 0 to value.targetList.Count - 1 do
      ComposeGoalTarget(json, '', value.targetList[i]);
    finishArray(json, value.targetList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'statusDate', value.statusDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'statusDate', value.statusDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'statusReason', value.statusReasonElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'statusReason', value.statusReasonElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'expressedBy', value.expressedBy);
  if (SummaryOption in [soFull, soData]) and (value.addressesList.Count > 0) then
  begin
    startArray(json, 'addresses', value.addressesList, false);
    for i := 0 to value.addressesList.Count - 1 do
      ComposeReference(json, '', value.addressesList[i]);
    finishArray(json, value.addressesList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.outcomeCodeList.Count > 0) then
  begin
    startArray(json, 'outcomeCode', value.outcomeCodeList, false);
    for i := 0 to value.outcomeCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.outcomeCodeList[i]);
    finishArray(json, value.outcomeCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.outcomeReferenceList.Count > 0) then
  begin
    startArray(json, 'outcomeReference', value.outcomeReferenceList, false);
    for i := 0 to value.outcomeReferenceList.Count - 1 do
      ComposeReference(json, '', value.outcomeReferenceList[i]);
    finishArray(json, value.outcomeReferenceList);
  end;
end;

{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
procedure TFHIRJsonParser.ParseGraphDefinitionLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGraphDefinitionLink(jsn)); 
end;

function TFHIRJsonParser.ParseGraphDefinitionLink(jsn : TJsonObject) : TFhirGraphDefinitionLink;
begin
  result := TFhirGraphDefinitionLink.Create;
  try
    ParseGraphDefinitionLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkProperties(jsn : TJsonObject; value : TFhirGraphDefinitionLink);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('path') or jsn.has('_path') then
        value.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);
    if jsn.has('sliceName') or jsn.has('_sliceName') then
        value.sliceNameElement := parseString(jsn.node['sliceName'], jsn.vObj['_sliceName']);
    if jsn.has('min') or jsn.has('_min') then
        value.minElement := parseInteger(jsn.node['min'], jsn.vObj['_min']);
    if jsn.has('max') or jsn.has('_max') then
        value.maxElement := parseString(jsn.node['max'], jsn.vObj['_max']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], value.targetList, parseGraphDefinitionLinkTarget);
end;

procedure TFHIRJsonComposer.ComposeGraphDefinitionLink(json : TJSONWriter; name : string; value : TFhirGraphDefinitionLink; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', value.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', value.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'sliceName', value.sliceNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'sliceName', value.sliceNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'min', value.minElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'min', value.minElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'max', value.maxElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'max', value.maxElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.targetList.Count > 0) then
  begin
    startArray(json, 'target', value.targetList, false);
    for i := 0 to value.targetList.Count - 1 do
      ComposeGraphDefinitionLinkTarget(json, '', value.targetList[i]);
    finishArray(json, value.targetList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGraphDefinitionLinkTarget(jsn)); 
end;

function TFHIRJsonParser.ParseGraphDefinitionLinkTarget(jsn : TJsonObject) : TFhirGraphDefinitionLinkTarget;
begin
  result := TFhirGraphDefinitionLinkTarget.Create;
  try
    ParseGraphDefinitionLinkTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkTargetProperties(jsn : TJsonObject; value : TFhirGraphDefinitionLinkTarget);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('params') or jsn.has('_params') then
        value.paramsElement := parseString(jsn.node['params'], jsn.vObj['_params']);
    if jsn.has('profile') or jsn.has('_profile') then
        value.profileElement := parseCanonical(jsn.node['profile'], jsn.vObj['_profile']);
    if jsn.has('compartment') then
      iterateArray(jsn.vArr['compartment'], value.compartmentList, parseGraphDefinitionLinkTargetCompartment);
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], value.link_List, parseGraphDefinitionLink);
end;

procedure TFHIRJsonComposer.ComposeGraphDefinitionLinkTarget(json : TJSONWriter; name : string; value : TFhirGraphDefinitionLinkTarget; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirResourceTypesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'params', value.paramsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'params', value.paramsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalValue(json, 'profile', value.profileElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalProps(json, 'profile', value.profileElement, false);
  if (SummaryOption in [soFull, soData]) and (value.compartmentList.Count > 0) then
  begin
    startArray(json, 'compartment', value.compartmentList, false);
    for i := 0 to value.compartmentList.Count - 1 do
      ComposeGraphDefinitionLinkTargetCompartment(json, '', value.compartmentList[i]);
    finishArray(json, value.compartmentList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.link_List.Count > 0) then
  begin
    startArray(json, 'link', value.link_List, false);
    for i := 0 to value.link_List.Count - 1 do
      ComposeGraphDefinitionLink(json, '', value.link_List[i]);
    finishArray(json, value.link_List);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkTargetCompartment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGraphDefinitionLinkTargetCompartment(jsn)); 
end;

function TFHIRJsonParser.ParseGraphDefinitionLinkTargetCompartment(jsn : TJsonObject) : TFhirGraphDefinitionLinkTargetCompartment;
begin
  result := TFhirGraphDefinitionLinkTargetCompartment.Create;
  try
    ParseGraphDefinitionLinkTargetCompartmentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkTargetCompartmentProperties(jsn : TJsonObject; value : TFhirGraphDefinitionLinkTargetCompartment);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('use') or jsn.has('_use') then
        value.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirGraphCompartmentUseEnum, SYSTEMS_TFhirGraphCompartmentUseEnum);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirCompartmentTypeEnum, SYSTEMS_TFhirCompartmentTypeEnum);
    if jsn.has('rule') or jsn.has('_rule') then
        value.ruleElement := parseEnum(jsn.path+'/rule', jsn.node['rule'], jsn.vObj['_rule'], CODES_TFhirGraphCompartmentRuleEnum, SYSTEMS_TFhirGraphCompartmentRuleEnum);
    if jsn.has('expression') or jsn.has('_expression') then
        value.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
end;

procedure TFHIRJsonComposer.ComposeGraphDefinitionLinkTargetCompartment(json : TJSONWriter; name : string; value : TFhirGraphDefinitionLinkTargetCompartment; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'use', value.useElement, CODES_TFhirGraphCompartmentUseEnum, false);
  ComposeEnumValue(json, 'code', value.codeElement, CODES_TFhirCompartmentTypeEnum, false);
  ComposeEnumValue(json, 'rule', value.ruleElement, CODES_TFhirGraphCompartmentRuleEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', value.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', value.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseGraphDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGraphDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseGraphDefinition(jsn : TJsonObject) : TFhirGraphDefinition;
begin
  result := TFhirGraphDefinition.Create;
  try
    ParseGraphDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionProperties(jsn : TJsonObject; value : TFhirGraphDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('start') or jsn.has('_start') then
        value.startElement := parseEnum(jsn.path+'/start', jsn.node['start'], jsn.vObj['_start'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') or jsn.has('_profile') then
        value.profileElement := parseCanonical(jsn.node['profile'], jsn.vObj['_profile']);
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], value.link_List, parseGraphDefinitionLink);
end;

procedure TFHIRJsonComposer.ComposeGraphDefinition(json : TJSONWriter; name : string; value : TFhirGraphDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  ComposeEnumValue(json, 'start', value.startElement, CODES_TFhirResourceTypesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalValue(json, 'profile', value.profileElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalProps(json, 'profile', value.profileElement, false);
  if (SummaryOption in [soFull, soData]) and (value.link_List.Count > 0) then
  begin
    startArray(json, 'link', value.link_List, false);
    for i := 0 to value.link_List.Count - 1 do
      ComposeGraphDefinitionLink(json, '', value.link_List[i]);
    finishArray(json, value.link_List);
  end;
end;

{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
procedure TFHIRJsonParser.ParseGroupCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGroupCharacteristic(jsn)); 
end;

function TFHIRJsonParser.ParseGroupCharacteristic(jsn : TJsonObject) : TFhirGroupCharacteristic;
begin
  result := TFhirGroupCharacteristic.Create;
  try
    ParseGroupCharacteristicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGroupCharacteristicProperties(jsn : TJsonObject; value : TFhirGroupCharacteristic);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      value.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueReference') {a4} then
      value.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('exclude') or jsn.has('_exclude') then
        value.excludeElement := parseBoolean(jsn.node['exclude'], jsn.vObj['_exclude']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeGroupCharacteristic(json : TJSONWriter; name : string; value : TFhirGroupCharacteristic; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'code', value.code);
  if (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (value.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(value.value)) 
  else if (value.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(value.value)) 
  else if (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end;
  ComposeBooleanValue(json, 'exclude', value.excludeElement, false);
  ComposeBooleanProps(json, 'exclude', value.excludeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseGroupMember(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGroupMember(jsn)); 
end;

function TFHIRJsonParser.ParseGroupMember(jsn : TJsonObject) : TFhirGroupMember;
begin
  result := TFhirGroupMember.Create;
  try
    ParseGroupMemberProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGroupMemberProperties(jsn : TJsonObject; value : TFhirGroupMember);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('entity') then
        value.entity := ParseReference(jsn.vObj['entity']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('inactive') or jsn.has('_inactive') then
        value.inactiveElement := parseBoolean(jsn.node['inactive'], jsn.vObj['_inactive']);
end;

procedure TFHIRJsonComposer.ComposeGroupMember(json : TJSONWriter; name : string; value : TFhirGroupMember; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'entity', value.entity);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'inactive', value.inactiveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'inactive', value.inactiveElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGroup(jsn)); 
end;

function TFHIRJsonParser.ParseGroup(jsn : TJsonObject) : TFhirGroup;
begin
  result := TFhirGroup.Create;
  try
    ParseGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGroupProperties(jsn : TJsonObject; value : TFhirGroup);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        value.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirGroupTypeEnum, SYSTEMS_TFhirGroupTypeEnum);
    if jsn.has('actual') or jsn.has('_actual') then
        value.actualElement := parseBoolean(jsn.node['actual'], jsn.vObj['_actual']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('quantity') or jsn.has('_quantity') then
        value.quantityElement := parseUnsignedInt(jsn.node['quantity'], jsn.vObj['_quantity']);
    if jsn.has('managingEntity') then
        value.managingEntity := ParseReference(jsn.vObj['managingEntity']);
    if jsn.has('characteristic') then
      iterateArray(jsn.vArr['characteristic'], value.characteristicList, parseGroupCharacteristic);
    if jsn.has('member') then
      iterateArray(jsn.vArr['member'], value.memberList, parseGroupMember);
end;

procedure TFHIRJsonComposer.ComposeGroup(json : TJSONWriter; name : string; value : TFhirGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', value.activeElement, false);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirGroupTypeEnum, false);
  ComposeBooleanValue(json, 'actual', value.actualElement, false);
  ComposeBooleanProps(json, 'actual', value.actualElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'quantity', value.quantityElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'quantity', value.quantityElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'managingEntity', value.managingEntity);
  if (SummaryOption in [soFull, soData]) and (value.characteristicList.Count > 0) then
  begin
    startArray(json, 'characteristic', value.characteristicList, false);
    for i := 0 to value.characteristicList.Count - 1 do
      ComposeGroupCharacteristic(json, '', value.characteristicList[i]);
    finishArray(json, value.characteristicList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.memberList.Count > 0) then
  begin
    startArray(json, 'member', value.memberList, false);
    for i := 0 to value.memberList.Count - 1 do
      ComposeGroupMember(json, '', value.memberList[i]);
    finishArray(json, value.memberList);
  end;
end;

{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
procedure TFHIRJsonParser.ParseGuidanceResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGuidanceResponse(jsn)); 
end;

function TFHIRJsonParser.ParseGuidanceResponse(jsn : TJsonObject) : TFhirGuidanceResponse;
begin
  result := TFhirGuidanceResponse.Create;
  try
    ParseGuidanceResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGuidanceResponseProperties(jsn : TJsonObject; value : TFhirGuidanceResponse);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('requestIdentifier') then
        value.requestIdentifier := ParseIdentifier(jsn.vObj['requestIdentifier']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('moduleCanonical') or jsn.has('_moduleCanonical') then
      value.module := parseCanonical(jsn.node['moduleCanonical'], jsn.vObj['_moduleCanonical']);
    if jsn.has('moduleCodeableConcept') {a4} then
      value.module := ParseCodeableConcept(jsn.vObj['moduleCodeableConcept']);
    if jsn.has('moduleUri') or jsn.has('_moduleUri') then
      value.module := parseUri(jsn.node['moduleUri'], jsn.vObj['_moduleUri']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirGuidanceResponseStatusEnum, SYSTEMS_TFhirGuidanceResponseStatusEnum);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
        value.occurrenceDateTimeElement := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('performer') then
        value.performer := ParseReference(jsn.vObj['performer']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('evaluationMessage') then
      iterateArray(jsn.vArr['evaluationMessage'], value.evaluationMessageList, parseReference);
    if jsn.has('outputParameters') then
        value.outputParameters := ParseReference(jsn.vObj['outputParameters']);
    if jsn.has('result') then
        value.result := ParseReference(jsn.vObj['result']);
    if jsn.has('dataRequirement') then
      iterateArray(jsn.vArr['dataRequirement'], value.dataRequirementList, parseDataRequirement);
end;

procedure TFHIRJsonComposer.ComposeGuidanceResponse(json : TJSONWriter; name : string; value : TFhirGuidanceResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'requestIdentifier', value.requestIdentifier);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (value.module is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'moduleCanonical', TFhirCanonical(value.module), false);
    ComposeCanonicalProps(json, 'moduleCanonical', TFhirCanonical(value.module), false);
  end
  else if (value.module is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'moduleCodeableConcept', TFhirCodeableConcept(value.module)) 
  else if (value.module is TFhirUri) then 
  begin
    ComposeUriValue(json, 'moduleUri', TFhirUri(value.module), false);
    ComposeUriProps(json, 'moduleUri', TFhirUri(value.module), false);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirGuidanceResponseStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'occurrenceDateTime', value.occurrenceDateTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'occurrenceDateTime', value.occurrenceDateTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'performer', value.performer);
  if (SummaryOption in [soFull, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.evaluationMessageList.Count > 0) then
  begin
    startArray(json, 'evaluationMessage', value.evaluationMessageList, false);
    for i := 0 to value.evaluationMessageList.Count - 1 do
      ComposeReference(json, '', value.evaluationMessageList[i]);
    finishArray(json, value.evaluationMessageList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'outputParameters', value.outputParameters);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'result', value.result);
  if (SummaryOption in [soFull, soData]) and (value.dataRequirementList.Count > 0) then
  begin
    startArray(json, 'dataRequirement', value.dataRequirementList, false);
    for i := 0 to value.dataRequirementList.Count - 1 do
      ComposeDataRequirement(json, '', value.dataRequirementList[i]);
    finishArray(json, value.dataRequirementList);
  end;
end;

{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
procedure TFHIRJsonParser.ParseHealthcareServiceEligibility(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseHealthcareServiceEligibility(jsn)); 
end;

function TFHIRJsonParser.ParseHealthcareServiceEligibility(jsn : TJsonObject) : TFhirHealthcareServiceEligibility;
begin
  result := TFhirHealthcareServiceEligibility.Create;
  try
    ParseHealthcareServiceEligibilityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseHealthcareServiceEligibilityProperties(jsn : TJsonObject; value : TFhirHealthcareServiceEligibility);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseMarkdown(jsn.node['comment'], jsn.vObj['_comment']);
end;

procedure TFHIRJsonComposer.ComposeHealthcareServiceEligibility(json : TJSONWriter; name : string; value : TFhirHealthcareServiceEligibility; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'comment', value.commentElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseHealthcareServiceAvailableTime(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseHealthcareServiceAvailableTime(jsn)); 
end;

function TFHIRJsonParser.ParseHealthcareServiceAvailableTime(jsn : TJsonObject) : TFhirHealthcareServiceAvailableTime;
begin
  result := TFhirHealthcareServiceAvailableTime.Create;
  try
    ParseHealthcareServiceAvailableTimeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseHealthcareServiceAvailableTimeProperties(jsn : TJsonObject; value : TFhirHealthcareServiceAvailableTime);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('daysOfWeek') or jsn.has('_daysOfWeek') then
      iterateEnumArray(jsn.vArr['daysOfWeek'], jsn.vArr['_daysOfWeek'], jsn.path+'/daysOfWeek', value.daysOfWeekList, parseEnum, CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum);
    if jsn.has('allDay') or jsn.has('_allDay') then
        value.allDayElement := parseBoolean(jsn.node['allDay'], jsn.vObj['_allDay']);
    if jsn.has('availableStartTime') or jsn.has('_availableStartTime') then
        value.availableStartTimeElement := parseTime(jsn.node['availableStartTime'], jsn.vObj['_availableStartTime']);
    if jsn.has('availableEndTime') or jsn.has('_availableEndTime') then
        value.availableEndTimeElement := parseTime(jsn.node['availableEndTime'], jsn.vObj['_availableEndTime']);
end;

procedure TFHIRJsonComposer.ComposeHealthcareServiceAvailableTime(json : TJSONWriter; name : string; value : TFhirHealthcareServiceAvailableTime; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.daysOfWeekList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.daysOfWeekList.Count - 1 do
    begin
      val := val or (value.daysOfWeekList[i].hasPrimitiveValue);
      ext := ext or ((value.daysOfWeekList[i].id <> '') or (value.daysOfWeekList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'daysOfWeek', value.daysOfWeekList, true);
      for i := 0 to value.daysOfWeekList.Count - 1 do
        ComposeEnumValue(json, '', value.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      finishArray(json, value.daysOfWeekList);
    end;
    if ext then
    begin
      startArray(json, '_daysOfWeek', value.daysOfWeekList, false);
      for i := 0 to value.daysOfWeekList.Count - 1 do
        ComposeEnumProps(json, '', value.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      finishArray(json, value.daysOfWeekList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'allDay', value.allDayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'allDay', value.allDayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'availableStartTime', value.availableStartTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'availableStartTime', value.availableStartTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'availableEndTime', value.availableEndTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'availableEndTime', value.availableEndTimeElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseHealthcareServiceNotAvailable(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseHealthcareServiceNotAvailable(jsn)); 
end;

function TFHIRJsonParser.ParseHealthcareServiceNotAvailable(jsn : TJsonObject) : TFhirHealthcareServiceNotAvailable;
begin
  result := TFhirHealthcareServiceNotAvailable.Create;
  try
    ParseHealthcareServiceNotAvailableProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseHealthcareServiceNotAvailableProperties(jsn : TJsonObject; value : TFhirHealthcareServiceNotAvailable);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('during') then
        value.during := ParsePeriod(jsn.vObj['during']);
end;

procedure TFHIRJsonComposer.ComposeHealthcareServiceNotAvailable(json : TJSONWriter; name : string; value : TFhirHealthcareServiceNotAvailable; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'description', value.descriptionElement, false);
  ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'during', value.during);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseHealthcareService(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseHealthcareService(jsn)); 
end;

function TFHIRJsonParser.ParseHealthcareService(jsn : TJsonObject) : TFhirHealthcareService;
begin
  result := TFhirHealthcareService.Create;
  try
    ParseHealthcareServiceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseHealthcareServiceProperties(jsn : TJsonObject; value : TFhirHealthcareService);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        value.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);
    if jsn.has('providedBy') then
        value.providedBy := ParseReference(jsn.vObj['providedBy']);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], value.specialtyList, parseCodeableConcept);
    if jsn.has('location') then
      iterateArray(jsn.vArr['location'], value.locationList, parseReference);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);
    if jsn.has('extraDetails') or jsn.has('_extraDetails') then
        value.extraDetailsElement := parseMarkdown(jsn.node['extraDetails'], jsn.vObj['_extraDetails']);
    if jsn.has('photo') then
        value.photo := ParseAttachment(jsn.vObj['photo']);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
    if jsn.has('coverageArea') then
      iterateArray(jsn.vArr['coverageArea'], value.coverageAreaList, parseReference);
    if jsn.has('serviceProvisionCode') then
      iterateArray(jsn.vArr['serviceProvisionCode'], value.serviceProvisionCodeList, parseCodeableConcept);
    if jsn.has('eligibility') then
      iterateArray(jsn.vArr['eligibility'], value.eligibilityList, parseHealthcareServiceEligibility);
    if jsn.has('program') then
      iterateArray(jsn.vArr['program'], value.program_List, parseCodeableConcept);
    if jsn.has('characteristic') then
      iterateArray(jsn.vArr['characteristic'], value.characteristicList, parseCodeableConcept);
    if jsn.has('communication') then
      iterateArray(jsn.vArr['communication'], value.communicationList, parseCodeableConcept);
    if jsn.has('referralMethod') then
      iterateArray(jsn.vArr['referralMethod'], value.referralMethodList, parseCodeableConcept);
    if jsn.has('appointmentRequired') or jsn.has('_appointmentRequired') then
        value.appointmentRequiredElement := parseBoolean(jsn.node['appointmentRequired'], jsn.vObj['_appointmentRequired']);
    if jsn.has('availableTime') then
      iterateArray(jsn.vArr['availableTime'], value.availableTimeList, parseHealthcareServiceAvailableTime);
    if jsn.has('notAvailable') then
      iterateArray(jsn.vArr['notAvailable'], value.notAvailableList, parseHealthcareServiceNotAvailable);
    if jsn.has('availabilityExceptions') or jsn.has('_availabilityExceptions') then
        value.availabilityExceptionsElement := parseString(jsn.node['availabilityExceptions'], jsn.vObj['_availabilityExceptions']);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], value.endpointList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeHealthcareService(json : TJSONWriter; name : string; value : TFhirHealthcareService; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'providedBy', value.providedBy);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.specialtyList.Count > 0) then
  begin
    startArray(json, 'specialty', value.specialtyList, false);
    for i := 0 to value.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', value.specialtyList[i]);
    finishArray(json, value.specialtyList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.locationList.Count > 0) then
  begin
    startArray(json, 'location', value.locationList, false);
    for i := 0 to value.locationList.Count - 1 do
      ComposeReference(json, '', value.locationList[i]);
    finishArray(json, value.locationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'extraDetails', value.extraDetailsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'extraDetails', value.extraDetailsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(json, 'photo', value.photo);
  if (SummaryOption in [soFull, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.coverageAreaList.Count > 0) then
  begin
    startArray(json, 'coverageArea', value.coverageAreaList, false);
    for i := 0 to value.coverageAreaList.Count - 1 do
      ComposeReference(json, '', value.coverageAreaList[i]);
    finishArray(json, value.coverageAreaList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.serviceProvisionCodeList.Count > 0) then
  begin
    startArray(json, 'serviceProvisionCode', value.serviceProvisionCodeList, false);
    for i := 0 to value.serviceProvisionCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.serviceProvisionCodeList[i]);
    finishArray(json, value.serviceProvisionCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.eligibilityList.Count > 0) then
  begin
    startArray(json, 'eligibility', value.eligibilityList, false);
    for i := 0 to value.eligibilityList.Count - 1 do
      ComposeHealthcareServiceEligibility(json, '', value.eligibilityList[i]);
    finishArray(json, value.eligibilityList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.program_List.Count > 0) then
  begin
    startArray(json, 'program', value.program_List, false);
    for i := 0 to value.program_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.program_List[i]);
    finishArray(json, value.program_List);
  end;
  if (SummaryOption in [soFull, soData]) and (value.characteristicList.Count > 0) then
  begin
    startArray(json, 'characteristic', value.characteristicList, false);
    for i := 0 to value.characteristicList.Count - 1 do
      ComposeCodeableConcept(json, '', value.characteristicList[i]);
    finishArray(json, value.characteristicList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.communicationList.Count > 0) then
  begin
    startArray(json, 'communication', value.communicationList, false);
    for i := 0 to value.communicationList.Count - 1 do
      ComposeCodeableConcept(json, '', value.communicationList[i]);
    finishArray(json, value.communicationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.referralMethodList.Count > 0) then
  begin
    startArray(json, 'referralMethod', value.referralMethodList, false);
    for i := 0 to value.referralMethodList.Count - 1 do
      ComposeCodeableConcept(json, '', value.referralMethodList[i]);
    finishArray(json, value.referralMethodList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'appointmentRequired', value.appointmentRequiredElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'appointmentRequired', value.appointmentRequiredElement, false);
  if (SummaryOption in [soFull, soData]) and (value.availableTimeList.Count > 0) then
  begin
    startArray(json, 'availableTime', value.availableTimeList, false);
    for i := 0 to value.availableTimeList.Count - 1 do
      ComposeHealthcareServiceAvailableTime(json, '', value.availableTimeList[i]);
    finishArray(json, value.availableTimeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.notAvailableList.Count > 0) then
  begin
    startArray(json, 'notAvailable', value.notAvailableList, false);
    for i := 0 to value.notAvailableList.Count - 1 do
      ComposeHealthcareServiceNotAvailable(json, '', value.notAvailableList[i]);
    finishArray(json, value.notAvailableList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'availabilityExceptions', value.availabilityExceptionsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'availabilityExceptions', value.availabilityExceptionsElement, false);
  if (SummaryOption in [soFull, soData]) and (value.endpointList.Count > 0) then
  begin
    startArray(json, 'endpoint', value.endpointList, false);
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(json, '', value.endpointList[i]);
    finishArray(json, value.endpointList);
  end;
end;

{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
procedure TFHIRJsonParser.ParseImagingStudySeries(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImagingStudySeries(jsn)); 
end;

function TFHIRJsonParser.ParseImagingStudySeries(jsn : TJsonObject) : TFhirImagingStudySeries;
begin
  result := TFhirImagingStudySeries.Create;
  try
    ParseImagingStudySeriesProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImagingStudySeriesProperties(jsn : TJsonObject; value : TFhirImagingStudySeries);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('uid') or jsn.has('_uid') then
        value.uidElement := parseId(jsn.node['uid'], jsn.vObj['_uid']);
    if jsn.has('number') or jsn.has('_number') then
        value.numberElement := parseUnsignedInt(jsn.node['number'], jsn.vObj['_number']);
    if jsn.has('modality') then
        value.modality := ParseCoding(jsn.vObj['modality']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('numberOfInstances') or jsn.has('_numberOfInstances') then
        value.numberOfInstancesElement := parseUnsignedInt(jsn.node['numberOfInstances'], jsn.vObj['_numberOfInstances']);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], value.endpointList, parseReference);
    if jsn.has('bodySite') then
        value.bodySite := ParseCoding(jsn.vObj['bodySite']);
    if jsn.has('laterality') then
        value.laterality := ParseCoding(jsn.vObj['laterality']);
    if jsn.has('specimen') then
      iterateArray(jsn.vArr['specimen'], value.specimenList, parseReference);
    if jsn.has('started') or jsn.has('_started') then
        value.startedElement := parseDateTime(jsn.node['started'], jsn.vObj['_started']);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], value.performerList, parseImagingStudySeriesPerformer);
    if jsn.has('instance') then
      iterateArray(jsn.vArr['instance'], value.instanceList, parseImagingStudySeriesInstance);
end;

procedure TFHIRJsonComposer.ComposeImagingStudySeries(json : TJSONWriter; name : string; value : TFhirImagingStudySeries; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeIdValue(json, 'uid', value.uidElement, false);
  ComposeIdProps(json, 'uid', value.uidElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'number', value.numberElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'number', value.numberElement, false);
  ComposeCoding(json, 'modality', value.modality);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'numberOfInstances', value.numberOfInstancesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'numberOfInstances', value.numberOfInstancesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.endpointList.Count > 0) then
  begin
    startArray(json, 'endpoint', value.endpointList, false);
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(json, '', value.endpointList[i]);
    finishArray(json, value.endpointList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'bodySite', value.bodySite);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'laterality', value.laterality);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.specimenList.Count > 0) then
  begin
    startArray(json, 'specimen', value.specimenList, false);
    for i := 0 to value.specimenList.Count - 1 do
      ComposeReference(json, '', value.specimenList[i]);
    finishArray(json, value.specimenList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'started', value.startedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'started', value.startedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.performerList.Count > 0) then
  begin
    startArray(json, 'performer', value.performerList, false);
    for i := 0 to value.performerList.Count - 1 do
      ComposeImagingStudySeriesPerformer(json, '', value.performerList[i]);
    finishArray(json, value.performerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.instanceList.Count > 0) then
  begin
    startArray(json, 'instance', value.instanceList, false);
    for i := 0 to value.instanceList.Count - 1 do
      ComposeImagingStudySeriesInstance(json, '', value.instanceList[i]);
    finishArray(json, value.instanceList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImagingStudySeriesPerformer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImagingStudySeriesPerformer(jsn)); 
end;

function TFHIRJsonParser.ParseImagingStudySeriesPerformer(jsn : TJsonObject) : TFhirImagingStudySeriesPerformer;
begin
  result := TFhirImagingStudySeriesPerformer.Create;
  try
    ParseImagingStudySeriesPerformerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImagingStudySeriesPerformerProperties(jsn : TJsonObject; value : TFhirImagingStudySeriesPerformer);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('function') then
        value.function_ := ParseCodeableConcept(jsn.vObj['function']);
    if jsn.has('actor') then
        value.actor := ParseReference(jsn.vObj['actor']);
end;

procedure TFHIRJsonComposer.ComposeImagingStudySeriesPerformer(json : TJSONWriter; name : string; value : TFhirImagingStudySeriesPerformer; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'function', value.function_);
  ComposeReference(json, 'actor', value.actor);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImagingStudySeriesInstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImagingStudySeriesInstance(jsn)); 
end;

function TFHIRJsonParser.ParseImagingStudySeriesInstance(jsn : TJsonObject) : TFhirImagingStudySeriesInstance;
begin
  result := TFhirImagingStudySeriesInstance.Create;
  try
    ParseImagingStudySeriesInstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImagingStudySeriesInstanceProperties(jsn : TJsonObject; value : TFhirImagingStudySeriesInstance);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('uid') or jsn.has('_uid') then
        value.uidElement := parseId(jsn.node['uid'], jsn.vObj['_uid']);
    if jsn.has('sopClass') then
        value.sopClass := ParseCoding(jsn.vObj['sopClass']);
    if jsn.has('number') or jsn.has('_number') then
        value.numberElement := parseUnsignedInt(jsn.node['number'], jsn.vObj['_number']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
end;

procedure TFHIRJsonComposer.ComposeImagingStudySeriesInstance(json : TJSONWriter; name : string; value : TFhirImagingStudySeriesInstance; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeIdValue(json, 'uid', value.uidElement, false);
  ComposeIdProps(json, 'uid', value.uidElement, false);
  ComposeCoding(json, 'sopClass', value.sopClass);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'number', value.numberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'number', value.numberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImagingStudy(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImagingStudy(jsn)); 
end;

function TFHIRJsonParser.ParseImagingStudy(jsn : TJsonObject) : TFhirImagingStudy;
begin
  result := TFhirImagingStudy.Create;
  try
    ParseImagingStudyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImagingStudyProperties(jsn : TJsonObject; value : TFhirImagingStudy);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirImagingStudyStatusEnum, SYSTEMS_TFhirImagingStudyStatusEnum);
    if jsn.has('modality') then
      iterateArray(jsn.vArr['modality'], value.modalityList, parseCoding);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('started') or jsn.has('_started') then
        value.startedElement := parseDateTime(jsn.node['started'], jsn.vObj['_started']);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('referrer') then
        value.referrer := ParseReference(jsn.vObj['referrer']);
    if jsn.has('interpreter') then
      iterateArray(jsn.vArr['interpreter'], value.interpreterList, parseReference);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], value.endpointList, parseReference);
    if jsn.has('numberOfSeries') or jsn.has('_numberOfSeries') then
        value.numberOfSeriesElement := parseUnsignedInt(jsn.node['numberOfSeries'], jsn.vObj['_numberOfSeries']);
    if jsn.has('numberOfInstances') or jsn.has('_numberOfInstances') then
        value.numberOfInstancesElement := parseUnsignedInt(jsn.node['numberOfInstances'], jsn.vObj['_numberOfInstances']);
    if jsn.has('procedureReference') then
        value.procedureReference := ParseReference(jsn.vObj['procedureReference']);
    if jsn.has('procedureCode') then
      iterateArray(jsn.vArr['procedureCode'], value.procedureCodeList, parseCodeableConcept);
    if jsn.has('location') then
        value.location := ParseReference(jsn.vObj['location']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('series') then
      iterateArray(jsn.vArr['series'], value.seriesList, parseImagingStudySeries);
end;

procedure TFHIRJsonComposer.ComposeImagingStudy(json : TJSONWriter; name : string; value : TFhirImagingStudy; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirImagingStudyStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.modalityList.Count > 0) then
  begin
    startArray(json, 'modality', value.modalityList, false);
    for i := 0 to value.modalityList.Count - 1 do
      ComposeCoding(json, '', value.modalityList[i]);
    finishArray(json, value.modalityList);
  end;
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'started', value.startedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'started', value.startedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'referrer', value.referrer);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.interpreterList.Count > 0) then
  begin
    startArray(json, 'interpreter', value.interpreterList, false);
    for i := 0 to value.interpreterList.Count - 1 do
      ComposeReference(json, '', value.interpreterList[i]);
    finishArray(json, value.interpreterList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.endpointList.Count > 0) then
  begin
    startArray(json, 'endpoint', value.endpointList, false);
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(json, '', value.endpointList[i]);
    finishArray(json, value.endpointList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'numberOfSeries', value.numberOfSeriesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'numberOfSeries', value.numberOfSeriesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'numberOfInstances', value.numberOfInstancesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'numberOfInstances', value.numberOfInstancesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'procedureReference', value.procedureReference);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.procedureCodeList.Count > 0) then
  begin
    startArray(json, 'procedureCode', value.procedureCodeList, false);
    for i := 0 to value.procedureCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.procedureCodeList[i]);
    finishArray(json, value.procedureCodeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'location', value.location);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.seriesList.Count > 0) then
  begin
    startArray(json, 'series', value.seriesList, false);
    for i := 0 to value.seriesList.Count - 1 do
      ComposeImagingStudySeries(json, '', value.seriesList[i]);
    finishArray(json, value.seriesList);
  end;
end;

{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
procedure TFHIRJsonParser.ParseImmunizationPerformer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationPerformer(jsn)); 
end;

function TFHIRJsonParser.ParseImmunizationPerformer(jsn : TJsonObject) : TFhirImmunizationPerformer;
begin
  result := TFhirImmunizationPerformer.Create;
  try
    ParseImmunizationPerformerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationPerformerProperties(jsn : TJsonObject; value : TFhirImmunizationPerformer);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('function') then
        value.function_ := ParseCodeableConcept(jsn.vObj['function']);
    if jsn.has('actor') then
        value.actor := ParseReference(jsn.vObj['actor']);
end;

procedure TFHIRJsonComposer.ComposeImmunizationPerformer(json : TJSONWriter; name : string; value : TFhirImmunizationPerformer; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'function', value.function_);
  ComposeReference(json, 'actor', value.actor);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImmunizationEducation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationEducation(jsn)); 
end;

function TFHIRJsonParser.ParseImmunizationEducation(jsn : TJsonObject) : TFhirImmunizationEducation;
begin
  result := TFhirImmunizationEducation.Create;
  try
    ParseImmunizationEducationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationEducationProperties(jsn : TJsonObject; value : TFhirImmunizationEducation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('documentType') or jsn.has('_documentType') then
        value.documentTypeElement := parseString(jsn.node['documentType'], jsn.vObj['_documentType']);
    if jsn.has('reference') or jsn.has('_reference') then
        value.referenceElement := parseUri(jsn.node['reference'], jsn.vObj['_reference']);
    if jsn.has('publicationDate') or jsn.has('_publicationDate') then
        value.publicationDateElement := parseDateTime(jsn.node['publicationDate'], jsn.vObj['_publicationDate']);
    if jsn.has('presentationDate') or jsn.has('_presentationDate') then
        value.presentationDateElement := parseDateTime(jsn.node['presentationDate'], jsn.vObj['_presentationDate']);
end;

procedure TFHIRJsonComposer.ComposeImmunizationEducation(json : TJSONWriter; name : string; value : TFhirImmunizationEducation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentType', value.documentTypeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentType', value.documentTypeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'reference', value.referenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'reference', value.referenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'publicationDate', value.publicationDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'publicationDate', value.publicationDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'presentationDate', value.presentationDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'presentationDate', value.presentationDateElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImmunizationReaction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationReaction(jsn)); 
end;

function TFHIRJsonParser.ParseImmunizationReaction(jsn : TJsonObject) : TFhirImmunizationReaction;
begin
  result := TFhirImmunizationReaction.Create;
  try
    ParseImmunizationReactionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationReactionProperties(jsn : TJsonObject; value : TFhirImmunizationReaction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('detail') then
        value.detail := ParseReference(jsn.vObj['detail']);
    if jsn.has('reported') or jsn.has('_reported') then
        value.reportedElement := parseBoolean(jsn.node['reported'], jsn.vObj['_reported']);
end;

procedure TFHIRJsonComposer.ComposeImmunizationReaction(json : TJSONWriter; name : string; value : TFhirImmunizationReaction; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'detail', value.detail);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'reported', value.reportedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'reported', value.reportedElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImmunizationProtocolApplied(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationProtocolApplied(jsn)); 
end;

function TFHIRJsonParser.ParseImmunizationProtocolApplied(jsn : TJsonObject) : TFhirImmunizationProtocolApplied;
begin
  result := TFhirImmunizationProtocolApplied.Create;
  try
    ParseImmunizationProtocolAppliedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationProtocolAppliedProperties(jsn : TJsonObject; value : TFhirImmunizationProtocolApplied);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('series') or jsn.has('_series') then
        value.seriesElement := parseString(jsn.node['series'], jsn.vObj['_series']);
    if jsn.has('authority') then
        value.authority := ParseReference(jsn.vObj['authority']);
    if jsn.has('targetDisease') then
      iterateArray(jsn.vArr['targetDisease'], value.targetDiseaseList, parseCodeableConcept);
    if jsn.has('doseNumberPositiveInt') or jsn.has('_doseNumberPositiveInt') then
      value.doseNumber := parsePositiveInt(jsn.node['doseNumberPositiveInt'], jsn.vObj['_doseNumberPositiveInt']);
    if jsn.has('doseNumberString') or jsn.has('_doseNumberString') then
      value.doseNumber := parseString(jsn.node['doseNumberString'], jsn.vObj['_doseNumberString']);
    if jsn.has('seriesDosesPositiveInt') or jsn.has('_seriesDosesPositiveInt') then
      value.seriesDoses := parsePositiveInt(jsn.node['seriesDosesPositiveInt'], jsn.vObj['_seriesDosesPositiveInt']);
    if jsn.has('seriesDosesString') or jsn.has('_seriesDosesString') then
      value.seriesDoses := parseString(jsn.node['seriesDosesString'], jsn.vObj['_seriesDosesString']);
end;

procedure TFHIRJsonComposer.ComposeImmunizationProtocolApplied(json : TJSONWriter; name : string; value : TFhirImmunizationProtocolApplied; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'series', value.seriesElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'series', value.seriesElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'authority', value.authority);
  if (SummaryOption in [soFull, soData]) and (value.targetDiseaseList.Count > 0) then
  begin
    startArray(json, 'targetDisease', value.targetDiseaseList, false);
    for i := 0 to value.targetDiseaseList.Count - 1 do
      ComposeCodeableConcept(json, '', value.targetDiseaseList[i]);
    finishArray(json, value.targetDiseaseList);
  end;
  if (value.doseNumber is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'doseNumberPositiveInt', TFhirPositiveInt(value.doseNumber), false);
    ComposePositiveIntProps(json, 'doseNumberPositiveInt', TFhirPositiveInt(value.doseNumber), false);
  end
  else if (value.doseNumber is TFhirString) then 
  begin
    ComposeStringValue(json, 'doseNumberString', TFhirString(value.doseNumber), false);
    ComposeStringProps(json, 'doseNumberString', TFhirString(value.doseNumber), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.seriesDoses is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'seriesDosesPositiveInt', TFhirPositiveInt(value.seriesDoses), false);
    ComposePositiveIntProps(json, 'seriesDosesPositiveInt', TFhirPositiveInt(value.seriesDoses), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.seriesDoses is TFhirString) then 
  begin
    ComposeStringValue(json, 'seriesDosesString', TFhirString(value.seriesDoses), false);
    ComposeStringProps(json, 'seriesDosesString', TFhirString(value.seriesDoses), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImmunization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunization(jsn)); 
end;

function TFHIRJsonParser.ParseImmunization(jsn : TJsonObject) : TFhirImmunization;
begin
  result := TFhirImmunization.Create;
  try
    ParseImmunizationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationProperties(jsn : TJsonObject; value : TFhirImmunization);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirImmunizationStatusCodesEnum, SYSTEMS_TFhirImmunizationStatusCodesEnum);
    if jsn.has('statusReason') then
        value.statusReason := ParseCodeableConcept(jsn.vObj['statusReason']);
    if jsn.has('vaccineCode') then
        value.vaccineCode := ParseCodeableConcept(jsn.vObj['vaccineCode']);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      value.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('occurrenceString') or jsn.has('_occurrenceString') then
      value.occurrence := parseString(jsn.node['occurrenceString'], jsn.vObj['_occurrenceString']);
    if jsn.has('recorded') or jsn.has('_recorded') then
        value.recordedElement := parseDateTime(jsn.node['recorded'], jsn.vObj['_recorded']);
    if jsn.has('primarySource') or jsn.has('_primarySource') then
        value.primarySourceElement := parseBoolean(jsn.node['primarySource'], jsn.vObj['_primarySource']);
    if jsn.has('reportOrigin') then
        value.reportOrigin := ParseCodeableConcept(jsn.vObj['reportOrigin']);
    if jsn.has('location') then
        value.location := ParseReference(jsn.vObj['location']);
    if jsn.has('manufacturer') then
        value.manufacturer := ParseReference(jsn.vObj['manufacturer']);
    if jsn.has('lotNumber') or jsn.has('_lotNumber') then
        value.lotNumberElement := parseString(jsn.node['lotNumber'], jsn.vObj['_lotNumber']);
    if jsn.has('expirationDate') or jsn.has('_expirationDate') then
        value.expirationDateElement := parseDate(jsn.node['expirationDate'], jsn.vObj['_expirationDate']);
    if jsn.has('site') then
        value.site := ParseCodeableConcept(jsn.vObj['site']);
    if jsn.has('route') then
        value.route := ParseCodeableConcept(jsn.vObj['route']);
    if jsn.has('doseQuantity') then
        value.doseQuantity := ParseQuantity(jsn.vObj['doseQuantity']);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], value.performerList, parseImmunizationPerformer);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('isSubpotent') or jsn.has('_isSubpotent') then
        value.isSubpotentElement := parseBoolean(jsn.node['isSubpotent'], jsn.vObj['_isSubpotent']);
    if jsn.has('subpotentReason') then
      iterateArray(jsn.vArr['subpotentReason'], value.subpotentReasonList, parseCodeableConcept);
    if jsn.has('education') then
      iterateArray(jsn.vArr['education'], value.educationList, parseImmunizationEducation);
    if jsn.has('programEligibility') then
      iterateArray(jsn.vArr['programEligibility'], value.programEligibilityList, parseCodeableConcept);
    if jsn.has('fundingSource') then
        value.fundingSource := ParseCodeableConcept(jsn.vObj['fundingSource']);
    if jsn.has('reaction') then
      iterateArray(jsn.vArr['reaction'], value.reactionList, parseImmunizationReaction);
    if jsn.has('protocolApplied') then
      iterateArray(jsn.vArr['protocolApplied'], value.protocolAppliedList, parseImmunizationProtocolApplied);
end;

procedure TFHIRJsonComposer.ComposeImmunization(json : TJSONWriter; name : string; value : TFhirImmunization; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirImmunizationStatusCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'statusReason', value.statusReason);
  ComposeCodeableConcept(json, 'vaccineCode', value.vaccineCode);
  ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (value.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
  end
  else if (value.occurrence is TFhirString) then 
  begin
    ComposeStringValue(json, 'occurrenceString', TFhirString(value.occurrence), false);
    ComposeStringProps(json, 'occurrenceString', TFhirString(value.occurrence), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'recorded', value.recordedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'recorded', value.recordedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'primarySource', value.primarySourceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'primarySource', value.primarySourceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reportOrigin', value.reportOrigin);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'location', value.location);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'manufacturer', value.manufacturer);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'lotNumber', value.lotNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'lotNumber', value.lotNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'expirationDate', value.expirationDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'expirationDate', value.expirationDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'site', value.site);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'route', value.route);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'doseQuantity', value.doseQuantity);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.performerList.Count > 0) then
  begin
    startArray(json, 'performer', value.performerList, false);
    for i := 0 to value.performerList.Count - 1 do
      ComposeImmunizationPerformer(json, '', value.performerList[i]);
    finishArray(json, value.performerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'isSubpotent', value.isSubpotentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'isSubpotent', value.isSubpotentElement, false);
  if (SummaryOption in [soFull, soData]) and (value.subpotentReasonList.Count > 0) then
  begin
    startArray(json, 'subpotentReason', value.subpotentReasonList, false);
    for i := 0 to value.subpotentReasonList.Count - 1 do
      ComposeCodeableConcept(json, '', value.subpotentReasonList[i]);
    finishArray(json, value.subpotentReasonList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.educationList.Count > 0) then
  begin
    startArray(json, 'education', value.educationList, false);
    for i := 0 to value.educationList.Count - 1 do
      ComposeImmunizationEducation(json, '', value.educationList[i]);
    finishArray(json, value.educationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.programEligibilityList.Count > 0) then
  begin
    startArray(json, 'programEligibility', value.programEligibilityList, false);
    for i := 0 to value.programEligibilityList.Count - 1 do
      ComposeCodeableConcept(json, '', value.programEligibilityList[i]);
    finishArray(json, value.programEligibilityList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'fundingSource', value.fundingSource);
  if (SummaryOption in [soFull, soData]) and (value.reactionList.Count > 0) then
  begin
    startArray(json, 'reaction', value.reactionList, false);
    for i := 0 to value.reactionList.Count - 1 do
      ComposeImmunizationReaction(json, '', value.reactionList[i]);
    finishArray(json, value.reactionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.protocolAppliedList.Count > 0) then
  begin
    startArray(json, 'protocolApplied', value.protocolAppliedList, false);
    for i := 0 to value.protocolAppliedList.Count - 1 do
      ComposeImmunizationProtocolApplied(json, '', value.protocolAppliedList[i]);
    finishArray(json, value.protocolAppliedList);
  end;
end;

{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
procedure TFHIRJsonParser.ParseImmunizationEvaluation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationEvaluation(jsn)); 
end;

function TFHIRJsonParser.ParseImmunizationEvaluation(jsn : TJsonObject) : TFhirImmunizationEvaluation;
begin
  result := TFhirImmunizationEvaluation.Create;
  try
    ParseImmunizationEvaluationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationEvaluationProperties(jsn : TJsonObject; value : TFhirImmunizationEvaluation);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirImmunizationEvaluationStatusCodesEnum, SYSTEMS_TFhirImmunizationEvaluationStatusCodesEnum);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('authority') then
        value.authority := ParseReference(jsn.vObj['authority']);
    if jsn.has('targetDisease') then
        value.targetDisease := ParseCodeableConcept(jsn.vObj['targetDisease']);
    if jsn.has('immunizationEvent') then
        value.immunizationEvent := ParseReference(jsn.vObj['immunizationEvent']);
    if jsn.has('doseStatus') then
        value.doseStatus := ParseCodeableConcept(jsn.vObj['doseStatus']);
    if jsn.has('doseStatusReason') then
      iterateArray(jsn.vArr['doseStatusReason'], value.doseStatusReasonList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('series') or jsn.has('_series') then
        value.seriesElement := parseString(jsn.node['series'], jsn.vObj['_series']);
    if jsn.has('doseNumberPositiveInt') or jsn.has('_doseNumberPositiveInt') then
      value.doseNumber := parsePositiveInt(jsn.node['doseNumberPositiveInt'], jsn.vObj['_doseNumberPositiveInt']);
    if jsn.has('doseNumberString') or jsn.has('_doseNumberString') then
      value.doseNumber := parseString(jsn.node['doseNumberString'], jsn.vObj['_doseNumberString']);
    if jsn.has('seriesDosesPositiveInt') or jsn.has('_seriesDosesPositiveInt') then
      value.seriesDoses := parsePositiveInt(jsn.node['seriesDosesPositiveInt'], jsn.vObj['_seriesDosesPositiveInt']);
    if jsn.has('seriesDosesString') or jsn.has('_seriesDosesString') then
      value.seriesDoses := parseString(jsn.node['seriesDosesString'], jsn.vObj['_seriesDosesString']);
end;

procedure TFHIRJsonComposer.ComposeImmunizationEvaluation(json : TJSONWriter; name : string; value : TFhirImmunizationEvaluation; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirImmunizationEvaluationStatusCodesEnum, false);
  ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'authority', value.authority);
  ComposeCodeableConcept(json, 'targetDisease', value.targetDisease);
  ComposeReference(json, 'immunizationEvent', value.immunizationEvent);
  ComposeCodeableConcept(json, 'doseStatus', value.doseStatus);
  if (SummaryOption in [soFull, soData]) and (value.doseStatusReasonList.Count > 0) then
  begin
    startArray(json, 'doseStatusReason', value.doseStatusReasonList, false);
    for i := 0 to value.doseStatusReasonList.Count - 1 do
      ComposeCodeableConcept(json, '', value.doseStatusReasonList[i]);
    finishArray(json, value.doseStatusReasonList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'series', value.seriesElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'series', value.seriesElement, false);
  if (SummaryOption in [soFull, soData]) and (value.doseNumber is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'doseNumberPositiveInt', TFhirPositiveInt(value.doseNumber), false);
    ComposePositiveIntProps(json, 'doseNumberPositiveInt', TFhirPositiveInt(value.doseNumber), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.doseNumber is TFhirString) then 
  begin
    ComposeStringValue(json, 'doseNumberString', TFhirString(value.doseNumber), false);
    ComposeStringProps(json, 'doseNumberString', TFhirString(value.doseNumber), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.seriesDoses is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'seriesDosesPositiveInt', TFhirPositiveInt(value.seriesDoses), false);
    ComposePositiveIntProps(json, 'seriesDosesPositiveInt', TFhirPositiveInt(value.seriesDoses), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.seriesDoses is TFhirString) then 
  begin
    ComposeStringValue(json, 'seriesDosesString', TFhirString(value.seriesDoses), false);
    ComposeStringProps(json, 'seriesDosesString', TFhirString(value.seriesDoses), false);
  end;
end;

{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
procedure TFHIRJsonParser.ParseImmunizationRecommendationRecommendation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationRecommendationRecommendation(jsn)); 
end;

function TFHIRJsonParser.ParseImmunizationRecommendationRecommendation(jsn : TJsonObject) : TFhirImmunizationRecommendationRecommendation;
begin
  result := TFhirImmunizationRecommendationRecommendation.Create;
  try
    ParseImmunizationRecommendationRecommendationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendationRecommendationProperties(jsn : TJsonObject; value : TFhirImmunizationRecommendationRecommendation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('vaccineCode') then
      iterateArray(jsn.vArr['vaccineCode'], value.vaccineCodeList, parseCodeableConcept);
    if jsn.has('targetDisease') then
        value.targetDisease := ParseCodeableConcept(jsn.vObj['targetDisease']);
    if jsn.has('contraindicatedVaccineCode') then
      iterateArray(jsn.vArr['contraindicatedVaccineCode'], value.contraindicatedVaccineCodeList, parseCodeableConcept);
    if jsn.has('forecastStatus') then
        value.forecastStatus := ParseCodeableConcept(jsn.vObj['forecastStatus']);
    if jsn.has('forecastReason') then
      iterateArray(jsn.vArr['forecastReason'], value.forecastReasonList, parseCodeableConcept);
    if jsn.has('dateCriterion') then
      iterateArray(jsn.vArr['dateCriterion'], value.dateCriterionList, parseImmunizationRecommendationRecommendationDateCriterion);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('series') or jsn.has('_series') then
        value.seriesElement := parseString(jsn.node['series'], jsn.vObj['_series']);
    if jsn.has('doseNumberPositiveInt') or jsn.has('_doseNumberPositiveInt') then
      value.doseNumber := parsePositiveInt(jsn.node['doseNumberPositiveInt'], jsn.vObj['_doseNumberPositiveInt']);
    if jsn.has('doseNumberString') or jsn.has('_doseNumberString') then
      value.doseNumber := parseString(jsn.node['doseNumberString'], jsn.vObj['_doseNumberString']);
    if jsn.has('seriesDosesPositiveInt') or jsn.has('_seriesDosesPositiveInt') then
      value.seriesDoses := parsePositiveInt(jsn.node['seriesDosesPositiveInt'], jsn.vObj['_seriesDosesPositiveInt']);
    if jsn.has('seriesDosesString') or jsn.has('_seriesDosesString') then
      value.seriesDoses := parseString(jsn.node['seriesDosesString'], jsn.vObj['_seriesDosesString']);
    if jsn.has('supportingImmunization') then
      iterateArray(jsn.vArr['supportingImmunization'], value.supportingImmunizationList, parseReference);
    if jsn.has('supportingPatientInformation') then
      iterateArray(jsn.vArr['supportingPatientInformation'], value.supportingPatientInformationList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeImmunizationRecommendationRecommendation(json : TJSONWriter; name : string; value : TFhirImmunizationRecommendationRecommendation; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.vaccineCodeList.Count > 0) then
  begin
    startArray(json, 'vaccineCode', value.vaccineCodeList, false);
    for i := 0 to value.vaccineCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.vaccineCodeList[i]);
    finishArray(json, value.vaccineCodeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'targetDisease', value.targetDisease);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contraindicatedVaccineCodeList.Count > 0) then
  begin
    startArray(json, 'contraindicatedVaccineCode', value.contraindicatedVaccineCodeList, false);
    for i := 0 to value.contraindicatedVaccineCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.contraindicatedVaccineCodeList[i]);
    finishArray(json, value.contraindicatedVaccineCodeList);
  end;
  ComposeCodeableConcept(json, 'forecastStatus', value.forecastStatus);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.forecastReasonList.Count > 0) then
  begin
    startArray(json, 'forecastReason', value.forecastReasonList, false);
    for i := 0 to value.forecastReasonList.Count - 1 do
      ComposeCodeableConcept(json, '', value.forecastReasonList[i]);
    finishArray(json, value.forecastReasonList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.dateCriterionList.Count > 0) then
  begin
    startArray(json, 'dateCriterion', value.dateCriterionList, false);
    for i := 0 to value.dateCriterionList.Count - 1 do
      ComposeImmunizationRecommendationRecommendationDateCriterion(json, '', value.dateCriterionList[i]);
    finishArray(json, value.dateCriterionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'series', value.seriesElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'series', value.seriesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.doseNumber is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'doseNumberPositiveInt', TFhirPositiveInt(value.doseNumber), false);
    ComposePositiveIntProps(json, 'doseNumberPositiveInt', TFhirPositiveInt(value.doseNumber), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.doseNumber is TFhirString) then 
  begin
    ComposeStringValue(json, 'doseNumberString', TFhirString(value.doseNumber), false);
    ComposeStringProps(json, 'doseNumberString', TFhirString(value.doseNumber), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.seriesDoses is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'seriesDosesPositiveInt', TFhirPositiveInt(value.seriesDoses), false);
    ComposePositiveIntProps(json, 'seriesDosesPositiveInt', TFhirPositiveInt(value.seriesDoses), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.seriesDoses is TFhirString) then 
  begin
    ComposeStringValue(json, 'seriesDosesString', TFhirString(value.seriesDoses), false);
    ComposeStringProps(json, 'seriesDosesString', TFhirString(value.seriesDoses), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.supportingImmunizationList.Count > 0) then
  begin
    startArray(json, 'supportingImmunization', value.supportingImmunizationList, false);
    for i := 0 to value.supportingImmunizationList.Count - 1 do
      ComposeReference(json, '', value.supportingImmunizationList[i]);
    finishArray(json, value.supportingImmunizationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.supportingPatientInformationList.Count > 0) then
  begin
    startArray(json, 'supportingPatientInformation', value.supportingPatientInformationList, false);
    for i := 0 to value.supportingPatientInformationList.Count - 1 do
      ComposeReference(json, '', value.supportingPatientInformationList[i]);
    finishArray(json, value.supportingPatientInformationList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendationRecommendationDateCriterion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationRecommendationRecommendationDateCriterion(jsn)); 
end;

function TFHIRJsonParser.ParseImmunizationRecommendationRecommendationDateCriterion(jsn : TJsonObject) : TFhirImmunizationRecommendationRecommendationDateCriterion;
begin
  result := TFhirImmunizationRecommendationRecommendationDateCriterion.Create;
  try
    ParseImmunizationRecommendationRecommendationDateCriterionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendationRecommendationDateCriterionProperties(jsn : TJsonObject; value : TFhirImmunizationRecommendationRecommendationDateCriterion);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseDateTime(jsn.node['value'], jsn.vObj['_value']);
end;

procedure TFHIRJsonComposer.ComposeImmunizationRecommendationRecommendationDateCriterion(json : TJSONWriter; name : string; value : TFhirImmunizationRecommendationRecommendationDateCriterion; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'code', value.code);
  ComposeDateTimeValue(json, 'value', value.valueElement, false);
  ComposeDateTimeProps(json, 'value', value.valueElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationRecommendation(jsn)); 
end;

function TFHIRJsonParser.ParseImmunizationRecommendation(jsn : TJsonObject) : TFhirImmunizationRecommendation;
begin
  result := TFhirImmunizationRecommendation.Create;
  try
    ParseImmunizationRecommendationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendationProperties(jsn : TJsonObject; value : TFhirImmunizationRecommendation);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('authority') then
        value.authority := ParseReference(jsn.vObj['authority']);
    if jsn.has('recommendation') then
      iterateArray(jsn.vArr['recommendation'], value.recommendationList, parseImmunizationRecommendationRecommendation);
end;

procedure TFHIRJsonComposer.ComposeImmunizationRecommendation(json : TJSONWriter; name : string; value : TFhirImmunizationRecommendation; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeReference(json, 'patient', value.patient);
  ComposeDateTimeValue(json, 'date', value.dateElement, false);
  ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'authority', value.authority);
  if (value.recommendationList.Count > 0) then
  begin
    startArray(json, 'recommendation', value.recommendationList, false);
    for i := 0 to value.recommendationList.Count - 1 do
      ComposeImmunizationRecommendationRecommendation(json, '', value.recommendationList[i]);
    finishArray(json, value.recommendationList);
  end;
end;

{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
procedure TFHIRJsonParser.ParseImplementationGuideDependsOn(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideDependsOn(jsn)); 
end;

function TFHIRJsonParser.ParseImplementationGuideDependsOn(jsn : TJsonObject) : TFhirImplementationGuideDependsOn;
begin
  result := TFhirImplementationGuideDependsOn.Create;
  try
    ParseImplementationGuideDependsOnProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideDependsOnProperties(jsn : TJsonObject; value : TFhirImplementationGuideDependsOn);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('uri') or jsn.has('_uri') then
        value.uriElement := parseCanonical(jsn.node['uri'], jsn.vObj['_uri']);
    if jsn.has('packageId') or jsn.has('_packageId') then
        value.packageIdElement := parseId(jsn.node['packageId'], jsn.vObj['_packageId']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideDependsOn(json : TJSONWriter; name : string; value : TFhirImplementationGuideDependsOn; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCanonicalValue(json, 'uri', value.uriElement, false);
  ComposeCanonicalProps(json, 'uri', value.uriElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'packageId', value.packageIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'packageId', value.packageIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImplementationGuideGlobal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideGlobal(jsn)); 
end;

function TFHIRJsonParser.ParseImplementationGuideGlobal(jsn : TJsonObject) : TFhirImplementationGuideGlobal;
begin
  result := TFhirImplementationGuideGlobal.Create;
  try
    ParseImplementationGuideGlobalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideGlobalProperties(jsn : TJsonObject; value : TFhirImplementationGuideGlobal);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') or jsn.has('_profile') then
        value.profileElement := parseCanonical(jsn.node['profile'], jsn.vObj['_profile']);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideGlobal(json : TJSONWriter; name : string; value : TFhirImplementationGuideGlobal; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirResourceTypesEnum, false);
  ComposeCanonicalValue(json, 'profile', value.profileElement, false);
  ComposeCanonicalProps(json, 'profile', value.profileElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImplementationGuideDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseImplementationGuideDefinition(jsn : TJsonObject) : TFhirImplementationGuideDefinition;
begin
  result := TFhirImplementationGuideDefinition.Create;
  try
    ParseImplementationGuideDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideDefinitionProperties(jsn : TJsonObject; value : TFhirImplementationGuideDefinition);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('grouping') then
      iterateArray(jsn.vArr['grouping'], value.groupingList, parseImplementationGuideDefinitionGrouping);
    if jsn.has('resource') then
      iterateArray(jsn.vArr['resource'], value.resourceList, parseImplementationGuideDefinitionResource);
    if jsn.has('page') then
        value.page := ParseImplementationGuideDefinitionPage(jsn.vObj['page']);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], value.parameterList, parseImplementationGuideDefinitionParameter);
    if jsn.has('template') then
      iterateArray(jsn.vArr['template'], value.templateList, parseImplementationGuideDefinitionTemplate);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideDefinition(json : TJSONWriter; name : string; value : TFhirImplementationGuideDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.groupingList.Count > 0) then
  begin
    startArray(json, 'grouping', value.groupingList, false);
    for i := 0 to value.groupingList.Count - 1 do
      ComposeImplementationGuideDefinitionGrouping(json, '', value.groupingList[i]);
    finishArray(json, value.groupingList);
  end;
  if (value.resourceList.Count > 0) then
  begin
    startArray(json, 'resource', value.resourceList, false);
    for i := 0 to value.resourceList.Count - 1 do
      ComposeImplementationGuideDefinitionResource(json, '', value.resourceList[i]);
    finishArray(json, value.resourceList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeImplementationGuideDefinitionPage(json, 'page', value.page);
  if (SummaryOption in [soFull, soData]) and (value.parameterList.Count > 0) then
  begin
    startArray(json, 'parameter', value.parameterList, false);
    for i := 0 to value.parameterList.Count - 1 do
      ComposeImplementationGuideDefinitionParameter(json, '', value.parameterList[i]);
    finishArray(json, value.parameterList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.templateList.Count > 0) then
  begin
    startArray(json, 'template', value.templateList, false);
    for i := 0 to value.templateList.Count - 1 do
      ComposeImplementationGuideDefinitionTemplate(json, '', value.templateList[i]);
    finishArray(json, value.templateList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImplementationGuideDefinitionGrouping(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideDefinitionGrouping(jsn)); 
end;

function TFHIRJsonParser.ParseImplementationGuideDefinitionGrouping(jsn : TJsonObject) : TFhirImplementationGuideDefinitionGrouping;
begin
  result := TFhirImplementationGuideDefinitionGrouping.Create;
  try
    ParseImplementationGuideDefinitionGroupingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideDefinitionGroupingProperties(jsn : TJsonObject; value : TFhirImplementationGuideDefinitionGrouping);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideDefinitionGrouping(json : TJSONWriter; name : string; value : TFhirImplementationGuideDefinitionGrouping; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImplementationGuideDefinitionResource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideDefinitionResource(jsn)); 
end;

function TFHIRJsonParser.ParseImplementationGuideDefinitionResource(jsn : TJsonObject) : TFhirImplementationGuideDefinitionResource;
begin
  result := TFhirImplementationGuideDefinitionResource.Create;
  try
    ParseImplementationGuideDefinitionResourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideDefinitionResourceProperties(jsn : TJsonObject; value : TFhirImplementationGuideDefinitionResource);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('reference') then
        value.reference := ParseReference(jsn.vObj['reference']);
    if jsn.has('fhirVersion') or jsn.has('_fhirVersion') then
      iterateEnumArray(jsn.vArr['fhirVersion'], jsn.vArr['_fhirVersion'], jsn.path+'/fhirVersion', value.fhirVersionList, parseEnum, CODES_TFhirFHIRVersionEnum, SYSTEMS_TFhirFHIRVersionEnum);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('exampleCanonical') or jsn.has('_exampleCanonical') then
      value.example := parseCanonical(jsn.node['exampleCanonical'], jsn.vObj['_exampleCanonical']);
    if jsn.has('exampleBoolean') or jsn.has('_exampleBoolean') then
      value.example := parseBoolean(jsn.node['exampleBoolean'], jsn.vObj['_exampleBoolean']);
    if jsn.has('groupingId') or jsn.has('_groupingId') then
        value.groupingIdElement := parseId(jsn.node['groupingId'], jsn.vObj['_groupingId']);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideDefinitionResource(json : TJSONWriter; name : string; value : TFhirImplementationGuideDefinitionResource; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'reference', value.reference);
  if (SummaryOption in [soFull, soData]) and (value.fhirVersionList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.fhirVersionList.Count - 1 do
    begin
      val := val or (value.fhirVersionList[i].hasPrimitiveValue);
      ext := ext or ((value.fhirVersionList[i].id <> '') or (value.fhirVersionList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'fhirVersion', value.fhirVersionList, true);
      for i := 0 to value.fhirVersionList.Count - 1 do
        ComposeEnumValue(json, '', value.fhirVersionList[i], CODES_TFhirFHIRVersionEnum, true);
      finishArray(json, value.fhirVersionList);
    end;
    if ext then
    begin
      startArray(json, '_fhirVersion', value.fhirVersionList, false);
      for i := 0 to value.fhirVersionList.Count - 1 do
        ComposeEnumProps(json, '', value.fhirVersionList[i], CODES_TFhirFHIRVersionEnum, true);
      finishArray(json, value.fhirVersionList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.example is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'exampleCanonical', TFhirCanonical(value.example), false);
    ComposeCanonicalProps(json, 'exampleCanonical', TFhirCanonical(value.example), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.example is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'exampleBoolean', TFhirBoolean(value.example), false);
    ComposeBooleanProps(json, 'exampleBoolean', TFhirBoolean(value.example), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'groupingId', value.groupingIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'groupingId', value.groupingIdElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImplementationGuideDefinitionPage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideDefinitionPage(jsn)); 
end;

function TFHIRJsonParser.ParseImplementationGuideDefinitionPage(jsn : TJsonObject) : TFhirImplementationGuideDefinitionPage;
begin
  result := TFhirImplementationGuideDefinitionPage.Create;
  try
    ParseImplementationGuideDefinitionPageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideDefinitionPageProperties(jsn : TJsonObject; value : TFhirImplementationGuideDefinitionPage);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('nameUrl') or jsn.has('_nameUrl') then
      value.name := parseUrl(jsn.node['nameUrl'], jsn.vObj['_nameUrl']);
    if jsn.has('nameReference') {a3} then
      value.name := ParseReference(jsn.vObj['nameReference']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('generation') or jsn.has('_generation') then
        value.generationElement := parseEnum(jsn.path+'/generation', jsn.node['generation'], jsn.vObj['_generation'], CODES_TFhirGuidePageGenerationEnum, SYSTEMS_TFhirGuidePageGenerationEnum);
    if jsn.has('page') then
      iterateArray(jsn.vArr['page'], value.pageList, parseImplementationGuideDefinitionPage);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideDefinitionPage(json : TJSONWriter; name : string; value : TFhirImplementationGuideDefinitionPage; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.name is TFhirUrl) then 
  begin
    ComposeUrlValue(json, 'nameUrl', TFhirUrl(value.name), false);
    ComposeUrlProps(json, 'nameUrl', TFhirUrl(value.name), false);
  end
  else if (value.name is TFhirReference) then
    ComposeReference(json, 'nameReference', TFhirReference(value.name));
  ComposeStringValue(json, 'title', value.titleElement, false);
  ComposeStringProps(json, 'title', value.titleElement, false);
  ComposeEnumValue(json, 'generation', value.generationElement, CODES_TFhirGuidePageGenerationEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.pageList.Count > 0) then
  begin
    startArray(json, 'page', value.pageList, false);
    for i := 0 to value.pageList.Count - 1 do
      ComposeImplementationGuideDefinitionPage(json, '', value.pageList[i]);
    finishArray(json, value.pageList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImplementationGuideDefinitionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideDefinitionParameter(jsn)); 
end;

function TFHIRJsonParser.ParseImplementationGuideDefinitionParameter(jsn : TJsonObject) : TFhirImplementationGuideDefinitionParameter;
begin
  result := TFhirImplementationGuideDefinitionParameter.Create;
  try
    ParseImplementationGuideDefinitionParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideDefinitionParameterProperties(jsn : TJsonObject; value : TFhirImplementationGuideDefinitionParameter);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirGuideParameterCodeEnum, SYSTEMS_TFhirGuideParameterCodeEnum);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideDefinitionParameter(json : TJSONWriter; name : string; value : TFhirImplementationGuideDefinitionParameter; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'code', value.codeElement, CODES_TFhirGuideParameterCodeEnum, false);
  ComposeStringValue(json, 'value', value.valueElement, false);
  ComposeStringProps(json, 'value', value.valueElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImplementationGuideDefinitionTemplate(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideDefinitionTemplate(jsn)); 
end;

function TFHIRJsonParser.ParseImplementationGuideDefinitionTemplate(jsn : TJsonObject) : TFhirImplementationGuideDefinitionTemplate;
begin
  result := TFhirImplementationGuideDefinitionTemplate.Create;
  try
    ParseImplementationGuideDefinitionTemplateProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideDefinitionTemplateProperties(jsn : TJsonObject; value : TFhirImplementationGuideDefinitionTemplate);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
    if jsn.has('source') or jsn.has('_source') then
        value.sourceElement := parseString(jsn.node['source'], jsn.vObj['_source']);
    if jsn.has('scope') or jsn.has('_scope') then
        value.scopeElement := parseString(jsn.node['scope'], jsn.vObj['_scope']);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideDefinitionTemplate(json : TJSONWriter; name : string; value : TFhirImplementationGuideDefinitionTemplate; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeValue(json, 'code', value.codeElement, false);
  ComposeCodeProps(json, 'code', value.codeElement, false);
  ComposeStringValue(json, 'source', value.sourceElement, false);
  ComposeStringProps(json, 'source', value.sourceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'scope', value.scopeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'scope', value.scopeElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImplementationGuideManifest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideManifest(jsn)); 
end;

function TFHIRJsonParser.ParseImplementationGuideManifest(jsn : TJsonObject) : TFhirImplementationGuideManifest;
begin
  result := TFhirImplementationGuideManifest.Create;
  try
    ParseImplementationGuideManifestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideManifestProperties(jsn : TJsonObject; value : TFhirImplementationGuideManifest);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('rendering') or jsn.has('_rendering') then
        value.renderingElement := parseUrl(jsn.node['rendering'], jsn.vObj['_rendering']);
    if jsn.has('resource') then
      iterateArray(jsn.vArr['resource'], value.resourceList, parseImplementationGuideManifestResource);
    if jsn.has('page') then
      iterateArray(jsn.vArr['page'], value.pageList, parseImplementationGuideManifestPage);
      if jsn.has('image') or jsn.has('_image') then
      iteratePrimitiveArray(jsn.vArr['image'], jsn.vArr['_image'], value.imageList, parseString);
      if jsn.has('other') or jsn.has('_other') then
      iteratePrimitiveArray(jsn.vArr['other'], jsn.vArr['_other'], value.otherList, parseString);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideManifest(json : TJSONWriter; name : string; value : TFhirImplementationGuideManifest; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrlValue(json, 'rendering', value.renderingElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrlProps(json, 'rendering', value.renderingElement, false);
  if (value.resourceList.Count > 0) then
  begin
    startArray(json, 'resource', value.resourceList, false);
    for i := 0 to value.resourceList.Count - 1 do
      ComposeImplementationGuideManifestResource(json, '', value.resourceList[i]);
    finishArray(json, value.resourceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.pageList.Count > 0) then
  begin
    startArray(json, 'page', value.pageList, false);
    for i := 0 to value.pageList.Count - 1 do
      ComposeImplementationGuideManifestPage(json, '', value.pageList[i]);
    finishArray(json, value.pageList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.imageList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.imageList.Count - 1 do
    begin
      ext := ext or ((value.imageList[i].id <> '') or (value.imageList[i].hasExtensionList) {no-comments or (value.imageList[i].hasComments)});
      val := val or (value.imageList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'image', value.imageList, true);
      for i := 0 to value.imageList.Count - 1 do
        ComposeStringValue(json, '', value.imageList[i], true);
      finishArray(json, value.imageList);
    end;
    if ext then
    begin
      startArray(json, '_image', value.imageList, false);
      for i := 0 to value.imageList.Count - 1 do
        ComposeStringProps(json, '', value.imageList[i], true);
      finishArray(json, value.imageList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.otherList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.otherList.Count - 1 do
    begin
      ext := ext or ((value.otherList[i].id <> '') or (value.otherList[i].hasExtensionList) {no-comments or (value.otherList[i].hasComments)});
      val := val or (value.otherList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'other', value.otherList, true);
      for i := 0 to value.otherList.Count - 1 do
        ComposeStringValue(json, '', value.otherList[i], true);
      finishArray(json, value.otherList);
    end;
    if ext then
    begin
      startArray(json, '_other', value.otherList, false);
      for i := 0 to value.otherList.Count - 1 do
        ComposeStringProps(json, '', value.otherList[i], true);
      finishArray(json, value.otherList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImplementationGuideManifestResource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideManifestResource(jsn)); 
end;

function TFHIRJsonParser.ParseImplementationGuideManifestResource(jsn : TJsonObject) : TFhirImplementationGuideManifestResource;
begin
  result := TFhirImplementationGuideManifestResource.Create;
  try
    ParseImplementationGuideManifestResourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideManifestResourceProperties(jsn : TJsonObject; value : TFhirImplementationGuideManifestResource);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('reference') then
        value.reference := ParseReference(jsn.vObj['reference']);
    if jsn.has('exampleCanonical') or jsn.has('_exampleCanonical') then
      value.example := parseCanonical(jsn.node['exampleCanonical'], jsn.vObj['_exampleCanonical']);
    if jsn.has('exampleBoolean') or jsn.has('_exampleBoolean') then
      value.example := parseBoolean(jsn.node['exampleBoolean'], jsn.vObj['_exampleBoolean']);
    if jsn.has('relativePath') or jsn.has('_relativePath') then
        value.relativePathElement := parseUrl(jsn.node['relativePath'], jsn.vObj['_relativePath']);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideManifestResource(json : TJSONWriter; name : string; value : TFhirImplementationGuideManifestResource; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'reference', value.reference);
  if (SummaryOption in [soFull, soData]) and (value.example is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'exampleCanonical', TFhirCanonical(value.example), false);
    ComposeCanonicalProps(json, 'exampleCanonical', TFhirCanonical(value.example), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.example is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'exampleBoolean', TFhirBoolean(value.example), false);
    ComposeBooleanProps(json, 'exampleBoolean', TFhirBoolean(value.example), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeUrlValue(json, 'relativePath', value.relativePathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUrlProps(json, 'relativePath', value.relativePathElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImplementationGuideManifestPage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideManifestPage(jsn)); 
end;

function TFHIRJsonParser.ParseImplementationGuideManifestPage(jsn : TJsonObject) : TFhirImplementationGuideManifestPage;
begin
  result := TFhirImplementationGuideManifestPage.Create;
  try
    ParseImplementationGuideManifestPageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideManifestPageProperties(jsn : TJsonObject; value : TFhirImplementationGuideManifestPage);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
      if jsn.has('anchor') or jsn.has('_anchor') then
      iteratePrimitiveArray(jsn.vArr['anchor'], jsn.vArr['_anchor'], value.anchorList, parseString);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideManifestPage(json : TJSONWriter; name : string; value : TFhirImplementationGuideManifestPage; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) and (value.anchorList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.anchorList.Count - 1 do
    begin
      ext := ext or ((value.anchorList[i].id <> '') or (value.anchorList[i].hasExtensionList) {no-comments or (value.anchorList[i].hasComments)});
      val := val or (value.anchorList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'anchor', value.anchorList, true);
      for i := 0 to value.anchorList.Count - 1 do
        ComposeStringValue(json, '', value.anchorList[i], true);
      finishArray(json, value.anchorList);
    end;
    if ext then
    begin
      startArray(json, '_anchor', value.anchorList, false);
      for i := 0 to value.anchorList.Count - 1 do
        ComposeStringProps(json, '', value.anchorList[i], true);
      finishArray(json, value.anchorList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseImplementationGuide(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuide(jsn)); 
end;

function TFHIRJsonParser.ParseImplementationGuide(jsn : TJsonObject) : TFhirImplementationGuide;
begin
  result := TFhirImplementationGuide.Create;
  try
    ParseImplementationGuideProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideProperties(jsn : TJsonObject; value : TFhirImplementationGuide);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('packageId') or jsn.has('_packageId') then
        value.packageIdElement := parseId(jsn.node['packageId'], jsn.vObj['_packageId']);
    if jsn.has('license') or jsn.has('_license') then
        value.licenseElement := parseEnum(jsn.path+'/license', jsn.node['license'], jsn.vObj['_license'], CODES_TFhirSPDXLicenseEnum, SYSTEMS_TFhirSPDXLicenseEnum);
    if jsn.has('fhirVersion') or jsn.has('_fhirVersion') then
      iterateEnumArray(jsn.vArr['fhirVersion'], jsn.vArr['_fhirVersion'], jsn.path+'/fhirVersion', value.fhirVersionList, parseEnum, CODES_TFhirFHIRVersionEnum, SYSTEMS_TFhirFHIRVersionEnum);
    if jsn.has('dependsOn') then
      iterateArray(jsn.vArr['dependsOn'], value.dependsOnList, parseImplementationGuideDependsOn);
    if jsn.has('global') then
      iterateArray(jsn.vArr['global'], value.globalList, parseImplementationGuideGlobal);
    if jsn.has('definition') then
        value.definition := ParseImplementationGuideDefinition(jsn.vObj['definition']);
    if jsn.has('manifest') then
        value.manifest := ParseImplementationGuideManifest(jsn.vObj['manifest']);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuide(json : TJSONWriter; name : string; value : TFhirImplementationGuide; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  ComposeUriValue(json, 'url', value.urlElement, false);
  ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  ComposeIdValue(json, 'packageId', value.packageIdElement, false);
  ComposeIdProps(json, 'packageId', value.packageIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'license', value.licenseElement, CODES_TFhirSPDXLicenseEnum, false);
  if (value.fhirVersionList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.fhirVersionList.Count - 1 do
    begin
      val := val or (value.fhirVersionList[i].hasPrimitiveValue);
      ext := ext or ((value.fhirVersionList[i].id <> '') or (value.fhirVersionList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'fhirVersion', value.fhirVersionList, true);
      for i := 0 to value.fhirVersionList.Count - 1 do
        ComposeEnumValue(json, '', value.fhirVersionList[i], CODES_TFhirFHIRVersionEnum, true);
      finishArray(json, value.fhirVersionList);
    end;
    if ext then
    begin
      startArray(json, '_fhirVersion', value.fhirVersionList, false);
      for i := 0 to value.fhirVersionList.Count - 1 do
        ComposeEnumProps(json, '', value.fhirVersionList[i], CODES_TFhirFHIRVersionEnum, true);
      finishArray(json, value.fhirVersionList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.dependsOnList.Count > 0) then
  begin
    startArray(json, 'dependsOn', value.dependsOnList, false);
    for i := 0 to value.dependsOnList.Count - 1 do
      ComposeImplementationGuideDependsOn(json, '', value.dependsOnList[i]);
    finishArray(json, value.dependsOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.globalList.Count > 0) then
  begin
    startArray(json, 'global', value.globalList, false);
    for i := 0 to value.globalList.Count - 1 do
      ComposeImplementationGuideGlobal(json, '', value.globalList[i]);
    finishArray(json, value.globalList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeImplementationGuideDefinition(json, 'definition', value.definition);
  if (SummaryOption in [soFull, soData]) then
    ComposeImplementationGuideManifest(json, 'manifest', value.manifest);
end;

{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INGREDIENT}
procedure TFHIRJsonParser.ParseIngredientManufacturer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseIngredientManufacturer(jsn)); 
end;

function TFHIRJsonParser.ParseIngredientManufacturer(jsn : TJsonObject) : TFhirIngredientManufacturer;
begin
  result := TFhirIngredientManufacturer.Create;
  try
    ParseIngredientManufacturerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseIngredientManufacturerProperties(jsn : TJsonObject; value : TFhirIngredientManufacturer);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('role') then
        value.role := ParseCoding(jsn.vObj['role']);
    if jsn.has('manufacturer') then
        value.manufacturer := ParseReference(jsn.vObj['manufacturer']);
end;

procedure TFHIRJsonComposer.ComposeIngredientManufacturer(json : TJSONWriter; name : string; value : TFhirIngredientManufacturer; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'role', value.role);
  ComposeReference(json, 'manufacturer', value.manufacturer);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseIngredientSubstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseIngredientSubstance(jsn)); 
end;

function TFHIRJsonParser.ParseIngredientSubstance(jsn : TJsonObject) : TFhirIngredientSubstance;
begin
  result := TFhirIngredientSubstance.Create;
  try
    ParseIngredientSubstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseIngredientSubstanceProperties(jsn : TJsonObject; value : TFhirIngredientSubstance);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableReference(jsn.vObj['code']);
    if jsn.has('strength') then
      iterateArray(jsn.vArr['strength'], value.strengthList, parseIngredientSubstanceStrength);
end;

procedure TFHIRJsonComposer.ComposeIngredientSubstance(json : TJSONWriter; name : string; value : TFhirIngredientSubstance; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableReference(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.strengthList.Count > 0) then
  begin
    startArray(json, 'strength', value.strengthList, false);
    for i := 0 to value.strengthList.Count - 1 do
      ComposeIngredientSubstanceStrength(json, '', value.strengthList[i]);
    finishArray(json, value.strengthList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseIngredientSubstanceStrength(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseIngredientSubstanceStrength(jsn)); 
end;

function TFHIRJsonParser.ParseIngredientSubstanceStrength(jsn : TJsonObject) : TFhirIngredientSubstanceStrength;
begin
  result := TFhirIngredientSubstanceStrength.Create;
  try
    ParseIngredientSubstanceStrengthProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseIngredientSubstanceStrengthProperties(jsn : TJsonObject; value : TFhirIngredientSubstanceStrength);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('presentationRatio') {a4} then
      value.presentation := ParseRatio(jsn.vObj['presentationRatio']);
    if jsn.has('presentationRatioRange') {a4} then
      value.presentation := ParseRatioRange(jsn.vObj['presentationRatioRange']);
    if jsn.has('presentationText') or jsn.has('_presentationText') then
        value.presentationTextElement := parseString(jsn.node['presentationText'], jsn.vObj['_presentationText']);
    if jsn.has('concentrationRatio') {a4} then
      value.concentration := ParseRatio(jsn.vObj['concentrationRatio']);
    if jsn.has('concentrationRatioRange') {a4} then
      value.concentration := ParseRatioRange(jsn.vObj['concentrationRatioRange']);
    if jsn.has('concentrationText') or jsn.has('_concentrationText') then
        value.concentrationTextElement := parseString(jsn.node['concentrationText'], jsn.vObj['_concentrationText']);
    if jsn.has('measurementPoint') or jsn.has('_measurementPoint') then
        value.measurementPointElement := parseString(jsn.node['measurementPoint'], jsn.vObj['_measurementPoint']);
    if jsn.has('country') then
      iterateArray(jsn.vArr['country'], value.countryList, parseCodeableConcept);
    if jsn.has('referenceStrength') then
      iterateArray(jsn.vArr['referenceStrength'], value.referenceStrengthList, parseIngredientSubstanceStrengthReferenceStrength);
end;

procedure TFHIRJsonComposer.ComposeIngredientSubstanceStrength(json : TJSONWriter; name : string; value : TFhirIngredientSubstanceStrength; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.presentation is TFhirRatio) then 
    ComposeRatio(json, 'presentationRatio', TFhirRatio(value.presentation)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.presentation is TFhirRatioRange) then 
    ComposeRatioRange(json, 'presentationRatioRange', TFhirRatioRange(value.presentation)) ;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'presentationText', value.presentationTextElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'presentationText', value.presentationTextElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.concentration is TFhirRatio) then 
    ComposeRatio(json, 'concentrationRatio', TFhirRatio(value.concentration)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.concentration is TFhirRatioRange) then 
    ComposeRatioRange(json, 'concentrationRatioRange', TFhirRatioRange(value.concentration)) ;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'concentrationText', value.concentrationTextElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'concentrationText', value.concentrationTextElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'measurementPoint', value.measurementPointElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'measurementPoint', value.measurementPointElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.countryList.Count > 0) then
  begin
    startArray(json, 'country', value.countryList, false);
    for i := 0 to value.countryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.countryList[i]);
    finishArray(json, value.countryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.referenceStrengthList.Count > 0) then
  begin
    startArray(json, 'referenceStrength', value.referenceStrengthList, false);
    for i := 0 to value.referenceStrengthList.Count - 1 do
      ComposeIngredientSubstanceStrengthReferenceStrength(json, '', value.referenceStrengthList[i]);
    finishArray(json, value.referenceStrengthList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseIngredientSubstanceStrengthReferenceStrength(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseIngredientSubstanceStrengthReferenceStrength(jsn)); 
end;

function TFHIRJsonParser.ParseIngredientSubstanceStrengthReferenceStrength(jsn : TJsonObject) : TFhirIngredientSubstanceStrengthReferenceStrength;
begin
  result := TFhirIngredientSubstanceStrengthReferenceStrength.Create;
  try
    ParseIngredientSubstanceStrengthReferenceStrengthProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseIngredientSubstanceStrengthReferenceStrengthProperties(jsn : TJsonObject; value : TFhirIngredientSubstanceStrengthReferenceStrength);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('substance') then
        value.substance := ParseCodeableReference(jsn.vObj['substance']);
    if jsn.has('strengthRatio') {a4} then
      value.strength := ParseRatio(jsn.vObj['strengthRatio']);
    if jsn.has('strengthRatioRange') {a4} then
      value.strength := ParseRatioRange(jsn.vObj['strengthRatioRange']);
    if jsn.has('measurementPoint') or jsn.has('_measurementPoint') then
        value.measurementPointElement := parseString(jsn.node['measurementPoint'], jsn.vObj['_measurementPoint']);
    if jsn.has('country') then
      iterateArray(jsn.vArr['country'], value.countryList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeIngredientSubstanceStrengthReferenceStrength(json : TJSONWriter; name : string; value : TFhirIngredientSubstanceStrengthReferenceStrength; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableReference(json, 'substance', value.substance);
  if (value.strength is TFhirRatio) then 
    ComposeRatio(json, 'strengthRatio', TFhirRatio(value.strength)) 
  else if (value.strength is TFhirRatioRange) then 
    ComposeRatioRange(json, 'strengthRatioRange', TFhirRatioRange(value.strength)) ;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'measurementPoint', value.measurementPointElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'measurementPoint', value.measurementPointElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.countryList.Count > 0) then
  begin
    startArray(json, 'country', value.countryList, false);
    for i := 0 to value.countryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.countryList[i]);
    finishArray(json, value.countryList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseIngredient(jsn)); 
end;

function TFHIRJsonParser.ParseIngredient(jsn : TJsonObject) : TFhirIngredient;
begin
  result := TFhirIngredient.Create;
  try
    ParseIngredientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseIngredientProperties(jsn : TJsonObject; value : TFhirIngredient);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('for') then
      iterateArray(jsn.vArr['for'], value.for_List, parseReference);
    if jsn.has('role') then
        value.role := ParseCodeableConcept(jsn.vObj['role']);
    if jsn.has('function') then
      iterateArray(jsn.vArr['function'], value.function_List, parseCodeableConcept);
    if jsn.has('allergenicIndicator') or jsn.has('_allergenicIndicator') then
        value.allergenicIndicatorElement := parseBoolean(jsn.node['allergenicIndicator'], jsn.vObj['_allergenicIndicator']);
    if jsn.has('manufacturer') then
      iterateArray(jsn.vArr['manufacturer'], value.manufacturerList, parseIngredientManufacturer);
    if jsn.has('substance') then
        value.substance := ParseIngredientSubstance(jsn.vObj['substance']);
end;

procedure TFHIRJsonComposer.ComposeIngredient(json : TJSONWriter; name : string; value : TFhirIngredient; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.for_List.Count > 0) then
  begin
    startArray(json, 'for', value.for_List, false);
    for i := 0 to value.for_List.Count - 1 do
      ComposeReference(json, '', value.for_List[i]);
    finishArray(json, value.for_List);
  end;
  ComposeCodeableConcept(json, 'role', value.role);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.function_List.Count > 0) then
  begin
    startArray(json, 'function', value.function_List, false);
    for i := 0 to value.function_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.function_List[i]);
    finishArray(json, value.function_List);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'allergenicIndicator', value.allergenicIndicatorElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'allergenicIndicator', value.allergenicIndicatorElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.manufacturerList.Count > 0) then
  begin
    startArray(json, 'manufacturer', value.manufacturerList, false);
    for i := 0 to value.manufacturerList.Count - 1 do
      ComposeIngredientManufacturer(json, '', value.manufacturerList[i]);
    finishArray(json, value.manufacturerList);
  end;
  ComposeIngredientSubstance(json, 'substance', value.substance);
end;

{$ENDIF FHIR_INGREDIENT}
{$IFDEF FHIR_INSURANCEPLAN}
procedure TFHIRJsonParser.ParseInsurancePlanContact(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInsurancePlanContact(jsn)); 
end;

function TFHIRJsonParser.ParseInsurancePlanContact(jsn : TJsonObject) : TFhirInsurancePlanContact;
begin
  result := TFhirInsurancePlanContact.Create;
  try
    ParseInsurancePlanContactProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInsurancePlanContactProperties(jsn : TJsonObject; value : TFhirInsurancePlanContact);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('purpose') then
        value.purpose := ParseCodeableConcept(jsn.vObj['purpose']);
    if jsn.has('name') then
        value.name := ParseHumanName(jsn.vObj['name']);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
    if jsn.has('address') then
        value.address := ParseAddress(jsn.vObj['address']);
end;

procedure TFHIRJsonComposer.ComposeInsurancePlanContact(json : TJSONWriter; name : string; value : TFhirInsurancePlanContact; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'purpose', value.purpose);
  if (SummaryOption in [soFull, soData]) then
    ComposeHumanName(json, 'name', value.name);
  if (SummaryOption in [soFull, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeAddress(json, 'address', value.address);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseInsurancePlanCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInsurancePlanCoverage(jsn)); 
end;

function TFHIRJsonParser.ParseInsurancePlanCoverage(jsn : TJsonObject) : TFhirInsurancePlanCoverage;
begin
  result := TFhirInsurancePlanCoverage.Create;
  try
    ParseInsurancePlanCoverageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInsurancePlanCoverageProperties(jsn : TJsonObject; value : TFhirInsurancePlanCoverage);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('network') then
      iterateArray(jsn.vArr['network'], value.networkList, parseReference);
    if jsn.has('benefit') then
      iterateArray(jsn.vArr['benefit'], value.benefitList, parseInsurancePlanCoverageBenefit);
end;

procedure TFHIRJsonComposer.ComposeInsurancePlanCoverage(json : TJSONWriter; name : string; value : TFhirInsurancePlanCoverage; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.networkList.Count > 0) then
  begin
    startArray(json, 'network', value.networkList, false);
    for i := 0 to value.networkList.Count - 1 do
      ComposeReference(json, '', value.networkList[i]);
    finishArray(json, value.networkList);
  end;
  if (value.benefitList.Count > 0) then
  begin
    startArray(json, 'benefit', value.benefitList, false);
    for i := 0 to value.benefitList.Count - 1 do
      ComposeInsurancePlanCoverageBenefit(json, '', value.benefitList[i]);
    finishArray(json, value.benefitList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseInsurancePlanCoverageBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInsurancePlanCoverageBenefit(jsn)); 
end;

function TFHIRJsonParser.ParseInsurancePlanCoverageBenefit(jsn : TJsonObject) : TFhirInsurancePlanCoverageBenefit;
begin
  result := TFhirInsurancePlanCoverageBenefit.Create;
  try
    ParseInsurancePlanCoverageBenefitProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInsurancePlanCoverageBenefitProperties(jsn : TJsonObject; value : TFhirInsurancePlanCoverageBenefit);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('requirement') or jsn.has('_requirement') then
        value.requirementElement := parseString(jsn.node['requirement'], jsn.vObj['_requirement']);
    if jsn.has('limit') then
      iterateArray(jsn.vArr['limit'], value.limitList, parseInsurancePlanCoverageBenefitLimit);
end;

procedure TFHIRJsonComposer.ComposeInsurancePlanCoverageBenefit(json : TJSONWriter; name : string; value : TFhirInsurancePlanCoverageBenefit; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'requirement', value.requirementElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'requirement', value.requirementElement, false);
  if (SummaryOption in [soFull, soData]) and (value.limitList.Count > 0) then
  begin
    startArray(json, 'limit', value.limitList, false);
    for i := 0 to value.limitList.Count - 1 do
      ComposeInsurancePlanCoverageBenefitLimit(json, '', value.limitList[i]);
    finishArray(json, value.limitList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseInsurancePlanCoverageBenefitLimit(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInsurancePlanCoverageBenefitLimit(jsn)); 
end;

function TFHIRJsonParser.ParseInsurancePlanCoverageBenefitLimit(jsn : TJsonObject) : TFhirInsurancePlanCoverageBenefitLimit;
begin
  result := TFhirInsurancePlanCoverageBenefitLimit.Create;
  try
    ParseInsurancePlanCoverageBenefitLimitProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInsurancePlanCoverageBenefitLimitProperties(jsn : TJsonObject; value : TFhirInsurancePlanCoverageBenefitLimit);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('value') then
        value.value := ParseQuantity(jsn.vObj['value']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
end;

procedure TFHIRJsonComposer.ComposeInsurancePlanCoverageBenefitLimit(json : TJSONWriter; name : string; value : TFhirInsurancePlanCoverageBenefitLimit; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'value', value.value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseInsurancePlanPlan(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInsurancePlanPlan(jsn)); 
end;

function TFHIRJsonParser.ParseInsurancePlanPlan(jsn : TJsonObject) : TFhirInsurancePlanPlan;
begin
  result := TFhirInsurancePlanPlan.Create;
  try
    ParseInsurancePlanPlanProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInsurancePlanPlanProperties(jsn : TJsonObject; value : TFhirInsurancePlanPlan);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('coverageArea') then
      iterateArray(jsn.vArr['coverageArea'], value.coverageAreaList, parseReference);
    if jsn.has('network') then
      iterateArray(jsn.vArr['network'], value.networkList, parseReference);
    if jsn.has('generalCost') then
      iterateArray(jsn.vArr['generalCost'], value.generalCostList, parseInsurancePlanPlanGeneralCost);
    if jsn.has('specificCost') then
      iterateArray(jsn.vArr['specificCost'], value.specificCostList, parseInsurancePlanPlanSpecificCost);
end;

procedure TFHIRJsonComposer.ComposeInsurancePlanPlan(json : TJSONWriter; name : string; value : TFhirInsurancePlanPlan; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.coverageAreaList.Count > 0) then
  begin
    startArray(json, 'coverageArea', value.coverageAreaList, false);
    for i := 0 to value.coverageAreaList.Count - 1 do
      ComposeReference(json, '', value.coverageAreaList[i]);
    finishArray(json, value.coverageAreaList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.networkList.Count > 0) then
  begin
    startArray(json, 'network', value.networkList, false);
    for i := 0 to value.networkList.Count - 1 do
      ComposeReference(json, '', value.networkList[i]);
    finishArray(json, value.networkList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.generalCostList.Count > 0) then
  begin
    startArray(json, 'generalCost', value.generalCostList, false);
    for i := 0 to value.generalCostList.Count - 1 do
      ComposeInsurancePlanPlanGeneralCost(json, '', value.generalCostList[i]);
    finishArray(json, value.generalCostList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.specificCostList.Count > 0) then
  begin
    startArray(json, 'specificCost', value.specificCostList, false);
    for i := 0 to value.specificCostList.Count - 1 do
      ComposeInsurancePlanPlanSpecificCost(json, '', value.specificCostList[i]);
    finishArray(json, value.specificCostList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseInsurancePlanPlanGeneralCost(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInsurancePlanPlanGeneralCost(jsn)); 
end;

function TFHIRJsonParser.ParseInsurancePlanPlanGeneralCost(jsn : TJsonObject) : TFhirInsurancePlanPlanGeneralCost;
begin
  result := TFhirInsurancePlanPlanGeneralCost.Create;
  try
    ParseInsurancePlanPlanGeneralCostProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInsurancePlanPlanGeneralCostProperties(jsn : TJsonObject; value : TFhirInsurancePlanPlanGeneralCost);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('groupSize') or jsn.has('_groupSize') then
        value.groupSizeElement := parsePositiveInt(jsn.node['groupSize'], jsn.vObj['_groupSize']);
    if jsn.has('cost') then
        value.cost := ParseMoney(jsn.vObj['cost']);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);
end;

procedure TFHIRJsonComposer.ComposeInsurancePlanPlanGeneralCost(json : TJSONWriter; name : string; value : TFhirInsurancePlanPlanGeneralCost; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'groupSize', value.groupSizeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'groupSize', value.groupSizeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'cost', value.cost);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', value.commentElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseInsurancePlanPlanSpecificCost(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInsurancePlanPlanSpecificCost(jsn)); 
end;

function TFHIRJsonParser.ParseInsurancePlanPlanSpecificCost(jsn : TJsonObject) : TFhirInsurancePlanPlanSpecificCost;
begin
  result := TFhirInsurancePlanPlanSpecificCost.Create;
  try
    ParseInsurancePlanPlanSpecificCostProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInsurancePlanPlanSpecificCostProperties(jsn : TJsonObject; value : TFhirInsurancePlanPlanSpecificCost);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('benefit') then
      iterateArray(jsn.vArr['benefit'], value.benefitList, parseInsurancePlanPlanSpecificCostBenefit);
end;

procedure TFHIRJsonComposer.ComposeInsurancePlanPlanSpecificCost(json : TJSONWriter; name : string; value : TFhirInsurancePlanPlanSpecificCost; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'category', value.category);
  if (SummaryOption in [soFull, soData]) and (value.benefitList.Count > 0) then
  begin
    startArray(json, 'benefit', value.benefitList, false);
    for i := 0 to value.benefitList.Count - 1 do
      ComposeInsurancePlanPlanSpecificCostBenefit(json, '', value.benefitList[i]);
    finishArray(json, value.benefitList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseInsurancePlanPlanSpecificCostBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInsurancePlanPlanSpecificCostBenefit(jsn)); 
end;

function TFHIRJsonParser.ParseInsurancePlanPlanSpecificCostBenefit(jsn : TJsonObject) : TFhirInsurancePlanPlanSpecificCostBenefit;
begin
  result := TFhirInsurancePlanPlanSpecificCostBenefit.Create;
  try
    ParseInsurancePlanPlanSpecificCostBenefitProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInsurancePlanPlanSpecificCostBenefitProperties(jsn : TJsonObject; value : TFhirInsurancePlanPlanSpecificCostBenefit);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('cost') then
      iterateArray(jsn.vArr['cost'], value.costList, parseInsurancePlanPlanSpecificCostBenefitCost);
end;

procedure TFHIRJsonComposer.ComposeInsurancePlanPlanSpecificCostBenefit(json : TJSONWriter; name : string; value : TFhirInsurancePlanPlanSpecificCostBenefit; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.costList.Count > 0) then
  begin
    startArray(json, 'cost', value.costList, false);
    for i := 0 to value.costList.Count - 1 do
      ComposeInsurancePlanPlanSpecificCostBenefitCost(json, '', value.costList[i]);
    finishArray(json, value.costList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseInsurancePlanPlanSpecificCostBenefitCost(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInsurancePlanPlanSpecificCostBenefitCost(jsn)); 
end;

function TFHIRJsonParser.ParseInsurancePlanPlanSpecificCostBenefitCost(jsn : TJsonObject) : TFhirInsurancePlanPlanSpecificCostBenefitCost;
begin
  result := TFhirInsurancePlanPlanSpecificCostBenefitCost.Create;
  try
    ParseInsurancePlanPlanSpecificCostBenefitCostProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInsurancePlanPlanSpecificCostBenefitCostProperties(jsn : TJsonObject; value : TFhirInsurancePlanPlanSpecificCostBenefitCost);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('applicability') then
        value.applicability := ParseCodeableConcept(jsn.vObj['applicability']);
    if jsn.has('qualifiers') then
      iterateArray(jsn.vArr['qualifiers'], value.qualifiersList, parseCodeableConcept);
    if jsn.has('value') then
        value.value := ParseQuantity(jsn.vObj['value']);
end;

procedure TFHIRJsonComposer.ComposeInsurancePlanPlanSpecificCostBenefitCost(json : TJSONWriter; name : string; value : TFhirInsurancePlanPlanSpecificCostBenefitCost; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'applicability', value.applicability);
  if (SummaryOption in [soFull, soData]) and (value.qualifiersList.Count > 0) then
  begin
    startArray(json, 'qualifiers', value.qualifiersList, false);
    for i := 0 to value.qualifiersList.Count - 1 do
      ComposeCodeableConcept(json, '', value.qualifiersList[i]);
    finishArray(json, value.qualifiersList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'value', value.value);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseInsurancePlan(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInsurancePlan(jsn)); 
end;

function TFHIRJsonParser.ParseInsurancePlan(jsn : TJsonObject) : TFhirInsurancePlan;
begin
  result := TFhirInsurancePlan.Create;
  try
    ParseInsurancePlanProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInsurancePlanProperties(jsn : TJsonObject; value : TFhirInsurancePlan);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
      if jsn.has('alias') or jsn.has('_alias') then
      iteratePrimitiveArray(jsn.vArr['alias'], jsn.vArr['_alias'], value.aliasList, parseString);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('ownedBy') then
        value.ownedBy := ParseReference(jsn.vObj['ownedBy']);
    if jsn.has('administeredBy') then
        value.administeredBy := ParseReference(jsn.vObj['administeredBy']);
    if jsn.has('coverageArea') then
      iterateArray(jsn.vArr['coverageArea'], value.coverageAreaList, parseReference);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseInsurancePlanContact);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], value.endpointList, parseReference);
    if jsn.has('network') then
      iterateArray(jsn.vArr['network'], value.networkList, parseReference);
    if jsn.has('coverage') then
      iterateArray(jsn.vArr['coverage'], value.coverageList, parseInsurancePlanCoverage);
    if jsn.has('plan') then
      iterateArray(jsn.vArr['plan'], value.planList, parseInsurancePlanPlan);
end;

procedure TFHIRJsonComposer.ComposeInsurancePlan(json : TJSONWriter; name : string; value : TFhirInsurancePlan; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) and (value.aliasList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.aliasList.Count - 1 do
    begin
      ext := ext or ((value.aliasList[i].id <> '') or (value.aliasList[i].hasExtensionList) {no-comments or (value.aliasList[i].hasComments)});
      val := val or (value.aliasList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'alias', value.aliasList, true);
      for i := 0 to value.aliasList.Count - 1 do
        ComposeStringValue(json, '', value.aliasList[i], true);
      finishArray(json, value.aliasList);
    end;
    if ext then
    begin
      startArray(json, '_alias', value.aliasList, false);
      for i := 0 to value.aliasList.Count - 1 do
        ComposeStringProps(json, '', value.aliasList[i], true);
      finishArray(json, value.aliasList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'ownedBy', value.ownedBy);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'administeredBy', value.administeredBy);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.coverageAreaList.Count > 0) then
  begin
    startArray(json, 'coverageArea', value.coverageAreaList, false);
    for i := 0 to value.coverageAreaList.Count - 1 do
      ComposeReference(json, '', value.coverageAreaList[i]);
    finishArray(json, value.coverageAreaList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeInsurancePlanContact(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.endpointList.Count > 0) then
  begin
    startArray(json, 'endpoint', value.endpointList, false);
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(json, '', value.endpointList[i]);
    finishArray(json, value.endpointList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.networkList.Count > 0) then
  begin
    startArray(json, 'network', value.networkList, false);
    for i := 0 to value.networkList.Count - 1 do
      ComposeReference(json, '', value.networkList[i]);
    finishArray(json, value.networkList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.coverageList.Count > 0) then
  begin
    startArray(json, 'coverage', value.coverageList, false);
    for i := 0 to value.coverageList.Count - 1 do
      ComposeInsurancePlanCoverage(json, '', value.coverageList[i]);
    finishArray(json, value.coverageList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.planList.Count > 0) then
  begin
    startArray(json, 'plan', value.planList, false);
    for i := 0 to value.planList.Count - 1 do
      ComposeInsurancePlanPlan(json, '', value.planList[i]);
    finishArray(json, value.planList);
  end;
end;

{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
procedure TFHIRJsonParser.ParseInvoiceParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInvoiceParticipant(jsn)); 
end;

function TFHIRJsonParser.ParseInvoiceParticipant(jsn : TJsonObject) : TFhirInvoiceParticipant;
begin
  result := TFhirInvoiceParticipant.Create;
  try
    ParseInvoiceParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInvoiceParticipantProperties(jsn : TJsonObject; value : TFhirInvoiceParticipant);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('role') then
        value.role := ParseCodeableConcept(jsn.vObj['role']);
    if jsn.has('actor') then
        value.actor := ParseReference(jsn.vObj['actor']);
end;

procedure TFHIRJsonComposer.ComposeInvoiceParticipant(json : TJSONWriter; name : string; value : TFhirInvoiceParticipant; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', value.role);
  ComposeReference(json, 'actor', value.actor);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseInvoiceLineItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInvoiceLineItem(jsn)); 
end;

function TFHIRJsonParser.ParseInvoiceLineItem(jsn : TJsonObject) : TFhirInvoiceLineItem;
begin
  result := TFhirInvoiceLineItem.Create;
  try
    ParseInvoiceLineItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInvoiceLineItemProperties(jsn : TJsonObject; value : TFhirInvoiceLineItem);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('sequence') or jsn.has('_sequence') then
        value.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);
    if jsn.has('chargeItemReference') {a3} then
      value.chargeItem := ParseReference(jsn.vObj['chargeItemReference']);
    if jsn.has('chargeItemCodeableConcept') {a4} then
      value.chargeItem := ParseCodeableConcept(jsn.vObj['chargeItemCodeableConcept']);
    if jsn.has('priceComponent') then
      iterateArray(jsn.vArr['priceComponent'], value.priceComponentList, parseInvoiceLineItemPriceComponent);
end;

procedure TFHIRJsonComposer.ComposeInvoiceLineItem(json : TJSONWriter; name : string; value : TFhirInvoiceLineItem; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequence', value.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequence', value.sequenceElement, false);
  if (value.chargeItem is TFhirReference) then
    ComposeReference(json, 'chargeItemReference', TFhirReference(value.chargeItem))
  else if (value.chargeItem is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'chargeItemCodeableConcept', TFhirCodeableConcept(value.chargeItem)) ;
  if (SummaryOption in [soFull, soData]) and (value.priceComponentList.Count > 0) then
  begin
    startArray(json, 'priceComponent', value.priceComponentList, false);
    for i := 0 to value.priceComponentList.Count - 1 do
      ComposeInvoiceLineItemPriceComponent(json, '', value.priceComponentList[i]);
    finishArray(json, value.priceComponentList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseInvoiceLineItemPriceComponent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInvoiceLineItemPriceComponent(jsn)); 
end;

function TFHIRJsonParser.ParseInvoiceLineItemPriceComponent(jsn : TJsonObject) : TFhirInvoiceLineItemPriceComponent;
begin
  result := TFhirInvoiceLineItemPriceComponent.Create;
  try
    ParseInvoiceLineItemPriceComponentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInvoiceLineItemPriceComponentProperties(jsn : TJsonObject; value : TFhirInvoiceLineItemPriceComponent);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirInvoicePriceComponentTypeEnum, SYSTEMS_TFhirInvoicePriceComponentTypeEnum);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('factor') or jsn.has('_factor') then
        value.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);
    if jsn.has('amount') then
        value.amount := ParseMoney(jsn.vObj['amount']);
end;

procedure TFHIRJsonComposer.ComposeInvoiceLineItemPriceComponent(json : TJSONWriter; name : string; value : TFhirInvoiceLineItemPriceComponent; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirInvoicePriceComponentTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', value.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', value.amount);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseInvoice(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInvoice(jsn)); 
end;

function TFHIRJsonParser.ParseInvoice(jsn : TJsonObject) : TFhirInvoice;
begin
  result := TFhirInvoice.Create;
  try
    ParseInvoiceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseInvoiceProperties(jsn : TJsonObject; value : TFhirInvoice);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirInvoiceStatusEnum, SYSTEMS_TFhirInvoiceStatusEnum);
    if jsn.has('cancelledReason') or jsn.has('_cancelledReason') then
        value.cancelledReasonElement := parseString(jsn.node['cancelledReason'], jsn.vObj['_cancelledReason']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('recipient') then
        value.recipient := ParseReference(jsn.vObj['recipient']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], value.participantList, parseInvoiceParticipant);
    if jsn.has('issuer') then
        value.issuer := ParseReference(jsn.vObj['issuer']);
    if jsn.has('account') then
        value.account := ParseReference(jsn.vObj['account']);
    if jsn.has('lineItem') then
      iterateArray(jsn.vArr['lineItem'], value.lineItemList, parseInvoiceLineItem);
    if jsn.has('totalPriceComponent') then
      iterateArray(jsn.vArr['totalPriceComponent'], value.totalPriceComponentList, parseInvoiceLineItemPriceComponent);
    if jsn.has('totalNet') then
        value.totalNet := ParseMoney(jsn.vObj['totalNet']);
    if jsn.has('totalGross') then
        value.totalGross := ParseMoney(jsn.vObj['totalGross']);
    if jsn.has('paymentTerms') or jsn.has('_paymentTerms') then
        value.paymentTermsElement := parseMarkdown(jsn.node['paymentTerms'], jsn.vObj['_paymentTerms']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeInvoice(json : TJSONWriter; name : string; value : TFhirInvoice; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirInvoiceStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'cancelledReason', value.cancelledReasonElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'cancelledReason', value.cancelledReasonElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'recipient', value.recipient);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) and (value.participantList.Count > 0) then
  begin
    startArray(json, 'participant', value.participantList, false);
    for i := 0 to value.participantList.Count - 1 do
      ComposeInvoiceParticipant(json, '', value.participantList[i]);
    finishArray(json, value.participantList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'issuer', value.issuer);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'account', value.account);
  if (SummaryOption in [soFull, soData]) and (value.lineItemList.Count > 0) then
  begin
    startArray(json, 'lineItem', value.lineItemList, false);
    for i := 0 to value.lineItemList.Count - 1 do
      ComposeInvoiceLineItem(json, '', value.lineItemList[i]);
    finishArray(json, value.lineItemList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.totalPriceComponentList.Count > 0) then
  begin
    startArray(json, 'totalPriceComponent', value.totalPriceComponentList, false);
    for i := 0 to value.totalPriceComponentList.Count - 1 do
      ComposeInvoiceLineItemPriceComponent(json, '', value.totalPriceComponentList[i]);
    finishArray(json, value.totalPriceComponentList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMoney(json, 'totalNet', value.totalNet);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMoney(json, 'totalGross', value.totalGross);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'paymentTerms', value.paymentTermsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'paymentTerms', value.paymentTermsElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
end;

{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
procedure TFHIRJsonParser.ParseLibrary(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLibrary(jsn)); 
end;

function TFHIRJsonParser.ParseLibrary(jsn : TJsonObject) : TFhirLibrary;
begin
  result := TFhirLibrary.Create;
  try
    ParseLibraryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLibraryProperties(jsn : TJsonObject; value : TFhirLibrary);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('subtitle') or jsn.has('_subtitle') then
        value.subtitleElement := parseString(jsn.node['subtitle'], jsn.vObj['_subtitle']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('subjectCodeableConcept') {a4} then
      value.subject := ParseCodeableConcept(jsn.vObj['subjectCodeableConcept']);
    if jsn.has('subjectReference') {a3} then
      value.subject := ParseReference(jsn.vObj['subjectReference']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('usage') or jsn.has('_usage') then
        value.usageElement := parseString(jsn.node['usage'], jsn.vObj['_usage']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        value.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        value.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);
    if jsn.has('effectivePeriod') then
        value.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], value.topicList, parseCodeableConcept);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseContactDetail);
    if jsn.has('editor') then
      iterateArray(jsn.vArr['editor'], value.editorList, parseContactDetail);
    if jsn.has('reviewer') then
      iterateArray(jsn.vArr['reviewer'], value.reviewerList, parseContactDetail);
    if jsn.has('endorser') then
      iterateArray(jsn.vArr['endorser'], value.endorserList, parseContactDetail);
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], value.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], value.parameterList, parseParameterDefinition);
    if jsn.has('dataRequirement') then
      iterateArray(jsn.vArr['dataRequirement'], value.dataRequirementList, parseDataRequirement);
    if jsn.has('content') then
      iterateArray(jsn.vArr['content'], value.contentList, parseAttachment);
end;

procedure TFHIRJsonComposer.ComposeLibrary(json : TJSONWriter; name : string; value : TFhirLibrary; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'subtitle', value.subtitleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'subtitle', value.subtitleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject)) 
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirReference) then
    ComposeReference(json, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', value.effectivePeriod);
  if (SummaryOption in [soFull, soData]) and (value.topicList.Count > 0) then
  begin
    startArray(json, 'topic', value.topicList, false);
    for i := 0 to value.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', value.topicList[i]);
    finishArray(json, value.topicList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.editorList.Count > 0) then
  begin
    startArray(json, 'editor', value.editorList, false);
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(json, '', value.editorList[i]);
    finishArray(json, value.editorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reviewerList.Count > 0) then
  begin
    startArray(json, 'reviewer', value.reviewerList, false);
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(json, '', value.reviewerList[i]);
    finishArray(json, value.reviewerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.endorserList.Count > 0) then
  begin
    startArray(json, 'endorser', value.endorserList, false);
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(json, '', value.endorserList[i]);
    finishArray(json, value.endorserList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedArtifactList.Count > 0) then
  begin
    startArray(json, 'relatedArtifact', value.relatedArtifactList, false);
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', value.relatedArtifactList[i]);
    finishArray(json, value.relatedArtifactList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.parameterList.Count > 0) then
  begin
    startArray(json, 'parameter', value.parameterList, false);
    for i := 0 to value.parameterList.Count - 1 do
      ComposeParameterDefinition(json, '', value.parameterList[i]);
    finishArray(json, value.parameterList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.dataRequirementList.Count > 0) then
  begin
    startArray(json, 'dataRequirement', value.dataRequirementList, false);
    for i := 0 to value.dataRequirementList.Count - 1 do
      ComposeDataRequirement(json, '', value.dataRequirementList[i]);
    finishArray(json, value.dataRequirementList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contentList.Count > 0) then
  begin
    startArray(json, 'content', value.contentList, false);
    for i := 0 to value.contentList.Count - 1 do
      ComposeAttachment(json, '', value.contentList[i]);
    finishArray(json, value.contentList);
  end;
end;

{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
procedure TFHIRJsonParser.ParseLinkageItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLinkageItem(jsn)); 
end;

function TFHIRJsonParser.ParseLinkageItem(jsn : TJsonObject) : TFhirLinkageItem;
begin
  result := TFhirLinkageItem.Create;
  try
    ParseLinkageItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLinkageItemProperties(jsn : TJsonObject; value : TFhirLinkageItem);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirLinkageTypeEnum, SYSTEMS_TFhirLinkageTypeEnum);
    if jsn.has('resource') then
        value.resource := ParseReference(jsn.vObj['resource']);
end;

procedure TFHIRJsonComposer.ComposeLinkageItem(json : TJSONWriter; name : string; value : TFhirLinkageItem; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirLinkageTypeEnum, false);
  ComposeReference(json, 'resource', value.resource);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseLinkage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLinkage(jsn)); 
end;

function TFHIRJsonParser.ParseLinkage(jsn : TJsonObject) : TFhirLinkage;
begin
  result := TFhirLinkage.Create;
  try
    ParseLinkageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLinkageProperties(jsn : TJsonObject; value : TFhirLinkage);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('active') or jsn.has('_active') then
        value.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);
    if jsn.has('author') then
        value.author := ParseReference(jsn.vObj['author']);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], value.itemList, parseLinkageItem);
end;

procedure TFHIRJsonComposer.ComposeLinkage(json : TJSONWriter; name : string; value : TFhirLinkage; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'author', value.author);
  if (value.itemList.Count > 0) then
  begin
    startArray(json, 'item', value.itemList, false);
    for i := 0 to value.itemList.Count - 1 do
      ComposeLinkageItem(json, '', value.itemList[i]);
    finishArray(json, value.itemList);
  end;
end;

{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
procedure TFHIRJsonParser.ParseListEntry(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseListEntry(jsn)); 
end;

function TFHIRJsonParser.ParseListEntry(jsn : TJsonObject) : TFhirListEntry;
begin
  result := TFhirListEntry.Create;
  try
    ParseListEntryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseListEntryProperties(jsn : TJsonObject; value : TFhirListEntry);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('flag') then
        value.flag := ParseCodeableConcept(jsn.vObj['flag']);
    if jsn.has('deleted') or jsn.has('_deleted') then
        value.deletedElement := parseBoolean(jsn.node['deleted'], jsn.vObj['_deleted']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('item') then
        value.item := ParseReference(jsn.vObj['item']);
end;

procedure TFHIRJsonComposer.ComposeListEntry(json : TJSONWriter; name : string; value : TFhirListEntry; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'flag', value.flag);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'deleted', value.deletedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'deleted', value.deletedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  ComposeReference(json, 'item', value.item);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseList(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseList(jsn)); 
end;

function TFHIRJsonParser.ParseList(jsn : TJsonObject) : TFhirList;
begin
  result := TFhirList.Create;
  try
    ParseListProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseListProperties(jsn : TJsonObject; value : TFhirList);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirListStatusEnum, SYSTEMS_TFhirListStatusEnum);
    if jsn.has('mode') or jsn.has('_mode') then
        value.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirListModeEnum, SYSTEMS_TFhirListModeEnum);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('source') then
        value.source := ParseReference(jsn.vObj['source']);
    if jsn.has('orderedBy') then
        value.orderedBy := ParseCodeableConcept(jsn.vObj['orderedBy']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('entry') then
      iterateArray(jsn.vArr['entry'], value.entryList, parseListEntry);
    if jsn.has('emptyReason') then
        value.emptyReason := ParseCodeableConcept(jsn.vObj['emptyReason']);
end;

procedure TFHIRJsonComposer.ComposeList(json : TJSONWriter; name : string; value : TFhirList; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirListStatusEnum, false);
  ComposeEnumValue(json, 'mode', value.modeElement, CODES_TFhirListModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'source', value.source);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'orderedBy', value.orderedBy);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.entryList.Count > 0) then
  begin
    startArray(json, 'entry', value.entryList, false);
    for i := 0 to value.entryList.Count - 1 do
      ComposeListEntry(json, '', value.entryList[i]);
    finishArray(json, value.entryList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'emptyReason', value.emptyReason);
end;

{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
procedure TFHIRJsonParser.ParseLocationPosition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLocationPosition(jsn)); 
end;

function TFHIRJsonParser.ParseLocationPosition(jsn : TJsonObject) : TFhirLocationPosition;
begin
  result := TFhirLocationPosition.Create;
  try
    ParseLocationPositionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLocationPositionProperties(jsn : TJsonObject; value : TFhirLocationPosition);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('longitude') or jsn.has('_longitude') then
        value.longitudeElement := parseDecimal(jsn.node['longitude'], jsn.vObj['_longitude']);
    if jsn.has('latitude') or jsn.has('_latitude') then
        value.latitudeElement := parseDecimal(jsn.node['latitude'], jsn.vObj['_latitude']);
    if jsn.has('altitude') or jsn.has('_altitude') then
        value.altitudeElement := parseDecimal(jsn.node['altitude'], jsn.vObj['_altitude']);
end;

procedure TFHIRJsonComposer.ComposeLocationPosition(json : TJSONWriter; name : string; value : TFhirLocationPosition; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeDecimalValue(json, 'longitude', value.longitudeElement, false);
  ComposeDecimalProps(json, 'longitude', value.longitudeElement, false);
  ComposeDecimalValue(json, 'latitude', value.latitudeElement, false);
  ComposeDecimalProps(json, 'latitude', value.latitudeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'altitude', value.altitudeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'altitude', value.altitudeElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseLocationHoursOfOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLocationHoursOfOperation(jsn)); 
end;

function TFHIRJsonParser.ParseLocationHoursOfOperation(jsn : TJsonObject) : TFhirLocationHoursOfOperation;
begin
  result := TFhirLocationHoursOfOperation.Create;
  try
    ParseLocationHoursOfOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLocationHoursOfOperationProperties(jsn : TJsonObject; value : TFhirLocationHoursOfOperation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('daysOfWeek') or jsn.has('_daysOfWeek') then
      iterateEnumArray(jsn.vArr['daysOfWeek'], jsn.vArr['_daysOfWeek'], jsn.path+'/daysOfWeek', value.daysOfWeekList, parseEnum, CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum);
    if jsn.has('allDay') or jsn.has('_allDay') then
        value.allDayElement := parseBoolean(jsn.node['allDay'], jsn.vObj['_allDay']);
    if jsn.has('openingTime') or jsn.has('_openingTime') then
        value.openingTimeElement := parseTime(jsn.node['openingTime'], jsn.vObj['_openingTime']);
    if jsn.has('closingTime') or jsn.has('_closingTime') then
        value.closingTimeElement := parseTime(jsn.node['closingTime'], jsn.vObj['_closingTime']);
end;

procedure TFHIRJsonComposer.ComposeLocationHoursOfOperation(json : TJSONWriter; name : string; value : TFhirLocationHoursOfOperation; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.daysOfWeekList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.daysOfWeekList.Count - 1 do
    begin
      val := val or (value.daysOfWeekList[i].hasPrimitiveValue);
      ext := ext or ((value.daysOfWeekList[i].id <> '') or (value.daysOfWeekList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'daysOfWeek', value.daysOfWeekList, true);
      for i := 0 to value.daysOfWeekList.Count - 1 do
        ComposeEnumValue(json, '', value.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      finishArray(json, value.daysOfWeekList);
    end;
    if ext then
    begin
      startArray(json, '_daysOfWeek', value.daysOfWeekList, false);
      for i := 0 to value.daysOfWeekList.Count - 1 do
        ComposeEnumProps(json, '', value.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      finishArray(json, value.daysOfWeekList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'allDay', value.allDayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'allDay', value.allDayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'openingTime', value.openingTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'openingTime', value.openingTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'closingTime', value.closingTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'closingTime', value.closingTimeElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseLocation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLocation(jsn)); 
end;

function TFHIRJsonParser.ParseLocation(jsn : TJsonObject) : TFhirLocation;
begin
  result := TFhirLocation.Create;
  try
    ParseLocationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLocationProperties(jsn : TJsonObject; value : TFhirLocation);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirLocationStatusEnum, SYSTEMS_TFhirLocationStatusEnum);
    if jsn.has('operationalStatus') then
        value.operationalStatus := ParseCoding(jsn.vObj['operationalStatus']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
      if jsn.has('alias') or jsn.has('_alias') then
      iteratePrimitiveArray(jsn.vArr['alias'], jsn.vArr['_alias'], value.aliasList, parseString);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('mode') or jsn.has('_mode') then
        value.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirLocationModeEnum, SYSTEMS_TFhirLocationModeEnum);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
    if jsn.has('address') then
        value.address := ParseAddress(jsn.vObj['address']);
    if jsn.has('physicalType') then
        value.physicalType := ParseCodeableConcept(jsn.vObj['physicalType']);
    if jsn.has('position') then
        value.position := ParseLocationPosition(jsn.vObj['position']);
    if jsn.has('managingOrganization') then
        value.managingOrganization := ParseReference(jsn.vObj['managingOrganization']);
    if jsn.has('partOf') then
        value.partOf := ParseReference(jsn.vObj['partOf']);
    if jsn.has('hoursOfOperation') then
      iterateArray(jsn.vArr['hoursOfOperation'], value.hoursOfOperationList, parseLocationHoursOfOperation);
    if jsn.has('availabilityExceptions') or jsn.has('_availabilityExceptions') then
        value.availabilityExceptionsElement := parseString(jsn.node['availabilityExceptions'], jsn.vObj['_availabilityExceptions']);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], value.endpointList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeLocation(json : TJSONWriter; name : string; value : TFhirLocation; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirLocationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'operationalStatus', value.operationalStatus);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) and (value.aliasList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.aliasList.Count - 1 do
    begin
      ext := ext or ((value.aliasList[i].id <> '') or (value.aliasList[i].hasExtensionList) {no-comments or (value.aliasList[i].hasComments)});
      val := val or (value.aliasList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'alias', value.aliasList, true);
      for i := 0 to value.aliasList.Count - 1 do
        ComposeStringValue(json, '', value.aliasList[i], true);
      finishArray(json, value.aliasList);
    end;
    if ext then
    begin
      startArray(json, '_alias', value.aliasList, false);
      for i := 0 to value.aliasList.Count - 1 do
        ComposeStringProps(json, '', value.aliasList[i], true);
      finishArray(json, value.aliasList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'mode', value.modeElement, CODES_TFhirLocationModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeAddress(json, 'address', value.address);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'physicalType', value.physicalType);
  if (SummaryOption in [soFull, soData]) then
    ComposeLocationPosition(json, 'position', value.position);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'managingOrganization', value.managingOrganization);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'partOf', value.partOf);
  if (SummaryOption in [soFull, soData]) and (value.hoursOfOperationList.Count > 0) then
  begin
    startArray(json, 'hoursOfOperation', value.hoursOfOperationList, false);
    for i := 0 to value.hoursOfOperationList.Count - 1 do
      ComposeLocationHoursOfOperation(json, '', value.hoursOfOperationList[i]);
    finishArray(json, value.hoursOfOperationList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'availabilityExceptions', value.availabilityExceptionsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'availabilityExceptions', value.availabilityExceptionsElement, false);
  if (SummaryOption in [soFull, soData]) and (value.endpointList.Count > 0) then
  begin
    startArray(json, 'endpoint', value.endpointList, false);
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(json, '', value.endpointList[i]);
    finishArray(json, value.endpointList);
  end;
end;

{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MANUFACTUREDITEMDEFINITION}
procedure TFHIRJsonParser.ParseManufacturedItemDefinitionProperty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseManufacturedItemDefinitionProperty(jsn)); 
end;

function TFHIRJsonParser.ParseManufacturedItemDefinitionProperty(jsn : TJsonObject) : TFhirManufacturedItemDefinitionProperty;
begin
  result := TFhirManufacturedItemDefinitionProperty.Create;
  try
    ParseManufacturedItemDefinitionPropertyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseManufacturedItemDefinitionPropertyProperties(jsn : TJsonObject; value : TFhirManufacturedItemDefinitionProperty);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      value.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
end;

procedure TFHIRJsonComposer.ComposeManufacturedItemDefinitionProperty(json : TJSONWriter; name : string; value : TFhirManufacturedItemDefinitionProperty; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(value.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseManufacturedItemDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseManufacturedItemDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseManufacturedItemDefinition(jsn : TJsonObject) : TFhirManufacturedItemDefinition;
begin
  result := TFhirManufacturedItemDefinition.Create;
  try
    ParseManufacturedItemDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseManufacturedItemDefinitionProperties(jsn : TJsonObject; value : TFhirManufacturedItemDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('manufacturedDoseForm') then
        value.manufacturedDoseForm := ParseCodeableConcept(jsn.vObj['manufacturedDoseForm']);
    if jsn.has('unitOfPresentation') then
        value.unitOfPresentation := ParseCodeableConcept(jsn.vObj['unitOfPresentation']);
    if jsn.has('manufacturer') then
      iterateArray(jsn.vArr['manufacturer'], value.manufacturerList, parseReference);
    if jsn.has('ingredient') then
      iterateArray(jsn.vArr['ingredient'], value.ingredientList, parseCodeableConcept);
    if jsn.has('property') then
      iterateArray(jsn.vArr['property'], value.property_List, parseManufacturedItemDefinitionProperty);
end;

procedure TFHIRJsonComposer.ComposeManufacturedItemDefinition(json : TJSONWriter; name : string; value : TFhirManufacturedItemDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeCodeableConcept(json, 'manufacturedDoseForm', value.manufacturedDoseForm);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'unitOfPresentation', value.unitOfPresentation);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.manufacturerList.Count > 0) then
  begin
    startArray(json, 'manufacturer', value.manufacturerList, false);
    for i := 0 to value.manufacturerList.Count - 1 do
      ComposeReference(json, '', value.manufacturerList[i]);
    finishArray(json, value.manufacturerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.ingredientList.Count > 0) then
  begin
    startArray(json, 'ingredient', value.ingredientList, false);
    for i := 0 to value.ingredientList.Count - 1 do
      ComposeCodeableConcept(json, '', value.ingredientList[i]);
    finishArray(json, value.ingredientList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.property_List.Count > 0) then
  begin
    startArray(json, 'property', value.property_List, false);
    for i := 0 to value.property_List.Count - 1 do
      ComposeManufacturedItemDefinitionProperty(json, '', value.property_List[i]);
    finishArray(json, value.property_List);
  end;
end;

{$ENDIF FHIR_MANUFACTUREDITEMDEFINITION}
{$IFDEF FHIR_MEASURE}
procedure TFHIRJsonParser.ParseMeasureGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureGroup(jsn)); 
end;

function TFHIRJsonParser.ParseMeasureGroup(jsn : TJsonObject) : TFhirMeasureGroup;
begin
  result := TFhirMeasureGroup.Create;
  try
    ParseMeasureGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureGroupProperties(jsn : TJsonObject; value : TFhirMeasureGroup);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('population') then
      iterateArray(jsn.vArr['population'], value.populationList, parseMeasureGroupPopulation);
    if jsn.has('stratifier') then
      iterateArray(jsn.vArr['stratifier'], value.stratifierList, parseMeasureGroupStratifier);
end;

procedure TFHIRJsonComposer.ComposeMeasureGroup(json : TJSONWriter; name : string; value : TFhirMeasureGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.populationList.Count > 0) then
  begin
    startArray(json, 'population', value.populationList, false);
    for i := 0 to value.populationList.Count - 1 do
      ComposeMeasureGroupPopulation(json, '', value.populationList[i]);
    finishArray(json, value.populationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.stratifierList.Count > 0) then
  begin
    startArray(json, 'stratifier', value.stratifierList, false);
    for i := 0 to value.stratifierList.Count - 1 do
      ComposeMeasureGroupStratifier(json, '', value.stratifierList[i]);
    finishArray(json, value.stratifierList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMeasureGroupPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureGroupPopulation(jsn)); 
end;

function TFHIRJsonParser.ParseMeasureGroupPopulation(jsn : TJsonObject) : TFhirMeasureGroupPopulation;
begin
  result := TFhirMeasureGroupPopulation.Create;
  try
    ParseMeasureGroupPopulationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureGroupPopulationProperties(jsn : TJsonObject; value : TFhirMeasureGroupPopulation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('criteria') then
        value.criteria := ParseExpression(jsn.vObj['criteria']);
end;

procedure TFHIRJsonComposer.ComposeMeasureGroupPopulation(json : TJSONWriter; name : string; value : TFhirMeasureGroupPopulation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  ComposeExpression(json, 'criteria', value.criteria);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMeasureGroupStratifier(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureGroupStratifier(jsn)); 
end;

function TFHIRJsonParser.ParseMeasureGroupStratifier(jsn : TJsonObject) : TFhirMeasureGroupStratifier;
begin
  result := TFhirMeasureGroupStratifier.Create;
  try
    ParseMeasureGroupStratifierProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureGroupStratifierProperties(jsn : TJsonObject; value : TFhirMeasureGroupStratifier);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('criteria') then
        value.criteria := ParseExpression(jsn.vObj['criteria']);
    if jsn.has('component') then
      iterateArray(jsn.vArr['component'], value.componentList, parseMeasureGroupStratifierComponent);
end;

procedure TFHIRJsonComposer.ComposeMeasureGroupStratifier(json : TJSONWriter; name : string; value : TFhirMeasureGroupStratifier; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeExpression(json, 'criteria', value.criteria);
  if (SummaryOption in [soFull, soData]) and (value.componentList.Count > 0) then
  begin
    startArray(json, 'component', value.componentList, false);
    for i := 0 to value.componentList.Count - 1 do
      ComposeMeasureGroupStratifierComponent(json, '', value.componentList[i]);
    finishArray(json, value.componentList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMeasureGroupStratifierComponent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureGroupStratifierComponent(jsn)); 
end;

function TFHIRJsonParser.ParseMeasureGroupStratifierComponent(jsn : TJsonObject) : TFhirMeasureGroupStratifierComponent;
begin
  result := TFhirMeasureGroupStratifierComponent.Create;
  try
    ParseMeasureGroupStratifierComponentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureGroupStratifierComponentProperties(jsn : TJsonObject; value : TFhirMeasureGroupStratifierComponent);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('criteria') then
        value.criteria := ParseExpression(jsn.vObj['criteria']);
end;

procedure TFHIRJsonComposer.ComposeMeasureGroupStratifierComponent(json : TJSONWriter; name : string; value : TFhirMeasureGroupStratifierComponent; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  ComposeExpression(json, 'criteria', value.criteria);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMeasureSupplementalData(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureSupplementalData(jsn)); 
end;

function TFHIRJsonParser.ParseMeasureSupplementalData(jsn : TJsonObject) : TFhirMeasureSupplementalData;
begin
  result := TFhirMeasureSupplementalData.Create;
  try
    ParseMeasureSupplementalDataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureSupplementalDataProperties(jsn : TJsonObject; value : TFhirMeasureSupplementalData);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('usage') then
      iterateArray(jsn.vArr['usage'], value.usageList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('criteria') then
        value.criteria := ParseExpression(jsn.vObj['criteria']);
end;

procedure TFHIRJsonComposer.ComposeMeasureSupplementalData(json : TJSONWriter; name : string; value : TFhirMeasureSupplementalData; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) and (value.usageList.Count > 0) then
  begin
    startArray(json, 'usage', value.usageList, false);
    for i := 0 to value.usageList.Count - 1 do
      ComposeCodeableConcept(json, '', value.usageList[i]);
    finishArray(json, value.usageList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  ComposeExpression(json, 'criteria', value.criteria);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMeasure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasure(jsn)); 
end;

function TFHIRJsonParser.ParseMeasure(jsn : TJsonObject) : TFhirMeasure;
begin
  result := TFhirMeasure.Create;
  try
    ParseMeasureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureProperties(jsn : TJsonObject; value : TFhirMeasure);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('subtitle') or jsn.has('_subtitle') then
        value.subtitleElement := parseString(jsn.node['subtitle'], jsn.vObj['_subtitle']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('subjectCodeableConcept') {a4} then
      value.subject := ParseCodeableConcept(jsn.vObj['subjectCodeableConcept']);
    if jsn.has('subjectReference') {a3} then
      value.subject := ParseReference(jsn.vObj['subjectReference']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('usage') or jsn.has('_usage') then
        value.usageElement := parseString(jsn.node['usage'], jsn.vObj['_usage']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        value.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        value.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);
    if jsn.has('effectivePeriod') then
        value.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], value.topicList, parseCodeableConcept);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseContactDetail);
    if jsn.has('editor') then
      iterateArray(jsn.vArr['editor'], value.editorList, parseContactDetail);
    if jsn.has('reviewer') then
      iterateArray(jsn.vArr['reviewer'], value.reviewerList, parseContactDetail);
    if jsn.has('endorser') then
      iterateArray(jsn.vArr['endorser'], value.endorserList, parseContactDetail);
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], value.relatedArtifactList, parseRelatedArtifact);
      if jsn.has('library') or jsn.has('_library') then
      iteratePrimitiveArray(jsn.vArr['library'], jsn.vArr['_library'], value.library_List, parseCanonical);
    if jsn.has('disclaimer') or jsn.has('_disclaimer') then
        value.disclaimerElement := parseMarkdown(jsn.node['disclaimer'], jsn.vObj['_disclaimer']);
    if jsn.has('scoring') then
        value.scoring := ParseCodeableConcept(jsn.vObj['scoring']);
    if jsn.has('compositeScoring') then
        value.compositeScoring := ParseCodeableConcept(jsn.vObj['compositeScoring']);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('riskAdjustment') or jsn.has('_riskAdjustment') then
        value.riskAdjustmentElement := parseString(jsn.node['riskAdjustment'], jsn.vObj['_riskAdjustment']);
    if jsn.has('rateAggregation') or jsn.has('_rateAggregation') then
        value.rateAggregationElement := parseString(jsn.node['rateAggregation'], jsn.vObj['_rateAggregation']);
    if jsn.has('rationale') or jsn.has('_rationale') then
        value.rationaleElement := parseMarkdown(jsn.node['rationale'], jsn.vObj['_rationale']);
    if jsn.has('clinicalRecommendationStatement') or jsn.has('_clinicalRecommendationStatement') then
        value.clinicalRecommendationStatementElement := parseMarkdown(jsn.node['clinicalRecommendationStatement'], jsn.vObj['_clinicalRecommendationStatement']);
    if jsn.has('improvementNotation') then
        value.improvementNotation := ParseCodeableConcept(jsn.vObj['improvementNotation']);
      if jsn.has('definition') or jsn.has('_definition') then
      iteratePrimitiveArray(jsn.vArr['definition'], jsn.vArr['_definition'], value.definitionList, parseMarkdown);
    if jsn.has('guidance') or jsn.has('_guidance') then
        value.guidanceElement := parseMarkdown(jsn.node['guidance'], jsn.vObj['_guidance']);
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], value.groupList, parseMeasureGroup);
    if jsn.has('supplementalData') then
      iterateArray(jsn.vArr['supplementalData'], value.supplementalDataList, parseMeasureSupplementalData);
end;

procedure TFHIRJsonComposer.ComposeMeasure(json : TJSONWriter; name : string; value : TFhirMeasure; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'subtitle', value.subtitleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'subtitle', value.subtitleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject)) 
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirReference) then
    ComposeReference(json, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', value.effectivePeriod);
  if (SummaryOption in [soFull, soData]) and (value.topicList.Count > 0) then
  begin
    startArray(json, 'topic', value.topicList, false);
    for i := 0 to value.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', value.topicList[i]);
    finishArray(json, value.topicList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.editorList.Count > 0) then
  begin
    startArray(json, 'editor', value.editorList, false);
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(json, '', value.editorList[i]);
    finishArray(json, value.editorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reviewerList.Count > 0) then
  begin
    startArray(json, 'reviewer', value.reviewerList, false);
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(json, '', value.reviewerList[i]);
    finishArray(json, value.reviewerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.endorserList.Count > 0) then
  begin
    startArray(json, 'endorser', value.endorserList, false);
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(json, '', value.endorserList[i]);
    finishArray(json, value.endorserList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedArtifactList.Count > 0) then
  begin
    startArray(json, 'relatedArtifact', value.relatedArtifactList, false);
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', value.relatedArtifactList[i]);
    finishArray(json, value.relatedArtifactList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.library_List.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.library_List.Count - 1 do
    begin
      ext := ext or ((value.library_List[i].id <> '') or (value.library_List[i].hasExtensionList) {no-comments or (value.library_List[i].hasComments)});
      val := val or (value.library_List[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'library', value.library_List, true);
      for i := 0 to value.library_List.Count - 1 do
        ComposeCanonicalValue(json, '', value.library_List[i], true);
      finishArray(json, value.library_List);
    end;
    if ext then
    begin
      startArray(json, '_library', value.library_List, false);
      for i := 0 to value.library_List.Count - 1 do
        ComposeCanonicalProps(json, '', value.library_List[i], true);
      finishArray(json, value.library_List);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'disclaimer', value.disclaimerElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'disclaimer', value.disclaimerElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'scoring', value.scoring);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'compositeScoring', value.compositeScoring);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'riskAdjustment', value.riskAdjustmentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'riskAdjustment', value.riskAdjustmentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'rateAggregation', value.rateAggregationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'rateAggregation', value.rateAggregationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'rationale', value.rationaleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'rationale', value.rationaleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'clinicalRecommendationStatement', value.clinicalRecommendationStatementElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'clinicalRecommendationStatement', value.clinicalRecommendationStatementElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'improvementNotation', value.improvementNotation);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.definitionList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.definitionList.Count - 1 do
    begin
      ext := ext or ((value.definitionList[i].id <> '') or (value.definitionList[i].hasExtensionList) {no-comments or (value.definitionList[i].hasComments)});
      val := val or (value.definitionList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'definition', value.definitionList, true);
      for i := 0 to value.definitionList.Count - 1 do
        ComposeMarkdownValue(json, '', value.definitionList[i], true);
      finishArray(json, value.definitionList);
    end;
    if ext then
    begin
      startArray(json, '_definition', value.definitionList, false);
      for i := 0 to value.definitionList.Count - 1 do
        ComposeMarkdownProps(json, '', value.definitionList[i], true);
      finishArray(json, value.definitionList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'guidance', value.guidanceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'guidance', value.guidanceElement, false);
  if (SummaryOption in [soFull, soData]) and (value.groupList.Count > 0) then
  begin
    startArray(json, 'group', value.groupList, false);
    for i := 0 to value.groupList.Count - 1 do
      ComposeMeasureGroup(json, '', value.groupList[i]);
    finishArray(json, value.groupList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.supplementalDataList.Count > 0) then
  begin
    startArray(json, 'supplementalData', value.supplementalDataList, false);
    for i := 0 to value.supplementalDataList.Count - 1 do
      ComposeMeasureSupplementalData(json, '', value.supplementalDataList[i]);
    finishArray(json, value.supplementalDataList);
  end;
end;

{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
procedure TFHIRJsonParser.ParseMeasureReportGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroup(jsn)); 
end;

function TFHIRJsonParser.ParseMeasureReportGroup(jsn : TJsonObject) : TFhirMeasureReportGroup;
begin
  result := TFhirMeasureReportGroup.Create;
  try
    ParseMeasureReportGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupProperties(jsn : TJsonObject; value : TFhirMeasureReportGroup);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('population') then
      iterateArray(jsn.vArr['population'], value.populationList, parseMeasureReportGroupPopulation);
    if jsn.has('measureScore') then
        value.measureScore := ParseQuantity(jsn.vObj['measureScore']);
    if jsn.has('stratifier') then
      iterateArray(jsn.vArr['stratifier'], value.stratifierList, parseMeasureReportGroupStratifier);
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroup(json : TJSONWriter; name : string; value : TFhirMeasureReportGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) and (value.populationList.Count > 0) then
  begin
    startArray(json, 'population', value.populationList, false);
    for i := 0 to value.populationList.Count - 1 do
      ComposeMeasureReportGroupPopulation(json, '', value.populationList[i]);
    finishArray(json, value.populationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'measureScore', value.measureScore);
  if (SummaryOption in [soFull, soData]) and (value.stratifierList.Count > 0) then
  begin
    startArray(json, 'stratifier', value.stratifierList, false);
    for i := 0 to value.stratifierList.Count - 1 do
      ComposeMeasureReportGroupStratifier(json, '', value.stratifierList[i]);
    finishArray(json, value.stratifierList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroupPopulation(jsn)); 
end;

function TFHIRJsonParser.ParseMeasureReportGroupPopulation(jsn : TJsonObject) : TFhirMeasureReportGroupPopulation;
begin
  result := TFhirMeasureReportGroupPopulation.Create;
  try
    ParseMeasureReportGroupPopulationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupPopulationProperties(jsn : TJsonObject; value : TFhirMeasureReportGroupPopulation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('count') or jsn.has('_count') then
        value.countElement := parseInteger(jsn.node['count'], jsn.vObj['_count']);
    if jsn.has('subjectResults') then
        value.subjectResults := ParseReference(jsn.vObj['subjectResults']);
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroupPopulation(json : TJSONWriter; name : string; value : TFhirMeasureReportGroupPopulation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'count', value.countElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'count', value.countElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'subjectResults', value.subjectResults);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifier(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroupStratifier(jsn)); 
end;

function TFHIRJsonParser.ParseMeasureReportGroupStratifier(jsn : TJsonObject) : TFhirMeasureReportGroupStratifier;
begin
  result := TFhirMeasureReportGroupStratifier.Create;
  try
    ParseMeasureReportGroupStratifierProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierProperties(jsn : TJsonObject; value : TFhirMeasureReportGroupStratifier);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCodeableConcept);
    if jsn.has('stratum') then
      iterateArray(jsn.vArr['stratum'], value.stratumList, parseMeasureReportGroupStratifierStratum);
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroupStratifier(json : TJSONWriter; name : string; value : TFhirMeasureReportGroupStratifier; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.stratumList.Count > 0) then
  begin
    startArray(json, 'stratum', value.stratumList, false);
    for i := 0 to value.stratumList.Count - 1 do
      ComposeMeasureReportGroupStratifierStratum(json, '', value.stratumList[i]);
    finishArray(json, value.stratumList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierStratum(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroupStratifierStratum(jsn)); 
end;

function TFHIRJsonParser.ParseMeasureReportGroupStratifierStratum(jsn : TJsonObject) : TFhirMeasureReportGroupStratifierStratum;
begin
  result := TFhirMeasureReportGroupStratifierStratum.Create;
  try
    ParseMeasureReportGroupStratifierStratumProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumProperties(jsn : TJsonObject; value : TFhirMeasureReportGroupStratifierStratum);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('value') then
        value.value := ParseCodeableConcept(jsn.vObj['value']);
    if jsn.has('component') then
      iterateArray(jsn.vArr['component'], value.componentList, parseMeasureReportGroupStratifierStratumComponent);
    if jsn.has('population') then
      iterateArray(jsn.vArr['population'], value.populationList, parseMeasureReportGroupStratifierStratumPopulation);
    if jsn.has('measureScore') then
        value.measureScore := ParseQuantity(jsn.vObj['measureScore']);
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroupStratifierStratum(json : TJSONWriter; name : string; value : TFhirMeasureReportGroupStratifierStratum; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'value', value.value);
  if (SummaryOption in [soFull, soData]) and (value.componentList.Count > 0) then
  begin
    startArray(json, 'component', value.componentList, false);
    for i := 0 to value.componentList.Count - 1 do
      ComposeMeasureReportGroupStratifierStratumComponent(json, '', value.componentList[i]);
    finishArray(json, value.componentList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.populationList.Count > 0) then
  begin
    startArray(json, 'population', value.populationList, false);
    for i := 0 to value.populationList.Count - 1 do
      ComposeMeasureReportGroupStratifierStratumPopulation(json, '', value.populationList[i]);
    finishArray(json, value.populationList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'measureScore', value.measureScore);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumComponent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroupStratifierStratumComponent(jsn)); 
end;

function TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumComponent(jsn : TJsonObject) : TFhirMeasureReportGroupStratifierStratumComponent;
begin
  result := TFhirMeasureReportGroupStratifierStratumComponent.Create;
  try
    ParseMeasureReportGroupStratifierStratumComponentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumComponentProperties(jsn : TJsonObject; value : TFhirMeasureReportGroupStratifierStratumComponent);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('value') then
        value.value := ParseCodeableConcept(jsn.vObj['value']);
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroupStratifierStratumComponent(json : TJSONWriter; name : string; value : TFhirMeasureReportGroupStratifierStratumComponent; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'code', value.code);
  ComposeCodeableConcept(json, 'value', value.value);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroupStratifierStratumPopulation(jsn)); 
end;

function TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumPopulation(jsn : TJsonObject) : TFhirMeasureReportGroupStratifierStratumPopulation;
begin
  result := TFhirMeasureReportGroupStratifierStratumPopulation.Create;
  try
    ParseMeasureReportGroupStratifierStratumPopulationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumPopulationProperties(jsn : TJsonObject; value : TFhirMeasureReportGroupStratifierStratumPopulation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('count') or jsn.has('_count') then
        value.countElement := parseInteger(jsn.node['count'], jsn.vObj['_count']);
    if jsn.has('subjectResults') then
        value.subjectResults := ParseReference(jsn.vObj['subjectResults']);
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroupStratifierStratumPopulation(json : TJSONWriter; name : string; value : TFhirMeasureReportGroupStratifierStratumPopulation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'count', value.countElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'count', value.countElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'subjectResults', value.subjectResults);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMeasureReport(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReport(jsn)); 
end;

function TFHIRJsonParser.ParseMeasureReport(jsn : TJsonObject) : TFhirMeasureReport;
begin
  result := TFhirMeasureReport.Create;
  try
    ParseMeasureReportProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportProperties(jsn : TJsonObject; value : TFhirMeasureReport);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirMeasureReportStatusEnum, SYSTEMS_TFhirMeasureReportStatusEnum);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirMeasureReportTypeEnum, SYSTEMS_TFhirMeasureReportTypeEnum);
    if jsn.has('measure') or jsn.has('_measure') then
        value.measureElement := parseCanonical(jsn.node['measure'], jsn.vObj['_measure']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('reporter') then
        value.reporter := ParseReference(jsn.vObj['reporter']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('improvementNotation') then
        value.improvementNotation := ParseCodeableConcept(jsn.vObj['improvementNotation']);
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], value.groupList, parseMeasureReportGroup);
    if jsn.has('evaluatedResource') then
      iterateArray(jsn.vArr['evaluatedResource'], value.evaluatedResourceList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeMeasureReport(json : TJSONWriter; name : string; value : TFhirMeasureReport; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirMeasureReportStatusEnum, false);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirMeasureReportTypeEnum, false);
  ComposeCanonicalValue(json, 'measure', value.measureElement, false);
  ComposeCanonicalProps(json, 'measure', value.measureElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'reporter', value.reporter);
  ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'improvementNotation', value.improvementNotation);
  if (SummaryOption in [soFull, soData]) and (value.groupList.Count > 0) then
  begin
    startArray(json, 'group', value.groupList, false);
    for i := 0 to value.groupList.Count - 1 do
      ComposeMeasureReportGroup(json, '', value.groupList[i]);
    finishArray(json, value.groupList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.evaluatedResourceList.Count > 0) then
  begin
    startArray(json, 'evaluatedResource', value.evaluatedResourceList, false);
    for i := 0 to value.evaluatedResourceList.Count - 1 do
      ComposeReference(json, '', value.evaluatedResourceList[i]);
    finishArray(json, value.evaluatedResourceList);
  end;
end;

{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
procedure TFHIRJsonParser.ParseMedia(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedia(jsn)); 
end;

function TFHIRJsonParser.ParseMedia(jsn : TJsonObject) : TFhirMedia;
begin
  result := TFhirMedia.Create;
  try
    ParseMediaProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMediaProperties(jsn : TJsonObject; value : TFhirMedia);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], value.partOfList, parseReference);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEventStatusEnum, SYSTEMS_TFhirEventStatusEnum);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('modality') then
        value.modality := ParseCodeableConcept(jsn.vObj['modality']);
    if jsn.has('view') then
        value.view := ParseCodeableConcept(jsn.vObj['view']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('createdPeriod') {a4} then
      value.created := ParsePeriod(jsn.vObj['createdPeriod']);
    if jsn.has('createdDateTime') or jsn.has('_createdDateTime') then
      value.created := parseDateTime(jsn.node['createdDateTime'], jsn.vObj['_createdDateTime']);
    if jsn.has('issued') or jsn.has('_issued') then
        value.issuedElement := parseInstant(jsn.node['issued'], jsn.vObj['_issued']);
    if jsn.has('operator') then
        value.operator := ParseReference(jsn.vObj['operator']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('bodySite') then
        value.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);
    if jsn.has('deviceName') or jsn.has('_deviceName') then
        value.deviceNameElement := parseString(jsn.node['deviceName'], jsn.vObj['_deviceName']);
    if jsn.has('device') then
        value.device := ParseReference(jsn.vObj['device']);
    if jsn.has('height') or jsn.has('_height') then
        value.heightElement := parsePositiveInt(jsn.node['height'], jsn.vObj['_height']);
    if jsn.has('width') or jsn.has('_width') then
        value.widthElement := parsePositiveInt(jsn.node['width'], jsn.vObj['_width']);
    if jsn.has('frames') or jsn.has('_frames') then
        value.framesElement := parsePositiveInt(jsn.node['frames'], jsn.vObj['_frames']);
    if jsn.has('duration') or jsn.has('_duration') then
        value.durationElement := parseDecimal(jsn.node['duration'], jsn.vObj['_duration']);
    if jsn.has('content') then
        value.content := ParseAttachment(jsn.vObj['content']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeMedia(json : TJSONWriter; name : string; value : TFhirMedia; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.partOfList.Count > 0) then
  begin
    startArray(json, 'partOf', value.partOfList, false);
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(json, '', value.partOfList[i]);
    finishArray(json, value.partOfList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirEventStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'modality', value.modality);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'view', value.view);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.created is TFhirPeriod) then 
    ComposePeriod(json, 'createdPeriod', TFhirPeriod(value.created)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.created is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'createdDateTime', TFhirDateTime(value.created), false);
    ComposeDateTimeProps(json, 'createdDateTime', TFhirDateTime(value.created), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'issued', value.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'issued', value.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'operator', value.operator);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'bodySite', value.bodySite);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'deviceName', value.deviceNameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'deviceName', value.deviceNameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'device', value.device);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'height', value.heightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'height', value.heightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'width', value.widthElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'width', value.widthElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'frames', value.framesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'frames', value.framesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'duration', value.durationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'duration', value.durationElement, false);
  ComposeAttachment(json, 'content', value.content);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
end;

{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
procedure TFHIRJsonParser.ParseMedicationIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationIngredient(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationIngredient(jsn : TJsonObject) : TFhirMedicationIngredient;
begin
  result := TFhirMedicationIngredient.Create;
  try
    ParseMedicationIngredientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationIngredientProperties(jsn : TJsonObject; value : TFhirMedicationIngredient);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('itemCodeableConcept') {a4} then
      value.item := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
    if jsn.has('itemReference') {a3} then
      value.item := ParseReference(jsn.vObj['itemReference']);
    if jsn.has('isActive') or jsn.has('_isActive') then
        value.isActiveElement := parseBoolean(jsn.node['isActive'], jsn.vObj['_isActive']);
    if jsn.has('strength') then
        value.strength := ParseRatio(jsn.vObj['strength']);
end;

procedure TFHIRJsonComposer.ComposeMedicationIngredient(json : TJSONWriter; name : string; value : TFhirMedicationIngredient; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.item is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'itemCodeableConcept', TFhirCodeableConcept(value.item)) 
  else if (value.item is TFhirReference) then
    ComposeReference(json, 'itemReference', TFhirReference(value.item));
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'isActive', value.isActiveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'isActive', value.isActiveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeRatio(json, 'strength', value.strength);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationBatch(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationBatch(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationBatch(jsn : TJsonObject) : TFhirMedicationBatch;
begin
  result := TFhirMedicationBatch.Create;
  try
    ParseMedicationBatchProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationBatchProperties(jsn : TJsonObject; value : TFhirMedicationBatch);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('lotNumber') or jsn.has('_lotNumber') then
        value.lotNumberElement := parseString(jsn.node['lotNumber'], jsn.vObj['_lotNumber']);
    if jsn.has('expirationDate') or jsn.has('_expirationDate') then
        value.expirationDateElement := parseDateTime(jsn.node['expirationDate'], jsn.vObj['_expirationDate']);
end;

procedure TFHIRJsonComposer.ComposeMedicationBatch(json : TJSONWriter; name : string; value : TFhirMedicationBatch; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'lotNumber', value.lotNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'lotNumber', value.lotNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'expirationDate', value.expirationDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'expirationDate', value.expirationDateElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedication(jsn)); 
end;

function TFHIRJsonParser.ParseMedication(jsn : TJsonObject) : TFhirMedication;
begin
  result := TFhirMedication.Create;
  try
    ParseMedicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationProperties(jsn : TJsonObject; value : TFhirMedication);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirMedicationStatusCodesEnum, SYSTEMS_TFhirMedicationStatusCodesEnum);
    if jsn.has('manufacturer') then
        value.manufacturer := ParseReference(jsn.vObj['manufacturer']);
    if jsn.has('form') then
        value.form := ParseCodeableConcept(jsn.vObj['form']);
    if jsn.has('amount') then
        value.amount := ParseRatio(jsn.vObj['amount']);
    if jsn.has('ingredient') then
      iterateArray(jsn.vArr['ingredient'], value.ingredientList, parseMedicationIngredient);
    if jsn.has('batch') then
        value.batch := ParseMedicationBatch(jsn.vObj['batch']);
end;

procedure TFHIRJsonComposer.ComposeMedication(json : TJSONWriter; name : string; value : TFhirMedication; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirMedicationStatusCodesEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'manufacturer', value.manufacturer);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'form', value.form);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(json, 'amount', value.amount);
  if (SummaryOption in [soFull, soData]) and (value.ingredientList.Count > 0) then
  begin
    startArray(json, 'ingredient', value.ingredientList, false);
    for i := 0 to value.ingredientList.Count - 1 do
      ComposeMedicationIngredient(json, '', value.ingredientList[i]);
    finishArray(json, value.ingredientList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationBatch(json, 'batch', value.batch);
end;

{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
procedure TFHIRJsonParser.ParseMedicationAdministrationPerformer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationAdministrationPerformer(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationAdministrationPerformer(jsn : TJsonObject) : TFhirMedicationAdministrationPerformer;
begin
  result := TFhirMedicationAdministrationPerformer.Create;
  try
    ParseMedicationAdministrationPerformerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationAdministrationPerformerProperties(jsn : TJsonObject; value : TFhirMedicationAdministrationPerformer);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('function') then
        value.function_ := ParseCodeableConcept(jsn.vObj['function']);
    if jsn.has('actor') then
        value.actor := ParseReference(jsn.vObj['actor']);
end;

procedure TFHIRJsonComposer.ComposeMedicationAdministrationPerformer(json : TJSONWriter; name : string; value : TFhirMedicationAdministrationPerformer; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'function', value.function_);
  ComposeReference(json, 'actor', value.actor);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationAdministrationDosage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationAdministrationDosage(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationAdministrationDosage(jsn : TJsonObject) : TFhirMedicationAdministrationDosage;
begin
  result := TFhirMedicationAdministrationDosage.Create;
  try
    ParseMedicationAdministrationDosageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationAdministrationDosageProperties(jsn : TJsonObject; value : TFhirMedicationAdministrationDosage);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
    if jsn.has('site') then
        value.site := ParseCodeableConcept(jsn.vObj['site']);
    if jsn.has('route') then
        value.route := ParseCodeableConcept(jsn.vObj['route']);
    if jsn.has('method') then
        value.method := ParseCodeableConcept(jsn.vObj['method']);
    if jsn.has('dose') then
        value.dose := ParseQuantity(jsn.vObj['dose']);
    if jsn.has('rateRatio') {a4} then
      value.rate := ParseRatio(jsn.vObj['rateRatio']);
    if jsn.has('rateQuantity') {a4} then
      value.rate := ParseQuantity(jsn.vObj['rateQuantity']);
end;

procedure TFHIRJsonComposer.ComposeMedicationAdministrationDosage(json : TJSONWriter; name : string; value : TFhirMedicationAdministrationDosage; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'site', value.site);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'route', value.route);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'method', value.method);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'dose', value.dose);
  if (SummaryOption in [soFull, soData]) and (value.rate is TFhirRatio) then 
    ComposeRatio(json, 'rateRatio', TFhirRatio(value.rate)) 
  else if (SummaryOption in [soFull, soData]) and (value.rate is TFhirQuantity) then 
    ComposeQuantity(json, 'rateQuantity', TFhirQuantity(value.rate)) ;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationAdministration(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationAdministration(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationAdministration(jsn : TJsonObject) : TFhirMedicationAdministration;
begin
  result := TFhirMedicationAdministration.Create;
  try
    ParseMedicationAdministrationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationAdministrationProperties(jsn : TJsonObject; value : TFhirMedicationAdministration);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
      if jsn.has('instantiates') or jsn.has('_instantiates') then
      iteratePrimitiveArray(jsn.vArr['instantiates'], jsn.vArr['_instantiates'], value.instantiatesList, parseUri);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], value.partOfList, parseReference);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirMedicationAdministrationStatusCodesEnum, SYSTEMS_TFhirMedicationAdministrationStatusCodesEnum);
    if jsn.has('statusReason') then
      iterateArray(jsn.vArr['statusReason'], value.statusReasonList, parseCodeableConcept);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('medicationCodeableConcept') {a4} then
      value.medication := ParseCodeableConcept(jsn.vObj['medicationCodeableConcept']);
    if jsn.has('medicationReference') {a3} then
      value.medication := ParseReference(jsn.vObj['medicationReference']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('context') then
        value.context := ParseReference(jsn.vObj['context']);
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], value.supportingInformationList, parseReference);
    if jsn.has('effectivePeriod') {a4} then
      value.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      value.effective := parseDateTime(jsn.node['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], value.performerList, parseMedicationAdministrationPerformer);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('request') then
        value.request := ParseReference(jsn.vObj['request']);
    if jsn.has('device') then
      iterateArray(jsn.vArr['device'], value.deviceList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('dosage') then
        value.dosage := ParseMedicationAdministrationDosage(jsn.vObj['dosage']);
    if jsn.has('eventHistory') then
      iterateArray(jsn.vArr['eventHistory'], value.eventHistoryList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeMedicationAdministration(json : TJSONWriter; name : string; value : TFhirMedicationAdministration; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesList[i].id <> '') or (value.instantiatesList[i].hasExtensionList) {no-comments or (value.instantiatesList[i].hasComments)});
      val := val or (value.instantiatesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiates', value.instantiatesList, true);
      for i := 0 to value.instantiatesList.Count - 1 do
        ComposeUriValue(json, '', value.instantiatesList[i], true);
      finishArray(json, value.instantiatesList);
    end;
    if ext then
    begin
      startArray(json, '_instantiates', value.instantiatesList, false);
      for i := 0 to value.instantiatesList.Count - 1 do
        ComposeUriProps(json, '', value.instantiatesList[i], true);
      finishArray(json, value.instantiatesList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.partOfList.Count > 0) then
  begin
    startArray(json, 'partOf', value.partOfList, false);
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(json, '', value.partOfList[i]);
    finishArray(json, value.partOfList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirMedicationAdministrationStatusCodesEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.statusReasonList.Count > 0) then
  begin
    startArray(json, 'statusReason', value.statusReasonList, false);
    for i := 0 to value.statusReasonList.Count - 1 do
      ComposeCodeableConcept(json, '', value.statusReasonList[i]);
    finishArray(json, value.statusReasonList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  if (value.medication is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'medicationCodeableConcept', TFhirCodeableConcept(value.medication)) 
  else if (value.medication is TFhirReference) then
    ComposeReference(json, 'medicationReference', TFhirReference(value.medication));
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'context', value.context);
  if (SummaryOption in [soFull, soData]) and (value.supportingInformationList.Count > 0) then
  begin
    startArray(json, 'supportingInformation', value.supportingInformationList, false);
    for i := 0 to value.supportingInformationList.Count - 1 do
      ComposeReference(json, '', value.supportingInformationList[i]);
    finishArray(json, value.supportingInformationList);
  end;
  if (value.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(value.effective)) 
  else if (value.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(value.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(value.effective), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.performerList.Count > 0) then
  begin
    startArray(json, 'performer', value.performerList, false);
    for i := 0 to value.performerList.Count - 1 do
      ComposeMedicationAdministrationPerformer(json, '', value.performerList[i]);
    finishArray(json, value.performerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'request', value.request);
  if (SummaryOption in [soFull, soData]) and (value.deviceList.Count > 0) then
  begin
    startArray(json, 'device', value.deviceList, false);
    for i := 0 to value.deviceList.Count - 1 do
      ComposeReference(json, '', value.deviceList[i]);
    finishArray(json, value.deviceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationAdministrationDosage(json, 'dosage', value.dosage);
  if (SummaryOption in [soFull, soData]) and (value.eventHistoryList.Count > 0) then
  begin
    startArray(json, 'eventHistory', value.eventHistoryList, false);
    for i := 0 to value.eventHistoryList.Count - 1 do
      ComposeReference(json, '', value.eventHistoryList[i]);
    finishArray(json, value.eventHistoryList);
  end;
end;

{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
procedure TFHIRJsonParser.ParseMedicationDispensePerformer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationDispensePerformer(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationDispensePerformer(jsn : TJsonObject) : TFhirMedicationDispensePerformer;
begin
  result := TFhirMedicationDispensePerformer.Create;
  try
    ParseMedicationDispensePerformerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationDispensePerformerProperties(jsn : TJsonObject; value : TFhirMedicationDispensePerformer);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('function') then
        value.function_ := ParseCodeableConcept(jsn.vObj['function']);
    if jsn.has('actor') then
        value.actor := ParseReference(jsn.vObj['actor']);
end;

procedure TFHIRJsonComposer.ComposeMedicationDispensePerformer(json : TJSONWriter; name : string; value : TFhirMedicationDispensePerformer; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'function', value.function_);
  ComposeReference(json, 'actor', value.actor);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationDispenseSubstitution(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationDispenseSubstitution(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationDispenseSubstitution(jsn : TJsonObject) : TFhirMedicationDispenseSubstitution;
begin
  result := TFhirMedicationDispenseSubstitution.Create;
  try
    ParseMedicationDispenseSubstitutionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationDispenseSubstitutionProperties(jsn : TJsonObject; value : TFhirMedicationDispenseSubstitution);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('wasSubstituted') or jsn.has('_wasSubstituted') then
        value.wasSubstitutedElement := parseBoolean(jsn.node['wasSubstituted'], jsn.vObj['_wasSubstituted']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], value.reasonList, parseCodeableConcept);
    if jsn.has('responsibleParty') then
      iterateArray(jsn.vArr['responsibleParty'], value.responsiblePartyList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeMedicationDispenseSubstitution(json : TJSONWriter; name : string; value : TFhirMedicationDispenseSubstitution; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeBooleanValue(json, 'wasSubstituted', value.wasSubstitutedElement, false);
  ComposeBooleanProps(json, 'wasSubstituted', value.wasSubstitutedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.reasonList.Count > 0) then
  begin
    startArray(json, 'reason', value.reasonList, false);
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonList[i]);
    finishArray(json, value.reasonList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.responsiblePartyList.Count > 0) then
  begin
    startArray(json, 'responsibleParty', value.responsiblePartyList, false);
    for i := 0 to value.responsiblePartyList.Count - 1 do
      ComposeReference(json, '', value.responsiblePartyList[i]);
    finishArray(json, value.responsiblePartyList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationDispense(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationDispense(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationDispense(jsn : TJsonObject) : TFhirMedicationDispense;
begin
  result := TFhirMedicationDispense.Create;
  try
    ParseMedicationDispenseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationDispenseProperties(jsn : TJsonObject; value : TFhirMedicationDispense);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], value.partOfList, parseReference);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirMedicationDispenseStatusCodesEnum, SYSTEMS_TFhirMedicationDispenseStatusCodesEnum);
    if jsn.has('statusReasonCodeableConcept') {a4} then
      value.statusReason := ParseCodeableConcept(jsn.vObj['statusReasonCodeableConcept']);
    if jsn.has('statusReasonReference') {a3} then
      value.statusReason := ParseReference(jsn.vObj['statusReasonReference']);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('medicationCodeableConcept') {a4} then
      value.medication := ParseCodeableConcept(jsn.vObj['medicationCodeableConcept']);
    if jsn.has('medicationReference') {a3} then
      value.medication := ParseReference(jsn.vObj['medicationReference']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('context') then
        value.context := ParseReference(jsn.vObj['context']);
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], value.supportingInformationList, parseReference);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], value.performerList, parseMedicationDispensePerformer);
    if jsn.has('location') then
        value.location := ParseReference(jsn.vObj['location']);
    if jsn.has('authorizingPrescription') then
      iterateArray(jsn.vArr['authorizingPrescription'], value.authorizingPrescriptionList, parseReference);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('daysSupply') then
        value.daysSupply := ParseQuantity(jsn.vObj['daysSupply']);
    if jsn.has('whenPrepared') or jsn.has('_whenPrepared') then
        value.whenPreparedElement := parseDateTime(jsn.node['whenPrepared'], jsn.vObj['_whenPrepared']);
    if jsn.has('whenHandedOver') or jsn.has('_whenHandedOver') then
        value.whenHandedOverElement := parseDateTime(jsn.node['whenHandedOver'], jsn.vObj['_whenHandedOver']);
    if jsn.has('destination') then
        value.destination := ParseReference(jsn.vObj['destination']);
    if jsn.has('receiver') then
      iterateArray(jsn.vArr['receiver'], value.receiverList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('dosageInstruction') then
      iterateArray(jsn.vArr['dosageInstruction'], value.dosageInstructionList, parseDosage);
    if jsn.has('substitution') then
        value.substitution := ParseMedicationDispenseSubstitution(jsn.vObj['substitution']);
    if jsn.has('detectedIssue') then
      iterateArray(jsn.vArr['detectedIssue'], value.detectedIssueList, parseReference);
    if jsn.has('eventHistory') then
      iterateArray(jsn.vArr['eventHistory'], value.eventHistoryList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeMedicationDispense(json : TJSONWriter; name : string; value : TFhirMedicationDispense; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.partOfList.Count > 0) then
  begin
    startArray(json, 'partOf', value.partOfList, false);
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(json, '', value.partOfList[i]);
    finishArray(json, value.partOfList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirMedicationDispenseStatusCodesEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.statusReason is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'statusReasonCodeableConcept', TFhirCodeableConcept(value.statusReason)) 
  else if (SummaryOption in [soFull, soData]) and (value.statusReason is TFhirReference) then
    ComposeReference(json, 'statusReasonReference', TFhirReference(value.statusReason));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  if (value.medication is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'medicationCodeableConcept', TFhirCodeableConcept(value.medication)) 
  else if (value.medication is TFhirReference) then
    ComposeReference(json, 'medicationReference', TFhirReference(value.medication));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'context', value.context);
  if (SummaryOption in [soFull, soData]) and (value.supportingInformationList.Count > 0) then
  begin
    startArray(json, 'supportingInformation', value.supportingInformationList, false);
    for i := 0 to value.supportingInformationList.Count - 1 do
      ComposeReference(json, '', value.supportingInformationList[i]);
    finishArray(json, value.supportingInformationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.performerList.Count > 0) then
  begin
    startArray(json, 'performer', value.performerList, false);
    for i := 0 to value.performerList.Count - 1 do
      ComposeMedicationDispensePerformer(json, '', value.performerList[i]);
    finishArray(json, value.performerList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'location', value.location);
  if (SummaryOption in [soFull, soData]) and (value.authorizingPrescriptionList.Count > 0) then
  begin
    startArray(json, 'authorizingPrescription', value.authorizingPrescriptionList, false);
    for i := 0 to value.authorizingPrescriptionList.Count - 1 do
      ComposeReference(json, '', value.authorizingPrescriptionList[i]);
    finishArray(json, value.authorizingPrescriptionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'daysSupply', value.daysSupply);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'whenPrepared', value.whenPreparedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'whenPrepared', value.whenPreparedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'whenHandedOver', value.whenHandedOverElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'whenHandedOver', value.whenHandedOverElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'destination', value.destination);
  if (SummaryOption in [soFull, soData]) and (value.receiverList.Count > 0) then
  begin
    startArray(json, 'receiver', value.receiverList, false);
    for i := 0 to value.receiverList.Count - 1 do
      ComposeReference(json, '', value.receiverList[i]);
    finishArray(json, value.receiverList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.dosageInstructionList.Count > 0) then
  begin
    startArray(json, 'dosageInstruction', value.dosageInstructionList, false);
    for i := 0 to value.dosageInstructionList.Count - 1 do
      ComposeDosage(json, '', value.dosageInstructionList[i]);
    finishArray(json, value.dosageInstructionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationDispenseSubstitution(json, 'substitution', value.substitution);
  if (SummaryOption in [soFull, soData]) and (value.detectedIssueList.Count > 0) then
  begin
    startArray(json, 'detectedIssue', value.detectedIssueList, false);
    for i := 0 to value.detectedIssueList.Count - 1 do
      ComposeReference(json, '', value.detectedIssueList[i]);
    finishArray(json, value.detectedIssueList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.eventHistoryList.Count > 0) then
  begin
    startArray(json, 'eventHistory', value.eventHistoryList, false);
    for i := 0 to value.eventHistoryList.Count - 1 do
      ComposeReference(json, '', value.eventHistoryList[i]);
    finishArray(json, value.eventHistoryList);
  end;
end;

{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
procedure TFHIRJsonParser.ParseMedicationKnowledgeRelatedMedicationKnowledge(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeRelatedMedicationKnowledge(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeRelatedMedicationKnowledge(jsn : TJsonObject) : TFhirMedicationKnowledgeRelatedMedicationKnowledge;
begin
  result := TFhirMedicationKnowledgeRelatedMedicationKnowledge.Create;
  try
    ParseMedicationKnowledgeRelatedMedicationKnowledgeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeRelatedMedicationKnowledgeProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeRelatedMedicationKnowledge);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('reference') then
      iterateArray(jsn.vArr['reference'], value.referenceList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeRelatedMedicationKnowledge(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeRelatedMedicationKnowledge; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (value.referenceList.Count > 0) then
  begin
    startArray(json, 'reference', value.referenceList, false);
    for i := 0 to value.referenceList.Count - 1 do
      ComposeReference(json, '', value.referenceList[i]);
    finishArray(json, value.referenceList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeMonograph(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeMonograph(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeMonograph(jsn : TJsonObject) : TFhirMedicationKnowledgeMonograph;
begin
  result := TFhirMedicationKnowledgeMonograph.Create;
  try
    ParseMedicationKnowledgeMonographProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeMonographProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeMonograph);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('source') then
        value.source := ParseReference(jsn.vObj['source']);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeMonograph(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeMonograph; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'source', value.source);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeIngredient(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeIngredient(jsn : TJsonObject) : TFhirMedicationKnowledgeIngredient;
begin
  result := TFhirMedicationKnowledgeIngredient.Create;
  try
    ParseMedicationKnowledgeIngredientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeIngredientProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeIngredient);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('itemCodeableConcept') {a4} then
      value.item := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
    if jsn.has('itemReference') {a3} then
      value.item := ParseReference(jsn.vObj['itemReference']);
    if jsn.has('isActive') or jsn.has('_isActive') then
        value.isActiveElement := parseBoolean(jsn.node['isActive'], jsn.vObj['_isActive']);
    if jsn.has('strength') then
        value.strength := ParseRatio(jsn.vObj['strength']);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeIngredient(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeIngredient; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.item is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'itemCodeableConcept', TFhirCodeableConcept(value.item)) 
  else if (value.item is TFhirReference) then
    ComposeReference(json, 'itemReference', TFhirReference(value.item));
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'isActive', value.isActiveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'isActive', value.isActiveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeRatio(json, 'strength', value.strength);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeCost(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeCost(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeCost(jsn : TJsonObject) : TFhirMedicationKnowledgeCost;
begin
  result := TFhirMedicationKnowledgeCost.Create;
  try
    ParseMedicationKnowledgeCostProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeCostProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeCost);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('source') or jsn.has('_source') then
        value.sourceElement := parseString(jsn.node['source'], jsn.vObj['_source']);
    if jsn.has('cost') then
        value.cost := ParseMoney(jsn.vObj['cost']);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeCost(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeCost; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'source', value.sourceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'source', value.sourceElement, false);
  ComposeMoney(json, 'cost', value.cost);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeMonitoringProgram(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeMonitoringProgram(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeMonitoringProgram(jsn : TJsonObject) : TFhirMedicationKnowledgeMonitoringProgram;
begin
  result := TFhirMedicationKnowledgeMonitoringProgram.Create;
  try
    ParseMedicationKnowledgeMonitoringProgramProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeMonitoringProgramProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeMonitoringProgram);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeMonitoringProgram(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeMonitoringProgram; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeAdministrationGuidelines(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeAdministrationGuidelines(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeAdministrationGuidelines(jsn : TJsonObject) : TFhirMedicationKnowledgeAdministrationGuidelines;
begin
  result := TFhirMedicationKnowledgeAdministrationGuidelines.Create;
  try
    ParseMedicationKnowledgeAdministrationGuidelinesProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeAdministrationGuidelinesProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeAdministrationGuidelines);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('dosage') then
      iterateArray(jsn.vArr['dosage'], value.dosageList, parseMedicationKnowledgeAdministrationGuidelinesDosage);
    if jsn.has('indicationCodeableConcept') {a4} then
      value.indication := ParseCodeableConcept(jsn.vObj['indicationCodeableConcept']);
    if jsn.has('indicationReference') {a3} then
      value.indication := ParseReference(jsn.vObj['indicationReference']);
    if jsn.has('patientCharacteristics') then
      iterateArray(jsn.vArr['patientCharacteristics'], value.patientCharacteristicsList, parseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeAdministrationGuidelines(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeAdministrationGuidelines; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.dosageList.Count > 0) then
  begin
    startArray(json, 'dosage', value.dosageList, false);
    for i := 0 to value.dosageList.Count - 1 do
      ComposeMedicationKnowledgeAdministrationGuidelinesDosage(json, '', value.dosageList[i]);
    finishArray(json, value.dosageList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.indication is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'indicationCodeableConcept', TFhirCodeableConcept(value.indication)) 
  else if (SummaryOption in [soFull, soData]) and (value.indication is TFhirReference) then
    ComposeReference(json, 'indicationReference', TFhirReference(value.indication));
  if (SummaryOption in [soFull, soData]) and (value.patientCharacteristicsList.Count > 0) then
  begin
    startArray(json, 'patientCharacteristics', value.patientCharacteristicsList, false);
    for i := 0 to value.patientCharacteristicsList.Count - 1 do
      ComposeMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(json, '', value.patientCharacteristicsList[i]);
    finishArray(json, value.patientCharacteristicsList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeAdministrationGuidelinesDosage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeAdministrationGuidelinesDosage(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeAdministrationGuidelinesDosage(jsn : TJsonObject) : TFhirMedicationKnowledgeAdministrationGuidelinesDosage;
begin
  result := TFhirMedicationKnowledgeAdministrationGuidelinesDosage.Create;
  try
    ParseMedicationKnowledgeAdministrationGuidelinesDosageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeAdministrationGuidelinesDosageProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeAdministrationGuidelinesDosage);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('dosage') then
      iterateArray(jsn.vArr['dosage'], value.dosageList, parseDosage);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeAdministrationGuidelinesDosage(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeAdministrationGuidelinesDosage; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (value.dosageList.Count > 0) then
  begin
    startArray(json, 'dosage', value.dosageList, false);
    for i := 0 to value.dosageList.Count - 1 do
      ComposeDosage(json, '', value.dosageList[i]);
    finishArray(json, value.dosageList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(jsn : TJsonObject) : TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics;
begin
  result := TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics.Create;
  try
    ParseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristicsProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristicsProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('characteristicCodeableConcept') {a4} then
      value.characteristic := ParseCodeableConcept(jsn.vObj['characteristicCodeableConcept']);
    if jsn.has('characteristicQuantity') {a4} then
      value.characteristic := ParseQuantity(jsn.vObj['characteristicQuantity']);
      if jsn.has('value') or jsn.has('_value') then
      iteratePrimitiveArray(jsn.vArr['value'], jsn.vArr['_value'], value.valueList, parseString);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.characteristic is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'characteristicCodeableConcept', TFhirCodeableConcept(value.characteristic)) 
  else if (value.characteristic is TFhirQuantity) then 
    ComposeQuantity(json, 'characteristicQuantity', TFhirQuantity(value.characteristic)) ;
  if (SummaryOption in [soFull, soData]) and (value.valueList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.valueList.Count - 1 do
    begin
      ext := ext or ((value.valueList[i].id <> '') or (value.valueList[i].hasExtensionList) {no-comments or (value.valueList[i].hasComments)});
      val := val or (value.valueList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'value', value.valueList, true);
      for i := 0 to value.valueList.Count - 1 do
        ComposeStringValue(json, '', value.valueList[i], true);
      finishArray(json, value.valueList);
    end;
    if ext then
    begin
      startArray(json, '_value', value.valueList, false);
      for i := 0 to value.valueList.Count - 1 do
        ComposeStringProps(json, '', value.valueList[i], true);
      finishArray(json, value.valueList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeMedicineClassification(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeMedicineClassification(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeMedicineClassification(jsn : TJsonObject) : TFhirMedicationKnowledgeMedicineClassification;
begin
  result := TFhirMedicationKnowledgeMedicineClassification.Create;
  try
    ParseMedicationKnowledgeMedicineClassificationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeMedicineClassificationProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeMedicineClassification);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('classification') then
      iterateArray(jsn.vArr['classification'], value.classificationList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeMedicineClassification(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeMedicineClassification; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.classificationList.Count > 0) then
  begin
    startArray(json, 'classification', value.classificationList, false);
    for i := 0 to value.classificationList.Count - 1 do
      ComposeCodeableConcept(json, '', value.classificationList[i]);
    finishArray(json, value.classificationList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgePackaging(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgePackaging(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgePackaging(jsn : TJsonObject) : TFhirMedicationKnowledgePackaging;
begin
  result := TFhirMedicationKnowledgePackaging.Create;
  try
    ParseMedicationKnowledgePackagingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgePackagingProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgePackaging);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgePackaging(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgePackaging; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeDrugCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeDrugCharacteristic(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeDrugCharacteristic(jsn : TJsonObject) : TFhirMedicationKnowledgeDrugCharacteristic;
begin
  result := TFhirMedicationKnowledgeDrugCharacteristic.Create;
  try
    ParseMedicationKnowledgeDrugCharacteristicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeDrugCharacteristicProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeDrugCharacteristic);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      value.value := parseBase64Binary(jsn.node['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeDrugCharacteristic(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeDrugCharacteristic; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeRegulatory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeRegulatory(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeRegulatory(jsn : TJsonObject) : TFhirMedicationKnowledgeRegulatory;
begin
  result := TFhirMedicationKnowledgeRegulatory.Create;
  try
    ParseMedicationKnowledgeRegulatoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeRegulatoryProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeRegulatory);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('regulatoryAuthority') then
        value.regulatoryAuthority := ParseReference(jsn.vObj['regulatoryAuthority']);
    if jsn.has('substitution') then
      iterateArray(jsn.vArr['substitution'], value.substitutionList, parseMedicationKnowledgeRegulatorySubstitution);
    if jsn.has('schedule') then
      iterateArray(jsn.vArr['schedule'], value.scheduleList, parseMedicationKnowledgeRegulatorySchedule);
    if jsn.has('maxDispense') then
        value.maxDispense := ParseMedicationKnowledgeRegulatoryMaxDispense(jsn.vObj['maxDispense']);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeRegulatory(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeRegulatory; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'regulatoryAuthority', value.regulatoryAuthority);
  if (SummaryOption in [soFull, soData]) and (value.substitutionList.Count > 0) then
  begin
    startArray(json, 'substitution', value.substitutionList, false);
    for i := 0 to value.substitutionList.Count - 1 do
      ComposeMedicationKnowledgeRegulatorySubstitution(json, '', value.substitutionList[i]);
    finishArray(json, value.substitutionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.scheduleList.Count > 0) then
  begin
    startArray(json, 'schedule', value.scheduleList, false);
    for i := 0 to value.scheduleList.Count - 1 do
      ComposeMedicationKnowledgeRegulatorySchedule(json, '', value.scheduleList[i]);
    finishArray(json, value.scheduleList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationKnowledgeRegulatoryMaxDispense(json, 'maxDispense', value.maxDispense);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeRegulatorySubstitution(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeRegulatorySubstitution(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeRegulatorySubstitution(jsn : TJsonObject) : TFhirMedicationKnowledgeRegulatorySubstitution;
begin
  result := TFhirMedicationKnowledgeRegulatorySubstitution.Create;
  try
    ParseMedicationKnowledgeRegulatorySubstitutionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeRegulatorySubstitutionProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeRegulatorySubstitution);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('allowed') or jsn.has('_allowed') then
        value.allowedElement := parseBoolean(jsn.node['allowed'], jsn.vObj['_allowed']);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeRegulatorySubstitution(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeRegulatorySubstitution; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  ComposeBooleanValue(json, 'allowed', value.allowedElement, false);
  ComposeBooleanProps(json, 'allowed', value.allowedElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeRegulatorySchedule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeRegulatorySchedule(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeRegulatorySchedule(jsn : TJsonObject) : TFhirMedicationKnowledgeRegulatorySchedule;
begin
  result := TFhirMedicationKnowledgeRegulatorySchedule.Create;
  try
    ParseMedicationKnowledgeRegulatoryScheduleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeRegulatoryScheduleProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeRegulatorySchedule);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('schedule') then
        value.schedule := ParseCodeableConcept(jsn.vObj['schedule']);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeRegulatorySchedule(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeRegulatorySchedule; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'schedule', value.schedule);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeRegulatoryMaxDispense(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeRegulatoryMaxDispense(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeRegulatoryMaxDispense(jsn : TJsonObject) : TFhirMedicationKnowledgeRegulatoryMaxDispense;
begin
  result := TFhirMedicationKnowledgeRegulatoryMaxDispense.Create;
  try
    ParseMedicationKnowledgeRegulatoryMaxDispenseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeRegulatoryMaxDispenseProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeRegulatoryMaxDispense);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('period') then
        value.period := ParseDuration(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeRegulatoryMaxDispense(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeRegulatoryMaxDispense; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeKinetics(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledgeKinetics(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledgeKinetics(jsn : TJsonObject) : TFhirMedicationKnowledgeKinetics;
begin
  result := TFhirMedicationKnowledgeKinetics.Create;
  try
    ParseMedicationKnowledgeKineticsProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeKineticsProperties(jsn : TJsonObject; value : TFhirMedicationKnowledgeKinetics);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('areaUnderCurve') then
      iterateArray(jsn.vArr['areaUnderCurve'], value.areaUnderCurveList, parseQuantity);
    if jsn.has('lethalDose50') then
      iterateArray(jsn.vArr['lethalDose50'], value.lethalDose50List, parseQuantity);
    if jsn.has('halfLifePeriod') then
        value.halfLifePeriod := ParseDuration(jsn.vObj['halfLifePeriod']);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledgeKinetics(json : TJSONWriter; name : string; value : TFhirMedicationKnowledgeKinetics; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.areaUnderCurveList.Count > 0) then
  begin
    startArray(json, 'areaUnderCurve', value.areaUnderCurveList, false);
    for i := 0 to value.areaUnderCurveList.Count - 1 do
      ComposeQuantity(json, '', value.areaUnderCurveList[i]);
    finishArray(json, value.areaUnderCurveList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.lethalDose50List.Count > 0) then
  begin
    startArray(json, 'lethalDose50', value.lethalDose50List, false);
    for i := 0 to value.lethalDose50List.Count - 1 do
      ComposeQuantity(json, '', value.lethalDose50List[i]);
    finishArray(json, value.lethalDose50List);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'halfLifePeriod', value.halfLifePeriod);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationKnowledge(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationKnowledge(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationKnowledge(jsn : TJsonObject) : TFhirMedicationKnowledge;
begin
  result := TFhirMedicationKnowledge.Create;
  try
    ParseMedicationKnowledgeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationKnowledgeProperties(jsn : TJsonObject; value : TFhirMedicationKnowledge);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirMedicationKnowledgeStatusCodesEnum, SYSTEMS_TFhirMedicationKnowledgeStatusCodesEnum);
    if jsn.has('manufacturer') then
        value.manufacturer := ParseReference(jsn.vObj['manufacturer']);
    if jsn.has('doseForm') then
        value.doseForm := ParseCodeableConcept(jsn.vObj['doseForm']);
    if jsn.has('amount') then
        value.amount := ParseQuantity(jsn.vObj['amount']);
      if jsn.has('synonym') or jsn.has('_synonym') then
      iteratePrimitiveArray(jsn.vArr['synonym'], jsn.vArr['_synonym'], value.synonymList, parseString);
    if jsn.has('relatedMedicationKnowledge') then
      iterateArray(jsn.vArr['relatedMedicationKnowledge'], value.relatedMedicationKnowledgeList, parseMedicationKnowledgeRelatedMedicationKnowledge);
    if jsn.has('associatedMedication') then
      iterateArray(jsn.vArr['associatedMedication'], value.associatedMedicationList, parseReference);
    if jsn.has('productType') then
      iterateArray(jsn.vArr['productType'], value.productTypeList, parseCodeableConcept);
    if jsn.has('monograph') then
      iterateArray(jsn.vArr['monograph'], value.monographList, parseMedicationKnowledgeMonograph);
    if jsn.has('ingredient') then
      iterateArray(jsn.vArr['ingredient'], value.ingredientList, parseMedicationKnowledgeIngredient);
    if jsn.has('preparationInstruction') or jsn.has('_preparationInstruction') then
        value.preparationInstructionElement := parseMarkdown(jsn.node['preparationInstruction'], jsn.vObj['_preparationInstruction']);
    if jsn.has('intendedRoute') then
      iterateArray(jsn.vArr['intendedRoute'], value.intendedRouteList, parseCodeableConcept);
    if jsn.has('cost') then
      iterateArray(jsn.vArr['cost'], value.costList, parseMedicationKnowledgeCost);
    if jsn.has('monitoringProgram') then
      iterateArray(jsn.vArr['monitoringProgram'], value.monitoringProgramList, parseMedicationKnowledgeMonitoringProgram);
    if jsn.has('administrationGuidelines') then
      iterateArray(jsn.vArr['administrationGuidelines'], value.administrationGuidelinesList, parseMedicationKnowledgeAdministrationGuidelines);
    if jsn.has('medicineClassification') then
      iterateArray(jsn.vArr['medicineClassification'], value.medicineClassificationList, parseMedicationKnowledgeMedicineClassification);
    if jsn.has('packaging') then
        value.packaging := ParseMedicationKnowledgePackaging(jsn.vObj['packaging']);
    if jsn.has('drugCharacteristic') then
      iterateArray(jsn.vArr['drugCharacteristic'], value.drugCharacteristicList, parseMedicationKnowledgeDrugCharacteristic);
    if jsn.has('contraindication') then
      iterateArray(jsn.vArr['contraindication'], value.contraindicationList, parseReference);
    if jsn.has('regulatory') then
      iterateArray(jsn.vArr['regulatory'], value.regulatoryList, parseMedicationKnowledgeRegulatory);
    if jsn.has('kinetics') then
      iterateArray(jsn.vArr['kinetics'], value.kineticsList, parseMedicationKnowledgeKinetics);
end;

procedure TFHIRJsonComposer.ComposeMedicationKnowledge(json : TJSONWriter; name : string; value : TFhirMedicationKnowledge; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirMedicationKnowledgeStatusCodesEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'manufacturer', value.manufacturer);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'doseForm', value.doseForm);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'amount', value.amount);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.synonymList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.synonymList.Count - 1 do
    begin
      ext := ext or ((value.synonymList[i].id <> '') or (value.synonymList[i].hasExtensionList) {no-comments or (value.synonymList[i].hasComments)});
      val := val or (value.synonymList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'synonym', value.synonymList, true);
      for i := 0 to value.synonymList.Count - 1 do
        ComposeStringValue(json, '', value.synonymList[i], true);
      finishArray(json, value.synonymList);
    end;
    if ext then
    begin
      startArray(json, '_synonym', value.synonymList, false);
      for i := 0 to value.synonymList.Count - 1 do
        ComposeStringProps(json, '', value.synonymList[i], true);
      finishArray(json, value.synonymList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedMedicationKnowledgeList.Count > 0) then
  begin
    startArray(json, 'relatedMedicationKnowledge', value.relatedMedicationKnowledgeList, false);
    for i := 0 to value.relatedMedicationKnowledgeList.Count - 1 do
      ComposeMedicationKnowledgeRelatedMedicationKnowledge(json, '', value.relatedMedicationKnowledgeList[i]);
    finishArray(json, value.relatedMedicationKnowledgeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.associatedMedicationList.Count > 0) then
  begin
    startArray(json, 'associatedMedication', value.associatedMedicationList, false);
    for i := 0 to value.associatedMedicationList.Count - 1 do
      ComposeReference(json, '', value.associatedMedicationList[i]);
    finishArray(json, value.associatedMedicationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.productTypeList.Count > 0) then
  begin
    startArray(json, 'productType', value.productTypeList, false);
    for i := 0 to value.productTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.productTypeList[i]);
    finishArray(json, value.productTypeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.monographList.Count > 0) then
  begin
    startArray(json, 'monograph', value.monographList, false);
    for i := 0 to value.monographList.Count - 1 do
      ComposeMedicationKnowledgeMonograph(json, '', value.monographList[i]);
    finishArray(json, value.monographList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.ingredientList.Count > 0) then
  begin
    startArray(json, 'ingredient', value.ingredientList, false);
    for i := 0 to value.ingredientList.Count - 1 do
      ComposeMedicationKnowledgeIngredient(json, '', value.ingredientList[i]);
    finishArray(json, value.ingredientList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'preparationInstruction', value.preparationInstructionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'preparationInstruction', value.preparationInstructionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.intendedRouteList.Count > 0) then
  begin
    startArray(json, 'intendedRoute', value.intendedRouteList, false);
    for i := 0 to value.intendedRouteList.Count - 1 do
      ComposeCodeableConcept(json, '', value.intendedRouteList[i]);
    finishArray(json, value.intendedRouteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.costList.Count > 0) then
  begin
    startArray(json, 'cost', value.costList, false);
    for i := 0 to value.costList.Count - 1 do
      ComposeMedicationKnowledgeCost(json, '', value.costList[i]);
    finishArray(json, value.costList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.monitoringProgramList.Count > 0) then
  begin
    startArray(json, 'monitoringProgram', value.monitoringProgramList, false);
    for i := 0 to value.monitoringProgramList.Count - 1 do
      ComposeMedicationKnowledgeMonitoringProgram(json, '', value.monitoringProgramList[i]);
    finishArray(json, value.monitoringProgramList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.administrationGuidelinesList.Count > 0) then
  begin
    startArray(json, 'administrationGuidelines', value.administrationGuidelinesList, false);
    for i := 0 to value.administrationGuidelinesList.Count - 1 do
      ComposeMedicationKnowledgeAdministrationGuidelines(json, '', value.administrationGuidelinesList[i]);
    finishArray(json, value.administrationGuidelinesList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.medicineClassificationList.Count > 0) then
  begin
    startArray(json, 'medicineClassification', value.medicineClassificationList, false);
    for i := 0 to value.medicineClassificationList.Count - 1 do
      ComposeMedicationKnowledgeMedicineClassification(json, '', value.medicineClassificationList[i]);
    finishArray(json, value.medicineClassificationList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationKnowledgePackaging(json, 'packaging', value.packaging);
  if (SummaryOption in [soFull, soData]) and (value.drugCharacteristicList.Count > 0) then
  begin
    startArray(json, 'drugCharacteristic', value.drugCharacteristicList, false);
    for i := 0 to value.drugCharacteristicList.Count - 1 do
      ComposeMedicationKnowledgeDrugCharacteristic(json, '', value.drugCharacteristicList[i]);
    finishArray(json, value.drugCharacteristicList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.contraindicationList.Count > 0) then
  begin
    startArray(json, 'contraindication', value.contraindicationList, false);
    for i := 0 to value.contraindicationList.Count - 1 do
      ComposeReference(json, '', value.contraindicationList[i]);
    finishArray(json, value.contraindicationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.regulatoryList.Count > 0) then
  begin
    startArray(json, 'regulatory', value.regulatoryList, false);
    for i := 0 to value.regulatoryList.Count - 1 do
      ComposeMedicationKnowledgeRegulatory(json, '', value.regulatoryList[i]);
    finishArray(json, value.regulatoryList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.kineticsList.Count > 0) then
  begin
    startArray(json, 'kinetics', value.kineticsList, false);
    for i := 0 to value.kineticsList.Count - 1 do
      ComposeMedicationKnowledgeKinetics(json, '', value.kineticsList[i]);
    finishArray(json, value.kineticsList);
  end;
end;

{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
procedure TFHIRJsonParser.ParseMedicationRequestDispenseRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationRequestDispenseRequest(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationRequestDispenseRequest(jsn : TJsonObject) : TFhirMedicationRequestDispenseRequest;
begin
  result := TFhirMedicationRequestDispenseRequest.Create;
  try
    ParseMedicationRequestDispenseRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationRequestDispenseRequestProperties(jsn : TJsonObject; value : TFhirMedicationRequestDispenseRequest);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('initialFill') then
        value.initialFill := ParseMedicationRequestDispenseRequestInitialFill(jsn.vObj['initialFill']);
    if jsn.has('dispenseInterval') then
        value.dispenseInterval := ParseDuration(jsn.vObj['dispenseInterval']);
    if jsn.has('validityPeriod') then
        value.validityPeriod := ParsePeriod(jsn.vObj['validityPeriod']);
    if jsn.has('numberOfRepeatsAllowed') or jsn.has('_numberOfRepeatsAllowed') then
        value.numberOfRepeatsAllowedElement := parseUnsignedInt(jsn.node['numberOfRepeatsAllowed'], jsn.vObj['_numberOfRepeatsAllowed']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('expectedSupplyDuration') then
        value.expectedSupplyDuration := ParseDuration(jsn.vObj['expectedSupplyDuration']);
    if jsn.has('performer') then
        value.performer := ParseReference(jsn.vObj['performer']);
end;

procedure TFHIRJsonComposer.ComposeMedicationRequestDispenseRequest(json : TJSONWriter; name : string; value : TFhirMedicationRequestDispenseRequest; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationRequestDispenseRequestInitialFill(json, 'initialFill', value.initialFill);
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'dispenseInterval', value.dispenseInterval);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'validityPeriod', value.validityPeriod);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'numberOfRepeatsAllowed', value.numberOfRepeatsAllowedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'numberOfRepeatsAllowed', value.numberOfRepeatsAllowedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'expectedSupplyDuration', value.expectedSupplyDuration);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'performer', value.performer);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationRequestDispenseRequestInitialFill(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationRequestDispenseRequestInitialFill(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationRequestDispenseRequestInitialFill(jsn : TJsonObject) : TFhirMedicationRequestDispenseRequestInitialFill;
begin
  result := TFhirMedicationRequestDispenseRequestInitialFill.Create;
  try
    ParseMedicationRequestDispenseRequestInitialFillProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationRequestDispenseRequestInitialFillProperties(jsn : TJsonObject; value : TFhirMedicationRequestDispenseRequestInitialFill);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('duration') then
        value.duration := ParseDuration(jsn.vObj['duration']);
end;

procedure TFHIRJsonComposer.ComposeMedicationRequestDispenseRequestInitialFill(json : TJSONWriter; name : string; value : TFhirMedicationRequestDispenseRequestInitialFill; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'duration', value.duration);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationRequestSubstitution(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationRequestSubstitution(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationRequestSubstitution(jsn : TJsonObject) : TFhirMedicationRequestSubstitution;
begin
  result := TFhirMedicationRequestSubstitution.Create;
  try
    ParseMedicationRequestSubstitutionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationRequestSubstitutionProperties(jsn : TJsonObject; value : TFhirMedicationRequestSubstitution);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('allowedCodeableConcept') {a4} then
      value.allowed := ParseCodeableConcept(jsn.vObj['allowedCodeableConcept']);
    if jsn.has('allowedBoolean') or jsn.has('_allowedBoolean') then
      value.allowed := parseBoolean(jsn.node['allowedBoolean'], jsn.vObj['_allowedBoolean']);
    if jsn.has('reason') then
        value.reason := ParseCodeableConcept(jsn.vObj['reason']);
end;

procedure TFHIRJsonComposer.ComposeMedicationRequestSubstitution(json : TJSONWriter; name : string; value : TFhirMedicationRequestSubstitution; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.allowed is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'allowedCodeableConcept', TFhirCodeableConcept(value.allowed)) 
  else if (value.allowed is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'allowedBoolean', TFhirBoolean(value.allowed), false);
    ComposeBooleanProps(json, 'allowedBoolean', TFhirBoolean(value.allowed), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reason', value.reason);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicationRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationRequest(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationRequest(jsn : TJsonObject) : TFhirMedicationRequest;
begin
  result := TFhirMedicationRequest.Create;
  try
    ParseMedicationRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationRequestProperties(jsn : TJsonObject; value : TFhirMedicationRequest);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirMedicationrequestStatusEnum, SYSTEMS_TFhirMedicationrequestStatusEnum);
    if jsn.has('statusReason') then
        value.statusReason := ParseCodeableConcept(jsn.vObj['statusReason']);
    if jsn.has('intent') or jsn.has('_intent') then
        value.intentElement := parseEnum(jsn.path+'/intent', jsn.node['intent'], jsn.vObj['_intent'], CODES_TFhirMedicationRequestIntentEnum, SYSTEMS_TFhirMedicationRequestIntentEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('priority') or jsn.has('_priority') then
        value.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('doNotPerform') or jsn.has('_doNotPerform') then
        value.doNotPerformElement := parseBoolean(jsn.node['doNotPerform'], jsn.vObj['_doNotPerform']);
    if jsn.has('reportedReference') {a3} then
      value.reported := ParseReference(jsn.vObj['reportedReference']);
    if jsn.has('reportedBoolean') or jsn.has('_reportedBoolean') then
      value.reported := parseBoolean(jsn.node['reportedBoolean'], jsn.vObj['_reportedBoolean']);
    if jsn.has('medicationCodeableConcept') {a4} then
      value.medication := ParseCodeableConcept(jsn.vObj['medicationCodeableConcept']);
    if jsn.has('medicationReference') {a3} then
      value.medication := ParseReference(jsn.vObj['medicationReference']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], value.supportingInformationList, parseReference);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        value.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);
    if jsn.has('requester') then
        value.requester := ParseReference(jsn.vObj['requester']);
    if jsn.has('performer') then
        value.performer := ParseReference(jsn.vObj['performer']);
    if jsn.has('performerType') then
        value.performerType := ParseCodeableConcept(jsn.vObj['performerType']);
    if jsn.has('recorder') then
        value.recorder := ParseReference(jsn.vObj['recorder']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
      if jsn.has('instantiatesCanonical') or jsn.has('_instantiatesCanonical') then
      iteratePrimitiveArray(jsn.vArr['instantiatesCanonical'], jsn.vArr['_instantiatesCanonical'], value.instantiatesCanonicalList, parseCanonical);
      if jsn.has('instantiatesUri') or jsn.has('_instantiatesUri') then
      iteratePrimitiveArray(jsn.vArr['instantiatesUri'], jsn.vArr['_instantiatesUri'], value.instantiatesUriList, parseUri);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('groupIdentifier') then
        value.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);
    if jsn.has('courseOfTherapyType') then
        value.courseOfTherapyType := ParseCodeableConcept(jsn.vObj['courseOfTherapyType']);
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], value.insuranceList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('dosageInstruction') then
      iterateArray(jsn.vArr['dosageInstruction'], value.dosageInstructionList, parseDosage);
    if jsn.has('dispenseRequest') then
        value.dispenseRequest := ParseMedicationRequestDispenseRequest(jsn.vObj['dispenseRequest']);
    if jsn.has('substitution') then
        value.substitution := ParseMedicationRequestSubstitution(jsn.vObj['substitution']);
    if jsn.has('priorPrescription') then
        value.priorPrescription := ParseReference(jsn.vObj['priorPrescription']);
    if jsn.has('detectedIssue') then
      iterateArray(jsn.vArr['detectedIssue'], value.detectedIssueList, parseReference);
    if jsn.has('eventHistory') then
      iterateArray(jsn.vArr['eventHistory'], value.eventHistoryList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeMedicationRequest(json : TJSONWriter; name : string; value : TFhirMedicationRequest; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirMedicationrequestStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'statusReason', value.statusReason);
  ComposeEnumValue(json, 'intent', value.intentElement, CODES_TFhirMedicationRequestIntentEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'doNotPerform', value.doNotPerformElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'doNotPerform', value.doNotPerformElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reported is TFhirReference) then
    ComposeReference(json, 'reportedReference', TFhirReference(value.reported))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.reported is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'reportedBoolean', TFhirBoolean(value.reported), false);
    ComposeBooleanProps(json, 'reportedBoolean', TFhirBoolean(value.reported), false);
  end;
  if (value.medication is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'medicationCodeableConcept', TFhirCodeableConcept(value.medication)) 
  else if (value.medication is TFhirReference) then
    ComposeReference(json, 'medicationReference', TFhirReference(value.medication));
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soData]) and (value.supportingInformationList.Count > 0) then
  begin
    startArray(json, 'supportingInformation', value.supportingInformationList, false);
    for i := 0 to value.supportingInformationList.Count - 1 do
      ComposeReference(json, '', value.supportingInformationList[i]);
    finishArray(json, value.supportingInformationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'authoredOn', value.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'authoredOn', value.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'requester', value.requester);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'performer', value.performer);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'performerType', value.performerType);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'recorder', value.recorder);
  if (SummaryOption in [soFull, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesCanonicalList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesCanonicalList[i].id <> '') or (value.instantiatesCanonicalList[i].hasExtensionList) {no-comments or (value.instantiatesCanonicalList[i].hasComments)});
      val := val or (value.instantiatesCanonicalList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesCanonical', value.instantiatesCanonicalList, true);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalValue(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesCanonical', value.instantiatesCanonicalList, false);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalProps(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesUriList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesUriList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesUriList[i].id <> '') or (value.instantiatesUriList[i].hasExtensionList) {no-comments or (value.instantiatesUriList[i].hasComments)});
      val := val or (value.instantiatesUriList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesUri', value.instantiatesUriList, true);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriValue(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesUri', value.instantiatesUriList, false);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriProps(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'groupIdentifier', value.groupIdentifier);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'courseOfTherapyType', value.courseOfTherapyType);
  if (SummaryOption in [soFull, soData]) and (value.insuranceList.Count > 0) then
  begin
    startArray(json, 'insurance', value.insuranceList, false);
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeReference(json, '', value.insuranceList[i]);
    finishArray(json, value.insuranceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.dosageInstructionList.Count > 0) then
  begin
    startArray(json, 'dosageInstruction', value.dosageInstructionList, false);
    for i := 0 to value.dosageInstructionList.Count - 1 do
      ComposeDosage(json, '', value.dosageInstructionList[i]);
    finishArray(json, value.dosageInstructionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationRequestDispenseRequest(json, 'dispenseRequest', value.dispenseRequest);
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationRequestSubstitution(json, 'substitution', value.substitution);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'priorPrescription', value.priorPrescription);
  if (SummaryOption in [soFull, soData]) and (value.detectedIssueList.Count > 0) then
  begin
    startArray(json, 'detectedIssue', value.detectedIssueList, false);
    for i := 0 to value.detectedIssueList.Count - 1 do
      ComposeReference(json, '', value.detectedIssueList[i]);
    finishArray(json, value.detectedIssueList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.eventHistoryList.Count > 0) then
  begin
    startArray(json, 'eventHistory', value.eventHistoryList, false);
    for i := 0 to value.eventHistoryList.Count - 1 do
      ComposeReference(json, '', value.eventHistoryList[i]);
    finishArray(json, value.eventHistoryList);
  end;
end;

{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
procedure TFHIRJsonParser.ParseMedicationStatement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationStatement(jsn)); 
end;

function TFHIRJsonParser.ParseMedicationStatement(jsn : TJsonObject) : TFhirMedicationStatement;
begin
  result := TFhirMedicationStatement.Create;
  try
    ParseMedicationStatementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationStatementProperties(jsn : TJsonObject; value : TFhirMedicationStatement);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], value.partOfList, parseReference);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirMedicationStatusCodesEnum, SYSTEMS_TFhirMedicationStatusCodesEnum);
    if jsn.has('statusReason') then
      iterateArray(jsn.vArr['statusReason'], value.statusReasonList, parseCodeableConcept);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('medicationCodeableConcept') {a4} then
      value.medication := ParseCodeableConcept(jsn.vObj['medicationCodeableConcept']);
    if jsn.has('medicationReference') {a3} then
      value.medication := ParseReference(jsn.vObj['medicationReference']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('context') then
        value.context := ParseReference(jsn.vObj['context']);
    if jsn.has('effectivePeriod') {a4} then
      value.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      value.effective := parseDateTime(jsn.node['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('dateAsserted') or jsn.has('_dateAsserted') then
        value.dateAssertedElement := parseDateTime(jsn.node['dateAsserted'], jsn.vObj['_dateAsserted']);
    if jsn.has('informationSource') then
        value.informationSource := ParseReference(jsn.vObj['informationSource']);
    if jsn.has('derivedFrom') then
      iterateArray(jsn.vArr['derivedFrom'], value.derivedFromList, parseReference);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('dosage') then
      iterateArray(jsn.vArr['dosage'], value.dosageList, parseDosage);
end;

procedure TFHIRJsonComposer.ComposeMedicationStatement(json : TJSONWriter; name : string; value : TFhirMedicationStatement; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.partOfList.Count > 0) then
  begin
    startArray(json, 'partOf', value.partOfList, false);
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(json, '', value.partOfList[i]);
    finishArray(json, value.partOfList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirMedicationStatusCodesEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.statusReasonList.Count > 0) then
  begin
    startArray(json, 'statusReason', value.statusReasonList, false);
    for i := 0 to value.statusReasonList.Count - 1 do
      ComposeCodeableConcept(json, '', value.statusReasonList[i]);
    finishArray(json, value.statusReasonList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  if (value.medication is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'medicationCodeableConcept', TFhirCodeableConcept(value.medication)) 
  else if (value.medication is TFhirReference) then
    ComposeReference(json, 'medicationReference', TFhirReference(value.medication));
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'context', value.context);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(value.effective)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(value.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(value.effective), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'dateAsserted', value.dateAssertedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'dateAsserted', value.dateAssertedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'informationSource', value.informationSource);
  if (SummaryOption in [soFull, soData]) and (value.derivedFromList.Count > 0) then
  begin
    startArray(json, 'derivedFrom', value.derivedFromList, false);
    for i := 0 to value.derivedFromList.Count - 1 do
      ComposeReference(json, '', value.derivedFromList[i]);
    finishArray(json, value.derivedFromList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.dosageList.Count > 0) then
  begin
    startArray(json, 'dosage', value.dosageList, false);
    for i := 0 to value.dosageList.Count - 1 do
      ComposeDosage(json, '', value.dosageList[i]);
    finishArray(json, value.dosageList);
  end;
end;

{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCTDEFINITION}
procedure TFHIRJsonParser.ParseMedicinalProductDefinitionContact(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductDefinitionContact(jsn)); 
end;

function TFHIRJsonParser.ParseMedicinalProductDefinitionContact(jsn : TJsonObject) : TFhirMedicinalProductDefinitionContact;
begin
  result := TFhirMedicinalProductDefinitionContact.Create;
  try
    ParseMedicinalProductDefinitionContactProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinitionContactProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinitionContact);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('contact') then
        value.contact := ParseReference(jsn.vObj['contact']);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductDefinitionContact(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinitionContact; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  ComposeReference(json, 'contact', value.contact);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinitionName(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductDefinitionName(jsn)); 
end;

function TFHIRJsonParser.ParseMedicinalProductDefinitionName(jsn : TJsonObject) : TFhirMedicinalProductDefinitionName;
begin
  result := TFhirMedicinalProductDefinitionName.Create;
  try
    ParseMedicinalProductDefinitionNameProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinitionNameProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinitionName);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('productName') or jsn.has('_productName') then
        value.productNameElement := parseString(jsn.node['productName'], jsn.vObj['_productName']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('namePart') then
      iterateArray(jsn.vArr['namePart'], value.namePartList, parseMedicinalProductDefinitionNameNamePart);
    if jsn.has('countryLanguage') then
      iterateArray(jsn.vArr['countryLanguage'], value.countryLanguageList, parseMedicinalProductDefinitionNameCountryLanguage);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductDefinitionName(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinitionName; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'productName', value.productNameElement, false);
  ComposeStringProps(json, 'productName', value.productNameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.namePartList.Count > 0) then
  begin
    startArray(json, 'namePart', value.namePartList, false);
    for i := 0 to value.namePartList.Count - 1 do
      ComposeMedicinalProductDefinitionNameNamePart(json, '', value.namePartList[i]);
    finishArray(json, value.namePartList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.countryLanguageList.Count > 0) then
  begin
    startArray(json, 'countryLanguage', value.countryLanguageList, false);
    for i := 0 to value.countryLanguageList.Count - 1 do
      ComposeMedicinalProductDefinitionNameCountryLanguage(json, '', value.countryLanguageList[i]);
    finishArray(json, value.countryLanguageList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinitionNameNamePart(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductDefinitionNameNamePart(jsn)); 
end;

function TFHIRJsonParser.ParseMedicinalProductDefinitionNameNamePart(jsn : TJsonObject) : TFhirMedicinalProductDefinitionNameNamePart;
begin
  result := TFhirMedicinalProductDefinitionNameNamePart.Create;
  try
    ParseMedicinalProductDefinitionNameNamePartProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinitionNameNamePartProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinitionNameNamePart);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('part') or jsn.has('_part') then
        value.partElement := parseString(jsn.node['part'], jsn.vObj['_part']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductDefinitionNameNamePart(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinitionNameNamePart; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'part', value.partElement, false);
  ComposeStringProps(json, 'part', value.partElement, false);
  ComposeCodeableConcept(json, 'type', value.type_);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinitionNameCountryLanguage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductDefinitionNameCountryLanguage(jsn)); 
end;

function TFHIRJsonParser.ParseMedicinalProductDefinitionNameCountryLanguage(jsn : TJsonObject) : TFhirMedicinalProductDefinitionNameCountryLanguage;
begin
  result := TFhirMedicinalProductDefinitionNameCountryLanguage.Create;
  try
    ParseMedicinalProductDefinitionNameCountryLanguageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinitionNameCountryLanguageProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinitionNameCountryLanguage);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('country') then
        value.country := ParseCodeableConcept(jsn.vObj['country']);
    if jsn.has('jurisdiction') then
        value.jurisdiction := ParseCodeableConcept(jsn.vObj['jurisdiction']);
    if jsn.has('language') then
        value.language := ParseCodeableConcept(jsn.vObj['language']);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductDefinitionNameCountryLanguage(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinitionNameCountryLanguage; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'country', value.country);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'jurisdiction', value.jurisdiction);
  ComposeCodeableConcept(json, 'language', value.language);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinitionCrossReference(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductDefinitionCrossReference(jsn)); 
end;

function TFHIRJsonParser.ParseMedicinalProductDefinitionCrossReference(jsn : TJsonObject) : TFhirMedicinalProductDefinitionCrossReference;
begin
  result := TFhirMedicinalProductDefinitionCrossReference.Create;
  try
    ParseMedicinalProductDefinitionCrossReferenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinitionCrossReferenceProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinitionCrossReference);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('product') then
        value.product := ParseCodeableReference(jsn.vObj['product']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductDefinitionCrossReference(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinitionCrossReference; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableReference(json, 'product', value.product);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinitionOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductDefinitionOperation(jsn)); 
end;

function TFHIRJsonParser.ParseMedicinalProductDefinitionOperation(jsn : TJsonObject) : TFhirMedicinalProductDefinitionOperation;
begin
  result := TFhirMedicinalProductDefinitionOperation.Create;
  try
    ParseMedicinalProductDefinitionOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinitionOperationProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinitionOperation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableReference(jsn.vObj['type']);
    if jsn.has('effectiveDate') then
        value.effectiveDate := ParsePeriod(jsn.vObj['effectiveDate']);
    if jsn.has('organization') then
      iterateArray(jsn.vArr['organization'], value.organizationList, parseReference);
    if jsn.has('confidentialityIndicator') then
        value.confidentialityIndicator := ParseCodeableConcept(jsn.vObj['confidentialityIndicator']);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductDefinitionOperation(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinitionOperation; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableReference(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectiveDate', value.effectiveDate);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.organizationList.Count > 0) then
  begin
    startArray(json, 'organization', value.organizationList, false);
    for i := 0 to value.organizationList.Count - 1 do
      ComposeReference(json, '', value.organizationList[i]);
    finishArray(json, value.organizationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'confidentialityIndicator', value.confidentialityIndicator);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinitionCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductDefinitionCharacteristic(jsn)); 
end;

function TFHIRJsonParser.ParseMedicinalProductDefinitionCharacteristic(jsn : TJsonObject) : TFhirMedicinalProductDefinitionCharacteristic;
begin
  result := TFhirMedicinalProductDefinitionCharacteristic.Create;
  try
    ParseMedicinalProductDefinitionCharacteristicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinitionCharacteristicProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinitionCharacteristic);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      value.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductDefinitionCharacteristic(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinitionCharacteristic; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(value.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicinalProductDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseMedicinalProductDefinition(jsn : TJsonObject) : TFhirMedicinalProductDefinition;
begin
  result := TFhirMedicinalProductDefinition.Create;
  try
    ParseMedicinalProductDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicinalProductDefinitionProperties(jsn : TJsonObject; value : TFhirMedicinalProductDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('domain') then
        value.domain := ParseCodeableConcept(jsn.vObj['domain']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('status') then
        value.status := ParseCodeableConcept(jsn.vObj['status']);
    if jsn.has('statusDate') or jsn.has('_statusDate') then
        value.statusDateElement := parseDateTime(jsn.node['statusDate'], jsn.vObj['_statusDate']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('combinedPharmaceuticalDoseForm') then
        value.combinedPharmaceuticalDoseForm := ParseCodeableConcept(jsn.vObj['combinedPharmaceuticalDoseForm']);
    if jsn.has('route') then
      iterateArray(jsn.vArr['route'], value.routeList, parseCodeableConcept);
    if jsn.has('indication') or jsn.has('_indication') then
        value.indicationElement := parseMarkdown(jsn.node['indication'], jsn.vObj['_indication']);
    if jsn.has('legalStatusOfSupply') then
        value.legalStatusOfSupply := ParseCodeableConcept(jsn.vObj['legalStatusOfSupply']);
    if jsn.has('additionalMonitoringIndicator') then
        value.additionalMonitoringIndicator := ParseCodeableConcept(jsn.vObj['additionalMonitoringIndicator']);
    if jsn.has('specialMeasures') then
      iterateArray(jsn.vArr['specialMeasures'], value.specialMeasuresList, parseCodeableConcept);
    if jsn.has('pediatricUseIndicator') then
        value.pediatricUseIndicator := ParseCodeableConcept(jsn.vObj['pediatricUseIndicator']);
    if jsn.has('classification') then
      iterateArray(jsn.vArr['classification'], value.classificationList, parseCodeableConcept);
    if jsn.has('marketingStatus') then
      iterateArray(jsn.vArr['marketingStatus'], value.marketingStatusList, parseMarketingStatus);
    if jsn.has('packagedMedicinalProduct') then
      iterateArray(jsn.vArr['packagedMedicinalProduct'], value.packagedMedicinalProductList, parseCodeableConcept);
    if jsn.has('ingredient') then
      iterateArray(jsn.vArr['ingredient'], value.ingredientList, parseCodeableConcept);
    if jsn.has('impurity') then
      iterateArray(jsn.vArr['impurity'], value.impurityList, parseCodeableReference);
    if jsn.has('attachedDocument') then
      iterateArray(jsn.vArr['attachedDocument'], value.attachedDocumentList, parseReference);
    if jsn.has('masterFile') then
      iterateArray(jsn.vArr['masterFile'], value.masterFileList, parseReference);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseMedicinalProductDefinitionContact);
    if jsn.has('clinicalTrial') then
      iterateArray(jsn.vArr['clinicalTrial'], value.clinicalTrialList, parseReference);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCoding);
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], value.nameList, parseMedicinalProductDefinitionName);
    if jsn.has('crossReference') then
      iterateArray(jsn.vArr['crossReference'], value.crossReferenceList, parseMedicinalProductDefinitionCrossReference);
    if jsn.has('operation') then
      iterateArray(jsn.vArr['operation'], value.operationList, parseMedicinalProductDefinitionOperation);
    if jsn.has('characteristic') then
      iterateArray(jsn.vArr['characteristic'], value.characteristicList, parseMedicinalProductDefinitionCharacteristic);
end;

procedure TFHIRJsonComposer.ComposeMedicinalProductDefinition(json : TJSONWriter; name : string; value : TFhirMedicinalProductDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'domain', value.domain);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', value.status);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'statusDate', value.statusDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'statusDate', value.statusDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'combinedPharmaceuticalDoseForm', value.combinedPharmaceuticalDoseForm);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.routeList.Count > 0) then
  begin
    startArray(json, 'route', value.routeList, false);
    for i := 0 to value.routeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.routeList[i]);
    finishArray(json, value.routeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'indication', value.indicationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'indication', value.indicationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'legalStatusOfSupply', value.legalStatusOfSupply);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'additionalMonitoringIndicator', value.additionalMonitoringIndicator);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.specialMeasuresList.Count > 0) then
  begin
    startArray(json, 'specialMeasures', value.specialMeasuresList, false);
    for i := 0 to value.specialMeasuresList.Count - 1 do
      ComposeCodeableConcept(json, '', value.specialMeasuresList[i]);
    finishArray(json, value.specialMeasuresList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'pediatricUseIndicator', value.pediatricUseIndicator);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.classificationList.Count > 0) then
  begin
    startArray(json, 'classification', value.classificationList, false);
    for i := 0 to value.classificationList.Count - 1 do
      ComposeCodeableConcept(json, '', value.classificationList[i]);
    finishArray(json, value.classificationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.marketingStatusList.Count > 0) then
  begin
    startArray(json, 'marketingStatus', value.marketingStatusList, false);
    for i := 0 to value.marketingStatusList.Count - 1 do
      ComposeMarketingStatus(json, '', value.marketingStatusList[i]);
    finishArray(json, value.marketingStatusList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.packagedMedicinalProductList.Count > 0) then
  begin
    startArray(json, 'packagedMedicinalProduct', value.packagedMedicinalProductList, false);
    for i := 0 to value.packagedMedicinalProductList.Count - 1 do
      ComposeCodeableConcept(json, '', value.packagedMedicinalProductList[i]);
    finishArray(json, value.packagedMedicinalProductList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.ingredientList.Count > 0) then
  begin
    startArray(json, 'ingredient', value.ingredientList, false);
    for i := 0 to value.ingredientList.Count - 1 do
      ComposeCodeableConcept(json, '', value.ingredientList[i]);
    finishArray(json, value.ingredientList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.impurityList.Count > 0) then
  begin
    startArray(json, 'impurity', value.impurityList, false);
    for i := 0 to value.impurityList.Count - 1 do
      ComposeCodeableReference(json, '', value.impurityList[i]);
    finishArray(json, value.impurityList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.attachedDocumentList.Count > 0) then
  begin
    startArray(json, 'attachedDocument', value.attachedDocumentList, false);
    for i := 0 to value.attachedDocumentList.Count - 1 do
      ComposeReference(json, '', value.attachedDocumentList[i]);
    finishArray(json, value.attachedDocumentList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.masterFileList.Count > 0) then
  begin
    startArray(json, 'masterFile', value.masterFileList, false);
    for i := 0 to value.masterFileList.Count - 1 do
      ComposeReference(json, '', value.masterFileList[i]);
    finishArray(json, value.masterFileList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeMedicinalProductDefinitionContact(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.clinicalTrialList.Count > 0) then
  begin
    startArray(json, 'clinicalTrial', value.clinicalTrialList, false);
    for i := 0 to value.clinicalTrialList.Count - 1 do
      ComposeReference(json, '', value.clinicalTrialList[i]);
    finishArray(json, value.clinicalTrialList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCoding(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (value.nameList.Count > 0) then
  begin
    startArray(json, 'name', value.nameList, false);
    for i := 0 to value.nameList.Count - 1 do
      ComposeMedicinalProductDefinitionName(json, '', value.nameList[i]);
    finishArray(json, value.nameList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.crossReferenceList.Count > 0) then
  begin
    startArray(json, 'crossReference', value.crossReferenceList, false);
    for i := 0 to value.crossReferenceList.Count - 1 do
      ComposeMedicinalProductDefinitionCrossReference(json, '', value.crossReferenceList[i]);
    finishArray(json, value.crossReferenceList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.operationList.Count > 0) then
  begin
    startArray(json, 'operation', value.operationList, false);
    for i := 0 to value.operationList.Count - 1 do
      ComposeMedicinalProductDefinitionOperation(json, '', value.operationList[i]);
    finishArray(json, value.operationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.characteristicList.Count > 0) then
  begin
    startArray(json, 'characteristic', value.characteristicList, false);
    for i := 0 to value.characteristicList.Count - 1 do
      ComposeMedicinalProductDefinitionCharacteristic(json, '', value.characteristicList[i]);
    finishArray(json, value.characteristicList);
  end;
end;

{$ENDIF FHIR_MEDICINALPRODUCTDEFINITION}
{$IFDEF FHIR_MESSAGEDEFINITION}
procedure TFHIRJsonParser.ParseMessageDefinitionFocus(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageDefinitionFocus(jsn)); 
end;

function TFHIRJsonParser.ParseMessageDefinitionFocus(jsn : TJsonObject) : TFhirMessageDefinitionFocus;
begin
  result := TFhirMessageDefinitionFocus.Create;
  try
    ParseMessageDefinitionFocusProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageDefinitionFocusProperties(jsn : TJsonObject; value : TFhirMessageDefinitionFocus);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') or jsn.has('_profile') then
        value.profileElement := parseCanonical(jsn.node['profile'], jsn.vObj['_profile']);
    if jsn.has('min') or jsn.has('_min') then
        value.minElement := parseUnsignedInt(jsn.node['min'], jsn.vObj['_min']);
    if jsn.has('max') or jsn.has('_max') then
        value.maxElement := parseString(jsn.node['max'], jsn.vObj['_max']);
end;

procedure TFHIRJsonComposer.ComposeMessageDefinitionFocus(json : TJSONWriter; name : string; value : TFhirMessageDefinitionFocus; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'code', value.codeElement, CODES_TFhirResourceTypesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalValue(json, 'profile', value.profileElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalProps(json, 'profile', value.profileElement, false);
  ComposeUnsignedIntValue(json, 'min', value.minElement, false);
  ComposeUnsignedIntProps(json, 'min', value.minElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'max', value.maxElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'max', value.maxElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMessageDefinitionAllowedResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageDefinitionAllowedResponse(jsn)); 
end;

function TFHIRJsonParser.ParseMessageDefinitionAllowedResponse(jsn : TJsonObject) : TFhirMessageDefinitionAllowedResponse;
begin
  result := TFhirMessageDefinitionAllowedResponse.Create;
  try
    ParseMessageDefinitionAllowedResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageDefinitionAllowedResponseProperties(jsn : TJsonObject; value : TFhirMessageDefinitionAllowedResponse);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('message') or jsn.has('_message') then
        value.messageElement := parseCanonical(jsn.node['message'], jsn.vObj['_message']);
    if jsn.has('situation') or jsn.has('_situation') then
        value.situationElement := parseMarkdown(jsn.node['situation'], jsn.vObj['_situation']);
end;

procedure TFHIRJsonComposer.ComposeMessageDefinitionAllowedResponse(json : TJSONWriter; name : string; value : TFhirMessageDefinitionAllowedResponse; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCanonicalValue(json, 'message', value.messageElement, false);
  ComposeCanonicalProps(json, 'message', value.messageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'situation', value.situationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'situation', value.situationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMessageDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseMessageDefinition(jsn : TJsonObject) : TFhirMessageDefinition;
begin
  result := TFhirMessageDefinition.Create;
  try
    ParseMessageDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageDefinitionProperties(jsn : TJsonObject; value : TFhirMessageDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
      if jsn.has('replaces') or jsn.has('_replaces') then
      iteratePrimitiveArray(jsn.vArr['replaces'], jsn.vArr['_replaces'], value.replacesList, parseCanonical);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('base') or jsn.has('_base') then
        value.baseElement := parseCanonical(jsn.node['base'], jsn.vObj['_base']);
      if jsn.has('parent') or jsn.has('_parent') then
      iteratePrimitiveArray(jsn.vArr['parent'], jsn.vArr['_parent'], value.parentList, parseCanonical);
    if jsn.has('eventCoding') {a4} then
      value.event := ParseCoding(jsn.vObj['eventCoding']);
    if jsn.has('eventUri') or jsn.has('_eventUri') then
      value.event := parseUri(jsn.node['eventUri'], jsn.vObj['_eventUri']);
    if jsn.has('category') or jsn.has('_category') then
        value.categoryElement := parseEnum(jsn.path+'/category', jsn.node['category'], jsn.vObj['_category'], CODES_TFhirMessageSignificanceCategoryEnum, SYSTEMS_TFhirMessageSignificanceCategoryEnum);
    if jsn.has('focus') then
      iterateArray(jsn.vArr['focus'], value.focusList, parseMessageDefinitionFocus);
    if jsn.has('responseRequired') or jsn.has('_responseRequired') then
        value.responseRequiredElement := parseEnum(jsn.path+'/responseRequired', jsn.node['responseRequired'], jsn.vObj['_responseRequired'], CODES_TFhirMessageheaderResponseRequestEnum, SYSTEMS_TFhirMessageheaderResponseRequestEnum);
    if jsn.has('allowedResponse') then
      iterateArray(jsn.vArr['allowedResponse'], value.allowedResponseList, parseMessageDefinitionAllowedResponse);
      if jsn.has('graph') or jsn.has('_graph') then
      iteratePrimitiveArray(jsn.vArr['graph'], jsn.vArr['_graph'], value.graphList, parseCanonical);
end;

procedure TFHIRJsonComposer.ComposeMessageDefinition(json : TJSONWriter; name : string; value : TFhirMessageDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.replacesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.replacesList.Count - 1 do
    begin
      ext := ext or ((value.replacesList[i].id <> '') or (value.replacesList[i].hasExtensionList) {no-comments or (value.replacesList[i].hasComments)});
      val := val or (value.replacesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'replaces', value.replacesList, true);
      for i := 0 to value.replacesList.Count - 1 do
        ComposeCanonicalValue(json, '', value.replacesList[i], true);
      finishArray(json, value.replacesList);
    end;
    if ext then
    begin
      startArray(json, '_replaces', value.replacesList, false);
      for i := 0 to value.replacesList.Count - 1 do
        ComposeCanonicalProps(json, '', value.replacesList[i], true);
      finishArray(json, value.replacesList);
    end;
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  ComposeDateTimeValue(json, 'date', value.dateElement, false);
  ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'base', value.baseElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'base', value.baseElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.parentList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.parentList.Count - 1 do
    begin
      ext := ext or ((value.parentList[i].id <> '') or (value.parentList[i].hasExtensionList) {no-comments or (value.parentList[i].hasComments)});
      val := val or (value.parentList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'parent', value.parentList, true);
      for i := 0 to value.parentList.Count - 1 do
        ComposeCanonicalValue(json, '', value.parentList[i], true);
      finishArray(json, value.parentList);
    end;
    if ext then
    begin
      startArray(json, '_parent', value.parentList, false);
      for i := 0 to value.parentList.Count - 1 do
        ComposeCanonicalProps(json, '', value.parentList[i], true);
      finishArray(json, value.parentList);
    end;
  end;
  if (value.event is TFhirCoding) then 
    ComposeCoding(json, 'eventCoding', TFhirCoding(value.event)) 
  else if (value.event is TFhirUri) then 
  begin
    ComposeUriValue(json, 'eventUri', TFhirUri(value.event), false);
    ComposeUriProps(json, 'eventUri', TFhirUri(value.event), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'category', value.categoryElement, CODES_TFhirMessageSignificanceCategoryEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.focusList.Count > 0) then
  begin
    startArray(json, 'focus', value.focusList, false);
    for i := 0 to value.focusList.Count - 1 do
      ComposeMessageDefinitionFocus(json, '', value.focusList[i]);
    finishArray(json, value.focusList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'responseRequired', value.responseRequiredElement, CODES_TFhirMessageheaderResponseRequestEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.allowedResponseList.Count > 0) then
  begin
    startArray(json, 'allowedResponse', value.allowedResponseList, false);
    for i := 0 to value.allowedResponseList.Count - 1 do
      ComposeMessageDefinitionAllowedResponse(json, '', value.allowedResponseList[i]);
    finishArray(json, value.allowedResponseList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.graphList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.graphList.Count - 1 do
    begin
      ext := ext or ((value.graphList[i].id <> '') or (value.graphList[i].hasExtensionList) {no-comments or (value.graphList[i].hasComments)});
      val := val or (value.graphList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'graph', value.graphList, true);
      for i := 0 to value.graphList.Count - 1 do
        ComposeCanonicalValue(json, '', value.graphList[i], true);
      finishArray(json, value.graphList);
    end;
    if ext then
    begin
      startArray(json, '_graph', value.graphList, false);
      for i := 0 to value.graphList.Count - 1 do
        ComposeCanonicalProps(json, '', value.graphList[i], true);
      finishArray(json, value.graphList);
    end;
  end;
end;

{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
procedure TFHIRJsonParser.ParseMessageHeaderDestination(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageHeaderDestination(jsn)); 
end;

function TFHIRJsonParser.ParseMessageHeaderDestination(jsn : TJsonObject) : TFhirMessageHeaderDestination;
begin
  result := TFhirMessageHeaderDestination.Create;
  try
    ParseMessageHeaderDestinationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageHeaderDestinationProperties(jsn : TJsonObject; value : TFhirMessageHeaderDestination);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('target') then
        value.target := ParseReference(jsn.vObj['target']);
    if jsn.has('endpoint') or jsn.has('_endpoint') then
        value.endpointElement := parseUrl(jsn.node['endpoint'], jsn.vObj['_endpoint']);
    if jsn.has('receiver') then
        value.receiver := ParseReference(jsn.vObj['receiver']);
end;

procedure TFHIRJsonComposer.ComposeMessageHeaderDestination(json : TJSONWriter; name : string; value : TFhirMessageHeaderDestination; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'target', value.target);
  ComposeUrlValue(json, 'endpoint', value.endpointElement, false);
  ComposeUrlProps(json, 'endpoint', value.endpointElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'receiver', value.receiver);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMessageHeaderSource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageHeaderSource(jsn)); 
end;

function TFHIRJsonParser.ParseMessageHeaderSource(jsn : TJsonObject) : TFhirMessageHeaderSource;
begin
  result := TFhirMessageHeaderSource.Create;
  try
    ParseMessageHeaderSourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageHeaderSourceProperties(jsn : TJsonObject; value : TFhirMessageHeaderSource);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('software') or jsn.has('_software') then
        value.softwareElement := parseString(jsn.node['software'], jsn.vObj['_software']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('contact') then
        value.contact := ParseContactPoint(jsn.vObj['contact']);
    if jsn.has('endpoint') or jsn.has('_endpoint') then
        value.endpointElement := parseUrl(jsn.node['endpoint'], jsn.vObj['_endpoint']);
end;

procedure TFHIRJsonComposer.ComposeMessageHeaderSource(json : TJSONWriter; name : string; value : TFhirMessageHeaderSource; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'software', value.softwareElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'software', value.softwareElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeContactPoint(json, 'contact', value.contact);
  ComposeUrlValue(json, 'endpoint', value.endpointElement, false);
  ComposeUrlProps(json, 'endpoint', value.endpointElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMessageHeaderResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageHeaderResponse(jsn)); 
end;

function TFHIRJsonParser.ParseMessageHeaderResponse(jsn : TJsonObject) : TFhirMessageHeaderResponse;
begin
  result := TFhirMessageHeaderResponse.Create;
  try
    ParseMessageHeaderResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageHeaderResponseProperties(jsn : TJsonObject; value : TFhirMessageHeaderResponse);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('identifier') or jsn.has('_identifier') then
        value.identifierElement := parseId(jsn.node['identifier'], jsn.vObj['_identifier']);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirResponseTypeEnum, SYSTEMS_TFhirResponseTypeEnum);
    if jsn.has('details') then
        value.details := ParseReference(jsn.vObj['details']);
end;

procedure TFHIRJsonComposer.ComposeMessageHeaderResponse(json : TJSONWriter; name : string; value : TFhirMessageHeaderResponse; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeIdValue(json, 'identifier', value.identifierElement, false);
  ComposeIdProps(json, 'identifier', value.identifierElement, false);
  ComposeEnumValue(json, 'code', value.codeElement, CODES_TFhirResponseTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'details', value.details);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMessageHeader(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageHeader(jsn)); 
end;

function TFHIRJsonParser.ParseMessageHeader(jsn : TJsonObject) : TFhirMessageHeader;
begin
  result := TFhirMessageHeader.Create;
  try
    ParseMessageHeaderProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageHeaderProperties(jsn : TJsonObject; value : TFhirMessageHeader);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('eventCoding') {a4} then
      value.event := ParseCoding(jsn.vObj['eventCoding']);
    if jsn.has('eventUri') or jsn.has('_eventUri') then
      value.event := parseUri(jsn.node['eventUri'], jsn.vObj['_eventUri']);
    if jsn.has('destination') then
      iterateArray(jsn.vArr['destination'], value.destinationList, parseMessageHeaderDestination);
    if jsn.has('sender') then
        value.sender := ParseReference(jsn.vObj['sender']);
    if jsn.has('enterer') then
        value.enterer := ParseReference(jsn.vObj['enterer']);
    if jsn.has('author') then
        value.author := ParseReference(jsn.vObj['author']);
    if jsn.has('source') then
        value.source := ParseMessageHeaderSource(jsn.vObj['source']);
    if jsn.has('responsible') then
        value.responsible := ParseReference(jsn.vObj['responsible']);
    if jsn.has('reason') then
        value.reason := ParseCodeableConcept(jsn.vObj['reason']);
    if jsn.has('response') then
        value.response := ParseMessageHeaderResponse(jsn.vObj['response']);
    if jsn.has('focus') then
      iterateArray(jsn.vArr['focus'], value.focusList, parseReference);
    if jsn.has('definition') or jsn.has('_definition') then
        value.definitionElement := parseCanonical(jsn.node['definition'], jsn.vObj['_definition']);
end;

procedure TFHIRJsonComposer.ComposeMessageHeader(json : TJSONWriter; name : string; value : TFhirMessageHeader; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (value.event is TFhirCoding) then 
    ComposeCoding(json, 'eventCoding', TFhirCoding(value.event)) 
  else if (value.event is TFhirUri) then 
  begin
    ComposeUriValue(json, 'eventUri', TFhirUri(value.event), false);
    ComposeUriProps(json, 'eventUri', TFhirUri(value.event), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.destinationList.Count > 0) then
  begin
    startArray(json, 'destination', value.destinationList, false);
    for i := 0 to value.destinationList.Count - 1 do
      ComposeMessageHeaderDestination(json, '', value.destinationList[i]);
    finishArray(json, value.destinationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'sender', value.sender);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'enterer', value.enterer);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'author', value.author);
  ComposeMessageHeaderSource(json, 'source', value.source);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'responsible', value.responsible);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'reason', value.reason);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMessageHeaderResponse(json, 'response', value.response);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.focusList.Count > 0) then
  begin
    startArray(json, 'focus', value.focusList, false);
    for i := 0 to value.focusList.Count - 1 do
      ComposeReference(json, '', value.focusList[i]);
    finishArray(json, value.focusList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'definition', value.definitionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'definition', value.definitionElement, false);
end;

{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
procedure TFHIRJsonParser.ParseMolecularSequenceReferenceSeq(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMolecularSequenceReferenceSeq(jsn)); 
end;

function TFHIRJsonParser.ParseMolecularSequenceReferenceSeq(jsn : TJsonObject) : TFhirMolecularSequenceReferenceSeq;
begin
  result := TFhirMolecularSequenceReferenceSeq.Create;
  try
    ParseMolecularSequenceReferenceSeqProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMolecularSequenceReferenceSeqProperties(jsn : TJsonObject; value : TFhirMolecularSequenceReferenceSeq);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('chromosome') then
        value.chromosome := ParseCodeableConcept(jsn.vObj['chromosome']);
    if jsn.has('genomeBuild') or jsn.has('_genomeBuild') then
        value.genomeBuildElement := parseString(jsn.node['genomeBuild'], jsn.vObj['_genomeBuild']);
    if jsn.has('orientation') or jsn.has('_orientation') then
        value.orientationElement := parseEnum(jsn.path+'/orientation', jsn.node['orientation'], jsn.vObj['_orientation'], CODES_TFhirOrientationTypeEnum, SYSTEMS_TFhirOrientationTypeEnum);
    if jsn.has('referenceSeqId') then
        value.referenceSeqId := ParseCodeableConcept(jsn.vObj['referenceSeqId']);
    if jsn.has('referenceSeqPointer') then
        value.referenceSeqPointer := ParseReference(jsn.vObj['referenceSeqPointer']);
    if jsn.has('referenceSeqString') or jsn.has('_referenceSeqString') then
        value.referenceSeqStringElement := parseString(jsn.node['referenceSeqString'], jsn.vObj['_referenceSeqString']);
    if jsn.has('strand') or jsn.has('_strand') then
        value.strandElement := parseEnum(jsn.path+'/strand', jsn.node['strand'], jsn.vObj['_strand'], CODES_TFhirStrandTypeEnum, SYSTEMS_TFhirStrandTypeEnum);
    if jsn.has('windowStart') or jsn.has('_windowStart') then
        value.windowStartElement := parseInteger(jsn.node['windowStart'], jsn.vObj['_windowStart']);
    if jsn.has('windowEnd') or jsn.has('_windowEnd') then
        value.windowEndElement := parseInteger(jsn.node['windowEnd'], jsn.vObj['_windowEnd']);
end;

procedure TFHIRJsonComposer.ComposeMolecularSequenceReferenceSeq(json : TJSONWriter; name : string; value : TFhirMolecularSequenceReferenceSeq; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'chromosome', value.chromosome);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'genomeBuild', value.genomeBuildElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'genomeBuild', value.genomeBuildElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'orientation', value.orientationElement, CODES_TFhirOrientationTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'referenceSeqId', value.referenceSeqId);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'referenceSeqPointer', value.referenceSeqPointer);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'referenceSeqString', value.referenceSeqStringElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'referenceSeqString', value.referenceSeqStringElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'strand', value.strandElement, CODES_TFhirStrandTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'windowStart', value.windowStartElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'windowStart', value.windowStartElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'windowEnd', value.windowEndElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'windowEnd', value.windowEndElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMolecularSequenceVariant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMolecularSequenceVariant(jsn)); 
end;

function TFHIRJsonParser.ParseMolecularSequenceVariant(jsn : TJsonObject) : TFhirMolecularSequenceVariant;
begin
  result := TFhirMolecularSequenceVariant.Create;
  try
    ParseMolecularSequenceVariantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMolecularSequenceVariantProperties(jsn : TJsonObject; value : TFhirMolecularSequenceVariant);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('start') or jsn.has('_start') then
        value.startElement := parseInteger(jsn.node['start'], jsn.vObj['_start']);
    if jsn.has('end') or jsn.has('_end') then
        value.end_Element := parseInteger(jsn.node['end'], jsn.vObj['_end']);
    if jsn.has('observedAllele') or jsn.has('_observedAllele') then
        value.observedAlleleElement := parseString(jsn.node['observedAllele'], jsn.vObj['_observedAllele']);
    if jsn.has('referenceAllele') or jsn.has('_referenceAllele') then
        value.referenceAlleleElement := parseString(jsn.node['referenceAllele'], jsn.vObj['_referenceAllele']);
    if jsn.has('cigar') or jsn.has('_cigar') then
        value.cigarElement := parseString(jsn.node['cigar'], jsn.vObj['_cigar']);
    if jsn.has('variantPointer') then
        value.variantPointer := ParseReference(jsn.vObj['variantPointer']);
end;

procedure TFHIRJsonComposer.ComposeMolecularSequenceVariant(json : TJSONWriter; name : string; value : TFhirMolecularSequenceVariant; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'start', value.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'start', value.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'end', value.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'end', value.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'observedAllele', value.observedAlleleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'observedAllele', value.observedAlleleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'referenceAllele', value.referenceAlleleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'referenceAllele', value.referenceAlleleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'cigar', value.cigarElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'cigar', value.cigarElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'variantPointer', value.variantPointer);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMolecularSequenceQuality(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMolecularSequenceQuality(jsn)); 
end;

function TFHIRJsonParser.ParseMolecularSequenceQuality(jsn : TJsonObject) : TFhirMolecularSequenceQuality;
begin
  result := TFhirMolecularSequenceQuality.Create;
  try
    ParseMolecularSequenceQualityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMolecularSequenceQualityProperties(jsn : TJsonObject; value : TFhirMolecularSequenceQuality);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirQualityTypeEnum, SYSTEMS_TFhirQualityTypeEnum);
    if jsn.has('standardSequence') then
        value.standardSequence := ParseCodeableConcept(jsn.vObj['standardSequence']);
    if jsn.has('start') or jsn.has('_start') then
        value.startElement := parseInteger(jsn.node['start'], jsn.vObj['_start']);
    if jsn.has('end') or jsn.has('_end') then
        value.end_Element := parseInteger(jsn.node['end'], jsn.vObj['_end']);
    if jsn.has('score') then
        value.score := ParseQuantity(jsn.vObj['score']);
    if jsn.has('method') then
        value.method := ParseCodeableConcept(jsn.vObj['method']);
    if jsn.has('truthTP') or jsn.has('_truthTP') then
        value.truthTPElement := parseDecimal(jsn.node['truthTP'], jsn.vObj['_truthTP']);
    if jsn.has('queryTP') or jsn.has('_queryTP') then
        value.queryTPElement := parseDecimal(jsn.node['queryTP'], jsn.vObj['_queryTP']);
    if jsn.has('truthFN') or jsn.has('_truthFN') then
        value.truthFNElement := parseDecimal(jsn.node['truthFN'], jsn.vObj['_truthFN']);
    if jsn.has('queryFP') or jsn.has('_queryFP') then
        value.queryFPElement := parseDecimal(jsn.node['queryFP'], jsn.vObj['_queryFP']);
    if jsn.has('gtFP') or jsn.has('_gtFP') then
        value.gtFPElement := parseDecimal(jsn.node['gtFP'], jsn.vObj['_gtFP']);
    if jsn.has('precision') or jsn.has('_precision') then
        value.precisionElement := parseDecimal(jsn.node['precision'], jsn.vObj['_precision']);
    if jsn.has('recall') or jsn.has('_recall') then
        value.recallElement := parseDecimal(jsn.node['recall'], jsn.vObj['_recall']);
    if jsn.has('fScore') or jsn.has('_fScore') then
        value.fScore_Element := parseDecimal(jsn.node['fScore'], jsn.vObj['_fScore']);
    if jsn.has('roc') then
        value.roc := ParseMolecularSequenceQualityRoc(jsn.vObj['roc']);
end;

procedure TFHIRJsonComposer.ComposeMolecularSequenceQuality(json : TJSONWriter; name : string; value : TFhirMolecularSequenceQuality; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirQualityTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'standardSequence', value.standardSequence);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'start', value.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'start', value.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'end', value.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'end', value.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'score', value.score);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'method', value.method);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'truthTP', value.truthTPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'truthTP', value.truthTPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'queryTP', value.queryTPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'queryTP', value.queryTPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'truthFN', value.truthFNElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'truthFN', value.truthFNElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'queryFP', value.queryFPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'queryFP', value.queryFPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'gtFP', value.gtFPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'gtFP', value.gtFPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'precision', value.precisionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'precision', value.precisionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'recall', value.recallElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'recall', value.recallElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'fScore', value.fScore_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'fScore', value.fScore_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMolecularSequenceQualityRoc(json, 'roc', value.roc);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMolecularSequenceQualityRoc(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMolecularSequenceQualityRoc(jsn)); 
end;

function TFHIRJsonParser.ParseMolecularSequenceQualityRoc(jsn : TJsonObject) : TFhirMolecularSequenceQualityRoc;
begin
  result := TFhirMolecularSequenceQualityRoc.Create;
  try
    ParseMolecularSequenceQualityRocProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMolecularSequenceQualityRocProperties(jsn : TJsonObject; value : TFhirMolecularSequenceQualityRoc);
begin
    ParseBackboneElementProperties(jsn, value);
      if jsn.has('score') or jsn.has('_score') then
      iteratePrimitiveArray(jsn.vArr['score'], jsn.vArr['_score'], value.scoreList, parseInteger);
      if jsn.has('numTP') or jsn.has('_numTP') then
      iteratePrimitiveArray(jsn.vArr['numTP'], jsn.vArr['_numTP'], value.numTPList, parseInteger);
      if jsn.has('numFP') or jsn.has('_numFP') then
      iteratePrimitiveArray(jsn.vArr['numFP'], jsn.vArr['_numFP'], value.numFPList, parseInteger);
      if jsn.has('numFN') or jsn.has('_numFN') then
      iteratePrimitiveArray(jsn.vArr['numFN'], jsn.vArr['_numFN'], value.numFNList, parseInteger);
      if jsn.has('precision') or jsn.has('_precision') then
      iteratePrimitiveArray(jsn.vArr['precision'], jsn.vArr['_precision'], value.precisionList, parseDecimal);
      if jsn.has('sensitivity') or jsn.has('_sensitivity') then
      iteratePrimitiveArray(jsn.vArr['sensitivity'], jsn.vArr['_sensitivity'], value.sensitivityList, parseDecimal);
      if jsn.has('fMeasure') or jsn.has('_fMeasure') then
      iteratePrimitiveArray(jsn.vArr['fMeasure'], jsn.vArr['_fMeasure'], value.fMeasureList, parseDecimal);
end;

procedure TFHIRJsonComposer.ComposeMolecularSequenceQualityRoc(json : TJSONWriter; name : string; value : TFhirMolecularSequenceQualityRoc; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.scoreList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.scoreList.Count - 1 do
    begin
      ext := ext or ((value.scoreList[i].id <> '') or (value.scoreList[i].hasExtensionList) {no-comments or (value.scoreList[i].hasComments)});
      val := val or (value.scoreList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'score', value.scoreList, true);
      for i := 0 to value.scoreList.Count - 1 do
        ComposeIntegerValue(json, '', value.scoreList[i], true);
      finishArray(json, value.scoreList);
    end;
    if ext then
    begin
      startArray(json, '_score', value.scoreList, false);
      for i := 0 to value.scoreList.Count - 1 do
        ComposeIntegerProps(json, '', value.scoreList[i], true);
      finishArray(json, value.scoreList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.numTPList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.numTPList.Count - 1 do
    begin
      ext := ext or ((value.numTPList[i].id <> '') or (value.numTPList[i].hasExtensionList) {no-comments or (value.numTPList[i].hasComments)});
      val := val or (value.numTPList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'numTP', value.numTPList, true);
      for i := 0 to value.numTPList.Count - 1 do
        ComposeIntegerValue(json, '', value.numTPList[i], true);
      finishArray(json, value.numTPList);
    end;
    if ext then
    begin
      startArray(json, '_numTP', value.numTPList, false);
      for i := 0 to value.numTPList.Count - 1 do
        ComposeIntegerProps(json, '', value.numTPList[i], true);
      finishArray(json, value.numTPList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.numFPList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.numFPList.Count - 1 do
    begin
      ext := ext or ((value.numFPList[i].id <> '') or (value.numFPList[i].hasExtensionList) {no-comments or (value.numFPList[i].hasComments)});
      val := val or (value.numFPList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'numFP', value.numFPList, true);
      for i := 0 to value.numFPList.Count - 1 do
        ComposeIntegerValue(json, '', value.numFPList[i], true);
      finishArray(json, value.numFPList);
    end;
    if ext then
    begin
      startArray(json, '_numFP', value.numFPList, false);
      for i := 0 to value.numFPList.Count - 1 do
        ComposeIntegerProps(json, '', value.numFPList[i], true);
      finishArray(json, value.numFPList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.numFNList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.numFNList.Count - 1 do
    begin
      ext := ext or ((value.numFNList[i].id <> '') or (value.numFNList[i].hasExtensionList) {no-comments or (value.numFNList[i].hasComments)});
      val := val or (value.numFNList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'numFN', value.numFNList, true);
      for i := 0 to value.numFNList.Count - 1 do
        ComposeIntegerValue(json, '', value.numFNList[i], true);
      finishArray(json, value.numFNList);
    end;
    if ext then
    begin
      startArray(json, '_numFN', value.numFNList, false);
      for i := 0 to value.numFNList.Count - 1 do
        ComposeIntegerProps(json, '', value.numFNList[i], true);
      finishArray(json, value.numFNList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.precisionList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.precisionList.Count - 1 do
    begin
      ext := ext or ((value.precisionList[i].id <> '') or (value.precisionList[i].hasExtensionList) {no-comments or (value.precisionList[i].hasComments)});
      val := val or (value.precisionList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'precision', value.precisionList, true);
      for i := 0 to value.precisionList.Count - 1 do
        ComposeDecimalValue(json, '', value.precisionList[i], true);
      finishArray(json, value.precisionList);
    end;
    if ext then
    begin
      startArray(json, '_precision', value.precisionList, false);
      for i := 0 to value.precisionList.Count - 1 do
        ComposeDecimalProps(json, '', value.precisionList[i], true);
      finishArray(json, value.precisionList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.sensitivityList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.sensitivityList.Count - 1 do
    begin
      ext := ext or ((value.sensitivityList[i].id <> '') or (value.sensitivityList[i].hasExtensionList) {no-comments or (value.sensitivityList[i].hasComments)});
      val := val or (value.sensitivityList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'sensitivity', value.sensitivityList, true);
      for i := 0 to value.sensitivityList.Count - 1 do
        ComposeDecimalValue(json, '', value.sensitivityList[i], true);
      finishArray(json, value.sensitivityList);
    end;
    if ext then
    begin
      startArray(json, '_sensitivity', value.sensitivityList, false);
      for i := 0 to value.sensitivityList.Count - 1 do
        ComposeDecimalProps(json, '', value.sensitivityList[i], true);
      finishArray(json, value.sensitivityList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.fMeasureList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.fMeasureList.Count - 1 do
    begin
      ext := ext or ((value.fMeasureList[i].id <> '') or (value.fMeasureList[i].hasExtensionList) {no-comments or (value.fMeasureList[i].hasComments)});
      val := val or (value.fMeasureList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'fMeasure', value.fMeasureList, true);
      for i := 0 to value.fMeasureList.Count - 1 do
        ComposeDecimalValue(json, '', value.fMeasureList[i], true);
      finishArray(json, value.fMeasureList);
    end;
    if ext then
    begin
      startArray(json, '_fMeasure', value.fMeasureList, false);
      for i := 0 to value.fMeasureList.Count - 1 do
        ComposeDecimalProps(json, '', value.fMeasureList[i], true);
      finishArray(json, value.fMeasureList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMolecularSequenceRepository(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMolecularSequenceRepository(jsn)); 
end;

function TFHIRJsonParser.ParseMolecularSequenceRepository(jsn : TJsonObject) : TFhirMolecularSequenceRepository;
begin
  result := TFhirMolecularSequenceRepository.Create;
  try
    ParseMolecularSequenceRepositoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMolecularSequenceRepositoryProperties(jsn : TJsonObject; value : TFhirMolecularSequenceRepository);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirRepositoryTypeEnum, SYSTEMS_TFhirRepositoryTypeEnum);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('datasetId') or jsn.has('_datasetId') then
        value.datasetIdElement := parseString(jsn.node['datasetId'], jsn.vObj['_datasetId']);
    if jsn.has('variantsetId') or jsn.has('_variantsetId') then
        value.variantsetIdElement := parseString(jsn.node['variantsetId'], jsn.vObj['_variantsetId']);
    if jsn.has('readsetId') or jsn.has('_readsetId') then
        value.readsetIdElement := parseString(jsn.node['readsetId'], jsn.vObj['_readsetId']);
end;

procedure TFHIRJsonComposer.ComposeMolecularSequenceRepository(json : TJSONWriter; name : string; value : TFhirMolecularSequenceRepository; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirRepositoryTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'datasetId', value.datasetIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'datasetId', value.datasetIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'variantsetId', value.variantsetIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'variantsetId', value.variantsetIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'readsetId', value.readsetIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'readsetId', value.readsetIdElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMolecularSequenceStructureVariant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMolecularSequenceStructureVariant(jsn)); 
end;

function TFHIRJsonParser.ParseMolecularSequenceStructureVariant(jsn : TJsonObject) : TFhirMolecularSequenceStructureVariant;
begin
  result := TFhirMolecularSequenceStructureVariant.Create;
  try
    ParseMolecularSequenceStructureVariantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMolecularSequenceStructureVariantProperties(jsn : TJsonObject; value : TFhirMolecularSequenceStructureVariant);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('variantType') then
        value.variantType := ParseCodeableConcept(jsn.vObj['variantType']);
    if jsn.has('exact') or jsn.has('_exact') then
        value.exactElement := parseBoolean(jsn.node['exact'], jsn.vObj['_exact']);
    if jsn.has('length') or jsn.has('_length') then
        value.lengthElement := parseInteger(jsn.node['length'], jsn.vObj['_length']);
    if jsn.has('outer') then
        value.outer := ParseMolecularSequenceStructureVariantOuter(jsn.vObj['outer']);
    if jsn.has('inner') then
        value.inner := ParseMolecularSequenceStructureVariantInner(jsn.vObj['inner']);
end;

procedure TFHIRJsonComposer.ComposeMolecularSequenceStructureVariant(json : TJSONWriter; name : string; value : TFhirMolecularSequenceStructureVariant; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'variantType', value.variantType);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'exact', value.exactElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'exact', value.exactElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'length', value.lengthElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'length', value.lengthElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMolecularSequenceStructureVariantOuter(json, 'outer', value.outer);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMolecularSequenceStructureVariantInner(json, 'inner', value.inner);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMolecularSequenceStructureVariantOuter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMolecularSequenceStructureVariantOuter(jsn)); 
end;

function TFHIRJsonParser.ParseMolecularSequenceStructureVariantOuter(jsn : TJsonObject) : TFhirMolecularSequenceStructureVariantOuter;
begin
  result := TFhirMolecularSequenceStructureVariantOuter.Create;
  try
    ParseMolecularSequenceStructureVariantOuterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMolecularSequenceStructureVariantOuterProperties(jsn : TJsonObject; value : TFhirMolecularSequenceStructureVariantOuter);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('start') or jsn.has('_start') then
        value.startElement := parseInteger(jsn.node['start'], jsn.vObj['_start']);
    if jsn.has('end') or jsn.has('_end') then
        value.end_Element := parseInteger(jsn.node['end'], jsn.vObj['_end']);
end;

procedure TFHIRJsonComposer.ComposeMolecularSequenceStructureVariantOuter(json : TJSONWriter; name : string; value : TFhirMolecularSequenceStructureVariantOuter; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'start', value.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'start', value.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'end', value.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'end', value.end_Element, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMolecularSequenceStructureVariantInner(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMolecularSequenceStructureVariantInner(jsn)); 
end;

function TFHIRJsonParser.ParseMolecularSequenceStructureVariantInner(jsn : TJsonObject) : TFhirMolecularSequenceStructureVariantInner;
begin
  result := TFhirMolecularSequenceStructureVariantInner.Create;
  try
    ParseMolecularSequenceStructureVariantInnerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMolecularSequenceStructureVariantInnerProperties(jsn : TJsonObject; value : TFhirMolecularSequenceStructureVariantInner);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('start') or jsn.has('_start') then
        value.startElement := parseInteger(jsn.node['start'], jsn.vObj['_start']);
    if jsn.has('end') or jsn.has('_end') then
        value.end_Element := parseInteger(jsn.node['end'], jsn.vObj['_end']);
end;

procedure TFHIRJsonComposer.ComposeMolecularSequenceStructureVariantInner(json : TJSONWriter; name : string; value : TFhirMolecularSequenceStructureVariantInner; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'start', value.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'start', value.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'end', value.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'end', value.end_Element, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseMolecularSequence(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMolecularSequence(jsn)); 
end;

function TFHIRJsonParser.ParseMolecularSequence(jsn : TJsonObject) : TFhirMolecularSequence;
begin
  result := TFhirMolecularSequence.Create;
  try
    ParseMolecularSequenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMolecularSequenceProperties(jsn : TJsonObject; value : TFhirMolecularSequence);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirSequenceTypeEnum, SYSTEMS_TFhirSequenceTypeEnum);
    if jsn.has('coordinateSystem') or jsn.has('_coordinateSystem') then
        value.coordinateSystemElement := parseInteger(jsn.node['coordinateSystem'], jsn.vObj['_coordinateSystem']);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('specimen') then
        value.specimen := ParseReference(jsn.vObj['specimen']);
    if jsn.has('device') then
        value.device := ParseReference(jsn.vObj['device']);
    if jsn.has('performer') then
        value.performer := ParseReference(jsn.vObj['performer']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('referenceSeq') then
        value.referenceSeq := ParseMolecularSequenceReferenceSeq(jsn.vObj['referenceSeq']);
    if jsn.has('variant') then
      iterateArray(jsn.vArr['variant'], value.variantList, parseMolecularSequenceVariant);
    if jsn.has('observedSeq') or jsn.has('_observedSeq') then
        value.observedSeqElement := parseString(jsn.node['observedSeq'], jsn.vObj['_observedSeq']);
    if jsn.has('quality') then
      iterateArray(jsn.vArr['quality'], value.qualityList, parseMolecularSequenceQuality);
    if jsn.has('readCoverage') or jsn.has('_readCoverage') then
        value.readCoverageElement := parseInteger(jsn.node['readCoverage'], jsn.vObj['_readCoverage']);
    if jsn.has('repository') then
      iterateArray(jsn.vArr['repository'], value.repositoryList, parseMolecularSequenceRepository);
    if jsn.has('pointer') then
      iterateArray(jsn.vArr['pointer'], value.pointerList, parseReference);
    if jsn.has('structureVariant') then
      iterateArray(jsn.vArr['structureVariant'], value.structureVariantList, parseMolecularSequenceStructureVariant);
end;

procedure TFHIRJsonComposer.ComposeMolecularSequence(json : TJSONWriter; name : string; value : TFhirMolecularSequence; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirSequenceTypeEnum, false);
  ComposeIntegerValue(json, 'coordinateSystem', value.coordinateSystemElement, false);
  ComposeIntegerProps(json, 'coordinateSystem', value.coordinateSystemElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'specimen', value.specimen);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'device', value.device);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'performer', value.performer);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMolecularSequenceReferenceSeq(json, 'referenceSeq', value.referenceSeq);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.variantList.Count > 0) then
  begin
    startArray(json, 'variant', value.variantList, false);
    for i := 0 to value.variantList.Count - 1 do
      ComposeMolecularSequenceVariant(json, '', value.variantList[i]);
    finishArray(json, value.variantList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'observedSeq', value.observedSeqElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'observedSeq', value.observedSeqElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.qualityList.Count > 0) then
  begin
    startArray(json, 'quality', value.qualityList, false);
    for i := 0 to value.qualityList.Count - 1 do
      ComposeMolecularSequenceQuality(json, '', value.qualityList[i]);
    finishArray(json, value.qualityList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'readCoverage', value.readCoverageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'readCoverage', value.readCoverageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.repositoryList.Count > 0) then
  begin
    startArray(json, 'repository', value.repositoryList, false);
    for i := 0 to value.repositoryList.Count - 1 do
      ComposeMolecularSequenceRepository(json, '', value.repositoryList[i]);
    finishArray(json, value.repositoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.pointerList.Count > 0) then
  begin
    startArray(json, 'pointer', value.pointerList, false);
    for i := 0 to value.pointerList.Count - 1 do
      ComposeReference(json, '', value.pointerList[i]);
    finishArray(json, value.pointerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.structureVariantList.Count > 0) then
  begin
    startArray(json, 'structureVariant', value.structureVariantList, false);
    for i := 0 to value.structureVariantList.Count - 1 do
      ComposeMolecularSequenceStructureVariant(json, '', value.structureVariantList[i]);
    finishArray(json, value.structureVariantList);
  end;
end;

{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
procedure TFHIRJsonParser.ParseNamingSystemUniqueId(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNamingSystemUniqueId(jsn)); 
end;

function TFHIRJsonParser.ParseNamingSystemUniqueId(jsn : TJsonObject) : TFhirNamingSystemUniqueId;
begin
  result := TFhirNamingSystemUniqueId.Create;
  try
    ParseNamingSystemUniqueIdProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNamingSystemUniqueIdProperties(jsn : TJsonObject; value : TFhirNamingSystemUniqueId);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirNamingSystemIdentifierTypeEnum, SYSTEMS_TFhirNamingSystemIdentifierTypeEnum);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
    if jsn.has('preferred') or jsn.has('_preferred') then
        value.preferredElement := parseBoolean(jsn.node['preferred'], jsn.vObj['_preferred']);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposeNamingSystemUniqueId(json : TJSONWriter; name : string; value : TFhirNamingSystemUniqueId; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirNamingSystemIdentifierTypeEnum, false);
  ComposeStringValue(json, 'value', value.valueElement, false);
  ComposeStringProps(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'preferred', value.preferredElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'preferred', value.preferredElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseNamingSystem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNamingSystem(jsn)); 
end;

function TFHIRJsonParser.ParseNamingSystem(jsn : TJsonObject) : TFhirNamingSystem;
begin
  result := TFhirNamingSystem.Create;
  try
    ParseNamingSystemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNamingSystemProperties(jsn : TJsonObject; value : TFhirNamingSystem);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('kind') or jsn.has('_kind') then
        value.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirNamingSystemTypeEnum, SYSTEMS_TFhirNamingSystemTypeEnum);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('responsible') or jsn.has('_responsible') then
        value.responsibleElement := parseString(jsn.node['responsible'], jsn.vObj['_responsible']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('usage') or jsn.has('_usage') then
        value.usageElement := parseString(jsn.node['usage'], jsn.vObj['_usage']);
    if jsn.has('uniqueId') then
      iterateArray(jsn.vArr['uniqueId'], value.uniqueIdList, parseNamingSystemUniqueId);
end;

procedure TFHIRJsonComposer.ComposeNamingSystem(json : TJSONWriter; name : string; value : TFhirNamingSystem; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumValue(json, 'kind', value.kindElement, CODES_TFhirNamingSystemTypeEnum, false);
  ComposeDateTimeValue(json, 'date', value.dateElement, false);
  ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'responsible', value.responsibleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'responsible', value.responsibleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', value.usageElement, false);
  if (value.uniqueIdList.Count > 0) then
  begin
    startArray(json, 'uniqueId', value.uniqueIdList, false);
    for i := 0 to value.uniqueIdList.Count - 1 do
      ComposeNamingSystemUniqueId(json, '', value.uniqueIdList[i]);
    finishArray(json, value.uniqueIdList);
  end;
end;

{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
procedure TFHIRJsonParser.ParseNutritionOrderOralDiet(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderOralDiet(jsn)); 
end;

function TFHIRJsonParser.ParseNutritionOrderOralDiet(jsn : TJsonObject) : TFhirNutritionOrderOralDiet;
begin
  result := TFhirNutritionOrderOralDiet.Create;
  try
    ParseNutritionOrderOralDietProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietProperties(jsn : TJsonObject; value : TFhirNutritionOrderOralDiet);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('schedule') then
      iterateArray(jsn.vArr['schedule'], value.scheduleList, parseTiming);
    if jsn.has('nutrient') then
      iterateArray(jsn.vArr['nutrient'], value.nutrientList, parseNutritionOrderOralDietNutrient);
    if jsn.has('texture') then
      iterateArray(jsn.vArr['texture'], value.textureList, parseNutritionOrderOralDietTexture);
    if jsn.has('fluidConsistencyType') then
      iterateArray(jsn.vArr['fluidConsistencyType'], value.fluidConsistencyTypeList, parseCodeableConcept);
    if jsn.has('instruction') or jsn.has('_instruction') then
        value.instructionElement := parseString(jsn.node['instruction'], jsn.vObj['_instruction']);
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderOralDiet(json : TJSONWriter; name : string; value : TFhirNutritionOrderOralDiet; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soData]) and (value.scheduleList.Count > 0) then
  begin
    startArray(json, 'schedule', value.scheduleList, false);
    for i := 0 to value.scheduleList.Count - 1 do
      ComposeTiming(json, '', value.scheduleList[i]);
    finishArray(json, value.scheduleList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.nutrientList.Count > 0) then
  begin
    startArray(json, 'nutrient', value.nutrientList, false);
    for i := 0 to value.nutrientList.Count - 1 do
      ComposeNutritionOrderOralDietNutrient(json, '', value.nutrientList[i]);
    finishArray(json, value.nutrientList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.textureList.Count > 0) then
  begin
    startArray(json, 'texture', value.textureList, false);
    for i := 0 to value.textureList.Count - 1 do
      ComposeNutritionOrderOralDietTexture(json, '', value.textureList[i]);
    finishArray(json, value.textureList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.fluidConsistencyTypeList.Count > 0) then
  begin
    startArray(json, 'fluidConsistencyType', value.fluidConsistencyTypeList, false);
    for i := 0 to value.fluidConsistencyTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.fluidConsistencyTypeList[i]);
    finishArray(json, value.fluidConsistencyTypeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'instruction', value.instructionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'instruction', value.instructionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietNutrient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderOralDietNutrient(jsn)); 
end;

function TFHIRJsonParser.ParseNutritionOrderOralDietNutrient(jsn : TJsonObject) : TFhirNutritionOrderOralDietNutrient;
begin
  result := TFhirNutritionOrderOralDietNutrient.Create;
  try
    ParseNutritionOrderOralDietNutrientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietNutrientProperties(jsn : TJsonObject; value : TFhirNutritionOrderOralDietNutrient);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('modifier') then
        value.modifier := ParseCodeableConcept(jsn.vObj['modifier']);
    if jsn.has('amount') then
        value.amount := ParseQuantity(jsn.vObj['amount']);
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderOralDietNutrient(json : TJSONWriter; name : string; value : TFhirNutritionOrderOralDietNutrient; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'modifier', value.modifier);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'amount', value.amount);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietTexture(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderOralDietTexture(jsn)); 
end;

function TFHIRJsonParser.ParseNutritionOrderOralDietTexture(jsn : TJsonObject) : TFhirNutritionOrderOralDietTexture;
begin
  result := TFhirNutritionOrderOralDietTexture.Create;
  try
    ParseNutritionOrderOralDietTextureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietTextureProperties(jsn : TJsonObject; value : TFhirNutritionOrderOralDietTexture);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('modifier') then
        value.modifier := ParseCodeableConcept(jsn.vObj['modifier']);
    if jsn.has('foodType') then
        value.foodType := ParseCodeableConcept(jsn.vObj['foodType']);
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderOralDietTexture(json : TJSONWriter; name : string; value : TFhirNutritionOrderOralDietTexture; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'modifier', value.modifier);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'foodType', value.foodType);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseNutritionOrderSupplement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderSupplement(jsn)); 
end;

function TFHIRJsonParser.ParseNutritionOrderSupplement(jsn : TJsonObject) : TFhirNutritionOrderSupplement;
begin
  result := TFhirNutritionOrderSupplement.Create;
  try
    ParseNutritionOrderSupplementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderSupplementProperties(jsn : TJsonObject; value : TFhirNutritionOrderSupplement);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('productName') or jsn.has('_productName') then
        value.productNameElement := parseString(jsn.node['productName'], jsn.vObj['_productName']);
    if jsn.has('schedule') then
      iterateArray(jsn.vArr['schedule'], value.scheduleList, parseTiming);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('instruction') or jsn.has('_instruction') then
        value.instructionElement := parseString(jsn.node['instruction'], jsn.vObj['_instruction']);
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderSupplement(json : TJSONWriter; name : string; value : TFhirNutritionOrderSupplement; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'productName', value.productNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'productName', value.productNameElement, false);
  if (SummaryOption in [soFull, soData]) and (value.scheduleList.Count > 0) then
  begin
    startArray(json, 'schedule', value.scheduleList, false);
    for i := 0 to value.scheduleList.Count - 1 do
      ComposeTiming(json, '', value.scheduleList[i]);
    finishArray(json, value.scheduleList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'instruction', value.instructionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'instruction', value.instructionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseNutritionOrderEnteralFormula(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderEnteralFormula(jsn)); 
end;

function TFHIRJsonParser.ParseNutritionOrderEnteralFormula(jsn : TJsonObject) : TFhirNutritionOrderEnteralFormula;
begin
  result := TFhirNutritionOrderEnteralFormula.Create;
  try
    ParseNutritionOrderEnteralFormulaProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderEnteralFormulaProperties(jsn : TJsonObject; value : TFhirNutritionOrderEnteralFormula);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('baseFormulaType') then
        value.baseFormulaType := ParseCodeableConcept(jsn.vObj['baseFormulaType']);
    if jsn.has('baseFormulaProductName') or jsn.has('_baseFormulaProductName') then
        value.baseFormulaProductNameElement := parseString(jsn.node['baseFormulaProductName'], jsn.vObj['_baseFormulaProductName']);
    if jsn.has('additiveType') then
        value.additiveType := ParseCodeableConcept(jsn.vObj['additiveType']);
    if jsn.has('additiveProductName') or jsn.has('_additiveProductName') then
        value.additiveProductNameElement := parseString(jsn.node['additiveProductName'], jsn.vObj['_additiveProductName']);
    if jsn.has('caloricDensity') then
        value.caloricDensity := ParseQuantity(jsn.vObj['caloricDensity']);
    if jsn.has('routeofAdministration') then
        value.routeofAdministration := ParseCodeableConcept(jsn.vObj['routeofAdministration']);
    if jsn.has('administration') then
      iterateArray(jsn.vArr['administration'], value.administrationList, parseNutritionOrderEnteralFormulaAdministration);
    if jsn.has('maxVolumeToDeliver') then
        value.maxVolumeToDeliver := ParseQuantity(jsn.vObj['maxVolumeToDeliver']);
    if jsn.has('administrationInstruction') or jsn.has('_administrationInstruction') then
        value.administrationInstructionElement := parseString(jsn.node['administrationInstruction'], jsn.vObj['_administrationInstruction']);
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderEnteralFormula(json : TJSONWriter; name : string; value : TFhirNutritionOrderEnteralFormula; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'baseFormulaType', value.baseFormulaType);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'baseFormulaProductName', value.baseFormulaProductNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'baseFormulaProductName', value.baseFormulaProductNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'additiveType', value.additiveType);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'additiveProductName', value.additiveProductNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'additiveProductName', value.additiveProductNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'caloricDensity', value.caloricDensity);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'routeofAdministration', value.routeofAdministration);
  if (SummaryOption in [soFull, soData]) and (value.administrationList.Count > 0) then
  begin
    startArray(json, 'administration', value.administrationList, false);
    for i := 0 to value.administrationList.Count - 1 do
      ComposeNutritionOrderEnteralFormulaAdministration(json, '', value.administrationList[i]);
    finishArray(json, value.administrationList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'maxVolumeToDeliver', value.maxVolumeToDeliver);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'administrationInstruction', value.administrationInstructionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'administrationInstruction', value.administrationInstructionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseNutritionOrderEnteralFormulaAdministration(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderEnteralFormulaAdministration(jsn)); 
end;

function TFHIRJsonParser.ParseNutritionOrderEnteralFormulaAdministration(jsn : TJsonObject) : TFhirNutritionOrderEnteralFormulaAdministration;
begin
  result := TFhirNutritionOrderEnteralFormulaAdministration.Create;
  try
    ParseNutritionOrderEnteralFormulaAdministrationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderEnteralFormulaAdministrationProperties(jsn : TJsonObject; value : TFhirNutritionOrderEnteralFormulaAdministration);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('schedule') then
        value.schedule := ParseTiming(jsn.vObj['schedule']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('rateQuantity') {a4} then
      value.rate := ParseQuantity(jsn.vObj['rateQuantity']);
    if jsn.has('rateRatio') {a4} then
      value.rate := ParseRatio(jsn.vObj['rateRatio']);
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderEnteralFormulaAdministration(json : TJSONWriter; name : string; value : TFhirNutritionOrderEnteralFormulaAdministration; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeTiming(json, 'schedule', value.schedule);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) and (value.rate is TFhirQuantity) then 
    ComposeQuantity(json, 'rateQuantity', TFhirQuantity(value.rate)) 
  else if (SummaryOption in [soFull, soData]) and (value.rate is TFhirRatio) then 
    ComposeRatio(json, 'rateRatio', TFhirRatio(value.rate)) ;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseNutritionOrder(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrder(jsn)); 
end;

function TFHIRJsonParser.ParseNutritionOrder(jsn : TJsonObject) : TFhirNutritionOrder;
begin
  result := TFhirNutritionOrder.Create;
  try
    ParseNutritionOrderProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderProperties(jsn : TJsonObject; value : TFhirNutritionOrder);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
      if jsn.has('instantiatesCanonical') or jsn.has('_instantiatesCanonical') then
      iteratePrimitiveArray(jsn.vArr['instantiatesCanonical'], jsn.vArr['_instantiatesCanonical'], value.instantiatesCanonicalList, parseCanonical);
      if jsn.has('instantiatesUri') or jsn.has('_instantiatesUri') then
      iteratePrimitiveArray(jsn.vArr['instantiatesUri'], jsn.vArr['_instantiatesUri'], value.instantiatesUriList, parseUri);
      if jsn.has('instantiates') or jsn.has('_instantiates') then
      iteratePrimitiveArray(jsn.vArr['instantiates'], jsn.vArr['_instantiates'], value.instantiatesList, parseUri);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('intent') or jsn.has('_intent') then
        value.intentElement := parseEnum(jsn.path+'/intent', jsn.node['intent'], jsn.vObj['_intent'], CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('dateTime') or jsn.has('_dateTime') then
        value.dateTimeElement := parseDateTime(jsn.node['dateTime'], jsn.vObj['_dateTime']);
    if jsn.has('orderer') then
        value.orderer := ParseReference(jsn.vObj['orderer']);
    if jsn.has('allergyIntolerance') then
      iterateArray(jsn.vArr['allergyIntolerance'], value.allergyIntoleranceList, parseReference);
    if jsn.has('foodPreferenceModifier') then
      iterateArray(jsn.vArr['foodPreferenceModifier'], value.foodPreferenceModifierList, parseCodeableConcept);
    if jsn.has('excludeFoodModifier') then
      iterateArray(jsn.vArr['excludeFoodModifier'], value.excludeFoodModifierList, parseCodeableConcept);
    if jsn.has('oralDiet') then
        value.oralDiet := ParseNutritionOrderOralDiet(jsn.vObj['oralDiet']);
    if jsn.has('supplement') then
      iterateArray(jsn.vArr['supplement'], value.supplementList, parseNutritionOrderSupplement);
    if jsn.has('enteralFormula') then
        value.enteralFormula := ParseNutritionOrderEnteralFormula(jsn.vObj['enteralFormula']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeNutritionOrder(json : TJSONWriter; name : string; value : TFhirNutritionOrder; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesCanonicalList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesCanonicalList[i].id <> '') or (value.instantiatesCanonicalList[i].hasExtensionList) {no-comments or (value.instantiatesCanonicalList[i].hasComments)});
      val := val or (value.instantiatesCanonicalList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesCanonical', value.instantiatesCanonicalList, true);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalValue(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesCanonical', value.instantiatesCanonicalList, false);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalProps(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesUriList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesUriList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesUriList[i].id <> '') or (value.instantiatesUriList[i].hasExtensionList) {no-comments or (value.instantiatesUriList[i].hasComments)});
      val := val or (value.instantiatesUriList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesUri', value.instantiatesUriList, true);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriValue(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesUri', value.instantiatesUriList, false);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriProps(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.instantiatesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesList[i].id <> '') or (value.instantiatesList[i].hasExtensionList) {no-comments or (value.instantiatesList[i].hasComments)});
      val := val or (value.instantiatesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiates', value.instantiatesList, true);
      for i := 0 to value.instantiatesList.Count - 1 do
        ComposeUriValue(json, '', value.instantiatesList[i], true);
      finishArray(json, value.instantiatesList);
    end;
    if ext then
    begin
      startArray(json, '_instantiates', value.instantiatesList, false);
      for i := 0 to value.instantiatesList.Count - 1 do
        ComposeUriProps(json, '', value.instantiatesList[i], true);
      finishArray(json, value.instantiatesList);
    end;
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirRequestStatusEnum, false);
  ComposeEnumValue(json, 'intent', value.intentElement, CODES_TFhirRequestIntentEnum, false);
  ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  ComposeDateTimeValue(json, 'dateTime', value.dateTimeElement, false);
  ComposeDateTimeProps(json, 'dateTime', value.dateTimeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'orderer', value.orderer);
  if (SummaryOption in [soFull, soData]) and (value.allergyIntoleranceList.Count > 0) then
  begin
    startArray(json, 'allergyIntolerance', value.allergyIntoleranceList, false);
    for i := 0 to value.allergyIntoleranceList.Count - 1 do
      ComposeReference(json, '', value.allergyIntoleranceList[i]);
    finishArray(json, value.allergyIntoleranceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.foodPreferenceModifierList.Count > 0) then
  begin
    startArray(json, 'foodPreferenceModifier', value.foodPreferenceModifierList, false);
    for i := 0 to value.foodPreferenceModifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.foodPreferenceModifierList[i]);
    finishArray(json, value.foodPreferenceModifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.excludeFoodModifierList.Count > 0) then
  begin
    startArray(json, 'excludeFoodModifier', value.excludeFoodModifierList, false);
    for i := 0 to value.excludeFoodModifierList.Count - 1 do
      ComposeCodeableConcept(json, '', value.excludeFoodModifierList[i]);
    finishArray(json, value.excludeFoodModifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeNutritionOrderOralDiet(json, 'oralDiet', value.oralDiet);
  if (SummaryOption in [soFull, soData]) and (value.supplementList.Count > 0) then
  begin
    startArray(json, 'supplement', value.supplementList, false);
    for i := 0 to value.supplementList.Count - 1 do
      ComposeNutritionOrderSupplement(json, '', value.supplementList[i]);
    finishArray(json, value.supplementList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeNutritionOrderEnteralFormula(json, 'enteralFormula', value.enteralFormula);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
end;

{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_NUTRITIONPRODUCT}
procedure TFHIRJsonParser.ParseNutritionProductNutrient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionProductNutrient(jsn)); 
end;

function TFHIRJsonParser.ParseNutritionProductNutrient(jsn : TJsonObject) : TFhirNutritionProductNutrient;
begin
  result := TFhirNutritionProductNutrient.Create;
  try
    ParseNutritionProductNutrientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionProductNutrientProperties(jsn : TJsonObject; value : TFhirNutritionProductNutrient);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('item') then
        value.item := ParseCodeableReference(jsn.vObj['item']);
    if jsn.has('amount') then
      iterateArray(jsn.vArr['amount'], value.amountList, parseRatio);
end;

procedure TFHIRJsonComposer.ComposeNutritionProductNutrient(json : TJSONWriter; name : string; value : TFhirNutritionProductNutrient; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableReference(json, 'item', value.item);
  if (SummaryOption in [soFull, soData]) and (value.amountList.Count > 0) then
  begin
    startArray(json, 'amount', value.amountList, false);
    for i := 0 to value.amountList.Count - 1 do
      ComposeRatio(json, '', value.amountList[i]);
    finishArray(json, value.amountList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseNutritionProductIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionProductIngredient(jsn)); 
end;

function TFHIRJsonParser.ParseNutritionProductIngredient(jsn : TJsonObject) : TFhirNutritionProductIngredient;
begin
  result := TFhirNutritionProductIngredient.Create;
  try
    ParseNutritionProductIngredientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionProductIngredientProperties(jsn : TJsonObject; value : TFhirNutritionProductIngredient);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('item') then
        value.item := ParseCodeableReference(jsn.vObj['item']);
    if jsn.has('amount') then
      iterateArray(jsn.vArr['amount'], value.amountList, parseRatio);
end;

procedure TFHIRJsonComposer.ComposeNutritionProductIngredient(json : TJSONWriter; name : string; value : TFhirNutritionProductIngredient; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableReference(json, 'item', value.item);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.amountList.Count > 0) then
  begin
    startArray(json, 'amount', value.amountList, false);
    for i := 0 to value.amountList.Count - 1 do
      ComposeRatio(json, '', value.amountList[i]);
    finishArray(json, value.amountList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseNutritionProductProductCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionProductProductCharacteristic(jsn)); 
end;

function TFHIRJsonParser.ParseNutritionProductProductCharacteristic(jsn : TJsonObject) : TFhirNutritionProductProductCharacteristic;
begin
  result := TFhirNutritionProductProductCharacteristic.Create;
  try
    ParseNutritionProductProductCharacteristicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionProductProductCharacteristicProperties(jsn : TJsonObject; value : TFhirNutritionProductProductCharacteristic);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      value.value := parseBase64Binary(jsn.node['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
end;

procedure TFHIRJsonComposer.ComposeNutritionProductProductCharacteristic(json : TJSONWriter; name : string; value : TFhirNutritionProductProductCharacteristic; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (value.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
  end
  else if (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseNutritionProductInstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionProductInstance(jsn)); 
end;

function TFHIRJsonParser.ParseNutritionProductInstance(jsn : TJsonObject) : TFhirNutritionProductInstance;
begin
  result := TFhirNutritionProductInstance.Create;
  try
    ParseNutritionProductInstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionProductInstanceProperties(jsn : TJsonObject; value : TFhirNutritionProductInstance);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('lotNumber') or jsn.has('_lotNumber') then
        value.lotNumberElement := parseString(jsn.node['lotNumber'], jsn.vObj['_lotNumber']);
    if jsn.has('expiry') or jsn.has('_expiry') then
        value.expiryElement := parseDateTime(jsn.node['expiry'], jsn.vObj['_expiry']);
    if jsn.has('useBy') or jsn.has('_useBy') then
        value.useByElement := parseDateTime(jsn.node['useBy'], jsn.vObj['_useBy']);
end;

procedure TFHIRJsonComposer.ComposeNutritionProductInstance(json : TJSONWriter; name : string; value : TFhirNutritionProductInstance; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'lotNumber', value.lotNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'lotNumber', value.lotNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'expiry', value.expiryElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'expiry', value.expiryElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'useBy', value.useByElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'useBy', value.useByElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseNutritionProduct(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionProduct(jsn)); 
end;

function TFHIRJsonParser.ParseNutritionProduct(jsn : TJsonObject) : TFhirNutritionProduct;
begin
  result := TFhirNutritionProduct.Create;
  try
    ParseNutritionProductProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionProductProperties(jsn : TJsonObject; value : TFhirNutritionProduct);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirNutritionProductStatusEnum, SYSTEMS_TFhirNutritionProductStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('manufacturer') then
      iterateArray(jsn.vArr['manufacturer'], value.manufacturerList, parseReference);
    if jsn.has('nutrient') then
      iterateArray(jsn.vArr['nutrient'], value.nutrientList, parseNutritionProductNutrient);
    if jsn.has('ingredient') then
      iterateArray(jsn.vArr['ingredient'], value.ingredientList, parseNutritionProductIngredient);
    if jsn.has('knownAllergen') then
      iterateArray(jsn.vArr['knownAllergen'], value.knownAllergenList, parseCodeableReference);
    if jsn.has('productCharacteristic') then
      iterateArray(jsn.vArr['productCharacteristic'], value.productCharacteristicList, parseNutritionProductProductCharacteristic);
    if jsn.has('instance') then
        value.instance := ParseNutritionProductInstance(jsn.vObj['instance']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeNutritionProduct(json : TJSONWriter; name : string; value : TFhirNutritionProduct; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirNutritionProductStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.manufacturerList.Count > 0) then
  begin
    startArray(json, 'manufacturer', value.manufacturerList, false);
    for i := 0 to value.manufacturerList.Count - 1 do
      ComposeReference(json, '', value.manufacturerList[i]);
    finishArray(json, value.manufacturerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.nutrientList.Count > 0) then
  begin
    startArray(json, 'nutrient', value.nutrientList, false);
    for i := 0 to value.nutrientList.Count - 1 do
      ComposeNutritionProductNutrient(json, '', value.nutrientList[i]);
    finishArray(json, value.nutrientList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.ingredientList.Count > 0) then
  begin
    startArray(json, 'ingredient', value.ingredientList, false);
    for i := 0 to value.ingredientList.Count - 1 do
      ComposeNutritionProductIngredient(json, '', value.ingredientList[i]);
    finishArray(json, value.ingredientList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.knownAllergenList.Count > 0) then
  begin
    startArray(json, 'knownAllergen', value.knownAllergenList, false);
    for i := 0 to value.knownAllergenList.Count - 1 do
      ComposeCodeableReference(json, '', value.knownAllergenList[i]);
    finishArray(json, value.knownAllergenList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.productCharacteristicList.Count > 0) then
  begin
    startArray(json, 'productCharacteristic', value.productCharacteristicList, false);
    for i := 0 to value.productCharacteristicList.Count - 1 do
      ComposeNutritionProductProductCharacteristic(json, '', value.productCharacteristicList[i]);
    finishArray(json, value.productCharacteristicList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeNutritionProductInstance(json, 'instance', value.instance);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
end;

{$ENDIF FHIR_NUTRITIONPRODUCT}
{$IFDEF FHIR_OBSERVATION}
procedure TFHIRJsonParser.ParseObservationReferenceRange(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservationReferenceRange(jsn)); 
end;

function TFHIRJsonParser.ParseObservationReferenceRange(jsn : TJsonObject) : TFhirObservationReferenceRange;
begin
  result := TFhirObservationReferenceRange.Create;
  try
    ParseObservationReferenceRangeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationReferenceRangeProperties(jsn : TJsonObject; value : TFhirObservationReferenceRange);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('low') then
        value.low := ParseQuantity(jsn.vObj['low']);
    if jsn.has('high') then
        value.high := ParseQuantity(jsn.vObj['high']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('appliesTo') then
      iterateArray(jsn.vArr['appliesTo'], value.appliesToList, parseCodeableConcept);
    if jsn.has('age') then
        value.age := ParseRange(jsn.vObj['age']);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
end;

procedure TFHIRJsonComposer.ComposeObservationReferenceRange(json : TJSONWriter; name : string; value : TFhirObservationReferenceRange; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'low', value.low);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'high', value.high);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.appliesToList.Count > 0) then
  begin
    startArray(json, 'appliesTo', value.appliesToList, false);
    for i := 0 to value.appliesToList.Count - 1 do
      ComposeCodeableConcept(json, '', value.appliesToList[i]);
    finishArray(json, value.appliesToList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(json, 'age', value.age);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseObservationComponent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservationComponent(jsn)); 
end;

function TFHIRJsonParser.ParseObservationComponent(jsn : TJsonObject) : TFhirObservationComponent;
begin
  result := TFhirObservationComponent.Create;
  try
    ParseObservationComponentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationComponentProperties(jsn : TJsonObject; value : TFhirObservationComponent);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueRange') {a4} then
      value.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      value.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueSampledData') {a4} then
      value.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valuePeriod') {a4} then
      value.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      value.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      value.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      value.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('dataAbsentReason') then
        value.dataAbsentReason := ParseCodeableConcept(jsn.vObj['dataAbsentReason']);
    if jsn.has('interpretation') then
      iterateArray(jsn.vArr['interpretation'], value.interpretationList, parseCodeableConcept);
    if jsn.has('referenceRange') then
      iterateArray(jsn.vArr['referenceRange'], value.referenceRangeList, parseObservationReferenceRange);
end;

procedure TFHIRJsonComposer.ComposeObservationComponent(json : TJSONWriter; name : string; value : TFhirObservationComponent; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(value.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(value.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(value.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(value.value), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'dataAbsentReason', value.dataAbsentReason);
  if (SummaryOption in [soFull, soData]) and (value.interpretationList.Count > 0) then
  begin
    startArray(json, 'interpretation', value.interpretationList, false);
    for i := 0 to value.interpretationList.Count - 1 do
      ComposeCodeableConcept(json, '', value.interpretationList[i]);
    finishArray(json, value.interpretationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.referenceRangeList.Count > 0) then
  begin
    startArray(json, 'referenceRange', value.referenceRangeList, false);
    for i := 0 to value.referenceRangeList.Count - 1 do
      ComposeObservationReferenceRange(json, '', value.referenceRangeList[i]);
    finishArray(json, value.referenceRangeList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseObservation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservation(jsn)); 
end;

function TFHIRJsonParser.ParseObservation(jsn : TJsonObject) : TFhirObservation;
begin
  result := TFhirObservation.Create;
  try
    ParseObservationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationProperties(jsn : TJsonObject; value : TFhirObservation);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], value.partOfList, parseReference);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('focus') then
      iterateArray(jsn.vArr['focus'], value.focusList, parseReference);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('effectivePeriod') {a4} then
      value.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveTiming') {a4} then
      value.effective := ParseTiming(jsn.vObj['effectiveTiming']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      value.effective := parseDateTime(jsn.node['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('effectiveInstant') or jsn.has('_effectiveInstant') then
      value.effective := parseInstant(jsn.node['effectiveInstant'], jsn.vObj['_effectiveInstant']);
    if jsn.has('issued') or jsn.has('_issued') then
        value.issuedElement := parseInstant(jsn.node['issued'], jsn.vObj['_issued']);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], value.performerList, parseReference);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueRange') {a4} then
      value.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      value.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueSampledData') {a4} then
      value.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valuePeriod') {a4} then
      value.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      value.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      value.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      value.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('dataAbsentReason') then
        value.dataAbsentReason := ParseCodeableConcept(jsn.vObj['dataAbsentReason']);
    if jsn.has('interpretation') then
      iterateArray(jsn.vArr['interpretation'], value.interpretationList, parseCodeableConcept);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('bodySite') then
        value.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);
    if jsn.has('method') then
        value.method := ParseCodeableConcept(jsn.vObj['method']);
    if jsn.has('specimen') then
        value.specimen := ParseReference(jsn.vObj['specimen']);
    if jsn.has('device') then
        value.device := ParseReference(jsn.vObj['device']);
    if jsn.has('referenceRange') then
      iterateArray(jsn.vArr['referenceRange'], value.referenceRangeList, parseObservationReferenceRange);
    if jsn.has('hasMember') then
      iterateArray(jsn.vArr['hasMember'], value.hasMemberList, parseReference);
    if jsn.has('derivedFrom') then
      iterateArray(jsn.vArr['derivedFrom'], value.derivedFromList, parseReference);
    if jsn.has('component') then
      iterateArray(jsn.vArr['component'], value.componentList, parseObservationComponent);
end;

procedure TFHIRJsonComposer.ComposeObservation(json : TJSONWriter; name : string; value : TFhirObservation; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.partOfList.Count > 0) then
  begin
    startArray(json, 'partOf', value.partOfList, false);
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(json, '', value.partOfList[i]);
    finishArray(json, value.partOfList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirObservationStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.focusList.Count > 0) then
  begin
    startArray(json, 'focus', value.focusList, false);
    for i := 0 to value.focusList.Count - 1 do
      ComposeReference(json, '', value.focusList[i]);
    finishArray(json, value.focusList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(value.effective)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirTiming) then 
    ComposeTiming(json, 'effectiveTiming', TFhirTiming(value.effective)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(value.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(value.effective), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'effectiveInstant', TFhirInstant(value.effective), false);
    ComposeInstantProps(json, 'effectiveInstant', TFhirInstant(value.effective), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'issued', value.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'issued', value.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.performerList.Count > 0) then
  begin
    startArray(json, 'performer', value.performerList, false);
    for i := 0 to value.performerList.Count - 1 do
      ComposeReference(json, '', value.performerList[i]);
    finishArray(json, value.performerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(value.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(value.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(value.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(value.value), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'dataAbsentReason', value.dataAbsentReason);
  if (SummaryOption in [soFull, soData]) and (value.interpretationList.Count > 0) then
  begin
    startArray(json, 'interpretation', value.interpretationList, false);
    for i := 0 to value.interpretationList.Count - 1 do
      ComposeCodeableConcept(json, '', value.interpretationList[i]);
    finishArray(json, value.interpretationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'bodySite', value.bodySite);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'method', value.method);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'specimen', value.specimen);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'device', value.device);
  if (SummaryOption in [soFull, soData]) and (value.referenceRangeList.Count > 0) then
  begin
    startArray(json, 'referenceRange', value.referenceRangeList, false);
    for i := 0 to value.referenceRangeList.Count - 1 do
      ComposeObservationReferenceRange(json, '', value.referenceRangeList[i]);
    finishArray(json, value.referenceRangeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.hasMemberList.Count > 0) then
  begin
    startArray(json, 'hasMember', value.hasMemberList, false);
    for i := 0 to value.hasMemberList.Count - 1 do
      ComposeReference(json, '', value.hasMemberList[i]);
    finishArray(json, value.hasMemberList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.derivedFromList.Count > 0) then
  begin
    startArray(json, 'derivedFrom', value.derivedFromList, false);
    for i := 0 to value.derivedFromList.Count - 1 do
      ComposeReference(json, '', value.derivedFromList[i]);
    finishArray(json, value.derivedFromList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.componentList.Count > 0) then
  begin
    startArray(json, 'component', value.componentList, false);
    for i := 0 to value.componentList.Count - 1 do
      ComposeObservationComponent(json, '', value.componentList[i]);
    finishArray(json, value.componentList);
  end;
end;

{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
procedure TFHIRJsonParser.ParseObservationDefinitionQuantitativeDetails(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservationDefinitionQuantitativeDetails(jsn)); 
end;

function TFHIRJsonParser.ParseObservationDefinitionQuantitativeDetails(jsn : TJsonObject) : TFhirObservationDefinitionQuantitativeDetails;
begin
  result := TFhirObservationDefinitionQuantitativeDetails.Create;
  try
    ParseObservationDefinitionQuantitativeDetailsProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationDefinitionQuantitativeDetailsProperties(jsn : TJsonObject; value : TFhirObservationDefinitionQuantitativeDetails);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('customaryUnit') then
        value.customaryUnit := ParseCodeableConcept(jsn.vObj['customaryUnit']);
    if jsn.has('unit') then
        value.unit_ := ParseCodeableConcept(jsn.vObj['unit']);
    if jsn.has('conversionFactor') or jsn.has('_conversionFactor') then
        value.conversionFactorElement := parseDecimal(jsn.node['conversionFactor'], jsn.vObj['_conversionFactor']);
    if jsn.has('decimalPrecision') or jsn.has('_decimalPrecision') then
        value.decimalPrecisionElement := parseInteger(jsn.node['decimalPrecision'], jsn.vObj['_decimalPrecision']);
end;

procedure TFHIRJsonComposer.ComposeObservationDefinitionQuantitativeDetails(json : TJSONWriter; name : string; value : TFhirObservationDefinitionQuantitativeDetails; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'customaryUnit', value.customaryUnit);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'unit', value.unit_);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'conversionFactor', value.conversionFactorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'conversionFactor', value.conversionFactorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'decimalPrecision', value.decimalPrecisionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'decimalPrecision', value.decimalPrecisionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseObservationDefinitionQualifiedInterval(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservationDefinitionQualifiedInterval(jsn)); 
end;

function TFHIRJsonParser.ParseObservationDefinitionQualifiedInterval(jsn : TJsonObject) : TFhirObservationDefinitionQualifiedInterval;
begin
  result := TFhirObservationDefinitionQualifiedInterval.Create;
  try
    ParseObservationDefinitionQualifiedIntervalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationDefinitionQualifiedIntervalProperties(jsn : TJsonObject; value : TFhirObservationDefinitionQualifiedInterval);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('category') or jsn.has('_category') then
        value.categoryElement := parseEnum(jsn.path+'/category', jsn.node['category'], jsn.vObj['_category'], CODES_TFhirObservationRangeCategoryEnum, SYSTEMS_TFhirObservationRangeCategoryEnum);
    if jsn.has('range') then
        value.range := ParseRange(jsn.vObj['range']);
    if jsn.has('context') then
        value.context := ParseCodeableConcept(jsn.vObj['context']);
    if jsn.has('appliesTo') then
      iterateArray(jsn.vArr['appliesTo'], value.appliesToList, parseCodeableConcept);
    if jsn.has('gender') or jsn.has('_gender') then
        value.genderElement := parseEnum(jsn.path+'/gender', jsn.node['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('age') then
        value.age := ParseRange(jsn.vObj['age']);
    if jsn.has('gestationalAge') then
        value.gestationalAge := ParseRange(jsn.vObj['gestationalAge']);
    if jsn.has('condition') or jsn.has('_condition') then
        value.conditionElement := parseString(jsn.node['condition'], jsn.vObj['_condition']);
end;

procedure TFHIRJsonComposer.ComposeObservationDefinitionQualifiedInterval(json : TJSONWriter; name : string; value : TFhirObservationDefinitionQualifiedInterval; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'category', value.categoryElement, CODES_TFhirObservationRangeCategoryEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(json, 'range', value.range);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'context', value.context);
  if (SummaryOption in [soFull, soData]) and (value.appliesToList.Count > 0) then
  begin
    startArray(json, 'appliesTo', value.appliesToList, false);
    for i := 0 to value.appliesToList.Count - 1 do
      ComposeCodeableConcept(json, '', value.appliesToList[i]);
    finishArray(json, value.appliesToList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'gender', value.genderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(json, 'age', value.age);
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(json, 'gestationalAge', value.gestationalAge);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'condition', value.conditionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'condition', value.conditionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseObservationDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservationDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseObservationDefinition(jsn : TJsonObject) : TFhirObservationDefinition;
begin
  result := TFhirObservationDefinition.Create;
  try
    ParseObservationDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationDefinitionProperties(jsn : TJsonObject; value : TFhirObservationDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('permittedDataType') or jsn.has('_permittedDataType') then
      iterateEnumArray(jsn.vArr['permittedDataType'], jsn.vArr['_permittedDataType'], jsn.path+'/permittedDataType', value.permittedDataTypeList, parseEnum, CODES_TFhirObservationDataTypeEnum, SYSTEMS_TFhirObservationDataTypeEnum);
    if jsn.has('multipleResultsAllowed') or jsn.has('_multipleResultsAllowed') then
        value.multipleResultsAllowedElement := parseBoolean(jsn.node['multipleResultsAllowed'], jsn.vObj['_multipleResultsAllowed']);
    if jsn.has('method') then
        value.method := ParseCodeableConcept(jsn.vObj['method']);
    if jsn.has('preferredReportName') or jsn.has('_preferredReportName') then
        value.preferredReportNameElement := parseString(jsn.node['preferredReportName'], jsn.vObj['_preferredReportName']);
    if jsn.has('quantitativeDetails') then
        value.quantitativeDetails := ParseObservationDefinitionQuantitativeDetails(jsn.vObj['quantitativeDetails']);
    if jsn.has('qualifiedInterval') then
      iterateArray(jsn.vArr['qualifiedInterval'], value.qualifiedIntervalList, parseObservationDefinitionQualifiedInterval);
    if jsn.has('validCodedValueSet') then
        value.validCodedValueSet := ParseReference(jsn.vObj['validCodedValueSet']);
    if jsn.has('normalCodedValueSet') then
        value.normalCodedValueSet := ParseReference(jsn.vObj['normalCodedValueSet']);
    if jsn.has('abnormalCodedValueSet') then
        value.abnormalCodedValueSet := ParseReference(jsn.vObj['abnormalCodedValueSet']);
    if jsn.has('criticalCodedValueSet') then
        value.criticalCodedValueSet := ParseReference(jsn.vObj['criticalCodedValueSet']);
end;

procedure TFHIRJsonComposer.ComposeObservationDefinition(json : TJSONWriter; name : string; value : TFhirObservationDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.permittedDataTypeList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.permittedDataTypeList.Count - 1 do
    begin
      val := val or (value.permittedDataTypeList[i].hasPrimitiveValue);
      ext := ext or ((value.permittedDataTypeList[i].id <> '') or (value.permittedDataTypeList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'permittedDataType', value.permittedDataTypeList, true);
      for i := 0 to value.permittedDataTypeList.Count - 1 do
        ComposeEnumValue(json, '', value.permittedDataTypeList[i], CODES_TFhirObservationDataTypeEnum, true);
      finishArray(json, value.permittedDataTypeList);
    end;
    if ext then
    begin
      startArray(json, '_permittedDataType', value.permittedDataTypeList, false);
      for i := 0 to value.permittedDataTypeList.Count - 1 do
        ComposeEnumProps(json, '', value.permittedDataTypeList[i], CODES_TFhirObservationDataTypeEnum, true);
      finishArray(json, value.permittedDataTypeList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'multipleResultsAllowed', value.multipleResultsAllowedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'multipleResultsAllowed', value.multipleResultsAllowedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'method', value.method);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'preferredReportName', value.preferredReportNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'preferredReportName', value.preferredReportNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeObservationDefinitionQuantitativeDetails(json, 'quantitativeDetails', value.quantitativeDetails);
  if (SummaryOption in [soFull, soData]) and (value.qualifiedIntervalList.Count > 0) then
  begin
    startArray(json, 'qualifiedInterval', value.qualifiedIntervalList, false);
    for i := 0 to value.qualifiedIntervalList.Count - 1 do
      ComposeObservationDefinitionQualifiedInterval(json, '', value.qualifiedIntervalList[i]);
    finishArray(json, value.qualifiedIntervalList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'validCodedValueSet', value.validCodedValueSet);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'normalCodedValueSet', value.normalCodedValueSet);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'abnormalCodedValueSet', value.abnormalCodedValueSet);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'criticalCodedValueSet', value.criticalCodedValueSet);
end;

{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
procedure TFHIRJsonParser.ParseOperationDefinitionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationDefinitionParameter(jsn)); 
end;

function TFHIRJsonParser.ParseOperationDefinitionParameter(jsn : TJsonObject) : TFhirOperationDefinitionParameter;
begin
  result := TFhirOperationDefinitionParameter.Create;
  try
    ParseOperationDefinitionParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionParameterProperties(jsn : TJsonObject; value : TFhirOperationDefinitionParameter);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseCode(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('use') or jsn.has('_use') then
        value.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirOperationParameterUseEnum, SYSTEMS_TFhirOperationParameterUseEnum);
    if jsn.has('min') or jsn.has('_min') then
        value.minElement := parseInteger(jsn.node['min'], jsn.vObj['_min']);
    if jsn.has('max') or jsn.has('_max') then
        value.maxElement := parseString(jsn.node['max'], jsn.vObj['_max']);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum);
      if jsn.has('targetProfile') or jsn.has('_targetProfile') then
      iteratePrimitiveArray(jsn.vArr['targetProfile'], jsn.vArr['_targetProfile'], value.targetProfileList, parseCanonical);
    if jsn.has('searchType') or jsn.has('_searchType') then
        value.searchTypeElement := parseEnum(jsn.path+'/searchType', jsn.node['searchType'], jsn.vObj['_searchType'], CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum);
    if jsn.has('binding') then
        value.binding := ParseOperationDefinitionParameterBinding(jsn.vObj['binding']);
    if jsn.has('referencedFrom') then
      iterateArray(jsn.vArr['referencedFrom'], value.referencedFromList, parseOperationDefinitionParameterReferencedFrom);
    if jsn.has('part') then
      iterateArray(jsn.vArr['part'], value.partList, parseOperationDefinitionParameter);
end;

procedure TFHIRJsonComposer.ComposeOperationDefinitionParameter(json : TJSONWriter; name : string; value : TFhirOperationDefinitionParameter; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeValue(json, 'name', value.nameElement, false);
  ComposeCodeProps(json, 'name', value.nameElement, false);
  ComposeEnumValue(json, 'use', value.useElement, CODES_TFhirOperationParameterUseEnum, false);
  ComposeIntegerValue(json, 'min', value.minElement, false);
  ComposeIntegerProps(json, 'min', value.minElement, false);
  ComposeStringValue(json, 'max', value.maxElement, false);
  ComposeStringProps(json, 'max', value.maxElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirAllTypesEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.targetProfileList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.targetProfileList.Count - 1 do
    begin
      ext := ext or ((value.targetProfileList[i].id <> '') or (value.targetProfileList[i].hasExtensionList) {no-comments or (value.targetProfileList[i].hasComments)});
      val := val or (value.targetProfileList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'targetProfile', value.targetProfileList, true);
      for i := 0 to value.targetProfileList.Count - 1 do
        ComposeCanonicalValue(json, '', value.targetProfileList[i], true);
      finishArray(json, value.targetProfileList);
    end;
    if ext then
    begin
      startArray(json, '_targetProfile', value.targetProfileList, false);
      for i := 0 to value.targetProfileList.Count - 1 do
        ComposeCanonicalProps(json, '', value.targetProfileList[i], true);
      finishArray(json, value.targetProfileList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'searchType', value.searchTypeElement, CODES_TFhirSearchParamTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeOperationDefinitionParameterBinding(json, 'binding', value.binding);
  if (SummaryOption in [soFull, soData]) and (value.referencedFromList.Count > 0) then
  begin
    startArray(json, 'referencedFrom', value.referencedFromList, false);
    for i := 0 to value.referencedFromList.Count - 1 do
      ComposeOperationDefinitionParameterReferencedFrom(json, '', value.referencedFromList[i]);
    finishArray(json, value.referencedFromList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.partList.Count > 0) then
  begin
    startArray(json, 'part', value.partList, false);
    for i := 0 to value.partList.Count - 1 do
      ComposeOperationDefinitionParameter(json, '', value.partList[i]);
    finishArray(json, value.partList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseOperationDefinitionParameterBinding(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationDefinitionParameterBinding(jsn)); 
end;

function TFHIRJsonParser.ParseOperationDefinitionParameterBinding(jsn : TJsonObject) : TFhirOperationDefinitionParameterBinding;
begin
  result := TFhirOperationDefinitionParameterBinding.Create;
  try
    ParseOperationDefinitionParameterBindingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionParameterBindingProperties(jsn : TJsonObject; value : TFhirOperationDefinitionParameterBinding);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('strength') or jsn.has('_strength') then
        value.strengthElement := parseEnum(jsn.path+'/strength', jsn.node['strength'], jsn.vObj['_strength'], CODES_TFhirBindingStrengthEnum, SYSTEMS_TFhirBindingStrengthEnum);
    if jsn.has('valueSet') or jsn.has('_valueSet') then
        value.valueSetElement := parseCanonical(jsn.node['valueSet'], jsn.vObj['_valueSet']);
end;

procedure TFHIRJsonComposer.ComposeOperationDefinitionParameterBinding(json : TJSONWriter; name : string; value : TFhirOperationDefinitionParameterBinding; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'strength', value.strengthElement, CODES_TFhirBindingStrengthEnum, false);
  ComposeCanonicalValue(json, 'valueSet', value.valueSetElement, false);
  ComposeCanonicalProps(json, 'valueSet', value.valueSetElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseOperationDefinitionParameterReferencedFrom(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationDefinitionParameterReferencedFrom(jsn)); 
end;

function TFHIRJsonParser.ParseOperationDefinitionParameterReferencedFrom(jsn : TJsonObject) : TFhirOperationDefinitionParameterReferencedFrom;
begin
  result := TFhirOperationDefinitionParameterReferencedFrom.Create;
  try
    ParseOperationDefinitionParameterReferencedFromProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionParameterReferencedFromProperties(jsn : TJsonObject; value : TFhirOperationDefinitionParameterReferencedFrom);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('source') or jsn.has('_source') then
        value.sourceElement := parseString(jsn.node['source'], jsn.vObj['_source']);
    if jsn.has('sourceId') or jsn.has('_sourceId') then
        value.sourceIdElement := parseString(jsn.node['sourceId'], jsn.vObj['_sourceId']);
end;

procedure TFHIRJsonComposer.ComposeOperationDefinitionParameterReferencedFrom(json : TJSONWriter; name : string; value : TFhirOperationDefinitionParameterReferencedFrom; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'source', value.sourceElement, false);
  ComposeStringProps(json, 'source', value.sourceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'sourceId', value.sourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'sourceId', value.sourceIdElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseOperationDefinitionOverload(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationDefinitionOverload(jsn)); 
end;

function TFHIRJsonParser.ParseOperationDefinitionOverload(jsn : TJsonObject) : TFhirOperationDefinitionOverload;
begin
  result := TFhirOperationDefinitionOverload.Create;
  try
    ParseOperationDefinitionOverloadProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionOverloadProperties(jsn : TJsonObject; value : TFhirOperationDefinitionOverload);
begin
    ParseBackboneElementProperties(jsn, value);
      if jsn.has('parameterName') or jsn.has('_parameterName') then
      iteratePrimitiveArray(jsn.vArr['parameterName'], jsn.vArr['_parameterName'], value.parameterNameList, parseString);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);
end;

procedure TFHIRJsonComposer.ComposeOperationDefinitionOverload(json : TJSONWriter; name : string; value : TFhirOperationDefinitionOverload; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.parameterNameList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.parameterNameList.Count - 1 do
    begin
      ext := ext or ((value.parameterNameList[i].id <> '') or (value.parameterNameList[i].hasExtensionList) {no-comments or (value.parameterNameList[i].hasComments)});
      val := val or (value.parameterNameList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'parameterName', value.parameterNameList, true);
      for i := 0 to value.parameterNameList.Count - 1 do
        ComposeStringValue(json, '', value.parameterNameList[i], true);
      finishArray(json, value.parameterNameList);
    end;
    if ext then
    begin
      startArray(json, '_parameterName', value.parameterNameList, false);
      for i := 0 to value.parameterNameList.Count - 1 do
        ComposeStringProps(json, '', value.parameterNameList[i], true);
      finishArray(json, value.parameterNameList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', value.commentElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseOperationDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseOperationDefinition(jsn : TJsonObject) : TFhirOperationDefinition;
begin
  result := TFhirOperationDefinition.Create;
  try
    ParseOperationDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionProperties(jsn : TJsonObject; value : TFhirOperationDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('kind') or jsn.has('_kind') then
        value.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirOperationKindEnum, SYSTEMS_TFhirOperationKindEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('affectsState') or jsn.has('_affectsState') then
        value.affectsStateElement := parseBoolean(jsn.node['affectsState'], jsn.vObj['_affectsState']);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseMarkdown(jsn.node['comment'], jsn.vObj['_comment']);
    if jsn.has('base') or jsn.has('_base') then
        value.baseElement := parseCanonical(jsn.node['base'], jsn.vObj['_base']);
    if jsn.has('resource') or jsn.has('_resource') then
      iterateEnumArray(jsn.vArr['resource'], jsn.vArr['_resource'], jsn.path+'/resource', value.resource, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('system') or jsn.has('_system') then
        value.systemElement := parseBoolean(jsn.node['system'], jsn.vObj['_system']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseBoolean(jsn.node['type'], jsn.vObj['_type']);
    if jsn.has('instance') or jsn.has('_instance') then
        value.instanceElement := parseBoolean(jsn.node['instance'], jsn.vObj['_instance']);
    if jsn.has('inputProfile') or jsn.has('_inputProfile') then
        value.inputProfileElement := parseCanonical(jsn.node['inputProfile'], jsn.vObj['_inputProfile']);
    if jsn.has('outputProfile') or jsn.has('_outputProfile') then
        value.outputProfileElement := parseCanonical(jsn.node['outputProfile'], jsn.vObj['_outputProfile']);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], value.parameterList, parseOperationDefinitionParameter);
    if jsn.has('overload') then
      iterateArray(jsn.vArr['overload'], value.overloadList, parseOperationDefinitionOverload);
end;

procedure TFHIRJsonComposer.ComposeOperationDefinition(json : TJSONWriter; name : string; value : TFhirOperationDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumValue(json, 'kind', value.kindElement, CODES_TFhirOperationKindEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'affectsState', value.affectsStateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'affectsState', value.affectsStateElement, false);
  ComposeCodeValue(json, 'code', value.codeElement, false);
  ComposeCodeProps(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'base', value.baseElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'base', value.baseElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.resource.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.resource.Count - 1 do
    begin
      val := val or (value.resource[i].hasPrimitiveValue);
      ext := ext or ((value.resource[i].id <> '') or (value.resource[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'resource', value.resource, true);
      for i := 0 to value.resource.Count - 1 do
        ComposeEnumValue(json, '', value.resource[i], CODES_TFhirResourceTypesEnum, true);
      finishArray(json, value.resource);
    end;
    if ext then
    begin
      startArray(json, '_resource', value.resource, false);
      for i := 0 to value.resource.Count - 1 do
        ComposeEnumProps(json, '', value.resource[i], CODES_TFhirResourceTypesEnum, true);
      finishArray(json, value.resource);
    end;
  end;
  ComposeBooleanValue(json, 'system', value.systemElement, false);
  ComposeBooleanProps(json, 'system', value.systemElement, false);
  ComposeBooleanValue(json, 'type', value.type_Element, false);
  ComposeBooleanProps(json, 'type', value.type_Element, false);
  ComposeBooleanValue(json, 'instance', value.instanceElement, false);
  ComposeBooleanProps(json, 'instance', value.instanceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalValue(json, 'inputProfile', value.inputProfileElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalProps(json, 'inputProfile', value.inputProfileElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalValue(json, 'outputProfile', value.outputProfileElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalProps(json, 'outputProfile', value.outputProfileElement, false);
  if (SummaryOption in [soFull, soData]) and (value.parameterList.Count > 0) then
  begin
    startArray(json, 'parameter', value.parameterList, false);
    for i := 0 to value.parameterList.Count - 1 do
      ComposeOperationDefinitionParameter(json, '', value.parameterList[i]);
    finishArray(json, value.parameterList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.overloadList.Count > 0) then
  begin
    startArray(json, 'overload', value.overloadList, false);
    for i := 0 to value.overloadList.Count - 1 do
      ComposeOperationDefinitionOverload(json, '', value.overloadList[i]);
    finishArray(json, value.overloadList);
  end;
end;

{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
procedure TFHIRJsonParser.ParseOperationOutcomeIssue(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationOutcomeIssue(jsn)); 
end;

function TFHIRJsonParser.ParseOperationOutcomeIssue(jsn : TJsonObject) : TFhirOperationOutcomeIssue;
begin
  result := TFhirOperationOutcomeIssue.Create;
  try
    ParseOperationOutcomeIssueProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationOutcomeIssueProperties(jsn : TJsonObject; value : TFhirOperationOutcomeIssue);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('severity') or jsn.has('_severity') then
        value.severityElement := parseEnum(jsn.path+'/severity', jsn.node['severity'], jsn.vObj['_severity'], CODES_TFhirIssueSeverityEnum, SYSTEMS_TFhirIssueSeverityEnum);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirIssueTypeEnum, SYSTEMS_TFhirIssueTypeEnum);
    if jsn.has('details') then
        value.details := ParseCodeableConcept(jsn.vObj['details']);
    if jsn.has('diagnostics') or jsn.has('_diagnostics') then
        value.diagnosticsElement := parseString(jsn.node['diagnostics'], jsn.vObj['_diagnostics']);
      if jsn.has('location') or jsn.has('_location') then
      iteratePrimitiveArray(jsn.vArr['location'], jsn.vArr['_location'], value.locationList, parseString);
      if jsn.has('expression') or jsn.has('_expression') then
      iteratePrimitiveArray(jsn.vArr['expression'], jsn.vArr['_expression'], value.expressionList, parseString);
end;

procedure TFHIRJsonComposer.ComposeOperationOutcomeIssue(json : TJSONWriter; name : string; value : TFhirOperationOutcomeIssue; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'severity', value.severityElement, CODES_TFhirIssueSeverityEnum, false);
  ComposeEnumValue(json, 'code', value.codeElement, CODES_TFhirIssueTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'details', value.details);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'diagnostics', value.diagnosticsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'diagnostics', value.diagnosticsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.locationList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.locationList.Count - 1 do
    begin
      ext := ext or ((value.locationList[i].id <> '') or (value.locationList[i].hasExtensionList) {no-comments or (value.locationList[i].hasComments)});
      val := val or (value.locationList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'location', value.locationList, true);
      for i := 0 to value.locationList.Count - 1 do
        ComposeStringValue(json, '', value.locationList[i], true);
      finishArray(json, value.locationList);
    end;
    if ext then
    begin
      startArray(json, '_location', value.locationList, false);
      for i := 0 to value.locationList.Count - 1 do
        ComposeStringProps(json, '', value.locationList[i], true);
      finishArray(json, value.locationList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.expressionList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.expressionList.Count - 1 do
    begin
      ext := ext or ((value.expressionList[i].id <> '') or (value.expressionList[i].hasExtensionList) {no-comments or (value.expressionList[i].hasComments)});
      val := val or (value.expressionList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'expression', value.expressionList, true);
      for i := 0 to value.expressionList.Count - 1 do
        ComposeStringValue(json, '', value.expressionList[i], true);
      finishArray(json, value.expressionList);
    end;
    if ext then
    begin
      startArray(json, '_expression', value.expressionList, false);
      for i := 0 to value.expressionList.Count - 1 do
        ComposeStringProps(json, '', value.expressionList[i], true);
      finishArray(json, value.expressionList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseOperationOutcome(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationOutcome(jsn)); 
end;

function TFHIRJsonParser.ParseOperationOutcome(jsn : TJsonObject) : TFhirOperationOutcome;
begin
  result := TFhirOperationOutcome.Create;
  try
    ParseOperationOutcomeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationOutcomeProperties(jsn : TJsonObject; value : TFhirOperationOutcome);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('issue') then
      iterateArray(jsn.vArr['issue'], value.issueList, parseOperationOutcomeIssue);
end;

procedure TFHIRJsonComposer.ComposeOperationOutcome(json : TJSONWriter; name : string; value : TFhirOperationOutcome; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (value.issueList.Count > 0) then
  begin
    startArray(json, 'issue', value.issueList, false);
    for i := 0 to value.issueList.Count - 1 do
      ComposeOperationOutcomeIssue(json, '', value.issueList[i]);
    finishArray(json, value.issueList);
  end;
end;

{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
procedure TFHIRJsonParser.ParseOrganizationContact(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOrganizationContact(jsn)); 
end;

function TFHIRJsonParser.ParseOrganizationContact(jsn : TJsonObject) : TFhirOrganizationContact;
begin
  result := TFhirOrganizationContact.Create;
  try
    ParseOrganizationContactProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOrganizationContactProperties(jsn : TJsonObject; value : TFhirOrganizationContact);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('purpose') then
        value.purpose := ParseCodeableConcept(jsn.vObj['purpose']);
    if jsn.has('name') then
        value.name := ParseHumanName(jsn.vObj['name']);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
    if jsn.has('address') then
        value.address := ParseAddress(jsn.vObj['address']);
end;

procedure TFHIRJsonComposer.ComposeOrganizationContact(json : TJSONWriter; name : string; value : TFhirOrganizationContact; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'purpose', value.purpose);
  if (SummaryOption in [soFull, soData]) then
    ComposeHumanName(json, 'name', value.name);
  if (SummaryOption in [soFull, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeAddress(json, 'address', value.address);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseOrganization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOrganization(jsn)); 
end;

function TFHIRJsonParser.ParseOrganization(jsn : TJsonObject) : TFhirOrganization;
begin
  result := TFhirOrganization.Create;
  try
    ParseOrganizationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOrganizationProperties(jsn : TJsonObject; value : TFhirOrganization);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        value.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
      if jsn.has('alias') or jsn.has('_alias') then
      iteratePrimitiveArray(jsn.vArr['alias'], jsn.vArr['_alias'], value.aliasList, parseString);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], value.addressList, parseAddress);
    if jsn.has('partOf') then
        value.partOf := ParseReference(jsn.vObj['partOf']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseOrganizationContact);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], value.endpointList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeOrganization(json : TJSONWriter; name : string; value : TFhirOrganization; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) and (value.aliasList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.aliasList.Count - 1 do
    begin
      ext := ext or ((value.aliasList[i].id <> '') or (value.aliasList[i].hasExtensionList) {no-comments or (value.aliasList[i].hasComments)});
      val := val or (value.aliasList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'alias', value.aliasList, true);
      for i := 0 to value.aliasList.Count - 1 do
        ComposeStringValue(json, '', value.aliasList[i], true);
      finishArray(json, value.aliasList);
    end;
    if ext then
    begin
      startArray(json, '_alias', value.aliasList, false);
      for i := 0 to value.aliasList.Count - 1 do
        ComposeStringProps(json, '', value.aliasList[i], true);
      finishArray(json, value.aliasList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.addressList.Count > 0) then
  begin
    startArray(json, 'address', value.addressList, false);
    for i := 0 to value.addressList.Count - 1 do
      ComposeAddress(json, '', value.addressList[i]);
    finishArray(json, value.addressList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'partOf', value.partOf);
  if (SummaryOption in [soFull, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeOrganizationContact(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.endpointList.Count > 0) then
  begin
    startArray(json, 'endpoint', value.endpointList, false);
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(json, '', value.endpointList[i]);
    finishArray(json, value.endpointList);
  end;
end;

{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
procedure TFHIRJsonParser.ParseOrganizationAffiliation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOrganizationAffiliation(jsn)); 
end;

function TFHIRJsonParser.ParseOrganizationAffiliation(jsn : TJsonObject) : TFhirOrganizationAffiliation;
begin
  result := TFhirOrganizationAffiliation.Create;
  try
    ParseOrganizationAffiliationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOrganizationAffiliationProperties(jsn : TJsonObject; value : TFhirOrganizationAffiliation);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        value.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('organization') then
        value.organization := ParseReference(jsn.vObj['organization']);
    if jsn.has('participatingOrganization') then
        value.participatingOrganization := ParseReference(jsn.vObj['participatingOrganization']);
    if jsn.has('network') then
      iterateArray(jsn.vArr['network'], value.networkList, parseReference);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], value.specialtyList, parseCodeableConcept);
    if jsn.has('location') then
      iterateArray(jsn.vArr['location'], value.locationList, parseReference);
    if jsn.has('healthcareService') then
      iterateArray(jsn.vArr['healthcareService'], value.healthcareServiceList, parseReference);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], value.endpointList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeOrganizationAffiliation(json : TJSONWriter; name : string; value : TFhirOrganizationAffiliation; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'organization', value.organization);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'participatingOrganization', value.participatingOrganization);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.networkList.Count > 0) then
  begin
    startArray(json, 'network', value.networkList, false);
    for i := 0 to value.networkList.Count - 1 do
      ComposeReference(json, '', value.networkList[i]);
    finishArray(json, value.networkList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.specialtyList.Count > 0) then
  begin
    startArray(json, 'specialty', value.specialtyList, false);
    for i := 0 to value.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', value.specialtyList[i]);
    finishArray(json, value.specialtyList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.locationList.Count > 0) then
  begin
    startArray(json, 'location', value.locationList, false);
    for i := 0 to value.locationList.Count - 1 do
      ComposeReference(json, '', value.locationList[i]);
    finishArray(json, value.locationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.healthcareServiceList.Count > 0) then
  begin
    startArray(json, 'healthcareService', value.healthcareServiceList, false);
    for i := 0 to value.healthcareServiceList.Count - 1 do
      ComposeReference(json, '', value.healthcareServiceList[i]);
    finishArray(json, value.healthcareServiceList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.endpointList.Count > 0) then
  begin
    startArray(json, 'endpoint', value.endpointList, false);
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(json, '', value.endpointList[i]);
    finishArray(json, value.endpointList);
  end;
end;

{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PACKAGEDPRODUCTDEFINITION}
procedure TFHIRJsonParser.ParsePackagedProductDefinitionLegalStatusOfSupply(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePackagedProductDefinitionLegalStatusOfSupply(jsn)); 
end;

function TFHIRJsonParser.ParsePackagedProductDefinitionLegalStatusOfSupply(jsn : TJsonObject) : TFhirPackagedProductDefinitionLegalStatusOfSupply;
begin
  result := TFhirPackagedProductDefinitionLegalStatusOfSupply.Create;
  try
    ParsePackagedProductDefinitionLegalStatusOfSupplyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePackagedProductDefinitionLegalStatusOfSupplyProperties(jsn : TJsonObject; value : TFhirPackagedProductDefinitionLegalStatusOfSupply);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('jurisdiction') then
        value.jurisdiction := ParseCodeableConcept(jsn.vObj['jurisdiction']);
end;

procedure TFHIRJsonComposer.ComposePackagedProductDefinitionLegalStatusOfSupply(json : TJSONWriter; name : string; value : TFhirPackagedProductDefinitionLegalStatusOfSupply; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'jurisdiction', value.jurisdiction);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePackagedProductDefinitionPackage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePackagedProductDefinitionPackage(jsn)); 
end;

function TFHIRJsonParser.ParsePackagedProductDefinitionPackage(jsn : TJsonObject) : TFhirPackagedProductDefinitionPackage;
begin
  result := TFhirPackagedProductDefinitionPackage.Create;
  try
    ParsePackagedProductDefinitionPackageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePackagedProductDefinitionPackageProperties(jsn : TJsonObject; value : TFhirPackagedProductDefinitionPackage);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('quantity') or jsn.has('_quantity') then
        value.quantityElement := parseInteger(jsn.node['quantity'], jsn.vObj['_quantity']);
    if jsn.has('material') then
      iterateArray(jsn.vArr['material'], value.materialList, parseCodeableConcept);
    if jsn.has('alternateMaterial') then
      iterateArray(jsn.vArr['alternateMaterial'], value.alternateMaterialList, parseCodeableConcept);
    if jsn.has('shelfLifeStorage') then
      iterateArray(jsn.vArr['shelfLifeStorage'], value.shelfLifeStorageList, parseProductShelfLife);
    if jsn.has('manufacturer') then
      iterateArray(jsn.vArr['manufacturer'], value.manufacturerList, parseReference);
    if jsn.has('property') then
      iterateArray(jsn.vArr['property'], value.property_List, parsePackagedProductDefinitionPackageProperty);
    if jsn.has('containedItem') then
      iterateArray(jsn.vArr['containedItem'], value.containedItemList, parsePackagedProductDefinitionPackageContainedItem);
    if jsn.has('package') then
      iterateArray(jsn.vArr['package'], value.packageList, parsePackagedProductDefinitionPackage);
end;

procedure TFHIRJsonComposer.ComposePackagedProductDefinitionPackage(json : TJSONWriter; name : string; value : TFhirPackagedProductDefinitionPackage; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'quantity', value.quantityElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'quantity', value.quantityElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.materialList.Count > 0) then
  begin
    startArray(json, 'material', value.materialList, false);
    for i := 0 to value.materialList.Count - 1 do
      ComposeCodeableConcept(json, '', value.materialList[i]);
    finishArray(json, value.materialList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.alternateMaterialList.Count > 0) then
  begin
    startArray(json, 'alternateMaterial', value.alternateMaterialList, false);
    for i := 0 to value.alternateMaterialList.Count - 1 do
      ComposeCodeableConcept(json, '', value.alternateMaterialList[i]);
    finishArray(json, value.alternateMaterialList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.shelfLifeStorageList.Count > 0) then
  begin
    startArray(json, 'shelfLifeStorage', value.shelfLifeStorageList, false);
    for i := 0 to value.shelfLifeStorageList.Count - 1 do
      ComposeProductShelfLife(json, '', value.shelfLifeStorageList[i]);
    finishArray(json, value.shelfLifeStorageList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.manufacturerList.Count > 0) then
  begin
    startArray(json, 'manufacturer', value.manufacturerList, false);
    for i := 0 to value.manufacturerList.Count - 1 do
      ComposeReference(json, '', value.manufacturerList[i]);
    finishArray(json, value.manufacturerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.property_List.Count > 0) then
  begin
    startArray(json, 'property', value.property_List, false);
    for i := 0 to value.property_List.Count - 1 do
      ComposePackagedProductDefinitionPackageProperty(json, '', value.property_List[i]);
    finishArray(json, value.property_List);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.containedItemList.Count > 0) then
  begin
    startArray(json, 'containedItem', value.containedItemList, false);
    for i := 0 to value.containedItemList.Count - 1 do
      ComposePackagedProductDefinitionPackageContainedItem(json, '', value.containedItemList[i]);
    finishArray(json, value.containedItemList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.packageList.Count > 0) then
  begin
    startArray(json, 'package', value.packageList, false);
    for i := 0 to value.packageList.Count - 1 do
      ComposePackagedProductDefinitionPackage(json, '', value.packageList[i]);
    finishArray(json, value.packageList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePackagedProductDefinitionPackageProperty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePackagedProductDefinitionPackageProperty(jsn)); 
end;

function TFHIRJsonParser.ParsePackagedProductDefinitionPackageProperty(jsn : TJsonObject) : TFhirPackagedProductDefinitionPackageProperty;
begin
  result := TFhirPackagedProductDefinitionPackageProperty.Create;
  try
    ParsePackagedProductDefinitionPackagePropertyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePackagedProductDefinitionPackagePropertyProperties(jsn : TJsonObject; value : TFhirPackagedProductDefinitionPackageProperty);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      value.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
end;

procedure TFHIRJsonComposer.ComposePackagedProductDefinitionPackageProperty(json : TJSONWriter; name : string; value : TFhirPackagedProductDefinitionPackageProperty; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(value.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePackagedProductDefinitionPackageContainedItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePackagedProductDefinitionPackageContainedItem(jsn)); 
end;

function TFHIRJsonParser.ParsePackagedProductDefinitionPackageContainedItem(jsn : TJsonObject) : TFhirPackagedProductDefinitionPackageContainedItem;
begin
  result := TFhirPackagedProductDefinitionPackageContainedItem.Create;
  try
    ParsePackagedProductDefinitionPackageContainedItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePackagedProductDefinitionPackageContainedItemProperties(jsn : TJsonObject; value : TFhirPackagedProductDefinitionPackageContainedItem);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('item') then
        value.item := ParseCodeableReference(jsn.vObj['item']);
    if jsn.has('amount') then
        value.amount := ParseQuantity(jsn.vObj['amount']);
end;

procedure TFHIRJsonComposer.ComposePackagedProductDefinitionPackageContainedItem(json : TJSONWriter; name : string; value : TFhirPackagedProductDefinitionPackageContainedItem; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableReference(json, 'item', value.item);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'amount', value.amount);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePackagedProductDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePackagedProductDefinition(jsn)); 
end;

function TFHIRJsonParser.ParsePackagedProductDefinition(jsn : TJsonObject) : TFhirPackagedProductDefinition;
begin
  result := TFhirPackagedProductDefinition.Create;
  try
    ParsePackagedProductDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePackagedProductDefinitionProperties(jsn : TJsonObject; value : TFhirPackagedProductDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('packageFor') then
      iterateArray(jsn.vArr['packageFor'], value.packageForList, parseReference);
    if jsn.has('status') then
        value.status := ParseCodeableConcept(jsn.vObj['status']);
    if jsn.has('statusDate') or jsn.has('_statusDate') then
        value.statusDateElement := parseDateTime(jsn.node['statusDate'], jsn.vObj['_statusDate']);
    if jsn.has('containedItemQuantity') then
      iterateArray(jsn.vArr['containedItemQuantity'], value.containedItemQuantityList, parseQuantity);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('legalStatusOfSupply') then
      iterateArray(jsn.vArr['legalStatusOfSupply'], value.legalStatusOfSupplyList, parsePackagedProductDefinitionLegalStatusOfSupply);
    if jsn.has('marketingStatus') then
      iterateArray(jsn.vArr['marketingStatus'], value.marketingStatusList, parseMarketingStatus);
    if jsn.has('characteristic') then
      iterateArray(jsn.vArr['characteristic'], value.characteristicList, parseCodeableConcept);
    if jsn.has('copackagedIndicator') or jsn.has('_copackagedIndicator') then
        value.copackagedIndicatorElement := parseBoolean(jsn.node['copackagedIndicator'], jsn.vObj['_copackagedIndicator']);
    if jsn.has('manufacturer') then
      iterateArray(jsn.vArr['manufacturer'], value.manufacturerList, parseReference);
    if jsn.has('package') then
        value.package := ParsePackagedProductDefinitionPackage(jsn.vObj['package']);
end;

procedure TFHIRJsonComposer.ComposePackagedProductDefinition(json : TJSONWriter; name : string; value : TFhirPackagedProductDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.packageForList.Count > 0) then
  begin
    startArray(json, 'packageFor', value.packageForList, false);
    for i := 0 to value.packageForList.Count - 1 do
      ComposeReference(json, '', value.packageForList[i]);
    finishArray(json, value.packageForList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', value.status);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'statusDate', value.statusDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'statusDate', value.statusDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.containedItemQuantityList.Count > 0) then
  begin
    startArray(json, 'containedItemQuantity', value.containedItemQuantityList, false);
    for i := 0 to value.containedItemQuantityList.Count - 1 do
      ComposeQuantity(json, '', value.containedItemQuantityList[i]);
    finishArray(json, value.containedItemQuantityList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.legalStatusOfSupplyList.Count > 0) then
  begin
    startArray(json, 'legalStatusOfSupply', value.legalStatusOfSupplyList, false);
    for i := 0 to value.legalStatusOfSupplyList.Count - 1 do
      ComposePackagedProductDefinitionLegalStatusOfSupply(json, '', value.legalStatusOfSupplyList[i]);
    finishArray(json, value.legalStatusOfSupplyList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.marketingStatusList.Count > 0) then
  begin
    startArray(json, 'marketingStatus', value.marketingStatusList, false);
    for i := 0 to value.marketingStatusList.Count - 1 do
      ComposeMarketingStatus(json, '', value.marketingStatusList[i]);
    finishArray(json, value.marketingStatusList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.characteristicList.Count > 0) then
  begin
    startArray(json, 'characteristic', value.characteristicList, false);
    for i := 0 to value.characteristicList.Count - 1 do
      ComposeCodeableConcept(json, '', value.characteristicList[i]);
    finishArray(json, value.characteristicList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'copackagedIndicator', value.copackagedIndicatorElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'copackagedIndicator', value.copackagedIndicatorElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.manufacturerList.Count > 0) then
  begin
    startArray(json, 'manufacturer', value.manufacturerList, false);
    for i := 0 to value.manufacturerList.Count - 1 do
      ComposeReference(json, '', value.manufacturerList[i]);
    finishArray(json, value.manufacturerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePackagedProductDefinitionPackage(json, 'package', value.package);
end;

{$ENDIF FHIR_PACKAGEDPRODUCTDEFINITION}
{$IFDEF FHIR_PARAMETERS}
procedure TFHIRJsonParser.ParseParametersParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseParametersParameter(jsn)); 
end;

function TFHIRJsonParser.ParseParametersParameter(jsn : TJsonObject) : TFhirParametersParameter;
begin
  result := TFhirParametersParameter.Create;
  try
    ParseParametersParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseParametersParameterProperties(jsn : TJsonObject; value : TFhirParametersParameter);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('valueCanonical') or jsn.has('_valueCanonical') then
      value.value := parseCanonical(jsn.node['valueCanonical'], jsn.vObj['_valueCanonical']);
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      value.value := parseCode(jsn.node['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      value.value := parseId(jsn.node['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      value.value := parseMarkdown(jsn.node['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      value.value := parseOid(jsn.node['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      value.value := parsePositiveInt(jsn.node['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      value.value := parseUnsignedInt(jsn.node['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueUrl') or jsn.has('_valueUrl') then
      value.value := parseUrl(jsn.node['valueUrl'], jsn.vObj['_valueUrl']);
    if jsn.has('valueUuid') or jsn.has('_valueUuid') then
      value.value := parseUuid(jsn.node['valueUuid'], jsn.vObj['_valueUuid']);
    if jsn.has('valueAddress') {a4} then
      value.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      value.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      value.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCoding') {a4} then
      value.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      value.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      value.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      value.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      value.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      value.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      value.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      value.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      value.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      value.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      value.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueReference') {a4} then
      value.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      value.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      value.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      value.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueContactDetail') {a4} then
      value.value := ParseContactDetail(jsn.vObj['valueContactDetail']);
    if jsn.has('valueContributor') {a4} then
      value.value := ParseContributor(jsn.vObj['valueContributor']);
    if jsn.has('valueDataRequirement') {a4} then
      value.value := ParseDataRequirement(jsn.vObj['valueDataRequirement']);
    if jsn.has('valueExpression') {a4} then
      value.value := ParseExpression(jsn.vObj['valueExpression']);
    if jsn.has('valueParameterDefinition') {a4} then
      value.value := ParseParameterDefinition(jsn.vObj['valueParameterDefinition']);
    if jsn.has('valueRelatedArtifact') {a4} then
      value.value := ParseRelatedArtifact(jsn.vObj['valueRelatedArtifact']);
    if jsn.has('valueTriggerDefinition') {a4} then
      value.value := ParseTriggerDefinition(jsn.vObj['valueTriggerDefinition']);
    if jsn.has('valueUsageContext') {a4} then
      value.value := ParseUsageContext(jsn.vObj['valueUsageContext']);
    if jsn.has('valueDosage') {a4} then
      value.value := ParseDosage(jsn.vObj['valueDosage']);
    if jsn.has('valueMeta') {a4} then
      value.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      value.value := parseBase64Binary(jsn.node['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      value.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      value.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      value.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      value.value := parseInstant(jsn.node['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      value.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      value.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      value.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
    if jsn.has('resource') then
        value.resource := ParseInnerResource(jsn.vObj['resource']);
    if jsn.has('part') then
      iterateArray(jsn.vArr['part'], value.partList, parseParametersParameter);
end;

procedure TFHIRJsonComposer.ComposeParametersParameter(json : TJSONWriter; name : string; value : TFhirParametersParameter; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'valueCanonical', TFhirCanonical(value.value), false);
    ComposeCanonicalProps(json, 'valueCanonical', TFhirCanonical(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(value.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(value.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(value.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(value.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(value.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(value.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirUrl) then 
  begin
    ComposeUrlValue(json, 'valueUrl', TFhirUrl(value.value), false);
    ComposeUrlProps(json, 'valueUrl', TFhirUrl(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirUuid) then 
  begin
    ComposeUuidValue(json, 'valueUuid', TFhirUuid(value.value), false);
    ComposeUuidProps(json, 'valueUuid', TFhirUuid(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirContactDetail) then 
    ComposeContactDetail(json, 'valueContactDetail', TFhirContactDetail(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirContributor) then 
    ComposeContributor(json, 'valueContributor', TFhirContributor(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'valueDataRequirement', TFhirDataRequirement(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirExpression) then 
    ComposeExpression(json, 'valueExpression', TFhirExpression(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'valueParameterDefinition', TFhirParameterDefinition(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'valueRelatedArtifact', TFhirRelatedArtifact(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'valueTriggerDefinition', TFhirTriggerDefinition(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirUsageContext) then 
    ComposeUsageContext(json, 'valueUsageContext', TFhirUsageContext(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirDosage) then 
    ComposeDosage(json, 'valueDosage', TFhirDosage(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(value.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(value.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(value.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(value.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(value.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(value.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(value.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(value.value), false);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(json, 'resource', value, value.resource);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.partList.Count > 0) then
  begin
    startArray(json, 'part', value.partList, false);
    for i := 0 to value.partList.Count - 1 do
      ComposeParametersParameter(json, '', value.partList[i]);
    finishArray(json, value.partList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseParameters(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseParameters(jsn)); 
end;

function TFHIRJsonParser.ParseParameters(jsn : TJsonObject) : TFhirParameters;
begin
  result := TFhirParameters.Create;
  try
    ParseParametersProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseParametersProperties(jsn : TJsonObject; value : TFhirParameters);
begin
    ParseResourceProperties(jsn, value);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], value.parameterList, parseParametersParameter);
end;

procedure TFHIRJsonComposer.ComposeParameters(json : TJSONWriter; name : string; value : TFhirParameters; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.parameterList.Count > 0) then
  begin
    startArray(json, 'parameter', value.parameterList, false);
    for i := 0 to value.parameterList.Count - 1 do
      ComposeParametersParameter(json, '', value.parameterList[i]);
    finishArray(json, value.parameterList);
  end;
end;

{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_PATIENT}
procedure TFHIRJsonParser.ParsePatientContact(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePatientContact(jsn)); 
end;

function TFHIRJsonParser.ParsePatientContact(jsn : TJsonObject) : TFhirPatientContact;
begin
  result := TFhirPatientContact.Create;
  try
    ParsePatientContactProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePatientContactProperties(jsn : TJsonObject; value : TFhirPatientContact);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('relationship') then
      iterateArray(jsn.vArr['relationship'], value.relationshipList, parseCodeableConcept);
    if jsn.has('name') then
        value.name := ParseHumanName(jsn.vObj['name']);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
    if jsn.has('address') then
        value.address := ParseAddress(jsn.vObj['address']);
    if jsn.has('gender') or jsn.has('_gender') then
        value.genderElement := parseEnum(jsn.path+'/gender', jsn.node['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('organization') then
        value.organization := ParseReference(jsn.vObj['organization']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
end;

procedure TFHIRJsonComposer.ComposePatientContact(json : TJSONWriter; name : string; value : TFhirPatientContact; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.relationshipList.Count > 0) then
  begin
    startArray(json, 'relationship', value.relationshipList, false);
    for i := 0 to value.relationshipList.Count - 1 do
      ComposeCodeableConcept(json, '', value.relationshipList[i]);
    finishArray(json, value.relationshipList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeHumanName(json, 'name', value.name);
  if (SummaryOption in [soFull, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeAddress(json, 'address', value.address);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'gender', value.genderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'organization', value.organization);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePatientCommunication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePatientCommunication(jsn)); 
end;

function TFHIRJsonParser.ParsePatientCommunication(jsn : TJsonObject) : TFhirPatientCommunication;
begin
  result := TFhirPatientCommunication.Create;
  try
    ParsePatientCommunicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePatientCommunicationProperties(jsn : TJsonObject; value : TFhirPatientCommunication);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('language') then
        value.language := ParseCodeableConcept(jsn.vObj['language']);
    if jsn.has('preferred') or jsn.has('_preferred') then
        value.preferredElement := parseBoolean(jsn.node['preferred'], jsn.vObj['_preferred']);
end;

procedure TFHIRJsonComposer.ComposePatientCommunication(json : TJSONWriter; name : string; value : TFhirPatientCommunication; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'language', value.language);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'preferred', value.preferredElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'preferred', value.preferredElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePatientLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePatientLink(jsn)); 
end;

function TFHIRJsonParser.ParsePatientLink(jsn : TJsonObject) : TFhirPatientLink;
begin
  result := TFhirPatientLink.Create;
  try
    ParsePatientLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePatientLinkProperties(jsn : TJsonObject; value : TFhirPatientLink);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('other') then
        value.other := ParseReference(jsn.vObj['other']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirLinkTypeEnum, SYSTEMS_TFhirLinkTypeEnum);
end;

procedure TFHIRJsonComposer.ComposePatientLink(json : TJSONWriter; name : string; value : TFhirPatientLink; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'other', value.other);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirLinkTypeEnum, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePatient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePatient(jsn)); 
end;

function TFHIRJsonParser.ParsePatient(jsn : TJsonObject) : TFhirPatient;
begin
  result := TFhirPatient.Create;
  try
    ParsePatientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePatientProperties(jsn : TJsonObject; value : TFhirPatient);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        value.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], value.nameList, parseHumanName);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
    if jsn.has('gender') or jsn.has('_gender') then
        value.genderElement := parseEnum(jsn.path+'/gender', jsn.node['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('birthDate') or jsn.has('_birthDate') then
        value.birthDateElement := parseDate(jsn.node['birthDate'], jsn.vObj['_birthDate']);
    if jsn.has('deceasedBoolean') or jsn.has('_deceasedBoolean') then
      value.deceased := parseBoolean(jsn.node['deceasedBoolean'], jsn.vObj['_deceasedBoolean']);
    if jsn.has('deceasedDateTime') or jsn.has('_deceasedDateTime') then
      value.deceased := parseDateTime(jsn.node['deceasedDateTime'], jsn.vObj['_deceasedDateTime']);
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], value.addressList, parseAddress);
    if jsn.has('maritalStatus') then
        value.maritalStatus := ParseCodeableConcept(jsn.vObj['maritalStatus']);
    if jsn.has('multipleBirthBoolean') or jsn.has('_multipleBirthBoolean') then
      value.multipleBirth := parseBoolean(jsn.node['multipleBirthBoolean'], jsn.vObj['_multipleBirthBoolean']);
    if jsn.has('multipleBirthInteger') or jsn.has('_multipleBirthInteger') then
      value.multipleBirth := parseInteger(jsn.node['multipleBirthInteger'], jsn.vObj['_multipleBirthInteger']);
    if jsn.has('photo') then
      iterateArray(jsn.vArr['photo'], value.photoList, parseAttachment);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parsePatientContact);
    if jsn.has('communication') then
      iterateArray(jsn.vArr['communication'], value.communicationList, parsePatientCommunication);
    if jsn.has('generalPractitioner') then
      iterateArray(jsn.vArr['generalPractitioner'], value.generalPractitionerList, parseReference);
    if jsn.has('managingOrganization') then
        value.managingOrganization := ParseReference(jsn.vObj['managingOrganization']);
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], value.link_List, parsePatientLink);
end;

procedure TFHIRJsonComposer.ComposePatient(json : TJSONWriter; name : string; value : TFhirPatient; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.nameList.Count > 0) then
  begin
    startArray(json, 'name', value.nameList, false);
    for i := 0 to value.nameList.Count - 1 do
      ComposeHumanName(json, '', value.nameList[i]);
    finishArray(json, value.nameList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'gender', value.genderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'birthDate', value.birthDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'birthDate', value.birthDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.deceased is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'deceasedBoolean', TFhirBoolean(value.deceased), false);
    ComposeBooleanProps(json, 'deceasedBoolean', TFhirBoolean(value.deceased), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.deceased is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'deceasedDateTime', TFhirDateTime(value.deceased), false);
    ComposeDateTimeProps(json, 'deceasedDateTime', TFhirDateTime(value.deceased), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.addressList.Count > 0) then
  begin
    startArray(json, 'address', value.addressList, false);
    for i := 0 to value.addressList.Count - 1 do
      ComposeAddress(json, '', value.addressList[i]);
    finishArray(json, value.addressList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'maritalStatus', value.maritalStatus);
  if (SummaryOption in [soFull, soData]) and (value.multipleBirth is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'multipleBirthBoolean', TFhirBoolean(value.multipleBirth), false);
    ComposeBooleanProps(json, 'multipleBirthBoolean', TFhirBoolean(value.multipleBirth), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.multipleBirth is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'multipleBirthInteger', TFhirInteger(value.multipleBirth), false);
    ComposeIntegerProps(json, 'multipleBirthInteger', TFhirInteger(value.multipleBirth), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.photoList.Count > 0) then
  begin
    startArray(json, 'photo', value.photoList, false);
    for i := 0 to value.photoList.Count - 1 do
      ComposeAttachment(json, '', value.photoList[i]);
    finishArray(json, value.photoList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposePatientContact(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.communicationList.Count > 0) then
  begin
    startArray(json, 'communication', value.communicationList, false);
    for i := 0 to value.communicationList.Count - 1 do
      ComposePatientCommunication(json, '', value.communicationList[i]);
    finishArray(json, value.communicationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.generalPractitionerList.Count > 0) then
  begin
    startArray(json, 'generalPractitioner', value.generalPractitionerList, false);
    for i := 0 to value.generalPractitionerList.Count - 1 do
      ComposeReference(json, '', value.generalPractitionerList[i]);
    finishArray(json, value.generalPractitionerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'managingOrganization', value.managingOrganization);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.link_List.Count > 0) then
  begin
    startArray(json, 'link', value.link_List, false);
    for i := 0 to value.link_List.Count - 1 do
      ComposePatientLink(json, '', value.link_List[i]);
    finishArray(json, value.link_List);
  end;
end;

{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
procedure TFHIRJsonParser.ParsePaymentNotice(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePaymentNotice(jsn)); 
end;

function TFHIRJsonParser.ParsePaymentNotice(jsn : TJsonObject) : TFhirPaymentNotice;
begin
  result := TFhirPaymentNotice.Create;
  try
    ParsePaymentNoticeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePaymentNoticeProperties(jsn : TJsonObject; value : TFhirPaymentNotice);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum);
    if jsn.has('request') then
        value.request := ParseReference(jsn.vObj['request']);
    if jsn.has('response') then
        value.response := ParseReference(jsn.vObj['response']);
    if jsn.has('created') or jsn.has('_created') then
        value.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);
    if jsn.has('provider') then
        value.provider := ParseReference(jsn.vObj['provider']);
    if jsn.has('payment') then
        value.payment := ParseReference(jsn.vObj['payment']);
    if jsn.has('paymentDate') or jsn.has('_paymentDate') then
        value.paymentDateElement := parseDate(jsn.node['paymentDate'], jsn.vObj['_paymentDate']);
    if jsn.has('payee') then
        value.payee := ParseReference(jsn.vObj['payee']);
    if jsn.has('recipient') then
        value.recipient := ParseReference(jsn.vObj['recipient']);
    if jsn.has('amount') then
        value.amount := ParseMoney(jsn.vObj['amount']);
    if jsn.has('paymentStatus') then
        value.paymentStatus := ParseCodeableConcept(jsn.vObj['paymentStatus']);
end;

procedure TFHIRJsonComposer.ComposePaymentNotice(json : TJSONWriter; name : string; value : TFhirPaymentNotice; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'request', value.request);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'response', value.response);
  ComposeDateTimeValue(json, 'created', value.createdElement, false);
  ComposeDateTimeProps(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'provider', value.provider);
  ComposeReference(json, 'payment', value.payment);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'paymentDate', value.paymentDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'paymentDate', value.paymentDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'payee', value.payee);
  ComposeReference(json, 'recipient', value.recipient);
  ComposeMoney(json, 'amount', value.amount);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'paymentStatus', value.paymentStatus);
end;

{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
procedure TFHIRJsonParser.ParsePaymentReconciliationDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePaymentReconciliationDetail(jsn)); 
end;

function TFHIRJsonParser.ParsePaymentReconciliationDetail(jsn : TJsonObject) : TFhirPaymentReconciliationDetail;
begin
  result := TFhirPaymentReconciliationDetail.Create;
  try
    ParsePaymentReconciliationDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePaymentReconciliationDetailProperties(jsn : TJsonObject; value : TFhirPaymentReconciliationDetail);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('predecessor') then
        value.predecessor := ParseIdentifier(jsn.vObj['predecessor']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('request') then
        value.request := ParseReference(jsn.vObj['request']);
    if jsn.has('submitter') then
        value.submitter := ParseReference(jsn.vObj['submitter']);
    if jsn.has('response') then
        value.response := ParseReference(jsn.vObj['response']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDate(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('responsible') then
        value.responsible := ParseReference(jsn.vObj['responsible']);
    if jsn.has('payee') then
        value.payee := ParseReference(jsn.vObj['payee']);
    if jsn.has('amount') then
        value.amount := ParseMoney(jsn.vObj['amount']);
end;

procedure TFHIRJsonComposer.ComposePaymentReconciliationDetail(json : TJSONWriter; name : string; value : TFhirPaymentReconciliationDetail; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'predecessor', value.predecessor);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'request', value.request);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'submitter', value.submitter);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'response', value.response);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'responsible', value.responsible);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'payee', value.payee);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', value.amount);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePaymentReconciliationProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePaymentReconciliationProcessNote(jsn)); 
end;

function TFHIRJsonParser.ParsePaymentReconciliationProcessNote(jsn : TJsonObject) : TFhirPaymentReconciliationProcessNote;
begin
  result := TFhirPaymentReconciliationProcessNote.Create;
  try
    ParsePaymentReconciliationProcessNoteProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePaymentReconciliationProcessNoteProperties(jsn : TJsonObject; value : TFhirPaymentReconciliationProcessNote);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirNoteTypeEnum, SYSTEMS_TFhirNoteTypeEnum);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
end;

procedure TFHIRJsonComposer.ComposePaymentReconciliationProcessNote(json : TJSONWriter; name : string; value : TFhirPaymentReconciliationProcessNote; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirNoteTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePaymentReconciliation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePaymentReconciliation(jsn)); 
end;

function TFHIRJsonParser.ParsePaymentReconciliation(jsn : TJsonObject) : TFhirPaymentReconciliation;
begin
  result := TFhirPaymentReconciliation.Create;
  try
    ParsePaymentReconciliationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePaymentReconciliationProperties(jsn : TJsonObject; value : TFhirPaymentReconciliation);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('created') or jsn.has('_created') then
        value.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);
    if jsn.has('paymentIssuer') then
        value.paymentIssuer := ParseReference(jsn.vObj['paymentIssuer']);
    if jsn.has('request') then
        value.request := ParseReference(jsn.vObj['request']);
    if jsn.has('requestor') then
        value.requestor := ParseReference(jsn.vObj['requestor']);
    if jsn.has('outcome') or jsn.has('_outcome') then
        value.outcomeElement := parseEnum(jsn.path+'/outcome', jsn.node['outcome'], jsn.vObj['_outcome'], CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum);
    if jsn.has('disposition') or jsn.has('_disposition') then
        value.dispositionElement := parseString(jsn.node['disposition'], jsn.vObj['_disposition']);
    if jsn.has('paymentDate') or jsn.has('_paymentDate') then
        value.paymentDateElement := parseDate(jsn.node['paymentDate'], jsn.vObj['_paymentDate']);
    if jsn.has('paymentAmount') then
        value.paymentAmount := ParseMoney(jsn.vObj['paymentAmount']);
    if jsn.has('paymentIdentifier') then
        value.paymentIdentifier := ParseIdentifier(jsn.vObj['paymentIdentifier']);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], value.detailList, parsePaymentReconciliationDetail);
    if jsn.has('formCode') then
        value.formCode := ParseCodeableConcept(jsn.vObj['formCode']);
    if jsn.has('processNote') then
      iterateArray(jsn.vArr['processNote'], value.processNoteList, parsePaymentReconciliationProcessNote);
end;

procedure TFHIRJsonComposer.ComposePaymentReconciliation(json : TJSONWriter; name : string; value : TFhirPaymentReconciliation; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  ComposeDateTimeValue(json, 'created', value.createdElement, false);
  ComposeDateTimeProps(json, 'created', value.createdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'paymentIssuer', value.paymentIssuer);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'request', value.request);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'requestor', value.requestor);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'outcome', value.outcomeElement, CODES_TFhirRemittanceOutcomeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'disposition', value.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'disposition', value.dispositionElement, false);
  ComposeDateValue(json, 'paymentDate', value.paymentDateElement, false);
  ComposeDateProps(json, 'paymentDate', value.paymentDateElement, false);
  ComposeMoney(json, 'paymentAmount', value.paymentAmount);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'paymentIdentifier', value.paymentIdentifier);
  if (SummaryOption in [soFull, soData]) and (value.detailList.Count > 0) then
  begin
    startArray(json, 'detail', value.detailList, false);
    for i := 0 to value.detailList.Count - 1 do
      ComposePaymentReconciliationDetail(json, '', value.detailList[i]);
    finishArray(json, value.detailList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'formCode', value.formCode);
  if (SummaryOption in [soFull, soData]) and (value.processNoteList.Count > 0) then
  begin
    startArray(json, 'processNote', value.processNoteList, false);
    for i := 0 to value.processNoteList.Count - 1 do
      ComposePaymentReconciliationProcessNote(json, '', value.processNoteList[i]);
    finishArray(json, value.processNoteList);
  end;
end;

{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
procedure TFHIRJsonParser.ParsePersonLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePersonLink(jsn)); 
end;

function TFHIRJsonParser.ParsePersonLink(jsn : TJsonObject) : TFhirPersonLink;
begin
  result := TFhirPersonLink.Create;
  try
    ParsePersonLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePersonLinkProperties(jsn : TJsonObject; value : TFhirPersonLink);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('target') then
        value.target := ParseReference(jsn.vObj['target']);
    if jsn.has('assurance') or jsn.has('_assurance') then
        value.assuranceElement := parseEnum(jsn.path+'/assurance', jsn.node['assurance'], jsn.vObj['_assurance'], CODES_TFhirIdentityAssuranceLevelEnum, SYSTEMS_TFhirIdentityAssuranceLevelEnum);
end;

procedure TFHIRJsonComposer.ComposePersonLink(json : TJSONWriter; name : string; value : TFhirPersonLink; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'target', value.target);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'assurance', value.assuranceElement, CODES_TFhirIdentityAssuranceLevelEnum, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePerson(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePerson(jsn)); 
end;

function TFHIRJsonParser.ParsePerson(jsn : TJsonObject) : TFhirPerson;
begin
  result := TFhirPerson.Create;
  try
    ParsePersonProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePersonProperties(jsn : TJsonObject; value : TFhirPerson);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], value.nameList, parseHumanName);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
    if jsn.has('gender') or jsn.has('_gender') then
        value.genderElement := parseEnum(jsn.path+'/gender', jsn.node['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('birthDate') or jsn.has('_birthDate') then
        value.birthDateElement := parseDate(jsn.node['birthDate'], jsn.vObj['_birthDate']);
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], value.addressList, parseAddress);
    if jsn.has('photo') then
        value.photo := ParseAttachment(jsn.vObj['photo']);
    if jsn.has('managingOrganization') then
        value.managingOrganization := ParseReference(jsn.vObj['managingOrganization']);
    if jsn.has('active') or jsn.has('_active') then
        value.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], value.link_List, parsePersonLink);
end;

procedure TFHIRJsonComposer.ComposePerson(json : TJSONWriter; name : string; value : TFhirPerson; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.nameList.Count > 0) then
  begin
    startArray(json, 'name', value.nameList, false);
    for i := 0 to value.nameList.Count - 1 do
      ComposeHumanName(json, '', value.nameList[i]);
    finishArray(json, value.nameList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'gender', value.genderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'birthDate', value.birthDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'birthDate', value.birthDateElement, false);
  if (SummaryOption in [soFull, soData]) and (value.addressList.Count > 0) then
  begin
    startArray(json, 'address', value.addressList, false);
    for i := 0 to value.addressList.Count - 1 do
      ComposeAddress(json, '', value.addressList[i]);
    finishArray(json, value.addressList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeAttachment(json, 'photo', value.photo);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'managingOrganization', value.managingOrganization);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soData]) and (value.link_List.Count > 0) then
  begin
    startArray(json, 'link', value.link_List, false);
    for i := 0 to value.link_List.Count - 1 do
      ComposePersonLink(json, '', value.link_List[i]);
    finishArray(json, value.link_List);
  end;
end;

{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
procedure TFHIRJsonParser.ParsePlanDefinitionGoal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionGoal(jsn)); 
end;

function TFHIRJsonParser.ParsePlanDefinitionGoal(jsn : TJsonObject) : TFhirPlanDefinitionGoal;
begin
  result := TFhirPlanDefinitionGoal.Create;
  try
    ParsePlanDefinitionGoalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionGoalProperties(jsn : TJsonObject; value : TFhirPlanDefinitionGoal);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('description') then
        value.description := ParseCodeableConcept(jsn.vObj['description']);
    if jsn.has('priority') then
        value.priority := ParseCodeableConcept(jsn.vObj['priority']);
    if jsn.has('start') then
        value.start := ParseCodeableConcept(jsn.vObj['start']);
    if jsn.has('addresses') then
      iterateArray(jsn.vArr['addresses'], value.addressesList, parseCodeableConcept);
    if jsn.has('documentation') then
      iterateArray(jsn.vArr['documentation'], value.documentationList, parseRelatedArtifact);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], value.targetList, parsePlanDefinitionGoalTarget);
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionGoal(json : TJSONWriter; name : string; value : TFhirPlanDefinitionGoal; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  ComposeCodeableConcept(json, 'description', value.description);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'priority', value.priority);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'start', value.start);
  if (SummaryOption in [soFull, soData]) and (value.addressesList.Count > 0) then
  begin
    startArray(json, 'addresses', value.addressesList, false);
    for i := 0 to value.addressesList.Count - 1 do
      ComposeCodeableConcept(json, '', value.addressesList[i]);
    finishArray(json, value.addressesList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.documentationList.Count > 0) then
  begin
    startArray(json, 'documentation', value.documentationList, false);
    for i := 0 to value.documentationList.Count - 1 do
      ComposeRelatedArtifact(json, '', value.documentationList[i]);
    finishArray(json, value.documentationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.targetList.Count > 0) then
  begin
    startArray(json, 'target', value.targetList, false);
    for i := 0 to value.targetList.Count - 1 do
      ComposePlanDefinitionGoalTarget(json, '', value.targetList[i]);
    finishArray(json, value.targetList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePlanDefinitionGoalTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionGoalTarget(jsn)); 
end;

function TFHIRJsonParser.ParsePlanDefinitionGoalTarget(jsn : TJsonObject) : TFhirPlanDefinitionGoalTarget;
begin
  result := TFhirPlanDefinitionGoalTarget.Create;
  try
    ParsePlanDefinitionGoalTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionGoalTargetProperties(jsn : TJsonObject; value : TFhirPlanDefinitionGoalTarget);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('measure') then
        value.measure := ParseCodeableConcept(jsn.vObj['measure']);
    if jsn.has('detailQuantity') {a4} then
      value.detail := ParseQuantity(jsn.vObj['detailQuantity']);
    if jsn.has('detailRange') {a4} then
      value.detail := ParseRange(jsn.vObj['detailRange']);
    if jsn.has('detailCodeableConcept') {a4} then
      value.detail := ParseCodeableConcept(jsn.vObj['detailCodeableConcept']);
    if jsn.has('due') then
        value.due := ParseDuration(jsn.vObj['due']);
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionGoalTarget(json : TJSONWriter; name : string; value : TFhirPlanDefinitionGoalTarget; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'measure', value.measure);
  if (SummaryOption in [soFull, soData]) and (value.detail is TFhirQuantity) then 
    ComposeQuantity(json, 'detailQuantity', TFhirQuantity(value.detail)) 
  else if (SummaryOption in [soFull, soData]) and (value.detail is TFhirRange) then 
    ComposeRange(json, 'detailRange', TFhirRange(value.detail)) 
  else if (SummaryOption in [soFull, soData]) and (value.detail is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'detailCodeableConcept', TFhirCodeableConcept(value.detail)) ;
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'due', value.due);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePlanDefinitionAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionAction(jsn)); 
end;

function TFHIRJsonParser.ParsePlanDefinitionAction(jsn : TJsonObject) : TFhirPlanDefinitionAction;
begin
  result := TFhirPlanDefinitionAction.Create;
  try
    ParsePlanDefinitionActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionProperties(jsn : TJsonObject; value : TFhirPlanDefinitionAction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('prefix') or jsn.has('_prefix') then
        value.prefixElement := parseString(jsn.node['prefix'], jsn.vObj['_prefix']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('textEquivalent') or jsn.has('_textEquivalent') then
        value.textEquivalentElement := parseString(jsn.node['textEquivalent'], jsn.vObj['_textEquivalent']);
    if jsn.has('priority') or jsn.has('_priority') then
        value.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCodeableConcept);
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], value.reasonList, parseCodeableConcept);
    if jsn.has('documentation') then
      iterateArray(jsn.vArr['documentation'], value.documentationList, parseRelatedArtifact);
      if jsn.has('goalId') or jsn.has('_goalId') then
      iteratePrimitiveArray(jsn.vArr['goalId'], jsn.vArr['_goalId'], value.goalIdList, parseId);
    if jsn.has('subjectCodeableConcept') {a4} then
      value.subject := ParseCodeableConcept(jsn.vObj['subjectCodeableConcept']);
    if jsn.has('subjectReference') {a3} then
      value.subject := ParseReference(jsn.vObj['subjectReference']);
    if jsn.has('subjectCanonical') or jsn.has('_subjectCanonical') then
      value.subject := parseCanonical(jsn.node['subjectCanonical'], jsn.vObj['_subjectCanonical']);
    if jsn.has('trigger') then
      iterateArray(jsn.vArr['trigger'], value.triggerList, parseTriggerDefinition);
    if jsn.has('condition') then
      iterateArray(jsn.vArr['condition'], value.conditionList, parsePlanDefinitionActionCondition);
    if jsn.has('input') then
      iterateArray(jsn.vArr['input'], value.inputList, parseDataRequirement);
    if jsn.has('output') then
      iterateArray(jsn.vArr['output'], value.outputList, parseDataRequirement);
    if jsn.has('relatedAction') then
      iterateArray(jsn.vArr['relatedAction'], value.relatedActionList, parsePlanDefinitionActionRelatedAction);
    if jsn.has('timingAge') {a4} then
      value.timing := ParseAge(jsn.vObj['timingAge']);
    if jsn.has('timingPeriod') {a4} then
      value.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDuration') {a4} then
      value.timing := ParseDuration(jsn.vObj['timingDuration']);
    if jsn.has('timingRange') {a4} then
      value.timing := ParseRange(jsn.vObj['timingRange']);
    if jsn.has('timingTiming') {a4} then
      value.timing := ParseTiming(jsn.vObj['timingTiming']);
    if jsn.has('timingDateTime') or jsn.has('_timingDateTime') then
      value.timing := parseDateTime(jsn.node['timingDateTime'], jsn.vObj['_timingDateTime']);
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], value.participantList, parsePlanDefinitionActionParticipant);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('groupingBehavior') or jsn.has('_groupingBehavior') then
        value.groupingBehaviorElement := parseEnum(jsn.path+'/groupingBehavior', jsn.node['groupingBehavior'], jsn.vObj['_groupingBehavior'], CODES_TFhirActionGroupingBehaviorEnum, SYSTEMS_TFhirActionGroupingBehaviorEnum);
    if jsn.has('selectionBehavior') or jsn.has('_selectionBehavior') then
        value.selectionBehaviorElement := parseEnum(jsn.path+'/selectionBehavior', jsn.node['selectionBehavior'], jsn.vObj['_selectionBehavior'], CODES_TFhirActionSelectionBehaviorEnum, SYSTEMS_TFhirActionSelectionBehaviorEnum);
    if jsn.has('requiredBehavior') or jsn.has('_requiredBehavior') then
        value.requiredBehaviorElement := parseEnum(jsn.path+'/requiredBehavior', jsn.node['requiredBehavior'], jsn.vObj['_requiredBehavior'], CODES_TFhirActionRequiredBehaviorEnum, SYSTEMS_TFhirActionRequiredBehaviorEnum);
    if jsn.has('precheckBehavior') or jsn.has('_precheckBehavior') then
        value.precheckBehaviorElement := parseEnum(jsn.path+'/precheckBehavior', jsn.node['precheckBehavior'], jsn.vObj['_precheckBehavior'], CODES_TFhirActionPrecheckBehaviorEnum, SYSTEMS_TFhirActionPrecheckBehaviorEnum);
    if jsn.has('cardinalityBehavior') or jsn.has('_cardinalityBehavior') then
        value.cardinalityBehaviorElement := parseEnum(jsn.path+'/cardinalityBehavior', jsn.node['cardinalityBehavior'], jsn.vObj['_cardinalityBehavior'], CODES_TFhirActionCardinalityBehaviorEnum, SYSTEMS_TFhirActionCardinalityBehaviorEnum);
    if jsn.has('definitionCanonical') or jsn.has('_definitionCanonical') then
      value.definition := parseCanonical(jsn.node['definitionCanonical'], jsn.vObj['_definitionCanonical']);
    if jsn.has('definitionUri') or jsn.has('_definitionUri') then
      value.definition := parseUri(jsn.node['definitionUri'], jsn.vObj['_definitionUri']);
    if jsn.has('transform') or jsn.has('_transform') then
        value.transformElement := parseCanonical(jsn.node['transform'], jsn.vObj['_transform']);
    if jsn.has('dynamicValue') then
      iterateArray(jsn.vArr['dynamicValue'], value.dynamicValueList, parsePlanDefinitionActionDynamicValue);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], value.actionList, parsePlanDefinitionAction);
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionAction(json : TJSONWriter; name : string; value : TFhirPlanDefinitionAction; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'prefix', value.prefixElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'prefix', value.prefixElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'textEquivalent', value.textEquivalentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'textEquivalent', value.textEquivalentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonList.Count > 0) then
  begin
    startArray(json, 'reason', value.reasonList, false);
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonList[i]);
    finishArray(json, value.reasonList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.documentationList.Count > 0) then
  begin
    startArray(json, 'documentation', value.documentationList, false);
    for i := 0 to value.documentationList.Count - 1 do
      ComposeRelatedArtifact(json, '', value.documentationList[i]);
    finishArray(json, value.documentationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.goalIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.goalIdList.Count - 1 do
    begin
      ext := ext or ((value.goalIdList[i].id <> '') or (value.goalIdList[i].hasExtensionList) {no-comments or (value.goalIdList[i].hasComments)});
      val := val or (value.goalIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'goalId', value.goalIdList, true);
      for i := 0 to value.goalIdList.Count - 1 do
        ComposeIdValue(json, '', value.goalIdList[i], true);
      finishArray(json, value.goalIdList);
    end;
    if ext then
    begin
      startArray(json, '_goalId', value.goalIdList, false);
      for i := 0 to value.goalIdList.Count - 1 do
        ComposeIdProps(json, '', value.goalIdList[i], true);
      finishArray(json, value.goalIdList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject)) 
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirReference) then
    ComposeReference(json, 'subjectReference', TFhirReference(value.subject))
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'subjectCanonical', TFhirCanonical(value.subject), false);
    ComposeCanonicalProps(json, 'subjectCanonical', TFhirCanonical(value.subject), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.triggerList.Count > 0) then
  begin
    startArray(json, 'trigger', value.triggerList, false);
    for i := 0 to value.triggerList.Count - 1 do
      ComposeTriggerDefinition(json, '', value.triggerList[i]);
    finishArray(json, value.triggerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.conditionList.Count > 0) then
  begin
    startArray(json, 'condition', value.conditionList, false);
    for i := 0 to value.conditionList.Count - 1 do
      ComposePlanDefinitionActionCondition(json, '', value.conditionList[i]);
    finishArray(json, value.conditionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.inputList.Count > 0) then
  begin
    startArray(json, 'input', value.inputList, false);
    for i := 0 to value.inputList.Count - 1 do
      ComposeDataRequirement(json, '', value.inputList[i]);
    finishArray(json, value.inputList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.outputList.Count > 0) then
  begin
    startArray(json, 'output', value.outputList, false);
    for i := 0 to value.outputList.Count - 1 do
      ComposeDataRequirement(json, '', value.outputList[i]);
    finishArray(json, value.outputList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedActionList.Count > 0) then
  begin
    startArray(json, 'relatedAction', value.relatedActionList, false);
    for i := 0 to value.relatedActionList.Count - 1 do
      ComposePlanDefinitionActionRelatedAction(json, '', value.relatedActionList[i]);
    finishArray(json, value.relatedActionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.timing is TFhirAge) then 
    ComposeAge(json, 'timingAge', TFhirAge(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDuration) then 
    ComposeDuration(json, 'timingDuration', TFhirDuration(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirRange) then 
    ComposeRange(json, 'timingRange', TFhirRange(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirTiming) then 
    ComposeTiming(json, 'timingTiming', TFhirTiming(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timingDateTime', TFhirDateTime(value.timing), false);
    ComposeDateTimeProps(json, 'timingDateTime', TFhirDateTime(value.timing), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.participantList.Count > 0) then
  begin
    startArray(json, 'participant', value.participantList, false);
    for i := 0 to value.participantList.Count - 1 do
      ComposePlanDefinitionActionParticipant(json, '', value.participantList[i]);
    finishArray(json, value.participantList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'groupingBehavior', value.groupingBehaviorElement, CODES_TFhirActionGroupingBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'selectionBehavior', value.selectionBehaviorElement, CODES_TFhirActionSelectionBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'requiredBehavior', value.requiredBehaviorElement, CODES_TFhirActionRequiredBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'precheckBehavior', value.precheckBehaviorElement, CODES_TFhirActionPrecheckBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'cardinalityBehavior', value.cardinalityBehaviorElement, CODES_TFhirActionCardinalityBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.definition is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'definitionCanonical', TFhirCanonical(value.definition), false);
    ComposeCanonicalProps(json, 'definitionCanonical', TFhirCanonical(value.definition), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.definition is TFhirUri) then 
  begin
    ComposeUriValue(json, 'definitionUri', TFhirUri(value.definition), false);
    ComposeUriProps(json, 'definitionUri', TFhirUri(value.definition), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalValue(json, 'transform', value.transformElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalProps(json, 'transform', value.transformElement, false);
  if (SummaryOption in [soFull, soData]) and (value.dynamicValueList.Count > 0) then
  begin
    startArray(json, 'dynamicValue', value.dynamicValueList, false);
    for i := 0 to value.dynamicValueList.Count - 1 do
      ComposePlanDefinitionActionDynamicValue(json, '', value.dynamicValueList[i]);
    finishArray(json, value.dynamicValueList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.actionList.Count > 0) then
  begin
    startArray(json, 'action', value.actionList, false);
    for i := 0 to value.actionList.Count - 1 do
      ComposePlanDefinitionAction(json, '', value.actionList[i]);
    finishArray(json, value.actionList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionCondition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionActionCondition(jsn)); 
end;

function TFHIRJsonParser.ParsePlanDefinitionActionCondition(jsn : TJsonObject) : TFhirPlanDefinitionActionCondition;
begin
  result := TFhirPlanDefinitionActionCondition.Create;
  try
    ParsePlanDefinitionActionConditionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionConditionProperties(jsn : TJsonObject; value : TFhirPlanDefinitionActionCondition);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('kind') or jsn.has('_kind') then
        value.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirActionConditionKindEnum, SYSTEMS_TFhirActionConditionKindEnum);
    if jsn.has('expression') then
        value.expression := ParseExpression(jsn.vObj['expression']);
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionActionCondition(json : TJSONWriter; name : string; value : TFhirPlanDefinitionActionCondition; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'kind', value.kindElement, CODES_TFhirActionConditionKindEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeExpression(json, 'expression', value.expression);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionRelatedAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionActionRelatedAction(jsn)); 
end;

function TFHIRJsonParser.ParsePlanDefinitionActionRelatedAction(jsn : TJsonObject) : TFhirPlanDefinitionActionRelatedAction;
begin
  result := TFhirPlanDefinitionActionRelatedAction.Create;
  try
    ParsePlanDefinitionActionRelatedActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionRelatedActionProperties(jsn : TJsonObject; value : TFhirPlanDefinitionActionRelatedAction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('actionId') or jsn.has('_actionId') then
        value.actionIdElement := parseId(jsn.node['actionId'], jsn.vObj['_actionId']);
    if jsn.has('relationship') or jsn.has('_relationship') then
        value.relationshipElement := parseEnum(jsn.path+'/relationship', jsn.node['relationship'], jsn.vObj['_relationship'], CODES_TFhirActionRelationshipTypeEnum, SYSTEMS_TFhirActionRelationshipTypeEnum);
    if jsn.has('offsetDuration') {a4} then
      value.offset := ParseDuration(jsn.vObj['offsetDuration']);
    if jsn.has('offsetRange') {a4} then
      value.offset := ParseRange(jsn.vObj['offsetRange']);
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionActionRelatedAction(json : TJSONWriter; name : string; value : TFhirPlanDefinitionActionRelatedAction; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeIdValue(json, 'actionId', value.actionIdElement, false);
  ComposeIdProps(json, 'actionId', value.actionIdElement, false);
  ComposeEnumValue(json, 'relationship', value.relationshipElement, CODES_TFhirActionRelationshipTypeEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.offset is TFhirDuration) then 
    ComposeDuration(json, 'offsetDuration', TFhirDuration(value.offset)) 
  else if (SummaryOption in [soFull, soData]) and (value.offset is TFhirRange) then 
    ComposeRange(json, 'offsetRange', TFhirRange(value.offset)) ;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionActionParticipant(jsn)); 
end;

function TFHIRJsonParser.ParsePlanDefinitionActionParticipant(jsn : TJsonObject) : TFhirPlanDefinitionActionParticipant;
begin
  result := TFhirPlanDefinitionActionParticipant.Create;
  try
    ParsePlanDefinitionActionParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionParticipantProperties(jsn : TJsonObject; value : TFhirPlanDefinitionActionParticipant);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirActionParticipantTypeEnum, SYSTEMS_TFhirActionParticipantTypeEnum);
    if jsn.has('role') then
        value.role := ParseCodeableConcept(jsn.vObj['role']);
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionActionParticipant(json : TJSONWriter; name : string; value : TFhirPlanDefinitionActionParticipant; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirActionParticipantTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', value.role);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionDynamicValue(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionActionDynamicValue(jsn)); 
end;

function TFHIRJsonParser.ParsePlanDefinitionActionDynamicValue(jsn : TJsonObject) : TFhirPlanDefinitionActionDynamicValue;
begin
  result := TFhirPlanDefinitionActionDynamicValue.Create;
  try
    ParsePlanDefinitionActionDynamicValueProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionDynamicValueProperties(jsn : TJsonObject; value : TFhirPlanDefinitionActionDynamicValue);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('path') or jsn.has('_path') then
        value.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);
    if jsn.has('expression') then
        value.expression := ParseExpression(jsn.vObj['expression']);
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionActionDynamicValue(json : TJSONWriter; name : string; value : TFhirPlanDefinitionActionDynamicValue; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', value.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', value.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeExpression(json, 'expression', value.expression);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePlanDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinition(jsn)); 
end;

function TFHIRJsonParser.ParsePlanDefinition(jsn : TJsonObject) : TFhirPlanDefinition;
begin
  result := TFhirPlanDefinition.Create;
  try
    ParsePlanDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionProperties(jsn : TJsonObject; value : TFhirPlanDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('subtitle') or jsn.has('_subtitle') then
        value.subtitleElement := parseString(jsn.node['subtitle'], jsn.vObj['_subtitle']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('subjectCodeableConcept') {a4} then
      value.subject := ParseCodeableConcept(jsn.vObj['subjectCodeableConcept']);
    if jsn.has('subjectReference') {a3} then
      value.subject := ParseReference(jsn.vObj['subjectReference']);
    if jsn.has('subjectCanonical') or jsn.has('_subjectCanonical') then
      value.subject := parseCanonical(jsn.node['subjectCanonical'], jsn.vObj['_subjectCanonical']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('usage') or jsn.has('_usage') then
        value.usageElement := parseString(jsn.node['usage'], jsn.vObj['_usage']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        value.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        value.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);
    if jsn.has('effectivePeriod') then
        value.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], value.topicList, parseCodeableConcept);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseContactDetail);
    if jsn.has('editor') then
      iterateArray(jsn.vArr['editor'], value.editorList, parseContactDetail);
    if jsn.has('reviewer') then
      iterateArray(jsn.vArr['reviewer'], value.reviewerList, parseContactDetail);
    if jsn.has('endorser') then
      iterateArray(jsn.vArr['endorser'], value.endorserList, parseContactDetail);
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], value.relatedArtifactList, parseRelatedArtifact);
      if jsn.has('library') or jsn.has('_library') then
      iteratePrimitiveArray(jsn.vArr['library'], jsn.vArr['_library'], value.library_List, parseCanonical);
    if jsn.has('goal') then
      iterateArray(jsn.vArr['goal'], value.goalList, parsePlanDefinitionGoal);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], value.actionList, parsePlanDefinitionAction);
end;

procedure TFHIRJsonComposer.ComposePlanDefinition(json : TJSONWriter; name : string; value : TFhirPlanDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'subtitle', value.subtitleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'subtitle', value.subtitleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject)) 
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirReference) then
    ComposeReference(json, 'subjectReference', TFhirReference(value.subject))
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'subjectCanonical', TFhirCanonical(value.subject), false);
    ComposeCanonicalProps(json, 'subjectCanonical', TFhirCanonical(value.subject), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', value.effectivePeriod);
  if (SummaryOption in [soFull, soData]) and (value.topicList.Count > 0) then
  begin
    startArray(json, 'topic', value.topicList, false);
    for i := 0 to value.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', value.topicList[i]);
    finishArray(json, value.topicList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.editorList.Count > 0) then
  begin
    startArray(json, 'editor', value.editorList, false);
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(json, '', value.editorList[i]);
    finishArray(json, value.editorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reviewerList.Count > 0) then
  begin
    startArray(json, 'reviewer', value.reviewerList, false);
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(json, '', value.reviewerList[i]);
    finishArray(json, value.reviewerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.endorserList.Count > 0) then
  begin
    startArray(json, 'endorser', value.endorserList, false);
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(json, '', value.endorserList[i]);
    finishArray(json, value.endorserList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedArtifactList.Count > 0) then
  begin
    startArray(json, 'relatedArtifact', value.relatedArtifactList, false);
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', value.relatedArtifactList[i]);
    finishArray(json, value.relatedArtifactList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.library_List.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.library_List.Count - 1 do
    begin
      ext := ext or ((value.library_List[i].id <> '') or (value.library_List[i].hasExtensionList) {no-comments or (value.library_List[i].hasComments)});
      val := val or (value.library_List[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'library', value.library_List, true);
      for i := 0 to value.library_List.Count - 1 do
        ComposeCanonicalValue(json, '', value.library_List[i], true);
      finishArray(json, value.library_List);
    end;
    if ext then
    begin
      startArray(json, '_library', value.library_List, false);
      for i := 0 to value.library_List.Count - 1 do
        ComposeCanonicalProps(json, '', value.library_List[i], true);
      finishArray(json, value.library_List);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.goalList.Count > 0) then
  begin
    startArray(json, 'goal', value.goalList, false);
    for i := 0 to value.goalList.Count - 1 do
      ComposePlanDefinitionGoal(json, '', value.goalList[i]);
    finishArray(json, value.goalList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.actionList.Count > 0) then
  begin
    startArray(json, 'action', value.actionList, false);
    for i := 0 to value.actionList.Count - 1 do
      ComposePlanDefinitionAction(json, '', value.actionList[i]);
    finishArray(json, value.actionList);
  end;
end;

{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
procedure TFHIRJsonParser.ParsePractitionerQualification(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitionerQualification(jsn)); 
end;

function TFHIRJsonParser.ParsePractitionerQualification(jsn : TJsonObject) : TFhirPractitionerQualification;
begin
  result := TFhirPractitionerQualification.Create;
  try
    ParsePractitionerQualificationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerQualificationProperties(jsn : TJsonObject; value : TFhirPractitionerQualification);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('issuer') then
        value.issuer := ParseReference(jsn.vObj['issuer']);
end;

procedure TFHIRJsonComposer.ComposePractitionerQualification(json : TJSONWriter; name : string; value : TFhirPractitionerQualification; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'issuer', value.issuer);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePractitioner(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitioner(jsn)); 
end;

function TFHIRJsonParser.ParsePractitioner(jsn : TJsonObject) : TFhirPractitioner;
begin
  result := TFhirPractitioner.Create;
  try
    ParsePractitionerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerProperties(jsn : TJsonObject; value : TFhirPractitioner);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        value.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], value.nameList, parseHumanName);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], value.addressList, parseAddress);
    if jsn.has('gender') or jsn.has('_gender') then
        value.genderElement := parseEnum(jsn.path+'/gender', jsn.node['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('birthDate') or jsn.has('_birthDate') then
        value.birthDateElement := parseDate(jsn.node['birthDate'], jsn.vObj['_birthDate']);
    if jsn.has('photo') then
      iterateArray(jsn.vArr['photo'], value.photoList, parseAttachment);
    if jsn.has('qualification') then
      iterateArray(jsn.vArr['qualification'], value.qualificationList, parsePractitionerQualification);
    if jsn.has('communication') then
      iterateArray(jsn.vArr['communication'], value.communicationList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposePractitioner(json : TJSONWriter; name : string; value : TFhirPractitioner; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.nameList.Count > 0) then
  begin
    startArray(json, 'name', value.nameList, false);
    for i := 0 to value.nameList.Count - 1 do
      ComposeHumanName(json, '', value.nameList[i]);
    finishArray(json, value.nameList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.addressList.Count > 0) then
  begin
    startArray(json, 'address', value.addressList, false);
    for i := 0 to value.addressList.Count - 1 do
      ComposeAddress(json, '', value.addressList[i]);
    finishArray(json, value.addressList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'gender', value.genderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'birthDate', value.birthDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'birthDate', value.birthDateElement, false);
  if (SummaryOption in [soFull, soData]) and (value.photoList.Count > 0) then
  begin
    startArray(json, 'photo', value.photoList, false);
    for i := 0 to value.photoList.Count - 1 do
      ComposeAttachment(json, '', value.photoList[i]);
    finishArray(json, value.photoList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.qualificationList.Count > 0) then
  begin
    startArray(json, 'qualification', value.qualificationList, false);
    for i := 0 to value.qualificationList.Count - 1 do
      ComposePractitionerQualification(json, '', value.qualificationList[i]);
    finishArray(json, value.qualificationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.communicationList.Count > 0) then
  begin
    startArray(json, 'communication', value.communicationList, false);
    for i := 0 to value.communicationList.Count - 1 do
      ComposeCodeableConcept(json, '', value.communicationList[i]);
    finishArray(json, value.communicationList);
  end;
end;

{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
procedure TFHIRJsonParser.ParsePractitionerRoleAvailableTime(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitionerRoleAvailableTime(jsn)); 
end;

function TFHIRJsonParser.ParsePractitionerRoleAvailableTime(jsn : TJsonObject) : TFhirPractitionerRoleAvailableTime;
begin
  result := TFhirPractitionerRoleAvailableTime.Create;
  try
    ParsePractitionerRoleAvailableTimeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerRoleAvailableTimeProperties(jsn : TJsonObject; value : TFhirPractitionerRoleAvailableTime);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('daysOfWeek') or jsn.has('_daysOfWeek') then
      iterateEnumArray(jsn.vArr['daysOfWeek'], jsn.vArr['_daysOfWeek'], jsn.path+'/daysOfWeek', value.daysOfWeekList, parseEnum, CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum);
    if jsn.has('allDay') or jsn.has('_allDay') then
        value.allDayElement := parseBoolean(jsn.node['allDay'], jsn.vObj['_allDay']);
    if jsn.has('availableStartTime') or jsn.has('_availableStartTime') then
        value.availableStartTimeElement := parseTime(jsn.node['availableStartTime'], jsn.vObj['_availableStartTime']);
    if jsn.has('availableEndTime') or jsn.has('_availableEndTime') then
        value.availableEndTimeElement := parseTime(jsn.node['availableEndTime'], jsn.vObj['_availableEndTime']);
end;

procedure TFHIRJsonComposer.ComposePractitionerRoleAvailableTime(json : TJSONWriter; name : string; value : TFhirPractitionerRoleAvailableTime; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.daysOfWeekList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.daysOfWeekList.Count - 1 do
    begin
      val := val or (value.daysOfWeekList[i].hasPrimitiveValue);
      ext := ext or ((value.daysOfWeekList[i].id <> '') or (value.daysOfWeekList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'daysOfWeek', value.daysOfWeekList, true);
      for i := 0 to value.daysOfWeekList.Count - 1 do
        ComposeEnumValue(json, '', value.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      finishArray(json, value.daysOfWeekList);
    end;
    if ext then
    begin
      startArray(json, '_daysOfWeek', value.daysOfWeekList, false);
      for i := 0 to value.daysOfWeekList.Count - 1 do
        ComposeEnumProps(json, '', value.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      finishArray(json, value.daysOfWeekList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'allDay', value.allDayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'allDay', value.allDayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'availableStartTime', value.availableStartTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'availableStartTime', value.availableStartTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'availableEndTime', value.availableEndTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'availableEndTime', value.availableEndTimeElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePractitionerRoleNotAvailable(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitionerRoleNotAvailable(jsn)); 
end;

function TFHIRJsonParser.ParsePractitionerRoleNotAvailable(jsn : TJsonObject) : TFhirPractitionerRoleNotAvailable;
begin
  result := TFhirPractitionerRoleNotAvailable.Create;
  try
    ParsePractitionerRoleNotAvailableProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerRoleNotAvailableProperties(jsn : TJsonObject; value : TFhirPractitionerRoleNotAvailable);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('during') then
        value.during := ParsePeriod(jsn.vObj['during']);
end;

procedure TFHIRJsonComposer.ComposePractitionerRoleNotAvailable(json : TJSONWriter; name : string; value : TFhirPractitionerRoleNotAvailable; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'description', value.descriptionElement, false);
  ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'during', value.during);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParsePractitionerRole(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitionerRole(jsn)); 
end;

function TFHIRJsonParser.ParsePractitionerRole(jsn : TJsonObject) : TFhirPractitionerRole;
begin
  result := TFhirPractitionerRole.Create;
  try
    ParsePractitionerRoleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerRoleProperties(jsn : TJsonObject; value : TFhirPractitionerRole);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        value.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('practitioner') then
        value.practitioner := ParseReference(jsn.vObj['practitioner']);
    if jsn.has('organization') then
        value.organization := ParseReference(jsn.vObj['organization']);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], value.specialtyList, parseCodeableConcept);
    if jsn.has('location') then
      iterateArray(jsn.vArr['location'], value.locationList, parseReference);
    if jsn.has('healthcareService') then
      iterateArray(jsn.vArr['healthcareService'], value.healthcareServiceList, parseReference);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
    if jsn.has('availableTime') then
      iterateArray(jsn.vArr['availableTime'], value.availableTimeList, parsePractitionerRoleAvailableTime);
    if jsn.has('notAvailable') then
      iterateArray(jsn.vArr['notAvailable'], value.notAvailableList, parsePractitionerRoleNotAvailable);
    if jsn.has('availabilityExceptions') or jsn.has('_availabilityExceptions') then
        value.availabilityExceptionsElement := parseString(jsn.node['availabilityExceptions'], jsn.vObj['_availabilityExceptions']);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], value.endpointList, parseReference);
end;

procedure TFHIRJsonComposer.ComposePractitionerRole(json : TJSONWriter; name : string; value : TFhirPractitionerRole; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'practitioner', value.practitioner);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'organization', value.organization);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.specialtyList.Count > 0) then
  begin
    startArray(json, 'specialty', value.specialtyList, false);
    for i := 0 to value.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', value.specialtyList[i]);
    finishArray(json, value.specialtyList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.locationList.Count > 0) then
  begin
    startArray(json, 'location', value.locationList, false);
    for i := 0 to value.locationList.Count - 1 do
      ComposeReference(json, '', value.locationList[i]);
    finishArray(json, value.locationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.healthcareServiceList.Count > 0) then
  begin
    startArray(json, 'healthcareService', value.healthcareServiceList, false);
    for i := 0 to value.healthcareServiceList.Count - 1 do
      ComposeReference(json, '', value.healthcareServiceList[i]);
    finishArray(json, value.healthcareServiceList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.availableTimeList.Count > 0) then
  begin
    startArray(json, 'availableTime', value.availableTimeList, false);
    for i := 0 to value.availableTimeList.Count - 1 do
      ComposePractitionerRoleAvailableTime(json, '', value.availableTimeList[i]);
    finishArray(json, value.availableTimeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.notAvailableList.Count > 0) then
  begin
    startArray(json, 'notAvailable', value.notAvailableList, false);
    for i := 0 to value.notAvailableList.Count - 1 do
      ComposePractitionerRoleNotAvailable(json, '', value.notAvailableList[i]);
    finishArray(json, value.notAvailableList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'availabilityExceptions', value.availabilityExceptionsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'availabilityExceptions', value.availabilityExceptionsElement, false);
  if (SummaryOption in [soFull, soData]) and (value.endpointList.Count > 0) then
  begin
    startArray(json, 'endpoint', value.endpointList, false);
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(json, '', value.endpointList[i]);
    finishArray(json, value.endpointList);
  end;
end;

{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
procedure TFHIRJsonParser.ParseProcedurePerformer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcedurePerformer(jsn)); 
end;

function TFHIRJsonParser.ParseProcedurePerformer(jsn : TJsonObject) : TFhirProcedurePerformer;
begin
  result := TFhirProcedurePerformer.Create;
  try
    ParseProcedurePerformerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcedurePerformerProperties(jsn : TJsonObject; value : TFhirProcedurePerformer);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('function') then
        value.function_ := ParseCodeableConcept(jsn.vObj['function']);
    if jsn.has('actor') then
        value.actor := ParseReference(jsn.vObj['actor']);
    if jsn.has('onBehalfOf') then
        value.onBehalfOf := ParseReference(jsn.vObj['onBehalfOf']);
end;

procedure TFHIRJsonComposer.ComposeProcedurePerformer(json : TJSONWriter; name : string; value : TFhirProcedurePerformer; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'function', value.function_);
  ComposeReference(json, 'actor', value.actor);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'onBehalfOf', value.onBehalfOf);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseProcedureFocalDevice(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcedureFocalDevice(jsn)); 
end;

function TFHIRJsonParser.ParseProcedureFocalDevice(jsn : TJsonObject) : TFhirProcedureFocalDevice;
begin
  result := TFhirProcedureFocalDevice.Create;
  try
    ParseProcedureFocalDeviceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcedureFocalDeviceProperties(jsn : TJsonObject; value : TFhirProcedureFocalDevice);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('action') then
        value.action := ParseCodeableConcept(jsn.vObj['action']);
    if jsn.has('manipulated') then
        value.manipulated := ParseReference(jsn.vObj['manipulated']);
end;

procedure TFHIRJsonComposer.ComposeProcedureFocalDevice(json : TJSONWriter; name : string; value : TFhirProcedureFocalDevice; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'action', value.action);
  ComposeReference(json, 'manipulated', value.manipulated);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcedure(jsn)); 
end;

function TFHIRJsonParser.ParseProcedure(jsn : TJsonObject) : TFhirProcedure;
begin
  result := TFhirProcedure.Create;
  try
    ParseProcedureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcedureProperties(jsn : TJsonObject; value : TFhirProcedure);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
      if jsn.has('instantiatesCanonical') or jsn.has('_instantiatesCanonical') then
      iteratePrimitiveArray(jsn.vArr['instantiatesCanonical'], jsn.vArr['_instantiatesCanonical'], value.instantiatesCanonicalList, parseCanonical);
      if jsn.has('instantiatesUri') or jsn.has('_instantiatesUri') then
      iteratePrimitiveArray(jsn.vArr['instantiatesUri'], jsn.vArr['_instantiatesUri'], value.instantiatesUriList, parseUri);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], value.partOfList, parseReference);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEventStatusEnum, SYSTEMS_TFhirEventStatusEnum);
    if jsn.has('statusReason') then
        value.statusReason := ParseCodeableConcept(jsn.vObj['statusReason']);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('performedPeriod') {a4} then
      value.performed := ParsePeriod(jsn.vObj['performedPeriod']);
    if jsn.has('performedAge') {a4} then
      value.performed := ParseAge(jsn.vObj['performedAge']);
    if jsn.has('performedRange') {a4} then
      value.performed := ParseRange(jsn.vObj['performedRange']);
    if jsn.has('performedDateTime') or jsn.has('_performedDateTime') then
      value.performed := parseDateTime(jsn.node['performedDateTime'], jsn.vObj['_performedDateTime']);
    if jsn.has('performedString') or jsn.has('_performedString') then
      value.performed := parseString(jsn.node['performedString'], jsn.vObj['_performedString']);
    if jsn.has('recorder') then
        value.recorder := ParseReference(jsn.vObj['recorder']);
    if jsn.has('asserter') then
        value.asserter := ParseReference(jsn.vObj['asserter']);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], value.performerList, parseProcedurePerformer);
    if jsn.has('location') then
        value.location := ParseReference(jsn.vObj['location']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('bodySite') then
      iterateArray(jsn.vArr['bodySite'], value.bodySiteList, parseCodeableConcept);
    if jsn.has('outcome') then
        value.outcome := ParseCodeableConcept(jsn.vObj['outcome']);
    if jsn.has('report') then
      iterateArray(jsn.vArr['report'], value.reportList, parseReference);
    if jsn.has('complication') then
      iterateArray(jsn.vArr['complication'], value.complicationList, parseCodeableConcept);
    if jsn.has('complicationDetail') then
      iterateArray(jsn.vArr['complicationDetail'], value.complicationDetailList, parseReference);
    if jsn.has('followUp') then
      iterateArray(jsn.vArr['followUp'], value.followUpList, parseCodeableConcept);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('focalDevice') then
      iterateArray(jsn.vArr['focalDevice'], value.focalDeviceList, parseProcedureFocalDevice);
    if jsn.has('usedReference') then
      iterateArray(jsn.vArr['usedReference'], value.usedReferenceList, parseReference);
    if jsn.has('usedCode') then
      iterateArray(jsn.vArr['usedCode'], value.usedCodeList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeProcedure(json : TJSONWriter; name : string; value : TFhirProcedure; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesCanonicalList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesCanonicalList[i].id <> '') or (value.instantiatesCanonicalList[i].hasExtensionList) {no-comments or (value.instantiatesCanonicalList[i].hasComments)});
      val := val or (value.instantiatesCanonicalList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesCanonical', value.instantiatesCanonicalList, true);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalValue(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesCanonical', value.instantiatesCanonicalList, false);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalProps(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesUriList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesUriList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesUriList[i].id <> '') or (value.instantiatesUriList[i].hasExtensionList) {no-comments or (value.instantiatesUriList[i].hasComments)});
      val := val or (value.instantiatesUriList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesUri', value.instantiatesUriList, true);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriValue(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesUri', value.instantiatesUriList, false);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriProps(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.partOfList.Count > 0) then
  begin
    startArray(json, 'partOf', value.partOfList, false);
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(json, '', value.partOfList[i]);
    finishArray(json, value.partOfList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirEventStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'statusReason', value.statusReason);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.performed is TFhirPeriod) then 
    ComposePeriod(json, 'performedPeriod', TFhirPeriod(value.performed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.performed is TFhirAge) then 
    ComposeAge(json, 'performedAge', TFhirAge(value.performed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.performed is TFhirRange) then 
    ComposeRange(json, 'performedRange', TFhirRange(value.performed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.performed is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'performedDateTime', TFhirDateTime(value.performed), false);
    ComposeDateTimeProps(json, 'performedDateTime', TFhirDateTime(value.performed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.performed is TFhirString) then 
  begin
    ComposeStringValue(json, 'performedString', TFhirString(value.performed), false);
    ComposeStringProps(json, 'performedString', TFhirString(value.performed), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'recorder', value.recorder);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'asserter', value.asserter);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.performerList.Count > 0) then
  begin
    startArray(json, 'performer', value.performerList, false);
    for i := 0 to value.performerList.Count - 1 do
      ComposeProcedurePerformer(json, '', value.performerList[i]);
    finishArray(json, value.performerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'location', value.location);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.bodySiteList.Count > 0) then
  begin
    startArray(json, 'bodySite', value.bodySiteList, false);
    for i := 0 to value.bodySiteList.Count - 1 do
      ComposeCodeableConcept(json, '', value.bodySiteList[i]);
    finishArray(json, value.bodySiteList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'outcome', value.outcome);
  if (SummaryOption in [soFull, soData]) and (value.reportList.Count > 0) then
  begin
    startArray(json, 'report', value.reportList, false);
    for i := 0 to value.reportList.Count - 1 do
      ComposeReference(json, '', value.reportList[i]);
    finishArray(json, value.reportList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.complicationList.Count > 0) then
  begin
    startArray(json, 'complication', value.complicationList, false);
    for i := 0 to value.complicationList.Count - 1 do
      ComposeCodeableConcept(json, '', value.complicationList[i]);
    finishArray(json, value.complicationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.complicationDetailList.Count > 0) then
  begin
    startArray(json, 'complicationDetail', value.complicationDetailList, false);
    for i := 0 to value.complicationDetailList.Count - 1 do
      ComposeReference(json, '', value.complicationDetailList[i]);
    finishArray(json, value.complicationDetailList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.followUpList.Count > 0) then
  begin
    startArray(json, 'followUp', value.followUpList, false);
    for i := 0 to value.followUpList.Count - 1 do
      ComposeCodeableConcept(json, '', value.followUpList[i]);
    finishArray(json, value.followUpList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.focalDeviceList.Count > 0) then
  begin
    startArray(json, 'focalDevice', value.focalDeviceList, false);
    for i := 0 to value.focalDeviceList.Count - 1 do
      ComposeProcedureFocalDevice(json, '', value.focalDeviceList[i]);
    finishArray(json, value.focalDeviceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.usedReferenceList.Count > 0) then
  begin
    startArray(json, 'usedReference', value.usedReferenceList, false);
    for i := 0 to value.usedReferenceList.Count - 1 do
      ComposeReference(json, '', value.usedReferenceList[i]);
    finishArray(json, value.usedReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.usedCodeList.Count > 0) then
  begin
    startArray(json, 'usedCode', value.usedCodeList, false);
    for i := 0 to value.usedCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.usedCodeList[i]);
    finishArray(json, value.usedCodeList);
  end;
end;

{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
procedure TFHIRJsonParser.ParseProvenanceAgent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProvenanceAgent(jsn)); 
end;

function TFHIRJsonParser.ParseProvenanceAgent(jsn : TJsonObject) : TFhirProvenanceAgent;
begin
  result := TFhirProvenanceAgent.Create;
  try
    ParseProvenanceAgentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProvenanceAgentProperties(jsn : TJsonObject; value : TFhirProvenanceAgent);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('role') then
      iterateArray(jsn.vArr['role'], value.roleList, parseCodeableConcept);
    if jsn.has('who') then
        value.who := ParseReference(jsn.vObj['who']);
    if jsn.has('onBehalfOf') then
        value.onBehalfOf := ParseReference(jsn.vObj['onBehalfOf']);
end;

procedure TFHIRJsonComposer.ComposeProvenanceAgent(json : TJSONWriter; name : string; value : TFhirProvenanceAgent; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) and (value.roleList.Count > 0) then
  begin
    startArray(json, 'role', value.roleList, false);
    for i := 0 to value.roleList.Count - 1 do
      ComposeCodeableConcept(json, '', value.roleList[i]);
    finishArray(json, value.roleList);
  end;
  ComposeReference(json, 'who', value.who);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'onBehalfOf', value.onBehalfOf);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseProvenanceEntity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProvenanceEntity(jsn)); 
end;

function TFHIRJsonParser.ParseProvenanceEntity(jsn : TJsonObject) : TFhirProvenanceEntity;
begin
  result := TFhirProvenanceEntity.Create;
  try
    ParseProvenanceEntityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProvenanceEntityProperties(jsn : TJsonObject; value : TFhirProvenanceEntity);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('role') or jsn.has('_role') then
        value.roleElement := parseEnum(jsn.path+'/role', jsn.node['role'], jsn.vObj['_role'], CODES_TFhirProvenanceEntityRoleEnum, SYSTEMS_TFhirProvenanceEntityRoleEnum);
    if jsn.has('what') then
        value.what := ParseReference(jsn.vObj['what']);
    if jsn.has('agent') then
      iterateArray(jsn.vArr['agent'], value.agentList, parseProvenanceAgent);
end;

procedure TFHIRJsonComposer.ComposeProvenanceEntity(json : TJSONWriter; name : string; value : TFhirProvenanceEntity; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'role', value.roleElement, CODES_TFhirProvenanceEntityRoleEnum, false);
  ComposeReference(json, 'what', value.what);
  if (SummaryOption in [soFull, soData]) and (value.agentList.Count > 0) then
  begin
    startArray(json, 'agent', value.agentList, false);
    for i := 0 to value.agentList.Count - 1 do
      ComposeProvenanceAgent(json, '', value.agentList[i]);
    finishArray(json, value.agentList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseProvenance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProvenance(jsn)); 
end;

function TFHIRJsonParser.ParseProvenance(jsn : TJsonObject) : TFhirProvenance;
begin
  result := TFhirProvenance.Create;
  try
    ParseProvenanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProvenanceProperties(jsn : TJsonObject; value : TFhirProvenance);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], value.targetList, parseReference);
    if jsn.has('occurredPeriod') {a4} then
      value.occurred := ParsePeriod(jsn.vObj['occurredPeriod']);
    if jsn.has('occurredDateTime') or jsn.has('_occurredDateTime') then
      value.occurred := parseDateTime(jsn.node['occurredDateTime'], jsn.vObj['_occurredDateTime']);
    if jsn.has('recorded') or jsn.has('_recorded') then
        value.recordedElement := parseInstant(jsn.node['recorded'], jsn.vObj['_recorded']);
      if jsn.has('policy') or jsn.has('_policy') then
      iteratePrimitiveArray(jsn.vArr['policy'], jsn.vArr['_policy'], value.policyList, parseUri);
    if jsn.has('location') then
        value.location := ParseReference(jsn.vObj['location']);
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], value.reasonList, parseCodeableConcept);
    if jsn.has('activity') then
        value.activity := ParseCodeableConcept(jsn.vObj['activity']);
    if jsn.has('agent') then
      iterateArray(jsn.vArr['agent'], value.agentList, parseProvenanceAgent);
    if jsn.has('entity') then
      iterateArray(jsn.vArr['entity'], value.entityList, parseProvenanceEntity);
    if jsn.has('signature') then
      iterateArray(jsn.vArr['signature'], value.signatureList, parseSignature);
end;

procedure TFHIRJsonComposer.ComposeProvenance(json : TJSONWriter; name : string; value : TFhirProvenance; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (value.targetList.Count > 0) then
  begin
    startArray(json, 'target', value.targetList, false);
    for i := 0 to value.targetList.Count - 1 do
      ComposeReference(json, '', value.targetList[i]);
    finishArray(json, value.targetList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.occurred is TFhirPeriod) then 
    ComposePeriod(json, 'occurredPeriod', TFhirPeriod(value.occurred)) 
  else if (SummaryOption in [soFull, soData]) and (value.occurred is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurredDateTime', TFhirDateTime(value.occurred), false);
    ComposeDateTimeProps(json, 'occurredDateTime', TFhirDateTime(value.occurred), false);
  end;
  ComposeInstantValue(json, 'recorded', value.recordedElement, false);
  ComposeInstantProps(json, 'recorded', value.recordedElement, false);
  if (SummaryOption in [soFull, soData]) and (value.policyList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.policyList.Count - 1 do
    begin
      ext := ext or ((value.policyList[i].id <> '') or (value.policyList[i].hasExtensionList) {no-comments or (value.policyList[i].hasComments)});
      val := val or (value.policyList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'policy', value.policyList, true);
      for i := 0 to value.policyList.Count - 1 do
        ComposeUriValue(json, '', value.policyList[i], true);
      finishArray(json, value.policyList);
    end;
    if ext then
    begin
      startArray(json, '_policy', value.policyList, false);
      for i := 0 to value.policyList.Count - 1 do
        ComposeUriProps(json, '', value.policyList[i], true);
      finishArray(json, value.policyList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'location', value.location);
  if (SummaryOption in [soFull, soData]) and (value.reasonList.Count > 0) then
  begin
    startArray(json, 'reason', value.reasonList, false);
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonList[i]);
    finishArray(json, value.reasonList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'activity', value.activity);
  if (value.agentList.Count > 0) then
  begin
    startArray(json, 'agent', value.agentList, false);
    for i := 0 to value.agentList.Count - 1 do
      ComposeProvenanceAgent(json, '', value.agentList[i]);
    finishArray(json, value.agentList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.entityList.Count > 0) then
  begin
    startArray(json, 'entity', value.entityList, false);
    for i := 0 to value.entityList.Count - 1 do
      ComposeProvenanceEntity(json, '', value.entityList[i]);
    finishArray(json, value.entityList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.signatureList.Count > 0) then
  begin
    startArray(json, 'signature', value.signatureList, false);
    for i := 0 to value.signatureList.Count - 1 do
      ComposeSignature(json, '', value.signatureList[i]);
    finishArray(json, value.signatureList);
  end;
end;

{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
procedure TFHIRJsonParser.ParseQuestionnaireItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireItem(jsn)); 
end;

function TFHIRJsonParser.ParseQuestionnaireItem(jsn : TJsonObject) : TFhirQuestionnaireItem;
begin
  result := TFhirQuestionnaireItem.Create;
  try
    ParseQuestionnaireItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemProperties(jsn : TJsonObject; value : TFhirQuestionnaireItem);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('linkId') or jsn.has('_linkId') then
        value.linkIdElement := parseString(jsn.node['linkId'], jsn.vObj['_linkId']);
    if jsn.has('definition') or jsn.has('_definition') then
        value.definitionElement := parseUri(jsn.node['definition'], jsn.vObj['_definition']);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCoding);
    if jsn.has('prefix') or jsn.has('_prefix') then
        value.prefixElement := parseString(jsn.node['prefix'], jsn.vObj['_prefix']);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirQuestionnaireItemTypeEnum, SYSTEMS_TFhirQuestionnaireItemTypeEnum);
    if jsn.has('enableWhen') then
      iterateArray(jsn.vArr['enableWhen'], value.enableWhenList, parseQuestionnaireItemEnableWhen);
    if jsn.has('enableBehavior') or jsn.has('_enableBehavior') then
        value.enableBehaviorElement := parseEnum(jsn.path+'/enableBehavior', jsn.node['enableBehavior'], jsn.vObj['_enableBehavior'], CODES_TFhirEnableWhenBehaviorEnum, SYSTEMS_TFhirEnableWhenBehaviorEnum);
    if jsn.has('required') or jsn.has('_required') then
        value.requiredElement := parseBoolean(jsn.node['required'], jsn.vObj['_required']);
    if jsn.has('repeats') or jsn.has('_repeats') then
        value.repeatsElement := parseBoolean(jsn.node['repeats'], jsn.vObj['_repeats']);
    if jsn.has('readOnly') or jsn.has('_readOnly') then
        value.readOnlyElement := parseBoolean(jsn.node['readOnly'], jsn.vObj['_readOnly']);
    if jsn.has('maxLength') or jsn.has('_maxLength') then
        value.maxLengthElement := parseInteger(jsn.node['maxLength'], jsn.vObj['_maxLength']);
    if jsn.has('answerValueSet') or jsn.has('_answerValueSet') then
        value.answerValueSetElement := parseCanonical(jsn.node['answerValueSet'], jsn.vObj['_answerValueSet']);
    if jsn.has('answerOption') then
      iterateArray(jsn.vArr['answerOption'], value.answerOptionList, parseQuestionnaireItemAnswerOption);
    if jsn.has('initial') then
      iterateArray(jsn.vArr['initial'], value.initialList, parseQuestionnaireItemInitial);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], value.itemList, parseQuestionnaireItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireItem(json : TJSONWriter; name : string; value : TFhirQuestionnaireItem; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'linkId', value.linkIdElement, false);
  ComposeStringProps(json, 'linkId', value.linkIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'definition', value.definitionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'definition', value.definitionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCoding(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'prefix', value.prefixElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'prefix', value.prefixElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirQuestionnaireItemTypeEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.enableWhenList.Count > 0) then
  begin
    startArray(json, 'enableWhen', value.enableWhenList, false);
    for i := 0 to value.enableWhenList.Count - 1 do
      ComposeQuestionnaireItemEnableWhen(json, '', value.enableWhenList[i]);
    finishArray(json, value.enableWhenList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'enableBehavior', value.enableBehaviorElement, CODES_TFhirEnableWhenBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'required', value.requiredElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'required', value.requiredElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'repeats', value.repeatsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'repeats', value.repeatsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'readOnly', value.readOnlyElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'readOnly', value.readOnlyElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'maxLength', value.maxLengthElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'maxLength', value.maxLengthElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalValue(json, 'answerValueSet', value.answerValueSetElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalProps(json, 'answerValueSet', value.answerValueSetElement, false);
  if (SummaryOption in [soFull, soData]) and (value.answerOptionList.Count > 0) then
  begin
    startArray(json, 'answerOption', value.answerOptionList, false);
    for i := 0 to value.answerOptionList.Count - 1 do
      ComposeQuestionnaireItemAnswerOption(json, '', value.answerOptionList[i]);
    finishArray(json, value.answerOptionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.initialList.Count > 0) then
  begin
    startArray(json, 'initial', value.initialList, false);
    for i := 0 to value.initialList.Count - 1 do
      ComposeQuestionnaireItemInitial(json, '', value.initialList[i]);
    finishArray(json, value.initialList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.itemList.Count > 0) then
  begin
    startArray(json, 'item', value.itemList, false);
    for i := 0 to value.itemList.Count - 1 do
      ComposeQuestionnaireItem(json, '', value.itemList[i]);
    finishArray(json, value.itemList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemEnableWhen(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireItemEnableWhen(jsn)); 
end;

function TFHIRJsonParser.ParseQuestionnaireItemEnableWhen(jsn : TJsonObject) : TFhirQuestionnaireItemEnableWhen;
begin
  result := TFhirQuestionnaireItemEnableWhen.Create;
  try
    ParseQuestionnaireItemEnableWhenProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemEnableWhenProperties(jsn : TJsonObject; value : TFhirQuestionnaireItemEnableWhen);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('question') or jsn.has('_question') then
        value.questionElement := parseString(jsn.node['question'], jsn.vObj['_question']);
    if jsn.has('operator') or jsn.has('_operator') then
        value.operatorElement := parseEnum(jsn.path+'/operator', jsn.node['operator'], jsn.vObj['_operator'], CODES_TFhirQuestionnaireItemOperatorEnum, SYSTEMS_TFhirQuestionnaireItemOperatorEnum);
    if jsn.has('answerCoding') {a4} then
      value.answer := ParseCoding(jsn.vObj['answerCoding']);
    if jsn.has('answerQuantity') {a4} then
      value.answer := ParseQuantity(jsn.vObj['answerQuantity']);
    if jsn.has('answerReference') {a3} then
      value.answer := ParseReference(jsn.vObj['answerReference']);
    if jsn.has('answerBoolean') or jsn.has('_answerBoolean') then
      value.answer := parseBoolean(jsn.node['answerBoolean'], jsn.vObj['_answerBoolean']);
    if jsn.has('answerDecimal') or jsn.has('_answerDecimal') then
      value.answer := parseDecimal(jsn.node['answerDecimal'], jsn.vObj['_answerDecimal']);
    if jsn.has('answerInteger') or jsn.has('_answerInteger') then
      value.answer := parseInteger(jsn.node['answerInteger'], jsn.vObj['_answerInteger']);
    if jsn.has('answerDate') or jsn.has('_answerDate') then
      value.answer := parseDate(jsn.node['answerDate'], jsn.vObj['_answerDate']);
    if jsn.has('answerDateTime') or jsn.has('_answerDateTime') then
      value.answer := parseDateTime(jsn.node['answerDateTime'], jsn.vObj['_answerDateTime']);
    if jsn.has('answerTime') or jsn.has('_answerTime') then
      value.answer := parseTime(jsn.node['answerTime'], jsn.vObj['_answerTime']);
    if jsn.has('answerString') or jsn.has('_answerString') then
      value.answer := parseString(jsn.node['answerString'], jsn.vObj['_answerString']);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireItemEnableWhen(json : TJSONWriter; name : string; value : TFhirQuestionnaireItemEnableWhen; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'question', value.questionElement, false);
  ComposeStringProps(json, 'question', value.questionElement, false);
  ComposeEnumValue(json, 'operator', value.operatorElement, CODES_TFhirQuestionnaireItemOperatorEnum, false);
  if (value.answer is TFhirCoding) then 
    ComposeCoding(json, 'answerCoding', TFhirCoding(value.answer)) 
  else if (value.answer is TFhirQuantity) then 
    ComposeQuantity(json, 'answerQuantity', TFhirQuantity(value.answer)) 
  else if (value.answer is TFhirReference) then
    ComposeReference(json, 'answerReference', TFhirReference(value.answer))
  else if (value.answer is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'answerBoolean', TFhirBoolean(value.answer), false);
    ComposeBooleanProps(json, 'answerBoolean', TFhirBoolean(value.answer), false);
  end
  else if (value.answer is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'answerDecimal', TFhirDecimal(value.answer), false);
    ComposeDecimalProps(json, 'answerDecimal', TFhirDecimal(value.answer), false);
  end
  else if (value.answer is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'answerInteger', TFhirInteger(value.answer), false);
    ComposeIntegerProps(json, 'answerInteger', TFhirInteger(value.answer), false);
  end
  else if (value.answer is TFhirDate) then 
  begin
    ComposeDateValue(json, 'answerDate', TFhirDate(value.answer), false);
    ComposeDateProps(json, 'answerDate', TFhirDate(value.answer), false);
  end
  else if (value.answer is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'answerDateTime', TFhirDateTime(value.answer), false);
    ComposeDateTimeProps(json, 'answerDateTime', TFhirDateTime(value.answer), false);
  end
  else if (value.answer is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'answerTime', TFhirTime(value.answer), false);
    ComposeTimeProps(json, 'answerTime', TFhirTime(value.answer), false);
  end
  else if (value.answer is TFhirString) then 
  begin
    ComposeStringValue(json, 'answerString', TFhirString(value.answer), false);
    ComposeStringProps(json, 'answerString', TFhirString(value.answer), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemAnswerOption(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireItemAnswerOption(jsn)); 
end;

function TFHIRJsonParser.ParseQuestionnaireItemAnswerOption(jsn : TJsonObject) : TFhirQuestionnaireItemAnswerOption;
begin
  result := TFhirQuestionnaireItemAnswerOption.Create;
  try
    ParseQuestionnaireItemAnswerOptionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemAnswerOptionProperties(jsn : TJsonObject; value : TFhirQuestionnaireItemAnswerOption);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('valueCoding') {a4} then
      value.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueReference') {a3} then
      value.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      value.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      value.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      value.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('initialSelected') or jsn.has('_initialSelected') then
        value.initialSelectedElement := parseBoolean(jsn.node['initialSelected'], jsn.vObj['_initialSelected']);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireItemAnswerOption(json : TJSONWriter; name : string; value : TFhirQuestionnaireItemAnswerOption; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(value.value)) 
  else if (value.value is TFhirReference) then
    ComposeReference(json, 'valueReference', TFhirReference(value.value))
  else if (value.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(value.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(value.value), false);
  end
  else if (value.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(value.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(value.value), false);
  end
  else if (value.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(value.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(value.value), false);
  end
  else if (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'initialSelected', value.initialSelectedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'initialSelected', value.initialSelectedElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemInitial(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireItemInitial(jsn)); 
end;

function TFHIRJsonParser.ParseQuestionnaireItemInitial(jsn : TJsonObject) : TFhirQuestionnaireItemInitial;
begin
  result := TFhirQuestionnaireItemInitial.Create;
  try
    ParseQuestionnaireItemInitialProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemInitialProperties(jsn : TJsonObject; value : TFhirQuestionnaireItemInitial);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCoding') {a4} then
      value.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueReference') {a3} then
      value.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      value.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      value.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      value.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      value.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      value.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      value.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireItemInitial(json : TJSONWriter; name : string; value : TFhirQuestionnaireItemInitial; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (value.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(value.value)) 
  else if (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (value.value is TFhirReference) then
    ComposeReference(json, 'valueReference', TFhirReference(value.value))
  else if (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (value.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(value.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(value.value), false);
  end
  else if (value.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(value.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(value.value), false);
  end
  else if (value.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(value.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(value.value), false);
  end
  else if (value.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(value.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(value.value), false);
  end
  else if (value.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(value.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(value.value), false);
  end
  else if (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (value.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(value.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseQuestionnaire(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaire(jsn)); 
end;

function TFHIRJsonParser.ParseQuestionnaire(jsn : TJsonObject) : TFhirQuestionnaire;
begin
  result := TFhirQuestionnaire.Create;
  try
    ParseQuestionnaireProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireProperties(jsn : TJsonObject; value : TFhirQuestionnaire);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
      if jsn.has('derivedFrom') or jsn.has('_derivedFrom') then
      iteratePrimitiveArray(jsn.vArr['derivedFrom'], jsn.vArr['_derivedFrom'], value.derivedFromList, parseCanonical);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('subjectType') or jsn.has('_subjectType') then
      iterateEnumArray(jsn.vArr['subjectType'], jsn.vArr['_subjectType'], jsn.path+'/subjectType', value.subjectType, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        value.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        value.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);
    if jsn.has('effectivePeriod') then
        value.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCoding);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], value.itemList, parseQuestionnaireItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaire(json : TJSONWriter; name : string; value : TFhirQuestionnaire; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) and (value.derivedFromList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.derivedFromList.Count - 1 do
    begin
      ext := ext or ((value.derivedFromList[i].id <> '') or (value.derivedFromList[i].hasExtensionList) {no-comments or (value.derivedFromList[i].hasComments)});
      val := val or (value.derivedFromList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'derivedFrom', value.derivedFromList, true);
      for i := 0 to value.derivedFromList.Count - 1 do
        ComposeCanonicalValue(json, '', value.derivedFromList[i], true);
      finishArray(json, value.derivedFromList);
    end;
    if ext then
    begin
      startArray(json, '_derivedFrom', value.derivedFromList, false);
      for i := 0 to value.derivedFromList.Count - 1 do
        ComposeCanonicalProps(json, '', value.derivedFromList[i], true);
      finishArray(json, value.derivedFromList);
    end;
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.subjectType.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.subjectType.Count - 1 do
    begin
      val := val or (value.subjectType[i].hasPrimitiveValue);
      ext := ext or ((value.subjectType[i].id <> '') or (value.subjectType[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'subjectType', value.subjectType, true);
      for i := 0 to value.subjectType.Count - 1 do
        ComposeEnumValue(json, '', value.subjectType[i], CODES_TFhirResourceTypesEnum, true);
      finishArray(json, value.subjectType);
    end;
    if ext then
    begin
      startArray(json, '_subjectType', value.subjectType, false);
      for i := 0 to value.subjectType.Count - 1 do
        ComposeEnumProps(json, '', value.subjectType[i], CODES_TFhirResourceTypesEnum, true);
      finishArray(json, value.subjectType);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', value.effectivePeriod);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCoding(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.itemList.Count > 0) then
  begin
    startArray(json, 'item', value.itemList, false);
    for i := 0 to value.itemList.Count - 1 do
      ComposeQuestionnaireItem(json, '', value.itemList[i]);
    finishArray(json, value.itemList);
  end;
end;

{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
procedure TFHIRJsonParser.ParseQuestionnaireResponseItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireResponseItem(jsn)); 
end;

function TFHIRJsonParser.ParseQuestionnaireResponseItem(jsn : TJsonObject) : TFhirQuestionnaireResponseItem;
begin
  result := TFhirQuestionnaireResponseItem.Create;
  try
    ParseQuestionnaireResponseItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponseItemProperties(jsn : TJsonObject; value : TFhirQuestionnaireResponseItem);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('linkId') or jsn.has('_linkId') then
        value.linkIdElement := parseString(jsn.node['linkId'], jsn.vObj['_linkId']);
    if jsn.has('definition') or jsn.has('_definition') then
        value.definitionElement := parseUri(jsn.node['definition'], jsn.vObj['_definition']);
    if jsn.has('text') or jsn.has('_text') then
        value.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);
    if jsn.has('answer') then
      iterateArray(jsn.vArr['answer'], value.answerList, parseQuestionnaireResponseItemAnswer);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], value.itemList, parseQuestionnaireResponseItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireResponseItem(json : TJSONWriter; name : string; value : TFhirQuestionnaireResponseItem; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'linkId', value.linkIdElement, false);
  ComposeStringProps(json, 'linkId', value.linkIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'definition', value.definitionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'definition', value.definitionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', value.textElement, false);
  if (SummaryOption in [soFull, soData]) and (value.answerList.Count > 0) then
  begin
    startArray(json, 'answer', value.answerList, false);
    for i := 0 to value.answerList.Count - 1 do
      ComposeQuestionnaireResponseItemAnswer(json, '', value.answerList[i]);
    finishArray(json, value.answerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.itemList.Count > 0) then
  begin
    startArray(json, 'item', value.itemList, false);
    for i := 0 to value.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(json, '', value.itemList[i]);
    finishArray(json, value.itemList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponseItemAnswer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireResponseItemAnswer(jsn)); 
end;

function TFHIRJsonParser.ParseQuestionnaireResponseItemAnswer(jsn : TJsonObject) : TFhirQuestionnaireResponseItemAnswer;
begin
  result := TFhirQuestionnaireResponseItemAnswer.Create;
  try
    ParseQuestionnaireResponseItemAnswerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponseItemAnswerProperties(jsn : TJsonObject; value : TFhirQuestionnaireResponseItemAnswer);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCoding') {a4} then
      value.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueReference') {a3} then
      value.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      value.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      value.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      value.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      value.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      value.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      value.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], value.itemList, parseQuestionnaireResponseItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireResponseItemAnswer(json : TJSONWriter; name : string; value : TFhirQuestionnaireResponseItemAnswer; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirReference) then
    ComposeReference(json, 'valueReference', TFhirReference(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(value.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(value.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(value.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(value.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(value.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(value.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(value.value), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.itemList.Count > 0) then
  begin
    startArray(json, 'item', value.itemList, false);
    for i := 0 to value.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(json, '', value.itemList[i]);
    finishArray(json, value.itemList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireResponse(jsn)); 
end;

function TFHIRJsonParser.ParseQuestionnaireResponse(jsn : TJsonObject) : TFhirQuestionnaireResponse;
begin
  result := TFhirQuestionnaireResponse.Create;
  try
    ParseQuestionnaireResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponseProperties(jsn : TJsonObject; value : TFhirQuestionnaireResponse);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], value.partOfList, parseReference);
    if jsn.has('questionnaire') or jsn.has('_questionnaire') then
        value.questionnaireElement := parseCanonical(jsn.node['questionnaire'], jsn.vObj['_questionnaire']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirQuestionnaireResponseStatusEnum, SYSTEMS_TFhirQuestionnaireResponseStatusEnum);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('authored') or jsn.has('_authored') then
        value.authoredElement := parseDateTime(jsn.node['authored'], jsn.vObj['_authored']);
    if jsn.has('author') then
        value.author := ParseReference(jsn.vObj['author']);
    if jsn.has('source') then
        value.source := ParseReference(jsn.vObj['source']);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], value.itemList, parseQuestionnaireResponseItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireResponse(json : TJSONWriter; name : string; value : TFhirQuestionnaireResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.partOfList.Count > 0) then
  begin
    startArray(json, 'partOf', value.partOfList, false);
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(json, '', value.partOfList[i]);
    finishArray(json, value.partOfList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'questionnaire', value.questionnaireElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'questionnaire', value.questionnaireElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirQuestionnaireResponseStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'authored', value.authoredElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'authored', value.authoredElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'author', value.author);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'source', value.source);
  if (SummaryOption in [soFull, soData]) and (value.itemList.Count > 0) then
  begin
    startArray(json, 'item', value.itemList, false);
    for i := 0 to value.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(json, '', value.itemList[i]);
    finishArray(json, value.itemList);
  end;
end;

{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REGULATEDAUTHORIZATION}
procedure TFHIRJsonParser.ParseRegulatedAuthorizationCase(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRegulatedAuthorizationCase(jsn)); 
end;

function TFHIRJsonParser.ParseRegulatedAuthorizationCase(jsn : TJsonObject) : TFhirRegulatedAuthorizationCase;
begin
  result := TFhirRegulatedAuthorizationCase.Create;
  try
    ParseRegulatedAuthorizationCaseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRegulatedAuthorizationCaseProperties(jsn : TJsonObject; value : TFhirRegulatedAuthorizationCase);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('status') then
        value.status := ParseCodeableConcept(jsn.vObj['status']);
    if jsn.has('datePeriod') {a4} then
      value.date := ParsePeriod(jsn.vObj['datePeriod']);
    if jsn.has('dateDateTime') or jsn.has('_dateDateTime') then
      value.date := parseDateTime(jsn.node['dateDateTime'], jsn.vObj['_dateDateTime']);
    if jsn.has('application') then
      iterateArray(jsn.vArr['application'], value.applicationList, parseRegulatedAuthorizationCase);
end;

procedure TFHIRJsonComposer.ComposeRegulatedAuthorizationCase(json : TJSONWriter; name : string; value : TFhirRegulatedAuthorizationCase; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', value.status);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.date is TFhirPeriod) then 
    ComposePeriod(json, 'datePeriod', TFhirPeriod(value.date)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.date is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'dateDateTime', TFhirDateTime(value.date), false);
    ComposeDateTimeProps(json, 'dateDateTime', TFhirDateTime(value.date), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.applicationList.Count > 0) then
  begin
    startArray(json, 'application', value.applicationList, false);
    for i := 0 to value.applicationList.Count - 1 do
      ComposeRegulatedAuthorizationCase(json, '', value.applicationList[i]);
    finishArray(json, value.applicationList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseRegulatedAuthorization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRegulatedAuthorization(jsn)); 
end;

function TFHIRJsonParser.ParseRegulatedAuthorization(jsn : TJsonObject) : TFhirRegulatedAuthorization;
begin
  result := TFhirRegulatedAuthorization.Create;
  try
    ParseRegulatedAuthorizationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRegulatedAuthorizationProperties(jsn : TJsonObject; value : TFhirRegulatedAuthorization);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('subject') then
      iterateArray(jsn.vArr['subject'], value.subjectList, parseReference);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('region') then
      iterateArray(jsn.vArr['region'], value.regionList, parseCodeableConcept);
    if jsn.has('status') then
        value.status := ParseCodeableConcept(jsn.vObj['status']);
    if jsn.has('statusDate') or jsn.has('_statusDate') then
        value.statusDateElement := parseDateTime(jsn.node['statusDate'], jsn.vObj['_statusDate']);
    if jsn.has('validityPeriod') then
        value.validityPeriod := ParsePeriod(jsn.vObj['validityPeriod']);
    if jsn.has('indication') then
        value.indication := ParseCodeableReference(jsn.vObj['indication']);
    if jsn.has('intendedUse') then
        value.intendedUse := ParseCodeableConcept(jsn.vObj['intendedUse']);
    if jsn.has('basis') then
      iterateArray(jsn.vArr['basis'], value.basisList, parseCodeableConcept);
    if jsn.has('holder') then
        value.holder := ParseReference(jsn.vObj['holder']);
    if jsn.has('regulator') then
        value.regulator := ParseReference(jsn.vObj['regulator']);
    if jsn.has('case') then
        value.case_ := ParseRegulatedAuthorizationCase(jsn.vObj['case']);
end;

procedure TFHIRJsonComposer.ComposeRegulatedAuthorization(json : TJSONWriter; name : string; value : TFhirRegulatedAuthorization; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.subjectList.Count > 0) then
  begin
    startArray(json, 'subject', value.subjectList, false);
    for i := 0 to value.subjectList.Count - 1 do
      ComposeReference(json, '', value.subjectList[i]);
    finishArray(json, value.subjectList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.regionList.Count > 0) then
  begin
    startArray(json, 'region', value.regionList, false);
    for i := 0 to value.regionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.regionList[i]);
    finishArray(json, value.regionList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', value.status);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'statusDate', value.statusDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'statusDate', value.statusDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'validityPeriod', value.validityPeriod);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableReference(json, 'indication', value.indication);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'intendedUse', value.intendedUse);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basisList.Count > 0) then
  begin
    startArray(json, 'basis', value.basisList, false);
    for i := 0 to value.basisList.Count - 1 do
      ComposeCodeableConcept(json, '', value.basisList[i]);
    finishArray(json, value.basisList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'holder', value.holder);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'regulator', value.regulator);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRegulatedAuthorizationCase(json, 'case', value.case_);
end;

{$ENDIF FHIR_REGULATEDAUTHORIZATION}
{$IFDEF FHIR_RELATEDPERSON}
procedure TFHIRJsonParser.ParseRelatedPersonCommunication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRelatedPersonCommunication(jsn)); 
end;

function TFHIRJsonParser.ParseRelatedPersonCommunication(jsn : TJsonObject) : TFhirRelatedPersonCommunication;
begin
  result := TFhirRelatedPersonCommunication.Create;
  try
    ParseRelatedPersonCommunicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRelatedPersonCommunicationProperties(jsn : TJsonObject; value : TFhirRelatedPersonCommunication);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('language') then
        value.language := ParseCodeableConcept(jsn.vObj['language']);
    if jsn.has('preferred') or jsn.has('_preferred') then
        value.preferredElement := parseBoolean(jsn.node['preferred'], jsn.vObj['_preferred']);
end;

procedure TFHIRJsonComposer.ComposeRelatedPersonCommunication(json : TJSONWriter; name : string; value : TFhirRelatedPersonCommunication; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'language', value.language);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'preferred', value.preferredElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'preferred', value.preferredElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseRelatedPerson(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRelatedPerson(jsn)); 
end;

function TFHIRJsonParser.ParseRelatedPerson(jsn : TJsonObject) : TFhirRelatedPerson;
begin
  result := TFhirRelatedPerson.Create;
  try
    ParseRelatedPersonProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRelatedPersonProperties(jsn : TJsonObject; value : TFhirRelatedPerson);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        value.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('relationship') then
      iterateArray(jsn.vArr['relationship'], value.relationshipList, parseCodeableConcept);
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], value.nameList, parseHumanName);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], value.telecomList, parseContactPoint);
    if jsn.has('gender') or jsn.has('_gender') then
        value.genderElement := parseEnum(jsn.path+'/gender', jsn.node['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('birthDate') or jsn.has('_birthDate') then
        value.birthDateElement := parseDate(jsn.node['birthDate'], jsn.vObj['_birthDate']);
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], value.addressList, parseAddress);
    if jsn.has('photo') then
      iterateArray(jsn.vArr['photo'], value.photoList, parseAttachment);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('communication') then
      iterateArray(jsn.vArr['communication'], value.communicationList, parseRelatedPersonCommunication);
end;

procedure TFHIRJsonComposer.ComposeRelatedPerson(json : TJSONWriter; name : string; value : TFhirRelatedPerson; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', value.activeElement, false);
  ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.relationshipList.Count > 0) then
  begin
    startArray(json, 'relationship', value.relationshipList, false);
    for i := 0 to value.relationshipList.Count - 1 do
      ComposeCodeableConcept(json, '', value.relationshipList[i]);
    finishArray(json, value.relationshipList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.nameList.Count > 0) then
  begin
    startArray(json, 'name', value.nameList, false);
    for i := 0 to value.nameList.Count - 1 do
      ComposeHumanName(json, '', value.nameList[i]);
    finishArray(json, value.nameList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.telecomList.Count > 0) then
  begin
    startArray(json, 'telecom', value.telecomList, false);
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(json, '', value.telecomList[i]);
    finishArray(json, value.telecomList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'gender', value.genderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'birthDate', value.birthDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'birthDate', value.birthDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.addressList.Count > 0) then
  begin
    startArray(json, 'address', value.addressList, false);
    for i := 0 to value.addressList.Count - 1 do
      ComposeAddress(json, '', value.addressList[i]);
    finishArray(json, value.addressList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.photoList.Count > 0) then
  begin
    startArray(json, 'photo', value.photoList, false);
    for i := 0 to value.photoList.Count - 1 do
      ComposeAttachment(json, '', value.photoList[i]);
    finishArray(json, value.photoList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soData]) and (value.communicationList.Count > 0) then
  begin
    startArray(json, 'communication', value.communicationList, false);
    for i := 0 to value.communicationList.Count - 1 do
      ComposeRelatedPersonCommunication(json, '', value.communicationList[i]);
    finishArray(json, value.communicationList);
  end;
end;

{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
procedure TFHIRJsonParser.ParseRequestGroupAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRequestGroupAction(jsn)); 
end;

function TFHIRJsonParser.ParseRequestGroupAction(jsn : TJsonObject) : TFhirRequestGroupAction;
begin
  result := TFhirRequestGroupAction.Create;
  try
    ParseRequestGroupActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRequestGroupActionProperties(jsn : TJsonObject; value : TFhirRequestGroupAction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('prefix') or jsn.has('_prefix') then
        value.prefixElement := parseString(jsn.node['prefix'], jsn.vObj['_prefix']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('textEquivalent') or jsn.has('_textEquivalent') then
        value.textEquivalentElement := parseString(jsn.node['textEquivalent'], jsn.vObj['_textEquivalent']);
    if jsn.has('priority') or jsn.has('_priority') then
        value.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseCodeableConcept);
    if jsn.has('documentation') then
      iterateArray(jsn.vArr['documentation'], value.documentationList, parseRelatedArtifact);
    if jsn.has('condition') then
      iterateArray(jsn.vArr['condition'], value.conditionList, parseRequestGroupActionCondition);
    if jsn.has('relatedAction') then
      iterateArray(jsn.vArr['relatedAction'], value.relatedActionList, parseRequestGroupActionRelatedAction);
    if jsn.has('timingAge') {a4} then
      value.timing := ParseAge(jsn.vObj['timingAge']);
    if jsn.has('timingPeriod') {a4} then
      value.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDuration') {a4} then
      value.timing := ParseDuration(jsn.vObj['timingDuration']);
    if jsn.has('timingRange') {a4} then
      value.timing := ParseRange(jsn.vObj['timingRange']);
    if jsn.has('timingTiming') {a4} then
      value.timing := ParseTiming(jsn.vObj['timingTiming']);
    if jsn.has('timingDateTime') or jsn.has('_timingDateTime') then
      value.timing := parseDateTime(jsn.node['timingDateTime'], jsn.vObj['_timingDateTime']);
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], value.participantList, parseReference);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('groupingBehavior') or jsn.has('_groupingBehavior') then
        value.groupingBehaviorElement := parseEnum(jsn.path+'/groupingBehavior', jsn.node['groupingBehavior'], jsn.vObj['_groupingBehavior'], CODES_TFhirActionGroupingBehaviorEnum, SYSTEMS_TFhirActionGroupingBehaviorEnum);
    if jsn.has('selectionBehavior') or jsn.has('_selectionBehavior') then
        value.selectionBehaviorElement := parseEnum(jsn.path+'/selectionBehavior', jsn.node['selectionBehavior'], jsn.vObj['_selectionBehavior'], CODES_TFhirActionSelectionBehaviorEnum, SYSTEMS_TFhirActionSelectionBehaviorEnum);
    if jsn.has('requiredBehavior') or jsn.has('_requiredBehavior') then
        value.requiredBehaviorElement := parseEnum(jsn.path+'/requiredBehavior', jsn.node['requiredBehavior'], jsn.vObj['_requiredBehavior'], CODES_TFhirActionRequiredBehaviorEnum, SYSTEMS_TFhirActionRequiredBehaviorEnum);
    if jsn.has('precheckBehavior') or jsn.has('_precheckBehavior') then
        value.precheckBehaviorElement := parseEnum(jsn.path+'/precheckBehavior', jsn.node['precheckBehavior'], jsn.vObj['_precheckBehavior'], CODES_TFhirActionPrecheckBehaviorEnum, SYSTEMS_TFhirActionPrecheckBehaviorEnum);
    if jsn.has('cardinalityBehavior') or jsn.has('_cardinalityBehavior') then
        value.cardinalityBehaviorElement := parseEnum(jsn.path+'/cardinalityBehavior', jsn.node['cardinalityBehavior'], jsn.vObj['_cardinalityBehavior'], CODES_TFhirActionCardinalityBehaviorEnum, SYSTEMS_TFhirActionCardinalityBehaviorEnum);
    if jsn.has('resource') then
        value.resource := ParseReference(jsn.vObj['resource']);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], value.actionList, parseRequestGroupAction);
end;

procedure TFHIRJsonComposer.ComposeRequestGroupAction(json : TJSONWriter; name : string; value : TFhirRequestGroupAction; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'prefix', value.prefixElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'prefix', value.prefixElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'textEquivalent', value.textEquivalentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'textEquivalent', value.textEquivalentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.documentationList.Count > 0) then
  begin
    startArray(json, 'documentation', value.documentationList, false);
    for i := 0 to value.documentationList.Count - 1 do
      ComposeRelatedArtifact(json, '', value.documentationList[i]);
    finishArray(json, value.documentationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.conditionList.Count > 0) then
  begin
    startArray(json, 'condition', value.conditionList, false);
    for i := 0 to value.conditionList.Count - 1 do
      ComposeRequestGroupActionCondition(json, '', value.conditionList[i]);
    finishArray(json, value.conditionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedActionList.Count > 0) then
  begin
    startArray(json, 'relatedAction', value.relatedActionList, false);
    for i := 0 to value.relatedActionList.Count - 1 do
      ComposeRequestGroupActionRelatedAction(json, '', value.relatedActionList[i]);
    finishArray(json, value.relatedActionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.timing is TFhirAge) then 
    ComposeAge(json, 'timingAge', TFhirAge(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDuration) then 
    ComposeDuration(json, 'timingDuration', TFhirDuration(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirRange) then 
    ComposeRange(json, 'timingRange', TFhirRange(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirTiming) then 
    ComposeTiming(json, 'timingTiming', TFhirTiming(value.timing)) 
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timingDateTime', TFhirDateTime(value.timing), false);
    ComposeDateTimeProps(json, 'timingDateTime', TFhirDateTime(value.timing), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.participantList.Count > 0) then
  begin
    startArray(json, 'participant', value.participantList, false);
    for i := 0 to value.participantList.Count - 1 do
      ComposeReference(json, '', value.participantList[i]);
    finishArray(json, value.participantList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'groupingBehavior', value.groupingBehaviorElement, CODES_TFhirActionGroupingBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'selectionBehavior', value.selectionBehaviorElement, CODES_TFhirActionSelectionBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'requiredBehavior', value.requiredBehaviorElement, CODES_TFhirActionRequiredBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'precheckBehavior', value.precheckBehaviorElement, CODES_TFhirActionPrecheckBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'cardinalityBehavior', value.cardinalityBehaviorElement, CODES_TFhirActionCardinalityBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'resource', value.resource);
  if (SummaryOption in [soFull, soData]) and (value.actionList.Count > 0) then
  begin
    startArray(json, 'action', value.actionList, false);
    for i := 0 to value.actionList.Count - 1 do
      ComposeRequestGroupAction(json, '', value.actionList[i]);
    finishArray(json, value.actionList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseRequestGroupActionCondition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRequestGroupActionCondition(jsn)); 
end;

function TFHIRJsonParser.ParseRequestGroupActionCondition(jsn : TJsonObject) : TFhirRequestGroupActionCondition;
begin
  result := TFhirRequestGroupActionCondition.Create;
  try
    ParseRequestGroupActionConditionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRequestGroupActionConditionProperties(jsn : TJsonObject; value : TFhirRequestGroupActionCondition);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('kind') or jsn.has('_kind') then
        value.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirActionConditionKindEnum, SYSTEMS_TFhirActionConditionKindEnum);
    if jsn.has('expression') then
        value.expression := ParseExpression(jsn.vObj['expression']);
end;

procedure TFHIRJsonComposer.ComposeRequestGroupActionCondition(json : TJSONWriter; name : string; value : TFhirRequestGroupActionCondition; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'kind', value.kindElement, CODES_TFhirActionConditionKindEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeExpression(json, 'expression', value.expression);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseRequestGroupActionRelatedAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRequestGroupActionRelatedAction(jsn)); 
end;

function TFHIRJsonParser.ParseRequestGroupActionRelatedAction(jsn : TJsonObject) : TFhirRequestGroupActionRelatedAction;
begin
  result := TFhirRequestGroupActionRelatedAction.Create;
  try
    ParseRequestGroupActionRelatedActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRequestGroupActionRelatedActionProperties(jsn : TJsonObject; value : TFhirRequestGroupActionRelatedAction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('actionId') or jsn.has('_actionId') then
        value.actionIdElement := parseId(jsn.node['actionId'], jsn.vObj['_actionId']);
    if jsn.has('relationship') or jsn.has('_relationship') then
        value.relationshipElement := parseEnum(jsn.path+'/relationship', jsn.node['relationship'], jsn.vObj['_relationship'], CODES_TFhirActionRelationshipTypeEnum, SYSTEMS_TFhirActionRelationshipTypeEnum);
    if jsn.has('offsetDuration') {a4} then
      value.offset := ParseDuration(jsn.vObj['offsetDuration']);
    if jsn.has('offsetRange') {a4} then
      value.offset := ParseRange(jsn.vObj['offsetRange']);
end;

procedure TFHIRJsonComposer.ComposeRequestGroupActionRelatedAction(json : TJSONWriter; name : string; value : TFhirRequestGroupActionRelatedAction; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeIdValue(json, 'actionId', value.actionIdElement, false);
  ComposeIdProps(json, 'actionId', value.actionIdElement, false);
  ComposeEnumValue(json, 'relationship', value.relationshipElement, CODES_TFhirActionRelationshipTypeEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.offset is TFhirDuration) then 
    ComposeDuration(json, 'offsetDuration', TFhirDuration(value.offset)) 
  else if (SummaryOption in [soFull, soData]) and (value.offset is TFhirRange) then 
    ComposeRange(json, 'offsetRange', TFhirRange(value.offset)) ;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseRequestGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRequestGroup(jsn)); 
end;

function TFHIRJsonParser.ParseRequestGroup(jsn : TJsonObject) : TFhirRequestGroup;
begin
  result := TFhirRequestGroup.Create;
  try
    ParseRequestGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRequestGroupProperties(jsn : TJsonObject; value : TFhirRequestGroup);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
      if jsn.has('instantiatesCanonical') or jsn.has('_instantiatesCanonical') then
      iteratePrimitiveArray(jsn.vArr['instantiatesCanonical'], jsn.vArr['_instantiatesCanonical'], value.instantiatesCanonicalList, parseCanonical);
      if jsn.has('instantiatesUri') or jsn.has('_instantiatesUri') then
      iteratePrimitiveArray(jsn.vArr['instantiatesUri'], jsn.vArr['_instantiatesUri'], value.instantiatesUriList, parseUri);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], value.replacesList, parseReference);
    if jsn.has('groupIdentifier') then
        value.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('intent') or jsn.has('_intent') then
        value.intentElement := parseEnum(jsn.path+'/intent', jsn.node['intent'], jsn.vObj['_intent'], CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum);
    if jsn.has('priority') or jsn.has('_priority') then
        value.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        value.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);
    if jsn.has('author') then
        value.author := ParseReference(jsn.vObj['author']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], value.actionList, parseRequestGroupAction);
end;

procedure TFHIRJsonComposer.ComposeRequestGroup(json : TJSONWriter; name : string; value : TFhirRequestGroup; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesCanonicalList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesCanonicalList[i].id <> '') or (value.instantiatesCanonicalList[i].hasExtensionList) {no-comments or (value.instantiatesCanonicalList[i].hasComments)});
      val := val or (value.instantiatesCanonicalList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesCanonical', value.instantiatesCanonicalList, true);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalValue(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesCanonical', value.instantiatesCanonicalList, false);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalProps(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesUriList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesUriList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesUriList[i].id <> '') or (value.instantiatesUriList[i].hasExtensionList) {no-comments or (value.instantiatesUriList[i].hasComments)});
      val := val or (value.instantiatesUriList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesUri', value.instantiatesUriList, true);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriValue(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesUri', value.instantiatesUriList, false);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriProps(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.replacesList.Count > 0) then
  begin
    startArray(json, 'replaces', value.replacesList, false);
    for i := 0 to value.replacesList.Count - 1 do
      ComposeReference(json, '', value.replacesList[i]);
    finishArray(json, value.replacesList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'groupIdentifier', value.groupIdentifier);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirRequestStatusEnum, false);
  ComposeEnumValue(json, 'intent', value.intentElement, CODES_TFhirRequestIntentEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'authoredOn', value.authoredOnElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'authoredOn', value.authoredOnElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'author', value.author);
  if (SummaryOption in [soFull, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.actionList.Count > 0) then
  begin
    startArray(json, 'action', value.actionList, false);
    for i := 0 to value.actionList.Count - 1 do
      ComposeRequestGroupAction(json, '', value.actionList[i]);
    finishArray(json, value.actionList);
  end;
end;

{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHDEFINITION}
procedure TFHIRJsonParser.ParseResearchDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseResearchDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseResearchDefinition(jsn : TJsonObject) : TFhirResearchDefinition;
begin
  result := TFhirResearchDefinition.Create;
  try
    ParseResearchDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseResearchDefinitionProperties(jsn : TJsonObject; value : TFhirResearchDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('shortTitle') or jsn.has('_shortTitle') then
        value.shortTitleElement := parseString(jsn.node['shortTitle'], jsn.vObj['_shortTitle']);
    if jsn.has('subtitle') or jsn.has('_subtitle') then
        value.subtitleElement := parseString(jsn.node['subtitle'], jsn.vObj['_subtitle']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('subjectCodeableConcept') {a4} then
      value.subject := ParseCodeableConcept(jsn.vObj['subjectCodeableConcept']);
    if jsn.has('subjectReference') {a3} then
      value.subject := ParseReference(jsn.vObj['subjectReference']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
      if jsn.has('comment') or jsn.has('_comment') then
      iteratePrimitiveArray(jsn.vArr['comment'], jsn.vArr['_comment'], value.commentList, parseString);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('usage') or jsn.has('_usage') then
        value.usageElement := parseString(jsn.node['usage'], jsn.vObj['_usage']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        value.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        value.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);
    if jsn.has('effectivePeriod') then
        value.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], value.topicList, parseCodeableConcept);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseContactDetail);
    if jsn.has('editor') then
      iterateArray(jsn.vArr['editor'], value.editorList, parseContactDetail);
    if jsn.has('reviewer') then
      iterateArray(jsn.vArr['reviewer'], value.reviewerList, parseContactDetail);
    if jsn.has('endorser') then
      iterateArray(jsn.vArr['endorser'], value.endorserList, parseContactDetail);
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], value.relatedArtifactList, parseRelatedArtifact);
      if jsn.has('library') or jsn.has('_library') then
      iteratePrimitiveArray(jsn.vArr['library'], jsn.vArr['_library'], value.library_List, parseCanonical);
    if jsn.has('population') then
        value.population := ParseReference(jsn.vObj['population']);
    if jsn.has('exposure') then
        value.exposure := ParseReference(jsn.vObj['exposure']);
    if jsn.has('exposureAlternative') then
        value.exposureAlternative := ParseReference(jsn.vObj['exposureAlternative']);
    if jsn.has('outcome') then
        value.outcome := ParseReference(jsn.vObj['outcome']);
end;

procedure TFHIRJsonComposer.ComposeResearchDefinition(json : TJSONWriter; name : string; value : TFhirResearchDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'shortTitle', value.shortTitleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'shortTitle', value.shortTitleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'subtitle', value.subtitleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'subtitle', value.subtitleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject)) 
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirReference) then
    ComposeReference(json, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.commentList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.commentList.Count - 1 do
    begin
      ext := ext or ((value.commentList[i].id <> '') or (value.commentList[i].hasExtensionList) {no-comments or (value.commentList[i].hasComments)});
      val := val or (value.commentList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'comment', value.commentList, true);
      for i := 0 to value.commentList.Count - 1 do
        ComposeStringValue(json, '', value.commentList[i], true);
      finishArray(json, value.commentList);
    end;
    if ext then
    begin
      startArray(json, '_comment', value.commentList, false);
      for i := 0 to value.commentList.Count - 1 do
        ComposeStringProps(json, '', value.commentList[i], true);
      finishArray(json, value.commentList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', value.effectivePeriod);
  if (SummaryOption in [soFull, soData]) and (value.topicList.Count > 0) then
  begin
    startArray(json, 'topic', value.topicList, false);
    for i := 0 to value.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', value.topicList[i]);
    finishArray(json, value.topicList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.editorList.Count > 0) then
  begin
    startArray(json, 'editor', value.editorList, false);
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(json, '', value.editorList[i]);
    finishArray(json, value.editorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reviewerList.Count > 0) then
  begin
    startArray(json, 'reviewer', value.reviewerList, false);
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(json, '', value.reviewerList[i]);
    finishArray(json, value.reviewerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.endorserList.Count > 0) then
  begin
    startArray(json, 'endorser', value.endorserList, false);
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(json, '', value.endorserList[i]);
    finishArray(json, value.endorserList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedArtifactList.Count > 0) then
  begin
    startArray(json, 'relatedArtifact', value.relatedArtifactList, false);
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', value.relatedArtifactList[i]);
    finishArray(json, value.relatedArtifactList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.library_List.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.library_List.Count - 1 do
    begin
      ext := ext or ((value.library_List[i].id <> '') or (value.library_List[i].hasExtensionList) {no-comments or (value.library_List[i].hasComments)});
      val := val or (value.library_List[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'library', value.library_List, true);
      for i := 0 to value.library_List.Count - 1 do
        ComposeCanonicalValue(json, '', value.library_List[i], true);
      finishArray(json, value.library_List);
    end;
    if ext then
    begin
      startArray(json, '_library', value.library_List, false);
      for i := 0 to value.library_List.Count - 1 do
        ComposeCanonicalProps(json, '', value.library_List[i], true);
      finishArray(json, value.library_List);
    end;
  end;
  ComposeReference(json, 'population', value.population);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'exposure', value.exposure);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'exposureAlternative', value.exposureAlternative);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'outcome', value.outcome);
end;

{$ENDIF FHIR_RESEARCHDEFINITION}
{$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
procedure TFHIRJsonParser.ParseResearchElementDefinitionCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseResearchElementDefinitionCharacteristic(jsn)); 
end;

function TFHIRJsonParser.ParseResearchElementDefinitionCharacteristic(jsn : TJsonObject) : TFhirResearchElementDefinitionCharacteristic;
begin
  result := TFhirResearchElementDefinitionCharacteristic.Create;
  try
    ParseResearchElementDefinitionCharacteristicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseResearchElementDefinitionCharacteristicProperties(jsn : TJsonObject; value : TFhirResearchElementDefinitionCharacteristic);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('definitionCodeableConcept') {a4} then
      value.definition := ParseCodeableConcept(jsn.vObj['definitionCodeableConcept']);
    if jsn.has('definitionCanonical') or jsn.has('_definitionCanonical') then
      value.definition := parseCanonical(jsn.node['definitionCanonical'], jsn.vObj['_definitionCanonical']);
    if jsn.has('definitionExpression') {a4} then
      value.definition := ParseExpression(jsn.vObj['definitionExpression']);
    if jsn.has('definitionDataRequirement') {a4} then
      value.definition := ParseDataRequirement(jsn.vObj['definitionDataRequirement']);
    if jsn.has('usageContext') then
      iterateArray(jsn.vArr['usageContext'], value.usageContextList, parseUsageContext);
    if jsn.has('exclude') or jsn.has('_exclude') then
        value.excludeElement := parseBoolean(jsn.node['exclude'], jsn.vObj['_exclude']);
    if jsn.has('unitOfMeasure') then
        value.unitOfMeasure := ParseCodeableConcept(jsn.vObj['unitOfMeasure']);
    if jsn.has('studyEffectiveDescription') or jsn.has('_studyEffectiveDescription') then
        value.studyEffectiveDescriptionElement := parseString(jsn.node['studyEffectiveDescription'], jsn.vObj['_studyEffectiveDescription']);
    if jsn.has('studyEffectivePeriod') {a4} then
      value.studyEffective := ParsePeriod(jsn.vObj['studyEffectivePeriod']);
    if jsn.has('studyEffectiveDuration') {a4} then
      value.studyEffective := ParseDuration(jsn.vObj['studyEffectiveDuration']);
    if jsn.has('studyEffectiveTiming') {a4} then
      value.studyEffective := ParseTiming(jsn.vObj['studyEffectiveTiming']);
    if jsn.has('studyEffectiveDateTime') or jsn.has('_studyEffectiveDateTime') then
      value.studyEffective := parseDateTime(jsn.node['studyEffectiveDateTime'], jsn.vObj['_studyEffectiveDateTime']);
    if jsn.has('studyEffectiveTimeFromStart') then
        value.studyEffectiveTimeFromStart := ParseDuration(jsn.vObj['studyEffectiveTimeFromStart']);
    if jsn.has('studyEffectiveGroupMeasure') or jsn.has('_studyEffectiveGroupMeasure') then
        value.studyEffectiveGroupMeasureElement := parseEnum(jsn.path+'/studyEffectiveGroupMeasure', jsn.node['studyEffectiveGroupMeasure'], jsn.vObj['_studyEffectiveGroupMeasure'], CODES_TFhirGroupMeasureEnum, SYSTEMS_TFhirGroupMeasureEnum);
    if jsn.has('participantEffectiveDescription') or jsn.has('_participantEffectiveDescription') then
        value.participantEffectiveDescriptionElement := parseString(jsn.node['participantEffectiveDescription'], jsn.vObj['_participantEffectiveDescription']);
    if jsn.has('participantEffectivePeriod') {a4} then
      value.participantEffective := ParsePeriod(jsn.vObj['participantEffectivePeriod']);
    if jsn.has('participantEffectiveDuration') {a4} then
      value.participantEffective := ParseDuration(jsn.vObj['participantEffectiveDuration']);
    if jsn.has('participantEffectiveTiming') {a4} then
      value.participantEffective := ParseTiming(jsn.vObj['participantEffectiveTiming']);
    if jsn.has('participantEffectiveDateTime') or jsn.has('_participantEffectiveDateTime') then
      value.participantEffective := parseDateTime(jsn.node['participantEffectiveDateTime'], jsn.vObj['_participantEffectiveDateTime']);
    if jsn.has('participantEffectiveTimeFromStart') then
        value.participantEffectiveTimeFromStart := ParseDuration(jsn.vObj['participantEffectiveTimeFromStart']);
    if jsn.has('participantEffectiveGroupMeasure') or jsn.has('_participantEffectiveGroupMeasure') then
        value.participantEffectiveGroupMeasureElement := parseEnum(jsn.path+'/participantEffectiveGroupMeasure', jsn.node['participantEffectiveGroupMeasure'], jsn.vObj['_participantEffectiveGroupMeasure'], CODES_TFhirGroupMeasureEnum, SYSTEMS_TFhirGroupMeasureEnum);
end;

procedure TFHIRJsonComposer.ComposeResearchElementDefinitionCharacteristic(json : TJSONWriter; name : string; value : TFhirResearchElementDefinitionCharacteristic; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.definition is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'definitionCodeableConcept', TFhirCodeableConcept(value.definition)) 
  else if (value.definition is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'definitionCanonical', TFhirCanonical(value.definition), false);
    ComposeCanonicalProps(json, 'definitionCanonical', TFhirCanonical(value.definition), false);
  end
  else if (value.definition is TFhirExpression) then 
    ComposeExpression(json, 'definitionExpression', TFhirExpression(value.definition)) 
  else if (value.definition is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'definitionDataRequirement', TFhirDataRequirement(value.definition)) ;
  if (SummaryOption in [soFull, soData]) and (value.usageContextList.Count > 0) then
  begin
    startArray(json, 'usageContext', value.usageContextList, false);
    for i := 0 to value.usageContextList.Count - 1 do
      ComposeUsageContext(json, '', value.usageContextList[i]);
    finishArray(json, value.usageContextList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'exclude', value.excludeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'exclude', value.excludeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'unitOfMeasure', value.unitOfMeasure);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'studyEffectiveDescription', value.studyEffectiveDescriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'studyEffectiveDescription', value.studyEffectiveDescriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.studyEffective is TFhirPeriod) then 
    ComposePeriod(json, 'studyEffectivePeriod', TFhirPeriod(value.studyEffective)) 
  else if (SummaryOption in [soFull, soData]) and (value.studyEffective is TFhirDuration) then 
    ComposeDuration(json, 'studyEffectiveDuration', TFhirDuration(value.studyEffective)) 
  else if (SummaryOption in [soFull, soData]) and (value.studyEffective is TFhirTiming) then 
    ComposeTiming(json, 'studyEffectiveTiming', TFhirTiming(value.studyEffective)) 
  else if (SummaryOption in [soFull, soData]) and (value.studyEffective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'studyEffectiveDateTime', TFhirDateTime(value.studyEffective), false);
    ComposeDateTimeProps(json, 'studyEffectiveDateTime', TFhirDateTime(value.studyEffective), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'studyEffectiveTimeFromStart', value.studyEffectiveTimeFromStart);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'studyEffectiveGroupMeasure', value.studyEffectiveGroupMeasureElement, CODES_TFhirGroupMeasureEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'participantEffectiveDescription', value.participantEffectiveDescriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'participantEffectiveDescription', value.participantEffectiveDescriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.participantEffective is TFhirPeriod) then 
    ComposePeriod(json, 'participantEffectivePeriod', TFhirPeriod(value.participantEffective)) 
  else if (SummaryOption in [soFull, soData]) and (value.participantEffective is TFhirDuration) then 
    ComposeDuration(json, 'participantEffectiveDuration', TFhirDuration(value.participantEffective)) 
  else if (SummaryOption in [soFull, soData]) and (value.participantEffective is TFhirTiming) then 
    ComposeTiming(json, 'participantEffectiveTiming', TFhirTiming(value.participantEffective)) 
  else if (SummaryOption in [soFull, soData]) and (value.participantEffective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'participantEffectiveDateTime', TFhirDateTime(value.participantEffective), false);
    ComposeDateTimeProps(json, 'participantEffectiveDateTime', TFhirDateTime(value.participantEffective), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'participantEffectiveTimeFromStart', value.participantEffectiveTimeFromStart);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'participantEffectiveGroupMeasure', value.participantEffectiveGroupMeasureElement, CODES_TFhirGroupMeasureEnum, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseResearchElementDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseResearchElementDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseResearchElementDefinition(jsn : TJsonObject) : TFhirResearchElementDefinition;
begin
  result := TFhirResearchElementDefinition.Create;
  try
    ParseResearchElementDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseResearchElementDefinitionProperties(jsn : TJsonObject; value : TFhirResearchElementDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('shortTitle') or jsn.has('_shortTitle') then
        value.shortTitleElement := parseString(jsn.node['shortTitle'], jsn.vObj['_shortTitle']);
    if jsn.has('subtitle') or jsn.has('_subtitle') then
        value.subtitleElement := parseString(jsn.node['subtitle'], jsn.vObj['_subtitle']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('subjectCodeableConcept') {a4} then
      value.subject := ParseCodeableConcept(jsn.vObj['subjectCodeableConcept']);
    if jsn.has('subjectReference') {a3} then
      value.subject := ParseReference(jsn.vObj['subjectReference']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
      if jsn.has('comment') or jsn.has('_comment') then
      iteratePrimitiveArray(jsn.vArr['comment'], jsn.vArr['_comment'], value.commentList, parseString);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('usage') or jsn.has('_usage') then
        value.usageElement := parseString(jsn.node['usage'], jsn.vObj['_usage']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        value.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        value.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);
    if jsn.has('effectivePeriod') then
        value.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], value.topicList, parseCodeableConcept);
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], value.authorList, parseContactDetail);
    if jsn.has('editor') then
      iterateArray(jsn.vArr['editor'], value.editorList, parseContactDetail);
    if jsn.has('reviewer') then
      iterateArray(jsn.vArr['reviewer'], value.reviewerList, parseContactDetail);
    if jsn.has('endorser') then
      iterateArray(jsn.vArr['endorser'], value.endorserList, parseContactDetail);
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], value.relatedArtifactList, parseRelatedArtifact);
      if jsn.has('library') or jsn.has('_library') then
      iteratePrimitiveArray(jsn.vArr['library'], jsn.vArr['_library'], value.library_List, parseCanonical);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirResearchElementTypeEnum, SYSTEMS_TFhirResearchElementTypeEnum);
    if jsn.has('variableType') or jsn.has('_variableType') then
        value.variableTypeElement := parseEnum(jsn.path+'/variableType', jsn.node['variableType'], jsn.vObj['_variableType'], CODES_TFhirVariableTypeEnum, SYSTEMS_TFhirVariableTypeEnum);
    if jsn.has('characteristic') then
      iterateArray(jsn.vArr['characteristic'], value.characteristicList, parseResearchElementDefinitionCharacteristic);
end;

procedure TFHIRJsonComposer.ComposeResearchElementDefinition(json : TJSONWriter; name : string; value : TFhirResearchElementDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'shortTitle', value.shortTitleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'shortTitle', value.shortTitleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'subtitle', value.subtitleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'subtitle', value.subtitleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject)) 
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirReference) then
    ComposeReference(json, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.commentList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.commentList.Count - 1 do
    begin
      ext := ext or ((value.commentList[i].id <> '') or (value.commentList[i].hasExtensionList) {no-comments or (value.commentList[i].hasComments)});
      val := val or (value.commentList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'comment', value.commentList, true);
      for i := 0 to value.commentList.Count - 1 do
        ComposeStringValue(json, '', value.commentList[i], true);
      finishArray(json, value.commentList);
    end;
    if ext then
    begin
      startArray(json, '_comment', value.commentList, false);
      for i := 0 to value.commentList.Count - 1 do
        ComposeStringProps(json, '', value.commentList[i], true);
      finishArray(json, value.commentList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'usage', value.usageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', value.effectivePeriod);
  if (SummaryOption in [soFull, soData]) and (value.topicList.Count > 0) then
  begin
    startArray(json, 'topic', value.topicList, false);
    for i := 0 to value.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', value.topicList[i]);
    finishArray(json, value.topicList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.authorList.Count > 0) then
  begin
    startArray(json, 'author', value.authorList, false);
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(json, '', value.authorList[i]);
    finishArray(json, value.authorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.editorList.Count > 0) then
  begin
    startArray(json, 'editor', value.editorList, false);
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(json, '', value.editorList[i]);
    finishArray(json, value.editorList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reviewerList.Count > 0) then
  begin
    startArray(json, 'reviewer', value.reviewerList, false);
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(json, '', value.reviewerList[i]);
    finishArray(json, value.reviewerList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.endorserList.Count > 0) then
  begin
    startArray(json, 'endorser', value.endorserList, false);
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(json, '', value.endorserList[i]);
    finishArray(json, value.endorserList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedArtifactList.Count > 0) then
  begin
    startArray(json, 'relatedArtifact', value.relatedArtifactList, false);
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', value.relatedArtifactList[i]);
    finishArray(json, value.relatedArtifactList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.library_List.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.library_List.Count - 1 do
    begin
      ext := ext or ((value.library_List[i].id <> '') or (value.library_List[i].hasExtensionList) {no-comments or (value.library_List[i].hasComments)});
      val := val or (value.library_List[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'library', value.library_List, true);
      for i := 0 to value.library_List.Count - 1 do
        ComposeCanonicalValue(json, '', value.library_List[i], true);
      finishArray(json, value.library_List);
    end;
    if ext then
    begin
      startArray(json, '_library', value.library_List, false);
      for i := 0 to value.library_List.Count - 1 do
        ComposeCanonicalProps(json, '', value.library_List[i], true);
      finishArray(json, value.library_List);
    end;
  end;
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirResearchElementTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'variableType', value.variableTypeElement, CODES_TFhirVariableTypeEnum, false);
  if (value.characteristicList.Count > 0) then
  begin
    startArray(json, 'characteristic', value.characteristicList, false);
    for i := 0 to value.characteristicList.Count - 1 do
      ComposeResearchElementDefinitionCharacteristic(json, '', value.characteristicList[i]);
    finishArray(json, value.characteristicList);
  end;
end;

{$ENDIF FHIR_RESEARCHELEMENTDEFINITION}
{$IFDEF FHIR_RESEARCHSTUDY}
procedure TFHIRJsonParser.ParseResearchStudyArm(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseResearchStudyArm(jsn)); 
end;

function TFHIRJsonParser.ParseResearchStudyArm(jsn : TJsonObject) : TFhirResearchStudyArm;
begin
  result := TFhirResearchStudyArm.Create;
  try
    ParseResearchStudyArmProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseResearchStudyArmProperties(jsn : TJsonObject; value : TFhirResearchStudyArm);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
end;

procedure TFHIRJsonComposer.ComposeResearchStudyArm(json : TJSONWriter; name : string; value : TFhirResearchStudyArm; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseResearchStudyObjective(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseResearchStudyObjective(jsn)); 
end;

function TFHIRJsonParser.ParseResearchStudyObjective(jsn : TJsonObject) : TFhirResearchStudyObjective;
begin
  result := TFhirResearchStudyObjective.Create;
  try
    ParseResearchStudyObjectiveProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseResearchStudyObjectiveProperties(jsn : TJsonObject; value : TFhirResearchStudyObjective);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
end;

procedure TFHIRJsonComposer.ComposeResearchStudyObjective(json : TJSONWriter; name : string; value : TFhirResearchStudyObjective; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseResearchStudy(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseResearchStudy(jsn)); 
end;

function TFHIRJsonParser.ParseResearchStudy(jsn : TJsonObject) : TFhirResearchStudy;
begin
  result := TFhirResearchStudy.Create;
  try
    ParseResearchStudyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseResearchStudyProperties(jsn : TJsonObject; value : TFhirResearchStudy);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('protocol') then
      iterateArray(jsn.vArr['protocol'], value.protocolList, parseReference);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], value.partOfList, parseReference);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirResearchStudyStatusEnum, SYSTEMS_TFhirResearchStudyStatusEnum);
    if jsn.has('primaryPurposeType') then
        value.primaryPurposeType := ParseCodeableConcept(jsn.vObj['primaryPurposeType']);
    if jsn.has('phase') then
        value.phase := ParseCodeableConcept(jsn.vObj['phase']);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('focus') then
      iterateArray(jsn.vArr['focus'], value.focusList, parseCodeableConcept);
    if jsn.has('condition') then
      iterateArray(jsn.vArr['condition'], value.conditionList, parseCodeableConcept);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], value.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('keyword') then
      iterateArray(jsn.vArr['keyword'], value.keywordList, parseCodeableConcept);
    if jsn.has('location') then
      iterateArray(jsn.vArr['location'], value.locationList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('enrollment') then
      iterateArray(jsn.vArr['enrollment'], value.enrollmentList, parseReference);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('sponsor') then
        value.sponsor := ParseReference(jsn.vObj['sponsor']);
    if jsn.has('principalInvestigator') then
        value.principalInvestigator := ParseReference(jsn.vObj['principalInvestigator']);
    if jsn.has('site') then
      iterateArray(jsn.vArr['site'], value.siteList, parseReference);
    if jsn.has('reasonStopped') then
        value.reasonStopped := ParseCodeableConcept(jsn.vObj['reasonStopped']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('arm') then
      iterateArray(jsn.vArr['arm'], value.armList, parseResearchStudyArm);
    if jsn.has('objective') then
      iterateArray(jsn.vArr['objective'], value.objectiveList, parseResearchStudyObjective);
end;

procedure TFHIRJsonComposer.ComposeResearchStudy(json : TJSONWriter; name : string; value : TFhirResearchStudy; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.protocolList.Count > 0) then
  begin
    startArray(json, 'protocol', value.protocolList, false);
    for i := 0 to value.protocolList.Count - 1 do
      ComposeReference(json, '', value.protocolList[i]);
    finishArray(json, value.protocolList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.partOfList.Count > 0) then
  begin
    startArray(json, 'partOf', value.partOfList, false);
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(json, '', value.partOfList[i]);
    finishArray(json, value.partOfList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirResearchStudyStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'primaryPurposeType', value.primaryPurposeType);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'phase', value.phase);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.focusList.Count > 0) then
  begin
    startArray(json, 'focus', value.focusList, false);
    for i := 0 to value.focusList.Count - 1 do
      ComposeCodeableConcept(json, '', value.focusList[i]);
    finishArray(json, value.focusList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.conditionList.Count > 0) then
  begin
    startArray(json, 'condition', value.conditionList, false);
    for i := 0 to value.conditionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.conditionList[i]);
    finishArray(json, value.conditionList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relatedArtifactList.Count > 0) then
  begin
    startArray(json, 'relatedArtifact', value.relatedArtifactList, false);
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', value.relatedArtifactList[i]);
    finishArray(json, value.relatedArtifactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.keywordList.Count > 0) then
  begin
    startArray(json, 'keyword', value.keywordList, false);
    for i := 0 to value.keywordList.Count - 1 do
      ComposeCodeableConcept(json, '', value.keywordList[i]);
    finishArray(json, value.keywordList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.locationList.Count > 0) then
  begin
    startArray(json, 'location', value.locationList, false);
    for i := 0 to value.locationList.Count - 1 do
      ComposeCodeableConcept(json, '', value.locationList[i]);
    finishArray(json, value.locationList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.enrollmentList.Count > 0) then
  begin
    startArray(json, 'enrollment', value.enrollmentList, false);
    for i := 0 to value.enrollmentList.Count - 1 do
      ComposeReference(json, '', value.enrollmentList[i]);
    finishArray(json, value.enrollmentList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'sponsor', value.sponsor);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'principalInvestigator', value.principalInvestigator);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.siteList.Count > 0) then
  begin
    startArray(json, 'site', value.siteList, false);
    for i := 0 to value.siteList.Count - 1 do
      ComposeReference(json, '', value.siteList[i]);
    finishArray(json, value.siteList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'reasonStopped', value.reasonStopped);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.armList.Count > 0) then
  begin
    startArray(json, 'arm', value.armList, false);
    for i := 0 to value.armList.Count - 1 do
      ComposeResearchStudyArm(json, '', value.armList[i]);
    finishArray(json, value.armList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.objectiveList.Count > 0) then
  begin
    startArray(json, 'objective', value.objectiveList, false);
    for i := 0 to value.objectiveList.Count - 1 do
      ComposeResearchStudyObjective(json, '', value.objectiveList[i]);
    finishArray(json, value.objectiveList);
  end;
end;

{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
procedure TFHIRJsonParser.ParseResearchSubject(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseResearchSubject(jsn)); 
end;

function TFHIRJsonParser.ParseResearchSubject(jsn : TJsonObject) : TFhirResearchSubject;
begin
  result := TFhirResearchSubject.Create;
  try
    ParseResearchSubjectProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseResearchSubjectProperties(jsn : TJsonObject; value : TFhirResearchSubject);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirResearchSubjectStatusEnum, SYSTEMS_TFhirResearchSubjectStatusEnum);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('study') then
        value.study := ParseReference(jsn.vObj['study']);
    if jsn.has('individual') then
        value.individual := ParseReference(jsn.vObj['individual']);
    if jsn.has('assignedArm') or jsn.has('_assignedArm') then
        value.assignedArmElement := parseString(jsn.node['assignedArm'], jsn.vObj['_assignedArm']);
    if jsn.has('actualArm') or jsn.has('_actualArm') then
        value.actualArmElement := parseString(jsn.node['actualArm'], jsn.vObj['_actualArm']);
    if jsn.has('consent') then
        value.consent := ParseReference(jsn.vObj['consent']);
end;

procedure TFHIRJsonComposer.ComposeResearchSubject(json : TJSONWriter; name : string; value : TFhirResearchSubject; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirResearchSubjectStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', value.period);
  ComposeReference(json, 'study', value.study);
  ComposeReference(json, 'individual', value.individual);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'assignedArm', value.assignedArmElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'assignedArm', value.assignedArmElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'actualArm', value.actualArmElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'actualArm', value.actualArmElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'consent', value.consent);
end;

{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
procedure TFHIRJsonParser.ParseRiskAssessmentPrediction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRiskAssessmentPrediction(jsn)); 
end;

function TFHIRJsonParser.ParseRiskAssessmentPrediction(jsn : TJsonObject) : TFhirRiskAssessmentPrediction;
begin
  result := TFhirRiskAssessmentPrediction.Create;
  try
    ParseRiskAssessmentPredictionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRiskAssessmentPredictionProperties(jsn : TJsonObject; value : TFhirRiskAssessmentPrediction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('outcome') then
        value.outcome := ParseCodeableConcept(jsn.vObj['outcome']);
    if jsn.has('probabilityRange') {a4} then
      value.probability := ParseRange(jsn.vObj['probabilityRange']);
    if jsn.has('probabilityDecimal') or jsn.has('_probabilityDecimal') then
      value.probability := parseDecimal(jsn.node['probabilityDecimal'], jsn.vObj['_probabilityDecimal']);
    if jsn.has('qualitativeRisk') then
        value.qualitativeRisk := ParseCodeableConcept(jsn.vObj['qualitativeRisk']);
    if jsn.has('relativeRisk') or jsn.has('_relativeRisk') then
        value.relativeRiskElement := parseDecimal(jsn.node['relativeRisk'], jsn.vObj['_relativeRisk']);
    if jsn.has('whenPeriod') {a4} then
      value.when := ParsePeriod(jsn.vObj['whenPeriod']);
    if jsn.has('whenRange') {a4} then
      value.when := ParseRange(jsn.vObj['whenRange']);
    if jsn.has('rationale') or jsn.has('_rationale') then
        value.rationaleElement := parseString(jsn.node['rationale'], jsn.vObj['_rationale']);
end;

procedure TFHIRJsonComposer.ComposeRiskAssessmentPrediction(json : TJSONWriter; name : string; value : TFhirRiskAssessmentPrediction; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'outcome', value.outcome);
  if (SummaryOption in [soFull, soData]) and (value.probability is TFhirRange) then 
    ComposeRange(json, 'probabilityRange', TFhirRange(value.probability)) 
  else if (SummaryOption in [soFull, soData]) and (value.probability is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'probabilityDecimal', TFhirDecimal(value.probability), false);
    ComposeDecimalProps(json, 'probabilityDecimal', TFhirDecimal(value.probability), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'qualitativeRisk', value.qualitativeRisk);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'relativeRisk', value.relativeRiskElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'relativeRisk', value.relativeRiskElement, false);
  if (SummaryOption in [soFull, soData]) and (value.when is TFhirPeriod) then 
    ComposePeriod(json, 'whenPeriod', TFhirPeriod(value.when)) 
  else if (SummaryOption in [soFull, soData]) and (value.when is TFhirRange) then 
    ComposeRange(json, 'whenRange', TFhirRange(value.when)) ;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'rationale', value.rationaleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'rationale', value.rationaleElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseRiskAssessment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRiskAssessment(jsn)); 
end;

function TFHIRJsonParser.ParseRiskAssessment(jsn : TJsonObject) : TFhirRiskAssessment;
begin
  result := TFhirRiskAssessment.Create;
  try
    ParseRiskAssessmentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRiskAssessmentProperties(jsn : TJsonObject; value : TFhirRiskAssessment);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
        value.basedOn := ParseReference(jsn.vObj['basedOn']);
    if jsn.has('parent') then
        value.parent := ParseReference(jsn.vObj['parent']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum);
    if jsn.has('method') then
        value.method := ParseCodeableConcept(jsn.vObj['method']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('occurrencePeriod') {a4} then
      value.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      value.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('condition') then
        value.condition := ParseReference(jsn.vObj['condition']);
    if jsn.has('performer') then
        value.performer := ParseReference(jsn.vObj['performer']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('basis') then
      iterateArray(jsn.vArr['basis'], value.basisList, parseReference);
    if jsn.has('prediction') then
      iterateArray(jsn.vArr['prediction'], value.predictionList, parseRiskAssessmentPrediction);
    if jsn.has('mitigation') or jsn.has('_mitigation') then
        value.mitigationElement := parseString(jsn.node['mitigation'], jsn.vObj['_mitigation']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeRiskAssessment(json : TJSONWriter; name : string; value : TFhirRiskAssessment; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'basedOn', value.basedOn);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'parent', value.parent);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirObservationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'method', value.method);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(value.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'condition', value.condition);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'performer', value.performer);
  if (SummaryOption in [soFull, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.basisList.Count > 0) then
  begin
    startArray(json, 'basis', value.basisList, false);
    for i := 0 to value.basisList.Count - 1 do
      ComposeReference(json, '', value.basisList[i]);
    finishArray(json, value.basisList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.predictionList.Count > 0) then
  begin
    startArray(json, 'prediction', value.predictionList, false);
    for i := 0 to value.predictionList.Count - 1 do
      ComposeRiskAssessmentPrediction(json, '', value.predictionList[i]);
    finishArray(json, value.predictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'mitigation', value.mitigationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'mitigation', value.mitigationElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
end;

{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
procedure TFHIRJsonParser.ParseSchedule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSchedule(jsn)); 
end;

function TFHIRJsonParser.ParseSchedule(jsn : TJsonObject) : TFhirSchedule;
begin
  result := TFhirSchedule.Create;
  try
    ParseScheduleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseScheduleProperties(jsn : TJsonObject; value : TFhirSchedule);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        value.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);
    if jsn.has('serviceCategory') then
      iterateArray(jsn.vArr['serviceCategory'], value.serviceCategoryList, parseCodeableConcept);
    if jsn.has('serviceType') then
      iterateArray(jsn.vArr['serviceType'], value.serviceTypeList, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], value.specialtyList, parseCodeableConcept);
    if jsn.has('actor') then
      iterateArray(jsn.vArr['actor'], value.actorList, parseReference);
    if jsn.has('planningHorizon') then
        value.planningHorizon := ParsePeriod(jsn.vObj['planningHorizon']);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);
end;

procedure TFHIRJsonComposer.ComposeSchedule(json : TJSONWriter; name : string; value : TFhirSchedule; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'active', value.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.serviceCategoryList.Count > 0) then
  begin
    startArray(json, 'serviceCategory', value.serviceCategoryList, false);
    for i := 0 to value.serviceCategoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.serviceCategoryList[i]);
    finishArray(json, value.serviceCategoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.serviceTypeList.Count > 0) then
  begin
    startArray(json, 'serviceType', value.serviceTypeList, false);
    for i := 0 to value.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.serviceTypeList[i]);
    finishArray(json, value.serviceTypeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.specialtyList.Count > 0) then
  begin
    startArray(json, 'specialty', value.specialtyList, false);
    for i := 0 to value.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', value.specialtyList[i]);
    finishArray(json, value.specialtyList);
  end;
  if (value.actorList.Count > 0) then
  begin
    startArray(json, 'actor', value.actorList, false);
    for i := 0 to value.actorList.Count - 1 do
      ComposeReference(json, '', value.actorList[i]);
    finishArray(json, value.actorList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'planningHorizon', value.planningHorizon);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', value.commentElement, false);
end;

{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
procedure TFHIRJsonParser.ParseSearchParameterComponent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSearchParameterComponent(jsn)); 
end;

function TFHIRJsonParser.ParseSearchParameterComponent(jsn : TJsonObject) : TFhirSearchParameterComponent;
begin
  result := TFhirSearchParameterComponent.Create;
  try
    ParseSearchParameterComponentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSearchParameterComponentProperties(jsn : TJsonObject; value : TFhirSearchParameterComponent);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('definition') or jsn.has('_definition') then
        value.definitionElement := parseCanonical(jsn.node['definition'], jsn.vObj['_definition']);
    if jsn.has('expression') or jsn.has('_expression') then
        value.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);
end;

procedure TFHIRJsonComposer.ComposeSearchParameterComponent(json : TJSONWriter; name : string; value : TFhirSearchParameterComponent; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCanonicalValue(json, 'definition', value.definitionElement, false);
  ComposeCanonicalProps(json, 'definition', value.definitionElement, false);
  ComposeStringValue(json, 'expression', value.expressionElement, false);
  ComposeStringProps(json, 'expression', value.expressionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSearchParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSearchParameter(jsn)); 
end;

function TFHIRJsonParser.ParseSearchParameter(jsn : TJsonObject) : TFhirSearchParameter;
begin
  result := TFhirSearchParameter.Create;
  try
    ParseSearchParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSearchParameterProperties(jsn : TJsonObject; value : TFhirSearchParameter);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('derivedFrom') or jsn.has('_derivedFrom') then
        value.derivedFromElement := parseCanonical(jsn.node['derivedFrom'], jsn.vObj['_derivedFrom']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
    if jsn.has('base') or jsn.has('_base') then
      iterateEnumArray(jsn.vArr['base'], jsn.vArr['_base'], jsn.path+'/base', value.base, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum);
    if jsn.has('expression') or jsn.has('_expression') then
        value.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);
    if jsn.has('xpath') or jsn.has('_xpath') then
        value.xpathElement := parseString(jsn.node['xpath'], jsn.vObj['_xpath']);
    if jsn.has('xpathUsage') or jsn.has('_xpathUsage') then
        value.xpathUsageElement := parseEnum(jsn.path+'/xpathUsage', jsn.node['xpathUsage'], jsn.vObj['_xpathUsage'], CODES_TFhirXPathUsageTypeEnum, SYSTEMS_TFhirXPathUsageTypeEnum);
    if jsn.has('target') or jsn.has('_target') then
      iterateEnumArray(jsn.vArr['target'], jsn.vArr['_target'], jsn.path+'/target', value.target, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('multipleOr') or jsn.has('_multipleOr') then
        value.multipleOrElement := parseBoolean(jsn.node['multipleOr'], jsn.vObj['_multipleOr']);
    if jsn.has('multipleAnd') or jsn.has('_multipleAnd') then
        value.multipleAndElement := parseBoolean(jsn.node['multipleAnd'], jsn.vObj['_multipleAnd']);
    if jsn.has('comparator') or jsn.has('_comparator') then
      iterateEnumArray(jsn.vArr['comparator'], jsn.vArr['_comparator'], jsn.path+'/comparator', value.comparatorList, parseEnum, CODES_TFhirSearchComparatorEnum, SYSTEMS_TFhirSearchComparatorEnum);
    if jsn.has('modifier') or jsn.has('_modifier') then
      iterateEnumArray(jsn.vArr['modifier'], jsn.vArr['_modifier'], jsn.path+'/modifier', value.modifierList, parseEnum, CODES_TFhirSearchModifierCodeEnum, SYSTEMS_TFhirSearchModifierCodeEnum);
      if jsn.has('chain') or jsn.has('_chain') then
      iteratePrimitiveArray(jsn.vArr['chain'], jsn.vArr['_chain'], value.chainList, parseString);
    if jsn.has('component') then
      iterateArray(jsn.vArr['component'], value.componentList, parseSearchParameterComponent);
end;

procedure TFHIRJsonComposer.ComposeSearchParameter(json : TJSONWriter; name : string; value : TFhirSearchParameter; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  ComposeUriValue(json, 'url', value.urlElement, false);
  ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalValue(json, 'derivedFrom', value.derivedFromElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalProps(json, 'derivedFrom', value.derivedFromElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  ComposeCodeValue(json, 'code', value.codeElement, false);
  ComposeCodeProps(json, 'code', value.codeElement, false);
  if (value.base.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.base.Count - 1 do
    begin
      val := val or (value.base[i].hasPrimitiveValue);
      ext := ext or ((value.base[i].id <> '') or (value.base[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'base', value.base, true);
      for i := 0 to value.base.Count - 1 do
        ComposeEnumValue(json, '', value.base[i], CODES_TFhirResourceTypesEnum, true);
      finishArray(json, value.base);
    end;
    if ext then
    begin
      startArray(json, '_base', value.base, false);
      for i := 0 to value.base.Count - 1 do
        ComposeEnumProps(json, '', value.base[i], CODES_TFhirResourceTypesEnum, true);
      finishArray(json, value.base);
    end;
  end;
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirSearchParamTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', value.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', value.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'xpath', value.xpathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'xpath', value.xpathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'xpathUsage', value.xpathUsageElement, CODES_TFhirXPathUsageTypeEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.target.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.target.Count - 1 do
    begin
      val := val or (value.target[i].hasPrimitiveValue);
      ext := ext or ((value.target[i].id <> '') or (value.target[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'target', value.target, true);
      for i := 0 to value.target.Count - 1 do
        ComposeEnumValue(json, '', value.target[i], CODES_TFhirResourceTypesEnum, true);
      finishArray(json, value.target);
    end;
    if ext then
    begin
      startArray(json, '_target', value.target, false);
      for i := 0 to value.target.Count - 1 do
        ComposeEnumProps(json, '', value.target[i], CODES_TFhirResourceTypesEnum, true);
      finishArray(json, value.target);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'multipleOr', value.multipleOrElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'multipleOr', value.multipleOrElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'multipleAnd', value.multipleAndElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'multipleAnd', value.multipleAndElement, false);
  if (SummaryOption in [soFull, soData]) and (value.comparatorList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.comparatorList.Count - 1 do
    begin
      val := val or (value.comparatorList[i].hasPrimitiveValue);
      ext := ext or ((value.comparatorList[i].id <> '') or (value.comparatorList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'comparator', value.comparatorList, true);
      for i := 0 to value.comparatorList.Count - 1 do
        ComposeEnumValue(json, '', value.comparatorList[i], CODES_TFhirSearchComparatorEnum, true);
      finishArray(json, value.comparatorList);
    end;
    if ext then
    begin
      startArray(json, '_comparator', value.comparatorList, false);
      for i := 0 to value.comparatorList.Count - 1 do
        ComposeEnumProps(json, '', value.comparatorList[i], CODES_TFhirSearchComparatorEnum, true);
      finishArray(json, value.comparatorList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.modifierList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.modifierList.Count - 1 do
    begin
      val := val or (value.modifierList[i].hasPrimitiveValue);
      ext := ext or ((value.modifierList[i].id <> '') or (value.modifierList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'modifier', value.modifierList, true);
      for i := 0 to value.modifierList.Count - 1 do
        ComposeEnumValue(json, '', value.modifierList[i], CODES_TFhirSearchModifierCodeEnum, true);
      finishArray(json, value.modifierList);
    end;
    if ext then
    begin
      startArray(json, '_modifier', value.modifierList, false);
      for i := 0 to value.modifierList.Count - 1 do
        ComposeEnumProps(json, '', value.modifierList[i], CODES_TFhirSearchModifierCodeEnum, true);
      finishArray(json, value.modifierList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.chainList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.chainList.Count - 1 do
    begin
      ext := ext or ((value.chainList[i].id <> '') or (value.chainList[i].hasExtensionList) {no-comments or (value.chainList[i].hasComments)});
      val := val or (value.chainList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'chain', value.chainList, true);
      for i := 0 to value.chainList.Count - 1 do
        ComposeStringValue(json, '', value.chainList[i], true);
      finishArray(json, value.chainList);
    end;
    if ext then
    begin
      startArray(json, '_chain', value.chainList, false);
      for i := 0 to value.chainList.Count - 1 do
        ComposeStringProps(json, '', value.chainList[i], true);
      finishArray(json, value.chainList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.componentList.Count > 0) then
  begin
    startArray(json, 'component', value.componentList, false);
    for i := 0 to value.componentList.Count - 1 do
      ComposeSearchParameterComponent(json, '', value.componentList[i]);
    finishArray(json, value.componentList);
  end;
end;

{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
procedure TFHIRJsonParser.ParseServiceRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseServiceRequest(jsn)); 
end;

function TFHIRJsonParser.ParseServiceRequest(jsn : TJsonObject) : TFhirServiceRequest;
begin
  result := TFhirServiceRequest.Create;
  try
    ParseServiceRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseServiceRequestProperties(jsn : TJsonObject; value : TFhirServiceRequest);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
      if jsn.has('instantiatesCanonical') or jsn.has('_instantiatesCanonical') then
      iteratePrimitiveArray(jsn.vArr['instantiatesCanonical'], jsn.vArr['_instantiatesCanonical'], value.instantiatesCanonicalList, parseCanonical);
      if jsn.has('instantiatesUri') or jsn.has('_instantiatesUri') then
      iteratePrimitiveArray(jsn.vArr['instantiatesUri'], jsn.vArr['_instantiatesUri'], value.instantiatesUriList, parseUri);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], value.replacesList, parseReference);
    if jsn.has('requisition') then
        value.requisition := ParseIdentifier(jsn.vObj['requisition']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('intent') or jsn.has('_intent') then
        value.intentElement := parseEnum(jsn.path+'/intent', jsn.node['intent'], jsn.vObj['_intent'], CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('priority') or jsn.has('_priority') then
        value.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('doNotPerform') or jsn.has('_doNotPerform') then
        value.doNotPerformElement := parseBoolean(jsn.node['doNotPerform'], jsn.vObj['_doNotPerform']);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('orderDetail') then
      iterateArray(jsn.vArr['orderDetail'], value.orderDetailList, parseCodeableConcept);
    if jsn.has('quantityQuantity') {a4} then
      value.quantity := ParseQuantity(jsn.vObj['quantityQuantity']);
    if jsn.has('quantityRatio') {a4} then
      value.quantity := ParseRatio(jsn.vObj['quantityRatio']);
    if jsn.has('quantityRange') {a4} then
      value.quantity := ParseRange(jsn.vObj['quantityRange']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('occurrencePeriod') {a4} then
      value.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      value.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      value.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('asNeededCodeableConcept') {a4} then
      value.asNeeded := ParseCodeableConcept(jsn.vObj['asNeededCodeableConcept']);
    if jsn.has('asNeededBoolean') or jsn.has('_asNeededBoolean') then
      value.asNeeded := parseBoolean(jsn.node['asNeededBoolean'], jsn.vObj['_asNeededBoolean']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        value.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);
    if jsn.has('requester') then
        value.requester := ParseReference(jsn.vObj['requester']);
    if jsn.has('performerType') then
        value.performerType := ParseCodeableConcept(jsn.vObj['performerType']);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], value.performerList, parseReference);
    if jsn.has('locationCode') then
      iterateArray(jsn.vArr['locationCode'], value.locationCodeList, parseCodeableConcept);
    if jsn.has('locationReference') then
      iterateArray(jsn.vArr['locationReference'], value.locationReferenceList, parseReference);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], value.insuranceList, parseReference);
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], value.supportingInfoList, parseReference);
    if jsn.has('specimen') then
      iterateArray(jsn.vArr['specimen'], value.specimenList, parseReference);
    if jsn.has('bodySite') then
      iterateArray(jsn.vArr['bodySite'], value.bodySiteList, parseCodeableConcept);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('patientInstruction') or jsn.has('_patientInstruction') then
        value.patientInstructionElement := parseString(jsn.node['patientInstruction'], jsn.vObj['_patientInstruction']);
    if jsn.has('relevantHistory') then
      iterateArray(jsn.vArr['relevantHistory'], value.relevantHistoryList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeServiceRequest(json : TJSONWriter; name : string; value : TFhirServiceRequest; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesCanonicalList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesCanonicalList[i].id <> '') or (value.instantiatesCanonicalList[i].hasExtensionList) {no-comments or (value.instantiatesCanonicalList[i].hasComments)});
      val := val or (value.instantiatesCanonicalList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesCanonical', value.instantiatesCanonicalList, true);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalValue(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesCanonical', value.instantiatesCanonicalList, false);
      for i := 0 to value.instantiatesCanonicalList.Count - 1 do
        ComposeCanonicalProps(json, '', value.instantiatesCanonicalList[i], true);
      finishArray(json, value.instantiatesCanonicalList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instantiatesUriList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.instantiatesUriList.Count - 1 do
    begin
      ext := ext or ((value.instantiatesUriList[i].id <> '') or (value.instantiatesUriList[i].hasExtensionList) {no-comments or (value.instantiatesUriList[i].hasComments)});
      val := val or (value.instantiatesUriList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'instantiatesUri', value.instantiatesUriList, true);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriValue(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
    if ext then
    begin
      startArray(json, '_instantiatesUri', value.instantiatesUriList, false);
      for i := 0 to value.instantiatesUriList.Count - 1 do
        ComposeUriProps(json, '', value.instantiatesUriList[i], true);
      finishArray(json, value.instantiatesUriList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.replacesList.Count > 0) then
  begin
    startArray(json, 'replaces', value.replacesList, false);
    for i := 0 to value.replacesList.Count - 1 do
      ComposeReference(json, '', value.replacesList[i]);
    finishArray(json, value.replacesList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'requisition', value.requisition);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirRequestStatusEnum, false);
  ComposeEnumValue(json, 'intent', value.intentElement, CODES_TFhirRequestIntentEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'doNotPerform', value.doNotPerformElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'doNotPerform', value.doNotPerformElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.orderDetailList.Count > 0) then
  begin
    startArray(json, 'orderDetail', value.orderDetailList, false);
    for i := 0 to value.orderDetailList.Count - 1 do
      ComposeCodeableConcept(json, '', value.orderDetailList[i]);
    finishArray(json, value.orderDetailList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.quantity is TFhirQuantity) then 
    ComposeQuantity(json, 'quantityQuantity', TFhirQuantity(value.quantity)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.quantity is TFhirRatio) then 
    ComposeRatio(json, 'quantityRatio', TFhirRatio(value.quantity)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.quantity is TFhirRange) then 
    ComposeRange(json, 'quantityRange', TFhirRange(value.quantity)) ;
  ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(value.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(value.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.asNeeded is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'asNeededCodeableConcept', TFhirCodeableConcept(value.asNeeded)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.asNeeded is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'asNeededBoolean', TFhirBoolean(value.asNeeded), false);
    ComposeBooleanProps(json, 'asNeededBoolean', TFhirBoolean(value.asNeeded), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'authoredOn', value.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'authoredOn', value.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'requester', value.requester);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'performerType', value.performerType);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.performerList.Count > 0) then
  begin
    startArray(json, 'performer', value.performerList, false);
    for i := 0 to value.performerList.Count - 1 do
      ComposeReference(json, '', value.performerList[i]);
    finishArray(json, value.performerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.locationCodeList.Count > 0) then
  begin
    startArray(json, 'locationCode', value.locationCodeList, false);
    for i := 0 to value.locationCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.locationCodeList[i]);
    finishArray(json, value.locationCodeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.locationReferenceList.Count > 0) then
  begin
    startArray(json, 'locationReference', value.locationReferenceList, false);
    for i := 0 to value.locationReferenceList.Count - 1 do
      ComposeReference(json, '', value.locationReferenceList[i]);
    finishArray(json, value.locationReferenceList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.insuranceList.Count > 0) then
  begin
    startArray(json, 'insurance', value.insuranceList, false);
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeReference(json, '', value.insuranceList[i]);
    finishArray(json, value.insuranceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.supportingInfoList.Count > 0) then
  begin
    startArray(json, 'supportingInfo', value.supportingInfoList, false);
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeReference(json, '', value.supportingInfoList[i]);
    finishArray(json, value.supportingInfoList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.specimenList.Count > 0) then
  begin
    startArray(json, 'specimen', value.specimenList, false);
    for i := 0 to value.specimenList.Count - 1 do
      ComposeReference(json, '', value.specimenList[i]);
    finishArray(json, value.specimenList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.bodySiteList.Count > 0) then
  begin
    startArray(json, 'bodySite', value.bodySiteList, false);
    for i := 0 to value.bodySiteList.Count - 1 do
      ComposeCodeableConcept(json, '', value.bodySiteList[i]);
    finishArray(json, value.bodySiteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'patientInstruction', value.patientInstructionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'patientInstruction', value.patientInstructionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.relevantHistoryList.Count > 0) then
  begin
    startArray(json, 'relevantHistory', value.relevantHistoryList, false);
    for i := 0 to value.relevantHistoryList.Count - 1 do
      ComposeReference(json, '', value.relevantHistoryList[i]);
    finishArray(json, value.relevantHistoryList);
  end;
end;

{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
procedure TFHIRJsonParser.ParseSlot(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSlot(jsn)); 
end;

function TFHIRJsonParser.ParseSlot(jsn : TJsonObject) : TFhirSlot;
begin
  result := TFhirSlot.Create;
  try
    ParseSlotProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSlotProperties(jsn : TJsonObject; value : TFhirSlot);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('serviceCategory') then
      iterateArray(jsn.vArr['serviceCategory'], value.serviceCategoryList, parseCodeableConcept);
    if jsn.has('serviceType') then
      iterateArray(jsn.vArr['serviceType'], value.serviceTypeList, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], value.specialtyList, parseCodeableConcept);
    if jsn.has('appointmentType') then
        value.appointmentType := ParseCodeableConcept(jsn.vObj['appointmentType']);
    if jsn.has('schedule') then
        value.schedule := ParseReference(jsn.vObj['schedule']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirSlotStatusEnum, SYSTEMS_TFhirSlotStatusEnum);
    if jsn.has('start') or jsn.has('_start') then
        value.startElement := parseInstant(jsn.node['start'], jsn.vObj['_start']);
    if jsn.has('end') or jsn.has('_end') then
        value.end_Element := parseInstant(jsn.node['end'], jsn.vObj['_end']);
    if jsn.has('overbooked') or jsn.has('_overbooked') then
        value.overbookedElement := parseBoolean(jsn.node['overbooked'], jsn.vObj['_overbooked']);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);
end;

procedure TFHIRJsonComposer.ComposeSlot(json : TJSONWriter; name : string; value : TFhirSlot; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.serviceCategoryList.Count > 0) then
  begin
    startArray(json, 'serviceCategory', value.serviceCategoryList, false);
    for i := 0 to value.serviceCategoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.serviceCategoryList[i]);
    finishArray(json, value.serviceCategoryList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.serviceTypeList.Count > 0) then
  begin
    startArray(json, 'serviceType', value.serviceTypeList, false);
    for i := 0 to value.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.serviceTypeList[i]);
    finishArray(json, value.serviceTypeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.specialtyList.Count > 0) then
  begin
    startArray(json, 'specialty', value.specialtyList, false);
    for i := 0 to value.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', value.specialtyList[i]);
    finishArray(json, value.specialtyList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'appointmentType', value.appointmentType);
  ComposeReference(json, 'schedule', value.schedule);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirSlotStatusEnum, false);
  ComposeInstantValue(json, 'start', value.startElement, false);
  ComposeInstantProps(json, 'start', value.startElement, false);
  ComposeInstantValue(json, 'end', value.end_Element, false);
  ComposeInstantProps(json, 'end', value.end_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'overbooked', value.overbookedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'overbooked', value.overbookedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', value.commentElement, false);
end;

{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
procedure TFHIRJsonParser.ParseSpecimenCollection(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenCollection(jsn)); 
end;

function TFHIRJsonParser.ParseSpecimenCollection(jsn : TJsonObject) : TFhirSpecimenCollection;
begin
  result := TFhirSpecimenCollection.Create;
  try
    ParseSpecimenCollectionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenCollectionProperties(jsn : TJsonObject; value : TFhirSpecimenCollection);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('collector') then
        value.collector := ParseReference(jsn.vObj['collector']);
    if jsn.has('collectedPeriod') {a4} then
      value.collected := ParsePeriod(jsn.vObj['collectedPeriod']);
    if jsn.has('collectedDateTime') or jsn.has('_collectedDateTime') then
      value.collected := parseDateTime(jsn.node['collectedDateTime'], jsn.vObj['_collectedDateTime']);
    if jsn.has('duration') then
        value.duration := ParseDuration(jsn.vObj['duration']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('method') then
        value.method := ParseCodeableConcept(jsn.vObj['method']);
    if jsn.has('bodySite') then
        value.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);
    if jsn.has('fastingStatusCodeableConcept') {a4} then
      value.fastingStatus := ParseCodeableConcept(jsn.vObj['fastingStatusCodeableConcept']);
    if jsn.has('fastingStatusDuration') {a4} then
      value.fastingStatus := ParseDuration(jsn.vObj['fastingStatusDuration']);
end;

procedure TFHIRJsonComposer.ComposeSpecimenCollection(json : TJSONWriter; name : string; value : TFhirSpecimenCollection; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'collector', value.collector);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.collected is TFhirPeriod) then 
    ComposePeriod(json, 'collectedPeriod', TFhirPeriod(value.collected)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.collected is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'collectedDateTime', TFhirDateTime(value.collected), false);
    ComposeDateTimeProps(json, 'collectedDateTime', TFhirDateTime(value.collected), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDuration(json, 'duration', value.duration);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'method', value.method);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'bodySite', value.bodySite);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.fastingStatus is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'fastingStatusCodeableConcept', TFhirCodeableConcept(value.fastingStatus)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fastingStatus is TFhirDuration) then 
    ComposeDuration(json, 'fastingStatusDuration', TFhirDuration(value.fastingStatus)) ;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSpecimenProcessing(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenProcessing(jsn)); 
end;

function TFHIRJsonParser.ParseSpecimenProcessing(jsn : TJsonObject) : TFhirSpecimenProcessing;
begin
  result := TFhirSpecimenProcessing.Create;
  try
    ParseSpecimenProcessingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenProcessingProperties(jsn : TJsonObject; value : TFhirSpecimenProcessing);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('procedure') then
        value.procedure_ := ParseCodeableConcept(jsn.vObj['procedure']);
    if jsn.has('additive') then
      iterateArray(jsn.vArr['additive'], value.additiveList, parseReference);
    if jsn.has('timePeriod') {a4} then
      value.time := ParsePeriod(jsn.vObj['timePeriod']);
    if jsn.has('timeDateTime') or jsn.has('_timeDateTime') then
      value.time := parseDateTime(jsn.node['timeDateTime'], jsn.vObj['_timeDateTime']);
end;

procedure TFHIRJsonComposer.ComposeSpecimenProcessing(json : TJSONWriter; name : string; value : TFhirSpecimenProcessing; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'procedure', value.procedure_);
  if (SummaryOption in [soFull, soData]) and (value.additiveList.Count > 0) then
  begin
    startArray(json, 'additive', value.additiveList, false);
    for i := 0 to value.additiveList.Count - 1 do
      ComposeReference(json, '', value.additiveList[i]);
    finishArray(json, value.additiveList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.time is TFhirPeriod) then 
    ComposePeriod(json, 'timePeriod', TFhirPeriod(value.time)) 
  else if (SummaryOption in [soFull, soData]) and (value.time is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timeDateTime', TFhirDateTime(value.time), false);
    ComposeDateTimeProps(json, 'timeDateTime', TFhirDateTime(value.time), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSpecimenContainer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenContainer(jsn)); 
end;

function TFHIRJsonParser.ParseSpecimenContainer(jsn : TJsonObject) : TFhirSpecimenContainer;
begin
  result := TFhirSpecimenContainer.Create;
  try
    ParseSpecimenContainerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenContainerProperties(jsn : TJsonObject; value : TFhirSpecimenContainer);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('capacity') then
        value.capacity := ParseQuantity(jsn.vObj['capacity']);
    if jsn.has('specimenQuantity') then
        value.specimenQuantity := ParseQuantity(jsn.vObj['specimenQuantity']);
    if jsn.has('additiveCodeableConcept') {a4} then
      value.additive := ParseCodeableConcept(jsn.vObj['additiveCodeableConcept']);
    if jsn.has('additiveReference') {a3} then
      value.additive := ParseReference(jsn.vObj['additiveReference']);
end;

procedure TFHIRJsonComposer.ComposeSpecimenContainer(json : TJSONWriter; name : string; value : TFhirSpecimenContainer; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'capacity', value.capacity);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'specimenQuantity', value.specimenQuantity);
  if (SummaryOption in [soFull, soData]) and (value.additive is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'additiveCodeableConcept', TFhirCodeableConcept(value.additive)) 
  else if (SummaryOption in [soFull, soData]) and (value.additive is TFhirReference) then
    ComposeReference(json, 'additiveReference', TFhirReference(value.additive));
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSpecimen(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimen(jsn)); 
end;

function TFHIRJsonParser.ParseSpecimen(jsn : TJsonObject) : TFhirSpecimen;
begin
  result := TFhirSpecimen.Create;
  try
    ParseSpecimenProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenProperties(jsn : TJsonObject; value : TFhirSpecimen);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('accessionIdentifier') then
        value.accessionIdentifier := ParseIdentifier(jsn.vObj['accessionIdentifier']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirSpecimenStatusEnum, SYSTEMS_TFhirSpecimenStatusEnum);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('subject') then
        value.subject := ParseReference(jsn.vObj['subject']);
    if jsn.has('receivedTime') or jsn.has('_receivedTime') then
        value.receivedTimeElement := parseDateTime(jsn.node['receivedTime'], jsn.vObj['_receivedTime']);
    if jsn.has('parent') then
      iterateArray(jsn.vArr['parent'], value.parentList, parseReference);
    if jsn.has('request') then
      iterateArray(jsn.vArr['request'], value.requestList, parseReference);
    if jsn.has('collection') then
        value.collection := ParseSpecimenCollection(jsn.vObj['collection']);
    if jsn.has('processing') then
      iterateArray(jsn.vArr['processing'], value.processingList, parseSpecimenProcessing);
    if jsn.has('container') then
      iterateArray(jsn.vArr['container'], value.containerList, parseSpecimenContainer);
    if jsn.has('condition') then
      iterateArray(jsn.vArr['condition'], value.conditionList, parseCodeableConcept);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeSpecimen(json : TJSONWriter; name : string; value : TFhirSpecimen; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'accessionIdentifier', value.accessionIdentifier);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirSpecimenStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'subject', value.subject);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'receivedTime', value.receivedTimeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'receivedTime', value.receivedTimeElement, false);
  if (SummaryOption in [soFull, soData]) and (value.parentList.Count > 0) then
  begin
    startArray(json, 'parent', value.parentList, false);
    for i := 0 to value.parentList.Count - 1 do
      ComposeReference(json, '', value.parentList[i]);
    finishArray(json, value.parentList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.requestList.Count > 0) then
  begin
    startArray(json, 'request', value.requestList, false);
    for i := 0 to value.requestList.Count - 1 do
      ComposeReference(json, '', value.requestList[i]);
    finishArray(json, value.requestList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeSpecimenCollection(json, 'collection', value.collection);
  if (SummaryOption in [soFull, soData]) and (value.processingList.Count > 0) then
  begin
    startArray(json, 'processing', value.processingList, false);
    for i := 0 to value.processingList.Count - 1 do
      ComposeSpecimenProcessing(json, '', value.processingList[i]);
    finishArray(json, value.processingList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.containerList.Count > 0) then
  begin
    startArray(json, 'container', value.containerList, false);
    for i := 0 to value.containerList.Count - 1 do
      ComposeSpecimenContainer(json, '', value.containerList[i]);
    finishArray(json, value.containerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.conditionList.Count > 0) then
  begin
    startArray(json, 'condition', value.conditionList, false);
    for i := 0 to value.conditionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.conditionList[i]);
    finishArray(json, value.conditionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
end;

{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
procedure TFHIRJsonParser.ParseSpecimenDefinitionTypeTested(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenDefinitionTypeTested(jsn)); 
end;

function TFHIRJsonParser.ParseSpecimenDefinitionTypeTested(jsn : TJsonObject) : TFhirSpecimenDefinitionTypeTested;
begin
  result := TFhirSpecimenDefinitionTypeTested.Create;
  try
    ParseSpecimenDefinitionTypeTestedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenDefinitionTypeTestedProperties(jsn : TJsonObject; value : TFhirSpecimenDefinitionTypeTested);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('isDerived') or jsn.has('_isDerived') then
        value.isDerivedElement := parseBoolean(jsn.node['isDerived'], jsn.vObj['_isDerived']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('preference') or jsn.has('_preference') then
        value.preferenceElement := parseEnum(jsn.path+'/preference', jsn.node['preference'], jsn.vObj['_preference'], CODES_TFhirSpecimenContainedPreferenceEnum, SYSTEMS_TFhirSpecimenContainedPreferenceEnum);
    if jsn.has('container') then
        value.container := ParseSpecimenDefinitionTypeTestedContainer(jsn.vObj['container']);
    if jsn.has('requirement') or jsn.has('_requirement') then
        value.requirementElement := parseString(jsn.node['requirement'], jsn.vObj['_requirement']);
    if jsn.has('retentionTime') then
        value.retentionTime := ParseDuration(jsn.vObj['retentionTime']);
    if jsn.has('rejectionCriterion') then
      iterateArray(jsn.vArr['rejectionCriterion'], value.rejectionCriterionList, parseCodeableConcept);
    if jsn.has('handling') then
      iterateArray(jsn.vArr['handling'], value.handlingList, parseSpecimenDefinitionTypeTestedHandling);
end;

procedure TFHIRJsonComposer.ComposeSpecimenDefinitionTypeTested(json : TJSONWriter; name : string; value : TFhirSpecimenDefinitionTypeTested; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'isDerived', value.isDerivedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'isDerived', value.isDerivedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  ComposeEnumValue(json, 'preference', value.preferenceElement, CODES_TFhirSpecimenContainedPreferenceEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeSpecimenDefinitionTypeTestedContainer(json, 'container', value.container);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'requirement', value.requirementElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'requirement', value.requirementElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'retentionTime', value.retentionTime);
  if (SummaryOption in [soFull, soData]) and (value.rejectionCriterionList.Count > 0) then
  begin
    startArray(json, 'rejectionCriterion', value.rejectionCriterionList, false);
    for i := 0 to value.rejectionCriterionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.rejectionCriterionList[i]);
    finishArray(json, value.rejectionCriterionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.handlingList.Count > 0) then
  begin
    startArray(json, 'handling', value.handlingList, false);
    for i := 0 to value.handlingList.Count - 1 do
      ComposeSpecimenDefinitionTypeTestedHandling(json, '', value.handlingList[i]);
    finishArray(json, value.handlingList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSpecimenDefinitionTypeTestedContainer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenDefinitionTypeTestedContainer(jsn)); 
end;

function TFHIRJsonParser.ParseSpecimenDefinitionTypeTestedContainer(jsn : TJsonObject) : TFhirSpecimenDefinitionTypeTestedContainer;
begin
  result := TFhirSpecimenDefinitionTypeTestedContainer.Create;
  try
    ParseSpecimenDefinitionTypeTestedContainerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenDefinitionTypeTestedContainerProperties(jsn : TJsonObject; value : TFhirSpecimenDefinitionTypeTestedContainer);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('material') then
        value.material := ParseCodeableConcept(jsn.vObj['material']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('cap') then
        value.cap := ParseCodeableConcept(jsn.vObj['cap']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('capacity') then
        value.capacity := ParseQuantity(jsn.vObj['capacity']);
    if jsn.has('minimumVolumeQuantity') {a4} then
      value.minimumVolume := ParseQuantity(jsn.vObj['minimumVolumeQuantity']);
    if jsn.has('minimumVolumeString') or jsn.has('_minimumVolumeString') then
      value.minimumVolume := parseString(jsn.node['minimumVolumeString'], jsn.vObj['_minimumVolumeString']);
    if jsn.has('additive') then
      iterateArray(jsn.vArr['additive'], value.additiveList, parseSpecimenDefinitionTypeTestedContainerAdditive);
    if jsn.has('preparation') or jsn.has('_preparation') then
        value.preparationElement := parseString(jsn.node['preparation'], jsn.vObj['_preparation']);
end;

procedure TFHIRJsonComposer.ComposeSpecimenDefinitionTypeTestedContainer(json : TJSONWriter; name : string; value : TFhirSpecimenDefinitionTypeTestedContainer; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'material', value.material);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'cap', value.cap);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'capacity', value.capacity);
  if (SummaryOption in [soFull, soData]) and (value.minimumVolume is TFhirQuantity) then 
    ComposeQuantity(json, 'minimumVolumeQuantity', TFhirQuantity(value.minimumVolume)) 
  else if (SummaryOption in [soFull, soData]) and (value.minimumVolume is TFhirString) then 
  begin
    ComposeStringValue(json, 'minimumVolumeString', TFhirString(value.minimumVolume), false);
    ComposeStringProps(json, 'minimumVolumeString', TFhirString(value.minimumVolume), false);
  end;
  if (SummaryOption in [soFull, soData]) and (value.additiveList.Count > 0) then
  begin
    startArray(json, 'additive', value.additiveList, false);
    for i := 0 to value.additiveList.Count - 1 do
      ComposeSpecimenDefinitionTypeTestedContainerAdditive(json, '', value.additiveList[i]);
    finishArray(json, value.additiveList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'preparation', value.preparationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'preparation', value.preparationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSpecimenDefinitionTypeTestedContainerAdditive(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenDefinitionTypeTestedContainerAdditive(jsn)); 
end;

function TFHIRJsonParser.ParseSpecimenDefinitionTypeTestedContainerAdditive(jsn : TJsonObject) : TFhirSpecimenDefinitionTypeTestedContainerAdditive;
begin
  result := TFhirSpecimenDefinitionTypeTestedContainerAdditive.Create;
  try
    ParseSpecimenDefinitionTypeTestedContainerAdditiveProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenDefinitionTypeTestedContainerAdditiveProperties(jsn : TJsonObject; value : TFhirSpecimenDefinitionTypeTestedContainerAdditive);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('additiveCodeableConcept') {a4} then
      value.additive := ParseCodeableConcept(jsn.vObj['additiveCodeableConcept']);
    if jsn.has('additiveReference') {a3} then
      value.additive := ParseReference(jsn.vObj['additiveReference']);
end;

procedure TFHIRJsonComposer.ComposeSpecimenDefinitionTypeTestedContainerAdditive(json : TJSONWriter; name : string; value : TFhirSpecimenDefinitionTypeTestedContainerAdditive; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.additive is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'additiveCodeableConcept', TFhirCodeableConcept(value.additive)) 
  else if (value.additive is TFhirReference) then
    ComposeReference(json, 'additiveReference', TFhirReference(value.additive));
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSpecimenDefinitionTypeTestedHandling(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenDefinitionTypeTestedHandling(jsn)); 
end;

function TFHIRJsonParser.ParseSpecimenDefinitionTypeTestedHandling(jsn : TJsonObject) : TFhirSpecimenDefinitionTypeTestedHandling;
begin
  result := TFhirSpecimenDefinitionTypeTestedHandling.Create;
  try
    ParseSpecimenDefinitionTypeTestedHandlingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenDefinitionTypeTestedHandlingProperties(jsn : TJsonObject; value : TFhirSpecimenDefinitionTypeTestedHandling);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('temperatureQualifier') then
        value.temperatureQualifier := ParseCodeableConcept(jsn.vObj['temperatureQualifier']);
    if jsn.has('temperatureRange') then
        value.temperatureRange := ParseRange(jsn.vObj['temperatureRange']);
    if jsn.has('maxDuration') then
        value.maxDuration := ParseDuration(jsn.vObj['maxDuration']);
    if jsn.has('instruction') or jsn.has('_instruction') then
        value.instructionElement := parseString(jsn.node['instruction'], jsn.vObj['_instruction']);
end;

procedure TFHIRJsonComposer.ComposeSpecimenDefinitionTypeTestedHandling(json : TJSONWriter; name : string; value : TFhirSpecimenDefinitionTypeTestedHandling; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'temperatureQualifier', value.temperatureQualifier);
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(json, 'temperatureRange', value.temperatureRange);
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'maxDuration', value.maxDuration);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'instruction', value.instructionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'instruction', value.instructionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSpecimenDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseSpecimenDefinition(jsn : TJsonObject) : TFhirSpecimenDefinition;
begin
  result := TFhirSpecimenDefinition.Create;
  try
    ParseSpecimenDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenDefinitionProperties(jsn : TJsonObject; value : TFhirSpecimenDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('typeCollected') then
        value.typeCollected := ParseCodeableConcept(jsn.vObj['typeCollected']);
    if jsn.has('patientPreparation') then
      iterateArray(jsn.vArr['patientPreparation'], value.patientPreparationList, parseCodeableConcept);
    if jsn.has('timeAspect') or jsn.has('_timeAspect') then
        value.timeAspectElement := parseString(jsn.node['timeAspect'], jsn.vObj['_timeAspect']);
    if jsn.has('collection') then
      iterateArray(jsn.vArr['collection'], value.collectionList, parseCodeableConcept);
    if jsn.has('typeTested') then
      iterateArray(jsn.vArr['typeTested'], value.typeTestedList, parseSpecimenDefinitionTypeTested);
end;

procedure TFHIRJsonComposer.ComposeSpecimenDefinition(json : TJSONWriter; name : string; value : TFhirSpecimenDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'typeCollected', value.typeCollected);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.patientPreparationList.Count > 0) then
  begin
    startArray(json, 'patientPreparation', value.patientPreparationList, false);
    for i := 0 to value.patientPreparationList.Count - 1 do
      ComposeCodeableConcept(json, '', value.patientPreparationList[i]);
    finishArray(json, value.patientPreparationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'timeAspect', value.timeAspectElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'timeAspect', value.timeAspectElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.collectionList.Count > 0) then
  begin
    startArray(json, 'collection', value.collectionList, false);
    for i := 0 to value.collectionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.collectionList[i]);
    finishArray(json, value.collectionList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.typeTestedList.Count > 0) then
  begin
    startArray(json, 'typeTested', value.typeTestedList, false);
    for i := 0 to value.typeTestedList.Count - 1 do
      ComposeSpecimenDefinitionTypeTested(json, '', value.typeTestedList[i]);
    finishArray(json, value.typeTestedList);
  end;
end;

{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
procedure TFHIRJsonParser.ParseStructureDefinitionMapping(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureDefinitionMapping(jsn)); 
end;

function TFHIRJsonParser.ParseStructureDefinitionMapping(jsn : TJsonObject) : TFhirStructureDefinitionMapping;
begin
  result := TFhirStructureDefinitionMapping.Create;
  try
    ParseStructureDefinitionMappingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionMappingProperties(jsn : TJsonObject; value : TFhirStructureDefinitionMapping);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('identity') or jsn.has('_identity') then
        value.identityElement := parseId(jsn.node['identity'], jsn.vObj['_identity']);
    if jsn.has('uri') or jsn.has('_uri') then
        value.uriElement := parseUri(jsn.node['uri'], jsn.vObj['_uri']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('comment') or jsn.has('_comment') then
        value.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);
end;

procedure TFHIRJsonComposer.ComposeStructureDefinitionMapping(json : TJSONWriter; name : string; value : TFhirStructureDefinitionMapping; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeIdValue(json, 'identity', value.identityElement, false);
  ComposeIdProps(json, 'identity', value.identityElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'uri', value.uriElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'uri', value.uriElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', value.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', value.commentElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseStructureDefinitionContext(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureDefinitionContext(jsn)); 
end;

function TFHIRJsonParser.ParseStructureDefinitionContext(jsn : TJsonObject) : TFhirStructureDefinitionContext;
begin
  result := TFhirStructureDefinitionContext.Create;
  try
    ParseStructureDefinitionContextProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionContextProperties(jsn : TJsonObject; value : TFhirStructureDefinitionContext);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirExtensionContextTypeEnum, SYSTEMS_TFhirExtensionContextTypeEnum);
    if jsn.has('expression') or jsn.has('_expression') then
        value.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);
end;

procedure TFHIRJsonComposer.ComposeStructureDefinitionContext(json : TJSONWriter; name : string; value : TFhirStructureDefinitionContext; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirExtensionContextTypeEnum, false);
  ComposeStringValue(json, 'expression', value.expressionElement, false);
  ComposeStringProps(json, 'expression', value.expressionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseStructureDefinitionSnapshot(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureDefinitionSnapshot(jsn)); 
end;

function TFHIRJsonParser.ParseStructureDefinitionSnapshot(jsn : TJsonObject) : TFhirStructureDefinitionSnapshot;
begin
  result := TFhirStructureDefinitionSnapshot.Create;
  try
    ParseStructureDefinitionSnapshotProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionSnapshotProperties(jsn : TJsonObject; value : TFhirStructureDefinitionSnapshot);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('element') then
      iterateArray(jsn.vArr['element'], value.elementList, parseElementDefinition);
end;

procedure TFHIRJsonComposer.ComposeStructureDefinitionSnapshot(json : TJSONWriter; name : string; value : TFhirStructureDefinitionSnapshot; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.elementList.Count > 0) then
  begin
    startArray(json, 'element', value.elementList, false);
    for i := 0 to value.elementList.Count - 1 do
      ComposeElementDefinition(json, '', value.elementList[i]);
    finishArray(json, value.elementList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseStructureDefinitionDifferential(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureDefinitionDifferential(jsn)); 
end;

function TFHIRJsonParser.ParseStructureDefinitionDifferential(jsn : TJsonObject) : TFhirStructureDefinitionDifferential;
begin
  result := TFhirStructureDefinitionDifferential.Create;
  try
    ParseStructureDefinitionDifferentialProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionDifferentialProperties(jsn : TJsonObject; value : TFhirStructureDefinitionDifferential);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('element') then
      iterateArray(jsn.vArr['element'], value.elementList, parseElementDefinition);
end;

procedure TFHIRJsonComposer.ComposeStructureDefinitionDifferential(json : TJSONWriter; name : string; value : TFhirStructureDefinitionDifferential; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.elementList.Count > 0) then
  begin
    startArray(json, 'element', value.elementList, false);
    for i := 0 to value.elementList.Count - 1 do
      ComposeElementDefinition(json, '', value.elementList[i]);
    finishArray(json, value.elementList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseStructureDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseStructureDefinition(jsn : TJsonObject) : TFhirStructureDefinition;
begin
  result := TFhirStructureDefinition.Create;
  try
    ParseStructureDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionProperties(jsn : TJsonObject; value : TFhirStructureDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('keyword') then
      iterateArray(jsn.vArr['keyword'], value.keywordList, parseCoding);
    if jsn.has('fhirVersion') or jsn.has('_fhirVersion') then
        value.fhirVersionElement := parseEnum(jsn.path+'/fhirVersion', jsn.node['fhirVersion'], jsn.vObj['_fhirVersion'], CODES_TFhirFHIRVersionEnum, SYSTEMS_TFhirFHIRVersionEnum);
    if jsn.has('mapping') then
      iterateArray(jsn.vArr['mapping'], value.mappingList, parseStructureDefinitionMapping);
    if jsn.has('kind') or jsn.has('_kind') then
        value.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirStructureDefinitionKindEnum, SYSTEMS_TFhirStructureDefinitionKindEnum);
    if jsn.has('abstract') or jsn.has('_abstract') then
        value.abstractElement := parseBoolean(jsn.node['abstract'], jsn.vObj['_abstract']);
    if jsn.has('context') then
      iterateArray(jsn.vArr['context'], value.contextList, parseStructureDefinitionContext);
      if jsn.has('contextInvariant') or jsn.has('_contextInvariant') then
      iteratePrimitiveArray(jsn.vArr['contextInvariant'], jsn.vArr['_contextInvariant'], value.contextInvariantList, parseString);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseUri(jsn.node['type'], jsn.vObj['_type']);
    if jsn.has('baseDefinition') or jsn.has('_baseDefinition') then
        value.baseDefinitionElement := parseCanonical(jsn.node['baseDefinition'], jsn.vObj['_baseDefinition']);
    if jsn.has('derivation') or jsn.has('_derivation') then
        value.derivationElement := parseEnum(jsn.path+'/derivation', jsn.node['derivation'], jsn.vObj['_derivation'], CODES_TFhirTypeDerivationRuleEnum, SYSTEMS_TFhirTypeDerivationRuleEnum);
    if jsn.has('snapshot') then
        value.snapshot := ParseStructureDefinitionSnapshot(jsn.vObj['snapshot']);
    if jsn.has('differential') then
        value.differential := ParseStructureDefinitionDifferential(jsn.vObj['differential']);
end;

procedure TFHIRJsonComposer.ComposeStructureDefinition(json : TJSONWriter; name : string; value : TFhirStructureDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  ComposeUriValue(json, 'url', value.urlElement, false);
  ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.keywordList.Count > 0) then
  begin
    startArray(json, 'keyword', value.keywordList, false);
    for i := 0 to value.keywordList.Count - 1 do
      ComposeCoding(json, '', value.keywordList[i]);
    finishArray(json, value.keywordList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'fhirVersion', value.fhirVersionElement, CODES_TFhirFHIRVersionEnum, false);
  if (SummaryOption in [soFull, soData]) and (value.mappingList.Count > 0) then
  begin
    startArray(json, 'mapping', value.mappingList, false);
    for i := 0 to value.mappingList.Count - 1 do
      ComposeStructureDefinitionMapping(json, '', value.mappingList[i]);
    finishArray(json, value.mappingList);
  end;
  ComposeEnumValue(json, 'kind', value.kindElement, CODES_TFhirStructureDefinitionKindEnum, false);
  ComposeBooleanValue(json, 'abstract', value.abstractElement, false);
  ComposeBooleanProps(json, 'abstract', value.abstractElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contextList.Count > 0) then
  begin
    startArray(json, 'context', value.contextList, false);
    for i := 0 to value.contextList.Count - 1 do
      ComposeStructureDefinitionContext(json, '', value.contextList[i]);
    finishArray(json, value.contextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contextInvariantList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.contextInvariantList.Count - 1 do
    begin
      ext := ext or ((value.contextInvariantList[i].id <> '') or (value.contextInvariantList[i].hasExtensionList) {no-comments or (value.contextInvariantList[i].hasComments)});
      val := val or (value.contextInvariantList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'contextInvariant', value.contextInvariantList, true);
      for i := 0 to value.contextInvariantList.Count - 1 do
        ComposeStringValue(json, '', value.contextInvariantList[i], true);
      finishArray(json, value.contextInvariantList);
    end;
    if ext then
    begin
      startArray(json, '_contextInvariant', value.contextInvariantList, false);
      for i := 0 to value.contextInvariantList.Count - 1 do
        ComposeStringProps(json, '', value.contextInvariantList[i], true);
      finishArray(json, value.contextInvariantList);
    end;
  end;
  ComposeUriValue(json, 'type', value.type_Element, false);
  ComposeUriProps(json, 'type', value.type_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'baseDefinition', value.baseDefinitionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'baseDefinition', value.baseDefinitionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'derivation', value.derivationElement, CODES_TFhirTypeDerivationRuleEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStructureDefinitionSnapshot(json, 'snapshot', value.snapshot);
  if (SummaryOption in [soFull, soData]) then
    ComposeStructureDefinitionDifferential(json, 'differential', value.differential);
end;

{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
procedure TFHIRJsonParser.ParseStructureMapStructure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapStructure(jsn)); 
end;

function TFHIRJsonParser.ParseStructureMapStructure(jsn : TJsonObject) : TFhirStructureMapStructure;
begin
  result := TFhirStructureMapStructure.Create;
  try
    ParseStructureMapStructureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapStructureProperties(jsn : TJsonObject; value : TFhirStructureMapStructure);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseCanonical(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('mode') or jsn.has('_mode') then
        value.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirStructureMapModelModeEnum, SYSTEMS_TFhirStructureMapModelModeEnum);
    if jsn.has('alias') or jsn.has('_alias') then
        value.aliasElement := parseString(jsn.node['alias'], jsn.vObj['_alias']);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);
end;

procedure TFHIRJsonComposer.ComposeStructureMapStructure(json : TJSONWriter; name : string; value : TFhirStructureMapStructure; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCanonicalValue(json, 'url', value.urlElement, false);
  ComposeCanonicalProps(json, 'url', value.urlElement, false);
  ComposeEnumValue(json, 'mode', value.modeElement, CODES_TFhirStructureMapModelModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'alias', value.aliasElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'alias', value.aliasElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', value.documentationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseStructureMapGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroup(jsn)); 
end;

function TFHIRJsonParser.ParseStructureMapGroup(jsn : TJsonObject) : TFhirStructureMapGroup;
begin
  result := TFhirStructureMapGroup.Create;
  try
    ParseStructureMapGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupProperties(jsn : TJsonObject; value : TFhirStructureMapGroup);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseId(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('extends') or jsn.has('_extends') then
        value.extendsElement := parseId(jsn.node['extends'], jsn.vObj['_extends']);
    if jsn.has('typeMode') or jsn.has('_typeMode') then
        value.typeModeElement := parseEnum(jsn.path+'/typeMode', jsn.node['typeMode'], jsn.vObj['_typeMode'], CODES_TFhirStructureMapGroupTypeModeEnum, SYSTEMS_TFhirStructureMapGroupTypeModeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);
    if jsn.has('input') then
      iterateArray(jsn.vArr['input'], value.inputList, parseStructureMapGroupInput);
    if jsn.has('rule') then
      iterateArray(jsn.vArr['rule'], value.ruleList, parseStructureMapGroupRule);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroup(json : TJSONWriter; name : string; value : TFhirStructureMapGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeIdValue(json, 'name', value.nameElement, false);
  ComposeIdProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'extends', value.extendsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'extends', value.extendsElement, false);
  ComposeEnumValue(json, 'typeMode', value.typeModeElement, CODES_TFhirStructureMapGroupTypeModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'documentation', value.documentationElement, false);
  if (value.inputList.Count > 0) then
  begin
    startArray(json, 'input', value.inputList, false);
    for i := 0 to value.inputList.Count - 1 do
      ComposeStructureMapGroupInput(json, '', value.inputList[i]);
    finishArray(json, value.inputList);
  end;
  if (value.ruleList.Count > 0) then
  begin
    startArray(json, 'rule', value.ruleList, false);
    for i := 0 to value.ruleList.Count - 1 do
      ComposeStructureMapGroupRule(json, '', value.ruleList[i]);
    finishArray(json, value.ruleList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseStructureMapGroupInput(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupInput(jsn)); 
end;

function TFHIRJsonParser.ParseStructureMapGroupInput(jsn : TJsonObject) : TFhirStructureMapGroupInput;
begin
  result := TFhirStructureMapGroupInput.Create;
  try
    ParseStructureMapGroupInputProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupInputProperties(jsn : TJsonObject; value : TFhirStructureMapGroupInput);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseId(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseString(jsn.node['type'], jsn.vObj['_type']);
    if jsn.has('mode') or jsn.has('_mode') then
        value.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirStructureMapInputModeEnum, SYSTEMS_TFhirStructureMapInputModeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupInput(json : TJSONWriter; name : string; value : TFhirStructureMapGroupInput; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeIdValue(json, 'name', value.nameElement, false);
  ComposeIdProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'type', value.type_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'type', value.type_Element, false);
  ComposeEnumValue(json, 'mode', value.modeElement, CODES_TFhirStructureMapInputModeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', value.documentationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRule(jsn)); 
end;

function TFHIRJsonParser.ParseStructureMapGroupRule(jsn : TJsonObject) : TFhirStructureMapGroupRule;
begin
  result := TFhirStructureMapGroupRule.Create;
  try
    ParseStructureMapGroupRuleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleProperties(jsn : TJsonObject; value : TFhirStructureMapGroupRule);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseId(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('source') then
      iterateArray(jsn.vArr['source'], value.sourceList, parseStructureMapGroupRuleSource);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], value.targetList, parseStructureMapGroupRuleTarget);
    if jsn.has('rule') then
      iterateArray(jsn.vArr['rule'], value.ruleList, parseStructureMapGroupRule);
    if jsn.has('dependent') then
      iterateArray(jsn.vArr['dependent'], value.dependentList, parseStructureMapGroupRuleDependent);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRule(json : TJSONWriter; name : string; value : TFhirStructureMapGroupRule; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeIdValue(json, 'name', value.nameElement, false);
  ComposeIdProps(json, 'name', value.nameElement, false);
  if (value.sourceList.Count > 0) then
  begin
    startArray(json, 'source', value.sourceList, false);
    for i := 0 to value.sourceList.Count - 1 do
      ComposeStructureMapGroupRuleSource(json, '', value.sourceList[i]);
    finishArray(json, value.sourceList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.targetList.Count > 0) then
  begin
    startArray(json, 'target', value.targetList, false);
    for i := 0 to value.targetList.Count - 1 do
      ComposeStructureMapGroupRuleTarget(json, '', value.targetList[i]);
    finishArray(json, value.targetList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.ruleList.Count > 0) then
  begin
    startArray(json, 'rule', value.ruleList, false);
    for i := 0 to value.ruleList.Count - 1 do
      ComposeStructureMapGroupRule(json, '', value.ruleList[i]);
    finishArray(json, value.ruleList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.dependentList.Count > 0) then
  begin
    startArray(json, 'dependent', value.dependentList, false);
    for i := 0 to value.dependentList.Count - 1 do
      ComposeStructureMapGroupRuleDependent(json, '', value.dependentList[i]);
    finishArray(json, value.dependentList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', value.documentationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleSource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRuleSource(jsn)); 
end;

function TFHIRJsonParser.ParseStructureMapGroupRuleSource(jsn : TJsonObject) : TFhirStructureMapGroupRuleSource;
begin
  result := TFhirStructureMapGroupRuleSource.Create;
  try
    ParseStructureMapGroupRuleSourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleSourceProperties(jsn : TJsonObject; value : TFhirStructureMapGroupRuleSource);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('context') or jsn.has('_context') then
        value.contextElement := parseId(jsn.node['context'], jsn.vObj['_context']);
    if jsn.has('min') or jsn.has('_min') then
        value.minElement := parseInteger(jsn.node['min'], jsn.vObj['_min']);
    if jsn.has('max') or jsn.has('_max') then
        value.maxElement := parseString(jsn.node['max'], jsn.vObj['_max']);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseString(jsn.node['type'], jsn.vObj['_type']);
    if jsn.has('defaultValueCanonical') or jsn.has('_defaultValueCanonical') then
      value.defaultValue := parseCanonical(jsn.node['defaultValueCanonical'], jsn.vObj['_defaultValueCanonical']);
    if jsn.has('defaultValueCode') or jsn.has('_defaultValueCode') then
      value.defaultValue := parseCode(jsn.node['defaultValueCode'], jsn.vObj['_defaultValueCode']);
    if jsn.has('defaultValueId') or jsn.has('_defaultValueId') then
      value.defaultValue := parseId(jsn.node['defaultValueId'], jsn.vObj['_defaultValueId']);
    if jsn.has('defaultValueMarkdown') or jsn.has('_defaultValueMarkdown') then
      value.defaultValue := parseMarkdown(jsn.node['defaultValueMarkdown'], jsn.vObj['_defaultValueMarkdown']);
    if jsn.has('defaultValueOid') or jsn.has('_defaultValueOid') then
      value.defaultValue := parseOid(jsn.node['defaultValueOid'], jsn.vObj['_defaultValueOid']);
    if jsn.has('defaultValuePositiveInt') or jsn.has('_defaultValuePositiveInt') then
      value.defaultValue := parsePositiveInt(jsn.node['defaultValuePositiveInt'], jsn.vObj['_defaultValuePositiveInt']);
    if jsn.has('defaultValueUnsignedInt') or jsn.has('_defaultValueUnsignedInt') then
      value.defaultValue := parseUnsignedInt(jsn.node['defaultValueUnsignedInt'], jsn.vObj['_defaultValueUnsignedInt']);
    if jsn.has('defaultValueUrl') or jsn.has('_defaultValueUrl') then
      value.defaultValue := parseUrl(jsn.node['defaultValueUrl'], jsn.vObj['_defaultValueUrl']);
    if jsn.has('defaultValueUuid') or jsn.has('_defaultValueUuid') then
      value.defaultValue := parseUuid(jsn.node['defaultValueUuid'], jsn.vObj['_defaultValueUuid']);
    if jsn.has('defaultValueAddress') {a4} then
      value.defaultValue := ParseAddress(jsn.vObj['defaultValueAddress']);
    if jsn.has('defaultValueAge') {a4} then
      value.defaultValue := ParseAge(jsn.vObj['defaultValueAge']);
    if jsn.has('defaultValueAnnotation') {a4} then
      value.defaultValue := ParseAnnotation(jsn.vObj['defaultValueAnnotation']);
    if jsn.has('defaultValueAttachment') {a4} then
      value.defaultValue := ParseAttachment(jsn.vObj['defaultValueAttachment']);
    if jsn.has('defaultValueCodeableConcept') {a4} then
      value.defaultValue := ParseCodeableConcept(jsn.vObj['defaultValueCodeableConcept']);
    if jsn.has('defaultValueCoding') {a4} then
      value.defaultValue := ParseCoding(jsn.vObj['defaultValueCoding']);
    if jsn.has('defaultValueContactPoint') {a4} then
      value.defaultValue := ParseContactPoint(jsn.vObj['defaultValueContactPoint']);
    if jsn.has('defaultValueCount') {a4} then
      value.defaultValue := ParseCount(jsn.vObj['defaultValueCount']);
    if jsn.has('defaultValueDistance') {a4} then
      value.defaultValue := ParseDistance(jsn.vObj['defaultValueDistance']);
    if jsn.has('defaultValueDuration') {a4} then
      value.defaultValue := ParseDuration(jsn.vObj['defaultValueDuration']);
    if jsn.has('defaultValueHumanName') {a4} then
      value.defaultValue := ParseHumanName(jsn.vObj['defaultValueHumanName']);
    if jsn.has('defaultValueIdentifier') {a4} then
      value.defaultValue := ParseIdentifier(jsn.vObj['defaultValueIdentifier']);
    if jsn.has('defaultValueMoney') {a4} then
      value.defaultValue := ParseMoney(jsn.vObj['defaultValueMoney']);
    if jsn.has('defaultValuePeriod') {a4} then
      value.defaultValue := ParsePeriod(jsn.vObj['defaultValuePeriod']);
    if jsn.has('defaultValueQuantity') {a4} then
      value.defaultValue := ParseQuantity(jsn.vObj['defaultValueQuantity']);
    if jsn.has('defaultValueRange') {a4} then
      value.defaultValue := ParseRange(jsn.vObj['defaultValueRange']);
    if jsn.has('defaultValueRatio') {a4} then
      value.defaultValue := ParseRatio(jsn.vObj['defaultValueRatio']);
    if jsn.has('defaultValueReference') {a4} then
      value.defaultValue := ParseReference(jsn.vObj['defaultValueReference']);
    if jsn.has('defaultValueSampledData') {a4} then
      value.defaultValue := ParseSampledData(jsn.vObj['defaultValueSampledData']);
    if jsn.has('defaultValueSignature') {a4} then
      value.defaultValue := ParseSignature(jsn.vObj['defaultValueSignature']);
    if jsn.has('defaultValueTiming') {a4} then
      value.defaultValue := ParseTiming(jsn.vObj['defaultValueTiming']);
    if jsn.has('defaultValueContactDetail') {a4} then
      value.defaultValue := ParseContactDetail(jsn.vObj['defaultValueContactDetail']);
    if jsn.has('defaultValueContributor') {a4} then
      value.defaultValue := ParseContributor(jsn.vObj['defaultValueContributor']);
    if jsn.has('defaultValueDataRequirement') {a4} then
      value.defaultValue := ParseDataRequirement(jsn.vObj['defaultValueDataRequirement']);
    if jsn.has('defaultValueExpression') {a4} then
      value.defaultValue := ParseExpression(jsn.vObj['defaultValueExpression']);
    if jsn.has('defaultValueParameterDefinition') {a4} then
      value.defaultValue := ParseParameterDefinition(jsn.vObj['defaultValueParameterDefinition']);
    if jsn.has('defaultValueRelatedArtifact') {a4} then
      value.defaultValue := ParseRelatedArtifact(jsn.vObj['defaultValueRelatedArtifact']);
    if jsn.has('defaultValueTriggerDefinition') {a4} then
      value.defaultValue := ParseTriggerDefinition(jsn.vObj['defaultValueTriggerDefinition']);
    if jsn.has('defaultValueUsageContext') {a4} then
      value.defaultValue := ParseUsageContext(jsn.vObj['defaultValueUsageContext']);
    if jsn.has('defaultValueDosage') {a4} then
      value.defaultValue := ParseDosage(jsn.vObj['defaultValueDosage']);
    if jsn.has('defaultValueMeta') {a4} then
      value.defaultValue := ParseMeta(jsn.vObj['defaultValueMeta']);
    if jsn.has('defaultValueBase64Binary') or jsn.has('_defaultValueBase64Binary') then
      value.defaultValue := parseBase64Binary(jsn.node['defaultValueBase64Binary'], jsn.vObj['_defaultValueBase64Binary']);
    if jsn.has('defaultValueBoolean') or jsn.has('_defaultValueBoolean') then
      value.defaultValue := parseBoolean(jsn.node['defaultValueBoolean'], jsn.vObj['_defaultValueBoolean']);
    if jsn.has('defaultValueDate') or jsn.has('_defaultValueDate') then
      value.defaultValue := parseDate(jsn.node['defaultValueDate'], jsn.vObj['_defaultValueDate']);
    if jsn.has('defaultValueDateTime') or jsn.has('_defaultValueDateTime') then
      value.defaultValue := parseDateTime(jsn.node['defaultValueDateTime'], jsn.vObj['_defaultValueDateTime']);
    if jsn.has('defaultValueDecimal') or jsn.has('_defaultValueDecimal') then
      value.defaultValue := parseDecimal(jsn.node['defaultValueDecimal'], jsn.vObj['_defaultValueDecimal']);
    if jsn.has('defaultValueInstant') or jsn.has('_defaultValueInstant') then
      value.defaultValue := parseInstant(jsn.node['defaultValueInstant'], jsn.vObj['_defaultValueInstant']);
    if jsn.has('defaultValueInteger') or jsn.has('_defaultValueInteger') then
      value.defaultValue := parseInteger(jsn.node['defaultValueInteger'], jsn.vObj['_defaultValueInteger']);
    if jsn.has('defaultValueString') or jsn.has('_defaultValueString') then
      value.defaultValue := parseString(jsn.node['defaultValueString'], jsn.vObj['_defaultValueString']);
    if jsn.has('defaultValueTime') or jsn.has('_defaultValueTime') then
      value.defaultValue := parseTime(jsn.node['defaultValueTime'], jsn.vObj['_defaultValueTime']);
    if jsn.has('defaultValueUri') or jsn.has('_defaultValueUri') then
      value.defaultValue := parseUri(jsn.node['defaultValueUri'], jsn.vObj['_defaultValueUri']);
    if jsn.has('element') or jsn.has('_element') then
        value.elementElement := parseString(jsn.node['element'], jsn.vObj['_element']);
    if jsn.has('listMode') or jsn.has('_listMode') then
        value.listModeElement := parseEnum(jsn.path+'/listMode', jsn.node['listMode'], jsn.vObj['_listMode'], CODES_TFhirStructureMapSourceListModeEnum, SYSTEMS_TFhirStructureMapSourceListModeEnum);
    if jsn.has('variable') or jsn.has('_variable') then
        value.variableElement := parseId(jsn.node['variable'], jsn.vObj['_variable']);
    if jsn.has('condition') or jsn.has('_condition') then
        value.conditionElement := parseString(jsn.node['condition'], jsn.vObj['_condition']);
    if jsn.has('check') or jsn.has('_check') then
        value.checkElement := parseString(jsn.node['check'], jsn.vObj['_check']);
    if jsn.has('logMessage') or jsn.has('_logMessage') then
        value.logMessageElement := parseString(jsn.node['logMessage'], jsn.vObj['_logMessage']);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRuleSource(json : TJSONWriter; name : string; value : TFhirStructureMapGroupRuleSource; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeIdValue(json, 'context', value.contextElement, false);
  ComposeIdProps(json, 'context', value.contextElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'min', value.minElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'min', value.minElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'max', value.maxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'max', value.maxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'type', value.type_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'type', value.type_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'defaultValueCanonical', TFhirCanonical(value.defaultValue), false);
    ComposeCanonicalProps(json, 'defaultValueCanonical', TFhirCanonical(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'defaultValueCode', TFhirCode(value.defaultValue), false);
    ComposeCodeProps(json, 'defaultValueCode', TFhirCode(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirId) then 
  begin
    ComposeIdValue(json, 'defaultValueId', TFhirId(value.defaultValue), false);
    ComposeIdProps(json, 'defaultValueId', TFhirId(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'defaultValueMarkdown', TFhirMarkdown(value.defaultValue), false);
    ComposeMarkdownProps(json, 'defaultValueMarkdown', TFhirMarkdown(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirOid) then 
  begin
    ComposeOidValue(json, 'defaultValueOid', TFhirOid(value.defaultValue), false);
    ComposeOidProps(json, 'defaultValueOid', TFhirOid(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'defaultValuePositiveInt', TFhirPositiveInt(value.defaultValue), false);
    ComposePositiveIntProps(json, 'defaultValuePositiveInt', TFhirPositiveInt(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'defaultValueUnsignedInt', TFhirUnsignedInt(value.defaultValue), false);
    ComposeUnsignedIntProps(json, 'defaultValueUnsignedInt', TFhirUnsignedInt(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUrl) then 
  begin
    ComposeUrlValue(json, 'defaultValueUrl', TFhirUrl(value.defaultValue), false);
    ComposeUrlProps(json, 'defaultValueUrl', TFhirUrl(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUuid) then 
  begin
    ComposeUuidValue(json, 'defaultValueUuid', TFhirUuid(value.defaultValue), false);
    ComposeUuidProps(json, 'defaultValueUuid', TFhirUuid(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAddress) then 
    ComposeAddress(json, 'defaultValueAddress', TFhirAddress(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAge) then 
    ComposeAge(json, 'defaultValueAge', TFhirAge(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAnnotation) then 
    ComposeAnnotation(json, 'defaultValueAnnotation', TFhirAnnotation(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAttachment) then 
    ComposeAttachment(json, 'defaultValueAttachment', TFhirAttachment(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'defaultValueCodeableConcept', TFhirCodeableConcept(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCoding) then 
    ComposeCoding(json, 'defaultValueCoding', TFhirCoding(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirContactPoint) then 
    ComposeContactPoint(json, 'defaultValueContactPoint', TFhirContactPoint(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCount) then 
    ComposeCount(json, 'defaultValueCount', TFhirCount(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDistance) then 
    ComposeDistance(json, 'defaultValueDistance', TFhirDistance(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDuration) then 
    ComposeDuration(json, 'defaultValueDuration', TFhirDuration(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirHumanName) then 
    ComposeHumanName(json, 'defaultValueHumanName', TFhirHumanName(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirIdentifier) then 
    ComposeIdentifier(json, 'defaultValueIdentifier', TFhirIdentifier(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirMoney) then 
    ComposeMoney(json, 'defaultValueMoney', TFhirMoney(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirPeriod) then 
    ComposePeriod(json, 'defaultValuePeriod', TFhirPeriod(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirQuantity) then 
    ComposeQuantity(json, 'defaultValueQuantity', TFhirQuantity(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirRange) then 
    ComposeRange(json, 'defaultValueRange', TFhirRange(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirRatio) then 
    ComposeRatio(json, 'defaultValueRatio', TFhirRatio(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirReference) then 
    ComposeReference(json, 'defaultValueReference', TFhirReference(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirSampledData) then 
    ComposeSampledData(json, 'defaultValueSampledData', TFhirSampledData(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirSignature) then 
    ComposeSignature(json, 'defaultValueSignature', TFhirSignature(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirTiming) then 
    ComposeTiming(json, 'defaultValueTiming', TFhirTiming(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirContactDetail) then 
    ComposeContactDetail(json, 'defaultValueContactDetail', TFhirContactDetail(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirContributor) then 
    ComposeContributor(json, 'defaultValueContributor', TFhirContributor(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'defaultValueDataRequirement', TFhirDataRequirement(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirExpression) then 
    ComposeExpression(json, 'defaultValueExpression', TFhirExpression(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'defaultValueParameterDefinition', TFhirParameterDefinition(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'defaultValueRelatedArtifact', TFhirRelatedArtifact(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'defaultValueTriggerDefinition', TFhirTriggerDefinition(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUsageContext) then 
    ComposeUsageContext(json, 'defaultValueUsageContext', TFhirUsageContext(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDosage) then 
    ComposeDosage(json, 'defaultValueDosage', TFhirDosage(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirMeta) then 
    ComposeMeta(json, 'defaultValueMeta', TFhirMeta(value.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'defaultValueBase64Binary', TFhirBase64Binary(value.defaultValue), false);
    ComposeBase64BinaryProps(json, 'defaultValueBase64Binary', TFhirBase64Binary(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'defaultValueBoolean', TFhirBoolean(value.defaultValue), false);
    ComposeBooleanProps(json, 'defaultValueBoolean', TFhirBoolean(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDate) then 
  begin
    ComposeDateValue(json, 'defaultValueDate', TFhirDate(value.defaultValue), false);
    ComposeDateProps(json, 'defaultValueDate', TFhirDate(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'defaultValueDateTime', TFhirDateTime(value.defaultValue), false);
    ComposeDateTimeProps(json, 'defaultValueDateTime', TFhirDateTime(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'defaultValueDecimal', TFhirDecimal(value.defaultValue), false);
    ComposeDecimalProps(json, 'defaultValueDecimal', TFhirDecimal(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'defaultValueInstant', TFhirInstant(value.defaultValue), false);
    ComposeInstantProps(json, 'defaultValueInstant', TFhirInstant(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'defaultValueInteger', TFhirInteger(value.defaultValue), false);
    ComposeIntegerProps(json, 'defaultValueInteger', TFhirInteger(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirString) then 
  begin
    ComposeStringValue(json, 'defaultValueString', TFhirString(value.defaultValue), false);
    ComposeStringProps(json, 'defaultValueString', TFhirString(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'defaultValueTime', TFhirTime(value.defaultValue), false);
    ComposeTimeProps(json, 'defaultValueTime', TFhirTime(value.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUri) then 
  begin
    ComposeUriValue(json, 'defaultValueUri', TFhirUri(value.defaultValue), false);
    ComposeUriProps(json, 'defaultValueUri', TFhirUri(value.defaultValue), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'element', value.elementElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'element', value.elementElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'listMode', value.listModeElement, CODES_TFhirStructureMapSourceListModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'variable', value.variableElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'variable', value.variableElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'condition', value.conditionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'condition', value.conditionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'check', value.checkElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'check', value.checkElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'logMessage', value.logMessageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'logMessage', value.logMessageElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRuleTarget(jsn)); 
end;

function TFHIRJsonParser.ParseStructureMapGroupRuleTarget(jsn : TJsonObject) : TFhirStructureMapGroupRuleTarget;
begin
  result := TFhirStructureMapGroupRuleTarget.Create;
  try
    ParseStructureMapGroupRuleTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleTargetProperties(jsn : TJsonObject; value : TFhirStructureMapGroupRuleTarget);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('context') or jsn.has('_context') then
        value.contextElement := parseId(jsn.node['context'], jsn.vObj['_context']);
    if jsn.has('contextType') or jsn.has('_contextType') then
        value.contextTypeElement := parseEnum(jsn.path+'/contextType', jsn.node['contextType'], jsn.vObj['_contextType'], CODES_TFhirStructureMapContextTypeEnum, SYSTEMS_TFhirStructureMapContextTypeEnum);
    if jsn.has('element') or jsn.has('_element') then
        value.elementElement := parseString(jsn.node['element'], jsn.vObj['_element']);
    if jsn.has('variable') or jsn.has('_variable') then
        value.variableElement := parseId(jsn.node['variable'], jsn.vObj['_variable']);
    if jsn.has('listMode') or jsn.has('_listMode') then
      iterateEnumArray(jsn.vArr['listMode'], jsn.vArr['_listMode'], jsn.path+'/listMode', value.listModeList, parseEnum, CODES_TFhirStructureMapTargetListModeEnum, SYSTEMS_TFhirStructureMapTargetListModeEnum);
    if jsn.has('listRuleId') or jsn.has('_listRuleId') then
        value.listRuleIdElement := parseId(jsn.node['listRuleId'], jsn.vObj['_listRuleId']);
    if jsn.has('transform') or jsn.has('_transform') then
        value.transformElement := parseEnum(jsn.path+'/transform', jsn.node['transform'], jsn.vObj['_transform'], CODES_TFhirStructureMapTransformEnum, SYSTEMS_TFhirStructureMapTransformEnum);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], value.parameterList, parseStructureMapGroupRuleTargetParameter);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRuleTarget(json : TJSONWriter; name : string; value : TFhirStructureMapGroupRuleTarget; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'context', value.contextElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'context', value.contextElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'contextType', value.contextTypeElement, CODES_TFhirStructureMapContextTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'element', value.elementElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'element', value.elementElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'variable', value.variableElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'variable', value.variableElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.listModeList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.listModeList.Count - 1 do
    begin
      val := val or (value.listModeList[i].hasPrimitiveValue);
      ext := ext or ((value.listModeList[i].id <> '') or (value.listModeList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'listMode', value.listModeList, true);
      for i := 0 to value.listModeList.Count - 1 do
        ComposeEnumValue(json, '', value.listModeList[i], CODES_TFhirStructureMapTargetListModeEnum, true);
      finishArray(json, value.listModeList);
    end;
    if ext then
    begin
      startArray(json, '_listMode', value.listModeList, false);
      for i := 0 to value.listModeList.Count - 1 do
        ComposeEnumProps(json, '', value.listModeList[i], CODES_TFhirStructureMapTargetListModeEnum, true);
      finishArray(json, value.listModeList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'listRuleId', value.listRuleIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'listRuleId', value.listRuleIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'transform', value.transformElement, CODES_TFhirStructureMapTransformEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.parameterList.Count > 0) then
  begin
    startArray(json, 'parameter', value.parameterList, false);
    for i := 0 to value.parameterList.Count - 1 do
      ComposeStructureMapGroupRuleTargetParameter(json, '', value.parameterList[i]);
    finishArray(json, value.parameterList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleTargetParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRuleTargetParameter(jsn)); 
end;

function TFHIRJsonParser.ParseStructureMapGroupRuleTargetParameter(jsn : TJsonObject) : TFhirStructureMapGroupRuleTargetParameter;
begin
  result := TFhirStructureMapGroupRuleTargetParameter.Create;
  try
    ParseStructureMapGroupRuleTargetParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleTargetParameterProperties(jsn : TJsonObject; value : TFhirStructureMapGroupRuleTargetParameter);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('valueId') or jsn.has('_valueId') then
      value.value := parseId(jsn.node['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      value.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      value.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRuleTargetParameter(json : TJSONWriter; name : string; value : TFhirStructureMapGroupRuleTargetParameter; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(value.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(value.value), false);
  end
  else if (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (value.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(value.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(value.value), false);
  end
  else if (value.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(value.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleDependent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRuleDependent(jsn)); 
end;

function TFHIRJsonParser.ParseStructureMapGroupRuleDependent(jsn : TJsonObject) : TFhirStructureMapGroupRuleDependent;
begin
  result := TFhirStructureMapGroupRuleDependent.Create;
  try
    ParseStructureMapGroupRuleDependentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleDependentProperties(jsn : TJsonObject; value : TFhirStructureMapGroupRuleDependent);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseId(jsn.node['name'], jsn.vObj['_name']);
      if jsn.has('variable') or jsn.has('_variable') then
      iteratePrimitiveArray(jsn.vArr['variable'], jsn.vArr['_variable'], value.variableList, parseString);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRuleDependent(json : TJSONWriter; name : string; value : TFhirStructureMapGroupRuleDependent; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeIdValue(json, 'name', value.nameElement, false);
  ComposeIdProps(json, 'name', value.nameElement, false);
  if (value.variableList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.variableList.Count - 1 do
    begin
      ext := ext or ((value.variableList[i].id <> '') or (value.variableList[i].hasExtensionList) {no-comments or (value.variableList[i].hasComments)});
      val := val or (value.variableList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'variable', value.variableList, true);
      for i := 0 to value.variableList.Count - 1 do
        ComposeStringValue(json, '', value.variableList[i], true);
      finishArray(json, value.variableList);
    end;
    if ext then
    begin
      startArray(json, '_variable', value.variableList, false);
      for i := 0 to value.variableList.Count - 1 do
        ComposeStringProps(json, '', value.variableList[i], true);
      finishArray(json, value.variableList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseStructureMap(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMap(jsn)); 
end;

function TFHIRJsonParser.ParseStructureMap(jsn : TJsonObject) : TFhirStructureMap;
begin
  result := TFhirStructureMap.Create;
  try
    ParseStructureMapProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapProperties(jsn : TJsonObject; value : TFhirStructureMap);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('structure') then
      iterateArray(jsn.vArr['structure'], value.structureList, parseStructureMapStructure);
      if jsn.has('import') or jsn.has('_import') then
      iteratePrimitiveArray(jsn.vArr['import'], jsn.vArr['_import'], value.importList, parseCanonical);
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], value.groupList, parseStructureMapGroup);
end;

procedure TFHIRJsonComposer.ComposeStructureMap(json : TJSONWriter; name : string; value : TFhirStructureMap; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  ComposeUriValue(json, 'url', value.urlElement, false);
  ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.structureList.Count > 0) then
  begin
    startArray(json, 'structure', value.structureList, false);
    for i := 0 to value.structureList.Count - 1 do
      ComposeStructureMapStructure(json, '', value.structureList[i]);
    finishArray(json, value.structureList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.importList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.importList.Count - 1 do
    begin
      ext := ext or ((value.importList[i].id <> '') or (value.importList[i].hasExtensionList) {no-comments or (value.importList[i].hasComments)});
      val := val or (value.importList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'import', value.importList, true);
      for i := 0 to value.importList.Count - 1 do
        ComposeCanonicalValue(json, '', value.importList[i], true);
      finishArray(json, value.importList);
    end;
    if ext then
    begin
      startArray(json, '_import', value.importList, false);
      for i := 0 to value.importList.Count - 1 do
        ComposeCanonicalProps(json, '', value.importList[i], true);
      finishArray(json, value.importList);
    end;
  end;
  if (value.groupList.Count > 0) then
  begin
    startArray(json, 'group', value.groupList, false);
    for i := 0 to value.groupList.Count - 1 do
      ComposeStructureMapGroup(json, '', value.groupList[i]);
    finishArray(json, value.groupList);
  end;
end;

{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
procedure TFHIRJsonParser.ParseSubscriptionChannel(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubscriptionChannel(jsn)); 
end;

function TFHIRJsonParser.ParseSubscriptionChannel(jsn : TJsonObject) : TFhirSubscriptionChannel;
begin
  result := TFhirSubscriptionChannel.Create;
  try
    ParseSubscriptionChannelProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubscriptionChannelProperties(jsn : TJsonObject; value : TFhirSubscriptionChannel);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirSubscriptionChannelTypeEnum, SYSTEMS_TFhirSubscriptionChannelTypeEnum);
    if jsn.has('endpoint') or jsn.has('_endpoint') then
        value.endpointElement := parseUrl(jsn.node['endpoint'], jsn.vObj['_endpoint']);
    if jsn.has('payload') or jsn.has('_payload') then
        value.payloadElement := parseCode(jsn.node['payload'], jsn.vObj['_payload']);
      if jsn.has('header') or jsn.has('_header') then
      iteratePrimitiveArray(jsn.vArr['header'], jsn.vArr['_header'], value.headerList, parseString);
end;

procedure TFHIRJsonComposer.ComposeSubscriptionChannel(json : TJSONWriter; name : string; value : TFhirSubscriptionChannel; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirSubscriptionChannelTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrlValue(json, 'endpoint', value.endpointElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrlProps(json, 'endpoint', value.endpointElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'payload', value.payloadElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'payload', value.payloadElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.headerList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.headerList.Count - 1 do
    begin
      ext := ext or ((value.headerList[i].id <> '') or (value.headerList[i].hasExtensionList) {no-comments or (value.headerList[i].hasComments)});
      val := val or (value.headerList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'header', value.headerList, true);
      for i := 0 to value.headerList.Count - 1 do
        ComposeStringValue(json, '', value.headerList[i], true);
      finishArray(json, value.headerList);
    end;
    if ext then
    begin
      startArray(json, '_header', value.headerList, false);
      for i := 0 to value.headerList.Count - 1 do
        ComposeStringProps(json, '', value.headerList[i], true);
      finishArray(json, value.headerList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubscription(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubscription(jsn)); 
end;

function TFHIRJsonParser.ParseSubscription(jsn : TJsonObject) : TFhirSubscription;
begin
  result := TFhirSubscription.Create;
  try
    ParseSubscriptionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubscriptionProperties(jsn : TJsonObject; value : TFhirSubscription);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirSubscriptionStatusEnum, SYSTEMS_TFhirSubscriptionStatusEnum);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactPoint);
    if jsn.has('end') or jsn.has('_end') then
        value.end_Element := parseInstant(jsn.node['end'], jsn.vObj['_end']);
    if jsn.has('reason') or jsn.has('_reason') then
        value.reasonElement := parseString(jsn.node['reason'], jsn.vObj['_reason']);
    if jsn.has('criteria') or jsn.has('_criteria') then
        value.criteriaElement := parseString(jsn.node['criteria'], jsn.vObj['_criteria']);
    if jsn.has('error') or jsn.has('_error') then
        value.errorElement := parseString(jsn.node['error'], jsn.vObj['_error']);
    if jsn.has('channel') then
        value.channel := ParseSubscriptionChannel(jsn.vObj['channel']);
end;

procedure TFHIRJsonComposer.ComposeSubscription(json : TJSONWriter; name : string; value : TFhirSubscription; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirSubscriptionStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactPoint(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'end', value.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'end', value.end_Element, false);
  ComposeStringValue(json, 'reason', value.reasonElement, false);
  ComposeStringProps(json, 'reason', value.reasonElement, false);
  ComposeStringValue(json, 'criteria', value.criteriaElement, false);
  ComposeStringProps(json, 'criteria', value.criteriaElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'error', value.errorElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'error', value.errorElement, false);
  ComposeSubscriptionChannel(json, 'channel', value.channel);
end;

{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSCRIPTIONSTATUS}
procedure TFHIRJsonParser.ParseSubscriptionStatusNotificationEvent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubscriptionStatusNotificationEvent(jsn)); 
end;

function TFHIRJsonParser.ParseSubscriptionStatusNotificationEvent(jsn : TJsonObject) : TFhirSubscriptionStatusNotificationEvent;
begin
  result := TFhirSubscriptionStatusNotificationEvent.Create;
  try
    ParseSubscriptionStatusNotificationEventProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubscriptionStatusNotificationEventProperties(jsn : TJsonObject; value : TFhirSubscriptionStatusNotificationEvent);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('eventNumber') or jsn.has('_eventNumber') then
        value.eventNumberElement := parseString(jsn.node['eventNumber'], jsn.vObj['_eventNumber']);
    if jsn.has('timestamp') or jsn.has('_timestamp') then
        value.timestampElement := parseInstant(jsn.node['timestamp'], jsn.vObj['_timestamp']);
    if jsn.has('focus') then
        value.focus := ParseReference(jsn.vObj['focus']);
    if jsn.has('additionalContext') then
      iterateArray(jsn.vArr['additionalContext'], value.additionalContextList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeSubscriptionStatusNotificationEvent(json : TJSONWriter; name : string; value : TFhirSubscriptionStatusNotificationEvent; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'eventNumber', value.eventNumberElement, false);
  ComposeStringProps(json, 'eventNumber', value.eventNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeInstantValue(json, 'timestamp', value.timestampElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeInstantProps(json, 'timestamp', value.timestampElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'focus', value.focus);
  if (SummaryOption in [soFull, soData]) and (value.additionalContextList.Count > 0) then
  begin
    startArray(json, 'additionalContext', value.additionalContextList, false);
    for i := 0 to value.additionalContextList.Count - 1 do
      ComposeReference(json, '', value.additionalContextList[i]);
    finishArray(json, value.additionalContextList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubscriptionStatus(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubscriptionStatus(jsn)); 
end;

function TFHIRJsonParser.ParseSubscriptionStatus(jsn : TJsonObject) : TFhirSubscriptionStatus;
begin
  result := TFhirSubscriptionStatus.Create;
  try
    ParseSubscriptionStatusProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubscriptionStatusProperties(jsn : TJsonObject; value : TFhirSubscriptionStatus);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirSubscriptionStatusEnum, SYSTEMS_TFhirSubscriptionStatusEnum);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirSubscriptionNotificationTypeEnum, SYSTEMS_TFhirSubscriptionNotificationTypeEnum);
    if jsn.has('eventsSinceSubscriptionStart') or jsn.has('_eventsSinceSubscriptionStart') then
        value.eventsSinceSubscriptionStartElement := parseString(jsn.node['eventsSinceSubscriptionStart'], jsn.vObj['_eventsSinceSubscriptionStart']);
    if jsn.has('eventsInNotification') or jsn.has('_eventsInNotification') then
        value.eventsInNotificationElement := parseInteger(jsn.node['eventsInNotification'], jsn.vObj['_eventsInNotification']);
    if jsn.has('notificationEvent') then
      iterateArray(jsn.vArr['notificationEvent'], value.notificationEventList, parseSubscriptionStatusNotificationEvent);
    if jsn.has('subscription') then
        value.subscription := ParseReference(jsn.vObj['subscription']);
    if jsn.has('topic') or jsn.has('_topic') then
        value.topicElement := parseCanonical(jsn.node['topic'], jsn.vObj['_topic']);
    if jsn.has('error') then
      iterateArray(jsn.vArr['error'], value.errorList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeSubscriptionStatus(json : TJSONWriter; name : string; value : TFhirSubscriptionStatus; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirSubscriptionStatusEnum, false);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirSubscriptionNotificationTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'eventsSinceSubscriptionStart', value.eventsSinceSubscriptionStartElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'eventsSinceSubscriptionStart', value.eventsSinceSubscriptionStartElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'eventsInNotification', value.eventsInNotificationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'eventsInNotification', value.eventsInNotificationElement, false);
  if (SummaryOption in [soFull, soData]) and (value.notificationEventList.Count > 0) then
  begin
    startArray(json, 'notificationEvent', value.notificationEventList, false);
    for i := 0 to value.notificationEventList.Count - 1 do
      ComposeSubscriptionStatusNotificationEvent(json, '', value.notificationEventList[i]);
    finishArray(json, value.notificationEventList);
  end;
  ComposeReference(json, 'subscription', value.subscription);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'topic', value.topicElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'topic', value.topicElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.errorList.Count > 0) then
  begin
    startArray(json, 'error', value.errorList, false);
    for i := 0 to value.errorList.Count - 1 do
      ComposeCodeableConcept(json, '', value.errorList[i]);
    finishArray(json, value.errorList);
  end;
end;

{$ENDIF FHIR_SUBSCRIPTIONSTATUS}
{$IFDEF FHIR_SUBSCRIPTIONTOPIC}
procedure TFHIRJsonParser.ParseSubscriptionTopicResourceTrigger(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubscriptionTopicResourceTrigger(jsn)); 
end;

function TFHIRJsonParser.ParseSubscriptionTopicResourceTrigger(jsn : TJsonObject) : TFhirSubscriptionTopicResourceTrigger;
begin
  result := TFhirSubscriptionTopicResourceTrigger.Create;
  try
    ParseSubscriptionTopicResourceTriggerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubscriptionTopicResourceTriggerProperties(jsn : TJsonObject; value : TFhirSubscriptionTopicResourceTrigger);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('resource') or jsn.has('_resource') then
        value.resourceElement := parseUri(jsn.node['resource'], jsn.vObj['_resource']);
    if jsn.has('supportedInteraction') or jsn.has('_supportedInteraction') then
      iterateEnumArray(jsn.vArr['supportedInteraction'], jsn.vArr['_supportedInteraction'], jsn.path+'/supportedInteraction', value.supportedInteractionList, parseEnum, CODES_TFhirInteractionTriggerEnum, SYSTEMS_TFhirInteractionTriggerEnum);
    if jsn.has('queryCriteria') then
        value.queryCriteria := ParseSubscriptionTopicResourceTriggerQueryCriteria(jsn.vObj['queryCriteria']);
    if jsn.has('fhirPathCriteria') or jsn.has('_fhirPathCriteria') then
        value.fhirPathCriteriaElement := parseString(jsn.node['fhirPathCriteria'], jsn.vObj['_fhirPathCriteria']);
end;

procedure TFHIRJsonComposer.ComposeSubscriptionTopicResourceTrigger(json : TJSONWriter; name : string; value : TFhirSubscriptionTopicResourceTrigger; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  ComposeUriValue(json, 'resource', value.resourceElement, false);
  ComposeUriProps(json, 'resource', value.resourceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.supportedInteractionList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.supportedInteractionList.Count - 1 do
    begin
      val := val or (value.supportedInteractionList[i].hasPrimitiveValue);
      ext := ext or ((value.supportedInteractionList[i].id <> '') or (value.supportedInteractionList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'supportedInteraction', value.supportedInteractionList, true);
      for i := 0 to value.supportedInteractionList.Count - 1 do
        ComposeEnumValue(json, '', value.supportedInteractionList[i], CODES_TFhirInteractionTriggerEnum, true);
      finishArray(json, value.supportedInteractionList);
    end;
    if ext then
    begin
      startArray(json, '_supportedInteraction', value.supportedInteractionList, false);
      for i := 0 to value.supportedInteractionList.Count - 1 do
        ComposeEnumProps(json, '', value.supportedInteractionList[i], CODES_TFhirInteractionTriggerEnum, true);
      finishArray(json, value.supportedInteractionList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubscriptionTopicResourceTriggerQueryCriteria(json, 'queryCriteria', value.queryCriteria);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'fhirPathCriteria', value.fhirPathCriteriaElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'fhirPathCriteria', value.fhirPathCriteriaElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubscriptionTopicResourceTriggerQueryCriteria(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubscriptionTopicResourceTriggerQueryCriteria(jsn)); 
end;

function TFHIRJsonParser.ParseSubscriptionTopicResourceTriggerQueryCriteria(jsn : TJsonObject) : TFhirSubscriptionTopicResourceTriggerQueryCriteria;
begin
  result := TFhirSubscriptionTopicResourceTriggerQueryCriteria.Create;
  try
    ParseSubscriptionTopicResourceTriggerQueryCriteriaProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubscriptionTopicResourceTriggerQueryCriteriaProperties(jsn : TJsonObject; value : TFhirSubscriptionTopicResourceTriggerQueryCriteria);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('previous') or jsn.has('_previous') then
        value.previousElement := parseString(jsn.node['previous'], jsn.vObj['_previous']);
    if jsn.has('resultForCreate') or jsn.has('_resultForCreate') then
        value.resultForCreateElement := parseEnum(jsn.path+'/resultForCreate', jsn.node['resultForCreate'], jsn.vObj['_resultForCreate'], CODES_TFhirCriteriaNotExistsBehaviorEnum, SYSTEMS_TFhirCriteriaNotExistsBehaviorEnum);
    if jsn.has('current') or jsn.has('_current') then
        value.currentElement := parseString(jsn.node['current'], jsn.vObj['_current']);
    if jsn.has('resultForDelete') or jsn.has('_resultForDelete') then
        value.resultForDeleteElement := parseEnum(jsn.path+'/resultForDelete', jsn.node['resultForDelete'], jsn.vObj['_resultForDelete'], CODES_TFhirCriteriaNotExistsBehaviorEnum, SYSTEMS_TFhirCriteriaNotExistsBehaviorEnum);
    if jsn.has('requireBoth') or jsn.has('_requireBoth') then
        value.requireBothElement := parseBoolean(jsn.node['requireBoth'], jsn.vObj['_requireBoth']);
end;

procedure TFHIRJsonComposer.ComposeSubscriptionTopicResourceTriggerQueryCriteria(json : TJSONWriter; name : string; value : TFhirSubscriptionTopicResourceTriggerQueryCriteria; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'previous', value.previousElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'previous', value.previousElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'resultForCreate', value.resultForCreateElement, CODES_TFhirCriteriaNotExistsBehaviorEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'current', value.currentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'current', value.currentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'resultForDelete', value.resultForDeleteElement, CODES_TFhirCriteriaNotExistsBehaviorEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'requireBoth', value.requireBothElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'requireBoth', value.requireBothElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubscriptionTopicEventTrigger(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubscriptionTopicEventTrigger(jsn)); 
end;

function TFHIRJsonParser.ParseSubscriptionTopicEventTrigger(jsn : TJsonObject) : TFhirSubscriptionTopicEventTrigger;
begin
  result := TFhirSubscriptionTopicEventTrigger.Create;
  try
    ParseSubscriptionTopicEventTriggerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubscriptionTopicEventTriggerProperties(jsn : TJsonObject; value : TFhirSubscriptionTopicEventTrigger);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('event') then
        value.event := ParseCodeableConcept(jsn.vObj['event']);
    if jsn.has('resource') or jsn.has('_resource') then
        value.resourceElement := parseUri(jsn.node['resource'], jsn.vObj['_resource']);
end;

procedure TFHIRJsonComposer.ComposeSubscriptionTopicEventTrigger(json : TJSONWriter; name : string; value : TFhirSubscriptionTopicEventTrigger; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  ComposeCodeableConcept(json, 'event', value.event);
  ComposeUriValue(json, 'resource', value.resourceElement, false);
  ComposeUriProps(json, 'resource', value.resourceElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubscriptionTopicCanFilterBy(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubscriptionTopicCanFilterBy(jsn)); 
end;

function TFHIRJsonParser.ParseSubscriptionTopicCanFilterBy(jsn : TJsonObject) : TFhirSubscriptionTopicCanFilterBy;
begin
  result := TFhirSubscriptionTopicCanFilterBy.Create;
  try
    ParseSubscriptionTopicCanFilterByProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubscriptionTopicCanFilterByProperties(jsn : TJsonObject; value : TFhirSubscriptionTopicCanFilterBy);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('resource') or jsn.has('_resource') then
        value.resourceElement := parseUri(jsn.node['resource'], jsn.vObj['_resource']);
    if jsn.has('filterParameter') or jsn.has('_filterParameter') then
        value.filterParameterElement := parseString(jsn.node['filterParameter'], jsn.vObj['_filterParameter']);
    if jsn.has('modifier') or jsn.has('_modifier') then
      iterateEnumArray(jsn.vArr['modifier'], jsn.vArr['_modifier'], jsn.path+'/modifier', value.modifierList, parseEnum, CODES_TFhirSubscriptionSearchModifierEnum, SYSTEMS_TFhirSubscriptionSearchModifierEnum);
end;

procedure TFHIRJsonComposer.ComposeSubscriptionTopicCanFilterBy(json : TJSONWriter; name : string; value : TFhirSubscriptionTopicCanFilterBy; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'resource', value.resourceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'resource', value.resourceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'filterParameter', value.filterParameterElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'filterParameter', value.filterParameterElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.modifierList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to value.modifierList.Count - 1 do
    begin
      val := val or (value.modifierList[i].hasPrimitiveValue);
      ext := ext or ((value.modifierList[i].id <> '') or (value.modifierList[i].hasExtensionList));
    end;
    if val then
    begin
      startArray(json, 'modifier', value.modifierList, true);
      for i := 0 to value.modifierList.Count - 1 do
        ComposeEnumValue(json, '', value.modifierList[i], CODES_TFhirSubscriptionSearchModifierEnum, true);
      finishArray(json, value.modifierList);
    end;
    if ext then
    begin
      startArray(json, '_modifier', value.modifierList, false);
      for i := 0 to value.modifierList.Count - 1 do
        ComposeEnumProps(json, '', value.modifierList[i], CODES_TFhirSubscriptionSearchModifierEnum, true);
      finishArray(json, value.modifierList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubscriptionTopicNotificationShape(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubscriptionTopicNotificationShape(jsn)); 
end;

function TFHIRJsonParser.ParseSubscriptionTopicNotificationShape(jsn : TJsonObject) : TFhirSubscriptionTopicNotificationShape;
begin
  result := TFhirSubscriptionTopicNotificationShape.Create;
  try
    ParseSubscriptionTopicNotificationShapeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubscriptionTopicNotificationShapeProperties(jsn : TJsonObject; value : TFhirSubscriptionTopicNotificationShape);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('resource') or jsn.has('_resource') then
        value.resourceElement := parseUri(jsn.node['resource'], jsn.vObj['_resource']);
      if jsn.has('include') or jsn.has('_include') then
      iteratePrimitiveArray(jsn.vArr['include'], jsn.vArr['_include'], value.includeList, parseString);
      if jsn.has('revInclude') or jsn.has('_revInclude') then
      iteratePrimitiveArray(jsn.vArr['revInclude'], jsn.vArr['_revInclude'], value.revIncludeList, parseString);
end;

procedure TFHIRJsonComposer.ComposeSubscriptionTopicNotificationShape(json : TJSONWriter; name : string; value : TFhirSubscriptionTopicNotificationShape; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeUriValue(json, 'resource', value.resourceElement, false);
  ComposeUriProps(json, 'resource', value.resourceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.includeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.includeList.Count - 1 do
    begin
      ext := ext or ((value.includeList[i].id <> '') or (value.includeList[i].hasExtensionList) {no-comments or (value.includeList[i].hasComments)});
      val := val or (value.includeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'include', value.includeList, true);
      for i := 0 to value.includeList.Count - 1 do
        ComposeStringValue(json, '', value.includeList[i], true);
      finishArray(json, value.includeList);
    end;
    if ext then
    begin
      startArray(json, '_include', value.includeList, false);
      for i := 0 to value.includeList.Count - 1 do
        ComposeStringProps(json, '', value.includeList[i], true);
      finishArray(json, value.includeList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.revIncludeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.revIncludeList.Count - 1 do
    begin
      ext := ext or ((value.revIncludeList[i].id <> '') or (value.revIncludeList[i].hasExtensionList) {no-comments or (value.revIncludeList[i].hasComments)});
      val := val or (value.revIncludeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'revInclude', value.revIncludeList, true);
      for i := 0 to value.revIncludeList.Count - 1 do
        ComposeStringValue(json, '', value.revIncludeList[i], true);
      finishArray(json, value.revIncludeList);
    end;
    if ext then
    begin
      startArray(json, '_revInclude', value.revIncludeList, false);
      for i := 0 to value.revIncludeList.Count - 1 do
        ComposeStringProps(json, '', value.revIncludeList[i], true);
      finishArray(json, value.revIncludeList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubscriptionTopic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubscriptionTopic(jsn)); 
end;

function TFHIRJsonParser.ParseSubscriptionTopic(jsn : TJsonObject) : TFhirSubscriptionTopic;
begin
  result := TFhirSubscriptionTopic.Create;
  try
    ParseSubscriptionTopicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubscriptionTopicProperties(jsn : TJsonObject; value : TFhirSubscriptionTopic);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
      if jsn.has('derivedFrom') or jsn.has('_derivedFrom') then
      iteratePrimitiveArray(jsn.vArr['derivedFrom'], jsn.vArr['_derivedFrom'], value.derivedFromList, parseCanonical);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        value.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        value.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);
    if jsn.has('effectivePeriod') then
        value.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('resourceTrigger') then
      iterateArray(jsn.vArr['resourceTrigger'], value.resourceTriggerList, parseSubscriptionTopicResourceTrigger);
    if jsn.has('eventTrigger') then
      iterateArray(jsn.vArr['eventTrigger'], value.eventTriggerList, parseSubscriptionTopicEventTrigger);
    if jsn.has('canFilterBy') then
      iterateArray(jsn.vArr['canFilterBy'], value.canFilterByList, parseSubscriptionTopicCanFilterBy);
    if jsn.has('notificationShape') then
      iterateArray(jsn.vArr['notificationShape'], value.notificationShapeList, parseSubscriptionTopicNotificationShape);
end;

procedure TFHIRJsonComposer.ComposeSubscriptionTopic(json : TJSONWriter; name : string; value : TFhirSubscriptionTopic; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  ComposeUriValue(json, 'url', value.urlElement, false);
  ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.derivedFromList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.derivedFromList.Count - 1 do
    begin
      ext := ext or ((value.derivedFromList[i].id <> '') or (value.derivedFromList[i].hasExtensionList) {no-comments or (value.derivedFromList[i].hasComments)});
      val := val or (value.derivedFromList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'derivedFrom', value.derivedFromList, true);
      for i := 0 to value.derivedFromList.Count - 1 do
        ComposeCanonicalValue(json, '', value.derivedFromList[i], true);
      finishArray(json, value.derivedFromList);
    end;
    if ext then
    begin
      startArray(json, '_derivedFrom', value.derivedFromList, false);
      for i := 0 to value.derivedFromList.Count - 1 do
        ComposeCanonicalProps(json, '', value.derivedFromList[i], true);
      finishArray(json, value.derivedFromList);
    end;
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'approvalDate', value.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'lastReviewDate', value.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'effectivePeriod', value.effectivePeriod);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.resourceTriggerList.Count > 0) then
  begin
    startArray(json, 'resourceTrigger', value.resourceTriggerList, false);
    for i := 0 to value.resourceTriggerList.Count - 1 do
      ComposeSubscriptionTopicResourceTrigger(json, '', value.resourceTriggerList[i]);
    finishArray(json, value.resourceTriggerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.eventTriggerList.Count > 0) then
  begin
    startArray(json, 'eventTrigger', value.eventTriggerList, false);
    for i := 0 to value.eventTriggerList.Count - 1 do
      ComposeSubscriptionTopicEventTrigger(json, '', value.eventTriggerList[i]);
    finishArray(json, value.eventTriggerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.canFilterByList.Count > 0) then
  begin
    startArray(json, 'canFilterBy', value.canFilterByList, false);
    for i := 0 to value.canFilterByList.Count - 1 do
      ComposeSubscriptionTopicCanFilterBy(json, '', value.canFilterByList[i]);
    finishArray(json, value.canFilterByList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.notificationShapeList.Count > 0) then
  begin
    startArray(json, 'notificationShape', value.notificationShapeList, false);
    for i := 0 to value.notificationShapeList.Count - 1 do
      ComposeSubscriptionTopicNotificationShape(json, '', value.notificationShapeList[i]);
    finishArray(json, value.notificationShapeList);
  end;
end;

{$ENDIF FHIR_SUBSCRIPTIONTOPIC}
{$IFDEF FHIR_SUBSTANCE}
procedure TFHIRJsonParser.ParseSubstanceInstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceInstance(jsn)); 
end;

function TFHIRJsonParser.ParseSubstanceInstance(jsn : TJsonObject) : TFhirSubstanceInstance;
begin
  result := TFhirSubstanceInstance.Create;
  try
    ParseSubstanceInstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceInstanceProperties(jsn : TJsonObject; value : TFhirSubstanceInstance);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('expiry') or jsn.has('_expiry') then
        value.expiryElement := parseDateTime(jsn.node['expiry'], jsn.vObj['_expiry']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
end;

procedure TFHIRJsonComposer.ComposeSubstanceInstance(json : TJSONWriter; name : string; value : TFhirSubstanceInstance; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'expiry', value.expiryElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'expiry', value.expiryElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubstanceIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceIngredient(jsn)); 
end;

function TFHIRJsonParser.ParseSubstanceIngredient(jsn : TJsonObject) : TFhirSubstanceIngredient;
begin
  result := TFhirSubstanceIngredient.Create;
  try
    ParseSubstanceIngredientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceIngredientProperties(jsn : TJsonObject; value : TFhirSubstanceIngredient);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('quantity') then
        value.quantity := ParseRatio(jsn.vObj['quantity']);
    if jsn.has('substanceCodeableConcept') {a4} then
      value.substance := ParseCodeableConcept(jsn.vObj['substanceCodeableConcept']);
    if jsn.has('substanceReference') {a3} then
      value.substance := ParseReference(jsn.vObj['substanceReference']);
end;

procedure TFHIRJsonComposer.ComposeSubstanceIngredient(json : TJSONWriter; name : string; value : TFhirSubstanceIngredient; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(json, 'quantity', value.quantity);
  if (value.substance is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'substanceCodeableConcept', TFhirCodeableConcept(value.substance)) 
  else if (value.substance is TFhirReference) then
    ComposeReference(json, 'substanceReference', TFhirReference(value.substance));
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstance(jsn)); 
end;

function TFHIRJsonParser.ParseSubstance(jsn : TJsonObject) : TFhirSubstance;
begin
  result := TFhirSubstance.Create;
  try
    ParseSubstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceProperties(jsn : TJsonObject; value : TFhirSubstance);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFHIRSubstanceStatusEnum, SYSTEMS_TFhirFHIRSubstanceStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], value.categoryList, parseCodeableConcept);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('instance') then
      iterateArray(jsn.vArr['instance'], value.instanceList, parseSubstanceInstance);
    if jsn.has('ingredient') then
      iterateArray(jsn.vArr['ingredient'], value.ingredientList, parseSubstanceIngredient);
end;

procedure TFHIRJsonComposer.ComposeSubstance(json : TJSONWriter; name : string; value : TFhirSubstance; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirFHIRSubstanceStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.categoryList.Count > 0) then
  begin
    startArray(json, 'category', value.categoryList, false);
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', value.categoryList[i]);
    finishArray(json, value.categoryList);
  end;
  ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.instanceList.Count > 0) then
  begin
    startArray(json, 'instance', value.instanceList, false);
    for i := 0 to value.instanceList.Count - 1 do
      ComposeSubstanceInstance(json, '', value.instanceList[i]);
    finishArray(json, value.instanceList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.ingredientList.Count > 0) then
  begin
    startArray(json, 'ingredient', value.ingredientList, false);
    for i := 0 to value.ingredientList.Count - 1 do
      ComposeSubstanceIngredient(json, '', value.ingredientList[i]);
    finishArray(json, value.ingredientList);
  end;
end;

{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEDEFINITION}
procedure TFHIRJsonParser.ParseSubstanceDefinitionMoiety(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceDefinitionMoiety(jsn)); 
end;

function TFHIRJsonParser.ParseSubstanceDefinitionMoiety(jsn : TJsonObject) : TFhirSubstanceDefinitionMoiety;
begin
  result := TFhirSubstanceDefinitionMoiety.Create;
  try
    ParseSubstanceDefinitionMoietyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionMoietyProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionMoiety);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('role') then
        value.role := ParseCodeableConcept(jsn.vObj['role']);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('stereochemistry') then
        value.stereochemistry := ParseCodeableConcept(jsn.vObj['stereochemistry']);
    if jsn.has('opticalActivity') then
        value.opticalActivity := ParseCodeableConcept(jsn.vObj['opticalActivity']);
    if jsn.has('molecularFormula') or jsn.has('_molecularFormula') then
        value.molecularFormulaElement := parseString(jsn.node['molecularFormula'], jsn.vObj['_molecularFormula']);
    if jsn.has('amountQuantity') {a4} then
      value.amount := ParseQuantity(jsn.vObj['amountQuantity']);
    if jsn.has('amountString') or jsn.has('_amountString') then
      value.amount := parseString(jsn.node['amountString'], jsn.vObj['_amountString']);
    if jsn.has('amountType') then
        value.amountType := ParseCodeableConcept(jsn.vObj['amountType']);
end;

procedure TFHIRJsonComposer.ComposeSubstanceDefinitionMoiety(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionMoiety; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'role', value.role);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'stereochemistry', value.stereochemistry);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'opticalActivity', value.opticalActivity);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'molecularFormula', value.molecularFormulaElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'molecularFormula', value.molecularFormulaElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirQuantity) then 
    ComposeQuantity(json, 'amountQuantity', TFhirQuantity(value.amount)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirString) then 
  begin
    ComposeStringValue(json, 'amountString', TFhirString(value.amount), false);
    ComposeStringProps(json, 'amountString', TFhirString(value.amount), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'amountType', value.amountType);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionProperty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceDefinitionProperty(jsn)); 
end;

function TFHIRJsonParser.ParseSubstanceDefinitionProperty(jsn : TJsonObject) : TFhirSubstanceDefinitionProperty;
begin
  result := TFhirSubstanceDefinitionProperty.Create;
  try
    ParseSubstanceDefinitionPropertyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionPropertyProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionProperty);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      value.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
end;

procedure TFHIRJsonComposer.ComposeSubstanceDefinitionProperty(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionProperty; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(value.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(value.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionMolecularWeight(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceDefinitionMolecularWeight(jsn)); 
end;

function TFHIRJsonParser.ParseSubstanceDefinitionMolecularWeight(jsn : TJsonObject) : TFhirSubstanceDefinitionMolecularWeight;
begin
  result := TFhirSubstanceDefinitionMolecularWeight.Create;
  try
    ParseSubstanceDefinitionMolecularWeightProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionMolecularWeightProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionMolecularWeight);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('method') then
        value.method := ParseCodeableConcept(jsn.vObj['method']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('amount') then
        value.amount := ParseQuantity(jsn.vObj['amount']);
end;

procedure TFHIRJsonComposer.ComposeSubstanceDefinitionMolecularWeight(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionMolecularWeight; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'method', value.method);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  ComposeQuantity(json, 'amount', value.amount);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionStructure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceDefinitionStructure(jsn)); 
end;

function TFHIRJsonParser.ParseSubstanceDefinitionStructure(jsn : TJsonObject) : TFhirSubstanceDefinitionStructure;
begin
  result := TFhirSubstanceDefinitionStructure.Create;
  try
    ParseSubstanceDefinitionStructureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionStructureProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionStructure);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('stereochemistry') then
        value.stereochemistry := ParseCodeableConcept(jsn.vObj['stereochemistry']);
    if jsn.has('opticalActivity') then
        value.opticalActivity := ParseCodeableConcept(jsn.vObj['opticalActivity']);
    if jsn.has('molecularFormula') or jsn.has('_molecularFormula') then
        value.molecularFormulaElement := parseString(jsn.node['molecularFormula'], jsn.vObj['_molecularFormula']);
    if jsn.has('molecularFormulaByMoiety') or jsn.has('_molecularFormulaByMoiety') then
        value.molecularFormulaByMoietyElement := parseString(jsn.node['molecularFormulaByMoiety'], jsn.vObj['_molecularFormulaByMoiety']);
    if jsn.has('molecularWeight') then
        value.molecularWeight := ParseSubstanceDefinitionMolecularWeight(jsn.vObj['molecularWeight']);
    if jsn.has('technique') then
      iterateArray(jsn.vArr['technique'], value.techniqueList, parseCodeableConcept);
    if jsn.has('sourceDocument') then
      iterateArray(jsn.vArr['sourceDocument'], value.sourceDocumentList, parseReference);
    if jsn.has('representation') then
      iterateArray(jsn.vArr['representation'], value.representationList, parseSubstanceDefinitionStructureRepresentation);
end;

procedure TFHIRJsonComposer.ComposeSubstanceDefinitionStructure(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionStructure; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'stereochemistry', value.stereochemistry);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'opticalActivity', value.opticalActivity);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'molecularFormula', value.molecularFormulaElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'molecularFormula', value.molecularFormulaElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'molecularFormulaByMoiety', value.molecularFormulaByMoietyElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'molecularFormulaByMoiety', value.molecularFormulaByMoietyElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceDefinitionMolecularWeight(json, 'molecularWeight', value.molecularWeight);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.techniqueList.Count > 0) then
  begin
    startArray(json, 'technique', value.techniqueList, false);
    for i := 0 to value.techniqueList.Count - 1 do
      ComposeCodeableConcept(json, '', value.techniqueList[i]);
    finishArray(json, value.techniqueList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.sourceDocumentList.Count > 0) then
  begin
    startArray(json, 'sourceDocument', value.sourceDocumentList, false);
    for i := 0 to value.sourceDocumentList.Count - 1 do
      ComposeReference(json, '', value.sourceDocumentList[i]);
    finishArray(json, value.sourceDocumentList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.representationList.Count > 0) then
  begin
    startArray(json, 'representation', value.representationList, false);
    for i := 0 to value.representationList.Count - 1 do
      ComposeSubstanceDefinitionStructureRepresentation(json, '', value.representationList[i]);
    finishArray(json, value.representationList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionStructureRepresentation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceDefinitionStructureRepresentation(jsn)); 
end;

function TFHIRJsonParser.ParseSubstanceDefinitionStructureRepresentation(jsn : TJsonObject) : TFhirSubstanceDefinitionStructureRepresentation;
begin
  result := TFhirSubstanceDefinitionStructureRepresentation.Create;
  try
    ParseSubstanceDefinitionStructureRepresentationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionStructureRepresentationProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionStructureRepresentation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('representation') or jsn.has('_representation') then
        value.representationElement := parseString(jsn.node['representation'], jsn.vObj['_representation']);
    if jsn.has('format') then
        value.format := ParseCodeableConcept(jsn.vObj['format']);
    if jsn.has('document') then
        value.document := ParseReference(jsn.vObj['document']);
end;

procedure TFHIRJsonComposer.ComposeSubstanceDefinitionStructureRepresentation(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionStructureRepresentation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'representation', value.representationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'representation', value.representationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'format', value.format);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'document', value.document);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionCode(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceDefinitionCode(jsn)); 
end;

function TFHIRJsonParser.ParseSubstanceDefinitionCode(jsn : TJsonObject) : TFhirSubstanceDefinitionCode;
begin
  result := TFhirSubstanceDefinitionCode.Create;
  try
    ParseSubstanceDefinitionCodeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionCodeProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionCode);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('status') then
        value.status := ParseCodeableConcept(jsn.vObj['status']);
    if jsn.has('statusDate') or jsn.has('_statusDate') then
        value.statusDateElement := parseDateTime(jsn.node['statusDate'], jsn.vObj['_statusDate']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('source') then
      iterateArray(jsn.vArr['source'], value.sourceList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeSubstanceDefinitionCode(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionCode; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', value.status);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'statusDate', value.statusDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'statusDate', value.statusDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.sourceList.Count > 0) then
  begin
    startArray(json, 'source', value.sourceList, false);
    for i := 0 to value.sourceList.Count - 1 do
      ComposeReference(json, '', value.sourceList[i]);
    finishArray(json, value.sourceList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionName(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceDefinitionName(jsn)); 
end;

function TFHIRJsonParser.ParseSubstanceDefinitionName(jsn : TJsonObject) : TFhirSubstanceDefinitionName;
begin
  result := TFhirSubstanceDefinitionName.Create;
  try
    ParseSubstanceDefinitionNameProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionNameProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionName);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('status') then
        value.status := ParseCodeableConcept(jsn.vObj['status']);
    if jsn.has('preferred') or jsn.has('_preferred') then
        value.preferredElement := parseBoolean(jsn.node['preferred'], jsn.vObj['_preferred']);
    if jsn.has('language') then
      iterateArray(jsn.vArr['language'], value.languageList, parseCodeableConcept);
    if jsn.has('domain') then
      iterateArray(jsn.vArr['domain'], value.domainList, parseCodeableConcept);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('synonym') then
      iterateArray(jsn.vArr['synonym'], value.synonymList, parseSubstanceDefinitionName);
    if jsn.has('translation') then
      iterateArray(jsn.vArr['translation'], value.translationList, parseSubstanceDefinitionName);
    if jsn.has('official') then
      iterateArray(jsn.vArr['official'], value.officialList, parseSubstanceDefinitionNameOfficial);
    if jsn.has('source') then
      iterateArray(jsn.vArr['source'], value.sourceList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeSubstanceDefinitionName(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionName; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', value.status);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'preferred', value.preferredElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'preferred', value.preferredElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.languageList.Count > 0) then
  begin
    startArray(json, 'language', value.languageList, false);
    for i := 0 to value.languageList.Count - 1 do
      ComposeCodeableConcept(json, '', value.languageList[i]);
    finishArray(json, value.languageList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.domainList.Count > 0) then
  begin
    startArray(json, 'domain', value.domainList, false);
    for i := 0 to value.domainList.Count - 1 do
      ComposeCodeableConcept(json, '', value.domainList[i]);
    finishArray(json, value.domainList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.synonymList.Count > 0) then
  begin
    startArray(json, 'synonym', value.synonymList, false);
    for i := 0 to value.synonymList.Count - 1 do
      ComposeSubstanceDefinitionName(json, '', value.synonymList[i]);
    finishArray(json, value.synonymList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.translationList.Count > 0) then
  begin
    startArray(json, 'translation', value.translationList, false);
    for i := 0 to value.translationList.Count - 1 do
      ComposeSubstanceDefinitionName(json, '', value.translationList[i]);
    finishArray(json, value.translationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.officialList.Count > 0) then
  begin
    startArray(json, 'official', value.officialList, false);
    for i := 0 to value.officialList.Count - 1 do
      ComposeSubstanceDefinitionNameOfficial(json, '', value.officialList[i]);
    finishArray(json, value.officialList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.sourceList.Count > 0) then
  begin
    startArray(json, 'source', value.sourceList, false);
    for i := 0 to value.sourceList.Count - 1 do
      ComposeReference(json, '', value.sourceList[i]);
    finishArray(json, value.sourceList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionNameOfficial(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceDefinitionNameOfficial(jsn)); 
end;

function TFHIRJsonParser.ParseSubstanceDefinitionNameOfficial(jsn : TJsonObject) : TFhirSubstanceDefinitionNameOfficial;
begin
  result := TFhirSubstanceDefinitionNameOfficial.Create;
  try
    ParseSubstanceDefinitionNameOfficialProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionNameOfficialProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionNameOfficial);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('authority') then
        value.authority := ParseCodeableConcept(jsn.vObj['authority']);
    if jsn.has('status') then
        value.status := ParseCodeableConcept(jsn.vObj['status']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
end;

procedure TFHIRJsonComposer.ComposeSubstanceDefinitionNameOfficial(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionNameOfficial; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'authority', value.authority);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', value.status);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionRelationship(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceDefinitionRelationship(jsn)); 
end;

function TFHIRJsonParser.ParseSubstanceDefinitionRelationship(jsn : TJsonObject) : TFhirSubstanceDefinitionRelationship;
begin
  result := TFhirSubstanceDefinitionRelationship.Create;
  try
    ParseSubstanceDefinitionRelationshipProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionRelationshipProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionRelationship);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('substanceDefinitionReference') {a3} then
      value.substanceDefinition := ParseReference(jsn.vObj['substanceDefinitionReference']);
    if jsn.has('substanceDefinitionCodeableConcept') {a4} then
      value.substanceDefinition := ParseCodeableConcept(jsn.vObj['substanceDefinitionCodeableConcept']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('isDefining') or jsn.has('_isDefining') then
        value.isDefiningElement := parseBoolean(jsn.node['isDefining'], jsn.vObj['_isDefining']);
    if jsn.has('amountQuantity') {a4} then
      value.amount := ParseQuantity(jsn.vObj['amountQuantity']);
    if jsn.has('amountRatio') {a4} then
      value.amount := ParseRatio(jsn.vObj['amountRatio']);
    if jsn.has('amountString') or jsn.has('_amountString') then
      value.amount := parseString(jsn.node['amountString'], jsn.vObj['_amountString']);
    if jsn.has('amountRatioHighLimit') then
        value.amountRatioHighLimit := ParseRatio(jsn.vObj['amountRatioHighLimit']);
    if jsn.has('amountType') then
        value.amountType := ParseCodeableConcept(jsn.vObj['amountType']);
    if jsn.has('source') then
      iterateArray(jsn.vArr['source'], value.sourceList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeSubstanceDefinitionRelationship(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionRelationship; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.substanceDefinition is TFhirReference) then
    ComposeReference(json, 'substanceDefinitionReference', TFhirReference(value.substanceDefinition))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.substanceDefinition is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'substanceDefinitionCodeableConcept', TFhirCodeableConcept(value.substanceDefinition)) ;
  ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'isDefining', value.isDefiningElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'isDefining', value.isDefiningElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirQuantity) then 
    ComposeQuantity(json, 'amountQuantity', TFhirQuantity(value.amount)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirRatio) then 
    ComposeRatio(json, 'amountRatio', TFhirRatio(value.amount)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirString) then 
  begin
    ComposeStringValue(json, 'amountString', TFhirString(value.amount), false);
    ComposeStringProps(json, 'amountString', TFhirString(value.amount), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(json, 'amountRatioHighLimit', value.amountRatioHighLimit);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'amountType', value.amountType);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.sourceList.Count > 0) then
  begin
    startArray(json, 'source', value.sourceList, false);
    for i := 0 to value.sourceList.Count - 1 do
      ComposeReference(json, '', value.sourceList[i]);
    finishArray(json, value.sourceList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionSourceMaterial(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceDefinitionSourceMaterial(jsn)); 
end;

function TFHIRJsonParser.ParseSubstanceDefinitionSourceMaterial(jsn : TJsonObject) : TFhirSubstanceDefinitionSourceMaterial;
begin
  result := TFhirSubstanceDefinitionSourceMaterial.Create;
  try
    ParseSubstanceDefinitionSourceMaterialProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionSourceMaterialProperties(jsn : TJsonObject; value : TFhirSubstanceDefinitionSourceMaterial);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('genus') then
        value.genus := ParseCodeableConcept(jsn.vObj['genus']);
    if jsn.has('species') then
        value.species := ParseCodeableConcept(jsn.vObj['species']);
    if jsn.has('part') then
        value.part := ParseCodeableConcept(jsn.vObj['part']);
    if jsn.has('countryOfOrigin') then
      iterateArray(jsn.vArr['countryOfOrigin'], value.countryOfOriginList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeSubstanceDefinitionSourceMaterial(json : TJSONWriter; name : string; value : TFhirSubstanceDefinitionSourceMaterial; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'genus', value.genus);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'species', value.species);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'part', value.part);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.countryOfOriginList.Count > 0) then
  begin
    startArray(json, 'countryOfOrigin', value.countryOfOriginList, false);
    for i := 0 to value.countryOfOriginList.Count - 1 do
      ComposeCodeableConcept(json, '', value.countryOfOriginList[i]);
    finishArray(json, value.countryOfOriginList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSubstanceDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceDefinition(jsn)); 
end;

function TFHIRJsonParser.ParseSubstanceDefinition(jsn : TJsonObject) : TFhirSubstanceDefinition;
begin
  result := TFhirSubstanceDefinition.Create;
  try
    ParseSubstanceDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceDefinitionProperties(jsn : TJsonObject; value : TFhirSubstanceDefinition);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('status') then
        value.status := ParseCodeableConcept(jsn.vObj['status']);
    if jsn.has('classification') then
      iterateArray(jsn.vArr['classification'], value.classificationList, parseCodeableConcept);
    if jsn.has('domain') then
        value.domain := ParseCodeableConcept(jsn.vObj['domain']);
    if jsn.has('grade') then
      iterateArray(jsn.vArr['grade'], value.gradeList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('informationSource') then
      iterateArray(jsn.vArr['informationSource'], value.informationSourceList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('manufacturer') then
      iterateArray(jsn.vArr['manufacturer'], value.manufacturerList, parseReference);
    if jsn.has('supplier') then
      iterateArray(jsn.vArr['supplier'], value.supplierList, parseReference);
    if jsn.has('moiety') then
      iterateArray(jsn.vArr['moiety'], value.moietyList, parseSubstanceDefinitionMoiety);
    if jsn.has('property') then
      iterateArray(jsn.vArr['property'], value.property_List, parseSubstanceDefinitionProperty);
    if jsn.has('molecularWeight') then
      iterateArray(jsn.vArr['molecularWeight'], value.molecularWeightList, parseSubstanceDefinitionMolecularWeight);
    if jsn.has('structure') then
        value.structure := ParseSubstanceDefinitionStructure(jsn.vObj['structure']);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], value.codeList, parseSubstanceDefinitionCode);
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], value.nameList, parseSubstanceDefinitionName);
    if jsn.has('relationship') then
      iterateArray(jsn.vArr['relationship'], value.relationshipList, parseSubstanceDefinitionRelationship);
    if jsn.has('sourceMaterial') then
        value.sourceMaterial := ParseSubstanceDefinitionSourceMaterial(jsn.vObj['sourceMaterial']);
end;

procedure TFHIRJsonComposer.ComposeSubstanceDefinition(json : TJSONWriter; name : string; value : TFhirSubstanceDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'status', value.status);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.classificationList.Count > 0) then
  begin
    startArray(json, 'classification', value.classificationList, false);
    for i := 0 to value.classificationList.Count - 1 do
      ComposeCodeableConcept(json, '', value.classificationList[i]);
    finishArray(json, value.classificationList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'domain', value.domain);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.gradeList.Count > 0) then
  begin
    startArray(json, 'grade', value.gradeList, false);
    for i := 0 to value.gradeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.gradeList[i]);
    finishArray(json, value.gradeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.informationSourceList.Count > 0) then
  begin
    startArray(json, 'informationSource', value.informationSourceList, false);
    for i := 0 to value.informationSourceList.Count - 1 do
      ComposeReference(json, '', value.informationSourceList[i]);
    finishArray(json, value.informationSourceList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.manufacturerList.Count > 0) then
  begin
    startArray(json, 'manufacturer', value.manufacturerList, false);
    for i := 0 to value.manufacturerList.Count - 1 do
      ComposeReference(json, '', value.manufacturerList[i]);
    finishArray(json, value.manufacturerList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.supplierList.Count > 0) then
  begin
    startArray(json, 'supplier', value.supplierList, false);
    for i := 0 to value.supplierList.Count - 1 do
      ComposeReference(json, '', value.supplierList[i]);
    finishArray(json, value.supplierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.moietyList.Count > 0) then
  begin
    startArray(json, 'moiety', value.moietyList, false);
    for i := 0 to value.moietyList.Count - 1 do
      ComposeSubstanceDefinitionMoiety(json, '', value.moietyList[i]);
    finishArray(json, value.moietyList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.property_List.Count > 0) then
  begin
    startArray(json, 'property', value.property_List, false);
    for i := 0 to value.property_List.Count - 1 do
      ComposeSubstanceDefinitionProperty(json, '', value.property_List[i]);
    finishArray(json, value.property_List);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.molecularWeightList.Count > 0) then
  begin
    startArray(json, 'molecularWeight', value.molecularWeightList, false);
    for i := 0 to value.molecularWeightList.Count - 1 do
      ComposeSubstanceDefinitionMolecularWeight(json, '', value.molecularWeightList[i]);
    finishArray(json, value.molecularWeightList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceDefinitionStructure(json, 'structure', value.structure);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.codeList.Count > 0) then
  begin
    startArray(json, 'code', value.codeList, false);
    for i := 0 to value.codeList.Count - 1 do
      ComposeSubstanceDefinitionCode(json, '', value.codeList[i]);
    finishArray(json, value.codeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.nameList.Count > 0) then
  begin
    startArray(json, 'name', value.nameList, false);
    for i := 0 to value.nameList.Count - 1 do
      ComposeSubstanceDefinitionName(json, '', value.nameList[i]);
    finishArray(json, value.nameList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.relationshipList.Count > 0) then
  begin
    startArray(json, 'relationship', value.relationshipList, false);
    for i := 0 to value.relationshipList.Count - 1 do
      ComposeSubstanceDefinitionRelationship(json, '', value.relationshipList[i]);
    finishArray(json, value.relationshipList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceDefinitionSourceMaterial(json, 'sourceMaterial', value.sourceMaterial);
end;

{$ENDIF FHIR_SUBSTANCEDEFINITION}
{$IFDEF FHIR_SUPPLYDELIVERY}
procedure TFHIRJsonParser.ParseSupplyDeliverySuppliedItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSupplyDeliverySuppliedItem(jsn)); 
end;

function TFHIRJsonParser.ParseSupplyDeliverySuppliedItem(jsn : TJsonObject) : TFhirSupplyDeliverySuppliedItem;
begin
  result := TFhirSupplyDeliverySuppliedItem.Create;
  try
    ParseSupplyDeliverySuppliedItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSupplyDeliverySuppliedItemProperties(jsn : TJsonObject; value : TFhirSupplyDeliverySuppliedItem);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('itemCodeableConcept') {a4} then
      value.item := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
    if jsn.has('itemReference') {a3} then
      value.item := ParseReference(jsn.vObj['itemReference']);
end;

procedure TFHIRJsonComposer.ComposeSupplyDeliverySuppliedItem(json : TJSONWriter; name : string; value : TFhirSupplyDeliverySuppliedItem; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) and (value.item is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'itemCodeableConcept', TFhirCodeableConcept(value.item)) 
  else if (SummaryOption in [soFull, soData]) and (value.item is TFhirReference) then
    ComposeReference(json, 'itemReference', TFhirReference(value.item));
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSupplyDelivery(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSupplyDelivery(jsn)); 
end;

function TFHIRJsonParser.ParseSupplyDelivery(jsn : TJsonObject) : TFhirSupplyDelivery;
begin
  result := TFhirSupplyDelivery.Create;
  try
    ParseSupplyDeliveryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSupplyDeliveryProperties(jsn : TJsonObject; value : TFhirSupplyDelivery);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], value.partOfList, parseReference);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirSupplyDeliveryStatusEnum, SYSTEMS_TFhirSupplyDeliveryStatusEnum);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('suppliedItem') then
        value.suppliedItem := ParseSupplyDeliverySuppliedItem(jsn.vObj['suppliedItem']);
    if jsn.has('occurrencePeriod') {a4} then
      value.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      value.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      value.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('supplier') then
        value.supplier := ParseReference(jsn.vObj['supplier']);
    if jsn.has('destination') then
        value.destination := ParseReference(jsn.vObj['destination']);
    if jsn.has('receiver') then
      iterateArray(jsn.vArr['receiver'], value.receiverList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeSupplyDelivery(json : TJSONWriter; name : string; value : TFhirSupplyDelivery; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.partOfList.Count > 0) then
  begin
    startArray(json, 'partOf', value.partOfList, false);
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(json, '', value.partOfList[i]);
    finishArray(json, value.partOfList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirSupplyDeliveryStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeSupplyDeliverySuppliedItem(json, 'suppliedItem', value.suppliedItem);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(value.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(value.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'supplier', value.supplier);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'destination', value.destination);
  if (SummaryOption in [soFull, soData]) and (value.receiverList.Count > 0) then
  begin
    startArray(json, 'receiver', value.receiverList, false);
    for i := 0 to value.receiverList.Count - 1 do
      ComposeReference(json, '', value.receiverList[i]);
    finishArray(json, value.receiverList);
  end;
end;

{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
procedure TFHIRJsonParser.ParseSupplyRequestParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSupplyRequestParameter(jsn)); 
end;

function TFHIRJsonParser.ParseSupplyRequestParameter(jsn : TJsonObject) : TFhirSupplyRequestParameter;
begin
  result := TFhirSupplyRequestParameter.Create;
  try
    ParseSupplyRequestParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSupplyRequestParameterProperties(jsn : TJsonObject; value : TFhirSupplyRequestParameter);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      value.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
end;

procedure TFHIRJsonComposer.ComposeSupplyRequestParameter(json : TJSONWriter; name : string; value : TFhirSupplyRequestParameter; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(value.value)) 
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseSupplyRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSupplyRequest(jsn)); 
end;

function TFHIRJsonParser.ParseSupplyRequest(jsn : TJsonObject) : TFhirSupplyRequest;
begin
  result := TFhirSupplyRequest.Create;
  try
    ParseSupplyRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSupplyRequestProperties(jsn : TJsonObject; value : TFhirSupplyRequest);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirSupplyRequestStatusEnum, SYSTEMS_TFhirSupplyRequestStatusEnum);
    if jsn.has('category') then
        value.category := ParseCodeableConcept(jsn.vObj['category']);
    if jsn.has('priority') or jsn.has('_priority') then
        value.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('itemCodeableConcept') {a4} then
      value.item := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
    if jsn.has('itemReference') {a3} then
      value.item := ParseReference(jsn.vObj['itemReference']);
    if jsn.has('quantity') then
        value.quantity := ParseQuantity(jsn.vObj['quantity']);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], value.parameterList, parseSupplyRequestParameter);
    if jsn.has('occurrencePeriod') {a4} then
      value.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      value.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      value.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        value.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);
    if jsn.has('requester') then
        value.requester := ParseReference(jsn.vObj['requester']);
    if jsn.has('supplier') then
      iterateArray(jsn.vArr['supplier'], value.supplierList, parseReference);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], value.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], value.reasonReferenceList, parseReference);
    if jsn.has('deliverFrom') then
        value.deliverFrom := ParseReference(jsn.vObj['deliverFrom']);
    if jsn.has('deliverTo') then
        value.deliverTo := ParseReference(jsn.vObj['deliverTo']);
end;

procedure TFHIRJsonComposer.ComposeSupplyRequest(json : TJSONWriter; name : string; value : TFhirSupplyRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirSupplyRequestStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'category', value.category);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (value.item is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'itemCodeableConcept', TFhirCodeableConcept(value.item)) 
  else if (value.item is TFhirReference) then
    ComposeReference(json, 'itemReference', TFhirReference(value.item));
  ComposeQuantity(json, 'quantity', value.quantity);
  if (SummaryOption in [soFull, soData]) and (value.parameterList.Count > 0) then
  begin
    startArray(json, 'parameter', value.parameterList, false);
    for i := 0 to value.parameterList.Count - 1 do
      ComposeSupplyRequestParameter(json, '', value.parameterList[i]);
    finishArray(json, value.parameterList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(value.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(value.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(value.occurrence), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'authoredOn', value.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'authoredOn', value.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'requester', value.requester);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.supplierList.Count > 0) then
  begin
    startArray(json, 'supplier', value.supplierList, false);
    for i := 0 to value.supplierList.Count - 1 do
      ComposeReference(json, '', value.supplierList[i]);
    finishArray(json, value.supplierList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonCodeList.Count > 0) then
  begin
    startArray(json, 'reasonCode', value.reasonCodeList, false);
    for i := 0 to value.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.reasonCodeList[i]);
    finishArray(json, value.reasonCodeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.reasonReferenceList.Count > 0) then
  begin
    startArray(json, 'reasonReference', value.reasonReferenceList, false);
    for i := 0 to value.reasonReferenceList.Count - 1 do
      ComposeReference(json, '', value.reasonReferenceList[i]);
    finishArray(json, value.reasonReferenceList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'deliverFrom', value.deliverFrom);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'deliverTo', value.deliverTo);
end;

{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
procedure TFHIRJsonParser.ParseTaskRestriction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTaskRestriction(jsn)); 
end;

function TFHIRJsonParser.ParseTaskRestriction(jsn : TJsonObject) : TFhirTaskRestriction;
begin
  result := TFhirTaskRestriction.Create;
  try
    ParseTaskRestrictionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTaskRestrictionProperties(jsn : TJsonObject; value : TFhirTaskRestriction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('repetitions') or jsn.has('_repetitions') then
        value.repetitionsElement := parsePositiveInt(jsn.node['repetitions'], jsn.vObj['_repetitions']);
    if jsn.has('period') then
        value.period := ParsePeriod(jsn.vObj['period']);
    if jsn.has('recipient') then
      iterateArray(jsn.vArr['recipient'], value.recipientList, parseReference);
end;

procedure TFHIRJsonComposer.ComposeTaskRestriction(json : TJSONWriter; name : string; value : TFhirTaskRestriction; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'repetitions', value.repetitionsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'repetitions', value.repetitionsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', value.period);
  if (SummaryOption in [soFull, soData]) and (value.recipientList.Count > 0) then
  begin
    startArray(json, 'recipient', value.recipientList, false);
    for i := 0 to value.recipientList.Count - 1 do
      ComposeReference(json, '', value.recipientList[i]);
    finishArray(json, value.recipientList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTaskInput(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTaskInput(jsn)); 
end;

function TFHIRJsonParser.ParseTaskInput(jsn : TJsonObject) : TFhirTaskInput;
begin
  result := TFhirTaskInput.Create;
  try
    ParseTaskInputProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTaskInputProperties(jsn : TJsonObject; value : TFhirTaskInput);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('valueCanonical') or jsn.has('_valueCanonical') then
      value.value := parseCanonical(jsn.node['valueCanonical'], jsn.vObj['_valueCanonical']);
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      value.value := parseCode(jsn.node['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      value.value := parseId(jsn.node['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      value.value := parseMarkdown(jsn.node['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      value.value := parseOid(jsn.node['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      value.value := parsePositiveInt(jsn.node['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      value.value := parseUnsignedInt(jsn.node['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueUrl') or jsn.has('_valueUrl') then
      value.value := parseUrl(jsn.node['valueUrl'], jsn.vObj['_valueUrl']);
    if jsn.has('valueUuid') or jsn.has('_valueUuid') then
      value.value := parseUuid(jsn.node['valueUuid'], jsn.vObj['_valueUuid']);
    if jsn.has('valueAddress') {a4} then
      value.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      value.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      value.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCoding') {a4} then
      value.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      value.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      value.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      value.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      value.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      value.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      value.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      value.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      value.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      value.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      value.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueReference') {a4} then
      value.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      value.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      value.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      value.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueContactDetail') {a4} then
      value.value := ParseContactDetail(jsn.vObj['valueContactDetail']);
    if jsn.has('valueContributor') {a4} then
      value.value := ParseContributor(jsn.vObj['valueContributor']);
    if jsn.has('valueDataRequirement') {a4} then
      value.value := ParseDataRequirement(jsn.vObj['valueDataRequirement']);
    if jsn.has('valueExpression') {a4} then
      value.value := ParseExpression(jsn.vObj['valueExpression']);
    if jsn.has('valueParameterDefinition') {a4} then
      value.value := ParseParameterDefinition(jsn.vObj['valueParameterDefinition']);
    if jsn.has('valueRelatedArtifact') {a4} then
      value.value := ParseRelatedArtifact(jsn.vObj['valueRelatedArtifact']);
    if jsn.has('valueTriggerDefinition') {a4} then
      value.value := ParseTriggerDefinition(jsn.vObj['valueTriggerDefinition']);
    if jsn.has('valueUsageContext') {a4} then
      value.value := ParseUsageContext(jsn.vObj['valueUsageContext']);
    if jsn.has('valueDosage') {a4} then
      value.value := ParseDosage(jsn.vObj['valueDosage']);
    if jsn.has('valueMeta') {a4} then
      value.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      value.value := parseBase64Binary(jsn.node['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      value.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      value.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      value.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      value.value := parseInstant(jsn.node['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      value.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      value.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      value.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeTaskInput(json : TJSONWriter; name : string; value : TFhirTaskInput; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (value.value is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'valueCanonical', TFhirCanonical(value.value), false);
    ComposeCanonicalProps(json, 'valueCanonical', TFhirCanonical(value.value), false);
  end
  else if (value.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(value.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(value.value), false);
  end
  else if (value.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(value.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(value.value), false);
  end
  else if (value.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(value.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(value.value), false);
  end
  else if (value.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(value.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(value.value), false);
  end
  else if (value.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(value.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(value.value), false);
  end
  else if (value.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(value.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(value.value), false);
  end
  else if (value.value is TFhirUrl) then 
  begin
    ComposeUrlValue(json, 'valueUrl', TFhirUrl(value.value), false);
    ComposeUrlProps(json, 'valueUrl', TFhirUrl(value.value), false);
  end
  else if (value.value is TFhirUuid) then 
  begin
    ComposeUuidValue(json, 'valueUuid', TFhirUuid(value.value), false);
    ComposeUuidProps(json, 'valueUuid', TFhirUuid(value.value), false);
  end
  else if (value.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(value.value)) 
  else if (value.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(value.value)) 
  else if (value.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(value.value)) 
  else if (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (value.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(value.value)) 
  else if (value.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(value.value)) 
  else if (value.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(value.value)) 
  else if (value.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(value.value)) 
  else if (value.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(value.value)) 
  else if (value.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(value.value)) 
  else if (value.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(value.value)) 
  else if (value.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(value.value)) 
  else if (value.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(value.value)) 
  else if (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (value.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(value.value)) 
  else if (value.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(value.value)) 
  else if (value.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(value.value)) 
  else if (value.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(value.value)) 
  else if (value.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(value.value)) 
  else if (value.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(value.value)) 
  else if (value.value is TFhirContactDetail) then 
    ComposeContactDetail(json, 'valueContactDetail', TFhirContactDetail(value.value)) 
  else if (value.value is TFhirContributor) then 
    ComposeContributor(json, 'valueContributor', TFhirContributor(value.value)) 
  else if (value.value is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'valueDataRequirement', TFhirDataRequirement(value.value)) 
  else if (value.value is TFhirExpression) then 
    ComposeExpression(json, 'valueExpression', TFhirExpression(value.value)) 
  else if (value.value is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'valueParameterDefinition', TFhirParameterDefinition(value.value)) 
  else if (value.value is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'valueRelatedArtifact', TFhirRelatedArtifact(value.value)) 
  else if (value.value is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'valueTriggerDefinition', TFhirTriggerDefinition(value.value)) 
  else if (value.value is TFhirUsageContext) then 
    ComposeUsageContext(json, 'valueUsageContext', TFhirUsageContext(value.value)) 
  else if (value.value is TFhirDosage) then 
    ComposeDosage(json, 'valueDosage', TFhirDosage(value.value)) 
  else if (value.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(value.value)) 
  else if (value.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
  end
  else if (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (value.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(value.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(value.value), false);
  end
  else if (value.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(value.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(value.value), false);
  end
  else if (value.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(value.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(value.value), false);
  end
  else if (value.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(value.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(value.value), false);
  end
  else if (value.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(value.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(value.value), false);
  end
  else if (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (value.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(value.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(value.value), false);
  end
  else if (value.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(value.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTaskOutput(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTaskOutput(jsn)); 
end;

function TFHIRJsonParser.ParseTaskOutput(jsn : TJsonObject) : TFhirTaskOutput;
begin
  result := TFhirTaskOutput.Create;
  try
    ParseTaskOutputProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTaskOutputProperties(jsn : TJsonObject; value : TFhirTaskOutput);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCodeableConcept(jsn.vObj['type']);
    if jsn.has('valueCanonical') or jsn.has('_valueCanonical') then
      value.value := parseCanonical(jsn.node['valueCanonical'], jsn.vObj['_valueCanonical']);
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      value.value := parseCode(jsn.node['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      value.value := parseId(jsn.node['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      value.value := parseMarkdown(jsn.node['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      value.value := parseOid(jsn.node['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      value.value := parsePositiveInt(jsn.node['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      value.value := parseUnsignedInt(jsn.node['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueUrl') or jsn.has('_valueUrl') then
      value.value := parseUrl(jsn.node['valueUrl'], jsn.vObj['_valueUrl']);
    if jsn.has('valueUuid') or jsn.has('_valueUuid') then
      value.value := parseUuid(jsn.node['valueUuid'], jsn.vObj['_valueUuid']);
    if jsn.has('valueAddress') {a4} then
      value.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      value.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      value.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      value.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      value.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCoding') {a4} then
      value.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      value.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      value.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      value.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      value.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      value.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      value.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      value.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      value.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      value.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      value.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      value.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueReference') {a4} then
      value.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      value.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      value.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      value.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueContactDetail') {a4} then
      value.value := ParseContactDetail(jsn.vObj['valueContactDetail']);
    if jsn.has('valueContributor') {a4} then
      value.value := ParseContributor(jsn.vObj['valueContributor']);
    if jsn.has('valueDataRequirement') {a4} then
      value.value := ParseDataRequirement(jsn.vObj['valueDataRequirement']);
    if jsn.has('valueExpression') {a4} then
      value.value := ParseExpression(jsn.vObj['valueExpression']);
    if jsn.has('valueParameterDefinition') {a4} then
      value.value := ParseParameterDefinition(jsn.vObj['valueParameterDefinition']);
    if jsn.has('valueRelatedArtifact') {a4} then
      value.value := ParseRelatedArtifact(jsn.vObj['valueRelatedArtifact']);
    if jsn.has('valueTriggerDefinition') {a4} then
      value.value := ParseTriggerDefinition(jsn.vObj['valueTriggerDefinition']);
    if jsn.has('valueUsageContext') {a4} then
      value.value := ParseUsageContext(jsn.vObj['valueUsageContext']);
    if jsn.has('valueDosage') {a4} then
      value.value := ParseDosage(jsn.vObj['valueDosage']);
    if jsn.has('valueMeta') {a4} then
      value.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      value.value := parseBase64Binary(jsn.node['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      value.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      value.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      value.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      value.value := parseInstant(jsn.node['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      value.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      value.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      value.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeTaskOutput(json : TJSONWriter; name : string; value : TFhirTaskOutput; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'type', value.type_);
  if (value.value is TFhirCanonical) then 
  begin
    ComposeCanonicalValue(json, 'valueCanonical', TFhirCanonical(value.value), false);
    ComposeCanonicalProps(json, 'valueCanonical', TFhirCanonical(value.value), false);
  end
  else if (value.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(value.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(value.value), false);
  end
  else if (value.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(value.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(value.value), false);
  end
  else if (value.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(value.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(value.value), false);
  end
  else if (value.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(value.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(value.value), false);
  end
  else if (value.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(value.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(value.value), false);
  end
  else if (value.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(value.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(value.value), false);
  end
  else if (value.value is TFhirUrl) then 
  begin
    ComposeUrlValue(json, 'valueUrl', TFhirUrl(value.value), false);
    ComposeUrlProps(json, 'valueUrl', TFhirUrl(value.value), false);
  end
  else if (value.value is TFhirUuid) then 
  begin
    ComposeUuidValue(json, 'valueUuid', TFhirUuid(value.value), false);
    ComposeUuidProps(json, 'valueUuid', TFhirUuid(value.value), false);
  end
  else if (value.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(value.value)) 
  else if (value.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(value.value)) 
  else if (value.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(value.value)) 
  else if (value.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(value.value)) 
  else if (value.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(value.value)) 
  else if (value.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(value.value)) 
  else if (value.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(value.value)) 
  else if (value.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(value.value)) 
  else if (value.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(value.value)) 
  else if (value.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(value.value)) 
  else if (value.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(value.value)) 
  else if (value.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(value.value)) 
  else if (value.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(value.value)) 
  else if (value.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(value.value)) 
  else if (value.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(value.value)) 
  else if (value.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(value.value)) 
  else if (value.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(value.value)) 
  else if (value.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(value.value)) 
  else if (value.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(value.value)) 
  else if (value.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(value.value)) 
  else if (value.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(value.value)) 
  else if (value.value is TFhirContactDetail) then 
    ComposeContactDetail(json, 'valueContactDetail', TFhirContactDetail(value.value)) 
  else if (value.value is TFhirContributor) then 
    ComposeContributor(json, 'valueContributor', TFhirContributor(value.value)) 
  else if (value.value is TFhirDataRequirement) then 
    ComposeDataRequirement(json, 'valueDataRequirement', TFhirDataRequirement(value.value)) 
  else if (value.value is TFhirExpression) then 
    ComposeExpression(json, 'valueExpression', TFhirExpression(value.value)) 
  else if (value.value is TFhirParameterDefinition) then 
    ComposeParameterDefinition(json, 'valueParameterDefinition', TFhirParameterDefinition(value.value)) 
  else if (value.value is TFhirRelatedArtifact) then 
    ComposeRelatedArtifact(json, 'valueRelatedArtifact', TFhirRelatedArtifact(value.value)) 
  else if (value.value is TFhirTriggerDefinition) then 
    ComposeTriggerDefinition(json, 'valueTriggerDefinition', TFhirTriggerDefinition(value.value)) 
  else if (value.value is TFhirUsageContext) then 
    ComposeUsageContext(json, 'valueUsageContext', TFhirUsageContext(value.value)) 
  else if (value.value is TFhirDosage) then 
    ComposeDosage(json, 'valueDosage', TFhirDosage(value.value)) 
  else if (value.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(value.value)) 
  else if (value.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(value.value), false);
  end
  else if (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (value.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(value.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(value.value), false);
  end
  else if (value.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(value.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(value.value), false);
  end
  else if (value.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(value.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(value.value), false);
  end
  else if (value.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(value.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(value.value), false);
  end
  else if (value.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(value.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(value.value), false);
  end
  else if (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (value.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(value.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(value.value), false);
  end
  else if (value.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(value.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTask(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTask(jsn)); 
end;

function TFHIRJsonParser.ParseTask(jsn : TJsonObject) : TFhirTask;
begin
  result := TFhirTask.Create;
  try
    ParseTaskProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTaskProperties(jsn : TJsonObject; value : TFhirTask);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('instantiatesCanonical') or jsn.has('_instantiatesCanonical') then
        value.instantiatesCanonicalElement := parseCanonical(jsn.node['instantiatesCanonical'], jsn.vObj['_instantiatesCanonical']);
    if jsn.has('instantiatesUri') or jsn.has('_instantiatesUri') then
        value.instantiatesUriElement := parseUri(jsn.node['instantiatesUri'], jsn.vObj['_instantiatesUri']);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], value.basedOnList, parseReference);
    if jsn.has('groupIdentifier') then
        value.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], value.partOfList, parseReference);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirTaskStatusEnum, SYSTEMS_TFhirTaskStatusEnum);
    if jsn.has('statusReason') then
        value.statusReason := ParseCodeableConcept(jsn.vObj['statusReason']);
    if jsn.has('businessStatus') then
        value.businessStatus := ParseCodeableConcept(jsn.vObj['businessStatus']);
    if jsn.has('intent') or jsn.has('_intent') then
        value.intentElement := parseEnum(jsn.path+'/intent', jsn.node['intent'], jsn.vObj['_intent'], CODES_TFhirTaskIntentEnum, SYSTEMS_TFhirTaskIntentEnum);
    if jsn.has('priority') or jsn.has('_priority') then
        value.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('code') then
        value.code := ParseCodeableConcept(jsn.vObj['code']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('focus') then
        value.focus := ParseReference(jsn.vObj['focus']);
    if jsn.has('for') then
        value.for_ := ParseReference(jsn.vObj['for']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('executionPeriod') then
        value.executionPeriod := ParsePeriod(jsn.vObj['executionPeriod']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        value.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);
    if jsn.has('lastModified') or jsn.has('_lastModified') then
        value.lastModifiedElement := parseDateTime(jsn.node['lastModified'], jsn.vObj['_lastModified']);
    if jsn.has('requester') then
        value.requester := ParseReference(jsn.vObj['requester']);
    if jsn.has('performerType') then
      iterateArray(jsn.vArr['performerType'], value.performerTypeList, parseCodeableConcept);
    if jsn.has('owner') then
        value.owner := ParseReference(jsn.vObj['owner']);
    if jsn.has('location') then
        value.location := ParseReference(jsn.vObj['location']);
    if jsn.has('reasonCode') then
        value.reasonCode := ParseCodeableConcept(jsn.vObj['reasonCode']);
    if jsn.has('reasonReference') then
        value.reasonReference := ParseReference(jsn.vObj['reasonReference']);
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], value.insuranceList, parseReference);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
    if jsn.has('relevantHistory') then
      iterateArray(jsn.vArr['relevantHistory'], value.relevantHistoryList, parseReference);
    if jsn.has('restriction') then
        value.restriction := ParseTaskRestriction(jsn.vObj['restriction']);
    if jsn.has('input') then
      iterateArray(jsn.vArr['input'], value.inputList, parseTaskInput);
    if jsn.has('output') then
      iterateArray(jsn.vArr['output'], value.outputList, parseTaskOutput);
end;

procedure TFHIRJsonComposer.ComposeTask(json : TJSONWriter; name : string; value : TFhirTask; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalValue(json, 'instantiatesCanonical', value.instantiatesCanonicalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonicalProps(json, 'instantiatesCanonical', value.instantiatesCanonicalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'instantiatesUri', value.instantiatesUriElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'instantiatesUri', value.instantiatesUriElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.basedOnList.Count > 0) then
  begin
    startArray(json, 'basedOn', value.basedOnList, false);
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(json, '', value.basedOnList[i]);
    finishArray(json, value.basedOnList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'groupIdentifier', value.groupIdentifier);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.partOfList.Count > 0) then
  begin
    startArray(json, 'partOf', value.partOfList, false);
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(json, '', value.partOfList[i]);
    finishArray(json, value.partOfList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirTaskStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'statusReason', value.statusReason);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'businessStatus', value.businessStatus);
  ComposeEnumValue(json, 'intent', value.intentElement, CODES_TFhirTaskIntentEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', value.code);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'focus', value.focus);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'for', value.for_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'executionPeriod', value.executionPeriod);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'authoredOn', value.authoredOnElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'authoredOn', value.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'lastModified', value.lastModifiedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'lastModified', value.lastModifiedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'requester', value.requester);
  if (SummaryOption in [soFull, soData]) and (value.performerTypeList.Count > 0) then
  begin
    startArray(json, 'performerType', value.performerTypeList, false);
    for i := 0 to value.performerTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', value.performerTypeList[i]);
    finishArray(json, value.performerTypeList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'owner', value.owner);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'location', value.location);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reasonCode', value.reasonCode);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'reasonReference', value.reasonReference);
  if (SummaryOption in [soFull, soData]) and (value.insuranceList.Count > 0) then
  begin
    startArray(json, 'insurance', value.insuranceList, false);
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeReference(json, '', value.insuranceList[i]);
    finishArray(json, value.insuranceList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.relevantHistoryList.Count > 0) then
  begin
    startArray(json, 'relevantHistory', value.relevantHistoryList, false);
    for i := 0 to value.relevantHistoryList.Count - 1 do
      ComposeReference(json, '', value.relevantHistoryList[i]);
    finishArray(json, value.relevantHistoryList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeTaskRestriction(json, 'restriction', value.restriction);
  if (SummaryOption in [soFull, soData]) and (value.inputList.Count > 0) then
  begin
    startArray(json, 'input', value.inputList, false);
    for i := 0 to value.inputList.Count - 1 do
      ComposeTaskInput(json, '', value.inputList[i]);
    finishArray(json, value.inputList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.outputList.Count > 0) then
  begin
    startArray(json, 'output', value.outputList, false);
    for i := 0 to value.outputList.Count - 1 do
      ComposeTaskOutput(json, '', value.outputList[i]);
    finishArray(json, value.outputList);
  end;
end;

{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
procedure TFHIRJsonParser.ParseTerminologyCapabilitiesSoftware(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesSoftware(jsn)); 
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesSoftware(jsn : TJsonObject) : TFhirTerminologyCapabilitiesSoftware;
begin
  result := TFhirTerminologyCapabilitiesSoftware.Create;
  try
    ParseTerminologyCapabilitiesSoftwareProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesSoftwareProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesSoftware);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesSoftware(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesSoftware; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesImplementation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesImplementation(jsn)); 
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesImplementation(jsn : TJsonObject) : TFhirTerminologyCapabilitiesImplementation;
begin
  result := TFhirTerminologyCapabilitiesImplementation.Create;
  try
    ParseTerminologyCapabilitiesImplementationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesImplementationProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesImplementation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUrl(jsn.node['url'], jsn.vObj['_url']);
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesImplementation(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesImplementation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'description', value.descriptionElement, false);
  ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrlValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrlProps(json, 'url', value.urlElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesCodeSystem(jsn)); 
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystem(jsn : TJsonObject) : TFhirTerminologyCapabilitiesCodeSystem;
begin
  result := TFhirTerminologyCapabilitiesCodeSystem.Create;
  try
    ParseTerminologyCapabilitiesCodeSystemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystemProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesCodeSystem);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('uri') or jsn.has('_uri') then
        value.uriElement := parseCanonical(jsn.node['uri'], jsn.vObj['_uri']);
    if jsn.has('version') then
      iterateArray(jsn.vArr['version'], value.versionList, parseTerminologyCapabilitiesCodeSystemVersion);
    if jsn.has('subsumption') or jsn.has('_subsumption') then
        value.subsumptionElement := parseBoolean(jsn.node['subsumption'], jsn.vObj['_subsumption']);
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesCodeSystem(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesCodeSystem; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalValue(json, 'uri', value.uriElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonicalProps(json, 'uri', value.uriElement, false);
  if (SummaryOption in [soFull, soData]) and (value.versionList.Count > 0) then
  begin
    startArray(json, 'version', value.versionList, false);
    for i := 0 to value.versionList.Count - 1 do
      ComposeTerminologyCapabilitiesCodeSystemVersion(json, '', value.versionList[i]);
    finishArray(json, value.versionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'subsumption', value.subsumptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'subsumption', value.subsumptionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystemVersion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesCodeSystemVersion(jsn)); 
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystemVersion(jsn : TJsonObject) : TFhirTerminologyCapabilitiesCodeSystemVersion;
begin
  result := TFhirTerminologyCapabilitiesCodeSystemVersion.Create;
  try
    ParseTerminologyCapabilitiesCodeSystemVersionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystemVersionProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesCodeSystemVersion);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseString(jsn.node['code'], jsn.vObj['_code']);
    if jsn.has('isDefault') or jsn.has('_isDefault') then
        value.isDefaultElement := parseBoolean(jsn.node['isDefault'], jsn.vObj['_isDefault']);
    if jsn.has('compositional') or jsn.has('_compositional') then
        value.compositionalElement := parseBoolean(jsn.node['compositional'], jsn.vObj['_compositional']);
      if jsn.has('language') or jsn.has('_language') then
      iteratePrimitiveArray(jsn.vArr['language'], jsn.vArr['_language'], value.languageList, parseCode);
    if jsn.has('filter') then
      iterateArray(jsn.vArr['filter'], value.filterList, parseTerminologyCapabilitiesCodeSystemVersionFilter);
      if jsn.has('property') or jsn.has('_property') then
      iteratePrimitiveArray(jsn.vArr['property'], jsn.vArr['_property'], value.property_List, parseCode);
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesCodeSystemVersion(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesCodeSystemVersion; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'isDefault', value.isDefaultElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'isDefault', value.isDefaultElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'compositional', value.compositionalElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'compositional', value.compositionalElement, false);
  if (SummaryOption in [soFull, soData]) and (value.languageList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.languageList.Count - 1 do
    begin
      ext := ext or ((value.languageList[i].id <> '') or (value.languageList[i].hasExtensionList) {no-comments or (value.languageList[i].hasComments)});
      val := val or (value.languageList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'language', value.languageList, true);
      for i := 0 to value.languageList.Count - 1 do
        ComposeCodeValue(json, '', value.languageList[i], true);
      finishArray(json, value.languageList);
    end;
    if ext then
    begin
      startArray(json, '_language', value.languageList, false);
      for i := 0 to value.languageList.Count - 1 do
        ComposeCodeProps(json, '', value.languageList[i], true);
      finishArray(json, value.languageList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (value.filterList.Count > 0) then
  begin
    startArray(json, 'filter', value.filterList, false);
    for i := 0 to value.filterList.Count - 1 do
      ComposeTerminologyCapabilitiesCodeSystemVersionFilter(json, '', value.filterList[i]);
    finishArray(json, value.filterList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.property_List.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.property_List.Count - 1 do
    begin
      ext := ext or ((value.property_List[i].id <> '') or (value.property_List[i].hasExtensionList) {no-comments or (value.property_List[i].hasComments)});
      val := val or (value.property_List[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'property', value.property_List, true);
      for i := 0 to value.property_List.Count - 1 do
        ComposeCodeValue(json, '', value.property_List[i], true);
      finishArray(json, value.property_List);
    end;
    if ext then
    begin
      startArray(json, '_property', value.property_List, false);
      for i := 0 to value.property_List.Count - 1 do
        ComposeCodeProps(json, '', value.property_List[i], true);
      finishArray(json, value.property_List);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystemVersionFilter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesCodeSystemVersionFilter(jsn)); 
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystemVersionFilter(jsn : TJsonObject) : TFhirTerminologyCapabilitiesCodeSystemVersionFilter;
begin
  result := TFhirTerminologyCapabilitiesCodeSystemVersionFilter.Create;
  try
    ParseTerminologyCapabilitiesCodeSystemVersionFilterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesCodeSystemVersionFilterProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesCodeSystemVersionFilter);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
      if jsn.has('op') or jsn.has('_op') then
      iteratePrimitiveArray(jsn.vArr['op'], jsn.vArr['_op'], value.opList, parseCode);
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesCodeSystemVersionFilter(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesCodeSystemVersionFilter; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeValue(json, 'code', value.codeElement, false);
  ComposeCodeProps(json, 'code', value.codeElement, false);
  if (value.opList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.opList.Count - 1 do
    begin
      ext := ext or ((value.opList[i].id <> '') or (value.opList[i].hasExtensionList) {no-comments or (value.opList[i].hasComments)});
      val := val or (value.opList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'op', value.opList, true);
      for i := 0 to value.opList.Count - 1 do
        ComposeCodeValue(json, '', value.opList[i], true);
      finishArray(json, value.opList);
    end;
    if ext then
    begin
      startArray(json, '_op', value.opList, false);
      for i := 0 to value.opList.Count - 1 do
        ComposeCodeProps(json, '', value.opList[i], true);
      finishArray(json, value.opList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesExpansion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesExpansion(jsn)); 
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesExpansion(jsn : TJsonObject) : TFhirTerminologyCapabilitiesExpansion;
begin
  result := TFhirTerminologyCapabilitiesExpansion.Create;
  try
    ParseTerminologyCapabilitiesExpansionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesExpansionProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesExpansion);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('hierarchical') or jsn.has('_hierarchical') then
        value.hierarchicalElement := parseBoolean(jsn.node['hierarchical'], jsn.vObj['_hierarchical']);
    if jsn.has('paging') or jsn.has('_paging') then
        value.pagingElement := parseBoolean(jsn.node['paging'], jsn.vObj['_paging']);
    if jsn.has('incomplete') or jsn.has('_incomplete') then
        value.incompleteElement := parseBoolean(jsn.node['incomplete'], jsn.vObj['_incomplete']);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], value.parameterList, parseTerminologyCapabilitiesExpansionParameter);
    if jsn.has('textFilter') or jsn.has('_textFilter') then
        value.textFilterElement := parseMarkdown(jsn.node['textFilter'], jsn.vObj['_textFilter']);
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesExpansion(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesExpansion; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'hierarchical', value.hierarchicalElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'hierarchical', value.hierarchicalElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'paging', value.pagingElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'paging', value.pagingElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'incomplete', value.incompleteElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'incomplete', value.incompleteElement, false);
  if (SummaryOption in [soFull, soData]) and (value.parameterList.Count > 0) then
  begin
    startArray(json, 'parameter', value.parameterList, false);
    for i := 0 to value.parameterList.Count - 1 do
      ComposeTerminologyCapabilitiesExpansionParameter(json, '', value.parameterList[i]);
    finishArray(json, value.parameterList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'textFilter', value.textFilterElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'textFilter', value.textFilterElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesExpansionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesExpansionParameter(jsn)); 
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesExpansionParameter(jsn : TJsonObject) : TFhirTerminologyCapabilitiesExpansionParameter;
begin
  result := TFhirTerminologyCapabilitiesExpansionParameter.Create;
  try
    ParseTerminologyCapabilitiesExpansionParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesExpansionParameterProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesExpansionParameter);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseCode(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('documentation') or jsn.has('_documentation') then
        value.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesExpansionParameter(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesExpansionParameter; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeValue(json, 'name', value.nameElement, false);
  ComposeCodeProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', value.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', value.documentationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesValidateCode(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesValidateCode(jsn)); 
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesValidateCode(jsn : TJsonObject) : TFhirTerminologyCapabilitiesValidateCode;
begin
  result := TFhirTerminologyCapabilitiesValidateCode.Create;
  try
    ParseTerminologyCapabilitiesValidateCodeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesValidateCodeProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesValidateCode);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('translations') or jsn.has('_translations') then
        value.translationsElement := parseBoolean(jsn.node['translations'], jsn.vObj['_translations']);
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesValidateCode(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesValidateCode; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeBooleanValue(json, 'translations', value.translationsElement, false);
  ComposeBooleanProps(json, 'translations', value.translationsElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesTranslation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesTranslation(jsn)); 
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesTranslation(jsn : TJsonObject) : TFhirTerminologyCapabilitiesTranslation;
begin
  result := TFhirTerminologyCapabilitiesTranslation.Create;
  try
    ParseTerminologyCapabilitiesTranslationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesTranslationProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesTranslation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('needsMap') or jsn.has('_needsMap') then
        value.needsMapElement := parseBoolean(jsn.node['needsMap'], jsn.vObj['_needsMap']);
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesTranslation(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesTranslation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeBooleanValue(json, 'needsMap', value.needsMapElement, false);
  ComposeBooleanProps(json, 'needsMap', value.needsMapElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesClosure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilitiesClosure(jsn)); 
end;

function TFHIRJsonParser.ParseTerminologyCapabilitiesClosure(jsn : TJsonObject) : TFhirTerminologyCapabilitiesClosure;
begin
  result := TFhirTerminologyCapabilitiesClosure.Create;
  try
    ParseTerminologyCapabilitiesClosureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesClosureProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilitiesClosure);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('translation') or jsn.has('_translation') then
        value.translationElement := parseBoolean(jsn.node['translation'], jsn.vObj['_translation']);
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilitiesClosure(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilitiesClosure; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'translation', value.translationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'translation', value.translationElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilities(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTerminologyCapabilities(jsn)); 
end;

function TFHIRJsonParser.ParseTerminologyCapabilities(jsn : TJsonObject) : TFhirTerminologyCapabilities;
begin
  result := TFhirTerminologyCapabilities.Create;
  try
    ParseTerminologyCapabilitiesProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTerminologyCapabilitiesProperties(jsn : TJsonObject; value : TFhirTerminologyCapabilities);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('kind') or jsn.has('_kind') then
        value.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirCapabilityStatementKindEnum, SYSTEMS_TFhirCapabilityStatementKindEnum);
    if jsn.has('software') then
        value.software := ParseTerminologyCapabilitiesSoftware(jsn.vObj['software']);
    if jsn.has('implementation') then
        value.implementation_ := ParseTerminologyCapabilitiesImplementation(jsn.vObj['implementation']);
    if jsn.has('lockedDate') or jsn.has('_lockedDate') then
        value.lockedDateElement := parseBoolean(jsn.node['lockedDate'], jsn.vObj['_lockedDate']);
    if jsn.has('codeSystem') then
      iterateArray(jsn.vArr['codeSystem'], value.codeSystemList, parseTerminologyCapabilitiesCodeSystem);
    if jsn.has('expansion') then
        value.expansion := ParseTerminologyCapabilitiesExpansion(jsn.vObj['expansion']);
    if jsn.has('codeSearch') or jsn.has('_codeSearch') then
        value.codeSearchElement := parseEnum(jsn.path+'/codeSearch', jsn.node['codeSearch'], jsn.vObj['_codeSearch'], CODES_TFhirCodeSearchSupportEnum, SYSTEMS_TFhirCodeSearchSupportEnum);
    if jsn.has('validateCode') then
        value.validateCode := ParseTerminologyCapabilitiesValidateCode(jsn.vObj['validateCode']);
    if jsn.has('translation') then
        value.translation := ParseTerminologyCapabilitiesTranslation(jsn.vObj['translation']);
    if jsn.has('closure') then
        value.closure := ParseTerminologyCapabilitiesClosure(jsn.vObj['closure']);
end;

procedure TFHIRJsonComposer.ComposeTerminologyCapabilities(json : TJSONWriter; name : string; value : TFhirTerminologyCapabilities; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  ComposeDateTimeValue(json, 'date', value.dateElement, false);
  ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  ComposeEnumValue(json, 'kind', value.kindElement, CODES_TFhirCapabilityStatementKindEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeTerminologyCapabilitiesSoftware(json, 'software', value.software);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeTerminologyCapabilitiesImplementation(json, 'implementation', value.implementation_);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'lockedDate', value.lockedDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'lockedDate', value.lockedDateElement, false);
  if (SummaryOption in [soFull, soData]) and (value.codeSystemList.Count > 0) then
  begin
    startArray(json, 'codeSystem', value.codeSystemList, false);
    for i := 0 to value.codeSystemList.Count - 1 do
      ComposeTerminologyCapabilitiesCodeSystem(json, '', value.codeSystemList[i]);
    finishArray(json, value.codeSystemList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeTerminologyCapabilitiesExpansion(json, 'expansion', value.expansion);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'codeSearch', value.codeSearchElement, CODES_TFhirCodeSearchSupportEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTerminologyCapabilitiesValidateCode(json, 'validateCode', value.validateCode);
  if (SummaryOption in [soFull, soData]) then
    ComposeTerminologyCapabilitiesTranslation(json, 'translation', value.translation);
  if (SummaryOption in [soFull, soData]) then
    ComposeTerminologyCapabilitiesClosure(json, 'closure', value.closure);
end;

{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
procedure TFHIRJsonParser.ParseTestReportParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportParticipant(jsn)); 
end;

function TFHIRJsonParser.ParseTestReportParticipant(jsn : TJsonObject) : TFhirTestReportParticipant;
begin
  result := TFhirTestReportParticipant.Create;
  try
    ParseTestReportParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportParticipantProperties(jsn : TJsonObject; value : TFhirTestReportParticipant);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') or jsn.has('_type') then
        value.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirTestReportParticipantTypeEnum, SYSTEMS_TFhirTestReportParticipantTypeEnum);
    if jsn.has('uri') or jsn.has('_uri') then
        value.uriElement := parseUri(jsn.node['uri'], jsn.vObj['_uri']);
    if jsn.has('display') or jsn.has('_display') then
        value.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);
end;

procedure TFHIRJsonComposer.ComposeTestReportParticipant(json : TJSONWriter; name : string; value : TFhirTestReportParticipant; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'type', value.type_Element, CODES_TFhirTestReportParticipantTypeEnum, false);
  ComposeUriValue(json, 'uri', value.uriElement, false);
  ComposeUriProps(json, 'uri', value.uriElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', value.displayElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestReportSetup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportSetup(jsn)); 
end;

function TFHIRJsonParser.ParseTestReportSetup(jsn : TJsonObject) : TFhirTestReportSetup;
begin
  result := TFhirTestReportSetup.Create;
  try
    ParseTestReportSetupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportSetupProperties(jsn : TJsonObject; value : TFhirTestReportSetup);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], value.actionList, parseTestReportSetupAction);
end;

procedure TFHIRJsonComposer.ComposeTestReportSetup(json : TJSONWriter; name : string; value : TFhirTestReportSetup; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.actionList.Count > 0) then
  begin
    startArray(json, 'action', value.actionList, false);
    for i := 0 to value.actionList.Count - 1 do
      ComposeTestReportSetupAction(json, '', value.actionList[i]);
    finishArray(json, value.actionList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestReportSetupAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportSetupAction(jsn)); 
end;

function TFHIRJsonParser.ParseTestReportSetupAction(jsn : TJsonObject) : TFhirTestReportSetupAction;
begin
  result := TFhirTestReportSetupAction.Create;
  try
    ParseTestReportSetupActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionProperties(jsn : TJsonObject; value : TFhirTestReportSetupAction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('operation') then
        value.operation := ParseTestReportSetupActionOperation(jsn.vObj['operation']);
    if jsn.has('assert') then
        value.assert := ParseTestReportSetupActionAssert(jsn.vObj['assert']);
end;

procedure TFHIRJsonComposer.ComposeTestReportSetupAction(json : TJSONWriter; name : string; value : TFhirTestReportSetupAction; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionOperation(json, 'operation', value.operation);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionAssert(json, 'assert', value.assert);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportSetupActionOperation(jsn)); 
end;

function TFHIRJsonParser.ParseTestReportSetupActionOperation(jsn : TJsonObject) : TFhirTestReportSetupActionOperation;
begin
  result := TFhirTestReportSetupActionOperation.Create;
  try
    ParseTestReportSetupActionOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionOperationProperties(jsn : TJsonObject; value : TFhirTestReportSetupActionOperation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('result') or jsn.has('_result') then
        value.resultElement := parseEnum(jsn.path+'/result', jsn.node['result'], jsn.vObj['_result'], CODES_TFhirTestReportActionResultEnum, SYSTEMS_TFhirTestReportActionResultEnum);
    if jsn.has('message') or jsn.has('_message') then
        value.messageElement := parseMarkdown(jsn.node['message'], jsn.vObj['_message']);
    if jsn.has('detail') or jsn.has('_detail') then
        value.detailElement := parseUri(jsn.node['detail'], jsn.vObj['_detail']);
end;

procedure TFHIRJsonComposer.ComposeTestReportSetupActionOperation(json : TJSONWriter; name : string; value : TFhirTestReportSetupActionOperation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'result', value.resultElement, CODES_TFhirTestReportActionResultEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'message', value.messageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'message', value.messageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'detail', value.detailElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'detail', value.detailElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionAssert(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportSetupActionAssert(jsn)); 
end;

function TFHIRJsonParser.ParseTestReportSetupActionAssert(jsn : TJsonObject) : TFhirTestReportSetupActionAssert;
begin
  result := TFhirTestReportSetupActionAssert.Create;
  try
    ParseTestReportSetupActionAssertProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionAssertProperties(jsn : TJsonObject; value : TFhirTestReportSetupActionAssert);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('result') or jsn.has('_result') then
        value.resultElement := parseEnum(jsn.path+'/result', jsn.node['result'], jsn.vObj['_result'], CODES_TFhirTestReportActionResultEnum, SYSTEMS_TFhirTestReportActionResultEnum);
    if jsn.has('message') or jsn.has('_message') then
        value.messageElement := parseMarkdown(jsn.node['message'], jsn.vObj['_message']);
    if jsn.has('detail') or jsn.has('_detail') then
        value.detailElement := parseString(jsn.node['detail'], jsn.vObj['_detail']);
end;

procedure TFHIRJsonComposer.ComposeTestReportSetupActionAssert(json : TJSONWriter; name : string; value : TFhirTestReportSetupActionAssert; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeEnumValue(json, 'result', value.resultElement, CODES_TFhirTestReportActionResultEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'message', value.messageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'message', value.messageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'detail', value.detailElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'detail', value.detailElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestReportTest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportTest(jsn)); 
end;

function TFHIRJsonParser.ParseTestReportTest(jsn : TJsonObject) : TFhirTestReportTest;
begin
  result := TFhirTestReportTest.Create;
  try
    ParseTestReportTestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportTestProperties(jsn : TJsonObject; value : TFhirTestReportTest);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], value.actionList, parseTestReportTestAction);
end;

procedure TFHIRJsonComposer.ComposeTestReportTest(json : TJSONWriter; name : string; value : TFhirTestReportTest; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (value.actionList.Count > 0) then
  begin
    startArray(json, 'action', value.actionList, false);
    for i := 0 to value.actionList.Count - 1 do
      ComposeTestReportTestAction(json, '', value.actionList[i]);
    finishArray(json, value.actionList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestReportTestAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportTestAction(jsn)); 
end;

function TFHIRJsonParser.ParseTestReportTestAction(jsn : TJsonObject) : TFhirTestReportTestAction;
begin
  result := TFhirTestReportTestAction.Create;
  try
    ParseTestReportTestActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportTestActionProperties(jsn : TJsonObject; value : TFhirTestReportTestAction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('operation') then
        value.operation := ParseTestReportSetupActionOperation(jsn.vObj['operation']);
    if jsn.has('assert') then
        value.assert := ParseTestReportSetupActionAssert(jsn.vObj['assert']);
end;

procedure TFHIRJsonComposer.ComposeTestReportTestAction(json : TJSONWriter; name : string; value : TFhirTestReportTestAction; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionOperation(json, 'operation', value.operation);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionAssert(json, 'assert', value.assert);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestReportTeardown(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportTeardown(jsn)); 
end;

function TFHIRJsonParser.ParseTestReportTeardown(jsn : TJsonObject) : TFhirTestReportTeardown;
begin
  result := TFhirTestReportTeardown.Create;
  try
    ParseTestReportTeardownProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportTeardownProperties(jsn : TJsonObject; value : TFhirTestReportTeardown);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], value.actionList, parseTestReportTeardownAction);
end;

procedure TFHIRJsonComposer.ComposeTestReportTeardown(json : TJSONWriter; name : string; value : TFhirTestReportTeardown; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.actionList.Count > 0) then
  begin
    startArray(json, 'action', value.actionList, false);
    for i := 0 to value.actionList.Count - 1 do
      ComposeTestReportTeardownAction(json, '', value.actionList[i]);
    finishArray(json, value.actionList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestReportTeardownAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportTeardownAction(jsn)); 
end;

function TFHIRJsonParser.ParseTestReportTeardownAction(jsn : TJsonObject) : TFhirTestReportTeardownAction;
begin
  result := TFhirTestReportTeardownAction.Create;
  try
    ParseTestReportTeardownActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportTeardownActionProperties(jsn : TJsonObject; value : TFhirTestReportTeardownAction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('operation') then
        value.operation := ParseTestReportSetupActionOperation(jsn.vObj['operation']);
end;

procedure TFHIRJsonComposer.ComposeTestReportTeardownAction(json : TJSONWriter; name : string; value : TFhirTestReportTeardownAction; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeTestReportSetupActionOperation(json, 'operation', value.operation);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestReport(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReport(jsn)); 
end;

function TFHIRJsonParser.ParseTestReport(jsn : TJsonObject) : TFhirTestReport;
begin
  result := TFhirTestReport.Create;
  try
    ParseTestReportProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportProperties(jsn : TJsonObject; value : TFhirTestReport);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirTestReportStatusEnum, SYSTEMS_TFhirTestReportStatusEnum);
    if jsn.has('testScript') then
        value.testScript := ParseReference(jsn.vObj['testScript']);
    if jsn.has('result') or jsn.has('_result') then
        value.resultElement := parseEnum(jsn.path+'/result', jsn.node['result'], jsn.vObj['_result'], CODES_TFhirTestReportResultEnum, SYSTEMS_TFhirTestReportResultEnum);
    if jsn.has('score') or jsn.has('_score') then
        value.scoreElement := parseDecimal(jsn.node['score'], jsn.vObj['_score']);
    if jsn.has('tester') or jsn.has('_tester') then
        value.testerElement := parseString(jsn.node['tester'], jsn.vObj['_tester']);
    if jsn.has('issued') or jsn.has('_issued') then
        value.issuedElement := parseDateTime(jsn.node['issued'], jsn.vObj['_issued']);
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], value.participantList, parseTestReportParticipant);
    if jsn.has('setup') then
        value.setup := ParseTestReportSetup(jsn.vObj['setup']);
    if jsn.has('test') then
      iterateArray(jsn.vArr['test'], value.testList, parseTestReportTest);
    if jsn.has('teardown') then
        value.teardown := ParseTestReportTeardown(jsn.vObj['teardown']);
end;

procedure TFHIRJsonComposer.ComposeTestReport(json : TJSONWriter; name : string; value : TFhirTestReport; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirTestReportStatusEnum, false);
  ComposeReference(json, 'testScript', value.testScript);
  ComposeEnumValue(json, 'result', value.resultElement, CODES_TFhirTestReportResultEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'score', value.scoreElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'score', value.scoreElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'tester', value.testerElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'tester', value.testerElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'issued', value.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'issued', value.issuedElement, false);
  if (SummaryOption in [soFull, soData]) and (value.participantList.Count > 0) then
  begin
    startArray(json, 'participant', value.participantList, false);
    for i := 0 to value.participantList.Count - 1 do
      ComposeTestReportParticipant(json, '', value.participantList[i]);
    finishArray(json, value.participantList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetup(json, 'setup', value.setup);
  if (SummaryOption in [soFull, soData]) and (value.testList.Count > 0) then
  begin
    startArray(json, 'test', value.testList, false);
    for i := 0 to value.testList.Count - 1 do
      ComposeTestReportTest(json, '', value.testList[i]);
    finishArray(json, value.testList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportTeardown(json, 'teardown', value.teardown);
end;

{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
procedure TFHIRJsonParser.ParseTestScriptOrigin(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptOrigin(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptOrigin(jsn : TJsonObject) : TFhirTestScriptOrigin;
begin
  result := TFhirTestScriptOrigin.Create;
  try
    ParseTestScriptOriginProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptOriginProperties(jsn : TJsonObject; value : TFhirTestScriptOrigin);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('index') or jsn.has('_index') then
        value.indexElement := parseInteger(jsn.node['index'], jsn.vObj['_index']);
    if jsn.has('profile') then
        value.profile := ParseCoding(jsn.vObj['profile']);
end;

procedure TFHIRJsonComposer.ComposeTestScriptOrigin(json : TJSONWriter; name : string; value : TFhirTestScriptOrigin; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeIntegerValue(json, 'index', value.indexElement, false);
  ComposeIntegerProps(json, 'index', value.indexElement, false);
  ComposeCoding(json, 'profile', value.profile);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptDestination(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptDestination(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptDestination(jsn : TJsonObject) : TFhirTestScriptDestination;
begin
  result := TFhirTestScriptDestination.Create;
  try
    ParseTestScriptDestinationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptDestinationProperties(jsn : TJsonObject; value : TFhirTestScriptDestination);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('index') or jsn.has('_index') then
        value.indexElement := parseInteger(jsn.node['index'], jsn.vObj['_index']);
    if jsn.has('profile') then
        value.profile := ParseCoding(jsn.vObj['profile']);
end;

procedure TFHIRJsonComposer.ComposeTestScriptDestination(json : TJSONWriter; name : string; value : TFhirTestScriptDestination; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeIntegerValue(json, 'index', value.indexElement, false);
  ComposeIntegerProps(json, 'index', value.indexElement, false);
  ComposeCoding(json, 'profile', value.profile);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptMetadata(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptMetadata(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptMetadata(jsn : TJsonObject) : TFhirTestScriptMetadata;
begin
  result := TFhirTestScriptMetadata.Create;
  try
    ParseTestScriptMetadataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataProperties(jsn : TJsonObject; value : TFhirTestScriptMetadata);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], value.link_List, parseTestScriptMetadataLink);
    if jsn.has('capability') then
      iterateArray(jsn.vArr['capability'], value.capabilityList, parseTestScriptMetadataCapability);
end;

procedure TFHIRJsonComposer.ComposeTestScriptMetadata(json : TJSONWriter; name : string; value : TFhirTestScriptMetadata; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.link_List.Count > 0) then
  begin
    startArray(json, 'link', value.link_List, false);
    for i := 0 to value.link_List.Count - 1 do
      ComposeTestScriptMetadataLink(json, '', value.link_List[i]);
    finishArray(json, value.link_List);
  end;
  if (value.capabilityList.Count > 0) then
  begin
    startArray(json, 'capability', value.capabilityList, false);
    for i := 0 to value.capabilityList.Count - 1 do
      ComposeTestScriptMetadataCapability(json, '', value.capabilityList[i]);
    finishArray(json, value.capabilityList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptMetadataLink(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptMetadataLink(jsn : TJsonObject) : TFhirTestScriptMetadataLink;
begin
  result := TFhirTestScriptMetadataLink.Create;
  try
    ParseTestScriptMetadataLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataLinkProperties(jsn : TJsonObject; value : TFhirTestScriptMetadataLink);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
end;

procedure TFHIRJsonComposer.ComposeTestScriptMetadataLink(json : TJSONWriter; name : string; value : TFhirTestScriptMetadataLink; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeUriValue(json, 'url', value.urlElement, false);
  ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataCapability(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptMetadataCapability(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptMetadataCapability(jsn : TJsonObject) : TFhirTestScriptMetadataCapability;
begin
  result := TFhirTestScriptMetadataCapability.Create;
  try
    ParseTestScriptMetadataCapabilityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataCapabilityProperties(jsn : TJsonObject; value : TFhirTestScriptMetadataCapability);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('required') or jsn.has('_required') then
        value.requiredElement := parseBoolean(jsn.node['required'], jsn.vObj['_required']);
    if jsn.has('validated') or jsn.has('_validated') then
        value.validatedElement := parseBoolean(jsn.node['validated'], jsn.vObj['_validated']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
      if jsn.has('origin') or jsn.has('_origin') then
      iteratePrimitiveArray(jsn.vArr['origin'], jsn.vArr['_origin'], value.originList, parseInteger);
    if jsn.has('destination') or jsn.has('_destination') then
        value.destinationElement := parseInteger(jsn.node['destination'], jsn.vObj['_destination']);
      if jsn.has('link') or jsn.has('_link') then
      iteratePrimitiveArray(jsn.vArr['link'], jsn.vArr['_link'], value.link_List, parseUri);
    if jsn.has('capabilities') or jsn.has('_capabilities') then
        value.capabilitiesElement := parseCanonical(jsn.node['capabilities'], jsn.vObj['_capabilities']);
end;

procedure TFHIRJsonComposer.ComposeTestScriptMetadataCapability(json : TJSONWriter; name : string; value : TFhirTestScriptMetadataCapability; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeBooleanValue(json, 'required', value.requiredElement, false);
  ComposeBooleanProps(json, 'required', value.requiredElement, false);
  ComposeBooleanValue(json, 'validated', value.validatedElement, false);
  ComposeBooleanProps(json, 'validated', value.validatedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.originList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.originList.Count - 1 do
    begin
      ext := ext or ((value.originList[i].id <> '') or (value.originList[i].hasExtensionList) {no-comments or (value.originList[i].hasComments)});
      val := val or (value.originList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'origin', value.originList, true);
      for i := 0 to value.originList.Count - 1 do
        ComposeIntegerValue(json, '', value.originList[i], true);
      finishArray(json, value.originList);
    end;
    if ext then
    begin
      startArray(json, '_origin', value.originList, false);
      for i := 0 to value.originList.Count - 1 do
        ComposeIntegerProps(json, '', value.originList[i], true);
      finishArray(json, value.originList);
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'destination', value.destinationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'destination', value.destinationElement, false);
  if (SummaryOption in [soFull, soData]) and (value.link_List.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.link_List.Count - 1 do
    begin
      ext := ext or ((value.link_List[i].id <> '') or (value.link_List[i].hasExtensionList) {no-comments or (value.link_List[i].hasComments)});
      val := val or (value.link_List[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'link', value.link_List, true);
      for i := 0 to value.link_List.Count - 1 do
        ComposeUriValue(json, '', value.link_List[i], true);
      finishArray(json, value.link_List);
    end;
    if ext then
    begin
      startArray(json, '_link', value.link_List, false);
      for i := 0 to value.link_List.Count - 1 do
        ComposeUriProps(json, '', value.link_List[i], true);
      finishArray(json, value.link_List);
    end;
  end;
  ComposeCanonicalValue(json, 'capabilities', value.capabilitiesElement, false);
  ComposeCanonicalProps(json, 'capabilities', value.capabilitiesElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptFixture(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptFixture(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptFixture(jsn : TJsonObject) : TFhirTestScriptFixture;
begin
  result := TFhirTestScriptFixture.Create;
  try
    ParseTestScriptFixtureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptFixtureProperties(jsn : TJsonObject; value : TFhirTestScriptFixture);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('autocreate') or jsn.has('_autocreate') then
        value.autocreateElement := parseBoolean(jsn.node['autocreate'], jsn.vObj['_autocreate']);
    if jsn.has('autodelete') or jsn.has('_autodelete') then
        value.autodeleteElement := parseBoolean(jsn.node['autodelete'], jsn.vObj['_autodelete']);
    if jsn.has('resource') then
        value.resource := ParseReference(jsn.vObj['resource']);
end;

procedure TFHIRJsonComposer.ComposeTestScriptFixture(json : TJSONWriter; name : string; value : TFhirTestScriptFixture; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeBooleanValue(json, 'autocreate', value.autocreateElement, false);
  ComposeBooleanProps(json, 'autocreate', value.autocreateElement, false);
  ComposeBooleanValue(json, 'autodelete', value.autodeleteElement, false);
  ComposeBooleanProps(json, 'autodelete', value.autodeleteElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'resource', value.resource);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptVariable(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptVariable(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptVariable(jsn : TJsonObject) : TFhirTestScriptVariable;
begin
  result := TFhirTestScriptVariable.Create;
  try
    ParseTestScriptVariableProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptVariableProperties(jsn : TJsonObject; value : TFhirTestScriptVariable);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('defaultValue') or jsn.has('_defaultValue') then
        value.defaultValueElement := parseString(jsn.node['defaultValue'], jsn.vObj['_defaultValue']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('expression') or jsn.has('_expression') then
        value.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);
    if jsn.has('headerField') or jsn.has('_headerField') then
        value.headerFieldElement := parseString(jsn.node['headerField'], jsn.vObj['_headerField']);
    if jsn.has('hint') or jsn.has('_hint') then
        value.hintElement := parseString(jsn.node['hint'], jsn.vObj['_hint']);
    if jsn.has('path') or jsn.has('_path') then
        value.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);
    if jsn.has('sourceId') or jsn.has('_sourceId') then
        value.sourceIdElement := parseId(jsn.node['sourceId'], jsn.vObj['_sourceId']);
end;

procedure TFHIRJsonComposer.ComposeTestScriptVariable(json : TJSONWriter; name : string; value : TFhirTestScriptVariable; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'defaultValue', value.defaultValueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'defaultValue', value.defaultValueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', value.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', value.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'headerField', value.headerFieldElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'headerField', value.headerFieldElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'hint', value.hintElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'hint', value.hintElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', value.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', value.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'sourceId', value.sourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'sourceId', value.sourceIdElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptSetup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetup(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptSetup(jsn : TJsonObject) : TFhirTestScriptSetup;
begin
  result := TFhirTestScriptSetup.Create;
  try
    ParseTestScriptSetupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupProperties(jsn : TJsonObject; value : TFhirTestScriptSetup);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], value.actionList, parseTestScriptSetupAction);
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetup(json : TJSONWriter; name : string; value : TFhirTestScriptSetup; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.actionList.Count > 0) then
  begin
    startArray(json, 'action', value.actionList, false);
    for i := 0 to value.actionList.Count - 1 do
      ComposeTestScriptSetupAction(json, '', value.actionList[i]);
    finishArray(json, value.actionList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptSetupAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupAction(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptSetupAction(jsn : TJsonObject) : TFhirTestScriptSetupAction;
begin
  result := TFhirTestScriptSetupAction.Create;
  try
    ParseTestScriptSetupActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionProperties(jsn : TJsonObject; value : TFhirTestScriptSetupAction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('operation') then
        value.operation := ParseTestScriptSetupActionOperation(jsn.vObj['operation']);
    if jsn.has('assert') then
        value.assert := ParseTestScriptSetupActionAssert(jsn.vObj['assert']);
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupAction(json : TJSONWriter; name : string; value : TFhirTestScriptSetupAction; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionOperation(json, 'operation', value.operation);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionAssert(json, 'assert', value.assert);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionOperation(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptSetupActionOperation(jsn : TJsonObject) : TFhirTestScriptSetupActionOperation;
begin
  result := TFhirTestScriptSetupActionOperation.Create;
  try
    ParseTestScriptSetupActionOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionOperationProperties(jsn : TJsonObject; value : TFhirTestScriptSetupActionOperation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('type') then
        value.type_ := ParseCoding(jsn.vObj['type']);
    if jsn.has('resource') or jsn.has('_resource') then
        value.resourceElement := parseEnum(jsn.path+'/resource', jsn.node['resource'], jsn.vObj['_resource'], CODES_TFhirFHIRDefinedTypeEnum, SYSTEMS_TFhirFHIRDefinedTypeEnum);
    if jsn.has('label') or jsn.has('_label') then
        value.label_Element := parseString(jsn.node['label'], jsn.vObj['_label']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('accept') or jsn.has('_accept') then
        value.acceptElement := parseCode(jsn.node['accept'], jsn.vObj['_accept']);
    if jsn.has('contentType') or jsn.has('_contentType') then
        value.contentTypeElement := parseCode(jsn.node['contentType'], jsn.vObj['_contentType']);
    if jsn.has('destination') or jsn.has('_destination') then
        value.destinationElement := parseInteger(jsn.node['destination'], jsn.vObj['_destination']);
    if jsn.has('encodeRequestUrl') or jsn.has('_encodeRequestUrl') then
        value.encodeRequestUrlElement := parseBoolean(jsn.node['encodeRequestUrl'], jsn.vObj['_encodeRequestUrl']);
    if jsn.has('method') or jsn.has('_method') then
        value.methodElement := parseEnum(jsn.path+'/method', jsn.node['method'], jsn.vObj['_method'], CODES_TFhirTestScriptRequestMethodCodeEnum, SYSTEMS_TFhirTestScriptRequestMethodCodeEnum);
    if jsn.has('origin') or jsn.has('_origin') then
        value.originElement := parseInteger(jsn.node['origin'], jsn.vObj['_origin']);
    if jsn.has('params') or jsn.has('_params') then
        value.paramsElement := parseString(jsn.node['params'], jsn.vObj['_params']);
    if jsn.has('requestHeader') then
      iterateArray(jsn.vArr['requestHeader'], value.requestHeaderList, parseTestScriptSetupActionOperationRequestHeader);
    if jsn.has('requestId') or jsn.has('_requestId') then
        value.requestIdElement := parseId(jsn.node['requestId'], jsn.vObj['_requestId']);
    if jsn.has('responseId') or jsn.has('_responseId') then
        value.responseIdElement := parseId(jsn.node['responseId'], jsn.vObj['_responseId']);
    if jsn.has('sourceId') or jsn.has('_sourceId') then
        value.sourceIdElement := parseId(jsn.node['sourceId'], jsn.vObj['_sourceId']);
    if jsn.has('targetId') or jsn.has('_targetId') then
        value.targetIdElement := parseId(jsn.node['targetId'], jsn.vObj['_targetId']);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseString(jsn.node['url'], jsn.vObj['_url']);
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionOperation(json : TJSONWriter; name : string; value : TFhirTestScriptSetupActionOperation; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'type', value.type_);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'resource', value.resourceElement, CODES_TFhirFHIRDefinedTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'label', value.label_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'label', value.label_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'accept', value.acceptElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'accept', value.acceptElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'contentType', value.contentTypeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'contentType', value.contentTypeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'destination', value.destinationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'destination', value.destinationElement, false);
  ComposeBooleanValue(json, 'encodeRequestUrl', value.encodeRequestUrlElement, false);
  ComposeBooleanProps(json, 'encodeRequestUrl', value.encodeRequestUrlElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'method', value.methodElement, CODES_TFhirTestScriptRequestMethodCodeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'origin', value.originElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'origin', value.originElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'params', value.paramsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'params', value.paramsElement, false);
  if (SummaryOption in [soFull, soData]) and (value.requestHeaderList.Count > 0) then
  begin
    startArray(json, 'requestHeader', value.requestHeaderList, false);
    for i := 0 to value.requestHeaderList.Count - 1 do
      ComposeTestScriptSetupActionOperationRequestHeader(json, '', value.requestHeaderList[i]);
    finishArray(json, value.requestHeaderList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'requestId', value.requestIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'requestId', value.requestIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'responseId', value.responseIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'responseId', value.responseIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'sourceId', value.sourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'sourceId', value.sourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'targetId', value.targetIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'targetId', value.targetIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'url', value.urlElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionOperationRequestHeader(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionOperationRequestHeader(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptSetupActionOperationRequestHeader(jsn : TJsonObject) : TFhirTestScriptSetupActionOperationRequestHeader;
begin
  result := TFhirTestScriptSetupActionOperationRequestHeader.Create;
  try
    ParseTestScriptSetupActionOperationRequestHeaderProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionOperationRequestHeaderProperties(jsn : TJsonObject; value : TFhirTestScriptSetupActionOperationRequestHeader);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('field') or jsn.has('_field') then
        value.fieldElement := parseString(jsn.node['field'], jsn.vObj['_field']);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionOperationRequestHeader(json : TJSONWriter; name : string; value : TFhirTestScriptSetupActionOperationRequestHeader; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'field', value.fieldElement, false);
  ComposeStringProps(json, 'field', value.fieldElement, false);
  ComposeStringValue(json, 'value', value.valueElement, false);
  ComposeStringProps(json, 'value', value.valueElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssert(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionAssert(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptSetupActionAssert(jsn : TJsonObject) : TFhirTestScriptSetupActionAssert;
begin
  result := TFhirTestScriptSetupActionAssert.Create;
  try
    ParseTestScriptSetupActionAssertProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertProperties(jsn : TJsonObject; value : TFhirTestScriptSetupActionAssert);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('label') or jsn.has('_label') then
        value.label_Element := parseString(jsn.node['label'], jsn.vObj['_label']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('direction') or jsn.has('_direction') then
        value.directionElement := parseEnum(jsn.path+'/direction', jsn.node['direction'], jsn.vObj['_direction'], CODES_TFhirAssertionDirectionTypeEnum, SYSTEMS_TFhirAssertionDirectionTypeEnum);
    if jsn.has('compareToSourceId') or jsn.has('_compareToSourceId') then
        value.compareToSourceIdElement := parseString(jsn.node['compareToSourceId'], jsn.vObj['_compareToSourceId']);
    if jsn.has('compareToSourceExpression') or jsn.has('_compareToSourceExpression') then
        value.compareToSourceExpressionElement := parseString(jsn.node['compareToSourceExpression'], jsn.vObj['_compareToSourceExpression']);
    if jsn.has('compareToSourcePath') or jsn.has('_compareToSourcePath') then
        value.compareToSourcePathElement := parseString(jsn.node['compareToSourcePath'], jsn.vObj['_compareToSourcePath']);
    if jsn.has('contentType') or jsn.has('_contentType') then
        value.contentTypeElement := parseCode(jsn.node['contentType'], jsn.vObj['_contentType']);
    if jsn.has('expression') or jsn.has('_expression') then
        value.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);
    if jsn.has('headerField') or jsn.has('_headerField') then
        value.headerFieldElement := parseString(jsn.node['headerField'], jsn.vObj['_headerField']);
    if jsn.has('minimumId') or jsn.has('_minimumId') then
        value.minimumIdElement := parseString(jsn.node['minimumId'], jsn.vObj['_minimumId']);
    if jsn.has('navigationLinks') or jsn.has('_navigationLinks') then
        value.navigationLinksElement := parseBoolean(jsn.node['navigationLinks'], jsn.vObj['_navigationLinks']);
    if jsn.has('operator') or jsn.has('_operator') then
        value.operatorElement := parseEnum(jsn.path+'/operator', jsn.node['operator'], jsn.vObj['_operator'], CODES_TFhirAssertionOperatorTypeEnum, SYSTEMS_TFhirAssertionOperatorTypeEnum);
    if jsn.has('path') or jsn.has('_path') then
        value.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);
    if jsn.has('requestMethod') or jsn.has('_requestMethod') then
        value.requestMethodElement := parseEnum(jsn.path+'/requestMethod', jsn.node['requestMethod'], jsn.vObj['_requestMethod'], CODES_TFhirTestScriptRequestMethodCodeEnum, SYSTEMS_TFhirTestScriptRequestMethodCodeEnum);
    if jsn.has('requestURL') or jsn.has('_requestURL') then
        value.requestURLElement := parseString(jsn.node['requestURL'], jsn.vObj['_requestURL']);
    if jsn.has('resource') or jsn.has('_resource') then
        value.resourceElement := parseEnum(jsn.path+'/resource', jsn.node['resource'], jsn.vObj['_resource'], CODES_TFhirFHIRDefinedTypeEnum, SYSTEMS_TFhirFHIRDefinedTypeEnum);
    if jsn.has('response') or jsn.has('_response') then
        value.responseElement := parseEnum(jsn.path+'/response', jsn.node['response'], jsn.vObj['_response'], CODES_TFhirAssertionResponseTypesEnum, SYSTEMS_TFhirAssertionResponseTypesEnum);
    if jsn.has('responseCode') or jsn.has('_responseCode') then
        value.responseCodeElement := parseString(jsn.node['responseCode'], jsn.vObj['_responseCode']);
    if jsn.has('sourceId') or jsn.has('_sourceId') then
        value.sourceIdElement := parseId(jsn.node['sourceId'], jsn.vObj['_sourceId']);
    if jsn.has('validateProfileId') or jsn.has('_validateProfileId') then
        value.validateProfileIdElement := parseId(jsn.node['validateProfileId'], jsn.vObj['_validateProfileId']);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
    if jsn.has('warningOnly') or jsn.has('_warningOnly') then
        value.warningOnlyElement := parseBoolean(jsn.node['warningOnly'], jsn.vObj['_warningOnly']);
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionAssert(json : TJSONWriter; name : string; value : TFhirTestScriptSetupActionAssert; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'label', value.label_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'label', value.label_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'direction', value.directionElement, CODES_TFhirAssertionDirectionTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'compareToSourceId', value.compareToSourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'compareToSourceId', value.compareToSourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'compareToSourceExpression', value.compareToSourceExpressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'compareToSourceExpression', value.compareToSourceExpressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'compareToSourcePath', value.compareToSourcePathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'compareToSourcePath', value.compareToSourcePathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'contentType', value.contentTypeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'contentType', value.contentTypeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', value.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', value.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'headerField', value.headerFieldElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'headerField', value.headerFieldElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'minimumId', value.minimumIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'minimumId', value.minimumIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'navigationLinks', value.navigationLinksElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'navigationLinks', value.navigationLinksElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'operator', value.operatorElement, CODES_TFhirAssertionOperatorTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', value.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', value.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'requestMethod', value.requestMethodElement, CODES_TFhirTestScriptRequestMethodCodeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'requestURL', value.requestURLElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'requestURL', value.requestURLElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'resource', value.resourceElement, CODES_TFhirFHIRDefinedTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'response', value.responseElement, CODES_TFhirAssertionResponseTypesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'responseCode', value.responseCodeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'responseCode', value.responseCodeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'sourceId', value.sourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'sourceId', value.sourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'validateProfileId', value.validateProfileIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'validateProfileId', value.validateProfileIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'value', value.valueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'value', value.valueElement, false);
  ComposeBooleanValue(json, 'warningOnly', value.warningOnlyElement, false);
  ComposeBooleanProps(json, 'warningOnly', value.warningOnlyElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptTest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptTest(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptTest(jsn : TJsonObject) : TFhirTestScriptTest;
begin
  result := TFhirTestScriptTest.Create;
  try
    ParseTestScriptTestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptTestProperties(jsn : TJsonObject; value : TFhirTestScriptTest);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], value.actionList, parseTestScriptTestAction);
end;

procedure TFHIRJsonComposer.ComposeTestScriptTest(json : TJSONWriter; name : string; value : TFhirTestScriptTest; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', value.descriptionElement, false);
  if (value.actionList.Count > 0) then
  begin
    startArray(json, 'action', value.actionList, false);
    for i := 0 to value.actionList.Count - 1 do
      ComposeTestScriptTestAction(json, '', value.actionList[i]);
    finishArray(json, value.actionList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptTestAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptTestAction(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptTestAction(jsn : TJsonObject) : TFhirTestScriptTestAction;
begin
  result := TFhirTestScriptTestAction.Create;
  try
    ParseTestScriptTestActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptTestActionProperties(jsn : TJsonObject; value : TFhirTestScriptTestAction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('operation') then
        value.operation := ParseTestScriptSetupActionOperation(jsn.vObj['operation']);
    if jsn.has('assert') then
        value.assert := ParseTestScriptSetupActionAssert(jsn.vObj['assert']);
end;

procedure TFHIRJsonComposer.ComposeTestScriptTestAction(json : TJSONWriter; name : string; value : TFhirTestScriptTestAction; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionOperation(json, 'operation', value.operation);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionAssert(json, 'assert', value.assert);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptTeardown(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptTeardown(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptTeardown(jsn : TJsonObject) : TFhirTestScriptTeardown;
begin
  result := TFhirTestScriptTeardown.Create;
  try
    ParseTestScriptTeardownProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptTeardownProperties(jsn : TJsonObject; value : TFhirTestScriptTeardown);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], value.actionList, parseTestScriptTeardownAction);
end;

procedure TFHIRJsonComposer.ComposeTestScriptTeardown(json : TJSONWriter; name : string; value : TFhirTestScriptTeardown; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (value.actionList.Count > 0) then
  begin
    startArray(json, 'action', value.actionList, false);
    for i := 0 to value.actionList.Count - 1 do
      ComposeTestScriptTeardownAction(json, '', value.actionList[i]);
    finishArray(json, value.actionList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScriptTeardownAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptTeardownAction(jsn)); 
end;

function TFHIRJsonParser.ParseTestScriptTeardownAction(jsn : TJsonObject) : TFhirTestScriptTeardownAction;
begin
  result := TFhirTestScriptTeardownAction.Create;
  try
    ParseTestScriptTeardownActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptTeardownActionProperties(jsn : TJsonObject; value : TFhirTestScriptTeardownAction);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('operation') then
        value.operation := ParseTestScriptSetupActionOperation(jsn.vObj['operation']);
end;

procedure TFHIRJsonComposer.ComposeTestScriptTeardownAction(json : TJSONWriter; name : string; value : TFhirTestScriptTeardownAction; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeTestScriptSetupActionOperation(json, 'operation', value.operation);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseTestScript(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScript(jsn)); 
end;

function TFHIRJsonParser.ParseTestScript(jsn : TJsonObject) : TFhirTestScript;
begin
  result := TFhirTestScript.Create;
  try
    ParseTestScriptProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptProperties(jsn : TJsonObject; value : TFhirTestScript);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
        value.identifier := ParseIdentifier(jsn.vObj['identifier']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('origin') then
      iterateArray(jsn.vArr['origin'], value.originList, parseTestScriptOrigin);
    if jsn.has('destination') then
      iterateArray(jsn.vArr['destination'], value.destinationList, parseTestScriptDestination);
    if jsn.has('metadata') then
        value.metadata := ParseTestScriptMetadata(jsn.vObj['metadata']);
    if jsn.has('fixture') then
      iterateArray(jsn.vArr['fixture'], value.fixtureList, parseTestScriptFixture);
    if jsn.has('profile') then
      iterateArray(jsn.vArr['profile'], value.profileList, parseReference);
    if jsn.has('variable') then
      iterateArray(jsn.vArr['variable'], value.variableList, parseTestScriptVariable);
    if jsn.has('setup') then
        value.setup := ParseTestScriptSetup(jsn.vObj['setup']);
    if jsn.has('test') then
      iterateArray(jsn.vArr['test'], value.testList, parseTestScriptTest);
    if jsn.has('teardown') then
        value.teardown := ParseTestScriptTeardown(jsn.vObj['teardown']);
end;

procedure TFHIRJsonComposer.ComposeTestScript(json : TJSONWriter; name : string; value : TFhirTestScript; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  ComposeUriValue(json, 'url', value.urlElement, false);
  ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', value.identifier);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and (value.originList.Count > 0) then
  begin
    startArray(json, 'origin', value.originList, false);
    for i := 0 to value.originList.Count - 1 do
      ComposeTestScriptOrigin(json, '', value.originList[i]);
    finishArray(json, value.originList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.destinationList.Count > 0) then
  begin
    startArray(json, 'destination', value.destinationList, false);
    for i := 0 to value.destinationList.Count - 1 do
      ComposeTestScriptDestination(json, '', value.destinationList[i]);
    finishArray(json, value.destinationList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptMetadata(json, 'metadata', value.metadata);
  if (SummaryOption in [soFull, soData]) and (value.fixtureList.Count > 0) then
  begin
    startArray(json, 'fixture', value.fixtureList, false);
    for i := 0 to value.fixtureList.Count - 1 do
      ComposeTestScriptFixture(json, '', value.fixtureList[i]);
    finishArray(json, value.fixtureList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.profileList.Count > 0) then
  begin
    startArray(json, 'profile', value.profileList, false);
    for i := 0 to value.profileList.Count - 1 do
      ComposeReference(json, '', value.profileList[i]);
    finishArray(json, value.profileList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.variableList.Count > 0) then
  begin
    startArray(json, 'variable', value.variableList, false);
    for i := 0 to value.variableList.Count - 1 do
      ComposeTestScriptVariable(json, '', value.variableList[i]);
    finishArray(json, value.variableList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetup(json, 'setup', value.setup);
  if (SummaryOption in [soFull, soData]) and (value.testList.Count > 0) then
  begin
    startArray(json, 'test', value.testList, false);
    for i := 0 to value.testList.Count - 1 do
      ComposeTestScriptTest(json, '', value.testList[i]);
    finishArray(json, value.testList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptTeardown(json, 'teardown', value.teardown);
end;

{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
procedure TFHIRJsonParser.ParseValueSetCompose(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetCompose(jsn)); 
end;

function TFHIRJsonParser.ParseValueSetCompose(jsn : TJsonObject) : TFhirValueSetCompose;
begin
  result := TFhirValueSetCompose.Create;
  try
    ParseValueSetComposeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeProperties(jsn : TJsonObject; value : TFhirValueSetCompose);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('lockedDate') or jsn.has('_lockedDate') then
        value.lockedDateElement := parseDate(jsn.node['lockedDate'], jsn.vObj['_lockedDate']);
    if jsn.has('inactive') or jsn.has('_inactive') then
        value.inactiveElement := parseBoolean(jsn.node['inactive'], jsn.vObj['_inactive']);
    if jsn.has('include') then
      iterateArray(jsn.vArr['include'], value.includeList, parseValueSetComposeInclude);
    if jsn.has('exclude') then
      iterateArray(jsn.vArr['exclude'], value.excludeList, parseValueSetComposeInclude);
end;

procedure TFHIRJsonComposer.ComposeValueSetCompose(json : TJSONWriter; name : string; value : TFhirValueSetCompose; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'lockedDate', value.lockedDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'lockedDate', value.lockedDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'inactive', value.inactiveElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'inactive', value.inactiveElement, false);
  if (value.includeList.Count > 0) then
  begin
    startArray(json, 'include', value.includeList, false);
    for i := 0 to value.includeList.Count - 1 do
      ComposeValueSetComposeInclude(json, '', value.includeList[i]);
    finishArray(json, value.includeList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.excludeList.Count > 0) then
  begin
    startArray(json, 'exclude', value.excludeList, false);
    for i := 0 to value.excludeList.Count - 1 do
      ComposeValueSetComposeInclude(json, '', value.excludeList[i]);
    finishArray(json, value.excludeList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseValueSetComposeInclude(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetComposeInclude(jsn)); 
end;

function TFHIRJsonParser.ParseValueSetComposeInclude(jsn : TJsonObject) : TFhirValueSetComposeInclude;
begin
  result := TFhirValueSetComposeInclude.Create;
  try
    ParseValueSetComposeIncludeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeProperties(jsn : TJsonObject; value : TFhirValueSetComposeInclude);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('system') or jsn.has('_system') then
        value.systemElement := parseUri(jsn.node['system'], jsn.vObj['_system']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('concept') then
      iterateArray(jsn.vArr['concept'], value.conceptList, parseValueSetComposeIncludeConcept);
    if jsn.has('filter') then
      iterateArray(jsn.vArr['filter'], value.filterList, parseValueSetComposeIncludeFilter);
      if jsn.has('valueSet') or jsn.has('_valueSet') then
      iteratePrimitiveArray(jsn.vArr['valueSet'], jsn.vArr['_valueSet'], value.valueSetList, parseCanonical);
end;

procedure TFHIRJsonComposer.ComposeValueSetComposeInclude(json : TJSONWriter; name : string; value : TFhirValueSetComposeInclude; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'system', value.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'system', value.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soData]) and (value.conceptList.Count > 0) then
  begin
    startArray(json, 'concept', value.conceptList, false);
    for i := 0 to value.conceptList.Count - 1 do
      ComposeValueSetComposeIncludeConcept(json, '', value.conceptList[i]);
    finishArray(json, value.conceptList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.filterList.Count > 0) then
  begin
    startArray(json, 'filter', value.filterList, false);
    for i := 0 to value.filterList.Count - 1 do
      ComposeValueSetComposeIncludeFilter(json, '', value.filterList[i]);
    finishArray(json, value.filterList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.valueSetList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.valueSetList.Count - 1 do
    begin
      ext := ext or ((value.valueSetList[i].id <> '') or (value.valueSetList[i].hasExtensionList) {no-comments or (value.valueSetList[i].hasComments)});
      val := val or (value.valueSetList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'valueSet', value.valueSetList, true);
      for i := 0 to value.valueSetList.Count - 1 do
        ComposeCanonicalValue(json, '', value.valueSetList[i], true);
      finishArray(json, value.valueSetList);
    end;
    if ext then
    begin
      startArray(json, '_valueSet', value.valueSetList, false);
      for i := 0 to value.valueSetList.Count - 1 do
        ComposeCanonicalProps(json, '', value.valueSetList[i], true);
      finishArray(json, value.valueSetList);
    end;
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeConcept(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetComposeIncludeConcept(jsn)); 
end;

function TFHIRJsonParser.ParseValueSetComposeIncludeConcept(jsn : TJsonObject) : TFhirValueSetComposeIncludeConcept;
begin
  result := TFhirValueSetComposeIncludeConcept.Create;
  try
    ParseValueSetComposeIncludeConceptProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeConceptProperties(jsn : TJsonObject; value : TFhirValueSetComposeIncludeConcept);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
    if jsn.has('display') or jsn.has('_display') then
        value.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);
    if jsn.has('designation') then
      iterateArray(jsn.vArr['designation'], value.designationList, parseValueSetComposeIncludeConceptDesignation);
end;

procedure TFHIRJsonComposer.ComposeValueSetComposeIncludeConcept(json : TJSONWriter; name : string; value : TFhirValueSetComposeIncludeConcept; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeValue(json, 'code', value.codeElement, false);
  ComposeCodeProps(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soData]) and (value.designationList.Count > 0) then
  begin
    startArray(json, 'designation', value.designationList, false);
    for i := 0 to value.designationList.Count - 1 do
      ComposeValueSetComposeIncludeConceptDesignation(json, '', value.designationList[i]);
    finishArray(json, value.designationList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeConceptDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetComposeIncludeConceptDesignation(jsn)); 
end;

function TFHIRJsonParser.ParseValueSetComposeIncludeConceptDesignation(jsn : TJsonObject) : TFhirValueSetComposeIncludeConceptDesignation;
begin
  result := TFhirValueSetComposeIncludeConceptDesignation.Create;
  try
    ParseValueSetComposeIncludeConceptDesignationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeConceptDesignationProperties(jsn : TJsonObject; value : TFhirValueSetComposeIncludeConceptDesignation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('language') or jsn.has('_language') then
        value.languageElement := parseCode(jsn.node['language'], jsn.vObj['_language']);
    if jsn.has('use') then
        value.use := ParseCoding(jsn.vObj['use']);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
end;

procedure TFHIRJsonComposer.ComposeValueSetComposeIncludeConceptDesignation(json : TJSONWriter; name : string; value : TFhirValueSetComposeIncludeConceptDesignation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'language', value.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'language', value.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'use', value.use);
  ComposeStringValue(json, 'value', value.valueElement, false);
  ComposeStringProps(json, 'value', value.valueElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeFilter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetComposeIncludeFilter(jsn)); 
end;

function TFHIRJsonParser.ParseValueSetComposeIncludeFilter(jsn : TJsonObject) : TFhirValueSetComposeIncludeFilter;
begin
  result := TFhirValueSetComposeIncludeFilter.Create;
  try
    ParseValueSetComposeIncludeFilterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeFilterProperties(jsn : TJsonObject; value : TFhirValueSetComposeIncludeFilter);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('property') or jsn.has('_property') then
        value.property_Element := parseCode(jsn.node['property'], jsn.vObj['_property']);
    if jsn.has('op') or jsn.has('_op') then
        value.opElement := parseEnum(jsn.path+'/op', jsn.node['op'], jsn.vObj['_op'], CODES_TFhirFilterOperatorEnum, SYSTEMS_TFhirFilterOperatorEnum);
    if jsn.has('value') or jsn.has('_value') then
        value.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);
end;

procedure TFHIRJsonComposer.ComposeValueSetComposeIncludeFilter(json : TJSONWriter; name : string; value : TFhirValueSetComposeIncludeFilter; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeValue(json, 'property', value.property_Element, false);
  ComposeCodeProps(json, 'property', value.property_Element, false);
  ComposeEnumValue(json, 'op', value.opElement, CODES_TFhirFilterOperatorEnum, false);
  ComposeStringValue(json, 'value', value.valueElement, false);
  ComposeStringProps(json, 'value', value.valueElement, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseValueSetExpansion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetExpansion(jsn)); 
end;

function TFHIRJsonParser.ParseValueSetExpansion(jsn : TJsonObject) : TFhirValueSetExpansion;
begin
  result := TFhirValueSetExpansion.Create;
  try
    ParseValueSetExpansionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetExpansionProperties(jsn : TJsonObject; value : TFhirValueSetExpansion);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('identifier') or jsn.has('_identifier') then
        value.identifierElement := parseUri(jsn.node['identifier'], jsn.vObj['_identifier']);
    if jsn.has('timestamp') or jsn.has('_timestamp') then
        value.timestampElement := parseDateTime(jsn.node['timestamp'], jsn.vObj['_timestamp']);
    if jsn.has('total') or jsn.has('_total') then
        value.totalElement := parseInteger(jsn.node['total'], jsn.vObj['_total']);
    if jsn.has('offset') or jsn.has('_offset') then
        value.offsetElement := parseInteger(jsn.node['offset'], jsn.vObj['_offset']);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], value.parameterList, parseValueSetExpansionParameter);
    if jsn.has('contains') then
      iterateArray(jsn.vArr['contains'], value.containsList, parseValueSetExpansionContains);
end;

procedure TFHIRJsonComposer.ComposeValueSetExpansion(json : TJSONWriter; name : string; value : TFhirValueSetExpansion; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'identifier', value.identifierElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'identifier', value.identifierElement, false);
  ComposeDateTimeValue(json, 'timestamp', value.timestampElement, false);
  ComposeDateTimeProps(json, 'timestamp', value.timestampElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'total', value.totalElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'total', value.totalElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'offset', value.offsetElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'offset', value.offsetElement, false);
  if (SummaryOption in [soFull, soData]) and (value.parameterList.Count > 0) then
  begin
    startArray(json, 'parameter', value.parameterList, false);
    for i := 0 to value.parameterList.Count - 1 do
      ComposeValueSetExpansionParameter(json, '', value.parameterList[i]);
    finishArray(json, value.parameterList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.containsList.Count > 0) then
  begin
    startArray(json, 'contains', value.containsList, false);
    for i := 0 to value.containsList.Count - 1 do
      ComposeValueSetExpansionContains(json, '', value.containsList[i]);
    finishArray(json, value.containsList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseValueSetExpansionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetExpansionParameter(jsn)); 
end;

function TFHIRJsonParser.ParseValueSetExpansionParameter(jsn : TJsonObject) : TFhirValueSetExpansionParameter;
begin
  result := TFhirValueSetExpansionParameter.Create;
  try
    ParseValueSetExpansionParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetExpansionParameterProperties(jsn : TJsonObject; value : TFhirValueSetExpansionParameter);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      value.value := parseCode(jsn.node['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      value.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      value.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      value.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      value.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      value.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      value.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
end;

procedure TFHIRJsonComposer.ComposeValueSetExpansionParameter(json : TJSONWriter; name : string; value : TFhirValueSetExpansionParameter; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeStringValue(json, 'name', value.nameElement, false);
  ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(value.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(value.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(value.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(value.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(value.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(value.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(value.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(value.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(value.value), false);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseValueSetExpansionContains(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetExpansionContains(jsn)); 
end;

function TFHIRJsonParser.ParseValueSetExpansionContains(jsn : TJsonObject) : TFhirValueSetExpansionContains;
begin
  result := TFhirValueSetExpansionContains.Create;
  try
    ParseValueSetExpansionContainsProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetExpansionContainsProperties(jsn : TJsonObject; value : TFhirValueSetExpansionContains);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('system') or jsn.has('_system') then
        value.systemElement := parseUri(jsn.node['system'], jsn.vObj['_system']);
    if jsn.has('abstract') or jsn.has('_abstract') then
        value.abstractElement := parseBoolean(jsn.node['abstract'], jsn.vObj['_abstract']);
    if jsn.has('inactive') or jsn.has('_inactive') then
        value.inactiveElement := parseBoolean(jsn.node['inactive'], jsn.vObj['_inactive']);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('code') or jsn.has('_code') then
        value.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);
    if jsn.has('display') or jsn.has('_display') then
        value.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);
    if jsn.has('designation') then
      iterateArray(jsn.vArr['designation'], value.designationList, parseValueSetComposeIncludeConceptDesignation);
    if jsn.has('contains') then
      iterateArray(jsn.vArr['contains'], value.containsList, parseValueSetExpansionContains);
end;

procedure TFHIRJsonComposer.ComposeValueSetExpansionContains(json : TJSONWriter; name : string; value : TFhirValueSetExpansionContains; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'system', value.systemElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'system', value.systemElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'abstract', value.abstractElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'abstract', value.abstractElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'inactive', value.inactiveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'inactive', value.inactiveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', value.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', value.displayElement, false);
  if (SummaryOption in [soFull, soData]) and (value.designationList.Count > 0) then
  begin
    startArray(json, 'designation', value.designationList, false);
    for i := 0 to value.designationList.Count - 1 do
      ComposeValueSetComposeIncludeConceptDesignation(json, '', value.designationList[i]);
    finishArray(json, value.designationList);
  end;
  if (SummaryOption in [soFull, soData]) and (value.containsList.Count > 0) then
  begin
    startArray(json, 'contains', value.containsList, false);
    for i := 0 to value.containsList.Count - 1 do
      ComposeValueSetExpansionContains(json, '', value.containsList[i]);
    finishArray(json, value.containsList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseValueSet(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSet(jsn)); 
end;

function TFHIRJsonParser.ParseValueSet(jsn : TJsonObject) : TFhirValueSet;
begin
  result := TFhirValueSet.Create;
  try
    ParseValueSetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetProperties(jsn : TJsonObject; value : TFhirValueSet);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('url') or jsn.has('_url') then
        value.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        value.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);
    if jsn.has('name') or jsn.has('_name') then
        value.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);
    if jsn.has('title') or jsn.has('_title') then
        value.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        value.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('publisher') or jsn.has('_publisher') then
        value.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], value.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        value.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], value.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], value.jurisdictionList, parseCodeableConcept);
    if jsn.has('immutable') or jsn.has('_immutable') then
        value.immutableElement := parseBoolean(jsn.node['immutable'], jsn.vObj['_immutable']);
    if jsn.has('purpose') or jsn.has('_purpose') then
        value.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);
    if jsn.has('copyright') or jsn.has('_copyright') then
        value.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);
    if jsn.has('compose') then
        value.compose := ParseValueSetCompose(jsn.vObj['compose']);
    if jsn.has('expansion') then
        value.expansion := ParseValueSetExpansion(jsn.vObj['expansion']);
end;

procedure TFHIRJsonComposer.ComposeValueSet(json : TJSONWriter; name : string; value : TFhirValueSet; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', value.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', value.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', value.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'title', value.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'title', value.titleElement, false);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'experimental', value.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'publisher', value.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.contactList.Count > 0) then
  begin
    startArray(json, 'contact', value.contactList, false);
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(json, '', value.contactList[i]);
    finishArray(json, value.contactList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'description', value.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.useContextList.Count > 0) then
  begin
    startArray(json, 'useContext', value.useContextList, false);
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(json, '', value.useContextList[i]);
    finishArray(json, value.useContextList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.jurisdictionList.Count > 0) then
  begin
    startArray(json, 'jurisdiction', value.jurisdictionList, false);
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', value.jurisdictionList[i]);
    finishArray(json, value.jurisdictionList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'immutable', value.immutableElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'immutable', value.immutableElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'purpose', value.purposeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'copyright', value.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeValueSetCompose(json, 'compose', value.compose);
  if (SummaryOption in [soFull, soData]) then
    ComposeValueSetExpansion(json, 'expansion', value.expansion);
end;

{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
procedure TFHIRJsonParser.ParseVerificationResultPrimarySource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVerificationResultPrimarySource(jsn)); 
end;

function TFHIRJsonParser.ParseVerificationResultPrimarySource(jsn : TJsonObject) : TFhirVerificationResultPrimarySource;
begin
  result := TFhirVerificationResultPrimarySource.Create;
  try
    ParseVerificationResultPrimarySourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVerificationResultPrimarySourceProperties(jsn : TJsonObject; value : TFhirVerificationResultPrimarySource);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('who') then
        value.who := ParseReference(jsn.vObj['who']);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], value.type_List, parseCodeableConcept);
    if jsn.has('communicationMethod') then
      iterateArray(jsn.vArr['communicationMethod'], value.communicationMethodList, parseCodeableConcept);
    if jsn.has('validationStatus') then
        value.validationStatus := ParseCodeableConcept(jsn.vObj['validationStatus']);
    if jsn.has('validationDate') or jsn.has('_validationDate') then
        value.validationDateElement := parseDateTime(jsn.node['validationDate'], jsn.vObj['_validationDate']);
    if jsn.has('canPushUpdates') then
        value.canPushUpdates := ParseCodeableConcept(jsn.vObj['canPushUpdates']);
    if jsn.has('pushTypeAvailable') then
      iterateArray(jsn.vArr['pushTypeAvailable'], value.pushTypeAvailableList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeVerificationResultPrimarySource(json : TJSONWriter; name : string; value : TFhirVerificationResultPrimarySource; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'who', value.who);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.type_List.Count > 0) then
  begin
    startArray(json, 'type', value.type_List, false);
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', value.type_List[i]);
    finishArray(json, value.type_List);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.communicationMethodList.Count > 0) then
  begin
    startArray(json, 'communicationMethod', value.communicationMethodList, false);
    for i := 0 to value.communicationMethodList.Count - 1 do
      ComposeCodeableConcept(json, '', value.communicationMethodList[i]);
    finishArray(json, value.communicationMethodList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'validationStatus', value.validationStatus);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'validationDate', value.validationDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'validationDate', value.validationDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'canPushUpdates', value.canPushUpdates);
  if (SummaryOption in [soFull, soData]) and (value.pushTypeAvailableList.Count > 0) then
  begin
    startArray(json, 'pushTypeAvailable', value.pushTypeAvailableList, false);
    for i := 0 to value.pushTypeAvailableList.Count - 1 do
      ComposeCodeableConcept(json, '', value.pushTypeAvailableList[i]);
    finishArray(json, value.pushTypeAvailableList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseVerificationResultAttestation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVerificationResultAttestation(jsn)); 
end;

function TFHIRJsonParser.ParseVerificationResultAttestation(jsn : TJsonObject) : TFhirVerificationResultAttestation;
begin
  result := TFhirVerificationResultAttestation.Create;
  try
    ParseVerificationResultAttestationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVerificationResultAttestationProperties(jsn : TJsonObject; value : TFhirVerificationResultAttestation);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('who') then
        value.who := ParseReference(jsn.vObj['who']);
    if jsn.has('onBehalfOf') then
        value.onBehalfOf := ParseReference(jsn.vObj['onBehalfOf']);
    if jsn.has('communicationMethod') then
        value.communicationMethod := ParseCodeableConcept(jsn.vObj['communicationMethod']);
    if jsn.has('date') or jsn.has('_date') then
        value.dateElement := parseDate(jsn.node['date'], jsn.vObj['_date']);
    if jsn.has('sourceIdentityCertificate') or jsn.has('_sourceIdentityCertificate') then
        value.sourceIdentityCertificateElement := parseString(jsn.node['sourceIdentityCertificate'], jsn.vObj['_sourceIdentityCertificate']);
    if jsn.has('proxyIdentityCertificate') or jsn.has('_proxyIdentityCertificate') then
        value.proxyIdentityCertificateElement := parseString(jsn.node['proxyIdentityCertificate'], jsn.vObj['_proxyIdentityCertificate']);
    if jsn.has('proxySignature') then
        value.proxySignature := ParseSignature(jsn.vObj['proxySignature']);
    if jsn.has('sourceSignature') then
        value.sourceSignature := ParseSignature(jsn.vObj['sourceSignature']);
end;

procedure TFHIRJsonComposer.ComposeVerificationResultAttestation(json : TJSONWriter; name : string; value : TFhirVerificationResultAttestation; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'who', value.who);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(json, 'onBehalfOf', value.onBehalfOf);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'communicationMethod', value.communicationMethod);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'date', value.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'sourceIdentityCertificate', value.sourceIdentityCertificateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'sourceIdentityCertificate', value.sourceIdentityCertificateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'proxyIdentityCertificate', value.proxyIdentityCertificateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'proxyIdentityCertificate', value.proxyIdentityCertificateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeSignature(json, 'proxySignature', value.proxySignature);
  if (SummaryOption in [soFull, soData]) then
    ComposeSignature(json, 'sourceSignature', value.sourceSignature);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseVerificationResultValidator(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVerificationResultValidator(jsn)); 
end;

function TFHIRJsonParser.ParseVerificationResultValidator(jsn : TJsonObject) : TFhirVerificationResultValidator;
begin
  result := TFhirVerificationResultValidator.Create;
  try
    ParseVerificationResultValidatorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVerificationResultValidatorProperties(jsn : TJsonObject; value : TFhirVerificationResultValidator);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('organization') then
        value.organization := ParseReference(jsn.vObj['organization']);
    if jsn.has('identityCertificate') or jsn.has('_identityCertificate') then
        value.identityCertificateElement := parseString(jsn.node['identityCertificate'], jsn.vObj['_identityCertificate']);
    if jsn.has('attestationSignature') then
        value.attestationSignature := ParseSignature(jsn.vObj['attestationSignature']);
end;

procedure TFHIRJsonComposer.ComposeVerificationResultValidator(json : TJSONWriter; name : string; value : TFhirVerificationResultValidator; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeReference(json, 'organization', value.organization);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'identityCertificate', value.identityCertificateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'identityCertificate', value.identityCertificateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeSignature(json, 'attestationSignature', value.attestationSignature);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseVerificationResult(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVerificationResult(jsn)); 
end;

function TFHIRJsonParser.ParseVerificationResult(jsn : TJsonObject) : TFhirVerificationResult;
begin
  result := TFhirVerificationResult.Create;
  try
    ParseVerificationResultProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVerificationResultProperties(jsn : TJsonObject; value : TFhirVerificationResult);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], value.targetList, parseReference);
      if jsn.has('targetLocation') or jsn.has('_targetLocation') then
      iteratePrimitiveArray(jsn.vArr['targetLocation'], jsn.vArr['_targetLocation'], value.targetLocationList, parseString);
    if jsn.has('need') then
        value.need := ParseCodeableConcept(jsn.vObj['need']);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirStatusEnum, SYSTEMS_TFhirStatusEnum);
    if jsn.has('statusDate') or jsn.has('_statusDate') then
        value.statusDateElement := parseDateTime(jsn.node['statusDate'], jsn.vObj['_statusDate']);
    if jsn.has('validationType') then
        value.validationType := ParseCodeableConcept(jsn.vObj['validationType']);
    if jsn.has('validationProcess') then
      iterateArray(jsn.vArr['validationProcess'], value.validationProcessList, parseCodeableConcept);
    if jsn.has('frequency') then
        value.frequency := ParseTiming(jsn.vObj['frequency']);
    if jsn.has('lastPerformed') or jsn.has('_lastPerformed') then
        value.lastPerformedElement := parseDateTime(jsn.node['lastPerformed'], jsn.vObj['_lastPerformed']);
    if jsn.has('nextScheduled') or jsn.has('_nextScheduled') then
        value.nextScheduledElement := parseDate(jsn.node['nextScheduled'], jsn.vObj['_nextScheduled']);
    if jsn.has('failureAction') then
        value.failureAction := ParseCodeableConcept(jsn.vObj['failureAction']);
    if jsn.has('primarySource') then
      iterateArray(jsn.vArr['primarySource'], value.primarySourceList, parseVerificationResultPrimarySource);
    if jsn.has('attestation') then
        value.attestation := ParseVerificationResultAttestation(jsn.vObj['attestation']);
    if jsn.has('validator') then
      iterateArray(jsn.vArr['validator'], value.validatorList, parseVerificationResultValidator);
end;

procedure TFHIRJsonComposer.ComposeVerificationResult(json : TJSONWriter; name : string; value : TFhirVerificationResult; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.targetList.Count > 0) then
  begin
    startArray(json, 'target', value.targetList, false);
    for i := 0 to value.targetList.Count - 1 do
      ComposeReference(json, '', value.targetList[i]);
    finishArray(json, value.targetList);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (value.targetLocationList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to value.targetLocationList.Count - 1 do
    begin
      ext := ext or ((value.targetLocationList[i].id <> '') or (value.targetLocationList[i].hasExtensionList) {no-comments or (value.targetLocationList[i].hasComments)});
      val := val or (value.targetLocationList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      startArray(json, 'targetLocation', value.targetLocationList, true);
      for i := 0 to value.targetLocationList.Count - 1 do
        ComposeStringValue(json, '', value.targetLocationList[i], true);
      finishArray(json, value.targetLocationList);
    end;
    if ext then
    begin
      startArray(json, '_targetLocation', value.targetLocationList, false);
      for i := 0 to value.targetLocationList.Count - 1 do
        ComposeStringProps(json, '', value.targetLocationList[i], true);
      finishArray(json, value.targetLocationList);
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'need', value.need);
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'statusDate', value.statusDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'statusDate', value.statusDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'validationType', value.validationType);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.validationProcessList.Count > 0) then
  begin
    startArray(json, 'validationProcess', value.validationProcessList, false);
    for i := 0 to value.validationProcessList.Count - 1 do
      ComposeCodeableConcept(json, '', value.validationProcessList[i]);
    finishArray(json, value.validationProcessList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeTiming(json, 'frequency', value.frequency);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'lastPerformed', value.lastPerformedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'lastPerformed', value.lastPerformedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'nextScheduled', value.nextScheduledElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'nextScheduled', value.nextScheduledElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'failureAction', value.failureAction);
  if (SummaryOption in [soFull, soData]) and (value.primarySourceList.Count > 0) then
  begin
    startArray(json, 'primarySource', value.primarySourceList, false);
    for i := 0 to value.primarySourceList.Count - 1 do
      ComposeVerificationResultPrimarySource(json, '', value.primarySourceList[i]);
    finishArray(json, value.primarySourceList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeVerificationResultAttestation(json, 'attestation', value.attestation);
  if (SummaryOption in [soFull, soData]) and (value.validatorList.Count > 0) then
  begin
    startArray(json, 'validator', value.validatorList, false);
    for i := 0 to value.validatorList.Count - 1 do
      ComposeVerificationResultValidator(json, '', value.validatorList[i]);
    finishArray(json, value.validatorList);
  end;
end;

{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
procedure TFHIRJsonParser.ParseVisionPrescriptionLensSpecification(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVisionPrescriptionLensSpecification(jsn)); 
end;

function TFHIRJsonParser.ParseVisionPrescriptionLensSpecification(jsn : TJsonObject) : TFhirVisionPrescriptionLensSpecification;
begin
  result := TFhirVisionPrescriptionLensSpecification.Create;
  try
    ParseVisionPrescriptionLensSpecificationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVisionPrescriptionLensSpecificationProperties(jsn : TJsonObject; value : TFhirVisionPrescriptionLensSpecification);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('product') then
        value.product := ParseCodeableConcept(jsn.vObj['product']);
    if jsn.has('eye') or jsn.has('_eye') then
        value.eyeElement := parseEnum(jsn.path+'/eye', jsn.node['eye'], jsn.vObj['_eye'], CODES_TFhirVisionEyesEnum, SYSTEMS_TFhirVisionEyesEnum);
    if jsn.has('sphere') or jsn.has('_sphere') then
        value.sphereElement := parseDecimal(jsn.node['sphere'], jsn.vObj['_sphere']);
    if jsn.has('cylinder') or jsn.has('_cylinder') then
        value.cylinderElement := parseDecimal(jsn.node['cylinder'], jsn.vObj['_cylinder']);
    if jsn.has('axis') or jsn.has('_axis') then
        value.axisElement := parseInteger(jsn.node['axis'], jsn.vObj['_axis']);
    if jsn.has('prism') then
      iterateArray(jsn.vArr['prism'], value.prismList, parseVisionPrescriptionLensSpecificationPrism);
    if jsn.has('add') or jsn.has('_add') then
        value.addElement := parseDecimal(jsn.node['add'], jsn.vObj['_add']);
    if jsn.has('power') or jsn.has('_power') then
        value.powerElement := parseDecimal(jsn.node['power'], jsn.vObj['_power']);
    if jsn.has('backCurve') or jsn.has('_backCurve') then
        value.backCurveElement := parseDecimal(jsn.node['backCurve'], jsn.vObj['_backCurve']);
    if jsn.has('diameter') or jsn.has('_diameter') then
        value.diameterElement := parseDecimal(jsn.node['diameter'], jsn.vObj['_diameter']);
    if jsn.has('duration') then
        value.duration := ParseQuantity(jsn.vObj['duration']);
    if jsn.has('color') or jsn.has('_color') then
        value.colorElement := parseString(jsn.node['color'], jsn.vObj['_color']);
    if jsn.has('brand') or jsn.has('_brand') then
        value.brandElement := parseString(jsn.node['brand'], jsn.vObj['_brand']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], value.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeVisionPrescriptionLensSpecification(json : TJSONWriter; name : string; value : TFhirVisionPrescriptionLensSpecification; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeCodeableConcept(json, 'product', value.product);
  ComposeEnumValue(json, 'eye', value.eyeElement, CODES_TFhirVisionEyesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'sphere', value.sphereElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'sphere', value.sphereElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'cylinder', value.cylinderElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'cylinder', value.cylinderElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'axis', value.axisElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'axis', value.axisElement, false);
  if (SummaryOption in [soFull, soData]) and (value.prismList.Count > 0) then
  begin
    startArray(json, 'prism', value.prismList, false);
    for i := 0 to value.prismList.Count - 1 do
      ComposeVisionPrescriptionLensSpecificationPrism(json, '', value.prismList[i]);
    finishArray(json, value.prismList);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'add', value.addElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'add', value.addElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'power', value.powerElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'power', value.powerElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'backCurve', value.backCurveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'backCurve', value.backCurveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'diameter', value.diameterElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'diameter', value.diameterElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'duration', value.duration);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'color', value.colorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'color', value.colorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'brand', value.brandElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'brand', value.brandElement, false);
  if (SummaryOption in [soFull, soData]) and (value.noteList.Count > 0) then
  begin
    startArray(json, 'note', value.noteList, false);
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(json, '', value.noteList[i]);
    finishArray(json, value.noteList);
  end;
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseVisionPrescriptionLensSpecificationPrism(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVisionPrescriptionLensSpecificationPrism(jsn)); 
end;

function TFHIRJsonParser.ParseVisionPrescriptionLensSpecificationPrism(jsn : TJsonObject) : TFhirVisionPrescriptionLensSpecificationPrism;
begin
  result := TFhirVisionPrescriptionLensSpecificationPrism.Create;
  try
    ParseVisionPrescriptionLensSpecificationPrismProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVisionPrescriptionLensSpecificationPrismProperties(jsn : TJsonObject; value : TFhirVisionPrescriptionLensSpecificationPrism);
begin
    ParseBackboneElementProperties(jsn, value);
    if jsn.has('amount') or jsn.has('_amount') then
        value.amountElement := parseDecimal(jsn.node['amount'], jsn.vObj['_amount']);
    if jsn.has('base') or jsn.has('_base') then
        value.baseElement := parseEnum(jsn.path+'/base', jsn.node['base'], jsn.vObj['_base'], CODES_TFhirVisionBaseEnum, SYSTEMS_TFhirVisionBaseEnum);
end;

procedure TFHIRJsonComposer.ComposeVisionPrescriptionLensSpecificationPrism(json : TJSONWriter; name : string; value : TFhirVisionPrescriptionLensSpecificationPrism; noObj : boolean = false);
begin
  if (value = nil) then
    exit;
  startElement(json, name, value, noObj);
  ComposeBackboneElementProperties(json, value);
  ComposeDecimalValue(json, 'amount', value.amountElement, false);
  ComposeDecimalProps(json, 'amount', value.amountElement, false);
  ComposeEnumValue(json, 'base', value.baseElement, CODES_TFhirVisionBaseEnum, false);
  finishElement(json, name, value, noObj);
end;

procedure TFHIRJsonParser.ParseVisionPrescription(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVisionPrescription(jsn)); 
end;

function TFHIRJsonParser.ParseVisionPrescription(jsn : TJsonObject) : TFhirVisionPrescription;
begin
  result := TFhirVisionPrescription.Create;
  try
    ParseVisionPrescriptionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVisionPrescriptionProperties(jsn : TJsonObject; value : TFhirVisionPrescription);
begin
    ParseDomainResourceProperties(jsn, value);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], value.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status') then
        value.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum);
    if jsn.has('created') or jsn.has('_created') then
        value.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);
    if jsn.has('patient') then
        value.patient := ParseReference(jsn.vObj['patient']);
    if jsn.has('encounter') then
        value.encounter := ParseReference(jsn.vObj['encounter']);
    if jsn.has('dateWritten') or jsn.has('_dateWritten') then
        value.dateWrittenElement := parseDateTime(jsn.node['dateWritten'], jsn.vObj['_dateWritten']);
    if jsn.has('prescriber') then
        value.prescriber := ParseReference(jsn.vObj['prescriber']);
    if jsn.has('lensSpecification') then
      iterateArray(jsn.vArr['lensSpecification'], value.lensSpecificationList, parseVisionPrescriptionLensSpecification);
end;

procedure TFHIRJsonComposer.ComposeVisionPrescription(json : TJSONWriter; name : string; value : TFhirVisionPrescription; noObj : boolean = false);
var
  i : integer;
begin
  if (value = nil) then
    exit;
  ComposeDomainResourceProperties(json, value);
  if (SummaryOption in [soFull, soData]) and (value.identifierList.Count > 0) then
  begin
    startArray(json, 'identifier', value.identifierList, false);
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(json, '', value.identifierList[i]);
    finishArray(json, value.identifierList);
  end;
  ComposeEnumValue(json, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum, false);
  ComposeDateTimeValue(json, 'created', value.createdElement, false);
  ComposeDateTimeProps(json, 'created', value.createdElement, false);
  ComposeReference(json, 'patient', value.patient);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(json, 'encounter', value.encounter);
  ComposeDateTimeValue(json, 'dateWritten', value.dateWrittenElement, false);
  ComposeDateTimeProps(json, 'dateWritten', value.dateWrittenElement, false);
  ComposeReference(json, 'prescriber', value.prescriber);
  if (value.lensSpecificationList.Count > 0) then
  begin
    startArray(json, 'lensSpecification', value.lensSpecificationList, false);
    for i := 0 to value.lensSpecificationList.Count - 1 do
      ComposeVisionPrescriptionLensSpecification(json, '', value.lensSpecificationList[i]);
    finishArray(json, value.lensSpecificationList);
  end;
end;

{$ENDIF FHIR_VISIONPRESCRIPTION}


function TFHIRJsonParser.ParseResource(jsn : TJsonObject) : TFhirResource;
var
  s : String;
begin
  s := jsn['resourceType'];
  if (s = '') then
    raise jsn.locationStart.exception('The JSON Object has no resourceType property')
{$IFDEF FHIR_ACCOUNT}
  else if s = 'Account' Then
    result := ParseAccount(jsn)
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  else if s = 'ActivityDefinition' Then
    result := ParseActivityDefinition(jsn)
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
  else if s = 'AdministrableProductDefinition' Then
    result := ParseAdministrableProductDefinition(jsn)
{$ENDIF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  else if s = 'AdverseEvent' Then
    result := ParseAdverseEvent(jsn)
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  else if s = 'AllergyIntolerance' Then
    result := ParseAllergyIntolerance(jsn)
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  else if s = 'Appointment' Then
    result := ParseAppointment(jsn)
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  else if s = 'AppointmentResponse' Then
    result := ParseAppointmentResponse(jsn)
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  else if s = 'AuditEvent' Then
    result := ParseAuditEvent(jsn)
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  else if s = 'Basic' Then
    result := ParseBasic(jsn)
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  else if s = 'Binary' Then
    result := ParseBinary(jsn)
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
  else if s = 'BiologicallyDerivedProduct' Then
    result := ParseBiologicallyDerivedProduct(jsn)
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
  else if s = 'BodyStructure' Then
    result := ParseBodyStructure(jsn)
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
  else if s = 'Bundle' Then
    result := ParseBundle(jsn)
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  else if s = 'CapabilityStatement' Then
    result := ParseCapabilityStatement(jsn)
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  else if s = 'CarePlan' Then
    result := ParseCarePlan(jsn)
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  else if s = 'CareTeam' Then
    result := ParseCareTeam(jsn)
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
  else if s = 'CatalogEntry' Then
    result := ParseCatalogEntry(jsn)
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
  else if s = 'ChargeItem' Then
    result := ParseChargeItem(jsn)
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
  else if s = 'ChargeItemDefinition' Then
    result := ParseChargeItemDefinition(jsn)
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CITATION}
  else if s = 'Citation' Then
    result := ParseCitation(jsn)
{$ENDIF FHIR_CITATION}
{$IFDEF FHIR_CLAIM}
  else if s = 'Claim' Then
    result := ParseClaim(jsn)
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  else if s = 'ClaimResponse' Then
    result := ParseClaimResponse(jsn)
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  else if s = 'ClinicalImpression' Then
    result := ParseClinicalImpression(jsn)
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CLINICALUSEDEFINITION}
  else if s = 'ClinicalUseDefinition' Then
    result := ParseClinicalUseDefinition(jsn)
{$ENDIF FHIR_CLINICALUSEDEFINITION}
{$IFDEF FHIR_CODESYSTEM}
  else if s = 'CodeSystem' Then
    result := ParseCodeSystem(jsn)
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  else if s = 'Communication' Then
    result := ParseCommunication(jsn)
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  else if s = 'CommunicationRequest' Then
    result := ParseCommunicationRequest(jsn)
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  else if s = 'CompartmentDefinition' Then
    result := ParseCompartmentDefinition(jsn)
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  else if s = 'Composition' Then
    result := ParseComposition(jsn)
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  else if s = 'ConceptMap' Then
    result := ParseConceptMap(jsn)
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  else if s = 'Condition' Then
    result := ParseCondition(jsn)
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  else if s = 'Consent' Then
    result := ParseConsent(jsn)
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  else if s = 'Contract' Then
    result := ParseContract(jsn)
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  else if s = 'Coverage' Then
    result := ParseCoverage(jsn)
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
  else if s = 'CoverageEligibilityRequest' Then
    result := ParseCoverageEligibilityRequest(jsn)
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
  else if s = 'CoverageEligibilityResponse' Then
    result := ParseCoverageEligibilityResponse(jsn)
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
  else if s = 'DetectedIssue' Then
    result := ParseDetectedIssue(jsn)
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  else if s = 'Device' Then
    result := ParseDevice(jsn)
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
  else if s = 'DeviceDefinition' Then
    result := ParseDeviceDefinition(jsn)
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
  else if s = 'DeviceMetric' Then
    result := ParseDeviceMetric(jsn)
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  else if s = 'DeviceRequest' Then
    result := ParseDeviceRequest(jsn)
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  else if s = 'DeviceUseStatement' Then
    result := ParseDeviceUseStatement(jsn)
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  else if s = 'DiagnosticReport' Then
    result := ParseDiagnosticReport(jsn)
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  else if s = 'DocumentManifest' Then
    result := ParseDocumentManifest(jsn)
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  else if s = 'DocumentReference' Then
    result := ParseDocumentReference(jsn)
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ENCOUNTER}
  else if s = 'Encounter' Then
    result := ParseEncounter(jsn)
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  else if s = 'Endpoint' Then
    result := ParseEndpoint(jsn)
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  else if s = 'EnrollmentRequest' Then
    result := ParseEnrollmentRequest(jsn)
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  else if s = 'EnrollmentResponse' Then
    result := ParseEnrollmentResponse(jsn)
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
  else if s = 'EpisodeOfCare' Then
    result := ParseEpisodeOfCare(jsn)
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
  else if s = 'EventDefinition' Then
    result := ParseEventDefinition(jsn)
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
  else if s = 'Evidence' Then
    result := ParseEvidence(jsn)
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEREPORT}
  else if s = 'EvidenceReport' Then
    result := ParseEvidenceReport(jsn)
{$ENDIF FHIR_EVIDENCEREPORT}
{$IFDEF FHIR_EVIDENCEVARIABLE}
  else if s = 'EvidenceVariable' Then
    result := ParseEvidenceVariable(jsn)
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
  else if s = 'ExampleScenario' Then
    result := ParseExampleScenario(jsn)
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  else if s = 'ExplanationOfBenefit' Then
    result := ParseExplanationOfBenefit(jsn)
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  else if s = 'FamilyMemberHistory' Then
    result := ParseFamilyMemberHistory(jsn)
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  else if s = 'Flag' Then
    result := ParseFlag(jsn)
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  else if s = 'Goal' Then
    result := ParseGoal(jsn)
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  else if s = 'GraphDefinition' Then
    result := ParseGraphDefinition(jsn)
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  else if s = 'Group' Then
    result := ParseGroup(jsn)
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  else if s = 'GuidanceResponse' Then
    result := ParseGuidanceResponse(jsn)
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  else if s = 'HealthcareService' Then
    result := ParseHealthcareService(jsn)
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
  else if s = 'ImagingStudy' Then
    result := ParseImagingStudy(jsn)
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  else if s = 'Immunization' Then
    result := ParseImmunization(jsn)
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
  else if s = 'ImmunizationEvaluation' Then
    result := ParseImmunizationEvaluation(jsn)
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  else if s = 'ImmunizationRecommendation' Then
    result := ParseImmunizationRecommendation(jsn)
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  else if s = 'ImplementationGuide' Then
    result := ParseImplementationGuide(jsn)
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INGREDIENT}
  else if s = 'Ingredient' Then
    result := ParseIngredient(jsn)
{$ENDIF FHIR_INGREDIENT}
{$IFDEF FHIR_INSURANCEPLAN}
  else if s = 'InsurancePlan' Then
    result := ParseInsurancePlan(jsn)
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
  else if s = 'Invoice' Then
    result := ParseInvoice(jsn)
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
  else if s = 'Library' Then
    result := ParseLibrary(jsn)
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  else if s = 'Linkage' Then
    result := ParseLinkage(jsn)
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  else if s = 'List' Then
    result := ParseList(jsn)
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  else if s = 'Location' Then
    result := ParseLocation(jsn)
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MANUFACTUREDITEMDEFINITION}
  else if s = 'ManufacturedItemDefinition' Then
    result := ParseManufacturedItemDefinition(jsn)
{$ENDIF FHIR_MANUFACTUREDITEMDEFINITION}
{$IFDEF FHIR_MEASURE}
  else if s = 'Measure' Then
    result := ParseMeasure(jsn)
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  else if s = 'MeasureReport' Then
    result := ParseMeasureReport(jsn)
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  else if s = 'Media' Then
    result := ParseMedia(jsn)
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  else if s = 'Medication' Then
    result := ParseMedication(jsn)
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  else if s = 'MedicationAdministration' Then
    result := ParseMedicationAdministration(jsn)
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  else if s = 'MedicationDispense' Then
    result := ParseMedicationDispense(jsn)
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
  else if s = 'MedicationKnowledge' Then
    result := ParseMedicationKnowledge(jsn)
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  else if s = 'MedicationRequest' Then
    result := ParseMedicationRequest(jsn)
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  else if s = 'MedicationStatement' Then
    result := ParseMedicationStatement(jsn)
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCTDEFINITION}
  else if s = 'MedicinalProductDefinition' Then
    result := ParseMedicinalProductDefinition(jsn)
{$ENDIF FHIR_MEDICINALPRODUCTDEFINITION}
{$IFDEF FHIR_MESSAGEDEFINITION}
  else if s = 'MessageDefinition' Then
    result := ParseMessageDefinition(jsn)
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  else if s = 'MessageHeader' Then
    result := ParseMessageHeader(jsn)
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
  else if s = 'MolecularSequence' Then
    result := ParseMolecularSequence(jsn)
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
  else if s = 'NamingSystem' Then
    result := ParseNamingSystem(jsn)
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  else if s = 'NutritionOrder' Then
    result := ParseNutritionOrder(jsn)
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_NUTRITIONPRODUCT}
  else if s = 'NutritionProduct' Then
    result := ParseNutritionProduct(jsn)
{$ENDIF FHIR_NUTRITIONPRODUCT}
{$IFDEF FHIR_OBSERVATION}
  else if s = 'Observation' Then
    result := ParseObservation(jsn)
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
  else if s = 'ObservationDefinition' Then
    result := ParseObservationDefinition(jsn)
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
  else if s = 'OperationDefinition' Then
    result := ParseOperationDefinition(jsn)
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  else if s = 'OperationOutcome' Then
    result := ParseOperationOutcome(jsn)
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  else if s = 'Organization' Then
    result := ParseOrganization(jsn)
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
  else if s = 'OrganizationAffiliation' Then
    result := ParseOrganizationAffiliation(jsn)
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PACKAGEDPRODUCTDEFINITION}
  else if s = 'PackagedProductDefinition' Then
    result := ParsePackagedProductDefinition(jsn)
{$ENDIF FHIR_PACKAGEDPRODUCTDEFINITION}
{$IFDEF FHIR_PARAMETERS}
  else if s = 'Parameters' Then
    result := ParseParameters(jsn)
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_PATIENT}
  else if s = 'Patient' Then
    result := ParsePatient(jsn)
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  else if s = 'PaymentNotice' Then
    result := ParsePaymentNotice(jsn)
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  else if s = 'PaymentReconciliation' Then
    result := ParsePaymentReconciliation(jsn)
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  else if s = 'Person' Then
    result := ParsePerson(jsn)
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  else if s = 'PlanDefinition' Then
    result := ParsePlanDefinition(jsn)
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  else if s = 'Practitioner' Then
    result := ParsePractitioner(jsn)
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  else if s = 'PractitionerRole' Then
    result := ParsePractitionerRole(jsn)
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  else if s = 'Procedure' Then
    result := ParseProcedure(jsn)
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
  else if s = 'Provenance' Then
    result := ParseProvenance(jsn)
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  else if s = 'Questionnaire' Then
    result := ParseQuestionnaire(jsn)
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  else if s = 'QuestionnaireResponse' Then
    result := ParseQuestionnaireResponse(jsn)
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REGULATEDAUTHORIZATION}
  else if s = 'RegulatedAuthorization' Then
    result := ParseRegulatedAuthorization(jsn)
{$ENDIF FHIR_REGULATEDAUTHORIZATION}
{$IFDEF FHIR_RELATEDPERSON}
  else if s = 'RelatedPerson' Then
    result := ParseRelatedPerson(jsn)
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  else if s = 'RequestGroup' Then
    result := ParseRequestGroup(jsn)
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHDEFINITION}
  else if s = 'ResearchDefinition' Then
    result := ParseResearchDefinition(jsn)
{$ENDIF FHIR_RESEARCHDEFINITION}
{$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
  else if s = 'ResearchElementDefinition' Then
    result := ParseResearchElementDefinition(jsn)
{$ENDIF FHIR_RESEARCHELEMENTDEFINITION}
{$IFDEF FHIR_RESEARCHSTUDY}
  else if s = 'ResearchStudy' Then
    result := ParseResearchStudy(jsn)
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  else if s = 'ResearchSubject' Then
    result := ParseResearchSubject(jsn)
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  else if s = 'RiskAssessment' Then
    result := ParseRiskAssessment(jsn)
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
  else if s = 'Schedule' Then
    result := ParseSchedule(jsn)
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  else if s = 'SearchParameter' Then
    result := ParseSearchParameter(jsn)
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
  else if s = 'ServiceRequest' Then
    result := ParseServiceRequest(jsn)
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
  else if s = 'Slot' Then
    result := ParseSlot(jsn)
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  else if s = 'Specimen' Then
    result := ParseSpecimen(jsn)
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
  else if s = 'SpecimenDefinition' Then
    result := ParseSpecimenDefinition(jsn)
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  else if s = 'StructureDefinition' Then
    result := ParseStructureDefinition(jsn)
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  else if s = 'StructureMap' Then
    result := ParseStructureMap(jsn)
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  else if s = 'Subscription' Then
    result := ParseSubscription(jsn)
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSCRIPTIONSTATUS}
  else if s = 'SubscriptionStatus' Then
    result := ParseSubscriptionStatus(jsn)
{$ENDIF FHIR_SUBSCRIPTIONSTATUS}
{$IFDEF FHIR_SUBSCRIPTIONTOPIC}
  else if s = 'SubscriptionTopic' Then
    result := ParseSubscriptionTopic(jsn)
{$ENDIF FHIR_SUBSCRIPTIONTOPIC}
{$IFDEF FHIR_SUBSTANCE}
  else if s = 'Substance' Then
    result := ParseSubstance(jsn)
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEDEFINITION}
  else if s = 'SubstanceDefinition' Then
    result := ParseSubstanceDefinition(jsn)
{$ENDIF FHIR_SUBSTANCEDEFINITION}
{$IFDEF FHIR_SUPPLYDELIVERY}
  else if s = 'SupplyDelivery' Then
    result := ParseSupplyDelivery(jsn)
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  else if s = 'SupplyRequest' Then
    result := ParseSupplyRequest(jsn)
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  else if s = 'Task' Then
    result := ParseTask(jsn)
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
  else if s = 'TerminologyCapabilities' Then
    result := ParseTerminologyCapabilities(jsn)
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
  else if s = 'TestReport' Then
    result := ParseTestReport(jsn)
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  else if s = 'TestScript' Then
    result := ParseTestScript(jsn)
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
  else if s = 'ValueSet' Then
    result := ParseValueSet(jsn)
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
  else if s = 'VerificationResult' Then
    result := ParseVerificationResult(jsn)
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  else if s = 'VisionPrescription' Then
    result := ParseVisionPrescription(jsn)
{$ENDIF FHIR_VISIONPRESCRIPTION}

  else
    raise jsn.locationStart.exception('The element '+s+' is not a valid resource name');
end;

function TFHIRJsonParser.ParseFragment(jsn : TJsonObject; type_ : String) : TFHIRObject;
begin
  if (type_ = '') then
    raise EJsonException.Create('no type provided')
  else if (type_ = 'CodeableReference') or (type_ = 'TFhirCodeableReference')  then
    result := parseCodeableReference(jsn)
  else if (type_ = 'RatioRange') or (type_ = 'TFhirRatioRange')  then
    result := parseRatioRange(jsn)
  else if (type_ = 'Address') or (type_ = 'TFhirAddress')  then
    result := parseAddress(jsn)
  else if (type_ = 'Age') or (type_ = 'TFhirAge')  then
    result := parseAge(jsn)
  else if (type_ = 'Annotation') or (type_ = 'TFhirAnnotation')  then
    result := parseAnnotation(jsn)
  else if (type_ = 'Attachment') or (type_ = 'TFhirAttachment')  then
    result := parseAttachment(jsn)
  else if (type_ = 'CodeableConcept') or (type_ = 'TFhirCodeableConcept')  then
    result := parseCodeableConcept(jsn)
  else if (type_ = 'Coding') or (type_ = 'TFhirCoding')  then
    result := parseCoding(jsn)
  else if (type_ = 'ContactDetail') or (type_ = 'TFhirContactDetail')  then
    result := parseContactDetail(jsn)
  else if (type_ = 'ContactPoint') or (type_ = 'TFhirContactPoint')  then
    result := parseContactPoint(jsn)
  else if (type_ = 'Contributor') or (type_ = 'TFhirContributor')  then
    result := parseContributor(jsn)
  else if (type_ = 'Count') or (type_ = 'TFhirCount')  then
    result := parseCount(jsn)
  else if (type_ = 'DataRequirement') or (type_ = 'TFhirDataRequirement')  then
    result := parseDataRequirement(jsn)
  else if (type_ = 'Distance') or (type_ = 'TFhirDistance')  then
    result := parseDistance(jsn)
  else if (type_ = 'Dosage') or (type_ = 'TFhirDosage')  then
    result := parseDosage(jsn)
  else if (type_ = 'Duration') or (type_ = 'TFhirDuration')  then
    result := parseDuration(jsn)
  else if (type_ = 'ElementDefinition') or (type_ = 'TFhirElementDefinition')  then
    result := parseElementDefinition(jsn)
  else if (type_ = 'Expression') or (type_ = 'TFhirExpression')  then
    result := parseExpression(jsn)
  else if (type_ = 'Extension') or (type_ = 'TFhirExtension')  then
    result := parseExtension(jsn)
  else if (type_ = 'HumanName') or (type_ = 'TFhirHumanName')  then
    result := parseHumanName(jsn)
  else if (type_ = 'Identifier') or (type_ = 'TFhirIdentifier')  then
    result := parseIdentifier(jsn)
  else if (type_ = 'MarketingStatus') or (type_ = 'TFhirMarketingStatus')  then
    result := parseMarketingStatus(jsn)
  else if (type_ = 'Meta') or (type_ = 'TFhirMeta')  then
    result := parseMeta(jsn)
  else if (type_ = 'Money') or (type_ = 'TFhirMoney')  then
    result := parseMoney(jsn)
  else if (type_ = 'Narrative') or (type_ = 'TFhirNarrative')  then
    result := parseNarrative(jsn)
  else if (type_ = 'ParameterDefinition') or (type_ = 'TFhirParameterDefinition')  then
    result := parseParameterDefinition(jsn)
  else if (type_ = 'Period') or (type_ = 'TFhirPeriod')  then
    result := parsePeriod(jsn)
  else if (type_ = 'Population') or (type_ = 'TFhirPopulation')  then
    result := parsePopulation(jsn)
  else if (type_ = 'ProdCharacteristic') or (type_ = 'TFhirProdCharacteristic')  then
    result := parseProdCharacteristic(jsn)
  else if (type_ = 'ProductShelfLife') or (type_ = 'TFhirProductShelfLife')  then
    result := parseProductShelfLife(jsn)
  else if (type_ = 'Quantity') or (type_ = 'TFhirQuantity')  then
    result := parseQuantity(jsn)
  else if (type_ = 'Range') or (type_ = 'TFhirRange')  then
    result := parseRange(jsn)
  else if (type_ = 'Ratio') or (type_ = 'TFhirRatio')  then
    result := parseRatio(jsn)
  else if (type_ = 'Reference') or (type_ = 'TFhirReference')  then
    result := parseReference(jsn)
  else if (type_ = 'RelatedArtifact') or (type_ = 'TFhirRelatedArtifact')  then
    result := parseRelatedArtifact(jsn)
  else if (type_ = 'SampledData') or (type_ = 'TFhirSampledData')  then
    result := parseSampledData(jsn)
  else if (type_ = 'Signature') or (type_ = 'TFhirSignature')  then
    result := parseSignature(jsn)
  else if (type_ = 'Timing') or (type_ = 'TFhirTiming')  then
    result := parseTiming(jsn)
  else if (type_ = 'TriggerDefinition') or (type_ = 'TFhirTriggerDefinition')  then
    result := parseTriggerDefinition(jsn)
  else if (type_ = 'UsageContext') or (type_ = 'TFhirUsageContext')  then
    result := parseUsageContext(jsn)
{$IFDEF FHIR_ACCOUNT}
  else if (type_ = 'Account') or (type_ = 'TFhirAccount')  then
    result := parseAccount(jsn)
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  else if (type_ = 'ActivityDefinition') or (type_ = 'TFhirActivityDefinition')  then
    result := parseActivityDefinition(jsn)
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
  else if (type_ = 'AdministrableProductDefinition') or (type_ = 'TFhirAdministrableProductDefinition')  then
    result := parseAdministrableProductDefinition(jsn)
{$ENDIF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  else if (type_ = 'AdverseEvent') or (type_ = 'TFhirAdverseEvent')  then
    result := parseAdverseEvent(jsn)
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  else if (type_ = 'AllergyIntolerance') or (type_ = 'TFhirAllergyIntolerance')  then
    result := parseAllergyIntolerance(jsn)
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  else if (type_ = 'Appointment') or (type_ = 'TFhirAppointment')  then
    result := parseAppointment(jsn)
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  else if (type_ = 'AppointmentResponse') or (type_ = 'TFhirAppointmentResponse')  then
    result := parseAppointmentResponse(jsn)
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  else if (type_ = 'AuditEvent') or (type_ = 'TFhirAuditEvent')  then
    result := parseAuditEvent(jsn)
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  else if (type_ = 'Basic') or (type_ = 'TFhirBasic')  then
    result := parseBasic(jsn)
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  else if (type_ = 'Binary') or (type_ = 'TFhirBinary')  then
    result := parseBinary(jsn)
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
  else if (type_ = 'BiologicallyDerivedProduct') or (type_ = 'TFhirBiologicallyDerivedProduct')  then
    result := parseBiologicallyDerivedProduct(jsn)
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
  else if (type_ = 'BodyStructure') or (type_ = 'TFhirBodyStructure')  then
    result := parseBodyStructure(jsn)
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
  else if (type_ = 'Bundle') or (type_ = 'TFhirBundle')  then
    result := parseBundle(jsn)
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  else if (type_ = 'CapabilityStatement') or (type_ = 'TFhirCapabilityStatement')  then
    result := parseCapabilityStatement(jsn)
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  else if (type_ = 'CarePlan') or (type_ = 'TFhirCarePlan')  then
    result := parseCarePlan(jsn)
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  else if (type_ = 'CareTeam') or (type_ = 'TFhirCareTeam')  then
    result := parseCareTeam(jsn)
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
  else if (type_ = 'CatalogEntry') or (type_ = 'TFhirCatalogEntry')  then
    result := parseCatalogEntry(jsn)
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
  else if (type_ = 'ChargeItem') or (type_ = 'TFhirChargeItem')  then
    result := parseChargeItem(jsn)
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
  else if (type_ = 'ChargeItemDefinition') or (type_ = 'TFhirChargeItemDefinition')  then
    result := parseChargeItemDefinition(jsn)
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CITATION}
  else if (type_ = 'Citation') or (type_ = 'TFhirCitation')  then
    result := parseCitation(jsn)
{$ENDIF FHIR_CITATION}
{$IFDEF FHIR_CLAIM}
  else if (type_ = 'Claim') or (type_ = 'TFhirClaim')  then
    result := parseClaim(jsn)
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  else if (type_ = 'ClaimResponse') or (type_ = 'TFhirClaimResponse')  then
    result := parseClaimResponse(jsn)
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  else if (type_ = 'ClinicalImpression') or (type_ = 'TFhirClinicalImpression')  then
    result := parseClinicalImpression(jsn)
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CLINICALUSEDEFINITION}
  else if (type_ = 'ClinicalUseDefinition') or (type_ = 'TFhirClinicalUseDefinition')  then
    result := parseClinicalUseDefinition(jsn)
{$ENDIF FHIR_CLINICALUSEDEFINITION}
{$IFDEF FHIR_CODESYSTEM}
  else if (type_ = 'CodeSystem') or (type_ = 'TFhirCodeSystem')  then
    result := parseCodeSystem(jsn)
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  else if (type_ = 'Communication') or (type_ = 'TFhirCommunication')  then
    result := parseCommunication(jsn)
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  else if (type_ = 'CommunicationRequest') or (type_ = 'TFhirCommunicationRequest')  then
    result := parseCommunicationRequest(jsn)
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  else if (type_ = 'CompartmentDefinition') or (type_ = 'TFhirCompartmentDefinition')  then
    result := parseCompartmentDefinition(jsn)
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  else if (type_ = 'Composition') or (type_ = 'TFhirComposition')  then
    result := parseComposition(jsn)
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  else if (type_ = 'ConceptMap') or (type_ = 'TFhirConceptMap')  then
    result := parseConceptMap(jsn)
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  else if (type_ = 'Condition') or (type_ = 'TFhirCondition')  then
    result := parseCondition(jsn)
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  else if (type_ = 'Consent') or (type_ = 'TFhirConsent')  then
    result := parseConsent(jsn)
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  else if (type_ = 'Contract') or (type_ = 'TFhirContract')  then
    result := parseContract(jsn)
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  else if (type_ = 'Coverage') or (type_ = 'TFhirCoverage')  then
    result := parseCoverage(jsn)
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
  else if (type_ = 'CoverageEligibilityRequest') or (type_ = 'TFhirCoverageEligibilityRequest')  then
    result := parseCoverageEligibilityRequest(jsn)
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
  else if (type_ = 'CoverageEligibilityResponse') or (type_ = 'TFhirCoverageEligibilityResponse')  then
    result := parseCoverageEligibilityResponse(jsn)
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
  else if (type_ = 'DetectedIssue') or (type_ = 'TFhirDetectedIssue')  then
    result := parseDetectedIssue(jsn)
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  else if (type_ = 'Device') or (type_ = 'TFhirDevice')  then
    result := parseDevice(jsn)
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
  else if (type_ = 'DeviceDefinition') or (type_ = 'TFhirDeviceDefinition')  then
    result := parseDeviceDefinition(jsn)
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
  else if (type_ = 'DeviceMetric') or (type_ = 'TFhirDeviceMetric')  then
    result := parseDeviceMetric(jsn)
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  else if (type_ = 'DeviceRequest') or (type_ = 'TFhirDeviceRequest')  then
    result := parseDeviceRequest(jsn)
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  else if (type_ = 'DeviceUseStatement') or (type_ = 'TFhirDeviceUseStatement')  then
    result := parseDeviceUseStatement(jsn)
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  else if (type_ = 'DiagnosticReport') or (type_ = 'TFhirDiagnosticReport')  then
    result := parseDiagnosticReport(jsn)
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  else if (type_ = 'DocumentManifest') or (type_ = 'TFhirDocumentManifest')  then
    result := parseDocumentManifest(jsn)
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  else if (type_ = 'DocumentReference') or (type_ = 'TFhirDocumentReference')  then
    result := parseDocumentReference(jsn)
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ENCOUNTER}
  else if (type_ = 'Encounter') or (type_ = 'TFhirEncounter')  then
    result := parseEncounter(jsn)
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  else if (type_ = 'Endpoint') or (type_ = 'TFhirEndpoint')  then
    result := parseEndpoint(jsn)
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  else if (type_ = 'EnrollmentRequest') or (type_ = 'TFhirEnrollmentRequest')  then
    result := parseEnrollmentRequest(jsn)
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  else if (type_ = 'EnrollmentResponse') or (type_ = 'TFhirEnrollmentResponse')  then
    result := parseEnrollmentResponse(jsn)
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
  else if (type_ = 'EpisodeOfCare') or (type_ = 'TFhirEpisodeOfCare')  then
    result := parseEpisodeOfCare(jsn)
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
  else if (type_ = 'EventDefinition') or (type_ = 'TFhirEventDefinition')  then
    result := parseEventDefinition(jsn)
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
  else if (type_ = 'Evidence') or (type_ = 'TFhirEvidence')  then
    result := parseEvidence(jsn)
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEREPORT}
  else if (type_ = 'EvidenceReport') or (type_ = 'TFhirEvidenceReport')  then
    result := parseEvidenceReport(jsn)
{$ENDIF FHIR_EVIDENCEREPORT}
{$IFDEF FHIR_EVIDENCEVARIABLE}
  else if (type_ = 'EvidenceVariable') or (type_ = 'TFhirEvidenceVariable')  then
    result := parseEvidenceVariable(jsn)
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
  else if (type_ = 'ExampleScenario') or (type_ = 'TFhirExampleScenario')  then
    result := parseExampleScenario(jsn)
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  else if (type_ = 'ExplanationOfBenefit') or (type_ = 'TFhirExplanationOfBenefit')  then
    result := parseExplanationOfBenefit(jsn)
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  else if (type_ = 'FamilyMemberHistory') or (type_ = 'TFhirFamilyMemberHistory')  then
    result := parseFamilyMemberHistory(jsn)
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  else if (type_ = 'Flag') or (type_ = 'TFhirFlag')  then
    result := parseFlag(jsn)
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  else if (type_ = 'Goal') or (type_ = 'TFhirGoal')  then
    result := parseGoal(jsn)
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  else if (type_ = 'GraphDefinition') or (type_ = 'TFhirGraphDefinition')  then
    result := parseGraphDefinition(jsn)
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  else if (type_ = 'Group') or (type_ = 'TFhirGroup')  then
    result := parseGroup(jsn)
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  else if (type_ = 'GuidanceResponse') or (type_ = 'TFhirGuidanceResponse')  then
    result := parseGuidanceResponse(jsn)
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  else if (type_ = 'HealthcareService') or (type_ = 'TFhirHealthcareService')  then
    result := parseHealthcareService(jsn)
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
  else if (type_ = 'ImagingStudy') or (type_ = 'TFhirImagingStudy')  then
    result := parseImagingStudy(jsn)
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  else if (type_ = 'Immunization') or (type_ = 'TFhirImmunization')  then
    result := parseImmunization(jsn)
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
  else if (type_ = 'ImmunizationEvaluation') or (type_ = 'TFhirImmunizationEvaluation')  then
    result := parseImmunizationEvaluation(jsn)
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  else if (type_ = 'ImmunizationRecommendation') or (type_ = 'TFhirImmunizationRecommendation')  then
    result := parseImmunizationRecommendation(jsn)
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  else if (type_ = 'ImplementationGuide') or (type_ = 'TFhirImplementationGuide')  then
    result := parseImplementationGuide(jsn)
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INGREDIENT}
  else if (type_ = 'Ingredient') or (type_ = 'TFhirIngredient')  then
    result := parseIngredient(jsn)
{$ENDIF FHIR_INGREDIENT}
{$IFDEF FHIR_INSURANCEPLAN}
  else if (type_ = 'InsurancePlan') or (type_ = 'TFhirInsurancePlan')  then
    result := parseInsurancePlan(jsn)
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
  else if (type_ = 'Invoice') or (type_ = 'TFhirInvoice')  then
    result := parseInvoice(jsn)
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
  else if (type_ = 'Library') or (type_ = 'TFhirLibrary')  then
    result := parseLibrary(jsn)
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  else if (type_ = 'Linkage') or (type_ = 'TFhirLinkage')  then
    result := parseLinkage(jsn)
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  else if (type_ = 'List') or (type_ = 'TFhirList')  then
    result := parseList(jsn)
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  else if (type_ = 'Location') or (type_ = 'TFhirLocation')  then
    result := parseLocation(jsn)
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MANUFACTUREDITEMDEFINITION}
  else if (type_ = 'ManufacturedItemDefinition') or (type_ = 'TFhirManufacturedItemDefinition')  then
    result := parseManufacturedItemDefinition(jsn)
{$ENDIF FHIR_MANUFACTUREDITEMDEFINITION}
{$IFDEF FHIR_MEASURE}
  else if (type_ = 'Measure') or (type_ = 'TFhirMeasure')  then
    result := parseMeasure(jsn)
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  else if (type_ = 'MeasureReport') or (type_ = 'TFhirMeasureReport')  then
    result := parseMeasureReport(jsn)
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  else if (type_ = 'Media') or (type_ = 'TFhirMedia')  then
    result := parseMedia(jsn)
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  else if (type_ = 'Medication') or (type_ = 'TFhirMedication')  then
    result := parseMedication(jsn)
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  else if (type_ = 'MedicationAdministration') or (type_ = 'TFhirMedicationAdministration')  then
    result := parseMedicationAdministration(jsn)
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  else if (type_ = 'MedicationDispense') or (type_ = 'TFhirMedicationDispense')  then
    result := parseMedicationDispense(jsn)
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
  else if (type_ = 'MedicationKnowledge') or (type_ = 'TFhirMedicationKnowledge')  then
    result := parseMedicationKnowledge(jsn)
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  else if (type_ = 'MedicationRequest') or (type_ = 'TFhirMedicationRequest')  then
    result := parseMedicationRequest(jsn)
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  else if (type_ = 'MedicationStatement') or (type_ = 'TFhirMedicationStatement')  then
    result := parseMedicationStatement(jsn)
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCTDEFINITION}
  else if (type_ = 'MedicinalProductDefinition') or (type_ = 'TFhirMedicinalProductDefinition')  then
    result := parseMedicinalProductDefinition(jsn)
{$ENDIF FHIR_MEDICINALPRODUCTDEFINITION}
{$IFDEF FHIR_MESSAGEDEFINITION}
  else if (type_ = 'MessageDefinition') or (type_ = 'TFhirMessageDefinition')  then
    result := parseMessageDefinition(jsn)
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  else if (type_ = 'MessageHeader') or (type_ = 'TFhirMessageHeader')  then
    result := parseMessageHeader(jsn)
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
  else if (type_ = 'MolecularSequence') or (type_ = 'TFhirMolecularSequence')  then
    result := parseMolecularSequence(jsn)
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
  else if (type_ = 'NamingSystem') or (type_ = 'TFhirNamingSystem')  then
    result := parseNamingSystem(jsn)
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  else if (type_ = 'NutritionOrder') or (type_ = 'TFhirNutritionOrder')  then
    result := parseNutritionOrder(jsn)
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_NUTRITIONPRODUCT}
  else if (type_ = 'NutritionProduct') or (type_ = 'TFhirNutritionProduct')  then
    result := parseNutritionProduct(jsn)
{$ENDIF FHIR_NUTRITIONPRODUCT}
{$IFDEF FHIR_OBSERVATION}
  else if (type_ = 'Observation') or (type_ = 'TFhirObservation')  then
    result := parseObservation(jsn)
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
  else if (type_ = 'ObservationDefinition') or (type_ = 'TFhirObservationDefinition')  then
    result := parseObservationDefinition(jsn)
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
  else if (type_ = 'OperationDefinition') or (type_ = 'TFhirOperationDefinition')  then
    result := parseOperationDefinition(jsn)
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  else if (type_ = 'OperationOutcome') or (type_ = 'TFhirOperationOutcome')  then
    result := parseOperationOutcome(jsn)
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  else if (type_ = 'Organization') or (type_ = 'TFhirOrganization')  then
    result := parseOrganization(jsn)
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
  else if (type_ = 'OrganizationAffiliation') or (type_ = 'TFhirOrganizationAffiliation')  then
    result := parseOrganizationAffiliation(jsn)
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PACKAGEDPRODUCTDEFINITION}
  else if (type_ = 'PackagedProductDefinition') or (type_ = 'TFhirPackagedProductDefinition')  then
    result := parsePackagedProductDefinition(jsn)
{$ENDIF FHIR_PACKAGEDPRODUCTDEFINITION}
{$IFDEF FHIR_PARAMETERS}
  else if (type_ = 'Parameters') or (type_ = 'TFhirParameters')  then
    result := parseParameters(jsn)
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_PATIENT}
  else if (type_ = 'Patient') or (type_ = 'TFhirPatient')  then
    result := parsePatient(jsn)
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  else if (type_ = 'PaymentNotice') or (type_ = 'TFhirPaymentNotice')  then
    result := parsePaymentNotice(jsn)
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  else if (type_ = 'PaymentReconciliation') or (type_ = 'TFhirPaymentReconciliation')  then
    result := parsePaymentReconciliation(jsn)
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  else if (type_ = 'Person') or (type_ = 'TFhirPerson')  then
    result := parsePerson(jsn)
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  else if (type_ = 'PlanDefinition') or (type_ = 'TFhirPlanDefinition')  then
    result := parsePlanDefinition(jsn)
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  else if (type_ = 'Practitioner') or (type_ = 'TFhirPractitioner')  then
    result := parsePractitioner(jsn)
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  else if (type_ = 'PractitionerRole') or (type_ = 'TFhirPractitionerRole')  then
    result := parsePractitionerRole(jsn)
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  else if (type_ = 'Procedure') or (type_ = 'TFhirProcedure')  then
    result := parseProcedure(jsn)
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
  else if (type_ = 'Provenance') or (type_ = 'TFhirProvenance')  then
    result := parseProvenance(jsn)
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  else if (type_ = 'Questionnaire') or (type_ = 'TFhirQuestionnaire')  then
    result := parseQuestionnaire(jsn)
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  else if (type_ = 'QuestionnaireResponse') or (type_ = 'TFhirQuestionnaireResponse')  then
    result := parseQuestionnaireResponse(jsn)
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REGULATEDAUTHORIZATION}
  else if (type_ = 'RegulatedAuthorization') or (type_ = 'TFhirRegulatedAuthorization')  then
    result := parseRegulatedAuthorization(jsn)
{$ENDIF FHIR_REGULATEDAUTHORIZATION}
{$IFDEF FHIR_RELATEDPERSON}
  else if (type_ = 'RelatedPerson') or (type_ = 'TFhirRelatedPerson')  then
    result := parseRelatedPerson(jsn)
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  else if (type_ = 'RequestGroup') or (type_ = 'TFhirRequestGroup')  then
    result := parseRequestGroup(jsn)
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHDEFINITION}
  else if (type_ = 'ResearchDefinition') or (type_ = 'TFhirResearchDefinition')  then
    result := parseResearchDefinition(jsn)
{$ENDIF FHIR_RESEARCHDEFINITION}
{$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
  else if (type_ = 'ResearchElementDefinition') or (type_ = 'TFhirResearchElementDefinition')  then
    result := parseResearchElementDefinition(jsn)
{$ENDIF FHIR_RESEARCHELEMENTDEFINITION}
{$IFDEF FHIR_RESEARCHSTUDY}
  else if (type_ = 'ResearchStudy') or (type_ = 'TFhirResearchStudy')  then
    result := parseResearchStudy(jsn)
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  else if (type_ = 'ResearchSubject') or (type_ = 'TFhirResearchSubject')  then
    result := parseResearchSubject(jsn)
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  else if (type_ = 'RiskAssessment') or (type_ = 'TFhirRiskAssessment')  then
    result := parseRiskAssessment(jsn)
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
  else if (type_ = 'Schedule') or (type_ = 'TFhirSchedule')  then
    result := parseSchedule(jsn)
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  else if (type_ = 'SearchParameter') or (type_ = 'TFhirSearchParameter')  then
    result := parseSearchParameter(jsn)
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
  else if (type_ = 'ServiceRequest') or (type_ = 'TFhirServiceRequest')  then
    result := parseServiceRequest(jsn)
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
  else if (type_ = 'Slot') or (type_ = 'TFhirSlot')  then
    result := parseSlot(jsn)
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  else if (type_ = 'Specimen') or (type_ = 'TFhirSpecimen')  then
    result := parseSpecimen(jsn)
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
  else if (type_ = 'SpecimenDefinition') or (type_ = 'TFhirSpecimenDefinition')  then
    result := parseSpecimenDefinition(jsn)
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  else if (type_ = 'StructureDefinition') or (type_ = 'TFhirStructureDefinition')  then
    result := parseStructureDefinition(jsn)
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  else if (type_ = 'StructureMap') or (type_ = 'TFhirStructureMap')  then
    result := parseStructureMap(jsn)
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  else if (type_ = 'Subscription') or (type_ = 'TFhirSubscription')  then
    result := parseSubscription(jsn)
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSCRIPTIONSTATUS}
  else if (type_ = 'SubscriptionStatus') or (type_ = 'TFhirSubscriptionStatus')  then
    result := parseSubscriptionStatus(jsn)
{$ENDIF FHIR_SUBSCRIPTIONSTATUS}
{$IFDEF FHIR_SUBSCRIPTIONTOPIC}
  else if (type_ = 'SubscriptionTopic') or (type_ = 'TFhirSubscriptionTopic')  then
    result := parseSubscriptionTopic(jsn)
{$ENDIF FHIR_SUBSCRIPTIONTOPIC}
{$IFDEF FHIR_SUBSTANCE}
  else if (type_ = 'Substance') or (type_ = 'TFhirSubstance')  then
    result := parseSubstance(jsn)
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEDEFINITION}
  else if (type_ = 'SubstanceDefinition') or (type_ = 'TFhirSubstanceDefinition')  then
    result := parseSubstanceDefinition(jsn)
{$ENDIF FHIR_SUBSTANCEDEFINITION}
{$IFDEF FHIR_SUPPLYDELIVERY}
  else if (type_ = 'SupplyDelivery') or (type_ = 'TFhirSupplyDelivery')  then
    result := parseSupplyDelivery(jsn)
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  else if (type_ = 'SupplyRequest') or (type_ = 'TFhirSupplyRequest')  then
    result := parseSupplyRequest(jsn)
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  else if (type_ = 'Task') or (type_ = 'TFhirTask')  then
    result := parseTask(jsn)
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
  else if (type_ = 'TerminologyCapabilities') or (type_ = 'TFhirTerminologyCapabilities')  then
    result := parseTerminologyCapabilities(jsn)
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
  else if (type_ = 'TestReport') or (type_ = 'TFhirTestReport')  then
    result := parseTestReport(jsn)
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  else if (type_ = 'TestScript') or (type_ = 'TFhirTestScript')  then
    result := parseTestScript(jsn)
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
  else if (type_ = 'ValueSet') or (type_ = 'TFhirValueSet')  then
    result := parseValueSet(jsn)
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
  else if (type_ = 'VerificationResult') or (type_ = 'TFhirVerificationResult')  then
    result := parseVerificationResult(jsn)
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  else if (type_ = 'VisionPrescription') or (type_ = 'TFhirVisionPrescription')  then
    result := parseVisionPrescription(jsn)
{$ENDIF FHIR_VISIONPRESCRIPTION}

  else
    raise EJsonException.Create('error: the element '+type_+' is not a valid fragment name');
end;

function TFHIRJsonParser.ParseDataType(jsn : TJsonObject; name : String; type_ : TFHIRDataTypeClass) : TFHIRDataType;
begin
  if (type_ = nil) then
    raise EJsonException.Create('no type provided')
  else if (type_ = TFhirCodeableReference) then
    result := parseCodeableReference(jsn)
  else if (type_ = TFhirRatioRange) then
    result := parseRatioRange(jsn)
  else if (type_ = TFhirAddress) then
    result := parseAddress(jsn)
  else if (type_ = TFhirAge) then
    result := parseAge(jsn)
  else if (type_ = TFhirAnnotation) then
    result := parseAnnotation(jsn)
  else if (type_ = TFhirAttachment) then
    result := parseAttachment(jsn)
  else if (type_ = TFhirCodeableConcept) then
    result := parseCodeableConcept(jsn)
  else if (type_ = TFhirCoding) then
    result := parseCoding(jsn)
  else if (type_ = TFhirContactDetail) then
    result := parseContactDetail(jsn)
  else if (type_ = TFhirContactPoint) then
    result := parseContactPoint(jsn)
  else if (type_ = TFhirContributor) then
    result := parseContributor(jsn)
  else if (type_ = TFhirCount) then
    result := parseCount(jsn)
  else if (type_ = TFhirDataRequirement) then
    result := parseDataRequirement(jsn)
  else if (type_ = TFhirDistance) then
    result := parseDistance(jsn)
  else if (type_ = TFhirDosage) then
    result := parseDosage(jsn)
  else if (type_ = TFhirDuration) then
    result := parseDuration(jsn)
  else if (type_ = TFhirElementDefinition) then
    result := parseElementDefinition(jsn)
  else if (type_ = TFhirExpression) then
    result := parseExpression(jsn)
  else if (type_ = TFhirExtension) then
    result := parseExtension(jsn)
  else if (type_ = TFhirHumanName) then
    result := parseHumanName(jsn)
  else if (type_ = TFhirIdentifier) then
    result := parseIdentifier(jsn)
  else if (type_ = TFhirMarketingStatus) then
    result := parseMarketingStatus(jsn)
  else if (type_ = TFhirMeta) then
    result := parseMeta(jsn)
  else if (type_ = TFhirMoney) then
    result := parseMoney(jsn)
  else if (type_ = TFhirNarrative) then
    result := parseNarrative(jsn)
  else if (type_ = TFhirParameterDefinition) then
    result := parseParameterDefinition(jsn)
  else if (type_ = TFhirPeriod) then
    result := parsePeriod(jsn)
  else if (type_ = TFhirPopulation) then
    result := parsePopulation(jsn)
  else if (type_ = TFhirProdCharacteristic) then
    result := parseProdCharacteristic(jsn)
  else if (type_ = TFhirProductShelfLife) then
    result := parseProductShelfLife(jsn)
  else if (type_ = TFhirQuantity) then
    result := parseQuantity(jsn)
  else if (type_ = TFhirRange) then
    result := parseRange(jsn)
  else if (type_ = TFhirRatio) then
    result := parseRatio(jsn)
  else if (type_ = TFhirReference) then
    result := parseReference(jsn)
  else if (type_ = TFhirRelatedArtifact) then
    result := parseRelatedArtifact(jsn)
  else if (type_ = TFhirSampledData) then
    result := parseSampledData(jsn)
  else if (type_ = TFhirSignature) then
    result := parseSignature(jsn)
  else if (type_ = TFhirTiming) then
    result := parseTiming(jsn)
  else if (type_ = TFhirTriggerDefinition) then
    result := parseTriggerDefinition(jsn)
  else if (type_ = TFhirUsageContext) then
    result := parseUsageContext(jsn)

  else
    raise EJsonException.Create('Unknown Type');
end;

procedure TFHIRJsonComposer.ComposeBase(json: TJSONWriter; name: String; base: TFHIRObject);
begin
  if (base is TFhirDate) then
    composeDateValue(json, name, TFhirDate(base), false)
  else if (base is TFhirDateTime) then
    composeDateTimeValue(json, name, TFhirDateTime(base), false)
  else if (base is TFhirString) then
    composeStringValue(json, name, TFhirString(base), false)
  else if (base is TFhirInteger) then
    composeIntegerValue(json, name, TFhirInteger(base), false)
  else if (base is TFhirUri) then
    composeUriValue(json, name, TFhirUri(base), false)
  else if (base is TFhirInstant) then
    composeInstantValue(json, name, TFhirInstant(base), false)
  else if (base is TFhirXhtml) then
    composeXhtmlValue(json, name, TFhirXhtml(base), false)
  else if (base is TFhirBoolean) then
    composeBooleanValue(json, name, TFhirBoolean(base), false)
  else if (base is TFhirBase64Binary) then
    composeBase64BinaryValue(json, name, TFhirBase64Binary(base), false)
  else if (base is TFhirTime) then
    composeTimeValue(json, name, TFhirTime(base), false)
  else if (base is TFhirDecimal) then
    composeDecimalValue(json, name, TFhirDecimal(base), false)
  else if (base is TFhirCode) then
    composeCodeValue(json, name, TFhirCode(base), false)
  else if (base is TFhirCanonical) then
    composeCanonicalValue(json, name, TFhirCanonical(base), false)
  else if (base is TFhirOid) then
    composeOidValue(json, name, TFhirOid(base), false)
  else if (base is TFhirUuid) then
    composeUuidValue(json, name, TFhirUuid(base), false)
  else if (base is TFhirUrl) then
    composeUrlValue(json, name, TFhirUrl(base), false)
  else if (base is TFhirMarkdown) then
    composeMarkdownValue(json, name, TFhirMarkdown(base), false)
  else if (base is TFhirUnsignedInt) then
    composeUnsignedIntValue(json, name, TFhirUnsignedInt(base), false)
  else if (base is TFhirId) then
    composeIdValue(json, name, TFhirId(base), false)
  else if (base is TFhirPositiveInt) then
    composePositiveIntValue(json, name, TFhirPositiveInt(base), false)
  else if (base is TFhirCodeableReference) then
    composeCodeableReference(json, name, TFhirCodeableReference(base), false)
  else if (base is TFhirRatioRange) then
    composeRatioRange(json, name, TFhirRatioRange(base), false)
  else if (base is TFhirAddress) then
    composeAddress(json, name, TFhirAddress(base), false)
  else if (base is TFhirAge) then
    composeAge(json, name, TFhirAge(base), false)
  else if (base is TFhirAnnotation) then
    composeAnnotation(json, name, TFhirAnnotation(base), false)
  else if (base is TFhirAttachment) then
    composeAttachment(json, name, TFhirAttachment(base), false)
  else if (base is TFhirCodeableConcept) then
    composeCodeableConcept(json, name, TFhirCodeableConcept(base), false)
  else if (base is TFhirCoding) then
    composeCoding(json, name, TFhirCoding(base), false)
  else if (base is TFhirContactDetail) then
    composeContactDetail(json, name, TFhirContactDetail(base), false)
  else if (base is TFhirContactPoint) then
    composeContactPoint(json, name, TFhirContactPoint(base), false)
  else if (base is TFhirContributor) then
    composeContributor(json, name, TFhirContributor(base), false)
  else if (base is TFhirCount) then
    composeCount(json, name, TFhirCount(base), false)
  else if (base is TFhirDataRequirement) then
    composeDataRequirement(json, name, TFhirDataRequirement(base), false)
  else if (base is TFhirDistance) then
    composeDistance(json, name, TFhirDistance(base), false)
  else if (base is TFhirDosage) then
    composeDosage(json, name, TFhirDosage(base), false)
  else if (base is TFhirDuration) then
    composeDuration(json, name, TFhirDuration(base), false)
  else if (base is TFhirElementDefinition) then
    composeElementDefinition(json, name, TFhirElementDefinition(base), false)
  else if (base is TFhirExpression) then
    composeExpression(json, name, TFhirExpression(base), false)
  else if (base is TFhirExtension) then
    composeExtension(json, name, TFhirExtension(base), false)
  else if (base is TFhirHumanName) then
    composeHumanName(json, name, TFhirHumanName(base), false)
  else if (base is TFhirIdentifier) then
    composeIdentifier(json, name, TFhirIdentifier(base), false)
  else if (base is TFhirMarketingStatus) then
    composeMarketingStatus(json, name, TFhirMarketingStatus(base), false)
  else if (base is TFhirMeta) then
    composeMeta(json, name, TFhirMeta(base), false)
  else if (base is TFhirMoney) then
    composeMoney(json, name, TFhirMoney(base), false)
  else if (base is TFhirNarrative) then
    composeNarrative(json, name, TFhirNarrative(base), false)
  else if (base is TFhirParameterDefinition) then
    composeParameterDefinition(json, name, TFhirParameterDefinition(base), false)
  else if (base is TFhirPeriod) then
    composePeriod(json, name, TFhirPeriod(base), false)
  else if (base is TFhirPopulation) then
    composePopulation(json, name, TFhirPopulation(base), false)
  else if (base is TFhirProdCharacteristic) then
    composeProdCharacteristic(json, name, TFhirProdCharacteristic(base), false)
  else if (base is TFhirProductShelfLife) then
    composeProductShelfLife(json, name, TFhirProductShelfLife(base), false)
  else if (base is TFhirQuantity) then
    composeQuantity(json, name, TFhirQuantity(base), false)
  else if (base is TFhirRange) then
    composeRange(json, name, TFhirRange(base), false)
  else if (base is TFhirRatio) then
    composeRatio(json, name, TFhirRatio(base), false)
  else if (base is TFhirReference) then
    composeReference(json, name, TFhirReference(base), false)
  else if (base is TFhirRelatedArtifact) then
    composeRelatedArtifact(json, name, TFhirRelatedArtifact(base), false)
  else if (base is TFhirSampledData) then
    composeSampledData(json, name, TFhirSampledData(base), false)
  else if (base is TFhirSignature) then
    composeSignature(json, name, TFhirSignature(base), false)
  else if (base is TFhirTiming) then
    composeTiming(json, name, TFhirTiming(base), false)
  else if (base is TFhirTriggerDefinition) then
    composeTriggerDefinition(json, name, TFhirTriggerDefinition(base), false)
  else if (base is TFhirUsageContext) then
    composeUsageContext(json, name, TFhirUsageContext(base), false)
{$IFDEF FHIR_ACCOUNT}
  else if (base is TFhirAccount) then
    composeAccount(json, name, TFhirAccount(base), false)
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  else if (base is TFhirActivityDefinition) then
    composeActivityDefinition(json, name, TFhirActivityDefinition(base), false)
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
  else if (base is TFhirAdministrableProductDefinition) then
    composeAdministrableProductDefinition(json, name, TFhirAdministrableProductDefinition(base), false)
{$ENDIF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  else if (base is TFhirAdverseEvent) then
    composeAdverseEvent(json, name, TFhirAdverseEvent(base), false)
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  else if (base is TFhirAllergyIntolerance) then
    composeAllergyIntolerance(json, name, TFhirAllergyIntolerance(base), false)
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  else if (base is TFhirAppointment) then
    composeAppointment(json, name, TFhirAppointment(base), false)
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  else if (base is TFhirAppointmentResponse) then
    composeAppointmentResponse(json, name, TFhirAppointmentResponse(base), false)
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  else if (base is TFhirAuditEvent) then
    composeAuditEvent(json, name, TFhirAuditEvent(base), false)
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  else if (base is TFhirBasic) then
    composeBasic(json, name, TFhirBasic(base), false)
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  else if (base is TFhirBinary) then
    composeBinary(json, name, TFhirBinary(base), false)
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
  else if (base is TFhirBiologicallyDerivedProduct) then
    composeBiologicallyDerivedProduct(json, name, TFhirBiologicallyDerivedProduct(base), false)
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
  else if (base is TFhirBodyStructure) then
    composeBodyStructure(json, name, TFhirBodyStructure(base), false)
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
  else if (base is TFhirBundle) then
    composeBundle(json, name, TFhirBundle(base), false)
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  else if (base is TFhirCapabilityStatement) then
    composeCapabilityStatement(json, name, TFhirCapabilityStatement(base), false)
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  else if (base is TFhirCarePlan) then
    composeCarePlan(json, name, TFhirCarePlan(base), false)
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  else if (base is TFhirCareTeam) then
    composeCareTeam(json, name, TFhirCareTeam(base), false)
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
  else if (base is TFhirCatalogEntry) then
    composeCatalogEntry(json, name, TFhirCatalogEntry(base), false)
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
  else if (base is TFhirChargeItem) then
    composeChargeItem(json, name, TFhirChargeItem(base), false)
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
  else if (base is TFhirChargeItemDefinition) then
    composeChargeItemDefinition(json, name, TFhirChargeItemDefinition(base), false)
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CITATION}
  else if (base is TFhirCitation) then
    composeCitation(json, name, TFhirCitation(base), false)
{$ENDIF FHIR_CITATION}
{$IFDEF FHIR_CLAIM}
  else if (base is TFhirClaim) then
    composeClaim(json, name, TFhirClaim(base), false)
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  else if (base is TFhirClaimResponse) then
    composeClaimResponse(json, name, TFhirClaimResponse(base), false)
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  else if (base is TFhirClinicalImpression) then
    composeClinicalImpression(json, name, TFhirClinicalImpression(base), false)
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CLINICALUSEDEFINITION}
  else if (base is TFhirClinicalUseDefinition) then
    composeClinicalUseDefinition(json, name, TFhirClinicalUseDefinition(base), false)
{$ENDIF FHIR_CLINICALUSEDEFINITION}
{$IFDEF FHIR_CODESYSTEM}
  else if (base is TFhirCodeSystem) then
    composeCodeSystem(json, name, TFhirCodeSystem(base), false)
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  else if (base is TFhirCommunication) then
    composeCommunication(json, name, TFhirCommunication(base), false)
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  else if (base is TFhirCommunicationRequest) then
    composeCommunicationRequest(json, name, TFhirCommunicationRequest(base), false)
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  else if (base is TFhirCompartmentDefinition) then
    composeCompartmentDefinition(json, name, TFhirCompartmentDefinition(base), false)
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  else if (base is TFhirComposition) then
    composeComposition(json, name, TFhirComposition(base), false)
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  else if (base is TFhirConceptMap) then
    composeConceptMap(json, name, TFhirConceptMap(base), false)
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  else if (base is TFhirCondition) then
    composeCondition(json, name, TFhirCondition(base), false)
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  else if (base is TFhirConsent) then
    composeConsent(json, name, TFhirConsent(base), false)
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  else if (base is TFhirContract) then
    composeContract(json, name, TFhirContract(base), false)
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  else if (base is TFhirCoverage) then
    composeCoverage(json, name, TFhirCoverage(base), false)
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
  else if (base is TFhirCoverageEligibilityRequest) then
    composeCoverageEligibilityRequest(json, name, TFhirCoverageEligibilityRequest(base), false)
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
  else if (base is TFhirCoverageEligibilityResponse) then
    composeCoverageEligibilityResponse(json, name, TFhirCoverageEligibilityResponse(base), false)
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
  else if (base is TFhirDetectedIssue) then
    composeDetectedIssue(json, name, TFhirDetectedIssue(base), false)
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  else if (base is TFhirDevice) then
    composeDevice(json, name, TFhirDevice(base), false)
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
  else if (base is TFhirDeviceDefinition) then
    composeDeviceDefinition(json, name, TFhirDeviceDefinition(base), false)
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
  else if (base is TFhirDeviceMetric) then
    composeDeviceMetric(json, name, TFhirDeviceMetric(base), false)
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  else if (base is TFhirDeviceRequest) then
    composeDeviceRequest(json, name, TFhirDeviceRequest(base), false)
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  else if (base is TFhirDeviceUseStatement) then
    composeDeviceUseStatement(json, name, TFhirDeviceUseStatement(base), false)
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  else if (base is TFhirDiagnosticReport) then
    composeDiagnosticReport(json, name, TFhirDiagnosticReport(base), false)
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  else if (base is TFhirDocumentManifest) then
    composeDocumentManifest(json, name, TFhirDocumentManifest(base), false)
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  else if (base is TFhirDocumentReference) then
    composeDocumentReference(json, name, TFhirDocumentReference(base), false)
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ENCOUNTER}
  else if (base is TFhirEncounter) then
    composeEncounter(json, name, TFhirEncounter(base), false)
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  else if (base is TFhirEndpoint) then
    composeEndpoint(json, name, TFhirEndpoint(base), false)
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  else if (base is TFhirEnrollmentRequest) then
    composeEnrollmentRequest(json, name, TFhirEnrollmentRequest(base), false)
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  else if (base is TFhirEnrollmentResponse) then
    composeEnrollmentResponse(json, name, TFhirEnrollmentResponse(base), false)
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
  else if (base is TFhirEpisodeOfCare) then
    composeEpisodeOfCare(json, name, TFhirEpisodeOfCare(base), false)
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
  else if (base is TFhirEventDefinition) then
    composeEventDefinition(json, name, TFhirEventDefinition(base), false)
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
  else if (base is TFhirEvidence) then
    composeEvidence(json, name, TFhirEvidence(base), false)
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEREPORT}
  else if (base is TFhirEvidenceReport) then
    composeEvidenceReport(json, name, TFhirEvidenceReport(base), false)
{$ENDIF FHIR_EVIDENCEREPORT}
{$IFDEF FHIR_EVIDENCEVARIABLE}
  else if (base is TFhirEvidenceVariable) then
    composeEvidenceVariable(json, name, TFhirEvidenceVariable(base), false)
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
  else if (base is TFhirExampleScenario) then
    composeExampleScenario(json, name, TFhirExampleScenario(base), false)
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  else if (base is TFhirExplanationOfBenefit) then
    composeExplanationOfBenefit(json, name, TFhirExplanationOfBenefit(base), false)
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  else if (base is TFhirFamilyMemberHistory) then
    composeFamilyMemberHistory(json, name, TFhirFamilyMemberHistory(base), false)
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  else if (base is TFhirFlag) then
    composeFlag(json, name, TFhirFlag(base), false)
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  else if (base is TFhirGoal) then
    composeGoal(json, name, TFhirGoal(base), false)
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  else if (base is TFhirGraphDefinition) then
    composeGraphDefinition(json, name, TFhirGraphDefinition(base), false)
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  else if (base is TFhirGroup) then
    composeGroup(json, name, TFhirGroup(base), false)
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  else if (base is TFhirGuidanceResponse) then
    composeGuidanceResponse(json, name, TFhirGuidanceResponse(base), false)
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  else if (base is TFhirHealthcareService) then
    composeHealthcareService(json, name, TFhirHealthcareService(base), false)
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
  else if (base is TFhirImagingStudy) then
    composeImagingStudy(json, name, TFhirImagingStudy(base), false)
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  else if (base is TFhirImmunization) then
    composeImmunization(json, name, TFhirImmunization(base), false)
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
  else if (base is TFhirImmunizationEvaluation) then
    composeImmunizationEvaluation(json, name, TFhirImmunizationEvaluation(base), false)
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  else if (base is TFhirImmunizationRecommendation) then
    composeImmunizationRecommendation(json, name, TFhirImmunizationRecommendation(base), false)
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  else if (base is TFhirImplementationGuide) then
    composeImplementationGuide(json, name, TFhirImplementationGuide(base), false)
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INGREDIENT}
  else if (base is TFhirIngredient) then
    composeIngredient(json, name, TFhirIngredient(base), false)
{$ENDIF FHIR_INGREDIENT}
{$IFDEF FHIR_INSURANCEPLAN}
  else if (base is TFhirInsurancePlan) then
    composeInsurancePlan(json, name, TFhirInsurancePlan(base), false)
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
  else if (base is TFhirInvoice) then
    composeInvoice(json, name, TFhirInvoice(base), false)
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
  else if (base is TFhirLibrary) then
    composeLibrary(json, name, TFhirLibrary(base), false)
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  else if (base is TFhirLinkage) then
    composeLinkage(json, name, TFhirLinkage(base), false)
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  else if (base is TFhirList) then
    composeList(json, name, TFhirList(base), false)
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  else if (base is TFhirLocation) then
    composeLocation(json, name, TFhirLocation(base), false)
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MANUFACTUREDITEMDEFINITION}
  else if (base is TFhirManufacturedItemDefinition) then
    composeManufacturedItemDefinition(json, name, TFhirManufacturedItemDefinition(base), false)
{$ENDIF FHIR_MANUFACTUREDITEMDEFINITION}
{$IFDEF FHIR_MEASURE}
  else if (base is TFhirMeasure) then
    composeMeasure(json, name, TFhirMeasure(base), false)
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  else if (base is TFhirMeasureReport) then
    composeMeasureReport(json, name, TFhirMeasureReport(base), false)
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  else if (base is TFhirMedia) then
    composeMedia(json, name, TFhirMedia(base), false)
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  else if (base is TFhirMedication) then
    composeMedication(json, name, TFhirMedication(base), false)
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  else if (base is TFhirMedicationAdministration) then
    composeMedicationAdministration(json, name, TFhirMedicationAdministration(base), false)
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  else if (base is TFhirMedicationDispense) then
    composeMedicationDispense(json, name, TFhirMedicationDispense(base), false)
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
  else if (base is TFhirMedicationKnowledge) then
    composeMedicationKnowledge(json, name, TFhirMedicationKnowledge(base), false)
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  else if (base is TFhirMedicationRequest) then
    composeMedicationRequest(json, name, TFhirMedicationRequest(base), false)
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  else if (base is TFhirMedicationStatement) then
    composeMedicationStatement(json, name, TFhirMedicationStatement(base), false)
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCTDEFINITION}
  else if (base is TFhirMedicinalProductDefinition) then
    composeMedicinalProductDefinition(json, name, TFhirMedicinalProductDefinition(base), false)
{$ENDIF FHIR_MEDICINALPRODUCTDEFINITION}
{$IFDEF FHIR_MESSAGEDEFINITION}
  else if (base is TFhirMessageDefinition) then
    composeMessageDefinition(json, name, TFhirMessageDefinition(base), false)
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  else if (base is TFhirMessageHeader) then
    composeMessageHeader(json, name, TFhirMessageHeader(base), false)
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
  else if (base is TFhirMolecularSequence) then
    composeMolecularSequence(json, name, TFhirMolecularSequence(base), false)
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
  else if (base is TFhirNamingSystem) then
    composeNamingSystem(json, name, TFhirNamingSystem(base), false)
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  else if (base is TFhirNutritionOrder) then
    composeNutritionOrder(json, name, TFhirNutritionOrder(base), false)
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_NUTRITIONPRODUCT}
  else if (base is TFhirNutritionProduct) then
    composeNutritionProduct(json, name, TFhirNutritionProduct(base), false)
{$ENDIF FHIR_NUTRITIONPRODUCT}
{$IFDEF FHIR_OBSERVATION}
  else if (base is TFhirObservation) then
    composeObservation(json, name, TFhirObservation(base), false)
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
  else if (base is TFhirObservationDefinition) then
    composeObservationDefinition(json, name, TFhirObservationDefinition(base), false)
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
  else if (base is TFhirOperationDefinition) then
    composeOperationDefinition(json, name, TFhirOperationDefinition(base), false)
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  else if (base is TFhirOperationOutcome) then
    composeOperationOutcome(json, name, TFhirOperationOutcome(base), false)
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  else if (base is TFhirOrganization) then
    composeOrganization(json, name, TFhirOrganization(base), false)
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
  else if (base is TFhirOrganizationAffiliation) then
    composeOrganizationAffiliation(json, name, TFhirOrganizationAffiliation(base), false)
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PACKAGEDPRODUCTDEFINITION}
  else if (base is TFhirPackagedProductDefinition) then
    composePackagedProductDefinition(json, name, TFhirPackagedProductDefinition(base), false)
{$ENDIF FHIR_PACKAGEDPRODUCTDEFINITION}
{$IFDEF FHIR_PARAMETERS}
  else if (base is TFhirParameters) then
    composeParameters(json, name, TFhirParameters(base), false)
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_PATIENT}
  else if (base is TFhirPatient) then
    composePatient(json, name, TFhirPatient(base), false)
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  else if (base is TFhirPaymentNotice) then
    composePaymentNotice(json, name, TFhirPaymentNotice(base), false)
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  else if (base is TFhirPaymentReconciliation) then
    composePaymentReconciliation(json, name, TFhirPaymentReconciliation(base), false)
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  else if (base is TFhirPerson) then
    composePerson(json, name, TFhirPerson(base), false)
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  else if (base is TFhirPlanDefinition) then
    composePlanDefinition(json, name, TFhirPlanDefinition(base), false)
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  else if (base is TFhirPractitioner) then
    composePractitioner(json, name, TFhirPractitioner(base), false)
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  else if (base is TFhirPractitionerRole) then
    composePractitionerRole(json, name, TFhirPractitionerRole(base), false)
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  else if (base is TFhirProcedure) then
    composeProcedure(json, name, TFhirProcedure(base), false)
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
  else if (base is TFhirProvenance) then
    composeProvenance(json, name, TFhirProvenance(base), false)
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  else if (base is TFhirQuestionnaire) then
    composeQuestionnaire(json, name, TFhirQuestionnaire(base), false)
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  else if (base is TFhirQuestionnaireResponse) then
    composeQuestionnaireResponse(json, name, TFhirQuestionnaireResponse(base), false)
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REGULATEDAUTHORIZATION}
  else if (base is TFhirRegulatedAuthorization) then
    composeRegulatedAuthorization(json, name, TFhirRegulatedAuthorization(base), false)
{$ENDIF FHIR_REGULATEDAUTHORIZATION}
{$IFDEF FHIR_RELATEDPERSON}
  else if (base is TFhirRelatedPerson) then
    composeRelatedPerson(json, name, TFhirRelatedPerson(base), false)
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  else if (base is TFhirRequestGroup) then
    composeRequestGroup(json, name, TFhirRequestGroup(base), false)
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHDEFINITION}
  else if (base is TFhirResearchDefinition) then
    composeResearchDefinition(json, name, TFhirResearchDefinition(base), false)
{$ENDIF FHIR_RESEARCHDEFINITION}
{$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
  else if (base is TFhirResearchElementDefinition) then
    composeResearchElementDefinition(json, name, TFhirResearchElementDefinition(base), false)
{$ENDIF FHIR_RESEARCHELEMENTDEFINITION}
{$IFDEF FHIR_RESEARCHSTUDY}
  else if (base is TFhirResearchStudy) then
    composeResearchStudy(json, name, TFhirResearchStudy(base), false)
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  else if (base is TFhirResearchSubject) then
    composeResearchSubject(json, name, TFhirResearchSubject(base), false)
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  else if (base is TFhirRiskAssessment) then
    composeRiskAssessment(json, name, TFhirRiskAssessment(base), false)
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
  else if (base is TFhirSchedule) then
    composeSchedule(json, name, TFhirSchedule(base), false)
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  else if (base is TFhirSearchParameter) then
    composeSearchParameter(json, name, TFhirSearchParameter(base), false)
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
  else if (base is TFhirServiceRequest) then
    composeServiceRequest(json, name, TFhirServiceRequest(base), false)
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
  else if (base is TFhirSlot) then
    composeSlot(json, name, TFhirSlot(base), false)
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  else if (base is TFhirSpecimen) then
    composeSpecimen(json, name, TFhirSpecimen(base), false)
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
  else if (base is TFhirSpecimenDefinition) then
    composeSpecimenDefinition(json, name, TFhirSpecimenDefinition(base), false)
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  else if (base is TFhirStructureDefinition) then
    composeStructureDefinition(json, name, TFhirStructureDefinition(base), false)
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  else if (base is TFhirStructureMap) then
    composeStructureMap(json, name, TFhirStructureMap(base), false)
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  else if (base is TFhirSubscription) then
    composeSubscription(json, name, TFhirSubscription(base), false)
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSCRIPTIONSTATUS}
  else if (base is TFhirSubscriptionStatus) then
    composeSubscriptionStatus(json, name, TFhirSubscriptionStatus(base), false)
{$ENDIF FHIR_SUBSCRIPTIONSTATUS}
{$IFDEF FHIR_SUBSCRIPTIONTOPIC}
  else if (base is TFhirSubscriptionTopic) then
    composeSubscriptionTopic(json, name, TFhirSubscriptionTopic(base), false)
{$ENDIF FHIR_SUBSCRIPTIONTOPIC}
{$IFDEF FHIR_SUBSTANCE}
  else if (base is TFhirSubstance) then
    composeSubstance(json, name, TFhirSubstance(base), false)
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEDEFINITION}
  else if (base is TFhirSubstanceDefinition) then
    composeSubstanceDefinition(json, name, TFhirSubstanceDefinition(base), false)
{$ENDIF FHIR_SUBSTANCEDEFINITION}
{$IFDEF FHIR_SUPPLYDELIVERY}
  else if (base is TFhirSupplyDelivery) then
    composeSupplyDelivery(json, name, TFhirSupplyDelivery(base), false)
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  else if (base is TFhirSupplyRequest) then
    composeSupplyRequest(json, name, TFhirSupplyRequest(base), false)
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  else if (base is TFhirTask) then
    composeTask(json, name, TFhirTask(base), false)
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
  else if (base is TFhirTerminologyCapabilities) then
    composeTerminologyCapabilities(json, name, TFhirTerminologyCapabilities(base), false)
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
  else if (base is TFhirTestReport) then
    composeTestReport(json, name, TFhirTestReport(base), false)
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  else if (base is TFhirTestScript) then
    composeTestScript(json, name, TFhirTestScript(base), false)
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
  else if (base is TFhirValueSet) then
    composeValueSet(json, name, TFhirValueSet(base), false)
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
  else if (base is TFhirVerificationResult) then
    composeVerificationResult(json, name, TFhirVerificationResult(base), false)
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  else if (base is TFhirVisionPrescription) then
    composeVisionPrescription(json, name, TFhirVisionPrescription(base), false)
{$ENDIF FHIR_VISIONPRESCRIPTION}
  
  else
    inherited ComposeBase(json, name, base);
end;

procedure TFHIRJsonComposer.ComposeResource(json : TJSONWriter; resource: TFhirResource);
begin
  if (resource = nil) Then
    Raise EJsonException.Create('error - resource is nil');
  json.value('resourceType', CODES_TFhirResourceType[resource.ResourceType]);
  Case resource.ResourceType of
{$IFDEF FHIR_ACCOUNT}
    frtAccount: ComposeAccount(json, 'Account', TFhirAccount(resource));
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
    frtActivityDefinition: ComposeActivityDefinition(json, 'ActivityDefinition', TFhirActivityDefinition(resource));
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
    frtAdministrableProductDefinition: ComposeAdministrableProductDefinition(json, 'AdministrableProductDefinition', TFhirAdministrableProductDefinition(resource));
{$ENDIF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
    frtAdverseEvent: ComposeAdverseEvent(json, 'AdverseEvent', TFhirAdverseEvent(resource));
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
    frtAllergyIntolerance: ComposeAllergyIntolerance(json, 'AllergyIntolerance', TFhirAllergyIntolerance(resource));
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
    frtAppointment: ComposeAppointment(json, 'Appointment', TFhirAppointment(resource));
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
    frtAppointmentResponse: ComposeAppointmentResponse(json, 'AppointmentResponse', TFhirAppointmentResponse(resource));
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
    frtAuditEvent: ComposeAuditEvent(json, 'AuditEvent', TFhirAuditEvent(resource));
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
    frtBasic: ComposeBasic(json, 'Basic', TFhirBasic(resource));
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
    frtBinary: ComposeBinary(json, 'Binary', TFhirBinary(resource));
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
    frtBiologicallyDerivedProduct: ComposeBiologicallyDerivedProduct(json, 'BiologicallyDerivedProduct', TFhirBiologicallyDerivedProduct(resource));
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
    frtBodyStructure: ComposeBodyStructure(json, 'BodyStructure', TFhirBodyStructure(resource));
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
    frtBundle: ComposeBundle(json, 'Bundle', TFhirBundle(resource));
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
    frtCapabilityStatement: ComposeCapabilityStatement(json, 'CapabilityStatement', TFhirCapabilityStatement(resource));
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
    frtCarePlan: ComposeCarePlan(json, 'CarePlan', TFhirCarePlan(resource));
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
    frtCareTeam: ComposeCareTeam(json, 'CareTeam', TFhirCareTeam(resource));
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
    frtCatalogEntry: ComposeCatalogEntry(json, 'CatalogEntry', TFhirCatalogEntry(resource));
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
    frtChargeItem: ComposeChargeItem(json, 'ChargeItem', TFhirChargeItem(resource));
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
    frtChargeItemDefinition: ComposeChargeItemDefinition(json, 'ChargeItemDefinition', TFhirChargeItemDefinition(resource));
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CITATION}
    frtCitation: ComposeCitation(json, 'Citation', TFhirCitation(resource));
{$ENDIF FHIR_CITATION}
{$IFDEF FHIR_CLAIM}
    frtClaim: ComposeClaim(json, 'Claim', TFhirClaim(resource));
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
    frtClaimResponse: ComposeClaimResponse(json, 'ClaimResponse', TFhirClaimResponse(resource));
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
    frtClinicalImpression: ComposeClinicalImpression(json, 'ClinicalImpression', TFhirClinicalImpression(resource));
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CLINICALUSEDEFINITION}
    frtClinicalUseDefinition: ComposeClinicalUseDefinition(json, 'ClinicalUseDefinition', TFhirClinicalUseDefinition(resource));
{$ENDIF FHIR_CLINICALUSEDEFINITION}
{$IFDEF FHIR_CODESYSTEM}
    frtCodeSystem: ComposeCodeSystem(json, 'CodeSystem', TFhirCodeSystem(resource));
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
    frtCommunication: ComposeCommunication(json, 'Communication', TFhirCommunication(resource));
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
    frtCommunicationRequest: ComposeCommunicationRequest(json, 'CommunicationRequest', TFhirCommunicationRequest(resource));
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
    frtCompartmentDefinition: ComposeCompartmentDefinition(json, 'CompartmentDefinition', TFhirCompartmentDefinition(resource));
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
    frtComposition: ComposeComposition(json, 'Composition', TFhirComposition(resource));
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
    frtConceptMap: ComposeConceptMap(json, 'ConceptMap', TFhirConceptMap(resource));
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
    frtCondition: ComposeCondition(json, 'Condition', TFhirCondition(resource));
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
    frtConsent: ComposeConsent(json, 'Consent', TFhirConsent(resource));
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
    frtContract: ComposeContract(json, 'Contract', TFhirContract(resource));
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
    frtCoverage: ComposeCoverage(json, 'Coverage', TFhirCoverage(resource));
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
    frtCoverageEligibilityRequest: ComposeCoverageEligibilityRequest(json, 'CoverageEligibilityRequest', TFhirCoverageEligibilityRequest(resource));
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
    frtCoverageEligibilityResponse: ComposeCoverageEligibilityResponse(json, 'CoverageEligibilityResponse', TFhirCoverageEligibilityResponse(resource));
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
    frtDetectedIssue: ComposeDetectedIssue(json, 'DetectedIssue', TFhirDetectedIssue(resource));
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
    frtDevice: ComposeDevice(json, 'Device', TFhirDevice(resource));
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
    frtDeviceDefinition: ComposeDeviceDefinition(json, 'DeviceDefinition', TFhirDeviceDefinition(resource));
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
    frtDeviceMetric: ComposeDeviceMetric(json, 'DeviceMetric', TFhirDeviceMetric(resource));
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
    frtDeviceRequest: ComposeDeviceRequest(json, 'DeviceRequest', TFhirDeviceRequest(resource));
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
    frtDeviceUseStatement: ComposeDeviceUseStatement(json, 'DeviceUseStatement', TFhirDeviceUseStatement(resource));
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
    frtDiagnosticReport: ComposeDiagnosticReport(json, 'DiagnosticReport', TFhirDiagnosticReport(resource));
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
    frtDocumentManifest: ComposeDocumentManifest(json, 'DocumentManifest', TFhirDocumentManifest(resource));
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
    frtDocumentReference: ComposeDocumentReference(json, 'DocumentReference', TFhirDocumentReference(resource));
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ENCOUNTER}
    frtEncounter: ComposeEncounter(json, 'Encounter', TFhirEncounter(resource));
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
    frtEndpoint: ComposeEndpoint(json, 'Endpoint', TFhirEndpoint(resource));
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
    frtEnrollmentRequest: ComposeEnrollmentRequest(json, 'EnrollmentRequest', TFhirEnrollmentRequest(resource));
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
    frtEnrollmentResponse: ComposeEnrollmentResponse(json, 'EnrollmentResponse', TFhirEnrollmentResponse(resource));
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
    frtEpisodeOfCare: ComposeEpisodeOfCare(json, 'EpisodeOfCare', TFhirEpisodeOfCare(resource));
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
    frtEventDefinition: ComposeEventDefinition(json, 'EventDefinition', TFhirEventDefinition(resource));
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
    frtEvidence: ComposeEvidence(json, 'Evidence', TFhirEvidence(resource));
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEREPORT}
    frtEvidenceReport: ComposeEvidenceReport(json, 'EvidenceReport', TFhirEvidenceReport(resource));
{$ENDIF FHIR_EVIDENCEREPORT}
{$IFDEF FHIR_EVIDENCEVARIABLE}
    frtEvidenceVariable: ComposeEvidenceVariable(json, 'EvidenceVariable', TFhirEvidenceVariable(resource));
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
    frtExampleScenario: ComposeExampleScenario(json, 'ExampleScenario', TFhirExampleScenario(resource));
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
    frtExplanationOfBenefit: ComposeExplanationOfBenefit(json, 'ExplanationOfBenefit', TFhirExplanationOfBenefit(resource));
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
    frtFamilyMemberHistory: ComposeFamilyMemberHistory(json, 'FamilyMemberHistory', TFhirFamilyMemberHistory(resource));
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
    frtFlag: ComposeFlag(json, 'Flag', TFhirFlag(resource));
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
    frtGoal: ComposeGoal(json, 'Goal', TFhirGoal(resource));
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
    frtGraphDefinition: ComposeGraphDefinition(json, 'GraphDefinition', TFhirGraphDefinition(resource));
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
    frtGroup: ComposeGroup(json, 'Group', TFhirGroup(resource));
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
    frtGuidanceResponse: ComposeGuidanceResponse(json, 'GuidanceResponse', TFhirGuidanceResponse(resource));
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
    frtHealthcareService: ComposeHealthcareService(json, 'HealthcareService', TFhirHealthcareService(resource));
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
    frtImagingStudy: ComposeImagingStudy(json, 'ImagingStudy', TFhirImagingStudy(resource));
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
    frtImmunization: ComposeImmunization(json, 'Immunization', TFhirImmunization(resource));
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
    frtImmunizationEvaluation: ComposeImmunizationEvaluation(json, 'ImmunizationEvaluation', TFhirImmunizationEvaluation(resource));
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
    frtImmunizationRecommendation: ComposeImmunizationRecommendation(json, 'ImmunizationRecommendation', TFhirImmunizationRecommendation(resource));
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
    frtImplementationGuide: ComposeImplementationGuide(json, 'ImplementationGuide', TFhirImplementationGuide(resource));
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INGREDIENT}
    frtIngredient: ComposeIngredient(json, 'Ingredient', TFhirIngredient(resource));
{$ENDIF FHIR_INGREDIENT}
{$IFDEF FHIR_INSURANCEPLAN}
    frtInsurancePlan: ComposeInsurancePlan(json, 'InsurancePlan', TFhirInsurancePlan(resource));
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
    frtInvoice: ComposeInvoice(json, 'Invoice', TFhirInvoice(resource));
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
    frtLibrary: ComposeLibrary(json, 'Library', TFhirLibrary(resource));
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
    frtLinkage: ComposeLinkage(json, 'Linkage', TFhirLinkage(resource));
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
    frtList: ComposeList(json, 'List', TFhirList(resource));
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
    frtLocation: ComposeLocation(json, 'Location', TFhirLocation(resource));
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MANUFACTUREDITEMDEFINITION}
    frtManufacturedItemDefinition: ComposeManufacturedItemDefinition(json, 'ManufacturedItemDefinition', TFhirManufacturedItemDefinition(resource));
{$ENDIF FHIR_MANUFACTUREDITEMDEFINITION}
{$IFDEF FHIR_MEASURE}
    frtMeasure: ComposeMeasure(json, 'Measure', TFhirMeasure(resource));
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
    frtMeasureReport: ComposeMeasureReport(json, 'MeasureReport', TFhirMeasureReport(resource));
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
    frtMedia: ComposeMedia(json, 'Media', TFhirMedia(resource));
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
    frtMedication: ComposeMedication(json, 'Medication', TFhirMedication(resource));
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
    frtMedicationAdministration: ComposeMedicationAdministration(json, 'MedicationAdministration', TFhirMedicationAdministration(resource));
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
    frtMedicationDispense: ComposeMedicationDispense(json, 'MedicationDispense', TFhirMedicationDispense(resource));
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
    frtMedicationKnowledge: ComposeMedicationKnowledge(json, 'MedicationKnowledge', TFhirMedicationKnowledge(resource));
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
    frtMedicationRequest: ComposeMedicationRequest(json, 'MedicationRequest', TFhirMedicationRequest(resource));
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
    frtMedicationStatement: ComposeMedicationStatement(json, 'MedicationStatement', TFhirMedicationStatement(resource));
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCTDEFINITION}
    frtMedicinalProductDefinition: ComposeMedicinalProductDefinition(json, 'MedicinalProductDefinition', TFhirMedicinalProductDefinition(resource));
{$ENDIF FHIR_MEDICINALPRODUCTDEFINITION}
{$IFDEF FHIR_MESSAGEDEFINITION}
    frtMessageDefinition: ComposeMessageDefinition(json, 'MessageDefinition', TFhirMessageDefinition(resource));
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
    frtMessageHeader: ComposeMessageHeader(json, 'MessageHeader', TFhirMessageHeader(resource));
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
    frtMolecularSequence: ComposeMolecularSequence(json, 'MolecularSequence', TFhirMolecularSequence(resource));
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
    frtNamingSystem: ComposeNamingSystem(json, 'NamingSystem', TFhirNamingSystem(resource));
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
    frtNutritionOrder: ComposeNutritionOrder(json, 'NutritionOrder', TFhirNutritionOrder(resource));
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_NUTRITIONPRODUCT}
    frtNutritionProduct: ComposeNutritionProduct(json, 'NutritionProduct', TFhirNutritionProduct(resource));
{$ENDIF FHIR_NUTRITIONPRODUCT}
{$IFDEF FHIR_OBSERVATION}
    frtObservation: ComposeObservation(json, 'Observation', TFhirObservation(resource));
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
    frtObservationDefinition: ComposeObservationDefinition(json, 'ObservationDefinition', TFhirObservationDefinition(resource));
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
    frtOperationDefinition: ComposeOperationDefinition(json, 'OperationDefinition', TFhirOperationDefinition(resource));
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
    frtOperationOutcome: ComposeOperationOutcome(json, 'OperationOutcome', TFhirOperationOutcome(resource));
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
    frtOrganization: ComposeOrganization(json, 'Organization', TFhirOrganization(resource));
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
    frtOrganizationAffiliation: ComposeOrganizationAffiliation(json, 'OrganizationAffiliation', TFhirOrganizationAffiliation(resource));
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PACKAGEDPRODUCTDEFINITION}
    frtPackagedProductDefinition: ComposePackagedProductDefinition(json, 'PackagedProductDefinition', TFhirPackagedProductDefinition(resource));
{$ENDIF FHIR_PACKAGEDPRODUCTDEFINITION}
{$IFDEF FHIR_PARAMETERS}
    frtParameters: ComposeParameters(json, 'Parameters', TFhirParameters(resource));
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_PATIENT}
    frtPatient: ComposePatient(json, 'Patient', TFhirPatient(resource));
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
    frtPaymentNotice: ComposePaymentNotice(json, 'PaymentNotice', TFhirPaymentNotice(resource));
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
    frtPaymentReconciliation: ComposePaymentReconciliation(json, 'PaymentReconciliation', TFhirPaymentReconciliation(resource));
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
    frtPerson: ComposePerson(json, 'Person', TFhirPerson(resource));
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
    frtPlanDefinition: ComposePlanDefinition(json, 'PlanDefinition', TFhirPlanDefinition(resource));
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
    frtPractitioner: ComposePractitioner(json, 'Practitioner', TFhirPractitioner(resource));
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
    frtPractitionerRole: ComposePractitionerRole(json, 'PractitionerRole', TFhirPractitionerRole(resource));
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
    frtProcedure: ComposeProcedure(json, 'Procedure', TFhirProcedure(resource));
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
    frtProvenance: ComposeProvenance(json, 'Provenance', TFhirProvenance(resource));
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
    frtQuestionnaire: ComposeQuestionnaire(json, 'Questionnaire', TFhirQuestionnaire(resource));
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
    frtQuestionnaireResponse: ComposeQuestionnaireResponse(json, 'QuestionnaireResponse', TFhirQuestionnaireResponse(resource));
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REGULATEDAUTHORIZATION}
    frtRegulatedAuthorization: ComposeRegulatedAuthorization(json, 'RegulatedAuthorization', TFhirRegulatedAuthorization(resource));
{$ENDIF FHIR_REGULATEDAUTHORIZATION}
{$IFDEF FHIR_RELATEDPERSON}
    frtRelatedPerson: ComposeRelatedPerson(json, 'RelatedPerson', TFhirRelatedPerson(resource));
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
    frtRequestGroup: ComposeRequestGroup(json, 'RequestGroup', TFhirRequestGroup(resource));
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHDEFINITION}
    frtResearchDefinition: ComposeResearchDefinition(json, 'ResearchDefinition', TFhirResearchDefinition(resource));
{$ENDIF FHIR_RESEARCHDEFINITION}
{$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
    frtResearchElementDefinition: ComposeResearchElementDefinition(json, 'ResearchElementDefinition', TFhirResearchElementDefinition(resource));
{$ENDIF FHIR_RESEARCHELEMENTDEFINITION}
{$IFDEF FHIR_RESEARCHSTUDY}
    frtResearchStudy: ComposeResearchStudy(json, 'ResearchStudy', TFhirResearchStudy(resource));
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
    frtResearchSubject: ComposeResearchSubject(json, 'ResearchSubject', TFhirResearchSubject(resource));
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
    frtRiskAssessment: ComposeRiskAssessment(json, 'RiskAssessment', TFhirRiskAssessment(resource));
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
    frtSchedule: ComposeSchedule(json, 'Schedule', TFhirSchedule(resource));
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
    frtSearchParameter: ComposeSearchParameter(json, 'SearchParameter', TFhirSearchParameter(resource));
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
    frtServiceRequest: ComposeServiceRequest(json, 'ServiceRequest', TFhirServiceRequest(resource));
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
    frtSlot: ComposeSlot(json, 'Slot', TFhirSlot(resource));
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
    frtSpecimen: ComposeSpecimen(json, 'Specimen', TFhirSpecimen(resource));
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
    frtSpecimenDefinition: ComposeSpecimenDefinition(json, 'SpecimenDefinition', TFhirSpecimenDefinition(resource));
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
    frtStructureDefinition: ComposeStructureDefinition(json, 'StructureDefinition', TFhirStructureDefinition(resource));
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
    frtStructureMap: ComposeStructureMap(json, 'StructureMap', TFhirStructureMap(resource));
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
    frtSubscription: ComposeSubscription(json, 'Subscription', TFhirSubscription(resource));
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSCRIPTIONSTATUS}
    frtSubscriptionStatus: ComposeSubscriptionStatus(json, 'SubscriptionStatus', TFhirSubscriptionStatus(resource));
{$ENDIF FHIR_SUBSCRIPTIONSTATUS}
{$IFDEF FHIR_SUBSCRIPTIONTOPIC}
    frtSubscriptionTopic: ComposeSubscriptionTopic(json, 'SubscriptionTopic', TFhirSubscriptionTopic(resource));
{$ENDIF FHIR_SUBSCRIPTIONTOPIC}
{$IFDEF FHIR_SUBSTANCE}
    frtSubstance: ComposeSubstance(json, 'Substance', TFhirSubstance(resource));
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEDEFINITION}
    frtSubstanceDefinition: ComposeSubstanceDefinition(json, 'SubstanceDefinition', TFhirSubstanceDefinition(resource));
{$ENDIF FHIR_SUBSTANCEDEFINITION}
{$IFDEF FHIR_SUPPLYDELIVERY}
    frtSupplyDelivery: ComposeSupplyDelivery(json, 'SupplyDelivery', TFhirSupplyDelivery(resource));
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
    frtSupplyRequest: ComposeSupplyRequest(json, 'SupplyRequest', TFhirSupplyRequest(resource));
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
    frtTask: ComposeTask(json, 'Task', TFhirTask(resource));
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
    frtTerminologyCapabilities: ComposeTerminologyCapabilities(json, 'TerminologyCapabilities', TFhirTerminologyCapabilities(resource));
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
    frtTestReport: ComposeTestReport(json, 'TestReport', TFhirTestReport(resource));
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
    frtTestScript: ComposeTestScript(json, 'TestScript', TFhirTestScript(resource));
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
    frtValueSet: ComposeValueSet(json, 'ValueSet', TFhirValueSet(resource));
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
    frtVerificationResult: ComposeVerificationResult(json, 'VerificationResult', TFhirVerificationResult(resource));
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
    frtVisionPrescription: ComposeVisionPrescription(json, 'VisionPrescription', TFhirVisionPrescription(resource));
{$ENDIF FHIR_VISIONPRESCRIPTION}
  
  else
    raise EJsonException.Create('Internal error: the resource type '+CODES_TFhirResourceType[resource.ResourceType]+' is not a valid resource type');
  end;
end;

end.

