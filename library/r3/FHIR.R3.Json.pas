unit FHIR.R3.Json;

{$I fhir.r3.inc}

{
  Copyright (c) 2011+, HL7 and Health Intersections Pty Ltd (http://www.healthintersections.com.au)
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
}

interface

// FHIR v3.0.1 generated 2018-06-12T19:15:59+10:00

uses
  SysUtils, Classes, 
  FHIR.Support.Base, FHIR.Support.Utilities, FHIR.Support.Collections, FHIR.Support.Json, 
  FHIR.Base.Parser, FHIR.Base.Objects, 
  FHIR.R3.ParserBase, FHIR.R3.Resources, FHIR.R3.Constants, FHIR.R3.Types;

Type

  TFHIRJsonParser = class (TFHIRJsonParserBase3)
  protected
    function ParseElement(jsn : TJsonObject) : TFhirElement; overload;
    procedure ParseElement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}

    procedure ParseElementProperties(jsn : TJsonObject; element : TFhirElement);
    procedure ParseBackboneElementProperties(jsn : TJsonObject; element : TFhirBackboneElement); overload;
    function ParseBackboneElement(jsn : TJsonObject) : TFhirBackboneElement; overload;
    procedure ParseBackboneElement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}

    procedure ParseEnum(path :String; value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList; Const aNames, aSystems : Array Of String); overload;
    function ParseEnum(path : String; value : TJsonNode; jsn : TJsonObject; Const aNames, aSystems : Array Of String) : TFHIREnum; overload;
    procedure ParseDate(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseDate(value : TJsonNode; jsn : TJsonObject) : TFHIRDate; overload;
    procedure ParseDateTime(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseDateTime(value : TJsonNode; jsn : TJsonObject) : TFHIRDateTime; overload;
    procedure ParseString(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseString(value : TJsonNode; jsn : TJsonObject) : TFHIRString; overload;
    procedure ParseInteger(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseInteger(value : TJsonNode; jsn : TJsonObject) : TFHIRInteger; overload;
    procedure ParseUri(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseUri(value : TJsonNode; jsn : TJsonObject) : TFHIRUri; overload;
    procedure ParseInstant(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseInstant(value : TJsonNode; jsn : TJsonObject) : TFHIRInstant; overload;
    procedure ParseXhtml(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseXhtml(value : TJsonNode; jsn : TJsonObject) : TFHIRXhtml; overload;
    procedure ParseBoolean(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseBoolean(value : TJsonNode; jsn : TJsonObject) : TFHIRBoolean; overload;
    procedure ParseBase64Binary(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseBase64Binary(value : TJsonNode; jsn : TJsonObject) : TFHIRBase64Binary; overload;
    procedure ParseTime(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseTime(value : TJsonNode; jsn : TJsonObject) : TFHIRTime; overload;
    procedure ParseDecimal(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseDecimal(value : TJsonNode; jsn : TJsonObject) : TFHIRDecimal; overload;
    procedure ParseCode(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseCode(value : TJsonNode; jsn : TJsonObject) : TFHIRCode; overload;
    procedure ParseOid(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseOid(value : TJsonNode; jsn : TJsonObject) : TFHIROid; overload;
    procedure ParseUuid(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseUuid(value : TJsonNode; jsn : TJsonObject) : TFHIRUuid; overload;
    procedure ParseMarkdown(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseMarkdown(value : TJsonNode; jsn : TJsonObject) : TFHIRMarkdown; overload;
    procedure ParseUnsignedInt(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseUnsignedInt(value : TJsonNode; jsn : TJsonObject) : TFHIRUnsignedInt; overload;
    procedure ParseId(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParseId(value : TJsonNode; jsn : TJsonObject) : TFHIRId; overload;
    procedure ParsePositiveInt(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList); overload;
    function ParsePositiveInt(value : TJsonNode; jsn : TJsonObject) : TFHIRPositiveInt; overload;

    procedure ParseResourceProperties(jsn : TJsonObject; resource : TFhirResource);
    procedure ParseDomainResourceProperties(jsn : TJsonObject; resource : TFhirDomainResource);
{$IFDEF FHIR_PARAMETERS}
    function ParseParametersParameter(jsn : TJsonObject) : TFhirParametersParameter; overload; {b\}
    procedure ParseParametersParameterProperties(jsn : TJsonObject; result : TFhirParametersParameter); overload; {b\}
    procedure ParseParametersParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseParameters(jsn : TJsonObject) : TFhirParameters; overload;
    procedure ParseParametersProperties(jsn : TJsonObject; result : TFhirParameters); overload;
    procedure ParseParameters(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PARAMETERS}

    function ParseExtension(jsn : TJsonObject) : TFhirExtension; overload;
    procedure ParseExtensionProperties(jsn : TJsonObject; result : TFhirExtension); overload;
    procedure ParseExtension(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNarrative(jsn : TJsonObject) : TFhirNarrative; overload;
    procedure ParseNarrativeProperties(jsn : TJsonObject; result : TFhirNarrative); overload;
    procedure ParseNarrative(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContributor(jsn : TJsonObject) : TFhirContributor; overload;
    procedure ParseContributorProperties(jsn : TJsonObject; result : TFhirContributor); overload;
    procedure ParseContributor(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAttachment(jsn : TJsonObject) : TFhirAttachment; overload;
    procedure ParseAttachmentProperties(jsn : TJsonObject; result : TFhirAttachment); overload;
    procedure ParseAttachment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDataRequirementCodeFilter(jsn : TJsonObject) : TFhirDataRequirementCodeFilter; overload; {b\}
    procedure ParseDataRequirementCodeFilterProperties(jsn : TJsonObject; result : TFhirDataRequirementCodeFilter); overload; {b\}
    procedure ParseDataRequirementCodeFilter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDataRequirementDateFilter(jsn : TJsonObject) : TFhirDataRequirementDateFilter; overload; {b\}
    procedure ParseDataRequirementDateFilterProperties(jsn : TJsonObject; result : TFhirDataRequirementDateFilter); overload; {b\}
    procedure ParseDataRequirementDateFilter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDataRequirement(jsn : TJsonObject) : TFhirDataRequirement; overload;
    procedure ParseDataRequirementProperties(jsn : TJsonObject; result : TFhirDataRequirement); overload;
    procedure ParseDataRequirement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDosage(jsn : TJsonObject) : TFhirDosage; overload;
    procedure ParseDosageProperties(jsn : TJsonObject; result : TFhirDosage); overload;
    procedure ParseDosage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseIdentifier(jsn : TJsonObject) : TFhirIdentifier; overload;
    procedure ParseIdentifierProperties(jsn : TJsonObject; result : TFhirIdentifier); overload;
    procedure ParseIdentifier(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCoding(jsn : TJsonObject) : TFhirCoding; overload;
    procedure ParseCodingProperties(jsn : TJsonObject; result : TFhirCoding); overload;
    procedure ParseCoding(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSampledData(jsn : TJsonObject) : TFhirSampledData; overload;
    procedure ParseSampledDataProperties(jsn : TJsonObject; result : TFhirSampledData); overload;
    procedure ParseSampledData(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseRatio(jsn : TJsonObject) : TFhirRatio; overload;
    procedure ParseRatioProperties(jsn : TJsonObject; result : TFhirRatio); overload;
    procedure ParseRatio(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseReference(jsn : TJsonObject) : TFhirReference; overload;
    procedure ParseReferenceProperties(jsn : TJsonObject; result : TFhirReference); overload;
    procedure ParseReference(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTriggerDefinition(jsn : TJsonObject) : TFhirTriggerDefinition; overload;
    procedure ParseTriggerDefinitionProperties(jsn : TJsonObject; result : TFhirTriggerDefinition); overload;
    procedure ParseTriggerDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePeriod(jsn : TJsonObject) : TFhirPeriod; overload;
    procedure ParsePeriodProperties(jsn : TJsonObject; result : TFhirPeriod); overload;
    procedure ParsePeriod(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseQuantity(jsn : TJsonObject) : TFhirQuantity; overload;
    procedure ParseQuantityProperties(jsn : TJsonObject; result : TFhirQuantity); overload;
    procedure ParseQuantity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseRange(jsn : TJsonObject) : TFhirRange; overload;
    procedure ParseRangeProperties(jsn : TJsonObject; result : TFhirRange); overload;
    procedure ParseRange(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseRelatedArtifact(jsn : TJsonObject) : TFhirRelatedArtifact; overload;
    procedure ParseRelatedArtifactProperties(jsn : TJsonObject; result : TFhirRelatedArtifact); overload;
    procedure ParseRelatedArtifact(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAnnotation(jsn : TJsonObject) : TFhirAnnotation; overload;
    procedure ParseAnnotationProperties(jsn : TJsonObject; result : TFhirAnnotation); overload;
    procedure ParseAnnotation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContactDetail(jsn : TJsonObject) : TFhirContactDetail; overload;
    procedure ParseContactDetailProperties(jsn : TJsonObject; result : TFhirContactDetail); overload;
    procedure ParseContactDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseUsageContext(jsn : TJsonObject) : TFhirUsageContext; overload;
    procedure ParseUsageContextProperties(jsn : TJsonObject; result : TFhirUsageContext); overload;
    procedure ParseUsageContext(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSignature(jsn : TJsonObject) : TFhirSignature; overload;
    procedure ParseSignatureProperties(jsn : TJsonObject; result : TFhirSignature); overload;
    procedure ParseSignature(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCodeableConcept(jsn : TJsonObject) : TFhirCodeableConcept; overload;
    procedure ParseCodeableConceptProperties(jsn : TJsonObject; result : TFhirCodeableConcept); overload;
    procedure ParseCodeableConcept(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseParameterDefinition(jsn : TJsonObject) : TFhirParameterDefinition; overload;
    procedure ParseParameterDefinitionProperties(jsn : TJsonObject; result : TFhirParameterDefinition); overload;
    procedure ParseParameterDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContactPoint(jsn : TJsonObject) : TFhirContactPoint; overload;
    procedure ParseContactPointProperties(jsn : TJsonObject; result : TFhirContactPoint); overload;
    procedure ParseContactPoint(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseHumanName(jsn : TJsonObject) : TFhirHumanName; overload;
    procedure ParseHumanNameProperties(jsn : TJsonObject; result : TFhirHumanName); overload;
    procedure ParseHumanName(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeta(jsn : TJsonObject) : TFhirMeta; overload;
    procedure ParseMetaProperties(jsn : TJsonObject; result : TFhirMeta); overload;
    procedure ParseMeta(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAddress(jsn : TJsonObject) : TFhirAddress; overload;
    procedure ParseAddressProperties(jsn : TJsonObject; result : TFhirAddress); overload;
    procedure ParseAddress(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionSlicing(jsn : TJsonObject) : TFhirElementDefinitionSlicing; overload; {b\}
    procedure ParseElementDefinitionSlicingProperties(jsn : TJsonObject; result : TFhirElementDefinitionSlicing); overload; {b\}
    procedure ParseElementDefinitionSlicing(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionSlicingDiscriminator(jsn : TJsonObject) : TFhirElementDefinitionSlicingDiscriminator; overload; {b\}
    procedure ParseElementDefinitionSlicingDiscriminatorProperties(jsn : TJsonObject; result : TFhirElementDefinitionSlicingDiscriminator); overload; {b\}
    procedure ParseElementDefinitionSlicingDiscriminator(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionBase(jsn : TJsonObject) : TFhirElementDefinitionBase; overload; {b\}
    procedure ParseElementDefinitionBaseProperties(jsn : TJsonObject; result : TFhirElementDefinitionBase); overload; {b\}
    procedure ParseElementDefinitionBase(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionType(jsn : TJsonObject) : TFhirElementDefinitionType; overload; {b\}
    procedure ParseElementDefinitionTypeProperties(jsn : TJsonObject; result : TFhirElementDefinitionType); overload; {b\}
    procedure ParseElementDefinitionType(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionExample(jsn : TJsonObject) : TFhirElementDefinitionExample; overload; {b\}
    procedure ParseElementDefinitionExampleProperties(jsn : TJsonObject; result : TFhirElementDefinitionExample); overload; {b\}
    procedure ParseElementDefinitionExample(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionConstraint(jsn : TJsonObject) : TFhirElementDefinitionConstraint; overload; {b\}
    procedure ParseElementDefinitionConstraintProperties(jsn : TJsonObject; result : TFhirElementDefinitionConstraint); overload; {b\}
    procedure ParseElementDefinitionConstraint(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionBinding(jsn : TJsonObject) : TFhirElementDefinitionBinding; overload; {b\}
    procedure ParseElementDefinitionBindingProperties(jsn : TJsonObject; result : TFhirElementDefinitionBinding); overload; {b\}
    procedure ParseElementDefinitionBinding(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinitionMapping(jsn : TJsonObject) : TFhirElementDefinitionMapping; overload; {b\}
    procedure ParseElementDefinitionMappingProperties(jsn : TJsonObject; result : TFhirElementDefinitionMapping); overload; {b\}
    procedure ParseElementDefinitionMapping(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseElementDefinition(jsn : TJsonObject) : TFhirElementDefinition; overload;
    procedure ParseElementDefinitionProperties(jsn : TJsonObject; result : TFhirElementDefinition); overload;
    procedure ParseElementDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTimingRepeat(jsn : TJsonObject) : TFhirTimingRepeat; overload; {b\}
    procedure ParseTimingRepeatProperties(jsn : TJsonObject; result : TFhirTimingRepeat); overload; {b\}
    procedure ParseTimingRepeat(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTiming(jsn : TJsonObject) : TFhirTiming; overload;
    procedure ParseTimingProperties(jsn : TJsonObject; result : TFhirTiming); overload;
    procedure ParseTiming(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCount(jsn : TJsonObject) : TFhirCount; overload;
    procedure ParseCountProperties(jsn : TJsonObject; result : TFhirCount); overload;
    procedure ParseCount(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMoney(jsn : TJsonObject) : TFhirMoney; overload;
    procedure ParseMoneyProperties(jsn : TJsonObject; result : TFhirMoney); overload;
    procedure ParseMoney(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAge(jsn : TJsonObject) : TFhirAge; overload;
    procedure ParseAgeProperties(jsn : TJsonObject; result : TFhirAge); overload;
    procedure ParseAge(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDistance(jsn : TJsonObject) : TFhirDistance; overload;
    procedure ParseDistanceProperties(jsn : TJsonObject; result : TFhirDistance); overload;
    procedure ParseDistance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDuration(jsn : TJsonObject) : TFhirDuration; overload;
    procedure ParseDurationProperties(jsn : TJsonObject; result : TFhirDuration); overload;
    procedure ParseDuration(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}

{$IFDEF FHIR_ACCOUNT}
    function ParseAccountCoverage(jsn : TJsonObject) : TFhirAccountCoverage; overload; {b\}
    procedure ParseAccountCoverageProperties(jsn : TJsonObject; result : TFhirAccountCoverage); overload; {b\}
    procedure ParseAccountCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAccountGuarantor(jsn : TJsonObject) : TFhirAccountGuarantor; overload; {b\}
    procedure ParseAccountGuarantorProperties(jsn : TJsonObject; result : TFhirAccountGuarantor); overload; {b\}
    procedure ParseAccountGuarantor(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAccount(jsn : TJsonObject) : TFhirAccount; overload;
    procedure ParseAccountProperties(jsn : TJsonObject; result : TFhirAccount); overload;
    procedure ParseAccount(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
    function ParseActivityDefinitionParticipant(jsn : TJsonObject) : TFhirActivityDefinitionParticipant; overload; {b\}
    procedure ParseActivityDefinitionParticipantProperties(jsn : TJsonObject; result : TFhirActivityDefinitionParticipant); overload; {b\}
    procedure ParseActivityDefinitionParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseActivityDefinitionDynamicValue(jsn : TJsonObject) : TFhirActivityDefinitionDynamicValue; overload; {b\}
    procedure ParseActivityDefinitionDynamicValueProperties(jsn : TJsonObject; result : TFhirActivityDefinitionDynamicValue); overload; {b\}
    procedure ParseActivityDefinitionDynamicValue(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseActivityDefinition(jsn : TJsonObject) : TFhirActivityDefinition; overload;
    procedure ParseActivityDefinitionProperties(jsn : TJsonObject; result : TFhirActivityDefinition); overload;
    procedure ParseActivityDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
    function ParseAdverseEventSuspectEntity(jsn : TJsonObject) : TFhirAdverseEventSuspectEntity; overload; {b\}
    procedure ParseAdverseEventSuspectEntityProperties(jsn : TJsonObject; result : TFhirAdverseEventSuspectEntity); overload; {b\}
    procedure ParseAdverseEventSuspectEntity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAdverseEvent(jsn : TJsonObject) : TFhirAdverseEvent; overload;
    procedure ParseAdverseEventProperties(jsn : TJsonObject; result : TFhirAdverseEvent); overload;
    procedure ParseAdverseEvent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
    function ParseAllergyIntoleranceReaction(jsn : TJsonObject) : TFhirAllergyIntoleranceReaction; overload; {b\}
    procedure ParseAllergyIntoleranceReactionProperties(jsn : TJsonObject; result : TFhirAllergyIntoleranceReaction); overload; {b\}
    procedure ParseAllergyIntoleranceReaction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAllergyIntolerance(jsn : TJsonObject) : TFhirAllergyIntolerance; overload;
    procedure ParseAllergyIntoleranceProperties(jsn : TJsonObject; result : TFhirAllergyIntolerance); overload;
    procedure ParseAllergyIntolerance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
    function ParseAppointmentParticipant(jsn : TJsonObject) : TFhirAppointmentParticipant; overload; {b\}
    procedure ParseAppointmentParticipantProperties(jsn : TJsonObject; result : TFhirAppointmentParticipant); overload; {b\}
    procedure ParseAppointmentParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAppointment(jsn : TJsonObject) : TFhirAppointment; overload;
    procedure ParseAppointmentProperties(jsn : TJsonObject; result : TFhirAppointment); overload;
    procedure ParseAppointment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
    function ParseAppointmentResponse(jsn : TJsonObject) : TFhirAppointmentResponse; overload;
    procedure ParseAppointmentResponseProperties(jsn : TJsonObject; result : TFhirAppointmentResponse); overload;
    procedure ParseAppointmentResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
    function ParseAuditEventAgent(jsn : TJsonObject) : TFhirAuditEventAgent; overload; {b\}
    procedure ParseAuditEventAgentProperties(jsn : TJsonObject; result : TFhirAuditEventAgent); overload; {b\}
    procedure ParseAuditEventAgent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAuditEventAgentNetwork(jsn : TJsonObject) : TFhirAuditEventAgentNetwork; overload; {b\}
    procedure ParseAuditEventAgentNetworkProperties(jsn : TJsonObject; result : TFhirAuditEventAgentNetwork); overload; {b\}
    procedure ParseAuditEventAgentNetwork(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAuditEventSource(jsn : TJsonObject) : TFhirAuditEventSource; overload; {b\}
    procedure ParseAuditEventSourceProperties(jsn : TJsonObject; result : TFhirAuditEventSource); overload; {b\}
    procedure ParseAuditEventSource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAuditEventEntity(jsn : TJsonObject) : TFhirAuditEventEntity; overload; {b\}
    procedure ParseAuditEventEntityProperties(jsn : TJsonObject; result : TFhirAuditEventEntity); overload; {b\}
    procedure ParseAuditEventEntity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAuditEventEntityDetail(jsn : TJsonObject) : TFhirAuditEventEntityDetail; overload; {b\}
    procedure ParseAuditEventEntityDetailProperties(jsn : TJsonObject; result : TFhirAuditEventEntityDetail); overload; {b\}
    procedure ParseAuditEventEntityDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseAuditEvent(jsn : TJsonObject) : TFhirAuditEvent; overload;
    procedure ParseAuditEventProperties(jsn : TJsonObject; result : TFhirAuditEvent); overload;
    procedure ParseAuditEvent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
    function ParseBasic(jsn : TJsonObject) : TFhirBasic; overload;
    procedure ParseBasicProperties(jsn : TJsonObject; result : TFhirBasic); overload;
    procedure ParseBasic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
    function ParseBinary(jsn : TJsonObject) : TFhirBinary; overload;
    procedure ParseBinaryProperties(jsn : TJsonObject; result : TFhirBinary); overload;
    procedure ParseBinary(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BODYSITE}
    function ParseBodySite(jsn : TJsonObject) : TFhirBodySite; overload;
    procedure ParseBodySiteProperties(jsn : TJsonObject; result : TFhirBodySite); overload;
    procedure ParseBodySite(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_BODYSITE}
{$IFDEF FHIR_BUNDLE}
    function ParseBundleLink(jsn : TJsonObject) : TFhirBundleLink; overload; {b\}
    procedure ParseBundleLinkProperties(jsn : TJsonObject; result : TFhirBundleLink); overload; {b\}
    procedure ParseBundleLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBundleEntry(jsn : TJsonObject) : TFhirBundleEntry; overload; {b\}
    procedure ParseBundleEntryProperties(jsn : TJsonObject; result : TFhirBundleEntry); overload; {b\}
    procedure ParseBundleEntry(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBundleEntrySearch(jsn : TJsonObject) : TFhirBundleEntrySearch; overload; {b\}
    procedure ParseBundleEntrySearchProperties(jsn : TJsonObject; result : TFhirBundleEntrySearch); overload; {b\}
    procedure ParseBundleEntrySearch(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBundleEntryRequest(jsn : TJsonObject) : TFhirBundleEntryRequest; overload; {b\}
    procedure ParseBundleEntryRequestProperties(jsn : TJsonObject; result : TFhirBundleEntryRequest); overload; {b\}
    procedure ParseBundleEntryRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBundleEntryResponse(jsn : TJsonObject) : TFhirBundleEntryResponse; overload; {b\}
    procedure ParseBundleEntryResponseProperties(jsn : TJsonObject; result : TFhirBundleEntryResponse); overload; {b\}
    procedure ParseBundleEntryResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseBundle(jsn : TJsonObject) : TFhirBundle; overload;
    procedure ParseBundleProperties(jsn : TJsonObject; result : TFhirBundle); overload;
    procedure ParseBundle(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
    function ParseCapabilityStatementSoftware(jsn : TJsonObject) : TFhirCapabilityStatementSoftware; overload; {b\}
    procedure ParseCapabilityStatementSoftwareProperties(jsn : TJsonObject; result : TFhirCapabilityStatementSoftware); overload; {b\}
    procedure ParseCapabilityStatementSoftware(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementImplementation(jsn : TJsonObject) : TFhirCapabilityStatementImplementation; overload; {b\}
    procedure ParseCapabilityStatementImplementationProperties(jsn : TJsonObject; result : TFhirCapabilityStatementImplementation); overload; {b\}
    procedure ParseCapabilityStatementImplementation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRest(jsn : TJsonObject) : TFhirCapabilityStatementRest; overload; {b\}
    procedure ParseCapabilityStatementRestProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRest); overload; {b\}
    procedure ParseCapabilityStatementRest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRestSecurity(jsn : TJsonObject) : TFhirCapabilityStatementRestSecurity; overload; {b\}
    procedure ParseCapabilityStatementRestSecurityProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestSecurity); overload; {b\}
    procedure ParseCapabilityStatementRestSecurity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRestSecurityCertificate(jsn : TJsonObject) : TFhirCapabilityStatementRestSecurityCertificate; overload; {b\}
    procedure ParseCapabilityStatementRestSecurityCertificateProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestSecurityCertificate); overload; {b\}
    procedure ParseCapabilityStatementRestSecurityCertificate(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRestResource(jsn : TJsonObject) : TFhirCapabilityStatementRestResource; overload; {b\}
    procedure ParseCapabilityStatementRestResourceProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestResource); overload; {b\}
    procedure ParseCapabilityStatementRestResource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRestResourceInteraction(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceInteraction; overload; {b\}
    procedure ParseCapabilityStatementRestResourceInteractionProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestResourceInteraction); overload; {b\}
    procedure ParseCapabilityStatementRestResourceInteraction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRestResourceSearchParam(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceSearchParam; overload; {b\}
    procedure ParseCapabilityStatementRestResourceSearchParamProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestResourceSearchParam); overload; {b\}
    procedure ParseCapabilityStatementRestResourceSearchParam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRestInteraction(jsn : TJsonObject) : TFhirCapabilityStatementRestInteraction; overload; {b\}
    procedure ParseCapabilityStatementRestInteractionProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestInteraction); overload; {b\}
    procedure ParseCapabilityStatementRestInteraction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementRestOperation(jsn : TJsonObject) : TFhirCapabilityStatementRestOperation; overload; {b\}
    procedure ParseCapabilityStatementRestOperationProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestOperation); overload; {b\}
    procedure ParseCapabilityStatementRestOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementMessaging(jsn : TJsonObject) : TFhirCapabilityStatementMessaging; overload; {b\}
    procedure ParseCapabilityStatementMessagingProperties(jsn : TJsonObject; result : TFhirCapabilityStatementMessaging); overload; {b\}
    procedure ParseCapabilityStatementMessaging(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementMessagingEndpoint(jsn : TJsonObject) : TFhirCapabilityStatementMessagingEndpoint; overload; {b\}
    procedure ParseCapabilityStatementMessagingEndpointProperties(jsn : TJsonObject; result : TFhirCapabilityStatementMessagingEndpoint); overload; {b\}
    procedure ParseCapabilityStatementMessagingEndpoint(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementMessagingSupportedMessage(jsn : TJsonObject) : TFhirCapabilityStatementMessagingSupportedMessage; overload; {b\}
    procedure ParseCapabilityStatementMessagingSupportedMessageProperties(jsn : TJsonObject; result : TFhirCapabilityStatementMessagingSupportedMessage); overload; {b\}
    procedure ParseCapabilityStatementMessagingSupportedMessage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementMessagingEvent(jsn : TJsonObject) : TFhirCapabilityStatementMessagingEvent; overload; {b\}
    procedure ParseCapabilityStatementMessagingEventProperties(jsn : TJsonObject; result : TFhirCapabilityStatementMessagingEvent); overload; {b\}
    procedure ParseCapabilityStatementMessagingEvent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatementDocument(jsn : TJsonObject) : TFhirCapabilityStatementDocument; overload; {b\}
    procedure ParseCapabilityStatementDocumentProperties(jsn : TJsonObject; result : TFhirCapabilityStatementDocument); overload; {b\}
    procedure ParseCapabilityStatementDocument(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCapabilityStatement(jsn : TJsonObject) : TFhirCapabilityStatement; overload;
    procedure ParseCapabilityStatementProperties(jsn : TJsonObject; result : TFhirCapabilityStatement); overload;
    procedure ParseCapabilityStatement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
    function ParseCarePlanActivity(jsn : TJsonObject) : TFhirCarePlanActivity; overload; {b\}
    procedure ParseCarePlanActivityProperties(jsn : TJsonObject; result : TFhirCarePlanActivity); overload; {b\}
    procedure ParseCarePlanActivity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCarePlanActivityDetail(jsn : TJsonObject) : TFhirCarePlanActivityDetail; overload; {b\}
    procedure ParseCarePlanActivityDetailProperties(jsn : TJsonObject; result : TFhirCarePlanActivityDetail); overload; {b\}
    procedure ParseCarePlanActivityDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCarePlan(jsn : TJsonObject) : TFhirCarePlan; overload;
    procedure ParseCarePlanProperties(jsn : TJsonObject; result : TFhirCarePlan); overload;
    procedure ParseCarePlan(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
    function ParseCareTeamParticipant(jsn : TJsonObject) : TFhirCareTeamParticipant; overload; {b\}
    procedure ParseCareTeamParticipantProperties(jsn : TJsonObject; result : TFhirCareTeamParticipant); overload; {b\}
    procedure ParseCareTeamParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCareTeam(jsn : TJsonObject) : TFhirCareTeam; overload;
    procedure ParseCareTeamProperties(jsn : TJsonObject; result : TFhirCareTeam); overload;
    procedure ParseCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CHARGEITEM}
    function ParseChargeItemParticipant(jsn : TJsonObject) : TFhirChargeItemParticipant; overload; {b\}
    procedure ParseChargeItemParticipantProperties(jsn : TJsonObject; result : TFhirChargeItemParticipant); overload; {b\}
    procedure ParseChargeItemParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseChargeItem(jsn : TJsonObject) : TFhirChargeItem; overload;
    procedure ParseChargeItemProperties(jsn : TJsonObject; result : TFhirChargeItem); overload;
    procedure ParseChargeItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CLAIM}
    function ParseClaimRelated(jsn : TJsonObject) : TFhirClaimRelated; overload; {b\}
    procedure ParseClaimRelatedProperties(jsn : TJsonObject; result : TFhirClaimRelated); overload; {b\}
    procedure ParseClaimRelated(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimPayee(jsn : TJsonObject) : TFhirClaimPayee; overload; {b\}
    procedure ParseClaimPayeeProperties(jsn : TJsonObject; result : TFhirClaimPayee); overload; {b\}
    procedure ParseClaimPayee(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimCareTeam(jsn : TJsonObject) : TFhirClaimCareTeam; overload; {b\}
    procedure ParseClaimCareTeamProperties(jsn : TJsonObject; result : TFhirClaimCareTeam); overload; {b\}
    procedure ParseClaimCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimInformation(jsn : TJsonObject) : TFhirClaimInformation; overload; {b\}
    procedure ParseClaimInformationProperties(jsn : TJsonObject; result : TFhirClaimInformation); overload; {b\}
    procedure ParseClaimInformation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimDiagnosis(jsn : TJsonObject) : TFhirClaimDiagnosis; overload; {b\}
    procedure ParseClaimDiagnosisProperties(jsn : TJsonObject; result : TFhirClaimDiagnosis); overload; {b\}
    procedure ParseClaimDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimProcedure(jsn : TJsonObject) : TFhirClaimProcedure; overload; {b\}
    procedure ParseClaimProcedureProperties(jsn : TJsonObject; result : TFhirClaimProcedure); overload; {b\}
    procedure ParseClaimProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimInsurance(jsn : TJsonObject) : TFhirClaimInsurance; overload; {b\}
    procedure ParseClaimInsuranceProperties(jsn : TJsonObject; result : TFhirClaimInsurance); overload; {b\}
    procedure ParseClaimInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimAccident(jsn : TJsonObject) : TFhirClaimAccident; overload; {b\}
    procedure ParseClaimAccidentProperties(jsn : TJsonObject; result : TFhirClaimAccident); overload; {b\}
    procedure ParseClaimAccident(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimItem(jsn : TJsonObject) : TFhirClaimItem; overload; {b\}
    procedure ParseClaimItemProperties(jsn : TJsonObject; result : TFhirClaimItem); overload; {b\}
    procedure ParseClaimItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimItemDetail(jsn : TJsonObject) : TFhirClaimItemDetail; overload; {b\}
    procedure ParseClaimItemDetailProperties(jsn : TJsonObject; result : TFhirClaimItemDetail); overload; {b\}
    procedure ParseClaimItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimItemDetailSubDetail(jsn : TJsonObject) : TFhirClaimItemDetailSubDetail; overload; {b\}
    procedure ParseClaimItemDetailSubDetailProperties(jsn : TJsonObject; result : TFhirClaimItemDetailSubDetail); overload; {b\}
    procedure ParseClaimItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaim(jsn : TJsonObject) : TFhirClaim; overload;
    procedure ParseClaimProperties(jsn : TJsonObject; result : TFhirClaim); overload;
    procedure ParseClaim(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
    function ParseClaimResponseItem(jsn : TJsonObject) : TFhirClaimResponseItem; overload; {b\}
    procedure ParseClaimResponseItemProperties(jsn : TJsonObject; result : TFhirClaimResponseItem); overload; {b\}
    procedure ParseClaimResponseItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseItemAdjudication(jsn : TJsonObject) : TFhirClaimResponseItemAdjudication; overload; {b\}
    procedure ParseClaimResponseItemAdjudicationProperties(jsn : TJsonObject; result : TFhirClaimResponseItemAdjudication); overload; {b\}
    procedure ParseClaimResponseItemAdjudication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseItemDetail(jsn : TJsonObject) : TFhirClaimResponseItemDetail; overload; {b\}
    procedure ParseClaimResponseItemDetailProperties(jsn : TJsonObject; result : TFhirClaimResponseItemDetail); overload; {b\}
    procedure ParseClaimResponseItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseItemDetailSubDetail(jsn : TJsonObject) : TFhirClaimResponseItemDetailSubDetail; overload; {b\}
    procedure ParseClaimResponseItemDetailSubDetailProperties(jsn : TJsonObject; result : TFhirClaimResponseItemDetailSubDetail); overload; {b\}
    procedure ParseClaimResponseItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseAddItem(jsn : TJsonObject) : TFhirClaimResponseAddItem; overload; {b\}
    procedure ParseClaimResponseAddItemProperties(jsn : TJsonObject; result : TFhirClaimResponseAddItem); overload; {b\}
    procedure ParseClaimResponseAddItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseAddItemDetail(jsn : TJsonObject) : TFhirClaimResponseAddItemDetail; overload; {b\}
    procedure ParseClaimResponseAddItemDetailProperties(jsn : TJsonObject; result : TFhirClaimResponseAddItemDetail); overload; {b\}
    procedure ParseClaimResponseAddItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseError(jsn : TJsonObject) : TFhirClaimResponseError; overload; {b\}
    procedure ParseClaimResponseErrorProperties(jsn : TJsonObject; result : TFhirClaimResponseError); overload; {b\}
    procedure ParseClaimResponseError(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponsePayment(jsn : TJsonObject) : TFhirClaimResponsePayment; overload; {b\}
    procedure ParseClaimResponsePaymentProperties(jsn : TJsonObject; result : TFhirClaimResponsePayment); overload; {b\}
    procedure ParseClaimResponsePayment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseProcessNote(jsn : TJsonObject) : TFhirClaimResponseProcessNote; overload; {b\}
    procedure ParseClaimResponseProcessNoteProperties(jsn : TJsonObject; result : TFhirClaimResponseProcessNote); overload; {b\}
    procedure ParseClaimResponseProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponseInsurance(jsn : TJsonObject) : TFhirClaimResponseInsurance; overload; {b\}
    procedure ParseClaimResponseInsuranceProperties(jsn : TJsonObject; result : TFhirClaimResponseInsurance); overload; {b\}
    procedure ParseClaimResponseInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClaimResponse(jsn : TJsonObject) : TFhirClaimResponse; overload;
    procedure ParseClaimResponseProperties(jsn : TJsonObject; result : TFhirClaimResponse); overload;
    procedure ParseClaimResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
    function ParseClinicalImpressionInvestigation(jsn : TJsonObject) : TFhirClinicalImpressionInvestigation; overload; {b\}
    procedure ParseClinicalImpressionInvestigationProperties(jsn : TJsonObject; result : TFhirClinicalImpressionInvestigation); overload; {b\}
    procedure ParseClinicalImpressionInvestigation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClinicalImpressionFinding(jsn : TJsonObject) : TFhirClinicalImpressionFinding; overload; {b\}
    procedure ParseClinicalImpressionFindingProperties(jsn : TJsonObject; result : TFhirClinicalImpressionFinding); overload; {b\}
    procedure ParseClinicalImpressionFinding(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseClinicalImpression(jsn : TJsonObject) : TFhirClinicalImpression; overload;
    procedure ParseClinicalImpressionProperties(jsn : TJsonObject; result : TFhirClinicalImpression); overload;
    procedure ParseClinicalImpression(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
    function ParseCodeSystemFilter(jsn : TJsonObject) : TFhirCodeSystemFilter; overload; {b\}
    procedure ParseCodeSystemFilterProperties(jsn : TJsonObject; result : TFhirCodeSystemFilter); overload; {b\}
    procedure ParseCodeSystemFilter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCodeSystemProperty(jsn : TJsonObject) : TFhirCodeSystemProperty; overload; {b\}
    procedure ParseCodeSystemPropertyProperties(jsn : TJsonObject; result : TFhirCodeSystemProperty); overload; {b\}
    procedure ParseCodeSystemProperty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCodeSystemConcept(jsn : TJsonObject) : TFhirCodeSystemConcept; overload; {b\}
    procedure ParseCodeSystemConceptProperties(jsn : TJsonObject; result : TFhirCodeSystemConcept); overload; {b\}
    procedure ParseCodeSystemConcept(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCodeSystemConceptDesignation(jsn : TJsonObject) : TFhirCodeSystemConceptDesignation; overload; {b\}
    procedure ParseCodeSystemConceptDesignationProperties(jsn : TJsonObject; result : TFhirCodeSystemConceptDesignation); overload; {b\}
    procedure ParseCodeSystemConceptDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCodeSystemConceptProperty(jsn : TJsonObject) : TFhirCodeSystemConceptProperty; overload; {b\}
    procedure ParseCodeSystemConceptPropertyProperties(jsn : TJsonObject; result : TFhirCodeSystemConceptProperty); overload; {b\}
    procedure ParseCodeSystemConceptProperty(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCodeSystem(jsn : TJsonObject) : TFhirCodeSystem; overload;
    procedure ParseCodeSystemProperties(jsn : TJsonObject; result : TFhirCodeSystem); overload;
    procedure ParseCodeSystem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
    function ParseCommunicationPayload(jsn : TJsonObject) : TFhirCommunicationPayload; overload; {b\}
    procedure ParseCommunicationPayloadProperties(jsn : TJsonObject; result : TFhirCommunicationPayload); overload; {b\}
    procedure ParseCommunicationPayload(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCommunication(jsn : TJsonObject) : TFhirCommunication; overload;
    procedure ParseCommunicationProperties(jsn : TJsonObject; result : TFhirCommunication); overload;
    procedure ParseCommunication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
    function ParseCommunicationRequestPayload(jsn : TJsonObject) : TFhirCommunicationRequestPayload; overload; {b\}
    procedure ParseCommunicationRequestPayloadProperties(jsn : TJsonObject; result : TFhirCommunicationRequestPayload); overload; {b\}
    procedure ParseCommunicationRequestPayload(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCommunicationRequestRequester(jsn : TJsonObject) : TFhirCommunicationRequestRequester; overload; {b\}
    procedure ParseCommunicationRequestRequesterProperties(jsn : TJsonObject; result : TFhirCommunicationRequestRequester); overload; {b\}
    procedure ParseCommunicationRequestRequester(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCommunicationRequest(jsn : TJsonObject) : TFhirCommunicationRequest; overload;
    procedure ParseCommunicationRequestProperties(jsn : TJsonObject; result : TFhirCommunicationRequest); overload;
    procedure ParseCommunicationRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
    function ParseCompartmentDefinitionResource(jsn : TJsonObject) : TFhirCompartmentDefinitionResource; overload; {b\}
    procedure ParseCompartmentDefinitionResourceProperties(jsn : TJsonObject; result : TFhirCompartmentDefinitionResource); overload; {b\}
    procedure ParseCompartmentDefinitionResource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCompartmentDefinition(jsn : TJsonObject) : TFhirCompartmentDefinition; overload;
    procedure ParseCompartmentDefinitionProperties(jsn : TJsonObject; result : TFhirCompartmentDefinition); overload;
    procedure ParseCompartmentDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
    function ParseCompositionAttester(jsn : TJsonObject) : TFhirCompositionAttester; overload; {b\}
    procedure ParseCompositionAttesterProperties(jsn : TJsonObject; result : TFhirCompositionAttester); overload; {b\}
    procedure ParseCompositionAttester(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCompositionRelatesTo(jsn : TJsonObject) : TFhirCompositionRelatesTo; overload; {b\}
    procedure ParseCompositionRelatesToProperties(jsn : TJsonObject; result : TFhirCompositionRelatesTo); overload; {b\}
    procedure ParseCompositionRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCompositionEvent(jsn : TJsonObject) : TFhirCompositionEvent; overload; {b\}
    procedure ParseCompositionEventProperties(jsn : TJsonObject; result : TFhirCompositionEvent); overload; {b\}
    procedure ParseCompositionEvent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCompositionSection(jsn : TJsonObject) : TFhirCompositionSection; overload; {b\}
    procedure ParseCompositionSectionProperties(jsn : TJsonObject; result : TFhirCompositionSection); overload; {b\}
    procedure ParseCompositionSection(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseComposition(jsn : TJsonObject) : TFhirComposition; overload;
    procedure ParseCompositionProperties(jsn : TJsonObject; result : TFhirComposition); overload;
    procedure ParseComposition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
    function ParseConceptMapGroup(jsn : TJsonObject) : TFhirConceptMapGroup; overload; {b\}
    procedure ParseConceptMapGroupProperties(jsn : TJsonObject; result : TFhirConceptMapGroup); overload; {b\}
    procedure ParseConceptMapGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConceptMapGroupElement(jsn : TJsonObject) : TFhirConceptMapGroupElement; overload; {b\}
    procedure ParseConceptMapGroupElementProperties(jsn : TJsonObject; result : TFhirConceptMapGroupElement); overload; {b\}
    procedure ParseConceptMapGroupElement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConceptMapGroupElementTarget(jsn : TJsonObject) : TFhirConceptMapGroupElementTarget; overload; {b\}
    procedure ParseConceptMapGroupElementTargetProperties(jsn : TJsonObject; result : TFhirConceptMapGroupElementTarget); overload; {b\}
    procedure ParseConceptMapGroupElementTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConceptMapGroupElementTargetDependsOn(jsn : TJsonObject) : TFhirConceptMapGroupElementTargetDependsOn; overload; {b\}
    procedure ParseConceptMapGroupElementTargetDependsOnProperties(jsn : TJsonObject; result : TFhirConceptMapGroupElementTargetDependsOn); overload; {b\}
    procedure ParseConceptMapGroupElementTargetDependsOn(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConceptMapGroupUnmapped(jsn : TJsonObject) : TFhirConceptMapGroupUnmapped; overload; {b\}
    procedure ParseConceptMapGroupUnmappedProperties(jsn : TJsonObject; result : TFhirConceptMapGroupUnmapped); overload; {b\}
    procedure ParseConceptMapGroupUnmapped(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConceptMap(jsn : TJsonObject) : TFhirConceptMap; overload;
    procedure ParseConceptMapProperties(jsn : TJsonObject; result : TFhirConceptMap); overload;
    procedure ParseConceptMap(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
    function ParseConditionStage(jsn : TJsonObject) : TFhirConditionStage; overload; {b\}
    procedure ParseConditionStageProperties(jsn : TJsonObject; result : TFhirConditionStage); overload; {b\}
    procedure ParseConditionStage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConditionEvidence(jsn : TJsonObject) : TFhirConditionEvidence; overload; {b\}
    procedure ParseConditionEvidenceProperties(jsn : TJsonObject; result : TFhirConditionEvidence); overload; {b\}
    procedure ParseConditionEvidence(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCondition(jsn : TJsonObject) : TFhirCondition; overload;
    procedure ParseConditionProperties(jsn : TJsonObject; result : TFhirCondition); overload;
    procedure ParseCondition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
    function ParseConsentActor(jsn : TJsonObject) : TFhirConsentActor; overload; {b\}
    procedure ParseConsentActorProperties(jsn : TJsonObject; result : TFhirConsentActor); overload; {b\}
    procedure ParseConsentActor(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConsentPolicy(jsn : TJsonObject) : TFhirConsentPolicy; overload; {b\}
    procedure ParseConsentPolicyProperties(jsn : TJsonObject; result : TFhirConsentPolicy); overload; {b\}
    procedure ParseConsentPolicy(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConsentData(jsn : TJsonObject) : TFhirConsentData; overload; {b\}
    procedure ParseConsentDataProperties(jsn : TJsonObject; result : TFhirConsentData); overload; {b\}
    procedure ParseConsentData(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConsentExcept(jsn : TJsonObject) : TFhirConsentExcept; overload; {b\}
    procedure ParseConsentExceptProperties(jsn : TJsonObject; result : TFhirConsentExcept); overload; {b\}
    procedure ParseConsentExcept(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConsentExceptActor(jsn : TJsonObject) : TFhirConsentExceptActor; overload; {b\}
    procedure ParseConsentExceptActorProperties(jsn : TJsonObject; result : TFhirConsentExceptActor); overload; {b\}
    procedure ParseConsentExceptActor(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConsentExceptData(jsn : TJsonObject) : TFhirConsentExceptData; overload; {b\}
    procedure ParseConsentExceptDataProperties(jsn : TJsonObject; result : TFhirConsentExceptData); overload; {b\}
    procedure ParseConsentExceptData(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseConsent(jsn : TJsonObject) : TFhirConsent; overload;
    procedure ParseConsentProperties(jsn : TJsonObject; result : TFhirConsent); overload;
    procedure ParseConsent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
    function ParseContractAgent(jsn : TJsonObject) : TFhirContractAgent; overload; {b\}
    procedure ParseContractAgentProperties(jsn : TJsonObject; result : TFhirContractAgent); overload; {b\}
    procedure ParseContractAgent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractSigner(jsn : TJsonObject) : TFhirContractSigner; overload; {b\}
    procedure ParseContractSignerProperties(jsn : TJsonObject; result : TFhirContractSigner); overload; {b\}
    procedure ParseContractSigner(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractValuedItem(jsn : TJsonObject) : TFhirContractValuedItem; overload; {b\}
    procedure ParseContractValuedItemProperties(jsn : TJsonObject; result : TFhirContractValuedItem); overload; {b\}
    procedure ParseContractValuedItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractTerm(jsn : TJsonObject) : TFhirContractTerm; overload; {b\}
    procedure ParseContractTermProperties(jsn : TJsonObject; result : TFhirContractTerm); overload; {b\}
    procedure ParseContractTerm(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractTermAgent(jsn : TJsonObject) : TFhirContractTermAgent; overload; {b\}
    procedure ParseContractTermAgentProperties(jsn : TJsonObject; result : TFhirContractTermAgent); overload; {b\}
    procedure ParseContractTermAgent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractTermValuedItem(jsn : TJsonObject) : TFhirContractTermValuedItem; overload; {b\}
    procedure ParseContractTermValuedItemProperties(jsn : TJsonObject; result : TFhirContractTermValuedItem); overload; {b\}
    procedure ParseContractTermValuedItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractFriendly(jsn : TJsonObject) : TFhirContractFriendly; overload; {b\}
    procedure ParseContractFriendlyProperties(jsn : TJsonObject; result : TFhirContractFriendly); overload; {b\}
    procedure ParseContractFriendly(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractLegal(jsn : TJsonObject) : TFhirContractLegal; overload; {b\}
    procedure ParseContractLegalProperties(jsn : TJsonObject; result : TFhirContractLegal); overload; {b\}
    procedure ParseContractLegal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContractRule(jsn : TJsonObject) : TFhirContractRule; overload; {b\}
    procedure ParseContractRuleProperties(jsn : TJsonObject; result : TFhirContractRule); overload; {b\}
    procedure ParseContractRule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseContract(jsn : TJsonObject) : TFhirContract; overload;
    procedure ParseContractProperties(jsn : TJsonObject; result : TFhirContract); overload;
    procedure ParseContract(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
    function ParseCoverageGrouping(jsn : TJsonObject) : TFhirCoverageGrouping; overload; {b\}
    procedure ParseCoverageGroupingProperties(jsn : TJsonObject; result : TFhirCoverageGrouping); overload; {b\}
    procedure ParseCoverageGrouping(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseCoverage(jsn : TJsonObject) : TFhirCoverage; overload;
    procedure ParseCoverageProperties(jsn : TJsonObject; result : TFhirCoverage); overload;
    procedure ParseCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_DATAELEMENT}
    function ParseDataElementMapping(jsn : TJsonObject) : TFhirDataElementMapping; overload; {b\}
    procedure ParseDataElementMappingProperties(jsn : TJsonObject; result : TFhirDataElementMapping); overload; {b\}
    procedure ParseDataElementMapping(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDataElement(jsn : TJsonObject) : TFhirDataElement; overload;
    procedure ParseDataElementProperties(jsn : TJsonObject; result : TFhirDataElement); overload;
    procedure ParseDataElement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DATAELEMENT}
{$IFDEF FHIR_DETECTEDISSUE}
    function ParseDetectedIssueMitigation(jsn : TJsonObject) : TFhirDetectedIssueMitigation; overload; {b\}
    procedure ParseDetectedIssueMitigationProperties(jsn : TJsonObject; result : TFhirDetectedIssueMitigation); overload; {b\}
    procedure ParseDetectedIssueMitigation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDetectedIssue(jsn : TJsonObject) : TFhirDetectedIssue; overload;
    procedure ParseDetectedIssueProperties(jsn : TJsonObject; result : TFhirDetectedIssue); overload;
    procedure ParseDetectedIssue(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
    function ParseDeviceUdi(jsn : TJsonObject) : TFhirDeviceUdi; overload; {b\}
    procedure ParseDeviceUdiProperties(jsn : TJsonObject; result : TFhirDeviceUdi); overload; {b\}
    procedure ParseDeviceUdi(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDevice(jsn : TJsonObject) : TFhirDevice; overload;
    procedure ParseDeviceProperties(jsn : TJsonObject; result : TFhirDevice); overload;
    procedure ParseDevice(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICECOMPONENT}
    function ParseDeviceComponentProductionSpecification(jsn : TJsonObject) : TFhirDeviceComponentProductionSpecification; overload; {b\}
    procedure ParseDeviceComponentProductionSpecificationProperties(jsn : TJsonObject; result : TFhirDeviceComponentProductionSpecification); overload; {b\}
    procedure ParseDeviceComponentProductionSpecification(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDeviceComponent(jsn : TJsonObject) : TFhirDeviceComponent; overload;
    procedure ParseDeviceComponentProperties(jsn : TJsonObject; result : TFhirDeviceComponent); overload;
    procedure ParseDeviceComponent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DEVICECOMPONENT}
{$IFDEF FHIR_DEVICEMETRIC}
    function ParseDeviceMetricCalibration(jsn : TJsonObject) : TFhirDeviceMetricCalibration; overload; {b\}
    procedure ParseDeviceMetricCalibrationProperties(jsn : TJsonObject; result : TFhirDeviceMetricCalibration); overload; {b\}
    procedure ParseDeviceMetricCalibration(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDeviceMetric(jsn : TJsonObject) : TFhirDeviceMetric; overload;
    procedure ParseDeviceMetricProperties(jsn : TJsonObject; result : TFhirDeviceMetric); overload;
    procedure ParseDeviceMetric(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
    function ParseDeviceRequestRequester(jsn : TJsonObject) : TFhirDeviceRequestRequester; overload; {b\}
    procedure ParseDeviceRequestRequesterProperties(jsn : TJsonObject; result : TFhirDeviceRequestRequester); overload; {b\}
    procedure ParseDeviceRequestRequester(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDeviceRequest(jsn : TJsonObject) : TFhirDeviceRequest; overload;
    procedure ParseDeviceRequestProperties(jsn : TJsonObject; result : TFhirDeviceRequest); overload;
    procedure ParseDeviceRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
    function ParseDeviceUseStatement(jsn : TJsonObject) : TFhirDeviceUseStatement; overload;
    procedure ParseDeviceUseStatementProperties(jsn : TJsonObject; result : TFhirDeviceUseStatement); overload;
    procedure ParseDeviceUseStatement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
    function ParseDiagnosticReportPerformer(jsn : TJsonObject) : TFhirDiagnosticReportPerformer; overload; {b\}
    procedure ParseDiagnosticReportPerformerProperties(jsn : TJsonObject; result : TFhirDiagnosticReportPerformer); overload; {b\}
    procedure ParseDiagnosticReportPerformer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDiagnosticReportImage(jsn : TJsonObject) : TFhirDiagnosticReportImage; overload; {b\}
    procedure ParseDiagnosticReportImageProperties(jsn : TJsonObject; result : TFhirDiagnosticReportImage); overload; {b\}
    procedure ParseDiagnosticReportImage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDiagnosticReport(jsn : TJsonObject) : TFhirDiagnosticReport; overload;
    procedure ParseDiagnosticReportProperties(jsn : TJsonObject; result : TFhirDiagnosticReport); overload;
    procedure ParseDiagnosticReport(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
    function ParseDocumentManifestContent(jsn : TJsonObject) : TFhirDocumentManifestContent; overload; {b\}
    procedure ParseDocumentManifestContentProperties(jsn : TJsonObject; result : TFhirDocumentManifestContent); overload; {b\}
    procedure ParseDocumentManifestContent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDocumentManifestRelated(jsn : TJsonObject) : TFhirDocumentManifestRelated; overload; {b\}
    procedure ParseDocumentManifestRelatedProperties(jsn : TJsonObject; result : TFhirDocumentManifestRelated); overload; {b\}
    procedure ParseDocumentManifestRelated(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDocumentManifest(jsn : TJsonObject) : TFhirDocumentManifest; overload;
    procedure ParseDocumentManifestProperties(jsn : TJsonObject; result : TFhirDocumentManifest); overload;
    procedure ParseDocumentManifest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
    function ParseDocumentReferenceRelatesTo(jsn : TJsonObject) : TFhirDocumentReferenceRelatesTo; overload; {b\}
    procedure ParseDocumentReferenceRelatesToProperties(jsn : TJsonObject; result : TFhirDocumentReferenceRelatesTo); overload; {b\}
    procedure ParseDocumentReferenceRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDocumentReferenceContent(jsn : TJsonObject) : TFhirDocumentReferenceContent; overload; {b\}
    procedure ParseDocumentReferenceContentProperties(jsn : TJsonObject; result : TFhirDocumentReferenceContent); overload; {b\}
    procedure ParseDocumentReferenceContent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDocumentReferenceContext(jsn : TJsonObject) : TFhirDocumentReferenceContext; overload; {b\}
    procedure ParseDocumentReferenceContextProperties(jsn : TJsonObject; result : TFhirDocumentReferenceContext); overload; {b\}
    procedure ParseDocumentReferenceContext(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDocumentReferenceContextRelated(jsn : TJsonObject) : TFhirDocumentReferenceContextRelated; overload; {b\}
    procedure ParseDocumentReferenceContextRelatedProperties(jsn : TJsonObject; result : TFhirDocumentReferenceContextRelated); overload; {b\}
    procedure ParseDocumentReferenceContextRelated(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseDocumentReference(jsn : TJsonObject) : TFhirDocumentReference; overload;
    procedure ParseDocumentReferenceProperties(jsn : TJsonObject; result : TFhirDocumentReference); overload;
    procedure ParseDocumentReference(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ELIGIBILITYREQUEST}
    function ParseEligibilityRequest(jsn : TJsonObject) : TFhirEligibilityRequest; overload;
    procedure ParseEligibilityRequestProperties(jsn : TJsonObject; result : TFhirEligibilityRequest); overload;
    procedure ParseEligibilityRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ELIGIBILITYREQUEST}
{$IFDEF FHIR_ELIGIBILITYRESPONSE}
    function ParseEligibilityResponseInsurance(jsn : TJsonObject) : TFhirEligibilityResponseInsurance; overload; {b\}
    procedure ParseEligibilityResponseInsuranceProperties(jsn : TJsonObject; result : TFhirEligibilityResponseInsurance); overload; {b\}
    procedure ParseEligibilityResponseInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEligibilityResponseInsuranceBenefitBalance(jsn : TJsonObject) : TFhirEligibilityResponseInsuranceBenefitBalance; overload; {b\}
    procedure ParseEligibilityResponseInsuranceBenefitBalanceProperties(jsn : TJsonObject; result : TFhirEligibilityResponseInsuranceBenefitBalance); overload; {b\}
    procedure ParseEligibilityResponseInsuranceBenefitBalance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEligibilityResponseInsuranceBenefitBalanceFinancial(jsn : TJsonObject) : TFhirEligibilityResponseInsuranceBenefitBalanceFinancial; overload; {b\}
    procedure ParseEligibilityResponseInsuranceBenefitBalanceFinancialProperties(jsn : TJsonObject; result : TFhirEligibilityResponseInsuranceBenefitBalanceFinancial); overload; {b\}
    procedure ParseEligibilityResponseInsuranceBenefitBalanceFinancial(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEligibilityResponseError(jsn : TJsonObject) : TFhirEligibilityResponseError; overload; {b\}
    procedure ParseEligibilityResponseErrorProperties(jsn : TJsonObject; result : TFhirEligibilityResponseError); overload; {b\}
    procedure ParseEligibilityResponseError(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEligibilityResponse(jsn : TJsonObject) : TFhirEligibilityResponse; overload;
    procedure ParseEligibilityResponseProperties(jsn : TJsonObject; result : TFhirEligibilityResponse); overload;
    procedure ParseEligibilityResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ELIGIBILITYRESPONSE}
{$IFDEF FHIR_ENCOUNTER}
    function ParseEncounterStatusHistory(jsn : TJsonObject) : TFhirEncounterStatusHistory; overload; {b\}
    procedure ParseEncounterStatusHistoryProperties(jsn : TJsonObject; result : TFhirEncounterStatusHistory); overload; {b\}
    procedure ParseEncounterStatusHistory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEncounterClassHistory(jsn : TJsonObject) : TFhirEncounterClassHistory; overload; {b\}
    procedure ParseEncounterClassHistoryProperties(jsn : TJsonObject; result : TFhirEncounterClassHistory); overload; {b\}
    procedure ParseEncounterClassHistory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEncounterParticipant(jsn : TJsonObject) : TFhirEncounterParticipant; overload; {b\}
    procedure ParseEncounterParticipantProperties(jsn : TJsonObject; result : TFhirEncounterParticipant); overload; {b\}
    procedure ParseEncounterParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEncounterDiagnosis(jsn : TJsonObject) : TFhirEncounterDiagnosis; overload; {b\}
    procedure ParseEncounterDiagnosisProperties(jsn : TJsonObject; result : TFhirEncounterDiagnosis); overload; {b\}
    procedure ParseEncounterDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEncounterHospitalization(jsn : TJsonObject) : TFhirEncounterHospitalization; overload; {b\}
    procedure ParseEncounterHospitalizationProperties(jsn : TJsonObject; result : TFhirEncounterHospitalization); overload; {b\}
    procedure ParseEncounterHospitalization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEncounterLocation(jsn : TJsonObject) : TFhirEncounterLocation; overload; {b\}
    procedure ParseEncounterLocationProperties(jsn : TJsonObject; result : TFhirEncounterLocation); overload; {b\}
    procedure ParseEncounterLocation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEncounter(jsn : TJsonObject) : TFhirEncounter; overload;
    procedure ParseEncounterProperties(jsn : TJsonObject; result : TFhirEncounter); overload;
    procedure ParseEncounter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
    function ParseEndpoint(jsn : TJsonObject) : TFhirEndpoint; overload;
    procedure ParseEndpointProperties(jsn : TJsonObject; result : TFhirEndpoint); overload;
    procedure ParseEndpoint(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
    function ParseEnrollmentRequest(jsn : TJsonObject) : TFhirEnrollmentRequest; overload;
    procedure ParseEnrollmentRequestProperties(jsn : TJsonObject; result : TFhirEnrollmentRequest); overload;
    procedure ParseEnrollmentRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
    function ParseEnrollmentResponse(jsn : TJsonObject) : TFhirEnrollmentResponse; overload;
    procedure ParseEnrollmentResponseProperties(jsn : TJsonObject; result : TFhirEnrollmentResponse); overload;
    procedure ParseEnrollmentResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
    function ParseEpisodeOfCareStatusHistory(jsn : TJsonObject) : TFhirEpisodeOfCareStatusHistory; overload; {b\}
    procedure ParseEpisodeOfCareStatusHistoryProperties(jsn : TJsonObject; result : TFhirEpisodeOfCareStatusHistory); overload; {b\}
    procedure ParseEpisodeOfCareStatusHistory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEpisodeOfCareDiagnosis(jsn : TJsonObject) : TFhirEpisodeOfCareDiagnosis; overload; {b\}
    procedure ParseEpisodeOfCareDiagnosisProperties(jsn : TJsonObject; result : TFhirEpisodeOfCareDiagnosis); overload; {b\}
    procedure ParseEpisodeOfCareDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseEpisodeOfCare(jsn : TJsonObject) : TFhirEpisodeOfCare; overload;
    procedure ParseEpisodeOfCareProperties(jsn : TJsonObject; result : TFhirEpisodeOfCare); overload;
    procedure ParseEpisodeOfCare(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EXPANSIONPROFILE}
    function ParseExpansionProfileFixedVersion(jsn : TJsonObject) : TFhirExpansionProfileFixedVersion; overload; {b\}
    procedure ParseExpansionProfileFixedVersionProperties(jsn : TJsonObject; result : TFhirExpansionProfileFixedVersion); overload; {b\}
    procedure ParseExpansionProfileFixedVersion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExpansionProfileExcludedSystem(jsn : TJsonObject) : TFhirExpansionProfileExcludedSystem; overload; {b\}
    procedure ParseExpansionProfileExcludedSystemProperties(jsn : TJsonObject; result : TFhirExpansionProfileExcludedSystem); overload; {b\}
    procedure ParseExpansionProfileExcludedSystem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExpansionProfileDesignation(jsn : TJsonObject) : TFhirExpansionProfileDesignation; overload; {b\}
    procedure ParseExpansionProfileDesignationProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignation); overload; {b\}
    procedure ParseExpansionProfileDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExpansionProfileDesignationInclude(jsn : TJsonObject) : TFhirExpansionProfileDesignationInclude; overload; {b\}
    procedure ParseExpansionProfileDesignationIncludeProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationInclude); overload; {b\}
    procedure ParseExpansionProfileDesignationInclude(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExpansionProfileDesignationIncludeDesignation(jsn : TJsonObject) : TFhirExpansionProfileDesignationIncludeDesignation; overload; {b\}
    procedure ParseExpansionProfileDesignationIncludeDesignationProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationIncludeDesignation); overload; {b\}
    procedure ParseExpansionProfileDesignationIncludeDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExpansionProfileDesignationExclude(jsn : TJsonObject) : TFhirExpansionProfileDesignationExclude; overload; {b\}
    procedure ParseExpansionProfileDesignationExcludeProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationExclude); overload; {b\}
    procedure ParseExpansionProfileDesignationExclude(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExpansionProfileDesignationExcludeDesignation(jsn : TJsonObject) : TFhirExpansionProfileDesignationExcludeDesignation; overload; {b\}
    procedure ParseExpansionProfileDesignationExcludeDesignationProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationExcludeDesignation); overload; {b\}
    procedure ParseExpansionProfileDesignationExcludeDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExpansionProfile(jsn : TJsonObject) : TFhirExpansionProfile; overload;
    procedure ParseExpansionProfileProperties(jsn : TJsonObject; result : TFhirExpansionProfile); overload;
    procedure ParseExpansionProfile(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_EXPANSIONPROFILE}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
    function ParseExplanationOfBenefitRelated(jsn : TJsonObject) : TFhirExplanationOfBenefitRelated; overload; {b\}
    procedure ParseExplanationOfBenefitRelatedProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitRelated); overload; {b\}
    procedure ParseExplanationOfBenefitRelated(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitPayee(jsn : TJsonObject) : TFhirExplanationOfBenefitPayee; overload; {b\}
    procedure ParseExplanationOfBenefitPayeeProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitPayee); overload; {b\}
    procedure ParseExplanationOfBenefitPayee(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitInformation(jsn : TJsonObject) : TFhirExplanationOfBenefitInformation; overload; {b\}
    procedure ParseExplanationOfBenefitInformationProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitInformation); overload; {b\}
    procedure ParseExplanationOfBenefitInformation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitCareTeam(jsn : TJsonObject) : TFhirExplanationOfBenefitCareTeam; overload; {b\}
    procedure ParseExplanationOfBenefitCareTeamProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitCareTeam); overload; {b\}
    procedure ParseExplanationOfBenefitCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitDiagnosis(jsn : TJsonObject) : TFhirExplanationOfBenefitDiagnosis; overload; {b\}
    procedure ParseExplanationOfBenefitDiagnosisProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitDiagnosis); overload; {b\}
    procedure ParseExplanationOfBenefitDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitProcedure(jsn : TJsonObject) : TFhirExplanationOfBenefitProcedure; overload; {b\}
    procedure ParseExplanationOfBenefitProcedureProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitProcedure); overload; {b\}
    procedure ParseExplanationOfBenefitProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitInsurance(jsn : TJsonObject) : TFhirExplanationOfBenefitInsurance; overload; {b\}
    procedure ParseExplanationOfBenefitInsuranceProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitInsurance); overload; {b\}
    procedure ParseExplanationOfBenefitInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitAccident(jsn : TJsonObject) : TFhirExplanationOfBenefitAccident; overload; {b\}
    procedure ParseExplanationOfBenefitAccidentProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitAccident); overload; {b\}
    procedure ParseExplanationOfBenefitAccident(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitItem(jsn : TJsonObject) : TFhirExplanationOfBenefitItem; overload; {b\}
    procedure ParseExplanationOfBenefitItemProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItem); overload; {b\}
    procedure ParseExplanationOfBenefitItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitItemAdjudication(jsn : TJsonObject) : TFhirExplanationOfBenefitItemAdjudication; overload; {b\}
    procedure ParseExplanationOfBenefitItemAdjudicationProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItemAdjudication); overload; {b\}
    procedure ParseExplanationOfBenefitItemAdjudication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitItemDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitItemDetail; overload; {b\}
    procedure ParseExplanationOfBenefitItemDetailProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItemDetail); overload; {b\}
    procedure ParseExplanationOfBenefitItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitItemDetailSubDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitItemDetailSubDetail; overload; {b\}
    procedure ParseExplanationOfBenefitItemDetailSubDetailProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItemDetailSubDetail); overload; {b\}
    procedure ParseExplanationOfBenefitItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitAddItem(jsn : TJsonObject) : TFhirExplanationOfBenefitAddItem; overload; {b\}
    procedure ParseExplanationOfBenefitAddItemProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitAddItem); overload; {b\}
    procedure ParseExplanationOfBenefitAddItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitAddItemDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitAddItemDetail; overload; {b\}
    procedure ParseExplanationOfBenefitAddItemDetailProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitAddItemDetail); overload; {b\}
    procedure ParseExplanationOfBenefitAddItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitPayment(jsn : TJsonObject) : TFhirExplanationOfBenefitPayment; overload; {b\}
    procedure ParseExplanationOfBenefitPaymentProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitPayment); overload; {b\}
    procedure ParseExplanationOfBenefitPayment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitProcessNote(jsn : TJsonObject) : TFhirExplanationOfBenefitProcessNote; overload; {b\}
    procedure ParseExplanationOfBenefitProcessNoteProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitProcessNote); overload; {b\}
    procedure ParseExplanationOfBenefitProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitBenefitBalance(jsn : TJsonObject) : TFhirExplanationOfBenefitBenefitBalance; overload; {b\}
    procedure ParseExplanationOfBenefitBenefitBalanceProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitBenefitBalance); overload; {b\}
    procedure ParseExplanationOfBenefitBenefitBalance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefitBenefitBalanceFinancial(jsn : TJsonObject) : TFhirExplanationOfBenefitBenefitBalanceFinancial; overload; {b\}
    procedure ParseExplanationOfBenefitBenefitBalanceFinancialProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitBenefitBalanceFinancial); overload; {b\}
    procedure ParseExplanationOfBenefitBenefitBalanceFinancial(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseExplanationOfBenefit(jsn : TJsonObject) : TFhirExplanationOfBenefit; overload;
    procedure ParseExplanationOfBenefitProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefit); overload;
    procedure ParseExplanationOfBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
    function ParseFamilyMemberHistoryCondition(jsn : TJsonObject) : TFhirFamilyMemberHistoryCondition; overload; {b\}
    procedure ParseFamilyMemberHistoryConditionProperties(jsn : TJsonObject; result : TFhirFamilyMemberHistoryCondition); overload; {b\}
    procedure ParseFamilyMemberHistoryCondition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseFamilyMemberHistory(jsn : TJsonObject) : TFhirFamilyMemberHistory; overload;
    procedure ParseFamilyMemberHistoryProperties(jsn : TJsonObject; result : TFhirFamilyMemberHistory); overload;
    procedure ParseFamilyMemberHistory(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
    function ParseFlag(jsn : TJsonObject) : TFhirFlag; overload;
    procedure ParseFlagProperties(jsn : TJsonObject; result : TFhirFlag); overload;
    procedure ParseFlag(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
    function ParseGoalTarget(jsn : TJsonObject) : TFhirGoalTarget; overload; {b\}
    procedure ParseGoalTargetProperties(jsn : TJsonObject; result : TFhirGoalTarget); overload; {b\}
    procedure ParseGoalTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseGoal(jsn : TJsonObject) : TFhirGoal; overload;
    procedure ParseGoalProperties(jsn : TJsonObject; result : TFhirGoal); overload;
    procedure ParseGoal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
    function ParseGraphDefinitionLink(jsn : TJsonObject) : TFhirGraphDefinitionLink; overload; {b\}
    procedure ParseGraphDefinitionLinkProperties(jsn : TJsonObject; result : TFhirGraphDefinitionLink); overload; {b\}
    procedure ParseGraphDefinitionLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseGraphDefinitionLinkTarget(jsn : TJsonObject) : TFhirGraphDefinitionLinkTarget; overload; {b\}
    procedure ParseGraphDefinitionLinkTargetProperties(jsn : TJsonObject; result : TFhirGraphDefinitionLinkTarget); overload; {b\}
    procedure ParseGraphDefinitionLinkTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseGraphDefinitionLinkTargetCompartment(jsn : TJsonObject) : TFhirGraphDefinitionLinkTargetCompartment; overload; {b\}
    procedure ParseGraphDefinitionLinkTargetCompartmentProperties(jsn : TJsonObject; result : TFhirGraphDefinitionLinkTargetCompartment); overload; {b\}
    procedure ParseGraphDefinitionLinkTargetCompartment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseGraphDefinition(jsn : TJsonObject) : TFhirGraphDefinition; overload;
    procedure ParseGraphDefinitionProperties(jsn : TJsonObject; result : TFhirGraphDefinition); overload;
    procedure ParseGraphDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
    function ParseGroupCharacteristic(jsn : TJsonObject) : TFhirGroupCharacteristic; overload; {b\}
    procedure ParseGroupCharacteristicProperties(jsn : TJsonObject; result : TFhirGroupCharacteristic); overload; {b\}
    procedure ParseGroupCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseGroupMember(jsn : TJsonObject) : TFhirGroupMember; overload; {b\}
    procedure ParseGroupMemberProperties(jsn : TJsonObject; result : TFhirGroupMember); overload; {b\}
    procedure ParseGroupMember(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseGroup(jsn : TJsonObject) : TFhirGroup; overload;
    procedure ParseGroupProperties(jsn : TJsonObject; result : TFhirGroup); overload;
    procedure ParseGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
    function ParseGuidanceResponse(jsn : TJsonObject) : TFhirGuidanceResponse; overload;
    procedure ParseGuidanceResponseProperties(jsn : TJsonObject; result : TFhirGuidanceResponse); overload;
    procedure ParseGuidanceResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
    function ParseHealthcareServiceAvailableTime(jsn : TJsonObject) : TFhirHealthcareServiceAvailableTime; overload; {b\}
    procedure ParseHealthcareServiceAvailableTimeProperties(jsn : TJsonObject; result : TFhirHealthcareServiceAvailableTime); overload; {b\}
    procedure ParseHealthcareServiceAvailableTime(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseHealthcareServiceNotAvailable(jsn : TJsonObject) : TFhirHealthcareServiceNotAvailable; overload; {b\}
    procedure ParseHealthcareServiceNotAvailableProperties(jsn : TJsonObject; result : TFhirHealthcareServiceNotAvailable); overload; {b\}
    procedure ParseHealthcareServiceNotAvailable(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseHealthcareService(jsn : TJsonObject) : TFhirHealthcareService; overload;
    procedure ParseHealthcareServiceProperties(jsn : TJsonObject; result : TFhirHealthcareService); overload;
    procedure ParseHealthcareService(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGMANIFEST}
    function ParseImagingManifestStudy(jsn : TJsonObject) : TFhirImagingManifestStudy; overload; {b\}
    procedure ParseImagingManifestStudyProperties(jsn : TJsonObject; result : TFhirImagingManifestStudy); overload; {b\}
    procedure ParseImagingManifestStudy(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImagingManifestStudySeries(jsn : TJsonObject) : TFhirImagingManifestStudySeries; overload; {b\}
    procedure ParseImagingManifestStudySeriesProperties(jsn : TJsonObject; result : TFhirImagingManifestStudySeries); overload; {b\}
    procedure ParseImagingManifestStudySeries(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImagingManifestStudySeriesInstance(jsn : TJsonObject) : TFhirImagingManifestStudySeriesInstance; overload; {b\}
    procedure ParseImagingManifestStudySeriesInstanceProperties(jsn : TJsonObject; result : TFhirImagingManifestStudySeriesInstance); overload; {b\}
    procedure ParseImagingManifestStudySeriesInstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImagingManifest(jsn : TJsonObject) : TFhirImagingManifest; overload;
    procedure ParseImagingManifestProperties(jsn : TJsonObject; result : TFhirImagingManifest); overload;
    procedure ParseImagingManifest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_IMAGINGMANIFEST}
{$IFDEF FHIR_IMAGINGSTUDY}
    function ParseImagingStudySeries(jsn : TJsonObject) : TFhirImagingStudySeries; overload; {b\}
    procedure ParseImagingStudySeriesProperties(jsn : TJsonObject; result : TFhirImagingStudySeries); overload; {b\}
    procedure ParseImagingStudySeries(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImagingStudySeriesInstance(jsn : TJsonObject) : TFhirImagingStudySeriesInstance; overload; {b\}
    procedure ParseImagingStudySeriesInstanceProperties(jsn : TJsonObject; result : TFhirImagingStudySeriesInstance); overload; {b\}
    procedure ParseImagingStudySeriesInstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImagingStudy(jsn : TJsonObject) : TFhirImagingStudy; overload;
    procedure ParseImagingStudyProperties(jsn : TJsonObject; result : TFhirImagingStudy); overload;
    procedure ParseImagingStudy(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
    function ParseImmunizationPractitioner(jsn : TJsonObject) : TFhirImmunizationPractitioner; overload; {b\}
    procedure ParseImmunizationPractitionerProperties(jsn : TJsonObject; result : TFhirImmunizationPractitioner); overload; {b\}
    procedure ParseImmunizationPractitioner(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImmunizationExplanation(jsn : TJsonObject) : TFhirImmunizationExplanation; overload; {b\}
    procedure ParseImmunizationExplanationProperties(jsn : TJsonObject; result : TFhirImmunizationExplanation); overload; {b\}
    procedure ParseImmunizationExplanation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImmunizationReaction(jsn : TJsonObject) : TFhirImmunizationReaction; overload; {b\}
    procedure ParseImmunizationReactionProperties(jsn : TJsonObject; result : TFhirImmunizationReaction); overload; {b\}
    procedure ParseImmunizationReaction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImmunizationVaccinationProtocol(jsn : TJsonObject) : TFhirImmunizationVaccinationProtocol; overload; {b\}
    procedure ParseImmunizationVaccinationProtocolProperties(jsn : TJsonObject; result : TFhirImmunizationVaccinationProtocol); overload; {b\}
    procedure ParseImmunizationVaccinationProtocol(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImmunization(jsn : TJsonObject) : TFhirImmunization; overload;
    procedure ParseImmunizationProperties(jsn : TJsonObject; result : TFhirImmunization); overload;
    procedure ParseImmunization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
    function ParseImmunizationRecommendationRecommendation(jsn : TJsonObject) : TFhirImmunizationRecommendationRecommendation; overload; {b\}
    procedure ParseImmunizationRecommendationRecommendationProperties(jsn : TJsonObject; result : TFhirImmunizationRecommendationRecommendation); overload; {b\}
    procedure ParseImmunizationRecommendationRecommendation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImmunizationRecommendationRecommendationDateCriterion(jsn : TJsonObject) : TFhirImmunizationRecommendationRecommendationDateCriterion; overload; {b\}
    procedure ParseImmunizationRecommendationRecommendationDateCriterionProperties(jsn : TJsonObject; result : TFhirImmunizationRecommendationRecommendationDateCriterion); overload; {b\}
    procedure ParseImmunizationRecommendationRecommendationDateCriterion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImmunizationRecommendationRecommendationProtocol(jsn : TJsonObject) : TFhirImmunizationRecommendationRecommendationProtocol; overload; {b\}
    procedure ParseImmunizationRecommendationRecommendationProtocolProperties(jsn : TJsonObject; result : TFhirImmunizationRecommendationRecommendationProtocol); overload; {b\}
    procedure ParseImmunizationRecommendationRecommendationProtocol(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImmunizationRecommendation(jsn : TJsonObject) : TFhirImmunizationRecommendation; overload;
    procedure ParseImmunizationRecommendationProperties(jsn : TJsonObject; result : TFhirImmunizationRecommendation); overload;
    procedure ParseImmunizationRecommendation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
    function ParseImplementationGuideDependency(jsn : TJsonObject) : TFhirImplementationGuideDependency; overload; {b\}
    procedure ParseImplementationGuideDependencyProperties(jsn : TJsonObject; result : TFhirImplementationGuideDependency); overload; {b\}
    procedure ParseImplementationGuideDependency(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuidePackage(jsn : TJsonObject) : TFhirImplementationGuidePackage; overload; {b\}
    procedure ParseImplementationGuidePackageProperties(jsn : TJsonObject; result : TFhirImplementationGuidePackage); overload; {b\}
    procedure ParseImplementationGuidePackage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuidePackageResource(jsn : TJsonObject) : TFhirImplementationGuidePackageResource; overload; {b\}
    procedure ParseImplementationGuidePackageResourceProperties(jsn : TJsonObject; result : TFhirImplementationGuidePackageResource); overload; {b\}
    procedure ParseImplementationGuidePackageResource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuideGlobal(jsn : TJsonObject) : TFhirImplementationGuideGlobal; overload; {b\}
    procedure ParseImplementationGuideGlobalProperties(jsn : TJsonObject; result : TFhirImplementationGuideGlobal); overload; {b\}
    procedure ParseImplementationGuideGlobal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuidePage(jsn : TJsonObject) : TFhirImplementationGuidePage; overload; {b\}
    procedure ParseImplementationGuidePageProperties(jsn : TJsonObject; result : TFhirImplementationGuidePage); overload; {b\}
    procedure ParseImplementationGuidePage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseImplementationGuide(jsn : TJsonObject) : TFhirImplementationGuide; overload;
    procedure ParseImplementationGuideProperties(jsn : TJsonObject; result : TFhirImplementationGuide); overload;
    procedure ParseImplementationGuide(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_LIBRARY}
    function ParseLibrary(jsn : TJsonObject) : TFhirLibrary; overload;
    procedure ParseLibraryProperties(jsn : TJsonObject; result : TFhirLibrary); overload;
    procedure ParseLibrary(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
    function ParseLinkageItem(jsn : TJsonObject) : TFhirLinkageItem; overload; {b\}
    procedure ParseLinkageItemProperties(jsn : TJsonObject; result : TFhirLinkageItem); overload; {b\}
    procedure ParseLinkageItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseLinkage(jsn : TJsonObject) : TFhirLinkage; overload;
    procedure ParseLinkageProperties(jsn : TJsonObject; result : TFhirLinkage); overload;
    procedure ParseLinkage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
    function ParseListEntry(jsn : TJsonObject) : TFhirListEntry; overload; {b\}
    procedure ParseListEntryProperties(jsn : TJsonObject; result : TFhirListEntry); overload; {b\}
    procedure ParseListEntry(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseList(jsn : TJsonObject) : TFhirList; overload;
    procedure ParseListProperties(jsn : TJsonObject; result : TFhirList); overload;
    procedure ParseList(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
    function ParseLocationPosition(jsn : TJsonObject) : TFhirLocationPosition; overload; {b\}
    procedure ParseLocationPositionProperties(jsn : TJsonObject; result : TFhirLocationPosition); overload; {b\}
    procedure ParseLocationPosition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseLocation(jsn : TJsonObject) : TFhirLocation; overload;
    procedure ParseLocationProperties(jsn : TJsonObject; result : TFhirLocation); overload;
    procedure ParseLocation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
    function ParseMeasureGroup(jsn : TJsonObject) : TFhirMeasureGroup; overload; {b\}
    procedure ParseMeasureGroupProperties(jsn : TJsonObject; result : TFhirMeasureGroup); overload; {b\}
    procedure ParseMeasureGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureGroupPopulation(jsn : TJsonObject) : TFhirMeasureGroupPopulation; overload; {b\}
    procedure ParseMeasureGroupPopulationProperties(jsn : TJsonObject; result : TFhirMeasureGroupPopulation); overload; {b\}
    procedure ParseMeasureGroupPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureGroupStratifier(jsn : TJsonObject) : TFhirMeasureGroupStratifier; overload; {b\}
    procedure ParseMeasureGroupStratifierProperties(jsn : TJsonObject; result : TFhirMeasureGroupStratifier); overload; {b\}
    procedure ParseMeasureGroupStratifier(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureSupplementalData(jsn : TJsonObject) : TFhirMeasureSupplementalData; overload; {b\}
    procedure ParseMeasureSupplementalDataProperties(jsn : TJsonObject; result : TFhirMeasureSupplementalData); overload; {b\}
    procedure ParseMeasureSupplementalData(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasure(jsn : TJsonObject) : TFhirMeasure; overload;
    procedure ParseMeasureProperties(jsn : TJsonObject; result : TFhirMeasure); overload;
    procedure ParseMeasure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
    function ParseMeasureReportGroup(jsn : TJsonObject) : TFhirMeasureReportGroup; overload; {b\}
    procedure ParseMeasureReportGroupProperties(jsn : TJsonObject; result : TFhirMeasureReportGroup); overload; {b\}
    procedure ParseMeasureReportGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureReportGroupPopulation(jsn : TJsonObject) : TFhirMeasureReportGroupPopulation; overload; {b\}
    procedure ParseMeasureReportGroupPopulationProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupPopulation); overload; {b\}
    procedure ParseMeasureReportGroupPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureReportGroupStratifier(jsn : TJsonObject) : TFhirMeasureReportGroupStratifier; overload; {b\}
    procedure ParseMeasureReportGroupStratifierProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupStratifier); overload; {b\}
    procedure ParseMeasureReportGroupStratifier(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureReportGroupStratifierStratum(jsn : TJsonObject) : TFhirMeasureReportGroupStratifierStratum; overload; {b\}
    procedure ParseMeasureReportGroupStratifierStratumProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupStratifierStratum); overload; {b\}
    procedure ParseMeasureReportGroupStratifierStratum(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureReportGroupStratifierStratumPopulation(jsn : TJsonObject) : TFhirMeasureReportGroupStratifierStratumPopulation; overload; {b\}
    procedure ParseMeasureReportGroupStratifierStratumPopulationProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupStratifierStratumPopulation); overload; {b\}
    procedure ParseMeasureReportGroupStratifierStratumPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMeasureReport(jsn : TJsonObject) : TFhirMeasureReport; overload;
    procedure ParseMeasureReportProperties(jsn : TJsonObject; result : TFhirMeasureReport); overload;
    procedure ParseMeasureReport(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
    function ParseMedia(jsn : TJsonObject) : TFhirMedia; overload;
    procedure ParseMediaProperties(jsn : TJsonObject; result : TFhirMedia); overload;
    procedure ParseMedia(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
    function ParseMedicationIngredient(jsn : TJsonObject) : TFhirMedicationIngredient; overload; {b\}
    procedure ParseMedicationIngredientProperties(jsn : TJsonObject; result : TFhirMedicationIngredient); overload; {b\}
    procedure ParseMedicationIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationPackage(jsn : TJsonObject) : TFhirMedicationPackage; overload; {b\}
    procedure ParseMedicationPackageProperties(jsn : TJsonObject; result : TFhirMedicationPackage); overload; {b\}
    procedure ParseMedicationPackage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationPackageContent(jsn : TJsonObject) : TFhirMedicationPackageContent; overload; {b\}
    procedure ParseMedicationPackageContentProperties(jsn : TJsonObject; result : TFhirMedicationPackageContent); overload; {b\}
    procedure ParseMedicationPackageContent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationPackageBatch(jsn : TJsonObject) : TFhirMedicationPackageBatch; overload; {b\}
    procedure ParseMedicationPackageBatchProperties(jsn : TJsonObject; result : TFhirMedicationPackageBatch); overload; {b\}
    procedure ParseMedicationPackageBatch(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedication(jsn : TJsonObject) : TFhirMedication; overload;
    procedure ParseMedicationProperties(jsn : TJsonObject; result : TFhirMedication); overload;
    procedure ParseMedication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
    function ParseMedicationAdministrationPerformer(jsn : TJsonObject) : TFhirMedicationAdministrationPerformer; overload; {b\}
    procedure ParseMedicationAdministrationPerformerProperties(jsn : TJsonObject; result : TFhirMedicationAdministrationPerformer); overload; {b\}
    procedure ParseMedicationAdministrationPerformer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationAdministrationDosage(jsn : TJsonObject) : TFhirMedicationAdministrationDosage; overload; {b\}
    procedure ParseMedicationAdministrationDosageProperties(jsn : TJsonObject; result : TFhirMedicationAdministrationDosage); overload; {b\}
    procedure ParseMedicationAdministrationDosage(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationAdministration(jsn : TJsonObject) : TFhirMedicationAdministration; overload;
    procedure ParseMedicationAdministrationProperties(jsn : TJsonObject; result : TFhirMedicationAdministration); overload;
    procedure ParseMedicationAdministration(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
    function ParseMedicationDispensePerformer(jsn : TJsonObject) : TFhirMedicationDispensePerformer; overload; {b\}
    procedure ParseMedicationDispensePerformerProperties(jsn : TJsonObject; result : TFhirMedicationDispensePerformer); overload; {b\}
    procedure ParseMedicationDispensePerformer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationDispenseSubstitution(jsn : TJsonObject) : TFhirMedicationDispenseSubstitution; overload; {b\}
    procedure ParseMedicationDispenseSubstitutionProperties(jsn : TJsonObject; result : TFhirMedicationDispenseSubstitution); overload; {b\}
    procedure ParseMedicationDispenseSubstitution(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationDispense(jsn : TJsonObject) : TFhirMedicationDispense; overload;
    procedure ParseMedicationDispenseProperties(jsn : TJsonObject; result : TFhirMedicationDispense); overload;
    procedure ParseMedicationDispense(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONREQUEST}
    function ParseMedicationRequestRequester(jsn : TJsonObject) : TFhirMedicationRequestRequester; overload; {b\}
    procedure ParseMedicationRequestRequesterProperties(jsn : TJsonObject; result : TFhirMedicationRequestRequester); overload; {b\}
    procedure ParseMedicationRequestRequester(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationRequestDispenseRequest(jsn : TJsonObject) : TFhirMedicationRequestDispenseRequest; overload; {b\}
    procedure ParseMedicationRequestDispenseRequestProperties(jsn : TJsonObject; result : TFhirMedicationRequestDispenseRequest); overload; {b\}
    procedure ParseMedicationRequestDispenseRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationRequestSubstitution(jsn : TJsonObject) : TFhirMedicationRequestSubstitution; overload; {b\}
    procedure ParseMedicationRequestSubstitutionProperties(jsn : TJsonObject; result : TFhirMedicationRequestSubstitution); overload; {b\}
    procedure ParseMedicationRequestSubstitution(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMedicationRequest(jsn : TJsonObject) : TFhirMedicationRequest; overload;
    procedure ParseMedicationRequestProperties(jsn : TJsonObject; result : TFhirMedicationRequest); overload;
    procedure ParseMedicationRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
    function ParseMedicationStatement(jsn : TJsonObject) : TFhirMedicationStatement; overload;
    procedure ParseMedicationStatementProperties(jsn : TJsonObject; result : TFhirMedicationStatement); overload;
    procedure ParseMedicationStatement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MESSAGEDEFINITION}
    function ParseMessageDefinitionFocus(jsn : TJsonObject) : TFhirMessageDefinitionFocus; overload; {b\}
    procedure ParseMessageDefinitionFocusProperties(jsn : TJsonObject; result : TFhirMessageDefinitionFocus); overload; {b\}
    procedure ParseMessageDefinitionFocus(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMessageDefinitionAllowedResponse(jsn : TJsonObject) : TFhirMessageDefinitionAllowedResponse; overload; {b\}
    procedure ParseMessageDefinitionAllowedResponseProperties(jsn : TJsonObject; result : TFhirMessageDefinitionAllowedResponse); overload; {b\}
    procedure ParseMessageDefinitionAllowedResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMessageDefinition(jsn : TJsonObject) : TFhirMessageDefinition; overload;
    procedure ParseMessageDefinitionProperties(jsn : TJsonObject; result : TFhirMessageDefinition); overload;
    procedure ParseMessageDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
    function ParseMessageHeaderDestination(jsn : TJsonObject) : TFhirMessageHeaderDestination; overload; {b\}
    procedure ParseMessageHeaderDestinationProperties(jsn : TJsonObject; result : TFhirMessageHeaderDestination); overload; {b\}
    procedure ParseMessageHeaderDestination(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMessageHeaderSource(jsn : TJsonObject) : TFhirMessageHeaderSource; overload; {b\}
    procedure ParseMessageHeaderSourceProperties(jsn : TJsonObject; result : TFhirMessageHeaderSource); overload; {b\}
    procedure ParseMessageHeaderSource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMessageHeaderResponse(jsn : TJsonObject) : TFhirMessageHeaderResponse; overload; {b\}
    procedure ParseMessageHeaderResponseProperties(jsn : TJsonObject; result : TFhirMessageHeaderResponse); overload; {b\}
    procedure ParseMessageHeaderResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseMessageHeader(jsn : TJsonObject) : TFhirMessageHeader; overload;
    procedure ParseMessageHeaderProperties(jsn : TJsonObject; result : TFhirMessageHeader); overload;
    procedure ParseMessageHeader(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_NAMINGSYSTEM}
    function ParseNamingSystemUniqueId(jsn : TJsonObject) : TFhirNamingSystemUniqueId; overload; {b\}
    procedure ParseNamingSystemUniqueIdProperties(jsn : TJsonObject; result : TFhirNamingSystemUniqueId); overload; {b\}
    procedure ParseNamingSystemUniqueId(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNamingSystem(jsn : TJsonObject) : TFhirNamingSystem; overload;
    procedure ParseNamingSystemProperties(jsn : TJsonObject; result : TFhirNamingSystem); overload;
    procedure ParseNamingSystem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
    function ParseNutritionOrderOralDiet(jsn : TJsonObject) : TFhirNutritionOrderOralDiet; overload; {b\}
    procedure ParseNutritionOrderOralDietProperties(jsn : TJsonObject; result : TFhirNutritionOrderOralDiet); overload; {b\}
    procedure ParseNutritionOrderOralDiet(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNutritionOrderOralDietNutrient(jsn : TJsonObject) : TFhirNutritionOrderOralDietNutrient; overload; {b\}
    procedure ParseNutritionOrderOralDietNutrientProperties(jsn : TJsonObject; result : TFhirNutritionOrderOralDietNutrient); overload; {b\}
    procedure ParseNutritionOrderOralDietNutrient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNutritionOrderOralDietTexture(jsn : TJsonObject) : TFhirNutritionOrderOralDietTexture; overload; {b\}
    procedure ParseNutritionOrderOralDietTextureProperties(jsn : TJsonObject; result : TFhirNutritionOrderOralDietTexture); overload; {b\}
    procedure ParseNutritionOrderOralDietTexture(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNutritionOrderSupplement(jsn : TJsonObject) : TFhirNutritionOrderSupplement; overload; {b\}
    procedure ParseNutritionOrderSupplementProperties(jsn : TJsonObject; result : TFhirNutritionOrderSupplement); overload; {b\}
    procedure ParseNutritionOrderSupplement(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNutritionOrderEnteralFormula(jsn : TJsonObject) : TFhirNutritionOrderEnteralFormula; overload; {b\}
    procedure ParseNutritionOrderEnteralFormulaProperties(jsn : TJsonObject; result : TFhirNutritionOrderEnteralFormula); overload; {b\}
    procedure ParseNutritionOrderEnteralFormula(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNutritionOrderEnteralFormulaAdministration(jsn : TJsonObject) : TFhirNutritionOrderEnteralFormulaAdministration; overload; {b\}
    procedure ParseNutritionOrderEnteralFormulaAdministrationProperties(jsn : TJsonObject; result : TFhirNutritionOrderEnteralFormulaAdministration); overload; {b\}
    procedure ParseNutritionOrderEnteralFormulaAdministration(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseNutritionOrder(jsn : TJsonObject) : TFhirNutritionOrder; overload;
    procedure ParseNutritionOrderProperties(jsn : TJsonObject; result : TFhirNutritionOrder); overload;
    procedure ParseNutritionOrder(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
    function ParseObservationReferenceRange(jsn : TJsonObject) : TFhirObservationReferenceRange; overload; {b\}
    procedure ParseObservationReferenceRangeProperties(jsn : TJsonObject; result : TFhirObservationReferenceRange); overload; {b\}
    procedure ParseObservationReferenceRange(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseObservationRelated(jsn : TJsonObject) : TFhirObservationRelated; overload; {b\}
    procedure ParseObservationRelatedProperties(jsn : TJsonObject; result : TFhirObservationRelated); overload; {b\}
    procedure ParseObservationRelated(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseObservationComponent(jsn : TJsonObject) : TFhirObservationComponent; overload; {b\}
    procedure ParseObservationComponentProperties(jsn : TJsonObject; result : TFhirObservationComponent); overload; {b\}
    procedure ParseObservationComponent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseObservation(jsn : TJsonObject) : TFhirObservation; overload;
    procedure ParseObservationProperties(jsn : TJsonObject; result : TFhirObservation); overload;
    procedure ParseObservation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OPERATIONDEFINITION}
    function ParseOperationDefinitionParameter(jsn : TJsonObject) : TFhirOperationDefinitionParameter; overload; {b\}
    procedure ParseOperationDefinitionParameterProperties(jsn : TJsonObject; result : TFhirOperationDefinitionParameter); overload; {b\}
    procedure ParseOperationDefinitionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOperationDefinitionParameterBinding(jsn : TJsonObject) : TFhirOperationDefinitionParameterBinding; overload; {b\}
    procedure ParseOperationDefinitionParameterBindingProperties(jsn : TJsonObject; result : TFhirOperationDefinitionParameterBinding); overload; {b\}
    procedure ParseOperationDefinitionParameterBinding(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOperationDefinitionOverload(jsn : TJsonObject) : TFhirOperationDefinitionOverload; overload; {b\}
    procedure ParseOperationDefinitionOverloadProperties(jsn : TJsonObject; result : TFhirOperationDefinitionOverload); overload; {b\}
    procedure ParseOperationDefinitionOverload(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOperationDefinition(jsn : TJsonObject) : TFhirOperationDefinition; overload;
    procedure ParseOperationDefinitionProperties(jsn : TJsonObject; result : TFhirOperationDefinition); overload;
    procedure ParseOperationDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
    function ParseOperationOutcomeIssue(jsn : TJsonObject) : TFhirOperationOutcomeIssue; overload; {b\}
    procedure ParseOperationOutcomeIssueProperties(jsn : TJsonObject; result : TFhirOperationOutcomeIssue); overload; {b\}
    procedure ParseOperationOutcomeIssue(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOperationOutcome(jsn : TJsonObject) : TFhirOperationOutcome; overload;
    procedure ParseOperationOutcomeProperties(jsn : TJsonObject; result : TFhirOperationOutcome); overload;
    procedure ParseOperationOutcome(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
    function ParseOrganizationContact(jsn : TJsonObject) : TFhirOrganizationContact; overload; {b\}
    procedure ParseOrganizationContactProperties(jsn : TJsonObject; result : TFhirOrganizationContact); overload; {b\}
    procedure ParseOrganizationContact(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseOrganization(jsn : TJsonObject) : TFhirOrganization; overload;
    procedure ParseOrganizationProperties(jsn : TJsonObject; result : TFhirOrganization); overload;
    procedure ParseOrganization(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_PATIENT}
    function ParsePatientContact(jsn : TJsonObject) : TFhirPatientContact; overload; {b\}
    procedure ParsePatientContactProperties(jsn : TJsonObject; result : TFhirPatientContact); overload; {b\}
    procedure ParsePatientContact(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePatientAnimal(jsn : TJsonObject) : TFhirPatientAnimal; overload; {b\}
    procedure ParsePatientAnimalProperties(jsn : TJsonObject; result : TFhirPatientAnimal); overload; {b\}
    procedure ParsePatientAnimal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePatientCommunication(jsn : TJsonObject) : TFhirPatientCommunication; overload; {b\}
    procedure ParsePatientCommunicationProperties(jsn : TJsonObject; result : TFhirPatientCommunication); overload; {b\}
    procedure ParsePatientCommunication(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePatientLink(jsn : TJsonObject) : TFhirPatientLink; overload; {b\}
    procedure ParsePatientLinkProperties(jsn : TJsonObject; result : TFhirPatientLink); overload; {b\}
    procedure ParsePatientLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePatient(jsn : TJsonObject) : TFhirPatient; overload;
    procedure ParsePatientProperties(jsn : TJsonObject; result : TFhirPatient); overload;
    procedure ParsePatient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
    function ParsePaymentNotice(jsn : TJsonObject) : TFhirPaymentNotice; overload;
    procedure ParsePaymentNoticeProperties(jsn : TJsonObject; result : TFhirPaymentNotice); overload;
    procedure ParsePaymentNotice(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
    function ParsePaymentReconciliationDetail(jsn : TJsonObject) : TFhirPaymentReconciliationDetail; overload; {b\}
    procedure ParsePaymentReconciliationDetailProperties(jsn : TJsonObject; result : TFhirPaymentReconciliationDetail); overload; {b\}
    procedure ParsePaymentReconciliationDetail(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePaymentReconciliationProcessNote(jsn : TJsonObject) : TFhirPaymentReconciliationProcessNote; overload; {b\}
    procedure ParsePaymentReconciliationProcessNoteProperties(jsn : TJsonObject; result : TFhirPaymentReconciliationProcessNote); overload; {b\}
    procedure ParsePaymentReconciliationProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePaymentReconciliation(jsn : TJsonObject) : TFhirPaymentReconciliation; overload;
    procedure ParsePaymentReconciliationProperties(jsn : TJsonObject; result : TFhirPaymentReconciliation); overload;
    procedure ParsePaymentReconciliation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
    function ParsePersonLink(jsn : TJsonObject) : TFhirPersonLink; overload; {b\}
    procedure ParsePersonLinkProperties(jsn : TJsonObject; result : TFhirPersonLink); overload; {b\}
    procedure ParsePersonLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePerson(jsn : TJsonObject) : TFhirPerson; overload;
    procedure ParsePersonProperties(jsn : TJsonObject; result : TFhirPerson); overload;
    procedure ParsePerson(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
    function ParsePlanDefinitionGoal(jsn : TJsonObject) : TFhirPlanDefinitionGoal; overload; {b\}
    procedure ParsePlanDefinitionGoalProperties(jsn : TJsonObject; result : TFhirPlanDefinitionGoal); overload; {b\}
    procedure ParsePlanDefinitionGoal(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePlanDefinitionGoalTarget(jsn : TJsonObject) : TFhirPlanDefinitionGoalTarget; overload; {b\}
    procedure ParsePlanDefinitionGoalTargetProperties(jsn : TJsonObject; result : TFhirPlanDefinitionGoalTarget); overload; {b\}
    procedure ParsePlanDefinitionGoalTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePlanDefinitionAction(jsn : TJsonObject) : TFhirPlanDefinitionAction; overload; {b\}
    procedure ParsePlanDefinitionActionProperties(jsn : TJsonObject; result : TFhirPlanDefinitionAction); overload; {b\}
    procedure ParsePlanDefinitionAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePlanDefinitionActionCondition(jsn : TJsonObject) : TFhirPlanDefinitionActionCondition; overload; {b\}
    procedure ParsePlanDefinitionActionConditionProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionCondition); overload; {b\}
    procedure ParsePlanDefinitionActionCondition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePlanDefinitionActionRelatedAction(jsn : TJsonObject) : TFhirPlanDefinitionActionRelatedAction; overload; {b\}
    procedure ParsePlanDefinitionActionRelatedActionProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionRelatedAction); overload; {b\}
    procedure ParsePlanDefinitionActionRelatedAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePlanDefinitionActionParticipant(jsn : TJsonObject) : TFhirPlanDefinitionActionParticipant; overload; {b\}
    procedure ParsePlanDefinitionActionParticipantProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionParticipant); overload; {b\}
    procedure ParsePlanDefinitionActionParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePlanDefinitionActionDynamicValue(jsn : TJsonObject) : TFhirPlanDefinitionActionDynamicValue; overload; {b\}
    procedure ParsePlanDefinitionActionDynamicValueProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionDynamicValue); overload; {b\}
    procedure ParsePlanDefinitionActionDynamicValue(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePlanDefinition(jsn : TJsonObject) : TFhirPlanDefinition; overload;
    procedure ParsePlanDefinitionProperties(jsn : TJsonObject; result : TFhirPlanDefinition); overload;
    procedure ParsePlanDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
    function ParsePractitionerQualification(jsn : TJsonObject) : TFhirPractitionerQualification; overload; {b\}
    procedure ParsePractitionerQualificationProperties(jsn : TJsonObject; result : TFhirPractitionerQualification); overload; {b\}
    procedure ParsePractitionerQualification(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePractitioner(jsn : TJsonObject) : TFhirPractitioner; overload;
    procedure ParsePractitionerProperties(jsn : TJsonObject; result : TFhirPractitioner); overload;
    procedure ParsePractitioner(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
    function ParsePractitionerRoleAvailableTime(jsn : TJsonObject) : TFhirPractitionerRoleAvailableTime; overload; {b\}
    procedure ParsePractitionerRoleAvailableTimeProperties(jsn : TJsonObject; result : TFhirPractitionerRoleAvailableTime); overload; {b\}
    procedure ParsePractitionerRoleAvailableTime(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePractitionerRoleNotAvailable(jsn : TJsonObject) : TFhirPractitionerRoleNotAvailable; overload; {b\}
    procedure ParsePractitionerRoleNotAvailableProperties(jsn : TJsonObject; result : TFhirPractitionerRoleNotAvailable); overload; {b\}
    procedure ParsePractitionerRoleNotAvailable(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParsePractitionerRole(jsn : TJsonObject) : TFhirPractitionerRole; overload;
    procedure ParsePractitionerRoleProperties(jsn : TJsonObject; result : TFhirPractitionerRole); overload;
    procedure ParsePractitionerRole(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
    function ParseProcedurePerformer(jsn : TJsonObject) : TFhirProcedurePerformer; overload; {b\}
    procedure ParseProcedurePerformerProperties(jsn : TJsonObject; result : TFhirProcedurePerformer); overload; {b\}
    procedure ParseProcedurePerformer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProcedureFocalDevice(jsn : TJsonObject) : TFhirProcedureFocalDevice; overload; {b\}
    procedure ParseProcedureFocalDeviceProperties(jsn : TJsonObject; result : TFhirProcedureFocalDevice); overload; {b\}
    procedure ParseProcedureFocalDevice(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProcedure(jsn : TJsonObject) : TFhirProcedure; overload;
    procedure ParseProcedureProperties(jsn : TJsonObject; result : TFhirProcedure); overload;
    procedure ParseProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROCEDUREREQUEST}
    function ParseProcedureRequestRequester(jsn : TJsonObject) : TFhirProcedureRequestRequester; overload; {b\}
    procedure ParseProcedureRequestRequesterProperties(jsn : TJsonObject; result : TFhirProcedureRequestRequester); overload; {b\}
    procedure ParseProcedureRequestRequester(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProcedureRequest(jsn : TJsonObject) : TFhirProcedureRequest; overload;
    procedure ParseProcedureRequestProperties(jsn : TJsonObject; result : TFhirProcedureRequest); overload;
    procedure ParseProcedureRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PROCEDUREREQUEST}
{$IFDEF FHIR_PROCESSREQUEST}
    function ParseProcessRequestItem(jsn : TJsonObject) : TFhirProcessRequestItem; overload; {b\}
    procedure ParseProcessRequestItemProperties(jsn : TJsonObject; result : TFhirProcessRequestItem); overload; {b\}
    procedure ParseProcessRequestItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProcessRequest(jsn : TJsonObject) : TFhirProcessRequest; overload;
    procedure ParseProcessRequestProperties(jsn : TJsonObject; result : TFhirProcessRequest); overload;
    procedure ParseProcessRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PROCESSREQUEST}
{$IFDEF FHIR_PROCESSRESPONSE}
    function ParseProcessResponseProcessNote(jsn : TJsonObject) : TFhirProcessResponseProcessNote; overload; {b\}
    procedure ParseProcessResponseProcessNoteProperties(jsn : TJsonObject; result : TFhirProcessResponseProcessNote); overload; {b\}
    procedure ParseProcessResponseProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProcessResponse(jsn : TJsonObject) : TFhirProcessResponse; overload;
    procedure ParseProcessResponseProperties(jsn : TJsonObject; result : TFhirProcessResponse); overload;
    procedure ParseProcessResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PROCESSRESPONSE}
{$IFDEF FHIR_PROVENANCE}
    function ParseProvenanceAgent(jsn : TJsonObject) : TFhirProvenanceAgent; overload; {b\}
    procedure ParseProvenanceAgentProperties(jsn : TJsonObject; result : TFhirProvenanceAgent); overload; {b\}
    procedure ParseProvenanceAgent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProvenanceEntity(jsn : TJsonObject) : TFhirProvenanceEntity; overload; {b\}
    procedure ParseProvenanceEntityProperties(jsn : TJsonObject; result : TFhirProvenanceEntity); overload; {b\}
    procedure ParseProvenanceEntity(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseProvenance(jsn : TJsonObject) : TFhirProvenance; overload;
    procedure ParseProvenanceProperties(jsn : TJsonObject; result : TFhirProvenance); overload;
    procedure ParseProvenance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
    function ParseQuestionnaireItem(jsn : TJsonObject) : TFhirQuestionnaireItem; overload; {b\}
    procedure ParseQuestionnaireItemProperties(jsn : TJsonObject; result : TFhirQuestionnaireItem); overload; {b\}
    procedure ParseQuestionnaireItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseQuestionnaireItemEnableWhen(jsn : TJsonObject) : TFhirQuestionnaireItemEnableWhen; overload; {b\}
    procedure ParseQuestionnaireItemEnableWhenProperties(jsn : TJsonObject; result : TFhirQuestionnaireItemEnableWhen); overload; {b\}
    procedure ParseQuestionnaireItemEnableWhen(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseQuestionnaireItemOption(jsn : TJsonObject) : TFhirQuestionnaireItemOption; overload; {b\}
    procedure ParseQuestionnaireItemOptionProperties(jsn : TJsonObject; result : TFhirQuestionnaireItemOption); overload; {b\}
    procedure ParseQuestionnaireItemOption(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseQuestionnaire(jsn : TJsonObject) : TFhirQuestionnaire; overload;
    procedure ParseQuestionnaireProperties(jsn : TJsonObject; result : TFhirQuestionnaire); overload;
    procedure ParseQuestionnaire(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
    function ParseQuestionnaireResponseItem(jsn : TJsonObject) : TFhirQuestionnaireResponseItem; overload; {b\}
    procedure ParseQuestionnaireResponseItemProperties(jsn : TJsonObject; result : TFhirQuestionnaireResponseItem); overload; {b\}
    procedure ParseQuestionnaireResponseItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseQuestionnaireResponseItemAnswer(jsn : TJsonObject) : TFhirQuestionnaireResponseItemAnswer; overload; {b\}
    procedure ParseQuestionnaireResponseItemAnswerProperties(jsn : TJsonObject; result : TFhirQuestionnaireResponseItemAnswer); overload; {b\}
    procedure ParseQuestionnaireResponseItemAnswer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseQuestionnaireResponse(jsn : TJsonObject) : TFhirQuestionnaireResponse; overload;
    procedure ParseQuestionnaireResponseProperties(jsn : TJsonObject; result : TFhirQuestionnaireResponse); overload;
    procedure ParseQuestionnaireResponse(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REFERRALREQUEST}
    function ParseReferralRequestRequester(jsn : TJsonObject) : TFhirReferralRequestRequester; overload; {b\}
    procedure ParseReferralRequestRequesterProperties(jsn : TJsonObject; result : TFhirReferralRequestRequester); overload; {b\}
    procedure ParseReferralRequestRequester(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseReferralRequest(jsn : TJsonObject) : TFhirReferralRequest; overload;
    procedure ParseReferralRequestProperties(jsn : TJsonObject; result : TFhirReferralRequest); overload;
    procedure ParseReferralRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_REFERRALREQUEST}
{$IFDEF FHIR_RELATEDPERSON}
    function ParseRelatedPerson(jsn : TJsonObject) : TFhirRelatedPerson; overload;
    procedure ParseRelatedPersonProperties(jsn : TJsonObject; result : TFhirRelatedPerson); overload;
    procedure ParseRelatedPerson(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
    function ParseRequestGroupAction(jsn : TJsonObject) : TFhirRequestGroupAction; overload; {b\}
    procedure ParseRequestGroupActionProperties(jsn : TJsonObject; result : TFhirRequestGroupAction); overload; {b\}
    procedure ParseRequestGroupAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseRequestGroupActionCondition(jsn : TJsonObject) : TFhirRequestGroupActionCondition; overload; {b\}
    procedure ParseRequestGroupActionConditionProperties(jsn : TJsonObject; result : TFhirRequestGroupActionCondition); overload; {b\}
    procedure ParseRequestGroupActionCondition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseRequestGroupActionRelatedAction(jsn : TJsonObject) : TFhirRequestGroupActionRelatedAction; overload; {b\}
    procedure ParseRequestGroupActionRelatedActionProperties(jsn : TJsonObject; result : TFhirRequestGroupActionRelatedAction); overload; {b\}
    procedure ParseRequestGroupActionRelatedAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseRequestGroup(jsn : TJsonObject) : TFhirRequestGroup; overload;
    procedure ParseRequestGroupProperties(jsn : TJsonObject; result : TFhirRequestGroup); overload;
    procedure ParseRequestGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
    function ParseResearchStudyArm(jsn : TJsonObject) : TFhirResearchStudyArm; overload; {b\}
    procedure ParseResearchStudyArmProperties(jsn : TJsonObject; result : TFhirResearchStudyArm); overload; {b\}
    procedure ParseResearchStudyArm(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseResearchStudy(jsn : TJsonObject) : TFhirResearchStudy; overload;
    procedure ParseResearchStudyProperties(jsn : TJsonObject; result : TFhirResearchStudy); overload;
    procedure ParseResearchStudy(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
    function ParseResearchSubject(jsn : TJsonObject) : TFhirResearchSubject; overload;
    procedure ParseResearchSubjectProperties(jsn : TJsonObject; result : TFhirResearchSubject); overload;
    procedure ParseResearchSubject(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
    function ParseRiskAssessmentPrediction(jsn : TJsonObject) : TFhirRiskAssessmentPrediction; overload; {b\}
    procedure ParseRiskAssessmentPredictionProperties(jsn : TJsonObject; result : TFhirRiskAssessmentPrediction); overload; {b\}
    procedure ParseRiskAssessmentPrediction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseRiskAssessment(jsn : TJsonObject) : TFhirRiskAssessment; overload;
    procedure ParseRiskAssessmentProperties(jsn : TJsonObject; result : TFhirRiskAssessment); overload;
    procedure ParseRiskAssessment(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
    function ParseSchedule(jsn : TJsonObject) : TFhirSchedule; overload;
    procedure ParseScheduleProperties(jsn : TJsonObject; result : TFhirSchedule); overload;
    procedure ParseSchedule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
    function ParseSearchParameterComponent(jsn : TJsonObject) : TFhirSearchParameterComponent; overload; {b\}
    procedure ParseSearchParameterComponentProperties(jsn : TJsonObject; result : TFhirSearchParameterComponent); overload; {b\}
    procedure ParseSearchParameterComponent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSearchParameter(jsn : TJsonObject) : TFhirSearchParameter; overload;
    procedure ParseSearchParameterProperties(jsn : TJsonObject; result : TFhirSearchParameter); overload;
    procedure ParseSearchParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SEQUENCE}
    function ParseSequenceReferenceSeq(jsn : TJsonObject) : TFhirSequenceReferenceSeq; overload; {b\}
    procedure ParseSequenceReferenceSeqProperties(jsn : TJsonObject; result : TFhirSequenceReferenceSeq); overload; {b\}
    procedure ParseSequenceReferenceSeq(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSequenceVariant(jsn : TJsonObject) : TFhirSequenceVariant; overload; {b\}
    procedure ParseSequenceVariantProperties(jsn : TJsonObject; result : TFhirSequenceVariant); overload; {b\}
    procedure ParseSequenceVariant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSequenceQuality(jsn : TJsonObject) : TFhirSequenceQuality; overload; {b\}
    procedure ParseSequenceQualityProperties(jsn : TJsonObject; result : TFhirSequenceQuality); overload; {b\}
    procedure ParseSequenceQuality(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSequenceRepository(jsn : TJsonObject) : TFhirSequenceRepository; overload; {b\}
    procedure ParseSequenceRepositoryProperties(jsn : TJsonObject; result : TFhirSequenceRepository); overload; {b\}
    procedure ParseSequenceRepository(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSequence(jsn : TJsonObject) : TFhirSequence; overload;
    procedure ParseSequenceProperties(jsn : TJsonObject; result : TFhirSequence); overload;
    procedure ParseSequence(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SEQUENCE}
{$IFDEF FHIR_SERVICEDEFINITION}
    function ParseServiceDefinition(jsn : TJsonObject) : TFhirServiceDefinition; overload;
    procedure ParseServiceDefinitionProperties(jsn : TJsonObject; result : TFhirServiceDefinition); overload;
    procedure ParseServiceDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SERVICEDEFINITION}
{$IFDEF FHIR_SLOT}
    function ParseSlot(jsn : TJsonObject) : TFhirSlot; overload;
    procedure ParseSlotProperties(jsn : TJsonObject; result : TFhirSlot); overload;
    procedure ParseSlot(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
    function ParseSpecimenCollection(jsn : TJsonObject) : TFhirSpecimenCollection; overload; {b\}
    procedure ParseSpecimenCollectionProperties(jsn : TJsonObject; result : TFhirSpecimenCollection); overload; {b\}
    procedure ParseSpecimenCollection(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSpecimenProcessing(jsn : TJsonObject) : TFhirSpecimenProcessing; overload; {b\}
    procedure ParseSpecimenProcessingProperties(jsn : TJsonObject; result : TFhirSpecimenProcessing); overload; {b\}
    procedure ParseSpecimenProcessing(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSpecimenContainer(jsn : TJsonObject) : TFhirSpecimenContainer; overload; {b\}
    procedure ParseSpecimenContainerProperties(jsn : TJsonObject; result : TFhirSpecimenContainer); overload; {b\}
    procedure ParseSpecimenContainer(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSpecimen(jsn : TJsonObject) : TFhirSpecimen; overload;
    procedure ParseSpecimenProperties(jsn : TJsonObject; result : TFhirSpecimen); overload;
    procedure ParseSpecimen(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_STRUCTUREDEFINITION}
    function ParseStructureDefinitionMapping(jsn : TJsonObject) : TFhirStructureDefinitionMapping; overload; {b\}
    procedure ParseStructureDefinitionMappingProperties(jsn : TJsonObject; result : TFhirStructureDefinitionMapping); overload; {b\}
    procedure ParseStructureDefinitionMapping(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureDefinitionSnapshot(jsn : TJsonObject) : TFhirStructureDefinitionSnapshot; overload; {b\}
    procedure ParseStructureDefinitionSnapshotProperties(jsn : TJsonObject; result : TFhirStructureDefinitionSnapshot); overload; {b\}
    procedure ParseStructureDefinitionSnapshot(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureDefinitionDifferential(jsn : TJsonObject) : TFhirStructureDefinitionDifferential; overload; {b\}
    procedure ParseStructureDefinitionDifferentialProperties(jsn : TJsonObject; result : TFhirStructureDefinitionDifferential); overload; {b\}
    procedure ParseStructureDefinitionDifferential(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureDefinition(jsn : TJsonObject) : TFhirStructureDefinition; overload;
    procedure ParseStructureDefinitionProperties(jsn : TJsonObject; result : TFhirStructureDefinition); overload;
    procedure ParseStructureDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
    function ParseStructureMapStructure(jsn : TJsonObject) : TFhirStructureMapStructure; overload; {b\}
    procedure ParseStructureMapStructureProperties(jsn : TJsonObject; result : TFhirStructureMapStructure); overload; {b\}
    procedure ParseStructureMapStructure(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMapGroup(jsn : TJsonObject) : TFhirStructureMapGroup; overload; {b\}
    procedure ParseStructureMapGroupProperties(jsn : TJsonObject; result : TFhirStructureMapGroup); overload; {b\}
    procedure ParseStructureMapGroup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMapGroupInput(jsn : TJsonObject) : TFhirStructureMapGroupInput; overload; {b\}
    procedure ParseStructureMapGroupInputProperties(jsn : TJsonObject; result : TFhirStructureMapGroupInput); overload; {b\}
    procedure ParseStructureMapGroupInput(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMapGroupRule(jsn : TJsonObject) : TFhirStructureMapGroupRule; overload; {b\}
    procedure ParseStructureMapGroupRuleProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRule); overload; {b\}
    procedure ParseStructureMapGroupRule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMapGroupRuleSource(jsn : TJsonObject) : TFhirStructureMapGroupRuleSource; overload; {b\}
    procedure ParseStructureMapGroupRuleSourceProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleSource); overload; {b\}
    procedure ParseStructureMapGroupRuleSource(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMapGroupRuleTarget(jsn : TJsonObject) : TFhirStructureMapGroupRuleTarget; overload; {b\}
    procedure ParseStructureMapGroupRuleTargetProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleTarget); overload; {b\}
    procedure ParseStructureMapGroupRuleTarget(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMapGroupRuleTargetParameter(jsn : TJsonObject) : TFhirStructureMapGroupRuleTargetParameter; overload; {b\}
    procedure ParseStructureMapGroupRuleTargetParameterProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleTargetParameter); overload; {b\}
    procedure ParseStructureMapGroupRuleTargetParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMapGroupRuleDependent(jsn : TJsonObject) : TFhirStructureMapGroupRuleDependent; overload; {b\}
    procedure ParseStructureMapGroupRuleDependentProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleDependent); overload; {b\}
    procedure ParseStructureMapGroupRuleDependent(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseStructureMap(jsn : TJsonObject) : TFhirStructureMap; overload;
    procedure ParseStructureMapProperties(jsn : TJsonObject; result : TFhirStructureMap); overload;
    procedure ParseStructureMap(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
    function ParseSubscriptionChannel(jsn : TJsonObject) : TFhirSubscriptionChannel; overload; {b\}
    procedure ParseSubscriptionChannelProperties(jsn : TJsonObject; result : TFhirSubscriptionChannel); overload; {b\}
    procedure ParseSubscriptionChannel(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubscription(jsn : TJsonObject) : TFhirSubscription; overload;
    procedure ParseSubscriptionProperties(jsn : TJsonObject; result : TFhirSubscription); overload;
    procedure ParseSubscription(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
    function ParseSubstanceInstance(jsn : TJsonObject) : TFhirSubstanceInstance; overload; {b\}
    procedure ParseSubstanceInstanceProperties(jsn : TJsonObject; result : TFhirSubstanceInstance); overload; {b\}
    procedure ParseSubstanceInstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstanceIngredient(jsn : TJsonObject) : TFhirSubstanceIngredient; overload; {b\}
    procedure ParseSubstanceIngredientProperties(jsn : TJsonObject; result : TFhirSubstanceIngredient); overload; {b\}
    procedure ParseSubstanceIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSubstance(jsn : TJsonObject) : TFhirSubstance; overload;
    procedure ParseSubstanceProperties(jsn : TJsonObject; result : TFhirSubstance); overload;
    procedure ParseSubstance(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUPPLYDELIVERY}
    function ParseSupplyDeliverySuppliedItem(jsn : TJsonObject) : TFhirSupplyDeliverySuppliedItem; overload; {b\}
    procedure ParseSupplyDeliverySuppliedItemProperties(jsn : TJsonObject; result : TFhirSupplyDeliverySuppliedItem); overload; {b\}
    procedure ParseSupplyDeliverySuppliedItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSupplyDelivery(jsn : TJsonObject) : TFhirSupplyDelivery; overload;
    procedure ParseSupplyDeliveryProperties(jsn : TJsonObject; result : TFhirSupplyDelivery); overload;
    procedure ParseSupplyDelivery(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
    function ParseSupplyRequestOrderedItem(jsn : TJsonObject) : TFhirSupplyRequestOrderedItem; overload; {b\}
    procedure ParseSupplyRequestOrderedItemProperties(jsn : TJsonObject; result : TFhirSupplyRequestOrderedItem); overload; {b\}
    procedure ParseSupplyRequestOrderedItem(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSupplyRequestRequester(jsn : TJsonObject) : TFhirSupplyRequestRequester; overload; {b\}
    procedure ParseSupplyRequestRequesterProperties(jsn : TJsonObject; result : TFhirSupplyRequestRequester); overload; {b\}
    procedure ParseSupplyRequestRequester(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseSupplyRequest(jsn : TJsonObject) : TFhirSupplyRequest; overload;
    procedure ParseSupplyRequestProperties(jsn : TJsonObject; result : TFhirSupplyRequest); overload;
    procedure ParseSupplyRequest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
    function ParseTaskRequester(jsn : TJsonObject) : TFhirTaskRequester; overload; {b\}
    procedure ParseTaskRequesterProperties(jsn : TJsonObject; result : TFhirTaskRequester); overload; {b\}
    procedure ParseTaskRequester(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTaskRestriction(jsn : TJsonObject) : TFhirTaskRestriction; overload; {b\}
    procedure ParseTaskRestrictionProperties(jsn : TJsonObject; result : TFhirTaskRestriction); overload; {b\}
    procedure ParseTaskRestriction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTaskInput(jsn : TJsonObject) : TFhirTaskInput; overload; {b\}
    procedure ParseTaskInputProperties(jsn : TJsonObject; result : TFhirTaskInput); overload; {b\}
    procedure ParseTaskInput(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTaskOutput(jsn : TJsonObject) : TFhirTaskOutput; overload; {b\}
    procedure ParseTaskOutputProperties(jsn : TJsonObject; result : TFhirTaskOutput); overload; {b\}
    procedure ParseTaskOutput(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTask(jsn : TJsonObject) : TFhirTask; overload;
    procedure ParseTaskProperties(jsn : TJsonObject; result : TFhirTask); overload;
    procedure ParseTask(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TESTREPORT}
    function ParseTestReportParticipant(jsn : TJsonObject) : TFhirTestReportParticipant; overload; {b\}
    procedure ParseTestReportParticipantProperties(jsn : TJsonObject; result : TFhirTestReportParticipant); overload; {b\}
    procedure ParseTestReportParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportSetup(jsn : TJsonObject) : TFhirTestReportSetup; overload; {b\}
    procedure ParseTestReportSetupProperties(jsn : TJsonObject; result : TFhirTestReportSetup); overload; {b\}
    procedure ParseTestReportSetup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportSetupAction(jsn : TJsonObject) : TFhirTestReportSetupAction; overload; {b\}
    procedure ParseTestReportSetupActionProperties(jsn : TJsonObject; result : TFhirTestReportSetupAction); overload; {b\}
    procedure ParseTestReportSetupAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportSetupActionOperation(jsn : TJsonObject) : TFhirTestReportSetupActionOperation; overload; {b\}
    procedure ParseTestReportSetupActionOperationProperties(jsn : TJsonObject; result : TFhirTestReportSetupActionOperation); overload; {b\}
    procedure ParseTestReportSetupActionOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportSetupActionAssert(jsn : TJsonObject) : TFhirTestReportSetupActionAssert; overload; {b\}
    procedure ParseTestReportSetupActionAssertProperties(jsn : TJsonObject; result : TFhirTestReportSetupActionAssert); overload; {b\}
    procedure ParseTestReportSetupActionAssert(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportTest(jsn : TJsonObject) : TFhirTestReportTest; overload; {b\}
    procedure ParseTestReportTestProperties(jsn : TJsonObject; result : TFhirTestReportTest); overload; {b\}
    procedure ParseTestReportTest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportTestAction(jsn : TJsonObject) : TFhirTestReportTestAction; overload; {b\}
    procedure ParseTestReportTestActionProperties(jsn : TJsonObject; result : TFhirTestReportTestAction); overload; {b\}
    procedure ParseTestReportTestAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportTeardown(jsn : TJsonObject) : TFhirTestReportTeardown; overload; {b\}
    procedure ParseTestReportTeardownProperties(jsn : TJsonObject; result : TFhirTestReportTeardown); overload; {b\}
    procedure ParseTestReportTeardown(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReportTeardownAction(jsn : TJsonObject) : TFhirTestReportTeardownAction; overload; {b\}
    procedure ParseTestReportTeardownActionProperties(jsn : TJsonObject; result : TFhirTestReportTeardownAction); overload; {b\}
    procedure ParseTestReportTeardownAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestReport(jsn : TJsonObject) : TFhirTestReport; overload;
    procedure ParseTestReportProperties(jsn : TJsonObject; result : TFhirTestReport); overload;
    procedure ParseTestReport(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
    function ParseTestScriptOrigin(jsn : TJsonObject) : TFhirTestScriptOrigin; overload; {b\}
    procedure ParseTestScriptOriginProperties(jsn : TJsonObject; result : TFhirTestScriptOrigin); overload; {b\}
    procedure ParseTestScriptOrigin(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptDestination(jsn : TJsonObject) : TFhirTestScriptDestination; overload; {b\}
    procedure ParseTestScriptDestinationProperties(jsn : TJsonObject; result : TFhirTestScriptDestination); overload; {b\}
    procedure ParseTestScriptDestination(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptMetadata(jsn : TJsonObject) : TFhirTestScriptMetadata; overload; {b\}
    procedure ParseTestScriptMetadataProperties(jsn : TJsonObject; result : TFhirTestScriptMetadata); overload; {b\}
    procedure ParseTestScriptMetadata(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptMetadataLink(jsn : TJsonObject) : TFhirTestScriptMetadataLink; overload; {b\}
    procedure ParseTestScriptMetadataLinkProperties(jsn : TJsonObject; result : TFhirTestScriptMetadataLink); overload; {b\}
    procedure ParseTestScriptMetadataLink(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptMetadataCapability(jsn : TJsonObject) : TFhirTestScriptMetadataCapability; overload; {b\}
    procedure ParseTestScriptMetadataCapabilityProperties(jsn : TJsonObject; result : TFhirTestScriptMetadataCapability); overload; {b\}
    procedure ParseTestScriptMetadataCapability(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptFixture(jsn : TJsonObject) : TFhirTestScriptFixture; overload; {b\}
    procedure ParseTestScriptFixtureProperties(jsn : TJsonObject; result : TFhirTestScriptFixture); overload; {b\}
    procedure ParseTestScriptFixture(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptVariable(jsn : TJsonObject) : TFhirTestScriptVariable; overload; {b\}
    procedure ParseTestScriptVariableProperties(jsn : TJsonObject; result : TFhirTestScriptVariable); overload; {b\}
    procedure ParseTestScriptVariable(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptRule(jsn : TJsonObject) : TFhirTestScriptRule; overload; {b\}
    procedure ParseTestScriptRuleProperties(jsn : TJsonObject; result : TFhirTestScriptRule); overload; {b\}
    procedure ParseTestScriptRule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptRuleParam(jsn : TJsonObject) : TFhirTestScriptRuleParam; overload; {b\}
    procedure ParseTestScriptRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptRuleParam); overload; {b\}
    procedure ParseTestScriptRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptRuleset(jsn : TJsonObject) : TFhirTestScriptRuleset; overload; {b\}
    procedure ParseTestScriptRulesetProperties(jsn : TJsonObject; result : TFhirTestScriptRuleset); overload; {b\}
    procedure ParseTestScriptRuleset(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptRulesetRule(jsn : TJsonObject) : TFhirTestScriptRulesetRule; overload; {b\}
    procedure ParseTestScriptRulesetRuleProperties(jsn : TJsonObject; result : TFhirTestScriptRulesetRule); overload; {b\}
    procedure ParseTestScriptRulesetRule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptRulesetRuleParam(jsn : TJsonObject) : TFhirTestScriptRulesetRuleParam; overload; {b\}
    procedure ParseTestScriptRulesetRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptRulesetRuleParam); overload; {b\}
    procedure ParseTestScriptRulesetRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetup(jsn : TJsonObject) : TFhirTestScriptSetup; overload; {b\}
    procedure ParseTestScriptSetupProperties(jsn : TJsonObject; result : TFhirTestScriptSetup); overload; {b\}
    procedure ParseTestScriptSetup(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupAction(jsn : TJsonObject) : TFhirTestScriptSetupAction; overload; {b\}
    procedure ParseTestScriptSetupActionProperties(jsn : TJsonObject; result : TFhirTestScriptSetupAction); overload; {b\}
    procedure ParseTestScriptSetupAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionOperation(jsn : TJsonObject) : TFhirTestScriptSetupActionOperation; overload; {b\}
    procedure ParseTestScriptSetupActionOperationProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionOperation); overload; {b\}
    procedure ParseTestScriptSetupActionOperation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionOperationRequestHeader(jsn : TJsonObject) : TFhirTestScriptSetupActionOperationRequestHeader; overload; {b\}
    procedure ParseTestScriptSetupActionOperationRequestHeaderProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionOperationRequestHeader); overload; {b\}
    procedure ParseTestScriptSetupActionOperationRequestHeader(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionAssert(jsn : TJsonObject) : TFhirTestScriptSetupActionAssert; overload; {b\}
    procedure ParseTestScriptSetupActionAssertProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssert); overload; {b\}
    procedure ParseTestScriptSetupActionAssert(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionAssertRule(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRule; overload; {b\}
    procedure ParseTestScriptSetupActionAssertRuleProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRule); overload; {b\}
    procedure ParseTestScriptSetupActionAssertRule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionAssertRuleParam(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRuleParam; overload; {b\}
    procedure ParseTestScriptSetupActionAssertRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRuleParam); overload; {b\}
    procedure ParseTestScriptSetupActionAssertRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionAssertRuleset(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRuleset; overload; {b\}
    procedure ParseTestScriptSetupActionAssertRulesetProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRuleset); overload; {b\}
    procedure ParseTestScriptSetupActionAssertRuleset(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionAssertRulesetRule(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRulesetRule; overload; {b\}
    procedure ParseTestScriptSetupActionAssertRulesetRuleProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRulesetRule); overload; {b\}
    procedure ParseTestScriptSetupActionAssertRulesetRule(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptSetupActionAssertRulesetRuleParam(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRulesetRuleParam; overload; {b\}
    procedure ParseTestScriptSetupActionAssertRulesetRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRulesetRuleParam); overload; {b\}
    procedure ParseTestScriptSetupActionAssertRulesetRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptTest(jsn : TJsonObject) : TFhirTestScriptTest; overload; {b\}
    procedure ParseTestScriptTestProperties(jsn : TJsonObject; result : TFhirTestScriptTest); overload; {b\}
    procedure ParseTestScriptTest(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptTestAction(jsn : TJsonObject) : TFhirTestScriptTestAction; overload; {b\}
    procedure ParseTestScriptTestActionProperties(jsn : TJsonObject; result : TFhirTestScriptTestAction); overload; {b\}
    procedure ParseTestScriptTestAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptTeardown(jsn : TJsonObject) : TFhirTestScriptTeardown; overload; {b\}
    procedure ParseTestScriptTeardownProperties(jsn : TJsonObject; result : TFhirTestScriptTeardown); overload; {b\}
    procedure ParseTestScriptTeardown(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScriptTeardownAction(jsn : TJsonObject) : TFhirTestScriptTeardownAction; overload; {b\}
    procedure ParseTestScriptTeardownActionProperties(jsn : TJsonObject; result : TFhirTestScriptTeardownAction); overload; {b\}
    procedure ParseTestScriptTeardownAction(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseTestScript(jsn : TJsonObject) : TFhirTestScript; overload;
    procedure ParseTestScriptProperties(jsn : TJsonObject; result : TFhirTestScript); overload;
    procedure ParseTestScript(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
    function ParseValueSetCompose(jsn : TJsonObject) : TFhirValueSetCompose; overload; {b\}
    procedure ParseValueSetComposeProperties(jsn : TJsonObject; result : TFhirValueSetCompose); overload; {b\}
    procedure ParseValueSetCompose(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSetComposeInclude(jsn : TJsonObject) : TFhirValueSetComposeInclude; overload; {b\}
    procedure ParseValueSetComposeIncludeProperties(jsn : TJsonObject; result : TFhirValueSetComposeInclude); overload; {b\}
    procedure ParseValueSetComposeInclude(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSetComposeIncludeConcept(jsn : TJsonObject) : TFhirValueSetComposeIncludeConcept; overload; {b\}
    procedure ParseValueSetComposeIncludeConceptProperties(jsn : TJsonObject; result : TFhirValueSetComposeIncludeConcept); overload; {b\}
    procedure ParseValueSetComposeIncludeConcept(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSetComposeIncludeConceptDesignation(jsn : TJsonObject) : TFhirValueSetComposeIncludeConceptDesignation; overload; {b\}
    procedure ParseValueSetComposeIncludeConceptDesignationProperties(jsn : TJsonObject; result : TFhirValueSetComposeIncludeConceptDesignation); overload; {b\}
    procedure ParseValueSetComposeIncludeConceptDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSetComposeIncludeFilter(jsn : TJsonObject) : TFhirValueSetComposeIncludeFilter; overload; {b\}
    procedure ParseValueSetComposeIncludeFilterProperties(jsn : TJsonObject; result : TFhirValueSetComposeIncludeFilter); overload; {b\}
    procedure ParseValueSetComposeIncludeFilter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSetExpansion(jsn : TJsonObject) : TFhirValueSetExpansion; overload; {b\}
    procedure ParseValueSetExpansionProperties(jsn : TJsonObject; result : TFhirValueSetExpansion); overload; {b\}
    procedure ParseValueSetExpansion(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSetExpansionParameter(jsn : TJsonObject) : TFhirValueSetExpansionParameter; overload; {b\}
    procedure ParseValueSetExpansionParameterProperties(jsn : TJsonObject; result : TFhirValueSetExpansionParameter); overload; {b\}
    procedure ParseValueSetExpansionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSetExpansionContains(jsn : TJsonObject) : TFhirValueSetExpansionContains; overload; {b\}
    procedure ParseValueSetExpansionContainsProperties(jsn : TJsonObject; result : TFhirValueSetExpansionContains); overload; {b\}
    procedure ParseValueSetExpansionContains(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseValueSet(jsn : TJsonObject) : TFhirValueSet; overload;
    procedure ParseValueSetProperties(jsn : TJsonObject; result : TFhirValueSet); overload;
    procedure ParseValueSet(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VISIONPRESCRIPTION}
    function ParseVisionPrescriptionDispense(jsn : TJsonObject) : TFhirVisionPrescriptionDispense; overload; {b\}
    procedure ParseVisionPrescriptionDispenseProperties(jsn : TJsonObject; result : TFhirVisionPrescriptionDispense); overload; {b\}
    procedure ParseVisionPrescriptionDispense(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
    function ParseVisionPrescription(jsn : TJsonObject) : TFhirVisionPrescription; overload;
    procedure ParseVisionPrescriptionProperties(jsn : TJsonObject; result : TFhirVisionPrescription); overload;
    procedure ParseVisionPrescription(jsn : TJsonObject; ctxt : TFHIRObjectList); overload; {b.}
{$ENDIF FHIR_VISIONPRESCRIPTION}
    function ParseResource(jsn : TJsonObject) : TFhirResource; override;
    function ParseDataType(jsn : TJsonObject; name : String; type_ : TFHIRTypeClass) : TFHIRType; override;
  public
    function ParseFragment(jsn : TJsonObject; type_ : String) : TFHIRObject;  overload;
  end;

  TFHIRJsonComposer = class (TFHIRJsonComposerBase3)
  protected
    procedure ComposeElement(json : TJSONWriter; name : string; elem : TFhirElement; noObj : boolean = false);

    Procedure ComposeElementProperties(json : TJSONWriter; elem : TFhirElement);
    Procedure ComposeBackboneElementProperties(json : TJSONWriter; elem : TFhirBackboneElement); overload;
    procedure ComposeBackboneElement(json : TJSONWriter; name : string; elem : TFhirBackboneElement; noObj : boolean = false);

    Procedure ComposeEnumValue(json : TJSONWriter; name : String; value : TFhirEnum; Const aNames : Array Of String; inArray : boolean);
    Procedure ComposeEnumProps(json : TJSONWriter; name : String; value : TFhirEnum; Const aNames : Array Of String; inArray : boolean);
    Procedure ComposeDateValue(json : TJSONWriter; name : String; value : TFhirDate; inArray : boolean);
    Procedure ComposeDateProps(json : TJSONWriter; name : String; value : TFhirDate; inArray : boolean);
    Procedure ComposeDateTimeValue(json : TJSONWriter; name : String; value : TFhirDateTime; inArray : boolean);
    Procedure ComposeDateTimeProps(json : TJSONWriter; name : String; value : TFhirDateTime; inArray : boolean);
    Procedure ComposeStringValue(json : TJSONWriter; name : String; value : TFhirString; inArray : boolean);
    Procedure ComposeStringProps(json : TJSONWriter; name : String; value : TFhirString; inArray : boolean);
    Procedure ComposeIntegerValue(json : TJSONWriter; name : String; value : TFhirInteger; inArray : boolean);
    Procedure ComposeIntegerProps(json : TJSONWriter; name : String; value : TFhirInteger; inArray : boolean);
    Procedure ComposeUriValue(json : TJSONWriter; name : String; value : TFhirUri; inArray : boolean);
    Procedure ComposeUriProps(json : TJSONWriter; name : String; value : TFhirUri; inArray : boolean);
    Procedure ComposeInstantValue(json : TJSONWriter; name : String; value : TFhirInstant; inArray : boolean);
    Procedure ComposeInstantProps(json : TJSONWriter; name : String; value : TFhirInstant; inArray : boolean);
    Procedure ComposeXhtmlValue(json : TJSONWriter; name : String; value : TFhirXhtml; inArray : boolean);
    Procedure ComposeXhtmlProps(json : TJSONWriter; name : String; value : TFhirXhtml; inArray : boolean);
    Procedure ComposeBooleanValue(json : TJSONWriter; name : String; value : TFhirBoolean; inArray : boolean);
    Procedure ComposeBooleanProps(json : TJSONWriter; name : String; value : TFhirBoolean; inArray : boolean);
    Procedure ComposeBase64BinaryValue(json : TJSONWriter; name : String; value : TFhirBase64Binary; inArray : boolean);
    Procedure ComposeBase64BinaryProps(json : TJSONWriter; name : String; value : TFhirBase64Binary; inArray : boolean);
    Procedure ComposeTimeValue(json : TJSONWriter; name : String; value : TFhirTime; inArray : boolean);
    Procedure ComposeTimeProps(json : TJSONWriter; name : String; value : TFhirTime; inArray : boolean);
    Procedure ComposeDecimalValue(json : TJSONWriter; name : String; value : TFhirDecimal; inArray : boolean);
    Procedure ComposeDecimalProps(json : TJSONWriter; name : String; value : TFhirDecimal; inArray : boolean);
    Procedure ComposeCodeValue(json : TJSONWriter; name : String; value : TFhirCode; inArray : boolean);
    Procedure ComposeCodeProps(json : TJSONWriter; name : String; value : TFhirCode; inArray : boolean);
    Procedure ComposeOidValue(json : TJSONWriter; name : String; value : TFhirOid; inArray : boolean);
    Procedure ComposeOidProps(json : TJSONWriter; name : String; value : TFhirOid; inArray : boolean);
    Procedure ComposeUuidValue(json : TJSONWriter; name : String; value : TFhirUuid; inArray : boolean);
    Procedure ComposeUuidProps(json : TJSONWriter; name : String; value : TFhirUuid; inArray : boolean);
    Procedure ComposeMarkdownValue(json : TJSONWriter; name : String; value : TFhirMarkdown; inArray : boolean);
    Procedure ComposeMarkdownProps(json : TJSONWriter; name : String; value : TFhirMarkdown; inArray : boolean);
    Procedure ComposeUnsignedIntValue(json : TJSONWriter; name : String; value : TFhirUnsignedInt; inArray : boolean);
    Procedure ComposeUnsignedIntProps(json : TJSONWriter; name : String; value : TFhirUnsignedInt; inArray : boolean);
    Procedure ComposeIdValue(json : TJSONWriter; name : String; value : TFhirId; inArray : boolean);
    Procedure ComposeIdProps(json : TJSONWriter; name : String; value : TFhirId; inArray : boolean);
    Procedure ComposePositiveIntValue(json : TJSONWriter; name : String; value : TFhirPositiveInt; inArray : boolean);
    Procedure ComposePositiveIntProps(json : TJSONWriter; name : String; value : TFhirPositiveInt; inArray : boolean);

    Procedure ComposeResourceProperties(json : TJSONWriter; elem : TFhirResource);
    Procedure ComposeDomainResourceProperties(json : TJSONWriter; elem : TFhirDomainResource);
{$IFDEF FHIR_PARAMETERS}
    procedure ComposeParametersParameter(json : TJSONWriter; name : string; elem : TFhirParametersParameter; noObj : boolean = false);
    procedure ComposeParameters(json : TJSONWriter; name : string; elem : TFhirParameters; noObj : boolean = false);
{$ENDIF FHIR_PARAMETERS}

    procedure ComposeExtension(json : TJSONWriter; name : string; elem : TFhirExtension; noObj : boolean = false);
    procedure ComposeNarrative(json : TJSONWriter; name : string; elem : TFhirNarrative; noObj : boolean = false);
    procedure ComposeContributor(json : TJSONWriter; name : string; elem : TFhirContributor; noObj : boolean = false);
    procedure ComposeAttachment(json : TJSONWriter; name : string; elem : TFhirAttachment; noObj : boolean = false);
    procedure ComposeDataRequirementCodeFilter(json : TJSONWriter; name : string; elem : TFhirDataRequirementCodeFilter; noObj : boolean = false);
    procedure ComposeDataRequirementDateFilter(json : TJSONWriter; name : string; elem : TFhirDataRequirementDateFilter; noObj : boolean = false);
    procedure ComposeDataRequirement(json : TJSONWriter; name : string; elem : TFhirDataRequirement; noObj : boolean = false);
    procedure ComposeDosage(json : TJSONWriter; name : string; elem : TFhirDosage; noObj : boolean = false);
    procedure ComposeIdentifier(json : TJSONWriter; name : string; elem : TFhirIdentifier; noObj : boolean = false);
    procedure ComposeCoding(json : TJSONWriter; name : string; elem : TFhirCoding; noObj : boolean = false);
    procedure ComposeSampledData(json : TJSONWriter; name : string; elem : TFhirSampledData; noObj : boolean = false);
    procedure ComposeRatio(json : TJSONWriter; name : string; elem : TFhirRatio; noObj : boolean = false);
    procedure ComposeReference(json : TJSONWriter; name : string; elem : TFhirReference; noObj : boolean = false);
    procedure ComposeTriggerDefinition(json : TJSONWriter; name : string; elem : TFhirTriggerDefinition; noObj : boolean = false);
    procedure ComposePeriod(json : TJSONWriter; name : string; elem : TFhirPeriod; noObj : boolean = false);
    procedure ComposeQuantity(json : TJSONWriter; name : string; elem : TFhirQuantity; noObj : boolean = false);
    procedure ComposeRange(json : TJSONWriter; name : string; elem : TFhirRange; noObj : boolean = false);
    procedure ComposeRelatedArtifact(json : TJSONWriter; name : string; elem : TFhirRelatedArtifact; noObj : boolean = false);
    procedure ComposeAnnotation(json : TJSONWriter; name : string; elem : TFhirAnnotation; noObj : boolean = false);
    procedure ComposeContactDetail(json : TJSONWriter; name : string; elem : TFhirContactDetail; noObj : boolean = false);
    procedure ComposeUsageContext(json : TJSONWriter; name : string; elem : TFhirUsageContext; noObj : boolean = false);
    procedure ComposeSignature(json : TJSONWriter; name : string; elem : TFhirSignature; noObj : boolean = false);
    procedure ComposeCodeableConcept(json : TJSONWriter; name : string; elem : TFhirCodeableConcept; noObj : boolean = false);
    procedure ComposeParameterDefinition(json : TJSONWriter; name : string; elem : TFhirParameterDefinition; noObj : boolean = false);
    procedure ComposeContactPoint(json : TJSONWriter; name : string; elem : TFhirContactPoint; noObj : boolean = false);
    procedure ComposeHumanName(json : TJSONWriter; name : string; elem : TFhirHumanName; noObj : boolean = false);
    procedure ComposeMeta(json : TJSONWriter; name : string; elem : TFhirMeta; noObj : boolean = false);
    procedure ComposeAddress(json : TJSONWriter; name : string; elem : TFhirAddress; noObj : boolean = false);
    procedure ComposeElementDefinitionSlicing(json : TJSONWriter; name : string; elem : TFhirElementDefinitionSlicing; noObj : boolean = false);
    procedure ComposeElementDefinitionSlicingDiscriminator(json : TJSONWriter; name : string; elem : TFhirElementDefinitionSlicingDiscriminator; noObj : boolean = false);
    procedure ComposeElementDefinitionBase(json : TJSONWriter; name : string; elem : TFhirElementDefinitionBase; noObj : boolean = false);
    procedure ComposeElementDefinitionType(json : TJSONWriter; name : string; elem : TFhirElementDefinitionType; noObj : boolean = false);
    procedure ComposeElementDefinitionExample(json : TJSONWriter; name : string; elem : TFhirElementDefinitionExample; noObj : boolean = false);
    procedure ComposeElementDefinitionConstraint(json : TJSONWriter; name : string; elem : TFhirElementDefinitionConstraint; noObj : boolean = false);
    procedure ComposeElementDefinitionBinding(json : TJSONWriter; name : string; elem : TFhirElementDefinitionBinding; noObj : boolean = false);
    procedure ComposeElementDefinitionMapping(json : TJSONWriter; name : string; elem : TFhirElementDefinitionMapping; noObj : boolean = false);
    procedure ComposeElementDefinition(json : TJSONWriter; name : string; elem : TFhirElementDefinition; noObj : boolean = false);
    procedure ComposeTimingRepeat(json : TJSONWriter; name : string; elem : TFhirTimingRepeat; noObj : boolean = false);
    procedure ComposeTiming(json : TJSONWriter; name : string; elem : TFhirTiming; noObj : boolean = false);
    procedure ComposeCount(json : TJSONWriter; name : string; elem : TFhirCount; noObj : boolean = false);
    procedure ComposeMoney(json : TJSONWriter; name : string; elem : TFhirMoney; noObj : boolean = false);
    procedure ComposeAge(json : TJSONWriter; name : string; elem : TFhirAge; noObj : boolean = false);
    procedure ComposeDistance(json : TJSONWriter; name : string; elem : TFhirDistance; noObj : boolean = false);
    procedure ComposeDuration(json : TJSONWriter; name : string; elem : TFhirDuration; noObj : boolean = false);

{$IFDEF FHIR_ACCOUNT}
    procedure ComposeAccountCoverage(json : TJSONWriter; name : string; elem : TFhirAccountCoverage; noObj : boolean = false);
    procedure ComposeAccountGuarantor(json : TJSONWriter; name : string; elem : TFhirAccountGuarantor; noObj : boolean = false);
    procedure ComposeAccount(json : TJSONWriter; name : string; elem : TFhirAccount; noObj : boolean = false);
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
    procedure ComposeActivityDefinitionParticipant(json : TJSONWriter; name : string; elem : TFhirActivityDefinitionParticipant; noObj : boolean = false);
    procedure ComposeActivityDefinitionDynamicValue(json : TJSONWriter; name : string; elem : TFhirActivityDefinitionDynamicValue; noObj : boolean = false);
    procedure ComposeActivityDefinition(json : TJSONWriter; name : string; elem : TFhirActivityDefinition; noObj : boolean = false);
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
    procedure ComposeAdverseEventSuspectEntity(json : TJSONWriter; name : string; elem : TFhirAdverseEventSuspectEntity; noObj : boolean = false);
    procedure ComposeAdverseEvent(json : TJSONWriter; name : string; elem : TFhirAdverseEvent; noObj : boolean = false);
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
    procedure ComposeAllergyIntoleranceReaction(json : TJSONWriter; name : string; elem : TFhirAllergyIntoleranceReaction; noObj : boolean = false);
    procedure ComposeAllergyIntolerance(json : TJSONWriter; name : string; elem : TFhirAllergyIntolerance; noObj : boolean = false);
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
    procedure ComposeAppointmentParticipant(json : TJSONWriter; name : string; elem : TFhirAppointmentParticipant; noObj : boolean = false);
    procedure ComposeAppointment(json : TJSONWriter; name : string; elem : TFhirAppointment; noObj : boolean = false);
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
    procedure ComposeAppointmentResponse(json : TJSONWriter; name : string; elem : TFhirAppointmentResponse; noObj : boolean = false);
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
    procedure ComposeAuditEventAgent(json : TJSONWriter; name : string; elem : TFhirAuditEventAgent; noObj : boolean = false);
    procedure ComposeAuditEventAgentNetwork(json : TJSONWriter; name : string; elem : TFhirAuditEventAgentNetwork; noObj : boolean = false);
    procedure ComposeAuditEventSource(json : TJSONWriter; name : string; elem : TFhirAuditEventSource; noObj : boolean = false);
    procedure ComposeAuditEventEntity(json : TJSONWriter; name : string; elem : TFhirAuditEventEntity; noObj : boolean = false);
    procedure ComposeAuditEventEntityDetail(json : TJSONWriter; name : string; elem : TFhirAuditEventEntityDetail; noObj : boolean = false);
    procedure ComposeAuditEvent(json : TJSONWriter; name : string; elem : TFhirAuditEvent; noObj : boolean = false);
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
    procedure ComposeBasic(json : TJSONWriter; name : string; elem : TFhirBasic; noObj : boolean = false);
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
    procedure ComposeBinary(json : TJSONWriter; name : string; elem : TFhirBinary; noObj : boolean = false);
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BODYSITE}
    procedure ComposeBodySite(json : TJSONWriter; name : string; elem : TFhirBodySite; noObj : boolean = false);
{$ENDIF FHIR_BODYSITE}
{$IFDEF FHIR_BUNDLE}
    procedure ComposeBundleLink(json : TJSONWriter; name : string; elem : TFhirBundleLink; noObj : boolean = false);
    procedure ComposeBundleEntry(json : TJSONWriter; name : string; elem : TFhirBundleEntry; noObj : boolean = false);
    procedure ComposeBundleEntrySearch(json : TJSONWriter; name : string; elem : TFhirBundleEntrySearch; noObj : boolean = false);
    procedure ComposeBundleEntryRequest(json : TJSONWriter; name : string; elem : TFhirBundleEntryRequest; noObj : boolean = false);
    procedure ComposeBundleEntryResponse(json : TJSONWriter; name : string; elem : TFhirBundleEntryResponse; noObj : boolean = false);
    procedure ComposeBundle(json : TJSONWriter; name : string; elem : TFhirBundle; noObj : boolean = false);
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
    procedure ComposeCapabilityStatementSoftware(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementSoftware; noObj : boolean = false);
    procedure ComposeCapabilityStatementImplementation(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementImplementation; noObj : boolean = false);
    procedure ComposeCapabilityStatementRest(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRest; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestSecurity(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestSecurity; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestSecurityCertificate(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestSecurityCertificate; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestResource(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestResource; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestResourceInteraction(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestResourceInteraction; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestResourceSearchParam(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestResourceSearchParam; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestInteraction(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestInteraction; noObj : boolean = false);
    procedure ComposeCapabilityStatementRestOperation(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestOperation; noObj : boolean = false);
    procedure ComposeCapabilityStatementMessaging(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementMessaging; noObj : boolean = false);
    procedure ComposeCapabilityStatementMessagingEndpoint(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementMessagingEndpoint; noObj : boolean = false);
    procedure ComposeCapabilityStatementMessagingSupportedMessage(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementMessagingSupportedMessage; noObj : boolean = false);
    procedure ComposeCapabilityStatementMessagingEvent(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementMessagingEvent; noObj : boolean = false);
    procedure ComposeCapabilityStatementDocument(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementDocument; noObj : boolean = false);
    procedure ComposeCapabilityStatement(json : TJSONWriter; name : string; elem : TFhirCapabilityStatement; noObj : boolean = false);
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
    procedure ComposeCarePlanActivity(json : TJSONWriter; name : string; elem : TFhirCarePlanActivity; noObj : boolean = false);
    procedure ComposeCarePlanActivityDetail(json : TJSONWriter; name : string; elem : TFhirCarePlanActivityDetail; noObj : boolean = false);
    procedure ComposeCarePlan(json : TJSONWriter; name : string; elem : TFhirCarePlan; noObj : boolean = false);
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
    procedure ComposeCareTeamParticipant(json : TJSONWriter; name : string; elem : TFhirCareTeamParticipant; noObj : boolean = false);
    procedure ComposeCareTeam(json : TJSONWriter; name : string; elem : TFhirCareTeam; noObj : boolean = false);
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CHARGEITEM}
    procedure ComposeChargeItemParticipant(json : TJSONWriter; name : string; elem : TFhirChargeItemParticipant; noObj : boolean = false);
    procedure ComposeChargeItem(json : TJSONWriter; name : string; elem : TFhirChargeItem; noObj : boolean = false);
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CLAIM}
    procedure ComposeClaimRelated(json : TJSONWriter; name : string; elem : TFhirClaimRelated; noObj : boolean = false);
    procedure ComposeClaimPayee(json : TJSONWriter; name : string; elem : TFhirClaimPayee; noObj : boolean = false);
    procedure ComposeClaimCareTeam(json : TJSONWriter; name : string; elem : TFhirClaimCareTeam; noObj : boolean = false);
    procedure ComposeClaimInformation(json : TJSONWriter; name : string; elem : TFhirClaimInformation; noObj : boolean = false);
    procedure ComposeClaimDiagnosis(json : TJSONWriter; name : string; elem : TFhirClaimDiagnosis; noObj : boolean = false);
    procedure ComposeClaimProcedure(json : TJSONWriter; name : string; elem : TFhirClaimProcedure; noObj : boolean = false);
    procedure ComposeClaimInsurance(json : TJSONWriter; name : string; elem : TFhirClaimInsurance; noObj : boolean = false);
    procedure ComposeClaimAccident(json : TJSONWriter; name : string; elem : TFhirClaimAccident; noObj : boolean = false);
    procedure ComposeClaimItem(json : TJSONWriter; name : string; elem : TFhirClaimItem; noObj : boolean = false);
    procedure ComposeClaimItemDetail(json : TJSONWriter; name : string; elem : TFhirClaimItemDetail; noObj : boolean = false);
    procedure ComposeClaimItemDetailSubDetail(json : TJSONWriter; name : string; elem : TFhirClaimItemDetailSubDetail; noObj : boolean = false);
    procedure ComposeClaim(json : TJSONWriter; name : string; elem : TFhirClaim; noObj : boolean = false);
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
    procedure ComposeClaimResponseItem(json : TJSONWriter; name : string; elem : TFhirClaimResponseItem; noObj : boolean = false);
    procedure ComposeClaimResponseItemAdjudication(json : TJSONWriter; name : string; elem : TFhirClaimResponseItemAdjudication; noObj : boolean = false);
    procedure ComposeClaimResponseItemDetail(json : TJSONWriter; name : string; elem : TFhirClaimResponseItemDetail; noObj : boolean = false);
    procedure ComposeClaimResponseItemDetailSubDetail(json : TJSONWriter; name : string; elem : TFhirClaimResponseItemDetailSubDetail; noObj : boolean = false);
    procedure ComposeClaimResponseAddItem(json : TJSONWriter; name : string; elem : TFhirClaimResponseAddItem; noObj : boolean = false);
    procedure ComposeClaimResponseAddItemDetail(json : TJSONWriter; name : string; elem : TFhirClaimResponseAddItemDetail; noObj : boolean = false);
    procedure ComposeClaimResponseError(json : TJSONWriter; name : string; elem : TFhirClaimResponseError; noObj : boolean = false);
    procedure ComposeClaimResponsePayment(json : TJSONWriter; name : string; elem : TFhirClaimResponsePayment; noObj : boolean = false);
    procedure ComposeClaimResponseProcessNote(json : TJSONWriter; name : string; elem : TFhirClaimResponseProcessNote; noObj : boolean = false);
    procedure ComposeClaimResponseInsurance(json : TJSONWriter; name : string; elem : TFhirClaimResponseInsurance; noObj : boolean = false);
    procedure ComposeClaimResponse(json : TJSONWriter; name : string; elem : TFhirClaimResponse; noObj : boolean = false);
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
    procedure ComposeClinicalImpressionInvestigation(json : TJSONWriter; name : string; elem : TFhirClinicalImpressionInvestigation; noObj : boolean = false);
    procedure ComposeClinicalImpressionFinding(json : TJSONWriter; name : string; elem : TFhirClinicalImpressionFinding; noObj : boolean = false);
    procedure ComposeClinicalImpression(json : TJSONWriter; name : string; elem : TFhirClinicalImpression; noObj : boolean = false);
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
    procedure ComposeCodeSystemFilter(json : TJSONWriter; name : string; elem : TFhirCodeSystemFilter; noObj : boolean = false);
    procedure ComposeCodeSystemProperty(json : TJSONWriter; name : string; elem : TFhirCodeSystemProperty; noObj : boolean = false);
    procedure ComposeCodeSystemConcept(json : TJSONWriter; name : string; elem : TFhirCodeSystemConcept; noObj : boolean = false);
    procedure ComposeCodeSystemConceptDesignation(json : TJSONWriter; name : string; elem : TFhirCodeSystemConceptDesignation; noObj : boolean = false);
    procedure ComposeCodeSystemConceptProperty(json : TJSONWriter; name : string; elem : TFhirCodeSystemConceptProperty; noObj : boolean = false);
    procedure ComposeCodeSystem(json : TJSONWriter; name : string; elem : TFhirCodeSystem; noObj : boolean = false);
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
    procedure ComposeCommunicationPayload(json : TJSONWriter; name : string; elem : TFhirCommunicationPayload; noObj : boolean = false);
    procedure ComposeCommunication(json : TJSONWriter; name : string; elem : TFhirCommunication; noObj : boolean = false);
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
    procedure ComposeCommunicationRequestPayload(json : TJSONWriter; name : string; elem : TFhirCommunicationRequestPayload; noObj : boolean = false);
    procedure ComposeCommunicationRequestRequester(json : TJSONWriter; name : string; elem : TFhirCommunicationRequestRequester; noObj : boolean = false);
    procedure ComposeCommunicationRequest(json : TJSONWriter; name : string; elem : TFhirCommunicationRequest; noObj : boolean = false);
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
    procedure ComposeCompartmentDefinitionResource(json : TJSONWriter; name : string; elem : TFhirCompartmentDefinitionResource; noObj : boolean = false);
    procedure ComposeCompartmentDefinition(json : TJSONWriter; name : string; elem : TFhirCompartmentDefinition; noObj : boolean = false);
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
    procedure ComposeCompositionAttester(json : TJSONWriter; name : string; elem : TFhirCompositionAttester; noObj : boolean = false);
    procedure ComposeCompositionRelatesTo(json : TJSONWriter; name : string; elem : TFhirCompositionRelatesTo; noObj : boolean = false);
    procedure ComposeCompositionEvent(json : TJSONWriter; name : string; elem : TFhirCompositionEvent; noObj : boolean = false);
    procedure ComposeCompositionSection(json : TJSONWriter; name : string; elem : TFhirCompositionSection; noObj : boolean = false);
    procedure ComposeComposition(json : TJSONWriter; name : string; elem : TFhirComposition; noObj : boolean = false);
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
    procedure ComposeConceptMapGroup(json : TJSONWriter; name : string; elem : TFhirConceptMapGroup; noObj : boolean = false);
    procedure ComposeConceptMapGroupElement(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupElement; noObj : boolean = false);
    procedure ComposeConceptMapGroupElementTarget(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupElementTarget; noObj : boolean = false);
    procedure ComposeConceptMapGroupElementTargetDependsOn(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupElementTargetDependsOn; noObj : boolean = false);
    procedure ComposeConceptMapGroupUnmapped(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupUnmapped; noObj : boolean = false);
    procedure ComposeConceptMap(json : TJSONWriter; name : string; elem : TFhirConceptMap; noObj : boolean = false);
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
    procedure ComposeConditionStage(json : TJSONWriter; name : string; elem : TFhirConditionStage; noObj : boolean = false);
    procedure ComposeConditionEvidence(json : TJSONWriter; name : string; elem : TFhirConditionEvidence; noObj : boolean = false);
    procedure ComposeCondition(json : TJSONWriter; name : string; elem : TFhirCondition; noObj : boolean = false);
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
    procedure ComposeConsentActor(json : TJSONWriter; name : string; elem : TFhirConsentActor; noObj : boolean = false);
    procedure ComposeConsentPolicy(json : TJSONWriter; name : string; elem : TFhirConsentPolicy; noObj : boolean = false);
    procedure ComposeConsentData(json : TJSONWriter; name : string; elem : TFhirConsentData; noObj : boolean = false);
    procedure ComposeConsentExcept(json : TJSONWriter; name : string; elem : TFhirConsentExcept; noObj : boolean = false);
    procedure ComposeConsentExceptActor(json : TJSONWriter; name : string; elem : TFhirConsentExceptActor; noObj : boolean = false);
    procedure ComposeConsentExceptData(json : TJSONWriter; name : string; elem : TFhirConsentExceptData; noObj : boolean = false);
    procedure ComposeConsent(json : TJSONWriter; name : string; elem : TFhirConsent; noObj : boolean = false);
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
    procedure ComposeContractAgent(json : TJSONWriter; name : string; elem : TFhirContractAgent; noObj : boolean = false);
    procedure ComposeContractSigner(json : TJSONWriter; name : string; elem : TFhirContractSigner; noObj : boolean = false);
    procedure ComposeContractValuedItem(json : TJSONWriter; name : string; elem : TFhirContractValuedItem; noObj : boolean = false);
    procedure ComposeContractTerm(json : TJSONWriter; name : string; elem : TFhirContractTerm; noObj : boolean = false);
    procedure ComposeContractTermAgent(json : TJSONWriter; name : string; elem : TFhirContractTermAgent; noObj : boolean = false);
    procedure ComposeContractTermValuedItem(json : TJSONWriter; name : string; elem : TFhirContractTermValuedItem; noObj : boolean = false);
    procedure ComposeContractFriendly(json : TJSONWriter; name : string; elem : TFhirContractFriendly; noObj : boolean = false);
    procedure ComposeContractLegal(json : TJSONWriter; name : string; elem : TFhirContractLegal; noObj : boolean = false);
    procedure ComposeContractRule(json : TJSONWriter; name : string; elem : TFhirContractRule; noObj : boolean = false);
    procedure ComposeContract(json : TJSONWriter; name : string; elem : TFhirContract; noObj : boolean = false);
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
    procedure ComposeCoverageGrouping(json : TJSONWriter; name : string; elem : TFhirCoverageGrouping; noObj : boolean = false);
    procedure ComposeCoverage(json : TJSONWriter; name : string; elem : TFhirCoverage; noObj : boolean = false);
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_DATAELEMENT}
    procedure ComposeDataElementMapping(json : TJSONWriter; name : string; elem : TFhirDataElementMapping; noObj : boolean = false);
    procedure ComposeDataElement(json : TJSONWriter; name : string; elem : TFhirDataElement; noObj : boolean = false);
{$ENDIF FHIR_DATAELEMENT}
{$IFDEF FHIR_DETECTEDISSUE}
    procedure ComposeDetectedIssueMitigation(json : TJSONWriter; name : string; elem : TFhirDetectedIssueMitigation; noObj : boolean = false);
    procedure ComposeDetectedIssue(json : TJSONWriter; name : string; elem : TFhirDetectedIssue; noObj : boolean = false);
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
    procedure ComposeDeviceUdi(json : TJSONWriter; name : string; elem : TFhirDeviceUdi; noObj : boolean = false);
    procedure ComposeDevice(json : TJSONWriter; name : string; elem : TFhirDevice; noObj : boolean = false);
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICECOMPONENT}
    procedure ComposeDeviceComponentProductionSpecification(json : TJSONWriter; name : string; elem : TFhirDeviceComponentProductionSpecification; noObj : boolean = false);
    procedure ComposeDeviceComponent(json : TJSONWriter; name : string; elem : TFhirDeviceComponent; noObj : boolean = false);
{$ENDIF FHIR_DEVICECOMPONENT}
{$IFDEF FHIR_DEVICEMETRIC}
    procedure ComposeDeviceMetricCalibration(json : TJSONWriter; name : string; elem : TFhirDeviceMetricCalibration; noObj : boolean = false);
    procedure ComposeDeviceMetric(json : TJSONWriter; name : string; elem : TFhirDeviceMetric; noObj : boolean = false);
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
    procedure ComposeDeviceRequestRequester(json : TJSONWriter; name : string; elem : TFhirDeviceRequestRequester; noObj : boolean = false);
    procedure ComposeDeviceRequest(json : TJSONWriter; name : string; elem : TFhirDeviceRequest; noObj : boolean = false);
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
    procedure ComposeDeviceUseStatement(json : TJSONWriter; name : string; elem : TFhirDeviceUseStatement; noObj : boolean = false);
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
    procedure ComposeDiagnosticReportPerformer(json : TJSONWriter; name : string; elem : TFhirDiagnosticReportPerformer; noObj : boolean = false);
    procedure ComposeDiagnosticReportImage(json : TJSONWriter; name : string; elem : TFhirDiagnosticReportImage; noObj : boolean = false);
    procedure ComposeDiagnosticReport(json : TJSONWriter; name : string; elem : TFhirDiagnosticReport; noObj : boolean = false);
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
    procedure ComposeDocumentManifestContent(json : TJSONWriter; name : string; elem : TFhirDocumentManifestContent; noObj : boolean = false);
    procedure ComposeDocumentManifestRelated(json : TJSONWriter; name : string; elem : TFhirDocumentManifestRelated; noObj : boolean = false);
    procedure ComposeDocumentManifest(json : TJSONWriter; name : string; elem : TFhirDocumentManifest; noObj : boolean = false);
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
    procedure ComposeDocumentReferenceRelatesTo(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceRelatesTo; noObj : boolean = false);
    procedure ComposeDocumentReferenceContent(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceContent; noObj : boolean = false);
    procedure ComposeDocumentReferenceContext(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceContext; noObj : boolean = false);
    procedure ComposeDocumentReferenceContextRelated(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceContextRelated; noObj : boolean = false);
    procedure ComposeDocumentReference(json : TJSONWriter; name : string; elem : TFhirDocumentReference; noObj : boolean = false);
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ELIGIBILITYREQUEST}
    procedure ComposeEligibilityRequest(json : TJSONWriter; name : string; elem : TFhirEligibilityRequest; noObj : boolean = false);
{$ENDIF FHIR_ELIGIBILITYREQUEST}
{$IFDEF FHIR_ELIGIBILITYRESPONSE}
    procedure ComposeEligibilityResponseInsurance(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseInsurance; noObj : boolean = false);
    procedure ComposeEligibilityResponseInsuranceBenefitBalance(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseInsuranceBenefitBalance; noObj : boolean = false);
    procedure ComposeEligibilityResponseInsuranceBenefitBalanceFinancial(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseInsuranceBenefitBalanceFinancial; noObj : boolean = false);
    procedure ComposeEligibilityResponseError(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseError; noObj : boolean = false);
    procedure ComposeEligibilityResponse(json : TJSONWriter; name : string; elem : TFhirEligibilityResponse; noObj : boolean = false);
{$ENDIF FHIR_ELIGIBILITYRESPONSE}
{$IFDEF FHIR_ENCOUNTER}
    procedure ComposeEncounterStatusHistory(json : TJSONWriter; name : string; elem : TFhirEncounterStatusHistory; noObj : boolean = false);
    procedure ComposeEncounterClassHistory(json : TJSONWriter; name : string; elem : TFhirEncounterClassHistory; noObj : boolean = false);
    procedure ComposeEncounterParticipant(json : TJSONWriter; name : string; elem : TFhirEncounterParticipant; noObj : boolean = false);
    procedure ComposeEncounterDiagnosis(json : TJSONWriter; name : string; elem : TFhirEncounterDiagnosis; noObj : boolean = false);
    procedure ComposeEncounterHospitalization(json : TJSONWriter; name : string; elem : TFhirEncounterHospitalization; noObj : boolean = false);
    procedure ComposeEncounterLocation(json : TJSONWriter; name : string; elem : TFhirEncounterLocation; noObj : boolean = false);
    procedure ComposeEncounter(json : TJSONWriter; name : string; elem : TFhirEncounter; noObj : boolean = false);
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
    procedure ComposeEndpoint(json : TJSONWriter; name : string; elem : TFhirEndpoint; noObj : boolean = false);
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
    procedure ComposeEnrollmentRequest(json : TJSONWriter; name : string; elem : TFhirEnrollmentRequest; noObj : boolean = false);
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
    procedure ComposeEnrollmentResponse(json : TJSONWriter; name : string; elem : TFhirEnrollmentResponse; noObj : boolean = false);
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
    procedure ComposeEpisodeOfCareStatusHistory(json : TJSONWriter; name : string; elem : TFhirEpisodeOfCareStatusHistory; noObj : boolean = false);
    procedure ComposeEpisodeOfCareDiagnosis(json : TJSONWriter; name : string; elem : TFhirEpisodeOfCareDiagnosis; noObj : boolean = false);
    procedure ComposeEpisodeOfCare(json : TJSONWriter; name : string; elem : TFhirEpisodeOfCare; noObj : boolean = false);
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EXPANSIONPROFILE}
    procedure ComposeExpansionProfileFixedVersion(json : TJSONWriter; name : string; elem : TFhirExpansionProfileFixedVersion; noObj : boolean = false);
    procedure ComposeExpansionProfileExcludedSystem(json : TJSONWriter; name : string; elem : TFhirExpansionProfileExcludedSystem; noObj : boolean = false);
    procedure ComposeExpansionProfileDesignation(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignation; noObj : boolean = false);
    procedure ComposeExpansionProfileDesignationInclude(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationInclude; noObj : boolean = false);
    procedure ComposeExpansionProfileDesignationIncludeDesignation(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationIncludeDesignation; noObj : boolean = false);
    procedure ComposeExpansionProfileDesignationExclude(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationExclude; noObj : boolean = false);
    procedure ComposeExpansionProfileDesignationExcludeDesignation(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationExcludeDesignation; noObj : boolean = false);
    procedure ComposeExpansionProfile(json : TJSONWriter; name : string; elem : TFhirExpansionProfile; noObj : boolean = false);
{$ENDIF FHIR_EXPANSIONPROFILE}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
    procedure ComposeExplanationOfBenefitRelated(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitRelated; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitPayee(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitPayee; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitInformation(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitInformation; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitCareTeam(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitCareTeam; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitDiagnosis(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitDiagnosis; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitProcedure(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitProcedure; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitInsurance(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitInsurance; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitAccident(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitAccident; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitItem(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItem; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitItemAdjudication(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItemAdjudication; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitItemDetail(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItemDetail; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitItemDetailSubDetail(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItemDetailSubDetail; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitAddItem(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitAddItem; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitAddItemDetail(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitAddItemDetail; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitPayment(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitPayment; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitProcessNote(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitProcessNote; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitBenefitBalance(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitBenefitBalance; noObj : boolean = false);
    procedure ComposeExplanationOfBenefitBenefitBalanceFinancial(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitBenefitBalanceFinancial; noObj : boolean = false);
    procedure ComposeExplanationOfBenefit(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefit; noObj : boolean = false);
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
    procedure ComposeFamilyMemberHistoryCondition(json : TJSONWriter; name : string; elem : TFhirFamilyMemberHistoryCondition; noObj : boolean = false);
    procedure ComposeFamilyMemberHistory(json : TJSONWriter; name : string; elem : TFhirFamilyMemberHistory; noObj : boolean = false);
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
    procedure ComposeFlag(json : TJSONWriter; name : string; elem : TFhirFlag; noObj : boolean = false);
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
    procedure ComposeGoalTarget(json : TJSONWriter; name : string; elem : TFhirGoalTarget; noObj : boolean = false);
    procedure ComposeGoal(json : TJSONWriter; name : string; elem : TFhirGoal; noObj : boolean = false);
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
    procedure ComposeGraphDefinitionLink(json : TJSONWriter; name : string; elem : TFhirGraphDefinitionLink; noObj : boolean = false);
    procedure ComposeGraphDefinitionLinkTarget(json : TJSONWriter; name : string; elem : TFhirGraphDefinitionLinkTarget; noObj : boolean = false);
    procedure ComposeGraphDefinitionLinkTargetCompartment(json : TJSONWriter; name : string; elem : TFhirGraphDefinitionLinkTargetCompartment; noObj : boolean = false);
    procedure ComposeGraphDefinition(json : TJSONWriter; name : string; elem : TFhirGraphDefinition; noObj : boolean = false);
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
    procedure ComposeGroupCharacteristic(json : TJSONWriter; name : string; elem : TFhirGroupCharacteristic; noObj : boolean = false);
    procedure ComposeGroupMember(json : TJSONWriter; name : string; elem : TFhirGroupMember; noObj : boolean = false);
    procedure ComposeGroup(json : TJSONWriter; name : string; elem : TFhirGroup; noObj : boolean = false);
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
    procedure ComposeGuidanceResponse(json : TJSONWriter; name : string; elem : TFhirGuidanceResponse; noObj : boolean = false);
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
    procedure ComposeHealthcareServiceAvailableTime(json : TJSONWriter; name : string; elem : TFhirHealthcareServiceAvailableTime; noObj : boolean = false);
    procedure ComposeHealthcareServiceNotAvailable(json : TJSONWriter; name : string; elem : TFhirHealthcareServiceNotAvailable; noObj : boolean = false);
    procedure ComposeHealthcareService(json : TJSONWriter; name : string; elem : TFhirHealthcareService; noObj : boolean = false);
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGMANIFEST}
    procedure ComposeImagingManifestStudy(json : TJSONWriter; name : string; elem : TFhirImagingManifestStudy; noObj : boolean = false);
    procedure ComposeImagingManifestStudySeries(json : TJSONWriter; name : string; elem : TFhirImagingManifestStudySeries; noObj : boolean = false);
    procedure ComposeImagingManifestStudySeriesInstance(json : TJSONWriter; name : string; elem : TFhirImagingManifestStudySeriesInstance; noObj : boolean = false);
    procedure ComposeImagingManifest(json : TJSONWriter; name : string; elem : TFhirImagingManifest; noObj : boolean = false);
{$ENDIF FHIR_IMAGINGMANIFEST}
{$IFDEF FHIR_IMAGINGSTUDY}
    procedure ComposeImagingStudySeries(json : TJSONWriter; name : string; elem : TFhirImagingStudySeries; noObj : boolean = false);
    procedure ComposeImagingStudySeriesInstance(json : TJSONWriter; name : string; elem : TFhirImagingStudySeriesInstance; noObj : boolean = false);
    procedure ComposeImagingStudy(json : TJSONWriter; name : string; elem : TFhirImagingStudy; noObj : boolean = false);
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
    procedure ComposeImmunizationPractitioner(json : TJSONWriter; name : string; elem : TFhirImmunizationPractitioner; noObj : boolean = false);
    procedure ComposeImmunizationExplanation(json : TJSONWriter; name : string; elem : TFhirImmunizationExplanation; noObj : boolean = false);
    procedure ComposeImmunizationReaction(json : TJSONWriter; name : string; elem : TFhirImmunizationReaction; noObj : boolean = false);
    procedure ComposeImmunizationVaccinationProtocol(json : TJSONWriter; name : string; elem : TFhirImmunizationVaccinationProtocol; noObj : boolean = false);
    procedure ComposeImmunization(json : TJSONWriter; name : string; elem : TFhirImmunization; noObj : boolean = false);
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
    procedure ComposeImmunizationRecommendationRecommendation(json : TJSONWriter; name : string; elem : TFhirImmunizationRecommendationRecommendation; noObj : boolean = false);
    procedure ComposeImmunizationRecommendationRecommendationDateCriterion(json : TJSONWriter; name : string; elem : TFhirImmunizationRecommendationRecommendationDateCriterion; noObj : boolean = false);
    procedure ComposeImmunizationRecommendationRecommendationProtocol(json : TJSONWriter; name : string; elem : TFhirImmunizationRecommendationRecommendationProtocol; noObj : boolean = false);
    procedure ComposeImmunizationRecommendation(json : TJSONWriter; name : string; elem : TFhirImmunizationRecommendation; noObj : boolean = false);
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
    procedure ComposeImplementationGuideDependency(json : TJSONWriter; name : string; elem : TFhirImplementationGuideDependency; noObj : boolean = false);
    procedure ComposeImplementationGuidePackage(json : TJSONWriter; name : string; elem : TFhirImplementationGuidePackage; noObj : boolean = false);
    procedure ComposeImplementationGuidePackageResource(json : TJSONWriter; name : string; elem : TFhirImplementationGuidePackageResource; noObj : boolean = false);
    procedure ComposeImplementationGuideGlobal(json : TJSONWriter; name : string; elem : TFhirImplementationGuideGlobal; noObj : boolean = false);
    procedure ComposeImplementationGuidePage(json : TJSONWriter; name : string; elem : TFhirImplementationGuidePage; noObj : boolean = false);
    procedure ComposeImplementationGuide(json : TJSONWriter; name : string; elem : TFhirImplementationGuide; noObj : boolean = false);
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_LIBRARY}
    procedure ComposeLibrary(json : TJSONWriter; name : string; elem : TFhirLibrary; noObj : boolean = false);
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
    procedure ComposeLinkageItem(json : TJSONWriter; name : string; elem : TFhirLinkageItem; noObj : boolean = false);
    procedure ComposeLinkage(json : TJSONWriter; name : string; elem : TFhirLinkage; noObj : boolean = false);
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
    procedure ComposeListEntry(json : TJSONWriter; name : string; elem : TFhirListEntry; noObj : boolean = false);
    procedure ComposeList(json : TJSONWriter; name : string; elem : TFhirList; noObj : boolean = false);
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
    procedure ComposeLocationPosition(json : TJSONWriter; name : string; elem : TFhirLocationPosition; noObj : boolean = false);
    procedure ComposeLocation(json : TJSONWriter; name : string; elem : TFhirLocation; noObj : boolean = false);
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
    procedure ComposeMeasureGroup(json : TJSONWriter; name : string; elem : TFhirMeasureGroup; noObj : boolean = false);
    procedure ComposeMeasureGroupPopulation(json : TJSONWriter; name : string; elem : TFhirMeasureGroupPopulation; noObj : boolean = false);
    procedure ComposeMeasureGroupStratifier(json : TJSONWriter; name : string; elem : TFhirMeasureGroupStratifier; noObj : boolean = false);
    procedure ComposeMeasureSupplementalData(json : TJSONWriter; name : string; elem : TFhirMeasureSupplementalData; noObj : boolean = false);
    procedure ComposeMeasure(json : TJSONWriter; name : string; elem : TFhirMeasure; noObj : boolean = false);
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
    procedure ComposeMeasureReportGroup(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroup; noObj : boolean = false);
    procedure ComposeMeasureReportGroupPopulation(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupPopulation; noObj : boolean = false);
    procedure ComposeMeasureReportGroupStratifier(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupStratifier; noObj : boolean = false);
    procedure ComposeMeasureReportGroupStratifierStratum(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupStratifierStratum; noObj : boolean = false);
    procedure ComposeMeasureReportGroupStratifierStratumPopulation(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupStratifierStratumPopulation; noObj : boolean = false);
    procedure ComposeMeasureReport(json : TJSONWriter; name : string; elem : TFhirMeasureReport; noObj : boolean = false);
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
    procedure ComposeMedia(json : TJSONWriter; name : string; elem : TFhirMedia; noObj : boolean = false);
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
    procedure ComposeMedicationIngredient(json : TJSONWriter; name : string; elem : TFhirMedicationIngredient; noObj : boolean = false);
    procedure ComposeMedicationPackage(json : TJSONWriter; name : string; elem : TFhirMedicationPackage; noObj : boolean = false);
    procedure ComposeMedicationPackageContent(json : TJSONWriter; name : string; elem : TFhirMedicationPackageContent; noObj : boolean = false);
    procedure ComposeMedicationPackageBatch(json : TJSONWriter; name : string; elem : TFhirMedicationPackageBatch; noObj : boolean = false);
    procedure ComposeMedication(json : TJSONWriter; name : string; elem : TFhirMedication; noObj : boolean = false);
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
    procedure ComposeMedicationAdministrationPerformer(json : TJSONWriter; name : string; elem : TFhirMedicationAdministrationPerformer; noObj : boolean = false);
    procedure ComposeMedicationAdministrationDosage(json : TJSONWriter; name : string; elem : TFhirMedicationAdministrationDosage; noObj : boolean = false);
    procedure ComposeMedicationAdministration(json : TJSONWriter; name : string; elem : TFhirMedicationAdministration; noObj : boolean = false);
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
    procedure ComposeMedicationDispensePerformer(json : TJSONWriter; name : string; elem : TFhirMedicationDispensePerformer; noObj : boolean = false);
    procedure ComposeMedicationDispenseSubstitution(json : TJSONWriter; name : string; elem : TFhirMedicationDispenseSubstitution; noObj : boolean = false);
    procedure ComposeMedicationDispense(json : TJSONWriter; name : string; elem : TFhirMedicationDispense; noObj : boolean = false);
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONREQUEST}
    procedure ComposeMedicationRequestRequester(json : TJSONWriter; name : string; elem : TFhirMedicationRequestRequester; noObj : boolean = false);
    procedure ComposeMedicationRequestDispenseRequest(json : TJSONWriter; name : string; elem : TFhirMedicationRequestDispenseRequest; noObj : boolean = false);
    procedure ComposeMedicationRequestSubstitution(json : TJSONWriter; name : string; elem : TFhirMedicationRequestSubstitution; noObj : boolean = false);
    procedure ComposeMedicationRequest(json : TJSONWriter; name : string; elem : TFhirMedicationRequest; noObj : boolean = false);
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
    procedure ComposeMedicationStatement(json : TJSONWriter; name : string; elem : TFhirMedicationStatement; noObj : boolean = false);
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MESSAGEDEFINITION}
    procedure ComposeMessageDefinitionFocus(json : TJSONWriter; name : string; elem : TFhirMessageDefinitionFocus; noObj : boolean = false);
    procedure ComposeMessageDefinitionAllowedResponse(json : TJSONWriter; name : string; elem : TFhirMessageDefinitionAllowedResponse; noObj : boolean = false);
    procedure ComposeMessageDefinition(json : TJSONWriter; name : string; elem : TFhirMessageDefinition; noObj : boolean = false);
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
    procedure ComposeMessageHeaderDestination(json : TJSONWriter; name : string; elem : TFhirMessageHeaderDestination; noObj : boolean = false);
    procedure ComposeMessageHeaderSource(json : TJSONWriter; name : string; elem : TFhirMessageHeaderSource; noObj : boolean = false);
    procedure ComposeMessageHeaderResponse(json : TJSONWriter; name : string; elem : TFhirMessageHeaderResponse; noObj : boolean = false);
    procedure ComposeMessageHeader(json : TJSONWriter; name : string; elem : TFhirMessageHeader; noObj : boolean = false);
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_NAMINGSYSTEM}
    procedure ComposeNamingSystemUniqueId(json : TJSONWriter; name : string; elem : TFhirNamingSystemUniqueId; noObj : boolean = false);
    procedure ComposeNamingSystem(json : TJSONWriter; name : string; elem : TFhirNamingSystem; noObj : boolean = false);
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
    procedure ComposeNutritionOrderOralDiet(json : TJSONWriter; name : string; elem : TFhirNutritionOrderOralDiet; noObj : boolean = false);
    procedure ComposeNutritionOrderOralDietNutrient(json : TJSONWriter; name : string; elem : TFhirNutritionOrderOralDietNutrient; noObj : boolean = false);
    procedure ComposeNutritionOrderOralDietTexture(json : TJSONWriter; name : string; elem : TFhirNutritionOrderOralDietTexture; noObj : boolean = false);
    procedure ComposeNutritionOrderSupplement(json : TJSONWriter; name : string; elem : TFhirNutritionOrderSupplement; noObj : boolean = false);
    procedure ComposeNutritionOrderEnteralFormula(json : TJSONWriter; name : string; elem : TFhirNutritionOrderEnteralFormula; noObj : boolean = false);
    procedure ComposeNutritionOrderEnteralFormulaAdministration(json : TJSONWriter; name : string; elem : TFhirNutritionOrderEnteralFormulaAdministration; noObj : boolean = false);
    procedure ComposeNutritionOrder(json : TJSONWriter; name : string; elem : TFhirNutritionOrder; noObj : boolean = false);
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
    procedure ComposeObservationReferenceRange(json : TJSONWriter; name : string; elem : TFhirObservationReferenceRange; noObj : boolean = false);
    procedure ComposeObservationRelated(json : TJSONWriter; name : string; elem : TFhirObservationRelated; noObj : boolean = false);
    procedure ComposeObservationComponent(json : TJSONWriter; name : string; elem : TFhirObservationComponent; noObj : boolean = false);
    procedure ComposeObservation(json : TJSONWriter; name : string; elem : TFhirObservation; noObj : boolean = false);
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OPERATIONDEFINITION}
    procedure ComposeOperationDefinitionParameter(json : TJSONWriter; name : string; elem : TFhirOperationDefinitionParameter; noObj : boolean = false);
    procedure ComposeOperationDefinitionParameterBinding(json : TJSONWriter; name : string; elem : TFhirOperationDefinitionParameterBinding; noObj : boolean = false);
    procedure ComposeOperationDefinitionOverload(json : TJSONWriter; name : string; elem : TFhirOperationDefinitionOverload; noObj : boolean = false);
    procedure ComposeOperationDefinition(json : TJSONWriter; name : string; elem : TFhirOperationDefinition; noObj : boolean = false);
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
    procedure ComposeOperationOutcomeIssue(json : TJSONWriter; name : string; elem : TFhirOperationOutcomeIssue; noObj : boolean = false);
    procedure ComposeOperationOutcome(json : TJSONWriter; name : string; elem : TFhirOperationOutcome; noObj : boolean = false);
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
    procedure ComposeOrganizationContact(json : TJSONWriter; name : string; elem : TFhirOrganizationContact; noObj : boolean = false);
    procedure ComposeOrganization(json : TJSONWriter; name : string; elem : TFhirOrganization; noObj : boolean = false);
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_PATIENT}
    procedure ComposePatientContact(json : TJSONWriter; name : string; elem : TFhirPatientContact; noObj : boolean = false);
    procedure ComposePatientAnimal(json : TJSONWriter; name : string; elem : TFhirPatientAnimal; noObj : boolean = false);
    procedure ComposePatientCommunication(json : TJSONWriter; name : string; elem : TFhirPatientCommunication; noObj : boolean = false);
    procedure ComposePatientLink(json : TJSONWriter; name : string; elem : TFhirPatientLink; noObj : boolean = false);
    procedure ComposePatient(json : TJSONWriter; name : string; elem : TFhirPatient; noObj : boolean = false);
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
    procedure ComposePaymentNotice(json : TJSONWriter; name : string; elem : TFhirPaymentNotice; noObj : boolean = false);
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
    procedure ComposePaymentReconciliationDetail(json : TJSONWriter; name : string; elem : TFhirPaymentReconciliationDetail; noObj : boolean = false);
    procedure ComposePaymentReconciliationProcessNote(json : TJSONWriter; name : string; elem : TFhirPaymentReconciliationProcessNote; noObj : boolean = false);
    procedure ComposePaymentReconciliation(json : TJSONWriter; name : string; elem : TFhirPaymentReconciliation; noObj : boolean = false);
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
    procedure ComposePersonLink(json : TJSONWriter; name : string; elem : TFhirPersonLink; noObj : boolean = false);
    procedure ComposePerson(json : TJSONWriter; name : string; elem : TFhirPerson; noObj : boolean = false);
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
    procedure ComposePlanDefinitionGoal(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionGoal; noObj : boolean = false);
    procedure ComposePlanDefinitionGoalTarget(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionGoalTarget; noObj : boolean = false);
    procedure ComposePlanDefinitionAction(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionAction; noObj : boolean = false);
    procedure ComposePlanDefinitionActionCondition(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionCondition; noObj : boolean = false);
    procedure ComposePlanDefinitionActionRelatedAction(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionRelatedAction; noObj : boolean = false);
    procedure ComposePlanDefinitionActionParticipant(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionParticipant; noObj : boolean = false);
    procedure ComposePlanDefinitionActionDynamicValue(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionDynamicValue; noObj : boolean = false);
    procedure ComposePlanDefinition(json : TJSONWriter; name : string; elem : TFhirPlanDefinition; noObj : boolean = false);
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
    procedure ComposePractitionerQualification(json : TJSONWriter; name : string; elem : TFhirPractitionerQualification; noObj : boolean = false);
    procedure ComposePractitioner(json : TJSONWriter; name : string; elem : TFhirPractitioner; noObj : boolean = false);
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
    procedure ComposePractitionerRoleAvailableTime(json : TJSONWriter; name : string; elem : TFhirPractitionerRoleAvailableTime; noObj : boolean = false);
    procedure ComposePractitionerRoleNotAvailable(json : TJSONWriter; name : string; elem : TFhirPractitionerRoleNotAvailable; noObj : boolean = false);
    procedure ComposePractitionerRole(json : TJSONWriter; name : string; elem : TFhirPractitionerRole; noObj : boolean = false);
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
    procedure ComposeProcedurePerformer(json : TJSONWriter; name : string; elem : TFhirProcedurePerformer; noObj : boolean = false);
    procedure ComposeProcedureFocalDevice(json : TJSONWriter; name : string; elem : TFhirProcedureFocalDevice; noObj : boolean = false);
    procedure ComposeProcedure(json : TJSONWriter; name : string; elem : TFhirProcedure; noObj : boolean = false);
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROCEDUREREQUEST}
    procedure ComposeProcedureRequestRequester(json : TJSONWriter; name : string; elem : TFhirProcedureRequestRequester; noObj : boolean = false);
    procedure ComposeProcedureRequest(json : TJSONWriter; name : string; elem : TFhirProcedureRequest; noObj : boolean = false);
{$ENDIF FHIR_PROCEDUREREQUEST}
{$IFDEF FHIR_PROCESSREQUEST}
    procedure ComposeProcessRequestItem(json : TJSONWriter; name : string; elem : TFhirProcessRequestItem; noObj : boolean = false);
    procedure ComposeProcessRequest(json : TJSONWriter; name : string; elem : TFhirProcessRequest; noObj : boolean = false);
{$ENDIF FHIR_PROCESSREQUEST}
{$IFDEF FHIR_PROCESSRESPONSE}
    procedure ComposeProcessResponseProcessNote(json : TJSONWriter; name : string; elem : TFhirProcessResponseProcessNote; noObj : boolean = false);
    procedure ComposeProcessResponse(json : TJSONWriter; name : string; elem : TFhirProcessResponse; noObj : boolean = false);
{$ENDIF FHIR_PROCESSRESPONSE}
{$IFDEF FHIR_PROVENANCE}
    procedure ComposeProvenanceAgent(json : TJSONWriter; name : string; elem : TFhirProvenanceAgent; noObj : boolean = false);
    procedure ComposeProvenanceEntity(json : TJSONWriter; name : string; elem : TFhirProvenanceEntity; noObj : boolean = false);
    procedure ComposeProvenance(json : TJSONWriter; name : string; elem : TFhirProvenance; noObj : boolean = false);
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
    procedure ComposeQuestionnaireItem(json : TJSONWriter; name : string; elem : TFhirQuestionnaireItem; noObj : boolean = false);
    procedure ComposeQuestionnaireItemEnableWhen(json : TJSONWriter; name : string; elem : TFhirQuestionnaireItemEnableWhen; noObj : boolean = false);
    procedure ComposeQuestionnaireItemOption(json : TJSONWriter; name : string; elem : TFhirQuestionnaireItemOption; noObj : boolean = false);
    procedure ComposeQuestionnaire(json : TJSONWriter; name : string; elem : TFhirQuestionnaire; noObj : boolean = false);
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
    procedure ComposeQuestionnaireResponseItem(json : TJSONWriter; name : string; elem : TFhirQuestionnaireResponseItem; noObj : boolean = false);
    procedure ComposeQuestionnaireResponseItemAnswer(json : TJSONWriter; name : string; elem : TFhirQuestionnaireResponseItemAnswer; noObj : boolean = false);
    procedure ComposeQuestionnaireResponse(json : TJSONWriter; name : string; elem : TFhirQuestionnaireResponse; noObj : boolean = false);
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REFERRALREQUEST}
    procedure ComposeReferralRequestRequester(json : TJSONWriter; name : string; elem : TFhirReferralRequestRequester; noObj : boolean = false);
    procedure ComposeReferralRequest(json : TJSONWriter; name : string; elem : TFhirReferralRequest; noObj : boolean = false);
{$ENDIF FHIR_REFERRALREQUEST}
{$IFDEF FHIR_RELATEDPERSON}
    procedure ComposeRelatedPerson(json : TJSONWriter; name : string; elem : TFhirRelatedPerson; noObj : boolean = false);
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
    procedure ComposeRequestGroupAction(json : TJSONWriter; name : string; elem : TFhirRequestGroupAction; noObj : boolean = false);
    procedure ComposeRequestGroupActionCondition(json : TJSONWriter; name : string; elem : TFhirRequestGroupActionCondition; noObj : boolean = false);
    procedure ComposeRequestGroupActionRelatedAction(json : TJSONWriter; name : string; elem : TFhirRequestGroupActionRelatedAction; noObj : boolean = false);
    procedure ComposeRequestGroup(json : TJSONWriter; name : string; elem : TFhirRequestGroup; noObj : boolean = false);
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
    procedure ComposeResearchStudyArm(json : TJSONWriter; name : string; elem : TFhirResearchStudyArm; noObj : boolean = false);
    procedure ComposeResearchStudy(json : TJSONWriter; name : string; elem : TFhirResearchStudy; noObj : boolean = false);
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
    procedure ComposeResearchSubject(json : TJSONWriter; name : string; elem : TFhirResearchSubject; noObj : boolean = false);
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
    procedure ComposeRiskAssessmentPrediction(json : TJSONWriter; name : string; elem : TFhirRiskAssessmentPrediction; noObj : boolean = false);
    procedure ComposeRiskAssessment(json : TJSONWriter; name : string; elem : TFhirRiskAssessment; noObj : boolean = false);
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
    procedure ComposeSchedule(json : TJSONWriter; name : string; elem : TFhirSchedule; noObj : boolean = false);
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
    procedure ComposeSearchParameterComponent(json : TJSONWriter; name : string; elem : TFhirSearchParameterComponent; noObj : boolean = false);
    procedure ComposeSearchParameter(json : TJSONWriter; name : string; elem : TFhirSearchParameter; noObj : boolean = false);
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SEQUENCE}
    procedure ComposeSequenceReferenceSeq(json : TJSONWriter; name : string; elem : TFhirSequenceReferenceSeq; noObj : boolean = false);
    procedure ComposeSequenceVariant(json : TJSONWriter; name : string; elem : TFhirSequenceVariant; noObj : boolean = false);
    procedure ComposeSequenceQuality(json : TJSONWriter; name : string; elem : TFhirSequenceQuality; noObj : boolean = false);
    procedure ComposeSequenceRepository(json : TJSONWriter; name : string; elem : TFhirSequenceRepository; noObj : boolean = false);
    procedure ComposeSequence(json : TJSONWriter; name : string; elem : TFhirSequence; noObj : boolean = false);
{$ENDIF FHIR_SEQUENCE}
{$IFDEF FHIR_SERVICEDEFINITION}
    procedure ComposeServiceDefinition(json : TJSONWriter; name : string; elem : TFhirServiceDefinition; noObj : boolean = false);
{$ENDIF FHIR_SERVICEDEFINITION}
{$IFDEF FHIR_SLOT}
    procedure ComposeSlot(json : TJSONWriter; name : string; elem : TFhirSlot; noObj : boolean = false);
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
    procedure ComposeSpecimenCollection(json : TJSONWriter; name : string; elem : TFhirSpecimenCollection; noObj : boolean = false);
    procedure ComposeSpecimenProcessing(json : TJSONWriter; name : string; elem : TFhirSpecimenProcessing; noObj : boolean = false);
    procedure ComposeSpecimenContainer(json : TJSONWriter; name : string; elem : TFhirSpecimenContainer; noObj : boolean = false);
    procedure ComposeSpecimen(json : TJSONWriter; name : string; elem : TFhirSpecimen; noObj : boolean = false);
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_STRUCTUREDEFINITION}
    procedure ComposeStructureDefinitionMapping(json : TJSONWriter; name : string; elem : TFhirStructureDefinitionMapping; noObj : boolean = false);
    procedure ComposeStructureDefinitionSnapshot(json : TJSONWriter; name : string; elem : TFhirStructureDefinitionSnapshot; noObj : boolean = false);
    procedure ComposeStructureDefinitionDifferential(json : TJSONWriter; name : string; elem : TFhirStructureDefinitionDifferential; noObj : boolean = false);
    procedure ComposeStructureDefinition(json : TJSONWriter; name : string; elem : TFhirStructureDefinition; noObj : boolean = false);
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
    procedure ComposeStructureMapStructure(json : TJSONWriter; name : string; elem : TFhirStructureMapStructure; noObj : boolean = false);
    procedure ComposeStructureMapGroup(json : TJSONWriter; name : string; elem : TFhirStructureMapGroup; noObj : boolean = false);
    procedure ComposeStructureMapGroupInput(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupInput; noObj : boolean = false);
    procedure ComposeStructureMapGroupRule(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRule; noObj : boolean = false);
    procedure ComposeStructureMapGroupRuleSource(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleSource; noObj : boolean = false);
    procedure ComposeStructureMapGroupRuleTarget(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleTarget; noObj : boolean = false);
    procedure ComposeStructureMapGroupRuleTargetParameter(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleTargetParameter; noObj : boolean = false);
    procedure ComposeStructureMapGroupRuleDependent(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleDependent; noObj : boolean = false);
    procedure ComposeStructureMap(json : TJSONWriter; name : string; elem : TFhirStructureMap; noObj : boolean = false);
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
    procedure ComposeSubscriptionChannel(json : TJSONWriter; name : string; elem : TFhirSubscriptionChannel; noObj : boolean = false);
    procedure ComposeSubscription(json : TJSONWriter; name : string; elem : TFhirSubscription; noObj : boolean = false);
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
    procedure ComposeSubstanceInstance(json : TJSONWriter; name : string; elem : TFhirSubstanceInstance; noObj : boolean = false);
    procedure ComposeSubstanceIngredient(json : TJSONWriter; name : string; elem : TFhirSubstanceIngredient; noObj : boolean = false);
    procedure ComposeSubstance(json : TJSONWriter; name : string; elem : TFhirSubstance; noObj : boolean = false);
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUPPLYDELIVERY}
    procedure ComposeSupplyDeliverySuppliedItem(json : TJSONWriter; name : string; elem : TFhirSupplyDeliverySuppliedItem; noObj : boolean = false);
    procedure ComposeSupplyDelivery(json : TJSONWriter; name : string; elem : TFhirSupplyDelivery; noObj : boolean = false);
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
    procedure ComposeSupplyRequestOrderedItem(json : TJSONWriter; name : string; elem : TFhirSupplyRequestOrderedItem; noObj : boolean = false);
    procedure ComposeSupplyRequestRequester(json : TJSONWriter; name : string; elem : TFhirSupplyRequestRequester; noObj : boolean = false);
    procedure ComposeSupplyRequest(json : TJSONWriter; name : string; elem : TFhirSupplyRequest; noObj : boolean = false);
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
    procedure ComposeTaskRequester(json : TJSONWriter; name : string; elem : TFhirTaskRequester; noObj : boolean = false);
    procedure ComposeTaskRestriction(json : TJSONWriter; name : string; elem : TFhirTaskRestriction; noObj : boolean = false);
    procedure ComposeTaskInput(json : TJSONWriter; name : string; elem : TFhirTaskInput; noObj : boolean = false);
    procedure ComposeTaskOutput(json : TJSONWriter; name : string; elem : TFhirTaskOutput; noObj : boolean = false);
    procedure ComposeTask(json : TJSONWriter; name : string; elem : TFhirTask; noObj : boolean = false);
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TESTREPORT}
    procedure ComposeTestReportParticipant(json : TJSONWriter; name : string; elem : TFhirTestReportParticipant; noObj : boolean = false);
    procedure ComposeTestReportSetup(json : TJSONWriter; name : string; elem : TFhirTestReportSetup; noObj : boolean = false);
    procedure ComposeTestReportSetupAction(json : TJSONWriter; name : string; elem : TFhirTestReportSetupAction; noObj : boolean = false);
    procedure ComposeTestReportSetupActionOperation(json : TJSONWriter; name : string; elem : TFhirTestReportSetupActionOperation; noObj : boolean = false);
    procedure ComposeTestReportSetupActionAssert(json : TJSONWriter; name : string; elem : TFhirTestReportSetupActionAssert; noObj : boolean = false);
    procedure ComposeTestReportTest(json : TJSONWriter; name : string; elem : TFhirTestReportTest; noObj : boolean = false);
    procedure ComposeTestReportTestAction(json : TJSONWriter; name : string; elem : TFhirTestReportTestAction; noObj : boolean = false);
    procedure ComposeTestReportTeardown(json : TJSONWriter; name : string; elem : TFhirTestReportTeardown; noObj : boolean = false);
    procedure ComposeTestReportTeardownAction(json : TJSONWriter; name : string; elem : TFhirTestReportTeardownAction; noObj : boolean = false);
    procedure ComposeTestReport(json : TJSONWriter; name : string; elem : TFhirTestReport; noObj : boolean = false);
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
    procedure ComposeTestScriptOrigin(json : TJSONWriter; name : string; elem : TFhirTestScriptOrigin; noObj : boolean = false);
    procedure ComposeTestScriptDestination(json : TJSONWriter; name : string; elem : TFhirTestScriptDestination; noObj : boolean = false);
    procedure ComposeTestScriptMetadata(json : TJSONWriter; name : string; elem : TFhirTestScriptMetadata; noObj : boolean = false);
    procedure ComposeTestScriptMetadataLink(json : TJSONWriter; name : string; elem : TFhirTestScriptMetadataLink; noObj : boolean = false);
    procedure ComposeTestScriptMetadataCapability(json : TJSONWriter; name : string; elem : TFhirTestScriptMetadataCapability; noObj : boolean = false);
    procedure ComposeTestScriptFixture(json : TJSONWriter; name : string; elem : TFhirTestScriptFixture; noObj : boolean = false);
    procedure ComposeTestScriptVariable(json : TJSONWriter; name : string; elem : TFhirTestScriptVariable; noObj : boolean = false);
    procedure ComposeTestScriptRule(json : TJSONWriter; name : string; elem : TFhirTestScriptRule; noObj : boolean = false);
    procedure ComposeTestScriptRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptRuleParam; noObj : boolean = false);
    procedure ComposeTestScriptRuleset(json : TJSONWriter; name : string; elem : TFhirTestScriptRuleset; noObj : boolean = false);
    procedure ComposeTestScriptRulesetRule(json : TJSONWriter; name : string; elem : TFhirTestScriptRulesetRule; noObj : boolean = false);
    procedure ComposeTestScriptRulesetRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptRulesetRuleParam; noObj : boolean = false);
    procedure ComposeTestScriptSetup(json : TJSONWriter; name : string; elem : TFhirTestScriptSetup; noObj : boolean = false);
    procedure ComposeTestScriptSetupAction(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupAction; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionOperation(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionOperation; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionOperationRequestHeader(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionOperationRequestHeader; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionAssert(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssert; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionAssertRule(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRule; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionAssertRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRuleParam; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionAssertRuleset(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRuleset; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionAssertRulesetRule(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRulesetRule; noObj : boolean = false);
    procedure ComposeTestScriptSetupActionAssertRulesetRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRulesetRuleParam; noObj : boolean = false);
    procedure ComposeTestScriptTest(json : TJSONWriter; name : string; elem : TFhirTestScriptTest; noObj : boolean = false);
    procedure ComposeTestScriptTestAction(json : TJSONWriter; name : string; elem : TFhirTestScriptTestAction; noObj : boolean = false);
    procedure ComposeTestScriptTeardown(json : TJSONWriter; name : string; elem : TFhirTestScriptTeardown; noObj : boolean = false);
    procedure ComposeTestScriptTeardownAction(json : TJSONWriter; name : string; elem : TFhirTestScriptTeardownAction; noObj : boolean = false);
    procedure ComposeTestScript(json : TJSONWriter; name : string; elem : TFhirTestScript; noObj : boolean = false);
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
    procedure ComposeValueSetCompose(json : TJSONWriter; name : string; elem : TFhirValueSetCompose; noObj : boolean = false);
    procedure ComposeValueSetComposeInclude(json : TJSONWriter; name : string; elem : TFhirValueSetComposeInclude; noObj : boolean = false);
    procedure ComposeValueSetComposeIncludeConcept(json : TJSONWriter; name : string; elem : TFhirValueSetComposeIncludeConcept; noObj : boolean = false);
    procedure ComposeValueSetComposeIncludeConceptDesignation(json : TJSONWriter; name : string; elem : TFhirValueSetComposeIncludeConceptDesignation; noObj : boolean = false);
    procedure ComposeValueSetComposeIncludeFilter(json : TJSONWriter; name : string; elem : TFhirValueSetComposeIncludeFilter; noObj : boolean = false);
    procedure ComposeValueSetExpansion(json : TJSONWriter; name : string; elem : TFhirValueSetExpansion; noObj : boolean = false);
    procedure ComposeValueSetExpansionParameter(json : TJSONWriter; name : string; elem : TFhirValueSetExpansionParameter; noObj : boolean = false);
    procedure ComposeValueSetExpansionContains(json : TJSONWriter; name : string; elem : TFhirValueSetExpansionContains; noObj : boolean = false);
    procedure ComposeValueSet(json : TJSONWriter; name : string; elem : TFhirValueSet; noObj : boolean = false);
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VISIONPRESCRIPTION}
    procedure ComposeVisionPrescriptionDispense(json : TJSONWriter; name : string; elem : TFhirVisionPrescriptionDispense; noObj : boolean = false);
    procedure ComposeVisionPrescription(json : TJSONWriter; name : string; elem : TFhirVisionPrescription; noObj : boolean = false);
{$ENDIF FHIR_VISIONPRESCRIPTION}
    procedure ComposeResource(json : TJSONWriter; resource : TFhirResource); override;
    procedure ComposeBase(json : TJSONWriter; name : String; base : TFHIRObject); override;
  end;


implementation

{ TFHIRJsonParser }

procedure TFHIRJsonParser.ParseElement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElement(jsn)); {2}
end;

function TFHIRJsonParser.ParseElement(jsn : TJsonObject) : TFhirElement;
begin
  result := TFhirElement.create;
  try
    ParseElementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonComposer.ComposeElement(json : TJSONWriter; name : string; elem : TFhirElement; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdValue(json, 'id', elem.idElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdProps(json, 'id', elem.idElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.extensionList.Count > 0) then
  begin
    json.valueArray('extension');
    for i := 0 to elem.extensionList.Count - 1 do
      ComposeExtension(json, '', elem.extensionList[i]); {z - Extension}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementProperties(jsn : TJsonObject; element : TFhirElement);
begin
  parseComments(element, jsn);

  element.LocationStart := jsn.LocationStart;
  element.LocationEnd := jsn.LocationEnd;
  if jsn.has('id') then
    element.Id := jsn.str['id'];
  if jsn.has('extension') then
    iterateArray(jsn.vArr['extension'], element.extensionList, parseExtension);
end;

procedure TFHIRJsonParser.ParseBackboneElementProperties(jsn : TJsonObject; element : TFhirBackboneElement);
begin
  parseElementProperties(jsn, element);

  if jsn.has('modifierExtension') then
    iterateArray(jsn.vArr['modifierExtension'], element.modifierExtensionList, parseExtension);
end;

Procedure TFHIRJsonComposer.ComposeElementProperties(json : TJSONWriter; elem : TFhirElement);
var
  i : integer;
begin
  {no-comments composeComments(json, elem);}
  Prop(json, 'id', elem.Id);
  if elem.hasExtensionList then
  begin
    json.valueArray('extension');
    for i := 0 to elem.extensionList.Count - 1 do
      ComposeExtension(json, '',elem.extensionList[i]);
    json.FinishArray;
  end;
end;

Procedure TFHIRJsonComposer.ComposeBackboneElementProperties(json : TJSONWriter; elem : TFhirBackboneElement);
var
  i : integer;
begin
  ComposeElementProperties(json, elem);
  if elem.hasModifierExtensionList then
  begin
    json.valueArray('modifierExtension');
    for i := 0 to elem.modifierExtensionList.Count - 1 do
      ComposeExtension(json, '', elem.modifierExtensionList[i]);
    json.FinishArray;
  end;
end;

procedure TFHIRJsonParser.ParseBackboneElement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBackboneElement(jsn)); {2}
end;

function TFHIRJsonParser.ParseBackboneElement(jsn : TJsonObject) : TFhirBackboneElement;
begin
  result := TFhirBackboneElement.create;
  try
    ParseBackboneElementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonComposer.ComposeBackboneElement(json : TJSONWriter; name : string; elem : TFhirBackboneElement; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.modifierExtensionList.Count > 0) then
  begin
    json.valueArray('modifierExtension');
    for i := 0 to elem.modifierExtensionList.Count - 1 do
      ComposeExtension(json, '', elem.modifierExtensionList[i]); {z - Extension}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEnum(path : String; value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList; Const aNames, aSystems : Array Of String);
begin
  ctxt.add(ParseEnum(path, value, jsn, aNames, aSystems));
end;

function TFHIRJsonParser.ParseEnum(path : String; value : TJsonNode; jsn : TJsonObject; Const aNames, aSystems : Array Of String) : TFHIREnum;
var
  i : integer;
begin
  i := StringArrayIndexOfSensitive(aNames, JsonToString(value));
  if (value <> nil) and (i < 0) then
    raise EParserException.Create('unknown code: '+JsonToString(value)+' from a set of choices of '+StringArrayToCommaString(aNames)+' for "'+path+'"', value.LocationStart.line+1, value.LocationStart.col+1);
  result := TFHIREnum.create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := JsonToString(value);
    result.system := aSystems[i];
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeEnumValue(json : TJSONWriter; name : String; value : TFhirEnum; Const aNames : Array Of String; inArray : boolean);
begin
  if (value = nil) or (value.Value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeEnumProps(json : TJSONWriter; name : String; value : TFhirEnum; Const aNames : Array Of String; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments) }) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseDate(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDate(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseDate(value : TJsonNode; jsn : TJsonObject) : TFHIRDate;
begin
  result := TFhirDate.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
     result.value := toTDateTimeEx(JsonToString(value));
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeDateValue(json : TJSONWriter; name : String; value : TFhirDate; inArray : boolean);
begin
  if (value = nil) or (value.value.null) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, asString(value.value));
end;

Procedure TFHIRJsonComposer.ComposeDateProps(json : TJSONWriter; name : String; value : TFhirDate; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseDateTime(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDateTime(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseDateTime(value : TJsonNode; jsn : TJsonObject) : TFHIRDateTime;
begin
  result := TFhirDateTime.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
     result.value := toTDateTimeEx(JsonToString(value));
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeDateTimeValue(json : TJSONWriter; name : String; value : TFhirDateTime; inArray : boolean);
begin
  if (value = nil) or (value.value.null) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, asString(value.value));
end;

Procedure TFHIRJsonComposer.ComposeDateTimeProps(json : TJSONWriter; name : String; value : TFhirDateTime; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseString(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseString(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseString(value : TJsonNode; jsn : TJsonObject) : TFHIRString;
begin
  result := TFhirString.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeStringValue(json : TJSONWriter; name : String; value : TFhirString; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeStringProps(json : TJSONWriter; name : String; value : TFhirString; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseInteger(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInteger(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseInteger(value : TJsonNode; jsn : TJsonObject) : TFHIRInteger;
begin
  result := TFhirInteger.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeIntegerValue(json : TJSONWriter; name : String; value : TFhirInteger; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    propNumber(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeIntegerProps(json : TJSONWriter; name : String; value : TFhirInteger; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseUri(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUri(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseUri(value : TJsonNode; jsn : TJsonObject) : TFHIRUri;
begin
  result := TFhirUri.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeUriValue(json : TJSONWriter; name : String; value : TFhirUri; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeUriProps(json : TJSONWriter; name : String; value : TFhirUri; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseInstant(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseInstant(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseInstant(value : TJsonNode; jsn : TJsonObject) : TFHIRInstant;
begin
  result := TFhirInstant.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
     result.value := toTDateTimeEx(JsonToString(value));
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeInstantValue(json : TJSONWriter; name : String; value : TFhirInstant; inArray : boolean);
begin
  if (value = nil) or (value.value.null) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, asString(value.value));
end;

Procedure TFHIRJsonComposer.ComposeInstantProps(json : TJSONWriter; name : String; value : TFhirInstant; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseXhtml(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseXhtml(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseXhtml(value : TJsonNode; jsn : TJsonObject) : TFHIRXhtml;
begin
  result := TFhirXhtml.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeXhtmlValue(json : TJSONWriter; name : String; value : TFhirXhtml; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeXhtmlProps(json : TJSONWriter; name : String; value : TFhirXhtml; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseBoolean(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBoolean(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseBoolean(value : TJsonNode; jsn : TJsonObject) : TFHIRBoolean;
begin
  result := TFhirBoolean.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := StringToBoolean(JsonToString(value));
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeBooleanValue(json : TJSONWriter; name : String; value : TFhirBoolean; inArray : boolean);
begin
  if (value = nil) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeBooleanProps(json : TJSONWriter; name : String; value : TFhirBoolean; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseBase64Binary(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBase64Binary(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseBase64Binary(value : TJsonNode; jsn : TJsonObject) : TFHIRBase64Binary;
begin
  result := TFhirBase64Binary.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
     result.value := toTBytes(JsonToString(value));
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeBase64BinaryValue(json : TJSONWriter; name : String; value : TFhirBase64Binary; inArray : boolean);
begin
  if (value = nil) or (value.value = nil) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, asString(value.value));
end;

Procedure TFHIRJsonComposer.ComposeBase64BinaryProps(json : TJSONWriter; name : String; value : TFhirBase64Binary; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseTime(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTime(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseTime(value : TJsonNode; jsn : TJsonObject) : TFHIRTime;
begin
  result := TFhirTime.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeTimeValue(json : TJSONWriter; name : String; value : TFhirTime; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeTimeProps(json : TJSONWriter; name : String; value : TFhirTime; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseDecimal(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDecimal(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseDecimal(value : TJsonNode; jsn : TJsonObject) : TFHIRDecimal;
begin
  result := TFhirDecimal.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeDecimalValue(json : TJSONWriter; name : String; value : TFhirDecimal; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    propNumber(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeDecimalProps(json : TJSONWriter; name : String; value : TFhirDecimal; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseCode(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCode(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseCode(value : TJsonNode; jsn : TJsonObject) : TFHIRCode;
begin
  result := TFhirCode.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeCodeValue(json : TJSONWriter; name : String; value : TFhirCode; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeCodeProps(json : TJSONWriter; name : String; value : TFhirCode; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseOid(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOid(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseOid(value : TJsonNode; jsn : TJsonObject) : TFHIROid;
begin
  result := TFhirOid.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeOidValue(json : TJSONWriter; name : String; value : TFhirOid; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeOidProps(json : TJSONWriter; name : String; value : TFhirOid; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseUuid(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUuid(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseUuid(value : TJsonNode; jsn : TJsonObject) : TFHIRUuid;
begin
  result := TFhirUuid.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeUuidValue(json : TJSONWriter; name : String; value : TFhirUuid; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeUuidProps(json : TJSONWriter; name : String; value : TFhirUuid; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseMarkdown(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMarkdown(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseMarkdown(value : TJsonNode; jsn : TJsonObject) : TFHIRMarkdown;
begin
  result := TFhirMarkdown.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeMarkdownValue(json : TJSONWriter; name : String; value : TFhirMarkdown; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeMarkdownProps(json : TJSONWriter; name : String; value : TFhirMarkdown; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseUnsignedInt(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUnsignedInt(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseUnsignedInt(value : TJsonNode; jsn : TJsonObject) : TFHIRUnsignedInt;
begin
  result := TFhirUnsignedInt.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeUnsignedIntValue(json : TJSONWriter; name : String; value : TFhirUnsignedInt; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    propNumber(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeUnsignedIntProps(json : TJSONWriter; name : String; value : TFhirUnsignedInt; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseId(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseId(value, jsn)) {1};
end;

function TFHIRJsonParser.ParseId(value : TJsonNode; jsn : TJsonObject) : TFHIRId;
begin
  result := TFhirId.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposeIdValue(json : TJSONWriter; name : String; value : TFhirId; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    prop(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposeIdProps(json : TJSONWriter; name : String; value : TFhirId; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParsePositiveInt(value : TJsonNode; jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePositiveInt(value, jsn)) {1};
end;

function TFHIRJsonParser.ParsePositiveInt(value : TJsonNode; jsn : TJsonObject) : TFHIRPositiveInt;
begin
  result := TFhirPositiveInt.Create;
  try
    if (value <> nil) then
    begin
      result.LocationStart := value.LocationStart;
      result.LocationEnd := value.LocationEnd;
    end;
    result.value := JsonToString(value);
    if (jsn <> nil) then
      parseElementProperties(jsn, result);
    result.Link;
  finally
    result.Free;
  end;
end;

Procedure TFHIRJsonComposer.ComposePositiveIntValue(json : TJSONWriter; name : String; value : TFhirPositiveInt; inArray : boolean);
begin
  if (value = nil) or (value.value = '') then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
    propNumber(json, name, value.value);
end;

Procedure TFHIRJsonComposer.ComposePositiveIntProps(json : TJSONWriter; name : String; value : TFhirPositiveInt; inArray : boolean);
begin
  if (value = nil) or ((value.Id = '') and (not value.hasExtensionList) {no-comments and (not value.hasComments)}) then
  begin
    if inArray then
      propNull(json, name);
    exit;
  end
  else
  begin
    if (inArray) then
      json.valueObject('')
    else
      json.valueObject('_'+name);
    ComposeElementProperties(json, value);
    json.finishObject;
  end;
end;

procedure TFHIRJsonParser.ParseResourceProperties(jsn : TJsonObject; resource : TFhirResource);
begin
  resource.LocationStart := jsn.LocationStart;
  resource.LocationEnd := jsn.LocationEnd;
  if jsn.has('id') or jsn.has('_id') then
    resource.idElement := parseId(jsn.node['id'], jsn.vObj['_id']);{q}
  if jsn.has('meta') then
    resource.meta := ParseMeta(jsn.vObj['meta']);{q3}
  if jsn.has('implicitRules') or jsn.has('_implicitRules') then
    resource.implicitRulesElement := parseUri(jsn.node['implicitRules'], jsn.vObj['_implicitRules']);{q}
  if jsn.has('language') or jsn.has('_language') then
    resource.languageElement := parseCode(jsn.node['language'], jsn.vObj['_language']);{q}
end;

Procedure TFHIRJsonComposer.ComposeResourceProperties(json : TJSONWriter; elem : TFhirResource);
begin
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdValue(json, 'id', elem.idElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdProps(json, 'id', elem.idElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('meta') then
    ComposeMeta(json, 'meta', elem.meta); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('implicitRules') then
    ComposeUriValue(json, 'implicitRules', elem.implicitRulesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('implicitRules') then
    ComposeUriProps(json, 'implicitRules', elem.implicitRulesElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('language') then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('language') then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
end;

procedure TFHIRJsonParser.ParseDomainResourceProperties(jsn : TJsonObject; resource : TFhirDomainResource);
begin
  ParseResourceProperties(jsn, resource);
  if jsn.has('text') then
    resource.text := ParseNarrative(jsn.vObj['text']);{q3}
  if jsn.has('contained') then
    iterateArray(jsn.vArr['contained'], resource.containedList, parseInnerResource);
  if jsn.has('extension') then
    iterateArray(jsn.vArr['extension'], resource.extensionList, parseExtension);
  if jsn.has('modifierExtension') then
    iterateArray(jsn.vArr['modifierExtension'], resource.modifierExtensionList, parseExtension);
end;

Procedure TFHIRJsonComposer.ComposeDomainResourceProperties(json : TJSONWriter; elem : TFhirDomainResource);
var
  i : integer{z.b};
begin
  ComposeResourceProperties(json, elem);
  if (SummaryOption in [soFull, soText]) and doCompose('text') then
    ComposeNarrative(json, 'text', elem.text); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('contained') and (elem.containedList.Count > 0) then
  begin
    json.valueArray('contained');
    for i := 0 to elem.containedList.Count - 1 do
      ComposeInnerResource(json, '', elem, elem.containedList[i]); {z - Resource}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('extension') and (elem.extensionList.Count > 0) then
  begin
    json.valueArray('extension');
    for i := 0 to elem.extensionList.Count - 1 do
      ComposeExtension(json, '', elem.extensionList[i]); {z - Extension}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('modifierExtension') and (elem.modifierExtensionList.Count > 0) then
  begin
    json.valueArray('modifierExtension');
    for i := 0 to elem.modifierExtensionList.Count - 1 do
      ComposeExtension(json, '', elem.modifierExtensionList[i]); {z - Extension}
    json.FinishArray;
  end;
end;

{$IFDEF FHIR_PARAMETERS}
procedure TFHIRJsonParser.ParseParametersParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseParametersParameter(jsn)); {2}
end;

function TFHIRJsonParser.ParseParametersParameter(jsn : TJsonObject) : TFhirParametersParameter;
begin
  result := TFhirParametersParameter.create;
  try
    ParseParametersParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseParametersParameterProperties(jsn : TJsonObject; result : TFhirParametersParameter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      result.value := parseCode(jsn.node['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      result.value := parseId(jsn.node['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      result.value := parseMarkdown(jsn.node['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      result.value := parseOid(jsn.node['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      result.value := parsePositiveInt(jsn.node['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      result.value := parseUnsignedInt(jsn.node['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueAddress') {a4} then
      result.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      result.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      result.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      result.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      result.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      result.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      result.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      result.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      result.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      result.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      result.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueReference') {a4} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      result.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      result.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      result.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueMeta') {a4} then
      result.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      result.value := parseBase64Binary(jsn.node['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      result.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      result.value := parseInstant(jsn.node['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      result.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
    if jsn.has('resource') then
        result.resource := ParseInnerResource(jsn.vObj['resource']);{q3}
    if jsn.has('part') then
      iterateArray(jsn.vArr['part'], result.partList, parseParametersParameter);
end;

procedure TFHIRJsonComposer.ComposeParametersParameter(json : TJSONWriter; name : string; elem : TFhirParametersParameter; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(elem.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(elem.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(elem.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(elem.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(elem.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(elem.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(elem.value), false);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(json, 'resource', elem, elem.resource); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.partList.Count > 0) then
  begin
    json.valueArray('part');
    for i := 0 to elem.partList.Count - 1 do
      ComposeParametersParameter(json, '', elem.partList[i]); {z - @Parameters.parameter}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseParameters(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseParameters(jsn)); {2}
end;

function TFHIRJsonParser.ParseParameters(jsn : TJsonObject) : TFhirParameters;
begin
  result := TFhirParameters.create;
  try
    ParseParametersProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseParametersProperties(jsn : TJsonObject; result : TFhirParameters);
begin
    ParseResourceProperties(jsn, result);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], result.parameterList, parseParametersParameter);
end;

procedure TFHIRJsonComposer.ComposeParameters(json : TJSONWriter; name : string; elem : TFhirParameters; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and doCompose('parameter') and (elem.parameterList.Count > 0) then
  begin
    json.valueArray('parameter');
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeParametersParameter(json, '', elem.parameterList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PARAMETERS}
procedure TFHIRJsonParser.ParseExtension(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExtension(jsn)); {2}
end;

function TFHIRJsonParser.ParseExtension(jsn : TJsonObject) : TFhirExtension;
begin
  result := TFhirExtension.create;
  try
    ParseExtensionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExtensionProperties(jsn : TJsonObject; result : TFhirExtension);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      result.value := parseCode(jsn.node['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      result.value := parseId(jsn.node['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      result.value := parseMarkdown(jsn.node['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      result.value := parseOid(jsn.node['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      result.value := parsePositiveInt(jsn.node['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      result.value := parseUnsignedInt(jsn.node['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueAddress') {a4} then
      result.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      result.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      result.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      result.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      result.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      result.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      result.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      result.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      result.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      result.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      result.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueReference') {a4} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      result.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      result.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      result.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueMeta') {a4} then
      result.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      result.value := parseBase64Binary(jsn.node['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      result.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      result.value := parseInstant(jsn.node['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      result.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeExtension(json : TJSONWriter; name : string; elem : TFhirExtension; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  ComposeUriValue(json, 'url', elem.urlElement, false);
  ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(elem.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(elem.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(elem.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(elem.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(elem.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(elem.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNarrative(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNarrative(jsn)); {2}
end;

function TFHIRJsonParser.ParseNarrative(jsn : TJsonObject) : TFhirNarrative;
begin
  result := TFhirNarrative.create;
  try
    ParseNarrativeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNarrativeProperties(jsn : TJsonObject; result : TFhirNarrative);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirNarrativeStatusEnum, SYSTEMS_TFhirNarrativeStatusEnum);
    if jsn.has('div') then
        result.div_ := parseXHtmlNode(jsn.path+'.div', jsn.node['div']);{q2}
end;

procedure TFHIRJsonComposer.ComposeNarrative(json : TJSONWriter; name : string; elem : TFhirNarrative; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirNarrativeStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirNarrativeStatusEnum, false);
  ComposeXHtmlNode(json, 'div', elem.div_); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContributor(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContributor(jsn)); {2}
end;

function TFHIRJsonParser.ParseContributor(jsn : TJsonObject) : TFhirContributor;
begin
  result := TFhirContributor.create;
  try
    ParseContributorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContributorProperties(jsn : TJsonObject; result : TFhirContributor);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirContributorTypeEnum, SYSTEMS_TFhirContributorTypeEnum);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
end;

procedure TFHIRJsonComposer.ComposeContributor(json : TJSONWriter; name : string; elem : TFhirContributor; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirContributorTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirContributorTypeEnum, false);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAttachment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAttachment(jsn)); {2}
end;

function TFHIRJsonParser.ParseAttachment(jsn : TJsonObject) : TFhirAttachment;
begin
  result := TFhirAttachment.create;
  try
    ParseAttachmentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAttachmentProperties(jsn : TJsonObject; result : TFhirAttachment);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('contentType') or jsn.has('_contentType') then
        result.contentTypeElement := parseCode(jsn.node['contentType'], jsn.vObj['_contentType']);{q}
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := parseCode(jsn.node['language'], jsn.vObj['_language']);{q}
    if jsn.has('data') or jsn.has('_data') then
        result.dataElement := parseBase64Binary(jsn.node['data'], jsn.vObj['_data']);{q}
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('size') or jsn.has('_size') then
        result.sizeElement := parseUnsignedInt(jsn.node['size'], jsn.vObj['_size']);{q}
    if jsn.has('hash') or jsn.has('_hash') then
        result.hashElement := parseBase64Binary(jsn.node['hash'], jsn.vObj['_hash']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('creation') or jsn.has('_creation') then
        result.creationElement := parseDateTime(jsn.node['creation'], jsn.vObj['_creation']);{q}
end;

procedure TFHIRJsonComposer.ComposeAttachment(json : TJSONWriter; name : string; elem : TFhirAttachment; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeValue(json, 'contentType', elem.contentTypeElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeProps(json, 'contentType', elem.contentTypeElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64BinaryValue(json, 'data', elem.dataElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64BinaryProps(json, 'data', elem.dataElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUnsignedIntValue(json, 'size', elem.sizeElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUnsignedIntProps(json, 'size', elem.sizeElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64BinaryValue(json, 'hash', elem.hashElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64BinaryProps(json, 'hash', elem.hashElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeValue(json, 'creation', elem.creationElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeProps(json, 'creation', elem.creationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDataRequirementCodeFilter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDataRequirementCodeFilter(jsn)); {2}
end;

function TFHIRJsonParser.ParseDataRequirementCodeFilter(jsn : TJsonObject) : TFhirDataRequirementCodeFilter;
begin
  result := TFhirDataRequirementCodeFilter.create;
  try
    ParseDataRequirementCodeFilterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDataRequirementCodeFilterProperties(jsn : TJsonObject; result : TFhirDataRequirementCodeFilter);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);{q}
    if jsn.has('valueSetReference') {a3} then
      result.valueSet := ParseReference(jsn.vObj['valueSetReference']);
    if jsn.has('valueSetString') or jsn.has('_valueSetString') then
      result.valueSet := parseString(jsn.node['valueSetString'], jsn.vObj['_valueSetString']);
      if jsn.has('valueCode') or jsn.has('_valueCode') then
      iteratePrimitiveArray(jsn.vArr['valueCode'], jsn.vArr['_valueCode'], result.valueCodeList, parseCode);
    if jsn.has('valueCoding') then
      iterateArray(jsn.vArr['valueCoding'], result.valueCodingList, parseCoding);
    if jsn.has('valueCodeableConcept') then
      iterateArray(jsn.vArr['valueCodeableConcept'], result.valueCodeableConceptList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeDataRequirementCodeFilter(json : TJSONWriter; name : string; elem : TFhirDataRequirementCodeFilter; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  ComposeStringValue(json, 'path', elem.pathElement, false);
  ComposeStringProps(json, 'path', elem.pathElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.valueSet is TFhirReference) then
    ComposeReference(json, 'valueSetReference', TFhirReference(elem.valueSet))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.valueSet is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueSetString', TFhirString(elem.valueSet), false);
    ComposeStringProps(json, 'valueSetString', TFhirString(elem.valueSet), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.valueCodeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.valueCodeList.Count - 1 do
    begin
      ext := ext or ((elem.valueCodeList[i].id <> '') or (elem.valueCodeList[i].hasExtensionList) {no-comments or (elem.valueCodeList[i].hasComments)});
      val := val or (elem.valueCodeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('valueCode');
      for i := 0 to elem.valueCodeList.Count - 1 do
        ComposeCodeValue(json, '',elem.valueCodeList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_valueCode');
      for i := 0 to elem.valueCodeList.Count - 1 do
        ComposeCodeProps(json, '',elem.valueCodeList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.valueCodingList.Count > 0) then
  begin
    json.valueArray('valueCoding');
    for i := 0 to elem.valueCodingList.Count - 1 do
      ComposeCoding(json, '', elem.valueCodingList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.valueCodeableConceptList.Count > 0) then
  begin
    json.valueArray('valueCodeableConcept');
    for i := 0 to elem.valueCodeableConceptList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.valueCodeableConceptList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDataRequirementDateFilter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDataRequirementDateFilter(jsn)); {2}
end;

function TFHIRJsonParser.ParseDataRequirementDateFilter(jsn : TJsonObject) : TFhirDataRequirementDateFilter;
begin
  result := TFhirDataRequirementDateFilter.create;
  try
    ParseDataRequirementDateFilterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDataRequirementDateFilterProperties(jsn : TJsonObject; result : TFhirDataRequirementDateFilter);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);{q}
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueDuration') {a4} then
      result.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
end;

procedure TFHIRJsonComposer.ComposeDataRequirementDateFilter(json : TJSONWriter; name : string; elem : TFhirDataRequirementDateFilter; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  ComposeStringValue(json, 'path', elem.pathElement, false);
  ComposeStringProps(json, 'path', elem.pathElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDataRequirement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDataRequirement(jsn)); {2}
end;

function TFHIRJsonParser.ParseDataRequirement(jsn : TJsonObject) : TFhirDataRequirement;
begin
  result := TFhirDataRequirement.create;
  try
    ParseDataRequirementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDataRequirementProperties(jsn : TJsonObject; result : TFhirDataRequirement);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum);
      if jsn.has('profile') or jsn.has('_profile') then
      iteratePrimitiveArray(jsn.vArr['profile'], jsn.vArr['_profile'], result.profileList, parseUri);
      if jsn.has('mustSupport') or jsn.has('_mustSupport') then
      iteratePrimitiveArray(jsn.vArr['mustSupport'], jsn.vArr['_mustSupport'], result.mustSupportList, parseString);
    if jsn.has('codeFilter') then
      iterateArray(jsn.vArr['codeFilter'], result.codeFilterList, parseDataRequirementCodeFilter);
    if jsn.has('dateFilter') then
      iterateArray(jsn.vArr['dateFilter'], result.dateFilterList, parseDataRequirementDateFilter);
end;

procedure TFHIRJsonComposer.ComposeDataRequirement(json : TJSONWriter; name : string; elem : TFhirDataRequirement; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.profileList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.profileList.Count - 1 do
    begin
      ext := ext or ((elem.profileList[i].id <> '') or (elem.profileList[i].hasExtensionList) {no-comments or (elem.profileList[i].hasComments)});
      val := val or (elem.profileList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('profile');
      for i := 0 to elem.profileList.Count - 1 do
        ComposeUriValue(json, '',elem.profileList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_profile');
      for i := 0 to elem.profileList.Count - 1 do
        ComposeUriProps(json, '',elem.profileList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.mustSupportList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.mustSupportList.Count - 1 do
    begin
      ext := ext or ((elem.mustSupportList[i].id <> '') or (elem.mustSupportList[i].hasExtensionList) {no-comments or (elem.mustSupportList[i].hasComments)});
      val := val or (elem.mustSupportList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('mustSupport');
      for i := 0 to elem.mustSupportList.Count - 1 do
        ComposeStringValue(json, '',elem.mustSupportList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_mustSupport');
      for i := 0 to elem.mustSupportList.Count - 1 do
        ComposeStringProps(json, '',elem.mustSupportList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.codeFilterList.Count > 0) then
  begin
    json.valueArray('codeFilter');
    for i := 0 to elem.codeFilterList.Count - 1 do
      ComposeDataRequirementCodeFilter(json, '', elem.codeFilterList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.dateFilterList.Count > 0) then
  begin
    json.valueArray('dateFilter');
    for i := 0 to elem.dateFilterList.Count - 1 do
      ComposeDataRequirementDateFilter(json, '', elem.dateFilterList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDosage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDosage(jsn)); {2}
end;

function TFHIRJsonParser.ParseDosage(jsn : TJsonObject) : TFhirDosage;
begin
  result := TFhirDosage.create;
  try
    ParseDosageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDosageProperties(jsn : TJsonObject; result : TFhirDosage);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parseInteger(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);{q}
    if jsn.has('additionalInstruction') then
      iterateArray(jsn.vArr['additionalInstruction'], result.additionalInstructionList, parseCodeableConcept);
    if jsn.has('patientInstruction') or jsn.has('_patientInstruction') then
        result.patientInstructionElement := parseString(jsn.node['patientInstruction'], jsn.vObj['_patientInstruction']);{q}
    if jsn.has('timing') then
        result.timing := ParseTiming(jsn.vObj['timing']);{q3}
    if jsn.has('asNeededCodeableConcept') {a4} then
      result.asNeeded := ParseCodeableConcept(jsn.vObj['asNeededCodeableConcept']);
    if jsn.has('asNeededBoolean') or jsn.has('_asNeededBoolean') then
      result.asNeeded := parseBoolean(jsn.node['asNeededBoolean'], jsn.vObj['_asNeededBoolean']);
    if jsn.has('site') then
        result.site := ParseCodeableConcept(jsn.vObj['site']);{q3}
    if jsn.has('route') then
        result.route := ParseCodeableConcept(jsn.vObj['route']);{q3}
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('doseRange') {a4} then
      result.dose := ParseRange(jsn.vObj['doseRange']);
    if jsn.has('doseQuantity') {a4} then
      result.dose := ParseQuantity(jsn.vObj['doseQuantity']);
    if jsn.has('maxDosePerPeriod') then
        result.maxDosePerPeriod := ParseRatio(jsn.vObj['maxDosePerPeriod']);{q3}
    if jsn.has('maxDosePerAdministration') then
        result.maxDosePerAdministration := ParseQuantity(jsn.vObj['maxDosePerAdministration']);{q3}
    if jsn.has('maxDosePerLifetime') then
        result.maxDosePerLifetime := ParseQuantity(jsn.vObj['maxDosePerLifetime']);{q3}
    if jsn.has('rateRatio') {a4} then
      result.rate := ParseRatio(jsn.vObj['rateRatio']);
    if jsn.has('rateRange') {a4} then
      result.rate := ParseRange(jsn.vObj['rateRange']);
    if jsn.has('rateQuantity') {a4} then
      result.rate := ParseQuantity(jsn.vObj['rateQuantity']);
end;

procedure TFHIRJsonComposer.ComposeDosage(json : TJSONWriter; name : string; elem : TFhirDosage; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIntegerValue(json, 'sequence', elem.sequenceElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIntegerProps(json, 'sequence', elem.sequenceElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.additionalInstructionList.Count > 0) then
  begin
    json.valueArray('additionalInstruction');
    for i := 0 to elem.additionalInstructionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.additionalInstructionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'patientInstruction', elem.patientInstructionElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'patientInstruction', elem.patientInstructionElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeTiming(json, 'timing', elem.timing); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.asNeeded is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'asNeededCodeableConcept', TFhirCodeableConcept(elem.asNeeded)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.asNeeded is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'asNeededBoolean', TFhirBoolean(elem.asNeeded), false);
    ComposeBooleanProps(json, 'asNeededBoolean', TFhirBoolean(elem.asNeeded), false);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'site', elem.site); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'route', elem.route); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.dose is TFhirRange) then 
    ComposeRange(json, 'doseRange', TFhirRange(elem.dose)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.dose is TFhirQuantity) then 
    ComposeQuantity(json, 'doseQuantity', TFhirQuantity(elem.dose)) ;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeRatio(json, 'maxDosePerPeriod', elem.maxDosePerPeriod); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'maxDosePerAdministration', elem.maxDosePerAdministration); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'maxDosePerLifetime', elem.maxDosePerLifetime); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.rate is TFhirRatio) then 
    ComposeRatio(json, 'rateRatio', TFhirRatio(elem.rate)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.rate is TFhirRange) then 
    ComposeRange(json, 'rateRange', TFhirRange(elem.rate)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.rate is TFhirQuantity) then 
    ComposeQuantity(json, 'rateQuantity', TFhirQuantity(elem.rate)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseIdentifier(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseIdentifier(jsn)); {2}
end;

function TFHIRJsonParser.ParseIdentifier(jsn : TJsonObject) : TFhirIdentifier;
begin
  result := TFhirIdentifier.create;
  try
    ParseIdentifierProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseIdentifierProperties(jsn : TJsonObject; result : TFhirIdentifier);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirIdentifierUseEnum, SYSTEMS_TFhirIdentifierUseEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := parseUri(jsn.node['system'], jsn.vObj['_system']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('assigner') then
        result.assigner := ParseReference{TFhirOrganization}(jsn.vObj['assigner']);{q3}
end;

procedure TFHIRJsonComposer.ComposeIdentifier(json : TJSONWriter; name : string; elem : TFhirIdentifier; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirIdentifierUseEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirIdentifierUseEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'system', elem.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'system', elem.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeReference{TFhirOrganization}(json, 'assigner', elem.assigner); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCoding(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoding(jsn)); {2}
end;

function TFHIRJsonParser.ParseCoding(jsn : TJsonObject) : TFhirCoding;
begin
  result := TFhirCoding.create;
  try
    ParseCodingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodingProperties(jsn : TJsonObject; result : TFhirCoding);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := parseUri(jsn.node['system'], jsn.vObj['_system']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);{q}
    if jsn.has('userSelected') or jsn.has('_userSelected') then
        result.userSelectedElement := parseBoolean(jsn.node['userSelected'], jsn.vObj['_userSelected']);{q}
end;

procedure TFHIRJsonComposer.ComposeCoding(json : TJSONWriter; name : string; elem : TFhirCoding; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'system', elem.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'system', elem.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBooleanValue(json, 'userSelected', elem.userSelectedElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBooleanProps(json, 'userSelected', elem.userSelectedElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSampledData(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSampledData(jsn)); {2}
end;

function TFHIRJsonParser.ParseSampledData(jsn : TJsonObject) : TFhirSampledData;
begin
  result := TFhirSampledData.create;
  try
    ParseSampledDataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSampledDataProperties(jsn : TJsonObject; result : TFhirSampledData);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('origin') then
        result.origin := ParseQuantity(jsn.vObj['origin']);{q3}
    if jsn.has('period') or jsn.has('_period') then
        result.periodElement := parseDecimal(jsn.node['period'], jsn.vObj['_period']);{q}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('lowerLimit') or jsn.has('_lowerLimit') then
        result.lowerLimitElement := parseDecimal(jsn.node['lowerLimit'], jsn.vObj['_lowerLimit']);{q}
    if jsn.has('upperLimit') or jsn.has('_upperLimit') then
        result.upperLimitElement := parseDecimal(jsn.node['upperLimit'], jsn.vObj['_upperLimit']);{q}
    if jsn.has('dimensions') or jsn.has('_dimensions') then
        result.dimensionsElement := parsePositiveInt(jsn.node['dimensions'], jsn.vObj['_dimensions']);{q}
    if jsn.has('data') or jsn.has('_data') then
        result.dataElement := parseString(jsn.node['data'], jsn.vObj['_data']);{q}
end;

procedure TFHIRJsonComposer.ComposeSampledData(json : TJSONWriter; name : string; elem : TFhirSampledData; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  ComposeQuantity(json, 'origin', elem.origin); {a}
  ComposeDecimalValue(json, 'period', elem.periodElement, false);
  ComposeDecimalProps(json, 'period', elem.periodElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (not isCanonical or (elem.factor <> '1')) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (not isCanonical or (elem.factor <> '1')) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalValue(json, 'lowerLimit', elem.lowerLimitElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalProps(json, 'lowerLimit', elem.lowerLimitElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalValue(json, 'upperLimit', elem.upperLimitElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalProps(json, 'upperLimit', elem.upperLimitElement, false);
  ComposePositiveIntValue(json, 'dimensions', elem.dimensionsElement, false);
  ComposePositiveIntProps(json, 'dimensions', elem.dimensionsElement, false);
  ComposeStringValue(json, 'data', elem.dataElement, false);
  ComposeStringProps(json, 'data', elem.dataElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseRatio(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRatio(jsn)); {2}
end;

function TFHIRJsonParser.ParseRatio(jsn : TJsonObject) : TFhirRatio;
begin
  result := TFhirRatio.create;
  try
    ParseRatioProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRatioProperties(jsn : TJsonObject; result : TFhirRatio);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('numerator') then
        result.numerator := ParseQuantity(jsn.vObj['numerator']);{q3}
    if jsn.has('denominator') then
        result.denominator := ParseQuantity(jsn.vObj['denominator']);{q3}
end;

procedure TFHIRJsonComposer.ComposeRatio(json : TJSONWriter; name : string; elem : TFhirRatio; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'numerator', elem.numerator); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'denominator', elem.denominator); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseReference(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseReference(jsn)); {2}
end;

function TFHIRJsonParser.ParseReference(jsn : TJsonObject) : TFhirReference;
begin
  result := TFhirReference.create;
  try
    ParseReferenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseReferenceProperties(jsn : TJsonObject; result : TFhirReference);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('reference') or jsn.has('_reference') then
        result.referenceElement := parseString(jsn.node['reference'], jsn.vObj['_reference']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);{q}
end;

procedure TFHIRJsonComposer.ComposeReference(json : TJSONWriter; name : string; elem : TFhirReference; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'reference', elem.referenceElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'reference', elem.referenceElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTriggerDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTriggerDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseTriggerDefinition(jsn : TJsonObject) : TFhirTriggerDefinition;
begin
  result := TFhirTriggerDefinition.create;
  try
    ParseTriggerDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTriggerDefinitionProperties(jsn : TJsonObject; result : TFhirTriggerDefinition);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirTriggerTypeEnum, SYSTEMS_TFhirTriggerTypeEnum);
    if jsn.has('eventName') or jsn.has('_eventName') then
        result.eventNameElement := parseString(jsn.node['eventName'], jsn.vObj['_eventName']);{q}
    if jsn.has('eventTimingTiming') {a4} then
      result.eventTiming := ParseTiming(jsn.vObj['eventTimingTiming']);
    if jsn.has('eventTimingReference') {a3} then
      result.eventTiming := ParseReference(jsn.vObj['eventTimingReference']);
    if jsn.has('eventTimingDate') or jsn.has('_eventTimingDate') then
      result.eventTiming := parseDate(jsn.node['eventTimingDate'], jsn.vObj['_eventTimingDate']);
    if jsn.has('eventTimingDateTime') or jsn.has('_eventTimingDateTime') then
      result.eventTiming := parseDateTime(jsn.node['eventTimingDateTime'], jsn.vObj['_eventTimingDateTime']);
    if jsn.has('eventData') then
        result.eventData := ParseDataRequirement(jsn.vObj['eventData']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTriggerDefinition(json : TJSONWriter; name : string; elem : TFhirTriggerDefinition; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirTriggerTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirTriggerTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'eventName', elem.eventNameElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'eventName', elem.eventNameElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.eventTiming is TFhirTiming) then 
    ComposeTiming(json, 'eventTimingTiming', TFhirTiming(elem.eventTiming)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.eventTiming is TFhirReference) then
    ComposeReference(json, 'eventTimingReference', TFhirReference(elem.eventTiming))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.eventTiming is TFhirDate) then 
  begin
    ComposeDateValue(json, 'eventTimingDate', TFhirDate(elem.eventTiming), false);
    ComposeDateProps(json, 'eventTimingDate', TFhirDate(elem.eventTiming), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.eventTiming is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'eventTimingDateTime', TFhirDateTime(elem.eventTiming), false);
    ComposeDateTimeProps(json, 'eventTimingDateTime', TFhirDateTime(elem.eventTiming), false);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDataRequirement(json, 'eventData', elem.eventData); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePeriod(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePeriod(jsn)); {2}
end;

function TFHIRJsonParser.ParsePeriod(jsn : TJsonObject) : TFhirPeriod;
begin
  result := TFhirPeriod.create;
  try
    ParsePeriodProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePeriodProperties(jsn : TJsonObject; result : TFhirPeriod);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := parseDateTime(jsn.node['start'], jsn.vObj['_start']);{q}
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := parseDateTime(jsn.node['end'], jsn.vObj['_end']);{q}
end;

procedure TFHIRJsonComposer.ComposePeriod(json : TJSONWriter; name : string; elem : TFhirPeriod; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeValue(json, 'start', elem.startElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeProps(json, 'start', elem.startElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeValue(json, 'end', elem.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeProps(json, 'end', elem.end_Element, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseQuantity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuantity(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuantity(jsn : TJsonObject) : TFhirQuantity;
begin
  result := TFhirQuantity.create;
  try
    ParseQuantityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuantityProperties(jsn : TJsonObject; result : TFhirQuantity);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseDecimal(jsn.node['value'], jsn.vObj['_value']);{q}
    if jsn.has('comparator') or jsn.has('_comparator')  then
      result.comparatorElement := parseEnum(jsn.path+'/comparator', jsn.node['comparator'], jsn.vObj['_comparator'], CODES_TFhirQuantityComparatorEnum, SYSTEMS_TFhirQuantityComparatorEnum);
    if jsn.has('unit') or jsn.has('_unit') then
        result.unit_Element := parseString(jsn.node['unit'], jsn.vObj['_unit']);{q}
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := parseUri(jsn.node['system'], jsn.vObj['_system']);{q}
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);{q}
end;

procedure TFHIRJsonComposer.ComposeQuantity(json : TJSONWriter; name : string; elem : TFhirQuantity; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalValue(json, 'value', elem.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalProps(json, 'value', elem.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumValue(json, 'comparator', elem.ComparatorElement, CODES_TFhirQuantityComparatorEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumProps(json, 'comparator', elem.ComparatorElement, CODES_TFhirQuantityComparatorEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'unit', elem.unit_Element, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'unit', elem.unit_Element, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'system', elem.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'system', elem.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseRange(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRange(jsn)); {2}
end;

function TFHIRJsonParser.ParseRange(jsn : TJsonObject) : TFhirRange;
begin
  result := TFhirRange.create;
  try
    ParseRangeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRangeProperties(jsn : TJsonObject; result : TFhirRange);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('low') then
        result.low := ParseQuantity(jsn.vObj['low']);{q3}
    if jsn.has('high') then
        result.high := ParseQuantity(jsn.vObj['high']);{q3}
end;

procedure TFHIRJsonComposer.ComposeRange(json : TJSONWriter; name : string; elem : TFhirRange; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'low', elem.low); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(json, 'high', elem.high); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseRelatedArtifact(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRelatedArtifact(jsn)); {2}
end;

function TFHIRJsonParser.ParseRelatedArtifact(jsn : TJsonObject) : TFhirRelatedArtifact;
begin
  result := TFhirRelatedArtifact.create;
  try
    ParseRelatedArtifactProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRelatedArtifactProperties(jsn : TJsonObject; result : TFhirRelatedArtifact);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirRelatedArtifactTypeEnum, SYSTEMS_TFhirRelatedArtifactTypeEnum);
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);{q}
    if jsn.has('citation') or jsn.has('_citation') then
        result.citationElement := parseString(jsn.node['citation'], jsn.vObj['_citation']);{q}
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('document') then
        result.document := ParseAttachment(jsn.vObj['document']);{q3}
    if jsn.has('resource') then
        result.resource := ParseReference{TFhirReference}(jsn.vObj['resource']);{q3}
end;

procedure TFHIRJsonComposer.ComposeRelatedArtifact(json : TJSONWriter; name : string; elem : TFhirRelatedArtifact; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirRelatedArtifactTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirRelatedArtifactTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'citation', elem.citationElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'citation', elem.citationElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeAttachment(json, 'document', elem.document); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeReference{TFhirReference}(json, 'resource', elem.resource); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAnnotation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAnnotation(jsn)); {2}
end;

function TFHIRJsonParser.ParseAnnotation(jsn : TJsonObject) : TFhirAnnotation;
begin
  result := TFhirAnnotation.create;
  try
    ParseAnnotationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAnnotationProperties(jsn : TJsonObject; result : TFhirAnnotation);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('authorReference') {a3} then
      result.author := ParseReference(jsn.vObj['authorReference']);
    if jsn.has('authorString') or jsn.has('_authorString') then
      result.author := parseString(jsn.node['authorString'], jsn.vObj['_authorString']);
    if jsn.has('time') or jsn.has('_time') then
        result.timeElement := parseDateTime(jsn.node['time'], jsn.vObj['_time']);{q}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);{q}
end;

procedure TFHIRJsonComposer.ComposeAnnotation(json : TJSONWriter; name : string; elem : TFhirAnnotation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.author is TFhirReference) then
    ComposeReference(json, 'authorReference', TFhirReference(elem.author))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.author is TFhirString) then 
  begin
    ComposeStringValue(json, 'authorString', TFhirString(elem.author), false);
    ComposeStringProps(json, 'authorString', TFhirString(elem.author), false);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeValue(json, 'time', elem.timeElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTimeProps(json, 'time', elem.timeElement, false);
  ComposeStringValue(json, 'text', elem.textElement, false);
  ComposeStringProps(json, 'text', elem.textElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContactDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContactDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseContactDetail(jsn : TJsonObject) : TFhirContactDetail;
begin
  result := TFhirContactDetail.create;
  try
    ParseContactDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContactDetailProperties(jsn : TJsonObject; result : TFhirContactDetail);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
end;

procedure TFHIRJsonComposer.ComposeContactDetail(json : TJSONWriter; name : string; elem : TFhirContactDetail; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseUsageContext(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseUsageContext(jsn)); {2}
end;

function TFHIRJsonParser.ParseUsageContext(jsn : TJsonObject) : TFhirUsageContext;
begin
  result := TFhirUsageContext.create;
  try
    ParseUsageContextProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseUsageContextProperties(jsn : TJsonObject; result : TFhirUsageContext);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCoding(jsn.vObj['code']);{q3}
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
end;

procedure TFHIRJsonComposer.ComposeUsageContext(json : TJSONWriter; name : string; elem : TFhirUsageContext; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  ComposeCoding(json, 'code', elem.code); {a}
  if (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSignature(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSignature(jsn)); {2}
end;

function TFHIRJsonParser.ParseSignature(jsn : TJsonObject) : TFhirSignature;
begin
  result := TFhirSignature.create;
  try
    ParseSignatureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSignatureProperties(jsn : TJsonObject; result : TFhirSignature);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCoding);
    if jsn.has('when') or jsn.has('_when') then
        result.whenElement := parseInstant(jsn.node['when'], jsn.vObj['_when']);{q}
    if jsn.has('whoReference') {a3} then
      result.who := ParseReference(jsn.vObj['whoReference']);
    if jsn.has('whoUri') or jsn.has('_whoUri') then
      result.who := parseUri(jsn.node['whoUri'], jsn.vObj['_whoUri']);
    if jsn.has('onBehalfOfReference') {a3} then
      result.onBehalfOf := ParseReference(jsn.vObj['onBehalfOfReference']);
    if jsn.has('onBehalfOfUri') or jsn.has('_onBehalfOfUri') then
      result.onBehalfOf := parseUri(jsn.node['onBehalfOfUri'], jsn.vObj['_onBehalfOfUri']);
    if jsn.has('contentType') or jsn.has('_contentType') then
        result.contentTypeElement := parseCode(jsn.node['contentType'], jsn.vObj['_contentType']);{q}
    if jsn.has('blob') or jsn.has('_blob') then
        result.blobElement := parseBase64Binary(jsn.node['blob'], jsn.vObj['_blob']);{q}
end;

procedure TFHIRJsonComposer.ComposeSignature(json : TJSONWriter; name : string; elem : TFhirSignature; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCoding(json, '', elem.type_List[i]); {z - Coding}
    json.FinishArray;
  end;
  ComposeInstantValue(json, 'when', elem.whenElement, false);
  ComposeInstantProps(json, 'when', elem.whenElement, false);
  if (elem.who is TFhirReference) then
    ComposeReference(json, 'whoReference', TFhirReference(elem.who))
  else if (elem.who is TFhirUri) then 
  begin
    ComposeUriValue(json, 'whoUri', TFhirUri(elem.who), false);
    ComposeUriProps(json, 'whoUri', TFhirUri(elem.who), false);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.onBehalfOf is TFhirReference) then
    ComposeReference(json, 'onBehalfOfReference', TFhirReference(elem.onBehalfOf))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.onBehalfOf is TFhirUri) then 
  begin
    ComposeUriValue(json, 'onBehalfOfUri', TFhirUri(elem.onBehalfOf), false);
    ComposeUriProps(json, 'onBehalfOfUri', TFhirUri(elem.onBehalfOf), false);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeValue(json, 'contentType', elem.contentTypeElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeProps(json, 'contentType', elem.contentTypeElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64BinaryValue(json, 'blob', elem.blobElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64BinaryProps(json, 'blob', elem.blobElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCodeableConcept(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeableConcept(jsn)); {2}
end;

function TFHIRJsonParser.ParseCodeableConcept(jsn : TJsonObject) : TFhirCodeableConcept;
begin
  result := TFhirCodeableConcept.create;
  try
    ParseCodeableConceptProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeableConceptProperties(jsn : TJsonObject; result : TFhirCodeableConcept);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('coding') then
      iterateArray(jsn.vArr['coding'], result.codingList, parseCoding);
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);{q}
end;

procedure TFHIRJsonComposer.ComposeCodeableConcept(json : TJSONWriter; name : string; elem : TFhirCodeableConcept; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.codingList.Count > 0) then
  begin
    json.valueArray('coding');
    for i := 0 to elem.codingList.Count - 1 do
      ComposeCoding(json, '', elem.codingList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseParameterDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseParameterDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseParameterDefinition(jsn : TJsonObject) : TFhirParameterDefinition;
begin
  result := TFhirParameterDefinition.create;
  try
    ParseParameterDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseParameterDefinitionProperties(jsn : TJsonObject; result : TFhirParameterDefinition);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseCode(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirOperationParameterUseEnum, SYSTEMS_TFhirOperationParameterUseEnum);
    if jsn.has('min') or jsn.has('_min') then
        result.minElement := parseInteger(jsn.node['min'], jsn.vObj['_min']);{q}
    if jsn.has('max') or jsn.has('_max') then
        result.maxElement := parseString(jsn.node['max'], jsn.vObj['_max']);{q}
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum);
    if jsn.has('profile') then
        result.profile := ParseReference{TFhirStructureDefinition}(jsn.vObj['profile']);{q3}
end;

procedure TFHIRJsonComposer.ComposeParameterDefinition(json : TJSONWriter; name : string; elem : TFhirParameterDefinition; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeProps(json, 'name', elem.nameElement, false);
  ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirOperationParameterUseEnum, false);
  ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirOperationParameterUseEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIntegerValue(json, 'min', elem.minElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIntegerProps(json, 'min', elem.minElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'max', elem.maxElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'max', elem.maxElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'profile', elem.profile); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContactPoint(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContactPoint(jsn)); {2}
end;

function TFHIRJsonParser.ParseContactPoint(jsn : TJsonObject) : TFhirContactPoint;
begin
  result := TFhirContactPoint.create;
  try
    ParseContactPointProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContactPointProperties(jsn : TJsonObject; result : TFhirContactPoint);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('system') or jsn.has('_system')  then
      result.systemElement := parseEnum(jsn.path+'/system', jsn.node['system'], jsn.vObj['_system'], CODES_TFhirContactPointSystemEnum, SYSTEMS_TFhirContactPointSystemEnum);
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);{q}
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirContactPointUseEnum, SYSTEMS_TFhirContactPointUseEnum);
    if jsn.has('rank') or jsn.has('_rank') then
        result.rankElement := parsePositiveInt(jsn.node['rank'], jsn.vObj['_rank']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeContactPoint(json : TJSONWriter; name : string; elem : TFhirContactPoint; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumValue(json, 'system', elem.SystemElement, CODES_TFhirContactPointSystemEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumProps(json, 'system', elem.SystemElement, CODES_TFhirContactPointSystemEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirContactPointUseEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirContactPointUseEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePositiveIntValue(json, 'rank', elem.rankElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePositiveIntProps(json, 'rank', elem.rankElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseHumanName(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseHumanName(jsn)); {2}
end;

function TFHIRJsonParser.ParseHumanName(jsn : TJsonObject) : TFhirHumanName;
begin
  result := TFhirHumanName.create;
  try
    ParseHumanNameProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseHumanNameProperties(jsn : TJsonObject; result : TFhirHumanName);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirNameUseEnum, SYSTEMS_TFhirNameUseEnum);
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);{q}
    if jsn.has('family') or jsn.has('_family') then
        result.familyElement := parseString(jsn.node['family'], jsn.vObj['_family']);{q}
      if jsn.has('given') or jsn.has('_given') then
      iteratePrimitiveArray(jsn.vArr['given'], jsn.vArr['_given'], result.givenList, parseString);
      if jsn.has('prefix') or jsn.has('_prefix') then
      iteratePrimitiveArray(jsn.vArr['prefix'], jsn.vArr['_prefix'], result.prefixList, parseString);
      if jsn.has('suffix') or jsn.has('_suffix') then
      iteratePrimitiveArray(jsn.vArr['suffix'], jsn.vArr['_suffix'], result.suffixList, parseString);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeHumanName(json : TJSONWriter; name : string; elem : TFhirHumanName; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirNameUseEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirNameUseEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'family', elem.familyElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'family', elem.familyElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.givenList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.givenList.Count - 1 do
    begin
      ext := ext or ((elem.givenList[i].id <> '') or (elem.givenList[i].hasExtensionList) {no-comments or (elem.givenList[i].hasComments)});
      val := val or (elem.givenList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('given');
      for i := 0 to elem.givenList.Count - 1 do
        ComposeStringValue(json, '',elem.givenList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_given');
      for i := 0 to elem.givenList.Count - 1 do
        ComposeStringProps(json, '',elem.givenList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.prefixList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.prefixList.Count - 1 do
    begin
      ext := ext or ((elem.prefixList[i].id <> '') or (elem.prefixList[i].hasExtensionList) {no-comments or (elem.prefixList[i].hasComments)});
      val := val or (elem.prefixList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('prefix');
      for i := 0 to elem.prefixList.Count - 1 do
        ComposeStringValue(json, '',elem.prefixList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_prefix');
      for i := 0 to elem.prefixList.Count - 1 do
        ComposeStringProps(json, '',elem.prefixList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.suffixList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.suffixList.Count - 1 do
    begin
      ext := ext or ((elem.suffixList[i].id <> '') or (elem.suffixList[i].hasExtensionList) {no-comments or (elem.suffixList[i].hasComments)});
      val := val or (elem.suffixList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('suffix');
      for i := 0 to elem.suffixList.Count - 1 do
        ComposeStringValue(json, '',elem.suffixList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_suffix');
      for i := 0 to elem.suffixList.Count - 1 do
        ComposeStringProps(json, '',elem.suffixList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeta(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeta(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeta(jsn : TJsonObject) : TFhirMeta;
begin
  result := TFhirMeta.create;
  try
    ParseMetaProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMetaProperties(jsn : TJsonObject; result : TFhirMeta);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('versionId') or jsn.has('_versionId') then
        result.versionIdElement := parseId(jsn.node['versionId'], jsn.vObj['_versionId']);{q}
    if jsn.has('lastUpdated') or jsn.has('_lastUpdated') then
        result.lastUpdatedElement := parseInstant(jsn.node['lastUpdated'], jsn.vObj['_lastUpdated']);{q}
      if jsn.has('profile') or jsn.has('_profile') then
      iteratePrimitiveArray(jsn.vArr['profile'], jsn.vArr['_profile'], result.profileList, parseUri);
    if jsn.has('security') then
      iterateArray(jsn.vArr['security'], result.securityList, parseCoding);
    if jsn.has('tag') then
      iterateArray(jsn.vArr['tag'], result.tagList, parseCoding);
end;

procedure TFHIRJsonComposer.ComposeMeta(json : TJSONWriter; name : string; elem : TFhirMeta; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdValue(json, 'versionId', elem.versionIdElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdProps(json, 'versionId', elem.versionIdElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantValue(json, 'lastUpdated', elem.lastUpdatedElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantProps(json, 'lastUpdated', elem.lastUpdatedElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.profileList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.profileList.Count - 1 do
    begin
      ext := ext or ((elem.profileList[i].id <> '') or (elem.profileList[i].hasExtensionList) {no-comments or (elem.profileList[i].hasComments)});
      val := val or (elem.profileList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('profile');
      for i := 0 to elem.profileList.Count - 1 do
        ComposeUriValue(json, '',elem.profileList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_profile');
      for i := 0 to elem.profileList.Count - 1 do
        ComposeUriProps(json, '',elem.profileList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.securityList.Count > 0) then
  begin
    json.valueArray('security');
    for i := 0 to elem.securityList.Count - 1 do
      ComposeCoding(json, '', elem.securityList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.tagList.Count > 0) then
  begin
    json.valueArray('tag');
    for i := 0 to elem.tagList.Count - 1 do
      ComposeCoding(json, '', elem.tagList[i]); {z - Coding}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAddress(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAddress(jsn)); {2}
end;

function TFHIRJsonParser.ParseAddress(jsn : TJsonObject) : TFhirAddress;
begin
  result := TFhirAddress.create;
  try
    ParseAddressProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAddressProperties(jsn : TJsonObject; result : TFhirAddress);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirAddressUseEnum, SYSTEMS_TFhirAddressUseEnum);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirAddressTypeEnum, SYSTEMS_TFhirAddressTypeEnum);
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);{q}
      if jsn.has('line') or jsn.has('_line') then
      iteratePrimitiveArray(jsn.vArr['line'], jsn.vArr['_line'], result.lineList, parseString);
    if jsn.has('city') or jsn.has('_city') then
        result.cityElement := parseString(jsn.node['city'], jsn.vObj['_city']);{q}
    if jsn.has('district') or jsn.has('_district') then
        result.districtElement := parseString(jsn.node['district'], jsn.vObj['_district']);{q}
    if jsn.has('state') or jsn.has('_state') then
        result.stateElement := parseString(jsn.node['state'], jsn.vObj['_state']);{q}
    if jsn.has('postalCode') or jsn.has('_postalCode') then
        result.postalCodeElement := parseString(jsn.node['postalCode'], jsn.vObj['_postalCode']);{q}
    if jsn.has('country') or jsn.has('_country') then
        result.countryElement := parseString(jsn.node['country'], jsn.vObj['_country']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeAddress(json : TJSONWriter; name : string; elem : TFhirAddress; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirAddressUseEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirAddressUseEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirAddressTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirAddressTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.lineList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.lineList.Count - 1 do
    begin
      ext := ext or ((elem.lineList[i].id <> '') or (elem.lineList[i].hasExtensionList) {no-comments or (elem.lineList[i].hasComments)});
      val := val or (elem.lineList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('line');
      for i := 0 to elem.lineList.Count - 1 do
        ComposeStringValue(json, '',elem.lineList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_line');
      for i := 0 to elem.lineList.Count - 1 do
        ComposeStringProps(json, '',elem.lineList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'city', elem.cityElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'city', elem.cityElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'district', elem.districtElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'district', elem.districtElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'state', elem.stateElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'state', elem.stateElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'postalCode', elem.postalCodeElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'postalCode', elem.postalCodeElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'country', elem.countryElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'country', elem.countryElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionSlicing(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionSlicing(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionSlicing(jsn : TJsonObject) : TFhirElementDefinitionSlicing;
begin
  result := TFhirElementDefinitionSlicing.create;
  try
    ParseElementDefinitionSlicingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionSlicingProperties(jsn : TJsonObject; result : TFhirElementDefinitionSlicing);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('discriminator') then
      iterateArray(jsn.vArr['discriminator'], result.discriminatorList, parseElementDefinitionSlicingDiscriminator);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('ordered') or jsn.has('_ordered') then
        result.orderedElement := parseBoolean(jsn.node['ordered'], jsn.vObj['_ordered']);{q}
    if jsn.has('rules') or jsn.has('_rules')  then
      result.rulesElement := parseEnum(jsn.path+'/rules', jsn.node['rules'], jsn.vObj['_rules'], CODES_TFhirResourceSlicingRulesEnum, SYSTEMS_TFhirResourceSlicingRulesEnum);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionSlicing(json : TJSONWriter; name : string; elem : TFhirElementDefinitionSlicing; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.discriminatorList.Count > 0) then
  begin
    json.valueArray('discriminator');
    for i := 0 to elem.discriminatorList.Count - 1 do
      ComposeElementDefinitionSlicingDiscriminator(json, '', elem.discriminatorList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.ordered <> false)) then
    ComposeBooleanValue(json, 'ordered', elem.orderedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.ordered <> false)) then
    ComposeBooleanProps(json, 'ordered', elem.orderedElement, false);
  ComposeEnumValue(json, 'rules', elem.RulesElement, CODES_TFhirResourceSlicingRulesEnum, false);
  ComposeEnumProps(json, 'rules', elem.RulesElement, CODES_TFhirResourceSlicingRulesEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionSlicingDiscriminator(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionSlicingDiscriminator(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionSlicingDiscriminator(jsn : TJsonObject) : TFhirElementDefinitionSlicingDiscriminator;
begin
  result := TFhirElementDefinitionSlicingDiscriminator.create;
  try
    ParseElementDefinitionSlicingDiscriminatorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionSlicingDiscriminatorProperties(jsn : TJsonObject; result : TFhirElementDefinitionSlicingDiscriminator);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirDiscriminatorTypeEnum, SYSTEMS_TFhirDiscriminatorTypeEnum);
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);{q}
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionSlicingDiscriminator(json : TJSONWriter; name : string; elem : TFhirElementDefinitionSlicingDiscriminator; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirDiscriminatorTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirDiscriminatorTypeEnum, false);
  ComposeStringValue(json, 'path', elem.pathElement, false);
  ComposeStringProps(json, 'path', elem.pathElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionBase(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionBase(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionBase(jsn : TJsonObject) : TFhirElementDefinitionBase;
begin
  result := TFhirElementDefinitionBase.create;
  try
    ParseElementDefinitionBaseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionBaseProperties(jsn : TJsonObject; result : TFhirElementDefinitionBase);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);{q}
    if jsn.has('min') or jsn.has('_min') then
        result.minElement := parseUnsignedInt(jsn.node['min'], jsn.vObj['_min']);{q}
    if jsn.has('max') or jsn.has('_max') then
        result.maxElement := parseString(jsn.node['max'], jsn.vObj['_max']);{q}
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionBase(json : TJSONWriter; name : string; elem : TFhirElementDefinitionBase; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  ComposeStringValue(json, 'path', elem.pathElement, false);
  ComposeStringProps(json, 'path', elem.pathElement, false);
  ComposeUnsignedIntValue(json, 'min', elem.minElement, false);
  ComposeUnsignedIntProps(json, 'min', elem.minElement, false);
  ComposeStringValue(json, 'max', elem.maxElement, false);
  ComposeStringProps(json, 'max', elem.maxElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionType(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionType(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionType(jsn : TJsonObject) : TFhirElementDefinitionType;
begin
  result := TFhirElementDefinitionType.create;
  try
    ParseElementDefinitionTypeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionTypeProperties(jsn : TJsonObject; result : TFhirElementDefinitionType);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseUri(jsn.node['code'], jsn.vObj['_code']);{q}
    if jsn.has('profile') or jsn.has('_profile') then
        result.profileElement := parseUri(jsn.node['profile'], jsn.vObj['_profile']);{q}
    if jsn.has('targetProfile') or jsn.has('_targetProfile') then
        result.targetProfileElement := parseUri(jsn.node['targetProfile'], jsn.vObj['_targetProfile']);{q}
    if jsn.has('aggregation') or jsn.has('_aggregation') then
      iterateEnumArray(jsn.vArr['aggregation'], jsn.vArr['_aggregation'], jsn.path+'/aggregation', result.aggregationList, parseEnum, CODES_TFhirResourceAggregationModeEnum, SYSTEMS_TFhirResourceAggregationModeEnum);
    if jsn.has('versioning') or jsn.has('_versioning')  then
      result.versioningElement := parseEnum(jsn.path+'/versioning', jsn.node['versioning'], jsn.vObj['_versioning'], CODES_TFhirReferenceVersionRulesEnum, SYSTEMS_TFhirReferenceVersionRulesEnum);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionType(json : TJSONWriter; name : string; elem : TFhirElementDefinitionType; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  ComposeUriValue(json, 'code', elem.codeElement, false);
  ComposeUriProps(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'profile', elem.profileElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'profile', elem.profileElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'targetProfile', elem.targetProfileElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'targetProfile', elem.targetProfileElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.aggregationList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.aggregationList.Count - 1 do
    begin
      val := val or (elem.aggregationList[i].hasPrimitiveValue);
      ext := ext or ((elem.aggregationList[i].id <> '') or (elem.aggregationList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('aggregation');
      for i := 0 to elem.aggregationList.Count - 1 do
        ComposeEnumValue(json, '', elem.aggregationList[i], CODES_TFhirResourceAggregationModeEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_aggregation');
      for i := 0 to elem.aggregationList.Count - 1 do
        ComposeEnumProps(json, '', elem.aggregationList[i], CODES_TFhirResourceAggregationModeEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.versioningElement <> nil) and (elem.versioningElement.primitiveValue <> 'either')) then
    ComposeEnumValue(json, 'versioning', elem.VersioningElement, CODES_TFhirReferenceVersionRulesEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.versioningElement <> nil) and (elem.versioningElement.primitiveValue <> 'either')) then
    ComposeEnumProps(json, 'versioning', elem.VersioningElement, CODES_TFhirReferenceVersionRulesEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionExample(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionExample(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionExample(jsn : TJsonObject) : TFhirElementDefinitionExample;
begin
  result := TFhirElementDefinitionExample.create;
  try
    ParseElementDefinitionExampleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionExampleProperties(jsn : TJsonObject; result : TFhirElementDefinitionExample);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('label') or jsn.has('_label') then
        result.label_Element := parseString(jsn.node['label'], jsn.vObj['_label']);{q}
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      result.value := parseCode(jsn.node['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      result.value := parseId(jsn.node['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      result.value := parseMarkdown(jsn.node['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      result.value := parseOid(jsn.node['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      result.value := parsePositiveInt(jsn.node['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      result.value := parseUnsignedInt(jsn.node['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueAddress') {a4} then
      result.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      result.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      result.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      result.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      result.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      result.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      result.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      result.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      result.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      result.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      result.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueReference') {a4} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      result.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      result.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      result.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueMeta') {a4} then
      result.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      result.value := parseBase64Binary(jsn.node['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      result.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      result.value := parseInstant(jsn.node['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      result.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionExample(json : TJSONWriter; name : string; elem : TFhirElementDefinitionExample; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  ComposeStringValue(json, 'label', elem.label_Element, false);
  ComposeStringProps(json, 'label', elem.label_Element, false);
  if (elem.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(elem.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(elem.value), false);
  end
  else if (elem.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(elem.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(elem.value), false);
  end
  else if (elem.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
  end
  else if (elem.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(elem.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(elem.value), false);
  end
  else if (elem.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
  end
  else if (elem.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
  end
  else if (elem.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(elem.value)) 
  else if (elem.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(elem.value)) 
  else if (elem.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(elem.value)) 
  else if (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if (elem.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(elem.value)) 
  else if (elem.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(elem.value)) 
  else if (elem.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(elem.value)) 
  else if (elem.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(elem.value)) 
  else if (elem.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(elem.value)) 
  else if (elem.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(elem.value)) 
  else if (elem.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(elem.value)) 
  else if (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if (elem.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(elem.value)) 
  else if (elem.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(elem.value)) 
  else if (elem.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(elem.value)) 
  else if (elem.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(elem.value)) 
  else if (elem.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(elem.value)) 
  else if (elem.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(elem.value)) 
  else if (elem.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
  end
  else if (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if (elem.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(elem.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(elem.value), false);
  end
  else if (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end
  else if (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end
  else if (elem.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(elem.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(elem.value), false);
  end
  else if (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if (elem.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(elem.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionConstraint(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionConstraint(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionConstraint(jsn : TJsonObject) : TFhirElementDefinitionConstraint;
begin
  result := TFhirElementDefinitionConstraint.create;
  try
    ParseElementDefinitionConstraintProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionConstraintProperties(jsn : TJsonObject; result : TFhirElementDefinitionConstraint);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('key') or jsn.has('_key') then
        result.keyElement := parseId(jsn.node['key'], jsn.vObj['_key']);{q}
    if jsn.has('requirements') or jsn.has('_requirements') then
        result.requirementsElement := parseString(jsn.node['requirements'], jsn.vObj['_requirements']);{q}
    if jsn.has('severity') or jsn.has('_severity')  then
      result.severityElement := parseEnum(jsn.path+'/severity', jsn.node['severity'], jsn.vObj['_severity'], CODES_TFhirConstraintSeverityEnum, SYSTEMS_TFhirConstraintSeverityEnum);
    if jsn.has('human') or jsn.has('_human') then
        result.humanElement := parseString(jsn.node['human'], jsn.vObj['_human']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);{q}
    if jsn.has('xpath') or jsn.has('_xpath') then
        result.xpathElement := parseString(jsn.node['xpath'], jsn.vObj['_xpath']);{q}
    if jsn.has('source') or jsn.has('_source') then
        result.sourceElement := parseUri(jsn.node['source'], jsn.vObj['_source']);{q}
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionConstraint(json : TJSONWriter; name : string; elem : TFhirElementDefinitionConstraint; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  ComposeIdValue(json, 'key', elem.keyElement, false);
  ComposeIdProps(json, 'key', elem.keyElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'requirements', elem.requirementsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'requirements', elem.requirementsElement, false);
  ComposeEnumValue(json, 'severity', elem.SeverityElement, CODES_TFhirConstraintSeverityEnum, false);
  ComposeEnumProps(json, 'severity', elem.SeverityElement, CODES_TFhirConstraintSeverityEnum, false);
  ComposeStringValue(json, 'human', elem.humanElement, false);
  ComposeStringProps(json, 'human', elem.humanElement, false);
  ComposeStringValue(json, 'expression', elem.expressionElement, false);
  ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'xpath', elem.xpathElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'xpath', elem.xpathElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'source', elem.sourceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'source', elem.sourceElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionBinding(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionBinding(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionBinding(jsn : TJsonObject) : TFhirElementDefinitionBinding;
begin
  result := TFhirElementDefinitionBinding.create;
  try
    ParseElementDefinitionBindingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionBindingProperties(jsn : TJsonObject; result : TFhirElementDefinitionBinding);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('strength') or jsn.has('_strength')  then
      result.strengthElement := parseEnum(jsn.path+'/strength', jsn.node['strength'], jsn.vObj['_strength'], CODES_TFhirBindingStrengthEnum, SYSTEMS_TFhirBindingStrengthEnum);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('valueSetReference') {a3} then
      result.valueSet := ParseReference(jsn.vObj['valueSetReference']);
    if jsn.has('valueSetUri') or jsn.has('_valueSetUri') then
      result.valueSet := parseUri(jsn.node['valueSetUri'], jsn.vObj['_valueSetUri']);
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionBinding(json : TJSONWriter; name : string; elem : TFhirElementDefinitionBinding; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  ComposeEnumValue(json, 'strength', elem.StrengthElement, CODES_TFhirBindingStrengthEnum, false);
  ComposeEnumProps(json, 'strength', elem.StrengthElement, CODES_TFhirBindingStrengthEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.valueSet is TFhirReference) then
    ComposeReference(json, 'valueSetReference', TFhirReference(elem.valueSet))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.valueSet is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueSetUri', TFhirUri(elem.valueSet), false);
    ComposeUriProps(json, 'valueSetUri', TFhirUri(elem.valueSet), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinitionMapping(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinitionMapping(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinitionMapping(jsn : TJsonObject) : TFhirElementDefinitionMapping;
begin
  result := TFhirElementDefinitionMapping.create;
  try
    ParseElementDefinitionMappingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionMappingProperties(jsn : TJsonObject; result : TFhirElementDefinitionMapping);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('identity') or jsn.has('_identity') then
        result.identityElement := parseId(jsn.node['identity'], jsn.vObj['_identity']);{q}
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := parseCode(jsn.node['language'], jsn.vObj['_language']);{q}
    if jsn.has('map') or jsn.has('_map') then
        result.mapElement := parseString(jsn.node['map'], jsn.vObj['_map']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeElementDefinitionMapping(json : TJSONWriter; name : string; elem : TFhirElementDefinitionMapping; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  ComposeIdValue(json, 'identity', elem.identityElement, false);
  ComposeIdProps(json, 'identity', elem.identityElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
  ComposeStringValue(json, 'map', elem.mapElement, false);
  ComposeStringProps(json, 'map', elem.mapElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseElementDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseElementDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseElementDefinition(jsn : TJsonObject) : TFhirElementDefinition;
begin
  result := TFhirElementDefinition.create;
  try
    ParseElementDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseElementDefinitionProperties(jsn : TJsonObject; result : TFhirElementDefinition);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);{q}
    if jsn.has('representation') or jsn.has('_representation') then
      iterateEnumArray(jsn.vArr['representation'], jsn.vArr['_representation'], jsn.path+'/representation', result.representationList, parseEnum, CODES_TFhirPropertyRepresentationEnum, SYSTEMS_TFhirPropertyRepresentationEnum);
    if jsn.has('sliceName') or jsn.has('_sliceName') then
        result.sliceNameElement := parseString(jsn.node['sliceName'], jsn.vObj['_sliceName']);{q}
    if jsn.has('label') or jsn.has('_label') then
        result.label_Element := parseString(jsn.node['label'], jsn.vObj['_label']);{q}
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCoding);
    if jsn.has('slicing') then
        result.slicing := ParseElementDefinitionSlicing(jsn.vObj['slicing']);{q3}
    if jsn.has('short') or jsn.has('_short') then
        result.shortElement := parseString(jsn.node['short'], jsn.vObj['_short']);{q}
    if jsn.has('definition') or jsn.has('_definition') then
        result.definitionElement := parseMarkdown(jsn.node['definition'], jsn.vObj['_definition']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseMarkdown(jsn.node['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('requirements') or jsn.has('_requirements') then
        result.requirementsElement := parseMarkdown(jsn.node['requirements'], jsn.vObj['_requirements']);{q}
      if jsn.has('alias') or jsn.has('_alias') then
      iteratePrimitiveArray(jsn.vArr['alias'], jsn.vArr['_alias'], result.aliasList, parseString);
    if jsn.has('min') or jsn.has('_min') then
        result.minElement := parseUnsignedInt(jsn.node['min'], jsn.vObj['_min']);{q}
    if jsn.has('max') or jsn.has('_max') then
        result.maxElement := parseString(jsn.node['max'], jsn.vObj['_max']);{q}
    if jsn.has('base') then
        result.base := ParseElementDefinitionBase(jsn.vObj['base']);{q3}
    if jsn.has('contentReference') or jsn.has('_contentReference') then
        result.contentReferenceElement := parseUri(jsn.node['contentReference'], jsn.vObj['_contentReference']);{q}
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseElementDefinitionType);
    if jsn.has('defaultValueCode') or jsn.has('_defaultValueCode') then
      result.defaultValue := parseCode(jsn.node['defaultValueCode'], jsn.vObj['_defaultValueCode']);
    if jsn.has('defaultValueId') or jsn.has('_defaultValueId') then
      result.defaultValue := parseId(jsn.node['defaultValueId'], jsn.vObj['_defaultValueId']);
    if jsn.has('defaultValueMarkdown') or jsn.has('_defaultValueMarkdown') then
      result.defaultValue := parseMarkdown(jsn.node['defaultValueMarkdown'], jsn.vObj['_defaultValueMarkdown']);
    if jsn.has('defaultValueOid') or jsn.has('_defaultValueOid') then
      result.defaultValue := parseOid(jsn.node['defaultValueOid'], jsn.vObj['_defaultValueOid']);
    if jsn.has('defaultValuePositiveInt') or jsn.has('_defaultValuePositiveInt') then
      result.defaultValue := parsePositiveInt(jsn.node['defaultValuePositiveInt'], jsn.vObj['_defaultValuePositiveInt']);
    if jsn.has('defaultValueUnsignedInt') or jsn.has('_defaultValueUnsignedInt') then
      result.defaultValue := parseUnsignedInt(jsn.node['defaultValueUnsignedInt'], jsn.vObj['_defaultValueUnsignedInt']);
    if jsn.has('defaultValueAddress') {a4} then
      result.defaultValue := ParseAddress(jsn.vObj['defaultValueAddress']);
    if jsn.has('defaultValueAge') {a4} then
      result.defaultValue := ParseAge(jsn.vObj['defaultValueAge']);
    if jsn.has('defaultValueAnnotation') {a4} then
      result.defaultValue := ParseAnnotation(jsn.vObj['defaultValueAnnotation']);
    if jsn.has('defaultValueAttachment') {a4} then
      result.defaultValue := ParseAttachment(jsn.vObj['defaultValueAttachment']);
    if jsn.has('defaultValueCodeableConcept') {a4} then
      result.defaultValue := ParseCodeableConcept(jsn.vObj['defaultValueCodeableConcept']);
    if jsn.has('defaultValueCoding') {a4} then
      result.defaultValue := ParseCoding(jsn.vObj['defaultValueCoding']);
    if jsn.has('defaultValueContactPoint') {a4} then
      result.defaultValue := ParseContactPoint(jsn.vObj['defaultValueContactPoint']);
    if jsn.has('defaultValueCount') {a4} then
      result.defaultValue := ParseCount(jsn.vObj['defaultValueCount']);
    if jsn.has('defaultValueDistance') {a4} then
      result.defaultValue := ParseDistance(jsn.vObj['defaultValueDistance']);
    if jsn.has('defaultValueDuration') {a4} then
      result.defaultValue := ParseDuration(jsn.vObj['defaultValueDuration']);
    if jsn.has('defaultValueHumanName') {a4} then
      result.defaultValue := ParseHumanName(jsn.vObj['defaultValueHumanName']);
    if jsn.has('defaultValueIdentifier') {a4} then
      result.defaultValue := ParseIdentifier(jsn.vObj['defaultValueIdentifier']);
    if jsn.has('defaultValueMoney') {a4} then
      result.defaultValue := ParseMoney(jsn.vObj['defaultValueMoney']);
    if jsn.has('defaultValuePeriod') {a4} then
      result.defaultValue := ParsePeriod(jsn.vObj['defaultValuePeriod']);
    if jsn.has('defaultValueQuantity') {a4} then
      result.defaultValue := ParseQuantity(jsn.vObj['defaultValueQuantity']);
    if jsn.has('defaultValueRange') {a4} then
      result.defaultValue := ParseRange(jsn.vObj['defaultValueRange']);
    if jsn.has('defaultValueRatio') {a4} then
      result.defaultValue := ParseRatio(jsn.vObj['defaultValueRatio']);
    if jsn.has('defaultValueReference') {a4} then
      result.defaultValue := ParseReference(jsn.vObj['defaultValueReference']);
    if jsn.has('defaultValueSampledData') {a4} then
      result.defaultValue := ParseSampledData(jsn.vObj['defaultValueSampledData']);
    if jsn.has('defaultValueSignature') {a4} then
      result.defaultValue := ParseSignature(jsn.vObj['defaultValueSignature']);
    if jsn.has('defaultValueTiming') {a4} then
      result.defaultValue := ParseTiming(jsn.vObj['defaultValueTiming']);
    if jsn.has('defaultValueMeta') {a4} then
      result.defaultValue := ParseMeta(jsn.vObj['defaultValueMeta']);
    if jsn.has('defaultValueBase64Binary') or jsn.has('_defaultValueBase64Binary') then
      result.defaultValue := parseBase64Binary(jsn.node['defaultValueBase64Binary'], jsn.vObj['_defaultValueBase64Binary']);
    if jsn.has('defaultValueBoolean') or jsn.has('_defaultValueBoolean') then
      result.defaultValue := parseBoolean(jsn.node['defaultValueBoolean'], jsn.vObj['_defaultValueBoolean']);
    if jsn.has('defaultValueDate') or jsn.has('_defaultValueDate') then
      result.defaultValue := parseDate(jsn.node['defaultValueDate'], jsn.vObj['_defaultValueDate']);
    if jsn.has('defaultValueDateTime') or jsn.has('_defaultValueDateTime') then
      result.defaultValue := parseDateTime(jsn.node['defaultValueDateTime'], jsn.vObj['_defaultValueDateTime']);
    if jsn.has('defaultValueDecimal') or jsn.has('_defaultValueDecimal') then
      result.defaultValue := parseDecimal(jsn.node['defaultValueDecimal'], jsn.vObj['_defaultValueDecimal']);
    if jsn.has('defaultValueInstant') or jsn.has('_defaultValueInstant') then
      result.defaultValue := parseInstant(jsn.node['defaultValueInstant'], jsn.vObj['_defaultValueInstant']);
    if jsn.has('defaultValueInteger') or jsn.has('_defaultValueInteger') then
      result.defaultValue := parseInteger(jsn.node['defaultValueInteger'], jsn.vObj['_defaultValueInteger']);
    if jsn.has('defaultValueString') or jsn.has('_defaultValueString') then
      result.defaultValue := parseString(jsn.node['defaultValueString'], jsn.vObj['_defaultValueString']);
    if jsn.has('defaultValueTime') or jsn.has('_defaultValueTime') then
      result.defaultValue := parseTime(jsn.node['defaultValueTime'], jsn.vObj['_defaultValueTime']);
    if jsn.has('defaultValueUri') or jsn.has('_defaultValueUri') then
      result.defaultValue := parseUri(jsn.node['defaultValueUri'], jsn.vObj['_defaultValueUri']);
    if jsn.has('meaningWhenMissing') or jsn.has('_meaningWhenMissing') then
        result.meaningWhenMissingElement := parseMarkdown(jsn.node['meaningWhenMissing'], jsn.vObj['_meaningWhenMissing']);{q}
    if jsn.has('orderMeaning') or jsn.has('_orderMeaning') then
        result.orderMeaningElement := parseString(jsn.node['orderMeaning'], jsn.vObj['_orderMeaning']);{q}
    if jsn.has('fixedCode') or jsn.has('_fixedCode') then
      result.fixed := parseCode(jsn.node['fixedCode'], jsn.vObj['_fixedCode']);
    if jsn.has('fixedId') or jsn.has('_fixedId') then
      result.fixed := parseId(jsn.node['fixedId'], jsn.vObj['_fixedId']);
    if jsn.has('fixedMarkdown') or jsn.has('_fixedMarkdown') then
      result.fixed := parseMarkdown(jsn.node['fixedMarkdown'], jsn.vObj['_fixedMarkdown']);
    if jsn.has('fixedOid') or jsn.has('_fixedOid') then
      result.fixed := parseOid(jsn.node['fixedOid'], jsn.vObj['_fixedOid']);
    if jsn.has('fixedPositiveInt') or jsn.has('_fixedPositiveInt') then
      result.fixed := parsePositiveInt(jsn.node['fixedPositiveInt'], jsn.vObj['_fixedPositiveInt']);
    if jsn.has('fixedUnsignedInt') or jsn.has('_fixedUnsignedInt') then
      result.fixed := parseUnsignedInt(jsn.node['fixedUnsignedInt'], jsn.vObj['_fixedUnsignedInt']);
    if jsn.has('fixedAddress') {a4} then
      result.fixed := ParseAddress(jsn.vObj['fixedAddress']);
    if jsn.has('fixedAge') {a4} then
      result.fixed := ParseAge(jsn.vObj['fixedAge']);
    if jsn.has('fixedAnnotation') {a4} then
      result.fixed := ParseAnnotation(jsn.vObj['fixedAnnotation']);
    if jsn.has('fixedAttachment') {a4} then
      result.fixed := ParseAttachment(jsn.vObj['fixedAttachment']);
    if jsn.has('fixedCodeableConcept') {a4} then
      result.fixed := ParseCodeableConcept(jsn.vObj['fixedCodeableConcept']);
    if jsn.has('fixedCoding') {a4} then
      result.fixed := ParseCoding(jsn.vObj['fixedCoding']);
    if jsn.has('fixedContactPoint') {a4} then
      result.fixed := ParseContactPoint(jsn.vObj['fixedContactPoint']);
    if jsn.has('fixedCount') {a4} then
      result.fixed := ParseCount(jsn.vObj['fixedCount']);
    if jsn.has('fixedDistance') {a4} then
      result.fixed := ParseDistance(jsn.vObj['fixedDistance']);
    if jsn.has('fixedDuration') {a4} then
      result.fixed := ParseDuration(jsn.vObj['fixedDuration']);
    if jsn.has('fixedHumanName') {a4} then
      result.fixed := ParseHumanName(jsn.vObj['fixedHumanName']);
    if jsn.has('fixedIdentifier') {a4} then
      result.fixed := ParseIdentifier(jsn.vObj['fixedIdentifier']);
    if jsn.has('fixedMoney') {a4} then
      result.fixed := ParseMoney(jsn.vObj['fixedMoney']);
    if jsn.has('fixedPeriod') {a4} then
      result.fixed := ParsePeriod(jsn.vObj['fixedPeriod']);
    if jsn.has('fixedQuantity') {a4} then
      result.fixed := ParseQuantity(jsn.vObj['fixedQuantity']);
    if jsn.has('fixedRange') {a4} then
      result.fixed := ParseRange(jsn.vObj['fixedRange']);
    if jsn.has('fixedRatio') {a4} then
      result.fixed := ParseRatio(jsn.vObj['fixedRatio']);
    if jsn.has('fixedReference') {a4} then
      result.fixed := ParseReference(jsn.vObj['fixedReference']);
    if jsn.has('fixedSampledData') {a4} then
      result.fixed := ParseSampledData(jsn.vObj['fixedSampledData']);
    if jsn.has('fixedSignature') {a4} then
      result.fixed := ParseSignature(jsn.vObj['fixedSignature']);
    if jsn.has('fixedTiming') {a4} then
      result.fixed := ParseTiming(jsn.vObj['fixedTiming']);
    if jsn.has('fixedMeta') {a4} then
      result.fixed := ParseMeta(jsn.vObj['fixedMeta']);
    if jsn.has('fixedBase64Binary') or jsn.has('_fixedBase64Binary') then
      result.fixed := parseBase64Binary(jsn.node['fixedBase64Binary'], jsn.vObj['_fixedBase64Binary']);
    if jsn.has('fixedBoolean') or jsn.has('_fixedBoolean') then
      result.fixed := parseBoolean(jsn.node['fixedBoolean'], jsn.vObj['_fixedBoolean']);
    if jsn.has('fixedDate') or jsn.has('_fixedDate') then
      result.fixed := parseDate(jsn.node['fixedDate'], jsn.vObj['_fixedDate']);
    if jsn.has('fixedDateTime') or jsn.has('_fixedDateTime') then
      result.fixed := parseDateTime(jsn.node['fixedDateTime'], jsn.vObj['_fixedDateTime']);
    if jsn.has('fixedDecimal') or jsn.has('_fixedDecimal') then
      result.fixed := parseDecimal(jsn.node['fixedDecimal'], jsn.vObj['_fixedDecimal']);
    if jsn.has('fixedInstant') or jsn.has('_fixedInstant') then
      result.fixed := parseInstant(jsn.node['fixedInstant'], jsn.vObj['_fixedInstant']);
    if jsn.has('fixedInteger') or jsn.has('_fixedInteger') then
      result.fixed := parseInteger(jsn.node['fixedInteger'], jsn.vObj['_fixedInteger']);
    if jsn.has('fixedString') or jsn.has('_fixedString') then
      result.fixed := parseString(jsn.node['fixedString'], jsn.vObj['_fixedString']);
    if jsn.has('fixedTime') or jsn.has('_fixedTime') then
      result.fixed := parseTime(jsn.node['fixedTime'], jsn.vObj['_fixedTime']);
    if jsn.has('fixedUri') or jsn.has('_fixedUri') then
      result.fixed := parseUri(jsn.node['fixedUri'], jsn.vObj['_fixedUri']);
    if jsn.has('patternCode') or jsn.has('_patternCode') then
      result.pattern := parseCode(jsn.node['patternCode'], jsn.vObj['_patternCode']);
    if jsn.has('patternId') or jsn.has('_patternId') then
      result.pattern := parseId(jsn.node['patternId'], jsn.vObj['_patternId']);
    if jsn.has('patternMarkdown') or jsn.has('_patternMarkdown') then
      result.pattern := parseMarkdown(jsn.node['patternMarkdown'], jsn.vObj['_patternMarkdown']);
    if jsn.has('patternOid') or jsn.has('_patternOid') then
      result.pattern := parseOid(jsn.node['patternOid'], jsn.vObj['_patternOid']);
    if jsn.has('patternPositiveInt') or jsn.has('_patternPositiveInt') then
      result.pattern := parsePositiveInt(jsn.node['patternPositiveInt'], jsn.vObj['_patternPositiveInt']);
    if jsn.has('patternUnsignedInt') or jsn.has('_patternUnsignedInt') then
      result.pattern := parseUnsignedInt(jsn.node['patternUnsignedInt'], jsn.vObj['_patternUnsignedInt']);
    if jsn.has('patternAddress') {a4} then
      result.pattern := ParseAddress(jsn.vObj['patternAddress']);
    if jsn.has('patternAge') {a4} then
      result.pattern := ParseAge(jsn.vObj['patternAge']);
    if jsn.has('patternAnnotation') {a4} then
      result.pattern := ParseAnnotation(jsn.vObj['patternAnnotation']);
    if jsn.has('patternAttachment') {a4} then
      result.pattern := ParseAttachment(jsn.vObj['patternAttachment']);
    if jsn.has('patternCodeableConcept') {a4} then
      result.pattern := ParseCodeableConcept(jsn.vObj['patternCodeableConcept']);
    if jsn.has('patternCoding') {a4} then
      result.pattern := ParseCoding(jsn.vObj['patternCoding']);
    if jsn.has('patternContactPoint') {a4} then
      result.pattern := ParseContactPoint(jsn.vObj['patternContactPoint']);
    if jsn.has('patternCount') {a4} then
      result.pattern := ParseCount(jsn.vObj['patternCount']);
    if jsn.has('patternDistance') {a4} then
      result.pattern := ParseDistance(jsn.vObj['patternDistance']);
    if jsn.has('patternDuration') {a4} then
      result.pattern := ParseDuration(jsn.vObj['patternDuration']);
    if jsn.has('patternHumanName') {a4} then
      result.pattern := ParseHumanName(jsn.vObj['patternHumanName']);
    if jsn.has('patternIdentifier') {a4} then
      result.pattern := ParseIdentifier(jsn.vObj['patternIdentifier']);
    if jsn.has('patternMoney') {a4} then
      result.pattern := ParseMoney(jsn.vObj['patternMoney']);
    if jsn.has('patternPeriod') {a4} then
      result.pattern := ParsePeriod(jsn.vObj['patternPeriod']);
    if jsn.has('patternQuantity') {a4} then
      result.pattern := ParseQuantity(jsn.vObj['patternQuantity']);
    if jsn.has('patternRange') {a4} then
      result.pattern := ParseRange(jsn.vObj['patternRange']);
    if jsn.has('patternRatio') {a4} then
      result.pattern := ParseRatio(jsn.vObj['patternRatio']);
    if jsn.has('patternReference') {a4} then
      result.pattern := ParseReference(jsn.vObj['patternReference']);
    if jsn.has('patternSampledData') {a4} then
      result.pattern := ParseSampledData(jsn.vObj['patternSampledData']);
    if jsn.has('patternSignature') {a4} then
      result.pattern := ParseSignature(jsn.vObj['patternSignature']);
    if jsn.has('patternTiming') {a4} then
      result.pattern := ParseTiming(jsn.vObj['patternTiming']);
    if jsn.has('patternMeta') {a4} then
      result.pattern := ParseMeta(jsn.vObj['patternMeta']);
    if jsn.has('patternBase64Binary') or jsn.has('_patternBase64Binary') then
      result.pattern := parseBase64Binary(jsn.node['patternBase64Binary'], jsn.vObj['_patternBase64Binary']);
    if jsn.has('patternBoolean') or jsn.has('_patternBoolean') then
      result.pattern := parseBoolean(jsn.node['patternBoolean'], jsn.vObj['_patternBoolean']);
    if jsn.has('patternDate') or jsn.has('_patternDate') then
      result.pattern := parseDate(jsn.node['patternDate'], jsn.vObj['_patternDate']);
    if jsn.has('patternDateTime') or jsn.has('_patternDateTime') then
      result.pattern := parseDateTime(jsn.node['patternDateTime'], jsn.vObj['_patternDateTime']);
    if jsn.has('patternDecimal') or jsn.has('_patternDecimal') then
      result.pattern := parseDecimal(jsn.node['patternDecimal'], jsn.vObj['_patternDecimal']);
    if jsn.has('patternInstant') or jsn.has('_patternInstant') then
      result.pattern := parseInstant(jsn.node['patternInstant'], jsn.vObj['_patternInstant']);
    if jsn.has('patternInteger') or jsn.has('_patternInteger') then
      result.pattern := parseInteger(jsn.node['patternInteger'], jsn.vObj['_patternInteger']);
    if jsn.has('patternString') or jsn.has('_patternString') then
      result.pattern := parseString(jsn.node['patternString'], jsn.vObj['_patternString']);
    if jsn.has('patternTime') or jsn.has('_patternTime') then
      result.pattern := parseTime(jsn.node['patternTime'], jsn.vObj['_patternTime']);
    if jsn.has('patternUri') or jsn.has('_patternUri') then
      result.pattern := parseUri(jsn.node['patternUri'], jsn.vObj['_patternUri']);
    if jsn.has('example') then
      iterateArray(jsn.vArr['example'], result.exampleList, parseElementDefinitionExample);
    if jsn.has('minValuePositiveInt') or jsn.has('_minValuePositiveInt') then
      result.minValue := parsePositiveInt(jsn.node['minValuePositiveInt'], jsn.vObj['_minValuePositiveInt']);
    if jsn.has('minValueUnsignedInt') or jsn.has('_minValueUnsignedInt') then
      result.minValue := parseUnsignedInt(jsn.node['minValueUnsignedInt'], jsn.vObj['_minValueUnsignedInt']);
    if jsn.has('minValueQuantity') {a4} then
      result.minValue := ParseQuantity(jsn.vObj['minValueQuantity']);
    if jsn.has('minValueDate') or jsn.has('_minValueDate') then
      result.minValue := parseDate(jsn.node['minValueDate'], jsn.vObj['_minValueDate']);
    if jsn.has('minValueDateTime') or jsn.has('_minValueDateTime') then
      result.minValue := parseDateTime(jsn.node['minValueDateTime'], jsn.vObj['_minValueDateTime']);
    if jsn.has('minValueInstant') or jsn.has('_minValueInstant') then
      result.minValue := parseInstant(jsn.node['minValueInstant'], jsn.vObj['_minValueInstant']);
    if jsn.has('minValueTime') or jsn.has('_minValueTime') then
      result.minValue := parseTime(jsn.node['minValueTime'], jsn.vObj['_minValueTime']);
    if jsn.has('minValueDecimal') or jsn.has('_minValueDecimal') then
      result.minValue := parseDecimal(jsn.node['minValueDecimal'], jsn.vObj['_minValueDecimal']);
    if jsn.has('minValueInteger') or jsn.has('_minValueInteger') then
      result.minValue := parseInteger(jsn.node['minValueInteger'], jsn.vObj['_minValueInteger']);
    if jsn.has('maxValuePositiveInt') or jsn.has('_maxValuePositiveInt') then
      result.maxValue := parsePositiveInt(jsn.node['maxValuePositiveInt'], jsn.vObj['_maxValuePositiveInt']);
    if jsn.has('maxValueUnsignedInt') or jsn.has('_maxValueUnsignedInt') then
      result.maxValue := parseUnsignedInt(jsn.node['maxValueUnsignedInt'], jsn.vObj['_maxValueUnsignedInt']);
    if jsn.has('maxValueQuantity') {a4} then
      result.maxValue := ParseQuantity(jsn.vObj['maxValueQuantity']);
    if jsn.has('maxValueDate') or jsn.has('_maxValueDate') then
      result.maxValue := parseDate(jsn.node['maxValueDate'], jsn.vObj['_maxValueDate']);
    if jsn.has('maxValueDateTime') or jsn.has('_maxValueDateTime') then
      result.maxValue := parseDateTime(jsn.node['maxValueDateTime'], jsn.vObj['_maxValueDateTime']);
    if jsn.has('maxValueInstant') or jsn.has('_maxValueInstant') then
      result.maxValue := parseInstant(jsn.node['maxValueInstant'], jsn.vObj['_maxValueInstant']);
    if jsn.has('maxValueTime') or jsn.has('_maxValueTime') then
      result.maxValue := parseTime(jsn.node['maxValueTime'], jsn.vObj['_maxValueTime']);
    if jsn.has('maxValueDecimal') or jsn.has('_maxValueDecimal') then
      result.maxValue := parseDecimal(jsn.node['maxValueDecimal'], jsn.vObj['_maxValueDecimal']);
    if jsn.has('maxValueInteger') or jsn.has('_maxValueInteger') then
      result.maxValue := parseInteger(jsn.node['maxValueInteger'], jsn.vObj['_maxValueInteger']);
    if jsn.has('maxLength') or jsn.has('_maxLength') then
        result.maxLengthElement := parseInteger(jsn.node['maxLength'], jsn.vObj['_maxLength']);{q}
      if jsn.has('condition') or jsn.has('_condition') then
      iteratePrimitiveArray(jsn.vArr['condition'], jsn.vArr['_condition'], result.conditionList, parseId);
    if jsn.has('constraint') then
      iterateArray(jsn.vArr['constraint'], result.constraintList, parseElementDefinitionConstraint);
    if jsn.has('mustSupport') or jsn.has('_mustSupport') then
        result.mustSupportElement := parseBoolean(jsn.node['mustSupport'], jsn.vObj['_mustSupport']);{q}
    if jsn.has('isModifier') or jsn.has('_isModifier') then
        result.isModifierElement := parseBoolean(jsn.node['isModifier'], jsn.vObj['_isModifier']);{q}
    if jsn.has('isSummary') or jsn.has('_isSummary') then
        result.isSummaryElement := parseBoolean(jsn.node['isSummary'], jsn.vObj['_isSummary']);{q}
    if jsn.has('binding') then
        result.binding := ParseElementDefinitionBinding(jsn.vObj['binding']);{q3}
    if jsn.has('mapping') then
      iterateArray(jsn.vArr['mapping'], result.mappingList, parseElementDefinitionMapping);
end;

procedure TFHIRJsonComposer.ComposeElementDefinition(json : TJSONWriter; name : string; elem : TFhirElementDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  ComposeStringValue(json, 'path', elem.pathElement, false);
  ComposeStringProps(json, 'path', elem.pathElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.representationList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.representationList.Count - 1 do
    begin
      val := val or (elem.representationList[i].hasPrimitiveValue);
      ext := ext or ((elem.representationList[i].id <> '') or (elem.representationList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('representation');
      for i := 0 to elem.representationList.Count - 1 do
        ComposeEnumValue(json, '', elem.representationList[i], CODES_TFhirPropertyRepresentationEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_representation');
      for i := 0 to elem.representationList.Count - 1 do
        ComposeEnumProps(json, '', elem.representationList[i], CODES_TFhirPropertyRepresentationEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'sliceName', elem.sliceNameElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'sliceName', elem.sliceNameElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'label', elem.label_Element, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'label', elem.label_Element, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCoding(json, '', elem.codeList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeElementDefinitionSlicing(json, 'slicing', elem.slicing); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'short', elem.shortElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'short', elem.shortElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownValue(json, 'definition', elem.definitionElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownProps(json, 'definition', elem.definitionElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownProps(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownValue(json, 'requirements', elem.requirementsElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownProps(json, 'requirements', elem.requirementsElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.aliasList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.aliasList.Count - 1 do
    begin
      ext := ext or ((elem.aliasList[i].id <> '') or (elem.aliasList[i].hasExtensionList) {no-comments or (elem.aliasList[i].hasComments)});
      val := val or (elem.aliasList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('alias');
      for i := 0 to elem.aliasList.Count - 1 do
        ComposeStringValue(json, '',elem.aliasList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_alias');
      for i := 0 to elem.aliasList.Count - 1 do
        ComposeStringProps(json, '',elem.aliasList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUnsignedIntValue(json, 'min', elem.minElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUnsignedIntProps(json, 'min', elem.minElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'max', elem.maxElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'max', elem.maxElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeElementDefinitionBase(json, 'base', elem.base); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'contentReference', elem.contentReferenceElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'contentReference', elem.contentReferenceElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeElementDefinitionType(json, '', elem.type_List[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'defaultValueCode', TFhirCode(elem.defaultValue), false);
    ComposeCodeProps(json, 'defaultValueCode', TFhirCode(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirId) then 
  begin
    ComposeIdValue(json, 'defaultValueId', TFhirId(elem.defaultValue), false);
    ComposeIdProps(json, 'defaultValueId', TFhirId(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'defaultValueMarkdown', TFhirMarkdown(elem.defaultValue), false);
    ComposeMarkdownProps(json, 'defaultValueMarkdown', TFhirMarkdown(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirOid) then 
  begin
    ComposeOidValue(json, 'defaultValueOid', TFhirOid(elem.defaultValue), false);
    ComposeOidProps(json, 'defaultValueOid', TFhirOid(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'defaultValuePositiveInt', TFhirPositiveInt(elem.defaultValue), false);
    ComposePositiveIntProps(json, 'defaultValuePositiveInt', TFhirPositiveInt(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'defaultValueUnsignedInt', TFhirUnsignedInt(elem.defaultValue), false);
    ComposeUnsignedIntProps(json, 'defaultValueUnsignedInt', TFhirUnsignedInt(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirAddress) then 
    ComposeAddress(json, 'defaultValueAddress', TFhirAddress(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirAge) then 
    ComposeAge(json, 'defaultValueAge', TFhirAge(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirAnnotation) then 
    ComposeAnnotation(json, 'defaultValueAnnotation', TFhirAnnotation(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirAttachment) then 
    ComposeAttachment(json, 'defaultValueAttachment', TFhirAttachment(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'defaultValueCodeableConcept', TFhirCodeableConcept(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirCoding) then 
    ComposeCoding(json, 'defaultValueCoding', TFhirCoding(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirContactPoint) then 
    ComposeContactPoint(json, 'defaultValueContactPoint', TFhirContactPoint(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirCount) then 
    ComposeCount(json, 'defaultValueCount', TFhirCount(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDistance) then 
    ComposeDistance(json, 'defaultValueDistance', TFhirDistance(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDuration) then 
    ComposeDuration(json, 'defaultValueDuration', TFhirDuration(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirHumanName) then 
    ComposeHumanName(json, 'defaultValueHumanName', TFhirHumanName(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirIdentifier) then 
    ComposeIdentifier(json, 'defaultValueIdentifier', TFhirIdentifier(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirMoney) then 
    ComposeMoney(json, 'defaultValueMoney', TFhirMoney(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirPeriod) then 
    ComposePeriod(json, 'defaultValuePeriod', TFhirPeriod(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirQuantity) then 
    ComposeQuantity(json, 'defaultValueQuantity', TFhirQuantity(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirRange) then 
    ComposeRange(json, 'defaultValueRange', TFhirRange(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirRatio) then 
    ComposeRatio(json, 'defaultValueRatio', TFhirRatio(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirReference) then 
    ComposeReference(json, 'defaultValueReference', TFhirReference(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirSampledData) then 
    ComposeSampledData(json, 'defaultValueSampledData', TFhirSampledData(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirSignature) then 
    ComposeSignature(json, 'defaultValueSignature', TFhirSignature(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirTiming) then 
    ComposeTiming(json, 'defaultValueTiming', TFhirTiming(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirMeta) then 
    ComposeMeta(json, 'defaultValueMeta', TFhirMeta(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'defaultValueBase64Binary', TFhirBase64Binary(elem.defaultValue), false);
    ComposeBase64BinaryProps(json, 'defaultValueBase64Binary', TFhirBase64Binary(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'defaultValueBoolean', TFhirBoolean(elem.defaultValue), false);
    ComposeBooleanProps(json, 'defaultValueBoolean', TFhirBoolean(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDate) then 
  begin
    ComposeDateValue(json, 'defaultValueDate', TFhirDate(elem.defaultValue), false);
    ComposeDateProps(json, 'defaultValueDate', TFhirDate(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'defaultValueDateTime', TFhirDateTime(elem.defaultValue), false);
    ComposeDateTimeProps(json, 'defaultValueDateTime', TFhirDateTime(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'defaultValueDecimal', TFhirDecimal(elem.defaultValue), false);
    ComposeDecimalProps(json, 'defaultValueDecimal', TFhirDecimal(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'defaultValueInstant', TFhirInstant(elem.defaultValue), false);
    ComposeInstantProps(json, 'defaultValueInstant', TFhirInstant(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'defaultValueInteger', TFhirInteger(elem.defaultValue), false);
    ComposeIntegerProps(json, 'defaultValueInteger', TFhirInteger(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirString) then 
  begin
    ComposeStringValue(json, 'defaultValueString', TFhirString(elem.defaultValue), false);
    ComposeStringProps(json, 'defaultValueString', TFhirString(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'defaultValueTime', TFhirTime(elem.defaultValue), false);
    ComposeTimeProps(json, 'defaultValueTime', TFhirTime(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirUri) then 
  begin
    ComposeUriValue(json, 'defaultValueUri', TFhirUri(elem.defaultValue), false);
    ComposeUriProps(json, 'defaultValueUri', TFhirUri(elem.defaultValue), false);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownValue(json, 'meaningWhenMissing', elem.meaningWhenMissingElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdownProps(json, 'meaningWhenMissing', elem.meaningWhenMissingElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'orderMeaning', elem.orderMeaningElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'orderMeaning', elem.orderMeaningElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'fixedCode', TFhirCode(elem.fixed), false);
    ComposeCodeProps(json, 'fixedCode', TFhirCode(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirId) then 
  begin
    ComposeIdValue(json, 'fixedId', TFhirId(elem.fixed), false);
    ComposeIdProps(json, 'fixedId', TFhirId(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'fixedMarkdown', TFhirMarkdown(elem.fixed), false);
    ComposeMarkdownProps(json, 'fixedMarkdown', TFhirMarkdown(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirOid) then 
  begin
    ComposeOidValue(json, 'fixedOid', TFhirOid(elem.fixed), false);
    ComposeOidProps(json, 'fixedOid', TFhirOid(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'fixedPositiveInt', TFhirPositiveInt(elem.fixed), false);
    ComposePositiveIntProps(json, 'fixedPositiveInt', TFhirPositiveInt(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'fixedUnsignedInt', TFhirUnsignedInt(elem.fixed), false);
    ComposeUnsignedIntProps(json, 'fixedUnsignedInt', TFhirUnsignedInt(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirAddress) then 
    ComposeAddress(json, 'fixedAddress', TFhirAddress(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirAge) then 
    ComposeAge(json, 'fixedAge', TFhirAge(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirAnnotation) then 
    ComposeAnnotation(json, 'fixedAnnotation', TFhirAnnotation(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirAttachment) then 
    ComposeAttachment(json, 'fixedAttachment', TFhirAttachment(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'fixedCodeableConcept', TFhirCodeableConcept(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirCoding) then 
    ComposeCoding(json, 'fixedCoding', TFhirCoding(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirContactPoint) then 
    ComposeContactPoint(json, 'fixedContactPoint', TFhirContactPoint(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirCount) then 
    ComposeCount(json, 'fixedCount', TFhirCount(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDistance) then 
    ComposeDistance(json, 'fixedDistance', TFhirDistance(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDuration) then 
    ComposeDuration(json, 'fixedDuration', TFhirDuration(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirHumanName) then 
    ComposeHumanName(json, 'fixedHumanName', TFhirHumanName(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirIdentifier) then 
    ComposeIdentifier(json, 'fixedIdentifier', TFhirIdentifier(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirMoney) then 
    ComposeMoney(json, 'fixedMoney', TFhirMoney(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirPeriod) then 
    ComposePeriod(json, 'fixedPeriod', TFhirPeriod(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirQuantity) then 
    ComposeQuantity(json, 'fixedQuantity', TFhirQuantity(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirRange) then 
    ComposeRange(json, 'fixedRange', TFhirRange(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirRatio) then 
    ComposeRatio(json, 'fixedRatio', TFhirRatio(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirReference) then 
    ComposeReference(json, 'fixedReference', TFhirReference(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirSampledData) then 
    ComposeSampledData(json, 'fixedSampledData', TFhirSampledData(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirSignature) then 
    ComposeSignature(json, 'fixedSignature', TFhirSignature(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirTiming) then 
    ComposeTiming(json, 'fixedTiming', TFhirTiming(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirMeta) then 
    ComposeMeta(json, 'fixedMeta', TFhirMeta(elem.fixed)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'fixedBase64Binary', TFhirBase64Binary(elem.fixed), false);
    ComposeBase64BinaryProps(json, 'fixedBase64Binary', TFhirBase64Binary(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'fixedBoolean', TFhirBoolean(elem.fixed), false);
    ComposeBooleanProps(json, 'fixedBoolean', TFhirBoolean(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDate) then 
  begin
    ComposeDateValue(json, 'fixedDate', TFhirDate(elem.fixed), false);
    ComposeDateProps(json, 'fixedDate', TFhirDate(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'fixedDateTime', TFhirDateTime(elem.fixed), false);
    ComposeDateTimeProps(json, 'fixedDateTime', TFhirDateTime(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'fixedDecimal', TFhirDecimal(elem.fixed), false);
    ComposeDecimalProps(json, 'fixedDecimal', TFhirDecimal(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'fixedInstant', TFhirInstant(elem.fixed), false);
    ComposeInstantProps(json, 'fixedInstant', TFhirInstant(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'fixedInteger', TFhirInteger(elem.fixed), false);
    ComposeIntegerProps(json, 'fixedInteger', TFhirInteger(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirString) then 
  begin
    ComposeStringValue(json, 'fixedString', TFhirString(elem.fixed), false);
    ComposeStringProps(json, 'fixedString', TFhirString(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'fixedTime', TFhirTime(elem.fixed), false);
    ComposeTimeProps(json, 'fixedTime', TFhirTime(elem.fixed), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirUri) then 
  begin
    ComposeUriValue(json, 'fixedUri', TFhirUri(elem.fixed), false);
    ComposeUriProps(json, 'fixedUri', TFhirUri(elem.fixed), false);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'patternCode', TFhirCode(elem.pattern), false);
    ComposeCodeProps(json, 'patternCode', TFhirCode(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirId) then 
  begin
    ComposeIdValue(json, 'patternId', TFhirId(elem.pattern), false);
    ComposeIdProps(json, 'patternId', TFhirId(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'patternMarkdown', TFhirMarkdown(elem.pattern), false);
    ComposeMarkdownProps(json, 'patternMarkdown', TFhirMarkdown(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirOid) then 
  begin
    ComposeOidValue(json, 'patternOid', TFhirOid(elem.pattern), false);
    ComposeOidProps(json, 'patternOid', TFhirOid(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'patternPositiveInt', TFhirPositiveInt(elem.pattern), false);
    ComposePositiveIntProps(json, 'patternPositiveInt', TFhirPositiveInt(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'patternUnsignedInt', TFhirUnsignedInt(elem.pattern), false);
    ComposeUnsignedIntProps(json, 'patternUnsignedInt', TFhirUnsignedInt(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirAddress) then 
    ComposeAddress(json, 'patternAddress', TFhirAddress(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirAge) then 
    ComposeAge(json, 'patternAge', TFhirAge(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirAnnotation) then 
    ComposeAnnotation(json, 'patternAnnotation', TFhirAnnotation(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirAttachment) then 
    ComposeAttachment(json, 'patternAttachment', TFhirAttachment(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'patternCodeableConcept', TFhirCodeableConcept(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirCoding) then 
    ComposeCoding(json, 'patternCoding', TFhirCoding(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirContactPoint) then 
    ComposeContactPoint(json, 'patternContactPoint', TFhirContactPoint(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirCount) then 
    ComposeCount(json, 'patternCount', TFhirCount(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDistance) then 
    ComposeDistance(json, 'patternDistance', TFhirDistance(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDuration) then 
    ComposeDuration(json, 'patternDuration', TFhirDuration(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirHumanName) then 
    ComposeHumanName(json, 'patternHumanName', TFhirHumanName(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirIdentifier) then 
    ComposeIdentifier(json, 'patternIdentifier', TFhirIdentifier(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirMoney) then 
    ComposeMoney(json, 'patternMoney', TFhirMoney(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirPeriod) then 
    ComposePeriod(json, 'patternPeriod', TFhirPeriod(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirQuantity) then 
    ComposeQuantity(json, 'patternQuantity', TFhirQuantity(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirRange) then 
    ComposeRange(json, 'patternRange', TFhirRange(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirRatio) then 
    ComposeRatio(json, 'patternRatio', TFhirRatio(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirReference) then 
    ComposeReference(json, 'patternReference', TFhirReference(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirSampledData) then 
    ComposeSampledData(json, 'patternSampledData', TFhirSampledData(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirSignature) then 
    ComposeSignature(json, 'patternSignature', TFhirSignature(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirTiming) then 
    ComposeTiming(json, 'patternTiming', TFhirTiming(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirMeta) then 
    ComposeMeta(json, 'patternMeta', TFhirMeta(elem.pattern)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'patternBase64Binary', TFhirBase64Binary(elem.pattern), false);
    ComposeBase64BinaryProps(json, 'patternBase64Binary', TFhirBase64Binary(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'patternBoolean', TFhirBoolean(elem.pattern), false);
    ComposeBooleanProps(json, 'patternBoolean', TFhirBoolean(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDate) then 
  begin
    ComposeDateValue(json, 'patternDate', TFhirDate(elem.pattern), false);
    ComposeDateProps(json, 'patternDate', TFhirDate(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'patternDateTime', TFhirDateTime(elem.pattern), false);
    ComposeDateTimeProps(json, 'patternDateTime', TFhirDateTime(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'patternDecimal', TFhirDecimal(elem.pattern), false);
    ComposeDecimalProps(json, 'patternDecimal', TFhirDecimal(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'patternInstant', TFhirInstant(elem.pattern), false);
    ComposeInstantProps(json, 'patternInstant', TFhirInstant(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'patternInteger', TFhirInteger(elem.pattern), false);
    ComposeIntegerProps(json, 'patternInteger', TFhirInteger(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirString) then 
  begin
    ComposeStringValue(json, 'patternString', TFhirString(elem.pattern), false);
    ComposeStringProps(json, 'patternString', TFhirString(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'patternTime', TFhirTime(elem.pattern), false);
    ComposeTimeProps(json, 'patternTime', TFhirTime(elem.pattern), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirUri) then 
  begin
    ComposeUriValue(json, 'patternUri', TFhirUri(elem.pattern), false);
    ComposeUriProps(json, 'patternUri', TFhirUri(elem.pattern), false);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.exampleList.Count > 0) then
  begin
    json.valueArray('example');
    for i := 0 to elem.exampleList.Count - 1 do
      ComposeElementDefinitionExample(json, '', elem.exampleList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'minValuePositiveInt', TFhirPositiveInt(elem.minValue), false);
    ComposePositiveIntProps(json, 'minValuePositiveInt', TFhirPositiveInt(elem.minValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'minValueUnsignedInt', TFhirUnsignedInt(elem.minValue), false);
    ComposeUnsignedIntProps(json, 'minValueUnsignedInt', TFhirUnsignedInt(elem.minValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirQuantity) then 
    ComposeQuantity(json, 'minValueQuantity', TFhirQuantity(elem.minValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirDate) then 
  begin
    ComposeDateValue(json, 'minValueDate', TFhirDate(elem.minValue), false);
    ComposeDateProps(json, 'minValueDate', TFhirDate(elem.minValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'minValueDateTime', TFhirDateTime(elem.minValue), false);
    ComposeDateTimeProps(json, 'minValueDateTime', TFhirDateTime(elem.minValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'minValueInstant', TFhirInstant(elem.minValue), false);
    ComposeInstantProps(json, 'minValueInstant', TFhirInstant(elem.minValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'minValueTime', TFhirTime(elem.minValue), false);
    ComposeTimeProps(json, 'minValueTime', TFhirTime(elem.minValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'minValueDecimal', TFhirDecimal(elem.minValue), false);
    ComposeDecimalProps(json, 'minValueDecimal', TFhirDecimal(elem.minValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'minValueInteger', TFhirInteger(elem.minValue), false);
    ComposeIntegerProps(json, 'minValueInteger', TFhirInteger(elem.minValue), false);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'maxValuePositiveInt', TFhirPositiveInt(elem.maxValue), false);
    ComposePositiveIntProps(json, 'maxValuePositiveInt', TFhirPositiveInt(elem.maxValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'maxValueUnsignedInt', TFhirUnsignedInt(elem.maxValue), false);
    ComposeUnsignedIntProps(json, 'maxValueUnsignedInt', TFhirUnsignedInt(elem.maxValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirQuantity) then 
    ComposeQuantity(json, 'maxValueQuantity', TFhirQuantity(elem.maxValue)) 
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirDate) then 
  begin
    ComposeDateValue(json, 'maxValueDate', TFhirDate(elem.maxValue), false);
    ComposeDateProps(json, 'maxValueDate', TFhirDate(elem.maxValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'maxValueDateTime', TFhirDateTime(elem.maxValue), false);
    ComposeDateTimeProps(json, 'maxValueDateTime', TFhirDateTime(elem.maxValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'maxValueInstant', TFhirInstant(elem.maxValue), false);
    ComposeInstantProps(json, 'maxValueInstant', TFhirInstant(elem.maxValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'maxValueTime', TFhirTime(elem.maxValue), false);
    ComposeTimeProps(json, 'maxValueTime', TFhirTime(elem.maxValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'maxValueDecimal', TFhirDecimal(elem.maxValue), false);
    ComposeDecimalProps(json, 'maxValueDecimal', TFhirDecimal(elem.maxValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'maxValueInteger', TFhirInteger(elem.maxValue), false);
    ComposeIntegerProps(json, 'maxValueInteger', TFhirInteger(elem.maxValue), false);
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIntegerValue(json, 'maxLength', elem.maxLengthElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIntegerProps(json, 'maxLength', elem.maxLengthElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.conditionList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.conditionList.Count - 1 do
    begin
      ext := ext or ((elem.conditionList[i].id <> '') or (elem.conditionList[i].hasExtensionList) {no-comments or (elem.conditionList[i].hasComments)});
      val := val or (elem.conditionList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('condition');
      for i := 0 to elem.conditionList.Count - 1 do
        ComposeIdValue(json, '',elem.conditionList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_condition');
      for i := 0 to elem.conditionList.Count - 1 do
        ComposeIdProps(json, '',elem.conditionList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.constraintList.Count > 0) then
  begin
    json.valueArray('constraint');
    for i := 0 to elem.constraintList.Count - 1 do
      ComposeElementDefinitionConstraint(json, '', elem.constraintList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (not isCanonical or (elem.mustSupport <> false)) then
    ComposeBooleanValue(json, 'mustSupport', elem.mustSupportElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (not isCanonical or (elem.mustSupport <> false)) then
    ComposeBooleanProps(json, 'mustSupport', elem.mustSupportElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (not isCanonical or (elem.isModifier <> false)) then
    ComposeBooleanValue(json, 'isModifier', elem.isModifierElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (not isCanonical or (elem.isModifier <> false)) then
    ComposeBooleanProps(json, 'isModifier', elem.isModifierElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (not isCanonical or (elem.isSummary <> false)) then
    ComposeBooleanValue(json, 'isSummary', elem.isSummaryElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (not isCanonical or (elem.isSummary <> false)) then
    ComposeBooleanProps(json, 'isSummary', elem.isSummaryElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeElementDefinitionBinding(json, 'binding', elem.binding); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.mappingList.Count > 0) then
  begin
    json.valueArray('mapping');
    for i := 0 to elem.mappingList.Count - 1 do
      ComposeElementDefinitionMapping(json, '', elem.mappingList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTimingRepeat(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTimingRepeat(jsn)); {2}
end;

function TFHIRJsonParser.ParseTimingRepeat(jsn : TJsonObject) : TFhirTimingRepeat;
begin
  result := TFhirTimingRepeat.create;
  try
    ParseTimingRepeatProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTimingRepeatProperties(jsn : TJsonObject; result : TFhirTimingRepeat);
begin
    ParseElementProperties(jsn, result);
    if jsn.has('boundsDuration') {a4} then
      result.bounds := ParseDuration(jsn.vObj['boundsDuration']);
    if jsn.has('boundsRange') {a4} then
      result.bounds := ParseRange(jsn.vObj['boundsRange']);
    if jsn.has('boundsPeriod') {a4} then
      result.bounds := ParsePeriod(jsn.vObj['boundsPeriod']);
    if jsn.has('count') or jsn.has('_count') then
        result.countElement := parseInteger(jsn.node['count'], jsn.vObj['_count']);{q}
    if jsn.has('countMax') or jsn.has('_countMax') then
        result.countMaxElement := parseInteger(jsn.node['countMax'], jsn.vObj['_countMax']);{q}
    if jsn.has('duration') or jsn.has('_duration') then
        result.durationElement := parseDecimal(jsn.node['duration'], jsn.vObj['_duration']);{q}
    if jsn.has('durationMax') or jsn.has('_durationMax') then
        result.durationMaxElement := parseDecimal(jsn.node['durationMax'], jsn.vObj['_durationMax']);{q}
    if jsn.has('durationUnit') or jsn.has('_durationUnit')  then
      result.durationUnitElement := parseEnum(jsn.path+'/durationUnit', jsn.node['durationUnit'], jsn.vObj['_durationUnit'], CODES_TFhirUnitsOfTimeEnum, SYSTEMS_TFhirUnitsOfTimeEnum);
    if jsn.has('frequency') or jsn.has('_frequency') then
        result.frequencyElement := parseInteger(jsn.node['frequency'], jsn.vObj['_frequency']);{q}
    if jsn.has('frequencyMax') or jsn.has('_frequencyMax') then
        result.frequencyMaxElement := parseInteger(jsn.node['frequencyMax'], jsn.vObj['_frequencyMax']);{q}
    if jsn.has('period') or jsn.has('_period') then
        result.periodElement := parseDecimal(jsn.node['period'], jsn.vObj['_period']);{q}
    if jsn.has('periodMax') or jsn.has('_periodMax') then
        result.periodMaxElement := parseDecimal(jsn.node['periodMax'], jsn.vObj['_periodMax']);{q}
    if jsn.has('periodUnit') or jsn.has('_periodUnit')  then
      result.periodUnitElement := parseEnum(jsn.path+'/periodUnit', jsn.node['periodUnit'], jsn.vObj['_periodUnit'], CODES_TFhirUnitsOfTimeEnum, SYSTEMS_TFhirUnitsOfTimeEnum);
    if jsn.has('dayOfWeek') or jsn.has('_dayOfWeek') then
      iterateEnumArray(jsn.vArr['dayOfWeek'], jsn.vArr['_dayOfWeek'], jsn.path+'/dayOfWeek', result.dayOfWeekList, parseEnum, CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum);
      if jsn.has('timeOfDay') or jsn.has('_timeOfDay') then
      iteratePrimitiveArray(jsn.vArr['timeOfDay'], jsn.vArr['_timeOfDay'], result.timeOfDayList, parseTime);
    if jsn.has('when') or jsn.has('_when') then
      iterateEnumArray(jsn.vArr['when'], jsn.vArr['_when'], jsn.path+'/when', result.whenList, parseEnum, CODES_TFhirEventTimingEnum, SYSTEMS_TFhirEventTimingEnum);
    if jsn.has('offset') or jsn.has('_offset') then
        result.offsetElement := parseUnsignedInt(jsn.node['offset'], jsn.vObj['_offset']);{q}
end;

procedure TFHIRJsonComposer.ComposeTimingRepeat(json : TJSONWriter; name : string; elem : TFhirTimingRepeat; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.bounds is TFhirDuration) then 
    ComposeDuration(json, 'boundsDuration', TFhirDuration(elem.bounds)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.bounds is TFhirRange) then 
    ComposeRange(json, 'boundsRange', TFhirRange(elem.bounds)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.bounds is TFhirPeriod) then 
    ComposePeriod(json, 'boundsPeriod', TFhirPeriod(elem.bounds)) ;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'count', elem.countElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'count', elem.countElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'countMax', elem.countMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'countMax', elem.countMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'duration', elem.durationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'duration', elem.durationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'durationMax', elem.durationMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'durationMax', elem.durationMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'durationUnit', elem.DurationUnitElement, CODES_TFhirUnitsOfTimeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumProps(json, 'durationUnit', elem.DurationUnitElement, CODES_TFhirUnitsOfTimeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.frequency <> '1')) then
    ComposeIntegerValue(json, 'frequency', elem.frequencyElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.frequency <> '1')) then
    ComposeIntegerProps(json, 'frequency', elem.frequencyElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'frequencyMax', elem.frequencyMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'frequencyMax', elem.frequencyMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'period', elem.periodElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'period', elem.periodElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'periodMax', elem.periodMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'periodMax', elem.periodMaxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'periodUnit', elem.PeriodUnitElement, CODES_TFhirUnitsOfTimeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumProps(json, 'periodUnit', elem.PeriodUnitElement, CODES_TFhirUnitsOfTimeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.dayOfWeekList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.dayOfWeekList.Count - 1 do
    begin
      val := val or (elem.dayOfWeekList[i].hasPrimitiveValue);
      ext := ext or ((elem.dayOfWeekList[i].id <> '') or (elem.dayOfWeekList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('dayOfWeek');
      for i := 0 to elem.dayOfWeekList.Count - 1 do
        ComposeEnumValue(json, '', elem.dayOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_dayOfWeek');
      for i := 0 to elem.dayOfWeekList.Count - 1 do
        ComposeEnumProps(json, '', elem.dayOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.timeOfDayList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.timeOfDayList.Count - 1 do
    begin
      ext := ext or ((elem.timeOfDayList[i].id <> '') or (elem.timeOfDayList[i].hasExtensionList) {no-comments or (elem.timeOfDayList[i].hasComments)});
      val := val or (elem.timeOfDayList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('timeOfDay');
      for i := 0 to elem.timeOfDayList.Count - 1 do
        ComposeTimeValue(json, '',elem.timeOfDayList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_timeOfDay');
      for i := 0 to elem.timeOfDayList.Count - 1 do
        ComposeTimeProps(json, '',elem.timeOfDayList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.whenList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.whenList.Count - 1 do
    begin
      val := val or (elem.whenList[i].hasPrimitiveValue);
      ext := ext or ((elem.whenList[i].id <> '') or (elem.whenList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('when');
      for i := 0 to elem.whenList.Count - 1 do
        ComposeEnumValue(json, '', elem.whenList[i], CODES_TFhirEventTimingEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_when');
      for i := 0 to elem.whenList.Count - 1 do
        ComposeEnumProps(json, '', elem.whenList[i], CODES_TFhirEventTimingEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'offset', elem.offsetElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'offset', elem.offsetElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTiming(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTiming(jsn)); {2}
end;

function TFHIRJsonParser.ParseTiming(jsn : TJsonObject) : TFhirTiming;
begin
  result := TFhirTiming.create;
  try
    ParseTimingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTimingProperties(jsn : TJsonObject; result : TFhirTiming);
begin
    ParseElementProperties(jsn, result);
      if jsn.has('event') or jsn.has('_event') then
      iteratePrimitiveArray(jsn.vArr['event'], jsn.vArr['_event'], result.eventList, parseDateTime);
    if jsn.has('repeat') then
        result.repeat_ := ParseTimingRepeat(jsn.vObj['repeat']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTiming(json : TJSONWriter; name : string; elem : TFhirTiming; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeElement(json, '', elem, true);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.eventList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.eventList.Count - 1 do
    begin
      ext := ext or ((elem.eventList[i].id <> '') or (elem.eventList[i].hasExtensionList) {no-comments or (elem.eventList[i].hasComments)});
      val := val or (elem.eventList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('event');
      for i := 0 to elem.eventList.Count - 1 do
        ComposeDateTimeValue(json, '',elem.eventList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_event');
      for i := 0 to elem.eventList.Count - 1 do
        ComposeDateTimeProps(json, '',elem.eventList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeTimingRepeat(json, 'repeat', elem.repeat_); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCount(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCount(jsn)); {2}
end;

function TFHIRJsonParser.ParseCount(jsn : TJsonObject) : TFhirCount;
begin
  result := TFhirCount.create;
  try
    ParseCountProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCountProperties(jsn : TJsonObject; result : TFhirCount);
begin
    ParseQuantityProperties(jsn, result);
end;

procedure TFHIRJsonComposer.ComposeCount(json : TJSONWriter; name : string; elem : TFhirCount; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeQuantity(json, '', elem, true);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMoney(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMoney(jsn)); {2}
end;

function TFHIRJsonParser.ParseMoney(jsn : TJsonObject) : TFhirMoney;
begin
  result := TFhirMoney.create;
  try
    ParseMoneyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMoneyProperties(jsn : TJsonObject; result : TFhirMoney);
begin
    ParseQuantityProperties(jsn, result);
end;

procedure TFHIRJsonComposer.ComposeMoney(json : TJSONWriter; name : string; elem : TFhirMoney; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeQuantity(json, '', elem, true);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAge(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAge(jsn)); {2}
end;

function TFHIRJsonParser.ParseAge(jsn : TJsonObject) : TFhirAge;
begin
  result := TFhirAge.create;
  try
    ParseAgeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAgeProperties(jsn : TJsonObject; result : TFhirAge);
begin
    ParseQuantityProperties(jsn, result);
end;

procedure TFHIRJsonComposer.ComposeAge(json : TJSONWriter; name : string; elem : TFhirAge; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeQuantity(json, '', elem, true);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDistance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDistance(jsn)); {2}
end;

function TFHIRJsonParser.ParseDistance(jsn : TJsonObject) : TFhirDistance;
begin
  result := TFhirDistance.create;
  try
    ParseDistanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDistanceProperties(jsn : TJsonObject; result : TFhirDistance);
begin
    ParseQuantityProperties(jsn, result);
end;

procedure TFHIRJsonComposer.ComposeDistance(json : TJSONWriter; name : string; elem : TFhirDistance; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeQuantity(json, '', elem, true);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDuration(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDuration(jsn)); {2}
end;

function TFHIRJsonParser.ParseDuration(jsn : TJsonObject) : TFhirDuration;
begin
  result := TFhirDuration.create;
  try
    ParseDurationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDurationProperties(jsn : TJsonObject; result : TFhirDuration);
begin
    ParseQuantityProperties(jsn, result);
end;

procedure TFHIRJsonComposer.ComposeDuration(json : TJSONWriter; name : string; elem : TFhirDuration; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeQuantity(json, '', elem, true);
  if not noObj then json.finishObject;
end;

{$IFDEF FHIR_ACCOUNT}
procedure TFHIRJsonParser.ParseAccountCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAccountCoverage(jsn)); {2}
end;

function TFHIRJsonParser.ParseAccountCoverage(jsn : TJsonObject) : TFhirAccountCoverage;
begin
  result := TFhirAccountCoverage.create;
  try
    ParseAccountCoverageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAccountCoverageProperties(jsn : TJsonObject; result : TFhirAccountCoverage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('coverage') then
        result.coverage := ParseReference{TFhirCoverage}(jsn.vObj['coverage']);{q3}
    if jsn.has('priority') or jsn.has('_priority') then
        result.priorityElement := parsePositiveInt(jsn.node['priority'], jsn.vObj['_priority']);{q}
end;

procedure TFHIRJsonComposer.ComposeAccountCoverage(json : TJSONWriter; name : string; elem : TFhirAccountCoverage; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{TFhirCoverage}(json, 'coverage', elem.coverage); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'priority', elem.priorityElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'priority', elem.priorityElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAccountGuarantor(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAccountGuarantor(jsn)); {2}
end;

function TFHIRJsonParser.ParseAccountGuarantor(jsn : TJsonObject) : TFhirAccountGuarantor;
begin
  result := TFhirAccountGuarantor.create;
  try
    ParseAccountGuarantorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAccountGuarantorProperties(jsn : TJsonObject; result : TFhirAccountGuarantor);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('party') then
        result.party := ParseReference{Resource}(jsn.vObj['party']);{q3}
    if jsn.has('onHold') or jsn.has('_onHold') then
        result.onHoldElement := parseBoolean(jsn.node['onHold'], jsn.vObj['_onHold']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeAccountGuarantor(json : TJSONWriter; name : string; elem : TFhirAccountGuarantor; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'party', elem.party); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'onHold', elem.onHoldElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'onHold', elem.onHoldElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAccount(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAccount(jsn)); {2}
end;

function TFHIRJsonParser.ParseAccount(jsn : TJsonObject) : TFhirAccount;
begin
  result := TFhirAccount.create;
  try
    ParseAccountProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAccountProperties(jsn : TJsonObject; result : TFhirAccount);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirAccountStatusEnum, SYSTEMS_TFhirAccountStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('active') then
        result.active := ParsePeriod(jsn.vObj['active']);{q3}
    if jsn.has('balance') then
        result.balance := ParseMoney(jsn.vObj['balance']);{q3}
    if jsn.has('coverage') then
      iterateArray(jsn.vArr['coverage'], result.coverageList, parseAccountCoverage);
    if jsn.has('owner') then
        result.owner := ParseReference{TFhirOrganization}(jsn.vObj['owner']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('guarantor') then
      iterateArray(jsn.vArr['guarantor'], result.guarantorList, parseAccountGuarantor);
end;

procedure TFHIRJsonComposer.ComposeAccount(json : TJSONWriter; name : string; elem : TFhirAccount; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirAccountStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirAccountStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposePeriod(json, 'active', elem.active); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('balance') then
    ComposeMoney(json, 'balance', elem.balance); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('coverage') and (elem.coverageList.Count > 0) then
  begin
    json.valueArray('coverage');
    for i := 0 to elem.coverageList.Count - 1 do
      ComposeAccountCoverage(json, '', elem.coverageList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('owner') then
    ComposeReference{TFhirOrganization}(json, 'owner', elem.owner); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('guarantor') and (elem.guarantorList.Count > 0) then
  begin
    json.valueArray('guarantor');
    for i := 0 to elem.guarantorList.Count - 1 do
      ComposeAccountGuarantor(json, '', elem.guarantorList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
procedure TFHIRJsonParser.ParseActivityDefinitionParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseActivityDefinitionParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParseActivityDefinitionParticipant(jsn : TJsonObject) : TFhirActivityDefinitionParticipant;
begin
  result := TFhirActivityDefinitionParticipant.create;
  try
    ParseActivityDefinitionParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseActivityDefinitionParticipantProperties(jsn : TJsonObject; result : TFhirActivityDefinitionParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirActionParticipantTypeEnum, SYSTEMS_TFhirActionParticipantTypeEnum);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
end;

procedure TFHIRJsonComposer.ComposeActivityDefinitionParticipant(json : TJSONWriter; name : string; elem : TFhirActivityDefinitionParticipant; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirActionParticipantTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirActionParticipantTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseActivityDefinitionDynamicValue(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseActivityDefinitionDynamicValue(jsn)); {2}
end;

function TFHIRJsonParser.ParseActivityDefinitionDynamicValue(jsn : TJsonObject) : TFhirActivityDefinitionDynamicValue;
begin
  result := TFhirActivityDefinitionDynamicValue.create;
  try
    ParseActivityDefinitionDynamicValueProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseActivityDefinitionDynamicValueProperties(jsn : TJsonObject; result : TFhirActivityDefinitionDynamicValue);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);{q}
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := parseString(jsn.node['language'], jsn.vObj['_language']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);{q}
end;

procedure TFHIRJsonComposer.ComposeActivityDefinitionDynamicValue(json : TJSONWriter; name : string; elem : TFhirActivityDefinitionDynamicValue; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseActivityDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseActivityDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseActivityDefinition(jsn : TJsonObject) : TFhirActivityDefinition;
begin
  result := TFhirActivityDefinition.create;
  try
    ParseActivityDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseActivityDefinitionProperties(jsn : TJsonObject; result : TFhirActivityDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('usage') or jsn.has('_usage') then
        result.usageElement := parseString(jsn.node['usage'], jsn.vObj['_usage']);{q}
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        result.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);{q}
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        result.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);{q}
    if jsn.has('effectivePeriod') then
        result.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);{q3}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseCodeableConcept);
    if jsn.has('contributor') then
      iterateArray(jsn.vArr['contributor'], result.contributorList, parseContributor);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], result.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('library') then
      iterateArray(jsn.vArr['library'], result.library_List, parseReference{TFhirLibrary});
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('timingTiming') {a4} then
      result.timing := ParseTiming(jsn.vObj['timingTiming']);
    if jsn.has('timingPeriod') {a4} then
      result.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingRange') {a4} then
      result.timing := ParseRange(jsn.vObj['timingRange']);
    if jsn.has('timingDateTime') or jsn.has('_timingDateTime') then
      result.timing := parseDateTime(jsn.node['timingDateTime'], jsn.vObj['_timingDateTime']);
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseActivityDefinitionParticipant);
    if jsn.has('productReference') {a3} then
      result.product := ParseReference(jsn.vObj['productReference']);
    if jsn.has('productCodeableConcept') {a4} then
      result.product := ParseCodeableConcept(jsn.vObj['productCodeableConcept']);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('dosage') then
      iterateArray(jsn.vArr['dosage'], result.dosageList, parseDosage);
    if jsn.has('bodySite') then
      iterateArray(jsn.vArr['bodySite'], result.bodySiteList, parseCodeableConcept);
    if jsn.has('transform') then
        result.transform := ParseReference{TFhirStructureMap}(jsn.vObj['transform']);{q3}
    if jsn.has('dynamicValue') then
      iterateArray(jsn.vArr['dynamicValue'], result.dynamicValueList, parseActivityDefinitionDynamicValue);
end;

procedure TFHIRJsonComposer.ComposeActivityDefinition(json : TJSONWriter; name : string; elem : TFhirActivityDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeStringValue(json, 'usage', elem.usageElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeStringProps(json, 'usage', elem.usageElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDateValue(json, 'approvalDate', elem.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDateProps(json, 'approvalDate', elem.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDateValue(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDateProps(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(json, 'effectivePeriod', elem.effectivePeriod); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('topic') and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.topicList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('contributor') and (elem.contributorList.Count > 0) then
  begin
    json.valueArray('contributor');
    for i := 0 to elem.contributorList.Count - 1 do
      ComposeContributor(json, '', elem.contributorList[i]); {z - Contributor}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') and (elem.relatedArtifactList.Count > 0) then
  begin
    json.valueArray('relatedArtifact');
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.relatedArtifactList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('library_') and (elem.library_List.Count > 0) then
  begin
    json.valueArray('library');
    for i := 0 to elem.library_List.Count - 1 do
      ComposeReference{TFhirLibrary}(json, '', elem.library_List[i]); {z - Reference(Library)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('kind') then
    ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirResourceTypesEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('kind') then
    ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirResourceTypesEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('code') then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirTiming) then 
    ComposeTiming(json, 'timingTiming', TFhirTiming(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirRange) then 
    ComposeRange(json, 'timingRange', TFhirRange(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
    ComposeDateTimeProps(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('participant') and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeActivityDefinitionParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.product is TFhirReference) then
    ComposeReference(json, 'productReference', TFhirReference(elem.product))
  else if (SummaryOption in [soFull, soData]) and (elem.product is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'productCodeableConcept', TFhirCodeableConcept(elem.product)) ;
  if (SummaryOption in [soFull, soData]) and doCompose('quantity') then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('dosage') and (elem.dosageList.Count > 0) then
  begin
    json.valueArray('dosage');
    for i := 0 to elem.dosageList.Count - 1 do
      ComposeDosage(json, '', elem.dosageList[i]); {z - Dosage}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('bodySite') and (elem.bodySiteList.Count > 0) then
  begin
    json.valueArray('bodySite');
    for i := 0 to elem.bodySiteList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.bodySiteList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('transform') then
    ComposeReference{TFhirStructureMap}(json, 'transform', elem.transform); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('dynamicValue') and (elem.dynamicValueList.Count > 0) then
  begin
    json.valueArray('dynamicValue');
    for i := 0 to elem.dynamicValueList.Count - 1 do
      ComposeActivityDefinitionDynamicValue(json, '', elem.dynamicValueList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
procedure TFHIRJsonParser.ParseAdverseEventSuspectEntity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAdverseEventSuspectEntity(jsn)); {2}
end;

function TFHIRJsonParser.ParseAdverseEventSuspectEntity(jsn : TJsonObject) : TFhirAdverseEventSuspectEntity;
begin
  result := TFhirAdverseEventSuspectEntity.create;
  try
    ParseAdverseEventSuspectEntityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAdverseEventSuspectEntityProperties(jsn : TJsonObject; result : TFhirAdverseEventSuspectEntity);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('instance') then
        result.instance := ParseReference{Resource}(jsn.vObj['instance']);{q3}
    if jsn.has('causality') or jsn.has('_causality')  then
      result.causalityElement := parseEnum(jsn.path+'/causality', jsn.node['causality'], jsn.vObj['_causality'], CODES_TFhirAdverseEventCausalityEnum, SYSTEMS_TFhirAdverseEventCausalityEnum);
    if jsn.has('causalityAssessment') then
        result.causalityAssessment := ParseCodeableConcept(jsn.vObj['causalityAssessment']);{q3}
    if jsn.has('causalityProductRelatedness') or jsn.has('_causalityProductRelatedness') then
        result.causalityProductRelatednessElement := parseString(jsn.node['causalityProductRelatedness'], jsn.vObj['_causalityProductRelatedness']);{q}
    if jsn.has('causalityMethod') then
        result.causalityMethod := ParseCodeableConcept(jsn.vObj['causalityMethod']);{q3}
    if jsn.has('causalityAuthor') then
        result.causalityAuthor := ParseReference{Resource}(jsn.vObj['causalityAuthor']);{q3}
    if jsn.has('causalityResult') then
        result.causalityResult := ParseCodeableConcept(jsn.vObj['causalityResult']);{q3}
end;

procedure TFHIRJsonComposer.ComposeAdverseEventSuspectEntity(json : TJSONWriter; name : string; elem : TFhirAdverseEventSuspectEntity; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'instance', elem.instance); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'causality', elem.CausalityElement, CODES_TFhirAdverseEventCausalityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumProps(json, 'causality', elem.CausalityElement, CODES_TFhirAdverseEventCausalityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'causalityAssessment', elem.causalityAssessment); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'causalityProductRelatedness', elem.causalityProductRelatednessElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'causalityProductRelatedness', elem.causalityProductRelatednessElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'causalityMethod', elem.causalityMethod); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'causalityAuthor', elem.causalityAuthor); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'causalityResult', elem.causalityResult); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAdverseEvent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAdverseEvent(jsn)); {2}
end;

function TFHIRJsonParser.ParseAdverseEvent(jsn : TJsonObject) : TFhirAdverseEvent;
begin
  result := TFhirAdverseEvent.create;
  try
    ParseAdverseEventProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAdverseEventProperties(jsn : TJsonObject; result : TFhirAdverseEvent);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('category') or jsn.has('_category')  then
      result.categoryElement := parseEnum(jsn.path+'/category', jsn.node['category'], jsn.vObj['_category'], CODES_TFhirAdverseEventCategoryEnum, SYSTEMS_TFhirAdverseEventCategoryEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('reaction') then
      iterateArray(jsn.vArr['reaction'], result.reactionList, parseReference{TFhirCondition});
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('seriousness') then
        result.seriousness := ParseCodeableConcept(jsn.vObj['seriousness']);{q3}
    if jsn.has('outcome') then
        result.outcome := ParseCodeableConcept(jsn.vObj['outcome']);{q3}
    if jsn.has('recorder') then
        result.recorder := ParseReference{Resource}(jsn.vObj['recorder']);{q3}
    if jsn.has('eventParticipant') then
        result.eventParticipant := ParseReference{Resource}(jsn.vObj['eventParticipant']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('suspectEntity') then
      iterateArray(jsn.vArr['suspectEntity'], result.suspectEntityList, parseAdverseEventSuspectEntity);
    if jsn.has('subjectMedicalHistory') then
      iterateArray(jsn.vArr['subjectMedicalHistory'], result.subjectMedicalHistoryList, parseReference{Resource});
    if jsn.has('referenceDocument') then
      iterateArray(jsn.vArr['referenceDocument'], result.referenceDocumentList, parseReference{TFhirDocumentReference});
    if jsn.has('study') then
      iterateArray(jsn.vArr['study'], result.studyList, parseReference{TFhirResearchStudy});
end;

procedure TFHIRJsonComposer.ComposeAdverseEvent(json : TJSONWriter; name : string; elem : TFhirAdverseEvent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeEnumValue(json, 'category', elem.CategoryElement, CODES_TFhirAdverseEventCategoryEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeEnumProps(json, 'category', elem.CategoryElement, CODES_TFhirAdverseEventCategoryEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reaction') and (elem.reactionList.Count > 0) then
  begin
    json.valueArray('reaction');
    for i := 0 to elem.reactionList.Count - 1 do
      ComposeReference{TFhirCondition}(json, '', elem.reactionList[i]); {z - Reference(Condition)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('seriousness') then
    ComposeCodeableConcept(json, 'seriousness', elem.seriousness); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('outcome') then
    ComposeCodeableConcept(json, 'outcome', elem.outcome); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('recorder') then
    ComposeReference{Resource}(json, 'recorder', elem.recorder); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('eventParticipant') then
    ComposeReference{Resource}(json, 'eventParticipant', elem.eventParticipant); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('suspectEntity') and (elem.suspectEntityList.Count > 0) then
  begin
    json.valueArray('suspectEntity');
    for i := 0 to elem.suspectEntityList.Count - 1 do
      ComposeAdverseEventSuspectEntity(json, '', elem.suspectEntityList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subjectMedicalHistory') and (elem.subjectMedicalHistoryList.Count > 0) then
  begin
    json.valueArray('subjectMedicalHistory');
    for i := 0 to elem.subjectMedicalHistoryList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.subjectMedicalHistoryList[i]); {z - Reference(Condition|Observation|AllergyIntolerance|FamilyMemberHistory|Immunization|Procedure)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('referenceDocument') and (elem.referenceDocumentList.Count > 0) then
  begin
    json.valueArray('referenceDocument');
    for i := 0 to elem.referenceDocumentList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(json, '', elem.referenceDocumentList[i]); {z - Reference(DocumentReference)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('study') and (elem.studyList.Count > 0) then
  begin
    json.valueArray('study');
    for i := 0 to elem.studyList.Count - 1 do
      ComposeReference{TFhirResearchStudy}(json, '', elem.studyList[i]); {z - Reference(ResearchStudy)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
procedure TFHIRJsonParser.ParseAllergyIntoleranceReaction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAllergyIntoleranceReaction(jsn)); {2}
end;

function TFHIRJsonParser.ParseAllergyIntoleranceReaction(jsn : TJsonObject) : TFhirAllergyIntoleranceReaction;
begin
  result := TFhirAllergyIntoleranceReaction.create;
  try
    ParseAllergyIntoleranceReactionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAllergyIntoleranceReactionProperties(jsn : TJsonObject; result : TFhirAllergyIntoleranceReaction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('substance') then
        result.substance := ParseCodeableConcept(jsn.vObj['substance']);{q3}
    if jsn.has('manifestation') then
      iterateArray(jsn.vArr['manifestation'], result.manifestationList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('onset') or jsn.has('_onset') then
        result.onsetElement := parseDateTime(jsn.node['onset'], jsn.vObj['_onset']);{q}
    if jsn.has('severity') or jsn.has('_severity')  then
      result.severityElement := parseEnum(jsn.path+'/severity', jsn.node['severity'], jsn.vObj['_severity'], CODES_TFhirReactionEventSeverityEnum, SYSTEMS_TFhirReactionEventSeverityEnum);
    if jsn.has('exposureRoute') then
        result.exposureRoute := ParseCodeableConcept(jsn.vObj['exposureRoute']);{q3}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeAllergyIntoleranceReaction(json : TJSONWriter; name : string; elem : TFhirAllergyIntoleranceReaction; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'substance', elem.substance); {a}
  if (elem.manifestationList.Count > 0) then
  begin
    json.valueArray('manifestation');
    for i := 0 to elem.manifestationList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.manifestationList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'onset', elem.onsetElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'onset', elem.onsetElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'severity', elem.SeverityElement, CODES_TFhirReactionEventSeverityEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'severity', elem.SeverityElement, CODES_TFhirReactionEventSeverityEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'exposureRoute', elem.exposureRoute); {a}
  if (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAllergyIntolerance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAllergyIntolerance(jsn)); {2}
end;

function TFHIRJsonParser.ParseAllergyIntolerance(jsn : TJsonObject) : TFhirAllergyIntolerance;
begin
  result := TFhirAllergyIntolerance.create;
  try
    ParseAllergyIntoleranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAllergyIntoleranceProperties(jsn : TJsonObject; result : TFhirAllergyIntolerance);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('clinicalStatus') or jsn.has('_clinicalStatus')  then
      result.clinicalStatusElement := parseEnum(jsn.path+'/clinicalStatus', jsn.node['clinicalStatus'], jsn.vObj['_clinicalStatus'], CODES_TFhirAllergyClinicalStatusEnum, SYSTEMS_TFhirAllergyClinicalStatusEnum);
    if jsn.has('verificationStatus') or jsn.has('_verificationStatus')  then
      result.verificationStatusElement := parseEnum(jsn.path+'/verificationStatus', jsn.node['verificationStatus'], jsn.vObj['_verificationStatus'], CODES_TFhirAllergyVerificationStatusEnum, SYSTEMS_TFhirAllergyVerificationStatusEnum);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirAllergyIntoleranceTypeEnum, SYSTEMS_TFhirAllergyIntoleranceTypeEnum);
    if jsn.has('category') or jsn.has('_category') then
      iterateEnumArray(jsn.vArr['category'], jsn.vArr['_category'], jsn.path+'/category', result.categoryList, parseEnum, CODES_TFhirAllergyIntoleranceCategoryEnum, SYSTEMS_TFhirAllergyIntoleranceCategoryEnum);
    if jsn.has('criticality') or jsn.has('_criticality')  then
      result.criticalityElement := parseEnum(jsn.path+'/criticality', jsn.node['criticality'], jsn.vObj['_criticality'], CODES_TFhirAllergyIntoleranceCriticalityEnum, SYSTEMS_TFhirAllergyIntoleranceCriticalityEnum);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('onsetAge') {a4} then
      result.onset := ParseAge(jsn.vObj['onsetAge']);
    if jsn.has('onsetPeriod') {a4} then
      result.onset := ParsePeriod(jsn.vObj['onsetPeriod']);
    if jsn.has('onsetRange') {a4} then
      result.onset := ParseRange(jsn.vObj['onsetRange']);
    if jsn.has('onsetDateTime') or jsn.has('_onsetDateTime') then
      result.onset := parseDateTime(jsn.node['onsetDateTime'], jsn.vObj['_onsetDateTime']);
    if jsn.has('onsetString') or jsn.has('_onsetString') then
      result.onset := parseString(jsn.node['onsetString'], jsn.vObj['_onsetString']);
    if jsn.has('assertedDate') or jsn.has('_assertedDate') then
        result.assertedDateElement := parseDateTime(jsn.node['assertedDate'], jsn.vObj['_assertedDate']);{q}
    if jsn.has('recorder') then
        result.recorder := ParseReference{Resource}(jsn.vObj['recorder']);{q3}
    if jsn.has('asserter') then
        result.asserter := ParseReference{Resource}(jsn.vObj['asserter']);{q3}
    if jsn.has('lastOccurrence') or jsn.has('_lastOccurrence') then
        result.lastOccurrenceElement := parseDateTime(jsn.node['lastOccurrence'], jsn.vObj['_lastOccurrence']);{q}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('reaction') then
      iterateArray(jsn.vArr['reaction'], result.reactionList, parseAllergyIntoleranceReaction);
end;

procedure TFHIRJsonComposer.ComposeAllergyIntolerance(json : TJSONWriter; name : string; elem : TFhirAllergyIntolerance; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('clinicalStatus') then
    ComposeEnumValue(json, 'clinicalStatus', elem.ClinicalStatusElement, CODES_TFhirAllergyClinicalStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('clinicalStatus') then
    ComposeEnumProps(json, 'clinicalStatus', elem.ClinicalStatusElement, CODES_TFhirAllergyClinicalStatusEnum, false);
  ComposeEnumValue(json, 'verificationStatus', elem.VerificationStatusElement, CODES_TFhirAllergyVerificationStatusEnum, false);
  ComposeEnumProps(json, 'verificationStatus', elem.VerificationStatusElement, CODES_TFhirAllergyVerificationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirAllergyIntoleranceTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirAllergyIntoleranceTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') and (elem.categoryList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.categoryList.Count - 1 do
    begin
      val := val or (elem.categoryList[i].hasPrimitiveValue);
      ext := ext or ((elem.categoryList[i].id <> '') or (elem.categoryList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('category');
      for i := 0 to elem.categoryList.Count - 1 do
        ComposeEnumValue(json, '', elem.categoryList[i], CODES_TFhirAllergyIntoleranceCategoryEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_category');
      for i := 0 to elem.categoryList.Count - 1 do
        ComposeEnumProps(json, '', elem.categoryList[i], CODES_TFhirAllergyIntoleranceCategoryEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('criticality') then
    ComposeEnumValue(json, 'criticality', elem.CriticalityElement, CODES_TFhirAllergyIntoleranceCriticalityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('criticality') then
    ComposeEnumProps(json, 'criticality', elem.CriticalityElement, CODES_TFhirAllergyIntoleranceCriticalityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirAge) then 
    ComposeAge(json, 'onsetAge', TFhirAge(elem.onset)) 
  else if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirPeriod) then 
    ComposePeriod(json, 'onsetPeriod', TFhirPeriod(elem.onset)) 
  else if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirRange) then 
    ComposeRange(json, 'onsetRange', TFhirRange(elem.onset)) 
  else if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'onsetDateTime', TFhirDateTime(elem.onset), false);
    ComposeDateTimeProps(json, 'onsetDateTime', TFhirDateTime(elem.onset), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirString) then 
  begin
    ComposeStringValue(json, 'onsetString', TFhirString(elem.onset), false);
    ComposeStringProps(json, 'onsetString', TFhirString(elem.onset), false);
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('assertedDate') then
    ComposeDateTimeValue(json, 'assertedDate', elem.assertedDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('assertedDate') then
    ComposeDateTimeProps(json, 'assertedDate', elem.assertedDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('recorder') then
    ComposeReference{Resource}(json, 'recorder', elem.recorder); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('asserter') then
    ComposeReference{Resource}(json, 'asserter', elem.asserter); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('lastOccurrence') then
    ComposeDateTimeValue(json, 'lastOccurrence', elem.lastOccurrenceElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lastOccurrence') then
    ComposeDateTimeProps(json, 'lastOccurrence', elem.lastOccurrenceElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('reaction') and (elem.reactionList.Count > 0) then
  begin
    json.valueArray('reaction');
    for i := 0 to elem.reactionList.Count - 1 do
      ComposeAllergyIntoleranceReaction(json, '', elem.reactionList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
procedure TFHIRJsonParser.ParseAppointmentParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAppointmentParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParseAppointmentParticipant(jsn : TJsonObject) : TFhirAppointmentParticipant;
begin
  result := TFhirAppointmentParticipant.create;
  try
    ParseAppointmentParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAppointmentParticipantProperties(jsn : TJsonObject; result : TFhirAppointmentParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
    if jsn.has('required') or jsn.has('_required')  then
      result.requiredElement := parseEnum(jsn.path+'/required', jsn.node['required'], jsn.vObj['_required'], CODES_TFhirParticipantrequiredEnum, SYSTEMS_TFhirParticipantrequiredEnum);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirParticipationstatusEnum, SYSTEMS_TFhirParticipationstatusEnum);
end;

procedure TFHIRJsonComposer.ComposeAppointmentParticipant(json : TJSONWriter; name : string; elem : TFhirAppointmentParticipant; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'required', elem.RequiredElement, CODES_TFhirParticipantrequiredEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumProps(json, 'required', elem.RequiredElement, CODES_TFhirParticipantrequiredEnum, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirParticipationstatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirParticipationstatusEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAppointment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAppointment(jsn)); {2}
end;

function TFHIRJsonParser.ParseAppointment(jsn : TJsonObject) : TFhirAppointment;
begin
  result := TFhirAppointment.create;
  try
    ParseAppointmentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAppointmentProperties(jsn : TJsonObject; result : TFhirAppointment);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirAppointmentstatusEnum, SYSTEMS_TFhirAppointmentstatusEnum);
    if jsn.has('serviceCategory') then
        result.serviceCategory := ParseCodeableConcept(jsn.vObj['serviceCategory']);{q3}
    if jsn.has('serviceType') then
      iterateArray(jsn.vArr['serviceType'], result.serviceTypeList, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], result.specialtyList, parseCodeableConcept);
    if jsn.has('appointmentType') then
        result.appointmentType := ParseCodeableConcept(jsn.vObj['appointmentType']);{q3}
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], result.reasonList, parseCodeableConcept);
    if jsn.has('indication') then
      iterateArray(jsn.vArr['indication'], result.indicationList, parseReference{Resource});
    if jsn.has('priority') or jsn.has('_priority') then
        result.priorityElement := parseUnsignedInt(jsn.node['priority'], jsn.vObj['_priority']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], result.supportingInformationList, parseReference{TFhirReference});
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := parseInstant(jsn.node['start'], jsn.vObj['_start']);{q}
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := parseInstant(jsn.node['end'], jsn.vObj['_end']);{q}
    if jsn.has('minutesDuration') or jsn.has('_minutesDuration') then
        result.minutesDurationElement := parsePositiveInt(jsn.node['minutesDuration'], jsn.vObj['_minutesDuration']);{q}
    if jsn.has('slot') then
      iterateArray(jsn.vArr['slot'], result.slotList, parseReference{TFhirSlot});
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('incomingReferral') then
      iterateArray(jsn.vArr['incomingReferral'], result.incomingReferralList, parseReference{TFhirReferralRequest});
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseAppointmentParticipant);
    if jsn.has('requestedPeriod') then
      iterateArray(jsn.vArr['requestedPeriod'], result.requestedPeriodList, parsePeriod);
end;

procedure TFHIRJsonComposer.ComposeAppointment(json : TJSONWriter; name : string; elem : TFhirAppointment; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirAppointmentstatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirAppointmentstatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('serviceCategory') then
    ComposeCodeableConcept(json, 'serviceCategory', elem.serviceCategory); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('serviceType') and (elem.serviceTypeList.Count > 0) then
  begin
    json.valueArray('serviceType');
    for i := 0 to elem.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.serviceTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specialty') and (elem.specialtyList.Count > 0) then
  begin
    json.valueArray('specialty');
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialtyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('appointmentType') then
    ComposeCodeableConcept(json, 'appointmentType', elem.appointmentType); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reason') and (elem.reasonList.Count > 0) then
  begin
    json.valueArray('reason');
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('indication') and (elem.indicationList.Count > 0) then
  begin
    json.valueArray('indication');
    for i := 0 to elem.indicationList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.indicationList[i]); {z - Reference(Condition|Procedure)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('priority') then
    ComposeUnsignedIntValue(json, 'priority', elem.priorityElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('priority') then
    ComposeUnsignedIntProps(json, 'priority', elem.priorityElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInformation') and (elem.supportingInformationList.Count > 0) then
  begin
    json.valueArray('supportingInformation');
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInformationList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('start') then
    ComposeInstantValue(json, 'start', elem.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('start') then
    ComposeInstantProps(json, 'start', elem.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('end_') then
    ComposeInstantValue(json, 'end', elem.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('end_') then
    ComposeInstantProps(json, 'end', elem.end_Element, false);
  if (SummaryOption in [soFull, soData]) and doCompose('minutesDuration') then
    ComposePositiveIntValue(json, 'minutesDuration', elem.minutesDurationElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('minutesDuration') then
    ComposePositiveIntProps(json, 'minutesDuration', elem.minutesDurationElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('slot') and (elem.slotList.Count > 0) then
  begin
    json.valueArray('slot');
    for i := 0 to elem.slotList.Count - 1 do
      ComposeReference{TFhirSlot}(json, '', elem.slotList[i]); {z - Reference(Slot)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('incomingReferral') and (elem.incomingReferralList.Count > 0) then
  begin
    json.valueArray('incomingReferral');
    for i := 0 to elem.incomingReferralList.Count - 1 do
      ComposeReference{TFhirReferralRequest}(json, '', elem.incomingReferralList[i]); {z - Reference(ReferralRequest)}
    json.FinishArray;
  end;
  if (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeAppointmentParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('requestedPeriod') and (elem.requestedPeriodList.Count > 0) then
  begin
    json.valueArray('requestedPeriod');
    for i := 0 to elem.requestedPeriodList.Count - 1 do
      ComposePeriod(json, '', elem.requestedPeriodList[i]); {z - Period}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
procedure TFHIRJsonParser.ParseAppointmentResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAppointmentResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseAppointmentResponse(jsn : TJsonObject) : TFhirAppointmentResponse;
begin
  result := TFhirAppointmentResponse.create;
  try
    ParseAppointmentResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAppointmentResponseProperties(jsn : TJsonObject; result : TFhirAppointmentResponse);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('appointment') then
        result.appointment := ParseReference{TFhirAppointment}(jsn.vObj['appointment']);{q3}
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := parseInstant(jsn.node['start'], jsn.vObj['_start']);{q}
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := parseInstant(jsn.node['end'], jsn.vObj['_end']);{q}
    if jsn.has('participantType') then
      iterateArray(jsn.vArr['participantType'], result.participantTypeList, parseCodeableConcept);
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
    if jsn.has('participantStatus') or jsn.has('_participantStatus')  then
      result.participantStatusElement := parseEnum(jsn.path+'/participantStatus', jsn.node['participantStatus'], jsn.vObj['_participantStatus'], CODES_TFhirParticipationstatusEnum, SYSTEMS_TFhirParticipationstatusEnum);
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeAppointmentResponse(json : TJSONWriter; name : string; elem : TFhirAppointmentResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeReference{TFhirAppointment}(json, 'appointment', elem.appointment); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('start') then
    ComposeInstantValue(json, 'start', elem.startElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('start') then
    ComposeInstantProps(json, 'start', elem.startElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('end_') then
    ComposeInstantValue(json, 'end', elem.end_Element, false);
  if (SummaryOption in [soFull, soData]) and doCompose('end_') then
    ComposeInstantProps(json, 'end', elem.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('participantType') and (elem.participantTypeList.Count > 0) then
  begin
    json.valueArray('participantType');
    for i := 0 to elem.participantTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.participantTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('actor') then
    ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  ComposeEnumValue(json, 'participantStatus', elem.ParticipantStatusElement, CODES_TFhirParticipationstatusEnum, false);
  ComposeEnumProps(json, 'participantStatus', elem.ParticipantStatusElement, CODES_TFhirParticipationstatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
end;

{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
procedure TFHIRJsonParser.ParseAuditEventAgent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventAgent(jsn)); {2}
end;

function TFHIRJsonParser.ParseAuditEventAgent(jsn : TJsonObject) : TFhirAuditEventAgent;
begin
  result := TFhirAuditEventAgent.create;
  try
    ParseAuditEventAgentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventAgentProperties(jsn : TJsonObject; result : TFhirAuditEventAgent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
      iterateArray(jsn.vArr['role'], result.roleList, parseCodeableConcept);
    if jsn.has('reference') then
        result.reference := ParseReference{Resource}(jsn.vObj['reference']);{q3}
    if jsn.has('userId') then
        result.userId := ParseIdentifier(jsn.vObj['userId']);{q3}
    if jsn.has('altId') or jsn.has('_altId') then
        result.altIdElement := parseString(jsn.node['altId'], jsn.vObj['_altId']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('requestor') or jsn.has('_requestor') then
        result.requestorElement := parseBoolean(jsn.node['requestor'], jsn.vObj['_requestor']);{q}
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
      if jsn.has('policy') or jsn.has('_policy') then
      iteratePrimitiveArray(jsn.vArr['policy'], jsn.vArr['_policy'], result.policyList, parseUri);
    if jsn.has('media') then
        result.media := ParseCoding(jsn.vObj['media']);{q3}
    if jsn.has('network') then
        result.network := ParseAuditEventAgentNetwork(jsn.vObj['network']);{q3}
    if jsn.has('purposeOfUse') then
      iterateArray(jsn.vArr['purposeOfUse'], result.purposeOfUseList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeAuditEventAgent(json : TJSONWriter; name : string; elem : TFhirAuditEventAgent; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.roleList.Count > 0) then
  begin
    json.valueArray('role');
    for i := 0 to elem.roleList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.roleList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'reference', elem.reference); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'userId', elem.userId); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'altId', elem.altIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'altId', elem.altIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  ComposeBooleanValue(json, 'requestor', elem.requestorElement, false);
  ComposeBooleanProps(json, 'requestor', elem.requestorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if (SummaryOption in [soFull, soData]) and (elem.policyList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.policyList.Count - 1 do
    begin
      ext := ext or ((elem.policyList[i].id <> '') or (elem.policyList[i].hasExtensionList) {no-comments or (elem.policyList[i].hasComments)});
      val := val or (elem.policyList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('policy');
      for i := 0 to elem.policyList.Count - 1 do
        ComposeUriValue(json, '',elem.policyList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_policy');
      for i := 0 to elem.policyList.Count - 1 do
        ComposeUriProps(json, '',elem.policyList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'media', elem.media); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeAuditEventAgentNetwork(json, 'network', elem.network); {a}
  if (SummaryOption in [soFull, soData]) and (elem.purposeOfUseList.Count > 0) then
  begin
    json.valueArray('purposeOfUse');
    for i := 0 to elem.purposeOfUseList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.purposeOfUseList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAuditEventAgentNetwork(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventAgentNetwork(jsn)); {2}
end;

function TFHIRJsonParser.ParseAuditEventAgentNetwork(jsn : TJsonObject) : TFhirAuditEventAgentNetwork;
begin
  result := TFhirAuditEventAgentNetwork.create;
  try
    ParseAuditEventAgentNetworkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventAgentNetworkProperties(jsn : TJsonObject; result : TFhirAuditEventAgentNetwork);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('address') or jsn.has('_address') then
        result.addressElement := parseString(jsn.node['address'], jsn.vObj['_address']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirNetworkTypeEnum, SYSTEMS_TFhirNetworkTypeEnum);
end;

procedure TFHIRJsonComposer.ComposeAuditEventAgentNetwork(json : TJSONWriter; name : string; elem : TFhirAuditEventAgentNetwork; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'address', elem.addressElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'address', elem.addressElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirNetworkTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirNetworkTypeEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAuditEventSource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventSource(jsn)); {2}
end;

function TFHIRJsonParser.ParseAuditEventSource(jsn : TJsonObject) : TFhirAuditEventSource;
begin
  result := TFhirAuditEventSource.create;
  try
    ParseAuditEventSourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventSourceProperties(jsn : TJsonObject; result : TFhirAuditEventSource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('site') or jsn.has('_site') then
        result.siteElement := parseString(jsn.node['site'], jsn.vObj['_site']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCoding);
end;

procedure TFHIRJsonComposer.ComposeAuditEventSource(json : TJSONWriter; name : string; elem : TFhirAuditEventSource; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'site', elem.siteElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'site', elem.siteElement, false);
  ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCoding(json, '', elem.type_List[i]); {z - Coding}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAuditEventEntity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventEntity(jsn)); {2}
end;

function TFHIRJsonParser.ParseAuditEventEntity(jsn : TJsonObject) : TFhirAuditEventEntity;
begin
  result := TFhirAuditEventEntity.create;
  try
    ParseAuditEventEntityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventEntityProperties(jsn : TJsonObject; result : TFhirAuditEventEntity);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('reference') then
        result.reference := ParseReference{TFhirReference}(jsn.vObj['reference']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
    if jsn.has('role') then
        result.role := ParseCoding(jsn.vObj['role']);{q3}
    if jsn.has('lifecycle') then
        result.lifecycle := ParseCoding(jsn.vObj['lifecycle']);{q3}
    if jsn.has('securityLabel') then
      iterateArray(jsn.vArr['securityLabel'], result.securityLabelList, parseCoding);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('query') or jsn.has('_query') then
        result.queryElement := parseBase64Binary(jsn.node['query'], jsn.vObj['_query']);{q}
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parseAuditEventEntityDetail);
end;

procedure TFHIRJsonComposer.ComposeAuditEventEntity(json : TJSONWriter; name : string; elem : TFhirAuditEventEntity; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'reference', elem.reference); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'role', elem.role); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'lifecycle', elem.lifecycle); {a}
  if (SummaryOption in [soFull, soData]) and (elem.securityLabelList.Count > 0) then
  begin
    json.valueArray('securityLabel');
    for i := 0 to elem.securityLabelList.Count - 1 do
      ComposeCoding(json, '', elem.securityLabelList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryValue(json, 'query', elem.queryElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryProps(json, 'query', elem.queryElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposeAuditEventEntityDetail(json, '', elem.detailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAuditEventEntityDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEventEntityDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseAuditEventEntityDetail(jsn : TJsonObject) : TFhirAuditEventEntityDetail;
begin
  result := TFhirAuditEventEntityDetail.create;
  try
    ParseAuditEventEntityDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventEntityDetailProperties(jsn : TJsonObject; result : TFhirAuditEventEntityDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := parseString(jsn.node['type'], jsn.vObj['_type']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseBase64Binary(jsn.node['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeAuditEventEntityDetail(json : TJSONWriter; name : string; elem : TFhirAuditEventEntityDetail; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'type', elem.type_Element, false);
  ComposeStringProps(json, 'type', elem.type_Element, false);
  ComposeBase64BinaryValue(json, 'value', elem.valueElement, false);
  ComposeBase64BinaryProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseAuditEvent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseAuditEvent(jsn)); {2}
end;

function TFHIRJsonParser.ParseAuditEvent(jsn : TJsonObject) : TFhirAuditEvent;
begin
  result := TFhirAuditEvent.create;
  try
    ParseAuditEventProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseAuditEventProperties(jsn : TJsonObject; result : TFhirAuditEvent);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
    if jsn.has('subtype') then
      iterateArray(jsn.vArr['subtype'], result.subtypeList, parseCoding);
    if jsn.has('action') or jsn.has('_action')  then
      result.actionElement := parseEnum(jsn.path+'/action', jsn.node['action'], jsn.vObj['_action'], CODES_TFhirAuditEventActionEnum, SYSTEMS_TFhirAuditEventActionEnum);
    if jsn.has('recorded') or jsn.has('_recorded') then
        result.recordedElement := parseInstant(jsn.node['recorded'], jsn.vObj['_recorded']);{q}
    if jsn.has('outcome') or jsn.has('_outcome')  then
      result.outcomeElement := parseEnum(jsn.path+'/outcome', jsn.node['outcome'], jsn.vObj['_outcome'], CODES_TFhirAuditEventOutcomeEnum, SYSTEMS_TFhirAuditEventOutcomeEnum);
    if jsn.has('outcomeDesc') or jsn.has('_outcomeDesc') then
        result.outcomeDescElement := parseString(jsn.node['outcomeDesc'], jsn.vObj['_outcomeDesc']);{q}
    if jsn.has('purposeOfEvent') then
      iterateArray(jsn.vArr['purposeOfEvent'], result.purposeOfEventList, parseCodeableConcept);
    if jsn.has('agent') then
      iterateArray(jsn.vArr['agent'], result.agentList, parseAuditEventAgent);
    if jsn.has('source') then
        result.source := ParseAuditEventSource(jsn.vObj['source']);{q3}
    if jsn.has('entity') then
      iterateArray(jsn.vArr['entity'], result.entityList, parseAuditEventEntity);
end;

procedure TFHIRJsonComposer.ComposeAuditEvent(json : TJSONWriter; name : string; elem : TFhirAuditEvent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  ComposeCoding(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subtype') and (elem.subtypeList.Count > 0) then
  begin
    json.valueArray('subtype');
    for i := 0 to elem.subtypeList.Count - 1 do
      ComposeCoding(json, '', elem.subtypeList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('action') then
    ComposeEnumValue(json, 'action', elem.ActionElement, CODES_TFhirAuditEventActionEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('action') then
    ComposeEnumProps(json, 'action', elem.ActionElement, CODES_TFhirAuditEventActionEnum, false);
  ComposeInstantValue(json, 'recorded', elem.recordedElement, false);
  ComposeInstantProps(json, 'recorded', elem.recordedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('outcome') then
    ComposeEnumValue(json, 'outcome', elem.OutcomeElement, CODES_TFhirAuditEventOutcomeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('outcome') then
    ComposeEnumProps(json, 'outcome', elem.OutcomeElement, CODES_TFhirAuditEventOutcomeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('outcomeDesc') then
    ComposeStringValue(json, 'outcomeDesc', elem.outcomeDescElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('outcomeDesc') then
    ComposeStringProps(json, 'outcomeDesc', elem.outcomeDescElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('purposeOfEvent') and (elem.purposeOfEventList.Count > 0) then
  begin
    json.valueArray('purposeOfEvent');
    for i := 0 to elem.purposeOfEventList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.purposeOfEventList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (elem.agentList.Count > 0) then
  begin
    json.valueArray('agent');
    for i := 0 to elem.agentList.Count - 1 do
      ComposeAuditEventAgent(json, '', elem.agentList[i]); {z - }
    json.FinishArray;
  end;
  ComposeAuditEventSource(json, 'source', elem.source); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('entity') and (elem.entityList.Count > 0) then
  begin
    json.valueArray('entity');
    for i := 0 to elem.entityList.Count - 1 do
      ComposeAuditEventEntity(json, '', elem.entityList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
procedure TFHIRJsonParser.ParseBasic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBasic(jsn)); {2}
end;

function TFHIRJsonParser.ParseBasic(jsn : TJsonObject) : TFhirBasic;
begin
  result := TFhirBasic.create;
  try
    ParseBasicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBasicProperties(jsn : TJsonObject; result : TFhirBasic);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{TFhirReference}(jsn.vObj['subject']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDate(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('author') then
        result.author := ParseReference{Resource}(jsn.vObj['author']);{q3}
end;

procedure TFHIRJsonComposer.ComposeBasic(json : TJSONWriter; name : string; elem : TFhirBasic; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirReference}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('created') then
    ComposeDateValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('created') then
    ComposeDateProps(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    ComposeReference{Resource}(json, 'author', elem.author); {a}
end;

{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
procedure TFHIRJsonParser.ParseBinary(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBinary(jsn)); {2}
end;

function TFHIRJsonParser.ParseBinary(jsn : TJsonObject) : TFhirBinary;
begin
  result := TFhirBinary.create;
  try
    ParseBinaryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBinaryProperties(jsn : TJsonObject; result : TFhirBinary);
begin
    ParseResourceProperties(jsn, result);
    if jsn.has('contentType') or jsn.has('_contentType') then
        result.contentTypeElement := parseCode(jsn.node['contentType'], jsn.vObj['_contentType']);{q}
    if jsn.has('securityContext') then
        result.securityContext := ParseReference{TFhirReference}(jsn.vObj['securityContext']);{q3}
    if jsn.has('content') or jsn.has('_content') then
        result.contentElement := parseBase64Binary(jsn.node['content'], jsn.vObj['_content']);{q}
end;

procedure TFHIRJsonComposer.ComposeBinary(json : TJSONWriter; name : string; elem : TFhirBinary; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  ComposeResourceProperties(json, elem);
  ComposeCodeValue(json, 'contentType', elem.contentTypeElement, false);
  ComposeCodeProps(json, 'contentType', elem.contentTypeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('securityContext') then
    ComposeReference{TFhirReference}(json, 'securityContext', elem.securityContext); {a}
  ComposeBase64BinaryValue(json, 'content', elem.contentElement, false);
  ComposeBase64BinaryProps(json, 'content', elem.contentElement, false);
end;

{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BODYSITE}
procedure TFHIRJsonParser.ParseBodySite(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBodySite(jsn)); {2}
end;

function TFHIRJsonParser.ParseBodySite(jsn : TJsonObject) : TFhirBodySite;
begin
  result := TFhirBodySite.create;
  try
    ParseBodySiteProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBodySiteProperties(jsn : TJsonObject; result : TFhirBodySite);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);{q}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('qualifier') then
      iterateArray(jsn.vArr['qualifier'], result.qualifierList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('image') then
      iterateArray(jsn.vArr['image'], result.imageList, parseAttachment);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
end;

procedure TFHIRJsonComposer.ComposeBodySite(json : TJSONWriter; name : string; elem : TFhirBodySite; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('qualifier') and (elem.qualifierList.Count > 0) then
  begin
    json.valueArray('qualifier');
    for i := 0 to elem.qualifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.qualifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('image') and (elem.imageList.Count > 0) then
  begin
    json.valueArray('image');
    for i := 0 to elem.imageList.Count - 1 do
      ComposeAttachment(json, '', elem.imageList[i]); {z - Attachment}
    json.FinishArray;
  end;
  ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
end;

{$ENDIF FHIR_BODYSITE}
{$IFDEF FHIR_BUNDLE}
procedure TFHIRJsonParser.ParseBundleLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleLink(jsn)); {2}
end;

function TFHIRJsonParser.ParseBundleLink(jsn : TJsonObject) : TFhirBundleLink;
begin
  result := TFhirBundleLink.create;
  try
    ParseBundleLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleLinkProperties(jsn : TJsonObject; result : TFhirBundleLink);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('relation') or jsn.has('_relation') then
        result.relationElement := parseString(jsn.node['relation'], jsn.vObj['_relation']);{q}
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
end;

procedure TFHIRJsonComposer.ComposeBundleLink(json : TJSONWriter; name : string; elem : TFhirBundleLink; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'relation', elem.relationElement, false);
  ComposeStringProps(json, 'relation', elem.relationElement, false);
  ComposeUriValue(json, 'url', elem.urlElement, false);
  ComposeUriProps(json, 'url', elem.urlElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBundleEntry(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleEntry(jsn)); {2}
end;

function TFHIRJsonParser.ParseBundleEntry(jsn : TJsonObject) : TFhirBundleEntry;
begin
  result := TFhirBundleEntry.create;
  try
    ParseBundleEntryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleEntryProperties(jsn : TJsonObject; result : TFhirBundleEntry);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], result.link_List, parseBundleLink);
    if jsn.has('fullUrl') or jsn.has('_fullUrl') then
        result.fullUrlElement := parseUri(jsn.node['fullUrl'], jsn.vObj['_fullUrl']);{q}
    if jsn.has('resource') then
        result.resource := ParseInnerResource(jsn.vObj['resource']);{q3}
    if jsn.has('search') then
        result.search := ParseBundleEntrySearch(jsn.vObj['search']);{q3}
    if jsn.has('request') then
        result.request := ParseBundleEntryRequest(jsn.vObj['request']);{q3}
    if jsn.has('response') then
        result.response := ParseBundleEntryResponse(jsn.vObj['response']);{q3}
end;

procedure TFHIRJsonComposer.ComposeBundleEntry(json : TJSONWriter; name : string; elem : TFhirBundleEntry; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.link_List.Count > 0) then
  begin
    json.valueArray('link');
    for i := 0 to elem.link_List.Count - 1 do
      ComposeBundleLink(json, '', elem.link_List[i]); {z - @Bundle.link}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'fullUrl', elem.fullUrlElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'fullUrl', elem.fullUrlElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(json, 'resource', elem, elem.resource); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntrySearch(json, 'search', elem.search); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntryRequest(json, 'request', elem.request); {a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntryResponse(json, 'response', elem.response); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBundleEntrySearch(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleEntrySearch(jsn)); {2}
end;

function TFHIRJsonParser.ParseBundleEntrySearch(jsn : TJsonObject) : TFhirBundleEntrySearch;
begin
  result := TFhirBundleEntrySearch.create;
  try
    ParseBundleEntrySearchProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleEntrySearchProperties(jsn : TJsonObject; result : TFhirBundleEntrySearch);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirSearchEntryModeEnum, SYSTEMS_TFhirSearchEntryModeEnum);
    if jsn.has('score') or jsn.has('_score') then
        result.scoreElement := parseDecimal(jsn.node['score'], jsn.vObj['_score']);{q}
end;

procedure TFHIRJsonComposer.ComposeBundleEntrySearch(json : TJSONWriter; name : string; elem : TFhirBundleEntrySearch; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirSearchEntryModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirSearchEntryModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalValue(json, 'score', elem.scoreElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimalProps(json, 'score', elem.scoreElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBundleEntryRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleEntryRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseBundleEntryRequest(jsn : TJsonObject) : TFhirBundleEntryRequest;
begin
  result := TFhirBundleEntryRequest.create;
  try
    ParseBundleEntryRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleEntryRequestProperties(jsn : TJsonObject; result : TFhirBundleEntryRequest);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('method') or jsn.has('_method')  then
      result.methodElement := parseEnum(jsn.path+'/method', jsn.node['method'], jsn.vObj['_method'], CODES_TFhirHttpVerbEnum, SYSTEMS_TFhirHttpVerbEnum);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('ifNoneMatch') or jsn.has('_ifNoneMatch') then
        result.ifNoneMatchElement := parseString(jsn.node['ifNoneMatch'], jsn.vObj['_ifNoneMatch']);{q}
    if jsn.has('ifModifiedSince') or jsn.has('_ifModifiedSince') then
        result.ifModifiedSinceElement := parseInstant(jsn.node['ifModifiedSince'], jsn.vObj['_ifModifiedSince']);{q}
    if jsn.has('ifMatch') or jsn.has('_ifMatch') then
        result.ifMatchElement := parseString(jsn.node['ifMatch'], jsn.vObj['_ifMatch']);{q}
    if jsn.has('ifNoneExist') or jsn.has('_ifNoneExist') then
        result.ifNoneExistElement := parseString(jsn.node['ifNoneExist'], jsn.vObj['_ifNoneExist']);{q}
end;

procedure TFHIRJsonComposer.ComposeBundleEntryRequest(json : TJSONWriter; name : string; elem : TFhirBundleEntryRequest; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'method', elem.MethodElement, CODES_TFhirHttpVerbEnum, false);
  ComposeEnumProps(json, 'method', elem.MethodElement, CODES_TFhirHttpVerbEnum, false);
  ComposeUriValue(json, 'url', elem.urlElement, false);
  ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'ifNoneMatch', elem.ifNoneMatchElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'ifNoneMatch', elem.ifNoneMatchElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantValue(json, 'ifModifiedSince', elem.ifModifiedSinceElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantProps(json, 'ifModifiedSince', elem.ifModifiedSinceElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'ifMatch', elem.ifMatchElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'ifMatch', elem.ifMatchElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'ifNoneExist', elem.ifNoneExistElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'ifNoneExist', elem.ifNoneExistElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBundleEntryResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundleEntryResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseBundleEntryResponse(jsn : TJsonObject) : TFhirBundleEntryResponse;
begin
  result := TFhirBundleEntryResponse.create;
  try
    ParseBundleEntryResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleEntryResponseProperties(jsn : TJsonObject; result : TFhirBundleEntryResponse);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('status') or jsn.has('_status') then
        result.statusElement := parseString(jsn.node['status'], jsn.vObj['_status']);{q}
    if jsn.has('location') or jsn.has('_location') then
        result.locationElement := parseUri(jsn.node['location'], jsn.vObj['_location']);{q}
    if jsn.has('etag') or jsn.has('_etag') then
        result.etagElement := parseString(jsn.node['etag'], jsn.vObj['_etag']);{q}
    if jsn.has('lastModified') or jsn.has('_lastModified') then
        result.lastModifiedElement := parseInstant(jsn.node['lastModified'], jsn.vObj['_lastModified']);{q}
    if jsn.has('outcome') then
        result.outcome := ParseInnerResource(jsn.vObj['outcome']);{q3}
end;

procedure TFHIRJsonComposer.ComposeBundleEntryResponse(json : TJSONWriter; name : string; elem : TFhirBundleEntryResponse; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'status', elem.statusElement, false);
  ComposeStringProps(json, 'status', elem.statusElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriValue(json, 'location', elem.locationElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUriProps(json, 'location', elem.locationElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringValue(json, 'etag', elem.etagElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeStringProps(json, 'etag', elem.etagElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantValue(json, 'lastModified', elem.lastModifiedElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstantProps(json, 'lastModified', elem.lastModifiedElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(json, 'outcome', elem, elem.outcome); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseBundle(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseBundle(jsn)); {2}
end;

function TFHIRJsonParser.ParseBundle(jsn : TJsonObject) : TFhirBundle;
begin
  result := TFhirBundle.create;
  try
    ParseBundleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseBundleProperties(jsn : TJsonObject; result : TFhirBundle);
begin
    ParseResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirBundleTypeEnum, SYSTEMS_TFhirBundleTypeEnum);
    if jsn.has('total') or jsn.has('_total') then
        result.totalElement := parseUnsignedInt(jsn.node['total'], jsn.vObj['_total']);{q}
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], result.link_List, parseBundleLink);
    if jsn.has('entry') then
      iterateArray(jsn.vArr['entry'], result.entryList, parseBundleEntry);
    if jsn.has('signature') then
        result.signature := ParseSignature(jsn.vObj['signature']);{q3}
end;

procedure TFHIRJsonComposer.ComposeBundle(json : TJSONWriter; name : string; elem : TFhirBundle; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirBundleTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirBundleTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soText, soData, soCount]) then
    ComposeUnsignedIntValue(json, 'total', elem.totalElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData, soCount]) then
    ComposeUnsignedIntProps(json, 'total', elem.totalElement, false);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.link_List.Count > 0) then
  begin
    json.valueArray('link');
    for i := 0 to elem.link_List.Count - 1 do
      ComposeBundleLink(json, '', elem.link_List[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.entryList.Count > 0) then
  begin
    json.valueArray('entry');
    for i := 0 to elem.entryList.Count - 1 do
      ComposeBundleEntry(json, '', elem.entryList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeSignature(json, 'signature', elem.signature); {a}
end;

{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
procedure TFHIRJsonParser.ParseCapabilityStatementSoftware(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementSoftware(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementSoftware(jsn : TJsonObject) : TFhirCapabilityStatementSoftware;
begin
  result := TFhirCapabilityStatementSoftware.create;
  try
    ParseCapabilityStatementSoftwareProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementSoftwareProperties(jsn : TJsonObject; result : TFhirCapabilityStatementSoftware);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('releaseDate') or jsn.has('_releaseDate') then
        result.releaseDateElement := parseDateTime(jsn.node['releaseDate'], jsn.vObj['_releaseDate']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementSoftware(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementSoftware; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'releaseDate', elem.releaseDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'releaseDate', elem.releaseDateElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementImplementation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementImplementation(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementImplementation(jsn : TJsonObject) : TFhirCapabilityStatementImplementation;
begin
  result := TFhirCapabilityStatementImplementation.create;
  try
    ParseCapabilityStatementImplementationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementImplementationProperties(jsn : TJsonObject; result : TFhirCapabilityStatementImplementation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementImplementation(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementImplementation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'description', elem.descriptionElement, false);
  ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRest(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRest(jsn : TJsonObject) : TFhirCapabilityStatementRest;
begin
  result := TFhirCapabilityStatementRest.create;
  try
    ParseCapabilityStatementRestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRest);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirRestfulCapabilityModeEnum, SYSTEMS_TFhirRestfulCapabilityModeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
    if jsn.has('security') then
        result.security := ParseCapabilityStatementRestSecurity(jsn.vObj['security']);{q3}
    if jsn.has('resource') then
      iterateArray(jsn.vArr['resource'], result.resourceList, parseCapabilityStatementRestResource);
    if jsn.has('interaction') then
      iterateArray(jsn.vArr['interaction'], result.interactionList, parseCapabilityStatementRestInteraction);
    if jsn.has('searchParam') then
      iterateArray(jsn.vArr['searchParam'], result.searchParamList, parseCapabilityStatementRestResourceSearchParam);
    if jsn.has('operation') then
      iterateArray(jsn.vArr['operation'], result.operationList, parseCapabilityStatementRestOperation);
      if jsn.has('compartment') or jsn.has('_compartment') then
      iteratePrimitiveArray(jsn.vArr['compartment'], jsn.vArr['_compartment'], result.compartmentList, parseUri);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRest(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRest; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirRestfulCapabilityModeEnum, false);
  ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirRestfulCapabilityModeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCapabilityStatementRestSecurity(json, 'security', elem.security); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.resourceList.Count > 0) then
  begin
    json.valueArray('resource');
    for i := 0 to elem.resourceList.Count - 1 do
      ComposeCapabilityStatementRestResource(json, '', elem.resourceList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.interactionList.Count > 0) then
  begin
    json.valueArray('interaction');
    for i := 0 to elem.interactionList.Count - 1 do
      ComposeCapabilityStatementRestInteraction(json, '', elem.interactionList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.searchParamList.Count > 0) then
  begin
    json.valueArray('searchParam');
    for i := 0 to elem.searchParamList.Count - 1 do
      ComposeCapabilityStatementRestResourceSearchParam(json, '', elem.searchParamList[i]); {z - @CapabilityStatement.rest.resource.searchParam}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.operationList.Count > 0) then
  begin
    json.valueArray('operation');
    for i := 0 to elem.operationList.Count - 1 do
      ComposeCapabilityStatementRestOperation(json, '', elem.operationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.compartmentList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.compartmentList.Count - 1 do
    begin
      ext := ext or ((elem.compartmentList[i].id <> '') or (elem.compartmentList[i].hasExtensionList) {no-comments or (elem.compartmentList[i].hasComments)});
      val := val or (elem.compartmentList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('compartment');
      for i := 0 to elem.compartmentList.Count - 1 do
        ComposeUriValue(json, '',elem.compartmentList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_compartment');
      for i := 0 to elem.compartmentList.Count - 1 do
        ComposeUriProps(json, '',elem.compartmentList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestSecurity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestSecurity(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRestSecurity(jsn : TJsonObject) : TFhirCapabilityStatementRestSecurity;
begin
  result := TFhirCapabilityStatementRestSecurity.create;
  try
    ParseCapabilityStatementRestSecurityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestSecurityProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestSecurity);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('cors') or jsn.has('_cors') then
        result.corsElement := parseBoolean(jsn.node['cors'], jsn.vObj['_cors']);{q}
    if jsn.has('service') then
      iterateArray(jsn.vArr['service'], result.serviceList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('certificate') then
      iterateArray(jsn.vArr['certificate'], result.certificateList, parseCapabilityStatementRestSecurityCertificate);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestSecurity(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestSecurity; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'cors', elem.corsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'cors', elem.corsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.serviceList.Count > 0) then
  begin
    json.valueArray('service');
    for i := 0 to elem.serviceList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.serviceList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.certificateList.Count > 0) then
  begin
    json.valueArray('certificate');
    for i := 0 to elem.certificateList.Count - 1 do
      ComposeCapabilityStatementRestSecurityCertificate(json, '', elem.certificateList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestSecurityCertificate(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestSecurityCertificate(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRestSecurityCertificate(jsn : TJsonObject) : TFhirCapabilityStatementRestSecurityCertificate;
begin
  result := TFhirCapabilityStatementRestSecurityCertificate.create;
  try
    ParseCapabilityStatementRestSecurityCertificateProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestSecurityCertificateProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestSecurityCertificate);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := parseCode(jsn.node['type'], jsn.vObj['_type']);{q}
    if jsn.has('blob') or jsn.has('_blob') then
        result.blobElement := parseBase64Binary(jsn.node['blob'], jsn.vObj['_blob']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestSecurityCertificate(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestSecurityCertificate; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'type', elem.type_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'type', elem.type_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBase64BinaryValue(json, 'blob', elem.blobElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBase64BinaryProps(json, 'blob', elem.blobElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestResource(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRestResource(jsn : TJsonObject) : TFhirCapabilityStatementRestResource;
begin
  result := TFhirCapabilityStatementRestResource.create;
  try
    ParseCapabilityStatementRestResourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestResource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') then
        result.profile := ParseReference{TFhirStructureDefinition}(jsn.vObj['profile']);{q3}
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseMarkdown(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
    if jsn.has('interaction') then
      iterateArray(jsn.vArr['interaction'], result.interactionList, parseCapabilityStatementRestResourceInteraction);
    if jsn.has('versioning') or jsn.has('_versioning')  then
      result.versioningElement := parseEnum(jsn.path+'/versioning', jsn.node['versioning'], jsn.vObj['_versioning'], CODES_TFhirVersioningPolicyEnum, SYSTEMS_TFhirVersioningPolicyEnum);
    if jsn.has('readHistory') or jsn.has('_readHistory') then
        result.readHistoryElement := parseBoolean(jsn.node['readHistory'], jsn.vObj['_readHistory']);{q}
    if jsn.has('updateCreate') or jsn.has('_updateCreate') then
        result.updateCreateElement := parseBoolean(jsn.node['updateCreate'], jsn.vObj['_updateCreate']);{q}
    if jsn.has('conditionalCreate') or jsn.has('_conditionalCreate') then
        result.conditionalCreateElement := parseBoolean(jsn.node['conditionalCreate'], jsn.vObj['_conditionalCreate']);{q}
    if jsn.has('conditionalRead') or jsn.has('_conditionalRead')  then
      result.conditionalReadElement := parseEnum(jsn.path+'/conditionalRead', jsn.node['conditionalRead'], jsn.vObj['_conditionalRead'], CODES_TFhirConditionalReadStatusEnum, SYSTEMS_TFhirConditionalReadStatusEnum);
    if jsn.has('conditionalUpdate') or jsn.has('_conditionalUpdate') then
        result.conditionalUpdateElement := parseBoolean(jsn.node['conditionalUpdate'], jsn.vObj['_conditionalUpdate']);{q}
    if jsn.has('conditionalDelete') or jsn.has('_conditionalDelete')  then
      result.conditionalDeleteElement := parseEnum(jsn.path+'/conditionalDelete', jsn.node['conditionalDelete'], jsn.vObj['_conditionalDelete'], CODES_TFhirConditionalDeleteStatusEnum, SYSTEMS_TFhirConditionalDeleteStatusEnum);
    if jsn.has('referencePolicy') or jsn.has('_referencePolicy') then
      iterateEnumArray(jsn.vArr['referencePolicy'], jsn.vArr['_referencePolicy'], jsn.path+'/referencePolicy', result.referencePolicyList, parseEnum, CODES_TFhirReferenceHandlingPolicyEnum, SYSTEMS_TFhirReferenceHandlingPolicyEnum);
      if jsn.has('searchInclude') or jsn.has('_searchInclude') then
      iteratePrimitiveArray(jsn.vArr['searchInclude'], jsn.vArr['_searchInclude'], result.searchIncludeList, parseString);
      if jsn.has('searchRevInclude') or jsn.has('_searchRevInclude') then
      iteratePrimitiveArray(jsn.vArr['searchRevInclude'], jsn.vArr['_searchRevInclude'], result.searchRevIncludeList, parseString);
    if jsn.has('searchParam') then
      iterateArray(jsn.vArr['searchParam'], result.searchParamList, parseCapabilityStatementRestResourceSearchParam);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestResource(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestResource; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'profile', elem.profile); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'documentation', elem.documentationElement, false);
  if (elem.interactionList.Count > 0) then
  begin
    json.valueArray('interaction');
    for i := 0 to elem.interactionList.Count - 1 do
      ComposeCapabilityStatementRestResourceInteraction(json, '', elem.interactionList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'versioning', elem.VersioningElement, CODES_TFhirVersioningPolicyEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'versioning', elem.VersioningElement, CODES_TFhirVersioningPolicyEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'readHistory', elem.readHistoryElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'readHistory', elem.readHistoryElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'updateCreate', elem.updateCreateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'updateCreate', elem.updateCreateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'conditionalCreate', elem.conditionalCreateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'conditionalCreate', elem.conditionalCreateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'conditionalRead', elem.ConditionalReadElement, CODES_TFhirConditionalReadStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'conditionalRead', elem.ConditionalReadElement, CODES_TFhirConditionalReadStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'conditionalUpdate', elem.conditionalUpdateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'conditionalUpdate', elem.conditionalUpdateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'conditionalDelete', elem.ConditionalDeleteElement, CODES_TFhirConditionalDeleteStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'conditionalDelete', elem.ConditionalDeleteElement, CODES_TFhirConditionalDeleteStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and (elem.referencePolicyList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.referencePolicyList.Count - 1 do
    begin
      val := val or (elem.referencePolicyList[i].hasPrimitiveValue);
      ext := ext or ((elem.referencePolicyList[i].id <> '') or (elem.referencePolicyList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('referencePolicy');
      for i := 0 to elem.referencePolicyList.Count - 1 do
        ComposeEnumValue(json, '', elem.referencePolicyList[i], CODES_TFhirReferenceHandlingPolicyEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_referencePolicy');
      for i := 0 to elem.referencePolicyList.Count - 1 do
        ComposeEnumProps(json, '', elem.referencePolicyList[i], CODES_TFhirReferenceHandlingPolicyEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.searchIncludeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.searchIncludeList.Count - 1 do
    begin
      ext := ext or ((elem.searchIncludeList[i].id <> '') or (elem.searchIncludeList[i].hasExtensionList) {no-comments or (elem.searchIncludeList[i].hasComments)});
      val := val or (elem.searchIncludeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('searchInclude');
      for i := 0 to elem.searchIncludeList.Count - 1 do
        ComposeStringValue(json, '',elem.searchIncludeList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_searchInclude');
      for i := 0 to elem.searchIncludeList.Count - 1 do
        ComposeStringProps(json, '',elem.searchIncludeList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.searchRevIncludeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.searchRevIncludeList.Count - 1 do
    begin
      ext := ext or ((elem.searchRevIncludeList[i].id <> '') or (elem.searchRevIncludeList[i].hasExtensionList) {no-comments or (elem.searchRevIncludeList[i].hasComments)});
      val := val or (elem.searchRevIncludeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('searchRevInclude');
      for i := 0 to elem.searchRevIncludeList.Count - 1 do
        ComposeStringValue(json, '',elem.searchRevIncludeList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_searchRevInclude');
      for i := 0 to elem.searchRevIncludeList.Count - 1 do
        ComposeStringProps(json, '',elem.searchRevIncludeList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.searchParamList.Count > 0) then
  begin
    json.valueArray('searchParam');
    for i := 0 to elem.searchParamList.Count - 1 do
      ComposeCapabilityStatementRestResourceSearchParam(json, '', elem.searchParamList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceInteraction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestResourceInteraction(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRestResourceInteraction(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceInteraction;
begin
  result := TFhirCapabilityStatementRestResourceInteraction.create;
  try
    ParseCapabilityStatementRestResourceInteractionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceInteractionProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestResourceInteraction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirTypeRestfulInteractionEnum, SYSTEMS_TFhirTypeRestfulInteractionEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestResourceInteraction(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestResourceInteraction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirTypeRestfulInteractionEnum, false);
  ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirTypeRestfulInteractionEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceSearchParam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestResourceSearchParam(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRestResourceSearchParam(jsn : TJsonObject) : TFhirCapabilityStatementRestResourceSearchParam;
begin
  result := TFhirCapabilityStatementRestResourceSearchParam.create;
  try
    ParseCapabilityStatementRestResourceSearchParamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestResourceSearchParamProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestResourceSearchParam);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('definition') or jsn.has('_definition') then
        result.definitionElement := parseUri(jsn.node['definition'], jsn.vObj['_definition']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestResourceSearchParam(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestResourceSearchParam; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'definition', elem.definitionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'definition', elem.definitionElement, false);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirSearchParamTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirSearchParamTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestInteraction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestInteraction(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRestInteraction(jsn : TJsonObject) : TFhirCapabilityStatementRestInteraction;
begin
  result := TFhirCapabilityStatementRestInteraction.create;
  try
    ParseCapabilityStatementRestInteractionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestInteractionProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestInteraction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirSystemRestfulInteractionEnum, SYSTEMS_TFhirSystemRestfulInteractionEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestInteraction(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestInteraction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirSystemRestfulInteractionEnum, false);
  ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirSystemRestfulInteractionEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementRestOperation(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementRestOperation(jsn : TJsonObject) : TFhirCapabilityStatementRestOperation;
begin
  result := TFhirCapabilityStatementRestOperation.create;
  try
    ParseCapabilityStatementRestOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementRestOperationProperties(jsn : TJsonObject; result : TFhirCapabilityStatementRestOperation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('definition') then
        result.definition := ParseReference{TFhirOperationDefinition}(jsn.vObj['definition']);{q3}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementRestOperation(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementRestOperation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  ComposeReference{TFhirOperationDefinition}(json, 'definition', elem.definition); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessaging(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementMessaging(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementMessaging(jsn : TJsonObject) : TFhirCapabilityStatementMessaging;
begin
  result := TFhirCapabilityStatementMessaging.create;
  try
    ParseCapabilityStatementMessagingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingProperties(jsn : TJsonObject; result : TFhirCapabilityStatementMessaging);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseCapabilityStatementMessagingEndpoint);
    if jsn.has('reliableCache') or jsn.has('_reliableCache') then
        result.reliableCacheElement := parseUnsignedInt(jsn.node['reliableCache'], jsn.vObj['_reliableCache']);{q}
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
    if jsn.has('supportedMessage') then
      iterateArray(jsn.vArr['supportedMessage'], result.supportedMessageList, parseCapabilityStatementMessagingSupportedMessage);
    if jsn.has('event') then
      iterateArray(jsn.vArr['event'], result.eventList, parseCapabilityStatementMessagingEvent);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementMessaging(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementMessaging; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeCapabilityStatementMessagingEndpoint(json, '', elem.endpointList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'reliableCache', elem.reliableCacheElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'reliableCache', elem.reliableCacheElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.supportedMessageList.Count > 0) then
  begin
    json.valueArray('supportedMessage');
    for i := 0 to elem.supportedMessageList.Count - 1 do
      ComposeCapabilityStatementMessagingSupportedMessage(json, '', elem.supportedMessageList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.eventList.Count > 0) then
  begin
    json.valueArray('event');
    for i := 0 to elem.eventList.Count - 1 do
      ComposeCapabilityStatementMessagingEvent(json, '', elem.eventList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingEndpoint(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementMessagingEndpoint(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementMessagingEndpoint(jsn : TJsonObject) : TFhirCapabilityStatementMessagingEndpoint;
begin
  result := TFhirCapabilityStatementMessagingEndpoint.create;
  try
    ParseCapabilityStatementMessagingEndpointProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingEndpointProperties(jsn : TJsonObject; result : TFhirCapabilityStatementMessagingEndpoint);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('protocol') then
        result.protocol := ParseCoding(jsn.vObj['protocol']);{q3}
    if jsn.has('address') or jsn.has('_address') then
        result.addressElement := parseUri(jsn.node['address'], jsn.vObj['_address']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementMessagingEndpoint(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementMessagingEndpoint; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCoding(json, 'protocol', elem.protocol); {a}
  ComposeUriValue(json, 'address', elem.addressElement, false);
  ComposeUriProps(json, 'address', elem.addressElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingSupportedMessage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementMessagingSupportedMessage(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementMessagingSupportedMessage(jsn : TJsonObject) : TFhirCapabilityStatementMessagingSupportedMessage;
begin
  result := TFhirCapabilityStatementMessagingSupportedMessage.create;
  try
    ParseCapabilityStatementMessagingSupportedMessageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingSupportedMessageProperties(jsn : TJsonObject; result : TFhirCapabilityStatementMessagingSupportedMessage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirEventCapabilityModeEnum, SYSTEMS_TFhirEventCapabilityModeEnum);
    if jsn.has('definition') then
        result.definition := ParseReference{TFhirMessageDefinition}(jsn.vObj['definition']);{q3}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementMessagingSupportedMessage(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementMessagingSupportedMessage; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirEventCapabilityModeEnum, false);
  ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirEventCapabilityModeEnum, false);
  ComposeReference{TFhirMessageDefinition}(json, 'definition', elem.definition); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingEvent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementMessagingEvent(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementMessagingEvent(jsn : TJsonObject) : TFhirCapabilityStatementMessagingEvent;
begin
  result := TFhirCapabilityStatementMessagingEvent.create;
  try
    ParseCapabilityStatementMessagingEventProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementMessagingEventProperties(jsn : TJsonObject; result : TFhirCapabilityStatementMessagingEvent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCoding(jsn.vObj['code']);{q3}
    if jsn.has('category') or jsn.has('_category')  then
      result.categoryElement := parseEnum(jsn.path+'/category', jsn.node['category'], jsn.vObj['_category'], CODES_TFhirMessageSignificanceCategoryEnum, SYSTEMS_TFhirMessageSignificanceCategoryEnum);
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirEventCapabilityModeEnum, SYSTEMS_TFhirEventCapabilityModeEnum);
    if jsn.has('focus') or jsn.has('_focus')  then
      result.focusElement := parseEnum(jsn.path+'/focus', jsn.node['focus'], jsn.vObj['_focus'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('request') then
        result.request := ParseReference{TFhirStructureDefinition}(jsn.vObj['request']);{q3}
    if jsn.has('response') then
        result.response := ParseReference{TFhirStructureDefinition}(jsn.vObj['response']);{q3}
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementMessagingEvent(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementMessagingEvent; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCoding(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'category', elem.CategoryElement, CODES_TFhirMessageSignificanceCategoryEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'category', elem.CategoryElement, CODES_TFhirMessageSignificanceCategoryEnum, false);
  ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirEventCapabilityModeEnum, false);
  ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirEventCapabilityModeEnum, false);
  ComposeEnumValue(json, 'focus', elem.FocusElement, CODES_TFhirResourceTypesEnum, false);
  ComposeEnumProps(json, 'focus', elem.FocusElement, CODES_TFhirResourceTypesEnum, false);
  ComposeReference{TFhirStructureDefinition}(json, 'request', elem.request); {a}
  ComposeReference{TFhirStructureDefinition}(json, 'response', elem.response); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementDocument(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatementDocument(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatementDocument(jsn : TJsonObject) : TFhirCapabilityStatementDocument;
begin
  result := TFhirCapabilityStatementDocument.create;
  try
    ParseCapabilityStatementDocumentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementDocumentProperties(jsn : TJsonObject; result : TFhirCapabilityStatementDocument);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirDocumentModeEnum, SYSTEMS_TFhirDocumentModeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
    if jsn.has('profile') then
        result.profile := ParseReference{TFhirStructureDefinition}(jsn.vObj['profile']);{q3}
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatementDocument(json : TJSONWriter; name : string; elem : TFhirCapabilityStatementDocument; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirDocumentModeEnum, false);
  ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirDocumentModeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  ComposeReference{TFhirStructureDefinition}(json, 'profile', elem.profile); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCapabilityStatement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCapabilityStatement(jsn)); {2}
end;

function TFHIRJsonParser.ParseCapabilityStatement(jsn : TJsonObject) : TFhirCapabilityStatement;
begin
  result := TFhirCapabilityStatement.create;
  try
    ParseCapabilityStatementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCapabilityStatementProperties(jsn : TJsonObject; result : TFhirCapabilityStatement);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirCapabilityStatementKindEnum, SYSTEMS_TFhirCapabilityStatementKindEnum);
      if jsn.has('instantiates') or jsn.has('_instantiates') then
      iteratePrimitiveArray(jsn.vArr['instantiates'], jsn.vArr['_instantiates'], result.instantiatesList, parseUri);
    if jsn.has('software') then
        result.software := ParseCapabilityStatementSoftware(jsn.vObj['software']);{q3}
    if jsn.has('implementation') then
        result.implementation_ := ParseCapabilityStatementImplementation(jsn.vObj['implementation']);{q3}
    if jsn.has('fhirVersion') or jsn.has('_fhirVersion') then
        result.fhirVersionElement := parseId(jsn.node['fhirVersion'], jsn.vObj['_fhirVersion']);{q}
    if jsn.has('acceptUnknown') or jsn.has('_acceptUnknown')  then
      result.acceptUnknownElement := parseEnum(jsn.path+'/acceptUnknown', jsn.node['acceptUnknown'], jsn.vObj['_acceptUnknown'], CODES_TFhirUnknownContentCodeEnum, SYSTEMS_TFhirUnknownContentCodeEnum);
      if jsn.has('format') or jsn.has('_format') then
      iteratePrimitiveArray(jsn.vArr['format'], jsn.vArr['_format'], result.formatList, parseCode);
      if jsn.has('patchFormat') or jsn.has('_patchFormat') then
      iteratePrimitiveArray(jsn.vArr['patchFormat'], jsn.vArr['_patchFormat'], result.patchFormatList, parseCode);
      if jsn.has('implementationGuide') or jsn.has('_implementationGuide') then
      iteratePrimitiveArray(jsn.vArr['implementationGuide'], jsn.vArr['_implementationGuide'], result.implementationGuideList, parseUri);
    if jsn.has('profile') then
      iterateArray(jsn.vArr['profile'], result.profileList, parseReference{TFhirStructureDefinition});
    if jsn.has('rest') then
      iterateArray(jsn.vArr['rest'], result.restList, parseCapabilityStatementRest);
    if jsn.has('messaging') then
      iterateArray(jsn.vArr['messaging'], result.messagingList, parseCapabilityStatementMessaging);
    if jsn.has('document') then
      iterateArray(jsn.vArr['document'], result.documentList, parseCapabilityStatementDocument);
end;

procedure TFHIRJsonComposer.ComposeCapabilityStatement(json : TJSONWriter; name : string; elem : TFhirCapabilityStatement; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirCapabilityStatementKindEnum, false);
  ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirCapabilityStatementKindEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiates') and (elem.instantiatesList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.instantiatesList.Count - 1 do
    begin
      ext := ext or ((elem.instantiatesList[i].id <> '') or (elem.instantiatesList[i].hasExtensionList) {no-comments or (elem.instantiatesList[i].hasComments)});
      val := val or (elem.instantiatesList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriValue(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_instantiates');
      for i := 0 to elem.instantiatesList.Count - 1 do
        ComposeUriProps(json, '',elem.instantiatesList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('software') then
    ComposeCapabilityStatementSoftware(json, 'software', elem.software); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('implementation_') then
    ComposeCapabilityStatementImplementation(json, 'implementation', elem.implementation_); {a}
  ComposeIdValue(json, 'fhirVersion', elem.fhirVersionElement, false);
  ComposeIdProps(json, 'fhirVersion', elem.fhirVersionElement, false);
  ComposeEnumValue(json, 'acceptUnknown', elem.AcceptUnknownElement, CODES_TFhirUnknownContentCodeEnum, false);
  ComposeEnumProps(json, 'acceptUnknown', elem.AcceptUnknownElement, CODES_TFhirUnknownContentCodeEnum, false);
  if (elem.formatList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.formatList.Count - 1 do
    begin
      ext := ext or ((elem.formatList[i].id <> '') or (elem.formatList[i].hasExtensionList) {no-comments or (elem.formatList[i].hasComments)});
      val := val or (elem.formatList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('format');
      for i := 0 to elem.formatList.Count - 1 do
        ComposeCodeValue(json, '',elem.formatList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_format');
      for i := 0 to elem.formatList.Count - 1 do
        ComposeCodeProps(json, '',elem.formatList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('patchFormat') and (elem.patchFormatList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.patchFormatList.Count - 1 do
    begin
      ext := ext or ((elem.patchFormatList[i].id <> '') or (elem.patchFormatList[i].hasExtensionList) {no-comments or (elem.patchFormatList[i].hasComments)});
      val := val or (elem.patchFormatList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('patchFormat');
      for i := 0 to elem.patchFormatList.Count - 1 do
        ComposeCodeValue(json, '',elem.patchFormatList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_patchFormat');
      for i := 0 to elem.patchFormatList.Count - 1 do
        ComposeCodeProps(json, '',elem.patchFormatList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('implementationGuide') and (elem.implementationGuideList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.implementationGuideList.Count - 1 do
    begin
      ext := ext or ((elem.implementationGuideList[i].id <> '') or (elem.implementationGuideList[i].hasExtensionList) {no-comments or (elem.implementationGuideList[i].hasComments)});
      val := val or (elem.implementationGuideList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('implementationGuide');
      for i := 0 to elem.implementationGuideList.Count - 1 do
        ComposeUriValue(json, '',elem.implementationGuideList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_implementationGuide');
      for i := 0 to elem.implementationGuideList.Count - 1 do
        ComposeUriProps(json, '',elem.implementationGuideList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('profile') and (elem.profileList.Count > 0) then
  begin
    json.valueArray('profile');
    for i := 0 to elem.profileList.Count - 1 do
      ComposeReference{TFhirStructureDefinition}(json, '', elem.profileList[i]); {z - Reference(StructureDefinition)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('rest') and (elem.restList.Count > 0) then
  begin
    json.valueArray('rest');
    for i := 0 to elem.restList.Count - 1 do
      ComposeCapabilityStatementRest(json, '', elem.restList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('messaging') and (elem.messagingList.Count > 0) then
  begin
    json.valueArray('messaging');
    for i := 0 to elem.messagingList.Count - 1 do
      ComposeCapabilityStatementMessaging(json, '', elem.messagingList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('document') and (elem.documentList.Count > 0) then
  begin
    json.valueArray('document');
    for i := 0 to elem.documentList.Count - 1 do
      ComposeCapabilityStatementDocument(json, '', elem.documentList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
procedure TFHIRJsonParser.ParseCarePlanActivity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCarePlanActivity(jsn)); {2}
end;

function TFHIRJsonParser.ParseCarePlanActivity(jsn : TJsonObject) : TFhirCarePlanActivity;
begin
  result := TFhirCarePlanActivity.create;
  try
    ParseCarePlanActivityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCarePlanActivityProperties(jsn : TJsonObject; result : TFhirCarePlanActivity);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('outcomeCodeableConcept') then
      iterateArray(jsn.vArr['outcomeCodeableConcept'], result.outcomeCodeableConceptList, parseCodeableConcept);
    if jsn.has('outcomeReference') then
      iterateArray(jsn.vArr['outcomeReference'], result.outcomeReferenceList, parseReference{TFhirReference});
    if jsn.has('progress') then
      iterateArray(jsn.vArr['progress'], result.progressList, parseAnnotation);
    if jsn.has('reference') then
        result.reference := ParseReference{Resource}(jsn.vObj['reference']);{q3}
    if jsn.has('detail') then
        result.detail := ParseCarePlanActivityDetail(jsn.vObj['detail']);{q3}
end;

procedure TFHIRJsonComposer.ComposeCarePlanActivity(json : TJSONWriter; name : string; elem : TFhirCarePlanActivity; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.outcomeCodeableConceptList.Count > 0) then
  begin
    json.valueArray('outcomeCodeableConcept');
    for i := 0 to elem.outcomeCodeableConceptList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.outcomeCodeableConceptList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.outcomeReferenceList.Count > 0) then
  begin
    json.valueArray('outcomeReference');
    for i := 0 to elem.outcomeReferenceList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.outcomeReferenceList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.progressList.Count > 0) then
  begin
    json.valueArray('progress');
    for i := 0 to elem.progressList.Count - 1 do
      ComposeAnnotation(json, '', elem.progressList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'reference', elem.reference); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCarePlanActivityDetail(json, 'detail', elem.detail); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCarePlanActivityDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCarePlanActivityDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseCarePlanActivityDetail(jsn : TJsonObject) : TFhirCarePlanActivityDetail;
begin
  result := TFhirCarePlanActivityDetail.create;
  try
    ParseCarePlanActivityDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCarePlanActivityDetailProperties(jsn : TJsonObject; result : TFhirCarePlanActivityDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('definition') then
        result.definition := ParseReference{Resource}(jsn.vObj['definition']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{TFhirCondition});
    if jsn.has('goal') then
      iterateArray(jsn.vArr['goal'], result.goalList, parseReference{TFhirGoal});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirCarePlanActivityStatusEnum, SYSTEMS_TFhirCarePlanActivityStatusEnum);
    if jsn.has('statusReason') or jsn.has('_statusReason') then
        result.statusReasonElement := parseString(jsn.node['statusReason'], jsn.vObj['_statusReason']);{q}
    if jsn.has('prohibited') or jsn.has('_prohibited') then
        result.prohibitedElement := parseBoolean(jsn.node['prohibited'], jsn.vObj['_prohibited']);{q}
    if jsn.has('scheduledTiming') {a4} then
      result.scheduled := ParseTiming(jsn.vObj['scheduledTiming']);
    if jsn.has('scheduledPeriod') {a4} then
      result.scheduled := ParsePeriod(jsn.vObj['scheduledPeriod']);
    if jsn.has('scheduledString') or jsn.has('_scheduledString') then
      result.scheduled := parseString(jsn.node['scheduledString'], jsn.vObj['_scheduledString']);
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], result.performerList, parseReference{Resource});
    if jsn.has('productCodeableConcept') {a4} then
      result.product := ParseCodeableConcept(jsn.vObj['productCodeableConcept']);
    if jsn.has('productReference') {a3} then
      result.product := ParseReference(jsn.vObj['productReference']);
    if jsn.has('dailyAmount') then
        result.dailyAmount := ParseQuantity(jsn.vObj['dailyAmount']);{q3}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
end;

procedure TFHIRJsonComposer.ComposeCarePlanActivityDetail(json : TJSONWriter; name : string; elem : TFhirCarePlanActivityDetail; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'definition', elem.definition); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soData]) and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.goalList.Count > 0) then
  begin
    json.valueArray('goal');
    for i := 0 to elem.goalList.Count - 1 do
      ComposeReference{TFhirGoal}(json, '', elem.goalList[i]); {z - Reference(Goal)}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirCarePlanActivityStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirCarePlanActivityStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'statusReason', elem.statusReasonElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'statusReason', elem.statusReasonElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.prohibited <> false)) then
    ComposeBooleanValue(json, 'prohibited', elem.prohibitedElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.prohibited <> false)) then
    ComposeBooleanProps(json, 'prohibited', elem.prohibitedElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.scheduled is TFhirTiming) then 
    ComposeTiming(json, 'scheduledTiming', TFhirTiming(elem.scheduled)) 
  else if (SummaryOption in [soFull, soData]) and (elem.scheduled is TFhirPeriod) then 
    ComposePeriod(json, 'scheduledPeriod', TFhirPeriod(elem.scheduled)) 
  else if (SummaryOption in [soFull, soData]) and (elem.scheduled is TFhirString) then 
  begin
    ComposeStringValue(json, 'scheduledString', TFhirString(elem.scheduled), false);
    ComposeStringProps(json, 'scheduledString', TFhirString(elem.scheduled), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if (SummaryOption in [soFull, soData]) and (elem.performerList.Count > 0) then
  begin
    json.valueArray('performer');
    for i := 0 to elem.performerList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.performerList[i]); {z - Reference(Practitioner|Organization|RelatedPerson|Patient|CareTeam)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.product is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'productCodeableConcept', TFhirCodeableConcept(elem.product)) 
  else if (SummaryOption in [soFull, soData]) and (elem.product is TFhirReference) then
    ComposeReference(json, 'productReference', TFhirReference(elem.product));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'dailyAmount', elem.dailyAmount); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCarePlan(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCarePlan(jsn)); {2}
end;

function TFHIRJsonParser.ParseCarePlan(jsn : TJsonObject) : TFhirCarePlan;
begin
  result := TFhirCarePlan.create;
  try
    ParseCarePlanProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCarePlanProperties(jsn : TJsonObject; result : TFhirCarePlan);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('definition') then
      iterateArray(jsn.vArr['definition'], result.definitionList, parseReference{Resource});
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirCarePlan});
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], result.replacesList, parseReference{TFhirCarePlan});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{TFhirCarePlan});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirCarePlanStatusEnum, SYSTEMS_TFhirCarePlanStatusEnum);
    if jsn.has('intent') or jsn.has('_intent')  then
      result.intentElement := parseEnum(jsn.path+'/intent', jsn.node['intent'], jsn.vObj['_intent'], CODES_TFhirCarePlanIntentEnum, SYSTEMS_TFhirCarePlanIntentEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], result.authorList, parseReference{Resource});
    if jsn.has('careTeam') then
      iterateArray(jsn.vArr['careTeam'], result.careTeamList, parseReference{TFhirCareTeam});
    if jsn.has('addresses') then
      iterateArray(jsn.vArr['addresses'], result.addressesList, parseReference{TFhirCondition});
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], result.supportingInfoList, parseReference{TFhirReference});
    if jsn.has('goal') then
      iterateArray(jsn.vArr['goal'], result.goalList, parseReference{TFhirGoal});
    if jsn.has('activity') then
      iterateArray(jsn.vArr['activity'], result.activityList, parseCarePlanActivity);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCarePlan(json : TJSONWriter; name : string; elem : TFhirCarePlan; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('definition') and (elem.definitionList.Count > 0) then
  begin
    json.valueArray('definition');
    for i := 0 to elem.definitionList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.definitionList[i]); {z - Reference(PlanDefinition|Questionnaire)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirCarePlan}(json, '', elem.basedOnList[i]); {z - Reference(CarePlan)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('replaces') and (elem.replacesList.Count > 0) then
  begin
    json.valueArray('replaces');
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirCarePlan}(json, '', elem.replacesList[i]); {z - Reference(CarePlan)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirCarePlan}(json, '', elem.partOfList[i]); {z - Reference(CarePlan)}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirCarePlanStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirCarePlanStatusEnum, false);
  ComposeEnumValue(json, 'intent', elem.IntentElement, CODES_TFhirCarePlanIntentEnum, false);
  ComposeEnumProps(json, 'intent', elem.IntentElement, CODES_TFhirCarePlanIntentEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') and (elem.authorList.Count > 0) then
  begin
    json.valueArray('author');
    for i := 0 to elem.authorList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.authorList[i]); {z - Reference(Patient|Practitioner|RelatedPerson|Organization|CareTeam)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('careTeam') and (elem.careTeamList.Count > 0) then
  begin
    json.valueArray('careTeam');
    for i := 0 to elem.careTeamList.Count - 1 do
      ComposeReference{TFhirCareTeam}(json, '', elem.careTeamList[i]); {z - Reference(CareTeam)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('addresses') and (elem.addressesList.Count > 0) then
  begin
    json.valueArray('addresses');
    for i := 0 to elem.addressesList.Count - 1 do
      ComposeReference{TFhirCondition}(json, '', elem.addressesList[i]); {z - Reference(Condition)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInfo') and (elem.supportingInfoList.Count > 0) then
  begin
    json.valueArray('supportingInfo');
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInfoList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('goal') and (elem.goalList.Count > 0) then
  begin
    json.valueArray('goal');
    for i := 0 to elem.goalList.Count - 1 do
      ComposeReference{TFhirGoal}(json, '', elem.goalList[i]); {z - Reference(Goal)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('activity') and (elem.activityList.Count > 0) then
  begin
    json.valueArray('activity');
    for i := 0 to elem.activityList.Count - 1 do
      ComposeCarePlanActivity(json, '', elem.activityList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
procedure TFHIRJsonParser.ParseCareTeamParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCareTeamParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParseCareTeamParticipant(jsn : TJsonObject) : TFhirCareTeamParticipant;
begin
  result := TFhirCareTeamParticipant.create;
  try
    ParseCareTeamParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCareTeamParticipantProperties(jsn : TJsonObject; result : TFhirCareTeamParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('member') then
        result.member := ParseReference{Resource}(jsn.vObj['member']);{q3}
    if jsn.has('onBehalfOf') then
        result.onBehalfOf := ParseReference{TFhirOrganization}(jsn.vObj['onBehalfOf']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeCareTeamParticipant(json : TJSONWriter; name : string; elem : TFhirCareTeamParticipant; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'member', elem.member); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'onBehalfOf', elem.onBehalfOf); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCareTeam(jsn)); {2}
end;

function TFHIRJsonParser.ParseCareTeam(jsn : TJsonObject) : TFhirCareTeam;
begin
  result := TFhirCareTeam.create;
  try
    ParseCareTeamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCareTeamProperties(jsn : TJsonObject; result : TFhirCareTeam);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirCareTeamStatusEnum, SYSTEMS_TFhirCareTeamStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseCareTeamParticipant);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{TFhirCondition});
    if jsn.has('managingOrganization') then
      iterateArray(jsn.vArr['managingOrganization'], result.managingOrganizationList, parseReference{TFhirOrganization});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCareTeam(json : TJSONWriter; name : string; elem : TFhirCareTeam; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirCareTeamStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirCareTeamStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('participant') and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeCareTeamParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('reasonCode') and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('managingOrganization') and (elem.managingOrganizationList.Count > 0) then
  begin
    json.valueArray('managingOrganization');
    for i := 0 to elem.managingOrganizationList.Count - 1 do
      ComposeReference{TFhirOrganization}(json, '', elem.managingOrganizationList[i]); {z - Reference(Organization)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CHARGEITEM}
procedure TFHIRJsonParser.ParseChargeItemParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseChargeItemParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParseChargeItemParticipant(jsn : TJsonObject) : TFhirChargeItemParticipant;
begin
  result := TFhirChargeItemParticipant.create;
  try
    ParseChargeItemParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseChargeItemParticipantProperties(jsn : TJsonObject; result : TFhirChargeItemParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
end;

procedure TFHIRJsonComposer.ComposeChargeItemParticipant(json : TJSONWriter; name : string; elem : TFhirChargeItemParticipant; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseChargeItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseChargeItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseChargeItem(jsn : TJsonObject) : TFhirChargeItem;
begin
  result := TFhirChargeItem.create;
  try
    ParseChargeItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseChargeItemProperties(jsn : TJsonObject; result : TFhirChargeItem);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
      if jsn.has('definition') or jsn.has('_definition') then
      iteratePrimitiveArray(jsn.vArr['definition'], jsn.vArr['_definition'], result.definitionList, parseUri);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirChargeitemStatusEnum, SYSTEMS_TFhirChargeitemStatusEnum);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{TFhirChargeItem});
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      result.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseChargeItemParticipant);
    if jsn.has('performingOrganization') then
        result.performingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['performingOrganization']);{q3}
    if jsn.has('requestingOrganization') then
        result.requestingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['requestingOrganization']);{q3}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('bodysite') then
      iterateArray(jsn.vArr['bodysite'], result.bodysiteList, parseCodeableConcept);
    if jsn.has('factorOverride') or jsn.has('_factorOverride') then
        result.factorOverrideElement := parseDecimal(jsn.node['factorOverride'], jsn.vObj['_factorOverride']);{q}
    if jsn.has('priceOverride') then
        result.priceOverride := ParseMoney(jsn.vObj['priceOverride']);{q3}
    if jsn.has('overrideReason') or jsn.has('_overrideReason') then
        result.overrideReasonElement := parseString(jsn.node['overrideReason'], jsn.vObj['_overrideReason']);{q}
    if jsn.has('enterer') then
        result.enterer := ParseReference{Resource}(jsn.vObj['enterer']);{q3}
    if jsn.has('enteredDate') or jsn.has('_enteredDate') then
        result.enteredDateElement := parseDateTime(jsn.node['enteredDate'], jsn.vObj['_enteredDate']);{q}
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], result.reasonList, parseCodeableConcept);
    if jsn.has('service') then
      iterateArray(jsn.vArr['service'], result.serviceList, parseReference{Resource});
    if jsn.has('account') then
      iterateArray(jsn.vArr['account'], result.accountList, parseReference{TFhirAccount});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], result.supportingInformationList, parseReference{TFhirReference});
end;

procedure TFHIRJsonComposer.ComposeChargeItem(json : TJSONWriter; name : string; elem : TFhirChargeItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('definition') and (elem.definitionList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.definitionList.Count - 1 do
    begin
      ext := ext or ((elem.definitionList[i].id <> '') or (elem.definitionList[i].hasExtensionList) {no-comments or (elem.definitionList[i].hasComments)});
      val := val or (elem.definitionList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('definition');
      for i := 0 to elem.definitionList.Count - 1 do
        ComposeUriValue(json, '',elem.definitionList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_definition');
      for i := 0 to elem.definitionList.Count - 1 do
        ComposeUriProps(json, '',elem.definitionList[i], true);
      json.FinishArray;
    end;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirChargeitemStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirChargeitemStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('partOf') and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirChargeItem}(json, '', elem.partOfList[i]); {z - Reference(ChargeItem)}
    json.FinishArray;
  end;
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(elem.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('participant') and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeChargeItemParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('performingOrganization') then
    ComposeReference{TFhirOrganization}(json, 'performingOrganization', elem.performingOrganization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('requestingOrganization') then
    ComposeReference{TFhirOrganization}(json, 'requestingOrganization', elem.requestingOrganization); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('quantity') then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('bodysite') and (elem.bodysiteList.Count > 0) then
  begin
    json.valueArray('bodysite');
    for i := 0 to elem.bodysiteList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.bodysiteList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('factorOverride') then
    ComposeDecimalValue(json, 'factorOverride', elem.factorOverrideElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('factorOverride') then
    ComposeDecimalProps(json, 'factorOverride', elem.factorOverrideElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('priceOverride') then
    ComposeMoney(json, 'priceOverride', elem.priceOverride); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('overrideReason') then
    ComposeStringValue(json, 'overrideReason', elem.overrideReasonElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('overrideReason') then
    ComposeStringProps(json, 'overrideReason', elem.overrideReasonElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('enterer') then
    ComposeReference{Resource}(json, 'enterer', elem.enterer); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('enteredDate') then
    ComposeDateTimeValue(json, 'enteredDate', elem.enteredDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('enteredDate') then
    ComposeDateTimeProps(json, 'enteredDate', elem.enteredDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('reason') and (elem.reasonList.Count > 0) then
  begin
    json.valueArray('reason');
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('service') and (elem.serviceList.Count > 0) then
  begin
    json.valueArray('service');
    for i := 0 to elem.serviceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.serviceList[i]); {z - Reference(DiagnosticReport|ImagingStudy|Immunization|MedicationAdministration|MedicationDispense|Observation|Procedure|SupplyDelivery)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('account') and (elem.accountList.Count > 0) then
  begin
    json.valueArray('account');
    for i := 0 to elem.accountList.Count - 1 do
      ComposeReference{TFhirAccount}(json, '', elem.accountList[i]); {z - Reference(Account)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInformation') and (elem.supportingInformationList.Count > 0) then
  begin
    json.valueArray('supportingInformation');
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInformationList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CLAIM}
procedure TFHIRJsonParser.ParseClaimRelated(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimRelated(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimRelated(jsn : TJsonObject) : TFhirClaimRelated;
begin
  result := TFhirClaimRelated.create;
  try
    ParseClaimRelatedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimRelatedProperties(jsn : TJsonObject; result : TFhirClaimRelated);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('claim') then
        result.claim := ParseReference{TFhirClaim}(jsn.vObj['claim']);{q3}
    if jsn.has('relationship') then
        result.relationship := ParseCodeableConcept(jsn.vObj['relationship']);{q3}
    if jsn.has('reference') then
        result.reference := ParseIdentifier(jsn.vObj['reference']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimRelated(json : TJSONWriter; name : string; elem : TFhirClaimRelated; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaim}(json, 'claim', elem.claim); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'relationship', elem.relationship); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'reference', elem.reference); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimPayee(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimPayee(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimPayee(jsn : TJsonObject) : TFhirClaimPayee;
begin
  result := TFhirClaimPayee.create;
  try
    ParseClaimPayeeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimPayeeProperties(jsn : TJsonObject; result : TFhirClaimPayee);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('resourceType') then
        result.resourceType := ParseCoding(jsn.vObj['resourceType']);{q3}
    if jsn.has('party') then
        result.party := ParseReference{Resource}(jsn.vObj['party']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimPayee(json : TJSONWriter; name : string; elem : TFhirClaimPayee; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'resourceType', elem.resourceType); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'party', elem.party); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimCareTeam(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimCareTeam(jsn : TJsonObject) : TFhirClaimCareTeam;
begin
  result := TFhirClaimCareTeam.create;
  try
    ParseClaimCareTeamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimCareTeamProperties(jsn : TJsonObject; result : TFhirClaimCareTeam);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('provider') then
        result.provider := ParseReference{Resource}(jsn.vObj['provider']);{q3}
    if jsn.has('responsible') or jsn.has('_responsible') then
        result.responsibleElement := parseBoolean(jsn.node['responsible'], jsn.vObj['_responsible']);{q}
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('qualification') then
        result.qualification := ParseCodeableConcept(jsn.vObj['qualification']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimCareTeam(json : TJSONWriter; name : string; elem : TFhirClaimCareTeam; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  ComposeReference{Resource}(json, 'provider', elem.provider); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'responsible', elem.responsibleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'responsible', elem.responsibleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'qualification', elem.qualification); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimInformation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimInformation(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimInformation(jsn : TJsonObject) : TFhirClaimInformation;
begin
  result := TFhirClaimInformation.create;
  try
    ParseClaimInformationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimInformationProperties(jsn : TJsonObject; result : TFhirClaimInformation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('timingPeriod') {a4} then
      result.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDate') or jsn.has('_timingDate') then
      result.timing := parseDate(jsn.node['timingDate'], jsn.vObj['_timingDate']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueReference') {a3} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('reason') then
        result.reason := ParseCodeableConcept(jsn.vObj['reason']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimInformation(json : TJSONWriter; name : string; elem : TFhirClaimInformation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDate) then 
  begin
    ComposeDateValue(json, 'timingDate', TFhirDate(elem.timing), false);
    ComposeDateProps(json, 'timingDate', TFhirDate(elem.timing), false);
  end;
  if (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirReference) then
    ComposeReference(json, 'valueReference', TFhirReference(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reason', elem.reason); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimDiagnosis(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimDiagnosis(jsn : TJsonObject) : TFhirClaimDiagnosis;
begin
  result := TFhirClaimDiagnosis.create;
  try
    ParseClaimDiagnosisProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimDiagnosisProperties(jsn : TJsonObject; result : TFhirClaimDiagnosis);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('diagnosisCodeableConcept') {a4} then
      result.diagnosis := ParseCodeableConcept(jsn.vObj['diagnosisCodeableConcept']);
    if jsn.has('diagnosisReference') {a3} then
      result.diagnosis := ParseReference(jsn.vObj['diagnosisReference']);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('packageCode') then
        result.packageCode := ParseCodeableConcept(jsn.vObj['packageCode']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimDiagnosis(json : TJSONWriter; name : string; elem : TFhirClaimDiagnosis; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if (elem.diagnosis is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'diagnosisCodeableConcept', TFhirCodeableConcept(elem.diagnosis)) 
  else if (elem.diagnosis is TFhirReference) then
    ComposeReference(json, 'diagnosisReference', TFhirReference(elem.diagnosis));
  if (SummaryOption in [soFull, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'packageCode', elem.packageCode); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimProcedure(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimProcedure(jsn : TJsonObject) : TFhirClaimProcedure;
begin
  result := TFhirClaimProcedure.create;
  try
    ParseClaimProcedureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimProcedureProperties(jsn : TJsonObject; result : TFhirClaimProcedure);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('procedureCodeableConcept') {a4} then
      result.procedure_ := ParseCodeableConcept(jsn.vObj['procedureCodeableConcept']);
    if jsn.has('procedureReference') {a3} then
      result.procedure_ := ParseReference(jsn.vObj['procedureReference']);
end;

procedure TFHIRJsonComposer.ComposeClaimProcedure(json : TJSONWriter; name : string; elem : TFhirClaimProcedure; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (elem.procedure_ is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'procedureCodeableConcept', TFhirCodeableConcept(elem.procedure_)) 
  else if (elem.procedure_ is TFhirReference) then
    ComposeReference(json, 'procedureReference', TFhirReference(elem.procedure_));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimInsurance(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimInsurance(jsn : TJsonObject) : TFhirClaimInsurance;
begin
  result := TFhirClaimInsurance.create;
  try
    ParseClaimInsuranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimInsuranceProperties(jsn : TJsonObject; result : TFhirClaimInsurance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('focal') or jsn.has('_focal') then
        result.focalElement := parseBoolean(jsn.node['focal'], jsn.vObj['_focal']);{q}
    if jsn.has('coverage') then
        result.coverage := ParseReference{TFhirCoverage}(jsn.vObj['coverage']);{q3}
    if jsn.has('businessArrangement') or jsn.has('_businessArrangement') then
        result.businessArrangementElement := parseString(jsn.node['businessArrangement'], jsn.vObj['_businessArrangement']);{q}
      if jsn.has('preAuthRef') or jsn.has('_preAuthRef') then
      iteratePrimitiveArray(jsn.vArr['preAuthRef'], jsn.vArr['_preAuthRef'], result.preAuthRefList, parseString);
    if jsn.has('claimResponse') then
        result.claimResponse := ParseReference{TFhirClaimResponse}(jsn.vObj['claimResponse']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimInsurance(json : TJSONWriter; name : string; elem : TFhirClaimInsurance; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  ComposeBooleanValue(json, 'focal', elem.focalElement, false);
  ComposeBooleanProps(json, 'focal', elem.focalElement, false);
  ComposeReference{TFhirCoverage}(json, 'coverage', elem.coverage); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'businessArrangement', elem.businessArrangementElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'businessArrangement', elem.businessArrangementElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.preAuthRefList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.preAuthRefList.Count - 1 do
    begin
      ext := ext or ((elem.preAuthRefList[i].id <> '') or (elem.preAuthRefList[i].hasExtensionList) {no-comments or (elem.preAuthRefList[i].hasComments)});
      val := val or (elem.preAuthRefList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('preAuthRef');
      for i := 0 to elem.preAuthRefList.Count - 1 do
        ComposeStringValue(json, '',elem.preAuthRefList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_preAuthRef');
      for i := 0 to elem.preAuthRefList.Count - 1 do
        ComposeStringProps(json, '',elem.preAuthRefList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaimResponse}(json, 'claimResponse', elem.claimResponse); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimAccident(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimAccident(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimAccident(jsn : TJsonObject) : TFhirClaimAccident;
begin
  result := TFhirClaimAccident.create;
  try
    ParseClaimAccidentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimAccidentProperties(jsn : TJsonObject; result : TFhirClaimAccident);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDate(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('locationAddress') {a4} then
      result.location := ParseAddress(jsn.vObj['locationAddress']);
    if jsn.has('locationReference') {a3} then
      result.location := ParseReference(jsn.vObj['locationReference']);
end;

procedure TFHIRJsonComposer.ComposeClaimAccident(json : TJSONWriter; name : string; elem : TFhirClaimAccident; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeDateValue(json, 'date', elem.dateElement, false);
  ComposeDateProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) and (elem.location is TFhirAddress) then 
    ComposeAddress(json, 'locationAddress', TFhirAddress(elem.location)) 
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirReference) then
    ComposeReference(json, 'locationReference', TFhirReference(elem.location));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimItem(jsn : TJsonObject) : TFhirClaimItem;
begin
  result := TFhirClaimItem.create;
  try
    ParseClaimItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimItemProperties(jsn : TJsonObject; result : TFhirClaimItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
      if jsn.has('careTeamLinkId') or jsn.has('_careTeamLinkId') then
      iteratePrimitiveArray(jsn.vArr['careTeamLinkId'], jsn.vArr['_careTeamLinkId'], result.careTeamLinkIdList, parsePositiveInt);
      if jsn.has('diagnosisLinkId') or jsn.has('_diagnosisLinkId') then
      iteratePrimitiveArray(jsn.vArr['diagnosisLinkId'], jsn.vArr['_diagnosisLinkId'], result.diagnosisLinkIdList, parsePositiveInt);
      if jsn.has('procedureLinkId') or jsn.has('_procedureLinkId') then
      iteratePrimitiveArray(jsn.vArr['procedureLinkId'], jsn.vArr['_procedureLinkId'], result.procedureLinkIdList, parsePositiveInt);
      if jsn.has('informationLinkId') or jsn.has('_informationLinkId') then
      iteratePrimitiveArray(jsn.vArr['informationLinkId'], jsn.vArr['_informationLinkId'], result.informationLinkIdList, parsePositiveInt);
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], result.programCodeList, parseCodeableConcept);
    if jsn.has('servicedPeriod') {a4} then
      result.serviced := ParsePeriod(jsn.vObj['servicedPeriod']);
    if jsn.has('servicedDate') or jsn.has('_servicedDate') then
      result.serviced := parseDate(jsn.node['servicedDate'], jsn.vObj['_servicedDate']);
    if jsn.has('locationCodeableConcept') {a4} then
      result.location := ParseCodeableConcept(jsn.vObj['locationCodeableConcept']);
    if jsn.has('locationAddress') {a4} then
      result.location := ParseAddress(jsn.vObj['locationAddress']);
    if jsn.has('locationReference') {a3} then
      result.location := ParseReference(jsn.vObj['locationReference']);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], result.udiList, parseReference{TFhirDevice});
    if jsn.has('bodySite') then
        result.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);{q3}
    if jsn.has('subSite') then
      iterateArray(jsn.vArr['subSite'], result.subSiteList, parseCodeableConcept);
    if jsn.has('encounter') then
      iterateArray(jsn.vArr['encounter'], result.encounterList, parseReference{TFhirEncounter});
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parseClaimItemDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimItem(json : TJSONWriter; name : string; elem : TFhirClaimItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.careTeamLinkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.careTeamLinkIdList.Count - 1 do
    begin
      ext := ext or ((elem.careTeamLinkIdList[i].id <> '') or (elem.careTeamLinkIdList[i].hasExtensionList) {no-comments or (elem.careTeamLinkIdList[i].hasComments)});
      val := val or (elem.careTeamLinkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('careTeamLinkId');
      for i := 0 to elem.careTeamLinkIdList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.careTeamLinkIdList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_careTeamLinkId');
      for i := 0 to elem.careTeamLinkIdList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.careTeamLinkIdList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.diagnosisLinkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.diagnosisLinkIdList.Count - 1 do
    begin
      ext := ext or ((elem.diagnosisLinkIdList[i].id <> '') or (elem.diagnosisLinkIdList[i].hasExtensionList) {no-comments or (elem.diagnosisLinkIdList[i].hasComments)});
      val := val or (elem.diagnosisLinkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('diagnosisLinkId');
      for i := 0 to elem.diagnosisLinkIdList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.diagnosisLinkIdList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_diagnosisLinkId');
      for i := 0 to elem.diagnosisLinkIdList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.diagnosisLinkIdList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.procedureLinkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.procedureLinkIdList.Count - 1 do
    begin
      ext := ext or ((elem.procedureLinkIdList[i].id <> '') or (elem.procedureLinkIdList[i].hasExtensionList) {no-comments or (elem.procedureLinkIdList[i].hasComments)});
      val := val or (elem.procedureLinkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('procedureLinkId');
      for i := 0 to elem.procedureLinkIdList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.procedureLinkIdList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_procedureLinkId');
      for i := 0 to elem.procedureLinkIdList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.procedureLinkIdList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.informationLinkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.informationLinkIdList.Count - 1 do
    begin
      ext := ext or ((elem.informationLinkIdList[i].id <> '') or (elem.informationLinkIdList[i].hasExtensionList) {no-comments or (elem.informationLinkIdList[i].hasComments)});
      val := val or (elem.informationLinkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('informationLinkId');
      for i := 0 to elem.informationLinkIdList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.informationLinkIdList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_informationLinkId');
      for i := 0 to elem.informationLinkIdList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.informationLinkIdList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.programCodeList.Count > 0) then
  begin
    json.valueArray('programCode');
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.programCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirPeriod) then 
    ComposePeriod(json, 'servicedPeriod', TFhirPeriod(elem.serviced)) 
  else if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirDate) then 
  begin
    ComposeDateValue(json, 'servicedDate', TFhirDate(elem.serviced), false);
    ComposeDateProps(json, 'servicedDate', TFhirDate(elem.serviced), false);
  end;
  if (SummaryOption in [soFull, soData]) and (elem.location is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'locationCodeableConcept', TFhirCodeableConcept(elem.location)) 
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirAddress) then 
    ComposeAddress(json, 'locationAddress', TFhirAddress(elem.location)) 
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirReference) then
    ComposeReference(json, 'locationReference', TFhirReference(elem.location));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if (SummaryOption in [soFull, soData]) and (elem.udiList.Count > 0) then
  begin
    json.valueArray('udi');
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(json, '', elem.udiList[i]); {z - Reference(Device)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'bodySite', elem.bodySite); {a}
  if (SummaryOption in [soFull, soData]) and (elem.subSiteList.Count > 0) then
  begin
    json.valueArray('subSite');
    for i := 0 to elem.subSiteList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.subSiteList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.encounterList.Count > 0) then
  begin
    json.valueArray('encounter');
    for i := 0 to elem.encounterList.Count - 1 do
      ComposeReference{TFhirEncounter}(json, '', elem.encounterList[i]); {z - Reference(Encounter)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposeClaimItemDetail(json, '', elem.detailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimItemDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimItemDetail(jsn : TJsonObject) : TFhirClaimItemDetail;
begin
  result := TFhirClaimItemDetail.create;
  try
    ParseClaimItemDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimItemDetailProperties(jsn : TJsonObject; result : TFhirClaimItemDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], result.programCodeList, parseCodeableConcept);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], result.udiList, parseReference{TFhirDevice});
    if jsn.has('subDetail') then
      iterateArray(jsn.vArr['subDetail'], result.subDetailList, parseClaimItemDetailSubDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimItemDetail(json : TJSONWriter; name : string; elem : TFhirClaimItemDetail; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.programCodeList.Count > 0) then
  begin
    json.valueArray('programCode');
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.programCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if (SummaryOption in [soFull, soData]) and (elem.udiList.Count > 0) then
  begin
    json.valueArray('udi');
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(json, '', elem.udiList[i]); {z - Reference(Device)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.subDetailList.Count > 0) then
  begin
    json.valueArray('subDetail');
    for i := 0 to elem.subDetailList.Count - 1 do
      ComposeClaimItemDetailSubDetail(json, '', elem.subDetailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimItemDetailSubDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimItemDetailSubDetail(jsn : TJsonObject) : TFhirClaimItemDetailSubDetail;
begin
  result := TFhirClaimItemDetailSubDetail.create;
  try
    ParseClaimItemDetailSubDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimItemDetailSubDetailProperties(jsn : TJsonObject; result : TFhirClaimItemDetailSubDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], result.programCodeList, parseCodeableConcept);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], result.udiList, parseReference{TFhirDevice});
end;

procedure TFHIRJsonComposer.ComposeClaimItemDetailSubDetail(json : TJSONWriter; name : string; elem : TFhirClaimItemDetailSubDetail; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.programCodeList.Count > 0) then
  begin
    json.valueArray('programCode');
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.programCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if (SummaryOption in [soFull, soData]) and (elem.udiList.Count > 0) then
  begin
    json.valueArray('udi');
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(json, '', elem.udiList[i]); {z - Reference(Device)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaim(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaim(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaim(jsn : TJsonObject) : TFhirClaim;
begin
  result := TFhirClaim.create;
  try
    ParseClaimProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimProperties(jsn : TJsonObject; result : TFhirClaim);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('subType') then
      iterateArray(jsn.vArr['subType'], result.subTypeList, parseCodeableConcept);
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirClaimUseEnum, SYSTEMS_TFhirClaimUseEnum);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('billablePeriod') then
        result.billablePeriod := ParsePeriod(jsn.vObj['billablePeriod']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('enterer') then
        result.enterer := ParseReference{TFhirPractitioner}(jsn.vObj['enterer']);{q3}
    if jsn.has('insurer') then
        result.insurer := ParseReference{TFhirOrganization}(jsn.vObj['insurer']);{q3}
    if jsn.has('provider') then
        result.provider := ParseReference{TFhirPractitioner}(jsn.vObj['provider']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('priority') then
        result.priority := ParseCodeableConcept(jsn.vObj['priority']);{q3}
    if jsn.has('fundsReserve') then
        result.fundsReserve := ParseCodeableConcept(jsn.vObj['fundsReserve']);{q3}
    if jsn.has('related') then
      iterateArray(jsn.vArr['related'], result.relatedList, parseClaimRelated);
    if jsn.has('prescription') then
        result.prescription := ParseReference{Resource}(jsn.vObj['prescription']);{q3}
    if jsn.has('originalPrescription') then
        result.originalPrescription := ParseReference{TFhirMedicationRequest}(jsn.vObj['originalPrescription']);{q3}
    if jsn.has('payee') then
        result.payee := ParseClaimPayee(jsn.vObj['payee']);{q3}
    if jsn.has('referral') then
        result.referral := ParseReference{TFhirReferralRequest}(jsn.vObj['referral']);{q3}
    if jsn.has('facility') then
        result.facility := ParseReference{TFhirLocation}(jsn.vObj['facility']);{q3}
    if jsn.has('careTeam') then
      iterateArray(jsn.vArr['careTeam'], result.careTeamList, parseClaimCareTeam);
    if jsn.has('information') then
      iterateArray(jsn.vArr['information'], result.informationList, parseClaimInformation);
    if jsn.has('diagnosis') then
      iterateArray(jsn.vArr['diagnosis'], result.diagnosisList, parseClaimDiagnosis);
    if jsn.has('procedure') then
      iterateArray(jsn.vArr['procedure'], result.procedure_List, parseClaimProcedure);
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], result.insuranceList, parseClaimInsurance);
    if jsn.has('accident') then
        result.accident := ParseClaimAccident(jsn.vObj['accident']);{q3}
    if jsn.has('employmentImpacted') then
        result.employmentImpacted := ParsePeriod(jsn.vObj['employmentImpacted']);{q3}
    if jsn.has('hospitalization') then
        result.hospitalization := ParsePeriod(jsn.vObj['hospitalization']);{q3}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseClaimItem);
    if jsn.has('total') then
        result.total := ParseMoney(jsn.vObj['total']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaim(json : TJSONWriter; name : string; elem : TFhirClaim; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('subType') and (elem.subTypeList.Count > 0) then
  begin
    json.valueArray('subType');
    for i := 0 to elem.subTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.subTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('use') then
    ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirClaimUseEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('use') then
    ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirClaimUseEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('billablePeriod') then
    ComposePeriod(json, 'billablePeriod', elem.billablePeriod); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('enterer') then
    ComposeReference{TFhirPractitioner}(json, 'enterer', elem.enterer); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('insurer') then
    ComposeReference{TFhirOrganization}(json, 'insurer', elem.insurer); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('provider') then
    ComposeReference{TFhirPractitioner}(json, 'provider', elem.provider); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('organization') then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('priority') then
    ComposeCodeableConcept(json, 'priority', elem.priority); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('fundsReserve') then
    ComposeCodeableConcept(json, 'fundsReserve', elem.fundsReserve); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('related') and (elem.relatedList.Count > 0) then
  begin
    json.valueArray('related');
    for i := 0 to elem.relatedList.Count - 1 do
      ComposeClaimRelated(json, '', elem.relatedList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('prescription') then
    ComposeReference{Resource}(json, 'prescription', elem.prescription); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('originalPrescription') then
    ComposeReference{TFhirMedicationRequest}(json, 'originalPrescription', elem.originalPrescription); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('payee') then
    ComposeClaimPayee(json, 'payee', elem.payee); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('referral') then
    ComposeReference{TFhirReferralRequest}(json, 'referral', elem.referral); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('facility') then
    ComposeReference{TFhirLocation}(json, 'facility', elem.facility); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('careTeam') and (elem.careTeamList.Count > 0) then
  begin
    json.valueArray('careTeam');
    for i := 0 to elem.careTeamList.Count - 1 do
      ComposeClaimCareTeam(json, '', elem.careTeamList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('information') and (elem.informationList.Count > 0) then
  begin
    json.valueArray('information');
    for i := 0 to elem.informationList.Count - 1 do
      ComposeClaimInformation(json, '', elem.informationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('diagnosis') and (elem.diagnosisList.Count > 0) then
  begin
    json.valueArray('diagnosis');
    for i := 0 to elem.diagnosisList.Count - 1 do
      ComposeClaimDiagnosis(json, '', elem.diagnosisList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('procedure_') and (elem.procedure_List.Count > 0) then
  begin
    json.valueArray('procedure');
    for i := 0 to elem.procedure_List.Count - 1 do
      ComposeClaimProcedure(json, '', elem.procedure_List[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('insurance') and (elem.insuranceList.Count > 0) then
  begin
    json.valueArray('insurance');
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeClaimInsurance(json, '', elem.insuranceList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('accident') then
    ComposeClaimAccident(json, 'accident', elem.accident); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('employmentImpacted') then
    ComposePeriod(json, 'employmentImpacted', elem.employmentImpacted); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('hospitalization') then
    ComposePeriod(json, 'hospitalization', elem.hospitalization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('item') and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeClaimItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('total') then
    ComposeMoney(json, 'total', elem.total); {a}
end;

{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
procedure TFHIRJsonParser.ParseClaimResponseItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseItem(jsn : TJsonObject) : TFhirClaimResponseItem;
begin
  result := TFhirClaimResponseItem.create;
  try
    ParseClaimResponseItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemProperties(jsn : TJsonObject; result : TFhirClaimResponseItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequenceLinkId') or jsn.has('_sequenceLinkId') then
        result.sequenceLinkIdElement := parsePositiveInt(jsn.node['sequenceLinkId'], jsn.vObj['_sequenceLinkId']);{q}
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseClaimResponseItemAdjudication);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parseClaimResponseItemDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseItem(json : TJSONWriter; name : string; elem : TFhirClaimResponseItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequenceLinkId', elem.sequenceLinkIdElement, false);
  ComposePositiveIntProps(json, 'sequenceLinkId', elem.sequenceLinkIdElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', elem.adjudicationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposeClaimResponseItemDetail(json, '', elem.detailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemAdjudication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseItemAdjudication(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseItemAdjudication(jsn : TJsonObject) : TFhirClaimResponseItemAdjudication;
begin
  result := TFhirClaimResponseItemAdjudication.create;
  try
    ParseClaimResponseItemAdjudicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemAdjudicationProperties(jsn : TJsonObject; result : TFhirClaimResponseItemAdjudication);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('reason') then
        result.reason := ParseCodeableConcept(jsn.vObj['reason']);{q3}
    if jsn.has('amount') then
        result.amount := ParseMoney(jsn.vObj['amount']);{q3}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseDecimal(jsn.node['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeClaimResponseItemAdjudication(json : TJSONWriter; name : string; elem : TFhirClaimResponseItemAdjudication; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reason', elem.reason); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', elem.amount); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'value', elem.valueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseItemDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseItemDetail(jsn : TJsonObject) : TFhirClaimResponseItemDetail;
begin
  result := TFhirClaimResponseItemDetail.create;
  try
    ParseClaimResponseItemDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemDetailProperties(jsn : TJsonObject; result : TFhirClaimResponseItemDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequenceLinkId') or jsn.has('_sequenceLinkId') then
        result.sequenceLinkIdElement := parsePositiveInt(jsn.node['sequenceLinkId'], jsn.vObj['_sequenceLinkId']);{q}
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseClaimResponseItemAdjudication);
    if jsn.has('subDetail') then
      iterateArray(jsn.vArr['subDetail'], result.subDetailList, parseClaimResponseItemDetailSubDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseItemDetail(json : TJSONWriter; name : string; elem : TFhirClaimResponseItemDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequenceLinkId', elem.sequenceLinkIdElement, false);
  ComposePositiveIntProps(json, 'sequenceLinkId', elem.sequenceLinkIdElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', elem.adjudicationList[i]); {z - @ClaimResponse.item.adjudication}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.subDetailList.Count > 0) then
  begin
    json.valueArray('subDetail');
    for i := 0 to elem.subDetailList.Count - 1 do
      ComposeClaimResponseItemDetailSubDetail(json, '', elem.subDetailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseItemDetailSubDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseItemDetailSubDetail(jsn : TJsonObject) : TFhirClaimResponseItemDetailSubDetail;
begin
  result := TFhirClaimResponseItemDetailSubDetail.create;
  try
    ParseClaimResponseItemDetailSubDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseItemDetailSubDetailProperties(jsn : TJsonObject; result : TFhirClaimResponseItemDetailSubDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequenceLinkId') or jsn.has('_sequenceLinkId') then
        result.sequenceLinkIdElement := parsePositiveInt(jsn.node['sequenceLinkId'], jsn.vObj['_sequenceLinkId']);{q}
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseClaimResponseItemAdjudication);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseItemDetailSubDetail(json : TJSONWriter; name : string; elem : TFhirClaimResponseItemDetailSubDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequenceLinkId', elem.sequenceLinkIdElement, false);
  ComposePositiveIntProps(json, 'sequenceLinkId', elem.sequenceLinkIdElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', elem.adjudicationList[i]); {z - @ClaimResponse.item.adjudication}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseAddItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseAddItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseAddItem(jsn : TJsonObject) : TFhirClaimResponseAddItem;
begin
  result := TFhirClaimResponseAddItem.create;
  try
    ParseClaimResponseAddItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseAddItemProperties(jsn : TJsonObject; result : TFhirClaimResponseAddItem);
begin
    ParseBackboneElementProperties(jsn, result);
      if jsn.has('sequenceLinkId') or jsn.has('_sequenceLinkId') then
      iteratePrimitiveArray(jsn.vArr['sequenceLinkId'], jsn.vArr['_sequenceLinkId'], result.sequenceLinkIdList, parsePositiveInt);
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('fee') then
        result.fee := ParseMoney(jsn.vObj['fee']);{q3}
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseClaimResponseItemAdjudication);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parseClaimResponseAddItemDetail);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseAddItem(json : TJSONWriter; name : string; elem : TFhirClaimResponseAddItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.sequenceLinkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.sequenceLinkIdList.Count - 1 do
    begin
      ext := ext or ((elem.sequenceLinkIdList[i].id <> '') or (elem.sequenceLinkIdList[i].hasExtensionList) {no-comments or (elem.sequenceLinkIdList[i].hasComments)});
      val := val or (elem.sequenceLinkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('sequenceLinkId');
      for i := 0 to elem.sequenceLinkIdList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.sequenceLinkIdList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_sequenceLinkId');
      for i := 0 to elem.sequenceLinkIdList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.sequenceLinkIdList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'fee', elem.fee); {a}
  if (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', elem.adjudicationList[i]); {z - @ClaimResponse.item.adjudication}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposeClaimResponseAddItemDetail(json, '', elem.detailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseAddItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseAddItemDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseAddItemDetail(jsn : TJsonObject) : TFhirClaimResponseAddItemDetail;
begin
  result := TFhirClaimResponseAddItemDetail.create;
  try
    ParseClaimResponseAddItemDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseAddItemDetailProperties(jsn : TJsonObject; result : TFhirClaimResponseAddItemDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('fee') then
        result.fee := ParseMoney(jsn.vObj['fee']);{q3}
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseClaimResponseItemAdjudication);
end;

procedure TFHIRJsonComposer.ComposeClaimResponseAddItemDetail(json : TJSONWriter; name : string; elem : TFhirClaimResponseAddItemDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'fee', elem.fee); {a}
  if (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(json, '', elem.adjudicationList[i]); {z - @ClaimResponse.item.adjudication}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseError(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseError(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseError(jsn : TJsonObject) : TFhirClaimResponseError;
begin
  result := TFhirClaimResponseError.create;
  try
    ParseClaimResponseErrorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseErrorProperties(jsn : TJsonObject; result : TFhirClaimResponseError);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequenceLinkId') or jsn.has('_sequenceLinkId') then
        result.sequenceLinkIdElement := parsePositiveInt(jsn.node['sequenceLinkId'], jsn.vObj['_sequenceLinkId']);{q}
    if jsn.has('detailSequenceLinkId') or jsn.has('_detailSequenceLinkId') then
        result.detailSequenceLinkIdElement := parsePositiveInt(jsn.node['detailSequenceLinkId'], jsn.vObj['_detailSequenceLinkId']);{q}
    if jsn.has('subdetailSequenceLinkId') or jsn.has('_subdetailSequenceLinkId') then
        result.subdetailSequenceLinkIdElement := parsePositiveInt(jsn.node['subdetailSequenceLinkId'], jsn.vObj['_subdetailSequenceLinkId']);{q}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimResponseError(json : TJSONWriter; name : string; elem : TFhirClaimResponseError; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'sequenceLinkId', elem.sequenceLinkIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'sequenceLinkId', elem.sequenceLinkIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'detailSequenceLinkId', elem.detailSequenceLinkIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'detailSequenceLinkId', elem.detailSequenceLinkIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'subdetailSequenceLinkId', elem.subdetailSequenceLinkIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'subdetailSequenceLinkId', elem.subdetailSequenceLinkIdElement, false);
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponsePayment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponsePayment(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponsePayment(jsn : TJsonObject) : TFhirClaimResponsePayment;
begin
  result := TFhirClaimResponsePayment.create;
  try
    ParseClaimResponsePaymentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponsePaymentProperties(jsn : TJsonObject; result : TFhirClaimResponsePayment);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('adjustment') then
        result.adjustment := ParseMoney(jsn.vObj['adjustment']);{q3}
    if jsn.has('adjustmentReason') then
        result.adjustmentReason := ParseCodeableConcept(jsn.vObj['adjustmentReason']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDate(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('amount') then
        result.amount := ParseMoney(jsn.vObj['amount']);{q3}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimResponsePayment(json : TJSONWriter; name : string; elem : TFhirClaimResponsePayment; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'adjustment', elem.adjustment); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'adjustmentReason', elem.adjustmentReason); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', elem.amount); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseProcessNote(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseProcessNote(jsn : TJsonObject) : TFhirClaimResponseProcessNote;
begin
  result := TFhirClaimResponseProcessNote.create;
  try
    ParseClaimResponseProcessNoteProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseProcessNoteProperties(jsn : TJsonObject; result : TFhirClaimResponseProcessNote);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('number') or jsn.has('_number') then
        result.numberElement := parsePositiveInt(jsn.node['number'], jsn.vObj['_number']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);{q}
    if jsn.has('language') then
        result.language := ParseCodeableConcept(jsn.vObj['language']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimResponseProcessNote(json : TJSONWriter; name : string; elem : TFhirClaimResponseProcessNote; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'number', elem.numberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'number', elem.numberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'language', elem.language); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponseInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponseInsurance(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponseInsurance(jsn : TJsonObject) : TFhirClaimResponseInsurance;
begin
  result := TFhirClaimResponseInsurance.create;
  try
    ParseClaimResponseInsuranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseInsuranceProperties(jsn : TJsonObject; result : TFhirClaimResponseInsurance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('focal') or jsn.has('_focal') then
        result.focalElement := parseBoolean(jsn.node['focal'], jsn.vObj['_focal']);{q}
    if jsn.has('coverage') then
        result.coverage := ParseReference{TFhirCoverage}(jsn.vObj['coverage']);{q3}
    if jsn.has('businessArrangement') or jsn.has('_businessArrangement') then
        result.businessArrangementElement := parseString(jsn.node['businessArrangement'], jsn.vObj['_businessArrangement']);{q}
      if jsn.has('preAuthRef') or jsn.has('_preAuthRef') then
      iteratePrimitiveArray(jsn.vArr['preAuthRef'], jsn.vArr['_preAuthRef'], result.preAuthRefList, parseString);
    if jsn.has('claimResponse') then
        result.claimResponse := ParseReference{TFhirClaimResponse}(jsn.vObj['claimResponse']);{q3}
end;

procedure TFHIRJsonComposer.ComposeClaimResponseInsurance(json : TJSONWriter; name : string; elem : TFhirClaimResponseInsurance; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  ComposeBooleanValue(json, 'focal', elem.focalElement, false);
  ComposeBooleanProps(json, 'focal', elem.focalElement, false);
  ComposeReference{TFhirCoverage}(json, 'coverage', elem.coverage); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'businessArrangement', elem.businessArrangementElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'businessArrangement', elem.businessArrangementElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.preAuthRefList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.preAuthRefList.Count - 1 do
    begin
      ext := ext or ((elem.preAuthRefList[i].id <> '') or (elem.preAuthRefList[i].hasExtensionList) {no-comments or (elem.preAuthRefList[i].hasComments)});
      val := val or (elem.preAuthRefList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('preAuthRef');
      for i := 0 to elem.preAuthRefList.Count - 1 do
        ComposeStringValue(json, '',elem.preAuthRefList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_preAuthRef');
      for i := 0 to elem.preAuthRefList.Count - 1 do
        ComposeStringProps(json, '',elem.preAuthRefList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaimResponse}(json, 'claimResponse', elem.claimResponse); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClaimResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClaimResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseClaimResponse(jsn : TJsonObject) : TFhirClaimResponse;
begin
  result := TFhirClaimResponse.create;
  try
    ParseClaimResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClaimResponseProperties(jsn : TJsonObject; result : TFhirClaimResponse);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('insurer') then
        result.insurer := ParseReference{TFhirOrganization}(jsn.vObj['insurer']);{q3}
    if jsn.has('requestProvider') then
        result.requestProvider := ParseReference{TFhirPractitioner}(jsn.vObj['requestProvider']);{q3}
    if jsn.has('requestOrganization') then
        result.requestOrganization := ParseReference{TFhirOrganization}(jsn.vObj['requestOrganization']);{q3}
    if jsn.has('request') then
        result.request := ParseReference{TFhirClaim}(jsn.vObj['request']);{q3}
    if jsn.has('outcome') then
        result.outcome := ParseCodeableConcept(jsn.vObj['outcome']);{q3}
    if jsn.has('disposition') or jsn.has('_disposition') then
        result.dispositionElement := parseString(jsn.node['disposition'], jsn.vObj['_disposition']);{q}
    if jsn.has('payeeType') then
        result.payeeType := ParseCodeableConcept(jsn.vObj['payeeType']);{q3}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseClaimResponseItem);
    if jsn.has('addItem') then
      iterateArray(jsn.vArr['addItem'], result.addItemList, parseClaimResponseAddItem);
    if jsn.has('error') then
      iterateArray(jsn.vArr['error'], result.errorList, parseClaimResponseError);
    if jsn.has('totalCost') then
        result.totalCost := ParseMoney(jsn.vObj['totalCost']);{q3}
    if jsn.has('unallocDeductable') then
        result.unallocDeductable := ParseMoney(jsn.vObj['unallocDeductable']);{q3}
    if jsn.has('totalBenefit') then
        result.totalBenefit := ParseMoney(jsn.vObj['totalBenefit']);{q3}
    if jsn.has('payment') then
        result.payment := ParseClaimResponsePayment(jsn.vObj['payment']);{q3}
    if jsn.has('reserved') then
        result.reserved := ParseCoding(jsn.vObj['reserved']);{q3}
    if jsn.has('form') then
        result.form := ParseCodeableConcept(jsn.vObj['form']);{q3}
    if jsn.has('processNote') then
      iterateArray(jsn.vArr['processNote'], result.processNoteList, parseClaimResponseProcessNote);
    if jsn.has('communicationRequest') then
      iterateArray(jsn.vArr['communicationRequest'], result.communicationRequestList, parseReference{TFhirCommunicationRequest});
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], result.insuranceList, parseClaimResponseInsurance);
end;

procedure TFHIRJsonComposer.ComposeClaimResponse(json : TJSONWriter; name : string; elem : TFhirClaimResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('insurer') then
    ComposeReference{TFhirOrganization}(json, 'insurer', elem.insurer); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('requestProvider') then
    ComposeReference{TFhirPractitioner}(json, 'requestProvider', elem.requestProvider); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('requestOrganization') then
    ComposeReference{TFhirOrganization}(json, 'requestOrganization', elem.requestOrganization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('request') then
    ComposeReference{TFhirClaim}(json, 'request', elem.request); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('outcome') then
    ComposeCodeableConcept(json, 'outcome', elem.outcome); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeStringValue(json, 'disposition', elem.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeStringProps(json, 'disposition', elem.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('payeeType') then
    ComposeCodeableConcept(json, 'payeeType', elem.payeeType); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('item') and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeClaimResponseItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('addItem') and (elem.addItemList.Count > 0) then
  begin
    json.valueArray('addItem');
    for i := 0 to elem.addItemList.Count - 1 do
      ComposeClaimResponseAddItem(json, '', elem.addItemList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('error') and (elem.errorList.Count > 0) then
  begin
    json.valueArray('error');
    for i := 0 to elem.errorList.Count - 1 do
      ComposeClaimResponseError(json, '', elem.errorList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('totalCost') then
    ComposeMoney(json, 'totalCost', elem.totalCost); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('unallocDeductable') then
    ComposeMoney(json, 'unallocDeductable', elem.unallocDeductable); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('totalBenefit') then
    ComposeMoney(json, 'totalBenefit', elem.totalBenefit); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('payment') then
    ComposeClaimResponsePayment(json, 'payment', elem.payment); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('reserved') then
    ComposeCoding(json, 'reserved', elem.reserved); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('form') then
    ComposeCodeableConcept(json, 'form', elem.form); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('processNote') and (elem.processNoteList.Count > 0) then
  begin
    json.valueArray('processNote');
    for i := 0 to elem.processNoteList.Count - 1 do
      ComposeClaimResponseProcessNote(json, '', elem.processNoteList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('communicationRequest') and (elem.communicationRequestList.Count > 0) then
  begin
    json.valueArray('communicationRequest');
    for i := 0 to elem.communicationRequestList.Count - 1 do
      ComposeReference{TFhirCommunicationRequest}(json, '', elem.communicationRequestList[i]); {z - Reference(CommunicationRequest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('insurance') and (elem.insuranceList.Count > 0) then
  begin
    json.valueArray('insurance');
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeClaimResponseInsurance(json, '', elem.insuranceList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
procedure TFHIRJsonParser.ParseClinicalImpressionInvestigation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalImpressionInvestigation(jsn)); {2}
end;

function TFHIRJsonParser.ParseClinicalImpressionInvestigation(jsn : TJsonObject) : TFhirClinicalImpressionInvestigation;
begin
  result := TFhirClinicalImpressionInvestigation.create;
  try
    ParseClinicalImpressionInvestigationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalImpressionInvestigationProperties(jsn : TJsonObject; result : TFhirClinicalImpressionInvestigation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseReference{Resource});
end;

procedure TFHIRJsonComposer.ComposeClinicalImpressionInvestigation(json : TJSONWriter; name : string; elem : TFhirClinicalImpressionInvestigation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.itemList[i]); {z - Reference(Observation|QuestionnaireResponse|FamilyMemberHistory|DiagnosticReport|RiskAssessment|ImagingStudy)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClinicalImpressionFinding(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalImpressionFinding(jsn)); {2}
end;

function TFHIRJsonParser.ParseClinicalImpressionFinding(jsn : TJsonObject) : TFhirClinicalImpressionFinding;
begin
  result := TFhirClinicalImpressionFinding.create;
  try
    ParseClinicalImpressionFindingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalImpressionFindingProperties(jsn : TJsonObject; result : TFhirClinicalImpressionFinding);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('itemCodeableConcept') {a4} then
      result.item := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
    if jsn.has('itemReference') {a3} then
      result.item := ParseReference(jsn.vObj['itemReference']);
    if jsn.has('basis') or jsn.has('_basis') then
        result.basisElement := parseString(jsn.node['basis'], jsn.vObj['_basis']);{q}
end;

procedure TFHIRJsonComposer.ComposeClinicalImpressionFinding(json : TJSONWriter; name : string; elem : TFhirClinicalImpressionFinding; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.item is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'itemCodeableConcept', TFhirCodeableConcept(elem.item)) 
  else if (elem.item is TFhirReference) then
    ComposeReference(json, 'itemReference', TFhirReference(elem.item));
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'basis', elem.basisElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'basis', elem.basisElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseClinicalImpression(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseClinicalImpression(jsn)); {2}
end;

function TFHIRJsonParser.ParseClinicalImpression(jsn : TJsonObject) : TFhirClinicalImpression;
begin
  result := TFhirClinicalImpression.create;
  try
    ParseClinicalImpressionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseClinicalImpressionProperties(jsn : TJsonObject; result : TFhirClinicalImpression);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirClinicalImpressionStatusEnum, SYSTEMS_TFhirClinicalImpressionStatusEnum);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('effectivePeriod') {a4} then
      result.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      result.effective := parseDateTime(jsn.node['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('assessor') then
        result.assessor := ParseReference{TFhirPractitioner}(jsn.vObj['assessor']);{q3}
    if jsn.has('previous') then
        result.previous := ParseReference{TFhirClinicalImpression}(jsn.vObj['previous']);{q3}
    if jsn.has('problem') then
      iterateArray(jsn.vArr['problem'], result.problemList, parseReference{Resource});
    if jsn.has('investigation') then
      iterateArray(jsn.vArr['investigation'], result.investigationList, parseClinicalImpressionInvestigation);
      if jsn.has('protocol') or jsn.has('_protocol') then
      iteratePrimitiveArray(jsn.vArr['protocol'], jsn.vArr['_protocol'], result.protocolList, parseUri);
    if jsn.has('summary') or jsn.has('_summary') then
        result.summaryElement := parseString(jsn.node['summary'], jsn.vObj['_summary']);{q}
    if jsn.has('finding') then
      iterateArray(jsn.vArr['finding'], result.findingList, parseClinicalImpressionFinding);
    if jsn.has('prognosisCodeableConcept') then
      iterateArray(jsn.vArr['prognosisCodeableConcept'], result.prognosisCodeableConceptList, parseCodeableConcept);
    if jsn.has('prognosisReference') then
      iterateArray(jsn.vArr['prognosisReference'], result.prognosisReferenceList, parseReference{TFhirRiskAssessment});
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseReference{Resource});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeClinicalImpression(json : TJSONWriter; name : string; elem : TFhirClinicalImpression; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirClinicalImpressionStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirClinicalImpressionStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(elem.effective)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('assessor') then
    ComposeReference{TFhirPractitioner}(json, 'assessor', elem.assessor); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('previous') then
    ComposeReference{TFhirClinicalImpression}(json, 'previous', elem.previous); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('problem') and (elem.problemList.Count > 0) then
  begin
    json.valueArray('problem');
    for i := 0 to elem.problemList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.problemList[i]); {z - Reference(Condition|AllergyIntolerance)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('investigation') and (elem.investigationList.Count > 0) then
  begin
    json.valueArray('investigation');
    for i := 0 to elem.investigationList.Count - 1 do
      ComposeClinicalImpressionInvestigation(json, '', elem.investigationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('protocol') and (elem.protocolList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.protocolList.Count - 1 do
    begin
      ext := ext or ((elem.protocolList[i].id <> '') or (elem.protocolList[i].hasExtensionList) {no-comments or (elem.protocolList[i].hasComments)});
      val := val or (elem.protocolList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('protocol');
      for i := 0 to elem.protocolList.Count - 1 do
        ComposeUriValue(json, '',elem.protocolList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_protocol');
      for i := 0 to elem.protocolList.Count - 1 do
        ComposeUriProps(json, '',elem.protocolList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('summary') then
    ComposeStringValue(json, 'summary', elem.summaryElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('summary') then
    ComposeStringProps(json, 'summary', elem.summaryElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('finding') and (elem.findingList.Count > 0) then
  begin
    json.valueArray('finding');
    for i := 0 to elem.findingList.Count - 1 do
      ComposeClinicalImpressionFinding(json, '', elem.findingList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('prognosisCodeableConcept') and (elem.prognosisCodeableConceptList.Count > 0) then
  begin
    json.valueArray('prognosisCodeableConcept');
    for i := 0 to elem.prognosisCodeableConceptList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.prognosisCodeableConceptList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('prognosisReference') and (elem.prognosisReferenceList.Count > 0) then
  begin
    json.valueArray('prognosisReference');
    for i := 0 to elem.prognosisReferenceList.Count - 1 do
      ComposeReference{TFhirRiskAssessment}(json, '', elem.prognosisReferenceList[i]); {z - Reference(RiskAssessment)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('action') and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.actionList[i]); {z - Reference(ReferralRequest|ProcedureRequest|Procedure|MedicationRequest|Appointment)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
procedure TFHIRJsonParser.ParseCodeSystemFilter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemFilter(jsn)); {2}
end;

function TFHIRJsonParser.ParseCodeSystemFilter(jsn : TJsonObject) : TFhirCodeSystemFilter;
begin
  result := TFhirCodeSystemFilter.create;
  try
    ParseCodeSystemFilterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemFilterProperties(jsn : TJsonObject; result : TFhirCodeSystemFilter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('operator') or jsn.has('_operator') then
      iterateEnumArray(jsn.vArr['operator'], jsn.vArr['_operator'], jsn.path+'/operator', result.operatorList, parseEnum, CODES_TFhirFilterOperatorEnum, SYSTEMS_TFhirFilterOperatorEnum);
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeCodeSystemFilter(json : TJSONWriter; name : string; elem : TFhirCodeSystemFilter; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeValue(json, 'code', elem.codeElement, false);
  ComposeCodeProps(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (elem.operatorList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.operatorList.Count - 1 do
    begin
      val := val or (elem.operatorList[i].hasPrimitiveValue);
      ext := ext or ((elem.operatorList[i].id <> '') or (elem.operatorList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('operator');
      for i := 0 to elem.operatorList.Count - 1 do
        ComposeEnumValue(json, '', elem.operatorList[i], CODES_TFhirFilterOperatorEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_operator');
      for i := 0 to elem.operatorList.Count - 1 do
        ComposeEnumProps(json, '', elem.operatorList[i], CODES_TFhirFilterOperatorEnum, true);
      json.FinishArray;
    end;
  end;
  ComposeStringValue(json, 'value', elem.valueElement, false);
  ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCodeSystemProperty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemProperty(jsn)); {2}
end;

function TFHIRJsonParser.ParseCodeSystemProperty(jsn : TJsonObject) : TFhirCodeSystemProperty;
begin
  result := TFhirCodeSystemProperty.create;
  try
    ParseCodeSystemPropertyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemPropertyProperties(jsn : TJsonObject; result : TFhirCodeSystemProperty);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);{q}
    if jsn.has('uri') or jsn.has('_uri') then
        result.uriElement := parseUri(jsn.node['uri'], jsn.vObj['_uri']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirConceptPropertyTypeEnum, SYSTEMS_TFhirConceptPropertyTypeEnum);
end;

procedure TFHIRJsonComposer.ComposeCodeSystemProperty(json : TJSONWriter; name : string; elem : TFhirCodeSystemProperty; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeValue(json, 'code', elem.codeElement, false);
  ComposeCodeProps(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'uri', elem.uriElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'uri', elem.uriElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirConceptPropertyTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirConceptPropertyTypeEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCodeSystemConcept(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemConcept(jsn)); {2}
end;

function TFHIRJsonParser.ParseCodeSystemConcept(jsn : TJsonObject) : TFhirCodeSystemConcept;
begin
  result := TFhirCodeSystemConcept.create;
  try
    ParseCodeSystemConceptProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptProperties(jsn : TJsonObject; result : TFhirCodeSystemConcept);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);{q}
    if jsn.has('definition') or jsn.has('_definition') then
        result.definitionElement := parseString(jsn.node['definition'], jsn.vObj['_definition']);{q}
    if jsn.has('designation') then
      iterateArray(jsn.vArr['designation'], result.designationList, parseCodeSystemConceptDesignation);
    if jsn.has('property') then
      iterateArray(jsn.vArr['property'], result.property_List, parseCodeSystemConceptProperty);
    if jsn.has('concept') then
      iterateArray(jsn.vArr['concept'], result.conceptList, parseCodeSystemConcept);
end;

procedure TFHIRJsonComposer.ComposeCodeSystemConcept(json : TJSONWriter; name : string; elem : TFhirCodeSystemConcept; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeValue(json, 'code', elem.codeElement, false);
  ComposeCodeProps(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'definition', elem.definitionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'definition', elem.definitionElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.designationList.Count > 0) then
  begin
    json.valueArray('designation');
    for i := 0 to elem.designationList.Count - 1 do
      ComposeCodeSystemConceptDesignation(json, '', elem.designationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.property_List.Count > 0) then
  begin
    json.valueArray('property');
    for i := 0 to elem.property_List.Count - 1 do
      ComposeCodeSystemConceptProperty(json, '', elem.property_List[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.conceptList.Count > 0) then
  begin
    json.valueArray('concept');
    for i := 0 to elem.conceptList.Count - 1 do
      ComposeCodeSystemConcept(json, '', elem.conceptList[i]); {z - @CodeSystem.concept}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemConceptDesignation(jsn)); {2}
end;

function TFHIRJsonParser.ParseCodeSystemConceptDesignation(jsn : TJsonObject) : TFhirCodeSystemConceptDesignation;
begin
  result := TFhirCodeSystemConceptDesignation.create;
  try
    ParseCodeSystemConceptDesignationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptDesignationProperties(jsn : TJsonObject; result : TFhirCodeSystemConceptDesignation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := parseCode(jsn.node['language'], jsn.vObj['_language']);{q}
    if jsn.has('use') then
        result.use := ParseCoding(jsn.vObj['use']);{q3}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeCodeSystemConceptDesignation(json : TJSONWriter; name : string; elem : TFhirCodeSystemConceptDesignation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'use', elem.use); {a}
  ComposeStringValue(json, 'value', elem.valueElement, false);
  ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptProperty(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystemConceptProperty(jsn)); {2}
end;

function TFHIRJsonParser.ParseCodeSystemConceptProperty(jsn : TJsonObject) : TFhirCodeSystemConceptProperty;
begin
  result := TFhirCodeSystemConceptProperty.create;
  try
    ParseCodeSystemConceptPropertyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemConceptPropertyProperties(jsn : TJsonObject; result : TFhirCodeSystemConceptProperty);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);{q}
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      result.value := parseCode(jsn.node['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
end;

procedure TFHIRJsonComposer.ComposeCodeSystemConceptProperty(json : TJSONWriter; name : string; elem : TFhirCodeSystemConceptProperty; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeValue(json, 'code', elem.codeElement, false);
  ComposeCodeProps(json, 'code', elem.codeElement, false);
  if (elem.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(elem.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(elem.value), false);
  end
  else if (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCodeSystem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCodeSystem(jsn)); {2}
end;

function TFHIRJsonParser.ParseCodeSystem(jsn : TJsonObject) : TFhirCodeSystem;
begin
  result := TFhirCodeSystem.create;
  try
    ParseCodeSystemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCodeSystemProperties(jsn : TJsonObject; result : TFhirCodeSystem);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('caseSensitive') or jsn.has('_caseSensitive') then
        result.caseSensitiveElement := parseBoolean(jsn.node['caseSensitive'], jsn.vObj['_caseSensitive']);{q}
    if jsn.has('valueSet') or jsn.has('_valueSet') then
        result.valueSetElement := parseUri(jsn.node['valueSet'], jsn.vObj['_valueSet']);{q}
    if jsn.has('hierarchyMeaning') or jsn.has('_hierarchyMeaning')  then
      result.hierarchyMeaningElement := parseEnum(jsn.path+'/hierarchyMeaning', jsn.node['hierarchyMeaning'], jsn.vObj['_hierarchyMeaning'], CODES_TFhirCodesystemHierarchyMeaningEnum, SYSTEMS_TFhirCodesystemHierarchyMeaningEnum);
    if jsn.has('compositional') or jsn.has('_compositional') then
        result.compositionalElement := parseBoolean(jsn.node['compositional'], jsn.vObj['_compositional']);{q}
    if jsn.has('versionNeeded') or jsn.has('_versionNeeded') then
        result.versionNeededElement := parseBoolean(jsn.node['versionNeeded'], jsn.vObj['_versionNeeded']);{q}
    if jsn.has('content') or jsn.has('_content')  then
      result.contentElement := parseEnum(jsn.path+'/content', jsn.node['content'], jsn.vObj['_content'], CODES_TFhirCodesystemContentModeEnum, SYSTEMS_TFhirCodesystemContentModeEnum);
    if jsn.has('count') or jsn.has('_count') then
        result.countElement := parseUnsignedInt(jsn.node['count'], jsn.vObj['_count']);{q}
    if jsn.has('filter') then
      iterateArray(jsn.vArr['filter'], result.filterList, parseCodeSystemFilter);
    if jsn.has('property') then
      iterateArray(jsn.vArr['property'], result.property_List, parseCodeSystemProperty);
    if jsn.has('concept') then
      iterateArray(jsn.vArr['concept'], result.conceptList, parseCodeSystemConcept);
end;

procedure TFHIRJsonComposer.ComposeCodeSystem(json : TJSONWriter; name : string; elem : TFhirCodeSystem; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('caseSensitive') then
    ComposeBooleanValue(json, 'caseSensitive', elem.caseSensitiveElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('caseSensitive') then
    ComposeBooleanProps(json, 'caseSensitive', elem.caseSensitiveElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('valueSet') then
    ComposeUriValue(json, 'valueSet', elem.valueSetElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('valueSet') then
    ComposeUriProps(json, 'valueSet', elem.valueSetElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('hierarchyMeaning') then
    ComposeEnumValue(json, 'hierarchyMeaning', elem.HierarchyMeaningElement, CODES_TFhirCodesystemHierarchyMeaningEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('hierarchyMeaning') then
    ComposeEnumProps(json, 'hierarchyMeaning', elem.HierarchyMeaningElement, CODES_TFhirCodesystemHierarchyMeaningEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('compositional') then
    ComposeBooleanValue(json, 'compositional', elem.compositionalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('compositional') then
    ComposeBooleanProps(json, 'compositional', elem.compositionalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('versionNeeded') then
    ComposeBooleanValue(json, 'versionNeeded', elem.versionNeededElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('versionNeeded') then
    ComposeBooleanProps(json, 'versionNeeded', elem.versionNeededElement, false);
  ComposeEnumValue(json, 'content', elem.ContentElement, CODES_TFhirCodesystemContentModeEnum, false);
  ComposeEnumProps(json, 'content', elem.ContentElement, CODES_TFhirCodesystemContentModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('count') then
    ComposeUnsignedIntValue(json, 'count', elem.countElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('count') then
    ComposeUnsignedIntProps(json, 'count', elem.countElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('filter') and (elem.filterList.Count > 0) then
  begin
    json.valueArray('filter');
    for i := 0 to elem.filterList.Count - 1 do
      ComposeCodeSystemFilter(json, '', elem.filterList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('property_') and (elem.property_List.Count > 0) then
  begin
    json.valueArray('property');
    for i := 0 to elem.property_List.Count - 1 do
      ComposeCodeSystemProperty(json, '', elem.property_List[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('concept') and (elem.conceptList.Count > 0) then
  begin
    json.valueArray('concept');
    for i := 0 to elem.conceptList.Count - 1 do
      ComposeCodeSystemConcept(json, '', elem.conceptList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
procedure TFHIRJsonParser.ParseCommunicationPayload(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCommunicationPayload(jsn)); {2}
end;

function TFHIRJsonParser.ParseCommunicationPayload(jsn : TJsonObject) : TFhirCommunicationPayload;
begin
  result := TFhirCommunicationPayload.create;
  try
    ParseCommunicationPayloadProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCommunicationPayloadProperties(jsn : TJsonObject; result : TFhirCommunicationPayload);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('contentAttachment') {a4} then
      result.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      result.content := ParseReference(jsn.vObj['contentReference']);
    if jsn.has('contentString') or jsn.has('_contentString') then
      result.content := parseString(jsn.node['contentString'], jsn.vObj['_contentString']);
end;

procedure TFHIRJsonComposer.ComposeCommunicationPayload(json : TJSONWriter; name : string; elem : TFhirCommunicationPayload; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(elem.content)) 
  else if (elem.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(elem.content))
  else if (elem.content is TFhirString) then 
  begin
    ComposeStringValue(json, 'contentString', TFhirString(elem.content), false);
    ComposeStringProps(json, 'contentString', TFhirString(elem.content), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCommunication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCommunication(jsn)); {2}
end;

function TFHIRJsonParser.ParseCommunication(jsn : TJsonObject) : TFhirCommunication;
begin
  result := TFhirCommunication.create;
  try
    ParseCommunicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCommunicationProperties(jsn : TJsonObject; result : TFhirCommunication);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('definition') then
      iterateArray(jsn.vArr['definition'], result.definitionList, parseReference{Resource});
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirReference});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{TFhirReference});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEventStatusEnum, SYSTEMS_TFhirEventStatusEnum);
    if jsn.has('notDone') or jsn.has('_notDone') then
        result.notDoneElement := parseBoolean(jsn.node['notDone'], jsn.vObj['_notDone']);{q}
    if jsn.has('notDoneReason') then
        result.notDoneReason := ParseCodeableConcept(jsn.vObj['notDoneReason']);{q3}
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('medium') then
      iterateArray(jsn.vArr['medium'], result.mediumList, parseCodeableConcept);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('recipient') then
      iterateArray(jsn.vArr['recipient'], result.recipientList, parseReference{Resource});
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseReference{TFhirReference});
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('sent') or jsn.has('_sent') then
        result.sentElement := parseDateTime(jsn.node['sent'], jsn.vObj['_sent']);{q}
    if jsn.has('received') or jsn.has('_received') then
        result.receivedElement := parseDateTime(jsn.node['received'], jsn.vObj['_received']);{q}
    if jsn.has('sender') then
        result.sender := ParseReference{Resource}(jsn.vObj['sender']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('payload') then
      iterateArray(jsn.vArr['payload'], result.payloadList, parseCommunicationPayload);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCommunication(json : TJSONWriter; name : string; elem : TFhirCommunication; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('definition') and (elem.definitionList.Count > 0) then
  begin
    json.valueArray('definition');
    for i := 0 to elem.definitionList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.definitionList[i]); {z - Reference(PlanDefinition|ActivityDefinition)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.basedOnList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.partOfList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEventStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEventStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('notDone') then
    ComposeBooleanValue(json, 'notDone', elem.notDoneElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('notDone') then
    ComposeBooleanProps(json, 'notDone', elem.notDoneElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('notDoneReason') then
    ComposeCodeableConcept(json, 'notDoneReason', elem.notDoneReason); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('category') and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('medium') and (elem.mediumList.Count > 0) then
  begin
    json.valueArray('medium');
    for i := 0 to elem.mediumList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.mediumList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('recipient') and (elem.recipientList.Count > 0) then
  begin
    json.valueArray('recipient');
    for i := 0 to elem.recipientList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.recipientList[i]); {z - Reference(Device|Organization|Patient|Practitioner|RelatedPerson|Group)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('topic') and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.topicList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('sent') then
    ComposeDateTimeValue(json, 'sent', elem.sentElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('sent') then
    ComposeDateTimeProps(json, 'sent', elem.sentElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('received') then
    ComposeDateTimeValue(json, 'received', elem.receivedElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('received') then
    ComposeDateTimeProps(json, 'received', elem.receivedElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('sender') then
    ComposeReference{Resource}(json, 'sender', elem.sender); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('payload') and (elem.payloadList.Count > 0) then
  begin
    json.valueArray('payload');
    for i := 0 to elem.payloadList.Count - 1 do
      ComposeCommunicationPayload(json, '', elem.payloadList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
procedure TFHIRJsonParser.ParseCommunicationRequestPayload(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCommunicationRequestPayload(jsn)); {2}
end;

function TFHIRJsonParser.ParseCommunicationRequestPayload(jsn : TJsonObject) : TFhirCommunicationRequestPayload;
begin
  result := TFhirCommunicationRequestPayload.create;
  try
    ParseCommunicationRequestPayloadProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCommunicationRequestPayloadProperties(jsn : TJsonObject; result : TFhirCommunicationRequestPayload);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('contentAttachment') {a4} then
      result.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      result.content := ParseReference(jsn.vObj['contentReference']);
    if jsn.has('contentString') or jsn.has('_contentString') then
      result.content := parseString(jsn.node['contentString'], jsn.vObj['_contentString']);
end;

procedure TFHIRJsonComposer.ComposeCommunicationRequestPayload(json : TJSONWriter; name : string; elem : TFhirCommunicationRequestPayload; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(elem.content)) 
  else if (elem.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(elem.content))
  else if (elem.content is TFhirString) then 
  begin
    ComposeStringValue(json, 'contentString', TFhirString(elem.content), false);
    ComposeStringProps(json, 'contentString', TFhirString(elem.content), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCommunicationRequestRequester(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCommunicationRequestRequester(jsn)); {2}
end;

function TFHIRJsonParser.ParseCommunicationRequestRequester(jsn : TJsonObject) : TFhirCommunicationRequestRequester;
begin
  result := TFhirCommunicationRequestRequester.create;
  try
    ParseCommunicationRequestRequesterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCommunicationRequestRequesterProperties(jsn : TJsonObject; result : TFhirCommunicationRequestRequester);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('agent') then
        result.agent := ParseReference{Resource}(jsn.vObj['agent']);{q3}
    if jsn.has('onBehalfOf') then
        result.onBehalfOf := ParseReference{TFhirOrganization}(jsn.vObj['onBehalfOf']);{q3}
end;

procedure TFHIRJsonComposer.ComposeCommunicationRequestRequester(json : TJSONWriter; name : string; elem : TFhirCommunicationRequestRequester; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'agent', elem.agent); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'onBehalfOf', elem.onBehalfOf); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCommunicationRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCommunicationRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseCommunicationRequest(jsn : TJsonObject) : TFhirCommunicationRequest;
begin
  result := TFhirCommunicationRequest.create;
  try
    ParseCommunicationRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCommunicationRequestProperties(jsn : TJsonObject; result : TFhirCommunicationRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirReference});
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], result.replacesList, parseReference{TFhirCommunicationRequest});
    if jsn.has('groupIdentifier') then
        result.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('medium') then
      iterateArray(jsn.vArr['medium'], result.mediumList, parseCodeableConcept);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('recipient') then
      iterateArray(jsn.vArr['recipient'], result.recipientList, parseReference{Resource});
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseReference{TFhirReference});
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('payload') then
      iterateArray(jsn.vArr['payload'], result.payloadList, parseCommunicationRequestPayload);
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('sender') then
        result.sender := ParseReference{Resource}(jsn.vObj['sender']);{q3}
    if jsn.has('requester') then
        result.requester := ParseCommunicationRequestRequester(jsn.vObj['requester']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCommunicationRequest(json : TJSONWriter; name : string; elem : TFhirCommunicationRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.basedOnList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('replaces') and (elem.replacesList.Count > 0) then
  begin
    json.valueArray('replaces');
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirCommunicationRequest}(json, '', elem.replacesList[i]); {z - Reference(CommunicationRequest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('groupIdentifier') then
    ComposeIdentifier(json, 'groupIdentifier', elem.groupIdentifier); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('category') and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('medium') and (elem.mediumList.Count > 0) then
  begin
    json.valueArray('medium');
    for i := 0 to elem.mediumList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.mediumList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('recipient') and (elem.recipientList.Count > 0) then
  begin
    json.valueArray('recipient');
    for i := 0 to elem.recipientList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.recipientList[i]); {z - Reference(Device|Organization|Patient|Practitioner|RelatedPerson|Group|CareTeam)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('topic') and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.topicList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('payload') and (elem.payloadList.Count > 0) then
  begin
    json.valueArray('payload');
    for i := 0 to elem.payloadList.Count - 1 do
      ComposeCommunicationRequestPayload(json, '', elem.payloadList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('sender') then
    ComposeReference{Resource}(json, 'sender', elem.sender); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requester') then
    ComposeCommunicationRequestRequester(json, 'requester', elem.requester); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
procedure TFHIRJsonParser.ParseCompartmentDefinitionResource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompartmentDefinitionResource(jsn)); {2}
end;

function TFHIRJsonParser.ParseCompartmentDefinitionResource(jsn : TJsonObject) : TFhirCompartmentDefinitionResource;
begin
  result := TFhirCompartmentDefinitionResource.create;
  try
    ParseCompartmentDefinitionResourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompartmentDefinitionResourceProperties(jsn : TJsonObject; result : TFhirCompartmentDefinitionResource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
      if jsn.has('param') or jsn.has('_param') then
      iteratePrimitiveArray(jsn.vArr['param'], jsn.vArr['_param'], result.paramList, parseString);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeCompartmentDefinitionResource(json : TJSONWriter; name : string; elem : TFhirCompartmentDefinitionResource; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirResourceTypesEnum, false);
  ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirResourceTypesEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.paramList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.paramList.Count - 1 do
    begin
      ext := ext or ((elem.paramList[i].id <> '') or (elem.paramList[i].hasExtensionList) {no-comments or (elem.paramList[i].hasComments)});
      val := val or (elem.paramList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('param');
      for i := 0 to elem.paramList.Count - 1 do
        ComposeStringValue(json, '',elem.paramList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_param');
      for i := 0 to elem.paramList.Count - 1 do
        ComposeStringProps(json, '',elem.paramList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCompartmentDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompartmentDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseCompartmentDefinition(jsn : TJsonObject) : TFhirCompartmentDefinition;
begin
  result := TFhirCompartmentDefinition.create;
  try
    ParseCompartmentDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompartmentDefinitionProperties(jsn : TJsonObject; result : TFhirCompartmentDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirCompartmentTypeEnum, SYSTEMS_TFhirCompartmentTypeEnum);
    if jsn.has('search') or jsn.has('_search') then
        result.searchElement := parseBoolean(jsn.node['search'], jsn.vObj['_search']);{q}
    if jsn.has('resource') then
      iterateArray(jsn.vArr['resource'], result.resourceList, parseCompartmentDefinitionResource);
end;

procedure TFHIRJsonComposer.ComposeCompartmentDefinition(json : TJSONWriter; name : string; elem : TFhirCompartmentDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  ComposeUriValue(json, 'url', elem.urlElement, false);
  ComposeUriProps(json, 'url', elem.urlElement, false);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirCompartmentTypeEnum, false);
  ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirCompartmentTypeEnum, false);
  ComposeBooleanValue(json, 'search', elem.searchElement, false);
  ComposeBooleanProps(json, 'search', elem.searchElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('resource') and (elem.resourceList.Count > 0) then
  begin
    json.valueArray('resource');
    for i := 0 to elem.resourceList.Count - 1 do
      ComposeCompartmentDefinitionResource(json, '', elem.resourceList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
procedure TFHIRJsonParser.ParseCompositionAttester(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompositionAttester(jsn)); {2}
end;

function TFHIRJsonParser.ParseCompositionAttester(jsn : TJsonObject) : TFhirCompositionAttester;
begin
  result := TFhirCompositionAttester.create;
  try
    ParseCompositionAttesterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionAttesterProperties(jsn : TJsonObject; result : TFhirCompositionAttester);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('mode') or jsn.has('_mode') then
      iterateEnumArray(jsn.vArr['mode'], jsn.vArr['_mode'], jsn.path+'/mode', result.modeList, parseEnum, CODES_TFhirCompositionAttestationModeEnum, SYSTEMS_TFhirCompositionAttestationModeEnum);
    if jsn.has('time') or jsn.has('_time') then
        result.timeElement := parseDateTime(jsn.node['time'], jsn.vObj['_time']);{q}
    if jsn.has('party') then
        result.party := ParseReference{Resource}(jsn.vObj['party']);{q3}
end;

procedure TFHIRJsonComposer.ComposeCompositionAttester(json : TJSONWriter; name : string; elem : TFhirCompositionAttester; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.modeList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.modeList.Count - 1 do
    begin
      val := val or (elem.modeList[i].hasPrimitiveValue);
      ext := ext or ((elem.modeList[i].id <> '') or (elem.modeList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('mode');
      for i := 0 to elem.modeList.Count - 1 do
        ComposeEnumValue(json, '', elem.modeList[i], CODES_TFhirCompositionAttestationModeEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_mode');
      for i := 0 to elem.modeList.Count - 1 do
        ComposeEnumProps(json, '', elem.modeList[i], CODES_TFhirCompositionAttestationModeEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'time', elem.timeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'time', elem.timeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'party', elem.party); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCompositionRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompositionRelatesTo(jsn)); {2}
end;

function TFHIRJsonParser.ParseCompositionRelatesTo(jsn : TJsonObject) : TFhirCompositionRelatesTo;
begin
  result := TFhirCompositionRelatesTo.create;
  try
    ParseCompositionRelatesToProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionRelatesToProperties(jsn : TJsonObject; result : TFhirCompositionRelatesTo);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirDocumentRelationshipTypeEnum, SYSTEMS_TFhirDocumentRelationshipTypeEnum);
    if jsn.has('targetIdentifier') {a4} then
      result.target := ParseIdentifier(jsn.vObj['targetIdentifier']);
    if jsn.has('targetReference') {a3} then
      result.target := ParseReference(jsn.vObj['targetReference']);
end;

procedure TFHIRJsonComposer.ComposeCompositionRelatesTo(json : TJSONWriter; name : string; elem : TFhirCompositionRelatesTo; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirDocumentRelationshipTypeEnum, false);
  ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirDocumentRelationshipTypeEnum, false);
  if (elem.target is TFhirIdentifier) then 
    ComposeIdentifier(json, 'targetIdentifier', TFhirIdentifier(elem.target)) 
  else if (elem.target is TFhirReference) then
    ComposeReference(json, 'targetReference', TFhirReference(elem.target));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCompositionEvent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompositionEvent(jsn)); {2}
end;

function TFHIRJsonParser.ParseCompositionEvent(jsn : TJsonObject) : TFhirCompositionEvent;
begin
  result := TFhirCompositionEvent.create;
  try
    ParseCompositionEventProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionEventProperties(jsn : TJsonObject; result : TFhirCompositionEvent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCodeableConcept);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parseReference{TFhirReference});
end;

procedure TFHIRJsonComposer.ComposeCompositionEvent(json : TJSONWriter; name : string; elem : TFhirCompositionEvent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.codeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.detailList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCompositionSection(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCompositionSection(jsn)); {2}
end;

function TFHIRJsonParser.ParseCompositionSection(jsn : TJsonObject) : TFhirCompositionSection;
begin
  result := TFhirCompositionSection.create;
  try
    ParseCompositionSectionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionSectionProperties(jsn : TJsonObject; result : TFhirCompositionSection);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('text') then
        result.text := ParseNarrative(jsn.vObj['text']);{q3}
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirListModeEnum, SYSTEMS_TFhirListModeEnum);
    if jsn.has('orderedBy') then
        result.orderedBy := ParseCodeableConcept(jsn.vObj['orderedBy']);{q3}
    if jsn.has('entry') then
      iterateArray(jsn.vArr['entry'], result.entryList, parseReference{TFhirReference});
    if jsn.has('emptyReason') then
        result.emptyReason := ParseCodeableConcept(jsn.vObj['emptyReason']);{q3}
    if jsn.has('section') then
      iterateArray(jsn.vArr['section'], result.sectionList, parseCompositionSection);
end;

procedure TFHIRJsonComposer.ComposeCompositionSection(json : TJSONWriter; name : string; elem : TFhirCompositionSection; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeNarrative(json, 'text', elem.text); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirListModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirListModeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'orderedBy', elem.orderedBy); {a}
  if (SummaryOption in [soFull, soData]) and (elem.entryList.Count > 0) then
  begin
    json.valueArray('entry');
    for i := 0 to elem.entryList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.entryList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'emptyReason', elem.emptyReason); {a}
  if (SummaryOption in [soFull, soData]) and (elem.sectionList.Count > 0) then
  begin
    json.valueArray('section');
    for i := 0 to elem.sectionList.Count - 1 do
      ComposeCompositionSection(json, '', elem.sectionList[i]); {z - @Composition.section}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseComposition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseComposition(jsn)); {2}
end;

function TFHIRJsonParser.ParseComposition(jsn : TJsonObject) : TFhirComposition;
begin
  result := TFhirComposition.create;
  try
    ParseCompositionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCompositionProperties(jsn : TJsonObject; result : TFhirComposition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirCompositionStatusEnum, SYSTEMS_TFhirCompositionStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('class') then
        result.class_ := ParseCodeableConcept(jsn.vObj['class']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{TFhirReference}(jsn.vObj['subject']);{q3}
    if jsn.has('encounter') then
        result.encounter := ParseReference{TFhirEncounter}(jsn.vObj['encounter']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], result.authorList, parseReference{Resource});
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('confidentiality') or jsn.has('_confidentiality')  then
      result.confidentialityElement := parseEnum(jsn.path+'/confidentiality', jsn.node['confidentiality'], jsn.vObj['_confidentiality'], CODES_TFhirV3ConfidentialityClassificationEnum, SYSTEMS_TFhirV3ConfidentialityClassificationEnum);
    if jsn.has('attester') then
      iterateArray(jsn.vArr['attester'], result.attesterList, parseCompositionAttester);
    if jsn.has('custodian') then
        result.custodian := ParseReference{TFhirOrganization}(jsn.vObj['custodian']);{q3}
    if jsn.has('relatesTo') then
      iterateArray(jsn.vArr['relatesTo'], result.relatesToList, parseCompositionRelatesTo);
    if jsn.has('event') then
      iterateArray(jsn.vArr['event'], result.eventList, parseCompositionEvent);
    if jsn.has('section') then
      iterateArray(jsn.vArr['section'], result.sectionList, parseCompositionSection);
end;

procedure TFHIRJsonComposer.ComposeComposition(json : TJSONWriter; name : string; elem : TFhirComposition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirCompositionStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirCompositionStatusEnum, false);
  ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('class_') then
    ComposeCodeableConcept(json, 'class', elem.class_); {a}
  ComposeReference{TFhirReference}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(json, 'encounter', elem.encounter); {a}
  ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (elem.authorList.Count > 0) then
  begin
    json.valueArray('author');
    for i := 0 to elem.authorList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.authorList[i]); {z - Reference(Practitioner|Device|Patient|RelatedPerson)}
    json.FinishArray;
  end;
  ComposeStringValue(json, 'title', elem.titleElement, false);
  ComposeStringProps(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('confidentiality') then
    ComposeEnumValue(json, 'confidentiality', elem.ConfidentialityElement, CODES_TFhirV3ConfidentialityClassificationEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('confidentiality') then
    ComposeEnumProps(json, 'confidentiality', elem.ConfidentialityElement, CODES_TFhirV3ConfidentialityClassificationEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('attester') and (elem.attesterList.Count > 0) then
  begin
    json.valueArray('attester');
    for i := 0 to elem.attesterList.Count - 1 do
      ComposeCompositionAttester(json, '', elem.attesterList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('custodian') then
    ComposeReference{TFhirOrganization}(json, 'custodian', elem.custodian); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('relatesTo') and (elem.relatesToList.Count > 0) then
  begin
    json.valueArray('relatesTo');
    for i := 0 to elem.relatesToList.Count - 1 do
      ComposeCompositionRelatesTo(json, '', elem.relatesToList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('event') and (elem.eventList.Count > 0) then
  begin
    json.valueArray('event');
    for i := 0 to elem.eventList.Count - 1 do
      ComposeCompositionEvent(json, '', elem.eventList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('section') and (elem.sectionList.Count > 0) then
  begin
    json.valueArray('section');
    for i := 0 to elem.sectionList.Count - 1 do
      ComposeCompositionSection(json, '', elem.sectionList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
procedure TFHIRJsonParser.ParseConceptMapGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroup(jsn)); {2}
end;

function TFHIRJsonParser.ParseConceptMapGroup(jsn : TJsonObject) : TFhirConceptMapGroup;
begin
  result := TFhirConceptMapGroup.create;
  try
    ParseConceptMapGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupProperties(jsn : TJsonObject; result : TFhirConceptMapGroup);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('source') or jsn.has('_source') then
        result.sourceElement := parseUri(jsn.node['source'], jsn.vObj['_source']);{q}
    if jsn.has('sourceVersion') or jsn.has('_sourceVersion') then
        result.sourceVersionElement := parseString(jsn.node['sourceVersion'], jsn.vObj['_sourceVersion']);{q}
    if jsn.has('target') or jsn.has('_target') then
        result.targetElement := parseUri(jsn.node['target'], jsn.vObj['_target']);{q}
    if jsn.has('targetVersion') or jsn.has('_targetVersion') then
        result.targetVersionElement := parseString(jsn.node['targetVersion'], jsn.vObj['_targetVersion']);{q}
    if jsn.has('element') then
      iterateArray(jsn.vArr['element'], result.elementList, parseConceptMapGroupElement);
    if jsn.has('unmapped') then
        result.unmapped := ParseConceptMapGroupUnmapped(jsn.vObj['unmapped']);{q3}
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroup(json : TJSONWriter; name : string; elem : TFhirConceptMapGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'source', elem.sourceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'source', elem.sourceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'sourceVersion', elem.sourceVersionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'sourceVersion', elem.sourceVersionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'target', elem.targetElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'target', elem.targetElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'targetVersion', elem.targetVersionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'targetVersion', elem.targetVersionElement, false);
  if (elem.elementList.Count > 0) then
  begin
    json.valueArray('element');
    for i := 0 to elem.elementList.Count - 1 do
      ComposeConceptMapGroupElement(json, '', elem.elementList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeConceptMapGroupUnmapped(json, 'unmapped', elem.unmapped); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroupElement(jsn)); {2}
end;

function TFHIRJsonParser.ParseConceptMapGroupElement(jsn : TJsonObject) : TFhirConceptMapGroupElement;
begin
  result := TFhirConceptMapGroupElement.create;
  try
    ParseConceptMapGroupElementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementProperties(jsn : TJsonObject; result : TFhirConceptMapGroupElement);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);{q}
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], result.targetList, parseConceptMapGroupElementTarget);
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroupElement(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupElement; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.targetList.Count > 0) then
  begin
    json.valueArray('target');
    for i := 0 to elem.targetList.Count - 1 do
      ComposeConceptMapGroupElementTarget(json, '', elem.targetList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroupElementTarget(jsn)); {2}
end;

function TFHIRJsonParser.ParseConceptMapGroupElementTarget(jsn : TJsonObject) : TFhirConceptMapGroupElementTarget;
begin
  result := TFhirConceptMapGroupElementTarget.create;
  try
    ParseConceptMapGroupElementTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementTargetProperties(jsn : TJsonObject; result : TFhirConceptMapGroupElementTarget);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);{q}
    if jsn.has('equivalence') or jsn.has('_equivalence')  then
      result.equivalenceElement := parseEnum(jsn.path+'/equivalence', jsn.node['equivalence'], jsn.vObj['_equivalence'], CODES_TFhirConceptMapEquivalenceEnum, SYSTEMS_TFhirConceptMapEquivalenceEnum);
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('dependsOn') then
      iterateArray(jsn.vArr['dependsOn'], result.dependsOnList, parseConceptMapGroupElementTargetDependsOn);
    if jsn.has('product') then
      iterateArray(jsn.vArr['product'], result.productList, parseConceptMapGroupElementTargetDependsOn);
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroupElementTarget(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupElementTarget; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.equivalenceElement <> nil) and (elem.equivalenceElement.primitiveValue <> 'equivalent')) then
    ComposeEnumValue(json, 'equivalence', elem.EquivalenceElement, CODES_TFhirConceptMapEquivalenceEnum, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.equivalenceElement <> nil) and (elem.equivalenceElement.primitiveValue <> 'equivalent')) then
    ComposeEnumProps(json, 'equivalence', elem.EquivalenceElement, CODES_TFhirConceptMapEquivalenceEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.dependsOnList.Count > 0) then
  begin
    json.valueArray('dependsOn');
    for i := 0 to elem.dependsOnList.Count - 1 do
      ComposeConceptMapGroupElementTargetDependsOn(json, '', elem.dependsOnList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.productList.Count > 0) then
  begin
    json.valueArray('product');
    for i := 0 to elem.productList.Count - 1 do
      ComposeConceptMapGroupElementTargetDependsOn(json, '', elem.productList[i]); {z - @ConceptMap.group.element.target.dependsOn}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementTargetDependsOn(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroupElementTargetDependsOn(jsn)); {2}
end;

function TFHIRJsonParser.ParseConceptMapGroupElementTargetDependsOn(jsn : TJsonObject) : TFhirConceptMapGroupElementTargetDependsOn;
begin
  result := TFhirConceptMapGroupElementTargetDependsOn.create;
  try
    ParseConceptMapGroupElementTargetDependsOnProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupElementTargetDependsOnProperties(jsn : TJsonObject; result : TFhirConceptMapGroupElementTargetDependsOn);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('property') or jsn.has('_property') then
        result.property_Element := parseUri(jsn.node['property'], jsn.vObj['_property']);{q}
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := parseUri(jsn.node['system'], jsn.vObj['_system']);{q}
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseString(jsn.node['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);{q}
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroupElementTargetDependsOn(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupElementTargetDependsOn; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeUriValue(json, 'property', elem.property_Element, false);
  ComposeUriProps(json, 'property', elem.property_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'system', elem.systemElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'system', elem.systemElement, false);
  ComposeStringValue(json, 'code', elem.codeElement, false);
  ComposeStringProps(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupUnmapped(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMapGroupUnmapped(jsn)); {2}
end;

function TFHIRJsonParser.ParseConceptMapGroupUnmapped(jsn : TJsonObject) : TFhirConceptMapGroupUnmapped;
begin
  result := TFhirConceptMapGroupUnmapped.create;
  try
    ParseConceptMapGroupUnmappedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapGroupUnmappedProperties(jsn : TJsonObject; result : TFhirConceptMapGroupUnmapped);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirConceptmapUnmappedModeEnum, SYSTEMS_TFhirConceptmapUnmappedModeEnum);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);{q}
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
end;

procedure TFHIRJsonComposer.ComposeConceptMapGroupUnmapped(json : TJSONWriter; name : string; elem : TFhirConceptMapGroupUnmapped; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirConceptmapUnmappedModeEnum, false);
  ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirConceptmapUnmappedModeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConceptMap(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConceptMap(jsn)); {2}
end;

function TFHIRJsonParser.ParseConceptMap(jsn : TJsonObject) : TFhirConceptMap;
begin
  result := TFhirConceptMap.create;
  try
    ParseConceptMapProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConceptMapProperties(jsn : TJsonObject; result : TFhirConceptMap);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('sourceReference') {a3} then
      result.source := ParseReference(jsn.vObj['sourceReference']);
    if jsn.has('sourceUri') or jsn.has('_sourceUri') then
      result.source := parseUri(jsn.node['sourceUri'], jsn.vObj['_sourceUri']);
    if jsn.has('targetReference') {a3} then
      result.target := ParseReference(jsn.vObj['targetReference']);
    if jsn.has('targetUri') or jsn.has('_targetUri') then
      result.target := parseUri(jsn.node['targetUri'], jsn.vObj['_targetUri']);
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], result.groupList, parseConceptMapGroup);
end;

procedure TFHIRJsonComposer.ComposeConceptMap(json : TJSONWriter; name : string; elem : TFhirConceptMap; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirReference) then
    ComposeReference(json, 'sourceReference', TFhirReference(elem.source))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirUri) then 
  begin
    ComposeUriValue(json, 'sourceUri', TFhirUri(elem.source), false);
    ComposeUriProps(json, 'sourceUri', TFhirUri(elem.source), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.target is TFhirReference) then
    ComposeReference(json, 'targetReference', TFhirReference(elem.target))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.target is TFhirUri) then 
  begin
    ComposeUriValue(json, 'targetUri', TFhirUri(elem.target), false);
    ComposeUriProps(json, 'targetUri', TFhirUri(elem.target), false);
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('group') and (elem.groupList.Count > 0) then
  begin
    json.valueArray('group');
    for i := 0 to elem.groupList.Count - 1 do
      ComposeConceptMapGroup(json, '', elem.groupList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
procedure TFHIRJsonParser.ParseConditionStage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConditionStage(jsn)); {2}
end;

function TFHIRJsonParser.ParseConditionStage(jsn : TJsonObject) : TFhirConditionStage;
begin
  result := TFhirConditionStage.create;
  try
    ParseConditionStageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConditionStageProperties(jsn : TJsonObject; result : TFhirConditionStage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('summary') then
        result.summary := ParseCodeableConcept(jsn.vObj['summary']);{q3}
    if jsn.has('assessment') then
      iterateArray(jsn.vArr['assessment'], result.assessmentList, parseReference{Resource});
end;

procedure TFHIRJsonComposer.ComposeConditionStage(json : TJSONWriter; name : string; elem : TFhirConditionStage; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'summary', elem.summary); {a}
  if (SummaryOption in [soFull, soData]) and (elem.assessmentList.Count > 0) then
  begin
    json.valueArray('assessment');
    for i := 0 to elem.assessmentList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.assessmentList[i]); {z - Reference(ClinicalImpression|DiagnosticReport|Observation)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConditionEvidence(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConditionEvidence(jsn)); {2}
end;

function TFHIRJsonParser.ParseConditionEvidence(jsn : TJsonObject) : TFhirConditionEvidence;
begin
  result := TFhirConditionEvidence.create;
  try
    ParseConditionEvidenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConditionEvidenceProperties(jsn : TJsonObject; result : TFhirConditionEvidence);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCodeableConcept);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parseReference{TFhirReference});
end;

procedure TFHIRJsonComposer.ComposeConditionEvidence(json : TJSONWriter; name : string; elem : TFhirConditionEvidence; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.codeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.detailList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCondition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCondition(jsn)); {2}
end;

function TFHIRJsonParser.ParseCondition(jsn : TJsonObject) : TFhirCondition;
begin
  result := TFhirCondition.create;
  try
    ParseConditionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConditionProperties(jsn : TJsonObject; result : TFhirCondition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('clinicalStatus') or jsn.has('_clinicalStatus')  then
      result.clinicalStatusElement := parseEnum(jsn.path+'/clinicalStatus', jsn.node['clinicalStatus'], jsn.vObj['_clinicalStatus'], CODES_TFhirConditionClinicalEnum, SYSTEMS_TFhirConditionClinicalEnum);
    if jsn.has('verificationStatus') or jsn.has('_verificationStatus')  then
      result.verificationStatusElement := parseEnum(jsn.path+'/verificationStatus', jsn.node['verificationStatus'], jsn.vObj['_verificationStatus'], CODES_TFhirConditionVerStatusEnum, SYSTEMS_TFhirConditionVerStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('severity') then
        result.severity := ParseCodeableConcept(jsn.vObj['severity']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('bodySite') then
      iterateArray(jsn.vArr['bodySite'], result.bodySiteList, parseCodeableConcept);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('onsetAge') {a4} then
      result.onset := ParseAge(jsn.vObj['onsetAge']);
    if jsn.has('onsetPeriod') {a4} then
      result.onset := ParsePeriod(jsn.vObj['onsetPeriod']);
    if jsn.has('onsetRange') {a4} then
      result.onset := ParseRange(jsn.vObj['onsetRange']);
    if jsn.has('onsetDateTime') or jsn.has('_onsetDateTime') then
      result.onset := parseDateTime(jsn.node['onsetDateTime'], jsn.vObj['_onsetDateTime']);
    if jsn.has('onsetString') or jsn.has('_onsetString') then
      result.onset := parseString(jsn.node['onsetString'], jsn.vObj['_onsetString']);
    if jsn.has('abatementAge') {a4} then
      result.abatement := ParseAge(jsn.vObj['abatementAge']);
    if jsn.has('abatementPeriod') {a4} then
      result.abatement := ParsePeriod(jsn.vObj['abatementPeriod']);
    if jsn.has('abatementRange') {a4} then
      result.abatement := ParseRange(jsn.vObj['abatementRange']);
    if jsn.has('abatementDateTime') or jsn.has('_abatementDateTime') then
      result.abatement := parseDateTime(jsn.node['abatementDateTime'], jsn.vObj['_abatementDateTime']);
    if jsn.has('abatementBoolean') or jsn.has('_abatementBoolean') then
      result.abatement := parseBoolean(jsn.node['abatementBoolean'], jsn.vObj['_abatementBoolean']);
    if jsn.has('abatementString') or jsn.has('_abatementString') then
      result.abatement := parseString(jsn.node['abatementString'], jsn.vObj['_abatementString']);
    if jsn.has('assertedDate') or jsn.has('_assertedDate') then
        result.assertedDateElement := parseDateTime(jsn.node['assertedDate'], jsn.vObj['_assertedDate']);{q}
    if jsn.has('asserter') then
        result.asserter := ParseReference{Resource}(jsn.vObj['asserter']);{q3}
    if jsn.has('stage') then
        result.stage := ParseConditionStage(jsn.vObj['stage']);{q3}
    if jsn.has('evidence') then
      iterateArray(jsn.vArr['evidence'], result.evidenceList, parseConditionEvidence);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeCondition(json : TJSONWriter; name : string; elem : TFhirCondition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('clinicalStatus') then
    ComposeEnumValue(json, 'clinicalStatus', elem.ClinicalStatusElement, CODES_TFhirConditionClinicalEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('clinicalStatus') then
    ComposeEnumProps(json, 'clinicalStatus', elem.ClinicalStatusElement, CODES_TFhirConditionClinicalEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.verificationStatusElement <> nil) and (elem.verificationStatusElement.primitiveValue <> 'unknown')) and doCompose('verificationStatus') then
    ComposeEnumValue(json, 'verificationStatus', elem.VerificationStatusElement, CODES_TFhirConditionVerStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.verificationStatusElement <> nil) and (elem.verificationStatusElement.primitiveValue <> 'unknown')) and doCompose('verificationStatus') then
    ComposeEnumProps(json, 'verificationStatus', elem.VerificationStatusElement, CODES_TFhirConditionVerStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('category') and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('severity') then
    ComposeCodeableConcept(json, 'severity', elem.severity); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('bodySite') and (elem.bodySiteList.Count > 0) then
  begin
    json.valueArray('bodySite');
    for i := 0 to elem.bodySiteList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.bodySiteList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirAge) then 
    ComposeAge(json, 'onsetAge', TFhirAge(elem.onset)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirPeriod) then 
    ComposePeriod(json, 'onsetPeriod', TFhirPeriod(elem.onset)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirRange) then 
    ComposeRange(json, 'onsetRange', TFhirRange(elem.onset)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'onsetDateTime', TFhirDateTime(elem.onset), false);
    ComposeDateTimeProps(json, 'onsetDateTime', TFhirDateTime(elem.onset), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirString) then 
  begin
    ComposeStringValue(json, 'onsetString', TFhirString(elem.onset), false);
    ComposeStringProps(json, 'onsetString', TFhirString(elem.onset), false);
  end;
  if (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirAge) then 
    ComposeAge(json, 'abatementAge', TFhirAge(elem.abatement)) 
  else if (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirPeriod) then 
    ComposePeriod(json, 'abatementPeriod', TFhirPeriod(elem.abatement)) 
  else if (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirRange) then 
    ComposeRange(json, 'abatementRange', TFhirRange(elem.abatement)) 
  else if (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'abatementDateTime', TFhirDateTime(elem.abatement), false);
    ComposeDateTimeProps(json, 'abatementDateTime', TFhirDateTime(elem.abatement), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'abatementBoolean', TFhirBoolean(elem.abatement), false);
    ComposeBooleanProps(json, 'abatementBoolean', TFhirBoolean(elem.abatement), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirString) then 
  begin
    ComposeStringValue(json, 'abatementString', TFhirString(elem.abatement), false);
    ComposeStringProps(json, 'abatementString', TFhirString(elem.abatement), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('assertedDate') then
    ComposeDateTimeValue(json, 'assertedDate', elem.assertedDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('assertedDate') then
    ComposeDateTimeProps(json, 'assertedDate', elem.assertedDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('asserter') then
    ComposeReference{Resource}(json, 'asserter', elem.asserter); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('stage') then
    ComposeConditionStage(json, 'stage', elem.stage); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('evidence') and (elem.evidenceList.Count > 0) then
  begin
    json.valueArray('evidence');
    for i := 0 to elem.evidenceList.Count - 1 do
      ComposeConditionEvidence(json, '', elem.evidenceList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
procedure TFHIRJsonParser.ParseConsentActor(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentActor(jsn)); {2}
end;

function TFHIRJsonParser.ParseConsentActor(jsn : TJsonObject) : TFhirConsentActor;
begin
  result := TFhirConsentActor.create;
  try
    ParseConsentActorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentActorProperties(jsn : TJsonObject; result : TFhirConsentActor);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('reference') then
        result.reference := ParseReference{Resource}(jsn.vObj['reference']);{q3}
end;

procedure TFHIRJsonComposer.ComposeConsentActor(json : TJSONWriter; name : string; elem : TFhirConsentActor; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'role', elem.role); {a}
  ComposeReference{Resource}(json, 'reference', elem.reference); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConsentPolicy(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentPolicy(jsn)); {2}
end;

function TFHIRJsonParser.ParseConsentPolicy(jsn : TJsonObject) : TFhirConsentPolicy;
begin
  result := TFhirConsentPolicy.create;
  try
    ParseConsentPolicyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentPolicyProperties(jsn : TJsonObject; result : TFhirConsentPolicy);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('authority') or jsn.has('_authority') then
        result.authorityElement := parseUri(jsn.node['authority'], jsn.vObj['_authority']);{q}
    if jsn.has('uri') or jsn.has('_uri') then
        result.uriElement := parseUri(jsn.node['uri'], jsn.vObj['_uri']);{q}
end;

procedure TFHIRJsonComposer.ComposeConsentPolicy(json : TJSONWriter; name : string; elem : TFhirConsentPolicy; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'authority', elem.authorityElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'authority', elem.authorityElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'uri', elem.uriElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'uri', elem.uriElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConsentData(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentData(jsn)); {2}
end;

function TFHIRJsonParser.ParseConsentData(jsn : TJsonObject) : TFhirConsentData;
begin
  result := TFhirConsentData.create;
  try
    ParseConsentDataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentDataProperties(jsn : TJsonObject; result : TFhirConsentData);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('meaning') or jsn.has('_meaning')  then
      result.meaningElement := parseEnum(jsn.path+'/meaning', jsn.node['meaning'], jsn.vObj['_meaning'], CODES_TFhirConsentDataMeaningEnum, SYSTEMS_TFhirConsentDataMeaningEnum);
    if jsn.has('reference') then
        result.reference := ParseReference{TFhirReference}(jsn.vObj['reference']);{q3}
end;

procedure TFHIRJsonComposer.ComposeConsentData(json : TJSONWriter; name : string; elem : TFhirConsentData; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'meaning', elem.MeaningElement, CODES_TFhirConsentDataMeaningEnum, false);
  ComposeEnumProps(json, 'meaning', elem.MeaningElement, CODES_TFhirConsentDataMeaningEnum, false);
  ComposeReference{TFhirReference}(json, 'reference', elem.reference); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConsentExcept(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentExcept(jsn)); {2}
end;

function TFHIRJsonParser.ParseConsentExcept(jsn : TJsonObject) : TFhirConsentExcept;
begin
  result := TFhirConsentExcept.create;
  try
    ParseConsentExceptProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentExceptProperties(jsn : TJsonObject; result : TFhirConsentExcept);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirConsentExceptTypeEnum, SYSTEMS_TFhirConsentExceptTypeEnum);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('actor') then
      iterateArray(jsn.vArr['actor'], result.actorList, parseConsentExceptActor);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseCodeableConcept);
    if jsn.has('securityLabel') then
      iterateArray(jsn.vArr['securityLabel'], result.securityLabelList, parseCoding);
    if jsn.has('purpose') then
      iterateArray(jsn.vArr['purpose'], result.purposeList, parseCoding);
    if jsn.has('class') then
      iterateArray(jsn.vArr['class'], result.class_List, parseCoding);
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCoding);
    if jsn.has('dataPeriod') then
        result.dataPeriod := ParsePeriod(jsn.vObj['dataPeriod']);{q3}
    if jsn.has('data') then
      iterateArray(jsn.vArr['data'], result.dataList, parseConsentExceptData);
end;

procedure TFHIRJsonComposer.ComposeConsentExcept(json : TJSONWriter; name : string; elem : TFhirConsentExcept; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirConsentExceptTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirConsentExceptTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.actorList.Count > 0) then
  begin
    json.valueArray('actor');
    for i := 0 to elem.actorList.Count - 1 do
      ComposeConsentExceptActor(json, '', elem.actorList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.actionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.securityLabelList.Count > 0) then
  begin
    json.valueArray('securityLabel');
    for i := 0 to elem.securityLabelList.Count - 1 do
      ComposeCoding(json, '', elem.securityLabelList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.purposeList.Count > 0) then
  begin
    json.valueArray('purpose');
    for i := 0 to elem.purposeList.Count - 1 do
      ComposeCoding(json, '', elem.purposeList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.class_List.Count > 0) then
  begin
    json.valueArray('class');
    for i := 0 to elem.class_List.Count - 1 do
      ComposeCoding(json, '', elem.class_List[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCoding(json, '', elem.codeList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'dataPeriod', elem.dataPeriod); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.dataList.Count > 0) then
  begin
    json.valueArray('data');
    for i := 0 to elem.dataList.Count - 1 do
      ComposeConsentExceptData(json, '', elem.dataList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConsentExceptActor(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentExceptActor(jsn)); {2}
end;

function TFHIRJsonParser.ParseConsentExceptActor(jsn : TJsonObject) : TFhirConsentExceptActor;
begin
  result := TFhirConsentExceptActor.create;
  try
    ParseConsentExceptActorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentExceptActorProperties(jsn : TJsonObject; result : TFhirConsentExceptActor);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('reference') then
        result.reference := ParseReference{Resource}(jsn.vObj['reference']);{q3}
end;

procedure TFHIRJsonComposer.ComposeConsentExceptActor(json : TJSONWriter; name : string; elem : TFhirConsentExceptActor; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'role', elem.role); {a}
  ComposeReference{Resource}(json, 'reference', elem.reference); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConsentExceptData(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsentExceptData(jsn)); {2}
end;

function TFHIRJsonParser.ParseConsentExceptData(jsn : TJsonObject) : TFhirConsentExceptData;
begin
  result := TFhirConsentExceptData.create;
  try
    ParseConsentExceptDataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentExceptDataProperties(jsn : TJsonObject; result : TFhirConsentExceptData);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('meaning') or jsn.has('_meaning')  then
      result.meaningElement := parseEnum(jsn.path+'/meaning', jsn.node['meaning'], jsn.vObj['_meaning'], CODES_TFhirConsentDataMeaningEnum, SYSTEMS_TFhirConsentDataMeaningEnum);
    if jsn.has('reference') then
        result.reference := ParseReference{TFhirReference}(jsn.vObj['reference']);{q3}
end;

procedure TFHIRJsonComposer.ComposeConsentExceptData(json : TJSONWriter; name : string; elem : TFhirConsentExceptData; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'meaning', elem.MeaningElement, CODES_TFhirConsentDataMeaningEnum, false);
  ComposeEnumProps(json, 'meaning', elem.MeaningElement, CODES_TFhirConsentDataMeaningEnum, false);
  ComposeReference{TFhirReference}(json, 'reference', elem.reference); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseConsent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseConsent(jsn)); {2}
end;

function TFHIRJsonParser.ParseConsent(jsn : TJsonObject) : TFhirConsent;
begin
  result := TFhirConsent.create;
  try
    ParseConsentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseConsentProperties(jsn : TJsonObject; result : TFhirConsent);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirConsentStateCodesEnum, SYSTEMS_TFhirConsentStateCodesEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('dateTime') or jsn.has('_dateTime') then
        result.dateTimeElement := parseDateTime(jsn.node['dateTime'], jsn.vObj['_dateTime']);{q}
    if jsn.has('consentingParty') then
      iterateArray(jsn.vArr['consentingParty'], result.consentingPartyList, parseReference{Resource});
    if jsn.has('actor') then
      iterateArray(jsn.vArr['actor'], result.actorList, parseConsentActor);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseCodeableConcept);
    if jsn.has('organization') then
      iterateArray(jsn.vArr['organization'], result.organizationList, parseReference{TFhirOrganization});
    if jsn.has('sourceAttachment') {a4} then
      result.source := ParseAttachment(jsn.vObj['sourceAttachment']);
    if jsn.has('sourceIdentifier') {a4} then
      result.source := ParseIdentifier(jsn.vObj['sourceIdentifier']);
    if jsn.has('sourceReference') {a3} then
      result.source := ParseReference(jsn.vObj['sourceReference']);
    if jsn.has('policy') then
      iterateArray(jsn.vArr['policy'], result.policyList, parseConsentPolicy);
    if jsn.has('policyRule') or jsn.has('_policyRule') then
        result.policyRuleElement := parseUri(jsn.node['policyRule'], jsn.vObj['_policyRule']);{q}
    if jsn.has('securityLabel') then
      iterateArray(jsn.vArr['securityLabel'], result.securityLabelList, parseCoding);
    if jsn.has('purpose') then
      iterateArray(jsn.vArr['purpose'], result.purposeList, parseCoding);
    if jsn.has('dataPeriod') then
        result.dataPeriod := ParsePeriod(jsn.vObj['dataPeriod']);{q3}
    if jsn.has('data') then
      iterateArray(jsn.vArr['data'], result.dataList, parseConsentData);
    if jsn.has('except') then
      iterateArray(jsn.vArr['except'], result.except_List, parseConsentExcept);
end;

procedure TFHIRJsonComposer.ComposeConsent(json : TJSONWriter; name : string; elem : TFhirConsent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirConsentStateCodesEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirConsentStateCodesEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dateTime') then
    ComposeDateTimeValue(json, 'dateTime', elem.dateTimeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dateTime') then
    ComposeDateTimeProps(json, 'dateTime', elem.dateTimeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('consentingParty') and (elem.consentingPartyList.Count > 0) then
  begin
    json.valueArray('consentingParty');
    for i := 0 to elem.consentingPartyList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.consentingPartyList[i]); {z - Reference(Organization|Patient|Practitioner|RelatedPerson)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('actor') and (elem.actorList.Count > 0) then
  begin
    json.valueArray('actor');
    for i := 0 to elem.actorList.Count - 1 do
      ComposeConsentActor(json, '', elem.actorList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('action') and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.actionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('organization') and (elem.organizationList.Count > 0) then
  begin
    json.valueArray('organization');
    for i := 0 to elem.organizationList.Count - 1 do
      ComposeReference{TFhirOrganization}(json, '', elem.organizationList[i]); {z - Reference(Organization)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirAttachment) then 
    ComposeAttachment(json, 'sourceAttachment', TFhirAttachment(elem.source)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirIdentifier) then 
    ComposeIdentifier(json, 'sourceIdentifier', TFhirIdentifier(elem.source)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirReference) then
    ComposeReference(json, 'sourceReference', TFhirReference(elem.source));
  if (SummaryOption in [soFull, soData]) and doCompose('policy') and (elem.policyList.Count > 0) then
  begin
    json.valueArray('policy');
    for i := 0 to elem.policyList.Count - 1 do
      ComposeConsentPolicy(json, '', elem.policyList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('policyRule') then
    ComposeUriValue(json, 'policyRule', elem.policyRuleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('policyRule') then
    ComposeUriProps(json, 'policyRule', elem.policyRuleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('securityLabel') and (elem.securityLabelList.Count > 0) then
  begin
    json.valueArray('securityLabel');
    for i := 0 to elem.securityLabelList.Count - 1 do
      ComposeCoding(json, '', elem.securityLabelList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('purpose') and (elem.purposeList.Count > 0) then
  begin
    json.valueArray('purpose');
    for i := 0 to elem.purposeList.Count - 1 do
      ComposeCoding(json, '', elem.purposeList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dataPeriod') then
    ComposePeriod(json, 'dataPeriod', elem.dataPeriod); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('data') and (elem.dataList.Count > 0) then
  begin
    json.valueArray('data');
    for i := 0 to elem.dataList.Count - 1 do
      ComposeConsentData(json, '', elem.dataList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('except_') and (elem.except_List.Count > 0) then
  begin
    json.valueArray('except');
    for i := 0 to elem.except_List.Count - 1 do
      ComposeConsentExcept(json, '', elem.except_List[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
procedure TFHIRJsonParser.ParseContractAgent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractAgent(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractAgent(jsn : TJsonObject) : TFhirContractAgent;
begin
  result := TFhirContractAgent.create;
  try
    ParseContractAgentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractAgentProperties(jsn : TJsonObject; result : TFhirContractAgent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
    if jsn.has('role') then
      iterateArray(jsn.vArr['role'], result.roleList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeContractAgent(json : TJSONWriter; name : string; elem : TFhirContractAgent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if (SummaryOption in [soFull, soData]) and (elem.roleList.Count > 0) then
  begin
    json.valueArray('role');
    for i := 0 to elem.roleList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.roleList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractSigner(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractSigner(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractSigner(jsn : TJsonObject) : TFhirContractSigner;
begin
  result := TFhirContractSigner.create;
  try
    ParseContractSignerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractSignerProperties(jsn : TJsonObject; result : TFhirContractSigner);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
    if jsn.has('party') then
        result.party := ParseReference{Resource}(jsn.vObj['party']);{q3}
    if jsn.has('signature') then
      iterateArray(jsn.vArr['signature'], result.signatureList, parseSignature);
end;

procedure TFHIRJsonComposer.ComposeContractSigner(json : TJSONWriter; name : string; elem : TFhirContractSigner; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCoding(json, 'type', elem.type_); {a}
  ComposeReference{Resource}(json, 'party', elem.party); {a}
  if (elem.signatureList.Count > 0) then
  begin
    json.valueArray('signature');
    for i := 0 to elem.signatureList.Count - 1 do
      ComposeSignature(json, '', elem.signatureList[i]); {z - Signature}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractValuedItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractValuedItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractValuedItem(jsn : TJsonObject) : TFhirContractValuedItem;
begin
  result := TFhirContractValuedItem.create;
  try
    ParseContractValuedItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractValuedItemProperties(jsn : TJsonObject; result : TFhirContractValuedItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('entityCodeableConcept') {a4} then
      result.entity := ParseCodeableConcept(jsn.vObj['entityCodeableConcept']);
    if jsn.has('entityReference') {a3} then
      result.entity := ParseReference(jsn.vObj['entityReference']);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('effectiveTime') or jsn.has('_effectiveTime') then
        result.effectiveTimeElement := parseDateTime(jsn.node['effectiveTime'], jsn.vObj['_effectiveTime']);{q}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('points') or jsn.has('_points') then
        result.pointsElement := parseDecimal(jsn.node['points'], jsn.vObj['_points']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
end;

procedure TFHIRJsonComposer.ComposeContractValuedItem(json : TJSONWriter; name : string; elem : TFhirContractValuedItem; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.entity is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'entityCodeableConcept', TFhirCodeableConcept(elem.entity)) 
  else if (SummaryOption in [soFull, soData]) and (elem.entity is TFhirReference) then
    ComposeReference(json, 'entityReference', TFhirReference(elem.entity));
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'effectiveTime', elem.effectiveTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'effectiveTime', elem.effectiveTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'points', elem.pointsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'points', elem.pointsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractTerm(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTerm(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractTerm(jsn : TJsonObject) : TFhirContractTerm;
begin
  result := TFhirContractTerm.create;
  try
    ParseContractTermProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermProperties(jsn : TJsonObject; result : TFhirContractTerm);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('issued') or jsn.has('_issued') then
        result.issuedElement := parseDateTime(jsn.node['issued'], jsn.vObj['_issued']);{q}
    if jsn.has('applies') then
        result.applies := ParsePeriod(jsn.vObj['applies']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('subType') then
        result.subType := ParseCodeableConcept(jsn.vObj['subType']);{q3}
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseReference{TFhirReference});
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseCodeableConcept);
    if jsn.has('actionReason') then
      iterateArray(jsn.vArr['actionReason'], result.actionReasonList, parseCodeableConcept);
    if jsn.has('securityLabel') then
      iterateArray(jsn.vArr['securityLabel'], result.securityLabelList, parseCoding);
    if jsn.has('agent') then
      iterateArray(jsn.vArr['agent'], result.agentList, parseContractTermAgent);
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);{q}
    if jsn.has('valuedItem') then
      iterateArray(jsn.vArr['valuedItem'], result.valuedItemList, parseContractTermValuedItem);
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], result.groupList, parseContractTerm);
end;

procedure TFHIRJsonComposer.ComposeContractTerm(json : TJSONWriter; name : string; elem : TFhirContractTerm; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'issued', elem.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'issued', elem.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'applies', elem.applies); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'subType', elem.subType); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.topicList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.actionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.actionReasonList.Count > 0) then
  begin
    json.valueArray('actionReason');
    for i := 0 to elem.actionReasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.actionReasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.securityLabelList.Count > 0) then
  begin
    json.valueArray('securityLabel');
    for i := 0 to elem.securityLabelList.Count - 1 do
      ComposeCoding(json, '', elem.securityLabelList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.agentList.Count > 0) then
  begin
    json.valueArray('agent');
    for i := 0 to elem.agentList.Count - 1 do
      ComposeContractTermAgent(json, '', elem.agentList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.valuedItemList.Count > 0) then
  begin
    json.valueArray('valuedItem');
    for i := 0 to elem.valuedItemList.Count - 1 do
      ComposeContractTermValuedItem(json, '', elem.valuedItemList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.groupList.Count > 0) then
  begin
    json.valueArray('group');
    for i := 0 to elem.groupList.Count - 1 do
      ComposeContractTerm(json, '', elem.groupList[i]); {z - @Contract.term}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractTermAgent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermAgent(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractTermAgent(jsn : TJsonObject) : TFhirContractTermAgent;
begin
  result := TFhirContractTermAgent.create;
  try
    ParseContractTermAgentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermAgentProperties(jsn : TJsonObject; result : TFhirContractTermAgent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
    if jsn.has('role') then
      iterateArray(jsn.vArr['role'], result.roleList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeContractTermAgent(json : TJSONWriter; name : string; elem : TFhirContractTermAgent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if (SummaryOption in [soFull, soData]) and (elem.roleList.Count > 0) then
  begin
    json.valueArray('role');
    for i := 0 to elem.roleList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.roleList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractTermValuedItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractTermValuedItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractTermValuedItem(jsn : TJsonObject) : TFhirContractTermValuedItem;
begin
  result := TFhirContractTermValuedItem.create;
  try
    ParseContractTermValuedItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractTermValuedItemProperties(jsn : TJsonObject; result : TFhirContractTermValuedItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('entityCodeableConcept') {a4} then
      result.entity := ParseCodeableConcept(jsn.vObj['entityCodeableConcept']);
    if jsn.has('entityReference') {a3} then
      result.entity := ParseReference(jsn.vObj['entityReference']);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('effectiveTime') or jsn.has('_effectiveTime') then
        result.effectiveTimeElement := parseDateTime(jsn.node['effectiveTime'], jsn.vObj['_effectiveTime']);{q}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('points') or jsn.has('_points') then
        result.pointsElement := parseDecimal(jsn.node['points'], jsn.vObj['_points']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
end;

procedure TFHIRJsonComposer.ComposeContractTermValuedItem(json : TJSONWriter; name : string; elem : TFhirContractTermValuedItem; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.entity is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'entityCodeableConcept', TFhirCodeableConcept(elem.entity)) 
  else if (SummaryOption in [soFull, soData]) and (elem.entity is TFhirReference) then
    ComposeReference(json, 'entityReference', TFhirReference(elem.entity));
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'effectiveTime', elem.effectiveTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'effectiveTime', elem.effectiveTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'points', elem.pointsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'points', elem.pointsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractFriendly(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractFriendly(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractFriendly(jsn : TJsonObject) : TFhirContractFriendly;
begin
  result := TFhirContractFriendly.create;
  try
    ParseContractFriendlyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractFriendlyProperties(jsn : TJsonObject; result : TFhirContractFriendly);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('contentAttachment') {a4} then
      result.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      result.content := ParseReference(jsn.vObj['contentReference']);
end;

procedure TFHIRJsonComposer.ComposeContractFriendly(json : TJSONWriter; name : string; elem : TFhirContractFriendly; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(elem.content)) 
  else if (elem.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(elem.content));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractLegal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractLegal(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractLegal(jsn : TJsonObject) : TFhirContractLegal;
begin
  result := TFhirContractLegal.create;
  try
    ParseContractLegalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractLegalProperties(jsn : TJsonObject; result : TFhirContractLegal);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('contentAttachment') {a4} then
      result.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      result.content := ParseReference(jsn.vObj['contentReference']);
end;

procedure TFHIRJsonComposer.ComposeContractLegal(json : TJSONWriter; name : string; elem : TFhirContractLegal; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(elem.content)) 
  else if (elem.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(elem.content));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContractRule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContractRule(jsn)); {2}
end;

function TFHIRJsonParser.ParseContractRule(jsn : TJsonObject) : TFhirContractRule;
begin
  result := TFhirContractRule.create;
  try
    ParseContractRuleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractRuleProperties(jsn : TJsonObject; result : TFhirContractRule);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('contentAttachment') {a4} then
      result.content := ParseAttachment(jsn.vObj['contentAttachment']);
    if jsn.has('contentReference') {a3} then
      result.content := ParseReference(jsn.vObj['contentReference']);
end;

procedure TFHIRJsonComposer.ComposeContractRule(json : TJSONWriter; name : string; elem : TFhirContractRule; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.content is TFhirAttachment) then 
    ComposeAttachment(json, 'contentAttachment', TFhirAttachment(elem.content)) 
  else if (elem.content is TFhirReference) then
    ComposeReference(json, 'contentReference', TFhirReference(elem.content));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseContract(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseContract(jsn)); {2}
end;

function TFHIRJsonParser.ParseContract(jsn : TJsonObject) : TFhirContract;
begin
  result := TFhirContract.create;
  try
    ParseContractProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseContractProperties(jsn : TJsonObject; result : TFhirContract);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirContractStatusEnum, SYSTEMS_TFhirContractStatusEnum);
    if jsn.has('issued') or jsn.has('_issued') then
        result.issuedElement := parseDateTime(jsn.node['issued'], jsn.vObj['_issued']);{q}
    if jsn.has('applies') then
        result.applies := ParsePeriod(jsn.vObj['applies']);{q3}
    if jsn.has('subject') then
      iterateArray(jsn.vArr['subject'], result.subjectList, parseReference{TFhirReference});
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseReference{TFhirReference});
    if jsn.has('authority') then
      iterateArray(jsn.vArr['authority'], result.authorityList, parseReference{TFhirOrganization});
    if jsn.has('domain') then
      iterateArray(jsn.vArr['domain'], result.domainList, parseReference{TFhirLocation});
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('subType') then
      iterateArray(jsn.vArr['subType'], result.subTypeList, parseCodeableConcept);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseCodeableConcept);
    if jsn.has('actionReason') then
      iterateArray(jsn.vArr['actionReason'], result.actionReasonList, parseCodeableConcept);
    if jsn.has('decisionType') then
        result.decisionType := ParseCodeableConcept(jsn.vObj['decisionType']);{q3}
    if jsn.has('contentDerivative') then
        result.contentDerivative := ParseCodeableConcept(jsn.vObj['contentDerivative']);{q3}
    if jsn.has('securityLabel') then
      iterateArray(jsn.vArr['securityLabel'], result.securityLabelList, parseCoding);
    if jsn.has('agent') then
      iterateArray(jsn.vArr['agent'], result.agentList, parseContractAgent);
    if jsn.has('signer') then
      iterateArray(jsn.vArr['signer'], result.signerList, parseContractSigner);
    if jsn.has('valuedItem') then
      iterateArray(jsn.vArr['valuedItem'], result.valuedItemList, parseContractValuedItem);
    if jsn.has('term') then
      iterateArray(jsn.vArr['term'], result.termList, parseContractTerm);
    if jsn.has('bindingAttachment') {a4} then
      result.binding := ParseAttachment(jsn.vObj['bindingAttachment']);
    if jsn.has('bindingReference') {a3} then
      result.binding := ParseReference(jsn.vObj['bindingReference']);
    if jsn.has('friendly') then
      iterateArray(jsn.vArr['friendly'], result.friendlyList, parseContractFriendly);
    if jsn.has('legal') then
      iterateArray(jsn.vArr['legal'], result.legalList, parseContractLegal);
    if jsn.has('rule') then
      iterateArray(jsn.vArr['rule'], result.ruleList, parseContractRule);
end;

procedure TFHIRJsonComposer.ComposeContract(json : TJSONWriter; name : string; elem : TFhirContract; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirContractStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirContractStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('issued') then
    ComposeDateTimeValue(json, 'issued', elem.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('issued') then
    ComposeDateTimeProps(json, 'issued', elem.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('applies') then
    ComposePeriod(json, 'applies', elem.applies); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') and (elem.subjectList.Count > 0) then
  begin
    json.valueArray('subject');
    for i := 0 to elem.subjectList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.subjectList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('topic') and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.topicList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('authority') and (elem.authorityList.Count > 0) then
  begin
    json.valueArray('authority');
    for i := 0 to elem.authorityList.Count - 1 do
      ComposeReference{TFhirOrganization}(json, '', elem.authorityList[i]); {z - Reference(Organization)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('domain') and (elem.domainList.Count > 0) then
  begin
    json.valueArray('domain');
    for i := 0 to elem.domainList.Count - 1 do
      ComposeReference{TFhirLocation}(json, '', elem.domainList[i]); {z - Reference(Location)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subType') and (elem.subTypeList.Count > 0) then
  begin
    json.valueArray('subType');
    for i := 0 to elem.subTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.subTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('action') and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.actionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('actionReason') and (elem.actionReasonList.Count > 0) then
  begin
    json.valueArray('actionReason');
    for i := 0 to elem.actionReasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.actionReasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('decisionType') then
    ComposeCodeableConcept(json, 'decisionType', elem.decisionType); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('contentDerivative') then
    ComposeCodeableConcept(json, 'contentDerivative', elem.contentDerivative); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('securityLabel') and (elem.securityLabelList.Count > 0) then
  begin
    json.valueArray('securityLabel');
    for i := 0 to elem.securityLabelList.Count - 1 do
      ComposeCoding(json, '', elem.securityLabelList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('agent') and (elem.agentList.Count > 0) then
  begin
    json.valueArray('agent');
    for i := 0 to elem.agentList.Count - 1 do
      ComposeContractAgent(json, '', elem.agentList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('signer') and (elem.signerList.Count > 0) then
  begin
    json.valueArray('signer');
    for i := 0 to elem.signerList.Count - 1 do
      ComposeContractSigner(json, '', elem.signerList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('valuedItem') and (elem.valuedItemList.Count > 0) then
  begin
    json.valueArray('valuedItem');
    for i := 0 to elem.valuedItemList.Count - 1 do
      ComposeContractValuedItem(json, '', elem.valuedItemList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('term') and (elem.termList.Count > 0) then
  begin
    json.valueArray('term');
    for i := 0 to elem.termList.Count - 1 do
      ComposeContractTerm(json, '', elem.termList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.binding is TFhirAttachment) then 
    ComposeAttachment(json, 'bindingAttachment', TFhirAttachment(elem.binding)) 
  else if (SummaryOption in [soFull, soData]) and (elem.binding is TFhirReference) then
    ComposeReference(json, 'bindingReference', TFhirReference(elem.binding));
  if (SummaryOption in [soFull, soData]) and doCompose('friendly') and (elem.friendlyList.Count > 0) then
  begin
    json.valueArray('friendly');
    for i := 0 to elem.friendlyList.Count - 1 do
      ComposeContractFriendly(json, '', elem.friendlyList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('legal') and (elem.legalList.Count > 0) then
  begin
    json.valueArray('legal');
    for i := 0 to elem.legalList.Count - 1 do
      ComposeContractLegal(json, '', elem.legalList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('rule') and (elem.ruleList.Count > 0) then
  begin
    json.valueArray('rule');
    for i := 0 to elem.ruleList.Count - 1 do
      ComposeContractRule(json, '', elem.ruleList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
procedure TFHIRJsonParser.ParseCoverageGrouping(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverageGrouping(jsn)); {2}
end;

function TFHIRJsonParser.ParseCoverageGrouping(jsn : TJsonObject) : TFhirCoverageGrouping;
begin
  result := TFhirCoverageGrouping.create;
  try
    ParseCoverageGroupingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageGroupingProperties(jsn : TJsonObject; result : TFhirCoverageGrouping);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('group') or jsn.has('_group') then
        result.groupElement := parseString(jsn.node['group'], jsn.vObj['_group']);{q}
    if jsn.has('groupDisplay') or jsn.has('_groupDisplay') then
        result.groupDisplayElement := parseString(jsn.node['groupDisplay'], jsn.vObj['_groupDisplay']);{q}
    if jsn.has('subGroup') or jsn.has('_subGroup') then
        result.subGroupElement := parseString(jsn.node['subGroup'], jsn.vObj['_subGroup']);{q}
    if jsn.has('subGroupDisplay') or jsn.has('_subGroupDisplay') then
        result.subGroupDisplayElement := parseString(jsn.node['subGroupDisplay'], jsn.vObj['_subGroupDisplay']);{q}
    if jsn.has('plan') or jsn.has('_plan') then
        result.planElement := parseString(jsn.node['plan'], jsn.vObj['_plan']);{q}
    if jsn.has('planDisplay') or jsn.has('_planDisplay') then
        result.planDisplayElement := parseString(jsn.node['planDisplay'], jsn.vObj['_planDisplay']);{q}
    if jsn.has('subPlan') or jsn.has('_subPlan') then
        result.subPlanElement := parseString(jsn.node['subPlan'], jsn.vObj['_subPlan']);{q}
    if jsn.has('subPlanDisplay') or jsn.has('_subPlanDisplay') then
        result.subPlanDisplayElement := parseString(jsn.node['subPlanDisplay'], jsn.vObj['_subPlanDisplay']);{q}
    if jsn.has('class') or jsn.has('_class') then
        result.class_Element := parseString(jsn.node['class'], jsn.vObj['_class']);{q}
    if jsn.has('classDisplay') or jsn.has('_classDisplay') then
        result.classDisplayElement := parseString(jsn.node['classDisplay'], jsn.vObj['_classDisplay']);{q}
    if jsn.has('subClass') or jsn.has('_subClass') then
        result.subClassElement := parseString(jsn.node['subClass'], jsn.vObj['_subClass']);{q}
    if jsn.has('subClassDisplay') or jsn.has('_subClassDisplay') then
        result.subClassDisplayElement := parseString(jsn.node['subClassDisplay'], jsn.vObj['_subClassDisplay']);{q}
end;

procedure TFHIRJsonComposer.ComposeCoverageGrouping(json : TJSONWriter; name : string; elem : TFhirCoverageGrouping; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'group', elem.groupElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'group', elem.groupElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'groupDisplay', elem.groupDisplayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'groupDisplay', elem.groupDisplayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'subGroup', elem.subGroupElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'subGroup', elem.subGroupElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'subGroupDisplay', elem.subGroupDisplayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'subGroupDisplay', elem.subGroupDisplayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'plan', elem.planElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'plan', elem.planElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'planDisplay', elem.planDisplayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'planDisplay', elem.planDisplayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'subPlan', elem.subPlanElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'subPlan', elem.subPlanElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'subPlanDisplay', elem.subPlanDisplayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'subPlanDisplay', elem.subPlanDisplayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'class', elem.class_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'class', elem.class_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'classDisplay', elem.classDisplayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'classDisplay', elem.classDisplayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'subClass', elem.subClassElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'subClass', elem.subClassElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'subClassDisplay', elem.subClassDisplayElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'subClassDisplay', elem.subClassDisplayElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseCoverage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseCoverage(jsn)); {2}
end;

function TFHIRJsonParser.ParseCoverage(jsn : TJsonObject) : TFhirCoverage;
begin
  result := TFhirCoverage.create;
  try
    ParseCoverageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseCoverageProperties(jsn : TJsonObject; result : TFhirCoverage);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('policyHolder') then
        result.policyHolder := ParseReference{Resource}(jsn.vObj['policyHolder']);{q3}
    if jsn.has('subscriber') then
        result.subscriber := ParseReference{Resource}(jsn.vObj['subscriber']);{q3}
    if jsn.has('subscriberId') or jsn.has('_subscriberId') then
        result.subscriberIdElement := parseString(jsn.node['subscriberId'], jsn.vObj['_subscriberId']);{q}
    if jsn.has('beneficiary') then
        result.beneficiary := ParseReference{TFhirPatient}(jsn.vObj['beneficiary']);{q3}
    if jsn.has('relationship') then
        result.relationship := ParseCodeableConcept(jsn.vObj['relationship']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('payor') then
      iterateArray(jsn.vArr['payor'], result.payorList, parseReference{Resource});
    if jsn.has('grouping') then
        result.grouping := ParseCoverageGrouping(jsn.vObj['grouping']);{q3}
    if jsn.has('dependent') or jsn.has('_dependent') then
        result.dependentElement := parseString(jsn.node['dependent'], jsn.vObj['_dependent']);{q}
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parseString(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('order') or jsn.has('_order') then
        result.orderElement := parsePositiveInt(jsn.node['order'], jsn.vObj['_order']);{q}
    if jsn.has('network') or jsn.has('_network') then
        result.networkElement := parseString(jsn.node['network'], jsn.vObj['_network']);{q}
    if jsn.has('contract') then
      iterateArray(jsn.vArr['contract'], result.contractList, parseReference{TFhirContract});
end;

procedure TFHIRJsonComposer.ComposeCoverage(json : TJSONWriter; name : string; elem : TFhirCoverage; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('policyHolder') then
    ComposeReference{Resource}(json, 'policyHolder', elem.policyHolder); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subscriber') then
    ComposeReference{Resource}(json, 'subscriber', elem.subscriber); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subscriberId') then
    ComposeStringValue(json, 'subscriberId', elem.subscriberIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subscriberId') then
    ComposeStringProps(json, 'subscriberId', elem.subscriberIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('beneficiary') then
    ComposeReference{TFhirPatient}(json, 'beneficiary', elem.beneficiary); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('relationship') then
    ComposeCodeableConcept(json, 'relationship', elem.relationship); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('payor') and (elem.payorList.Count > 0) then
  begin
    json.valueArray('payor');
    for i := 0 to elem.payorList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.payorList[i]); {z - Reference(Organization|Patient|RelatedPerson)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('grouping') then
    ComposeCoverageGrouping(json, 'grouping', elem.grouping); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dependent') then
    ComposeStringValue(json, 'dependent', elem.dependentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dependent') then
    ComposeStringProps(json, 'dependent', elem.dependentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('sequence') then
    ComposeStringValue(json, 'sequence', elem.sequenceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('sequence') then
    ComposeStringProps(json, 'sequence', elem.sequenceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('order') then
    ComposePositiveIntValue(json, 'order', elem.orderElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('order') then
    ComposePositiveIntProps(json, 'order', elem.orderElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('network') then
    ComposeStringValue(json, 'network', elem.networkElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('network') then
    ComposeStringProps(json, 'network', elem.networkElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('contract') and (elem.contractList.Count > 0) then
  begin
    json.valueArray('contract');
    for i := 0 to elem.contractList.Count - 1 do
      ComposeReference{TFhirContract}(json, '', elem.contractList[i]); {z - Reference(Contract)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_DATAELEMENT}
procedure TFHIRJsonParser.ParseDataElementMapping(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDataElementMapping(jsn)); {2}
end;

function TFHIRJsonParser.ParseDataElementMapping(jsn : TJsonObject) : TFhirDataElementMapping;
begin
  result := TFhirDataElementMapping.create;
  try
    ParseDataElementMappingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDataElementMappingProperties(jsn : TJsonObject; result : TFhirDataElementMapping);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identity') or jsn.has('_identity') then
        result.identityElement := parseId(jsn.node['identity'], jsn.vObj['_identity']);{q}
    if jsn.has('uri') or jsn.has('_uri') then
        result.uriElement := parseUri(jsn.node['uri'], jsn.vObj['_uri']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeDataElementMapping(json : TJSONWriter; name : string; elem : TFhirDataElementMapping; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdValue(json, 'identity', elem.identityElement, false);
  ComposeIdProps(json, 'identity', elem.identityElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'uri', elem.uriElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'uri', elem.uriElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDataElement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDataElement(jsn)); {2}
end;

function TFHIRJsonParser.ParseDataElement(jsn : TJsonObject) : TFhirDataElement;
begin
  result := TFhirDataElement.create;
  try
    ParseDataElementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDataElementProperties(jsn : TJsonObject; result : TFhirDataElement);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('stringency') or jsn.has('_stringency')  then
      result.stringencyElement := parseEnum(jsn.path+'/stringency', jsn.node['stringency'], jsn.vObj['_stringency'], CODES_TFhirDataelementStringencyEnum, SYSTEMS_TFhirDataelementStringencyEnum);
    if jsn.has('mapping') then
      iterateArray(jsn.vArr['mapping'], result.mappingList, parseDataElementMapping);
    if jsn.has('element') then
      iterateArray(jsn.vArr['element'], result.elementList, parseElementDefinition);
end;

procedure TFHIRJsonComposer.ComposeDataElement(json : TJSONWriter; name : string; elem : TFhirDataElement; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('stringency') then
    ComposeEnumValue(json, 'stringency', elem.StringencyElement, CODES_TFhirDataelementStringencyEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('stringency') then
    ComposeEnumProps(json, 'stringency', elem.StringencyElement, CODES_TFhirDataelementStringencyEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('mapping') and (elem.mappingList.Count > 0) then
  begin
    json.valueArray('mapping');
    for i := 0 to elem.mappingList.Count - 1 do
      ComposeDataElementMapping(json, '', elem.mappingList[i]); {z - }
    json.FinishArray;
  end;
  if (elem.elementList.Count > 0) then
  begin
    json.valueArray('element');
    for i := 0 to elem.elementList.Count - 1 do
      ComposeElementDefinition(json, '', elem.elementList[i]); {z - ElementDefinition}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DATAELEMENT}
{$IFDEF FHIR_DETECTEDISSUE}
procedure TFHIRJsonParser.ParseDetectedIssueMitigation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDetectedIssueMitigation(jsn)); {2}
end;

function TFHIRJsonParser.ParseDetectedIssueMitigation(jsn : TJsonObject) : TFhirDetectedIssueMitigation;
begin
  result := TFhirDetectedIssueMitigation.create;
  try
    ParseDetectedIssueMitigationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDetectedIssueMitigationProperties(jsn : TJsonObject; result : TFhirDetectedIssueMitigation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('action') then
        result.action := ParseCodeableConcept(jsn.vObj['action']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('author') then
        result.author := ParseReference{TFhirPractitioner}(jsn.vObj['author']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDetectedIssueMitigation(json : TJSONWriter; name : string; elem : TFhirDetectedIssueMitigation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'action', elem.action); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'author', elem.author); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDetectedIssue(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDetectedIssue(jsn)); {2}
end;

function TFHIRJsonParser.ParseDetectedIssue(jsn : TJsonObject) : TFhirDetectedIssue;
begin
  result := TFhirDetectedIssue.create;
  try
    ParseDetectedIssueProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDetectedIssueProperties(jsn : TJsonObject; result : TFhirDetectedIssue);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('severity') or jsn.has('_severity')  then
      result.severityElement := parseEnum(jsn.path+'/severity', jsn.node['severity'], jsn.vObj['_severity'], CODES_TFhirDetectedissueSeverityEnum, SYSTEMS_TFhirDetectedissueSeverityEnum);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('author') then
        result.author := ParseReference{Resource}(jsn.vObj['author']);{q3}
    if jsn.has('implicated') then
      iterateArray(jsn.vArr['implicated'], result.implicatedList, parseReference{TFhirReference});
    if jsn.has('detail') or jsn.has('_detail') then
        result.detailElement := parseString(jsn.node['detail'], jsn.vObj['_detail']);{q}
    if jsn.has('reference') or jsn.has('_reference') then
        result.referenceElement := parseUri(jsn.node['reference'], jsn.vObj['_reference']);{q}
    if jsn.has('mitigation') then
      iterateArray(jsn.vArr['mitigation'], result.mitigationList, parseDetectedIssueMitigation);
end;

procedure TFHIRJsonComposer.ComposeDetectedIssue(json : TJSONWriter; name : string; elem : TFhirDetectedIssue; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('severity') then
    ComposeEnumValue(json, 'severity', elem.SeverityElement, CODES_TFhirDetectedissueSeverityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('severity') then
    ComposeEnumProps(json, 'severity', elem.SeverityElement, CODES_TFhirDetectedissueSeverityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    ComposeReference{Resource}(json, 'author', elem.author); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('implicated') and (elem.implicatedList.Count > 0) then
  begin
    json.valueArray('implicated');
    for i := 0 to elem.implicatedList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.implicatedList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('detail') then
    ComposeStringValue(json, 'detail', elem.detailElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('detail') then
    ComposeStringProps(json, 'detail', elem.detailElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('reference') then
    ComposeUriValue(json, 'reference', elem.referenceElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('reference') then
    ComposeUriProps(json, 'reference', elem.referenceElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('mitigation') and (elem.mitigationList.Count > 0) then
  begin
    json.valueArray('mitigation');
    for i := 0 to elem.mitigationList.Count - 1 do
      ComposeDetectedIssueMitigation(json, '', elem.mitigationList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
procedure TFHIRJsonParser.ParseDeviceUdi(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceUdi(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceUdi(jsn : TJsonObject) : TFhirDeviceUdi;
begin
  result := TFhirDeviceUdi.create;
  try
    ParseDeviceUdiProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceUdiProperties(jsn : TJsonObject; result : TFhirDeviceUdi);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('deviceIdentifier') or jsn.has('_deviceIdentifier') then
        result.deviceIdentifierElement := parseString(jsn.node['deviceIdentifier'], jsn.vObj['_deviceIdentifier']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('jurisdiction') or jsn.has('_jurisdiction') then
        result.jurisdictionElement := parseUri(jsn.node['jurisdiction'], jsn.vObj['_jurisdiction']);{q}
    if jsn.has('carrierHRF') or jsn.has('_carrierHRF') then
        result.carrierHRFElement := parseString(jsn.node['carrierHRF'], jsn.vObj['_carrierHRF']);{q}
    if jsn.has('carrierAIDC') or jsn.has('_carrierAIDC') then
        result.carrierAIDCElement := parseBase64Binary(jsn.node['carrierAIDC'], jsn.vObj['_carrierAIDC']);{q}
    if jsn.has('issuer') or jsn.has('_issuer') then
        result.issuerElement := parseUri(jsn.node['issuer'], jsn.vObj['_issuer']);{q}
    if jsn.has('entryType') or jsn.has('_entryType')  then
      result.entryTypeElement := parseEnum(jsn.path+'/entryType', jsn.node['entryType'], jsn.vObj['_entryType'], CODES_TFhirUdiEntryTypeEnum, SYSTEMS_TFhirUdiEntryTypeEnum);
end;

procedure TFHIRJsonComposer.ComposeDeviceUdi(json : TJSONWriter; name : string; elem : TFhirDeviceUdi; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'deviceIdentifier', elem.deviceIdentifierElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'deviceIdentifier', elem.deviceIdentifierElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'jurisdiction', elem.jurisdictionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'jurisdiction', elem.jurisdictionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'carrierHRF', elem.carrierHRFElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'carrierHRF', elem.carrierHRFElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryValue(json, 'carrierAIDC', elem.carrierAIDCElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64BinaryProps(json, 'carrierAIDC', elem.carrierAIDCElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'issuer', elem.issuerElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'issuer', elem.issuerElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'entryType', elem.EntryTypeElement, CODES_TFhirUdiEntryTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'entryType', elem.EntryTypeElement, CODES_TFhirUdiEntryTypeEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDevice(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDevice(jsn)); {2}
end;

function TFHIRJsonParser.ParseDevice(jsn : TJsonObject) : TFhirDevice;
begin
  result := TFhirDevice.create;
  try
    ParseDeviceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceProperties(jsn : TJsonObject; result : TFhirDevice);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('udi') then
        result.udi := ParseDeviceUdi(jsn.vObj['udi']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirDeviceStatusEnum, SYSTEMS_TFhirDeviceStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('lotNumber') or jsn.has('_lotNumber') then
        result.lotNumberElement := parseString(jsn.node['lotNumber'], jsn.vObj['_lotNumber']);{q}
    if jsn.has('manufacturer') or jsn.has('_manufacturer') then
        result.manufacturerElement := parseString(jsn.node['manufacturer'], jsn.vObj['_manufacturer']);{q}
    if jsn.has('manufactureDate') or jsn.has('_manufactureDate') then
        result.manufactureDateElement := parseDateTime(jsn.node['manufactureDate'], jsn.vObj['_manufactureDate']);{q}
    if jsn.has('expirationDate') or jsn.has('_expirationDate') then
        result.expirationDateElement := parseDateTime(jsn.node['expirationDate'], jsn.vObj['_expirationDate']);{q}
    if jsn.has('model') or jsn.has('_model') then
        result.modelElement := parseString(jsn.node['model'], jsn.vObj['_model']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('owner') then
        result.owner := ParseReference{TFhirOrganization}(jsn.vObj['owner']);{q3}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactPoint);
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('safety') then
      iterateArray(jsn.vArr['safety'], result.safetyList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeDevice(json : TJSONWriter; name : string; elem : TFhirDevice; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('udi') then
    ComposeDeviceUdi(json, 'udi', elem.udi); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirDeviceStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirDeviceStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('lotNumber') then
    ComposeStringValue(json, 'lotNumber', elem.lotNumberElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lotNumber') then
    ComposeStringProps(json, 'lotNumber', elem.lotNumberElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('manufacturer') then
    ComposeStringValue(json, 'manufacturer', elem.manufacturerElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('manufacturer') then
    ComposeStringProps(json, 'manufacturer', elem.manufacturerElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('manufactureDate') then
    ComposeDateTimeValue(json, 'manufactureDate', elem.manufactureDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('manufactureDate') then
    ComposeDateTimeProps(json, 'manufactureDate', elem.manufactureDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('expirationDate') then
    ComposeDateTimeValue(json, 'expirationDate', elem.expirationDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('expirationDate') then
    ComposeDateTimeProps(json, 'expirationDate', elem.expirationDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('model') then
    ComposeStringValue(json, 'model', elem.modelElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('model') then
    ComposeStringProps(json, 'model', elem.modelElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('owner') then
    ComposeReference{TFhirOrganization}(json, 'owner', elem.owner); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactPoint(json, '', elem.contactList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('safety') and (elem.safetyList.Count > 0) then
  begin
    json.valueArray('safety');
    for i := 0 to elem.safetyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.safetyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICECOMPONENT}
procedure TFHIRJsonParser.ParseDeviceComponentProductionSpecification(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceComponentProductionSpecification(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceComponentProductionSpecification(jsn : TJsonObject) : TFhirDeviceComponentProductionSpecification;
begin
  result := TFhirDeviceComponentProductionSpecification.create;
  try
    ParseDeviceComponentProductionSpecificationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceComponentProductionSpecificationProperties(jsn : TJsonObject; result : TFhirDeviceComponentProductionSpecification);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('specType') then
        result.specType := ParseCodeableConcept(jsn.vObj['specType']);{q3}
    if jsn.has('componentId') then
        result.componentId := ParseIdentifier(jsn.vObj['componentId']);{q3}
    if jsn.has('productionSpec') or jsn.has('_productionSpec') then
        result.productionSpecElement := parseString(jsn.node['productionSpec'], jsn.vObj['_productionSpec']);{q}
end;

procedure TFHIRJsonComposer.ComposeDeviceComponentProductionSpecification(json : TJSONWriter; name : string; elem : TFhirDeviceComponentProductionSpecification; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'specType', elem.specType); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'componentId', elem.componentId); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'productionSpec', elem.productionSpecElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'productionSpec', elem.productionSpecElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDeviceComponent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceComponent(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceComponent(jsn : TJsonObject) : TFhirDeviceComponent;
begin
  result := TFhirDeviceComponent.create;
  try
    ParseDeviceComponentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceComponentProperties(jsn : TJsonObject; result : TFhirDeviceComponent);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('lastSystemChange') or jsn.has('_lastSystemChange') then
        result.lastSystemChangeElement := parseInstant(jsn.node['lastSystemChange'], jsn.vObj['_lastSystemChange']);{q}
    if jsn.has('source') then
        result.source := ParseReference{TFhirDevice}(jsn.vObj['source']);{q3}
    if jsn.has('parent') then
        result.parent := ParseReference{TFhirDeviceComponent}(jsn.vObj['parent']);{q3}
    if jsn.has('operationalStatus') then
      iterateArray(jsn.vArr['operationalStatus'], result.operationalStatusList, parseCodeableConcept);
    if jsn.has('parameterGroup') then
        result.parameterGroup := ParseCodeableConcept(jsn.vObj['parameterGroup']);{q3}
    if jsn.has('measurementPrinciple') or jsn.has('_measurementPrinciple')  then
      result.measurementPrincipleElement := parseEnum(jsn.path+'/measurementPrinciple', jsn.node['measurementPrinciple'], jsn.vObj['_measurementPrinciple'], CODES_TFhirMeasurementPrincipleEnum, SYSTEMS_TFhirMeasurementPrincipleEnum);
    if jsn.has('productionSpecification') then
      iterateArray(jsn.vArr['productionSpecification'], result.productionSpecificationList, parseDeviceComponentProductionSpecification);
    if jsn.has('languageCode') then
        result.languageCode := ParseCodeableConcept(jsn.vObj['languageCode']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDeviceComponent(json : TJSONWriter; name : string; elem : TFhirDeviceComponent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('lastSystemChange') then
    ComposeInstantValue(json, 'lastSystemChange', elem.lastSystemChangeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('lastSystemChange') then
    ComposeInstantProps(json, 'lastSystemChange', elem.lastSystemChangeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('source') then
    ComposeReference{TFhirDevice}(json, 'source', elem.source); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('parent') then
    ComposeReference{TFhirDeviceComponent}(json, 'parent', elem.parent); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('operationalStatus') and (elem.operationalStatusList.Count > 0) then
  begin
    json.valueArray('operationalStatus');
    for i := 0 to elem.operationalStatusList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.operationalStatusList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('parameterGroup') then
    ComposeCodeableConcept(json, 'parameterGroup', elem.parameterGroup); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('measurementPrinciple') then
    ComposeEnumValue(json, 'measurementPrinciple', elem.MeasurementPrincipleElement, CODES_TFhirMeasurementPrincipleEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('measurementPrinciple') then
    ComposeEnumProps(json, 'measurementPrinciple', elem.MeasurementPrincipleElement, CODES_TFhirMeasurementPrincipleEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('productionSpecification') and (elem.productionSpecificationList.Count > 0) then
  begin
    json.valueArray('productionSpecification');
    for i := 0 to elem.productionSpecificationList.Count - 1 do
      ComposeDeviceComponentProductionSpecification(json, '', elem.productionSpecificationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('languageCode') then
    ComposeCodeableConcept(json, 'languageCode', elem.languageCode); {a}
end;

{$ENDIF FHIR_DEVICECOMPONENT}
{$IFDEF FHIR_DEVICEMETRIC}
procedure TFHIRJsonParser.ParseDeviceMetricCalibration(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceMetricCalibration(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceMetricCalibration(jsn : TJsonObject) : TFhirDeviceMetricCalibration;
begin
  result := TFhirDeviceMetricCalibration.create;
  try
    ParseDeviceMetricCalibrationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceMetricCalibrationProperties(jsn : TJsonObject; result : TFhirDeviceMetricCalibration);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirMetricCalibrationTypeEnum, SYSTEMS_TFhirMetricCalibrationTypeEnum);
    if jsn.has('state') or jsn.has('_state')  then
      result.stateElement := parseEnum(jsn.path+'/state', jsn.node['state'], jsn.vObj['_state'], CODES_TFhirMetricCalibrationStateEnum, SYSTEMS_TFhirMetricCalibrationStateEnum);
    if jsn.has('time') or jsn.has('_time') then
        result.timeElement := parseInstant(jsn.node['time'], jsn.vObj['_time']);{q}
end;

procedure TFHIRJsonComposer.ComposeDeviceMetricCalibration(json : TJSONWriter; name : string; elem : TFhirDeviceMetricCalibration; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirMetricCalibrationTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirMetricCalibrationTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'state', elem.StateElement, CODES_TFhirMetricCalibrationStateEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumProps(json, 'state', elem.StateElement, CODES_TFhirMetricCalibrationStateEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantValue(json, 'time', elem.timeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstantProps(json, 'time', elem.timeElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDeviceMetric(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceMetric(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceMetric(jsn : TJsonObject) : TFhirDeviceMetric;
begin
  result := TFhirDeviceMetric.create;
  try
    ParseDeviceMetricProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceMetricProperties(jsn : TJsonObject; result : TFhirDeviceMetric);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('unit') then
        result.unit_ := ParseCodeableConcept(jsn.vObj['unit']);{q3}
    if jsn.has('source') then
        result.source := ParseReference{TFhirDevice}(jsn.vObj['source']);{q3}
    if jsn.has('parent') then
        result.parent := ParseReference{TFhirDeviceComponent}(jsn.vObj['parent']);{q3}
    if jsn.has('operationalStatus') or jsn.has('_operationalStatus')  then
      result.operationalStatusElement := parseEnum(jsn.path+'/operationalStatus', jsn.node['operationalStatus'], jsn.vObj['_operationalStatus'], CODES_TFhirMetricOperationalStatusEnum, SYSTEMS_TFhirMetricOperationalStatusEnum);
    if jsn.has('color') or jsn.has('_color')  then
      result.colorElement := parseEnum(jsn.path+'/color', jsn.node['color'], jsn.vObj['_color'], CODES_TFhirMetricColorEnum, SYSTEMS_TFhirMetricColorEnum);
    if jsn.has('category') or jsn.has('_category')  then
      result.categoryElement := parseEnum(jsn.path+'/category', jsn.node['category'], jsn.vObj['_category'], CODES_TFhirMetricCategoryEnum, SYSTEMS_TFhirMetricCategoryEnum);
    if jsn.has('measurementPeriod') then
        result.measurementPeriod := ParseTiming(jsn.vObj['measurementPeriod']);{q3}
    if jsn.has('calibration') then
      iterateArray(jsn.vArr['calibration'], result.calibrationList, parseDeviceMetricCalibration);
end;

procedure TFHIRJsonComposer.ComposeDeviceMetric(json : TJSONWriter; name : string; elem : TFhirDeviceMetric; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('unit_') then
    ComposeCodeableConcept(json, 'unit', elem.unit_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('source') then
    ComposeReference{TFhirDevice}(json, 'source', elem.source); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('parent') then
    ComposeReference{TFhirDeviceComponent}(json, 'parent', elem.parent); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('operationalStatus') then
    ComposeEnumValue(json, 'operationalStatus', elem.OperationalStatusElement, CODES_TFhirMetricOperationalStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('operationalStatus') then
    ComposeEnumProps(json, 'operationalStatus', elem.OperationalStatusElement, CODES_TFhirMetricOperationalStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('color') then
    ComposeEnumValue(json, 'color', elem.ColorElement, CODES_TFhirMetricColorEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('color') then
    ComposeEnumProps(json, 'color', elem.ColorElement, CODES_TFhirMetricColorEnum, false);
  ComposeEnumValue(json, 'category', elem.CategoryElement, CODES_TFhirMetricCategoryEnum, false);
  ComposeEnumProps(json, 'category', elem.CategoryElement, CODES_TFhirMetricCategoryEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('measurementPeriod') then
    ComposeTiming(json, 'measurementPeriod', elem.measurementPeriod); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('calibration') and (elem.calibrationList.Count > 0) then
  begin
    json.valueArray('calibration');
    for i := 0 to elem.calibrationList.Count - 1 do
      ComposeDeviceMetricCalibration(json, '', elem.calibrationList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
procedure TFHIRJsonParser.ParseDeviceRequestRequester(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceRequestRequester(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceRequestRequester(jsn : TJsonObject) : TFhirDeviceRequestRequester;
begin
  result := TFhirDeviceRequestRequester.create;
  try
    ParseDeviceRequestRequesterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceRequestRequesterProperties(jsn : TJsonObject; result : TFhirDeviceRequestRequester);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('agent') then
        result.agent := ParseReference{Resource}(jsn.vObj['agent']);{q3}
    if jsn.has('onBehalfOf') then
        result.onBehalfOf := ParseReference{TFhirOrganization}(jsn.vObj['onBehalfOf']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDeviceRequestRequester(json : TJSONWriter; name : string; elem : TFhirDeviceRequestRequester; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'agent', elem.agent); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'onBehalfOf', elem.onBehalfOf); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDeviceRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceRequest(jsn : TJsonObject) : TFhirDeviceRequest;
begin
  result := TFhirDeviceRequest.create;
  try
    ParseDeviceRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceRequestProperties(jsn : TJsonObject; result : TFhirDeviceRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('definition') then
      iterateArray(jsn.vArr['definition'], result.definitionList, parseReference{Resource});
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirReference});
    if jsn.has('priorRequest') then
      iterateArray(jsn.vArr['priorRequest'], result.priorRequestList, parseReference{TFhirReference});
    if jsn.has('groupIdentifier') then
        result.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('intent') then
        result.intent := ParseCodeableConcept(jsn.vObj['intent']);{q3}
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('codeReference') {a3} then
      result.code := ParseReference(jsn.vObj['codeReference']);
    if jsn.has('codeCodeableConcept') {a4} then
      result.code := ParseCodeableConcept(jsn.vObj['codeCodeableConcept']);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      result.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('requester') then
        result.requester := ParseDeviceRequestRequester(jsn.vObj['requester']);{q3}
    if jsn.has('performerType') then
        result.performerType := ParseCodeableConcept(jsn.vObj['performerType']);{q3}
    if jsn.has('performer') then
        result.performer := ParseReference{Resource}(jsn.vObj['performer']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{TFhirReference});
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], result.supportingInfoList, parseReference{TFhirReference});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('relevantHistory') then
      iterateArray(jsn.vArr['relevantHistory'], result.relevantHistoryList, parseReference{TFhirProvenance});
end;

procedure TFHIRJsonComposer.ComposeDeviceRequest(json : TJSONWriter; name : string; elem : TFhirDeviceRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('definition') and (elem.definitionList.Count > 0) then
  begin
    json.valueArray('definition');
    for i := 0 to elem.definitionList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.definitionList[i]); {z - Reference(ActivityDefinition|PlanDefinition)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.basedOnList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priorRequest') and (elem.priorRequestList.Count > 0) then
  begin
    json.valueArray('priorRequest');
    for i := 0 to elem.priorRequestList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.priorRequestList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('groupIdentifier') then
    ComposeIdentifier(json, 'groupIdentifier', elem.groupIdentifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  ComposeCodeableConcept(json, 'intent', elem.intent); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.priorityElement <> nil) and (elem.priorityElement.primitiveValue <> 'If missing, normal priority')) and doCompose('priority') then
    ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.priorityElement <> nil) and (elem.priorityElement.primitiveValue <> 'If missing, normal priority')) and doCompose('priority') then
    ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (elem.code is TFhirReference) then
    ComposeReference(json, 'codeReference', TFhirReference(elem.code))
  else if (elem.code is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'codeCodeableConcept', TFhirCodeableConcept(elem.code)) ;
  ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(elem.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requester') then
    ComposeDeviceRequestRequester(json, 'requester', elem.requester); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performerType') then
    ComposeCodeableConcept(json, 'performerType', elem.performerType); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') then
    ComposeReference{Resource}(json, 'performer', elem.performer); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.reasonReferenceList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInfo') and (elem.supportingInfoList.Count > 0) then
  begin
    json.valueArray('supportingInfo');
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInfoList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('relevantHistory') and (elem.relevantHistoryList.Count > 0) then
  begin
    json.valueArray('relevantHistory');
    for i := 0 to elem.relevantHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(json, '', elem.relevantHistoryList[i]); {z - Reference(Provenance)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
procedure TFHIRJsonParser.ParseDeviceUseStatement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDeviceUseStatement(jsn)); {2}
end;

function TFHIRJsonParser.ParseDeviceUseStatement(jsn : TJsonObject) : TFhirDeviceUseStatement;
begin
  result := TFhirDeviceUseStatement.create;
  try
    ParseDeviceUseStatementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDeviceUseStatementProperties(jsn : TJsonObject; result : TFhirDeviceUseStatement);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirDeviceStatementStatusEnum, SYSTEMS_TFhirDeviceStatementStatusEnum);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('whenUsed') then
        result.whenUsed := ParsePeriod(jsn.vObj['whenUsed']);{q3}
    if jsn.has('timingTiming') {a4} then
      result.timing := ParseTiming(jsn.vObj['timingTiming']);
    if jsn.has('timingPeriod') {a4} then
      result.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDateTime') or jsn.has('_timingDateTime') then
      result.timing := parseDateTime(jsn.node['timingDateTime'], jsn.vObj['_timingDateTime']);
    if jsn.has('recordedOn') or jsn.has('_recordedOn') then
        result.recordedOnElement := parseDateTime(jsn.node['recordedOn'], jsn.vObj['_recordedOn']);{q}
    if jsn.has('source') then
        result.source := ParseReference{Resource}(jsn.vObj['source']);{q3}
    if jsn.has('device') then
        result.device := ParseReference{TFhirDevice}(jsn.vObj['device']);{q3}
    if jsn.has('indication') then
      iterateArray(jsn.vArr['indication'], result.indicationList, parseCodeableConcept);
    if jsn.has('bodySite') then
        result.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);{q3}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeDeviceUseStatement(json : TJSONWriter; name : string; elem : TFhirDeviceUseStatement; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirDeviceStatementStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirDeviceStatementStatusEnum, false);
  ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('whenUsed') then
    ComposePeriod(json, 'whenUsed', elem.whenUsed); {a}
  if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirTiming) then 
    ComposeTiming(json, 'timingTiming', TFhirTiming(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
    ComposeDateTimeProps(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('recordedOn') then
    ComposeDateTimeValue(json, 'recordedOn', elem.recordedOnElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('recordedOn') then
    ComposeDateTimeProps(json, 'recordedOn', elem.recordedOnElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('source') then
    ComposeReference{Resource}(json, 'source', elem.source); {a}
  ComposeReference{TFhirDevice}(json, 'device', elem.device); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('indication') and (elem.indicationList.Count > 0) then
  begin
    json.valueArray('indication');
    for i := 0 to elem.indicationList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.indicationList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('bodySite') then
    ComposeCodeableConcept(json, 'bodySite', elem.bodySite); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
procedure TFHIRJsonParser.ParseDiagnosticReportPerformer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDiagnosticReportPerformer(jsn)); {2}
end;

function TFHIRJsonParser.ParseDiagnosticReportPerformer(jsn : TJsonObject) : TFhirDiagnosticReportPerformer;
begin
  result := TFhirDiagnosticReportPerformer.create;
  try
    ParseDiagnosticReportPerformerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDiagnosticReportPerformerProperties(jsn : TJsonObject; result : TFhirDiagnosticReportPerformer);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDiagnosticReportPerformer(json : TJSONWriter; name : string; elem : TFhirDiagnosticReportPerformer; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDiagnosticReportImage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDiagnosticReportImage(jsn)); {2}
end;

function TFHIRJsonParser.ParseDiagnosticReportImage(jsn : TJsonObject) : TFhirDiagnosticReportImage;
begin
  result := TFhirDiagnosticReportImage.create;
  try
    ParseDiagnosticReportImageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDiagnosticReportImageProperties(jsn : TJsonObject; result : TFhirDiagnosticReportImage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('link') then
        result.link_ := ParseReference{TFhirMedia}(jsn.vObj['link']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDiagnosticReportImage(json : TJSONWriter; name : string; elem : TFhirDiagnosticReportImage; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  ComposeReference{TFhirMedia}(json, 'link', elem.link_); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDiagnosticReport(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDiagnosticReport(jsn)); {2}
end;

function TFHIRJsonParser.ParseDiagnosticReport(jsn : TJsonObject) : TFhirDiagnosticReport;
begin
  result := TFhirDiagnosticReport.create;
  try
    ParseDiagnosticReportProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDiagnosticReportProperties(jsn : TJsonObject; result : TFhirDiagnosticReport);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirDiagnosticReportStatusEnum, SYSTEMS_TFhirDiagnosticReportStatusEnum);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('effectivePeriod') {a4} then
      result.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      result.effective := parseDateTime(jsn.node['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('issued') or jsn.has('_issued') then
        result.issuedElement := parseInstant(jsn.node['issued'], jsn.vObj['_issued']);{q}
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], result.performerList, parseDiagnosticReportPerformer);
    if jsn.has('specimen') then
      iterateArray(jsn.vArr['specimen'], result.specimenList, parseReference{TFhirSpecimen});
    if jsn.has('result') then
      iterateArray(jsn.vArr['result'], result.resultList, parseReference{TFhirObservation});
    if jsn.has('imagingStudy') then
      iterateArray(jsn.vArr['imagingStudy'], result.imagingStudyList, parseReference{Resource});
    if jsn.has('image') then
      iterateArray(jsn.vArr['image'], result.imageList, parseDiagnosticReportImage);
    if jsn.has('conclusion') or jsn.has('_conclusion') then
        result.conclusionElement := parseString(jsn.node['conclusion'], jsn.vObj['_conclusion']);{q}
    if jsn.has('codedDiagnosis') then
      iterateArray(jsn.vArr['codedDiagnosis'], result.codedDiagnosisList, parseCodeableConcept);
    if jsn.has('presentedForm') then
      iterateArray(jsn.vArr['presentedForm'], result.presentedFormList, parseAttachment);
end;

procedure TFHIRJsonComposer.ComposeDiagnosticReport(json : TJSONWriter; name : string; elem : TFhirDiagnosticReport; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(CarePlan|ImmunizationRecommendation|MedicationRequest|NutritionOrder|ProcedureRequest|ReferralRequest)}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirDiagnosticReportStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirDiagnosticReportStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(elem.effective)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('issued') then
    ComposeInstantValue(json, 'issued', elem.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('issued') then
    ComposeInstantProps(json, 'issued', elem.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') and (elem.performerList.Count > 0) then
  begin
    json.valueArray('performer');
    for i := 0 to elem.performerList.Count - 1 do
      ComposeDiagnosticReportPerformer(json, '', elem.performerList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('specimen') and (elem.specimenList.Count > 0) then
  begin
    json.valueArray('specimen');
    for i := 0 to elem.specimenList.Count - 1 do
      ComposeReference{TFhirSpecimen}(json, '', elem.specimenList[i]); {z - Reference(Specimen)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('result') and (elem.resultList.Count > 0) then
  begin
    json.valueArray('result');
    for i := 0 to elem.resultList.Count - 1 do
      ComposeReference{TFhirObservation}(json, '', elem.resultList[i]); {z - Reference(Observation)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('imagingStudy') and (elem.imagingStudyList.Count > 0) then
  begin
    json.valueArray('imagingStudy');
    for i := 0 to elem.imagingStudyList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.imagingStudyList[i]); {z - Reference(ImagingStudy|ImagingManifest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('image') and (elem.imageList.Count > 0) then
  begin
    json.valueArray('image');
    for i := 0 to elem.imageList.Count - 1 do
      ComposeDiagnosticReportImage(json, '', elem.imageList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('conclusion') then
    ComposeStringValue(json, 'conclusion', elem.conclusionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('conclusion') then
    ComposeStringProps(json, 'conclusion', elem.conclusionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('codedDiagnosis') and (elem.codedDiagnosisList.Count > 0) then
  begin
    json.valueArray('codedDiagnosis');
    for i := 0 to elem.codedDiagnosisList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.codedDiagnosisList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('presentedForm') and (elem.presentedFormList.Count > 0) then
  begin
    json.valueArray('presentedForm');
    for i := 0 to elem.presentedFormList.Count - 1 do
      ComposeAttachment(json, '', elem.presentedFormList[i]); {z - Attachment}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
procedure TFHIRJsonParser.ParseDocumentManifestContent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentManifestContent(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentManifestContent(jsn : TJsonObject) : TFhirDocumentManifestContent;
begin
  result := TFhirDocumentManifestContent.create;
  try
    ParseDocumentManifestContentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentManifestContentProperties(jsn : TJsonObject; result : TFhirDocumentManifestContent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('pAttachment') {a4} then
      result.p := ParseAttachment(jsn.vObj['pAttachment']);
    if jsn.has('pReference') {a3} then
      result.p := ParseReference(jsn.vObj['pReference']);
end;

procedure TFHIRJsonComposer.ComposeDocumentManifestContent(json : TJSONWriter; name : string; elem : TFhirDocumentManifestContent; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.p is TFhirAttachment) then 
    ComposeAttachment(json, 'pAttachment', TFhirAttachment(elem.p)) 
  else if (elem.p is TFhirReference) then
    ComposeReference(json, 'pReference', TFhirReference(elem.p));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDocumentManifestRelated(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentManifestRelated(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentManifestRelated(jsn : TJsonObject) : TFhirDocumentManifestRelated;
begin
  result := TFhirDocumentManifestRelated.create;
  try
    ParseDocumentManifestRelatedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentManifestRelatedProperties(jsn : TJsonObject; result : TFhirDocumentManifestRelated);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('ref') then
        result.ref := ParseReference{TFhirReference}(jsn.vObj['ref']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDocumentManifestRelated(json : TJSONWriter; name : string; elem : TFhirDocumentManifestRelated; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'ref', elem.ref); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDocumentManifest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentManifest(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentManifest(jsn : TJsonObject) : TFhirDocumentManifest;
begin
  result := TFhirDocumentManifest.create;
  try
    ParseDocumentManifestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentManifestProperties(jsn : TJsonObject; result : TFhirDocumentManifest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('masterIdentifier') then
        result.masterIdentifier := ParseIdentifier(jsn.vObj['masterIdentifier']);{q3}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirDocumentReferenceStatusEnum, SYSTEMS_TFhirDocumentReferenceStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], result.authorList, parseReference{Resource});
    if jsn.has('recipient') then
      iterateArray(jsn.vArr['recipient'], result.recipientList, parseReference{Resource});
    if jsn.has('source') or jsn.has('_source') then
        result.sourceElement := parseUri(jsn.node['source'], jsn.vObj['_source']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('content') then
      iterateArray(jsn.vArr['content'], result.contentList, parseDocumentManifestContent);
    if jsn.has('related') then
      iterateArray(jsn.vArr['related'], result.relatedList, parseDocumentManifestRelated);
end;

procedure TFHIRJsonComposer.ComposeDocumentManifest(json : TJSONWriter; name : string; elem : TFhirDocumentManifest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('masterIdentifier') then
    ComposeIdentifier(json, 'masterIdentifier', elem.masterIdentifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirDocumentReferenceStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirDocumentReferenceStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('created') then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('created') then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') and (elem.authorList.Count > 0) then
  begin
    json.valueArray('author');
    for i := 0 to elem.authorList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.authorList[i]); {z - Reference(Practitioner|Organization|Device|Patient|RelatedPerson)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('recipient') and (elem.recipientList.Count > 0) then
  begin
    json.valueArray('recipient');
    for i := 0 to elem.recipientList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.recipientList[i]); {z - Reference(Patient|Practitioner|RelatedPerson|Organization)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('source') then
    ComposeUriValue(json, 'source', elem.sourceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('source') then
    ComposeUriProps(json, 'source', elem.sourceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (elem.contentList.Count > 0) then
  begin
    json.valueArray('content');
    for i := 0 to elem.contentList.Count - 1 do
      ComposeDocumentManifestContent(json, '', elem.contentList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('related') and (elem.relatedList.Count > 0) then
  begin
    json.valueArray('related');
    for i := 0 to elem.relatedList.Count - 1 do
      ComposeDocumentManifestRelated(json, '', elem.relatedList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
procedure TFHIRJsonParser.ParseDocumentReferenceRelatesTo(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReferenceRelatesTo(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentReferenceRelatesTo(jsn : TJsonObject) : TFhirDocumentReferenceRelatesTo;
begin
  result := TFhirDocumentReferenceRelatesTo.create;
  try
    ParseDocumentReferenceRelatesToProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceRelatesToProperties(jsn : TJsonObject; result : TFhirDocumentReferenceRelatesTo);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirDocumentRelationshipTypeEnum, SYSTEMS_TFhirDocumentRelationshipTypeEnum);
    if jsn.has('target') then
        result.target := ParseReference{TFhirDocumentReference}(jsn.vObj['target']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDocumentReferenceRelatesTo(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceRelatesTo; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirDocumentRelationshipTypeEnum, false);
  ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirDocumentRelationshipTypeEnum, false);
  ComposeReference{TFhirDocumentReference}(json, 'target', elem.target); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReferenceContent(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentReferenceContent(jsn : TJsonObject) : TFhirDocumentReferenceContent;
begin
  result := TFhirDocumentReferenceContent.create;
  try
    ParseDocumentReferenceContentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContentProperties(jsn : TJsonObject; result : TFhirDocumentReferenceContent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('attachment') then
        result.attachment := ParseAttachment(jsn.vObj['attachment']);{q3}
    if jsn.has('format') then
        result.format := ParseCoding(jsn.vObj['format']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDocumentReferenceContent(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceContent; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeAttachment(json, 'attachment', elem.attachment); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'format', elem.format); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContext(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReferenceContext(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentReferenceContext(jsn : TJsonObject) : TFhirDocumentReferenceContext;
begin
  result := TFhirDocumentReferenceContext.create;
  try
    ParseDocumentReferenceContextProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContextProperties(jsn : TJsonObject; result : TFhirDocumentReferenceContext);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('encounter') then
        result.encounter := ParseReference{TFhirEncounter}(jsn.vObj['encounter']);{q3}
    if jsn.has('event') then
      iterateArray(jsn.vArr['event'], result.eventList, parseCodeableConcept);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('facilityType') then
        result.facilityType := ParseCodeableConcept(jsn.vObj['facilityType']);{q3}
    if jsn.has('practiceSetting') then
        result.practiceSetting := ParseCodeableConcept(jsn.vObj['practiceSetting']);{q3}
    if jsn.has('sourcePatientInfo') then
        result.sourcePatientInfo := ParseReference{TFhirPatient}(jsn.vObj['sourcePatientInfo']);{q3}
    if jsn.has('related') then
      iterateArray(jsn.vArr['related'], result.relatedList, parseDocumentReferenceContextRelated);
end;

procedure TFHIRJsonComposer.ComposeDocumentReferenceContext(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceContext; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirEncounter}(json, 'encounter', elem.encounter); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.eventList.Count > 0) then
  begin
    json.valueArray('event');
    for i := 0 to elem.eventList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.eventList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'facilityType', elem.facilityType); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'practiceSetting', elem.practiceSetting); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(json, 'sourcePatientInfo', elem.sourcePatientInfo); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.relatedList.Count > 0) then
  begin
    json.valueArray('related');
    for i := 0 to elem.relatedList.Count - 1 do
      ComposeDocumentReferenceContextRelated(json, '', elem.relatedList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContextRelated(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReferenceContextRelated(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentReferenceContextRelated(jsn : TJsonObject) : TFhirDocumentReferenceContextRelated;
begin
  result := TFhirDocumentReferenceContextRelated.create;
  try
    ParseDocumentReferenceContextRelatedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceContextRelatedProperties(jsn : TJsonObject; result : TFhirDocumentReferenceContextRelated);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('ref') then
        result.ref := ParseReference{TFhirReference}(jsn.vObj['ref']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDocumentReferenceContextRelated(json : TJSONWriter; name : string; elem : TFhirDocumentReferenceContextRelated; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(json, 'ref', elem.ref); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseDocumentReference(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseDocumentReference(jsn)); {2}
end;

function TFHIRJsonParser.ParseDocumentReference(jsn : TJsonObject) : TFhirDocumentReference;
begin
  result := TFhirDocumentReference.create;
  try
    ParseDocumentReferenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseDocumentReferenceProperties(jsn : TJsonObject; result : TFhirDocumentReference);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('masterIdentifier') then
        result.masterIdentifier := ParseIdentifier(jsn.vObj['masterIdentifier']);{q3}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirDocumentReferenceStatusEnum, SYSTEMS_TFhirDocumentReferenceStatusEnum);
    if jsn.has('docStatus') or jsn.has('_docStatus')  then
      result.docStatusElement := parseEnum(jsn.path+'/docStatus', jsn.node['docStatus'], jsn.vObj['_docStatus'], CODES_TFhirCompositionStatusEnum, SYSTEMS_TFhirCompositionStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('class') then
        result.class_ := ParseCodeableConcept(jsn.vObj['class']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('indexed') or jsn.has('_indexed') then
        result.indexedElement := parseInstant(jsn.node['indexed'], jsn.vObj['_indexed']);{q}
    if jsn.has('author') then
      iterateArray(jsn.vArr['author'], result.authorList, parseReference{Resource});
    if jsn.has('authenticator') then
        result.authenticator := ParseReference{Resource}(jsn.vObj['authenticator']);{q3}
    if jsn.has('custodian') then
        result.custodian := ParseReference{TFhirOrganization}(jsn.vObj['custodian']);{q3}
    if jsn.has('relatesTo') then
      iterateArray(jsn.vArr['relatesTo'], result.relatesToList, parseDocumentReferenceRelatesTo);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('securityLabel') then
      iterateArray(jsn.vArr['securityLabel'], result.securityLabelList, parseCodeableConcept);
    if jsn.has('content') then
      iterateArray(jsn.vArr['content'], result.contentList, parseDocumentReferenceContent);
    if jsn.has('context') then
        result.context := ParseDocumentReferenceContext(jsn.vObj['context']);{q3}
end;

procedure TFHIRJsonComposer.ComposeDocumentReference(json : TJSONWriter; name : string; elem : TFhirDocumentReference; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('masterIdentifier') then
    ComposeIdentifier(json, 'masterIdentifier', elem.masterIdentifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirDocumentReferenceStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirDocumentReferenceStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('docStatus') then
    ComposeEnumValue(json, 'docStatus', elem.DocStatusElement, CODES_TFhirCompositionStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('docStatus') then
    ComposeEnumProps(json, 'docStatus', elem.DocStatusElement, CODES_TFhirCompositionStatusEnum, false);
  ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('class_') then
    ComposeCodeableConcept(json, 'class', elem.class_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('created') then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('created') then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  ComposeInstantValue(json, 'indexed', elem.indexedElement, false);
  ComposeInstantProps(json, 'indexed', elem.indexedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') and (elem.authorList.Count > 0) then
  begin
    json.valueArray('author');
    for i := 0 to elem.authorList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.authorList[i]); {z - Reference(Practitioner|Organization|Device|Patient|RelatedPerson)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authenticator') then
    ComposeReference{Resource}(json, 'authenticator', elem.authenticator); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('custodian') then
    ComposeReference{TFhirOrganization}(json, 'custodian', elem.custodian); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('relatesTo') and (elem.relatesToList.Count > 0) then
  begin
    json.valueArray('relatesTo');
    for i := 0 to elem.relatesToList.Count - 1 do
      ComposeDocumentReferenceRelatesTo(json, '', elem.relatesToList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('securityLabel') and (elem.securityLabelList.Count > 0) then
  begin
    json.valueArray('securityLabel');
    for i := 0 to elem.securityLabelList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.securityLabelList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (elem.contentList.Count > 0) then
  begin
    json.valueArray('content');
    for i := 0 to elem.contentList.Count - 1 do
      ComposeDocumentReferenceContent(json, '', elem.contentList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeDocumentReferenceContext(json, 'context', elem.context); {a}
end;

{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ELIGIBILITYREQUEST}
procedure TFHIRJsonParser.ParseEligibilityRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEligibilityRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseEligibilityRequest(jsn : TJsonObject) : TFhirEligibilityRequest;
begin
  result := TFhirEligibilityRequest.create;
  try
    ParseEligibilityRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEligibilityRequestProperties(jsn : TJsonObject; result : TFhirEligibilityRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('priority') then
        result.priority := ParseCodeableConcept(jsn.vObj['priority']);{q3}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('servicedPeriod') {a4} then
      result.serviced := ParsePeriod(jsn.vObj['servicedPeriod']);
    if jsn.has('servicedDate') or jsn.has('_servicedDate') then
      result.serviced := parseDate(jsn.node['servicedDate'], jsn.vObj['_servicedDate']);
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('enterer') then
        result.enterer := ParseReference{TFhirPractitioner}(jsn.vObj['enterer']);{q3}
    if jsn.has('provider') then
        result.provider := ParseReference{TFhirPractitioner}(jsn.vObj['provider']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('insurer') then
        result.insurer := ParseReference{TFhirOrganization}(jsn.vObj['insurer']);{q3}
    if jsn.has('facility') then
        result.facility := ParseReference{TFhirLocation}(jsn.vObj['facility']);{q3}
    if jsn.has('coverage') then
        result.coverage := ParseReference{TFhirCoverage}(jsn.vObj['coverage']);{q3}
    if jsn.has('businessArrangement') or jsn.has('_businessArrangement') then
        result.businessArrangementElement := parseString(jsn.node['businessArrangement'], jsn.vObj['_businessArrangement']);{q}
    if jsn.has('benefitCategory') then
        result.benefitCategory := ParseCodeableConcept(jsn.vObj['benefitCategory']);{q3}
    if jsn.has('benefitSubCategory') then
        result.benefitSubCategory := ParseCodeableConcept(jsn.vObj['benefitSubCategory']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEligibilityRequest(json : TJSONWriter; name : string; elem : TFhirEligibilityRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('priority') then
    ComposeCodeableConcept(json, 'priority', elem.priority); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirPeriod) then 
    ComposePeriod(json, 'servicedPeriod', TFhirPeriod(elem.serviced)) 
  else if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirDate) then 
  begin
    ComposeDateValue(json, 'servicedDate', TFhirDate(elem.serviced), false);
    ComposeDateProps(json, 'servicedDate', TFhirDate(elem.serviced), false);
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('enterer') then
    ComposeReference{TFhirPractitioner}(json, 'enterer', elem.enterer); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('provider') then
    ComposeReference{TFhirPractitioner}(json, 'provider', elem.provider); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('organization') then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('insurer') then
    ComposeReference{TFhirOrganization}(json, 'insurer', elem.insurer); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('facility') then
    ComposeReference{TFhirLocation}(json, 'facility', elem.facility); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('coverage') then
    ComposeReference{TFhirCoverage}(json, 'coverage', elem.coverage); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('businessArrangement') then
    ComposeStringValue(json, 'businessArrangement', elem.businessArrangementElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('businessArrangement') then
    ComposeStringProps(json, 'businessArrangement', elem.businessArrangementElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('benefitCategory') then
    ComposeCodeableConcept(json, 'benefitCategory', elem.benefitCategory); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('benefitSubCategory') then
    ComposeCodeableConcept(json, 'benefitSubCategory', elem.benefitSubCategory); {a}
end;

{$ENDIF FHIR_ELIGIBILITYREQUEST}
{$IFDEF FHIR_ELIGIBILITYRESPONSE}
procedure TFHIRJsonParser.ParseEligibilityResponseInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEligibilityResponseInsurance(jsn)); {2}
end;

function TFHIRJsonParser.ParseEligibilityResponseInsurance(jsn : TJsonObject) : TFhirEligibilityResponseInsurance;
begin
  result := TFhirEligibilityResponseInsurance.create;
  try
    ParseEligibilityResponseInsuranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseInsuranceProperties(jsn : TJsonObject; result : TFhirEligibilityResponseInsurance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('coverage') then
        result.coverage := ParseReference{TFhirCoverage}(jsn.vObj['coverage']);{q3}
    if jsn.has('contract') then
        result.contract := ParseReference{TFhirContract}(jsn.vObj['contract']);{q3}
    if jsn.has('benefitBalance') then
      iterateArray(jsn.vArr['benefitBalance'], result.benefitBalanceList, parseEligibilityResponseInsuranceBenefitBalance);
end;

procedure TFHIRJsonComposer.ComposeEligibilityResponseInsurance(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseInsurance; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirCoverage}(json, 'coverage', elem.coverage); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirContract}(json, 'contract', elem.contract); {a}
  if (SummaryOption in [soFull, soData]) and (elem.benefitBalanceList.Count > 0) then
  begin
    json.valueArray('benefitBalance');
    for i := 0 to elem.benefitBalanceList.Count - 1 do
      ComposeEligibilityResponseInsuranceBenefitBalance(json, '', elem.benefitBalanceList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseInsuranceBenefitBalance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEligibilityResponseInsuranceBenefitBalance(jsn)); {2}
end;

function TFHIRJsonParser.ParseEligibilityResponseInsuranceBenefitBalance(jsn : TJsonObject) : TFhirEligibilityResponseInsuranceBenefitBalance;
begin
  result := TFhirEligibilityResponseInsuranceBenefitBalance.create;
  try
    ParseEligibilityResponseInsuranceBenefitBalanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseInsuranceBenefitBalanceProperties(jsn : TJsonObject; result : TFhirEligibilityResponseInsuranceBenefitBalance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('subCategory') then
        result.subCategory := ParseCodeableConcept(jsn.vObj['subCategory']);{q3}
    if jsn.has('excluded') or jsn.has('_excluded') then
        result.excludedElement := parseBoolean(jsn.node['excluded'], jsn.vObj['_excluded']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('network') then
        result.network := ParseCodeableConcept(jsn.vObj['network']);{q3}
    if jsn.has('unit') then
        result.unit_ := ParseCodeableConcept(jsn.vObj['unit']);{q3}
    if jsn.has('term') then
        result.term := ParseCodeableConcept(jsn.vObj['term']);{q3}
    if jsn.has('financial') then
      iterateArray(jsn.vArr['financial'], result.financialList, parseEligibilityResponseInsuranceBenefitBalanceFinancial);
end;

procedure TFHIRJsonComposer.ComposeEligibilityResponseInsuranceBenefitBalance(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseInsuranceBenefitBalance; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'subCategory', elem.subCategory); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'excluded', elem.excludedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'excluded', elem.excludedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'network', elem.network); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'unit', elem.unit_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'term', elem.term); {a}
  if (SummaryOption in [soFull, soData]) and (elem.financialList.Count > 0) then
  begin
    json.valueArray('financial');
    for i := 0 to elem.financialList.Count - 1 do
      ComposeEligibilityResponseInsuranceBenefitBalanceFinancial(json, '', elem.financialList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseInsuranceBenefitBalanceFinancial(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEligibilityResponseInsuranceBenefitBalanceFinancial(jsn)); {2}
end;

function TFHIRJsonParser.ParseEligibilityResponseInsuranceBenefitBalanceFinancial(jsn : TJsonObject) : TFhirEligibilityResponseInsuranceBenefitBalanceFinancial;
begin
  result := TFhirEligibilityResponseInsuranceBenefitBalanceFinancial.create;
  try
    ParseEligibilityResponseInsuranceBenefitBalanceFinancialProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseInsuranceBenefitBalanceFinancialProperties(jsn : TJsonObject; result : TFhirEligibilityResponseInsuranceBenefitBalanceFinancial);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('allowedUnsignedInt') or jsn.has('_allowedUnsignedInt') then
      result.allowed := parseUnsignedInt(jsn.node['allowedUnsignedInt'], jsn.vObj['_allowedUnsignedInt']);
    if jsn.has('allowedMoney') {a4} then
      result.allowed := ParseMoney(jsn.vObj['allowedMoney']);
    if jsn.has('allowedString') or jsn.has('_allowedString') then
      result.allowed := parseString(jsn.node['allowedString'], jsn.vObj['_allowedString']);
    if jsn.has('usedUnsignedInt') or jsn.has('_usedUnsignedInt') then
      result.used := parseUnsignedInt(jsn.node['usedUnsignedInt'], jsn.vObj['_usedUnsignedInt']);
    if jsn.has('usedMoney') {a4} then
      result.used := ParseMoney(jsn.vObj['usedMoney']);
end;

procedure TFHIRJsonComposer.ComposeEligibilityResponseInsuranceBenefitBalanceFinancial(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseInsuranceBenefitBalanceFinancial; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'allowedUnsignedInt', TFhirUnsignedInt(elem.allowed), false);
    ComposeUnsignedIntProps(json, 'allowedUnsignedInt', TFhirUnsignedInt(elem.allowed), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirMoney) then 
    ComposeMoney(json, 'allowedMoney', TFhirMoney(elem.allowed)) 
  else if (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirString) then 
  begin
    ComposeStringValue(json, 'allowedString', TFhirString(elem.allowed), false);
    ComposeStringProps(json, 'allowedString', TFhirString(elem.allowed), false);
  end;
  if (SummaryOption in [soFull, soData]) and (elem.used is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'usedUnsignedInt', TFhirUnsignedInt(elem.used), false);
    ComposeUnsignedIntProps(json, 'usedUnsignedInt', TFhirUnsignedInt(elem.used), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.used is TFhirMoney) then 
    ComposeMoney(json, 'usedMoney', TFhirMoney(elem.used)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseError(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEligibilityResponseError(jsn)); {2}
end;

function TFHIRJsonParser.ParseEligibilityResponseError(jsn : TJsonObject) : TFhirEligibilityResponseError;
begin
  result := TFhirEligibilityResponseError.create;
  try
    ParseEligibilityResponseErrorProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseErrorProperties(jsn : TJsonObject; result : TFhirEligibilityResponseError);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEligibilityResponseError(json : TJSONWriter; name : string; elem : TFhirEligibilityResponseError; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEligibilityResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEligibilityResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseEligibilityResponse(jsn : TJsonObject) : TFhirEligibilityResponse;
begin
  result := TFhirEligibilityResponse.create;
  try
    ParseEligibilityResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEligibilityResponseProperties(jsn : TJsonObject; result : TFhirEligibilityResponse);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('requestProvider') then
        result.requestProvider := ParseReference{TFhirPractitioner}(jsn.vObj['requestProvider']);{q3}
    if jsn.has('requestOrganization') then
        result.requestOrganization := ParseReference{TFhirOrganization}(jsn.vObj['requestOrganization']);{q3}
    if jsn.has('request') then
        result.request := ParseReference{TFhirEligibilityRequest}(jsn.vObj['request']);{q3}
    if jsn.has('outcome') then
        result.outcome := ParseCodeableConcept(jsn.vObj['outcome']);{q3}
    if jsn.has('disposition') or jsn.has('_disposition') then
        result.dispositionElement := parseString(jsn.node['disposition'], jsn.vObj['_disposition']);{q}
    if jsn.has('insurer') then
        result.insurer := ParseReference{TFhirOrganization}(jsn.vObj['insurer']);{q3}
    if jsn.has('inforce') or jsn.has('_inforce') then
        result.inforceElement := parseBoolean(jsn.node['inforce'], jsn.vObj['_inforce']);{q}
    if jsn.has('insurance') then
      iterateArray(jsn.vArr['insurance'], result.insuranceList, parseEligibilityResponseInsurance);
    if jsn.has('form') then
        result.form := ParseCodeableConcept(jsn.vObj['form']);{q3}
    if jsn.has('error') then
      iterateArray(jsn.vArr['error'], result.errorList, parseEligibilityResponseError);
end;

procedure TFHIRJsonComposer.ComposeEligibilityResponse(json : TJSONWriter; name : string; elem : TFhirEligibilityResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('requestProvider') then
    ComposeReference{TFhirPractitioner}(json, 'requestProvider', elem.requestProvider); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('requestOrganization') then
    ComposeReference{TFhirOrganization}(json, 'requestOrganization', elem.requestOrganization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('request') then
    ComposeReference{TFhirEligibilityRequest}(json, 'request', elem.request); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('outcome') then
    ComposeCodeableConcept(json, 'outcome', elem.outcome); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeStringValue(json, 'disposition', elem.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeStringProps(json, 'disposition', elem.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('insurer') then
    ComposeReference{TFhirOrganization}(json, 'insurer', elem.insurer); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('inforce') then
    ComposeBooleanValue(json, 'inforce', elem.inforceElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('inforce') then
    ComposeBooleanProps(json, 'inforce', elem.inforceElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('insurance') and (elem.insuranceList.Count > 0) then
  begin
    json.valueArray('insurance');
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeEligibilityResponseInsurance(json, '', elem.insuranceList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('form') then
    ComposeCodeableConcept(json, 'form', elem.form); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('error') and (elem.errorList.Count > 0) then
  begin
    json.valueArray('error');
    for i := 0 to elem.errorList.Count - 1 do
      ComposeEligibilityResponseError(json, '', elem.errorList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_ELIGIBILITYRESPONSE}
{$IFDEF FHIR_ENCOUNTER}
procedure TFHIRJsonParser.ParseEncounterStatusHistory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterStatusHistory(jsn)); {2}
end;

function TFHIRJsonParser.ParseEncounterStatusHistory(jsn : TJsonObject) : TFhirEncounterStatusHistory;
begin
  result := TFhirEncounterStatusHistory.create;
  try
    ParseEncounterStatusHistoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterStatusHistoryProperties(jsn : TJsonObject; result : TFhirEncounterStatusHistory);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEncounterStatusEnum, SYSTEMS_TFhirEncounterStatusEnum);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEncounterStatusHistory(json : TJSONWriter; name : string; elem : TFhirEncounterStatusHistory; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEncounterStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEncounterStatusEnum, false);
  ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEncounterClassHistory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterClassHistory(jsn)); {2}
end;

function TFHIRJsonParser.ParseEncounterClassHistory(jsn : TJsonObject) : TFhirEncounterClassHistory;
begin
  result := TFhirEncounterClassHistory.create;
  try
    ParseEncounterClassHistoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterClassHistoryProperties(jsn : TJsonObject; result : TFhirEncounterClassHistory);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('class') then
        result.class_ := ParseCoding(jsn.vObj['class']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEncounterClassHistory(json : TJSONWriter; name : string; elem : TFhirEncounterClassHistory; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCoding(json, 'class', elem.class_); {a}
  ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEncounterParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParseEncounterParticipant(jsn : TJsonObject) : TFhirEncounterParticipant;
begin
  result := TFhirEncounterParticipant.create;
  try
    ParseEncounterParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterParticipantProperties(jsn : TJsonObject; result : TFhirEncounterParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('individual') then
        result.individual := ParseReference{Resource}(jsn.vObj['individual']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEncounterParticipant(json : TJSONWriter; name : string; elem : TFhirEncounterParticipant; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{Resource}(json, 'individual', elem.individual); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEncounterDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterDiagnosis(jsn)); {2}
end;

function TFHIRJsonParser.ParseEncounterDiagnosis(jsn : TJsonObject) : TFhirEncounterDiagnosis;
begin
  result := TFhirEncounterDiagnosis.create;
  try
    ParseEncounterDiagnosisProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterDiagnosisProperties(jsn : TJsonObject; result : TFhirEncounterDiagnosis);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('condition') then
        result.condition := ParseReference{Resource}(jsn.vObj['condition']);{q3}
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('rank') or jsn.has('_rank') then
        result.rankElement := parsePositiveInt(jsn.node['rank'], jsn.vObj['_rank']);{q}
end;

procedure TFHIRJsonComposer.ComposeEncounterDiagnosis(json : TJSONWriter; name : string; elem : TFhirEncounterDiagnosis; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'condition', elem.condition); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'rank', elem.rankElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'rank', elem.rankElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEncounterHospitalization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterHospitalization(jsn)); {2}
end;

function TFHIRJsonParser.ParseEncounterHospitalization(jsn : TJsonObject) : TFhirEncounterHospitalization;
begin
  result := TFhirEncounterHospitalization.create;
  try
    ParseEncounterHospitalizationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterHospitalizationProperties(jsn : TJsonObject; result : TFhirEncounterHospitalization);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('preAdmissionIdentifier') then
        result.preAdmissionIdentifier := ParseIdentifier(jsn.vObj['preAdmissionIdentifier']);{q3}
    if jsn.has('origin') then
        result.origin := ParseReference{TFhirLocation}(jsn.vObj['origin']);{q3}
    if jsn.has('admitSource') then
        result.admitSource := ParseCodeableConcept(jsn.vObj['admitSource']);{q3}
    if jsn.has('reAdmission') then
        result.reAdmission := ParseCodeableConcept(jsn.vObj['reAdmission']);{q3}
    if jsn.has('dietPreference') then
      iterateArray(jsn.vArr['dietPreference'], result.dietPreferenceList, parseCodeableConcept);
    if jsn.has('specialCourtesy') then
      iterateArray(jsn.vArr['specialCourtesy'], result.specialCourtesyList, parseCodeableConcept);
    if jsn.has('specialArrangement') then
      iterateArray(jsn.vArr['specialArrangement'], result.specialArrangementList, parseCodeableConcept);
    if jsn.has('destination') then
        result.destination := ParseReference{TFhirLocation}(jsn.vObj['destination']);{q3}
    if jsn.has('dischargeDisposition') then
        result.dischargeDisposition := ParseCodeableConcept(jsn.vObj['dischargeDisposition']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEncounterHospitalization(json : TJSONWriter; name : string; elem : TFhirEncounterHospitalization; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'preAdmissionIdentifier', elem.preAdmissionIdentifier); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'origin', elem.origin); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'admitSource', elem.admitSource); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reAdmission', elem.reAdmission); {a}
  if (SummaryOption in [soFull, soData]) and (elem.dietPreferenceList.Count > 0) then
  begin
    json.valueArray('dietPreference');
    for i := 0 to elem.dietPreferenceList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.dietPreferenceList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.specialCourtesyList.Count > 0) then
  begin
    json.valueArray('specialCourtesy');
    for i := 0 to elem.specialCourtesyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialCourtesyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.specialArrangementList.Count > 0) then
  begin
    json.valueArray('specialArrangement');
    for i := 0 to elem.specialArrangementList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialArrangementList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(json, 'destination', elem.destination); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'dischargeDisposition', elem.dischargeDisposition); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEncounterLocation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounterLocation(jsn)); {2}
end;

function TFHIRJsonParser.ParseEncounterLocation(jsn : TJsonObject) : TFhirEncounterLocation;
begin
  result := TFhirEncounterLocation.create;
  try
    ParseEncounterLocationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterLocationProperties(jsn : TJsonObject; result : TFhirEncounterLocation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEncounterLocationStatusEnum, SYSTEMS_TFhirEncounterLocationStatusEnum);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEncounterLocation(json : TJSONWriter; name : string; elem : TFhirEncounterLocation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEncounterLocationStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEncounterLocationStatusEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEncounter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEncounter(jsn)); {2}
end;

function TFHIRJsonParser.ParseEncounter(jsn : TJsonObject) : TFhirEncounter;
begin
  result := TFhirEncounter.create;
  try
    ParseEncounterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEncounterProperties(jsn : TJsonObject; result : TFhirEncounter);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEncounterStatusEnum, SYSTEMS_TFhirEncounterStatusEnum);
    if jsn.has('statusHistory') then
      iterateArray(jsn.vArr['statusHistory'], result.statusHistoryList, parseEncounterStatusHistory);
    if jsn.has('class') then
        result.class_ := ParseCoding(jsn.vObj['class']);{q3}
    if jsn.has('classHistory') then
      iterateArray(jsn.vArr['classHistory'], result.classHistoryList, parseEncounterClassHistory);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('priority') then
        result.priority := ParseCodeableConcept(jsn.vObj['priority']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('episodeOfCare') then
      iterateArray(jsn.vArr['episodeOfCare'], result.episodeOfCareList, parseReference{TFhirEpisodeOfCare});
    if jsn.has('incomingReferral') then
      iterateArray(jsn.vArr['incomingReferral'], result.incomingReferralList, parseReference{TFhirReferralRequest});
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseEncounterParticipant);
    if jsn.has('appointment') then
        result.appointment := ParseReference{TFhirAppointment}(jsn.vObj['appointment']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('length') then
        result.length := ParseDuration(jsn.vObj['length']);{q3}
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], result.reasonList, parseCodeableConcept);
    if jsn.has('diagnosis') then
      iterateArray(jsn.vArr['diagnosis'], result.diagnosisList, parseEncounterDiagnosis);
    if jsn.has('account') then
      iterateArray(jsn.vArr['account'], result.accountList, parseReference{TFhirAccount});
    if jsn.has('hospitalization') then
        result.hospitalization := ParseEncounterHospitalization(jsn.vObj['hospitalization']);{q3}
    if jsn.has('location') then
      iterateArray(jsn.vArr['location'], result.locationList, parseEncounterLocation);
    if jsn.has('serviceProvider') then
        result.serviceProvider := ParseReference{TFhirOrganization}(jsn.vObj['serviceProvider']);{q3}
    if jsn.has('partOf') then
        result.partOf := ParseReference{TFhirEncounter}(jsn.vObj['partOf']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEncounter(json : TJSONWriter; name : string; elem : TFhirEncounter; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEncounterStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEncounterStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('statusHistory') and (elem.statusHistoryList.Count > 0) then
  begin
    json.valueArray('statusHistory');
    for i := 0 to elem.statusHistoryList.Count - 1 do
      ComposeEncounterStatusHistory(json, '', elem.statusHistoryList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('class_') then
    ComposeCoding(json, 'class', elem.class_); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('classHistory') and (elem.classHistoryList.Count > 0) then
  begin
    json.valueArray('classHistory');
    for i := 0 to elem.classHistoryList.Count - 1 do
      ComposeEncounterClassHistory(json, '', elem.classHistoryList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('priority') then
    ComposeCodeableConcept(json, 'priority', elem.priority); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('episodeOfCare') and (elem.episodeOfCareList.Count > 0) then
  begin
    json.valueArray('episodeOfCare');
    for i := 0 to elem.episodeOfCareList.Count - 1 do
      ComposeReference{TFhirEpisodeOfCare}(json, '', elem.episodeOfCareList[i]); {z - Reference(EpisodeOfCare)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('incomingReferral') and (elem.incomingReferralList.Count > 0) then
  begin
    json.valueArray('incomingReferral');
    for i := 0 to elem.incomingReferralList.Count - 1 do
      ComposeReference{TFhirReferralRequest}(json, '', elem.incomingReferralList[i]); {z - Reference(ReferralRequest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('participant') and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeEncounterParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('appointment') then
    ComposeReference{TFhirAppointment}(json, 'appointment', elem.appointment); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('length') then
    ComposeDuration(json, 'length', elem.length); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reason') and (elem.reasonList.Count > 0) then
  begin
    json.valueArray('reason');
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('diagnosis') and (elem.diagnosisList.Count > 0) then
  begin
    json.valueArray('diagnosis');
    for i := 0 to elem.diagnosisList.Count - 1 do
      ComposeEncounterDiagnosis(json, '', elem.diagnosisList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('account') and (elem.accountList.Count > 0) then
  begin
    json.valueArray('account');
    for i := 0 to elem.accountList.Count - 1 do
      ComposeReference{TFhirAccount}(json, '', elem.accountList[i]); {z - Reference(Account)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('hospitalization') then
    ComposeEncounterHospitalization(json, 'hospitalization', elem.hospitalization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('location') and (elem.locationList.Count > 0) then
  begin
    json.valueArray('location');
    for i := 0 to elem.locationList.Count - 1 do
      ComposeEncounterLocation(json, '', elem.locationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('serviceProvider') then
    ComposeReference{TFhirOrganization}(json, 'serviceProvider', elem.serviceProvider); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('partOf') then
    ComposeReference{TFhirEncounter}(json, 'partOf', elem.partOf); {a}
end;

{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
procedure TFHIRJsonParser.ParseEndpoint(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEndpoint(jsn)); {2}
end;

function TFHIRJsonParser.ParseEndpoint(jsn : TJsonObject) : TFhirEndpoint;
begin
  result := TFhirEndpoint.create;
  try
    ParseEndpointProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEndpointProperties(jsn : TJsonObject; result : TFhirEndpoint);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEndpointStatusEnum, SYSTEMS_TFhirEndpointStatusEnum);
    if jsn.has('connectionType') then
        result.connectionType := ParseCoding(jsn.vObj['connectionType']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('managingOrganization') then
        result.managingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['managingOrganization']);{q3}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactPoint);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('payloadType') then
      iterateArray(jsn.vArr['payloadType'], result.payloadTypeList, parseCodeableConcept);
      if jsn.has('payloadMimeType') or jsn.has('_payloadMimeType') then
      iteratePrimitiveArray(jsn.vArr['payloadMimeType'], jsn.vArr['_payloadMimeType'], result.payloadMimeTypeList, parseCode);
    if jsn.has('address') or jsn.has('_address') then
        result.addressElement := parseUri(jsn.node['address'], jsn.vObj['_address']);{q}
      if jsn.has('header') or jsn.has('_header') then
      iteratePrimitiveArray(jsn.vArr['header'], jsn.vArr['_header'], result.headerList, parseString);
end;

procedure TFHIRJsonComposer.ComposeEndpoint(json : TJSONWriter; name : string; elem : TFhirEndpoint; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEndpointStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEndpointStatusEnum, false);
  ComposeCoding(json, 'connectionType', elem.connectionType); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('managingOrganization') then
    ComposeReference{TFhirOrganization}(json, 'managingOrganization', elem.managingOrganization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactPoint(json, '', elem.contactList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
  if (elem.payloadTypeList.Count > 0) then
  begin
    json.valueArray('payloadType');
    for i := 0 to elem.payloadTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.payloadTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('payloadMimeType') and (elem.payloadMimeTypeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.payloadMimeTypeList.Count - 1 do
    begin
      ext := ext or ((elem.payloadMimeTypeList[i].id <> '') or (elem.payloadMimeTypeList[i].hasExtensionList) {no-comments or (elem.payloadMimeTypeList[i].hasComments)});
      val := val or (elem.payloadMimeTypeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('payloadMimeType');
      for i := 0 to elem.payloadMimeTypeList.Count - 1 do
        ComposeCodeValue(json, '',elem.payloadMimeTypeList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_payloadMimeType');
      for i := 0 to elem.payloadMimeTypeList.Count - 1 do
        ComposeCodeProps(json, '',elem.payloadMimeTypeList[i], true);
      json.FinishArray;
    end;
  end;
  ComposeUriValue(json, 'address', elem.addressElement, false);
  ComposeUriProps(json, 'address', elem.addressElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('header') and (elem.headerList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.headerList.Count - 1 do
    begin
      ext := ext or ((elem.headerList[i].id <> '') or (elem.headerList[i].hasExtensionList) {no-comments or (elem.headerList[i].hasComments)});
      val := val or (elem.headerList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('header');
      for i := 0 to elem.headerList.Count - 1 do
        ComposeStringValue(json, '',elem.headerList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_header');
      for i := 0 to elem.headerList.Count - 1 do
        ComposeStringProps(json, '',elem.headerList[i], true);
      json.FinishArray;
    end;
  end;
end;

{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
procedure TFHIRJsonParser.ParseEnrollmentRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEnrollmentRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseEnrollmentRequest(jsn : TJsonObject) : TFhirEnrollmentRequest;
begin
  result := TFhirEnrollmentRequest.create;
  try
    ParseEnrollmentRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEnrollmentRequestProperties(jsn : TJsonObject; result : TFhirEnrollmentRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('insurer') then
        result.insurer := ParseReference{TFhirOrganization}(jsn.vObj['insurer']);{q3}
    if jsn.has('provider') then
        result.provider := ParseReference{TFhirPractitioner}(jsn.vObj['provider']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{TFhirPatient}(jsn.vObj['subject']);{q3}
    if jsn.has('coverage') then
        result.coverage := ParseReference{TFhirCoverage}(jsn.vObj['coverage']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEnrollmentRequest(json : TJSONWriter; name : string; elem : TFhirEnrollmentRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('insurer') then
    ComposeReference{TFhirOrganization}(json, 'insurer', elem.insurer); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('provider') then
    ComposeReference{TFhirPractitioner}(json, 'provider', elem.provider); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('organization') then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('coverage') then
    ComposeReference{TFhirCoverage}(json, 'coverage', elem.coverage); {a}
end;

{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
procedure TFHIRJsonParser.ParseEnrollmentResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEnrollmentResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseEnrollmentResponse(jsn : TJsonObject) : TFhirEnrollmentResponse;
begin
  result := TFhirEnrollmentResponse.create;
  try
    ParseEnrollmentResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEnrollmentResponseProperties(jsn : TJsonObject; result : TFhirEnrollmentResponse);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('request') then
        result.request := ParseReference{TFhirEnrollmentRequest}(jsn.vObj['request']);{q3}
    if jsn.has('outcome') then
        result.outcome := ParseCodeableConcept(jsn.vObj['outcome']);{q3}
    if jsn.has('disposition') or jsn.has('_disposition') then
        result.dispositionElement := parseString(jsn.node['disposition'], jsn.vObj['_disposition']);{q}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('requestProvider') then
        result.requestProvider := ParseReference{TFhirPractitioner}(jsn.vObj['requestProvider']);{q3}
    if jsn.has('requestOrganization') then
        result.requestOrganization := ParseReference{TFhirOrganization}(jsn.vObj['requestOrganization']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEnrollmentResponse(json : TJSONWriter; name : string; elem : TFhirEnrollmentResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('request') then
    ComposeReference{TFhirEnrollmentRequest}(json, 'request', elem.request); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('outcome') then
    ComposeCodeableConcept(json, 'outcome', elem.outcome); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeStringValue(json, 'disposition', elem.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeStringProps(json, 'disposition', elem.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('organization') then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('requestProvider') then
    ComposeReference{TFhirPractitioner}(json, 'requestProvider', elem.requestProvider); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('requestOrganization') then
    ComposeReference{TFhirOrganization}(json, 'requestOrganization', elem.requestOrganization); {a}
end;

{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
procedure TFHIRJsonParser.ParseEpisodeOfCareStatusHistory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEpisodeOfCareStatusHistory(jsn)); {2}
end;

function TFHIRJsonParser.ParseEpisodeOfCareStatusHistory(jsn : TJsonObject) : TFhirEpisodeOfCareStatusHistory;
begin
  result := TFhirEpisodeOfCareStatusHistory.create;
  try
    ParseEpisodeOfCareStatusHistoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEpisodeOfCareStatusHistoryProperties(jsn : TJsonObject; result : TFhirEpisodeOfCareStatusHistory);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEpisodeOfCareStatusEnum, SYSTEMS_TFhirEpisodeOfCareStatusEnum);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeEpisodeOfCareStatusHistory(json : TJSONWriter; name : string; elem : TFhirEpisodeOfCareStatusHistory; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEpisodeOfCareStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEpisodeOfCareStatusEnum, false);
  ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEpisodeOfCareDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEpisodeOfCareDiagnosis(jsn)); {2}
end;

function TFHIRJsonParser.ParseEpisodeOfCareDiagnosis(jsn : TJsonObject) : TFhirEpisodeOfCareDiagnosis;
begin
  result := TFhirEpisodeOfCareDiagnosis.create;
  try
    ParseEpisodeOfCareDiagnosisProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEpisodeOfCareDiagnosisProperties(jsn : TJsonObject; result : TFhirEpisodeOfCareDiagnosis);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('condition') then
        result.condition := ParseReference{TFhirCondition}(jsn.vObj['condition']);{q3}
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('rank') or jsn.has('_rank') then
        result.rankElement := parsePositiveInt(jsn.node['rank'], jsn.vObj['_rank']);{q}
end;

procedure TFHIRJsonComposer.ComposeEpisodeOfCareDiagnosis(json : TJSONWriter; name : string; elem : TFhirEpisodeOfCareDiagnosis; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{TFhirCondition}(json, 'condition', elem.condition); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'rank', elem.rankElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'rank', elem.rankElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseEpisodeOfCare(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseEpisodeOfCare(jsn)); {2}
end;

function TFHIRJsonParser.ParseEpisodeOfCare(jsn : TJsonObject) : TFhirEpisodeOfCare;
begin
  result := TFhirEpisodeOfCare.create;
  try
    ParseEpisodeOfCareProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseEpisodeOfCareProperties(jsn : TJsonObject; result : TFhirEpisodeOfCare);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEpisodeOfCareStatusEnum, SYSTEMS_TFhirEpisodeOfCareStatusEnum);
    if jsn.has('statusHistory') then
      iterateArray(jsn.vArr['statusHistory'], result.statusHistoryList, parseEpisodeOfCareStatusHistory);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('diagnosis') then
      iterateArray(jsn.vArr['diagnosis'], result.diagnosisList, parseEpisodeOfCareDiagnosis);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('managingOrganization') then
        result.managingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['managingOrganization']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('referralRequest') then
      iterateArray(jsn.vArr['referralRequest'], result.referralRequestList, parseReference{TFhirReferralRequest});
    if jsn.has('careManager') then
        result.careManager := ParseReference{TFhirPractitioner}(jsn.vObj['careManager']);{q3}
    if jsn.has('team') then
      iterateArray(jsn.vArr['team'], result.teamList, parseReference{TFhirCareTeam});
    if jsn.has('account') then
      iterateArray(jsn.vArr['account'], result.accountList, parseReference{TFhirAccount});
end;

procedure TFHIRJsonComposer.ComposeEpisodeOfCare(json : TJSONWriter; name : string; elem : TFhirEpisodeOfCare; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEpisodeOfCareStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEpisodeOfCareStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('statusHistory') and (elem.statusHistoryList.Count > 0) then
  begin
    json.valueArray('statusHistory');
    for i := 0 to elem.statusHistoryList.Count - 1 do
      ComposeEpisodeOfCareStatusHistory(json, '', elem.statusHistoryList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('diagnosis') and (elem.diagnosisList.Count > 0) then
  begin
    json.valueArray('diagnosis');
    for i := 0 to elem.diagnosisList.Count - 1 do
      ComposeEpisodeOfCareDiagnosis(json, '', elem.diagnosisList[i]); {z - }
    json.FinishArray;
  end;
  ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('managingOrganization') then
    ComposeReference{TFhirOrganization}(json, 'managingOrganization', elem.managingOrganization); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('referralRequest') and (elem.referralRequestList.Count > 0) then
  begin
    json.valueArray('referralRequest');
    for i := 0 to elem.referralRequestList.Count - 1 do
      ComposeReference{TFhirReferralRequest}(json, '', elem.referralRequestList[i]); {z - Reference(ReferralRequest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('careManager') then
    ComposeReference{TFhirPractitioner}(json, 'careManager', elem.careManager); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('team') and (elem.teamList.Count > 0) then
  begin
    json.valueArray('team');
    for i := 0 to elem.teamList.Count - 1 do
      ComposeReference{TFhirCareTeam}(json, '', elem.teamList[i]); {z - Reference(CareTeam)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('account') and (elem.accountList.Count > 0) then
  begin
    json.valueArray('account');
    for i := 0 to elem.accountList.Count - 1 do
      ComposeReference{TFhirAccount}(json, '', elem.accountList[i]); {z - Reference(Account)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EXPANSIONPROFILE}
procedure TFHIRJsonParser.ParseExpansionProfileFixedVersion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfileFixedVersion(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfileFixedVersion(jsn : TJsonObject) : TFhirExpansionProfileFixedVersion;
begin
  result := TFhirExpansionProfileFixedVersion.create;
  try
    ParseExpansionProfileFixedVersionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileFixedVersionProperties(jsn : TJsonObject; result : TFhirExpansionProfileFixedVersion);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := parseUri(jsn.node['system'], jsn.vObj['_system']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirSystemVersionProcessingModeEnum, SYSTEMS_TFhirSystemVersionProcessingModeEnum);
end;

procedure TFHIRJsonComposer.ComposeExpansionProfileFixedVersion(json : TJSONWriter; name : string; elem : TFhirExpansionProfileFixedVersion; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeUriValue(json, 'system', elem.systemElement, false);
  ComposeUriProps(json, 'system', elem.systemElement, false);
  ComposeStringValue(json, 'version', elem.versionElement, false);
  ComposeStringProps(json, 'version', elem.versionElement, false);
  ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirSystemVersionProcessingModeEnum, false);
  ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirSystemVersionProcessingModeEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExpansionProfileExcludedSystem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfileExcludedSystem(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfileExcludedSystem(jsn : TJsonObject) : TFhirExpansionProfileExcludedSystem;
begin
  result := TFhirExpansionProfileExcludedSystem.create;
  try
    ParseExpansionProfileExcludedSystemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileExcludedSystemProperties(jsn : TJsonObject; result : TFhirExpansionProfileExcludedSystem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := parseUri(jsn.node['system'], jsn.vObj['_system']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
end;

procedure TFHIRJsonComposer.ComposeExpansionProfileExcludedSystem(json : TJSONWriter; name : string; elem : TFhirExpansionProfileExcludedSystem; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeUriValue(json, 'system', elem.systemElement, false);
  ComposeUriProps(json, 'system', elem.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfileDesignation(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfileDesignation(jsn : TJsonObject) : TFhirExpansionProfileDesignation;
begin
  result := TFhirExpansionProfileDesignation.create;
  try
    ParseExpansionProfileDesignationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('include') then
        result.include := ParseExpansionProfileDesignationInclude(jsn.vObj['include']);{q3}
    if jsn.has('exclude') then
        result.exclude := ParseExpansionProfileDesignationExclude(jsn.vObj['exclude']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExpansionProfileDesignation(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeExpansionProfileDesignationInclude(json, 'include', elem.include); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeExpansionProfileDesignationExclude(json, 'exclude', elem.exclude); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationInclude(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfileDesignationInclude(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfileDesignationInclude(jsn : TJsonObject) : TFhirExpansionProfileDesignationInclude;
begin
  result := TFhirExpansionProfileDesignationInclude.create;
  try
    ParseExpansionProfileDesignationIncludeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationIncludeProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationInclude);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('designation') then
      iterateArray(jsn.vArr['designation'], result.designationList, parseExpansionProfileDesignationIncludeDesignation);
end;

procedure TFHIRJsonComposer.ComposeExpansionProfileDesignationInclude(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationInclude; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.designationList.Count > 0) then
  begin
    json.valueArray('designation');
    for i := 0 to elem.designationList.Count - 1 do
      ComposeExpansionProfileDesignationIncludeDesignation(json, '', elem.designationList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationIncludeDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfileDesignationIncludeDesignation(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfileDesignationIncludeDesignation(jsn : TJsonObject) : TFhirExpansionProfileDesignationIncludeDesignation;
begin
  result := TFhirExpansionProfileDesignationIncludeDesignation.create;
  try
    ParseExpansionProfileDesignationIncludeDesignationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationIncludeDesignationProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationIncludeDesignation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := parseCode(jsn.node['language'], jsn.vObj['_language']);{q}
    if jsn.has('use') then
        result.use := ParseCoding(jsn.vObj['use']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExpansionProfileDesignationIncludeDesignation(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationIncludeDesignation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'use', elem.use); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationExclude(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfileDesignationExclude(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfileDesignationExclude(jsn : TJsonObject) : TFhirExpansionProfileDesignationExclude;
begin
  result := TFhirExpansionProfileDesignationExclude.create;
  try
    ParseExpansionProfileDesignationExcludeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationExcludeProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationExclude);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('designation') then
      iterateArray(jsn.vArr['designation'], result.designationList, parseExpansionProfileDesignationExcludeDesignation);
end;

procedure TFHIRJsonComposer.ComposeExpansionProfileDesignationExclude(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationExclude; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.designationList.Count > 0) then
  begin
    json.valueArray('designation');
    for i := 0 to elem.designationList.Count - 1 do
      ComposeExpansionProfileDesignationExcludeDesignation(json, '', elem.designationList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationExcludeDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfileDesignationExcludeDesignation(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfileDesignationExcludeDesignation(jsn : TJsonObject) : TFhirExpansionProfileDesignationExcludeDesignation;
begin
  result := TFhirExpansionProfileDesignationExcludeDesignation.create;
  try
    ParseExpansionProfileDesignationExcludeDesignationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileDesignationExcludeDesignationProperties(jsn : TJsonObject; result : TFhirExpansionProfileDesignationExcludeDesignation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := parseCode(jsn.node['language'], jsn.vObj['_language']);{q}
    if jsn.has('use') then
        result.use := ParseCoding(jsn.vObj['use']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExpansionProfileDesignationExcludeDesignation(json : TJSONWriter; name : string; elem : TFhirExpansionProfileDesignationExcludeDesignation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'use', elem.use); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExpansionProfile(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExpansionProfile(jsn)); {2}
end;

function TFHIRJsonParser.ParseExpansionProfile(jsn : TJsonObject) : TFhirExpansionProfile;
begin
  result := TFhirExpansionProfile.create;
  try
    ParseExpansionProfileProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExpansionProfileProperties(jsn : TJsonObject; result : TFhirExpansionProfile);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('fixedVersion') then
      iterateArray(jsn.vArr['fixedVersion'], result.fixedVersionList, parseExpansionProfileFixedVersion);
    if jsn.has('excludedSystem') then
        result.excludedSystem := ParseExpansionProfileExcludedSystem(jsn.vObj['excludedSystem']);{q3}
    if jsn.has('includeDesignations') or jsn.has('_includeDesignations') then
        result.includeDesignationsElement := parseBoolean(jsn.node['includeDesignations'], jsn.vObj['_includeDesignations']);{q}
    if jsn.has('designation') then
        result.designation := ParseExpansionProfileDesignation(jsn.vObj['designation']);{q3}
    if jsn.has('includeDefinition') or jsn.has('_includeDefinition') then
        result.includeDefinitionElement := parseBoolean(jsn.node['includeDefinition'], jsn.vObj['_includeDefinition']);{q}
    if jsn.has('activeOnly') or jsn.has('_activeOnly') then
        result.activeOnlyElement := parseBoolean(jsn.node['activeOnly'], jsn.vObj['_activeOnly']);{q}
    if jsn.has('excludeNested') or jsn.has('_excludeNested') then
        result.excludeNestedElement := parseBoolean(jsn.node['excludeNested'], jsn.vObj['_excludeNested']);{q}
    if jsn.has('excludeNotForUI') or jsn.has('_excludeNotForUI') then
        result.excludeNotForUIElement := parseBoolean(jsn.node['excludeNotForUI'], jsn.vObj['_excludeNotForUI']);{q}
    if jsn.has('excludePostCoordinated') or jsn.has('_excludePostCoordinated') then
        result.excludePostCoordinatedElement := parseBoolean(jsn.node['excludePostCoordinated'], jsn.vObj['_excludePostCoordinated']);{q}
    if jsn.has('displayLanguage') or jsn.has('_displayLanguage') then
        result.displayLanguageElement := parseCode(jsn.node['displayLanguage'], jsn.vObj['_displayLanguage']);{q}
    if jsn.has('limitedExpansion') or jsn.has('_limitedExpansion') then
        result.limitedExpansionElement := parseBoolean(jsn.node['limitedExpansion'], jsn.vObj['_limitedExpansion']);{q}
end;

procedure TFHIRJsonComposer.ComposeExpansionProfile(json : TJSONWriter; name : string; elem : TFhirExpansionProfile; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('fixedVersion') and (elem.fixedVersionList.Count > 0) then
  begin
    json.valueArray('fixedVersion');
    for i := 0 to elem.fixedVersionList.Count - 1 do
      ComposeExpansionProfileFixedVersion(json, '', elem.fixedVersionList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('excludedSystem') then
    ComposeExpansionProfileExcludedSystem(json, 'excludedSystem', elem.excludedSystem); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('includeDesignations') then
    ComposeBooleanValue(json, 'includeDesignations', elem.includeDesignationsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('includeDesignations') then
    ComposeBooleanProps(json, 'includeDesignations', elem.includeDesignationsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('designation') then
    ComposeExpansionProfileDesignation(json, 'designation', elem.designation); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.includeDefinition <> false)) and doCompose('includeDefinition') then
    ComposeBooleanValue(json, 'includeDefinition', elem.includeDefinitionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.includeDefinition <> false)) and doCompose('includeDefinition') then
    ComposeBooleanProps(json, 'includeDefinition', elem.includeDefinitionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.activeOnly <> false)) and doCompose('activeOnly') then
    ComposeBooleanValue(json, 'activeOnly', elem.activeOnlyElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.activeOnly <> false)) and doCompose('activeOnly') then
    ComposeBooleanProps(json, 'activeOnly', elem.activeOnlyElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('excludeNested') then
    ComposeBooleanValue(json, 'excludeNested', elem.excludeNestedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('excludeNested') then
    ComposeBooleanProps(json, 'excludeNested', elem.excludeNestedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('excludeNotForUI') then
    ComposeBooleanValue(json, 'excludeNotForUI', elem.excludeNotForUIElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('excludeNotForUI') then
    ComposeBooleanProps(json, 'excludeNotForUI', elem.excludeNotForUIElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('excludePostCoordinated') then
    ComposeBooleanValue(json, 'excludePostCoordinated', elem.excludePostCoordinatedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('excludePostCoordinated') then
    ComposeBooleanProps(json, 'excludePostCoordinated', elem.excludePostCoordinatedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('displayLanguage') then
    ComposeCodeValue(json, 'displayLanguage', elem.displayLanguageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('displayLanguage') then
    ComposeCodeProps(json, 'displayLanguage', elem.displayLanguageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('limitedExpansion') then
    ComposeBooleanValue(json, 'limitedExpansion', elem.limitedExpansionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('limitedExpansion') then
    ComposeBooleanProps(json, 'limitedExpansion', elem.limitedExpansionElement, false);
end;

{$ENDIF FHIR_EXPANSIONPROFILE}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
procedure TFHIRJsonParser.ParseExplanationOfBenefitRelated(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitRelated(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitRelated(jsn : TJsonObject) : TFhirExplanationOfBenefitRelated;
begin
  result := TFhirExplanationOfBenefitRelated.create;
  try
    ParseExplanationOfBenefitRelatedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitRelatedProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitRelated);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('claim') then
        result.claim := ParseReference{TFhirClaim}(jsn.vObj['claim']);{q3}
    if jsn.has('relationship') then
        result.relationship := ParseCodeableConcept(jsn.vObj['relationship']);{q3}
    if jsn.has('reference') then
        result.reference := ParseIdentifier(jsn.vObj['reference']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitRelated(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitRelated; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaim}(json, 'claim', elem.claim); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'relationship', elem.relationship); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'reference', elem.reference); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitPayee(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitPayee(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitPayee(jsn : TJsonObject) : TFhirExplanationOfBenefitPayee;
begin
  result := TFhirExplanationOfBenefitPayee.create;
  try
    ParseExplanationOfBenefitPayeeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitPayeeProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitPayee);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('resourceType') then
        result.resourceType := ParseCodeableConcept(jsn.vObj['resourceType']);{q3}
    if jsn.has('party') then
        result.party := ParseReference{Resource}(jsn.vObj['party']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitPayee(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitPayee; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'resourceType', elem.resourceType); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'party', elem.party); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitInformation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitInformation(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitInformation(jsn : TJsonObject) : TFhirExplanationOfBenefitInformation;
begin
  result := TFhirExplanationOfBenefitInformation.create;
  try
    ParseExplanationOfBenefitInformationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitInformationProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitInformation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('timingPeriod') {a4} then
      result.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDate') or jsn.has('_timingDate') then
      result.timing := parseDate(jsn.node['timingDate'], jsn.vObj['_timingDate']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueReference') {a3} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('reason') then
        result.reason := ParseCoding(jsn.vObj['reason']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitInformation(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitInformation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDate) then 
  begin
    ComposeDateValue(json, 'timingDate', TFhirDate(elem.timing), false);
    ComposeDateProps(json, 'timingDate', TFhirDate(elem.timing), false);
  end;
  if (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirReference) then
    ComposeReference(json, 'valueReference', TFhirReference(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'reason', elem.reason); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitCareTeam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitCareTeam(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitCareTeam(jsn : TJsonObject) : TFhirExplanationOfBenefitCareTeam;
begin
  result := TFhirExplanationOfBenefitCareTeam.create;
  try
    ParseExplanationOfBenefitCareTeamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitCareTeamProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitCareTeam);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('provider') then
        result.provider := ParseReference{Resource}(jsn.vObj['provider']);{q3}
    if jsn.has('responsible') or jsn.has('_responsible') then
        result.responsibleElement := parseBoolean(jsn.node['responsible'], jsn.vObj['_responsible']);{q}
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('qualification') then
        result.qualification := ParseCodeableConcept(jsn.vObj['qualification']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitCareTeam(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitCareTeam; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  ComposeReference{Resource}(json, 'provider', elem.provider); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'responsible', elem.responsibleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'responsible', elem.responsibleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'qualification', elem.qualification); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitDiagnosis(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitDiagnosis(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitDiagnosis(jsn : TJsonObject) : TFhirExplanationOfBenefitDiagnosis;
begin
  result := TFhirExplanationOfBenefitDiagnosis.create;
  try
    ParseExplanationOfBenefitDiagnosisProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitDiagnosisProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitDiagnosis);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('diagnosisCodeableConcept') {a4} then
      result.diagnosis := ParseCodeableConcept(jsn.vObj['diagnosisCodeableConcept']);
    if jsn.has('diagnosisReference') {a3} then
      result.diagnosis := ParseReference(jsn.vObj['diagnosisReference']);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('packageCode') then
        result.packageCode := ParseCodeableConcept(jsn.vObj['packageCode']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitDiagnosis(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitDiagnosis; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if (elem.diagnosis is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'diagnosisCodeableConcept', TFhirCodeableConcept(elem.diagnosis)) 
  else if (elem.diagnosis is TFhirReference) then
    ComposeReference(json, 'diagnosisReference', TFhirReference(elem.diagnosis));
  if (SummaryOption in [soFull, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'packageCode', elem.packageCode); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitProcedure(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitProcedure(jsn : TJsonObject) : TFhirExplanationOfBenefitProcedure;
begin
  result := TFhirExplanationOfBenefitProcedure.create;
  try
    ParseExplanationOfBenefitProcedureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProcedureProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitProcedure);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('procedureCodeableConcept') {a4} then
      result.procedure_ := ParseCodeableConcept(jsn.vObj['procedureCodeableConcept']);
    if jsn.has('procedureReference') {a3} then
      result.procedure_ := ParseReference(jsn.vObj['procedureReference']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitProcedure(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitProcedure; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (elem.procedure_ is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'procedureCodeableConcept', TFhirCodeableConcept(elem.procedure_)) 
  else if (elem.procedure_ is TFhirReference) then
    ComposeReference(json, 'procedureReference', TFhirReference(elem.procedure_));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitInsurance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitInsurance(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitInsurance(jsn : TJsonObject) : TFhirExplanationOfBenefitInsurance;
begin
  result := TFhirExplanationOfBenefitInsurance.create;
  try
    ParseExplanationOfBenefitInsuranceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitInsuranceProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitInsurance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('coverage') then
        result.coverage := ParseReference{TFhirCoverage}(jsn.vObj['coverage']);{q3}
      if jsn.has('preAuthRef') or jsn.has('_preAuthRef') then
      iteratePrimitiveArray(jsn.vArr['preAuthRef'], jsn.vArr['_preAuthRef'], result.preAuthRefList, parseString);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitInsurance(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitInsurance; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirCoverage}(json, 'coverage', elem.coverage); {a}
  if (SummaryOption in [soFull, soData]) and (elem.preAuthRefList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.preAuthRefList.Count - 1 do
    begin
      ext := ext or ((elem.preAuthRefList[i].id <> '') or (elem.preAuthRefList[i].hasExtensionList) {no-comments or (elem.preAuthRefList[i].hasComments)});
      val := val or (elem.preAuthRefList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('preAuthRef');
      for i := 0 to elem.preAuthRefList.Count - 1 do
        ComposeStringValue(json, '',elem.preAuthRefList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_preAuthRef');
      for i := 0 to elem.preAuthRefList.Count - 1 do
        ComposeStringProps(json, '',elem.preAuthRefList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAccident(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitAccident(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitAccident(jsn : TJsonObject) : TFhirExplanationOfBenefitAccident;
begin
  result := TFhirExplanationOfBenefitAccident.create;
  try
    ParseExplanationOfBenefitAccidentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAccidentProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitAccident);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDate(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('locationAddress') {a4} then
      result.location := ParseAddress(jsn.vObj['locationAddress']);
    if jsn.has('locationReference') {a3} then
      result.location := ParseReference(jsn.vObj['locationReference']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitAccident(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitAccident; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) and (elem.location is TFhirAddress) then 
    ComposeAddress(json, 'locationAddress', TFhirAddress(elem.location)) 
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirReference) then
    ComposeReference(json, 'locationReference', TFhirReference(elem.location));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitItem(jsn : TJsonObject) : TFhirExplanationOfBenefitItem;
begin
  result := TFhirExplanationOfBenefitItem.create;
  try
    ParseExplanationOfBenefitItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
      if jsn.has('careTeamLinkId') or jsn.has('_careTeamLinkId') then
      iteratePrimitiveArray(jsn.vArr['careTeamLinkId'], jsn.vArr['_careTeamLinkId'], result.careTeamLinkIdList, parsePositiveInt);
      if jsn.has('diagnosisLinkId') or jsn.has('_diagnosisLinkId') then
      iteratePrimitiveArray(jsn.vArr['diagnosisLinkId'], jsn.vArr['_diagnosisLinkId'], result.diagnosisLinkIdList, parsePositiveInt);
      if jsn.has('procedureLinkId') or jsn.has('_procedureLinkId') then
      iteratePrimitiveArray(jsn.vArr['procedureLinkId'], jsn.vArr['_procedureLinkId'], result.procedureLinkIdList, parsePositiveInt);
      if jsn.has('informationLinkId') or jsn.has('_informationLinkId') then
      iteratePrimitiveArray(jsn.vArr['informationLinkId'], jsn.vArr['_informationLinkId'], result.informationLinkIdList, parsePositiveInt);
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], result.programCodeList, parseCodeableConcept);
    if jsn.has('servicedPeriod') {a4} then
      result.serviced := ParsePeriod(jsn.vObj['servicedPeriod']);
    if jsn.has('servicedDate') or jsn.has('_servicedDate') then
      result.serviced := parseDate(jsn.node['servicedDate'], jsn.vObj['_servicedDate']);
    if jsn.has('locationCodeableConcept') {a4} then
      result.location := ParseCodeableConcept(jsn.vObj['locationCodeableConcept']);
    if jsn.has('locationAddress') {a4} then
      result.location := ParseAddress(jsn.vObj['locationAddress']);
    if jsn.has('locationReference') {a3} then
      result.location := ParseReference(jsn.vObj['locationReference']);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], result.udiList, parseReference{TFhirDevice});
    if jsn.has('bodySite') then
        result.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);{q3}
    if jsn.has('subSite') then
      iterateArray(jsn.vArr['subSite'], result.subSiteList, parseCodeableConcept);
    if jsn.has('encounter') then
      iterateArray(jsn.vArr['encounter'], result.encounterList, parseReference{TFhirEncounter});
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseExplanationOfBenefitItemAdjudication);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parseExplanationOfBenefitItemDetail);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitItem(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.careTeamLinkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.careTeamLinkIdList.Count - 1 do
    begin
      ext := ext or ((elem.careTeamLinkIdList[i].id <> '') or (elem.careTeamLinkIdList[i].hasExtensionList) {no-comments or (elem.careTeamLinkIdList[i].hasComments)});
      val := val or (elem.careTeamLinkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('careTeamLinkId');
      for i := 0 to elem.careTeamLinkIdList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.careTeamLinkIdList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_careTeamLinkId');
      for i := 0 to elem.careTeamLinkIdList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.careTeamLinkIdList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.diagnosisLinkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.diagnosisLinkIdList.Count - 1 do
    begin
      ext := ext or ((elem.diagnosisLinkIdList[i].id <> '') or (elem.diagnosisLinkIdList[i].hasExtensionList) {no-comments or (elem.diagnosisLinkIdList[i].hasComments)});
      val := val or (elem.diagnosisLinkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('diagnosisLinkId');
      for i := 0 to elem.diagnosisLinkIdList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.diagnosisLinkIdList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_diagnosisLinkId');
      for i := 0 to elem.diagnosisLinkIdList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.diagnosisLinkIdList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.procedureLinkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.procedureLinkIdList.Count - 1 do
    begin
      ext := ext or ((elem.procedureLinkIdList[i].id <> '') or (elem.procedureLinkIdList[i].hasExtensionList) {no-comments or (elem.procedureLinkIdList[i].hasComments)});
      val := val or (elem.procedureLinkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('procedureLinkId');
      for i := 0 to elem.procedureLinkIdList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.procedureLinkIdList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_procedureLinkId');
      for i := 0 to elem.procedureLinkIdList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.procedureLinkIdList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.informationLinkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.informationLinkIdList.Count - 1 do
    begin
      ext := ext or ((elem.informationLinkIdList[i].id <> '') or (elem.informationLinkIdList[i].hasExtensionList) {no-comments or (elem.informationLinkIdList[i].hasComments)});
      val := val or (elem.informationLinkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('informationLinkId');
      for i := 0 to elem.informationLinkIdList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.informationLinkIdList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_informationLinkId');
      for i := 0 to elem.informationLinkIdList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.informationLinkIdList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.programCodeList.Count > 0) then
  begin
    json.valueArray('programCode');
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.programCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirPeriod) then 
    ComposePeriod(json, 'servicedPeriod', TFhirPeriod(elem.serviced)) 
  else if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirDate) then 
  begin
    ComposeDateValue(json, 'servicedDate', TFhirDate(elem.serviced), false);
    ComposeDateProps(json, 'servicedDate', TFhirDate(elem.serviced), false);
  end;
  if (SummaryOption in [soFull, soData]) and (elem.location is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'locationCodeableConcept', TFhirCodeableConcept(elem.location)) 
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirAddress) then 
    ComposeAddress(json, 'locationAddress', TFhirAddress(elem.location)) 
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirReference) then
    ComposeReference(json, 'locationReference', TFhirReference(elem.location));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if (SummaryOption in [soFull, soData]) and (elem.udiList.Count > 0) then
  begin
    json.valueArray('udi');
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(json, '', elem.udiList[i]); {z - Reference(Device)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'bodySite', elem.bodySite); {a}
  if (SummaryOption in [soFull, soData]) and (elem.subSiteList.Count > 0) then
  begin
    json.valueArray('subSite');
    for i := 0 to elem.subSiteList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.subSiteList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.encounterList.Count > 0) then
  begin
    json.valueArray('encounter');
    for i := 0 to elem.encounterList.Count - 1 do
      ComposeReference{TFhirEncounter}(json, '', elem.encounterList[i]); {z - Reference(Encounter)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', elem.adjudicationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposeExplanationOfBenefitItemDetail(json, '', elem.detailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemAdjudication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitItemAdjudication(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitItemAdjudication(jsn : TJsonObject) : TFhirExplanationOfBenefitItemAdjudication;
begin
  result := TFhirExplanationOfBenefitItemAdjudication.create;
  try
    ParseExplanationOfBenefitItemAdjudicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemAdjudicationProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItemAdjudication);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('reason') then
        result.reason := ParseCodeableConcept(jsn.vObj['reason']);{q3}
    if jsn.has('amount') then
        result.amount := ParseMoney(jsn.vObj['amount']);{q3}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseDecimal(jsn.node['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitItemAdjudication(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItemAdjudication; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reason', elem.reason); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', elem.amount); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'value', elem.valueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitItemDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitItemDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitItemDetail;
begin
  result := TFhirExplanationOfBenefitItemDetail.create;
  try
    ParseExplanationOfBenefitItemDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemDetailProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItemDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], result.programCodeList, parseCodeableConcept);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], result.udiList, parseReference{TFhirDevice});
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseExplanationOfBenefitItemAdjudication);
    if jsn.has('subDetail') then
      iterateArray(jsn.vArr['subDetail'], result.subDetailList, parseExplanationOfBenefitItemDetailSubDetail);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitItemDetail(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItemDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.programCodeList.Count > 0) then
  begin
    json.valueArray('programCode');
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.programCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if (SummaryOption in [soFull, soData]) and (elem.udiList.Count > 0) then
  begin
    json.valueArray('udi');
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(json, '', elem.udiList[i]); {z - Reference(Device)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', elem.adjudicationList[i]); {z - @ExplanationOfBenefit.item.adjudication}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.subDetailList.Count > 0) then
  begin
    json.valueArray('subDetail');
    for i := 0 to elem.subDetailList.Count - 1 do
      ComposeExplanationOfBenefitItemDetailSubDetail(json, '', elem.subDetailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemDetailSubDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitItemDetailSubDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitItemDetailSubDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitItemDetailSubDetail;
begin
  result := TFhirExplanationOfBenefitItemDetailSubDetail.create;
  try
    ParseExplanationOfBenefitItemDetailSubDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitItemDetailSubDetailProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitItemDetailSubDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequence') or jsn.has('_sequence') then
        result.sequenceElement := parsePositiveInt(jsn.node['sequence'], jsn.vObj['_sequence']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('programCode') then
      iterateArray(jsn.vArr['programCode'], result.programCodeList, parseCodeableConcept);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('unitPrice') then
        result.unitPrice := ParseMoney(jsn.vObj['unitPrice']);{q3}
    if jsn.has('factor') or jsn.has('_factor') then
        result.factorElement := parseDecimal(jsn.node['factor'], jsn.vObj['_factor']);{q}
    if jsn.has('net') then
        result.net := ParseMoney(jsn.vObj['net']);{q3}
    if jsn.has('udi') then
      iterateArray(jsn.vArr['udi'], result.udiList, parseReference{TFhirDevice});
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseExplanationOfBenefitItemAdjudication);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitItemDetailSubDetail(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitItemDetailSubDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposePositiveIntValue(json, 'sequence', elem.sequenceElement, false);
  ComposePositiveIntProps(json, 'sequence', elem.sequenceElement, false);
  ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.programCodeList.Count > 0) then
  begin
    json.valueArray('programCode');
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.programCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'unitPrice', elem.unitPrice); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'factor', elem.factorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'net', elem.net); {a}
  if (SummaryOption in [soFull, soData]) and (elem.udiList.Count > 0) then
  begin
    json.valueArray('udi');
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(json, '', elem.udiList[i]); {z - Reference(Device)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', elem.adjudicationList[i]); {z - @ExplanationOfBenefit.item.adjudication}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAddItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitAddItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitAddItem(jsn : TJsonObject) : TFhirExplanationOfBenefitAddItem;
begin
  result := TFhirExplanationOfBenefitAddItem.create;
  try
    ParseExplanationOfBenefitAddItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAddItemProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitAddItem);
begin
    ParseBackboneElementProperties(jsn, result);
      if jsn.has('sequenceLinkId') or jsn.has('_sequenceLinkId') then
      iteratePrimitiveArray(jsn.vArr['sequenceLinkId'], jsn.vArr['_sequenceLinkId'], result.sequenceLinkIdList, parsePositiveInt);
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('fee') then
        result.fee := ParseMoney(jsn.vObj['fee']);{q3}
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseExplanationOfBenefitItemAdjudication);
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parseExplanationOfBenefitAddItemDetail);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitAddItem(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitAddItem; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.sequenceLinkIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.sequenceLinkIdList.Count - 1 do
    begin
      ext := ext or ((elem.sequenceLinkIdList[i].id <> '') or (elem.sequenceLinkIdList[i].hasExtensionList) {no-comments or (elem.sequenceLinkIdList[i].hasComments)});
      val := val or (elem.sequenceLinkIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('sequenceLinkId');
      for i := 0 to elem.sequenceLinkIdList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.sequenceLinkIdList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_sequenceLinkId');
      for i := 0 to elem.sequenceLinkIdList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.sequenceLinkIdList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'fee', elem.fee); {a}
  if (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', elem.adjudicationList[i]); {z - @ExplanationOfBenefit.item.adjudication}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposeExplanationOfBenefitAddItemDetail(json, '', elem.detailList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAddItemDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitAddItemDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitAddItemDetail(jsn : TJsonObject) : TFhirExplanationOfBenefitAddItemDetail;
begin
  result := TFhirExplanationOfBenefitAddItemDetail.create;
  try
    ParseExplanationOfBenefitAddItemDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitAddItemDetailProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitAddItemDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('revenue') then
        result.revenue := ParseCodeableConcept(jsn.vObj['revenue']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('service') then
        result.service := ParseCodeableConcept(jsn.vObj['service']);{q3}
    if jsn.has('modifier') then
      iterateArray(jsn.vArr['modifier'], result.modifierList, parseCodeableConcept);
    if jsn.has('fee') then
        result.fee := ParseMoney(jsn.vObj['fee']);{q3}
      if jsn.has('noteNumber') or jsn.has('_noteNumber') then
      iteratePrimitiveArray(jsn.vArr['noteNumber'], jsn.vArr['_noteNumber'], result.noteNumberList, parsePositiveInt);
    if jsn.has('adjudication') then
      iterateArray(jsn.vArr['adjudication'], result.adjudicationList, parseExplanationOfBenefitItemAdjudication);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitAddItemDetail(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitAddItemDetail; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'revenue', elem.revenue); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'service', elem.service); {a}
  if (SummaryOption in [soFull, soData]) and (elem.modifierList.Count > 0) then
  begin
    json.valueArray('modifier');
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.modifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'fee', elem.fee); {a}
  if (SummaryOption in [soFull, soData]) and (elem.noteNumberList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.noteNumberList.Count - 1 do
    begin
      ext := ext or ((elem.noteNumberList[i].id <> '') or (elem.noteNumberList[i].hasExtensionList) {no-comments or (elem.noteNumberList[i].hasComments)});
      val := val or (elem.noteNumberList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntValue(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_noteNumber');
      for i := 0 to elem.noteNumberList.Count - 1 do
        ComposePositiveIntProps(json, '',elem.noteNumberList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.adjudicationList.Count > 0) then
  begin
    json.valueArray('adjudication');
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(json, '', elem.adjudicationList[i]); {z - @ExplanationOfBenefit.item.adjudication}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitPayment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitPayment(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitPayment(jsn : TJsonObject) : TFhirExplanationOfBenefitPayment;
begin
  result := TFhirExplanationOfBenefitPayment.create;
  try
    ParseExplanationOfBenefitPaymentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitPaymentProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitPayment);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('adjustment') then
        result.adjustment := ParseMoney(jsn.vObj['adjustment']);{q3}
    if jsn.has('adjustmentReason') then
        result.adjustmentReason := ParseCodeableConcept(jsn.vObj['adjustmentReason']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDate(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('amount') then
        result.amount := ParseMoney(jsn.vObj['amount']);{q3}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitPayment(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitPayment; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'adjustment', elem.adjustment); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'adjustmentReason', elem.adjustmentReason); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', elem.amount); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitProcessNote(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitProcessNote(jsn : TJsonObject) : TFhirExplanationOfBenefitProcessNote;
begin
  result := TFhirExplanationOfBenefitProcessNote.create;
  try
    ParseExplanationOfBenefitProcessNoteProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProcessNoteProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitProcessNote);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('number') or jsn.has('_number') then
        result.numberElement := parsePositiveInt(jsn.node['number'], jsn.vObj['_number']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);{q}
    if jsn.has('language') then
        result.language := ParseCodeableConcept(jsn.vObj['language']);{q3}
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitProcessNote(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitProcessNote; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'number', elem.numberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'number', elem.numberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'language', elem.language); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitBenefitBalance(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalance(jsn : TJsonObject) : TFhirExplanationOfBenefitBenefitBalance;
begin
  result := TFhirExplanationOfBenefitBenefitBalance.create;
  try
    ParseExplanationOfBenefitBenefitBalanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalanceProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitBenefitBalance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('subCategory') then
        result.subCategory := ParseCodeableConcept(jsn.vObj['subCategory']);{q3}
    if jsn.has('excluded') or jsn.has('_excluded') then
        result.excludedElement := parseBoolean(jsn.node['excluded'], jsn.vObj['_excluded']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('network') then
        result.network := ParseCodeableConcept(jsn.vObj['network']);{q3}
    if jsn.has('unit') then
        result.unit_ := ParseCodeableConcept(jsn.vObj['unit']);{q3}
    if jsn.has('term') then
        result.term := ParseCodeableConcept(jsn.vObj['term']);{q3}
    if jsn.has('financial') then
      iterateArray(jsn.vArr['financial'], result.financialList, parseExplanationOfBenefitBenefitBalanceFinancial);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitBenefitBalance(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitBenefitBalance; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'subCategory', elem.subCategory); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'excluded', elem.excludedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'excluded', elem.excludedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'network', elem.network); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'unit', elem.unit_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'term', elem.term); {a}
  if (SummaryOption in [soFull, soData]) and (elem.financialList.Count > 0) then
  begin
    json.valueArray('financial');
    for i := 0 to elem.financialList.Count - 1 do
      ComposeExplanationOfBenefitBenefitBalanceFinancial(json, '', elem.financialList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalanceFinancial(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefitBenefitBalanceFinancial(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalanceFinancial(jsn : TJsonObject) : TFhirExplanationOfBenefitBenefitBalanceFinancial;
begin
  result := TFhirExplanationOfBenefitBenefitBalanceFinancial.create;
  try
    ParseExplanationOfBenefitBenefitBalanceFinancialProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitBenefitBalanceFinancialProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefitBenefitBalanceFinancial);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('allowedUnsignedInt') or jsn.has('_allowedUnsignedInt') then
      result.allowed := parseUnsignedInt(jsn.node['allowedUnsignedInt'], jsn.vObj['_allowedUnsignedInt']);
    if jsn.has('allowedMoney') {a4} then
      result.allowed := ParseMoney(jsn.vObj['allowedMoney']);
    if jsn.has('allowedString') or jsn.has('_allowedString') then
      result.allowed := parseString(jsn.node['allowedString'], jsn.vObj['_allowedString']);
    if jsn.has('usedUnsignedInt') or jsn.has('_usedUnsignedInt') then
      result.used := parseUnsignedInt(jsn.node['usedUnsignedInt'], jsn.vObj['_usedUnsignedInt']);
    if jsn.has('usedMoney') {a4} then
      result.used := ParseMoney(jsn.vObj['usedMoney']);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefitBenefitBalanceFinancial(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefitBenefitBalanceFinancial; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'allowedUnsignedInt', TFhirUnsignedInt(elem.allowed), false);
    ComposeUnsignedIntProps(json, 'allowedUnsignedInt', TFhirUnsignedInt(elem.allowed), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirMoney) then 
    ComposeMoney(json, 'allowedMoney', TFhirMoney(elem.allowed)) 
  else if (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirString) then 
  begin
    ComposeStringValue(json, 'allowedString', TFhirString(elem.allowed), false);
    ComposeStringProps(json, 'allowedString', TFhirString(elem.allowed), false);
  end;
  if (SummaryOption in [soFull, soData]) and (elem.used is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'usedUnsignedInt', TFhirUnsignedInt(elem.used), false);
    ComposeUnsignedIntProps(json, 'usedUnsignedInt', TFhirUnsignedInt(elem.used), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.used is TFhirMoney) then 
    ComposeMoney(json, 'usedMoney', TFhirMoney(elem.used)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefit(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseExplanationOfBenefit(jsn)); {2}
end;

function TFHIRJsonParser.ParseExplanationOfBenefit(jsn : TJsonObject) : TFhirExplanationOfBenefit;
begin
  result := TFhirExplanationOfBenefit.create;
  try
    ParseExplanationOfBenefitProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseExplanationOfBenefitProperties(jsn : TJsonObject; result : TFhirExplanationOfBenefit);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirExplanationofbenefitStatusEnum, SYSTEMS_TFhirExplanationofbenefitStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('subType') then
      iterateArray(jsn.vArr['subType'], result.subTypeList, parseCodeableConcept);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('billablePeriod') then
        result.billablePeriod := ParsePeriod(jsn.vObj['billablePeriod']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('enterer') then
        result.enterer := ParseReference{TFhirPractitioner}(jsn.vObj['enterer']);{q3}
    if jsn.has('insurer') then
        result.insurer := ParseReference{TFhirOrganization}(jsn.vObj['insurer']);{q3}
    if jsn.has('provider') then
        result.provider := ParseReference{TFhirPractitioner}(jsn.vObj['provider']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('referral') then
        result.referral := ParseReference{TFhirReferralRequest}(jsn.vObj['referral']);{q3}
    if jsn.has('facility') then
        result.facility := ParseReference{TFhirLocation}(jsn.vObj['facility']);{q3}
    if jsn.has('claim') then
        result.claim := ParseReference{TFhirClaim}(jsn.vObj['claim']);{q3}
    if jsn.has('claimResponse') then
        result.claimResponse := ParseReference{TFhirClaimResponse}(jsn.vObj['claimResponse']);{q3}
    if jsn.has('outcome') then
        result.outcome := ParseCodeableConcept(jsn.vObj['outcome']);{q3}
    if jsn.has('disposition') or jsn.has('_disposition') then
        result.dispositionElement := parseString(jsn.node['disposition'], jsn.vObj['_disposition']);{q}
    if jsn.has('related') then
      iterateArray(jsn.vArr['related'], result.relatedList, parseExplanationOfBenefitRelated);
    if jsn.has('prescription') then
        result.prescription := ParseReference{Resource}(jsn.vObj['prescription']);{q3}
    if jsn.has('originalPrescription') then
        result.originalPrescription := ParseReference{TFhirMedicationRequest}(jsn.vObj['originalPrescription']);{q3}
    if jsn.has('payee') then
        result.payee := ParseExplanationOfBenefitPayee(jsn.vObj['payee']);{q3}
    if jsn.has('information') then
      iterateArray(jsn.vArr['information'], result.informationList, parseExplanationOfBenefitInformation);
    if jsn.has('careTeam') then
      iterateArray(jsn.vArr['careTeam'], result.careTeamList, parseExplanationOfBenefitCareTeam);
    if jsn.has('diagnosis') then
      iterateArray(jsn.vArr['diagnosis'], result.diagnosisList, parseExplanationOfBenefitDiagnosis);
    if jsn.has('procedure') then
      iterateArray(jsn.vArr['procedure'], result.procedure_List, parseExplanationOfBenefitProcedure);
    if jsn.has('precedence') or jsn.has('_precedence') then
        result.precedenceElement := parsePositiveInt(jsn.node['precedence'], jsn.vObj['_precedence']);{q}
    if jsn.has('insurance') then
        result.insurance := ParseExplanationOfBenefitInsurance(jsn.vObj['insurance']);{q3}
    if jsn.has('accident') then
        result.accident := ParseExplanationOfBenefitAccident(jsn.vObj['accident']);{q3}
    if jsn.has('employmentImpacted') then
        result.employmentImpacted := ParsePeriod(jsn.vObj['employmentImpacted']);{q3}
    if jsn.has('hospitalization') then
        result.hospitalization := ParsePeriod(jsn.vObj['hospitalization']);{q3}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseExplanationOfBenefitItem);
    if jsn.has('addItem') then
      iterateArray(jsn.vArr['addItem'], result.addItemList, parseExplanationOfBenefitAddItem);
    if jsn.has('totalCost') then
        result.totalCost := ParseMoney(jsn.vObj['totalCost']);{q3}
    if jsn.has('unallocDeductable') then
        result.unallocDeductable := ParseMoney(jsn.vObj['unallocDeductable']);{q3}
    if jsn.has('totalBenefit') then
        result.totalBenefit := ParseMoney(jsn.vObj['totalBenefit']);{q3}
    if jsn.has('payment') then
        result.payment := ParseExplanationOfBenefitPayment(jsn.vObj['payment']);{q3}
    if jsn.has('form') then
        result.form := ParseCodeableConcept(jsn.vObj['form']);{q3}
    if jsn.has('processNote') then
      iterateArray(jsn.vArr['processNote'], result.processNoteList, parseExplanationOfBenefitProcessNote);
    if jsn.has('benefitBalance') then
      iterateArray(jsn.vArr['benefitBalance'], result.benefitBalanceList, parseExplanationOfBenefitBenefitBalance);
end;

procedure TFHIRJsonComposer.ComposeExplanationOfBenefit(json : TJSONWriter; name : string; elem : TFhirExplanationOfBenefit; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirExplanationofbenefitStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirExplanationofbenefitStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('subType') and (elem.subTypeList.Count > 0) then
  begin
    json.valueArray('subType');
    for i := 0 to elem.subTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.subTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('billablePeriod') then
    ComposePeriod(json, 'billablePeriod', elem.billablePeriod); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('enterer') then
    ComposeReference{TFhirPractitioner}(json, 'enterer', elem.enterer); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('insurer') then
    ComposeReference{TFhirOrganization}(json, 'insurer', elem.insurer); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('provider') then
    ComposeReference{TFhirPractitioner}(json, 'provider', elem.provider); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('organization') then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('referral') then
    ComposeReference{TFhirReferralRequest}(json, 'referral', elem.referral); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('facility') then
    ComposeReference{TFhirLocation}(json, 'facility', elem.facility); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('claim') then
    ComposeReference{TFhirClaim}(json, 'claim', elem.claim); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('claimResponse') then
    ComposeReference{TFhirClaimResponse}(json, 'claimResponse', elem.claimResponse); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('outcome') then
    ComposeCodeableConcept(json, 'outcome', elem.outcome); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeStringValue(json, 'disposition', elem.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeStringProps(json, 'disposition', elem.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('related') and (elem.relatedList.Count > 0) then
  begin
    json.valueArray('related');
    for i := 0 to elem.relatedList.Count - 1 do
      ComposeExplanationOfBenefitRelated(json, '', elem.relatedList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('prescription') then
    ComposeReference{Resource}(json, 'prescription', elem.prescription); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('originalPrescription') then
    ComposeReference{TFhirMedicationRequest}(json, 'originalPrescription', elem.originalPrescription); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('payee') then
    ComposeExplanationOfBenefitPayee(json, 'payee', elem.payee); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('information') and (elem.informationList.Count > 0) then
  begin
    json.valueArray('information');
    for i := 0 to elem.informationList.Count - 1 do
      ComposeExplanationOfBenefitInformation(json, '', elem.informationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('careTeam') and (elem.careTeamList.Count > 0) then
  begin
    json.valueArray('careTeam');
    for i := 0 to elem.careTeamList.Count - 1 do
      ComposeExplanationOfBenefitCareTeam(json, '', elem.careTeamList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('diagnosis') and (elem.diagnosisList.Count > 0) then
  begin
    json.valueArray('diagnosis');
    for i := 0 to elem.diagnosisList.Count - 1 do
      ComposeExplanationOfBenefitDiagnosis(json, '', elem.diagnosisList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('procedure_') and (elem.procedure_List.Count > 0) then
  begin
    json.valueArray('procedure');
    for i := 0 to elem.procedure_List.Count - 1 do
      ComposeExplanationOfBenefitProcedure(json, '', elem.procedure_List[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('precedence') then
    ComposePositiveIntValue(json, 'precedence', elem.precedenceElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('precedence') then
    ComposePositiveIntProps(json, 'precedence', elem.precedenceElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('insurance') then
    ComposeExplanationOfBenefitInsurance(json, 'insurance', elem.insurance); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('accident') then
    ComposeExplanationOfBenefitAccident(json, 'accident', elem.accident); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('employmentImpacted') then
    ComposePeriod(json, 'employmentImpacted', elem.employmentImpacted); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('hospitalization') then
    ComposePeriod(json, 'hospitalization', elem.hospitalization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('item') and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeExplanationOfBenefitItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('addItem') and (elem.addItemList.Count > 0) then
  begin
    json.valueArray('addItem');
    for i := 0 to elem.addItemList.Count - 1 do
      ComposeExplanationOfBenefitAddItem(json, '', elem.addItemList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('totalCost') then
    ComposeMoney(json, 'totalCost', elem.totalCost); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('unallocDeductable') then
    ComposeMoney(json, 'unallocDeductable', elem.unallocDeductable); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('totalBenefit') then
    ComposeMoney(json, 'totalBenefit', elem.totalBenefit); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('payment') then
    ComposeExplanationOfBenefitPayment(json, 'payment', elem.payment); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('form') then
    ComposeCodeableConcept(json, 'form', elem.form); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('processNote') and (elem.processNoteList.Count > 0) then
  begin
    json.valueArray('processNote');
    for i := 0 to elem.processNoteList.Count - 1 do
      ComposeExplanationOfBenefitProcessNote(json, '', elem.processNoteList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('benefitBalance') and (elem.benefitBalanceList.Count > 0) then
  begin
    json.valueArray('benefitBalance');
    for i := 0 to elem.benefitBalanceList.Count - 1 do
      ComposeExplanationOfBenefitBenefitBalance(json, '', elem.benefitBalanceList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
procedure TFHIRJsonParser.ParseFamilyMemberHistoryCondition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseFamilyMemberHistoryCondition(jsn)); {2}
end;

function TFHIRJsonParser.ParseFamilyMemberHistoryCondition(jsn : TJsonObject) : TFhirFamilyMemberHistoryCondition;
begin
  result := TFhirFamilyMemberHistoryCondition.create;
  try
    ParseFamilyMemberHistoryConditionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseFamilyMemberHistoryConditionProperties(jsn : TJsonObject; result : TFhirFamilyMemberHistoryCondition);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('outcome') then
        result.outcome := ParseCodeableConcept(jsn.vObj['outcome']);{q3}
    if jsn.has('onsetAge') {a4} then
      result.onset := ParseAge(jsn.vObj['onsetAge']);
    if jsn.has('onsetRange') {a4} then
      result.onset := ParseRange(jsn.vObj['onsetRange']);
    if jsn.has('onsetPeriod') {a4} then
      result.onset := ParsePeriod(jsn.vObj['onsetPeriod']);
    if jsn.has('onsetString') or jsn.has('_onsetString') then
      result.onset := parseString(jsn.node['onsetString'], jsn.vObj['_onsetString']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeFamilyMemberHistoryCondition(json : TJSONWriter; name : string; elem : TFhirFamilyMemberHistoryCondition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'outcome', elem.outcome); {a}
  if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirAge) then 
    ComposeAge(json, 'onsetAge', TFhirAge(elem.onset)) 
  else if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirRange) then 
    ComposeRange(json, 'onsetRange', TFhirRange(elem.onset)) 
  else if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirPeriod) then 
    ComposePeriod(json, 'onsetPeriod', TFhirPeriod(elem.onset)) 
  else if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirString) then 
  begin
    ComposeStringValue(json, 'onsetString', TFhirString(elem.onset), false);
    ComposeStringProps(json, 'onsetString', TFhirString(elem.onset), false);
  end;
  if (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseFamilyMemberHistory(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseFamilyMemberHistory(jsn)); {2}
end;

function TFHIRJsonParser.ParseFamilyMemberHistory(jsn : TJsonObject) : TFhirFamilyMemberHistory;
begin
  result := TFhirFamilyMemberHistory.create;
  try
    ParseFamilyMemberHistoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseFamilyMemberHistoryProperties(jsn : TJsonObject; result : TFhirFamilyMemberHistory);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('definition') then
      iterateArray(jsn.vArr['definition'], result.definitionList, parseReference{Resource});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirHistoryStatusEnum, SYSTEMS_TFhirHistoryStatusEnum);
    if jsn.has('notDone') or jsn.has('_notDone') then
        result.notDoneElement := parseBoolean(jsn.node['notDone'], jsn.vObj['_notDone']);{q}
    if jsn.has('notDoneReason') then
        result.notDoneReason := ParseCodeableConcept(jsn.vObj['notDoneReason']);{q3}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('relationship') then
        result.relationship := ParseCodeableConcept(jsn.vObj['relationship']);{q3}
    if jsn.has('gender') or jsn.has('_gender')  then
      result.genderElement := parseEnum(jsn.path+'/gender', jsn.node['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('bornPeriod') {a4} then
      result.born := ParsePeriod(jsn.vObj['bornPeriod']);
    if jsn.has('bornDate') or jsn.has('_bornDate') then
      result.born := parseDate(jsn.node['bornDate'], jsn.vObj['_bornDate']);
    if jsn.has('bornString') or jsn.has('_bornString') then
      result.born := parseString(jsn.node['bornString'], jsn.vObj['_bornString']);
    if jsn.has('ageAge') {a4} then
      result.age := ParseAge(jsn.vObj['ageAge']);
    if jsn.has('ageRange') {a4} then
      result.age := ParseRange(jsn.vObj['ageRange']);
    if jsn.has('ageString') or jsn.has('_ageString') then
      result.age := parseString(jsn.node['ageString'], jsn.vObj['_ageString']);
    if jsn.has('estimatedAge') or jsn.has('_estimatedAge') then
        result.estimatedAgeElement := parseBoolean(jsn.node['estimatedAge'], jsn.vObj['_estimatedAge']);{q}
    if jsn.has('deceasedAge') {a4} then
      result.deceased := ParseAge(jsn.vObj['deceasedAge']);
    if jsn.has('deceasedRange') {a4} then
      result.deceased := ParseRange(jsn.vObj['deceasedRange']);
    if jsn.has('deceasedBoolean') or jsn.has('_deceasedBoolean') then
      result.deceased := parseBoolean(jsn.node['deceasedBoolean'], jsn.vObj['_deceasedBoolean']);
    if jsn.has('deceasedDate') or jsn.has('_deceasedDate') then
      result.deceased := parseDate(jsn.node['deceasedDate'], jsn.vObj['_deceasedDate']);
    if jsn.has('deceasedString') or jsn.has('_deceasedString') then
      result.deceased := parseString(jsn.node['deceasedString'], jsn.vObj['_deceasedString']);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('condition') then
      iterateArray(jsn.vArr['condition'], result.conditionList, parseFamilyMemberHistoryCondition);
end;

procedure TFHIRJsonComposer.ComposeFamilyMemberHistory(json : TJSONWriter; name : string; elem : TFhirFamilyMemberHistory; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('definition') and (elem.definitionList.Count > 0) then
  begin
    json.valueArray('definition');
    for i := 0 to elem.definitionList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.definitionList[i]); {z - Reference(PlanDefinition|Questionnaire)}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirHistoryStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirHistoryStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.notDone <> false)) and doCompose('notDone') then
    ComposeBooleanValue(json, 'notDone', elem.notDoneElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.notDone <> false)) and doCompose('notDone') then
    ComposeBooleanProps(json, 'notDone', elem.notDoneElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('notDoneReason') then
    ComposeCodeableConcept(json, 'notDoneReason', elem.notDoneReason); {a}
  ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  ComposeCodeableConcept(json, 'relationship', elem.relationship); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gender') then
    ComposeEnumValue(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gender') then
    ComposeEnumProps(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soData]) and (elem.born is TFhirPeriod) then 
    ComposePeriod(json, 'bornPeriod', TFhirPeriod(elem.born)) 
  else if (SummaryOption in [soFull, soData]) and (elem.born is TFhirDate) then 
  begin
    ComposeDateValue(json, 'bornDate', TFhirDate(elem.born), false);
    ComposeDateProps(json, 'bornDate', TFhirDate(elem.born), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.born is TFhirString) then 
  begin
    ComposeStringValue(json, 'bornString', TFhirString(elem.born), false);
    ComposeStringProps(json, 'bornString', TFhirString(elem.born), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.age is TFhirAge) then 
    ComposeAge(json, 'ageAge', TFhirAge(elem.age)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.age is TFhirRange) then 
    ComposeRange(json, 'ageRange', TFhirRange(elem.age)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.age is TFhirString) then 
  begin
    ComposeStringValue(json, 'ageString', TFhirString(elem.age), false);
    ComposeStringProps(json, 'ageString', TFhirString(elem.age), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('estimatedAge') then
    ComposeBooleanValue(json, 'estimatedAge', elem.estimatedAgeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('estimatedAge') then
    ComposeBooleanProps(json, 'estimatedAge', elem.estimatedAgeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirAge) then 
    ComposeAge(json, 'deceasedAge', TFhirAge(elem.deceased)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirRange) then 
    ComposeRange(json, 'deceasedRange', TFhirRange(elem.deceased)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'deceasedBoolean', TFhirBoolean(elem.deceased), false);
    ComposeBooleanProps(json, 'deceasedBoolean', TFhirBoolean(elem.deceased), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirDate) then 
  begin
    ComposeDateValue(json, 'deceasedDate', TFhirDate(elem.deceased), false);
    ComposeDateProps(json, 'deceasedDate', TFhirDate(elem.deceased), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirString) then 
  begin
    ComposeStringValue(json, 'deceasedString', TFhirString(elem.deceased), false);
    ComposeStringProps(json, 'deceasedString', TFhirString(elem.deceased), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation|AllergyIntolerance|QuestionnaireResponse)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('condition') and (elem.conditionList.Count > 0) then
  begin
    json.valueArray('condition');
    for i := 0 to elem.conditionList.Count - 1 do
      ComposeFamilyMemberHistoryCondition(json, '', elem.conditionList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
procedure TFHIRJsonParser.ParseFlag(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseFlag(jsn)); {2}
end;

function TFHIRJsonParser.ParseFlag(jsn : TJsonObject) : TFhirFlag;
begin
  result := TFhirFlag.create;
  try
    ParseFlagProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseFlagProperties(jsn : TJsonObject; result : TFhirFlag);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFlagStatusEnum, SYSTEMS_TFhirFlagStatusEnum);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('encounter') then
        result.encounter := ParseReference{TFhirEncounter}(jsn.vObj['encounter']);{q3}
    if jsn.has('author') then
        result.author := ParseReference{Resource}(jsn.vObj['author']);{q3}
end;

procedure TFHIRJsonComposer.ComposeFlag(json : TJSONWriter; name : string; elem : TFhirFlag; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFlagStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFlagStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(json, 'encounter', elem.encounter); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    ComposeReference{Resource}(json, 'author', elem.author); {a}
end;

{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
procedure TFHIRJsonParser.ParseGoalTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGoalTarget(jsn)); {2}
end;

function TFHIRJsonParser.ParseGoalTarget(jsn : TJsonObject) : TFhirGoalTarget;
begin
  result := TFhirGoalTarget.create;
  try
    ParseGoalTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGoalTargetProperties(jsn : TJsonObject; result : TFhirGoalTarget);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('measure') then
        result.measure := ParseCodeableConcept(jsn.vObj['measure']);{q3}
    if jsn.has('detailQuantity') {a4} then
      result.detail := ParseQuantity(jsn.vObj['detailQuantity']);
    if jsn.has('detailRange') {a4} then
      result.detail := ParseRange(jsn.vObj['detailRange']);
    if jsn.has('detailCodeableConcept') {a4} then
      result.detail := ParseCodeableConcept(jsn.vObj['detailCodeableConcept']);
    if jsn.has('dueDuration') {a4} then
      result.due := ParseDuration(jsn.vObj['dueDuration']);
    if jsn.has('dueDate') or jsn.has('_dueDate') then
      result.due := parseDate(jsn.node['dueDate'], jsn.vObj['_dueDate']);
end;

procedure TFHIRJsonComposer.ComposeGoalTarget(json : TJSONWriter; name : string; elem : TFhirGoalTarget; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'measure', elem.measure); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.detail is TFhirQuantity) then 
    ComposeQuantity(json, 'detailQuantity', TFhirQuantity(elem.detail)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.detail is TFhirRange) then 
    ComposeRange(json, 'detailRange', TFhirRange(elem.detail)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.detail is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'detailCodeableConcept', TFhirCodeableConcept(elem.detail)) ;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.due is TFhirDuration) then 
    ComposeDuration(json, 'dueDuration', TFhirDuration(elem.due)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.due is TFhirDate) then 
  begin
    ComposeDateValue(json, 'dueDate', TFhirDate(elem.due), false);
    ComposeDateProps(json, 'dueDate', TFhirDate(elem.due), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseGoal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGoal(jsn)); {2}
end;

function TFHIRJsonParser.ParseGoal(jsn : TJsonObject) : TFhirGoal;
begin
  result := TFhirGoal.create;
  try
    ParseGoalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGoalProperties(jsn : TJsonObject; result : TFhirGoal);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirGoalStatusEnum, SYSTEMS_TFhirGoalStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('priority') then
        result.priority := ParseCodeableConcept(jsn.vObj['priority']);{q3}
    if jsn.has('description') then
        result.description := ParseCodeableConcept(jsn.vObj['description']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('startCodeableConcept') {a4} then
      result.start := ParseCodeableConcept(jsn.vObj['startCodeableConcept']);
    if jsn.has('startDate') or jsn.has('_startDate') then
      result.start := parseDate(jsn.node['startDate'], jsn.vObj['_startDate']);
    if jsn.has('target') then
        result.target := ParseGoalTarget(jsn.vObj['target']);{q3}
    if jsn.has('statusDate') or jsn.has('_statusDate') then
        result.statusDateElement := parseDate(jsn.node['statusDate'], jsn.vObj['_statusDate']);{q}
    if jsn.has('statusReason') or jsn.has('_statusReason') then
        result.statusReasonElement := parseString(jsn.node['statusReason'], jsn.vObj['_statusReason']);{q}
    if jsn.has('expressedBy') then
        result.expressedBy := ParseReference{Resource}(jsn.vObj['expressedBy']);{q3}
    if jsn.has('addresses') then
      iterateArray(jsn.vArr['addresses'], result.addressesList, parseReference{Resource});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('outcomeCode') then
      iterateArray(jsn.vArr['outcomeCode'], result.outcomeCodeList, parseCodeableConcept);
    if jsn.has('outcomeReference') then
      iterateArray(jsn.vArr['outcomeReference'], result.outcomeReferenceList, parseReference{TFhirObservation});
end;

procedure TFHIRJsonComposer.ComposeGoal(json : TJSONWriter; name : string; elem : TFhirGoal; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirGoalStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirGoalStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeCodeableConcept(json, 'priority', elem.priority); {a}
  ComposeCodeableConcept(json, 'description', elem.description); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.start is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'startCodeableConcept', TFhirCodeableConcept(elem.start)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.start is TFhirDate) then 
  begin
    ComposeDateValue(json, 'startDate', TFhirDate(elem.start), false);
    ComposeDateProps(json, 'startDate', TFhirDate(elem.start), false);
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('target') then
    ComposeGoalTarget(json, 'target', elem.target); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('statusDate') then
    ComposeDateValue(json, 'statusDate', elem.statusDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('statusDate') then
    ComposeDateProps(json, 'statusDate', elem.statusDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('statusReason') then
    ComposeStringValue(json, 'statusReason', elem.statusReasonElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('statusReason') then
    ComposeStringProps(json, 'statusReason', elem.statusReasonElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('expressedBy') then
    ComposeReference{Resource}(json, 'expressedBy', elem.expressedBy); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('addresses') and (elem.addressesList.Count > 0) then
  begin
    json.valueArray('addresses');
    for i := 0 to elem.addressesList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.addressesList[i]); {z - Reference(Condition|Observation|MedicationStatement|NutritionOrder|ProcedureRequest|RiskAssessment)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('outcomeCode') and (elem.outcomeCodeList.Count > 0) then
  begin
    json.valueArray('outcomeCode');
    for i := 0 to elem.outcomeCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.outcomeCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('outcomeReference') and (elem.outcomeReferenceList.Count > 0) then
  begin
    json.valueArray('outcomeReference');
    for i := 0 to elem.outcomeReferenceList.Count - 1 do
      ComposeReference{TFhirObservation}(json, '', elem.outcomeReferenceList[i]); {z - Reference(Observation)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
procedure TFHIRJsonParser.ParseGraphDefinitionLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGraphDefinitionLink(jsn)); {2}
end;

function TFHIRJsonParser.ParseGraphDefinitionLink(jsn : TJsonObject) : TFhirGraphDefinitionLink;
begin
  result := TFhirGraphDefinitionLink.create;
  try
    ParseGraphDefinitionLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkProperties(jsn : TJsonObject; result : TFhirGraphDefinitionLink);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);{q}
    if jsn.has('sliceName') or jsn.has('_sliceName') then
        result.sliceNameElement := parseString(jsn.node['sliceName'], jsn.vObj['_sliceName']);{q}
    if jsn.has('min') or jsn.has('_min') then
        result.minElement := parseInteger(jsn.node['min'], jsn.vObj['_min']);{q}
    if jsn.has('max') or jsn.has('_max') then
        result.maxElement := parseString(jsn.node['max'], jsn.vObj['_max']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], result.targetList, parseGraphDefinitionLinkTarget);
end;

procedure TFHIRJsonComposer.ComposeGraphDefinitionLink(json : TJSONWriter; name : string; elem : TFhirGraphDefinitionLink; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'path', elem.pathElement, false);
  ComposeStringProps(json, 'path', elem.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'sliceName', elem.sliceNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'sliceName', elem.sliceNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'min', elem.minElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'min', elem.minElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'max', elem.maxElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'max', elem.maxElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (elem.targetList.Count > 0) then
  begin
    json.valueArray('target');
    for i := 0 to elem.targetList.Count - 1 do
      ComposeGraphDefinitionLinkTarget(json, '', elem.targetList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGraphDefinitionLinkTarget(jsn)); {2}
end;

function TFHIRJsonParser.ParseGraphDefinitionLinkTarget(jsn : TJsonObject) : TFhirGraphDefinitionLinkTarget;
begin
  result := TFhirGraphDefinitionLinkTarget.create;
  try
    ParseGraphDefinitionLinkTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkTargetProperties(jsn : TJsonObject; result : TFhirGraphDefinitionLinkTarget);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') or jsn.has('_profile') then
        result.profileElement := parseUri(jsn.node['profile'], jsn.vObj['_profile']);{q}
    if jsn.has('compartment') then
      iterateArray(jsn.vArr['compartment'], result.compartmentList, parseGraphDefinitionLinkTargetCompartment);
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], result.link_List, parseGraphDefinitionLink);
end;

procedure TFHIRJsonComposer.ComposeGraphDefinitionLinkTarget(json : TJSONWriter; name : string; elem : TFhirGraphDefinitionLinkTarget; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'profile', elem.profileElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'profile', elem.profileElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.compartmentList.Count > 0) then
  begin
    json.valueArray('compartment');
    for i := 0 to elem.compartmentList.Count - 1 do
      ComposeGraphDefinitionLinkTargetCompartment(json, '', elem.compartmentList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.link_List.Count > 0) then
  begin
    json.valueArray('link');
    for i := 0 to elem.link_List.Count - 1 do
      ComposeGraphDefinitionLink(json, '', elem.link_List[i]); {z - @GraphDefinition.link}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkTargetCompartment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGraphDefinitionLinkTargetCompartment(jsn)); {2}
end;

function TFHIRJsonParser.ParseGraphDefinitionLinkTargetCompartment(jsn : TJsonObject) : TFhirGraphDefinitionLinkTargetCompartment;
begin
  result := TFhirGraphDefinitionLinkTargetCompartment.create;
  try
    ParseGraphDefinitionLinkTargetCompartmentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionLinkTargetCompartmentProperties(jsn : TJsonObject; result : TFhirGraphDefinitionLinkTargetCompartment);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirCompartmentTypeEnum, SYSTEMS_TFhirCompartmentTypeEnum);
    if jsn.has('rule') or jsn.has('_rule')  then
      result.ruleElement := parseEnum(jsn.path+'/rule', jsn.node['rule'], jsn.vObj['_rule'], CODES_TFhirGraphCompartmentRuleEnum, SYSTEMS_TFhirGraphCompartmentRuleEnum);
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
end;

procedure TFHIRJsonComposer.ComposeGraphDefinitionLinkTargetCompartment(json : TJSONWriter; name : string; elem : TFhirGraphDefinitionLinkTargetCompartment; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirCompartmentTypeEnum, false);
  ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirCompartmentTypeEnum, false);
  ComposeEnumValue(json, 'rule', elem.RuleElement, CODES_TFhirGraphCompartmentRuleEnum, false);
  ComposeEnumProps(json, 'rule', elem.RuleElement, CODES_TFhirGraphCompartmentRuleEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseGraphDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGraphDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseGraphDefinition(jsn : TJsonObject) : TFhirGraphDefinition;
begin
  result := TFhirGraphDefinition.create;
  try
    ParseGraphDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGraphDefinitionProperties(jsn : TJsonObject; result : TFhirGraphDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('start') or jsn.has('_start')  then
      result.startElement := parseEnum(jsn.path+'/start', jsn.node['start'], jsn.vObj['_start'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') or jsn.has('_profile') then
        result.profileElement := parseUri(jsn.node['profile'], jsn.vObj['_profile']);{q}
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], result.link_List, parseGraphDefinitionLink);
end;

procedure TFHIRJsonComposer.ComposeGraphDefinition(json : TJSONWriter; name : string; elem : TFhirGraphDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  ComposeEnumValue(json, 'start', elem.StartElement, CODES_TFhirResourceTypesEnum, false);
  ComposeEnumProps(json, 'start', elem.StartElement, CODES_TFhirResourceTypesEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('profile') then
    ComposeUriValue(json, 'profile', elem.profileElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('profile') then
    ComposeUriProps(json, 'profile', elem.profileElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('link_') and (elem.link_List.Count > 0) then
  begin
    json.valueArray('link');
    for i := 0 to elem.link_List.Count - 1 do
      ComposeGraphDefinitionLink(json, '', elem.link_List[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
procedure TFHIRJsonParser.ParseGroupCharacteristic(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGroupCharacteristic(jsn)); {2}
end;

function TFHIRJsonParser.ParseGroupCharacteristic(jsn : TJsonObject) : TFhirGroupCharacteristic;
begin
  result := TFhirGroupCharacteristic.create;
  try
    ParseGroupCharacteristicProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGroupCharacteristicProperties(jsn : TJsonObject; result : TFhirGroupCharacteristic);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('exclude') or jsn.has('_exclude') then
        result.excludeElement := parseBoolean(jsn.node['exclude'], jsn.vObj['_exclude']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeGroupCharacteristic(json : TJSONWriter; name : string; elem : TFhirGroupCharacteristic; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end;
  ComposeBooleanValue(json, 'exclude', elem.excludeElement, false);
  ComposeBooleanProps(json, 'exclude', elem.excludeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseGroupMember(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGroupMember(jsn)); {2}
end;

function TFHIRJsonParser.ParseGroupMember(jsn : TJsonObject) : TFhirGroupMember;
begin
  result := TFhirGroupMember.create;
  try
    ParseGroupMemberProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGroupMemberProperties(jsn : TJsonObject; result : TFhirGroupMember);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('entity') then
        result.entity := ParseReference{Resource}(jsn.vObj['entity']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('inactive') or jsn.has('_inactive') then
        result.inactiveElement := parseBoolean(jsn.node['inactive'], jsn.vObj['_inactive']);{q}
end;

procedure TFHIRJsonComposer.ComposeGroupMember(json : TJSONWriter; name : string; elem : TFhirGroupMember; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'entity', elem.entity); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.inactive <> false)) then
    ComposeBooleanValue(json, 'inactive', elem.inactiveElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.inactive <> false)) then
    ComposeBooleanProps(json, 'inactive', elem.inactiveElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGroup(jsn)); {2}
end;

function TFHIRJsonParser.ParseGroup(jsn : TJsonObject) : TFhirGroup;
begin
  result := TFhirGroup.create;
  try
    ParseGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGroupProperties(jsn : TJsonObject; result : TFhirGroup);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirGroupTypeEnum, SYSTEMS_TFhirGroupTypeEnum);
    if jsn.has('actual') or jsn.has('_actual') then
        result.actualElement := parseBoolean(jsn.node['actual'], jsn.vObj['_actual']);{q}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('quantity') or jsn.has('_quantity') then
        result.quantityElement := parseUnsignedInt(jsn.node['quantity'], jsn.vObj['_quantity']);{q}
    if jsn.has('characteristic') then
      iterateArray(jsn.vArr['characteristic'], result.characteristicList, parseGroupCharacteristic);
    if jsn.has('member') then
      iterateArray(jsn.vArr['member'], result.memberList, parseGroupMember);
end;

procedure TFHIRJsonComposer.ComposeGroup(json : TJSONWriter; name : string; elem : TFhirGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirGroupTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirGroupTypeEnum, false);
  ComposeBooleanValue(json, 'actual', elem.actualElement, false);
  ComposeBooleanProps(json, 'actual', elem.actualElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('quantity') then
    ComposeUnsignedIntValue(json, 'quantity', elem.quantityElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('quantity') then
    ComposeUnsignedIntProps(json, 'quantity', elem.quantityElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('characteristic') and (elem.characteristicList.Count > 0) then
  begin
    json.valueArray('characteristic');
    for i := 0 to elem.characteristicList.Count - 1 do
      ComposeGroupCharacteristic(json, '', elem.characteristicList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('member') and (elem.memberList.Count > 0) then
  begin
    json.valueArray('member');
    for i := 0 to elem.memberList.Count - 1 do
      ComposeGroupMember(json, '', elem.memberList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
procedure TFHIRJsonParser.ParseGuidanceResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseGuidanceResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseGuidanceResponse(jsn : TJsonObject) : TFhirGuidanceResponse;
begin
  result := TFhirGuidanceResponse.create;
  try
    ParseGuidanceResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseGuidanceResponseProperties(jsn : TJsonObject; result : TFhirGuidanceResponse);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('requestId') or jsn.has('_requestId') then
        result.requestIdElement := parseId(jsn.node['requestId'], jsn.vObj['_requestId']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('module') then
        result.module := ParseReference{TFhirServiceDefinition}(jsn.vObj['module']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirGuidanceResponseStatusEnum, SYSTEMS_TFhirGuidanceResponseStatusEnum);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
        result.occurrenceDateTimeElement := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);{q}
    if jsn.has('performer') then
        result.performer := ParseReference{TFhirDevice}(jsn.vObj['performer']);{q3}
    if jsn.has('reasonCodeableConcept') {a4} then
      result.reason := ParseCodeableConcept(jsn.vObj['reasonCodeableConcept']);
    if jsn.has('reasonReference') {a3} then
      result.reason := ParseReference(jsn.vObj['reasonReference']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('evaluationMessage') then
      iterateArray(jsn.vArr['evaluationMessage'], result.evaluationMessageList, parseReference{TFhirOperationOutcome});
    if jsn.has('outputParameters') then
        result.outputParameters := ParseReference{TFhirParameters}(jsn.vObj['outputParameters']);{q3}
    if jsn.has('result') then
        result.result := ParseReference{Resource}(jsn.vObj['result']);{q3}
    if jsn.has('dataRequirement') then
      iterateArray(jsn.vArr['dataRequirement'], result.dataRequirementList, parseDataRequirement);
end;

procedure TFHIRJsonComposer.ComposeGuidanceResponse(json : TJSONWriter; name : string; elem : TFhirGuidanceResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requestId') then
    ComposeIdValue(json, 'requestId', elem.requestIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requestId') then
    ComposeIdProps(json, 'requestId', elem.requestIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  ComposeReference{TFhirServiceDefinition}(json, 'module', elem.module); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirGuidanceResponseStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirGuidanceResponseStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('occurrenceDateTime') then
    ComposeDateTimeValue(json, 'occurrenceDateTime', elem.occurrenceDateTimeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('occurrenceDateTime') then
    ComposeDateTimeProps(json, 'occurrenceDateTime', elem.occurrenceDateTimeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('performer') then
    ComposeReference{TFhirDevice}(json, 'performer', elem.performer); {a}
  if (SummaryOption in [soFull, soData]) and (elem.reason is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'reasonCodeableConcept', TFhirCodeableConcept(elem.reason)) 
  else if (SummaryOption in [soFull, soData]) and (elem.reason is TFhirReference) then
    ComposeReference(json, 'reasonReference', TFhirReference(elem.reason));
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('evaluationMessage') and (elem.evaluationMessageList.Count > 0) then
  begin
    json.valueArray('evaluationMessage');
    for i := 0 to elem.evaluationMessageList.Count - 1 do
      ComposeReference{TFhirOperationOutcome}(json, '', elem.evaluationMessageList[i]); {z - Reference(OperationOutcome)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('outputParameters') then
    ComposeReference{TFhirParameters}(json, 'outputParameters', elem.outputParameters); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('result') then
    ComposeReference{Resource}(json, 'result', elem.result); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('dataRequirement') and (elem.dataRequirementList.Count > 0) then
  begin
    json.valueArray('dataRequirement');
    for i := 0 to elem.dataRequirementList.Count - 1 do
      ComposeDataRequirement(json, '', elem.dataRequirementList[i]); {z - DataRequirement}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
procedure TFHIRJsonParser.ParseHealthcareServiceAvailableTime(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseHealthcareServiceAvailableTime(jsn)); {2}
end;

function TFHIRJsonParser.ParseHealthcareServiceAvailableTime(jsn : TJsonObject) : TFhirHealthcareServiceAvailableTime;
begin
  result := TFhirHealthcareServiceAvailableTime.create;
  try
    ParseHealthcareServiceAvailableTimeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseHealthcareServiceAvailableTimeProperties(jsn : TJsonObject; result : TFhirHealthcareServiceAvailableTime);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('daysOfWeek') or jsn.has('_daysOfWeek') then
      iterateEnumArray(jsn.vArr['daysOfWeek'], jsn.vArr['_daysOfWeek'], jsn.path+'/daysOfWeek', result.daysOfWeekList, parseEnum, CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum);
    if jsn.has('allDay') or jsn.has('_allDay') then
        result.allDayElement := parseBoolean(jsn.node['allDay'], jsn.vObj['_allDay']);{q}
    if jsn.has('availableStartTime') or jsn.has('_availableStartTime') then
        result.availableStartTimeElement := parseTime(jsn.node['availableStartTime'], jsn.vObj['_availableStartTime']);{q}
    if jsn.has('availableEndTime') or jsn.has('_availableEndTime') then
        result.availableEndTimeElement := parseTime(jsn.node['availableEndTime'], jsn.vObj['_availableEndTime']);{q}
end;

procedure TFHIRJsonComposer.ComposeHealthcareServiceAvailableTime(json : TJSONWriter; name : string; elem : TFhirHealthcareServiceAvailableTime; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.daysOfWeekList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.daysOfWeekList.Count - 1 do
    begin
      val := val or (elem.daysOfWeekList[i].hasPrimitiveValue);
      ext := ext or ((elem.daysOfWeekList[i].id <> '') or (elem.daysOfWeekList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('daysOfWeek');
      for i := 0 to elem.daysOfWeekList.Count - 1 do
        ComposeEnumValue(json, '', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_daysOfWeek');
      for i := 0 to elem.daysOfWeekList.Count - 1 do
        ComposeEnumProps(json, '', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'allDay', elem.allDayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'allDay', elem.allDayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'availableStartTime', elem.availableStartTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'availableStartTime', elem.availableStartTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'availableEndTime', elem.availableEndTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'availableEndTime', elem.availableEndTimeElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseHealthcareServiceNotAvailable(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseHealthcareServiceNotAvailable(jsn)); {2}
end;

function TFHIRJsonParser.ParseHealthcareServiceNotAvailable(jsn : TJsonObject) : TFhirHealthcareServiceNotAvailable;
begin
  result := TFhirHealthcareServiceNotAvailable.create;
  try
    ParseHealthcareServiceNotAvailableProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseHealthcareServiceNotAvailableProperties(jsn : TJsonObject; result : TFhirHealthcareServiceNotAvailable);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('during') then
        result.during := ParsePeriod(jsn.vObj['during']);{q3}
end;

procedure TFHIRJsonComposer.ComposeHealthcareServiceNotAvailable(json : TJSONWriter; name : string; elem : TFhirHealthcareServiceNotAvailable; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'description', elem.descriptionElement, false);
  ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'during', elem.during); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseHealthcareService(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseHealthcareService(jsn)); {2}
end;

function TFHIRJsonParser.ParseHealthcareService(jsn : TJsonObject) : TFhirHealthcareService;
begin
  result := TFhirHealthcareService.create;
  try
    ParseHealthcareServiceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseHealthcareServiceProperties(jsn : TJsonObject; result : TFhirHealthcareService);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);{q}
    if jsn.has('providedBy') then
        result.providedBy := ParseReference{TFhirOrganization}(jsn.vObj['providedBy']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], result.specialtyList, parseCodeableConcept);
    if jsn.has('location') then
      iterateArray(jsn.vArr['location'], result.locationList, parseReference{TFhirLocation});
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('extraDetails') or jsn.has('_extraDetails') then
        result.extraDetailsElement := parseString(jsn.node['extraDetails'], jsn.vObj['_extraDetails']);{q}
    if jsn.has('photo') then
        result.photo := ParseAttachment(jsn.vObj['photo']);{q3}
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('coverageArea') then
      iterateArray(jsn.vArr['coverageArea'], result.coverageAreaList, parseReference{TFhirLocation});
    if jsn.has('serviceProvisionCode') then
      iterateArray(jsn.vArr['serviceProvisionCode'], result.serviceProvisionCodeList, parseCodeableConcept);
    if jsn.has('eligibility') then
        result.eligibility := ParseCodeableConcept(jsn.vObj['eligibility']);{q3}
    if jsn.has('eligibilityNote') or jsn.has('_eligibilityNote') then
        result.eligibilityNoteElement := parseString(jsn.node['eligibilityNote'], jsn.vObj['_eligibilityNote']);{q}
      if jsn.has('programName') or jsn.has('_programName') then
      iteratePrimitiveArray(jsn.vArr['programName'], jsn.vArr['_programName'], result.programNameList, parseString);
    if jsn.has('characteristic') then
      iterateArray(jsn.vArr['characteristic'], result.characteristicList, parseCodeableConcept);
    if jsn.has('referralMethod') then
      iterateArray(jsn.vArr['referralMethod'], result.referralMethodList, parseCodeableConcept);
    if jsn.has('appointmentRequired') or jsn.has('_appointmentRequired') then
        result.appointmentRequiredElement := parseBoolean(jsn.node['appointmentRequired'], jsn.vObj['_appointmentRequired']);{q}
    if jsn.has('availableTime') then
      iterateArray(jsn.vArr['availableTime'], result.availableTimeList, parseHealthcareServiceAvailableTime);
    if jsn.has('notAvailable') then
      iterateArray(jsn.vArr['notAvailable'], result.notAvailableList, parseHealthcareServiceNotAvailable);
    if jsn.has('availabilityExceptions') or jsn.has('_availabilityExceptions') then
        result.availabilityExceptionsElement := parseString(jsn.node['availabilityExceptions'], jsn.vObj['_availabilityExceptions']);{q}
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
end;

procedure TFHIRJsonComposer.ComposeHealthcareService(json : TJSONWriter; name : string; elem : TFhirHealthcareService; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('providedBy') then
    ComposeReference{TFhirOrganization}(json, 'providedBy', elem.providedBy); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specialty') and (elem.specialtyList.Count > 0) then
  begin
    json.valueArray('specialty');
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialtyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('location') and (elem.locationList.Count > 0) then
  begin
    json.valueArray('location');
    for i := 0 to elem.locationList.Count - 1 do
      ComposeReference{TFhirLocation}(json, '', elem.locationList[i]); {z - Reference(Location)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('comment') then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('comment') then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('extraDetails') then
    ComposeStringValue(json, 'extraDetails', elem.extraDetailsElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('extraDetails') then
    ComposeStringProps(json, 'extraDetails', elem.extraDetailsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('photo') then
    ComposeAttachment(json, 'photo', elem.photo); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('telecom') and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('coverageArea') and (elem.coverageAreaList.Count > 0) then
  begin
    json.valueArray('coverageArea');
    for i := 0 to elem.coverageAreaList.Count - 1 do
      ComposeReference{TFhirLocation}(json, '', elem.coverageAreaList[i]); {z - Reference(Location)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('serviceProvisionCode') and (elem.serviceProvisionCodeList.Count > 0) then
  begin
    json.valueArray('serviceProvisionCode');
    for i := 0 to elem.serviceProvisionCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.serviceProvisionCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('eligibility') then
    ComposeCodeableConcept(json, 'eligibility', elem.eligibility); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('eligibilityNote') then
    ComposeStringValue(json, 'eligibilityNote', elem.eligibilityNoteElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('eligibilityNote') then
    ComposeStringProps(json, 'eligibilityNote', elem.eligibilityNoteElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('programName') and (elem.programNameList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.programNameList.Count - 1 do
    begin
      ext := ext or ((elem.programNameList[i].id <> '') or (elem.programNameList[i].hasExtensionList) {no-comments or (elem.programNameList[i].hasComments)});
      val := val or (elem.programNameList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('programName');
      for i := 0 to elem.programNameList.Count - 1 do
        ComposeStringValue(json, '',elem.programNameList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_programName');
      for i := 0 to elem.programNameList.Count - 1 do
        ComposeStringProps(json, '',elem.programNameList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('characteristic') and (elem.characteristicList.Count > 0) then
  begin
    json.valueArray('characteristic');
    for i := 0 to elem.characteristicList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.characteristicList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('referralMethod') and (elem.referralMethodList.Count > 0) then
  begin
    json.valueArray('referralMethod');
    for i := 0 to elem.referralMethodList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.referralMethodList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('appointmentRequired') then
    ComposeBooleanValue(json, 'appointmentRequired', elem.appointmentRequiredElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('appointmentRequired') then
    ComposeBooleanProps(json, 'appointmentRequired', elem.appointmentRequiredElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('availableTime') and (elem.availableTimeList.Count > 0) then
  begin
    json.valueArray('availableTime');
    for i := 0 to elem.availableTimeList.Count - 1 do
      ComposeHealthcareServiceAvailableTime(json, '', elem.availableTimeList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('notAvailable') and (elem.notAvailableList.Count > 0) then
  begin
    json.valueArray('notAvailable');
    for i := 0 to elem.notAvailableList.Count - 1 do
      ComposeHealthcareServiceNotAvailable(json, '', elem.notAvailableList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('availabilityExceptions') then
    ComposeStringValue(json, 'availabilityExceptions', elem.availabilityExceptionsElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('availabilityExceptions') then
    ComposeStringProps(json, 'availabilityExceptions', elem.availabilityExceptionsElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('endpoint') and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGMANIFEST}
procedure TFHIRJsonParser.ParseImagingManifestStudy(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImagingManifestStudy(jsn)); {2}
end;

function TFHIRJsonParser.ParseImagingManifestStudy(jsn : TJsonObject) : TFhirImagingManifestStudy;
begin
  result := TFhirImagingManifestStudy.create;
  try
    ParseImagingManifestStudyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImagingManifestStudyProperties(jsn : TJsonObject; result : TFhirImagingManifestStudy);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('uid') or jsn.has('_uid') then
        result.uidElement := parseOid(jsn.node['uid'], jsn.vObj['_uid']);{q}
    if jsn.has('imagingStudy') then
        result.imagingStudy := ParseReference{TFhirImagingStudy}(jsn.vObj['imagingStudy']);{q3}
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
    if jsn.has('series') then
      iterateArray(jsn.vArr['series'], result.seriesList, parseImagingManifestStudySeries);
end;

procedure TFHIRJsonComposer.ComposeImagingManifestStudy(json : TJSONWriter; name : string; elem : TFhirImagingManifestStudy; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeOidValue(json, 'uid', elem.uidElement, false);
  ComposeOidProps(json, 'uid', elem.uidElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirImagingStudy}(json, 'imagingStudy', elem.imagingStudy); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
  if (elem.seriesList.Count > 0) then
  begin
    json.valueArray('series');
    for i := 0 to elem.seriesList.Count - 1 do
      ComposeImagingManifestStudySeries(json, '', elem.seriesList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImagingManifestStudySeries(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImagingManifestStudySeries(jsn)); {2}
end;

function TFHIRJsonParser.ParseImagingManifestStudySeries(jsn : TJsonObject) : TFhirImagingManifestStudySeries;
begin
  result := TFhirImagingManifestStudySeries.create;
  try
    ParseImagingManifestStudySeriesProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImagingManifestStudySeriesProperties(jsn : TJsonObject; result : TFhirImagingManifestStudySeries);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('uid') or jsn.has('_uid') then
        result.uidElement := parseOid(jsn.node['uid'], jsn.vObj['_uid']);{q}
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
    if jsn.has('instance') then
      iterateArray(jsn.vArr['instance'], result.instanceList, parseImagingManifestStudySeriesInstance);
end;

procedure TFHIRJsonComposer.ComposeImagingManifestStudySeries(json : TJSONWriter; name : string; elem : TFhirImagingManifestStudySeries; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeOidValue(json, 'uid', elem.uidElement, false);
  ComposeOidProps(json, 'uid', elem.uidElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
  if (elem.instanceList.Count > 0) then
  begin
    json.valueArray('instance');
    for i := 0 to elem.instanceList.Count - 1 do
      ComposeImagingManifestStudySeriesInstance(json, '', elem.instanceList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImagingManifestStudySeriesInstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImagingManifestStudySeriesInstance(jsn)); {2}
end;

function TFHIRJsonParser.ParseImagingManifestStudySeriesInstance(jsn : TJsonObject) : TFhirImagingManifestStudySeriesInstance;
begin
  result := TFhirImagingManifestStudySeriesInstance.create;
  try
    ParseImagingManifestStudySeriesInstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImagingManifestStudySeriesInstanceProperties(jsn : TJsonObject; result : TFhirImagingManifestStudySeriesInstance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sopClass') or jsn.has('_sopClass') then
        result.sopClassElement := parseOid(jsn.node['sopClass'], jsn.vObj['_sopClass']);{q}
    if jsn.has('uid') or jsn.has('_uid') then
        result.uidElement := parseOid(jsn.node['uid'], jsn.vObj['_uid']);{q}
end;

procedure TFHIRJsonComposer.ComposeImagingManifestStudySeriesInstance(json : TJSONWriter; name : string; elem : TFhirImagingManifestStudySeriesInstance; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeOidValue(json, 'sopClass', elem.sopClassElement, false);
  ComposeOidProps(json, 'sopClass', elem.sopClassElement, false);
  ComposeOidValue(json, 'uid', elem.uidElement, false);
  ComposeOidProps(json, 'uid', elem.uidElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImagingManifest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImagingManifest(jsn)); {2}
end;

function TFHIRJsonParser.ParseImagingManifest(jsn : TJsonObject) : TFhirImagingManifest;
begin
  result := TFhirImagingManifest.create;
  try
    ParseImagingManifestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImagingManifestProperties(jsn : TJsonObject; result : TFhirImagingManifest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('authoringTime') or jsn.has('_authoringTime') then
        result.authoringTimeElement := parseDateTime(jsn.node['authoringTime'], jsn.vObj['_authoringTime']);{q}
    if jsn.has('author') then
        result.author := ParseReference{Resource}(jsn.vObj['author']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('study') then
      iterateArray(jsn.vArr['study'], result.studyList, parseImagingManifestStudy);
end;

procedure TFHIRJsonComposer.ComposeImagingManifest(json : TJSONWriter; name : string; elem : TFhirImagingManifest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoringTime') then
    ComposeDateTimeValue(json, 'authoringTime', elem.authoringTimeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoringTime') then
    ComposeDateTimeProps(json, 'authoringTime', elem.authoringTimeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    ComposeReference{Resource}(json, 'author', elem.author); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (elem.studyList.Count > 0) then
  begin
    json.valueArray('study');
    for i := 0 to elem.studyList.Count - 1 do
      ComposeImagingManifestStudy(json, '', elem.studyList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_IMAGINGMANIFEST}
{$IFDEF FHIR_IMAGINGSTUDY}
procedure TFHIRJsonParser.ParseImagingStudySeries(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImagingStudySeries(jsn)); {2}
end;

function TFHIRJsonParser.ParseImagingStudySeries(jsn : TJsonObject) : TFhirImagingStudySeries;
begin
  result := TFhirImagingStudySeries.create;
  try
    ParseImagingStudySeriesProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImagingStudySeriesProperties(jsn : TJsonObject; result : TFhirImagingStudySeries);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('uid') or jsn.has('_uid') then
        result.uidElement := parseOid(jsn.node['uid'], jsn.vObj['_uid']);{q}
    if jsn.has('number') or jsn.has('_number') then
        result.numberElement := parseUnsignedInt(jsn.node['number'], jsn.vObj['_number']);{q}
    if jsn.has('modality') then
        result.modality := ParseCoding(jsn.vObj['modality']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('numberOfInstances') or jsn.has('_numberOfInstances') then
        result.numberOfInstancesElement := parseUnsignedInt(jsn.node['numberOfInstances'], jsn.vObj['_numberOfInstances']);{q}
    if jsn.has('availability') or jsn.has('_availability')  then
      result.availabilityElement := parseEnum(jsn.path+'/availability', jsn.node['availability'], jsn.vObj['_availability'], CODES_TFhirInstanceAvailabilityEnum, SYSTEMS_TFhirInstanceAvailabilityEnum);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
    if jsn.has('bodySite') then
        result.bodySite := ParseCoding(jsn.vObj['bodySite']);{q3}
    if jsn.has('laterality') then
        result.laterality := ParseCoding(jsn.vObj['laterality']);{q3}
    if jsn.has('started') or jsn.has('_started') then
        result.startedElement := parseDateTime(jsn.node['started'], jsn.vObj['_started']);{q}
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], result.performerList, parseReference{TFhirPractitioner});
    if jsn.has('instance') then
      iterateArray(jsn.vArr['instance'], result.instanceList, parseImagingStudySeriesInstance);
end;

procedure TFHIRJsonComposer.ComposeImagingStudySeries(json : TJSONWriter; name : string; elem : TFhirImagingStudySeries; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeOidValue(json, 'uid', elem.uidElement, false);
  ComposeOidProps(json, 'uid', elem.uidElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'number', elem.numberElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'number', elem.numberElement, false);
  ComposeCoding(json, 'modality', elem.modality); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntValue(json, 'numberOfInstances', elem.numberOfInstancesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedIntProps(json, 'numberOfInstances', elem.numberOfInstancesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'availability', elem.AvailabilityElement, CODES_TFhirInstanceAvailabilityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumProps(json, 'availability', elem.AvailabilityElement, CODES_TFhirInstanceAvailabilityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'bodySite', elem.bodySite); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(json, 'laterality', elem.laterality); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'started', elem.startedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'started', elem.startedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.performerList.Count > 0) then
  begin
    json.valueArray('performer');
    for i := 0 to elem.performerList.Count - 1 do
      ComposeReference{TFhirPractitioner}(json, '', elem.performerList[i]); {z - Reference(Practitioner)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.instanceList.Count > 0) then
  begin
    json.valueArray('instance');
    for i := 0 to elem.instanceList.Count - 1 do
      ComposeImagingStudySeriesInstance(json, '', elem.instanceList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImagingStudySeriesInstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImagingStudySeriesInstance(jsn)); {2}
end;

function TFHIRJsonParser.ParseImagingStudySeriesInstance(jsn : TJsonObject) : TFhirImagingStudySeriesInstance;
begin
  result := TFhirImagingStudySeriesInstance.create;
  try
    ParseImagingStudySeriesInstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImagingStudySeriesInstanceProperties(jsn : TJsonObject; result : TFhirImagingStudySeriesInstance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('uid') or jsn.has('_uid') then
        result.uidElement := parseOid(jsn.node['uid'], jsn.vObj['_uid']);{q}
    if jsn.has('number') or jsn.has('_number') then
        result.numberElement := parseUnsignedInt(jsn.node['number'], jsn.vObj['_number']);{q}
    if jsn.has('sopClass') or jsn.has('_sopClass') then
        result.sopClassElement := parseOid(jsn.node['sopClass'], jsn.vObj['_sopClass']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
end;

procedure TFHIRJsonComposer.ComposeImagingStudySeriesInstance(json : TJSONWriter; name : string; elem : TFhirImagingStudySeriesInstance; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeOidValue(json, 'uid', elem.uidElement, false);
  ComposeOidProps(json, 'uid', elem.uidElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntValue(json, 'number', elem.numberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedIntProps(json, 'number', elem.numberElement, false);
  ComposeOidValue(json, 'sopClass', elem.sopClassElement, false);
  ComposeOidProps(json, 'sopClass', elem.sopClassElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImagingStudy(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImagingStudy(jsn)); {2}
end;

function TFHIRJsonParser.ParseImagingStudy(jsn : TJsonObject) : TFhirImagingStudy;
begin
  result := TFhirImagingStudy.create;
  try
    ParseImagingStudyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImagingStudyProperties(jsn : TJsonObject; result : TFhirImagingStudy);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('uid') or jsn.has('_uid') then
        result.uidElement := parseOid(jsn.node['uid'], jsn.vObj['_uid']);{q}
    if jsn.has('accession') then
        result.accession := ParseIdentifier(jsn.vObj['accession']);{q3}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('availability') or jsn.has('_availability')  then
      result.availabilityElement := parseEnum(jsn.path+'/availability', jsn.node['availability'], jsn.vObj['_availability'], CODES_TFhirInstanceAvailabilityEnum, SYSTEMS_TFhirInstanceAvailabilityEnum);
    if jsn.has('modalityList') then
      iterateArray(jsn.vArr['modalityList'], result.modalityListList, parseCoding);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('started') or jsn.has('_started') then
        result.startedElement := parseDateTime(jsn.node['started'], jsn.vObj['_started']);{q}
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('referrer') then
        result.referrer := ParseReference{TFhirPractitioner}(jsn.vObj['referrer']);{q3}
    if jsn.has('interpreter') then
      iterateArray(jsn.vArr['interpreter'], result.interpreterList, parseReference{TFhirPractitioner});
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
    if jsn.has('numberOfSeries') or jsn.has('_numberOfSeries') then
        result.numberOfSeriesElement := parseUnsignedInt(jsn.node['numberOfSeries'], jsn.vObj['_numberOfSeries']);{q}
    if jsn.has('numberOfInstances') or jsn.has('_numberOfInstances') then
        result.numberOfInstancesElement := parseUnsignedInt(jsn.node['numberOfInstances'], jsn.vObj['_numberOfInstances']);{q}
    if jsn.has('procedureReference') then
      iterateArray(jsn.vArr['procedureReference'], result.procedureReferenceList, parseReference{TFhirProcedure});
    if jsn.has('procedureCode') then
      iterateArray(jsn.vArr['procedureCode'], result.procedureCodeList, parseCodeableConcept);
    if jsn.has('reason') then
        result.reason := ParseCodeableConcept(jsn.vObj['reason']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('series') then
      iterateArray(jsn.vArr['series'], result.seriesList, parseImagingStudySeries);
end;

procedure TFHIRJsonComposer.ComposeImagingStudy(json : TJSONWriter; name : string; elem : TFhirImagingStudy; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  ComposeOidValue(json, 'uid', elem.uidElement, false);
  ComposeOidProps(json, 'uid', elem.uidElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('accession') then
    ComposeIdentifier(json, 'accession', elem.accession); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('availability') then
    ComposeEnumValue(json, 'availability', elem.AvailabilityElement, CODES_TFhirInstanceAvailabilityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('availability') then
    ComposeEnumProps(json, 'availability', elem.AvailabilityElement, CODES_TFhirInstanceAvailabilityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('modalityList') and (elem.modalityListList.Count > 0) then
  begin
    json.valueArray('modalityList');
    for i := 0 to elem.modalityListList.Count - 1 do
      ComposeCoding(json, '', elem.modalityListList[i]); {z - Coding}
    json.FinishArray;
  end;
  ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('started') then
    ComposeDateTimeValue(json, 'started', elem.startedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('started') then
    ComposeDateTimeProps(json, 'started', elem.startedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(ReferralRequest|CarePlan|ProcedureRequest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('referrer') then
    ComposeReference{TFhirPractitioner}(json, 'referrer', elem.referrer); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('interpreter') and (elem.interpreterList.Count > 0) then
  begin
    json.valueArray('interpreter');
    for i := 0 to elem.interpreterList.Count - 1 do
      ComposeReference{TFhirPractitioner}(json, '', elem.interpreterList[i]); {z - Reference(Practitioner)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('endpoint') and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('numberOfSeries') then
    ComposeUnsignedIntValue(json, 'numberOfSeries', elem.numberOfSeriesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('numberOfSeries') then
    ComposeUnsignedIntProps(json, 'numberOfSeries', elem.numberOfSeriesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('numberOfInstances') then
    ComposeUnsignedIntValue(json, 'numberOfInstances', elem.numberOfInstancesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('numberOfInstances') then
    ComposeUnsignedIntProps(json, 'numberOfInstances', elem.numberOfInstancesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('procedureReference') and (elem.procedureReferenceList.Count > 0) then
  begin
    json.valueArray('procedureReference');
    for i := 0 to elem.procedureReferenceList.Count - 1 do
      ComposeReference{TFhirProcedure}(json, '', elem.procedureReferenceList[i]); {z - Reference(Procedure)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('procedureCode') and (elem.procedureCodeList.Count > 0) then
  begin
    json.valueArray('procedureCode');
    for i := 0 to elem.procedureCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.procedureCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reason') then
    ComposeCodeableConcept(json, 'reason', elem.reason); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('series') and (elem.seriesList.Count > 0) then
  begin
    json.valueArray('series');
    for i := 0 to elem.seriesList.Count - 1 do
      ComposeImagingStudySeries(json, '', elem.seriesList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
procedure TFHIRJsonParser.ParseImmunizationPractitioner(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationPractitioner(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunizationPractitioner(jsn : TJsonObject) : TFhirImmunizationPractitioner;
begin
  result := TFhirImmunizationPractitioner.create;
  try
    ParseImmunizationPractitionerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationPractitionerProperties(jsn : TJsonObject; result : TFhirImmunizationPractitioner);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('actor') then
        result.actor := ParseReference{TFhirPractitioner}(jsn.vObj['actor']);{q3}
end;

procedure TFHIRJsonComposer.ComposeImmunizationPractitioner(json : TJSONWriter; name : string; elem : TFhirImmunizationPractitioner; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  ComposeReference{TFhirPractitioner}(json, 'actor', elem.actor); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImmunizationExplanation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationExplanation(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunizationExplanation(jsn : TJsonObject) : TFhirImmunizationExplanation;
begin
  result := TFhirImmunizationExplanation.create;
  try
    ParseImmunizationExplanationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationExplanationProperties(jsn : TJsonObject; result : TFhirImmunizationExplanation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], result.reasonList, parseCodeableConcept);
    if jsn.has('reasonNotGiven') then
      iterateArray(jsn.vArr['reasonNotGiven'], result.reasonNotGivenList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeImmunizationExplanation(json : TJSONWriter; name : string; elem : TFhirImmunizationExplanation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.reasonList.Count > 0) then
  begin
    json.valueArray('reason');
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.reasonNotGivenList.Count > 0) then
  begin
    json.valueArray('reasonNotGiven');
    for i := 0 to elem.reasonNotGivenList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonNotGivenList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImmunizationReaction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationReaction(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunizationReaction(jsn : TJsonObject) : TFhirImmunizationReaction;
begin
  result := TFhirImmunizationReaction.create;
  try
    ParseImmunizationReactionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationReactionProperties(jsn : TJsonObject; result : TFhirImmunizationReaction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('detail') then
        result.detail := ParseReference{TFhirObservation}(jsn.vObj['detail']);{q3}
    if jsn.has('reported') or jsn.has('_reported') then
        result.reportedElement := parseBoolean(jsn.node['reported'], jsn.vObj['_reported']);{q}
end;

procedure TFHIRJsonComposer.ComposeImmunizationReaction(json : TJSONWriter; name : string; elem : TFhirImmunizationReaction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirObservation}(json, 'detail', elem.detail); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'reported', elem.reportedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'reported', elem.reportedElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImmunizationVaccinationProtocol(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationVaccinationProtocol(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunizationVaccinationProtocol(jsn : TJsonObject) : TFhirImmunizationVaccinationProtocol;
begin
  result := TFhirImmunizationVaccinationProtocol.create;
  try
    ParseImmunizationVaccinationProtocolProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationVaccinationProtocolProperties(jsn : TJsonObject; result : TFhirImmunizationVaccinationProtocol);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('doseSequence') or jsn.has('_doseSequence') then
        result.doseSequenceElement := parsePositiveInt(jsn.node['doseSequence'], jsn.vObj['_doseSequence']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('authority') then
        result.authority := ParseReference{TFhirOrganization}(jsn.vObj['authority']);{q3}
    if jsn.has('series') or jsn.has('_series') then
        result.seriesElement := parseString(jsn.node['series'], jsn.vObj['_series']);{q}
    if jsn.has('seriesDoses') or jsn.has('_seriesDoses') then
        result.seriesDosesElement := parsePositiveInt(jsn.node['seriesDoses'], jsn.vObj['_seriesDoses']);{q}
    if jsn.has('targetDisease') then
      iterateArray(jsn.vArr['targetDisease'], result.targetDiseaseList, parseCodeableConcept);
    if jsn.has('doseStatus') then
        result.doseStatus := ParseCodeableConcept(jsn.vObj['doseStatus']);{q3}
    if jsn.has('doseStatusReason') then
        result.doseStatusReason := ParseCodeableConcept(jsn.vObj['doseStatusReason']);{q3}
end;

procedure TFHIRJsonComposer.ComposeImmunizationVaccinationProtocol(json : TJSONWriter; name : string; elem : TFhirImmunizationVaccinationProtocol; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'doseSequence', elem.doseSequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'doseSequence', elem.doseSequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'authority', elem.authority); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'series', elem.seriesElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'series', elem.seriesElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'seriesDoses', elem.seriesDosesElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'seriesDoses', elem.seriesDosesElement, false);
  if (elem.targetDiseaseList.Count > 0) then
  begin
    json.valueArray('targetDisease');
    for i := 0 to elem.targetDiseaseList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.targetDiseaseList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  ComposeCodeableConcept(json, 'doseStatus', elem.doseStatus); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'doseStatusReason', elem.doseStatusReason); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImmunization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunization(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunization(jsn : TJsonObject) : TFhirImmunization;
begin
  result := TFhirImmunization.create;
  try
    ParseImmunizationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationProperties(jsn : TJsonObject; result : TFhirImmunization);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirImmunizationStatusEnum, SYSTEMS_TFhirImmunizationStatusEnum);
    if jsn.has('notGiven') or jsn.has('_notGiven') then
        result.notGivenElement := parseBoolean(jsn.node['notGiven'], jsn.vObj['_notGiven']);{q}
    if jsn.has('vaccineCode') then
        result.vaccineCode := ParseCodeableConcept(jsn.vObj['vaccineCode']);{q3}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('encounter') then
        result.encounter := ParseReference{TFhirEncounter}(jsn.vObj['encounter']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('primarySource') or jsn.has('_primarySource') then
        result.primarySourceElement := parseBoolean(jsn.node['primarySource'], jsn.vObj['_primarySource']);{q}
    if jsn.has('reportOrigin') then
        result.reportOrigin := ParseCodeableConcept(jsn.vObj['reportOrigin']);{q3}
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('manufacturer') then
        result.manufacturer := ParseReference{TFhirOrganization}(jsn.vObj['manufacturer']);{q3}
    if jsn.has('lotNumber') or jsn.has('_lotNumber') then
        result.lotNumberElement := parseString(jsn.node['lotNumber'], jsn.vObj['_lotNumber']);{q}
    if jsn.has('expirationDate') or jsn.has('_expirationDate') then
        result.expirationDateElement := parseDate(jsn.node['expirationDate'], jsn.vObj['_expirationDate']);{q}
    if jsn.has('site') then
        result.site := ParseCodeableConcept(jsn.vObj['site']);{q3}
    if jsn.has('route') then
        result.route := ParseCodeableConcept(jsn.vObj['route']);{q3}
    if jsn.has('doseQuantity') then
        result.doseQuantity := ParseQuantity(jsn.vObj['doseQuantity']);{q3}
    if jsn.has('practitioner') then
      iterateArray(jsn.vArr['practitioner'], result.practitionerList, parseImmunizationPractitioner);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('explanation') then
        result.explanation := ParseImmunizationExplanation(jsn.vObj['explanation']);{q3}
    if jsn.has('reaction') then
      iterateArray(jsn.vArr['reaction'], result.reactionList, parseImmunizationReaction);
    if jsn.has('vaccinationProtocol') then
      iterateArray(jsn.vArr['vaccinationProtocol'], result.vaccinationProtocolList, parseImmunizationVaccinationProtocol);
end;

procedure TFHIRJsonComposer.ComposeImmunization(json : TJSONWriter; name : string; elem : TFhirImmunization; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirImmunizationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirImmunizationStatusEnum, false);
  ComposeBooleanValue(json, 'notGiven', elem.notGivenElement, false);
  ComposeBooleanProps(json, 'notGiven', elem.notGivenElement, false);
  ComposeCodeableConcept(json, 'vaccineCode', elem.vaccineCode); {a}
  ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(json, 'encounter', elem.encounter); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  ComposeBooleanValue(json, 'primarySource', elem.primarySourceElement, false);
  ComposeBooleanProps(json, 'primarySource', elem.primarySourceElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('reportOrigin') then
    ComposeCodeableConcept(json, 'reportOrigin', elem.reportOrigin); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('manufacturer') then
    ComposeReference{TFhirOrganization}(json, 'manufacturer', elem.manufacturer); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('lotNumber') then
    ComposeStringValue(json, 'lotNumber', elem.lotNumberElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lotNumber') then
    ComposeStringProps(json, 'lotNumber', elem.lotNumberElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('expirationDate') then
    ComposeDateValue(json, 'expirationDate', elem.expirationDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('expirationDate') then
    ComposeDateProps(json, 'expirationDate', elem.expirationDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('site') then
    ComposeCodeableConcept(json, 'site', elem.site); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('route') then
    ComposeCodeableConcept(json, 'route', elem.route); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('doseQuantity') then
    ComposeQuantity(json, 'doseQuantity', elem.doseQuantity); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('practitioner') and (elem.practitionerList.Count > 0) then
  begin
    json.valueArray('practitioner');
    for i := 0 to elem.practitionerList.Count - 1 do
      ComposeImmunizationPractitioner(json, '', elem.practitionerList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('explanation') then
    ComposeImmunizationExplanation(json, 'explanation', elem.explanation); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('reaction') and (elem.reactionList.Count > 0) then
  begin
    json.valueArray('reaction');
    for i := 0 to elem.reactionList.Count - 1 do
      ComposeImmunizationReaction(json, '', elem.reactionList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('vaccinationProtocol') and (elem.vaccinationProtocolList.Count > 0) then
  begin
    json.valueArray('vaccinationProtocol');
    for i := 0 to elem.vaccinationProtocolList.Count - 1 do
      ComposeImmunizationVaccinationProtocol(json, '', elem.vaccinationProtocolList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
procedure TFHIRJsonParser.ParseImmunizationRecommendationRecommendation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationRecommendationRecommendation(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunizationRecommendationRecommendation(jsn : TJsonObject) : TFhirImmunizationRecommendationRecommendation;
begin
  result := TFhirImmunizationRecommendationRecommendation.create;
  try
    ParseImmunizationRecommendationRecommendationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendationRecommendationProperties(jsn : TJsonObject; result : TFhirImmunizationRecommendationRecommendation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('vaccineCode') then
        result.vaccineCode := ParseCodeableConcept(jsn.vObj['vaccineCode']);{q3}
    if jsn.has('targetDisease') then
        result.targetDisease := ParseCodeableConcept(jsn.vObj['targetDisease']);{q3}
    if jsn.has('doseNumber') or jsn.has('_doseNumber') then
        result.doseNumberElement := parsePositiveInt(jsn.node['doseNumber'], jsn.vObj['_doseNumber']);{q}
    if jsn.has('forecastStatus') then
        result.forecastStatus := ParseCodeableConcept(jsn.vObj['forecastStatus']);{q3}
    if jsn.has('dateCriterion') then
      iterateArray(jsn.vArr['dateCriterion'], result.dateCriterionList, parseImmunizationRecommendationRecommendationDateCriterion);
    if jsn.has('protocol') then
        result.protocol := ParseImmunizationRecommendationRecommendationProtocol(jsn.vObj['protocol']);{q3}
    if jsn.has('supportingImmunization') then
      iterateArray(jsn.vArr['supportingImmunization'], result.supportingImmunizationList, parseReference{TFhirImmunization});
    if jsn.has('supportingPatientInformation') then
      iterateArray(jsn.vArr['supportingPatientInformation'], result.supportingPatientInformationList, parseReference{Resource});
end;

procedure TFHIRJsonComposer.ComposeImmunizationRecommendationRecommendation(json : TJSONWriter; name : string; elem : TFhirImmunizationRecommendationRecommendation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'vaccineCode', elem.vaccineCode); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'targetDisease', elem.targetDisease); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntValue(json, 'doseNumber', elem.doseNumberElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveIntProps(json, 'doseNumber', elem.doseNumberElement, false);
  ComposeCodeableConcept(json, 'forecastStatus', elem.forecastStatus); {a}
  if (SummaryOption in [soFull, soData]) and (elem.dateCriterionList.Count > 0) then
  begin
    json.valueArray('dateCriterion');
    for i := 0 to elem.dateCriterionList.Count - 1 do
      ComposeImmunizationRecommendationRecommendationDateCriterion(json, '', elem.dateCriterionList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeImmunizationRecommendationRecommendationProtocol(json, 'protocol', elem.protocol); {a}
  if (SummaryOption in [soFull, soData]) and (elem.supportingImmunizationList.Count > 0) then
  begin
    json.valueArray('supportingImmunization');
    for i := 0 to elem.supportingImmunizationList.Count - 1 do
      ComposeReference{TFhirImmunization}(json, '', elem.supportingImmunizationList[i]); {z - Reference(Immunization)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.supportingPatientInformationList.Count > 0) then
  begin
    json.valueArray('supportingPatientInformation');
    for i := 0 to elem.supportingPatientInformationList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.supportingPatientInformationList[i]); {z - Reference(Observation|AllergyIntolerance)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendationRecommendationDateCriterion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationRecommendationRecommendationDateCriterion(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunizationRecommendationRecommendationDateCriterion(jsn : TJsonObject) : TFhirImmunizationRecommendationRecommendationDateCriterion;
begin
  result := TFhirImmunizationRecommendationRecommendationDateCriterion.create;
  try
    ParseImmunizationRecommendationRecommendationDateCriterionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendationRecommendationDateCriterionProperties(jsn : TJsonObject; result : TFhirImmunizationRecommendationRecommendationDateCriterion);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseDateTime(jsn.node['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeImmunizationRecommendationRecommendationDateCriterion(json : TJSONWriter; name : string; elem : TFhirImmunizationRecommendationRecommendationDateCriterion; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  ComposeDateTimeValue(json, 'value', elem.valueElement, false);
  ComposeDateTimeProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendationRecommendationProtocol(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationRecommendationRecommendationProtocol(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunizationRecommendationRecommendationProtocol(jsn : TJsonObject) : TFhirImmunizationRecommendationRecommendationProtocol;
begin
  result := TFhirImmunizationRecommendationRecommendationProtocol.create;
  try
    ParseImmunizationRecommendationRecommendationProtocolProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendationRecommendationProtocolProperties(jsn : TJsonObject; result : TFhirImmunizationRecommendationRecommendationProtocol);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('doseSequence') or jsn.has('_doseSequence') then
        result.doseSequenceElement := parsePositiveInt(jsn.node['doseSequence'], jsn.vObj['_doseSequence']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('authority') then
        result.authority := ParseReference{TFhirOrganization}(jsn.vObj['authority']);{q3}
    if jsn.has('series') or jsn.has('_series') then
        result.seriesElement := parseString(jsn.node['series'], jsn.vObj['_series']);{q}
end;

procedure TFHIRJsonComposer.ComposeImmunizationRecommendationRecommendationProtocol(json : TJSONWriter; name : string; elem : TFhirImmunizationRecommendationRecommendationProtocol; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'doseSequence', elem.doseSequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'doseSequence', elem.doseSequenceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'authority', elem.authority); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'series', elem.seriesElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'series', elem.seriesElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImmunizationRecommendation(jsn)); {2}
end;

function TFHIRJsonParser.ParseImmunizationRecommendation(jsn : TJsonObject) : TFhirImmunizationRecommendation;
begin
  result := TFhirImmunizationRecommendation.create;
  try
    ParseImmunizationRecommendationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImmunizationRecommendationProperties(jsn : TJsonObject; result : TFhirImmunizationRecommendation);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('recommendation') then
      iterateArray(jsn.vArr['recommendation'], result.recommendationList, parseImmunizationRecommendationRecommendation);
end;

procedure TFHIRJsonComposer.ComposeImmunizationRecommendation(json : TJSONWriter; name : string; elem : TFhirImmunizationRecommendation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (elem.recommendationList.Count > 0) then
  begin
    json.valueArray('recommendation');
    for i := 0 to elem.recommendationList.Count - 1 do
      ComposeImmunizationRecommendationRecommendation(json, '', elem.recommendationList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
procedure TFHIRJsonParser.ParseImplementationGuideDependency(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideDependency(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideDependency(jsn : TJsonObject) : TFhirImplementationGuideDependency;
begin
  result := TFhirImplementationGuideDependency.create;
  try
    ParseImplementationGuideDependencyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideDependencyProperties(jsn : TJsonObject; result : TFhirImplementationGuideDependency);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirGuideDependencyTypeEnum, SYSTEMS_TFhirGuideDependencyTypeEnum);
    if jsn.has('uri') or jsn.has('_uri') then
        result.uriElement := parseUri(jsn.node['uri'], jsn.vObj['_uri']);{q}
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideDependency(json : TJSONWriter; name : string; elem : TFhirImplementationGuideDependency; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirGuideDependencyTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirGuideDependencyTypeEnum, false);
  ComposeUriValue(json, 'uri', elem.uriElement, false);
  ComposeUriProps(json, 'uri', elem.uriElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuidePackage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuidePackage(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuidePackage(jsn : TJsonObject) : TFhirImplementationGuidePackage;
begin
  result := TFhirImplementationGuidePackage.create;
  try
    ParseImplementationGuidePackageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuidePackageProperties(jsn : TJsonObject; result : TFhirImplementationGuidePackage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('resource') then
      iterateArray(jsn.vArr['resource'], result.resourceList, parseImplementationGuidePackageResource);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuidePackage(json : TJSONWriter; name : string; elem : TFhirImplementationGuidePackage; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (elem.resourceList.Count > 0) then
  begin
    json.valueArray('resource');
    for i := 0 to elem.resourceList.Count - 1 do
      ComposeImplementationGuidePackageResource(json, '', elem.resourceList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuidePackageResource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuidePackageResource(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuidePackageResource(jsn : TJsonObject) : TFhirImplementationGuidePackageResource;
begin
  result := TFhirImplementationGuidePackageResource.create;
  try
    ParseImplementationGuidePackageResourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuidePackageResourceProperties(jsn : TJsonObject; result : TFhirImplementationGuidePackageResource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('example') or jsn.has('_example') then
        result.exampleElement := parseBoolean(jsn.node['example'], jsn.vObj['_example']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('acronym') or jsn.has('_acronym') then
        result.acronymElement := parseString(jsn.node['acronym'], jsn.vObj['_acronym']);{q}
    if jsn.has('sourceReference') {a3} then
      result.source := ParseReference(jsn.vObj['sourceReference']);
    if jsn.has('sourceUri') or jsn.has('_sourceUri') then
      result.source := parseUri(jsn.node['sourceUri'], jsn.vObj['_sourceUri']);
    if jsn.has('exampleFor') then
        result.exampleFor := ParseReference{TFhirStructureDefinition}(jsn.vObj['exampleFor']);{q3}
end;

procedure TFHIRJsonComposer.ComposeImplementationGuidePackageResource(json : TJSONWriter; name : string; elem : TFhirImplementationGuidePackageResource; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeBooleanValue(json, 'example', elem.exampleElement, false);
  ComposeBooleanProps(json, 'example', elem.exampleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'acronym', elem.acronymElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'acronym', elem.acronymElement, false);
  if (elem.source is TFhirReference) then
    ComposeReference(json, 'sourceReference', TFhirReference(elem.source))
  else if (elem.source is TFhirUri) then 
  begin
    ComposeUriValue(json, 'sourceUri', TFhirUri(elem.source), false);
    ComposeUriProps(json, 'sourceUri', TFhirUri(elem.source), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'exampleFor', elem.exampleFor); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuideGlobal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuideGlobal(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuideGlobal(jsn : TJsonObject) : TFhirImplementationGuideGlobal;
begin
  result := TFhirImplementationGuideGlobal.create;
  try
    ParseImplementationGuideGlobalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideGlobalProperties(jsn : TJsonObject; result : TFhirImplementationGuideGlobal);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') then
        result.profile := ParseReference{TFhirStructureDefinition}(jsn.vObj['profile']);{q3}
end;

procedure TFHIRJsonComposer.ComposeImplementationGuideGlobal(json : TJSONWriter; name : string; elem : TFhirImplementationGuideGlobal; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum, false);
  ComposeReference{TFhirStructureDefinition}(json, 'profile', elem.profile); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuidePage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuidePage(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuidePage(jsn : TJsonObject) : TFhirImplementationGuidePage;
begin
  result := TFhirImplementationGuidePage.create;
  try
    ParseImplementationGuidePageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuidePageProperties(jsn : TJsonObject; result : TFhirImplementationGuidePage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('source') or jsn.has('_source') then
        result.sourceElement := parseUri(jsn.node['source'], jsn.vObj['_source']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirGuidePageKindEnum, SYSTEMS_TFhirGuidePageKindEnum);
    if jsn.has('type') or jsn.has('_type') then
      iterateEnumArray(jsn.vArr['type'], jsn.vArr['_type'], jsn.path+'/type', result.type_, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
      if jsn.has('package') or jsn.has('_package') then
      iteratePrimitiveArray(jsn.vArr['package'], jsn.vArr['_package'], result.packageList, parseString);
    if jsn.has('format') or jsn.has('_format') then
        result.formatElement := parseCode(jsn.node['format'], jsn.vObj['_format']);{q}
    if jsn.has('page') then
      iterateArray(jsn.vArr['page'], result.pageList, parseImplementationGuidePage);
end;

procedure TFHIRJsonComposer.ComposeImplementationGuidePage(json : TJSONWriter; name : string; elem : TFhirImplementationGuidePage; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeUriValue(json, 'source', elem.sourceElement, false);
  ComposeUriProps(json, 'source', elem.sourceElement, false);
  ComposeStringValue(json, 'title', elem.titleElement, false);
  ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirGuidePageKindEnum, false);
  ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirGuidePageKindEnum, false);
  if (SummaryOption in [soFull, soData]) and (elem.type_.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.type_.Count - 1 do
    begin
      val := val or (elem.type_[i].hasPrimitiveValue);
      ext := ext or ((elem.type_[i].id <> '') or (elem.type_[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('type');
      for i := 0 to elem.type_.Count - 1 do
        ComposeEnumValue(json, '', elem.type_[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_type');
      for i := 0 to elem.type_.Count - 1 do
        ComposeEnumProps(json, '', elem.type_[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.packageList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.packageList.Count - 1 do
    begin
      ext := ext or ((elem.packageList[i].id <> '') or (elem.packageList[i].hasExtensionList) {no-comments or (elem.packageList[i].hasComments)});
      val := val or (elem.packageList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('package');
      for i := 0 to elem.packageList.Count - 1 do
        ComposeStringValue(json, '',elem.packageList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_package');
      for i := 0 to elem.packageList.Count - 1 do
        ComposeStringProps(json, '',elem.packageList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'format', elem.formatElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'format', elem.formatElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.pageList.Count > 0) then
  begin
    json.valueArray('page');
    for i := 0 to elem.pageList.Count - 1 do
      ComposeImplementationGuidePage(json, '', elem.pageList[i]); {z - @ImplementationGuide.page}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseImplementationGuide(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseImplementationGuide(jsn)); {2}
end;

function TFHIRJsonParser.ParseImplementationGuide(jsn : TJsonObject) : TFhirImplementationGuide;
begin
  result := TFhirImplementationGuide.create;
  try
    ParseImplementationGuideProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseImplementationGuideProperties(jsn : TJsonObject; result : TFhirImplementationGuide);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('fhirVersion') or jsn.has('_fhirVersion') then
        result.fhirVersionElement := parseId(jsn.node['fhirVersion'], jsn.vObj['_fhirVersion']);{q}
    if jsn.has('dependency') then
      iterateArray(jsn.vArr['dependency'], result.dependencyList, parseImplementationGuideDependency);
    if jsn.has('package') then
      iterateArray(jsn.vArr['package'], result.packageList, parseImplementationGuidePackage);
    if jsn.has('global') then
      iterateArray(jsn.vArr['global'], result.globalList, parseImplementationGuideGlobal);
      if jsn.has('binary') or jsn.has('_binary') then
      iteratePrimitiveArray(jsn.vArr['binary'], jsn.vArr['_binary'], result.binaryList, parseUri);
    if jsn.has('page') then
        result.page := ParseImplementationGuidePage(jsn.vObj['page']);{q3}
end;

procedure TFHIRJsonComposer.ComposeImplementationGuide(json : TJSONWriter; name : string; elem : TFhirImplementationGuide; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  ComposeUriValue(json, 'url', elem.urlElement, false);
  ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('fhirVersion') then
    ComposeIdValue(json, 'fhirVersion', elem.fhirVersionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('fhirVersion') then
    ComposeIdProps(json, 'fhirVersion', elem.fhirVersionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dependency') and (elem.dependencyList.Count > 0) then
  begin
    json.valueArray('dependency');
    for i := 0 to elem.dependencyList.Count - 1 do
      ComposeImplementationGuideDependency(json, '', elem.dependencyList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('package') and (elem.packageList.Count > 0) then
  begin
    json.valueArray('package');
    for i := 0 to elem.packageList.Count - 1 do
      ComposeImplementationGuidePackage(json, '', elem.packageList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('global') and (elem.globalList.Count > 0) then
  begin
    json.valueArray('global');
    for i := 0 to elem.globalList.Count - 1 do
      ComposeImplementationGuideGlobal(json, '', elem.globalList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('binary') and (elem.binaryList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.binaryList.Count - 1 do
    begin
      ext := ext or ((elem.binaryList[i].id <> '') or (elem.binaryList[i].hasExtensionList) {no-comments or (elem.binaryList[i].hasComments)});
      val := val or (elem.binaryList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('binary');
      for i := 0 to elem.binaryList.Count - 1 do
        ComposeUriValue(json, '',elem.binaryList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_binary');
      for i := 0 to elem.binaryList.Count - 1 do
        ComposeUriProps(json, '',elem.binaryList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('page') then
    ComposeImplementationGuidePage(json, 'page', elem.page); {a}
end;

{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_LIBRARY}
procedure TFHIRJsonParser.ParseLibrary(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLibrary(jsn)); {2}
end;

function TFHIRJsonParser.ParseLibrary(jsn : TJsonObject) : TFhirLibrary;
begin
  result := TFhirLibrary.create;
  try
    ParseLibraryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLibraryProperties(jsn : TJsonObject; result : TFhirLibrary);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('usage') or jsn.has('_usage') then
        result.usageElement := parseString(jsn.node['usage'], jsn.vObj['_usage']);{q}
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        result.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);{q}
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        result.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);{q}
    if jsn.has('effectivePeriod') then
        result.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);{q3}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseCodeableConcept);
    if jsn.has('contributor') then
      iterateArray(jsn.vArr['contributor'], result.contributorList, parseContributor);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], result.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], result.parameterList, parseParameterDefinition);
    if jsn.has('dataRequirement') then
      iterateArray(jsn.vArr['dataRequirement'], result.dataRequirementList, parseDataRequirement);
    if jsn.has('content') then
      iterateArray(jsn.vArr['content'], result.contentList, parseAttachment);
end;

procedure TFHIRJsonComposer.ComposeLibrary(json : TJSONWriter; name : string; elem : TFhirLibrary; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeStringValue(json, 'usage', elem.usageElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeStringProps(json, 'usage', elem.usageElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDateValue(json, 'approvalDate', elem.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDateProps(json, 'approvalDate', elem.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDateValue(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDateProps(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(json, 'effectivePeriod', elem.effectivePeriod); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('topic') and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.topicList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('contributor') and (elem.contributorList.Count > 0) then
  begin
    json.valueArray('contributor');
    for i := 0 to elem.contributorList.Count - 1 do
      ComposeContributor(json, '', elem.contributorList[i]); {z - Contributor}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') and (elem.relatedArtifactList.Count > 0) then
  begin
    json.valueArray('relatedArtifact');
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.relatedArtifactList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('parameter') and (elem.parameterList.Count > 0) then
  begin
    json.valueArray('parameter');
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeParameterDefinition(json, '', elem.parameterList[i]); {z - ParameterDefinition}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('dataRequirement') and (elem.dataRequirementList.Count > 0) then
  begin
    json.valueArray('dataRequirement');
    for i := 0 to elem.dataRequirementList.Count - 1 do
      ComposeDataRequirement(json, '', elem.dataRequirementList[i]); {z - DataRequirement}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('content') and (elem.contentList.Count > 0) then
  begin
    json.valueArray('content');
    for i := 0 to elem.contentList.Count - 1 do
      ComposeAttachment(json, '', elem.contentList[i]); {z - Attachment}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
procedure TFHIRJsonParser.ParseLinkageItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLinkageItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseLinkageItem(jsn : TJsonObject) : TFhirLinkageItem;
begin
  result := TFhirLinkageItem.create;
  try
    ParseLinkageItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLinkageItemProperties(jsn : TJsonObject; result : TFhirLinkageItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirLinkageTypeEnum, SYSTEMS_TFhirLinkageTypeEnum);
    if jsn.has('resource') then
        result.resource := ParseReference(jsn.vObj['resource']);{q3}
end;

procedure TFHIRJsonComposer.ComposeLinkageItem(json : TJSONWriter; name : string; elem : TFhirLinkageItem; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirLinkageTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirLinkageTypeEnum, false);
  ComposeReference(json, 'resource', elem.resource); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseLinkage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLinkage(jsn)); {2}
end;

function TFHIRJsonParser.ParseLinkage(jsn : TJsonObject) : TFhirLinkage;
begin
  result := TFhirLinkage.create;
  try
    ParseLinkageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLinkageProperties(jsn : TJsonObject; result : TFhirLinkage);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);{q}
    if jsn.has('author') then
        result.author := ParseReference{Resource}(jsn.vObj['author']);{q3}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseLinkageItem);
end;

procedure TFHIRJsonComposer.ComposeLinkage(json : TJSONWriter; name : string; elem : TFhirLinkage; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    ComposeReference{Resource}(json, 'author', elem.author); {a}
  if (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeLinkageItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
procedure TFHIRJsonParser.ParseListEntry(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseListEntry(jsn)); {2}
end;

function TFHIRJsonParser.ParseListEntry(jsn : TJsonObject) : TFhirListEntry;
begin
  result := TFhirListEntry.create;
  try
    ParseListEntryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseListEntryProperties(jsn : TJsonObject; result : TFhirListEntry);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('flag') then
        result.flag := ParseCodeableConcept(jsn.vObj['flag']);{q3}
    if jsn.has('deleted') or jsn.has('_deleted') then
        result.deletedElement := parseBoolean(jsn.node['deleted'], jsn.vObj['_deleted']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('item') then
        result.item := ParseReference{TFhirReference}(jsn.vObj['item']);{q3}
end;

procedure TFHIRJsonComposer.ComposeListEntry(json : TJSONWriter; name : string; elem : TFhirListEntry; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'flag', elem.flag); {a}
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.deleted <> false)) then
    ComposeBooleanValue(json, 'deleted', elem.deletedElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.deleted <> false)) then
    ComposeBooleanProps(json, 'deleted', elem.deletedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  ComposeReference{TFhirReference}(json, 'item', elem.item); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseList(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseList(jsn)); {2}
end;

function TFHIRJsonParser.ParseList(jsn : TJsonObject) : TFhirList;
begin
  result := TFhirList.create;
  try
    ParseListProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseListProperties(jsn : TJsonObject; result : TFhirList);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirListStatusEnum, SYSTEMS_TFhirListStatusEnum);
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirListModeEnum, SYSTEMS_TFhirListModeEnum);
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('encounter') then
        result.encounter := ParseReference{TFhirEncounter}(jsn.vObj['encounter']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('source') then
        result.source := ParseReference{Resource}(jsn.vObj['source']);{q3}
    if jsn.has('orderedBy') then
        result.orderedBy := ParseCodeableConcept(jsn.vObj['orderedBy']);{q3}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('entry') then
      iterateArray(jsn.vArr['entry'], result.entryList, parseListEntry);
    if jsn.has('emptyReason') then
        result.emptyReason := ParseCodeableConcept(jsn.vObj['emptyReason']);{q3}
end;

procedure TFHIRJsonComposer.ComposeList(json : TJSONWriter; name : string; elem : TFhirList; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirListStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirListStatusEnum, false);
  ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirListModeEnum, false);
  ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirListModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(json, 'encounter', elem.encounter); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('source') then
    ComposeReference{Resource}(json, 'source', elem.source); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('orderedBy') then
    ComposeCodeableConcept(json, 'orderedBy', elem.orderedBy); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('entry') and (elem.entryList.Count > 0) then
  begin
    json.valueArray('entry');
    for i := 0 to elem.entryList.Count - 1 do
      ComposeListEntry(json, '', elem.entryList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('emptyReason') then
    ComposeCodeableConcept(json, 'emptyReason', elem.emptyReason); {a}
end;

{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
procedure TFHIRJsonParser.ParseLocationPosition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLocationPosition(jsn)); {2}
end;

function TFHIRJsonParser.ParseLocationPosition(jsn : TJsonObject) : TFhirLocationPosition;
begin
  result := TFhirLocationPosition.create;
  try
    ParseLocationPositionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLocationPositionProperties(jsn : TJsonObject; result : TFhirLocationPosition);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('longitude') or jsn.has('_longitude') then
        result.longitudeElement := parseDecimal(jsn.node['longitude'], jsn.vObj['_longitude']);{q}
    if jsn.has('latitude') or jsn.has('_latitude') then
        result.latitudeElement := parseDecimal(jsn.node['latitude'], jsn.vObj['_latitude']);{q}
    if jsn.has('altitude') or jsn.has('_altitude') then
        result.altitudeElement := parseDecimal(jsn.node['altitude'], jsn.vObj['_altitude']);{q}
end;

procedure TFHIRJsonComposer.ComposeLocationPosition(json : TJSONWriter; name : string; elem : TFhirLocationPosition; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeDecimalValue(json, 'longitude', elem.longitudeElement, false);
  ComposeDecimalProps(json, 'longitude', elem.longitudeElement, false);
  ComposeDecimalValue(json, 'latitude', elem.latitudeElement, false);
  ComposeDecimalProps(json, 'latitude', elem.latitudeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'altitude', elem.altitudeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'altitude', elem.altitudeElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseLocation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseLocation(jsn)); {2}
end;

function TFHIRJsonParser.ParseLocation(jsn : TJsonObject) : TFhirLocation;
begin
  result := TFhirLocation.create;
  try
    ParseLocationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseLocationProperties(jsn : TJsonObject; result : TFhirLocation);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirLocationStatusEnum, SYSTEMS_TFhirLocationStatusEnum);
    if jsn.has('operationalStatus') then
        result.operationalStatus := ParseCoding(jsn.vObj['operationalStatus']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
      if jsn.has('alias') or jsn.has('_alias') then
      iteratePrimitiveArray(jsn.vArr['alias'], jsn.vArr['_alias'], result.aliasList, parseString);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirLocationModeEnum, SYSTEMS_TFhirLocationModeEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('address') then
        result.address := ParseAddress(jsn.vObj['address']);{q3}
    if jsn.has('physicalType') then
        result.physicalType := ParseCodeableConcept(jsn.vObj['physicalType']);{q3}
    if jsn.has('position') then
        result.position := ParseLocationPosition(jsn.vObj['position']);{q3}
    if jsn.has('managingOrganization') then
        result.managingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['managingOrganization']);{q3}
    if jsn.has('partOf') then
        result.partOf := ParseReference{TFhirLocation}(jsn.vObj['partOf']);{q3}
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
end;

procedure TFHIRJsonComposer.ComposeLocation(json : TJSONWriter; name : string; elem : TFhirLocation; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirLocationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirLocationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('operationalStatus') then
    ComposeCoding(json, 'operationalStatus', elem.operationalStatus); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('alias') and (elem.aliasList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.aliasList.Count - 1 do
    begin
      ext := ext or ((elem.aliasList[i].id <> '') or (elem.aliasList[i].hasExtensionList) {no-comments or (elem.aliasList[i].hasComments)});
      val := val or (elem.aliasList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('alias');
      for i := 0 to elem.aliasList.Count - 1 do
        ComposeStringValue(json, '',elem.aliasList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_alias');
      for i := 0 to elem.aliasList.Count - 1 do
        ComposeStringProps(json, '',elem.aliasList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('mode') then
    ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirLocationModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('mode') then
    ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirLocationModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('telecom') and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('address') then
    ComposeAddress(json, 'address', elem.address); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('physicalType') then
    ComposeCodeableConcept(json, 'physicalType', elem.physicalType); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('position') then
    ComposeLocationPosition(json, 'position', elem.position); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('managingOrganization') then
    ComposeReference{TFhirOrganization}(json, 'managingOrganization', elem.managingOrganization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('partOf') then
    ComposeReference{TFhirLocation}(json, 'partOf', elem.partOf); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('endpoint') and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
procedure TFHIRJsonParser.ParseMeasureGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureGroup(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureGroup(jsn : TJsonObject) : TFhirMeasureGroup;
begin
  result := TFhirMeasureGroup.create;
  try
    ParseMeasureGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureGroupProperties(jsn : TJsonObject; result : TFhirMeasureGroup);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('population') then
      iterateArray(jsn.vArr['population'], result.populationList, parseMeasureGroupPopulation);
    if jsn.has('stratifier') then
      iterateArray(jsn.vArr['stratifier'], result.stratifierList, parseMeasureGroupStratifier);
end;

procedure TFHIRJsonComposer.ComposeMeasureGroup(json : TJSONWriter; name : string; elem : TFhirMeasureGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.populationList.Count > 0) then
  begin
    json.valueArray('population');
    for i := 0 to elem.populationList.Count - 1 do
      ComposeMeasureGroupPopulation(json, '', elem.populationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.stratifierList.Count > 0) then
  begin
    json.valueArray('stratifier');
    for i := 0 to elem.stratifierList.Count - 1 do
      ComposeMeasureGroupStratifier(json, '', elem.stratifierList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureGroupPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureGroupPopulation(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureGroupPopulation(jsn : TJsonObject) : TFhirMeasureGroupPopulation;
begin
  result := TFhirMeasureGroupPopulation.create;
  try
    ParseMeasureGroupPopulationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureGroupPopulationProperties(jsn : TJsonObject; result : TFhirMeasureGroupPopulation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('criteria') or jsn.has('_criteria') then
        result.criteriaElement := parseString(jsn.node['criteria'], jsn.vObj['_criteria']);{q}
end;

procedure TFHIRJsonComposer.ComposeMeasureGroupPopulation(json : TJSONWriter; name : string; elem : TFhirMeasureGroupPopulation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  ComposeStringValue(json, 'criteria', elem.criteriaElement, false);
  ComposeStringProps(json, 'criteria', elem.criteriaElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureGroupStratifier(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureGroupStratifier(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureGroupStratifier(jsn : TJsonObject) : TFhirMeasureGroupStratifier;
begin
  result := TFhirMeasureGroupStratifier.create;
  try
    ParseMeasureGroupStratifierProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureGroupStratifierProperties(jsn : TJsonObject; result : TFhirMeasureGroupStratifier);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('criteria') or jsn.has('_criteria') then
        result.criteriaElement := parseString(jsn.node['criteria'], jsn.vObj['_criteria']);{q}
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);{q}
end;

procedure TFHIRJsonComposer.ComposeMeasureGroupStratifier(json : TJSONWriter; name : string; elem : TFhirMeasureGroupStratifier; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'criteria', elem.criteriaElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'criteria', elem.criteriaElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureSupplementalData(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureSupplementalData(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureSupplementalData(jsn : TJsonObject) : TFhirMeasureSupplementalData;
begin
  result := TFhirMeasureSupplementalData.create;
  try
    ParseMeasureSupplementalDataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureSupplementalDataProperties(jsn : TJsonObject; result : TFhirMeasureSupplementalData);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('usage') then
      iterateArray(jsn.vArr['usage'], result.usageList, parseCodeableConcept);
    if jsn.has('criteria') or jsn.has('_criteria') then
        result.criteriaElement := parseString(jsn.node['criteria'], jsn.vObj['_criteria']);{q}
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);{q}
end;

procedure TFHIRJsonComposer.ComposeMeasureSupplementalData(json : TJSONWriter; name : string; elem : TFhirMeasureSupplementalData; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soData]) and (elem.usageList.Count > 0) then
  begin
    json.valueArray('usage');
    for i := 0 to elem.usageList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.usageList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'criteria', elem.criteriaElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'criteria', elem.criteriaElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasure(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasure(jsn : TJsonObject) : TFhirMeasure;
begin
  result := TFhirMeasure.create;
  try
    ParseMeasureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureProperties(jsn : TJsonObject; result : TFhirMeasure);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('usage') or jsn.has('_usage') then
        result.usageElement := parseString(jsn.node['usage'], jsn.vObj['_usage']);{q}
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        result.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);{q}
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        result.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);{q}
    if jsn.has('effectivePeriod') then
        result.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);{q3}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseCodeableConcept);
    if jsn.has('contributor') then
      iterateArray(jsn.vArr['contributor'], result.contributorList, parseContributor);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], result.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('library') then
      iterateArray(jsn.vArr['library'], result.library_List, parseReference{TFhirLibrary});
    if jsn.has('disclaimer') or jsn.has('_disclaimer') then
        result.disclaimerElement := parseMarkdown(jsn.node['disclaimer'], jsn.vObj['_disclaimer']);{q}
    if jsn.has('scoring') then
        result.scoring := ParseCodeableConcept(jsn.vObj['scoring']);{q3}
    if jsn.has('compositeScoring') then
        result.compositeScoring := ParseCodeableConcept(jsn.vObj['compositeScoring']);{q3}
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('riskAdjustment') or jsn.has('_riskAdjustment') then
        result.riskAdjustmentElement := parseString(jsn.node['riskAdjustment'], jsn.vObj['_riskAdjustment']);{q}
    if jsn.has('rateAggregation') or jsn.has('_rateAggregation') then
        result.rateAggregationElement := parseString(jsn.node['rateAggregation'], jsn.vObj['_rateAggregation']);{q}
    if jsn.has('rationale') or jsn.has('_rationale') then
        result.rationaleElement := parseMarkdown(jsn.node['rationale'], jsn.vObj['_rationale']);{q}
    if jsn.has('clinicalRecommendationStatement') or jsn.has('_clinicalRecommendationStatement') then
        result.clinicalRecommendationStatementElement := parseMarkdown(jsn.node['clinicalRecommendationStatement'], jsn.vObj['_clinicalRecommendationStatement']);{q}
    if jsn.has('improvementNotation') or jsn.has('_improvementNotation') then
        result.improvementNotationElement := parseString(jsn.node['improvementNotation'], jsn.vObj['_improvementNotation']);{q}
      if jsn.has('definition') or jsn.has('_definition') then
      iteratePrimitiveArray(jsn.vArr['definition'], jsn.vArr['_definition'], result.definitionList, parseMarkdown);
    if jsn.has('guidance') or jsn.has('_guidance') then
        result.guidanceElement := parseMarkdown(jsn.node['guidance'], jsn.vObj['_guidance']);{q}
    if jsn.has('set') or jsn.has('_set') then
        result.set_Element := parseString(jsn.node['set'], jsn.vObj['_set']);{q}
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], result.groupList, parseMeasureGroup);
    if jsn.has('supplementalData') then
      iterateArray(jsn.vArr['supplementalData'], result.supplementalDataList, parseMeasureSupplementalData);
end;

procedure TFHIRJsonComposer.ComposeMeasure(json : TJSONWriter; name : string; elem : TFhirMeasure; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeStringValue(json, 'usage', elem.usageElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeStringProps(json, 'usage', elem.usageElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDateValue(json, 'approvalDate', elem.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDateProps(json, 'approvalDate', elem.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDateValue(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDateProps(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(json, 'effectivePeriod', elem.effectivePeriod); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('topic') and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.topicList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('contributor') and (elem.contributorList.Count > 0) then
  begin
    json.valueArray('contributor');
    for i := 0 to elem.contributorList.Count - 1 do
      ComposeContributor(json, '', elem.contributorList[i]); {z - Contributor}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') and (elem.relatedArtifactList.Count > 0) then
  begin
    json.valueArray('relatedArtifact');
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.relatedArtifactList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('library_') and (elem.library_List.Count > 0) then
  begin
    json.valueArray('library');
    for i := 0 to elem.library_List.Count - 1 do
      ComposeReference{TFhirLibrary}(json, '', elem.library_List[i]); {z - Reference(Library)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('disclaimer') then
    ComposeMarkdownValue(json, 'disclaimer', elem.disclaimerElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('disclaimer') then
    ComposeMarkdownProps(json, 'disclaimer', elem.disclaimerElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('scoring') then
    ComposeCodeableConcept(json, 'scoring', elem.scoring); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('compositeScoring') then
    ComposeCodeableConcept(json, 'compositeScoring', elem.compositeScoring); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('riskAdjustment') then
    ComposeStringValue(json, 'riskAdjustment', elem.riskAdjustmentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('riskAdjustment') then
    ComposeStringProps(json, 'riskAdjustment', elem.riskAdjustmentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('rateAggregation') then
    ComposeStringValue(json, 'rateAggregation', elem.rateAggregationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('rateAggregation') then
    ComposeStringProps(json, 'rateAggregation', elem.rateAggregationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('rationale') then
    ComposeMarkdownValue(json, 'rationale', elem.rationaleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('rationale') then
    ComposeMarkdownProps(json, 'rationale', elem.rationaleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('clinicalRecommendationStatement') then
    ComposeMarkdownValue(json, 'clinicalRecommendationStatement', elem.clinicalRecommendationStatementElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('clinicalRecommendationStatement') then
    ComposeMarkdownProps(json, 'clinicalRecommendationStatement', elem.clinicalRecommendationStatementElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('improvementNotation') then
    ComposeStringValue(json, 'improvementNotation', elem.improvementNotationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('improvementNotation') then
    ComposeStringProps(json, 'improvementNotation', elem.improvementNotationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('definition') and (elem.definitionList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.definitionList.Count - 1 do
    begin
      ext := ext or ((elem.definitionList[i].id <> '') or (elem.definitionList[i].hasExtensionList) {no-comments or (elem.definitionList[i].hasComments)});
      val := val or (elem.definitionList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('definition');
      for i := 0 to elem.definitionList.Count - 1 do
        ComposeMarkdownValue(json, '',elem.definitionList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_definition');
      for i := 0 to elem.definitionList.Count - 1 do
        ComposeMarkdownProps(json, '',elem.definitionList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('guidance') then
    ComposeMarkdownValue(json, 'guidance', elem.guidanceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('guidance') then
    ComposeMarkdownProps(json, 'guidance', elem.guidanceElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('set_') then
    ComposeStringValue(json, 'set', elem.set_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('set_') then
    ComposeStringProps(json, 'set', elem.set_Element, false);
  if (SummaryOption in [soFull, soData]) and doCompose('group') and (elem.groupList.Count > 0) then
  begin
    json.valueArray('group');
    for i := 0 to elem.groupList.Count - 1 do
      ComposeMeasureGroup(json, '', elem.groupList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('supplementalData') and (elem.supplementalDataList.Count > 0) then
  begin
    json.valueArray('supplementalData');
    for i := 0 to elem.supplementalDataList.Count - 1 do
      ComposeMeasureSupplementalData(json, '', elem.supplementalDataList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
procedure TFHIRJsonParser.ParseMeasureReportGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroup(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureReportGroup(jsn : TJsonObject) : TFhirMeasureReportGroup;
begin
  result := TFhirMeasureReportGroup.create;
  try
    ParseMeasureReportGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupProperties(jsn : TJsonObject; result : TFhirMeasureReportGroup);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('population') then
      iterateArray(jsn.vArr['population'], result.populationList, parseMeasureReportGroupPopulation);
    if jsn.has('measureScore') or jsn.has('_measureScore') then
        result.measureScoreElement := parseDecimal(jsn.node['measureScore'], jsn.vObj['_measureScore']);{q}
    if jsn.has('stratifier') then
      iterateArray(jsn.vArr['stratifier'], result.stratifierList, parseMeasureReportGroupStratifier);
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroup(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soData]) and (elem.populationList.Count > 0) then
  begin
    json.valueArray('population');
    for i := 0 to elem.populationList.Count - 1 do
      ComposeMeasureReportGroupPopulation(json, '', elem.populationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'measureScore', elem.measureScoreElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'measureScore', elem.measureScoreElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.stratifierList.Count > 0) then
  begin
    json.valueArray('stratifier');
    for i := 0 to elem.stratifierList.Count - 1 do
      ComposeMeasureReportGroupStratifier(json, '', elem.stratifierList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroupPopulation(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureReportGroupPopulation(jsn : TJsonObject) : TFhirMeasureReportGroupPopulation;
begin
  result := TFhirMeasureReportGroupPopulation.create;
  try
    ParseMeasureReportGroupPopulationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupPopulationProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupPopulation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('count') or jsn.has('_count') then
        result.countElement := parseInteger(jsn.node['count'], jsn.vObj['_count']);{q}
    if jsn.has('patients') then
        result.patients := ParseReference{TFhirList}(jsn.vObj['patients']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroupPopulation(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupPopulation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'count', elem.countElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'count', elem.countElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirList}(json, 'patients', elem.patients); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifier(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroupStratifier(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureReportGroupStratifier(jsn : TJsonObject) : TFhirMeasureReportGroupStratifier;
begin
  result := TFhirMeasureReportGroupStratifier.create;
  try
    ParseMeasureReportGroupStratifierProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupStratifier);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('stratum') then
      iterateArray(jsn.vArr['stratum'], result.stratumList, parseMeasureReportGroupStratifierStratum);
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroupStratifier(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupStratifier; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soData]) and (elem.stratumList.Count > 0) then
  begin
    json.valueArray('stratum');
    for i := 0 to elem.stratumList.Count - 1 do
      ComposeMeasureReportGroupStratifierStratum(json, '', elem.stratumList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierStratum(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroupStratifierStratum(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureReportGroupStratifierStratum(jsn : TJsonObject) : TFhirMeasureReportGroupStratifierStratum;
begin
  result := TFhirMeasureReportGroupStratifierStratum.create;
  try
    ParseMeasureReportGroupStratifierStratumProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupStratifierStratum);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);{q}
    if jsn.has('population') then
      iterateArray(jsn.vArr['population'], result.populationList, parseMeasureReportGroupStratifierStratumPopulation);
    if jsn.has('measureScore') or jsn.has('_measureScore') then
        result.measureScoreElement := parseDecimal(jsn.node['measureScore'], jsn.vObj['_measureScore']);{q}
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroupStratifierStratum(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupStratifierStratum; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'value', elem.valueElement, false);
  ComposeStringProps(json, 'value', elem.valueElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.populationList.Count > 0) then
  begin
    json.valueArray('population');
    for i := 0 to elem.populationList.Count - 1 do
      ComposeMeasureReportGroupStratifierStratumPopulation(json, '', elem.populationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'measureScore', elem.measureScoreElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'measureScore', elem.measureScoreElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumPopulation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReportGroupStratifierStratumPopulation(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumPopulation(jsn : TJsonObject) : TFhirMeasureReportGroupStratifierStratumPopulation;
begin
  result := TFhirMeasureReportGroupStratifierStratumPopulation.create;
  try
    ParseMeasureReportGroupStratifierStratumPopulationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportGroupStratifierStratumPopulationProperties(jsn : TJsonObject; result : TFhirMeasureReportGroupStratifierStratumPopulation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('count') or jsn.has('_count') then
        result.countElement := parseInteger(jsn.node['count'], jsn.vObj['_count']);{q}
    if jsn.has('patients') then
        result.patients := ParseReference{TFhirList}(jsn.vObj['patients']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMeasureReportGroupStratifierStratumPopulation(json : TJSONWriter; name : string; elem : TFhirMeasureReportGroupStratifierStratumPopulation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'count', elem.countElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'count', elem.countElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirList}(json, 'patients', elem.patients); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMeasureReport(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMeasureReport(jsn)); {2}
end;

function TFHIRJsonParser.ParseMeasureReport(jsn : TJsonObject) : TFhirMeasureReport;
begin
  result := TFhirMeasureReport.create;
  try
    ParseMeasureReportProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMeasureReportProperties(jsn : TJsonObject; result : TFhirMeasureReport);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirMeasureReportStatusEnum, SYSTEMS_TFhirMeasureReportStatusEnum);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirMeasureReportTypeEnum, SYSTEMS_TFhirMeasureReportTypeEnum);
    if jsn.has('measure') then
        result.measure := ParseReference{TFhirMeasure}(jsn.vObj['measure']);{q3}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('reportingOrganization') then
        result.reportingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['reportingOrganization']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], result.groupList, parseMeasureReportGroup);
    if jsn.has('evaluatedResources') then
        result.evaluatedResources := ParseReference{TFhirBundle}(jsn.vObj['evaluatedResources']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMeasureReport(json : TJSONWriter; name : string; elem : TFhirMeasureReport; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirMeasureReportStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirMeasureReportStatusEnum, false);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirMeasureReportTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirMeasureReportTypeEnum, false);
  ComposeReference{TFhirMeasure}(json, 'measure', elem.measure); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reportingOrganization') then
    ComposeReference{TFhirOrganization}(json, 'reportingOrganization', elem.reportingOrganization); {a}
  ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('group') and (elem.groupList.Count > 0) then
  begin
    json.valueArray('group');
    for i := 0 to elem.groupList.Count - 1 do
      ComposeMeasureReportGroup(json, '', elem.groupList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('evaluatedResources') then
    ComposeReference{TFhirBundle}(json, 'evaluatedResources', elem.evaluatedResources); {a}
end;

{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
procedure TFHIRJsonParser.ParseMedia(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedia(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedia(jsn : TJsonObject) : TFhirMedia;
begin
  result := TFhirMedia.create;
  try
    ParseMediaProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMediaProperties(jsn : TJsonObject; result : TFhirMedia);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirProcedureRequest});
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirDigitalMediaTypeEnum, SYSTEMS_TFhirDigitalMediaTypeEnum);
    if jsn.has('subtype') then
        result.subtype := ParseCodeableConcept(jsn.vObj['subtype']);{q3}
    if jsn.has('view') then
        result.view := ParseCodeableConcept(jsn.vObj['view']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('operator') then
        result.operator := ParseReference{TFhirPractitioner}(jsn.vObj['operator']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('bodySite') then
        result.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);{q3}
    if jsn.has('device') then
        result.device := ParseReference{Resource}(jsn.vObj['device']);{q3}
    if jsn.has('height') or jsn.has('_height') then
        result.heightElement := parsePositiveInt(jsn.node['height'], jsn.vObj['_height']);{q}
    if jsn.has('width') or jsn.has('_width') then
        result.widthElement := parsePositiveInt(jsn.node['width'], jsn.vObj['_width']);{q}
    if jsn.has('frames') or jsn.has('_frames') then
        result.framesElement := parsePositiveInt(jsn.node['frames'], jsn.vObj['_frames']);{q}
    if jsn.has('duration') or jsn.has('_duration') then
        result.durationElement := parseUnsignedInt(jsn.node['duration'], jsn.vObj['_duration']);{q}
    if jsn.has('content') then
        result.content := ParseAttachment(jsn.vObj['content']);{q3}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeMedia(json : TJSONWriter; name : string; elem : TFhirMedia; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirProcedureRequest}(json, '', elem.basedOnList[i]); {z - Reference(ProcedureRequest)}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirDigitalMediaTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirDigitalMediaTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subtype') then
    ComposeCodeableConcept(json, 'subtype', elem.subtype); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('view') then
    ComposeCodeableConcept(json, 'view', elem.view); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('operator') then
    ComposeReference{TFhirPractitioner}(json, 'operator', elem.operator); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('bodySite') then
    ComposeCodeableConcept(json, 'bodySite', elem.bodySite); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('device') then
    ComposeReference{Resource}(json, 'device', elem.device); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('height') then
    ComposePositiveIntValue(json, 'height', elem.heightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('height') then
    ComposePositiveIntProps(json, 'height', elem.heightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('width') then
    ComposePositiveIntValue(json, 'width', elem.widthElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('width') then
    ComposePositiveIntProps(json, 'width', elem.widthElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.frames <> '1')) and doCompose('frames') then
    ComposePositiveIntValue(json, 'frames', elem.framesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.frames <> '1')) and doCompose('frames') then
    ComposePositiveIntProps(json, 'frames', elem.framesElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('duration') then
    ComposeUnsignedIntValue(json, 'duration', elem.durationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('duration') then
    ComposeUnsignedIntProps(json, 'duration', elem.durationElement, false);
  ComposeAttachment(json, 'content', elem.content); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
procedure TFHIRJsonParser.ParseMedicationIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationIngredient(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationIngredient(jsn : TJsonObject) : TFhirMedicationIngredient;
begin
  result := TFhirMedicationIngredient.create;
  try
    ParseMedicationIngredientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationIngredientProperties(jsn : TJsonObject; result : TFhirMedicationIngredient);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('itemCodeableConcept') {a4} then
      result.item := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
    if jsn.has('itemReference') {a3} then
      result.item := ParseReference(jsn.vObj['itemReference']);
    if jsn.has('isActive') or jsn.has('_isActive') then
        result.isActiveElement := parseBoolean(jsn.node['isActive'], jsn.vObj['_isActive']);{q}
    if jsn.has('amount') then
        result.amount := ParseRatio(jsn.vObj['amount']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicationIngredient(json : TJSONWriter; name : string; elem : TFhirMedicationIngredient; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.item is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'itemCodeableConcept', TFhirCodeableConcept(elem.item)) 
  else if (elem.item is TFhirReference) then
    ComposeReference(json, 'itemReference', TFhirReference(elem.item));
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'isActive', elem.isActiveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'isActive', elem.isActiveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeRatio(json, 'amount', elem.amount); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationPackage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationPackage(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationPackage(jsn : TJsonObject) : TFhirMedicationPackage;
begin
  result := TFhirMedicationPackage.create;
  try
    ParseMedicationPackageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationPackageProperties(jsn : TJsonObject; result : TFhirMedicationPackage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('container') then
        result.container := ParseCodeableConcept(jsn.vObj['container']);{q3}
    if jsn.has('content') then
      iterateArray(jsn.vArr['content'], result.contentList, parseMedicationPackageContent);
    if jsn.has('batch') then
      iterateArray(jsn.vArr['batch'], result.batchList, parseMedicationPackageBatch);
end;

procedure TFHIRJsonComposer.ComposeMedicationPackage(json : TJSONWriter; name : string; elem : TFhirMedicationPackage; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'container', elem.container); {a}
  if (SummaryOption in [soFull, soData]) and (elem.contentList.Count > 0) then
  begin
    json.valueArray('content');
    for i := 0 to elem.contentList.Count - 1 do
      ComposeMedicationPackageContent(json, '', elem.contentList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.batchList.Count > 0) then
  begin
    json.valueArray('batch');
    for i := 0 to elem.batchList.Count - 1 do
      ComposeMedicationPackageBatch(json, '', elem.batchList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationPackageContent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationPackageContent(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationPackageContent(jsn : TJsonObject) : TFhirMedicationPackageContent;
begin
  result := TFhirMedicationPackageContent.create;
  try
    ParseMedicationPackageContentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationPackageContentProperties(jsn : TJsonObject; result : TFhirMedicationPackageContent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('itemCodeableConcept') {a4} then
      result.item := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
    if jsn.has('itemReference') {a3} then
      result.item := ParseReference(jsn.vObj['itemReference']);
    if jsn.has('amount') then
        result.amount := ParseQuantity(jsn.vObj['amount']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicationPackageContent(json : TJSONWriter; name : string; elem : TFhirMedicationPackageContent; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.item is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'itemCodeableConcept', TFhirCodeableConcept(elem.item)) 
  else if (elem.item is TFhirReference) then
    ComposeReference(json, 'itemReference', TFhirReference(elem.item));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'amount', elem.amount); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationPackageBatch(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationPackageBatch(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationPackageBatch(jsn : TJsonObject) : TFhirMedicationPackageBatch;
begin
  result := TFhirMedicationPackageBatch.create;
  try
    ParseMedicationPackageBatchProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationPackageBatchProperties(jsn : TJsonObject; result : TFhirMedicationPackageBatch);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('lotNumber') or jsn.has('_lotNumber') then
        result.lotNumberElement := parseString(jsn.node['lotNumber'], jsn.vObj['_lotNumber']);{q}
    if jsn.has('expirationDate') or jsn.has('_expirationDate') then
        result.expirationDateElement := parseDateTime(jsn.node['expirationDate'], jsn.vObj['_expirationDate']);{q}
end;

procedure TFHIRJsonComposer.ComposeMedicationPackageBatch(json : TJSONWriter; name : string; elem : TFhirMedicationPackageBatch; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'lotNumber', elem.lotNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'lotNumber', elem.lotNumberElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeValue(json, 'expirationDate', elem.expirationDateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTimeProps(json, 'expirationDate', elem.expirationDateElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedication(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedication(jsn : TJsonObject) : TFhirMedication;
begin
  result := TFhirMedication.create;
  try
    ParseMedicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationProperties(jsn : TJsonObject; result : TFhirMedication);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirMedicationStatusEnum, SYSTEMS_TFhirMedicationStatusEnum);
    if jsn.has('isBrand') or jsn.has('_isBrand') then
        result.isBrandElement := parseBoolean(jsn.node['isBrand'], jsn.vObj['_isBrand']);{q}
    if jsn.has('isOverTheCounter') or jsn.has('_isOverTheCounter') then
        result.isOverTheCounterElement := parseBoolean(jsn.node['isOverTheCounter'], jsn.vObj['_isOverTheCounter']);{q}
    if jsn.has('manufacturer') then
        result.manufacturer := ParseReference{TFhirOrganization}(jsn.vObj['manufacturer']);{q3}
    if jsn.has('form') then
        result.form := ParseCodeableConcept(jsn.vObj['form']);{q3}
    if jsn.has('ingredient') then
      iterateArray(jsn.vArr['ingredient'], result.ingredientList, parseMedicationIngredient);
    if jsn.has('package') then
        result.package := ParseMedicationPackage(jsn.vObj['package']);{q3}
    if jsn.has('image') then
      iterateArray(jsn.vArr['image'], result.imageList, parseAttachment);
end;

procedure TFHIRJsonComposer.ComposeMedication(json : TJSONWriter; name : string; elem : TFhirMedication; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirMedicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirMedicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('isBrand') then
    ComposeBooleanValue(json, 'isBrand', elem.isBrandElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('isBrand') then
    ComposeBooleanProps(json, 'isBrand', elem.isBrandElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('isOverTheCounter') then
    ComposeBooleanValue(json, 'isOverTheCounter', elem.isOverTheCounterElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('isOverTheCounter') then
    ComposeBooleanProps(json, 'isOverTheCounter', elem.isOverTheCounterElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('manufacturer') then
    ComposeReference{TFhirOrganization}(json, 'manufacturer', elem.manufacturer); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('form') then
    ComposeCodeableConcept(json, 'form', elem.form); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('ingredient') and (elem.ingredientList.Count > 0) then
  begin
    json.valueArray('ingredient');
    for i := 0 to elem.ingredientList.Count - 1 do
      ComposeMedicationIngredient(json, '', elem.ingredientList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('package') then
    ComposeMedicationPackage(json, 'package', elem.package); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('image') and (elem.imageList.Count > 0) then
  begin
    json.valueArray('image');
    for i := 0 to elem.imageList.Count - 1 do
      ComposeAttachment(json, '', elem.imageList[i]); {z - Attachment}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
procedure TFHIRJsonParser.ParseMedicationAdministrationPerformer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationAdministrationPerformer(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationAdministrationPerformer(jsn : TJsonObject) : TFhirMedicationAdministrationPerformer;
begin
  result := TFhirMedicationAdministrationPerformer.create;
  try
    ParseMedicationAdministrationPerformerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationAdministrationPerformerProperties(jsn : TJsonObject; result : TFhirMedicationAdministrationPerformer);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
    if jsn.has('onBehalfOf') then
        result.onBehalfOf := ParseReference{TFhirOrganization}(jsn.vObj['onBehalfOf']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicationAdministrationPerformer(json : TJSONWriter; name : string; elem : TFhirMedicationAdministrationPerformer; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'onBehalfOf', elem.onBehalfOf); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationAdministrationDosage(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationAdministrationDosage(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationAdministrationDosage(jsn : TJsonObject) : TFhirMedicationAdministrationDosage;
begin
  result := TFhirMedicationAdministrationDosage.create;
  try
    ParseMedicationAdministrationDosageProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationAdministrationDosageProperties(jsn : TJsonObject; result : TFhirMedicationAdministrationDosage);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);{q}
    if jsn.has('site') then
        result.site := ParseCodeableConcept(jsn.vObj['site']);{q3}
    if jsn.has('route') then
        result.route := ParseCodeableConcept(jsn.vObj['route']);{q3}
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('dose') then
        result.dose := ParseQuantity(jsn.vObj['dose']);{q3}
    if jsn.has('rateRatio') {a4} then
      result.rate := ParseRatio(jsn.vObj['rateRatio']);
    if jsn.has('rateQuantity') {a4} then
      result.rate := ParseQuantity(jsn.vObj['rateQuantity']);
end;

procedure TFHIRJsonComposer.ComposeMedicationAdministrationDosage(json : TJSONWriter; name : string; elem : TFhirMedicationAdministrationDosage; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'site', elem.site); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'route', elem.route); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'dose', elem.dose); {a}
  if (SummaryOption in [soFull, soData]) and (elem.rate is TFhirRatio) then 
    ComposeRatio(json, 'rateRatio', TFhirRatio(elem.rate)) 
  else if (SummaryOption in [soFull, soData]) and (elem.rate is TFhirQuantity) then 
    ComposeQuantity(json, 'rateQuantity', TFhirQuantity(elem.rate)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationAdministration(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationAdministration(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationAdministration(jsn : TJsonObject) : TFhirMedicationAdministration;
begin
  result := TFhirMedicationAdministration.create;
  try
    ParseMedicationAdministrationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationAdministrationProperties(jsn : TJsonObject; result : TFhirMedicationAdministration);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('definition') then
      iterateArray(jsn.vArr['definition'], result.definitionList, parseReference{Resource});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{Resource});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirMedicationAdminStatusEnum, SYSTEMS_TFhirMedicationAdminStatusEnum);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('medicationCodeableConcept') {a4} then
      result.medication := ParseCodeableConcept(jsn.vObj['medicationCodeableConcept']);
    if jsn.has('medicationReference') {a3} then
      result.medication := ParseReference(jsn.vObj['medicationReference']);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], result.supportingInformationList, parseReference{TFhirReference});
    if jsn.has('effectivePeriod') {a4} then
      result.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      result.effective := parseDateTime(jsn.node['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], result.performerList, parseMedicationAdministrationPerformer);
    if jsn.has('notGiven') or jsn.has('_notGiven') then
        result.notGivenElement := parseBoolean(jsn.node['notGiven'], jsn.vObj['_notGiven']);{q}
    if jsn.has('reasonNotGiven') then
      iterateArray(jsn.vArr['reasonNotGiven'], result.reasonNotGivenList, parseCodeableConcept);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('prescription') then
        result.prescription := ParseReference{TFhirMedicationRequest}(jsn.vObj['prescription']);{q3}
    if jsn.has('device') then
      iterateArray(jsn.vArr['device'], result.deviceList, parseReference{TFhirDevice});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('dosage') then
        result.dosage := ParseMedicationAdministrationDosage(jsn.vObj['dosage']);{q3}
    if jsn.has('eventHistory') then
      iterateArray(jsn.vArr['eventHistory'], result.eventHistoryList, parseReference{TFhirProvenance});
end;

procedure TFHIRJsonComposer.ComposeMedicationAdministration(json : TJSONWriter; name : string; elem : TFhirMedicationAdministration; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('definition') and (elem.definitionList.Count > 0) then
  begin
    json.valueArray('definition');
    for i := 0 to elem.definitionList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.definitionList[i]); {z - Reference(PlanDefinition|ActivityDefinition)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.partOfList[i]); {z - Reference(MedicationAdministration|Procedure)}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirMedicationAdminStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirMedicationAdminStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('category') then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (elem.medication is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication)) 
  else if (elem.medication is TFhirReference) then
    ComposeReference(json, 'medicationReference', TFhirReference(elem.medication));
  ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInformation') and (elem.supportingInformationList.Count > 0) then
  begin
    json.valueArray('supportingInformation');
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInformationList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (elem.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(elem.effective)) 
  else if (elem.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') and (elem.performerList.Count > 0) then
  begin
    json.valueArray('performer');
    for i := 0 to elem.performerList.Count - 1 do
      ComposeMedicationAdministrationPerformer(json, '', elem.performerList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('notGiven') then
    ComposeBooleanValue(json, 'notGiven', elem.notGivenElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('notGiven') then
    ComposeBooleanProps(json, 'notGiven', elem.notGivenElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonNotGiven') and (elem.reasonNotGivenList.Count > 0) then
  begin
    json.valueArray('reasonNotGiven');
    for i := 0 to elem.reasonNotGivenList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonNotGivenList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('reasonCode') and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('prescription') then
    ComposeReference{TFhirMedicationRequest}(json, 'prescription', elem.prescription); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('device') and (elem.deviceList.Count > 0) then
  begin
    json.valueArray('device');
    for i := 0 to elem.deviceList.Count - 1 do
      ComposeReference{TFhirDevice}(json, '', elem.deviceList[i]); {z - Reference(Device)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('dosage') then
    ComposeMedicationAdministrationDosage(json, 'dosage', elem.dosage); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('eventHistory') and (elem.eventHistoryList.Count > 0) then
  begin
    json.valueArray('eventHistory');
    for i := 0 to elem.eventHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(json, '', elem.eventHistoryList[i]); {z - Reference(Provenance)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
procedure TFHIRJsonParser.ParseMedicationDispensePerformer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationDispensePerformer(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationDispensePerformer(jsn : TJsonObject) : TFhirMedicationDispensePerformer;
begin
  result := TFhirMedicationDispensePerformer.create;
  try
    ParseMedicationDispensePerformerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationDispensePerformerProperties(jsn : TJsonObject; result : TFhirMedicationDispensePerformer);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
    if jsn.has('onBehalfOf') then
        result.onBehalfOf := ParseReference{TFhirOrganization}(jsn.vObj['onBehalfOf']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicationDispensePerformer(json : TJSONWriter; name : string; elem : TFhirMedicationDispensePerformer; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'onBehalfOf', elem.onBehalfOf); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationDispenseSubstitution(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationDispenseSubstitution(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationDispenseSubstitution(jsn : TJsonObject) : TFhirMedicationDispenseSubstitution;
begin
  result := TFhirMedicationDispenseSubstitution.create;
  try
    ParseMedicationDispenseSubstitutionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationDispenseSubstitutionProperties(jsn : TJsonObject; result : TFhirMedicationDispenseSubstitution);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('wasSubstituted') or jsn.has('_wasSubstituted') then
        result.wasSubstitutedElement := parseBoolean(jsn.node['wasSubstituted'], jsn.vObj['_wasSubstituted']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], result.reasonList, parseCodeableConcept);
    if jsn.has('responsibleParty') then
      iterateArray(jsn.vArr['responsibleParty'], result.responsiblePartyList, parseReference{TFhirPractitioner});
end;

procedure TFHIRJsonComposer.ComposeMedicationDispenseSubstitution(json : TJSONWriter; name : string; elem : TFhirMedicationDispenseSubstitution; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeBooleanValue(json, 'wasSubstituted', elem.wasSubstitutedElement, false);
  ComposeBooleanProps(json, 'wasSubstituted', elem.wasSubstitutedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) and (elem.reasonList.Count > 0) then
  begin
    json.valueArray('reason');
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.responsiblePartyList.Count > 0) then
  begin
    json.valueArray('responsibleParty');
    for i := 0 to elem.responsiblePartyList.Count - 1 do
      ComposeReference{TFhirPractitioner}(json, '', elem.responsiblePartyList[i]); {z - Reference(Practitioner)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationDispense(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationDispense(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationDispense(jsn : TJsonObject) : TFhirMedicationDispense;
begin
  result := TFhirMedicationDispense.create;
  try
    ParseMedicationDispenseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationDispenseProperties(jsn : TJsonObject; result : TFhirMedicationDispense);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{TFhirProcedure});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirMedicationDispenseStatusEnum, SYSTEMS_TFhirMedicationDispenseStatusEnum);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('medicationCodeableConcept') {a4} then
      result.medication := ParseCodeableConcept(jsn.vObj['medicationCodeableConcept']);
    if jsn.has('medicationReference') {a3} then
      result.medication := ParseReference(jsn.vObj['medicationReference']);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], result.supportingInformationList, parseReference{TFhirReference});
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], result.performerList, parseMedicationDispensePerformer);
    if jsn.has('authorizingPrescription') then
      iterateArray(jsn.vArr['authorizingPrescription'], result.authorizingPrescriptionList, parseReference{TFhirMedicationRequest});
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('daysSupply') then
        result.daysSupply := ParseQuantity(jsn.vObj['daysSupply']);{q3}
    if jsn.has('whenPrepared') or jsn.has('_whenPrepared') then
        result.whenPreparedElement := parseDateTime(jsn.node['whenPrepared'], jsn.vObj['_whenPrepared']);{q}
    if jsn.has('whenHandedOver') or jsn.has('_whenHandedOver') then
        result.whenHandedOverElement := parseDateTime(jsn.node['whenHandedOver'], jsn.vObj['_whenHandedOver']);{q}
    if jsn.has('destination') then
        result.destination := ParseReference{TFhirLocation}(jsn.vObj['destination']);{q3}
    if jsn.has('receiver') then
      iterateArray(jsn.vArr['receiver'], result.receiverList, parseReference{Resource});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('dosageInstruction') then
      iterateArray(jsn.vArr['dosageInstruction'], result.dosageInstructionList, parseDosage);
    if jsn.has('substitution') then
        result.substitution := ParseMedicationDispenseSubstitution(jsn.vObj['substitution']);{q3}
    if jsn.has('detectedIssue') then
      iterateArray(jsn.vArr['detectedIssue'], result.detectedIssueList, parseReference{TFhirDetectedIssue});
    if jsn.has('notDone') or jsn.has('_notDone') then
        result.notDoneElement := parseBoolean(jsn.node['notDone'], jsn.vObj['_notDone']);{q}
    if jsn.has('notDoneReasonCodeableConcept') {a4} then
      result.notDoneReason := ParseCodeableConcept(jsn.vObj['notDoneReasonCodeableConcept']);
    if jsn.has('notDoneReasonReference') {a3} then
      result.notDoneReason := ParseReference(jsn.vObj['notDoneReasonReference']);
    if jsn.has('eventHistory') then
      iterateArray(jsn.vArr['eventHistory'], result.eventHistoryList, parseReference{TFhirProvenance});
end;

procedure TFHIRJsonComposer.ComposeMedicationDispense(json : TJSONWriter; name : string; elem : TFhirMedicationDispense; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('partOf') and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirProcedure}(json, '', elem.partOfList[i]); {z - Reference(Procedure)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirMedicationDispenseStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirMedicationDispenseStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('category') then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (elem.medication is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication)) 
  else if (elem.medication is TFhirReference) then
    ComposeReference(json, 'medicationReference', TFhirReference(elem.medication));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInformation') and (elem.supportingInformationList.Count > 0) then
  begin
    json.valueArray('supportingInformation');
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInformationList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('performer') and (elem.performerList.Count > 0) then
  begin
    json.valueArray('performer');
    for i := 0 to elem.performerList.Count - 1 do
      ComposeMedicationDispensePerformer(json, '', elem.performerList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('authorizingPrescription') and (elem.authorizingPrescriptionList.Count > 0) then
  begin
    json.valueArray('authorizingPrescription');
    for i := 0 to elem.authorizingPrescriptionList.Count - 1 do
      ComposeReference{TFhirMedicationRequest}(json, '', elem.authorizingPrescriptionList[i]); {z - Reference(MedicationRequest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('quantity') then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('daysSupply') then
    ComposeQuantity(json, 'daysSupply', elem.daysSupply); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('whenPrepared') then
    ComposeDateTimeValue(json, 'whenPrepared', elem.whenPreparedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('whenPrepared') then
    ComposeDateTimeProps(json, 'whenPrepared', elem.whenPreparedElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('whenHandedOver') then
    ComposeDateTimeValue(json, 'whenHandedOver', elem.whenHandedOverElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('whenHandedOver') then
    ComposeDateTimeProps(json, 'whenHandedOver', elem.whenHandedOverElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('destination') then
    ComposeReference{TFhirLocation}(json, 'destination', elem.destination); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('receiver') and (elem.receiverList.Count > 0) then
  begin
    json.valueArray('receiver');
    for i := 0 to elem.receiverList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.receiverList[i]); {z - Reference(Patient|Practitioner)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('dosageInstruction') and (elem.dosageInstructionList.Count > 0) then
  begin
    json.valueArray('dosageInstruction');
    for i := 0 to elem.dosageInstructionList.Count - 1 do
      ComposeDosage(json, '', elem.dosageInstructionList[i]); {z - Dosage}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('substitution') then
    ComposeMedicationDispenseSubstitution(json, 'substitution', elem.substitution); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('detectedIssue') and (elem.detectedIssueList.Count > 0) then
  begin
    json.valueArray('detectedIssue');
    for i := 0 to elem.detectedIssueList.Count - 1 do
      ComposeReference{TFhirDetectedIssue}(json, '', elem.detectedIssueList[i]); {z - Reference(DetectedIssue)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('notDone') then
    ComposeBooleanValue(json, 'notDone', elem.notDoneElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('notDone') then
    ComposeBooleanProps(json, 'notDone', elem.notDoneElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.notDoneReason is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'notDoneReasonCodeableConcept', TFhirCodeableConcept(elem.notDoneReason)) 
  else if (SummaryOption in [soFull, soData]) and (elem.notDoneReason is TFhirReference) then
    ComposeReference(json, 'notDoneReasonReference', TFhirReference(elem.notDoneReason));
  if (SummaryOption in [soFull, soData]) and doCompose('eventHistory') and (elem.eventHistoryList.Count > 0) then
  begin
    json.valueArray('eventHistory');
    for i := 0 to elem.eventHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(json, '', elem.eventHistoryList[i]); {z - Reference(Provenance)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONREQUEST}
procedure TFHIRJsonParser.ParseMedicationRequestRequester(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationRequestRequester(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationRequestRequester(jsn : TJsonObject) : TFhirMedicationRequestRequester;
begin
  result := TFhirMedicationRequestRequester.create;
  try
    ParseMedicationRequestRequesterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationRequestRequesterProperties(jsn : TJsonObject; result : TFhirMedicationRequestRequester);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('agent') then
        result.agent := ParseReference{Resource}(jsn.vObj['agent']);{q3}
    if jsn.has('onBehalfOf') then
        result.onBehalfOf := ParseReference{TFhirOrganization}(jsn.vObj['onBehalfOf']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicationRequestRequester(json : TJSONWriter; name : string; elem : TFhirMedicationRequestRequester; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'agent', elem.agent); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'onBehalfOf', elem.onBehalfOf); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationRequestDispenseRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationRequestDispenseRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationRequestDispenseRequest(jsn : TJsonObject) : TFhirMedicationRequestDispenseRequest;
begin
  result := TFhirMedicationRequestDispenseRequest.create;
  try
    ParseMedicationRequestDispenseRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationRequestDispenseRequestProperties(jsn : TJsonObject; result : TFhirMedicationRequestDispenseRequest);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('validityPeriod') then
        result.validityPeriod := ParsePeriod(jsn.vObj['validityPeriod']);{q3}
    if jsn.has('numberOfRepeatsAllowed') or jsn.has('_numberOfRepeatsAllowed') then
        result.numberOfRepeatsAllowedElement := parsePositiveInt(jsn.node['numberOfRepeatsAllowed'], jsn.vObj['_numberOfRepeatsAllowed']);{q}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('expectedSupplyDuration') then
        result.expectedSupplyDuration := ParseDuration(jsn.vObj['expectedSupplyDuration']);{q3}
    if jsn.has('performer') then
        result.performer := ParseReference{TFhirOrganization}(jsn.vObj['performer']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicationRequestDispenseRequest(json : TJSONWriter; name : string; elem : TFhirMedicationRequestDispenseRequest; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'validityPeriod', elem.validityPeriod); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'numberOfRepeatsAllowed', elem.numberOfRepeatsAllowedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'numberOfRepeatsAllowed', elem.numberOfRepeatsAllowedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'expectedSupplyDuration', elem.expectedSupplyDuration); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'performer', elem.performer); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationRequestSubstitution(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationRequestSubstitution(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationRequestSubstitution(jsn : TJsonObject) : TFhirMedicationRequestSubstitution;
begin
  result := TFhirMedicationRequestSubstitution.create;
  try
    ParseMedicationRequestSubstitutionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationRequestSubstitutionProperties(jsn : TJsonObject; result : TFhirMedicationRequestSubstitution);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('allowed') or jsn.has('_allowed') then
        result.allowedElement := parseBoolean(jsn.node['allowed'], jsn.vObj['_allowed']);{q}
    if jsn.has('reason') then
        result.reason := ParseCodeableConcept(jsn.vObj['reason']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMedicationRequestSubstitution(json : TJSONWriter; name : string; elem : TFhirMedicationRequestSubstitution; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeBooleanValue(json, 'allowed', elem.allowedElement, false);
  ComposeBooleanProps(json, 'allowed', elem.allowedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'reason', elem.reason); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMedicationRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationRequest(jsn : TJsonObject) : TFhirMedicationRequest;
begin
  result := TFhirMedicationRequest.create;
  try
    ParseMedicationRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationRequestProperties(jsn : TJsonObject; result : TFhirMedicationRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('definition') then
      iterateArray(jsn.vArr['definition'], result.definitionList, parseReference{Resource});
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('groupIdentifier') then
        result.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirMedicationRequestStatusEnum, SYSTEMS_TFhirMedicationRequestStatusEnum);
    if jsn.has('intent') or jsn.has('_intent')  then
      result.intentElement := parseEnum(jsn.path+'/intent', jsn.node['intent'], jsn.vObj['_intent'], CODES_TFhirMedicationRequestIntentEnum, SYSTEMS_TFhirMedicationRequestIntentEnum);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirMedicationRequestPriorityEnum, SYSTEMS_TFhirMedicationRequestPriorityEnum);
    if jsn.has('medicationCodeableConcept') {a4} then
      result.medication := ParseCodeableConcept(jsn.vObj['medicationCodeableConcept']);
    if jsn.has('medicationReference') {a3} then
      result.medication := ParseReference(jsn.vObj['medicationReference']);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('supportingInformation') then
      iterateArray(jsn.vArr['supportingInformation'], result.supportingInformationList, parseReference{TFhirReference});
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('requester') then
        result.requester := ParseMedicationRequestRequester(jsn.vObj['requester']);{q3}
    if jsn.has('recorder') then
        result.recorder := ParseReference{TFhirPractitioner}(jsn.vObj['recorder']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('dosageInstruction') then
      iterateArray(jsn.vArr['dosageInstruction'], result.dosageInstructionList, parseDosage);
    if jsn.has('dispenseRequest') then
        result.dispenseRequest := ParseMedicationRequestDispenseRequest(jsn.vObj['dispenseRequest']);{q3}
    if jsn.has('substitution') then
        result.substitution := ParseMedicationRequestSubstitution(jsn.vObj['substitution']);{q3}
    if jsn.has('priorPrescription') then
        result.priorPrescription := ParseReference{TFhirMedicationRequest}(jsn.vObj['priorPrescription']);{q3}
    if jsn.has('detectedIssue') then
      iterateArray(jsn.vArr['detectedIssue'], result.detectedIssueList, parseReference{TFhirDetectedIssue});
    if jsn.has('eventHistory') then
      iterateArray(jsn.vArr['eventHistory'], result.eventHistoryList, parseReference{TFhirProvenance});
end;

procedure TFHIRJsonComposer.ComposeMedicationRequest(json : TJSONWriter; name : string; elem : TFhirMedicationRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('definition') and (elem.definitionList.Count > 0) then
  begin
    json.valueArray('definition');
    for i := 0 to elem.definitionList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.definitionList[i]); {z - Reference(ActivityDefinition|PlanDefinition)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(CarePlan|MedicationRequest|ProcedureRequest|ReferralRequest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('groupIdentifier') then
    ComposeIdentifier(json, 'groupIdentifier', elem.groupIdentifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirMedicationRequestStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirMedicationRequestStatusEnum, false);
  ComposeEnumValue(json, 'intent', elem.IntentElement, CODES_TFhirMedicationRequestIntentEnum, false);
  ComposeEnumProps(json, 'intent', elem.IntentElement, CODES_TFhirMedicationRequestIntentEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('category') then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirMedicationRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirMedicationRequestPriorityEnum, false);
  if (elem.medication is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication)) 
  else if (elem.medication is TFhirReference) then
    ComposeReference(json, 'medicationReference', TFhirReference(elem.medication));
  ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInformation') and (elem.supportingInformationList.Count > 0) then
  begin
    json.valueArray('supportingInformation');
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInformationList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requester') then
    ComposeMedicationRequestRequester(json, 'requester', elem.requester); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('recorder') then
    ComposeReference{TFhirPractitioner}(json, 'recorder', elem.recorder); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('reasonCode') and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('dosageInstruction') and (elem.dosageInstructionList.Count > 0) then
  begin
    json.valueArray('dosageInstruction');
    for i := 0 to elem.dosageInstructionList.Count - 1 do
      ComposeDosage(json, '', elem.dosageInstructionList[i]); {z - Dosage}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('dispenseRequest') then
    ComposeMedicationRequestDispenseRequest(json, 'dispenseRequest', elem.dispenseRequest); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('substitution') then
    ComposeMedicationRequestSubstitution(json, 'substitution', elem.substitution); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('priorPrescription') then
    ComposeReference{TFhirMedicationRequest}(json, 'priorPrescription', elem.priorPrescription); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('detectedIssue') and (elem.detectedIssueList.Count > 0) then
  begin
    json.valueArray('detectedIssue');
    for i := 0 to elem.detectedIssueList.Count - 1 do
      ComposeReference{TFhirDetectedIssue}(json, '', elem.detectedIssueList[i]); {z - Reference(DetectedIssue)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('eventHistory') and (elem.eventHistoryList.Count > 0) then
  begin
    json.valueArray('eventHistory');
    for i := 0 to elem.eventHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(json, '', elem.eventHistoryList[i]); {z - Reference(Provenance)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
procedure TFHIRJsonParser.ParseMedicationStatement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMedicationStatement(jsn)); {2}
end;

function TFHIRJsonParser.ParseMedicationStatement(jsn : TJsonObject) : TFhirMedicationStatement;
begin
  result := TFhirMedicationStatement.create;
  try
    ParseMedicationStatementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMedicationStatementProperties(jsn : TJsonObject; result : TFhirMedicationStatement);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{Resource});
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirMedicationStatementStatusEnum, SYSTEMS_TFhirMedicationStatementStatusEnum);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('medicationCodeableConcept') {a4} then
      result.medication := ParseCodeableConcept(jsn.vObj['medicationCodeableConcept']);
    if jsn.has('medicationReference') {a3} then
      result.medication := ParseReference(jsn.vObj['medicationReference']);
    if jsn.has('effectivePeriod') {a4} then
      result.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      result.effective := parseDateTime(jsn.node['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('dateAsserted') or jsn.has('_dateAsserted') then
        result.dateAssertedElement := parseDateTime(jsn.node['dateAsserted'], jsn.vObj['_dateAsserted']);{q}
    if jsn.has('informationSource') then
        result.informationSource := ParseReference{Resource}(jsn.vObj['informationSource']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('derivedFrom') then
      iterateArray(jsn.vArr['derivedFrom'], result.derivedFromList, parseReference{TFhirReference});
    if jsn.has('taken') or jsn.has('_taken')  then
      result.takenElement := parseEnum(jsn.path+'/taken', jsn.node['taken'], jsn.vObj['_taken'], CODES_TFhirMedicationStatementTakenEnum, SYSTEMS_TFhirMedicationStatementTakenEnum);
    if jsn.has('reasonNotTaken') then
      iterateArray(jsn.vArr['reasonNotTaken'], result.reasonNotTakenList, parseCodeableConcept);
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('dosage') then
      iterateArray(jsn.vArr['dosage'], result.dosageList, parseDosage);
end;

procedure TFHIRJsonComposer.ComposeMedicationStatement(json : TJSONWriter; name : string; elem : TFhirMedicationStatement; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(MedicationRequest|CarePlan|ProcedureRequest|ReferralRequest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.partOfList[i]); {z - Reference(MedicationAdministration|MedicationDispense|MedicationStatement|Procedure|Observation)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirMedicationStatementStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirMedicationStatementStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (elem.medication is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication)) 
  else if (elem.medication is TFhirReference) then
    ComposeReference(json, 'medicationReference', TFhirReference(elem.medication));
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(elem.effective)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dateAsserted') then
    ComposeDateTimeValue(json, 'dateAsserted', elem.dateAssertedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dateAsserted') then
    ComposeDateTimeProps(json, 'dateAsserted', elem.dateAssertedElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('informationSource') then
    ComposeReference{Resource}(json, 'informationSource', elem.informationSource); {a}
  ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('derivedFrom') and (elem.derivedFromList.Count > 0) then
  begin
    json.valueArray('derivedFrom');
    for i := 0 to elem.derivedFromList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.derivedFromList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'taken', elem.TakenElement, CODES_TFhirMedicationStatementTakenEnum, false);
  ComposeEnumProps(json, 'taken', elem.TakenElement, CODES_TFhirMedicationStatementTakenEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonNotTaken') and (elem.reasonNotTakenList.Count > 0) then
  begin
    json.valueArray('reasonNotTaken');
    for i := 0 to elem.reasonNotTakenList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonNotTakenList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('reasonCode') and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('dosage') and (elem.dosageList.Count > 0) then
  begin
    json.valueArray('dosage');
    for i := 0 to elem.dosageList.Count - 1 do
      ComposeDosage(json, '', elem.dosageList[i]); {z - Dosage}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MESSAGEDEFINITION}
procedure TFHIRJsonParser.ParseMessageDefinitionFocus(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageDefinitionFocus(jsn)); {2}
end;

function TFHIRJsonParser.ParseMessageDefinitionFocus(jsn : TJsonObject) : TFhirMessageDefinitionFocus;
begin
  result := TFhirMessageDefinitionFocus.create;
  try
    ParseMessageDefinitionFocusProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageDefinitionFocusProperties(jsn : TJsonObject; result : TFhirMessageDefinitionFocus);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('profile') then
        result.profile := ParseReference{TFhirStructureDefinition}(jsn.vObj['profile']);{q3}
    if jsn.has('min') or jsn.has('_min') then
        result.minElement := parseUnsignedInt(jsn.node['min'], jsn.vObj['_min']);{q}
    if jsn.has('max') or jsn.has('_max') then
        result.maxElement := parseString(jsn.node['max'], jsn.vObj['_max']);{q}
end;

procedure TFHIRJsonComposer.ComposeMessageDefinitionFocus(json : TJSONWriter; name : string; elem : TFhirMessageDefinitionFocus; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirResourceTypesEnum, false);
  ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirResourceTypesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'profile', elem.profile); {a}
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.min <> '0')) then
    ComposeUnsignedIntValue(json, 'min', elem.minElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.min <> '0')) then
    ComposeUnsignedIntProps(json, 'min', elem.minElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'max', elem.maxElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'max', elem.maxElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMessageDefinitionAllowedResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageDefinitionAllowedResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseMessageDefinitionAllowedResponse(jsn : TJsonObject) : TFhirMessageDefinitionAllowedResponse;
begin
  result := TFhirMessageDefinitionAllowedResponse.create;
  try
    ParseMessageDefinitionAllowedResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageDefinitionAllowedResponseProperties(jsn : TJsonObject; result : TFhirMessageDefinitionAllowedResponse);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('message') then
        result.message := ParseReference{TFhirMessageDefinition}(jsn.vObj['message']);{q3}
    if jsn.has('situation') or jsn.has('_situation') then
        result.situationElement := parseMarkdown(jsn.node['situation'], jsn.vObj['_situation']);{q}
end;

procedure TFHIRJsonComposer.ComposeMessageDefinitionAllowedResponse(json : TJSONWriter; name : string; elem : TFhirMessageDefinitionAllowedResponse; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{TFhirMessageDefinition}(json, 'message', elem.message); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'situation', elem.situationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'situation', elem.situationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMessageDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseMessageDefinition(jsn : TJsonObject) : TFhirMessageDefinition;
begin
  result := TFhirMessageDefinition.create;
  try
    ParseMessageDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageDefinitionProperties(jsn : TJsonObject; result : TFhirMessageDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('base') then
        result.base := ParseReference{TFhirMessageDefinition}(jsn.vObj['base']);{q3}
    if jsn.has('parent') then
      iterateArray(jsn.vArr['parent'], result.parentList, parseReference{Resource});
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], result.replacesList, parseReference{TFhirMessageDefinition});
    if jsn.has('event') then
        result.event := ParseCoding(jsn.vObj['event']);{q3}
    if jsn.has('category') or jsn.has('_category')  then
      result.categoryElement := parseEnum(jsn.path+'/category', jsn.node['category'], jsn.vObj['_category'], CODES_TFhirMessageSignificanceCategoryEnum, SYSTEMS_TFhirMessageSignificanceCategoryEnum);
    if jsn.has('focus') then
      iterateArray(jsn.vArr['focus'], result.focusList, parseMessageDefinitionFocus);
    if jsn.has('responseRequired') or jsn.has('_responseRequired') then
        result.responseRequiredElement := parseBoolean(jsn.node['responseRequired'], jsn.vObj['_responseRequired']);{q}
    if jsn.has('allowedResponse') then
      iterateArray(jsn.vArr['allowedResponse'], result.allowedResponseList, parseMessageDefinitionAllowedResponse);
end;

procedure TFHIRJsonComposer.ComposeMessageDefinition(json : TJSONWriter; name : string; elem : TFhirMessageDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('base') then
    ComposeReference{TFhirMessageDefinition}(json, 'base', elem.base); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('parent') and (elem.parentList.Count > 0) then
  begin
    json.valueArray('parent');
    for i := 0 to elem.parentList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.parentList[i]); {z - Reference(ActivityDefinition|PlanDefinition)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('replaces') and (elem.replacesList.Count > 0) then
  begin
    json.valueArray('replaces');
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirMessageDefinition}(json, '', elem.replacesList[i]); {z - Reference(MessageDefinition)}
    json.FinishArray;
  end;
  ComposeCoding(json, 'event', elem.event); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeEnumValue(json, 'category', elem.CategoryElement, CODES_TFhirMessageSignificanceCategoryEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeEnumProps(json, 'category', elem.CategoryElement, CODES_TFhirMessageSignificanceCategoryEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('focus') and (elem.focusList.Count > 0) then
  begin
    json.valueArray('focus');
    for i := 0 to elem.focusList.Count - 1 do
      ComposeMessageDefinitionFocus(json, '', elem.focusList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.responseRequired <> false)) and doCompose('responseRequired') then
    ComposeBooleanValue(json, 'responseRequired', elem.responseRequiredElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.responseRequired <> false)) and doCompose('responseRequired') then
    ComposeBooleanProps(json, 'responseRequired', elem.responseRequiredElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('allowedResponse') and (elem.allowedResponseList.Count > 0) then
  begin
    json.valueArray('allowedResponse');
    for i := 0 to elem.allowedResponseList.Count - 1 do
      ComposeMessageDefinitionAllowedResponse(json, '', elem.allowedResponseList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
procedure TFHIRJsonParser.ParseMessageHeaderDestination(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageHeaderDestination(jsn)); {2}
end;

function TFHIRJsonParser.ParseMessageHeaderDestination(jsn : TJsonObject) : TFhirMessageHeaderDestination;
begin
  result := TFhirMessageHeaderDestination.create;
  try
    ParseMessageHeaderDestinationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageHeaderDestinationProperties(jsn : TJsonObject; result : TFhirMessageHeaderDestination);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('target') then
        result.target := ParseReference{TFhirDevice}(jsn.vObj['target']);{q3}
    if jsn.has('endpoint') or jsn.has('_endpoint') then
        result.endpointElement := parseUri(jsn.node['endpoint'], jsn.vObj['_endpoint']);{q}
end;

procedure TFHIRJsonComposer.ComposeMessageHeaderDestination(json : TJSONWriter; name : string; elem : TFhirMessageHeaderDestination; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirDevice}(json, 'target', elem.target); {a}
  ComposeUriValue(json, 'endpoint', elem.endpointElement, false);
  ComposeUriProps(json, 'endpoint', elem.endpointElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMessageHeaderSource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageHeaderSource(jsn)); {2}
end;

function TFHIRJsonParser.ParseMessageHeaderSource(jsn : TJsonObject) : TFhirMessageHeaderSource;
begin
  result := TFhirMessageHeaderSource.create;
  try
    ParseMessageHeaderSourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageHeaderSourceProperties(jsn : TJsonObject; result : TFhirMessageHeaderSource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('software') or jsn.has('_software') then
        result.softwareElement := parseString(jsn.node['software'], jsn.vObj['_software']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('contact') then
        result.contact := ParseContactPoint(jsn.vObj['contact']);{q3}
    if jsn.has('endpoint') or jsn.has('_endpoint') then
        result.endpointElement := parseUri(jsn.node['endpoint'], jsn.vObj['_endpoint']);{q}
end;

procedure TFHIRJsonComposer.ComposeMessageHeaderSource(json : TJSONWriter; name : string; elem : TFhirMessageHeaderSource; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'software', elem.softwareElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'software', elem.softwareElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeContactPoint(json, 'contact', elem.contact); {a}
  ComposeUriValue(json, 'endpoint', elem.endpointElement, false);
  ComposeUriProps(json, 'endpoint', elem.endpointElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMessageHeaderResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageHeaderResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseMessageHeaderResponse(jsn : TJsonObject) : TFhirMessageHeaderResponse;
begin
  result := TFhirMessageHeaderResponse.create;
  try
    ParseMessageHeaderResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageHeaderResponseProperties(jsn : TJsonObject; result : TFhirMessageHeaderResponse);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') or jsn.has('_identifier') then
        result.identifierElement := parseId(jsn.node['identifier'], jsn.vObj['_identifier']);{q}
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirResponseCodeEnum, SYSTEMS_TFhirResponseCodeEnum);
    if jsn.has('details') then
        result.details := ParseReference{TFhirOperationOutcome}(jsn.vObj['details']);{q3}
end;

procedure TFHIRJsonComposer.ComposeMessageHeaderResponse(json : TJSONWriter; name : string; elem : TFhirMessageHeaderResponse; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdValue(json, 'identifier', elem.identifierElement, false);
  ComposeIdProps(json, 'identifier', elem.identifierElement, false);
  ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirResponseCodeEnum, false);
  ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirResponseCodeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOperationOutcome}(json, 'details', elem.details); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseMessageHeader(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseMessageHeader(jsn)); {2}
end;

function TFHIRJsonParser.ParseMessageHeader(jsn : TJsonObject) : TFhirMessageHeader;
begin
  result := TFhirMessageHeader.create;
  try
    ParseMessageHeaderProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseMessageHeaderProperties(jsn : TJsonObject; result : TFhirMessageHeader);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('event') then
        result.event := ParseCoding(jsn.vObj['event']);{q3}
    if jsn.has('destination') then
      iterateArray(jsn.vArr['destination'], result.destinationList, parseMessageHeaderDestination);
    if jsn.has('receiver') then
        result.receiver := ParseReference{Resource}(jsn.vObj['receiver']);{q3}
    if jsn.has('sender') then
        result.sender := ParseReference{Resource}(jsn.vObj['sender']);{q3}
    if jsn.has('timestamp') or jsn.has('_timestamp') then
        result.timestampElement := parseInstant(jsn.node['timestamp'], jsn.vObj['_timestamp']);{q}
    if jsn.has('enterer') then
        result.enterer := ParseReference{TFhirPractitioner}(jsn.vObj['enterer']);{q3}
    if jsn.has('author') then
        result.author := ParseReference{TFhirPractitioner}(jsn.vObj['author']);{q3}
    if jsn.has('source') then
        result.source := ParseMessageHeaderSource(jsn.vObj['source']);{q3}
    if jsn.has('responsible') then
        result.responsible := ParseReference{Resource}(jsn.vObj['responsible']);{q3}
    if jsn.has('reason') then
        result.reason := ParseCodeableConcept(jsn.vObj['reason']);{q3}
    if jsn.has('response') then
        result.response := ParseMessageHeaderResponse(jsn.vObj['response']);{q3}
    if jsn.has('focus') then
      iterateArray(jsn.vArr['focus'], result.focusList, parseReference{TFhirReference});
end;

procedure TFHIRJsonComposer.ComposeMessageHeader(json : TJSONWriter; name : string; elem : TFhirMessageHeader; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  ComposeCoding(json, 'event', elem.event); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('destination') and (elem.destinationList.Count > 0) then
  begin
    json.valueArray('destination');
    for i := 0 to elem.destinationList.Count - 1 do
      ComposeMessageHeaderDestination(json, '', elem.destinationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('receiver') then
    ComposeReference{Resource}(json, 'receiver', elem.receiver); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('sender') then
    ComposeReference{Resource}(json, 'sender', elem.sender); {a}
  ComposeInstantValue(json, 'timestamp', elem.timestampElement, false);
  ComposeInstantProps(json, 'timestamp', elem.timestampElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('enterer') then
    ComposeReference{TFhirPractitioner}(json, 'enterer', elem.enterer); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    ComposeReference{TFhirPractitioner}(json, 'author', elem.author); {a}
  ComposeMessageHeaderSource(json, 'source', elem.source); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('responsible') then
    ComposeReference{Resource}(json, 'responsible', elem.responsible); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reason') then
    ComposeCodeableConcept(json, 'reason', elem.reason); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('response') then
    ComposeMessageHeaderResponse(json, 'response', elem.response); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('focus') and (elem.focusList.Count > 0) then
  begin
    json.valueArray('focus');
    for i := 0 to elem.focusList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.focusList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_NAMINGSYSTEM}
procedure TFHIRJsonParser.ParseNamingSystemUniqueId(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNamingSystemUniqueId(jsn)); {2}
end;

function TFHIRJsonParser.ParseNamingSystemUniqueId(jsn : TJsonObject) : TFhirNamingSystemUniqueId;
begin
  result := TFhirNamingSystemUniqueId.create;
  try
    ParseNamingSystemUniqueIdProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNamingSystemUniqueIdProperties(jsn : TJsonObject; result : TFhirNamingSystemUniqueId);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirNamingsystemIdentifierTypeEnum, SYSTEMS_TFhirNamingsystemIdentifierTypeEnum);
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);{q}
    if jsn.has('preferred') or jsn.has('_preferred') then
        result.preferredElement := parseBoolean(jsn.node['preferred'], jsn.vObj['_preferred']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeNamingSystemUniqueId(json : TJSONWriter; name : string; elem : TFhirNamingSystemUniqueId; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirNamingsystemIdentifierTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirNamingsystemIdentifierTypeEnum, false);
  ComposeStringValue(json, 'value', elem.valueElement, false);
  ComposeStringProps(json, 'value', elem.valueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'preferred', elem.preferredElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'preferred', elem.preferredElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNamingSystem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNamingSystem(jsn)); {2}
end;

function TFHIRJsonParser.ParseNamingSystem(jsn : TJsonObject) : TFhirNamingSystem;
begin
  result := TFhirNamingSystem.create;
  try
    ParseNamingSystemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNamingSystemProperties(jsn : TJsonObject; result : TFhirNamingSystem);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirNamingsystemTypeEnum, SYSTEMS_TFhirNamingsystemTypeEnum);
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('responsible') or jsn.has('_responsible') then
        result.responsibleElement := parseString(jsn.node['responsible'], jsn.vObj['_responsible']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('usage') or jsn.has('_usage') then
        result.usageElement := parseString(jsn.node['usage'], jsn.vObj['_usage']);{q}
    if jsn.has('uniqueId') then
      iterateArray(jsn.vArr['uniqueId'], result.uniqueIdList, parseNamingSystemUniqueId);
    if jsn.has('replacedBy') then
        result.replacedBy := ParseReference{TFhirNamingSystem}(jsn.vObj['replacedBy']);{q3}
end;

procedure TFHIRJsonComposer.ComposeNamingSystem(json : TJSONWriter; name : string; elem : TFhirNamingSystem; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirNamingsystemTypeEnum, false);
  ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirNamingsystemTypeEnum, false);
  ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('responsible') then
    ComposeStringValue(json, 'responsible', elem.responsibleElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('responsible') then
    ComposeStringProps(json, 'responsible', elem.responsibleElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeStringValue(json, 'usage', elem.usageElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeStringProps(json, 'usage', elem.usageElement, false);
  if (elem.uniqueIdList.Count > 0) then
  begin
    json.valueArray('uniqueId');
    for i := 0 to elem.uniqueIdList.Count - 1 do
      ComposeNamingSystemUniqueId(json, '', elem.uniqueIdList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('replacedBy') then
    ComposeReference{TFhirNamingSystem}(json, 'replacedBy', elem.replacedBy); {a}
end;

{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
procedure TFHIRJsonParser.ParseNutritionOrderOralDiet(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderOralDiet(jsn)); {2}
end;

function TFHIRJsonParser.ParseNutritionOrderOralDiet(jsn : TJsonObject) : TFhirNutritionOrderOralDiet;
begin
  result := TFhirNutritionOrderOralDiet.create;
  try
    ParseNutritionOrderOralDietProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietProperties(jsn : TJsonObject; result : TFhirNutritionOrderOralDiet);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('schedule') then
      iterateArray(jsn.vArr['schedule'], result.scheduleList, parseTiming);
    if jsn.has('nutrient') then
      iterateArray(jsn.vArr['nutrient'], result.nutrientList, parseNutritionOrderOralDietNutrient);
    if jsn.has('texture') then
      iterateArray(jsn.vArr['texture'], result.textureList, parseNutritionOrderOralDietTexture);
    if jsn.has('fluidConsistencyType') then
      iterateArray(jsn.vArr['fluidConsistencyType'], result.fluidConsistencyTypeList, parseCodeableConcept);
    if jsn.has('instruction') or jsn.has('_instruction') then
        result.instructionElement := parseString(jsn.node['instruction'], jsn.vObj['_instruction']);{q}
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderOralDiet(json : TJSONWriter; name : string; elem : TFhirNutritionOrderOralDiet; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.scheduleList.Count > 0) then
  begin
    json.valueArray('schedule');
    for i := 0 to elem.scheduleList.Count - 1 do
      ComposeTiming(json, '', elem.scheduleList[i]); {z - Timing}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.nutrientList.Count > 0) then
  begin
    json.valueArray('nutrient');
    for i := 0 to elem.nutrientList.Count - 1 do
      ComposeNutritionOrderOralDietNutrient(json, '', elem.nutrientList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.textureList.Count > 0) then
  begin
    json.valueArray('texture');
    for i := 0 to elem.textureList.Count - 1 do
      ComposeNutritionOrderOralDietTexture(json, '', elem.textureList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.fluidConsistencyTypeList.Count > 0) then
  begin
    json.valueArray('fluidConsistencyType');
    for i := 0 to elem.fluidConsistencyTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.fluidConsistencyTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'instruction', elem.instructionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'instruction', elem.instructionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietNutrient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderOralDietNutrient(jsn)); {2}
end;

function TFHIRJsonParser.ParseNutritionOrderOralDietNutrient(jsn : TJsonObject) : TFhirNutritionOrderOralDietNutrient;
begin
  result := TFhirNutritionOrderOralDietNutrient.create;
  try
    ParseNutritionOrderOralDietNutrientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietNutrientProperties(jsn : TJsonObject; result : TFhirNutritionOrderOralDietNutrient);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('modifier') then
        result.modifier := ParseCodeableConcept(jsn.vObj['modifier']);{q3}
    if jsn.has('amount') then
        result.amount := ParseQuantity(jsn.vObj['amount']);{q3}
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderOralDietNutrient(json : TJSONWriter; name : string; elem : TFhirNutritionOrderOralDietNutrient; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'modifier', elem.modifier); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'amount', elem.amount); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietTexture(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderOralDietTexture(jsn)); {2}
end;

function TFHIRJsonParser.ParseNutritionOrderOralDietTexture(jsn : TJsonObject) : TFhirNutritionOrderOralDietTexture;
begin
  result := TFhirNutritionOrderOralDietTexture.create;
  try
    ParseNutritionOrderOralDietTextureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderOralDietTextureProperties(jsn : TJsonObject; result : TFhirNutritionOrderOralDietTexture);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('modifier') then
        result.modifier := ParseCodeableConcept(jsn.vObj['modifier']);{q3}
    if jsn.has('foodType') then
        result.foodType := ParseCodeableConcept(jsn.vObj['foodType']);{q3}
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderOralDietTexture(json : TJSONWriter; name : string; elem : TFhirNutritionOrderOralDietTexture; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'modifier', elem.modifier); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'foodType', elem.foodType); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNutritionOrderSupplement(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderSupplement(jsn)); {2}
end;

function TFHIRJsonParser.ParseNutritionOrderSupplement(jsn : TJsonObject) : TFhirNutritionOrderSupplement;
begin
  result := TFhirNutritionOrderSupplement.create;
  try
    ParseNutritionOrderSupplementProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderSupplementProperties(jsn : TJsonObject; result : TFhirNutritionOrderSupplement);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('productName') or jsn.has('_productName') then
        result.productNameElement := parseString(jsn.node['productName'], jsn.vObj['_productName']);{q}
    if jsn.has('schedule') then
      iterateArray(jsn.vArr['schedule'], result.scheduleList, parseTiming);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('instruction') or jsn.has('_instruction') then
        result.instructionElement := parseString(jsn.node['instruction'], jsn.vObj['_instruction']);{q}
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderSupplement(json : TJSONWriter; name : string; elem : TFhirNutritionOrderSupplement; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'productName', elem.productNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'productName', elem.productNameElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.scheduleList.Count > 0) then
  begin
    json.valueArray('schedule');
    for i := 0 to elem.scheduleList.Count - 1 do
      ComposeTiming(json, '', elem.scheduleList[i]); {z - Timing}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'instruction', elem.instructionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'instruction', elem.instructionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNutritionOrderEnteralFormula(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderEnteralFormula(jsn)); {2}
end;

function TFHIRJsonParser.ParseNutritionOrderEnteralFormula(jsn : TJsonObject) : TFhirNutritionOrderEnteralFormula;
begin
  result := TFhirNutritionOrderEnteralFormula.create;
  try
    ParseNutritionOrderEnteralFormulaProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderEnteralFormulaProperties(jsn : TJsonObject; result : TFhirNutritionOrderEnteralFormula);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('baseFormulaType') then
        result.baseFormulaType := ParseCodeableConcept(jsn.vObj['baseFormulaType']);{q3}
    if jsn.has('baseFormulaProductName') or jsn.has('_baseFormulaProductName') then
        result.baseFormulaProductNameElement := parseString(jsn.node['baseFormulaProductName'], jsn.vObj['_baseFormulaProductName']);{q}
    if jsn.has('additiveType') then
        result.additiveType := ParseCodeableConcept(jsn.vObj['additiveType']);{q3}
    if jsn.has('additiveProductName') or jsn.has('_additiveProductName') then
        result.additiveProductNameElement := parseString(jsn.node['additiveProductName'], jsn.vObj['_additiveProductName']);{q}
    if jsn.has('caloricDensity') then
        result.caloricDensity := ParseQuantity(jsn.vObj['caloricDensity']);{q3}
    if jsn.has('routeofAdministration') then
        result.routeofAdministration := ParseCodeableConcept(jsn.vObj['routeofAdministration']);{q3}
    if jsn.has('administration') then
      iterateArray(jsn.vArr['administration'], result.administrationList, parseNutritionOrderEnteralFormulaAdministration);
    if jsn.has('maxVolumeToDeliver') then
        result.maxVolumeToDeliver := ParseQuantity(jsn.vObj['maxVolumeToDeliver']);{q3}
    if jsn.has('administrationInstruction') or jsn.has('_administrationInstruction') then
        result.administrationInstructionElement := parseString(jsn.node['administrationInstruction'], jsn.vObj['_administrationInstruction']);{q}
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderEnteralFormula(json : TJSONWriter; name : string; elem : TFhirNutritionOrderEnteralFormula; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'baseFormulaType', elem.baseFormulaType); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'baseFormulaProductName', elem.baseFormulaProductNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'baseFormulaProductName', elem.baseFormulaProductNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'additiveType', elem.additiveType); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'additiveProductName', elem.additiveProductNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'additiveProductName', elem.additiveProductNameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'caloricDensity', elem.caloricDensity); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'routeofAdministration', elem.routeofAdministration); {a}
  if (SummaryOption in [soFull, soData]) and (elem.administrationList.Count > 0) then
  begin
    json.valueArray('administration');
    for i := 0 to elem.administrationList.Count - 1 do
      ComposeNutritionOrderEnteralFormulaAdministration(json, '', elem.administrationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'maxVolumeToDeliver', elem.maxVolumeToDeliver); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'administrationInstruction', elem.administrationInstructionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'administrationInstruction', elem.administrationInstructionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNutritionOrderEnteralFormulaAdministration(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrderEnteralFormulaAdministration(jsn)); {2}
end;

function TFHIRJsonParser.ParseNutritionOrderEnteralFormulaAdministration(jsn : TJsonObject) : TFhirNutritionOrderEnteralFormulaAdministration;
begin
  result := TFhirNutritionOrderEnteralFormulaAdministration.create;
  try
    ParseNutritionOrderEnteralFormulaAdministrationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderEnteralFormulaAdministrationProperties(jsn : TJsonObject; result : TFhirNutritionOrderEnteralFormulaAdministration);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('schedule') then
        result.schedule := ParseTiming(jsn.vObj['schedule']);{q3}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('rateQuantity') {a4} then
      result.rate := ParseQuantity(jsn.vObj['rateQuantity']);
    if jsn.has('rateRatio') {a4} then
      result.rate := ParseRatio(jsn.vObj['rateRatio']);
end;

procedure TFHIRJsonComposer.ComposeNutritionOrderEnteralFormulaAdministration(json : TJSONWriter; name : string; elem : TFhirNutritionOrderEnteralFormulaAdministration; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeTiming(json, 'schedule', elem.schedule); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) and (elem.rate is TFhirQuantity) then 
    ComposeQuantity(json, 'rateQuantity', TFhirQuantity(elem.rate)) 
  else if (SummaryOption in [soFull, soData]) and (elem.rate is TFhirRatio) then 
    ComposeRatio(json, 'rateRatio', TFhirRatio(elem.rate)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseNutritionOrder(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseNutritionOrder(jsn)); {2}
end;

function TFHIRJsonParser.ParseNutritionOrder(jsn : TJsonObject) : TFhirNutritionOrder;
begin
  result := TFhirNutritionOrder.create;
  try
    ParseNutritionOrderProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseNutritionOrderProperties(jsn : TJsonObject; result : TFhirNutritionOrder);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirNutritionRequestStatusEnum, SYSTEMS_TFhirNutritionRequestStatusEnum);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('encounter') then
        result.encounter := ParseReference{TFhirEncounter}(jsn.vObj['encounter']);{q3}
    if jsn.has('dateTime') or jsn.has('_dateTime') then
        result.dateTimeElement := parseDateTime(jsn.node['dateTime'], jsn.vObj['_dateTime']);{q}
    if jsn.has('orderer') then
        result.orderer := ParseReference{TFhirPractitioner}(jsn.vObj['orderer']);{q3}
    if jsn.has('allergyIntolerance') then
      iterateArray(jsn.vArr['allergyIntolerance'], result.allergyIntoleranceList, parseReference{TFhirAllergyIntolerance});
    if jsn.has('foodPreferenceModifier') then
      iterateArray(jsn.vArr['foodPreferenceModifier'], result.foodPreferenceModifierList, parseCodeableConcept);
    if jsn.has('excludeFoodModifier') then
      iterateArray(jsn.vArr['excludeFoodModifier'], result.excludeFoodModifierList, parseCodeableConcept);
    if jsn.has('oralDiet') then
        result.oralDiet := ParseNutritionOrderOralDiet(jsn.vObj['oralDiet']);{q3}
    if jsn.has('supplement') then
      iterateArray(jsn.vArr['supplement'], result.supplementList, parseNutritionOrderSupplement);
    if jsn.has('enteralFormula') then
        result.enteralFormula := ParseNutritionOrderEnteralFormula(jsn.vObj['enteralFormula']);{q3}
end;

procedure TFHIRJsonComposer.ComposeNutritionOrder(json : TJSONWriter; name : string; elem : TFhirNutritionOrder; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirNutritionRequestStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirNutritionRequestStatusEnum, false);
  ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(json, 'encounter', elem.encounter); {a}
  ComposeDateTimeValue(json, 'dateTime', elem.dateTimeElement, false);
  ComposeDateTimeProps(json, 'dateTime', elem.dateTimeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('orderer') then
    ComposeReference{TFhirPractitioner}(json, 'orderer', elem.orderer); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('allergyIntolerance') and (elem.allergyIntoleranceList.Count > 0) then
  begin
    json.valueArray('allergyIntolerance');
    for i := 0 to elem.allergyIntoleranceList.Count - 1 do
      ComposeReference{TFhirAllergyIntolerance}(json, '', elem.allergyIntoleranceList[i]); {z - Reference(AllergyIntolerance)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('foodPreferenceModifier') and (elem.foodPreferenceModifierList.Count > 0) then
  begin
    json.valueArray('foodPreferenceModifier');
    for i := 0 to elem.foodPreferenceModifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.foodPreferenceModifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('excludeFoodModifier') and (elem.excludeFoodModifierList.Count > 0) then
  begin
    json.valueArray('excludeFoodModifier');
    for i := 0 to elem.excludeFoodModifierList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.excludeFoodModifierList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('oralDiet') then
    ComposeNutritionOrderOralDiet(json, 'oralDiet', elem.oralDiet); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('supplement') and (elem.supplementList.Count > 0) then
  begin
    json.valueArray('supplement');
    for i := 0 to elem.supplementList.Count - 1 do
      ComposeNutritionOrderSupplement(json, '', elem.supplementList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('enteralFormula') then
    ComposeNutritionOrderEnteralFormula(json, 'enteralFormula', elem.enteralFormula); {a}
end;

{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
procedure TFHIRJsonParser.ParseObservationReferenceRange(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservationReferenceRange(jsn)); {2}
end;

function TFHIRJsonParser.ParseObservationReferenceRange(jsn : TJsonObject) : TFhirObservationReferenceRange;
begin
  result := TFhirObservationReferenceRange.create;
  try
    ParseObservationReferenceRangeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationReferenceRangeProperties(jsn : TJsonObject; result : TFhirObservationReferenceRange);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('low') then
        result.low := ParseQuantity(jsn.vObj['low']);{q3}
    if jsn.has('high') then
        result.high := ParseQuantity(jsn.vObj['high']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('appliesTo') then
      iterateArray(jsn.vArr['appliesTo'], result.appliesToList, parseCodeableConcept);
    if jsn.has('age') then
        result.age := ParseRange(jsn.vObj['age']);{q3}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);{q}
end;

procedure TFHIRJsonComposer.ComposeObservationReferenceRange(json : TJSONWriter; name : string; elem : TFhirObservationReferenceRange; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'low', elem.low); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'high', elem.high); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) and (elem.appliesToList.Count > 0) then
  begin
    json.valueArray('appliesTo');
    for i := 0 to elem.appliesToList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.appliesToList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(json, 'age', elem.age); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseObservationRelated(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservationRelated(jsn)); {2}
end;

function TFHIRJsonParser.ParseObservationRelated(jsn : TJsonObject) : TFhirObservationRelated;
begin
  result := TFhirObservationRelated.create;
  try
    ParseObservationRelatedProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationRelatedProperties(jsn : TJsonObject; result : TFhirObservationRelated);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirObservationRelationshiptypesEnum, SYSTEMS_TFhirObservationRelationshiptypesEnum);
    if jsn.has('target') then
        result.target := ParseReference{Resource}(jsn.vObj['target']);{q3}
end;

procedure TFHIRJsonComposer.ComposeObservationRelated(json : TJSONWriter; name : string; elem : TFhirObservationRelated; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirObservationRelationshiptypesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirObservationRelationshiptypesEnum, false);
  ComposeReference{Resource}(json, 'target', elem.target); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseObservationComponent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservationComponent(jsn)); {2}
end;

function TFHIRJsonParser.ParseObservationComponent(jsn : TJsonObject) : TFhirObservationComponent;
begin
  result := TFhirObservationComponent.create;
  try
    ParseObservationComponentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationComponentProperties(jsn : TJsonObject; result : TFhirObservationComponent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      result.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueSampledData') {a4} then
      result.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('dataAbsentReason') then
        result.dataAbsentReason := ParseCodeableConcept(jsn.vObj['dataAbsentReason']);{q3}
    if jsn.has('interpretation') then
        result.interpretation := ParseCodeableConcept(jsn.vObj['interpretation']);{q3}
    if jsn.has('referenceRange') then
      iterateArray(jsn.vArr['referenceRange'], result.referenceRangeList, parseObservationReferenceRange);
end;

procedure TFHIRJsonComposer.ComposeObservationComponent(json : TJSONWriter; name : string; elem : TFhirObservationComponent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'dataAbsentReason', elem.dataAbsentReason); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'interpretation', elem.interpretation); {a}
  if (SummaryOption in [soFull, soData]) and (elem.referenceRangeList.Count > 0) then
  begin
    json.valueArray('referenceRange');
    for i := 0 to elem.referenceRangeList.Count - 1 do
      ComposeObservationReferenceRange(json, '', elem.referenceRangeList[i]); {z - @Observation.referenceRange}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseObservation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseObservation(jsn)); {2}
end;

function TFHIRJsonParser.ParseObservation(jsn : TJsonObject) : TFhirObservation;
begin
  result := TFhirObservation.create;
  try
    ParseObservationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseObservationProperties(jsn : TJsonObject; result : TFhirObservation);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('effectivePeriod') {a4} then
      result.effective := ParsePeriod(jsn.vObj['effectivePeriod']);
    if jsn.has('effectiveDateTime') or jsn.has('_effectiveDateTime') then
      result.effective := parseDateTime(jsn.node['effectiveDateTime'], jsn.vObj['_effectiveDateTime']);
    if jsn.has('issued') or jsn.has('_issued') then
        result.issuedElement := parseInstant(jsn.node['issued'], jsn.vObj['_issued']);{q}
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], result.performerList, parseReference{Resource});
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      result.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueSampledData') {a4} then
      result.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('dataAbsentReason') then
        result.dataAbsentReason := ParseCodeableConcept(jsn.vObj['dataAbsentReason']);{q3}
    if jsn.has('interpretation') then
        result.interpretation := ParseCodeableConcept(jsn.vObj['interpretation']);{q3}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('bodySite') then
        result.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);{q3}
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('specimen') then
        result.specimen := ParseReference{TFhirSpecimen}(jsn.vObj['specimen']);{q3}
    if jsn.has('device') then
        result.device := ParseReference{Resource}(jsn.vObj['device']);{q3}
    if jsn.has('referenceRange') then
      iterateArray(jsn.vArr['referenceRange'], result.referenceRangeList, parseObservationReferenceRange);
    if jsn.has('related') then
      iterateArray(jsn.vArr['related'], result.relatedList, parseObservationRelated);
    if jsn.has('component') then
      iterateArray(jsn.vArr['component'], result.componentList, parseObservationComponent);
end;

procedure TFHIRJsonComposer.ComposeObservation(json : TJSONWriter; name : string; elem : TFhirObservation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(CarePlan|DeviceRequest|ImmunizationRecommendation|MedicationRequest|NutritionOrder|ProcedureRequest|ReferralRequest)}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('category') and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) then 
    ComposePeriod(json, 'effectivePeriod', TFhirPeriod(elem.effective)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
    ComposeDateTimeProps(json, 'effectiveDateTime', TFhirDateTime(elem.effective), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('issued') then
    ComposeInstantValue(json, 'issued', elem.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('issued') then
    ComposeInstantProps(json, 'issued', elem.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') and (elem.performerList.Count > 0) then
  begin
    json.valueArray('performer');
    for i := 0 to elem.performerList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.performerList[i]); {z - Reference(Practitioner|Organization|Patient|RelatedPerson)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('dataAbsentReason') then
    ComposeCodeableConcept(json, 'dataAbsentReason', elem.dataAbsentReason); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('interpretation') then
    ComposeCodeableConcept(json, 'interpretation', elem.interpretation); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('bodySite') then
    ComposeCodeableConcept(json, 'bodySite', elem.bodySite); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('method') then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('specimen') then
    ComposeReference{TFhirSpecimen}(json, 'specimen', elem.specimen); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('device') then
    ComposeReference{Resource}(json, 'device', elem.device); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('referenceRange') and (elem.referenceRangeList.Count > 0) then
  begin
    json.valueArray('referenceRange');
    for i := 0 to elem.referenceRangeList.Count - 1 do
      ComposeObservationReferenceRange(json, '', elem.referenceRangeList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('related') and (elem.relatedList.Count > 0) then
  begin
    json.valueArray('related');
    for i := 0 to elem.relatedList.Count - 1 do
      ComposeObservationRelated(json, '', elem.relatedList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('component') and (elem.componentList.Count > 0) then
  begin
    json.valueArray('component');
    for i := 0 to elem.componentList.Count - 1 do
      ComposeObservationComponent(json, '', elem.componentList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OPERATIONDEFINITION}
procedure TFHIRJsonParser.ParseOperationDefinitionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationDefinitionParameter(jsn)); {2}
end;

function TFHIRJsonParser.ParseOperationDefinitionParameter(jsn : TJsonObject) : TFhirOperationDefinitionParameter;
begin
  result := TFhirOperationDefinitionParameter.create;
  try
    ParseOperationDefinitionParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionParameterProperties(jsn : TJsonObject; result : TFhirOperationDefinitionParameter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseCode(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('use') or jsn.has('_use')  then
      result.useElement := parseEnum(jsn.path+'/use', jsn.node['use'], jsn.vObj['_use'], CODES_TFhirOperationParameterUseEnum, SYSTEMS_TFhirOperationParameterUseEnum);
    if jsn.has('min') or jsn.has('_min') then
        result.minElement := parseInteger(jsn.node['min'], jsn.vObj['_min']);{q}
    if jsn.has('max') or jsn.has('_max') then
        result.maxElement := parseString(jsn.node['max'], jsn.vObj['_max']);{q}
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum);
    if jsn.has('searchType') or jsn.has('_searchType')  then
      result.searchTypeElement := parseEnum(jsn.path+'/searchType', jsn.node['searchType'], jsn.vObj['_searchType'], CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum);
    if jsn.has('profile') then
        result.profile := ParseReference{TFhirStructureDefinition}(jsn.vObj['profile']);{q3}
    if jsn.has('binding') then
        result.binding := ParseOperationDefinitionParameterBinding(jsn.vObj['binding']);{q3}
    if jsn.has('part') then
      iterateArray(jsn.vArr['part'], result.partList, parseOperationDefinitionParameter);
end;

procedure TFHIRJsonComposer.ComposeOperationDefinitionParameter(json : TJSONWriter; name : string; elem : TFhirOperationDefinitionParameter; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeValue(json, 'name', elem.nameElement, false);
  ComposeCodeProps(json, 'name', elem.nameElement, false);
  ComposeEnumValue(json, 'use', elem.UseElement, CODES_TFhirOperationParameterUseEnum, false);
  ComposeEnumProps(json, 'use', elem.UseElement, CODES_TFhirOperationParameterUseEnum, false);
  ComposeIntegerValue(json, 'min', elem.minElement, false);
  ComposeIntegerProps(json, 'min', elem.minElement, false);
  ComposeStringValue(json, 'max', elem.maxElement, false);
  ComposeStringProps(json, 'max', elem.maxElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'searchType', elem.SearchTypeElement, CODES_TFhirSearchParamTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'searchType', elem.SearchTypeElement, CODES_TFhirSearchParamTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirStructureDefinition}(json, 'profile', elem.profile); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeOperationDefinitionParameterBinding(json, 'binding', elem.binding); {a}
  if (SummaryOption in [soFull, soData]) and (elem.partList.Count > 0) then
  begin
    json.valueArray('part');
    for i := 0 to elem.partList.Count - 1 do
      ComposeOperationDefinitionParameter(json, '', elem.partList[i]); {z - @OperationDefinition.parameter}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionParameterBinding(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationDefinitionParameterBinding(jsn)); {2}
end;

function TFHIRJsonParser.ParseOperationDefinitionParameterBinding(jsn : TJsonObject) : TFhirOperationDefinitionParameterBinding;
begin
  result := TFhirOperationDefinitionParameterBinding.create;
  try
    ParseOperationDefinitionParameterBindingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionParameterBindingProperties(jsn : TJsonObject; result : TFhirOperationDefinitionParameterBinding);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('strength') or jsn.has('_strength')  then
      result.strengthElement := parseEnum(jsn.path+'/strength', jsn.node['strength'], jsn.vObj['_strength'], CODES_TFhirBindingStrengthEnum, SYSTEMS_TFhirBindingStrengthEnum);
    if jsn.has('valueSetReference') {a3} then
      result.valueSet := ParseReference(jsn.vObj['valueSetReference']);
    if jsn.has('valueSetUri') or jsn.has('_valueSetUri') then
      result.valueSet := parseUri(jsn.node['valueSetUri'], jsn.vObj['_valueSetUri']);
end;

procedure TFHIRJsonComposer.ComposeOperationDefinitionParameterBinding(json : TJSONWriter; name : string; elem : TFhirOperationDefinitionParameterBinding; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'strength', elem.StrengthElement, CODES_TFhirBindingStrengthEnum, false);
  ComposeEnumProps(json, 'strength', elem.StrengthElement, CODES_TFhirBindingStrengthEnum, false);
  if (elem.valueSet is TFhirReference) then
    ComposeReference(json, 'valueSetReference', TFhirReference(elem.valueSet))
  else if (elem.valueSet is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueSetUri', TFhirUri(elem.valueSet), false);
    ComposeUriProps(json, 'valueSetUri', TFhirUri(elem.valueSet), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionOverload(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationDefinitionOverload(jsn)); {2}
end;

function TFHIRJsonParser.ParseOperationDefinitionOverload(jsn : TJsonObject) : TFhirOperationDefinitionOverload;
begin
  result := TFhirOperationDefinitionOverload.create;
  try
    ParseOperationDefinitionOverloadProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionOverloadProperties(jsn : TJsonObject; result : TFhirOperationDefinitionOverload);
begin
    ParseBackboneElementProperties(jsn, result);
      if jsn.has('parameterName') or jsn.has('_parameterName') then
      iteratePrimitiveArray(jsn.vArr['parameterName'], jsn.vArr['_parameterName'], result.parameterNameList, parseString);
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeOperationDefinitionOverload(json : TJSONWriter; name : string; elem : TFhirOperationDefinitionOverload; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.parameterNameList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.parameterNameList.Count - 1 do
    begin
      ext := ext or ((elem.parameterNameList[i].id <> '') or (elem.parameterNameList[i].hasExtensionList) {no-comments or (elem.parameterNameList[i].hasComments)});
      val := val or (elem.parameterNameList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('parameterName');
      for i := 0 to elem.parameterNameList.Count - 1 do
        ComposeStringValue(json, '',elem.parameterNameList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_parameterName');
      for i := 0 to elem.parameterNameList.Count - 1 do
        ComposeStringProps(json, '',elem.parameterNameList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOperationDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseOperationDefinition(jsn : TJsonObject) : TFhirOperationDefinition;
begin
  result := TFhirOperationDefinition.create;
  try
    ParseOperationDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationDefinitionProperties(jsn : TJsonObject; result : TFhirOperationDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirOperationKindEnum, SYSTEMS_TFhirOperationKindEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('idempotent') or jsn.has('_idempotent') then
        result.idempotentElement := parseBoolean(jsn.node['idempotent'], jsn.vObj['_idempotent']);{q}
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
    if jsn.has('base') then
        result.base := ParseReference{TFhirOperationDefinition}(jsn.vObj['base']);{q3}
    if jsn.has('resource') or jsn.has('_resource') then
      iterateEnumArray(jsn.vArr['resource'], jsn.vArr['_resource'], jsn.path+'/resource', result.resource, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := parseBoolean(jsn.node['system'], jsn.vObj['_system']);{q}
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := parseBoolean(jsn.node['type'], jsn.vObj['_type']);{q}
    if jsn.has('instance') or jsn.has('_instance') then
        result.instanceElement := parseBoolean(jsn.node['instance'], jsn.vObj['_instance']);{q}
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], result.parameterList, parseOperationDefinitionParameter);
    if jsn.has('overload') then
      iterateArray(jsn.vArr['overload'], result.overloadList, parseOperationDefinitionOverload);
end;

procedure TFHIRJsonComposer.ComposeOperationDefinition(json : TJSONWriter; name : string; elem : TFhirOperationDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirOperationKindEnum, false);
  ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirOperationKindEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('idempotent') then
    ComposeBooleanValue(json, 'idempotent', elem.idempotentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('idempotent') then
    ComposeBooleanProps(json, 'idempotent', elem.idempotentElement, false);
  ComposeCodeValue(json, 'code', elem.codeElement, false);
  ComposeCodeProps(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('base') then
    ComposeReference{TFhirOperationDefinition}(json, 'base', elem.base); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('resource') and (elem.resource.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.resource.Count - 1 do
    begin
      val := val or (elem.resource[i].hasPrimitiveValue);
      ext := ext or ((elem.resource[i].id <> '') or (elem.resource[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('resource');
      for i := 0 to elem.resource.Count - 1 do
        ComposeEnumValue(json, '', elem.resource[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_resource');
      for i := 0 to elem.resource.Count - 1 do
        ComposeEnumProps(json, '', elem.resource[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
  end;
  ComposeBooleanValue(json, 'system', elem.systemElement, false);
  ComposeBooleanProps(json, 'system', elem.systemElement, false);
  ComposeBooleanValue(json, 'type', elem.type_Element, false);
  ComposeBooleanProps(json, 'type', elem.type_Element, false);
  ComposeBooleanValue(json, 'instance', elem.instanceElement, false);
  ComposeBooleanProps(json, 'instance', elem.instanceElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('parameter') and (elem.parameterList.Count > 0) then
  begin
    json.valueArray('parameter');
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeOperationDefinitionParameter(json, '', elem.parameterList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('overload') and (elem.overloadList.Count > 0) then
  begin
    json.valueArray('overload');
    for i := 0 to elem.overloadList.Count - 1 do
      ComposeOperationDefinitionOverload(json, '', elem.overloadList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
procedure TFHIRJsonParser.ParseOperationOutcomeIssue(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationOutcomeIssue(jsn)); {2}
end;

function TFHIRJsonParser.ParseOperationOutcomeIssue(jsn : TJsonObject) : TFhirOperationOutcomeIssue;
begin
  result := TFhirOperationOutcomeIssue.create;
  try
    ParseOperationOutcomeIssueProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationOutcomeIssueProperties(jsn : TJsonObject; result : TFhirOperationOutcomeIssue);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('severity') or jsn.has('_severity')  then
      result.severityElement := parseEnum(jsn.path+'/severity', jsn.node['severity'], jsn.vObj['_severity'], CODES_TFhirIssueSeverityEnum, SYSTEMS_TFhirIssueSeverityEnum);
    if jsn.has('code') or jsn.has('_code')  then
      result.codeElement := parseEnum(jsn.path+'/code', jsn.node['code'], jsn.vObj['_code'], CODES_TFhirIssueTypeEnum, SYSTEMS_TFhirIssueTypeEnum);
    if jsn.has('details') then
        result.details := ParseCodeableConcept(jsn.vObj['details']);{q3}
    if jsn.has('diagnostics') or jsn.has('_diagnostics') then
        result.diagnosticsElement := parseString(jsn.node['diagnostics'], jsn.vObj['_diagnostics']);{q}
      if jsn.has('location') or jsn.has('_location') then
      iteratePrimitiveArray(jsn.vArr['location'], jsn.vArr['_location'], result.locationList, parseString);
      if jsn.has('expression') or jsn.has('_expression') then
      iteratePrimitiveArray(jsn.vArr['expression'], jsn.vArr['_expression'], result.expressionList, parseString);
end;

procedure TFHIRJsonComposer.ComposeOperationOutcomeIssue(json : TJSONWriter; name : string; elem : TFhirOperationOutcomeIssue; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'severity', elem.SeverityElement, CODES_TFhirIssueSeverityEnum, false);
  ComposeEnumProps(json, 'severity', elem.SeverityElement, CODES_TFhirIssueSeverityEnum, false);
  ComposeEnumValue(json, 'code', elem.CodeElement, CODES_TFhirIssueTypeEnum, false);
  ComposeEnumProps(json, 'code', elem.CodeElement, CODES_TFhirIssueTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'details', elem.details); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'diagnostics', elem.diagnosticsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'diagnostics', elem.diagnosticsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.locationList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.locationList.Count - 1 do
    begin
      ext := ext or ((elem.locationList[i].id <> '') or (elem.locationList[i].hasExtensionList) {no-comments or (elem.locationList[i].hasComments)});
      val := val or (elem.locationList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('location');
      for i := 0 to elem.locationList.Count - 1 do
        ComposeStringValue(json, '',elem.locationList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_location');
      for i := 0 to elem.locationList.Count - 1 do
        ComposeStringProps(json, '',elem.locationList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.expressionList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.expressionList.Count - 1 do
    begin
      ext := ext or ((elem.expressionList[i].id <> '') or (elem.expressionList[i].hasExtensionList) {no-comments or (elem.expressionList[i].hasComments)});
      val := val or (elem.expressionList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('expression');
      for i := 0 to elem.expressionList.Count - 1 do
        ComposeStringValue(json, '',elem.expressionList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_expression');
      for i := 0 to elem.expressionList.Count - 1 do
        ComposeStringProps(json, '',elem.expressionList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOperationOutcome(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOperationOutcome(jsn)); {2}
end;

function TFHIRJsonParser.ParseOperationOutcome(jsn : TJsonObject) : TFhirOperationOutcome;
begin
  result := TFhirOperationOutcome.create;
  try
    ParseOperationOutcomeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOperationOutcomeProperties(jsn : TJsonObject; result : TFhirOperationOutcome);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('issue') then
      iterateArray(jsn.vArr['issue'], result.issueList, parseOperationOutcomeIssue);
end;

procedure TFHIRJsonComposer.ComposeOperationOutcome(json : TJSONWriter; name : string; elem : TFhirOperationOutcome; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (elem.issueList.Count > 0) then
  begin
    json.valueArray('issue');
    for i := 0 to elem.issueList.Count - 1 do
      ComposeOperationOutcomeIssue(json, '', elem.issueList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
procedure TFHIRJsonParser.ParseOrganizationContact(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOrganizationContact(jsn)); {2}
end;

function TFHIRJsonParser.ParseOrganizationContact(jsn : TJsonObject) : TFhirOrganizationContact;
begin
  result := TFhirOrganizationContact.create;
  try
    ParseOrganizationContactProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOrganizationContactProperties(jsn : TJsonObject; result : TFhirOrganizationContact);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('purpose') then
        result.purpose := ParseCodeableConcept(jsn.vObj['purpose']);{q3}
    if jsn.has('name') then
        result.name := ParseHumanName(jsn.vObj['name']);{q3}
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('address') then
        result.address := ParseAddress(jsn.vObj['address']);{q3}
end;

procedure TFHIRJsonComposer.ComposeOrganizationContact(json : TJSONWriter; name : string; elem : TFhirOrganizationContact; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'purpose', elem.purpose); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeHumanName(json, 'name', elem.name); {a}
  if (SummaryOption in [soFull, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeAddress(json, 'address', elem.address); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseOrganization(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseOrganization(jsn)); {2}
end;

function TFHIRJsonParser.ParseOrganization(jsn : TJsonObject) : TFhirOrganization;
begin
  result := TFhirOrganization.create;
  try
    ParseOrganizationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseOrganizationProperties(jsn : TJsonObject; result : TFhirOrganization);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);{q}
    if jsn.has('type') then
      iterateArray(jsn.vArr['type'], result.type_List, parseCodeableConcept);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
      if jsn.has('alias') or jsn.has('_alias') then
      iteratePrimitiveArray(jsn.vArr['alias'], jsn.vArr['_alias'], result.aliasList, parseString);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], result.addressList, parseAddress);
    if jsn.has('partOf') then
        result.partOf := ParseReference{TFhirOrganization}(jsn.vObj['partOf']);{q3}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseOrganizationContact);
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
end;

procedure TFHIRJsonComposer.ComposeOrganization(json : TJSONWriter; name : string; elem : TFhirOrganization; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') and (elem.type_List.Count > 0) then
  begin
    json.valueArray('type');
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(json, '', elem.type_List[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('alias') and (elem.aliasList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.aliasList.Count - 1 do
    begin
      ext := ext or ((elem.aliasList[i].id <> '') or (elem.aliasList[i].hasExtensionList) {no-comments or (elem.aliasList[i].hasComments)});
      val := val or (elem.aliasList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('alias');
      for i := 0 to elem.aliasList.Count - 1 do
        ComposeStringValue(json, '',elem.aliasList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_alias');
      for i := 0 to elem.aliasList.Count - 1 do
        ComposeStringProps(json, '',elem.aliasList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('telecom') and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('address') and (elem.addressList.Count > 0) then
  begin
    json.valueArray('address');
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(json, '', elem.addressList[i]); {z - Address}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') then
    ComposeReference{TFhirOrganization}(json, 'partOf', elem.partOf); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeOrganizationContact(json, '', elem.contactList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('endpoint') and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_PATIENT}
procedure TFHIRJsonParser.ParsePatientContact(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePatientContact(jsn)); {2}
end;

function TFHIRJsonParser.ParsePatientContact(jsn : TJsonObject) : TFhirPatientContact;
begin
  result := TFhirPatientContact.create;
  try
    ParsePatientContactProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePatientContactProperties(jsn : TJsonObject; result : TFhirPatientContact);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('relationship') then
      iterateArray(jsn.vArr['relationship'], result.relationshipList, parseCodeableConcept);
    if jsn.has('name') then
        result.name := ParseHumanName(jsn.vObj['name']);{q3}
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('address') then
        result.address := ParseAddress(jsn.vObj['address']);{q3}
    if jsn.has('gender') or jsn.has('_gender')  then
      result.genderElement := parseEnum(jsn.path+'/gender', jsn.node['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposePatientContact(json : TJSONWriter; name : string; elem : TFhirPatientContact; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.relationshipList.Count > 0) then
  begin
    json.valueArray('relationship');
    for i := 0 to elem.relationshipList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.relationshipList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeHumanName(json, 'name', elem.name); {a}
  if (SummaryOption in [soFull, soData]) and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeAddress(json, 'address', elem.address); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePatientAnimal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePatientAnimal(jsn)); {2}
end;

function TFHIRJsonParser.ParsePatientAnimal(jsn : TJsonObject) : TFhirPatientAnimal;
begin
  result := TFhirPatientAnimal.create;
  try
    ParsePatientAnimalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePatientAnimalProperties(jsn : TJsonObject; result : TFhirPatientAnimal);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('species') then
        result.species := ParseCodeableConcept(jsn.vObj['species']);{q3}
    if jsn.has('breed') then
        result.breed := ParseCodeableConcept(jsn.vObj['breed']);{q3}
    if jsn.has('genderStatus') then
        result.genderStatus := ParseCodeableConcept(jsn.vObj['genderStatus']);{q3}
end;

procedure TFHIRJsonComposer.ComposePatientAnimal(json : TJSONWriter; name : string; elem : TFhirPatientAnimal; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'species', elem.species); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'breed', elem.breed); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'genderStatus', elem.genderStatus); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePatientCommunication(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePatientCommunication(jsn)); {2}
end;

function TFHIRJsonParser.ParsePatientCommunication(jsn : TJsonObject) : TFhirPatientCommunication;
begin
  result := TFhirPatientCommunication.create;
  try
    ParsePatientCommunicationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePatientCommunicationProperties(jsn : TJsonObject; result : TFhirPatientCommunication);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('language') then
        result.language := ParseCodeableConcept(jsn.vObj['language']);{q3}
    if jsn.has('preferred') or jsn.has('_preferred') then
        result.preferredElement := parseBoolean(jsn.node['preferred'], jsn.vObj['_preferred']);{q}
end;

procedure TFHIRJsonComposer.ComposePatientCommunication(json : TJSONWriter; name : string; elem : TFhirPatientCommunication; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'language', elem.language); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'preferred', elem.preferredElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'preferred', elem.preferredElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePatientLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePatientLink(jsn)); {2}
end;

function TFHIRJsonParser.ParsePatientLink(jsn : TJsonObject) : TFhirPatientLink;
begin
  result := TFhirPatientLink.create;
  try
    ParsePatientLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePatientLinkProperties(jsn : TJsonObject; result : TFhirPatientLink);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('other') then
        result.other := ParseReference{Resource}(jsn.vObj['other']);{q3}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirLinkTypeEnum, SYSTEMS_TFhirLinkTypeEnum);
end;

procedure TFHIRJsonComposer.ComposePatientLink(json : TJSONWriter; name : string; elem : TFhirPatientLink; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'other', elem.other); {a}
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirLinkTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirLinkTypeEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePatient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePatient(jsn)); {2}
end;

function TFHIRJsonParser.ParsePatient(jsn : TJsonObject) : TFhirPatient;
begin
  result := TFhirPatient.create;
  try
    ParsePatientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePatientProperties(jsn : TJsonObject; result : TFhirPatient);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);{q}
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], result.nameList, parseHumanName);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('gender') or jsn.has('_gender')  then
      result.genderElement := parseEnum(jsn.path+'/gender', jsn.node['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('birthDate') or jsn.has('_birthDate') then
        result.birthDateElement := parseDate(jsn.node['birthDate'], jsn.vObj['_birthDate']);{q}
    if jsn.has('deceasedBoolean') or jsn.has('_deceasedBoolean') then
      result.deceased := parseBoolean(jsn.node['deceasedBoolean'], jsn.vObj['_deceasedBoolean']);
    if jsn.has('deceasedDateTime') or jsn.has('_deceasedDateTime') then
      result.deceased := parseDateTime(jsn.node['deceasedDateTime'], jsn.vObj['_deceasedDateTime']);
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], result.addressList, parseAddress);
    if jsn.has('maritalStatus') then
        result.maritalStatus := ParseCodeableConcept(jsn.vObj['maritalStatus']);{q3}
    if jsn.has('multipleBirthBoolean') or jsn.has('_multipleBirthBoolean') then
      result.multipleBirth := parseBoolean(jsn.node['multipleBirthBoolean'], jsn.vObj['_multipleBirthBoolean']);
    if jsn.has('multipleBirthInteger') or jsn.has('_multipleBirthInteger') then
      result.multipleBirth := parseInteger(jsn.node['multipleBirthInteger'], jsn.vObj['_multipleBirthInteger']);
    if jsn.has('photo') then
      iterateArray(jsn.vArr['photo'], result.photoList, parseAttachment);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parsePatientContact);
    if jsn.has('animal') then
        result.animal := ParsePatientAnimal(jsn.vObj['animal']);{q3}
    if jsn.has('communication') then
      iterateArray(jsn.vArr['communication'], result.communicationList, parsePatientCommunication);
    if jsn.has('generalPractitioner') then
      iterateArray(jsn.vArr['generalPractitioner'], result.generalPractitionerList, parseReference{Resource});
    if jsn.has('managingOrganization') then
        result.managingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['managingOrganization']);{q3}
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], result.link_List, parsePatientLink);
end;

procedure TFHIRJsonComposer.ComposePatient(json : TJSONWriter; name : string; elem : TFhirPatient; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') and (elem.nameList.Count > 0) then
  begin
    json.valueArray('name');
    for i := 0 to elem.nameList.Count - 1 do
      ComposeHumanName(json, '', elem.nameList[i]); {z - HumanName}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('telecom') and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gender') then
    ComposeEnumValue(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gender') then
    ComposeEnumProps(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('birthDate') then
    ComposeDateValue(json, 'birthDate', elem.birthDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('birthDate') then
    ComposeDateProps(json, 'birthDate', elem.birthDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'deceasedBoolean', TFhirBoolean(elem.deceased), false);
    ComposeBooleanProps(json, 'deceasedBoolean', TFhirBoolean(elem.deceased), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'deceasedDateTime', TFhirDateTime(elem.deceased), false);
    ComposeDateTimeProps(json, 'deceasedDateTime', TFhirDateTime(elem.deceased), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('address') and (elem.addressList.Count > 0) then
  begin
    json.valueArray('address');
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(json, '', elem.addressList[i]); {z - Address}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('maritalStatus') then
    ComposeCodeableConcept(json, 'maritalStatus', elem.maritalStatus); {a}
  if (SummaryOption in [soFull, soData]) and (elem.multipleBirth is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'multipleBirthBoolean', TFhirBoolean(elem.multipleBirth), false);
    ComposeBooleanProps(json, 'multipleBirthBoolean', TFhirBoolean(elem.multipleBirth), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.multipleBirth is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'multipleBirthInteger', TFhirInteger(elem.multipleBirth), false);
    ComposeIntegerProps(json, 'multipleBirthInteger', TFhirInteger(elem.multipleBirth), false);
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('photo') and (elem.photoList.Count > 0) then
  begin
    json.valueArray('photo');
    for i := 0 to elem.photoList.Count - 1 do
      ComposeAttachment(json, '', elem.photoList[i]); {z - Attachment}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposePatientContact(json, '', elem.contactList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('animal') then
    ComposePatientAnimal(json, 'animal', elem.animal); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('communication') and (elem.communicationList.Count > 0) then
  begin
    json.valueArray('communication');
    for i := 0 to elem.communicationList.Count - 1 do
      ComposePatientCommunication(json, '', elem.communicationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('generalPractitioner') and (elem.generalPractitionerList.Count > 0) then
  begin
    json.valueArray('generalPractitioner');
    for i := 0 to elem.generalPractitionerList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.generalPractitionerList[i]); {z - Reference(Organization|Practitioner)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('managingOrganization') then
    ComposeReference{TFhirOrganization}(json, 'managingOrganization', elem.managingOrganization); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('link_') and (elem.link_List.Count > 0) then
  begin
    json.valueArray('link');
    for i := 0 to elem.link_List.Count - 1 do
      ComposePatientLink(json, '', elem.link_List[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
procedure TFHIRJsonParser.ParsePaymentNotice(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePaymentNotice(jsn)); {2}
end;

function TFHIRJsonParser.ParsePaymentNotice(jsn : TJsonObject) : TFhirPaymentNotice;
begin
  result := TFhirPaymentNotice.create;
  try
    ParsePaymentNoticeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePaymentNoticeProperties(jsn : TJsonObject; result : TFhirPaymentNotice);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('request') then
        result.request := ParseReference{TFhirReference}(jsn.vObj['request']);{q3}
    if jsn.has('response') then
        result.response := ParseReference{TFhirReference}(jsn.vObj['response']);{q3}
    if jsn.has('statusDate') or jsn.has('_statusDate') then
        result.statusDateElement := parseDate(jsn.node['statusDate'], jsn.vObj['_statusDate']);{q}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('target') then
        result.target := ParseReference{TFhirOrganization}(jsn.vObj['target']);{q3}
    if jsn.has('provider') then
        result.provider := ParseReference{TFhirPractitioner}(jsn.vObj['provider']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('paymentStatus') then
        result.paymentStatus := ParseCodeableConcept(jsn.vObj['paymentStatus']);{q3}
end;

procedure TFHIRJsonComposer.ComposePaymentNotice(json : TJSONWriter; name : string; elem : TFhirPaymentNotice; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('request') then
    ComposeReference{TFhirReference}(json, 'request', elem.request); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('response') then
    ComposeReference{TFhirReference}(json, 'response', elem.response); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('statusDate') then
    ComposeDateValue(json, 'statusDate', elem.statusDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('statusDate') then
    ComposeDateProps(json, 'statusDate', elem.statusDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('target') then
    ComposeReference{TFhirOrganization}(json, 'target', elem.target); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('provider') then
    ComposeReference{TFhirPractitioner}(json, 'provider', elem.provider); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('organization') then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('paymentStatus') then
    ComposeCodeableConcept(json, 'paymentStatus', elem.paymentStatus); {a}
end;

{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
procedure TFHIRJsonParser.ParsePaymentReconciliationDetail(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePaymentReconciliationDetail(jsn)); {2}
end;

function TFHIRJsonParser.ParsePaymentReconciliationDetail(jsn : TJsonObject) : TFhirPaymentReconciliationDetail;
begin
  result := TFhirPaymentReconciliationDetail.create;
  try
    ParsePaymentReconciliationDetailProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePaymentReconciliationDetailProperties(jsn : TJsonObject; result : TFhirPaymentReconciliationDetail);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('request') then
        result.request := ParseReference{TFhirReference}(jsn.vObj['request']);{q3}
    if jsn.has('response') then
        result.response := ParseReference{TFhirReference}(jsn.vObj['response']);{q3}
    if jsn.has('submitter') then
        result.submitter := ParseReference{TFhirOrganization}(jsn.vObj['submitter']);{q3}
    if jsn.has('payee') then
        result.payee := ParseReference{TFhirOrganization}(jsn.vObj['payee']);{q3}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDate(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('amount') then
        result.amount := ParseMoney(jsn.vObj['amount']);{q3}
end;

procedure TFHIRJsonComposer.ComposePaymentReconciliationDetail(json : TJSONWriter; name : string; elem : TFhirPaymentReconciliationDetail; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'request', elem.request); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'response', elem.response); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'submitter', elem.submitter); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'payee', elem.payee); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(json, 'amount', elem.amount); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePaymentReconciliationProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePaymentReconciliationProcessNote(jsn)); {2}
end;

function TFHIRJsonParser.ParsePaymentReconciliationProcessNote(jsn : TJsonObject) : TFhirPaymentReconciliationProcessNote;
begin
  result := TFhirPaymentReconciliationProcessNote.create;
  try
    ParsePaymentReconciliationProcessNoteProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePaymentReconciliationProcessNoteProperties(jsn : TJsonObject; result : TFhirPaymentReconciliationProcessNote);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);{q}
end;

procedure TFHIRJsonComposer.ComposePaymentReconciliationProcessNote(json : TJSONWriter; name : string; elem : TFhirPaymentReconciliationProcessNote; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePaymentReconciliation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePaymentReconciliation(jsn)); {2}
end;

function TFHIRJsonParser.ParsePaymentReconciliation(jsn : TJsonObject) : TFhirPaymentReconciliation;
begin
  result := TFhirPaymentReconciliation.create;
  try
    ParsePaymentReconciliationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePaymentReconciliationProperties(jsn : TJsonObject; result : TFhirPaymentReconciliation);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('request') then
        result.request := ParseReference{TFhirProcessRequest}(jsn.vObj['request']);{q3}
    if jsn.has('outcome') then
        result.outcome := ParseCodeableConcept(jsn.vObj['outcome']);{q3}
    if jsn.has('disposition') or jsn.has('_disposition') then
        result.dispositionElement := parseString(jsn.node['disposition'], jsn.vObj['_disposition']);{q}
    if jsn.has('requestProvider') then
        result.requestProvider := ParseReference{TFhirPractitioner}(jsn.vObj['requestProvider']);{q3}
    if jsn.has('requestOrganization') then
        result.requestOrganization := ParseReference{TFhirOrganization}(jsn.vObj['requestOrganization']);{q3}
    if jsn.has('detail') then
      iterateArray(jsn.vArr['detail'], result.detailList, parsePaymentReconciliationDetail);
    if jsn.has('form') then
        result.form := ParseCodeableConcept(jsn.vObj['form']);{q3}
    if jsn.has('total') then
        result.total := ParseMoney(jsn.vObj['total']);{q3}
    if jsn.has('processNote') then
      iterateArray(jsn.vArr['processNote'], result.processNoteList, parsePaymentReconciliationProcessNote);
end;

procedure TFHIRJsonComposer.ComposePaymentReconciliation(json : TJSONWriter; name : string; elem : TFhirPaymentReconciliation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('organization') then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('request') then
    ComposeReference{TFhirProcessRequest}(json, 'request', elem.request); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('outcome') then
    ComposeCodeableConcept(json, 'outcome', elem.outcome); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeStringValue(json, 'disposition', elem.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeStringProps(json, 'disposition', elem.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('requestProvider') then
    ComposeReference{TFhirPractitioner}(json, 'requestProvider', elem.requestProvider); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('requestOrganization') then
    ComposeReference{TFhirOrganization}(json, 'requestOrganization', elem.requestOrganization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('detail') and (elem.detailList.Count > 0) then
  begin
    json.valueArray('detail');
    for i := 0 to elem.detailList.Count - 1 do
      ComposePaymentReconciliationDetail(json, '', elem.detailList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('form') then
    ComposeCodeableConcept(json, 'form', elem.form); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('total') then
    ComposeMoney(json, 'total', elem.total); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('processNote') and (elem.processNoteList.Count > 0) then
  begin
    json.valueArray('processNote');
    for i := 0 to elem.processNoteList.Count - 1 do
      ComposePaymentReconciliationProcessNote(json, '', elem.processNoteList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
procedure TFHIRJsonParser.ParsePersonLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePersonLink(jsn)); {2}
end;

function TFHIRJsonParser.ParsePersonLink(jsn : TJsonObject) : TFhirPersonLink;
begin
  result := TFhirPersonLink.create;
  try
    ParsePersonLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePersonLinkProperties(jsn : TJsonObject; result : TFhirPersonLink);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('target') then
        result.target := ParseReference{Resource}(jsn.vObj['target']);{q3}
    if jsn.has('assurance') or jsn.has('_assurance')  then
      result.assuranceElement := parseEnum(jsn.path+'/assurance', jsn.node['assurance'], jsn.vObj['_assurance'], CODES_TFhirIdentityAssuranceLevelEnum, SYSTEMS_TFhirIdentityAssuranceLevelEnum);
end;

procedure TFHIRJsonComposer.ComposePersonLink(json : TJSONWriter; name : string; elem : TFhirPersonLink; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'target', elem.target); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'assurance', elem.AssuranceElement, CODES_TFhirIdentityAssuranceLevelEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'assurance', elem.AssuranceElement, CODES_TFhirIdentityAssuranceLevelEnum, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePerson(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePerson(jsn)); {2}
end;

function TFHIRJsonParser.ParsePerson(jsn : TJsonObject) : TFhirPerson;
begin
  result := TFhirPerson.create;
  try
    ParsePersonProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePersonProperties(jsn : TJsonObject; result : TFhirPerson);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], result.nameList, parseHumanName);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('gender') or jsn.has('_gender')  then
      result.genderElement := parseEnum(jsn.path+'/gender', jsn.node['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('birthDate') or jsn.has('_birthDate') then
        result.birthDateElement := parseDate(jsn.node['birthDate'], jsn.vObj['_birthDate']);{q}
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], result.addressList, parseAddress);
    if jsn.has('photo') then
        result.photo := ParseAttachment(jsn.vObj['photo']);{q3}
    if jsn.has('managingOrganization') then
        result.managingOrganization := ParseReference{TFhirOrganization}(jsn.vObj['managingOrganization']);{q3}
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);{q}
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], result.link_List, parsePersonLink);
end;

procedure TFHIRJsonComposer.ComposePerson(json : TJSONWriter; name : string; elem : TFhirPerson; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') and (elem.nameList.Count > 0) then
  begin
    json.valueArray('name');
    for i := 0 to elem.nameList.Count - 1 do
      ComposeHumanName(json, '', elem.nameList[i]); {z - HumanName}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('telecom') and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gender') then
    ComposeEnumValue(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gender') then
    ComposeEnumProps(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('birthDate') then
    ComposeDateValue(json, 'birthDate', elem.birthDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('birthDate') then
    ComposeDateProps(json, 'birthDate', elem.birthDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('address') and (elem.addressList.Count > 0) then
  begin
    json.valueArray('address');
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(json, '', elem.addressList[i]); {z - Address}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('photo') then
    ComposeAttachment(json, 'photo', elem.photo); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('managingOrganization') then
    ComposeReference{TFhirOrganization}(json, 'managingOrganization', elem.managingOrganization); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('link_') and (elem.link_List.Count > 0) then
  begin
    json.valueArray('link');
    for i := 0 to elem.link_List.Count - 1 do
      ComposePersonLink(json, '', elem.link_List[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
procedure TFHIRJsonParser.ParsePlanDefinitionGoal(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionGoal(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinitionGoal(jsn : TJsonObject) : TFhirPlanDefinitionGoal;
begin
  result := TFhirPlanDefinitionGoal.create;
  try
    ParsePlanDefinitionGoalProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionGoalProperties(jsn : TJsonObject; result : TFhirPlanDefinitionGoal);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('description') then
        result.description := ParseCodeableConcept(jsn.vObj['description']);{q3}
    if jsn.has('priority') then
        result.priority := ParseCodeableConcept(jsn.vObj['priority']);{q3}
    if jsn.has('start') then
        result.start := ParseCodeableConcept(jsn.vObj['start']);{q3}
    if jsn.has('addresses') then
      iterateArray(jsn.vArr['addresses'], result.addressesList, parseCodeableConcept);
    if jsn.has('documentation') then
      iterateArray(jsn.vArr['documentation'], result.documentationList, parseRelatedArtifact);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], result.targetList, parsePlanDefinitionGoalTarget);
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionGoal(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionGoal; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  ComposeCodeableConcept(json, 'description', elem.description); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'priority', elem.priority); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'start', elem.start); {a}
  if (SummaryOption in [soFull, soData]) and (elem.addressesList.Count > 0) then
  begin
    json.valueArray('addresses');
    for i := 0 to elem.addressesList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.addressesList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.documentationList.Count > 0) then
  begin
    json.valueArray('documentation');
    for i := 0 to elem.documentationList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.documentationList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.targetList.Count > 0) then
  begin
    json.valueArray('target');
    for i := 0 to elem.targetList.Count - 1 do
      ComposePlanDefinitionGoalTarget(json, '', elem.targetList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionGoalTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionGoalTarget(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinitionGoalTarget(jsn : TJsonObject) : TFhirPlanDefinitionGoalTarget;
begin
  result := TFhirPlanDefinitionGoalTarget.create;
  try
    ParsePlanDefinitionGoalTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionGoalTargetProperties(jsn : TJsonObject; result : TFhirPlanDefinitionGoalTarget);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('measure') then
        result.measure := ParseCodeableConcept(jsn.vObj['measure']);{q3}
    if jsn.has('detailQuantity') {a4} then
      result.detail := ParseQuantity(jsn.vObj['detailQuantity']);
    if jsn.has('detailRange') {a4} then
      result.detail := ParseRange(jsn.vObj['detailRange']);
    if jsn.has('detailCodeableConcept') {a4} then
      result.detail := ParseCodeableConcept(jsn.vObj['detailCodeableConcept']);
    if jsn.has('due') then
        result.due := ParseDuration(jsn.vObj['due']);{q3}
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionGoalTarget(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionGoalTarget; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'measure', elem.measure); {a}
  if (SummaryOption in [soFull, soData]) and (elem.detail is TFhirQuantity) then 
    ComposeQuantity(json, 'detailQuantity', TFhirQuantity(elem.detail)) 
  else if (SummaryOption in [soFull, soData]) and (elem.detail is TFhirRange) then 
    ComposeRange(json, 'detailRange', TFhirRange(elem.detail)) 
  else if (SummaryOption in [soFull, soData]) and (elem.detail is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'detailCodeableConcept', TFhirCodeableConcept(elem.detail)) ;
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(json, 'due', elem.due); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionAction(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinitionAction(jsn : TJsonObject) : TFhirPlanDefinitionAction;
begin
  result := TFhirPlanDefinitionAction.create;
  try
    ParsePlanDefinitionActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionProperties(jsn : TJsonObject; result : TFhirPlanDefinitionAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('label') or jsn.has('_label') then
        result.label_Element := parseString(jsn.node['label'], jsn.vObj['_label']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('textEquivalent') or jsn.has('_textEquivalent') then
        result.textEquivalentElement := parseString(jsn.node['textEquivalent'], jsn.vObj['_textEquivalent']);{q}
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCodeableConcept);
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], result.reasonList, parseCodeableConcept);
    if jsn.has('documentation') then
      iterateArray(jsn.vArr['documentation'], result.documentationList, parseRelatedArtifact);
      if jsn.has('goalId') or jsn.has('_goalId') then
      iteratePrimitiveArray(jsn.vArr['goalId'], jsn.vArr['_goalId'], result.goalIdList, parseId);
    if jsn.has('triggerDefinition') then
      iterateArray(jsn.vArr['triggerDefinition'], result.triggerDefinitionList, parseTriggerDefinition);
    if jsn.has('condition') then
      iterateArray(jsn.vArr['condition'], result.conditionList, parsePlanDefinitionActionCondition);
    if jsn.has('input') then
      iterateArray(jsn.vArr['input'], result.inputList, parseDataRequirement);
    if jsn.has('output') then
      iterateArray(jsn.vArr['output'], result.outputList, parseDataRequirement);
    if jsn.has('relatedAction') then
      iterateArray(jsn.vArr['relatedAction'], result.relatedActionList, parsePlanDefinitionActionRelatedAction);
    if jsn.has('timingPeriod') {a4} then
      result.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDuration') {a4} then
      result.timing := ParseDuration(jsn.vObj['timingDuration']);
    if jsn.has('timingRange') {a4} then
      result.timing := ParseRange(jsn.vObj['timingRange']);
    if jsn.has('timingTiming') {a4} then
      result.timing := ParseTiming(jsn.vObj['timingTiming']);
    if jsn.has('timingDateTime') or jsn.has('_timingDateTime') then
      result.timing := parseDateTime(jsn.node['timingDateTime'], jsn.vObj['_timingDateTime']);
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parsePlanDefinitionActionParticipant);
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
    if jsn.has('groupingBehavior') or jsn.has('_groupingBehavior')  then
      result.groupingBehaviorElement := parseEnum(jsn.path+'/groupingBehavior', jsn.node['groupingBehavior'], jsn.vObj['_groupingBehavior'], CODES_TFhirActionGroupingBehaviorEnum, SYSTEMS_TFhirActionGroupingBehaviorEnum);
    if jsn.has('selectionBehavior') or jsn.has('_selectionBehavior')  then
      result.selectionBehaviorElement := parseEnum(jsn.path+'/selectionBehavior', jsn.node['selectionBehavior'], jsn.vObj['_selectionBehavior'], CODES_TFhirActionSelectionBehaviorEnum, SYSTEMS_TFhirActionSelectionBehaviorEnum);
    if jsn.has('requiredBehavior') or jsn.has('_requiredBehavior')  then
      result.requiredBehaviorElement := parseEnum(jsn.path+'/requiredBehavior', jsn.node['requiredBehavior'], jsn.vObj['_requiredBehavior'], CODES_TFhirActionRequiredBehaviorEnum, SYSTEMS_TFhirActionRequiredBehaviorEnum);
    if jsn.has('precheckBehavior') or jsn.has('_precheckBehavior')  then
      result.precheckBehaviorElement := parseEnum(jsn.path+'/precheckBehavior', jsn.node['precheckBehavior'], jsn.vObj['_precheckBehavior'], CODES_TFhirActionPrecheckBehaviorEnum, SYSTEMS_TFhirActionPrecheckBehaviorEnum);
    if jsn.has('cardinalityBehavior') or jsn.has('_cardinalityBehavior')  then
      result.cardinalityBehaviorElement := parseEnum(jsn.path+'/cardinalityBehavior', jsn.node['cardinalityBehavior'], jsn.vObj['_cardinalityBehavior'], CODES_TFhirActionCardinalityBehaviorEnum, SYSTEMS_TFhirActionCardinalityBehaviorEnum);
    if jsn.has('definition') then
        result.definition := ParseReference{Resource}(jsn.vObj['definition']);{q3}
    if jsn.has('transform') then
        result.transform := ParseReference{TFhirStructureMap}(jsn.vObj['transform']);{q3}
    if jsn.has('dynamicValue') then
      iterateArray(jsn.vArr['dynamicValue'], result.dynamicValueList, parsePlanDefinitionActionDynamicValue);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parsePlanDefinitionAction);
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionAction(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionAction; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'label', elem.label_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'label', elem.label_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'textEquivalent', elem.textEquivalentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'textEquivalent', elem.textEquivalentElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.codeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.reasonList.Count > 0) then
  begin
    json.valueArray('reason');
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.documentationList.Count > 0) then
  begin
    json.valueArray('documentation');
    for i := 0 to elem.documentationList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.documentationList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.goalIdList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.goalIdList.Count - 1 do
    begin
      ext := ext or ((elem.goalIdList[i].id <> '') or (elem.goalIdList[i].hasExtensionList) {no-comments or (elem.goalIdList[i].hasComments)});
      val := val or (elem.goalIdList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('goalId');
      for i := 0 to elem.goalIdList.Count - 1 do
        ComposeIdValue(json, '',elem.goalIdList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_goalId');
      for i := 0 to elem.goalIdList.Count - 1 do
        ComposeIdProps(json, '',elem.goalIdList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.triggerDefinitionList.Count > 0) then
  begin
    json.valueArray('triggerDefinition');
    for i := 0 to elem.triggerDefinitionList.Count - 1 do
      ComposeTriggerDefinition(json, '', elem.triggerDefinitionList[i]); {z - TriggerDefinition}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.conditionList.Count > 0) then
  begin
    json.valueArray('condition');
    for i := 0 to elem.conditionList.Count - 1 do
      ComposePlanDefinitionActionCondition(json, '', elem.conditionList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.inputList.Count > 0) then
  begin
    json.valueArray('input');
    for i := 0 to elem.inputList.Count - 1 do
      ComposeDataRequirement(json, '', elem.inputList[i]); {z - DataRequirement}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.outputList.Count > 0) then
  begin
    json.valueArray('output');
    for i := 0 to elem.outputList.Count - 1 do
      ComposeDataRequirement(json, '', elem.outputList[i]); {z - DataRequirement}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.relatedActionList.Count > 0) then
  begin
    json.valueArray('relatedAction');
    for i := 0 to elem.relatedActionList.Count - 1 do
      ComposePlanDefinitionActionRelatedAction(json, '', elem.relatedActionList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDuration) then 
    ComposeDuration(json, 'timingDuration', TFhirDuration(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirRange) then 
    ComposeRange(json, 'timingRange', TFhirRange(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirTiming) then 
    ComposeTiming(json, 'timingTiming', TFhirTiming(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
    ComposeDateTimeProps(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
  end;
  if (SummaryOption in [soFull, soData]) and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposePlanDefinitionActionParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'groupingBehavior', elem.GroupingBehaviorElement, CODES_TFhirActionGroupingBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'groupingBehavior', elem.GroupingBehaviorElement, CODES_TFhirActionGroupingBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'selectionBehavior', elem.SelectionBehaviorElement, CODES_TFhirActionSelectionBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'selectionBehavior', elem.SelectionBehaviorElement, CODES_TFhirActionSelectionBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'requiredBehavior', elem.RequiredBehaviorElement, CODES_TFhirActionRequiredBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'requiredBehavior', elem.RequiredBehaviorElement, CODES_TFhirActionRequiredBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'precheckBehavior', elem.PrecheckBehaviorElement, CODES_TFhirActionPrecheckBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'precheckBehavior', elem.PrecheckBehaviorElement, CODES_TFhirActionPrecheckBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'cardinalityBehavior', elem.CardinalityBehaviorElement, CODES_TFhirActionCardinalityBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'cardinalityBehavior', elem.CardinalityBehaviorElement, CODES_TFhirActionCardinalityBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{Resource}(json, 'definition', elem.definition); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirStructureMap}(json, 'transform', elem.transform); {a}
  if (SummaryOption in [soFull, soData]) and (elem.dynamicValueList.Count > 0) then
  begin
    json.valueArray('dynamicValue');
    for i := 0 to elem.dynamicValueList.Count - 1 do
      ComposePlanDefinitionActionDynamicValue(json, '', elem.dynamicValueList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposePlanDefinitionAction(json, '', elem.actionList[i]); {z - @PlanDefinition.action}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionCondition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionActionCondition(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinitionActionCondition(jsn : TJsonObject) : TFhirPlanDefinitionActionCondition;
begin
  result := TFhirPlanDefinitionActionCondition.create;
  try
    ParsePlanDefinitionActionConditionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionConditionProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionCondition);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirActionConditionKindEnum, SYSTEMS_TFhirActionConditionKindEnum);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := parseString(jsn.node['language'], jsn.vObj['_language']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);{q}
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionActionCondition(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionCondition; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirActionConditionKindEnum, false);
  ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirActionConditionKindEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionRelatedAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionActionRelatedAction(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinitionActionRelatedAction(jsn : TJsonObject) : TFhirPlanDefinitionActionRelatedAction;
begin
  result := TFhirPlanDefinitionActionRelatedAction.create;
  try
    ParsePlanDefinitionActionRelatedActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionRelatedActionProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionRelatedAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('actionId') or jsn.has('_actionId') then
        result.actionIdElement := parseId(jsn.node['actionId'], jsn.vObj['_actionId']);{q}
    if jsn.has('relationship') or jsn.has('_relationship')  then
      result.relationshipElement := parseEnum(jsn.path+'/relationship', jsn.node['relationship'], jsn.vObj['_relationship'], CODES_TFhirActionRelationshipTypeEnum, SYSTEMS_TFhirActionRelationshipTypeEnum);
    if jsn.has('offsetDuration') {a4} then
      result.offset := ParseDuration(jsn.vObj['offsetDuration']);
    if jsn.has('offsetRange') {a4} then
      result.offset := ParseRange(jsn.vObj['offsetRange']);
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionActionRelatedAction(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionRelatedAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdValue(json, 'actionId', elem.actionIdElement, false);
  ComposeIdProps(json, 'actionId', elem.actionIdElement, false);
  ComposeEnumValue(json, 'relationship', elem.RelationshipElement, CODES_TFhirActionRelationshipTypeEnum, false);
  ComposeEnumProps(json, 'relationship', elem.RelationshipElement, CODES_TFhirActionRelationshipTypeEnum, false);
  if (SummaryOption in [soFull, soData]) and (elem.offset is TFhirDuration) then 
    ComposeDuration(json, 'offsetDuration', TFhirDuration(elem.offset)) 
  else if (SummaryOption in [soFull, soData]) and (elem.offset is TFhirRange) then 
    ComposeRange(json, 'offsetRange', TFhirRange(elem.offset)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionActionParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinitionActionParticipant(jsn : TJsonObject) : TFhirPlanDefinitionActionParticipant;
begin
  result := TFhirPlanDefinitionActionParticipant.create;
  try
    ParsePlanDefinitionActionParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionParticipantProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirActionParticipantTypeEnum, SYSTEMS_TFhirActionParticipantTypeEnum);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionActionParticipant(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionParticipant; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirActionParticipantTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirActionParticipantTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionDynamicValue(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinitionActionDynamicValue(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinitionActionDynamicValue(jsn : TJsonObject) : TFhirPlanDefinitionActionDynamicValue;
begin
  result := TFhirPlanDefinitionActionDynamicValue.create;
  try
    ParsePlanDefinitionActionDynamicValueProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionActionDynamicValueProperties(jsn : TJsonObject; result : TFhirPlanDefinitionActionDynamicValue);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);{q}
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := parseString(jsn.node['language'], jsn.vObj['_language']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);{q}
end;

procedure TFHIRJsonComposer.ComposePlanDefinitionActionDynamicValue(json : TJSONWriter; name : string; elem : TFhirPlanDefinitionActionDynamicValue; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePlanDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePlanDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParsePlanDefinition(jsn : TJsonObject) : TFhirPlanDefinition;
begin
  result := TFhirPlanDefinition.create;
  try
    ParsePlanDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePlanDefinitionProperties(jsn : TJsonObject; result : TFhirPlanDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('usage') or jsn.has('_usage') then
        result.usageElement := parseString(jsn.node['usage'], jsn.vObj['_usage']);{q}
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        result.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);{q}
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        result.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);{q}
    if jsn.has('effectivePeriod') then
        result.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);{q3}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseCodeableConcept);
    if jsn.has('contributor') then
      iterateArray(jsn.vArr['contributor'], result.contributorList, parseContributor);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], result.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('library') then
      iterateArray(jsn.vArr['library'], result.library_List, parseReference{TFhirLibrary});
    if jsn.has('goal') then
      iterateArray(jsn.vArr['goal'], result.goalList, parsePlanDefinitionGoal);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parsePlanDefinitionAction);
end;

procedure TFHIRJsonComposer.ComposePlanDefinition(json : TJSONWriter; name : string; elem : TFhirPlanDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeStringValue(json, 'usage', elem.usageElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeStringProps(json, 'usage', elem.usageElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDateValue(json, 'approvalDate', elem.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDateProps(json, 'approvalDate', elem.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDateValue(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDateProps(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(json, 'effectivePeriod', elem.effectivePeriod); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('topic') and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.topicList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('contributor') and (elem.contributorList.Count > 0) then
  begin
    json.valueArray('contributor');
    for i := 0 to elem.contributorList.Count - 1 do
      ComposeContributor(json, '', elem.contributorList[i]); {z - Contributor}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') and (elem.relatedArtifactList.Count > 0) then
  begin
    json.valueArray('relatedArtifact');
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.relatedArtifactList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('library_') and (elem.library_List.Count > 0) then
  begin
    json.valueArray('library');
    for i := 0 to elem.library_List.Count - 1 do
      ComposeReference{TFhirLibrary}(json, '', elem.library_List[i]); {z - Reference(Library)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('goal') and (elem.goalList.Count > 0) then
  begin
    json.valueArray('goal');
    for i := 0 to elem.goalList.Count - 1 do
      ComposePlanDefinitionGoal(json, '', elem.goalList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('action') and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposePlanDefinitionAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
procedure TFHIRJsonParser.ParsePractitionerQualification(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitionerQualification(jsn)); {2}
end;

function TFHIRJsonParser.ParsePractitionerQualification(jsn : TJsonObject) : TFhirPractitionerQualification;
begin
  result := TFhirPractitionerQualification.create;
  try
    ParsePractitionerQualificationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerQualificationProperties(jsn : TJsonObject; result : TFhirPractitionerQualification);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('issuer') then
        result.issuer := ParseReference{TFhirOrganization}(jsn.vObj['issuer']);{q3}
end;

procedure TFHIRJsonComposer.ComposePractitionerQualification(json : TJSONWriter; name : string; elem : TFhirPractitionerQualification; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'issuer', elem.issuer); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePractitioner(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitioner(jsn)); {2}
end;

function TFHIRJsonParser.ParsePractitioner(jsn : TJsonObject) : TFhirPractitioner;
begin
  result := TFhirPractitioner.create;
  try
    ParsePractitionerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerProperties(jsn : TJsonObject; result : TFhirPractitioner);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);{q}
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], result.nameList, parseHumanName);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], result.addressList, parseAddress);
    if jsn.has('gender') or jsn.has('_gender')  then
      result.genderElement := parseEnum(jsn.path+'/gender', jsn.node['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('birthDate') or jsn.has('_birthDate') then
        result.birthDateElement := parseDate(jsn.node['birthDate'], jsn.vObj['_birthDate']);{q}
    if jsn.has('photo') then
      iterateArray(jsn.vArr['photo'], result.photoList, parseAttachment);
    if jsn.has('qualification') then
      iterateArray(jsn.vArr['qualification'], result.qualificationList, parsePractitionerQualification);
    if jsn.has('communication') then
      iterateArray(jsn.vArr['communication'], result.communicationList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposePractitioner(json : TJSONWriter; name : string; elem : TFhirPractitioner; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') and (elem.nameList.Count > 0) then
  begin
    json.valueArray('name');
    for i := 0 to elem.nameList.Count - 1 do
      ComposeHumanName(json, '', elem.nameList[i]); {z - HumanName}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('telecom') and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('address') and (elem.addressList.Count > 0) then
  begin
    json.valueArray('address');
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(json, '', elem.addressList[i]); {z - Address}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gender') then
    ComposeEnumValue(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gender') then
    ComposeEnumProps(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('birthDate') then
    ComposeDateValue(json, 'birthDate', elem.birthDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('birthDate') then
    ComposeDateProps(json, 'birthDate', elem.birthDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('photo') and (elem.photoList.Count > 0) then
  begin
    json.valueArray('photo');
    for i := 0 to elem.photoList.Count - 1 do
      ComposeAttachment(json, '', elem.photoList[i]); {z - Attachment}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('qualification') and (elem.qualificationList.Count > 0) then
  begin
    json.valueArray('qualification');
    for i := 0 to elem.qualificationList.Count - 1 do
      ComposePractitionerQualification(json, '', elem.qualificationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('communication') and (elem.communicationList.Count > 0) then
  begin
    json.valueArray('communication');
    for i := 0 to elem.communicationList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.communicationList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
procedure TFHIRJsonParser.ParsePractitionerRoleAvailableTime(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitionerRoleAvailableTime(jsn)); {2}
end;

function TFHIRJsonParser.ParsePractitionerRoleAvailableTime(jsn : TJsonObject) : TFhirPractitionerRoleAvailableTime;
begin
  result := TFhirPractitionerRoleAvailableTime.create;
  try
    ParsePractitionerRoleAvailableTimeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerRoleAvailableTimeProperties(jsn : TJsonObject; result : TFhirPractitionerRoleAvailableTime);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('daysOfWeek') or jsn.has('_daysOfWeek') then
      iterateEnumArray(jsn.vArr['daysOfWeek'], jsn.vArr['_daysOfWeek'], jsn.path+'/daysOfWeek', result.daysOfWeekList, parseEnum, CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum);
    if jsn.has('allDay') or jsn.has('_allDay') then
        result.allDayElement := parseBoolean(jsn.node['allDay'], jsn.vObj['_allDay']);{q}
    if jsn.has('availableStartTime') or jsn.has('_availableStartTime') then
        result.availableStartTimeElement := parseTime(jsn.node['availableStartTime'], jsn.vObj['_availableStartTime']);{q}
    if jsn.has('availableEndTime') or jsn.has('_availableEndTime') then
        result.availableEndTimeElement := parseTime(jsn.node['availableEndTime'], jsn.vObj['_availableEndTime']);{q}
end;

procedure TFHIRJsonComposer.ComposePractitionerRoleAvailableTime(json : TJSONWriter; name : string; elem : TFhirPractitionerRoleAvailableTime; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.daysOfWeekList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.daysOfWeekList.Count - 1 do
    begin
      val := val or (elem.daysOfWeekList[i].hasPrimitiveValue);
      ext := ext or ((elem.daysOfWeekList[i].id <> '') or (elem.daysOfWeekList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('daysOfWeek');
      for i := 0 to elem.daysOfWeekList.Count - 1 do
        ComposeEnumValue(json, '', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_daysOfWeek');
      for i := 0 to elem.daysOfWeekList.Count - 1 do
        ComposeEnumProps(json, '', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'allDay', elem.allDayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'allDay', elem.allDayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'availableStartTime', elem.availableStartTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'availableStartTime', elem.availableStartTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeValue(json, 'availableEndTime', elem.availableEndTimeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTimeProps(json, 'availableEndTime', elem.availableEndTimeElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePractitionerRoleNotAvailable(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitionerRoleNotAvailable(jsn)); {2}
end;

function TFHIRJsonParser.ParsePractitionerRoleNotAvailable(jsn : TJsonObject) : TFhirPractitionerRoleNotAvailable;
begin
  result := TFhirPractitionerRoleNotAvailable.create;
  try
    ParsePractitionerRoleNotAvailableProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerRoleNotAvailableProperties(jsn : TJsonObject; result : TFhirPractitionerRoleNotAvailable);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('during') then
        result.during := ParsePeriod(jsn.vObj['during']);{q3}
end;

procedure TFHIRJsonComposer.ComposePractitionerRoleNotAvailable(json : TJSONWriter; name : string; elem : TFhirPractitionerRoleNotAvailable; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'description', elem.descriptionElement, false);
  ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'during', elem.during); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParsePractitionerRole(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParsePractitionerRole(jsn)); {2}
end;

function TFHIRJsonParser.ParsePractitionerRole(jsn : TJsonObject) : TFhirPractitionerRole;
begin
  result := TFhirPractitionerRole.create;
  try
    ParsePractitionerRoleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParsePractitionerRoleProperties(jsn : TJsonObject; result : TFhirPractitionerRole);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('practitioner') then
        result.practitioner := ParseReference{TFhirPractitioner}(jsn.vObj['practitioner']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], result.specialtyList, parseCodeableConcept);
    if jsn.has('location') then
      iterateArray(jsn.vArr['location'], result.locationList, parseReference{TFhirLocation});
    if jsn.has('healthcareService') then
      iterateArray(jsn.vArr['healthcareService'], result.healthcareServiceList, parseReference{TFhirHealthcareService});
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('availableTime') then
      iterateArray(jsn.vArr['availableTime'], result.availableTimeList, parsePractitionerRoleAvailableTime);
    if jsn.has('notAvailable') then
      iterateArray(jsn.vArr['notAvailable'], result.notAvailableList, parsePractitionerRoleNotAvailable);
    if jsn.has('availabilityExceptions') or jsn.has('_availabilityExceptions') then
        result.availabilityExceptionsElement := parseString(jsn.node['availabilityExceptions'], jsn.vObj['_availabilityExceptions']);{q}
    if jsn.has('endpoint') then
      iterateArray(jsn.vArr['endpoint'], result.endpointList, parseReference{TFhirEndpoint});
end;

procedure TFHIRJsonComposer.ComposePractitionerRole(json : TJSONWriter; name : string; elem : TFhirPractitionerRole; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('practitioner') then
    ComposeReference{TFhirPractitioner}(json, 'practitioner', elem.practitioner); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('organization') then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.codeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specialty') and (elem.specialtyList.Count > 0) then
  begin
    json.valueArray('specialty');
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialtyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('location') and (elem.locationList.Count > 0) then
  begin
    json.valueArray('location');
    for i := 0 to elem.locationList.Count - 1 do
      ComposeReference{TFhirLocation}(json, '', elem.locationList[i]); {z - Reference(Location)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('healthcareService') and (elem.healthcareServiceList.Count > 0) then
  begin
    json.valueArray('healthcareService');
    for i := 0 to elem.healthcareServiceList.Count - 1 do
      ComposeReference{TFhirHealthcareService}(json, '', elem.healthcareServiceList[i]); {z - Reference(HealthcareService)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('telecom') and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('availableTime') and (elem.availableTimeList.Count > 0) then
  begin
    json.valueArray('availableTime');
    for i := 0 to elem.availableTimeList.Count - 1 do
      ComposePractitionerRoleAvailableTime(json, '', elem.availableTimeList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('notAvailable') and (elem.notAvailableList.Count > 0) then
  begin
    json.valueArray('notAvailable');
    for i := 0 to elem.notAvailableList.Count - 1 do
      ComposePractitionerRoleNotAvailable(json, '', elem.notAvailableList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('availabilityExceptions') then
    ComposeStringValue(json, 'availabilityExceptions', elem.availabilityExceptionsElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('availabilityExceptions') then
    ComposeStringProps(json, 'availabilityExceptions', elem.availabilityExceptionsElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('endpoint') and (elem.endpointList.Count > 0) then
  begin
    json.valueArray('endpoint');
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(json, '', elem.endpointList[i]); {z - Reference(Endpoint)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
procedure TFHIRJsonParser.ParseProcedurePerformer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcedurePerformer(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcedurePerformer(jsn : TJsonObject) : TFhirProcedurePerformer;
begin
  result := TFhirProcedurePerformer.create;
  try
    ParseProcedurePerformerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcedurePerformerProperties(jsn : TJsonObject; result : TFhirProcedurePerformer);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
        result.role := ParseCodeableConcept(jsn.vObj['role']);{q3}
    if jsn.has('actor') then
        result.actor := ParseReference{Resource}(jsn.vObj['actor']);{q3}
    if jsn.has('onBehalfOf') then
        result.onBehalfOf := ParseReference{TFhirOrganization}(jsn.vObj['onBehalfOf']);{q3}
end;

procedure TFHIRJsonComposer.ComposeProcedurePerformer(json : TJSONWriter; name : string; elem : TFhirProcedurePerformer; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'role', elem.role); {a}
  ComposeReference{Resource}(json, 'actor', elem.actor); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'onBehalfOf', elem.onBehalfOf); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProcedureFocalDevice(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcedureFocalDevice(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcedureFocalDevice(jsn : TJsonObject) : TFhirProcedureFocalDevice;
begin
  result := TFhirProcedureFocalDevice.create;
  try
    ParseProcedureFocalDeviceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcedureFocalDeviceProperties(jsn : TJsonObject; result : TFhirProcedureFocalDevice);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('action') then
        result.action := ParseCodeableConcept(jsn.vObj['action']);{q3}
    if jsn.has('manipulated') then
        result.manipulated := ParseReference{TFhirDevice}(jsn.vObj['manipulated']);{q3}
end;

procedure TFHIRJsonComposer.ComposeProcedureFocalDevice(json : TJSONWriter; name : string; elem : TFhirProcedureFocalDevice; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'action', elem.action); {a}
  ComposeReference{TFhirDevice}(json, 'manipulated', elem.manipulated); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProcedure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcedure(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcedure(jsn : TJsonObject) : TFhirProcedure;
begin
  result := TFhirProcedure.create;
  try
    ParseProcedureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcedureProperties(jsn : TJsonObject; result : TFhirProcedure);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('definition') then
      iterateArray(jsn.vArr['definition'], result.definitionList, parseReference{Resource});
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{Resource});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirEventStatusEnum, SYSTEMS_TFhirEventStatusEnum);
    if jsn.has('notDone') or jsn.has('_notDone') then
        result.notDoneElement := parseBoolean(jsn.node['notDone'], jsn.vObj['_notDone']);{q}
    if jsn.has('notDoneReason') then
        result.notDoneReason := ParseCodeableConcept(jsn.vObj['notDoneReason']);{q3}
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('performedPeriod') {a4} then
      result.performed := ParsePeriod(jsn.vObj['performedPeriod']);
    if jsn.has('performedDateTime') or jsn.has('_performedDateTime') then
      result.performed := parseDateTime(jsn.node['performedDateTime'], jsn.vObj['_performedDateTime']);
    if jsn.has('performer') then
      iterateArray(jsn.vArr['performer'], result.performerList, parseProcedurePerformer);
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('bodySite') then
      iterateArray(jsn.vArr['bodySite'], result.bodySiteList, parseCodeableConcept);
    if jsn.has('outcome') then
        result.outcome := ParseCodeableConcept(jsn.vObj['outcome']);{q3}
    if jsn.has('report') then
      iterateArray(jsn.vArr['report'], result.reportList, parseReference{TFhirDiagnosticReport});
    if jsn.has('complication') then
      iterateArray(jsn.vArr['complication'], result.complicationList, parseCodeableConcept);
    if jsn.has('complicationDetail') then
      iterateArray(jsn.vArr['complicationDetail'], result.complicationDetailList, parseReference{TFhirCondition});
    if jsn.has('followUp') then
      iterateArray(jsn.vArr['followUp'], result.followUpList, parseCodeableConcept);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('focalDevice') then
      iterateArray(jsn.vArr['focalDevice'], result.focalDeviceList, parseProcedureFocalDevice);
    if jsn.has('usedReference') then
      iterateArray(jsn.vArr['usedReference'], result.usedReferenceList, parseReference{Resource});
    if jsn.has('usedCode') then
      iterateArray(jsn.vArr['usedCode'], result.usedCodeList, parseCodeableConcept);
end;

procedure TFHIRJsonComposer.ComposeProcedure(json : TJSONWriter; name : string; elem : TFhirProcedure; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('definition') and (elem.definitionList.Count > 0) then
  begin
    json.valueArray('definition');
    for i := 0 to elem.definitionList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.definitionList[i]); {z - Reference(PlanDefinition|ActivityDefinition|HealthcareService)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(CarePlan|ProcedureRequest|ReferralRequest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.partOfList[i]); {z - Reference(Procedure|Observation|MedicationAdministration)}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirEventStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirEventStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.notDone <> false)) and doCompose('notDone') then
    ComposeBooleanValue(json, 'notDone', elem.notDoneElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.notDone <> false)) and doCompose('notDone') then
    ComposeBooleanProps(json, 'notDone', elem.notDoneElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('notDoneReason') then
    ComposeCodeableConcept(json, 'notDoneReason', elem.notDoneReason); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.performed is TFhirPeriod) then 
    ComposePeriod(json, 'performedPeriod', TFhirPeriod(elem.performed)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.performed is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'performedDateTime', TFhirDateTime(elem.performed), false);
    ComposeDateTimeProps(json, 'performedDateTime', TFhirDateTime(elem.performed), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') and (elem.performerList.Count > 0) then
  begin
    json.valueArray('performer');
    for i := 0 to elem.performerList.Count - 1 do
      ComposeProcedurePerformer(json, '', elem.performerList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('bodySite') and (elem.bodySiteList.Count > 0) then
  begin
    json.valueArray('bodySite');
    for i := 0 to elem.bodySiteList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.bodySiteList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('outcome') then
    ComposeCodeableConcept(json, 'outcome', elem.outcome); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('report') and (elem.reportList.Count > 0) then
  begin
    json.valueArray('report');
    for i := 0 to elem.reportList.Count - 1 do
      ComposeReference{TFhirDiagnosticReport}(json, '', elem.reportList[i]); {z - Reference(DiagnosticReport)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('complication') and (elem.complicationList.Count > 0) then
  begin
    json.valueArray('complication');
    for i := 0 to elem.complicationList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.complicationList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('complicationDetail') and (elem.complicationDetailList.Count > 0) then
  begin
    json.valueArray('complicationDetail');
    for i := 0 to elem.complicationDetailList.Count - 1 do
      ComposeReference{TFhirCondition}(json, '', elem.complicationDetailList[i]); {z - Reference(Condition)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('followUp') and (elem.followUpList.Count > 0) then
  begin
    json.valueArray('followUp');
    for i := 0 to elem.followUpList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.followUpList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('focalDevice') and (elem.focalDeviceList.Count > 0) then
  begin
    json.valueArray('focalDevice');
    for i := 0 to elem.focalDeviceList.Count - 1 do
      ComposeProcedureFocalDevice(json, '', elem.focalDeviceList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('usedReference') and (elem.usedReferenceList.Count > 0) then
  begin
    json.valueArray('usedReference');
    for i := 0 to elem.usedReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.usedReferenceList[i]); {z - Reference(Device|Medication|Substance)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('usedCode') and (elem.usedCodeList.Count > 0) then
  begin
    json.valueArray('usedCode');
    for i := 0 to elem.usedCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.usedCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROCEDUREREQUEST}
procedure TFHIRJsonParser.ParseProcedureRequestRequester(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcedureRequestRequester(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcedureRequestRequester(jsn : TJsonObject) : TFhirProcedureRequestRequester;
begin
  result := TFhirProcedureRequestRequester.create;
  try
    ParseProcedureRequestRequesterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcedureRequestRequesterProperties(jsn : TJsonObject; result : TFhirProcedureRequestRequester);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('agent') then
        result.agent := ParseReference{Resource}(jsn.vObj['agent']);{q3}
    if jsn.has('onBehalfOf') then
        result.onBehalfOf := ParseReference{TFhirOrganization}(jsn.vObj['onBehalfOf']);{q3}
end;

procedure TFHIRJsonComposer.ComposeProcedureRequestRequester(json : TJSONWriter; name : string; elem : TFhirProcedureRequestRequester; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'agent', elem.agent); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'onBehalfOf', elem.onBehalfOf); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProcedureRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcedureRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcedureRequest(jsn : TJsonObject) : TFhirProcedureRequest;
begin
  result := TFhirProcedureRequest.create;
  try
    ParseProcedureRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcedureRequestProperties(jsn : TJsonObject; result : TFhirProcedureRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('definition') then
      iterateArray(jsn.vArr['definition'], result.definitionList, parseReference{Resource});
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirReference});
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], result.replacesList, parseReference{TFhirReference});
    if jsn.has('requisition') then
        result.requisition := ParseIdentifier(jsn.vObj['requisition']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('intent') or jsn.has('_intent')  then
      result.intentElement := parseEnum(jsn.path+'/intent', jsn.node['intent'], jsn.vObj['_intent'], CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum);
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('doNotPerform') or jsn.has('_doNotPerform') then
        result.doNotPerformElement := parseBoolean(jsn.node['doNotPerform'], jsn.vObj['_doNotPerform']);{q}
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      result.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('asNeededCodeableConcept') {a4} then
      result.asNeeded := ParseCodeableConcept(jsn.vObj['asNeededCodeableConcept']);
    if jsn.has('asNeededBoolean') or jsn.has('_asNeededBoolean') then
      result.asNeeded := parseBoolean(jsn.node['asNeededBoolean'], jsn.vObj['_asNeededBoolean']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('requester') then
        result.requester := ParseProcedureRequestRequester(jsn.vObj['requester']);{q3}
    if jsn.has('performerType') then
        result.performerType := ParseCodeableConcept(jsn.vObj['performerType']);{q3}
    if jsn.has('performer') then
        result.performer := ParseReference{Resource}(jsn.vObj['performer']);{q3}
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], result.supportingInfoList, parseReference{TFhirReference});
    if jsn.has('specimen') then
      iterateArray(jsn.vArr['specimen'], result.specimenList, parseReference{TFhirSpecimen});
    if jsn.has('bodySite') then
      iterateArray(jsn.vArr['bodySite'], result.bodySiteList, parseCodeableConcept);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('relevantHistory') then
      iterateArray(jsn.vArr['relevantHistory'], result.relevantHistoryList, parseReference{TFhirProvenance});
end;

procedure TFHIRJsonComposer.ComposeProcedureRequest(json : TJSONWriter; name : string; elem : TFhirProcedureRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('definition') and (elem.definitionList.Count > 0) then
  begin
    json.valueArray('definition');
    for i := 0 to elem.definitionList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.definitionList[i]); {z - Reference(ActivityDefinition|PlanDefinition)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.basedOnList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('replaces') and (elem.replacesList.Count > 0) then
  begin
    json.valueArray('replaces');
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.replacesList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requisition') then
    ComposeIdentifier(json, 'requisition', elem.requisition); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  ComposeEnumValue(json, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum, false);
  ComposeEnumProps(json, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.doNotPerform <> false)) and doCompose('doNotPerform') then
    ComposeBooleanValue(json, 'doNotPerform', elem.doNotPerformElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.doNotPerform <> false)) and doCompose('doNotPerform') then
    ComposeBooleanProps(json, 'doNotPerform', elem.doNotPerformElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(elem.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.asNeeded is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'asNeededCodeableConcept', TFhirCodeableConcept(elem.asNeeded)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.asNeeded is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'asNeededBoolean', TFhirBoolean(elem.asNeeded), false);
    ComposeBooleanProps(json, 'asNeededBoolean', TFhirBoolean(elem.asNeeded), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requester') then
    ComposeProcedureRequestRequester(json, 'requester', elem.requester); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performerType') then
    ComposeCodeableConcept(json, 'performerType', elem.performerType); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') then
    ComposeReference{Resource}(json, 'performer', elem.performer); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInfo') and (elem.supportingInfoList.Count > 0) then
  begin
    json.valueArray('supportingInfo');
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInfoList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specimen') and (elem.specimenList.Count > 0) then
  begin
    json.valueArray('specimen');
    for i := 0 to elem.specimenList.Count - 1 do
      ComposeReference{TFhirSpecimen}(json, '', elem.specimenList[i]); {z - Reference(Specimen)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('bodySite') and (elem.bodySiteList.Count > 0) then
  begin
    json.valueArray('bodySite');
    for i := 0 to elem.bodySiteList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.bodySiteList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('relevantHistory') and (elem.relevantHistoryList.Count > 0) then
  begin
    json.valueArray('relevantHistory');
    for i := 0 to elem.relevantHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(json, '', elem.relevantHistoryList[i]); {z - Reference(Provenance)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PROCEDUREREQUEST}
{$IFDEF FHIR_PROCESSREQUEST}
procedure TFHIRJsonParser.ParseProcessRequestItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcessRequestItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcessRequestItem(jsn : TJsonObject) : TFhirProcessRequestItem;
begin
  result := TFhirProcessRequestItem.create;
  try
    ParseProcessRequestItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcessRequestItemProperties(jsn : TJsonObject; result : TFhirProcessRequestItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('sequenceLinkId') or jsn.has('_sequenceLinkId') then
        result.sequenceLinkIdElement := parseInteger(jsn.node['sequenceLinkId'], jsn.vObj['_sequenceLinkId']);{q}
end;

procedure TFHIRJsonComposer.ComposeProcessRequestItem(json : TJSONWriter; name : string; elem : TFhirProcessRequestItem; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIntegerValue(json, 'sequenceLinkId', elem.sequenceLinkIdElement, false);
  ComposeIntegerProps(json, 'sequenceLinkId', elem.sequenceLinkIdElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProcessRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcessRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcessRequest(jsn : TJsonObject) : TFhirProcessRequest;
begin
  result := TFhirProcessRequest.create;
  try
    ParseProcessRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcessRequestProperties(jsn : TJsonObject; result : TFhirProcessRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('action') or jsn.has('_action')  then
      result.actionElement := parseEnum(jsn.path+'/action', jsn.node['action'], jsn.vObj['_action'], CODES_TFhirActionlistEnum, SYSTEMS_TFhirActionlistEnum);
    if jsn.has('target') then
        result.target := ParseReference{TFhirOrganization}(jsn.vObj['target']);{q3}
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('provider') then
        result.provider := ParseReference{TFhirPractitioner}(jsn.vObj['provider']);{q3}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('request') then
        result.request := ParseReference{TFhirReference}(jsn.vObj['request']);{q3}
    if jsn.has('response') then
        result.response := ParseReference{TFhirReference}(jsn.vObj['response']);{q3}
    if jsn.has('nullify') or jsn.has('_nullify') then
        result.nullifyElement := parseBoolean(jsn.node['nullify'], jsn.vObj['_nullify']);{q}
    if jsn.has('reference') or jsn.has('_reference') then
        result.referenceElement := parseString(jsn.node['reference'], jsn.vObj['_reference']);{q}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseProcessRequestItem);
      if jsn.has('include') or jsn.has('_include') then
      iteratePrimitiveArray(jsn.vArr['include'], jsn.vArr['_include'], result.includeList, parseString);
      if jsn.has('exclude') or jsn.has('_exclude') then
      iteratePrimitiveArray(jsn.vArr['exclude'], jsn.vArr['_exclude'], result.excludeList, parseString);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeProcessRequest(json : TJSONWriter; name : string; elem : TFhirProcessRequest; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('action') then
    ComposeEnumValue(json, 'action', elem.ActionElement, CODES_TFhirActionlistEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('action') then
    ComposeEnumProps(json, 'action', elem.ActionElement, CODES_TFhirActionlistEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('target') then
    ComposeReference{TFhirOrganization}(json, 'target', elem.target); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('provider') then
    ComposeReference{TFhirPractitioner}(json, 'provider', elem.provider); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('organization') then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('request') then
    ComposeReference{TFhirReference}(json, 'request', elem.request); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('response') then
    ComposeReference{TFhirReference}(json, 'response', elem.response); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('nullify') then
    ComposeBooleanValue(json, 'nullify', elem.nullifyElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('nullify') then
    ComposeBooleanProps(json, 'nullify', elem.nullifyElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('reference') then
    ComposeStringValue(json, 'reference', elem.referenceElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('reference') then
    ComposeStringProps(json, 'reference', elem.referenceElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('item') and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeProcessRequestItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('include') and (elem.includeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.includeList.Count - 1 do
    begin
      ext := ext or ((elem.includeList[i].id <> '') or (elem.includeList[i].hasExtensionList) {no-comments or (elem.includeList[i].hasComments)});
      val := val or (elem.includeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('include');
      for i := 0 to elem.includeList.Count - 1 do
        ComposeStringValue(json, '',elem.includeList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_include');
      for i := 0 to elem.includeList.Count - 1 do
        ComposeStringProps(json, '',elem.includeList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('exclude') and (elem.excludeList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.excludeList.Count - 1 do
    begin
      ext := ext or ((elem.excludeList[i].id <> '') or (elem.excludeList[i].hasExtensionList) {no-comments or (elem.excludeList[i].hasComments)});
      val := val or (elem.excludeList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('exclude');
      for i := 0 to elem.excludeList.Count - 1 do
        ComposeStringValue(json, '',elem.excludeList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_exclude');
      for i := 0 to elem.excludeList.Count - 1 do
        ComposeStringProps(json, '',elem.excludeList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
end;

{$ENDIF FHIR_PROCESSREQUEST}
{$IFDEF FHIR_PROCESSRESPONSE}
procedure TFHIRJsonParser.ParseProcessResponseProcessNote(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcessResponseProcessNote(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcessResponseProcessNote(jsn : TJsonObject) : TFhirProcessResponseProcessNote;
begin
  result := TFhirProcessResponseProcessNote.create;
  try
    ParseProcessResponseProcessNoteProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcessResponseProcessNoteProperties(jsn : TJsonObject; result : TFhirProcessResponseProcessNote);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);{q}
end;

procedure TFHIRJsonComposer.ComposeProcessResponseProcessNote(json : TJSONWriter; name : string; elem : TFhirProcessResponseProcessNote; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProcessResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProcessResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseProcessResponse(jsn : TJsonObject) : TFhirProcessResponse;
begin
  result := TFhirProcessResponse.create;
  try
    ParseProcessResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProcessResponseProperties(jsn : TJsonObject; result : TFhirProcessResponse);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('created') or jsn.has('_created') then
        result.createdElement := parseDateTime(jsn.node['created'], jsn.vObj['_created']);{q}
    if jsn.has('organization') then
        result.organization := ParseReference{TFhirOrganization}(jsn.vObj['organization']);{q3}
    if jsn.has('request') then
        result.request := ParseReference{TFhirReference}(jsn.vObj['request']);{q3}
    if jsn.has('outcome') then
        result.outcome := ParseCodeableConcept(jsn.vObj['outcome']);{q3}
    if jsn.has('disposition') or jsn.has('_disposition') then
        result.dispositionElement := parseString(jsn.node['disposition'], jsn.vObj['_disposition']);{q}
    if jsn.has('requestProvider') then
        result.requestProvider := ParseReference{TFhirPractitioner}(jsn.vObj['requestProvider']);{q3}
    if jsn.has('requestOrganization') then
        result.requestOrganization := ParseReference{TFhirOrganization}(jsn.vObj['requestOrganization']);{q3}
    if jsn.has('form') then
        result.form := ParseCodeableConcept(jsn.vObj['form']);{q3}
    if jsn.has('processNote') then
      iterateArray(jsn.vArr['processNote'], result.processNoteList, parseProcessResponseProcessNote);
    if jsn.has('error') then
      iterateArray(jsn.vArr['error'], result.errorList, parseCodeableConcept);
    if jsn.has('communicationRequest') then
      iterateArray(jsn.vArr['communicationRequest'], result.communicationRequestList, parseReference{TFhirCommunicationRequest});
end;

procedure TFHIRJsonComposer.ComposeProcessResponse(json : TJSONWriter; name : string; elem : TFhirProcessResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeValue(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTimeProps(json, 'created', elem.createdElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('organization') then
    ComposeReference{TFhirOrganization}(json, 'organization', elem.organization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('request') then
    ComposeReference{TFhirReference}(json, 'request', elem.request); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('outcome') then
    ComposeCodeableConcept(json, 'outcome', elem.outcome); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeStringValue(json, 'disposition', elem.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeStringProps(json, 'disposition', elem.dispositionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('requestProvider') then
    ComposeReference{TFhirPractitioner}(json, 'requestProvider', elem.requestProvider); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('requestOrganization') then
    ComposeReference{TFhirOrganization}(json, 'requestOrganization', elem.requestOrganization); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('form') then
    ComposeCodeableConcept(json, 'form', elem.form); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('processNote') and (elem.processNoteList.Count > 0) then
  begin
    json.valueArray('processNote');
    for i := 0 to elem.processNoteList.Count - 1 do
      ComposeProcessResponseProcessNote(json, '', elem.processNoteList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('error') and (elem.errorList.Count > 0) then
  begin
    json.valueArray('error');
    for i := 0 to elem.errorList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.errorList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('communicationRequest') and (elem.communicationRequestList.Count > 0) then
  begin
    json.valueArray('communicationRequest');
    for i := 0 to elem.communicationRequestList.Count - 1 do
      ComposeReference{TFhirCommunicationRequest}(json, '', elem.communicationRequestList[i]); {z - Reference(CommunicationRequest)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PROCESSRESPONSE}
{$IFDEF FHIR_PROVENANCE}
procedure TFHIRJsonParser.ParseProvenanceAgent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProvenanceAgent(jsn)); {2}
end;

function TFHIRJsonParser.ParseProvenanceAgent(jsn : TJsonObject) : TFhirProvenanceAgent;
begin
  result := TFhirProvenanceAgent.create;
  try
    ParseProvenanceAgentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProvenanceAgentProperties(jsn : TJsonObject; result : TFhirProvenanceAgent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') then
      iterateArray(jsn.vArr['role'], result.roleList, parseCodeableConcept);
    if jsn.has('whoReference') {a3} then
      result.who := ParseReference(jsn.vObj['whoReference']);
    if jsn.has('whoUri') or jsn.has('_whoUri') then
      result.who := parseUri(jsn.node['whoUri'], jsn.vObj['_whoUri']);
    if jsn.has('onBehalfOfReference') {a3} then
      result.onBehalfOf := ParseReference(jsn.vObj['onBehalfOfReference']);
    if jsn.has('onBehalfOfUri') or jsn.has('_onBehalfOfUri') then
      result.onBehalfOf := parseUri(jsn.node['onBehalfOfUri'], jsn.vObj['_onBehalfOfUri']);
    if jsn.has('relatedAgentType') then
        result.relatedAgentType := ParseCodeableConcept(jsn.vObj['relatedAgentType']);{q3}
end;

procedure TFHIRJsonComposer.ComposeProvenanceAgent(json : TJSONWriter; name : string; elem : TFhirProvenanceAgent; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.roleList.Count > 0) then
  begin
    json.valueArray('role');
    for i := 0 to elem.roleList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.roleList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (elem.who is TFhirReference) then
    ComposeReference(json, 'whoReference', TFhirReference(elem.who))
  else if (elem.who is TFhirUri) then 
  begin
    ComposeUriValue(json, 'whoUri', TFhirUri(elem.who), false);
    ComposeUriProps(json, 'whoUri', TFhirUri(elem.who), false);
  end;
  if (SummaryOption in [soFull, soData]) and (elem.onBehalfOf is TFhirReference) then
    ComposeReference(json, 'onBehalfOfReference', TFhirReference(elem.onBehalfOf))
  else if (SummaryOption in [soFull, soData]) and (elem.onBehalfOf is TFhirUri) then 
  begin
    ComposeUriValue(json, 'onBehalfOfUri', TFhirUri(elem.onBehalfOf), false);
    ComposeUriProps(json, 'onBehalfOfUri', TFhirUri(elem.onBehalfOf), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'relatedAgentType', elem.relatedAgentType); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProvenanceEntity(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProvenanceEntity(jsn)); {2}
end;

function TFHIRJsonParser.ParseProvenanceEntity(jsn : TJsonObject) : TFhirProvenanceEntity;
begin
  result := TFhirProvenanceEntity.create;
  try
    ParseProvenanceEntityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProvenanceEntityProperties(jsn : TJsonObject; result : TFhirProvenanceEntity);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('role') or jsn.has('_role')  then
      result.roleElement := parseEnum(jsn.path+'/role', jsn.node['role'], jsn.vObj['_role'], CODES_TFhirProvenanceEntityRoleEnum, SYSTEMS_TFhirProvenanceEntityRoleEnum);
    if jsn.has('whatReference') {a3} then
      result.what := ParseReference(jsn.vObj['whatReference']);
    if jsn.has('whatIdentifier') {a4} then
      result.what := ParseIdentifier(jsn.vObj['whatIdentifier']);
    if jsn.has('whatUri') or jsn.has('_whatUri') then
      result.what := parseUri(jsn.node['whatUri'], jsn.vObj['_whatUri']);
    if jsn.has('agent') then
      iterateArray(jsn.vArr['agent'], result.agentList, parseProvenanceAgent);
end;

procedure TFHIRJsonComposer.ComposeProvenanceEntity(json : TJSONWriter; name : string; elem : TFhirProvenanceEntity; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'role', elem.RoleElement, CODES_TFhirProvenanceEntityRoleEnum, false);
  ComposeEnumProps(json, 'role', elem.RoleElement, CODES_TFhirProvenanceEntityRoleEnum, false);
  if (elem.what is TFhirReference) then
    ComposeReference(json, 'whatReference', TFhirReference(elem.what))
  else if (elem.what is TFhirIdentifier) then 
    ComposeIdentifier(json, 'whatIdentifier', TFhirIdentifier(elem.what)) 
  else if (elem.what is TFhirUri) then 
  begin
    ComposeUriValue(json, 'whatUri', TFhirUri(elem.what), false);
    ComposeUriProps(json, 'whatUri', TFhirUri(elem.what), false);
  end;
  if (SummaryOption in [soFull, soData]) and (elem.agentList.Count > 0) then
  begin
    json.valueArray('agent');
    for i := 0 to elem.agentList.Count - 1 do
      ComposeProvenanceAgent(json, '', elem.agentList[i]); {z - @Provenance.agent}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseProvenance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseProvenance(jsn)); {2}
end;

function TFHIRJsonParser.ParseProvenance(jsn : TJsonObject) : TFhirProvenance;
begin
  result := TFhirProvenance.create;
  try
    ParseProvenanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseProvenanceProperties(jsn : TJsonObject; result : TFhirProvenance);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], result.targetList, parseReference{TFhirReference});
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('recorded') or jsn.has('_recorded') then
        result.recordedElement := parseInstant(jsn.node['recorded'], jsn.vObj['_recorded']);{q}
      if jsn.has('policy') or jsn.has('_policy') then
      iteratePrimitiveArray(jsn.vArr['policy'], jsn.vArr['_policy'], result.policyList, parseUri);
    if jsn.has('location') then
        result.location := ParseReference{TFhirLocation}(jsn.vObj['location']);{q3}
    if jsn.has('reason') then
      iterateArray(jsn.vArr['reason'], result.reasonList, parseCoding);
    if jsn.has('activity') then
        result.activity := ParseCoding(jsn.vObj['activity']);{q3}
    if jsn.has('agent') then
      iterateArray(jsn.vArr['agent'], result.agentList, parseProvenanceAgent);
    if jsn.has('entity') then
      iterateArray(jsn.vArr['entity'], result.entityList, parseProvenanceEntity);
    if jsn.has('signature') then
      iterateArray(jsn.vArr['signature'], result.signatureList, parseSignature);
end;

procedure TFHIRJsonComposer.ComposeProvenance(json : TJSONWriter; name : string; elem : TFhirProvenance; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (elem.targetList.Count > 0) then
  begin
    json.valueArray('target');
    for i := 0 to elem.targetList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.targetList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
  ComposeInstantValue(json, 'recorded', elem.recordedElement, false);
  ComposeInstantProps(json, 'recorded', elem.recordedElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('policy') and (elem.policyList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.policyList.Count - 1 do
    begin
      ext := ext or ((elem.policyList[i].id <> '') or (elem.policyList[i].hasExtensionList) {no-comments or (elem.policyList[i].hasComments)});
      val := val or (elem.policyList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('policy');
      for i := 0 to elem.policyList.Count - 1 do
        ComposeUriValue(json, '',elem.policyList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_policy');
      for i := 0 to elem.policyList.Count - 1 do
        ComposeUriProps(json, '',elem.policyList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(json, 'location', elem.location); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('reason') and (elem.reasonList.Count > 0) then
  begin
    json.valueArray('reason');
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCoding(json, '', elem.reasonList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('activity') then
    ComposeCoding(json, 'activity', elem.activity); {a}
  if (elem.agentList.Count > 0) then
  begin
    json.valueArray('agent');
    for i := 0 to elem.agentList.Count - 1 do
      ComposeProvenanceAgent(json, '', elem.agentList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('entity') and (elem.entityList.Count > 0) then
  begin
    json.valueArray('entity');
    for i := 0 to elem.entityList.Count - 1 do
      ComposeProvenanceEntity(json, '', elem.entityList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('signature') and (elem.signatureList.Count > 0) then
  begin
    json.valueArray('signature');
    for i := 0 to elem.signatureList.Count - 1 do
      ComposeSignature(json, '', elem.signatureList[i]); {z - Signature}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
procedure TFHIRJsonParser.ParseQuestionnaireItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuestionnaireItem(jsn : TJsonObject) : TFhirQuestionnaireItem;
begin
  result := TFhirQuestionnaireItem.create;
  try
    ParseQuestionnaireItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemProperties(jsn : TJsonObject; result : TFhirQuestionnaireItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('linkId') or jsn.has('_linkId') then
        result.linkIdElement := parseString(jsn.node['linkId'], jsn.vObj['_linkId']);{q}
    if jsn.has('definition') or jsn.has('_definition') then
        result.definitionElement := parseUri(jsn.node['definition'], jsn.vObj['_definition']);{q}
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCoding);
    if jsn.has('prefix') or jsn.has('_prefix') then
        result.prefixElement := parseString(jsn.node['prefix'], jsn.vObj['_prefix']);{q}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);{q}
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirItemTypeEnum, SYSTEMS_TFhirItemTypeEnum);
    if jsn.has('enableWhen') then
      iterateArray(jsn.vArr['enableWhen'], result.enableWhenList, parseQuestionnaireItemEnableWhen);
    if jsn.has('required') or jsn.has('_required') then
        result.requiredElement := parseBoolean(jsn.node['required'], jsn.vObj['_required']);{q}
    if jsn.has('repeats') or jsn.has('_repeats') then
        result.repeatsElement := parseBoolean(jsn.node['repeats'], jsn.vObj['_repeats']);{q}
    if jsn.has('readOnly') or jsn.has('_readOnly') then
        result.readOnlyElement := parseBoolean(jsn.node['readOnly'], jsn.vObj['_readOnly']);{q}
    if jsn.has('maxLength') or jsn.has('_maxLength') then
        result.maxLengthElement := parseInteger(jsn.node['maxLength'], jsn.vObj['_maxLength']);{q}
    if jsn.has('options') then
        result.options := ParseReference{TFhirValueSet}(jsn.vObj['options']);{q3}
    if jsn.has('option') then
      iterateArray(jsn.vArr['option'], result.optionList, parseQuestionnaireItemOption);
    if jsn.has('initialAttachment') {a4} then
      result.initial := ParseAttachment(jsn.vObj['initialAttachment']);
    if jsn.has('initialCoding') {a4} then
      result.initial := ParseCoding(jsn.vObj['initialCoding']);
    if jsn.has('initialQuantity') {a4} then
      result.initial := ParseQuantity(jsn.vObj['initialQuantity']);
    if jsn.has('initialReference') {a3} then
      result.initial := ParseReference(jsn.vObj['initialReference']);
    if jsn.has('initialBoolean') or jsn.has('_initialBoolean') then
      result.initial := parseBoolean(jsn.node['initialBoolean'], jsn.vObj['_initialBoolean']);
    if jsn.has('initialDecimal') or jsn.has('_initialDecimal') then
      result.initial := parseDecimal(jsn.node['initialDecimal'], jsn.vObj['_initialDecimal']);
    if jsn.has('initialInteger') or jsn.has('_initialInteger') then
      result.initial := parseInteger(jsn.node['initialInteger'], jsn.vObj['_initialInteger']);
    if jsn.has('initialDate') or jsn.has('_initialDate') then
      result.initial := parseDate(jsn.node['initialDate'], jsn.vObj['_initialDate']);
    if jsn.has('initialDateTime') or jsn.has('_initialDateTime') then
      result.initial := parseDateTime(jsn.node['initialDateTime'], jsn.vObj['_initialDateTime']);
    if jsn.has('initialTime') or jsn.has('_initialTime') then
      result.initial := parseTime(jsn.node['initialTime'], jsn.vObj['_initialTime']);
    if jsn.has('initialString') or jsn.has('_initialString') then
      result.initial := parseString(jsn.node['initialString'], jsn.vObj['_initialString']);
    if jsn.has('initialUri') or jsn.has('_initialUri') then
      result.initial := parseUri(jsn.node['initialUri'], jsn.vObj['_initialUri']);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseQuestionnaireItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireItem(json : TJSONWriter; name : string; elem : TFhirQuestionnaireItem; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'linkId', elem.linkIdElement, false);
  ComposeStringProps(json, 'linkId', elem.linkIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'definition', elem.definitionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'definition', elem.definitionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCoding(json, '', elem.codeList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'prefix', elem.prefixElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'prefix', elem.prefixElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirItemTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirItemTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.enableWhenList.Count > 0) then
  begin
    json.valueArray('enableWhen');
    for i := 0 to elem.enableWhenList.Count - 1 do
      ComposeQuestionnaireItemEnableWhen(json, '', elem.enableWhenList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.required <> false)) then
    ComposeBooleanValue(json, 'required', elem.requiredElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.required <> false)) then
    ComposeBooleanProps(json, 'required', elem.requiredElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.repeats <> false)) then
    ComposeBooleanValue(json, 'repeats', elem.repeatsElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.repeats <> false)) then
    ComposeBooleanProps(json, 'repeats', elem.repeatsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'readOnly', elem.readOnlyElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'readOnly', elem.readOnlyElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'maxLength', elem.maxLengthElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'maxLength', elem.maxLengthElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirValueSet}(json, 'options', elem.options); {a}
  if (SummaryOption in [soFull, soData]) and (elem.optionList.Count > 0) then
  begin
    json.valueArray('option');
    for i := 0 to elem.optionList.Count - 1 do
      ComposeQuestionnaireItemOption(json, '', elem.optionList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.initial is TFhirAttachment) then 
    ComposeAttachment(json, 'initialAttachment', TFhirAttachment(elem.initial)) 
  else if (SummaryOption in [soFull, soData]) and (elem.initial is TFhirCoding) then 
    ComposeCoding(json, 'initialCoding', TFhirCoding(elem.initial)) 
  else if (SummaryOption in [soFull, soData]) and (elem.initial is TFhirQuantity) then 
    ComposeQuantity(json, 'initialQuantity', TFhirQuantity(elem.initial)) 
  else if (SummaryOption in [soFull, soData]) and (elem.initial is TFhirReference) then
    ComposeReference(json, 'initialReference', TFhirReference(elem.initial))
  else if (SummaryOption in [soFull, soData]) and (elem.initial is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'initialBoolean', TFhirBoolean(elem.initial), false);
    ComposeBooleanProps(json, 'initialBoolean', TFhirBoolean(elem.initial), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.initial is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'initialDecimal', TFhirDecimal(elem.initial), false);
    ComposeDecimalProps(json, 'initialDecimal', TFhirDecimal(elem.initial), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.initial is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'initialInteger', TFhirInteger(elem.initial), false);
    ComposeIntegerProps(json, 'initialInteger', TFhirInteger(elem.initial), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.initial is TFhirDate) then 
  begin
    ComposeDateValue(json, 'initialDate', TFhirDate(elem.initial), false);
    ComposeDateProps(json, 'initialDate', TFhirDate(elem.initial), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.initial is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'initialDateTime', TFhirDateTime(elem.initial), false);
    ComposeDateTimeProps(json, 'initialDateTime', TFhirDateTime(elem.initial), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.initial is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'initialTime', TFhirTime(elem.initial), false);
    ComposeTimeProps(json, 'initialTime', TFhirTime(elem.initial), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.initial is TFhirString) then 
  begin
    ComposeStringValue(json, 'initialString', TFhirString(elem.initial), false);
    ComposeStringProps(json, 'initialString', TFhirString(elem.initial), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.initial is TFhirUri) then 
  begin
    ComposeUriValue(json, 'initialUri', TFhirUri(elem.initial), false);
    ComposeUriProps(json, 'initialUri', TFhirUri(elem.initial), false);
  end;
  if (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireItem(json, '', elem.itemList[i]); {z - @Questionnaire.item}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemEnableWhen(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireItemEnableWhen(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuestionnaireItemEnableWhen(jsn : TJsonObject) : TFhirQuestionnaireItemEnableWhen;
begin
  result := TFhirQuestionnaireItemEnableWhen.create;
  try
    ParseQuestionnaireItemEnableWhenProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemEnableWhenProperties(jsn : TJsonObject; result : TFhirQuestionnaireItemEnableWhen);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('question') or jsn.has('_question') then
        result.questionElement := parseString(jsn.node['question'], jsn.vObj['_question']);{q}
    if jsn.has('hasAnswer') or jsn.has('_hasAnswer') then
        result.hasAnswerElement := parseBoolean(jsn.node['hasAnswer'], jsn.vObj['_hasAnswer']);{q}
    if jsn.has('answerAttachment') {a4} then
      result.answer := ParseAttachment(jsn.vObj['answerAttachment']);
    if jsn.has('answerCoding') {a4} then
      result.answer := ParseCoding(jsn.vObj['answerCoding']);
    if jsn.has('answerQuantity') {a4} then
      result.answer := ParseQuantity(jsn.vObj['answerQuantity']);
    if jsn.has('answerReference') {a3} then
      result.answer := ParseReference(jsn.vObj['answerReference']);
    if jsn.has('answerBoolean') or jsn.has('_answerBoolean') then
      result.answer := parseBoolean(jsn.node['answerBoolean'], jsn.vObj['_answerBoolean']);
    if jsn.has('answerDecimal') or jsn.has('_answerDecimal') then
      result.answer := parseDecimal(jsn.node['answerDecimal'], jsn.vObj['_answerDecimal']);
    if jsn.has('answerInteger') or jsn.has('_answerInteger') then
      result.answer := parseInteger(jsn.node['answerInteger'], jsn.vObj['_answerInteger']);
    if jsn.has('answerDate') or jsn.has('_answerDate') then
      result.answer := parseDate(jsn.node['answerDate'], jsn.vObj['_answerDate']);
    if jsn.has('answerDateTime') or jsn.has('_answerDateTime') then
      result.answer := parseDateTime(jsn.node['answerDateTime'], jsn.vObj['_answerDateTime']);
    if jsn.has('answerTime') or jsn.has('_answerTime') then
      result.answer := parseTime(jsn.node['answerTime'], jsn.vObj['_answerTime']);
    if jsn.has('answerString') or jsn.has('_answerString') then
      result.answer := parseString(jsn.node['answerString'], jsn.vObj['_answerString']);
    if jsn.has('answerUri') or jsn.has('_answerUri') then
      result.answer := parseUri(jsn.node['answerUri'], jsn.vObj['_answerUri']);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireItemEnableWhen(json : TJSONWriter; name : string; elem : TFhirQuestionnaireItemEnableWhen; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'question', elem.questionElement, false);
  ComposeStringProps(json, 'question', elem.questionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'hasAnswer', elem.hasAnswerElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'hasAnswer', elem.hasAnswerElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.answer is TFhirAttachment) then 
    ComposeAttachment(json, 'answerAttachment', TFhirAttachment(elem.answer)) 
  else if (SummaryOption in [soFull, soData]) and (elem.answer is TFhirCoding) then 
    ComposeCoding(json, 'answerCoding', TFhirCoding(elem.answer)) 
  else if (SummaryOption in [soFull, soData]) and (elem.answer is TFhirQuantity) then 
    ComposeQuantity(json, 'answerQuantity', TFhirQuantity(elem.answer)) 
  else if (SummaryOption in [soFull, soData]) and (elem.answer is TFhirReference) then
    ComposeReference(json, 'answerReference', TFhirReference(elem.answer))
  else if (SummaryOption in [soFull, soData]) and (elem.answer is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'answerBoolean', TFhirBoolean(elem.answer), false);
    ComposeBooleanProps(json, 'answerBoolean', TFhirBoolean(elem.answer), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.answer is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'answerDecimal', TFhirDecimal(elem.answer), false);
    ComposeDecimalProps(json, 'answerDecimal', TFhirDecimal(elem.answer), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.answer is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'answerInteger', TFhirInteger(elem.answer), false);
    ComposeIntegerProps(json, 'answerInteger', TFhirInteger(elem.answer), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.answer is TFhirDate) then 
  begin
    ComposeDateValue(json, 'answerDate', TFhirDate(elem.answer), false);
    ComposeDateProps(json, 'answerDate', TFhirDate(elem.answer), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.answer is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'answerDateTime', TFhirDateTime(elem.answer), false);
    ComposeDateTimeProps(json, 'answerDateTime', TFhirDateTime(elem.answer), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.answer is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'answerTime', TFhirTime(elem.answer), false);
    ComposeTimeProps(json, 'answerTime', TFhirTime(elem.answer), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.answer is TFhirString) then 
  begin
    ComposeStringValue(json, 'answerString', TFhirString(elem.answer), false);
    ComposeStringProps(json, 'answerString', TFhirString(elem.answer), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.answer is TFhirUri) then 
  begin
    ComposeUriValue(json, 'answerUri', TFhirUri(elem.answer), false);
    ComposeUriProps(json, 'answerUri', TFhirUri(elem.answer), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemOption(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireItemOption(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuestionnaireItemOption(jsn : TJsonObject) : TFhirQuestionnaireItemOption;
begin
  result := TFhirQuestionnaireItemOption.create;
  try
    ParseQuestionnaireItemOptionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireItemOptionProperties(jsn : TJsonObject; result : TFhirQuestionnaireItemOption);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      result.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireItemOption(json : TJSONWriter; name : string; elem : TFhirQuestionnaireItemOption; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if (elem.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(elem.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(elem.value), false);
  end
  else if (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseQuestionnaire(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaire(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuestionnaire(jsn : TJsonObject) : TFhirQuestionnaire;
begin
  result := TFhirQuestionnaire.create;
  try
    ParseQuestionnaireProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireProperties(jsn : TJsonObject; result : TFhirQuestionnaire);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        result.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);{q}
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        result.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);{q}
    if jsn.has('effectivePeriod') then
        result.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);{q3}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCoding);
    if jsn.has('subjectType') or jsn.has('_subjectType') then
      iterateEnumArray(jsn.vArr['subjectType'], jsn.vArr['_subjectType'], jsn.path+'/subjectType', result.subjectType, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseQuestionnaireItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaire(json : TJSONWriter; name : string; elem : TFhirQuestionnaire; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDateValue(json, 'approvalDate', elem.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDateProps(json, 'approvalDate', elem.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDateValue(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDateProps(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(json, 'effectivePeriod', elem.effectivePeriod); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCoding(json, '', elem.codeList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subjectType') and (elem.subjectType.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.subjectType.Count - 1 do
    begin
      val := val or (elem.subjectType[i].hasPrimitiveValue);
      ext := ext or ((elem.subjectType[i].id <> '') or (elem.subjectType[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('subjectType');
      for i := 0 to elem.subjectType.Count - 1 do
        ComposeEnumValue(json, '', elem.subjectType[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_subjectType');
      for i := 0 to elem.subjectType.Count - 1 do
        ComposeEnumProps(json, '', elem.subjectType[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('item') and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
procedure TFHIRJsonParser.ParseQuestionnaireResponseItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireResponseItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuestionnaireResponseItem(jsn : TJsonObject) : TFhirQuestionnaireResponseItem;
begin
  result := TFhirQuestionnaireResponseItem.create;
  try
    ParseQuestionnaireResponseItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponseItemProperties(jsn : TJsonObject; result : TFhirQuestionnaireResponseItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('linkId') or jsn.has('_linkId') then
        result.linkIdElement := parseString(jsn.node['linkId'], jsn.vObj['_linkId']);{q}
    if jsn.has('definition') or jsn.has('_definition') then
        result.definitionElement := parseUri(jsn.node['definition'], jsn.vObj['_definition']);{q}
    if jsn.has('text') or jsn.has('_text') then
        result.textElement := parseString(jsn.node['text'], jsn.vObj['_text']);{q}
    if jsn.has('subject') then
        result.subject := ParseReference{TFhirReference}(jsn.vObj['subject']);{q3}
    if jsn.has('answer') then
      iterateArray(jsn.vArr['answer'], result.answerList, parseQuestionnaireResponseItemAnswer);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseQuestionnaireResponseItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireResponseItem(json : TJSONWriter; name : string; elem : TFhirQuestionnaireResponseItem; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'linkId', elem.linkIdElement, false);
  ComposeStringProps(json, 'linkId', elem.linkIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'definition', elem.definitionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'definition', elem.definitionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'text', elem.textElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soData]) and (elem.answerList.Count > 0) then
  begin
    json.valueArray('answer');
    for i := 0 to elem.answerList.Count - 1 do
      ComposeQuestionnaireResponseItemAnswer(json, '', elem.answerList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(json, '', elem.itemList[i]); {z - @QuestionnaireResponse.item}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponseItemAnswer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireResponseItemAnswer(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuestionnaireResponseItemAnswer(jsn : TJsonObject) : TFhirQuestionnaireResponseItemAnswer;
begin
  result := TFhirQuestionnaireResponseItemAnswer.create;
  try
    ParseQuestionnaireResponseItemAnswerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponseItemAnswerProperties(jsn : TJsonObject; result : TFhirQuestionnaireResponseItemAnswer);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueReference') {a3} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      result.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      result.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseQuestionnaireResponseItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireResponseItemAnswer(json : TJSONWriter; name : string; elem : TFhirQuestionnaireResponseItemAnswer; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirReference) then
    ComposeReference(json, 'valueReference', TFhirReference(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(elem.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(elem.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(elem.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(elem.value), false);
  end;
  if (SummaryOption in [soFull, soData]) and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(json, '', elem.itemList[i]); {z - @QuestionnaireResponse.item}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponse(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseQuestionnaireResponse(jsn)); {2}
end;

function TFHIRJsonParser.ParseQuestionnaireResponse(jsn : TJsonObject) : TFhirQuestionnaireResponse;
begin
  result := TFhirQuestionnaireResponse.create;
  try
    ParseQuestionnaireResponseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseQuestionnaireResponseProperties(jsn : TJsonObject; result : TFhirQuestionnaireResponse);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('parent') then
      iterateArray(jsn.vArr['parent'], result.parentList, parseReference{Resource});
    if jsn.has('questionnaire') then
        result.questionnaire := ParseReference{TFhirQuestionnaire}(jsn.vObj['questionnaire']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirQuestionnaireAnswersStatusEnum, SYSTEMS_TFhirQuestionnaireAnswersStatusEnum);
    if jsn.has('subject') then
        result.subject := ParseReference{TFhirReference}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('authored') or jsn.has('_authored') then
        result.authoredElement := parseDateTime(jsn.node['authored'], jsn.vObj['_authored']);{q}
    if jsn.has('author') then
        result.author := ParseReference{Resource}(jsn.vObj['author']);{q3}
    if jsn.has('source') then
        result.source := ParseReference{Resource}(jsn.vObj['source']);{q3}
    if jsn.has('item') then
      iterateArray(jsn.vArr['item'], result.itemList, parseQuestionnaireResponseItem);
end;

procedure TFHIRJsonComposer.ComposeQuestionnaireResponse(json : TJSONWriter; name : string; elem : TFhirQuestionnaireResponse; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(ReferralRequest|CarePlan|ProcedureRequest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('parent') and (elem.parentList.Count > 0) then
  begin
    json.valueArray('parent');
    for i := 0 to elem.parentList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.parentList[i]); {z - Reference(Observation|Procedure)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('questionnaire') then
    ComposeReference{TFhirQuestionnaire}(json, 'questionnaire', elem.questionnaire); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirQuestionnaireAnswersStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirQuestionnaireAnswersStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirReference}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authored') then
    ComposeDateTimeValue(json, 'authored', elem.authoredElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authored') then
    ComposeDateTimeProps(json, 'authored', elem.authoredElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    ComposeReference{Resource}(json, 'author', elem.author); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('source') then
    ComposeReference{Resource}(json, 'source', elem.source); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('item') and (elem.itemList.Count > 0) then
  begin
    json.valueArray('item');
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(json, '', elem.itemList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REFERRALREQUEST}
procedure TFHIRJsonParser.ParseReferralRequestRequester(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseReferralRequestRequester(jsn)); {2}
end;

function TFHIRJsonParser.ParseReferralRequestRequester(jsn : TJsonObject) : TFhirReferralRequestRequester;
begin
  result := TFhirReferralRequestRequester.create;
  try
    ParseReferralRequestRequesterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseReferralRequestRequesterProperties(jsn : TJsonObject; result : TFhirReferralRequestRequester);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('agent') then
        result.agent := ParseReference{Resource}(jsn.vObj['agent']);{q3}
    if jsn.has('onBehalfOf') then
        result.onBehalfOf := ParseReference{TFhirOrganization}(jsn.vObj['onBehalfOf']);{q3}
end;

procedure TFHIRJsonComposer.ComposeReferralRequestRequester(json : TJSONWriter; name : string; elem : TFhirReferralRequestRequester; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'agent', elem.agent); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(json, 'onBehalfOf', elem.onBehalfOf); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseReferralRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseReferralRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseReferralRequest(jsn : TJsonObject) : TFhirReferralRequest;
begin
  result := TFhirReferralRequest.create;
  try
    ParseReferralRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseReferralRequestProperties(jsn : TJsonObject; result : TFhirReferralRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('definition') then
      iterateArray(jsn.vArr['definition'], result.definitionList, parseReference{Resource});
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{Resource});
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], result.replacesList, parseReference{TFhirReferralRequest});
    if jsn.has('groupIdentifier') then
        result.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('intent') or jsn.has('_intent')  then
      result.intentElement := parseEnum(jsn.path+'/intent', jsn.node['intent'], jsn.vObj['_intent'], CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('serviceRequested') then
      iterateArray(jsn.vArr['serviceRequested'], result.serviceRequestedList, parseCodeableConcept);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('requester') then
        result.requester := ParseReferralRequestRequester(jsn.vObj['requester']);{q3}
    if jsn.has('specialty') then
        result.specialty := ParseCodeableConcept(jsn.vObj['specialty']);{q3}
    if jsn.has('recipient') then
      iterateArray(jsn.vArr['recipient'], result.recipientList, parseReference{Resource});
    if jsn.has('reasonCode') then
      iterateArray(jsn.vArr['reasonCode'], result.reasonCodeList, parseCodeableConcept);
    if jsn.has('reasonReference') then
      iterateArray(jsn.vArr['reasonReference'], result.reasonReferenceList, parseReference{Resource});
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('supportingInfo') then
      iterateArray(jsn.vArr['supportingInfo'], result.supportingInfoList, parseReference{TFhirReference});
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('relevantHistory') then
      iterateArray(jsn.vArr['relevantHistory'], result.relevantHistoryList, parseReference{TFhirProvenance});
end;

procedure TFHIRJsonComposer.ComposeReferralRequest(json : TJSONWriter; name : string; elem : TFhirReferralRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('definition') and (elem.definitionList.Count > 0) then
  begin
    json.valueArray('definition');
    for i := 0 to elem.definitionList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.definitionList[i]); {z - Reference(ActivityDefinition|PlanDefinition)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.basedOnList[i]); {z - Reference(ReferralRequest|CarePlan|ProcedureRequest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('replaces') and (elem.replacesList.Count > 0) then
  begin
    json.valueArray('replaces');
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirReferralRequest}(json, '', elem.replacesList[i]); {z - Reference(ReferralRequest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('groupIdentifier') then
    ComposeIdentifier(json, 'groupIdentifier', elem.groupIdentifier); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  ComposeEnumValue(json, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum, false);
  ComposeEnumProps(json, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('serviceRequested') and (elem.serviceRequestedList.Count > 0) then
  begin
    json.valueArray('serviceRequested');
    for i := 0 to elem.serviceRequestedList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.serviceRequestedList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requester') then
    ComposeReferralRequestRequester(json, 'requester', elem.requester); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('specialty') then
    ComposeCodeableConcept(json, 'specialty', elem.specialty); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('recipient') and (elem.recipientList.Count > 0) then
  begin
    json.valueArray('recipient');
    for i := 0 to elem.recipientList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.recipientList[i]); {z - Reference(Practitioner|Organization|HealthcareService)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') and (elem.reasonCodeList.Count > 0) then
  begin
    json.valueArray('reasonCode');
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.reasonCodeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') and (elem.reasonReferenceList.Count > 0) then
  begin
    json.valueArray('reasonReference');
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.reasonReferenceList[i]); {z - Reference(Condition|Observation)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInfo') and (elem.supportingInfoList.Count > 0) then
  begin
    json.valueArray('supportingInfo');
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.supportingInfoList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('relevantHistory') and (elem.relevantHistoryList.Count > 0) then
  begin
    json.valueArray('relevantHistory');
    for i := 0 to elem.relevantHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(json, '', elem.relevantHistoryList[i]); {z - Reference(Provenance)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_REFERRALREQUEST}
{$IFDEF FHIR_RELATEDPERSON}
procedure TFHIRJsonParser.ParseRelatedPerson(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRelatedPerson(jsn)); {2}
end;

function TFHIRJsonParser.ParseRelatedPerson(jsn : TJsonObject) : TFhirRelatedPerson;
begin
  result := TFhirRelatedPerson.create;
  try
    ParseRelatedPersonProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRelatedPersonProperties(jsn : TJsonObject; result : TFhirRelatedPerson);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);{q}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('relationship') then
        result.relationship := ParseCodeableConcept(jsn.vObj['relationship']);{q3}
    if jsn.has('name') then
      iterateArray(jsn.vArr['name'], result.nameList, parseHumanName);
    if jsn.has('telecom') then
      iterateArray(jsn.vArr['telecom'], result.telecomList, parseContactPoint);
    if jsn.has('gender') or jsn.has('_gender')  then
      result.genderElement := parseEnum(jsn.path+'/gender', jsn.node['gender'], jsn.vObj['_gender'], CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum);
    if jsn.has('birthDate') or jsn.has('_birthDate') then
        result.birthDateElement := parseDate(jsn.node['birthDate'], jsn.vObj['_birthDate']);{q}
    if jsn.has('address') then
      iterateArray(jsn.vArr['address'], result.addressList, parseAddress);
    if jsn.has('photo') then
      iterateArray(jsn.vArr['photo'], result.photoList, parseAttachment);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
end;

procedure TFHIRJsonComposer.ComposeRelatedPerson(json : TJSONWriter; name : string; elem : TFhirRelatedPerson; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('relationship') then
    ComposeCodeableConcept(json, 'relationship', elem.relationship); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') and (elem.nameList.Count > 0) then
  begin
    json.valueArray('name');
    for i := 0 to elem.nameList.Count - 1 do
      ComposeHumanName(json, '', elem.nameList[i]); {z - HumanName}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('telecom') and (elem.telecomList.Count > 0) then
  begin
    json.valueArray('telecom');
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(json, '', elem.telecomList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gender') then
    ComposeEnumValue(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gender') then
    ComposeEnumProps(json, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('birthDate') then
    ComposeDateValue(json, 'birthDate', elem.birthDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('birthDate') then
    ComposeDateProps(json, 'birthDate', elem.birthDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('address') and (elem.addressList.Count > 0) then
  begin
    json.valueArray('address');
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(json, '', elem.addressList[i]); {z - Address}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('photo') and (elem.photoList.Count > 0) then
  begin
    json.valueArray('photo');
    for i := 0 to elem.photoList.Count - 1 do
      ComposeAttachment(json, '', elem.photoList[i]); {z - Attachment}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
end;

{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
procedure TFHIRJsonParser.ParseRequestGroupAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRequestGroupAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseRequestGroupAction(jsn : TJsonObject) : TFhirRequestGroupAction;
begin
  result := TFhirRequestGroupAction.create;
  try
    ParseRequestGroupActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRequestGroupActionProperties(jsn : TJsonObject; result : TFhirRequestGroupAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('label') or jsn.has('_label') then
        result.label_Element := parseString(jsn.node['label'], jsn.vObj['_label']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('textEquivalent') or jsn.has('_textEquivalent') then
        result.textEquivalentElement := parseString(jsn.node['textEquivalent'], jsn.vObj['_textEquivalent']);{q}
    if jsn.has('code') then
      iterateArray(jsn.vArr['code'], result.codeList, parseCodeableConcept);
    if jsn.has('documentation') then
      iterateArray(jsn.vArr['documentation'], result.documentationList, parseRelatedArtifact);
    if jsn.has('condition') then
      iterateArray(jsn.vArr['condition'], result.conditionList, parseRequestGroupActionCondition);
    if jsn.has('relatedAction') then
      iterateArray(jsn.vArr['relatedAction'], result.relatedActionList, parseRequestGroupActionRelatedAction);
    if jsn.has('timingPeriod') {a4} then
      result.timing := ParsePeriod(jsn.vObj['timingPeriod']);
    if jsn.has('timingDuration') {a4} then
      result.timing := ParseDuration(jsn.vObj['timingDuration']);
    if jsn.has('timingRange') {a4} then
      result.timing := ParseRange(jsn.vObj['timingRange']);
    if jsn.has('timingTiming') {a4} then
      result.timing := ParseTiming(jsn.vObj['timingTiming']);
    if jsn.has('timingDateTime') or jsn.has('_timingDateTime') then
      result.timing := parseDateTime(jsn.node['timingDateTime'], jsn.vObj['_timingDateTime']);
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseReference{Resource});
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
    if jsn.has('groupingBehavior') or jsn.has('_groupingBehavior')  then
      result.groupingBehaviorElement := parseEnum(jsn.path+'/groupingBehavior', jsn.node['groupingBehavior'], jsn.vObj['_groupingBehavior'], CODES_TFhirActionGroupingBehaviorEnum, SYSTEMS_TFhirActionGroupingBehaviorEnum);
    if jsn.has('selectionBehavior') or jsn.has('_selectionBehavior')  then
      result.selectionBehaviorElement := parseEnum(jsn.path+'/selectionBehavior', jsn.node['selectionBehavior'], jsn.vObj['_selectionBehavior'], CODES_TFhirActionSelectionBehaviorEnum, SYSTEMS_TFhirActionSelectionBehaviorEnum);
    if jsn.has('requiredBehavior') or jsn.has('_requiredBehavior')  then
      result.requiredBehaviorElement := parseEnum(jsn.path+'/requiredBehavior', jsn.node['requiredBehavior'], jsn.vObj['_requiredBehavior'], CODES_TFhirActionRequiredBehaviorEnum, SYSTEMS_TFhirActionRequiredBehaviorEnum);
    if jsn.has('precheckBehavior') or jsn.has('_precheckBehavior')  then
      result.precheckBehaviorElement := parseEnum(jsn.path+'/precheckBehavior', jsn.node['precheckBehavior'], jsn.vObj['_precheckBehavior'], CODES_TFhirActionPrecheckBehaviorEnum, SYSTEMS_TFhirActionPrecheckBehaviorEnum);
    if jsn.has('cardinalityBehavior') or jsn.has('_cardinalityBehavior')  then
      result.cardinalityBehaviorElement := parseEnum(jsn.path+'/cardinalityBehavior', jsn.node['cardinalityBehavior'], jsn.vObj['_cardinalityBehavior'], CODES_TFhirActionCardinalityBehaviorEnum, SYSTEMS_TFhirActionCardinalityBehaviorEnum);
    if jsn.has('resource') then
        result.resource := ParseReference{TFhirReference}(jsn.vObj['resource']);{q3}
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseRequestGroupAction);
end;

procedure TFHIRJsonComposer.ComposeRequestGroupAction(json : TJSONWriter; name : string; elem : TFhirRequestGroupAction; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'label', elem.label_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'label', elem.label_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'textEquivalent', elem.textEquivalentElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'textEquivalent', elem.textEquivalentElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.codeList.Count > 0) then
  begin
    json.valueArray('code');
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.codeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.documentationList.Count > 0) then
  begin
    json.valueArray('documentation');
    for i := 0 to elem.documentationList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.documentationList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.conditionList.Count > 0) then
  begin
    json.valueArray('condition');
    for i := 0 to elem.conditionList.Count - 1 do
      ComposeRequestGroupActionCondition(json, '', elem.conditionList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.relatedActionList.Count > 0) then
  begin
    json.valueArray('relatedAction');
    for i := 0 to elem.relatedActionList.Count - 1 do
      ComposeRequestGroupActionRelatedAction(json, '', elem.relatedActionList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) then 
    ComposePeriod(json, 'timingPeriod', TFhirPeriod(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDuration) then 
    ComposeDuration(json, 'timingDuration', TFhirDuration(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirRange) then 
    ComposeRange(json, 'timingRange', TFhirRange(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirTiming) then 
    ComposeTiming(json, 'timingTiming', TFhirTiming(elem.timing)) 
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
    ComposeDateTimeProps(json, 'timingDateTime', TFhirDateTime(elem.timing), false);
  end;
  if (SummaryOption in [soFull, soData]) and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.participantList[i]); {z - Reference(Patient|Person|Practitioner|RelatedPerson)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'groupingBehavior', elem.GroupingBehaviorElement, CODES_TFhirActionGroupingBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'groupingBehavior', elem.GroupingBehaviorElement, CODES_TFhirActionGroupingBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'selectionBehavior', elem.SelectionBehaviorElement, CODES_TFhirActionSelectionBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'selectionBehavior', elem.SelectionBehaviorElement, CODES_TFhirActionSelectionBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'requiredBehavior', elem.RequiredBehaviorElement, CODES_TFhirActionRequiredBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'requiredBehavior', elem.RequiredBehaviorElement, CODES_TFhirActionRequiredBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'precheckBehavior', elem.PrecheckBehaviorElement, CODES_TFhirActionPrecheckBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'precheckBehavior', elem.PrecheckBehaviorElement, CODES_TFhirActionPrecheckBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'cardinalityBehavior', elem.CardinalityBehaviorElement, CODES_TFhirActionCardinalityBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'cardinalityBehavior', elem.CardinalityBehaviorElement, CODES_TFhirActionCardinalityBehaviorEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'resource', elem.resource); {a}
  if (SummaryOption in [soFull, soData]) and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeRequestGroupAction(json, '', elem.actionList[i]); {z - @RequestGroup.action}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseRequestGroupActionCondition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRequestGroupActionCondition(jsn)); {2}
end;

function TFHIRJsonParser.ParseRequestGroupActionCondition(jsn : TJsonObject) : TFhirRequestGroupActionCondition;
begin
  result := TFhirRequestGroupActionCondition.create;
  try
    ParseRequestGroupActionConditionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRequestGroupActionConditionProperties(jsn : TJsonObject; result : TFhirRequestGroupActionCondition);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirActionConditionKindEnum, SYSTEMS_TFhirActionConditionKindEnum);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := parseString(jsn.node['language'], jsn.vObj['_language']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);{q}
end;

procedure TFHIRJsonComposer.ComposeRequestGroupActionCondition(json : TJSONWriter; name : string; elem : TFhirRequestGroupActionCondition; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirActionConditionKindEnum, false);
  ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirActionConditionKindEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseRequestGroupActionRelatedAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRequestGroupActionRelatedAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseRequestGroupActionRelatedAction(jsn : TJsonObject) : TFhirRequestGroupActionRelatedAction;
begin
  result := TFhirRequestGroupActionRelatedAction.create;
  try
    ParseRequestGroupActionRelatedActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRequestGroupActionRelatedActionProperties(jsn : TJsonObject; result : TFhirRequestGroupActionRelatedAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('actionId') or jsn.has('_actionId') then
        result.actionIdElement := parseId(jsn.node['actionId'], jsn.vObj['_actionId']);{q}
    if jsn.has('relationship') or jsn.has('_relationship')  then
      result.relationshipElement := parseEnum(jsn.path+'/relationship', jsn.node['relationship'], jsn.vObj['_relationship'], CODES_TFhirActionRelationshipTypeEnum, SYSTEMS_TFhirActionRelationshipTypeEnum);
    if jsn.has('offsetDuration') {a4} then
      result.offset := ParseDuration(jsn.vObj['offsetDuration']);
    if jsn.has('offsetRange') {a4} then
      result.offset := ParseRange(jsn.vObj['offsetRange']);
end;

procedure TFHIRJsonComposer.ComposeRequestGroupActionRelatedAction(json : TJSONWriter; name : string; elem : TFhirRequestGroupActionRelatedAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdValue(json, 'actionId', elem.actionIdElement, false);
  ComposeIdProps(json, 'actionId', elem.actionIdElement, false);
  ComposeEnumValue(json, 'relationship', elem.RelationshipElement, CODES_TFhirActionRelationshipTypeEnum, false);
  ComposeEnumProps(json, 'relationship', elem.RelationshipElement, CODES_TFhirActionRelationshipTypeEnum, false);
  if (SummaryOption in [soFull, soData]) and (elem.offset is TFhirDuration) then 
    ComposeDuration(json, 'offsetDuration', TFhirDuration(elem.offset)) 
  else if (SummaryOption in [soFull, soData]) and (elem.offset is TFhirRange) then 
    ComposeRange(json, 'offsetRange', TFhirRange(elem.offset)) ;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseRequestGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRequestGroup(jsn)); {2}
end;

function TFHIRJsonParser.ParseRequestGroup(jsn : TJsonObject) : TFhirRequestGroup;
begin
  result := TFhirRequestGroup.create;
  try
    ParseRequestGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRequestGroupProperties(jsn : TJsonObject; result : TFhirRequestGroup);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('definition') then
      iterateArray(jsn.vArr['definition'], result.definitionList, parseReference{TFhirReference});
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirReference});
    if jsn.has('replaces') then
      iterateArray(jsn.vArr['replaces'], result.replacesList, parseReference{TFhirReference});
    if jsn.has('groupIdentifier') then
        result.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum);
    if jsn.has('intent') or jsn.has('_intent')  then
      result.intentElement := parseEnum(jsn.path+'/intent', jsn.node['intent'], jsn.vObj['_intent'], CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum);
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('author') then
        result.author := ParseReference{Resource}(jsn.vObj['author']);{q3}
    if jsn.has('reasonCodeableConcept') {a4} then
      result.reason := ParseCodeableConcept(jsn.vObj['reasonCodeableConcept']);
    if jsn.has('reasonReference') {a3} then
      result.reason := ParseReference(jsn.vObj['reasonReference']);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseRequestGroupAction);
end;

procedure TFHIRJsonComposer.ComposeRequestGroup(json : TJSONWriter; name : string; elem : TFhirRequestGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('definition') and (elem.definitionList.Count > 0) then
  begin
    json.valueArray('definition');
    for i := 0 to elem.definitionList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.definitionList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.basedOnList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('replaces') and (elem.replacesList.Count > 0) then
  begin
    json.valueArray('replaces');
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.replacesList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('groupIdentifier') then
    ComposeIdentifier(json, 'groupIdentifier', elem.groupIdentifier); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum, false);
  ComposeEnumValue(json, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum, false);
  ComposeEnumProps(json, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('authoredOn') then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('authoredOn') then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('author') then
    ComposeReference{Resource}(json, 'author', elem.author); {a}
  if (SummaryOption in [soFull, soData]) and (elem.reason is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'reasonCodeableConcept', TFhirCodeableConcept(elem.reason)) 
  else if (SummaryOption in [soFull, soData]) and (elem.reason is TFhirReference) then
    ComposeReference(json, 'reasonReference', TFhirReference(elem.reason));
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('action') and (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeRequestGroupAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
procedure TFHIRJsonParser.ParseResearchStudyArm(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseResearchStudyArm(jsn)); {2}
end;

function TFHIRJsonParser.ParseResearchStudyArm(jsn : TJsonObject) : TFhirResearchStudyArm;
begin
  result := TFhirResearchStudyArm.create;
  try
    ParseResearchStudyArmProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseResearchStudyArmProperties(jsn : TJsonObject; result : TFhirResearchStudyArm);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
end;

procedure TFHIRJsonComposer.ComposeResearchStudyArm(json : TJSONWriter; name : string; elem : TFhirResearchStudyArm; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseResearchStudy(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseResearchStudy(jsn)); {2}
end;

function TFHIRJsonParser.ParseResearchStudy(jsn : TJsonObject) : TFhirResearchStudy;
begin
  result := TFhirResearchStudy.create;
  try
    ParseResearchStudyProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseResearchStudyProperties(jsn : TJsonObject; result : TFhirResearchStudy);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('protocol') then
      iterateArray(jsn.vArr['protocol'], result.protocolList, parseReference{TFhirPlanDefinition});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{TFhirResearchStudy});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirResearchStudyStatusEnum, SYSTEMS_TFhirResearchStudyStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('focus') then
      iterateArray(jsn.vArr['focus'], result.focusList, parseCodeableConcept);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], result.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('keyword') then
      iterateArray(jsn.vArr['keyword'], result.keywordList, parseCodeableConcept);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('enrollment') then
      iterateArray(jsn.vArr['enrollment'], result.enrollmentList, parseReference{TFhirGroup});
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('sponsor') then
        result.sponsor := ParseReference{TFhirOrganization}(jsn.vObj['sponsor']);{q3}
    if jsn.has('principalInvestigator') then
        result.principalInvestigator := ParseReference{TFhirPractitioner}(jsn.vObj['principalInvestigator']);{q3}
    if jsn.has('site') then
      iterateArray(jsn.vArr['site'], result.siteList, parseReference{TFhirLocation});
    if jsn.has('reasonStopped') then
        result.reasonStopped := ParseCodeableConcept(jsn.vObj['reasonStopped']);{q3}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('arm') then
      iterateArray(jsn.vArr['arm'], result.armList, parseResearchStudyArm);
end;

procedure TFHIRJsonComposer.ComposeResearchStudy(json : TJSONWriter; name : string; elem : TFhirResearchStudy; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('protocol') and (elem.protocolList.Count > 0) then
  begin
    json.valueArray('protocol');
    for i := 0 to elem.protocolList.Count - 1 do
      ComposeReference{TFhirPlanDefinition}(json, '', elem.protocolList[i]); {z - Reference(PlanDefinition)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirResearchStudy}(json, '', elem.partOfList[i]); {z - Reference(ResearchStudy)}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirResearchStudyStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirResearchStudyStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('focus') and (elem.focusList.Count > 0) then
  begin
    json.valueArray('focus');
    for i := 0 to elem.focusList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.focusList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') and (elem.relatedArtifactList.Count > 0) then
  begin
    json.valueArray('relatedArtifact');
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.relatedArtifactList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('keyword') and (elem.keywordList.Count > 0) then
  begin
    json.valueArray('keyword');
    for i := 0 to elem.keywordList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.keywordList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('enrollment') and (elem.enrollmentList.Count > 0) then
  begin
    json.valueArray('enrollment');
    for i := 0 to elem.enrollmentList.Count - 1 do
      ComposeReference{TFhirGroup}(json, '', elem.enrollmentList[i]); {z - Reference(Group)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('sponsor') then
    ComposeReference{TFhirOrganization}(json, 'sponsor', elem.sponsor); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('principalInvestigator') then
    ComposeReference{TFhirPractitioner}(json, 'principalInvestigator', elem.principalInvestigator); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('site') and (elem.siteList.Count > 0) then
  begin
    json.valueArray('site');
    for i := 0 to elem.siteList.Count - 1 do
      ComposeReference{TFhirLocation}(json, '', elem.siteList[i]); {z - Reference(Location)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonStopped') then
    ComposeCodeableConcept(json, 'reasonStopped', elem.reasonStopped); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('arm') and (elem.armList.Count > 0) then
  begin
    json.valueArray('arm');
    for i := 0 to elem.armList.Count - 1 do
      ComposeResearchStudyArm(json, '', elem.armList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
procedure TFHIRJsonParser.ParseResearchSubject(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseResearchSubject(jsn)); {2}
end;

function TFHIRJsonParser.ParseResearchSubject(jsn : TJsonObject) : TFhirResearchSubject;
begin
  result := TFhirResearchSubject.create;
  try
    ParseResearchSubjectProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseResearchSubjectProperties(jsn : TJsonObject; result : TFhirResearchSubject);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirResearchSubjectStatusEnum, SYSTEMS_TFhirResearchSubjectStatusEnum);
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('study') then
        result.study := ParseReference{TFhirResearchStudy}(jsn.vObj['study']);{q3}
    if jsn.has('individual') then
        result.individual := ParseReference{TFhirPatient}(jsn.vObj['individual']);{q3}
    if jsn.has('assignedArm') or jsn.has('_assignedArm') then
        result.assignedArmElement := parseString(jsn.node['assignedArm'], jsn.vObj['_assignedArm']);{q}
    if jsn.has('actualArm') or jsn.has('_actualArm') then
        result.actualArmElement := parseString(jsn.node['actualArm'], jsn.vObj['_actualArm']);{q}
    if jsn.has('consent') then
        result.consent := ParseReference{TFhirConsent}(jsn.vObj['consent']);{q3}
end;

procedure TFHIRJsonComposer.ComposeResearchSubject(json : TJSONWriter; name : string; elem : TFhirResearchSubject; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirResearchSubjectStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirResearchSubjectStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(json, 'period', elem.period); {a}
  ComposeReference{TFhirResearchStudy}(json, 'study', elem.study); {a}
  ComposeReference{TFhirPatient}(json, 'individual', elem.individual); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('assignedArm') then
    ComposeStringValue(json, 'assignedArm', elem.assignedArmElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('assignedArm') then
    ComposeStringProps(json, 'assignedArm', elem.assignedArmElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('actualArm') then
    ComposeStringValue(json, 'actualArm', elem.actualArmElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('actualArm') then
    ComposeStringProps(json, 'actualArm', elem.actualArmElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('consent') then
    ComposeReference{TFhirConsent}(json, 'consent', elem.consent); {a}
end;

{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
procedure TFHIRJsonParser.ParseRiskAssessmentPrediction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRiskAssessmentPrediction(jsn)); {2}
end;

function TFHIRJsonParser.ParseRiskAssessmentPrediction(jsn : TJsonObject) : TFhirRiskAssessmentPrediction;
begin
  result := TFhirRiskAssessmentPrediction.create;
  try
    ParseRiskAssessmentPredictionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRiskAssessmentPredictionProperties(jsn : TJsonObject; result : TFhirRiskAssessmentPrediction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('outcome') then
        result.outcome := ParseCodeableConcept(jsn.vObj['outcome']);{q3}
    if jsn.has('probabilityRange') {a4} then
      result.probability := ParseRange(jsn.vObj['probabilityRange']);
    if jsn.has('probabilityDecimal') or jsn.has('_probabilityDecimal') then
      result.probability := parseDecimal(jsn.node['probabilityDecimal'], jsn.vObj['_probabilityDecimal']);
    if jsn.has('qualitativeRisk') then
        result.qualitativeRisk := ParseCodeableConcept(jsn.vObj['qualitativeRisk']);{q3}
    if jsn.has('relativeRisk') or jsn.has('_relativeRisk') then
        result.relativeRiskElement := parseDecimal(jsn.node['relativeRisk'], jsn.vObj['_relativeRisk']);{q}
    if jsn.has('whenPeriod') {a4} then
      result.when := ParsePeriod(jsn.vObj['whenPeriod']);
    if jsn.has('whenRange') {a4} then
      result.when := ParseRange(jsn.vObj['whenRange']);
    if jsn.has('rationale') or jsn.has('_rationale') then
        result.rationaleElement := parseString(jsn.node['rationale'], jsn.vObj['_rationale']);{q}
end;

procedure TFHIRJsonComposer.ComposeRiskAssessmentPrediction(json : TJSONWriter; name : string; elem : TFhirRiskAssessmentPrediction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'outcome', elem.outcome); {a}
  if (SummaryOption in [soFull, soData]) and (elem.probability is TFhirRange) then 
    ComposeRange(json, 'probabilityRange', TFhirRange(elem.probability)) 
  else if (SummaryOption in [soFull, soData]) and (elem.probability is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'probabilityDecimal', TFhirDecimal(elem.probability), false);
    ComposeDecimalProps(json, 'probabilityDecimal', TFhirDecimal(elem.probability), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'qualitativeRisk', elem.qualitativeRisk); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'relativeRisk', elem.relativeRiskElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'relativeRisk', elem.relativeRiskElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.when is TFhirPeriod) then 
    ComposePeriod(json, 'whenPeriod', TFhirPeriod(elem.when)) 
  else if (SummaryOption in [soFull, soData]) and (elem.when is TFhirRange) then 
    ComposeRange(json, 'whenRange', TFhirRange(elem.when)) ;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'rationale', elem.rationaleElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'rationale', elem.rationaleElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseRiskAssessment(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseRiskAssessment(jsn)); {2}
end;

function TFHIRJsonParser.ParseRiskAssessment(jsn : TJsonObject) : TFhirRiskAssessment;
begin
  result := TFhirRiskAssessment.create;
  try
    ParseRiskAssessmentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseRiskAssessmentProperties(jsn : TJsonObject; result : TFhirRiskAssessment);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('basedOn') then
        result.basedOn := ParseReference{TFhirReference}(jsn.vObj['basedOn']);{q3}
    if jsn.has('parent') then
        result.parent := ParseReference{TFhirReference}(jsn.vObj['parent']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum);
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('condition') then
        result.condition := ParseReference{TFhirCondition}(jsn.vObj['condition']);{q3}
    if jsn.has('performer') then
        result.performer := ParseReference{Resource}(jsn.vObj['performer']);{q3}
    if jsn.has('reasonCodeableConcept') {a4} then
      result.reason := ParseCodeableConcept(jsn.vObj['reasonCodeableConcept']);
    if jsn.has('reasonReference') {a3} then
      result.reason := ParseReference(jsn.vObj['reasonReference']);
    if jsn.has('basis') then
      iterateArray(jsn.vArr['basis'], result.basisList, parseReference{TFhirReference});
    if jsn.has('prediction') then
      iterateArray(jsn.vArr['prediction'], result.predictionList, parseRiskAssessmentPrediction);
    if jsn.has('mitigation') or jsn.has('_mitigation') then
        result.mitigationElement := parseString(jsn.node['mitigation'], jsn.vObj['_mitigation']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeRiskAssessment(json : TJSONWriter; name : string; elem : TFhirRiskAssessment; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('basedOn') then
    ComposeReference{TFhirReference}(json, 'basedOn', elem.basedOn); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('parent') then
    ComposeReference{TFhirReference}(json, 'parent', elem.parent); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('method') then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('condition') then
    ComposeReference{TFhirCondition}(json, 'condition', elem.condition); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') then
    ComposeReference{Resource}(json, 'performer', elem.performer); {a}
  if (SummaryOption in [soFull, soData]) and (elem.reason is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'reasonCodeableConcept', TFhirCodeableConcept(elem.reason)) 
  else if (SummaryOption in [soFull, soData]) and (elem.reason is TFhirReference) then
    ComposeReference(json, 'reasonReference', TFhirReference(elem.reason));
  if (SummaryOption in [soFull, soData]) and doCompose('basis') and (elem.basisList.Count > 0) then
  begin
    json.valueArray('basis');
    for i := 0 to elem.basisList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.basisList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('prediction') and (elem.predictionList.Count > 0) then
  begin
    json.valueArray('prediction');
    for i := 0 to elem.predictionList.Count - 1 do
      ComposeRiskAssessmentPrediction(json, '', elem.predictionList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('mitigation') then
    ComposeStringValue(json, 'mitigation', elem.mitigationElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('mitigation') then
    ComposeStringProps(json, 'mitigation', elem.mitigationElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
end;

{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
procedure TFHIRJsonParser.ParseSchedule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSchedule(jsn)); {2}
end;

function TFHIRJsonParser.ParseSchedule(jsn : TJsonObject) : TFhirSchedule;
begin
  result := TFhirSchedule.create;
  try
    ParseScheduleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseScheduleProperties(jsn : TJsonObject; result : TFhirSchedule);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('active') or jsn.has('_active') then
        result.activeElement := parseBoolean(jsn.node['active'], jsn.vObj['_active']);{q}
    if jsn.has('serviceCategory') then
        result.serviceCategory := ParseCodeableConcept(jsn.vObj['serviceCategory']);{q3}
    if jsn.has('serviceType') then
      iterateArray(jsn.vArr['serviceType'], result.serviceTypeList, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], result.specialtyList, parseCodeableConcept);
    if jsn.has('actor') then
      iterateArray(jsn.vArr['actor'], result.actorList, parseReference{Resource});
    if jsn.has('planningHorizon') then
        result.planningHorizon := ParsePeriod(jsn.vObj['planningHorizon']);{q3}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeSchedule(json : TJSONWriter; name : string; elem : TFhirSchedule; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanValue(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (not isCanonical or (elem.active <> true)) and doCompose('active') then
    ComposeBooleanProps(json, 'active', elem.activeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('serviceCategory') then
    ComposeCodeableConcept(json, 'serviceCategory', elem.serviceCategory); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('serviceType') and (elem.serviceTypeList.Count > 0) then
  begin
    json.valueArray('serviceType');
    for i := 0 to elem.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.serviceTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specialty') and (elem.specialtyList.Count > 0) then
  begin
    json.valueArray('specialty');
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialtyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (elem.actorList.Count > 0) then
  begin
    json.valueArray('actor');
    for i := 0 to elem.actorList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.actorList[i]); {z - Reference(Patient|Practitioner|PractitionerRole|RelatedPerson|Device|HealthcareService|Location)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('planningHorizon') then
    ComposePeriod(json, 'planningHorizon', elem.planningHorizon); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
end;

{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
procedure TFHIRJsonParser.ParseSearchParameterComponent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSearchParameterComponent(jsn)); {2}
end;

function TFHIRJsonParser.ParseSearchParameterComponent(jsn : TJsonObject) : TFhirSearchParameterComponent;
begin
  result := TFhirSearchParameterComponent.create;
  try
    ParseSearchParameterComponentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSearchParameterComponentProperties(jsn : TJsonObject; result : TFhirSearchParameterComponent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('definition') then
        result.definition := ParseReference{TFhirSearchParameter}(jsn.vObj['definition']);{q3}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);{q}
end;

procedure TFHIRJsonComposer.ComposeSearchParameterComponent(json : TJSONWriter; name : string; elem : TFhirSearchParameterComponent; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{TFhirSearchParameter}(json, 'definition', elem.definition); {a}
  ComposeStringValue(json, 'expression', elem.expressionElement, false);
  ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSearchParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSearchParameter(jsn)); {2}
end;

function TFHIRJsonParser.ParseSearchParameter(jsn : TJsonObject) : TFhirSearchParameter;
begin
  result := TFhirSearchParameter.create;
  try
    ParseSearchParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSearchParameterProperties(jsn : TJsonObject; result : TFhirSearchParameter);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);{q}
    if jsn.has('base') or jsn.has('_base') then
      iterateEnumArray(jsn.vArr['base'], jsn.vArr['_base'], jsn.path+'/base', result.base, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum);
    if jsn.has('derivedFrom') or jsn.has('_derivedFrom') then
        result.derivedFromElement := parseUri(jsn.node['derivedFrom'], jsn.vObj['_derivedFrom']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);{q}
    if jsn.has('xpath') or jsn.has('_xpath') then
        result.xpathElement := parseString(jsn.node['xpath'], jsn.vObj['_xpath']);{q}
    if jsn.has('xpathUsage') or jsn.has('_xpathUsage')  then
      result.xpathUsageElement := parseEnum(jsn.path+'/xpathUsage', jsn.node['xpathUsage'], jsn.vObj['_xpathUsage'], CODES_TFhirSearchXpathUsageEnum, SYSTEMS_TFhirSearchXpathUsageEnum);
    if jsn.has('target') or jsn.has('_target') then
      iterateEnumArray(jsn.vArr['target'], jsn.vArr['_target'], jsn.path+'/target', result.target, parseEnum, CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum);
    if jsn.has('comparator') or jsn.has('_comparator') then
      iterateEnumArray(jsn.vArr['comparator'], jsn.vArr['_comparator'], jsn.path+'/comparator', result.comparatorList, parseEnum, CODES_TFhirSearchComparatorEnum, SYSTEMS_TFhirSearchComparatorEnum);
    if jsn.has('modifier') or jsn.has('_modifier') then
      iterateEnumArray(jsn.vArr['modifier'], jsn.vArr['_modifier'], jsn.path+'/modifier', result.modifierList, parseEnum, CODES_TFhirSearchModifierCodeEnum, SYSTEMS_TFhirSearchModifierCodeEnum);
      if jsn.has('chain') or jsn.has('_chain') then
      iteratePrimitiveArray(jsn.vArr['chain'], jsn.vArr['_chain'], result.chainList, parseString);
    if jsn.has('component') then
      iterateArray(jsn.vArr['component'], result.componentList, parseSearchParameterComponent);
end;

procedure TFHIRJsonComposer.ComposeSearchParameter(json : TJSONWriter; name : string; elem : TFhirSearchParameter; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  ComposeUriValue(json, 'url', elem.urlElement, false);
  ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  ComposeCodeValue(json, 'code', elem.codeElement, false);
  ComposeCodeProps(json, 'code', elem.codeElement, false);
  if (elem.base.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.base.Count - 1 do
    begin
      val := val or (elem.base[i].hasPrimitiveValue);
      ext := ext or ((elem.base[i].id <> '') or (elem.base[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('base');
      for i := 0 to elem.base.Count - 1 do
        ComposeEnumValue(json, '', elem.base[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_base');
      for i := 0 to elem.base.Count - 1 do
        ComposeEnumProps(json, '', elem.base[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
  end;
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirSearchParamTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirSearchParamTypeEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('derivedFrom') then
    ComposeUriValue(json, 'derivedFrom', elem.derivedFromElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('derivedFrom') then
    ComposeUriProps(json, 'derivedFrom', elem.derivedFromElement, false);
  ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('expression') then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('expression') then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('xpath') then
    ComposeStringValue(json, 'xpath', elem.xpathElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('xpath') then
    ComposeStringProps(json, 'xpath', elem.xpathElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('xpathUsage') then
    ComposeEnumValue(json, 'xpathUsage', elem.XpathUsageElement, CODES_TFhirSearchXpathUsageEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('xpathUsage') then
    ComposeEnumProps(json, 'xpathUsage', elem.XpathUsageElement, CODES_TFhirSearchXpathUsageEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('target') and (elem.target.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.target.Count - 1 do
    begin
      val := val or (elem.target[i].hasPrimitiveValue);
      ext := ext or ((elem.target[i].id <> '') or (elem.target[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('target');
      for i := 0 to elem.target.Count - 1 do
        ComposeEnumValue(json, '', elem.target[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_target');
      for i := 0 to elem.target.Count - 1 do
        ComposeEnumProps(json, '', elem.target[i], CODES_TFhirResourceTypesEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('comparator') and (elem.comparatorList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.comparatorList.Count - 1 do
    begin
      val := val or (elem.comparatorList[i].hasPrimitiveValue);
      ext := ext or ((elem.comparatorList[i].id <> '') or (elem.comparatorList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('comparator');
      for i := 0 to elem.comparatorList.Count - 1 do
        ComposeEnumValue(json, '', elem.comparatorList[i], CODES_TFhirSearchComparatorEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_comparator');
      for i := 0 to elem.comparatorList.Count - 1 do
        ComposeEnumProps(json, '', elem.comparatorList[i], CODES_TFhirSearchComparatorEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('modifier') and (elem.modifierList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.modifierList.Count - 1 do
    begin
      val := val or (elem.modifierList[i].hasPrimitiveValue);
      ext := ext or ((elem.modifierList[i].id <> '') or (elem.modifierList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('modifier');
      for i := 0 to elem.modifierList.Count - 1 do
        ComposeEnumValue(json, '', elem.modifierList[i], CODES_TFhirSearchModifierCodeEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_modifier');
      for i := 0 to elem.modifierList.Count - 1 do
        ComposeEnumProps(json, '', elem.modifierList[i], CODES_TFhirSearchModifierCodeEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('chain') and (elem.chainList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.chainList.Count - 1 do
    begin
      ext := ext or ((elem.chainList[i].id <> '') or (elem.chainList[i].hasExtensionList) {no-comments or (elem.chainList[i].hasComments)});
      val := val or (elem.chainList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('chain');
      for i := 0 to elem.chainList.Count - 1 do
        ComposeStringValue(json, '',elem.chainList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_chain');
      for i := 0 to elem.chainList.Count - 1 do
        ComposeStringProps(json, '',elem.chainList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('component') and (elem.componentList.Count > 0) then
  begin
    json.valueArray('component');
    for i := 0 to elem.componentList.Count - 1 do
      ComposeSearchParameterComponent(json, '', elem.componentList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SEQUENCE}
procedure TFHIRJsonParser.ParseSequenceReferenceSeq(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSequenceReferenceSeq(jsn)); {2}
end;

function TFHIRJsonParser.ParseSequenceReferenceSeq(jsn : TJsonObject) : TFhirSequenceReferenceSeq;
begin
  result := TFhirSequenceReferenceSeq.create;
  try
    ParseSequenceReferenceSeqProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSequenceReferenceSeqProperties(jsn : TJsonObject; result : TFhirSequenceReferenceSeq);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('chromosome') then
        result.chromosome := ParseCodeableConcept(jsn.vObj['chromosome']);{q3}
    if jsn.has('genomeBuild') or jsn.has('_genomeBuild') then
        result.genomeBuildElement := parseString(jsn.node['genomeBuild'], jsn.vObj['_genomeBuild']);{q}
    if jsn.has('referenceSeqId') then
        result.referenceSeqId := ParseCodeableConcept(jsn.vObj['referenceSeqId']);{q3}
    if jsn.has('referenceSeqPointer') then
        result.referenceSeqPointer := ParseReference{TFhirSequence}(jsn.vObj['referenceSeqPointer']);{q3}
    if jsn.has('referenceSeqString') or jsn.has('_referenceSeqString') then
        result.referenceSeqStringElement := parseString(jsn.node['referenceSeqString'], jsn.vObj['_referenceSeqString']);{q}
    if jsn.has('strand') or jsn.has('_strand') then
        result.strandElement := parseInteger(jsn.node['strand'], jsn.vObj['_strand']);{q}
    if jsn.has('windowStart') or jsn.has('_windowStart') then
        result.windowStartElement := parseInteger(jsn.node['windowStart'], jsn.vObj['_windowStart']);{q}
    if jsn.has('windowEnd') or jsn.has('_windowEnd') then
        result.windowEndElement := parseInteger(jsn.node['windowEnd'], jsn.vObj['_windowEnd']);{q}
end;

procedure TFHIRJsonComposer.ComposeSequenceReferenceSeq(json : TJSONWriter; name : string; elem : TFhirSequenceReferenceSeq; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'chromosome', elem.chromosome); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'genomeBuild', elem.genomeBuildElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'genomeBuild', elem.genomeBuildElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'referenceSeqId', elem.referenceSeqId); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirSequence}(json, 'referenceSeqPointer', elem.referenceSeqPointer); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'referenceSeqString', elem.referenceSeqStringElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'referenceSeqString', elem.referenceSeqStringElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'strand', elem.strandElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'strand', elem.strandElement, false);
  ComposeIntegerValue(json, 'windowStart', elem.windowStartElement, false);
  ComposeIntegerProps(json, 'windowStart', elem.windowStartElement, false);
  ComposeIntegerValue(json, 'windowEnd', elem.windowEndElement, false);
  ComposeIntegerProps(json, 'windowEnd', elem.windowEndElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSequenceVariant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSequenceVariant(jsn)); {2}
end;

function TFHIRJsonParser.ParseSequenceVariant(jsn : TJsonObject) : TFhirSequenceVariant;
begin
  result := TFhirSequenceVariant.create;
  try
    ParseSequenceVariantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSequenceVariantProperties(jsn : TJsonObject; result : TFhirSequenceVariant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := parseInteger(jsn.node['start'], jsn.vObj['_start']);{q}
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := parseInteger(jsn.node['end'], jsn.vObj['_end']);{q}
    if jsn.has('observedAllele') or jsn.has('_observedAllele') then
        result.observedAlleleElement := parseString(jsn.node['observedAllele'], jsn.vObj['_observedAllele']);{q}
    if jsn.has('referenceAllele') or jsn.has('_referenceAllele') then
        result.referenceAlleleElement := parseString(jsn.node['referenceAllele'], jsn.vObj['_referenceAllele']);{q}
    if jsn.has('cigar') or jsn.has('_cigar') then
        result.cigarElement := parseString(jsn.node['cigar'], jsn.vObj['_cigar']);{q}
    if jsn.has('variantPointer') then
        result.variantPointer := ParseReference{TFhirObservation}(jsn.vObj['variantPointer']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSequenceVariant(json : TJSONWriter; name : string; elem : TFhirSequenceVariant; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'start', elem.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'start', elem.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'end', elem.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'end', elem.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'observedAllele', elem.observedAlleleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'observedAllele', elem.observedAlleleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'referenceAllele', elem.referenceAlleleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'referenceAllele', elem.referenceAlleleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'cigar', elem.cigarElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'cigar', elem.cigarElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirObservation}(json, 'variantPointer', elem.variantPointer); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSequenceQuality(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSequenceQuality(jsn)); {2}
end;

function TFHIRJsonParser.ParseSequenceQuality(jsn : TJsonObject) : TFhirSequenceQuality;
begin
  result := TFhirSequenceQuality.create;
  try
    ParseSequenceQualityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSequenceQualityProperties(jsn : TJsonObject; result : TFhirSequenceQuality);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirQualityTypeEnum, SYSTEMS_TFhirQualityTypeEnum);
    if jsn.has('standardSequence') then
        result.standardSequence := ParseCodeableConcept(jsn.vObj['standardSequence']);{q3}
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := parseInteger(jsn.node['start'], jsn.vObj['_start']);{q}
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := parseInteger(jsn.node['end'], jsn.vObj['_end']);{q}
    if jsn.has('score') then
        result.score := ParseQuantity(jsn.vObj['score']);{q3}
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('truthTP') or jsn.has('_truthTP') then
        result.truthTPElement := parseDecimal(jsn.node['truthTP'], jsn.vObj['_truthTP']);{q}
    if jsn.has('queryTP') or jsn.has('_queryTP') then
        result.queryTPElement := parseDecimal(jsn.node['queryTP'], jsn.vObj['_queryTP']);{q}
    if jsn.has('truthFN') or jsn.has('_truthFN') then
        result.truthFNElement := parseDecimal(jsn.node['truthFN'], jsn.vObj['_truthFN']);{q}
    if jsn.has('queryFP') or jsn.has('_queryFP') then
        result.queryFPElement := parseDecimal(jsn.node['queryFP'], jsn.vObj['_queryFP']);{q}
    if jsn.has('gtFP') or jsn.has('_gtFP') then
        result.gtFPElement := parseDecimal(jsn.node['gtFP'], jsn.vObj['_gtFP']);{q}
    if jsn.has('precision') or jsn.has('_precision') then
        result.precisionElement := parseDecimal(jsn.node['precision'], jsn.vObj['_precision']);{q}
    if jsn.has('recall') or jsn.has('_recall') then
        result.recallElement := parseDecimal(jsn.node['recall'], jsn.vObj['_recall']);{q}
    if jsn.has('fScore') or jsn.has('_fScore') then
        result.fScore_Element := parseDecimal(jsn.node['fScore'], jsn.vObj['_fScore']);{q}
end;

procedure TFHIRJsonComposer.ComposeSequenceQuality(json : TJSONWriter; name : string; elem : TFhirSequenceQuality; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirQualityTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirQualityTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'standardSequence', elem.standardSequence); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'start', elem.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'start', elem.startElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'end', elem.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'end', elem.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'score', elem.score); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'truthTP', elem.truthTPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'truthTP', elem.truthTPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'queryTP', elem.queryTPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'queryTP', elem.queryTPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'truthFN', elem.truthFNElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'truthFN', elem.truthFNElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'queryFP', elem.queryFPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'queryFP', elem.queryFPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'gtFP', elem.gtFPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'gtFP', elem.gtFPElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'precision', elem.precisionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'precision', elem.precisionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'recall', elem.recallElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'recall', elem.recallElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalValue(json, 'fScore', elem.fScore_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimalProps(json, 'fScore', elem.fScore_Element, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSequenceRepository(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSequenceRepository(jsn)); {2}
end;

function TFHIRJsonParser.ParseSequenceRepository(jsn : TJsonObject) : TFhirSequenceRepository;
begin
  result := TFhirSequenceRepository.create;
  try
    ParseSequenceRepositoryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSequenceRepositoryProperties(jsn : TJsonObject; result : TFhirSequenceRepository);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirRepositoryTypeEnum, SYSTEMS_TFhirRepositoryTypeEnum);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('datasetId') or jsn.has('_datasetId') then
        result.datasetIdElement := parseString(jsn.node['datasetId'], jsn.vObj['_datasetId']);{q}
    if jsn.has('variantsetId') or jsn.has('_variantsetId') then
        result.variantsetIdElement := parseString(jsn.node['variantsetId'], jsn.vObj['_variantsetId']);{q}
    if jsn.has('readsetId') or jsn.has('_readsetId') then
        result.readsetIdElement := parseString(jsn.node['readsetId'], jsn.vObj['_readsetId']);{q}
end;

procedure TFHIRJsonComposer.ComposeSequenceRepository(json : TJSONWriter; name : string; elem : TFhirSequenceRepository; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirRepositoryTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirRepositoryTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'datasetId', elem.datasetIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'datasetId', elem.datasetIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'variantsetId', elem.variantsetIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'variantsetId', elem.variantsetIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'readsetId', elem.readsetIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'readsetId', elem.readsetIdElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSequence(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSequence(jsn)); {2}
end;

function TFHIRJsonParser.ParseSequence(jsn : TJsonObject) : TFhirSequence;
begin
  result := TFhirSequence.create;
  try
    ParseSequenceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSequenceProperties(jsn : TJsonObject; result : TFhirSequence);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := parseCode(jsn.node['type'], jsn.vObj['_type']);{q}
    if jsn.has('coordinateSystem') or jsn.has('_coordinateSystem') then
        result.coordinateSystemElement := parseInteger(jsn.node['coordinateSystem'], jsn.vObj['_coordinateSystem']);{q}
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('specimen') then
        result.specimen := ParseReference{TFhirSpecimen}(jsn.vObj['specimen']);{q3}
    if jsn.has('device') then
        result.device := ParseReference{TFhirDevice}(jsn.vObj['device']);{q3}
    if jsn.has('performer') then
        result.performer := ParseReference{TFhirOrganization}(jsn.vObj['performer']);{q3}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('referenceSeq') then
        result.referenceSeq := ParseSequenceReferenceSeq(jsn.vObj['referenceSeq']);{q3}
    if jsn.has('variant') then
      iterateArray(jsn.vArr['variant'], result.variantList, parseSequenceVariant);
    if jsn.has('observedSeq') or jsn.has('_observedSeq') then
        result.observedSeqElement := parseString(jsn.node['observedSeq'], jsn.vObj['_observedSeq']);{q}
    if jsn.has('quality') then
      iterateArray(jsn.vArr['quality'], result.qualityList, parseSequenceQuality);
    if jsn.has('readCoverage') or jsn.has('_readCoverage') then
        result.readCoverageElement := parseInteger(jsn.node['readCoverage'], jsn.vObj['_readCoverage']);{q}
    if jsn.has('repository') then
      iterateArray(jsn.vArr['repository'], result.repositoryList, parseSequenceRepository);
    if jsn.has('pointer') then
      iterateArray(jsn.vArr['pointer'], result.pointerList, parseReference{TFhirSequence});
end;

procedure TFHIRJsonComposer.ComposeSequence(json : TJSONWriter; name : string; elem : TFhirSequence; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeValue(json, 'type', elem.type_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeProps(json, 'type', elem.type_Element, false);
  ComposeIntegerValue(json, 'coordinateSystem', elem.coordinateSystemElement, false);
  ComposeIntegerProps(json, 'coordinateSystem', elem.coordinateSystemElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specimen') then
    ComposeReference{TFhirSpecimen}(json, 'specimen', elem.specimen); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('device') then
    ComposeReference{TFhirDevice}(json, 'device', elem.device); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') then
    ComposeReference{TFhirOrganization}(json, 'performer', elem.performer); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('quantity') then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('referenceSeq') then
    ComposeSequenceReferenceSeq(json, 'referenceSeq', elem.referenceSeq); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('variant') and (elem.variantList.Count > 0) then
  begin
    json.valueArray('variant');
    for i := 0 to elem.variantList.Count - 1 do
      ComposeSequenceVariant(json, '', elem.variantList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('observedSeq') then
    ComposeStringValue(json, 'observedSeq', elem.observedSeqElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('observedSeq') then
    ComposeStringProps(json, 'observedSeq', elem.observedSeqElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('quality') and (elem.qualityList.Count > 0) then
  begin
    json.valueArray('quality');
    for i := 0 to elem.qualityList.Count - 1 do
      ComposeSequenceQuality(json, '', elem.qualityList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('readCoverage') then
    ComposeIntegerValue(json, 'readCoverage', elem.readCoverageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('readCoverage') then
    ComposeIntegerProps(json, 'readCoverage', elem.readCoverageElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('repository') and (elem.repositoryList.Count > 0) then
  begin
    json.valueArray('repository');
    for i := 0 to elem.repositoryList.Count - 1 do
      ComposeSequenceRepository(json, '', elem.repositoryList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('pointer') and (elem.pointerList.Count > 0) then
  begin
    json.valueArray('pointer');
    for i := 0 to elem.pointerList.Count - 1 do
      ComposeReference{TFhirSequence}(json, '', elem.pointerList[i]); {z - Reference(Sequence)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SEQUENCE}
{$IFDEF FHIR_SERVICEDEFINITION}
procedure TFHIRJsonParser.ParseServiceDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseServiceDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseServiceDefinition(jsn : TJsonObject) : TFhirServiceDefinition;
begin
  result := TFhirServiceDefinition.create;
  try
    ParseServiceDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseServiceDefinitionProperties(jsn : TJsonObject; result : TFhirServiceDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('usage') or jsn.has('_usage') then
        result.usageElement := parseString(jsn.node['usage'], jsn.vObj['_usage']);{q}
    if jsn.has('approvalDate') or jsn.has('_approvalDate') then
        result.approvalDateElement := parseDate(jsn.node['approvalDate'], jsn.vObj['_approvalDate']);{q}
    if jsn.has('lastReviewDate') or jsn.has('_lastReviewDate') then
        result.lastReviewDateElement := parseDate(jsn.node['lastReviewDate'], jsn.vObj['_lastReviewDate']);{q}
    if jsn.has('effectivePeriod') then
        result.effectivePeriod := ParsePeriod(jsn.vObj['effectivePeriod']);{q3}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('topic') then
      iterateArray(jsn.vArr['topic'], result.topicList, parseCodeableConcept);
    if jsn.has('contributor') then
      iterateArray(jsn.vArr['contributor'], result.contributorList, parseContributor);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('relatedArtifact') then
      iterateArray(jsn.vArr['relatedArtifact'], result.relatedArtifactList, parseRelatedArtifact);
    if jsn.has('trigger') then
      iterateArray(jsn.vArr['trigger'], result.triggerList, parseTriggerDefinition);
    if jsn.has('dataRequirement') then
      iterateArray(jsn.vArr['dataRequirement'], result.dataRequirementList, parseDataRequirement);
    if jsn.has('operationDefinition') then
        result.operationDefinition := ParseReference{TFhirOperationDefinition}(jsn.vObj['operationDefinition']);{q3}
end;

procedure TFHIRJsonComposer.ComposeServiceDefinition(json : TJSONWriter; name : string; elem : TFhirServiceDefinition; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeStringValue(json, 'usage', elem.usageElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeStringProps(json, 'usage', elem.usageElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDateValue(json, 'approvalDate', elem.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDateProps(json, 'approvalDate', elem.approvalDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDateValue(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDateProps(json, 'lastReviewDate', elem.lastReviewDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(json, 'effectivePeriod', elem.effectivePeriod); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('topic') and (elem.topicList.Count > 0) then
  begin
    json.valueArray('topic');
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.topicList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('contributor') and (elem.contributorList.Count > 0) then
  begin
    json.valueArray('contributor');
    for i := 0 to elem.contributorList.Count - 1 do
      ComposeContributor(json, '', elem.contributorList[i]); {z - Contributor}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') and (elem.relatedArtifactList.Count > 0) then
  begin
    json.valueArray('relatedArtifact');
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(json, '', elem.relatedArtifactList[i]); {z - RelatedArtifact}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('trigger') and (elem.triggerList.Count > 0) then
  begin
    json.valueArray('trigger');
    for i := 0 to elem.triggerList.Count - 1 do
      ComposeTriggerDefinition(json, '', elem.triggerList[i]); {z - TriggerDefinition}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('dataRequirement') and (elem.dataRequirementList.Count > 0) then
  begin
    json.valueArray('dataRequirement');
    for i := 0 to elem.dataRequirementList.Count - 1 do
      ComposeDataRequirement(json, '', elem.dataRequirementList[i]); {z - DataRequirement}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('operationDefinition') then
    ComposeReference{TFhirOperationDefinition}(json, 'operationDefinition', elem.operationDefinition); {a}
end;

{$ENDIF FHIR_SERVICEDEFINITION}
{$IFDEF FHIR_SLOT}
procedure TFHIRJsonParser.ParseSlot(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSlot(jsn)); {2}
end;

function TFHIRJsonParser.ParseSlot(jsn : TJsonObject) : TFhirSlot;
begin
  result := TFhirSlot.create;
  try
    ParseSlotProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSlotProperties(jsn : TJsonObject; result : TFhirSlot);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('serviceCategory') then
        result.serviceCategory := ParseCodeableConcept(jsn.vObj['serviceCategory']);{q3}
    if jsn.has('serviceType') then
      iterateArray(jsn.vArr['serviceType'], result.serviceTypeList, parseCodeableConcept);
    if jsn.has('specialty') then
      iterateArray(jsn.vArr['specialty'], result.specialtyList, parseCodeableConcept);
    if jsn.has('appointmentType') then
        result.appointmentType := ParseCodeableConcept(jsn.vObj['appointmentType']);{q3}
    if jsn.has('schedule') then
        result.schedule := ParseReference{TFhirSchedule}(jsn.vObj['schedule']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirSlotstatusEnum, SYSTEMS_TFhirSlotstatusEnum);
    if jsn.has('start') or jsn.has('_start') then
        result.startElement := parseInstant(jsn.node['start'], jsn.vObj['_start']);{q}
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := parseInstant(jsn.node['end'], jsn.vObj['_end']);{q}
    if jsn.has('overbooked') or jsn.has('_overbooked') then
        result.overbookedElement := parseBoolean(jsn.node['overbooked'], jsn.vObj['_overbooked']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeSlot(json : TJSONWriter; name : string; elem : TFhirSlot; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('serviceCategory') then
    ComposeCodeableConcept(json, 'serviceCategory', elem.serviceCategory); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('serviceType') and (elem.serviceTypeList.Count > 0) then
  begin
    json.valueArray('serviceType');
    for i := 0 to elem.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.serviceTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specialty') and (elem.specialtyList.Count > 0) then
  begin
    json.valueArray('specialty');
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.specialtyList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('appointmentType') then
    ComposeCodeableConcept(json, 'appointmentType', elem.appointmentType); {a}
  ComposeReference{TFhirSchedule}(json, 'schedule', elem.schedule); {a}
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirSlotstatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirSlotstatusEnum, false);
  ComposeInstantValue(json, 'start', elem.startElement, false);
  ComposeInstantProps(json, 'start', elem.startElement, false);
  ComposeInstantValue(json, 'end', elem.end_Element, false);
  ComposeInstantProps(json, 'end', elem.end_Element, false);
  if (SummaryOption in [soFull, soData]) and doCompose('overbooked') then
    ComposeBooleanValue(json, 'overbooked', elem.overbookedElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('overbooked') then
    ComposeBooleanProps(json, 'overbooked', elem.overbookedElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
end;

{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
procedure TFHIRJsonParser.ParseSpecimenCollection(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenCollection(jsn)); {2}
end;

function TFHIRJsonParser.ParseSpecimenCollection(jsn : TJsonObject) : TFhirSpecimenCollection;
begin
  result := TFhirSpecimenCollection.create;
  try
    ParseSpecimenCollectionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenCollectionProperties(jsn : TJsonObject; result : TFhirSpecimenCollection);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('collector') then
        result.collector := ParseReference{TFhirPractitioner}(jsn.vObj['collector']);{q3}
    if jsn.has('collectedPeriod') {a4} then
      result.collected := ParsePeriod(jsn.vObj['collectedPeriod']);
    if jsn.has('collectedDateTime') or jsn.has('_collectedDateTime') then
      result.collected := parseDateTime(jsn.node['collectedDateTime'], jsn.vObj['_collectedDateTime']);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('method') then
        result.method := ParseCodeableConcept(jsn.vObj['method']);{q3}
    if jsn.has('bodySite') then
        result.bodySite := ParseCodeableConcept(jsn.vObj['bodySite']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSpecimenCollection(json : TJSONWriter; name : string; elem : TFhirSpecimenCollection; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(json, 'collector', elem.collector); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.collected is TFhirPeriod) then 
    ComposePeriod(json, 'collectedPeriod', TFhirPeriod(elem.collected)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.collected is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'collectedDateTime', TFhirDateTime(elem.collected), false);
    ComposeDateTimeProps(json, 'collectedDateTime', TFhirDateTime(elem.collected), false);
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'method', elem.method); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'bodySite', elem.bodySite); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSpecimenProcessing(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenProcessing(jsn)); {2}
end;

function TFHIRJsonParser.ParseSpecimenProcessing(jsn : TJsonObject) : TFhirSpecimenProcessing;
begin
  result := TFhirSpecimenProcessing.create;
  try
    ParseSpecimenProcessingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenProcessingProperties(jsn : TJsonObject; result : TFhirSpecimenProcessing);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('procedure') then
        result.procedure_ := ParseCodeableConcept(jsn.vObj['procedure']);{q3}
    if jsn.has('additive') then
      iterateArray(jsn.vArr['additive'], result.additiveList, parseReference{TFhirSubstance});
    if jsn.has('timePeriod') {a4} then
      result.time := ParsePeriod(jsn.vObj['timePeriod']);
    if jsn.has('timeDateTime') or jsn.has('_timeDateTime') then
      result.time := parseDateTime(jsn.node['timeDateTime'], jsn.vObj['_timeDateTime']);
end;

procedure TFHIRJsonComposer.ComposeSpecimenProcessing(json : TJSONWriter; name : string; elem : TFhirSpecimenProcessing; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'procedure', elem.procedure_); {a}
  if (SummaryOption in [soFull, soData]) and (elem.additiveList.Count > 0) then
  begin
    json.valueArray('additive');
    for i := 0 to elem.additiveList.Count - 1 do
      ComposeReference{TFhirSubstance}(json, '', elem.additiveList[i]); {z - Reference(Substance)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.time is TFhirPeriod) then 
    ComposePeriod(json, 'timePeriod', TFhirPeriod(elem.time)) 
  else if (SummaryOption in [soFull, soData]) and (elem.time is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'timeDateTime', TFhirDateTime(elem.time), false);
    ComposeDateTimeProps(json, 'timeDateTime', TFhirDateTime(elem.time), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSpecimenContainer(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimenContainer(jsn)); {2}
end;

function TFHIRJsonParser.ParseSpecimenContainer(jsn : TJsonObject) : TFhirSpecimenContainer;
begin
  result := TFhirSpecimenContainer.create;
  try
    ParseSpecimenContainerProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenContainerProperties(jsn : TJsonObject; result : TFhirSpecimenContainer);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('capacity') then
        result.capacity := ParseQuantity(jsn.vObj['capacity']);{q3}
    if jsn.has('specimenQuantity') then
        result.specimenQuantity := ParseQuantity(jsn.vObj['specimenQuantity']);{q3}
    if jsn.has('additiveCodeableConcept') {a4} then
      result.additive := ParseCodeableConcept(jsn.vObj['additiveCodeableConcept']);
    if jsn.has('additiveReference') {a3} then
      result.additive := ParseReference(jsn.vObj['additiveReference']);
end;

procedure TFHIRJsonComposer.ComposeSpecimenContainer(json : TJSONWriter; name : string; elem : TFhirSpecimenContainer; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'capacity', elem.capacity); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'specimenQuantity', elem.specimenQuantity); {a}
  if (SummaryOption in [soFull, soData]) and (elem.additive is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'additiveCodeableConcept', TFhirCodeableConcept(elem.additive)) 
  else if (SummaryOption in [soFull, soData]) and (elem.additive is TFhirReference) then
    ComposeReference(json, 'additiveReference', TFhirReference(elem.additive));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSpecimen(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSpecimen(jsn)); {2}
end;

function TFHIRJsonParser.ParseSpecimen(jsn : TJsonObject) : TFhirSpecimen;
begin
  result := TFhirSpecimen.create;
  try
    ParseSpecimenProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSpecimenProperties(jsn : TJsonObject; result : TFhirSpecimen);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('accessionIdentifier') then
        result.accessionIdentifier := ParseIdentifier(jsn.vObj['accessionIdentifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirSpecimenStatusEnum, SYSTEMS_TFhirSpecimenStatusEnum);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('subject') then
        result.subject := ParseReference{Resource}(jsn.vObj['subject']);{q3}
    if jsn.has('receivedTime') or jsn.has('_receivedTime') then
        result.receivedTimeElement := parseDateTime(jsn.node['receivedTime'], jsn.vObj['_receivedTime']);{q}
    if jsn.has('parent') then
      iterateArray(jsn.vArr['parent'], result.parentList, parseReference{TFhirSpecimen});
    if jsn.has('request') then
      iterateArray(jsn.vArr['request'], result.requestList, parseReference{TFhirProcedureRequest});
    if jsn.has('collection') then
        result.collection := ParseSpecimenCollection(jsn.vObj['collection']);{q3}
    if jsn.has('processing') then
      iterateArray(jsn.vArr['processing'], result.processingList, parseSpecimenProcessing);
    if jsn.has('container') then
      iterateArray(jsn.vArr['container'], result.containerList, parseSpecimenContainer);
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeSpecimen(json : TJSONWriter; name : string; elem : TFhirSpecimen; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('accessionIdentifier') then
    ComposeIdentifier(json, 'accessionIdentifier', elem.accessionIdentifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirSpecimenStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirSpecimenStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  ComposeReference{Resource}(json, 'subject', elem.subject); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('receivedTime') then
    ComposeDateTimeValue(json, 'receivedTime', elem.receivedTimeElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('receivedTime') then
    ComposeDateTimeProps(json, 'receivedTime', elem.receivedTimeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('parent') and (elem.parentList.Count > 0) then
  begin
    json.valueArray('parent');
    for i := 0 to elem.parentList.Count - 1 do
      ComposeReference{TFhirSpecimen}(json, '', elem.parentList[i]); {z - Reference(Specimen)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('request') and (elem.requestList.Count > 0) then
  begin
    json.valueArray('request');
    for i := 0 to elem.requestList.Count - 1 do
      ComposeReference{TFhirProcedureRequest}(json, '', elem.requestList[i]); {z - Reference(ProcedureRequest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('collection') then
    ComposeSpecimenCollection(json, 'collection', elem.collection); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('processing') and (elem.processingList.Count > 0) then
  begin
    json.valueArray('processing');
    for i := 0 to elem.processingList.Count - 1 do
      ComposeSpecimenProcessing(json, '', elem.processingList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('container') and (elem.containerList.Count > 0) then
  begin
    json.valueArray('container');
    for i := 0 to elem.containerList.Count - 1 do
      ComposeSpecimenContainer(json, '', elem.containerList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_STRUCTUREDEFINITION}
procedure TFHIRJsonParser.ParseStructureDefinitionMapping(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureDefinitionMapping(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureDefinitionMapping(jsn : TJsonObject) : TFhirStructureDefinitionMapping;
begin
  result := TFhirStructureDefinitionMapping.create;
  try
    ParseStructureDefinitionMappingProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionMappingProperties(jsn : TJsonObject; result : TFhirStructureDefinitionMapping);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identity') or jsn.has('_identity') then
        result.identityElement := parseId(jsn.node['identity'], jsn.vObj['_identity']);{q}
    if jsn.has('uri') or jsn.has('_uri') then
        result.uriElement := parseUri(jsn.node['uri'], jsn.vObj['_uri']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('comment') or jsn.has('_comment') then
        result.commentElement := parseString(jsn.node['comment'], jsn.vObj['_comment']);{q}
end;

procedure TFHIRJsonComposer.ComposeStructureDefinitionMapping(json : TJSONWriter; name : string; elem : TFhirStructureDefinitionMapping; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdValue(json, 'identity', elem.identityElement, false);
  ComposeIdProps(json, 'identity', elem.identityElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'uri', elem.uriElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'uri', elem.uriElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'comment', elem.commentElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'comment', elem.commentElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionSnapshot(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureDefinitionSnapshot(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureDefinitionSnapshot(jsn : TJsonObject) : TFhirStructureDefinitionSnapshot;
begin
  result := TFhirStructureDefinitionSnapshot.create;
  try
    ParseStructureDefinitionSnapshotProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionSnapshotProperties(jsn : TJsonObject; result : TFhirStructureDefinitionSnapshot);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('element') then
      iterateArray(jsn.vArr['element'], result.elementList, parseElementDefinition);
end;

procedure TFHIRJsonComposer.ComposeStructureDefinitionSnapshot(json : TJSONWriter; name : string; elem : TFhirStructureDefinitionSnapshot; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.elementList.Count > 0) then
  begin
    json.valueArray('element');
    for i := 0 to elem.elementList.Count - 1 do
      ComposeElementDefinition(json, '', elem.elementList[i]); {z - ElementDefinition}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionDifferential(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureDefinitionDifferential(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureDefinitionDifferential(jsn : TJsonObject) : TFhirStructureDefinitionDifferential;
begin
  result := TFhirStructureDefinitionDifferential.create;
  try
    ParseStructureDefinitionDifferentialProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionDifferentialProperties(jsn : TJsonObject; result : TFhirStructureDefinitionDifferential);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('element') then
      iterateArray(jsn.vArr['element'], result.elementList, parseElementDefinition);
end;

procedure TFHIRJsonComposer.ComposeStructureDefinitionDifferential(json : TJSONWriter; name : string; elem : TFhirStructureDefinitionDifferential; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.elementList.Count > 0) then
  begin
    json.valueArray('element');
    for i := 0 to elem.elementList.Count - 1 do
      ComposeElementDefinition(json, '', elem.elementList[i]); {z - ElementDefinition}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureDefinition(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureDefinition(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureDefinition(jsn : TJsonObject) : TFhirStructureDefinition;
begin
  result := TFhirStructureDefinition.create;
  try
    ParseStructureDefinitionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureDefinitionProperties(jsn : TJsonObject; result : TFhirStructureDefinition);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('keyword') then
      iterateArray(jsn.vArr['keyword'], result.keywordList, parseCoding);
    if jsn.has('fhirVersion') or jsn.has('_fhirVersion') then
        result.fhirVersionElement := parseId(jsn.node['fhirVersion'], jsn.vObj['_fhirVersion']);{q}
    if jsn.has('mapping') then
      iterateArray(jsn.vArr['mapping'], result.mappingList, parseStructureDefinitionMapping);
    if jsn.has('kind') or jsn.has('_kind')  then
      result.kindElement := parseEnum(jsn.path+'/kind', jsn.node['kind'], jsn.vObj['_kind'], CODES_TFhirStructureDefinitionKindEnum, SYSTEMS_TFhirStructureDefinitionKindEnum);
    if jsn.has('abstract') or jsn.has('_abstract') then
        result.abstractElement := parseBoolean(jsn.node['abstract'], jsn.vObj['_abstract']);{q}
    if jsn.has('contextType') or jsn.has('_contextType')  then
      result.contextTypeElement := parseEnum(jsn.path+'/contextType', jsn.node['contextType'], jsn.vObj['_contextType'], CODES_TFhirExtensionContextEnum, SYSTEMS_TFhirExtensionContextEnum);
      if jsn.has('context') or jsn.has('_context') then
      iteratePrimitiveArray(jsn.vArr['context'], jsn.vArr['_context'], result.contextList, parseString);
      if jsn.has('contextInvariant') or jsn.has('_contextInvariant') then
      iteratePrimitiveArray(jsn.vArr['contextInvariant'], jsn.vArr['_contextInvariant'], result.contextInvariantList, parseString);
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := parseCode(jsn.node['type'], jsn.vObj['_type']);{q}
    if jsn.has('baseDefinition') or jsn.has('_baseDefinition') then
        result.baseDefinitionElement := parseUri(jsn.node['baseDefinition'], jsn.vObj['_baseDefinition']);{q}
    if jsn.has('derivation') or jsn.has('_derivation')  then
      result.derivationElement := parseEnum(jsn.path+'/derivation', jsn.node['derivation'], jsn.vObj['_derivation'], CODES_TFhirTypeDerivationRuleEnum, SYSTEMS_TFhirTypeDerivationRuleEnum);
    if jsn.has('snapshot') then
        result.snapshot := ParseStructureDefinitionSnapshot(jsn.vObj['snapshot']);{q3}
    if jsn.has('differential') then
        result.differential := ParseStructureDefinitionDifferential(jsn.vObj['differential']);{q3}
end;

procedure TFHIRJsonComposer.ComposeStructureDefinition(json : TJSONWriter; name : string; elem : TFhirStructureDefinition; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  ComposeUriValue(json, 'url', elem.urlElement, false);
  ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('keyword') and (elem.keywordList.Count > 0) then
  begin
    json.valueArray('keyword');
    for i := 0 to elem.keywordList.Count - 1 do
      ComposeCoding(json, '', elem.keywordList[i]); {z - Coding}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('fhirVersion') then
    ComposeIdValue(json, 'fhirVersion', elem.fhirVersionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('fhirVersion') then
    ComposeIdProps(json, 'fhirVersion', elem.fhirVersionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('mapping') and (elem.mappingList.Count > 0) then
  begin
    json.valueArray('mapping');
    for i := 0 to elem.mappingList.Count - 1 do
      ComposeStructureDefinitionMapping(json, '', elem.mappingList[i]); {z - }
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'kind', elem.KindElement, CODES_TFhirStructureDefinitionKindEnum, false);
  ComposeEnumProps(json, 'kind', elem.KindElement, CODES_TFhirStructureDefinitionKindEnum, false);
  ComposeBooleanValue(json, 'abstract', elem.abstractElement, false);
  ComposeBooleanProps(json, 'abstract', elem.abstractElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contextType') then
    ComposeEnumValue(json, 'contextType', elem.ContextTypeElement, CODES_TFhirExtensionContextEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contextType') then
    ComposeEnumProps(json, 'contextType', elem.ContextTypeElement, CODES_TFhirExtensionContextEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') and (elem.contextList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.contextList.Count - 1 do
    begin
      ext := ext or ((elem.contextList[i].id <> '') or (elem.contextList[i].hasExtensionList) {no-comments or (elem.contextList[i].hasComments)});
      val := val or (elem.contextList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('context');
      for i := 0 to elem.contextList.Count - 1 do
        ComposeStringValue(json, '',elem.contextList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_context');
      for i := 0 to elem.contextList.Count - 1 do
        ComposeStringProps(json, '',elem.contextList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contextInvariant') and (elem.contextInvariantList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.contextInvariantList.Count - 1 do
    begin
      ext := ext or ((elem.contextInvariantList[i].id <> '') or (elem.contextInvariantList[i].hasExtensionList) {no-comments or (elem.contextInvariantList[i].hasComments)});
      val := val or (elem.contextInvariantList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('contextInvariant');
      for i := 0 to elem.contextInvariantList.Count - 1 do
        ComposeStringValue(json, '',elem.contextInvariantList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_contextInvariant');
      for i := 0 to elem.contextInvariantList.Count - 1 do
        ComposeStringProps(json, '',elem.contextInvariantList[i], true);
      json.FinishArray;
    end;
  end;
  ComposeCodeValue(json, 'type', elem.type_Element, false);
  ComposeCodeProps(json, 'type', elem.type_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('baseDefinition') then
    ComposeUriValue(json, 'baseDefinition', elem.baseDefinitionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('baseDefinition') then
    ComposeUriProps(json, 'baseDefinition', elem.baseDefinitionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('derivation') then
    ComposeEnumValue(json, 'derivation', elem.DerivationElement, CODES_TFhirTypeDerivationRuleEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('derivation') then
    ComposeEnumProps(json, 'derivation', elem.DerivationElement, CODES_TFhirTypeDerivationRuleEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('snapshot') then
    ComposeStructureDefinitionSnapshot(json, 'snapshot', elem.snapshot); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('differential') then
    ComposeStructureDefinitionDifferential(json, 'differential', elem.differential); {a}
end;

{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
procedure TFHIRJsonParser.ParseStructureMapStructure(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapStructure(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapStructure(jsn : TJsonObject) : TFhirStructureMapStructure;
begin
  result := TFhirStructureMapStructure.create;
  try
    ParseStructureMapStructureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapStructureProperties(jsn : TJsonObject; result : TFhirStructureMapStructure);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirMapModelModeEnum, SYSTEMS_TFhirMapModelModeEnum);
    if jsn.has('alias') or jsn.has('_alias') then
        result.aliasElement := parseString(jsn.node['alias'], jsn.vObj['_alias']);{q}
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeStructureMapStructure(json : TJSONWriter; name : string; elem : TFhirStructureMapStructure; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeUriValue(json, 'url', elem.urlElement, false);
  ComposeUriProps(json, 'url', elem.urlElement, false);
  ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirMapModelModeEnum, false);
  ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirMapModelModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'alias', elem.aliasElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'alias', elem.aliasElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMapGroup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroup(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapGroup(jsn : TJsonObject) : TFhirStructureMapGroup;
begin
  result := TFhirStructureMapGroup.create;
  try
    ParseStructureMapGroupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupProperties(jsn : TJsonObject; result : TFhirStructureMapGroup);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseId(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('extends') or jsn.has('_extends') then
        result.extendsElement := parseId(jsn.node['extends'], jsn.vObj['_extends']);{q}
    if jsn.has('typeMode') or jsn.has('_typeMode')  then
      result.typeModeElement := parseEnum(jsn.path+'/typeMode', jsn.node['typeMode'], jsn.vObj['_typeMode'], CODES_TFhirMapGroupTypeModeEnum, SYSTEMS_TFhirMapGroupTypeModeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
    if jsn.has('input') then
      iterateArray(jsn.vArr['input'], result.inputList, parseStructureMapGroupInput);
    if jsn.has('rule') then
      iterateArray(jsn.vArr['rule'], result.ruleList, parseStructureMapGroupRule);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroup(json : TJSONWriter; name : string; elem : TFhirStructureMapGroup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdValue(json, 'name', elem.nameElement, false);
  ComposeIdProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'extends', elem.extendsElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'extends', elem.extendsElement, false);
  ComposeEnumValue(json, 'typeMode', elem.TypeModeElement, CODES_TFhirMapGroupTypeModeEnum, false);
  ComposeEnumProps(json, 'typeMode', elem.TypeModeElement, CODES_TFhirMapGroupTypeModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if (elem.inputList.Count > 0) then
  begin
    json.valueArray('input');
    for i := 0 to elem.inputList.Count - 1 do
      ComposeStructureMapGroupInput(json, '', elem.inputList[i]); {z - }
    json.FinishArray;
  end;
  if (elem.ruleList.Count > 0) then
  begin
    json.valueArray('rule');
    for i := 0 to elem.ruleList.Count - 1 do
      ComposeStructureMapGroupRule(json, '', elem.ruleList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupInput(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupInput(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapGroupInput(jsn : TJsonObject) : TFhirStructureMapGroupInput;
begin
  result := TFhirStructureMapGroupInput.create;
  try
    ParseStructureMapGroupInputProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupInputProperties(jsn : TJsonObject; result : TFhirStructureMapGroupInput);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseId(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := parseString(jsn.node['type'], jsn.vObj['_type']);{q}
    if jsn.has('mode') or jsn.has('_mode')  then
      result.modeElement := parseEnum(jsn.path+'/mode', jsn.node['mode'], jsn.vObj['_mode'], CODES_TFhirMapInputModeEnum, SYSTEMS_TFhirMapInputModeEnum);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupInput(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupInput; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdValue(json, 'name', elem.nameElement, false);
  ComposeIdProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'type', elem.type_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'type', elem.type_Element, false);
  ComposeEnumValue(json, 'mode', elem.ModeElement, CODES_TFhirMapInputModeEnum, false);
  ComposeEnumProps(json, 'mode', elem.ModeElement, CODES_TFhirMapInputModeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRule(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapGroupRule(jsn : TJsonObject) : TFhirStructureMapGroupRule;
begin
  result := TFhirStructureMapGroupRule.create;
  try
    ParseStructureMapGroupRuleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRule);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseId(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('source') then
      iterateArray(jsn.vArr['source'], result.sourceList, parseStructureMapGroupRuleSource);
    if jsn.has('target') then
      iterateArray(jsn.vArr['target'], result.targetList, parseStructureMapGroupRuleTarget);
    if jsn.has('rule') then
      iterateArray(jsn.vArr['rule'], result.ruleList, parseStructureMapGroupRule);
    if jsn.has('dependent') then
      iterateArray(jsn.vArr['dependent'], result.dependentList, parseStructureMapGroupRuleDependent);
    if jsn.has('documentation') or jsn.has('_documentation') then
        result.documentationElement := parseString(jsn.node['documentation'], jsn.vObj['_documentation']);{q}
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRule(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRule; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdValue(json, 'name', elem.nameElement, false);
  ComposeIdProps(json, 'name', elem.nameElement, false);
  if (elem.sourceList.Count > 0) then
  begin
    json.valueArray('source');
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeStructureMapGroupRuleSource(json, '', elem.sourceList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.targetList.Count > 0) then
  begin
    json.valueArray('target');
    for i := 0 to elem.targetList.Count - 1 do
      ComposeStructureMapGroupRuleTarget(json, '', elem.targetList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.ruleList.Count > 0) then
  begin
    json.valueArray('rule');
    for i := 0 to elem.ruleList.Count - 1 do
      ComposeStructureMapGroupRule(json, '', elem.ruleList[i]); {z - @StructureMap.group.rule}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.dependentList.Count > 0) then
  begin
    json.valueArray('dependent');
    for i := 0 to elem.dependentList.Count - 1 do
      ComposeStructureMapGroupRuleDependent(json, '', elem.dependentList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'documentation', elem.documentationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'documentation', elem.documentationElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleSource(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRuleSource(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapGroupRuleSource(jsn : TJsonObject) : TFhirStructureMapGroupRuleSource;
begin
  result := TFhirStructureMapGroupRuleSource.create;
  try
    ParseStructureMapGroupRuleSourceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleSourceProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleSource);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('context') or jsn.has('_context') then
        result.contextElement := parseId(jsn.node['context'], jsn.vObj['_context']);{q}
    if jsn.has('min') or jsn.has('_min') then
        result.minElement := parseInteger(jsn.node['min'], jsn.vObj['_min']);{q}
    if jsn.has('max') or jsn.has('_max') then
        result.maxElement := parseString(jsn.node['max'], jsn.vObj['_max']);{q}
    if jsn.has('type') or jsn.has('_type') then
        result.type_Element := parseString(jsn.node['type'], jsn.vObj['_type']);{q}
    if jsn.has('defaultValueCode') or jsn.has('_defaultValueCode') then
      result.defaultValue := parseCode(jsn.node['defaultValueCode'], jsn.vObj['_defaultValueCode']);
    if jsn.has('defaultValueId') or jsn.has('_defaultValueId') then
      result.defaultValue := parseId(jsn.node['defaultValueId'], jsn.vObj['_defaultValueId']);
    if jsn.has('defaultValueMarkdown') or jsn.has('_defaultValueMarkdown') then
      result.defaultValue := parseMarkdown(jsn.node['defaultValueMarkdown'], jsn.vObj['_defaultValueMarkdown']);
    if jsn.has('defaultValueOid') or jsn.has('_defaultValueOid') then
      result.defaultValue := parseOid(jsn.node['defaultValueOid'], jsn.vObj['_defaultValueOid']);
    if jsn.has('defaultValuePositiveInt') or jsn.has('_defaultValuePositiveInt') then
      result.defaultValue := parsePositiveInt(jsn.node['defaultValuePositiveInt'], jsn.vObj['_defaultValuePositiveInt']);
    if jsn.has('defaultValueUnsignedInt') or jsn.has('_defaultValueUnsignedInt') then
      result.defaultValue := parseUnsignedInt(jsn.node['defaultValueUnsignedInt'], jsn.vObj['_defaultValueUnsignedInt']);
    if jsn.has('defaultValueAddress') {a4} then
      result.defaultValue := ParseAddress(jsn.vObj['defaultValueAddress']);
    if jsn.has('defaultValueAge') {a4} then
      result.defaultValue := ParseAge(jsn.vObj['defaultValueAge']);
    if jsn.has('defaultValueAnnotation') {a4} then
      result.defaultValue := ParseAnnotation(jsn.vObj['defaultValueAnnotation']);
    if jsn.has('defaultValueAttachment') {a4} then
      result.defaultValue := ParseAttachment(jsn.vObj['defaultValueAttachment']);
    if jsn.has('defaultValueCodeableConcept') {a4} then
      result.defaultValue := ParseCodeableConcept(jsn.vObj['defaultValueCodeableConcept']);
    if jsn.has('defaultValueCoding') {a4} then
      result.defaultValue := ParseCoding(jsn.vObj['defaultValueCoding']);
    if jsn.has('defaultValueContactPoint') {a4} then
      result.defaultValue := ParseContactPoint(jsn.vObj['defaultValueContactPoint']);
    if jsn.has('defaultValueCount') {a4} then
      result.defaultValue := ParseCount(jsn.vObj['defaultValueCount']);
    if jsn.has('defaultValueDistance') {a4} then
      result.defaultValue := ParseDistance(jsn.vObj['defaultValueDistance']);
    if jsn.has('defaultValueDuration') {a4} then
      result.defaultValue := ParseDuration(jsn.vObj['defaultValueDuration']);
    if jsn.has('defaultValueHumanName') {a4} then
      result.defaultValue := ParseHumanName(jsn.vObj['defaultValueHumanName']);
    if jsn.has('defaultValueIdentifier') {a4} then
      result.defaultValue := ParseIdentifier(jsn.vObj['defaultValueIdentifier']);
    if jsn.has('defaultValueMoney') {a4} then
      result.defaultValue := ParseMoney(jsn.vObj['defaultValueMoney']);
    if jsn.has('defaultValuePeriod') {a4} then
      result.defaultValue := ParsePeriod(jsn.vObj['defaultValuePeriod']);
    if jsn.has('defaultValueQuantity') {a4} then
      result.defaultValue := ParseQuantity(jsn.vObj['defaultValueQuantity']);
    if jsn.has('defaultValueRange') {a4} then
      result.defaultValue := ParseRange(jsn.vObj['defaultValueRange']);
    if jsn.has('defaultValueRatio') {a4} then
      result.defaultValue := ParseRatio(jsn.vObj['defaultValueRatio']);
    if jsn.has('defaultValueReference') {a4} then
      result.defaultValue := ParseReference(jsn.vObj['defaultValueReference']);
    if jsn.has('defaultValueSampledData') {a4} then
      result.defaultValue := ParseSampledData(jsn.vObj['defaultValueSampledData']);
    if jsn.has('defaultValueSignature') {a4} then
      result.defaultValue := ParseSignature(jsn.vObj['defaultValueSignature']);
    if jsn.has('defaultValueTiming') {a4} then
      result.defaultValue := ParseTiming(jsn.vObj['defaultValueTiming']);
    if jsn.has('defaultValueMeta') {a4} then
      result.defaultValue := ParseMeta(jsn.vObj['defaultValueMeta']);
    if jsn.has('defaultValueBase64Binary') or jsn.has('_defaultValueBase64Binary') then
      result.defaultValue := parseBase64Binary(jsn.node['defaultValueBase64Binary'], jsn.vObj['_defaultValueBase64Binary']);
    if jsn.has('defaultValueBoolean') or jsn.has('_defaultValueBoolean') then
      result.defaultValue := parseBoolean(jsn.node['defaultValueBoolean'], jsn.vObj['_defaultValueBoolean']);
    if jsn.has('defaultValueDate') or jsn.has('_defaultValueDate') then
      result.defaultValue := parseDate(jsn.node['defaultValueDate'], jsn.vObj['_defaultValueDate']);
    if jsn.has('defaultValueDateTime') or jsn.has('_defaultValueDateTime') then
      result.defaultValue := parseDateTime(jsn.node['defaultValueDateTime'], jsn.vObj['_defaultValueDateTime']);
    if jsn.has('defaultValueDecimal') or jsn.has('_defaultValueDecimal') then
      result.defaultValue := parseDecimal(jsn.node['defaultValueDecimal'], jsn.vObj['_defaultValueDecimal']);
    if jsn.has('defaultValueInstant') or jsn.has('_defaultValueInstant') then
      result.defaultValue := parseInstant(jsn.node['defaultValueInstant'], jsn.vObj['_defaultValueInstant']);
    if jsn.has('defaultValueInteger') or jsn.has('_defaultValueInteger') then
      result.defaultValue := parseInteger(jsn.node['defaultValueInteger'], jsn.vObj['_defaultValueInteger']);
    if jsn.has('defaultValueString') or jsn.has('_defaultValueString') then
      result.defaultValue := parseString(jsn.node['defaultValueString'], jsn.vObj['_defaultValueString']);
    if jsn.has('defaultValueTime') or jsn.has('_defaultValueTime') then
      result.defaultValue := parseTime(jsn.node['defaultValueTime'], jsn.vObj['_defaultValueTime']);
    if jsn.has('defaultValueUri') or jsn.has('_defaultValueUri') then
      result.defaultValue := parseUri(jsn.node['defaultValueUri'], jsn.vObj['_defaultValueUri']);
    if jsn.has('element') or jsn.has('_element') then
        result.elementElement := parseString(jsn.node['element'], jsn.vObj['_element']);{q}
    if jsn.has('listMode') or jsn.has('_listMode')  then
      result.listModeElement := parseEnum(jsn.path+'/listMode', jsn.node['listMode'], jsn.vObj['_listMode'], CODES_TFhirMapSourceListModeEnum, SYSTEMS_TFhirMapSourceListModeEnum);
    if jsn.has('variable') or jsn.has('_variable') then
        result.variableElement := parseId(jsn.node['variable'], jsn.vObj['_variable']);{q}
    if jsn.has('condition') or jsn.has('_condition') then
        result.conditionElement := parseString(jsn.node['condition'], jsn.vObj['_condition']);{q}
    if jsn.has('check') or jsn.has('_check') then
        result.checkElement := parseString(jsn.node['check'], jsn.vObj['_check']);{q}
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRuleSource(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleSource; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdValue(json, 'context', elem.contextElement, false);
  ComposeIdProps(json, 'context', elem.contextElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerValue(json, 'min', elem.minElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIntegerProps(json, 'min', elem.minElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'max', elem.maxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'max', elem.maxElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'type', elem.type_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'type', elem.type_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'defaultValueCode', TFhirCode(elem.defaultValue), false);
    ComposeCodeProps(json, 'defaultValueCode', TFhirCode(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirId) then 
  begin
    ComposeIdValue(json, 'defaultValueId', TFhirId(elem.defaultValue), false);
    ComposeIdProps(json, 'defaultValueId', TFhirId(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'defaultValueMarkdown', TFhirMarkdown(elem.defaultValue), false);
    ComposeMarkdownProps(json, 'defaultValueMarkdown', TFhirMarkdown(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirOid) then 
  begin
    ComposeOidValue(json, 'defaultValueOid', TFhirOid(elem.defaultValue), false);
    ComposeOidProps(json, 'defaultValueOid', TFhirOid(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'defaultValuePositiveInt', TFhirPositiveInt(elem.defaultValue), false);
    ComposePositiveIntProps(json, 'defaultValuePositiveInt', TFhirPositiveInt(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'defaultValueUnsignedInt', TFhirUnsignedInt(elem.defaultValue), false);
    ComposeUnsignedIntProps(json, 'defaultValueUnsignedInt', TFhirUnsignedInt(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirAddress) then 
    ComposeAddress(json, 'defaultValueAddress', TFhirAddress(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirAge) then 
    ComposeAge(json, 'defaultValueAge', TFhirAge(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirAnnotation) then 
    ComposeAnnotation(json, 'defaultValueAnnotation', TFhirAnnotation(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirAttachment) then 
    ComposeAttachment(json, 'defaultValueAttachment', TFhirAttachment(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'defaultValueCodeableConcept', TFhirCodeableConcept(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirCoding) then 
    ComposeCoding(json, 'defaultValueCoding', TFhirCoding(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirContactPoint) then 
    ComposeContactPoint(json, 'defaultValueContactPoint', TFhirContactPoint(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirCount) then 
    ComposeCount(json, 'defaultValueCount', TFhirCount(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDistance) then 
    ComposeDistance(json, 'defaultValueDistance', TFhirDistance(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDuration) then 
    ComposeDuration(json, 'defaultValueDuration', TFhirDuration(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirHumanName) then 
    ComposeHumanName(json, 'defaultValueHumanName', TFhirHumanName(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirIdentifier) then 
    ComposeIdentifier(json, 'defaultValueIdentifier', TFhirIdentifier(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirMoney) then 
    ComposeMoney(json, 'defaultValueMoney', TFhirMoney(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirPeriod) then 
    ComposePeriod(json, 'defaultValuePeriod', TFhirPeriod(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirQuantity) then 
    ComposeQuantity(json, 'defaultValueQuantity', TFhirQuantity(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirRange) then 
    ComposeRange(json, 'defaultValueRange', TFhirRange(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirRatio) then 
    ComposeRatio(json, 'defaultValueRatio', TFhirRatio(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirReference) then 
    ComposeReference(json, 'defaultValueReference', TFhirReference(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirSampledData) then 
    ComposeSampledData(json, 'defaultValueSampledData', TFhirSampledData(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirSignature) then 
    ComposeSignature(json, 'defaultValueSignature', TFhirSignature(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirTiming) then 
    ComposeTiming(json, 'defaultValueTiming', TFhirTiming(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirMeta) then 
    ComposeMeta(json, 'defaultValueMeta', TFhirMeta(elem.defaultValue)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'defaultValueBase64Binary', TFhirBase64Binary(elem.defaultValue), false);
    ComposeBase64BinaryProps(json, 'defaultValueBase64Binary', TFhirBase64Binary(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'defaultValueBoolean', TFhirBoolean(elem.defaultValue), false);
    ComposeBooleanProps(json, 'defaultValueBoolean', TFhirBoolean(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDate) then 
  begin
    ComposeDateValue(json, 'defaultValueDate', TFhirDate(elem.defaultValue), false);
    ComposeDateProps(json, 'defaultValueDate', TFhirDate(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'defaultValueDateTime', TFhirDateTime(elem.defaultValue), false);
    ComposeDateTimeProps(json, 'defaultValueDateTime', TFhirDateTime(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'defaultValueDecimal', TFhirDecimal(elem.defaultValue), false);
    ComposeDecimalProps(json, 'defaultValueDecimal', TFhirDecimal(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'defaultValueInstant', TFhirInstant(elem.defaultValue), false);
    ComposeInstantProps(json, 'defaultValueInstant', TFhirInstant(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'defaultValueInteger', TFhirInteger(elem.defaultValue), false);
    ComposeIntegerProps(json, 'defaultValueInteger', TFhirInteger(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirString) then 
  begin
    ComposeStringValue(json, 'defaultValueString', TFhirString(elem.defaultValue), false);
    ComposeStringProps(json, 'defaultValueString', TFhirString(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'defaultValueTime', TFhirTime(elem.defaultValue), false);
    ComposeTimeProps(json, 'defaultValueTime', TFhirTime(elem.defaultValue), false);
  end
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirUri) then 
  begin
    ComposeUriValue(json, 'defaultValueUri', TFhirUri(elem.defaultValue), false);
    ComposeUriProps(json, 'defaultValueUri', TFhirUri(elem.defaultValue), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'element', elem.elementElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'element', elem.elementElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'listMode', elem.ListModeElement, CODES_TFhirMapSourceListModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumProps(json, 'listMode', elem.ListModeElement, CODES_TFhirMapSourceListModeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'variable', elem.variableElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'variable', elem.variableElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'condition', elem.conditionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'condition', elem.conditionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'check', elem.checkElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'check', elem.checkElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleTarget(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRuleTarget(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapGroupRuleTarget(jsn : TJsonObject) : TFhirStructureMapGroupRuleTarget;
begin
  result := TFhirStructureMapGroupRuleTarget.create;
  try
    ParseStructureMapGroupRuleTargetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleTargetProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleTarget);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('context') or jsn.has('_context') then
        result.contextElement := parseId(jsn.node['context'], jsn.vObj['_context']);{q}
    if jsn.has('contextType') or jsn.has('_contextType')  then
      result.contextTypeElement := parseEnum(jsn.path+'/contextType', jsn.node['contextType'], jsn.vObj['_contextType'], CODES_TFhirMapContextTypeEnum, SYSTEMS_TFhirMapContextTypeEnum);
    if jsn.has('element') or jsn.has('_element') then
        result.elementElement := parseString(jsn.node['element'], jsn.vObj['_element']);{q}
    if jsn.has('variable') or jsn.has('_variable') then
        result.variableElement := parseId(jsn.node['variable'], jsn.vObj['_variable']);{q}
    if jsn.has('listMode') or jsn.has('_listMode') then
      iterateEnumArray(jsn.vArr['listMode'], jsn.vArr['_listMode'], jsn.path+'/listMode', result.listModeList, parseEnum, CODES_TFhirMapTargetListModeEnum, SYSTEMS_TFhirMapTargetListModeEnum);
    if jsn.has('listRuleId') or jsn.has('_listRuleId') then
        result.listRuleIdElement := parseId(jsn.node['listRuleId'], jsn.vObj['_listRuleId']);{q}
    if jsn.has('transform') or jsn.has('_transform')  then
      result.transformElement := parseEnum(jsn.path+'/transform', jsn.node['transform'], jsn.vObj['_transform'], CODES_TFhirMapTransformEnum, SYSTEMS_TFhirMapTransformEnum);
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], result.parameterList, parseStructureMapGroupRuleTargetParameter);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRuleTarget(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleTarget; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'context', elem.contextElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'context', elem.contextElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'contextType', elem.ContextTypeElement, CODES_TFhirMapContextTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumProps(json, 'contextType', elem.ContextTypeElement, CODES_TFhirMapContextTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'element', elem.elementElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'element', elem.elementElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'variable', elem.variableElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'variable', elem.variableElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.listModeList.Count > 0) then
  begin
    val := false;
    ext := false;
    for i := 0 to elem.listModeList.Count - 1 do
    begin
      val := val or (elem.listModeList[i].hasPrimitiveValue);
      ext := ext or ((elem.listModeList[i].id <> '') or (elem.listModeList[i].hasExtensionList));
    end;
    if val then
    begin
      json.valueArray('listMode');
      for i := 0 to elem.listModeList.Count - 1 do
        ComposeEnumValue(json, '', elem.listModeList[i], CODES_TFhirMapTargetListModeEnum, true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_listMode');
      for i := 0 to elem.listModeList.Count - 1 do
        ComposeEnumProps(json, '', elem.listModeList[i], CODES_TFhirMapTargetListModeEnum, true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdValue(json, 'listRuleId', elem.listRuleIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdProps(json, 'listRuleId', elem.listRuleIdElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumValue(json, 'transform', elem.TransformElement, CODES_TFhirMapTransformEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnumProps(json, 'transform', elem.TransformElement, CODES_TFhirMapTransformEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.parameterList.Count > 0) then
  begin
    json.valueArray('parameter');
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeStructureMapGroupRuleTargetParameter(json, '', elem.parameterList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleTargetParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRuleTargetParameter(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapGroupRuleTargetParameter(jsn : TJsonObject) : TFhirStructureMapGroupRuleTargetParameter;
begin
  result := TFhirStructureMapGroupRuleTargetParameter.create;
  try
    ParseStructureMapGroupRuleTargetParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleTargetParameterProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleTargetParameter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('valueId') or jsn.has('_valueId') then
      result.value := parseId(jsn.node['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRuleTargetParameter(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleTargetParameter; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(elem.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(elem.value), false);
  end
  else if (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleDependent(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMapGroupRuleDependent(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMapGroupRuleDependent(jsn : TJsonObject) : TFhirStructureMapGroupRuleDependent;
begin
  result := TFhirStructureMapGroupRuleDependent.create;
  try
    ParseStructureMapGroupRuleDependentProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapGroupRuleDependentProperties(jsn : TJsonObject; result : TFhirStructureMapGroupRuleDependent);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseId(jsn.node['name'], jsn.vObj['_name']);{q}
      if jsn.has('variable') or jsn.has('_variable') then
      iteratePrimitiveArray(jsn.vArr['variable'], jsn.vArr['_variable'], result.variableList, parseString);
end;

procedure TFHIRJsonComposer.ComposeStructureMapGroupRuleDependent(json : TJSONWriter; name : string; elem : TFhirStructureMapGroupRuleDependent; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdValue(json, 'name', elem.nameElement, false);
  ComposeIdProps(json, 'name', elem.nameElement, false);
  if (elem.variableList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.variableList.Count - 1 do
    begin
      ext := ext or ((elem.variableList[i].id <> '') or (elem.variableList[i].hasExtensionList) {no-comments or (elem.variableList[i].hasComments)});
      val := val or (elem.variableList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('variable');
      for i := 0 to elem.variableList.Count - 1 do
        ComposeStringValue(json, '',elem.variableList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_variable');
      for i := 0 to elem.variableList.Count - 1 do
        ComposeStringProps(json, '',elem.variableList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseStructureMap(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseStructureMap(jsn)); {2}
end;

function TFHIRJsonParser.ParseStructureMap(jsn : TJsonObject) : TFhirStructureMap;
begin
  result := TFhirStructureMap.create;
  try
    ParseStructureMapProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseStructureMapProperties(jsn : TJsonObject; result : TFhirStructureMap);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('structure') then
      iterateArray(jsn.vArr['structure'], result.structureList, parseStructureMapStructure);
      if jsn.has('import') or jsn.has('_import') then
      iteratePrimitiveArray(jsn.vArr['import'], jsn.vArr['_import'], result.importList, parseUri);
    if jsn.has('group') then
      iterateArray(jsn.vArr['group'], result.groupList, parseStructureMapGroup);
end;

procedure TFHIRJsonComposer.ComposeStructureMap(json : TJSONWriter; name : string; elem : TFhirStructureMap; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  ComposeUriValue(json, 'url', elem.urlElement, false);
  ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('structure') and (elem.structureList.Count > 0) then
  begin
    json.valueArray('structure');
    for i := 0 to elem.structureList.Count - 1 do
      ComposeStructureMapStructure(json, '', elem.structureList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('import') and (elem.importList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.importList.Count - 1 do
    begin
      ext := ext or ((elem.importList[i].id <> '') or (elem.importList[i].hasExtensionList) {no-comments or (elem.importList[i].hasComments)});
      val := val or (elem.importList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('import');
      for i := 0 to elem.importList.Count - 1 do
        ComposeUriValue(json, '',elem.importList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_import');
      for i := 0 to elem.importList.Count - 1 do
        ComposeUriProps(json, '',elem.importList[i], true);
      json.FinishArray;
    end;
  end;
  if (elem.groupList.Count > 0) then
  begin
    json.valueArray('group');
    for i := 0 to elem.groupList.Count - 1 do
      ComposeStructureMapGroup(json, '', elem.groupList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
procedure TFHIRJsonParser.ParseSubscriptionChannel(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubscriptionChannel(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubscriptionChannel(jsn : TJsonObject) : TFhirSubscriptionChannel;
begin
  result := TFhirSubscriptionChannel.create;
  try
    ParseSubscriptionChannelProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubscriptionChannelProperties(jsn : TJsonObject; result : TFhirSubscriptionChannel);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirSubscriptionChannelTypeEnum, SYSTEMS_TFhirSubscriptionChannelTypeEnum);
    if jsn.has('endpoint') or jsn.has('_endpoint') then
        result.endpointElement := parseUri(jsn.node['endpoint'], jsn.vObj['_endpoint']);{q}
    if jsn.has('payload') or jsn.has('_payload') then
        result.payloadElement := parseString(jsn.node['payload'], jsn.vObj['_payload']);{q}
      if jsn.has('header') or jsn.has('_header') then
      iteratePrimitiveArray(jsn.vArr['header'], jsn.vArr['_header'], result.headerList, parseString);
end;

procedure TFHIRJsonComposer.ComposeSubscriptionChannel(json : TJSONWriter; name : string; elem : TFhirSubscriptionChannel; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirSubscriptionChannelTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirSubscriptionChannelTypeEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'endpoint', elem.endpointElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'endpoint', elem.endpointElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'payload', elem.payloadElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'payload', elem.payloadElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.headerList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.headerList.Count - 1 do
    begin
      ext := ext or ((elem.headerList[i].id <> '') or (elem.headerList[i].hasExtensionList) {no-comments or (elem.headerList[i].hasComments)});
      val := val or (elem.headerList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('header');
      for i := 0 to elem.headerList.Count - 1 do
        ComposeStringValue(json, '',elem.headerList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_header');
      for i := 0 to elem.headerList.Count - 1 do
        ComposeStringProps(json, '',elem.headerList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubscription(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubscription(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubscription(jsn : TJsonObject) : TFhirSubscription;
begin
  result := TFhirSubscription.create;
  try
    ParseSubscriptionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubscriptionProperties(jsn : TJsonObject; result : TFhirSubscription);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirSubscriptionStatusEnum, SYSTEMS_TFhirSubscriptionStatusEnum);
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactPoint);
    if jsn.has('end') or jsn.has('_end') then
        result.end_Element := parseInstant(jsn.node['end'], jsn.vObj['_end']);{q}
    if jsn.has('reason') or jsn.has('_reason') then
        result.reasonElement := parseString(jsn.node['reason'], jsn.vObj['_reason']);{q}
    if jsn.has('criteria') or jsn.has('_criteria') then
        result.criteriaElement := parseString(jsn.node['criteria'], jsn.vObj['_criteria']);{q}
    if jsn.has('error') or jsn.has('_error') then
        result.errorElement := parseString(jsn.node['error'], jsn.vObj['_error']);{q}
    if jsn.has('channel') then
        result.channel := ParseSubscriptionChannel(jsn.vObj['channel']);{q3}
    if jsn.has('tag') then
      iterateArray(jsn.vArr['tag'], result.tagList, parseCoding);
end;

procedure TFHIRJsonComposer.ComposeSubscription(json : TJSONWriter; name : string; elem : TFhirSubscription; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirSubscriptionStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirSubscriptionStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactPoint(json, '', elem.contactList[i]); {z - ContactPoint}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('end_') then
    ComposeInstantValue(json, 'end', elem.end_Element, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('end_') then
    ComposeInstantProps(json, 'end', elem.end_Element, false);
  ComposeStringValue(json, 'reason', elem.reasonElement, false);
  ComposeStringProps(json, 'reason', elem.reasonElement, false);
  ComposeStringValue(json, 'criteria', elem.criteriaElement, false);
  ComposeStringProps(json, 'criteria', elem.criteriaElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('error') then
    ComposeStringValue(json, 'error', elem.errorElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('error') then
    ComposeStringProps(json, 'error', elem.errorElement, false);
  ComposeSubscriptionChannel(json, 'channel', elem.channel); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('tag') and (elem.tagList.Count > 0) then
  begin
    json.valueArray('tag');
    for i := 0 to elem.tagList.Count - 1 do
      ComposeCoding(json, '', elem.tagList[i]); {z - Coding}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
procedure TFHIRJsonParser.ParseSubstanceInstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceInstance(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceInstance(jsn : TJsonObject) : TFhirSubstanceInstance;
begin
  result := TFhirSubstanceInstance.create;
  try
    ParseSubstanceInstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceInstanceProperties(jsn : TJsonObject; result : TFhirSubstanceInstance);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('expiry') or jsn.has('_expiry') then
        result.expiryElement := parseDateTime(jsn.node['expiry'], jsn.vObj['_expiry']);{q}
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSubstanceInstance(json : TJSONWriter; name : string; elem : TFhirSubstanceInstance; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeValue(json, 'expiry', elem.expiryElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTimeProps(json, 'expiry', elem.expiryElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstanceIngredient(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstanceIngredient(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstanceIngredient(jsn : TJsonObject) : TFhirSubstanceIngredient;
begin
  result := TFhirSubstanceIngredient.create;
  try
    ParseSubstanceIngredientProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceIngredientProperties(jsn : TJsonObject; result : TFhirSubstanceIngredient);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('quantity') then
        result.quantity := ParseRatio(jsn.vObj['quantity']);{q3}
    if jsn.has('substanceCodeableConcept') {a4} then
      result.substance := ParseCodeableConcept(jsn.vObj['substanceCodeableConcept']);
    if jsn.has('substanceReference') {a3} then
      result.substance := ParseReference(jsn.vObj['substanceReference']);
end;

procedure TFHIRJsonComposer.ComposeSubstanceIngredient(json : TJSONWriter; name : string; elem : TFhirSubstanceIngredient; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(json, 'quantity', elem.quantity); {a}
  if (elem.substance is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'substanceCodeableConcept', TFhirCodeableConcept(elem.substance)) 
  else if (elem.substance is TFhirReference) then
    ComposeReference(json, 'substanceReference', TFhirReference(elem.substance));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSubstance(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSubstance(jsn)); {2}
end;

function TFHIRJsonParser.ParseSubstance(jsn : TJsonObject) : TFhirSubstance;
begin
  result := TFhirSubstance.create;
  try
    ParseSubstanceProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSubstanceProperties(jsn : TJsonObject; result : TFhirSubstance);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirSubstanceStatusEnum, SYSTEMS_TFhirSubstanceStatusEnum);
    if jsn.has('category') then
      iterateArray(jsn.vArr['category'], result.categoryList, parseCodeableConcept);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('instance') then
      iterateArray(jsn.vArr['instance'], result.instanceList, parseSubstanceInstance);
    if jsn.has('ingredient') then
      iterateArray(jsn.vArr['ingredient'], result.ingredientList, parseSubstanceIngredient);
end;

procedure TFHIRJsonComposer.ComposeSubstance(json : TJSONWriter; name : string; elem : TFhirSubstance; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirSubstanceStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirSubstanceStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') and (elem.categoryList.Count > 0) then
  begin
    json.valueArray('category');
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.categoryList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instance') and (elem.instanceList.Count > 0) then
  begin
    json.valueArray('instance');
    for i := 0 to elem.instanceList.Count - 1 do
      ComposeSubstanceInstance(json, '', elem.instanceList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('ingredient') and (elem.ingredientList.Count > 0) then
  begin
    json.valueArray('ingredient');
    for i := 0 to elem.ingredientList.Count - 1 do
      ComposeSubstanceIngredient(json, '', elem.ingredientList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUPPLYDELIVERY}
procedure TFHIRJsonParser.ParseSupplyDeliverySuppliedItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSupplyDeliverySuppliedItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseSupplyDeliverySuppliedItem(jsn : TJsonObject) : TFhirSupplyDeliverySuppliedItem;
begin
  result := TFhirSupplyDeliverySuppliedItem.create;
  try
    ParseSupplyDeliverySuppliedItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSupplyDeliverySuppliedItemProperties(jsn : TJsonObject; result : TFhirSupplyDeliverySuppliedItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('itemCodeableConcept') {a4} then
      result.item := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
    if jsn.has('itemReference') {a3} then
      result.item := ParseReference(jsn.vObj['itemReference']);
end;

procedure TFHIRJsonComposer.ComposeSupplyDeliverySuppliedItem(json : TJSONWriter; name : string; elem : TFhirSupplyDeliverySuppliedItem; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soData]) and (elem.item is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'itemCodeableConcept', TFhirCodeableConcept(elem.item)) 
  else if (SummaryOption in [soFull, soData]) and (elem.item is TFhirReference) then
    ComposeReference(json, 'itemReference', TFhirReference(elem.item));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSupplyDelivery(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSupplyDelivery(jsn)); {2}
end;

function TFHIRJsonParser.ParseSupplyDelivery(jsn : TJsonObject) : TFhirSupplyDelivery;
begin
  result := TFhirSupplyDelivery.create;
  try
    ParseSupplyDeliveryProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSupplyDeliveryProperties(jsn : TJsonObject; result : TFhirSupplyDelivery);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirSupplyRequest});
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{Resource});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirSupplydeliveryStatusEnum, SYSTEMS_TFhirSupplydeliveryStatusEnum);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('suppliedItem') then
        result.suppliedItem := ParseSupplyDeliverySuppliedItem(jsn.vObj['suppliedItem']);{q3}
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      result.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('supplier') then
        result.supplier := ParseReference{Resource}(jsn.vObj['supplier']);{q3}
    if jsn.has('destination') then
        result.destination := ParseReference{TFhirLocation}(jsn.vObj['destination']);{q3}
    if jsn.has('receiver') then
      iterateArray(jsn.vArr['receiver'], result.receiverList, parseReference{TFhirPractitioner});
end;

procedure TFHIRJsonComposer.ComposeSupplyDelivery(json : TJSONWriter; name : string; elem : TFhirSupplyDelivery; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirSupplyRequest}(json, '', elem.basedOnList[i]); {z - Reference(SupplyRequest)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.partOfList[i]); {z - Reference(SupplyDelivery|Contract)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirSupplydeliveryStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirSupplydeliveryStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('type_') then
    ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('suppliedItem') then
    ComposeSupplyDeliverySuppliedItem(json, 'suppliedItem', elem.suppliedItem); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(elem.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('supplier') then
    ComposeReference{Resource}(json, 'supplier', elem.supplier); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('destination') then
    ComposeReference{TFhirLocation}(json, 'destination', elem.destination); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('receiver') and (elem.receiverList.Count > 0) then
  begin
    json.valueArray('receiver');
    for i := 0 to elem.receiverList.Count - 1 do
      ComposeReference{TFhirPractitioner}(json, '', elem.receiverList[i]); {z - Reference(Practitioner)}
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
procedure TFHIRJsonParser.ParseSupplyRequestOrderedItem(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSupplyRequestOrderedItem(jsn)); {2}
end;

function TFHIRJsonParser.ParseSupplyRequestOrderedItem(jsn : TJsonObject) : TFhirSupplyRequestOrderedItem;
begin
  result := TFhirSupplyRequestOrderedItem.create;
  try
    ParseSupplyRequestOrderedItemProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSupplyRequestOrderedItemProperties(jsn : TJsonObject; result : TFhirSupplyRequestOrderedItem);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('quantity') then
        result.quantity := ParseQuantity(jsn.vObj['quantity']);{q3}
    if jsn.has('itemCodeableConcept') {a4} then
      result.item := ParseCodeableConcept(jsn.vObj['itemCodeableConcept']);
    if jsn.has('itemReference') {a3} then
      result.item := ParseReference(jsn.vObj['itemReference']);
end;

procedure TFHIRJsonComposer.ComposeSupplyRequestOrderedItem(json : TJSONWriter; name : string; elem : TFhirSupplyRequestOrderedItem; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeQuantity(json, 'quantity', elem.quantity); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.item is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'itemCodeableConcept', TFhirCodeableConcept(elem.item)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.item is TFhirReference) then
    ComposeReference(json, 'itemReference', TFhirReference(elem.item));
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSupplyRequestRequester(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSupplyRequestRequester(jsn)); {2}
end;

function TFHIRJsonParser.ParseSupplyRequestRequester(jsn : TJsonObject) : TFhirSupplyRequestRequester;
begin
  result := TFhirSupplyRequestRequester.create;
  try
    ParseSupplyRequestRequesterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSupplyRequestRequesterProperties(jsn : TJsonObject; result : TFhirSupplyRequestRequester);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('agent') then
        result.agent := ParseReference{Resource}(jsn.vObj['agent']);{q3}
    if jsn.has('onBehalfOf') then
        result.onBehalfOf := ParseReference{TFhirOrganization}(jsn.vObj['onBehalfOf']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSupplyRequestRequester(json : TJSONWriter; name : string; elem : TFhirSupplyRequestRequester; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'agent', elem.agent); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'onBehalfOf', elem.onBehalfOf); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseSupplyRequest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseSupplyRequest(jsn)); {2}
end;

function TFHIRJsonParser.ParseSupplyRequest(jsn : TJsonObject) : TFhirSupplyRequest;
begin
  result := TFhirSupplyRequest.create;
  try
    ParseSupplyRequestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseSupplyRequestProperties(jsn : TJsonObject; result : TFhirSupplyRequest);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirSupplyrequestStatusEnum, SYSTEMS_TFhirSupplyrequestStatusEnum);
    if jsn.has('category') then
        result.category := ParseCodeableConcept(jsn.vObj['category']);{q3}
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('orderedItem') then
        result.orderedItem := ParseSupplyRequestOrderedItem(jsn.vObj['orderedItem']);{q3}
    if jsn.has('occurrencePeriod') {a4} then
      result.occurrence := ParsePeriod(jsn.vObj['occurrencePeriod']);
    if jsn.has('occurrenceTiming') {a4} then
      result.occurrence := ParseTiming(jsn.vObj['occurrenceTiming']);
    if jsn.has('occurrenceDateTime') or jsn.has('_occurrenceDateTime') then
      result.occurrence := parseDateTime(jsn.node['occurrenceDateTime'], jsn.vObj['_occurrenceDateTime']);
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('requester') then
        result.requester := ParseSupplyRequestRequester(jsn.vObj['requester']);{q3}
    if jsn.has('supplier') then
      iterateArray(jsn.vArr['supplier'], result.supplierList, parseReference{TFhirOrganization});
    if jsn.has('reasonCodeableConcept') {a4} then
      result.reason := ParseCodeableConcept(jsn.vObj['reasonCodeableConcept']);
    if jsn.has('reasonReference') {a3} then
      result.reason := ParseReference(jsn.vObj['reasonReference']);
    if jsn.has('deliverFrom') then
        result.deliverFrom := ParseReference{Resource}(jsn.vObj['deliverFrom']);{q3}
    if jsn.has('deliverTo') then
        result.deliverTo := ParseReference{Resource}(jsn.vObj['deliverTo']);{q3}
end;

procedure TFHIRJsonComposer.ComposeSupplyRequest(json : TJSONWriter; name : string; elem : TFhirSupplyRequest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirSupplyrequestStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirSupplyrequestStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeCodeableConcept(json, 'category', elem.category); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('orderedItem') then
    ComposeSupplyRequestOrderedItem(json, 'orderedItem', elem.orderedItem); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) then 
    ComposePeriod(json, 'occurrencePeriod', TFhirPeriod(elem.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) then 
    ComposeTiming(json, 'occurrenceTiming', TFhirTiming(elem.occurrence)) 
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
    ComposeDateTimeProps(json, 'occurrenceDateTime', TFhirDateTime(elem.occurrence), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requester') then
    ComposeSupplyRequestRequester(json, 'requester', elem.requester); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('supplier') and (elem.supplierList.Count > 0) then
  begin
    json.valueArray('supplier');
    for i := 0 to elem.supplierList.Count - 1 do
      ComposeReference{TFhirOrganization}(json, '', elem.supplierList[i]); {z - Reference(Organization)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.reason is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'reasonCodeableConcept', TFhirCodeableConcept(elem.reason)) 
  else if (SummaryOption in [soFull, soData]) and (elem.reason is TFhirReference) then
    ComposeReference(json, 'reasonReference', TFhirReference(elem.reason));
  if (SummaryOption in [soFull, soData]) and doCompose('deliverFrom') then
    ComposeReference{Resource}(json, 'deliverFrom', elem.deliverFrom); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('deliverTo') then
    ComposeReference{Resource}(json, 'deliverTo', elem.deliverTo); {a}
end;

{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
procedure TFHIRJsonParser.ParseTaskRequester(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTaskRequester(jsn)); {2}
end;

function TFHIRJsonParser.ParseTaskRequester(jsn : TJsonObject) : TFhirTaskRequester;
begin
  result := TFhirTaskRequester.create;
  try
    ParseTaskRequesterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTaskRequesterProperties(jsn : TJsonObject; result : TFhirTaskRequester);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('agent') then
        result.agent := ParseReference{Resource}(jsn.vObj['agent']);{q3}
    if jsn.has('onBehalfOf') then
        result.onBehalfOf := ParseReference{TFhirOrganization}(jsn.vObj['onBehalfOf']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTaskRequester(json : TJSONWriter; name : string; elem : TFhirTaskRequester; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{Resource}(json, 'agent', elem.agent); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(json, 'onBehalfOf', elem.onBehalfOf); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTaskRestriction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTaskRestriction(jsn)); {2}
end;

function TFHIRJsonParser.ParseTaskRestriction(jsn : TJsonObject) : TFhirTaskRestriction;
begin
  result := TFhirTaskRestriction.create;
  try
    ParseTaskRestrictionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTaskRestrictionProperties(jsn : TJsonObject; result : TFhirTaskRestriction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('repetitions') or jsn.has('_repetitions') then
        result.repetitionsElement := parsePositiveInt(jsn.node['repetitions'], jsn.vObj['_repetitions']);{q}
    if jsn.has('period') then
        result.period := ParsePeriod(jsn.vObj['period']);{q3}
    if jsn.has('recipient') then
      iterateArray(jsn.vArr['recipient'], result.recipientList, parseReference{Resource});
end;

procedure TFHIRJsonComposer.ComposeTaskRestriction(json : TJSONWriter; name : string; elem : TFhirTaskRestriction; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntValue(json, 'repetitions', elem.repetitionsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveIntProps(json, 'repetitions', elem.repetitionsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(json, 'period', elem.period); {a}
  if (SummaryOption in [soFull, soData]) and (elem.recipientList.Count > 0) then
  begin
    json.valueArray('recipient');
    for i := 0 to elem.recipientList.Count - 1 do
      ComposeReference{Resource}(json, '', elem.recipientList[i]); {z - Reference(Patient|Practitioner|RelatedPerson|Group|Organization)}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTaskInput(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTaskInput(jsn)); {2}
end;

function TFHIRJsonParser.ParseTaskInput(jsn : TJsonObject) : TFhirTaskInput;
begin
  result := TFhirTaskInput.create;
  try
    ParseTaskInputProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTaskInputProperties(jsn : TJsonObject; result : TFhirTaskInput);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      result.value := parseCode(jsn.node['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      result.value := parseId(jsn.node['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      result.value := parseMarkdown(jsn.node['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      result.value := parseOid(jsn.node['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      result.value := parsePositiveInt(jsn.node['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      result.value := parseUnsignedInt(jsn.node['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueAddress') {a4} then
      result.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      result.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      result.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      result.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      result.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      result.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      result.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      result.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      result.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      result.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      result.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueReference') {a4} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      result.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      result.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      result.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueMeta') {a4} then
      result.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      result.value := parseBase64Binary(jsn.node['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      result.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      result.value := parseInstant(jsn.node['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      result.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeTaskInput(json : TJSONWriter; name : string; elem : TFhirTaskInput; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (elem.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(elem.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(elem.value), false);
  end
  else if (elem.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(elem.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(elem.value), false);
  end
  else if (elem.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
  end
  else if (elem.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(elem.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(elem.value), false);
  end
  else if (elem.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
  end
  else if (elem.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
  end
  else if (elem.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(elem.value)) 
  else if (elem.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(elem.value)) 
  else if (elem.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(elem.value)) 
  else if (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if (elem.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(elem.value)) 
  else if (elem.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(elem.value)) 
  else if (elem.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(elem.value)) 
  else if (elem.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(elem.value)) 
  else if (elem.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(elem.value)) 
  else if (elem.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(elem.value)) 
  else if (elem.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(elem.value)) 
  else if (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if (elem.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(elem.value)) 
  else if (elem.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(elem.value)) 
  else if (elem.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(elem.value)) 
  else if (elem.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(elem.value)) 
  else if (elem.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(elem.value)) 
  else if (elem.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(elem.value)) 
  else if (elem.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
  end
  else if (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if (elem.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(elem.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(elem.value), false);
  end
  else if (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end
  else if (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end
  else if (elem.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(elem.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(elem.value), false);
  end
  else if (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if (elem.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(elem.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTaskOutput(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTaskOutput(jsn)); {2}
end;

function TFHIRJsonParser.ParseTaskOutput(jsn : TJsonObject) : TFhirTaskOutput;
begin
  result := TFhirTaskOutput.create;
  try
    ParseTaskOutputProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTaskOutputProperties(jsn : TJsonObject; result : TFhirTaskOutput);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCodeableConcept(jsn.vObj['type']);{q3}
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      result.value := parseCode(jsn.node['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueId') or jsn.has('_valueId') then
      result.value := parseId(jsn.node['valueId'], jsn.vObj['_valueId']);
    if jsn.has('valueMarkdown') or jsn.has('_valueMarkdown') then
      result.value := parseMarkdown(jsn.node['valueMarkdown'], jsn.vObj['_valueMarkdown']);
    if jsn.has('valueOid') or jsn.has('_valueOid') then
      result.value := parseOid(jsn.node['valueOid'], jsn.vObj['_valueOid']);
    if jsn.has('valuePositiveInt') or jsn.has('_valuePositiveInt') then
      result.value := parsePositiveInt(jsn.node['valuePositiveInt'], jsn.vObj['_valuePositiveInt']);
    if jsn.has('valueUnsignedInt') or jsn.has('_valueUnsignedInt') then
      result.value := parseUnsignedInt(jsn.node['valueUnsignedInt'], jsn.vObj['_valueUnsignedInt']);
    if jsn.has('valueAddress') {a4} then
      result.value := ParseAddress(jsn.vObj['valueAddress']);
    if jsn.has('valueAge') {a4} then
      result.value := ParseAge(jsn.vObj['valueAge']);
    if jsn.has('valueAnnotation') {a4} then
      result.value := ParseAnnotation(jsn.vObj['valueAnnotation']);
    if jsn.has('valueAttachment') {a4} then
      result.value := ParseAttachment(jsn.vObj['valueAttachment']);
    if jsn.has('valueCodeableConcept') {a4} then
      result.value := ParseCodeableConcept(jsn.vObj['valueCodeableConcept']);
    if jsn.has('valueCoding') {a4} then
      result.value := ParseCoding(jsn.vObj['valueCoding']);
    if jsn.has('valueContactPoint') {a4} then
      result.value := ParseContactPoint(jsn.vObj['valueContactPoint']);
    if jsn.has('valueCount') {a4} then
      result.value := ParseCount(jsn.vObj['valueCount']);
    if jsn.has('valueDistance') {a4} then
      result.value := ParseDistance(jsn.vObj['valueDistance']);
    if jsn.has('valueDuration') {a4} then
      result.value := ParseDuration(jsn.vObj['valueDuration']);
    if jsn.has('valueHumanName') {a4} then
      result.value := ParseHumanName(jsn.vObj['valueHumanName']);
    if jsn.has('valueIdentifier') {a4} then
      result.value := ParseIdentifier(jsn.vObj['valueIdentifier']);
    if jsn.has('valueMoney') {a4} then
      result.value := ParseMoney(jsn.vObj['valueMoney']);
    if jsn.has('valuePeriod') {a4} then
      result.value := ParsePeriod(jsn.vObj['valuePeriod']);
    if jsn.has('valueQuantity') {a4} then
      result.value := ParseQuantity(jsn.vObj['valueQuantity']);
    if jsn.has('valueRange') {a4} then
      result.value := ParseRange(jsn.vObj['valueRange']);
    if jsn.has('valueRatio') {a4} then
      result.value := ParseRatio(jsn.vObj['valueRatio']);
    if jsn.has('valueReference') {a4} then
      result.value := ParseReference(jsn.vObj['valueReference']);
    if jsn.has('valueSampledData') {a4} then
      result.value := ParseSampledData(jsn.vObj['valueSampledData']);
    if jsn.has('valueSignature') {a4} then
      result.value := ParseSignature(jsn.vObj['valueSignature']);
    if jsn.has('valueTiming') {a4} then
      result.value := ParseTiming(jsn.vObj['valueTiming']);
    if jsn.has('valueMeta') {a4} then
      result.value := ParseMeta(jsn.vObj['valueMeta']);
    if jsn.has('valueBase64Binary') or jsn.has('_valueBase64Binary') then
      result.value := parseBase64Binary(jsn.node['valueBase64Binary'], jsn.vObj['_valueBase64Binary']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueDate') or jsn.has('_valueDate') then
      result.value := parseDate(jsn.node['valueDate'], jsn.vObj['_valueDate']);
    if jsn.has('valueDateTime') or jsn.has('_valueDateTime') then
      result.value := parseDateTime(jsn.node['valueDateTime'], jsn.vObj['_valueDateTime']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueInstant') or jsn.has('_valueInstant') then
      result.value := parseInstant(jsn.node['valueInstant'], jsn.vObj['_valueInstant']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueTime') or jsn.has('_valueTime') then
      result.value := parseTime(jsn.node['valueTime'], jsn.vObj['_valueTime']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      result.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeTaskOutput(json : TJSONWriter; name : string; elem : TFhirTaskOutput; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeableConcept(json, 'type', elem.type_); {a}
  if (elem.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(elem.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(elem.value), false);
  end
  else if (elem.value is TFhirId) then 
  begin
    ComposeIdValue(json, 'valueId', TFhirId(elem.value), false);
    ComposeIdProps(json, 'valueId', TFhirId(elem.value), false);
  end
  else if (elem.value is TFhirMarkdown) then 
  begin
    ComposeMarkdownValue(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
    ComposeMarkdownProps(json, 'valueMarkdown', TFhirMarkdown(elem.value), false);
  end
  else if (elem.value is TFhirOid) then 
  begin
    ComposeOidValue(json, 'valueOid', TFhirOid(elem.value), false);
    ComposeOidProps(json, 'valueOid', TFhirOid(elem.value), false);
  end
  else if (elem.value is TFhirPositiveInt) then 
  begin
    ComposePositiveIntValue(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
    ComposePositiveIntProps(json, 'valuePositiveInt', TFhirPositiveInt(elem.value), false);
  end
  else if (elem.value is TFhirUnsignedInt) then 
  begin
    ComposeUnsignedIntValue(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
    ComposeUnsignedIntProps(json, 'valueUnsignedInt', TFhirUnsignedInt(elem.value), false);
  end
  else if (elem.value is TFhirAddress) then 
    ComposeAddress(json, 'valueAddress', TFhirAddress(elem.value)) 
  else if (elem.value is TFhirAge) then 
    ComposeAge(json, 'valueAge', TFhirAge(elem.value)) 
  else if (elem.value is TFhirAnnotation) then 
    ComposeAnnotation(json, 'valueAnnotation', TFhirAnnotation(elem.value)) 
  else if (elem.value is TFhirAttachment) then 
    ComposeAttachment(json, 'valueAttachment', TFhirAttachment(elem.value)) 
  else if (elem.value is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'valueCodeableConcept', TFhirCodeableConcept(elem.value)) 
  else if (elem.value is TFhirCoding) then 
    ComposeCoding(json, 'valueCoding', TFhirCoding(elem.value)) 
  else if (elem.value is TFhirContactPoint) then 
    ComposeContactPoint(json, 'valueContactPoint', TFhirContactPoint(elem.value)) 
  else if (elem.value is TFhirCount) then 
    ComposeCount(json, 'valueCount', TFhirCount(elem.value)) 
  else if (elem.value is TFhirDistance) then 
    ComposeDistance(json, 'valueDistance', TFhirDistance(elem.value)) 
  else if (elem.value is TFhirDuration) then 
    ComposeDuration(json, 'valueDuration', TFhirDuration(elem.value)) 
  else if (elem.value is TFhirHumanName) then 
    ComposeHumanName(json, 'valueHumanName', TFhirHumanName(elem.value)) 
  else if (elem.value is TFhirIdentifier) then 
    ComposeIdentifier(json, 'valueIdentifier', TFhirIdentifier(elem.value)) 
  else if (elem.value is TFhirMoney) then 
    ComposeMoney(json, 'valueMoney', TFhirMoney(elem.value)) 
  else if (elem.value is TFhirPeriod) then 
    ComposePeriod(json, 'valuePeriod', TFhirPeriod(elem.value)) 
  else if (elem.value is TFhirQuantity) then 
    ComposeQuantity(json, 'valueQuantity', TFhirQuantity(elem.value)) 
  else if (elem.value is TFhirRange) then 
    ComposeRange(json, 'valueRange', TFhirRange(elem.value)) 
  else if (elem.value is TFhirRatio) then 
    ComposeRatio(json, 'valueRatio', TFhirRatio(elem.value)) 
  else if (elem.value is TFhirReference) then 
    ComposeReference(json, 'valueReference', TFhirReference(elem.value)) 
  else if (elem.value is TFhirSampledData) then 
    ComposeSampledData(json, 'valueSampledData', TFhirSampledData(elem.value)) 
  else if (elem.value is TFhirSignature) then 
    ComposeSignature(json, 'valueSignature', TFhirSignature(elem.value)) 
  else if (elem.value is TFhirTiming) then 
    ComposeTiming(json, 'valueTiming', TFhirTiming(elem.value)) 
  else if (elem.value is TFhirMeta) then 
    ComposeMeta(json, 'valueMeta', TFhirMeta(elem.value)) 
  else if (elem.value is TFhirBase64Binary) then 
  begin
    ComposeBase64BinaryValue(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
    ComposeBase64BinaryProps(json, 'valueBase64Binary', TFhirBase64Binary(elem.value), false);
  end
  else if (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if (elem.value is TFhirDate) then 
  begin
    ComposeDateValue(json, 'valueDate', TFhirDate(elem.value), false);
    ComposeDateProps(json, 'valueDate', TFhirDate(elem.value), false);
  end
  else if (elem.value is TFhirDateTime) then 
  begin
    ComposeDateTimeValue(json, 'valueDateTime', TFhirDateTime(elem.value), false);
    ComposeDateTimeProps(json, 'valueDateTime', TFhirDateTime(elem.value), false);
  end
  else if (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end
  else if (elem.value is TFhirInstant) then 
  begin
    ComposeInstantValue(json, 'valueInstant', TFhirInstant(elem.value), false);
    ComposeInstantProps(json, 'valueInstant', TFhirInstant(elem.value), false);
  end
  else if (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if (elem.value is TFhirTime) then 
  begin
    ComposeTimeValue(json, 'valueTime', TFhirTime(elem.value), false);
    ComposeTimeProps(json, 'valueTime', TFhirTime(elem.value), false);
  end
  else if (elem.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(elem.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTask(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTask(jsn)); {2}
end;

function TFHIRJsonParser.ParseTask(jsn : TJsonObject) : TFhirTask;
begin
  result := TFhirTask.create;
  try
    ParseTaskProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTaskProperties(jsn : TJsonObject; result : TFhirTask);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('definitionReference') {a3} then
      result.definition := ParseReference(jsn.vObj['definitionReference']);
    if jsn.has('definitionUri') or jsn.has('_definitionUri') then
      result.definition := parseUri(jsn.node['definitionUri'], jsn.vObj['_definitionUri']);
    if jsn.has('basedOn') then
      iterateArray(jsn.vArr['basedOn'], result.basedOnList, parseReference{TFhirReference});
    if jsn.has('groupIdentifier') then
        result.groupIdentifier := ParseIdentifier(jsn.vObj['groupIdentifier']);{q3}
    if jsn.has('partOf') then
      iterateArray(jsn.vArr['partOf'], result.partOfList, parseReference{TFhirTask});
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirTaskStatusEnum, SYSTEMS_TFhirTaskStatusEnum);
    if jsn.has('statusReason') then
        result.statusReason := ParseCodeableConcept(jsn.vObj['statusReason']);{q3}
    if jsn.has('businessStatus') then
        result.businessStatus := ParseCodeableConcept(jsn.vObj['businessStatus']);{q3}
    if jsn.has('intent') or jsn.has('_intent')  then
      result.intentElement := parseEnum(jsn.path+'/intent', jsn.node['intent'], jsn.vObj['_intent'], CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum);
    if jsn.has('priority') or jsn.has('_priority')  then
      result.priorityElement := parseEnum(jsn.path+'/priority', jsn.node['priority'], jsn.vObj['_priority'], CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum);
    if jsn.has('code') then
        result.code := ParseCodeableConcept(jsn.vObj['code']);{q3}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('focus') then
        result.focus := ParseReference{TFhirReference}(jsn.vObj['focus']);{q3}
    if jsn.has('for') then
        result.for_ := ParseReference{TFhirReference}(jsn.vObj['for']);{q3}
    if jsn.has('context') then
        result.context := ParseReference{Resource}(jsn.vObj['context']);{q3}
    if jsn.has('executionPeriod') then
        result.executionPeriod := ParsePeriod(jsn.vObj['executionPeriod']);{q3}
    if jsn.has('authoredOn') or jsn.has('_authoredOn') then
        result.authoredOnElement := parseDateTime(jsn.node['authoredOn'], jsn.vObj['_authoredOn']);{q}
    if jsn.has('lastModified') or jsn.has('_lastModified') then
        result.lastModifiedElement := parseDateTime(jsn.node['lastModified'], jsn.vObj['_lastModified']);{q}
    if jsn.has('requester') then
        result.requester := ParseTaskRequester(jsn.vObj['requester']);{q3}
    if jsn.has('performerType') then
      iterateArray(jsn.vArr['performerType'], result.performerTypeList, parseCodeableConcept);
    if jsn.has('owner') then
        result.owner := ParseReference{Resource}(jsn.vObj['owner']);{q3}
    if jsn.has('reason') then
        result.reason := ParseCodeableConcept(jsn.vObj['reason']);{q3}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
    if jsn.has('relevantHistory') then
      iterateArray(jsn.vArr['relevantHistory'], result.relevantHistoryList, parseReference{TFhirProvenance});
    if jsn.has('restriction') then
        result.restriction := ParseTaskRestriction(jsn.vObj['restriction']);{q3}
    if jsn.has('input') then
      iterateArray(jsn.vArr['input'], result.inputList, parseTaskInput);
    if jsn.has('output') then
      iterateArray(jsn.vArr['output'], result.outputList, parseTaskOutput);
end;

procedure TFHIRJsonComposer.ComposeTask(json : TJSONWriter; name : string; elem : TFhirTask; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.definition is TFhirReference) then
    ComposeReference(json, 'definitionReference', TFhirReference(elem.definition))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.definition is TFhirUri) then 
  begin
    ComposeUriValue(json, 'definitionUri', TFhirUri(elem.definition), false);
    ComposeUriProps(json, 'definitionUri', TFhirUri(elem.definition), false);
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') and (elem.basedOnList.Count > 0) then
  begin
    json.valueArray('basedOn');
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.basedOnList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('groupIdentifier') then
    ComposeIdentifier(json, 'groupIdentifier', elem.groupIdentifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') and (elem.partOfList.Count > 0) then
  begin
    json.valueArray('partOf');
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirTask}(json, '', elem.partOfList[i]); {z - Reference(Task)}
    json.FinishArray;
  end;
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirTaskStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirTaskStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('statusReason') then
    ComposeCodeableConcept(json, 'statusReason', elem.statusReason); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('businessStatus') then
    ComposeCodeableConcept(json, 'businessStatus', elem.businessStatus); {a}
  ComposeEnumValue(json, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum, false);
  ComposeEnumProps(json, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('priority') then
    ComposeEnumValue(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('priority') then
    ComposeEnumProps(json, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(json, 'code', elem.code); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('focus') then
    ComposeReference{TFhirReference}(json, 'focus', elem.focus); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('for_') then
    ComposeReference{TFhirReference}(json, 'for', elem.for_); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{Resource}(json, 'context', elem.context); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('executionPeriod') then
    ComposePeriod(json, 'executionPeriod', elem.executionPeriod); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('authoredOn') then
    ComposeDateTimeValue(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('authoredOn') then
    ComposeDateTimeProps(json, 'authoredOn', elem.authoredOnElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('lastModified') then
    ComposeDateTimeValue(json, 'lastModified', elem.lastModifiedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('lastModified') then
    ComposeDateTimeProps(json, 'lastModified', elem.lastModifiedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requester') then
    ComposeTaskRequester(json, 'requester', elem.requester); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('performerType') and (elem.performerTypeList.Count > 0) then
  begin
    json.valueArray('performerType');
    for i := 0 to elem.performerTypeList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.performerTypeList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('owner') then
    ComposeReference{Resource}(json, 'owner', elem.owner); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('reason') then
    ComposeCodeableConcept(json, 'reason', elem.reason); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('note') and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('relevantHistory') and (elem.relevantHistoryList.Count > 0) then
  begin
    json.valueArray('relevantHistory');
    for i := 0 to elem.relevantHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(json, '', elem.relevantHistoryList[i]); {z - Reference(Provenance)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('restriction') then
    ComposeTaskRestriction(json, 'restriction', elem.restriction); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('input') and (elem.inputList.Count > 0) then
  begin
    json.valueArray('input');
    for i := 0 to elem.inputList.Count - 1 do
      ComposeTaskInput(json, '', elem.inputList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('output') and (elem.outputList.Count > 0) then
  begin
    json.valueArray('output');
    for i := 0 to elem.outputList.Count - 1 do
      ComposeTaskOutput(json, '', elem.outputList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TESTREPORT}
procedure TFHIRJsonParser.ParseTestReportParticipant(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportParticipant(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportParticipant(jsn : TJsonObject) : TFhirTestReportParticipant;
begin
  result := TFhirTestReportParticipant.create;
  try
    ParseTestReportParticipantProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportParticipantProperties(jsn : TJsonObject; result : TFhirTestReportParticipant);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') or jsn.has('_type')  then
      result.type_Element := parseEnum(jsn.path+'/type', jsn.node['type'], jsn.vObj['_type'], CODES_TFhirReportParticipantTypeEnum, SYSTEMS_TFhirReportParticipantTypeEnum);
    if jsn.has('uri') or jsn.has('_uri') then
        result.uriElement := parseUri(jsn.node['uri'], jsn.vObj['_uri']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestReportParticipant(json : TJSONWriter; name : string; elem : TFhirTestReportParticipant; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'type', elem.Type_Element, CODES_TFhirReportParticipantTypeEnum, false);
  ComposeEnumProps(json, 'type', elem.Type_Element, CODES_TFhirReportParticipantTypeEnum, false);
  ComposeUriValue(json, 'uri', elem.uriElement, false);
  ComposeUriProps(json, 'uri', elem.uriElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportSetup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportSetup(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportSetup(jsn : TJsonObject) : TFhirTestReportSetup;
begin
  result := TFhirTestReportSetup.create;
  try
    ParseTestReportSetupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportSetupProperties(jsn : TJsonObject; result : TFhirTestReportSetup);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseTestReportSetupAction);
end;

procedure TFHIRJsonComposer.ComposeTestReportSetup(json : TJSONWriter; name : string; elem : TFhirTestReportSetup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeTestReportSetupAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportSetupAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportSetupAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportSetupAction(jsn : TJsonObject) : TFhirTestReportSetupAction;
begin
  result := TFhirTestReportSetupAction.create;
  try
    ParseTestReportSetupActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionProperties(jsn : TJsonObject; result : TFhirTestReportSetupAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('operation') then
        result.operation := ParseTestReportSetupActionOperation(jsn.vObj['operation']);{q3}
    if jsn.has('assert') then
        result.assert := ParseTestReportSetupActionAssert(jsn.vObj['assert']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestReportSetupAction(json : TJSONWriter; name : string; elem : TFhirTestReportSetupAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionOperation(json, 'operation', elem.operation); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionAssert(json, 'assert', elem.assert); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportSetupActionOperation(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportSetupActionOperation(jsn : TJsonObject) : TFhirTestReportSetupActionOperation;
begin
  result := TFhirTestReportSetupActionOperation.create;
  try
    ParseTestReportSetupActionOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionOperationProperties(jsn : TJsonObject; result : TFhirTestReportSetupActionOperation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('result') or jsn.has('_result')  then
      result.resultElement := parseEnum(jsn.path+'/result', jsn.node['result'], jsn.vObj['_result'], CODES_TFhirReportActionResultCodesEnum, SYSTEMS_TFhirReportActionResultCodesEnum);
    if jsn.has('message') or jsn.has('_message') then
        result.messageElement := parseMarkdown(jsn.node['message'], jsn.vObj['_message']);{q}
    if jsn.has('detail') or jsn.has('_detail') then
        result.detailElement := parseUri(jsn.node['detail'], jsn.vObj['_detail']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestReportSetupActionOperation(json : TJSONWriter; name : string; elem : TFhirTestReportSetupActionOperation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'result', elem.ResultElement, CODES_TFhirReportActionResultCodesEnum, false);
  ComposeEnumProps(json, 'result', elem.ResultElement, CODES_TFhirReportActionResultCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'message', elem.messageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'message', elem.messageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'detail', elem.detailElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'detail', elem.detailElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionAssert(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportSetupActionAssert(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportSetupActionAssert(jsn : TJsonObject) : TFhirTestReportSetupActionAssert;
begin
  result := TFhirTestReportSetupActionAssert.create;
  try
    ParseTestReportSetupActionAssertProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportSetupActionAssertProperties(jsn : TJsonObject; result : TFhirTestReportSetupActionAssert);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('result') or jsn.has('_result')  then
      result.resultElement := parseEnum(jsn.path+'/result', jsn.node['result'], jsn.vObj['_result'], CODES_TFhirReportActionResultCodesEnum, SYSTEMS_TFhirReportActionResultCodesEnum);
    if jsn.has('message') or jsn.has('_message') then
        result.messageElement := parseMarkdown(jsn.node['message'], jsn.vObj['_message']);{q}
    if jsn.has('detail') or jsn.has('_detail') then
        result.detailElement := parseString(jsn.node['detail'], jsn.vObj['_detail']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestReportSetupActionAssert(json : TJSONWriter; name : string; elem : TFhirTestReportSetupActionAssert; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeEnumValue(json, 'result', elem.ResultElement, CODES_TFhirReportActionResultCodesEnum, false);
  ComposeEnumProps(json, 'result', elem.ResultElement, CODES_TFhirReportActionResultCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownValue(json, 'message', elem.messageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdownProps(json, 'message', elem.messageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'detail', elem.detailElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'detail', elem.detailElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportTest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportTest(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportTest(jsn : TJsonObject) : TFhirTestReportTest;
begin
  result := TFhirTestReportTest.create;
  try
    ParseTestReportTestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportTestProperties(jsn : TJsonObject; result : TFhirTestReportTest);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseTestReportTestAction);
end;

procedure TFHIRJsonComposer.ComposeTestReportTest(json : TJSONWriter; name : string; elem : TFhirTestReportTest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeTestReportTestAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportTestAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportTestAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportTestAction(jsn : TJsonObject) : TFhirTestReportTestAction;
begin
  result := TFhirTestReportTestAction.create;
  try
    ParseTestReportTestActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportTestActionProperties(jsn : TJsonObject; result : TFhirTestReportTestAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('operation') then
        result.operation := ParseTestReportSetupActionOperation(jsn.vObj['operation']);{q3}
    if jsn.has('assert') then
        result.assert := ParseTestReportSetupActionAssert(jsn.vObj['assert']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestReportTestAction(json : TJSONWriter; name : string; elem : TFhirTestReportTestAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionOperation(json, 'operation', elem.operation); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionAssert(json, 'assert', elem.assert); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportTeardown(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportTeardown(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportTeardown(jsn : TJsonObject) : TFhirTestReportTeardown;
begin
  result := TFhirTestReportTeardown.create;
  try
    ParseTestReportTeardownProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportTeardownProperties(jsn : TJsonObject; result : TFhirTestReportTeardown);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseTestReportTeardownAction);
end;

procedure TFHIRJsonComposer.ComposeTestReportTeardown(json : TJSONWriter; name : string; elem : TFhirTestReportTeardown; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeTestReportTeardownAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReportTeardownAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReportTeardownAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReportTeardownAction(jsn : TJsonObject) : TFhirTestReportTeardownAction;
begin
  result := TFhirTestReportTeardownAction.create;
  try
    ParseTestReportTeardownActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportTeardownActionProperties(jsn : TJsonObject; result : TFhirTestReportTeardownAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('operation') then
        result.operation := ParseTestReportSetupActionOperation(jsn.vObj['operation']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestReportTeardownAction(json : TJSONWriter; name : string; elem : TFhirTestReportTeardownAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeTestReportSetupActionOperation(json, 'operation', elem.operation); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestReport(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestReport(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestReport(jsn : TJsonObject) : TFhirTestReport;
begin
  result := TFhirTestReport.create;
  try
    ParseTestReportProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestReportProperties(jsn : TJsonObject; result : TFhirTestReport);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirReportStatusCodesEnum, SYSTEMS_TFhirReportStatusCodesEnum);
    if jsn.has('testScript') then
        result.testScript := ParseReference{TFhirTestScript}(jsn.vObj['testScript']);{q3}
    if jsn.has('result') or jsn.has('_result')  then
      result.resultElement := parseEnum(jsn.path+'/result', jsn.node['result'], jsn.vObj['_result'], CODES_TFhirReportResultCodesEnum, SYSTEMS_TFhirReportResultCodesEnum);
    if jsn.has('score') or jsn.has('_score') then
        result.scoreElement := parseDecimal(jsn.node['score'], jsn.vObj['_score']);{q}
    if jsn.has('tester') or jsn.has('_tester') then
        result.testerElement := parseString(jsn.node['tester'], jsn.vObj['_tester']);{q}
    if jsn.has('issued') or jsn.has('_issued') then
        result.issuedElement := parseDateTime(jsn.node['issued'], jsn.vObj['_issued']);{q}
    if jsn.has('participant') then
      iterateArray(jsn.vArr['participant'], result.participantList, parseTestReportParticipant);
    if jsn.has('setup') then
        result.setup := ParseTestReportSetup(jsn.vObj['setup']);{q3}
    if jsn.has('test') then
      iterateArray(jsn.vArr['test'], result.testList, parseTestReportTest);
    if jsn.has('teardown') then
        result.teardown := ParseTestReportTeardown(jsn.vObj['teardown']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestReport(json : TJSONWriter; name : string; elem : TFhirTestReport; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirReportStatusCodesEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirReportStatusCodesEnum, false);
  ComposeReference{TFhirTestScript}(json, 'testScript', elem.testScript); {a}
  ComposeEnumValue(json, 'result', elem.ResultElement, CODES_TFhirReportResultCodesEnum, false);
  ComposeEnumProps(json, 'result', elem.ResultElement, CODES_TFhirReportResultCodesEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('score') then
    ComposeDecimalValue(json, 'score', elem.scoreElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('score') then
    ComposeDecimalProps(json, 'score', elem.scoreElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('tester') then
    ComposeStringValue(json, 'tester', elem.testerElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('tester') then
    ComposeStringProps(json, 'tester', elem.testerElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('issued') then
    ComposeDateTimeValue(json, 'issued', elem.issuedElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('issued') then
    ComposeDateTimeProps(json, 'issued', elem.issuedElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('participant') and (elem.participantList.Count > 0) then
  begin
    json.valueArray('participant');
    for i := 0 to elem.participantList.Count - 1 do
      ComposeTestReportParticipant(json, '', elem.participantList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('setup') then
    ComposeTestReportSetup(json, 'setup', elem.setup); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('test') and (elem.testList.Count > 0) then
  begin
    json.valueArray('test');
    for i := 0 to elem.testList.Count - 1 do
      ComposeTestReportTest(json, '', elem.testList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('teardown') then
    ComposeTestReportTeardown(json, 'teardown', elem.teardown); {a}
end;

{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
procedure TFHIRJsonParser.ParseTestScriptOrigin(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptOrigin(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptOrigin(jsn : TJsonObject) : TFhirTestScriptOrigin;
begin
  result := TFhirTestScriptOrigin.create;
  try
    ParseTestScriptOriginProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptOriginProperties(jsn : TJsonObject; result : TFhirTestScriptOrigin);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('index') or jsn.has('_index') then
        result.indexElement := parseInteger(jsn.node['index'], jsn.vObj['_index']);{q}
    if jsn.has('profile') then
        result.profile := ParseCoding(jsn.vObj['profile']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScriptOrigin(json : TJSONWriter; name : string; elem : TFhirTestScriptOrigin; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIntegerValue(json, 'index', elem.indexElement, false);
  ComposeIntegerProps(json, 'index', elem.indexElement, false);
  ComposeCoding(json, 'profile', elem.profile); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptDestination(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptDestination(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptDestination(jsn : TJsonObject) : TFhirTestScriptDestination;
begin
  result := TFhirTestScriptDestination.create;
  try
    ParseTestScriptDestinationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptDestinationProperties(jsn : TJsonObject; result : TFhirTestScriptDestination);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('index') or jsn.has('_index') then
        result.indexElement := parseInteger(jsn.node['index'], jsn.vObj['_index']);{q}
    if jsn.has('profile') then
        result.profile := ParseCoding(jsn.vObj['profile']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScriptDestination(json : TJSONWriter; name : string; elem : TFhirTestScriptDestination; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIntegerValue(json, 'index', elem.indexElement, false);
  ComposeIntegerProps(json, 'index', elem.indexElement, false);
  ComposeCoding(json, 'profile', elem.profile); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadata(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptMetadata(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptMetadata(jsn : TJsonObject) : TFhirTestScriptMetadata;
begin
  result := TFhirTestScriptMetadata.create;
  try
    ParseTestScriptMetadataProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataProperties(jsn : TJsonObject; result : TFhirTestScriptMetadata);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('link') then
      iterateArray(jsn.vArr['link'], result.link_List, parseTestScriptMetadataLink);
    if jsn.has('capability') then
      iterateArray(jsn.vArr['capability'], result.capabilityList, parseTestScriptMetadataCapability);
end;

procedure TFHIRJsonComposer.ComposeTestScriptMetadata(json : TJSONWriter; name : string; elem : TFhirTestScriptMetadata; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (elem.link_List.Count > 0) then
  begin
    json.valueArray('link');
    for i := 0 to elem.link_List.Count - 1 do
      ComposeTestScriptMetadataLink(json, '', elem.link_List[i]); {z - }
    json.FinishArray;
  end;
  if (elem.capabilityList.Count > 0) then
  begin
    json.valueArray('capability');
    for i := 0 to elem.capabilityList.Count - 1 do
      ComposeTestScriptMetadataCapability(json, '', elem.capabilityList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataLink(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptMetadataLink(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptMetadataLink(jsn : TJsonObject) : TFhirTestScriptMetadataLink;
begin
  result := TFhirTestScriptMetadataLink.create;
  try
    ParseTestScriptMetadataLinkProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataLinkProperties(jsn : TJsonObject; result : TFhirTestScriptMetadataLink);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptMetadataLink(json : TJSONWriter; name : string; elem : TFhirTestScriptMetadataLink; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeUriValue(json, 'url', elem.urlElement, false);
  ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataCapability(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptMetadataCapability(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptMetadataCapability(jsn : TJsonObject) : TFhirTestScriptMetadataCapability;
begin
  result := TFhirTestScriptMetadataCapability.create;
  try
    ParseTestScriptMetadataCapabilityProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptMetadataCapabilityProperties(jsn : TJsonObject; result : TFhirTestScriptMetadataCapability);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('required') or jsn.has('_required') then
        result.requiredElement := parseBoolean(jsn.node['required'], jsn.vObj['_required']);{q}
    if jsn.has('validated') or jsn.has('_validated') then
        result.validatedElement := parseBoolean(jsn.node['validated'], jsn.vObj['_validated']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
      if jsn.has('origin') or jsn.has('_origin') then
      iteratePrimitiveArray(jsn.vArr['origin'], jsn.vArr['_origin'], result.originList, parseInteger);
    if jsn.has('destination') or jsn.has('_destination') then
        result.destinationElement := parseInteger(jsn.node['destination'], jsn.vObj['_destination']);{q}
      if jsn.has('link') or jsn.has('_link') then
      iteratePrimitiveArray(jsn.vArr['link'], jsn.vArr['_link'], result.link_List, parseUri);
    if jsn.has('capabilities') then
        result.capabilities := ParseReference{TFhirCapabilityStatement}(jsn.vObj['capabilities']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScriptMetadataCapability(json : TJSONWriter; name : string; elem : TFhirTestScriptMetadataCapability; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.required <> false)) then
    ComposeBooleanValue(json, 'required', elem.requiredElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.required <> false)) then
    ComposeBooleanProps(json, 'required', elem.requiredElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.validated <> false)) then
    ComposeBooleanValue(json, 'validated', elem.validatedElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.validated <> false)) then
    ComposeBooleanProps(json, 'validated', elem.validatedElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.originList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.originList.Count - 1 do
    begin
      ext := ext or ((elem.originList[i].id <> '') or (elem.originList[i].hasExtensionList) {no-comments or (elem.originList[i].hasComments)});
      val := val or (elem.originList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('origin');
      for i := 0 to elem.originList.Count - 1 do
        ComposeIntegerValue(json, '',elem.originList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_origin');
      for i := 0 to elem.originList.Count - 1 do
        ComposeIntegerProps(json, '',elem.originList[i], true);
      json.FinishArray;
    end;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'destination', elem.destinationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'destination', elem.destinationElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.link_List.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.link_List.Count - 1 do
    begin
      ext := ext or ((elem.link_List[i].id <> '') or (elem.link_List[i].hasExtensionList) {no-comments or (elem.link_List[i].hasComments)});
      val := val or (elem.link_List[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('link');
      for i := 0 to elem.link_List.Count - 1 do
        ComposeUriValue(json, '',elem.link_List[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_link');
      for i := 0 to elem.link_List.Count - 1 do
        ComposeUriProps(json, '',elem.link_List[i], true);
      json.FinishArray;
    end;
  end;
  ComposeReference{TFhirCapabilityStatement}(json, 'capabilities', elem.capabilities); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptFixture(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptFixture(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptFixture(jsn : TJsonObject) : TFhirTestScriptFixture;
begin
  result := TFhirTestScriptFixture.create;
  try
    ParseTestScriptFixtureProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptFixtureProperties(jsn : TJsonObject; result : TFhirTestScriptFixture);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('autocreate') or jsn.has('_autocreate') then
        result.autocreateElement := parseBoolean(jsn.node['autocreate'], jsn.vObj['_autocreate']);{q}
    if jsn.has('autodelete') or jsn.has('_autodelete') then
        result.autodeleteElement := parseBoolean(jsn.node['autodelete'], jsn.vObj['_autodelete']);{q}
    if jsn.has('resource') then
        result.resource := ParseReference{TFhirReference}(jsn.vObj['resource']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScriptFixture(json : TJSONWriter; name : string; elem : TFhirTestScriptFixture; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.autocreate <> false)) then
    ComposeBooleanValue(json, 'autocreate', elem.autocreateElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.autocreate <> false)) then
    ComposeBooleanProps(json, 'autocreate', elem.autocreateElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.autodelete <> false)) then
    ComposeBooleanValue(json, 'autodelete', elem.autodeleteElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.autodelete <> false)) then
    ComposeBooleanProps(json, 'autodelete', elem.autodeleteElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(json, 'resource', elem.resource); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptVariable(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptVariable(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptVariable(jsn : TJsonObject) : TFhirTestScriptVariable;
begin
  result := TFhirTestScriptVariable.create;
  try
    ParseTestScriptVariableProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptVariableProperties(jsn : TJsonObject; result : TFhirTestScriptVariable);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('defaultValue') or jsn.has('_defaultValue') then
        result.defaultValueElement := parseString(jsn.node['defaultValue'], jsn.vObj['_defaultValue']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);{q}
    if jsn.has('headerField') or jsn.has('_headerField') then
        result.headerFieldElement := parseString(jsn.node['headerField'], jsn.vObj['_headerField']);{q}
    if jsn.has('hint') or jsn.has('_hint') then
        result.hintElement := parseString(jsn.node['hint'], jsn.vObj['_hint']);{q}
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);{q}
    if jsn.has('sourceId') or jsn.has('_sourceId') then
        result.sourceIdElement := parseId(jsn.node['sourceId'], jsn.vObj['_sourceId']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptVariable(json : TJSONWriter; name : string; elem : TFhirTestScriptVariable; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'defaultValue', elem.defaultValueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'defaultValue', elem.defaultValueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'headerField', elem.headerFieldElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'headerField', elem.headerFieldElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'hint', elem.hintElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'hint', elem.hintElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'sourceId', elem.sourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'sourceId', elem.sourceIdElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptRule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptRule(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptRule(jsn : TJsonObject) : TFhirTestScriptRule;
begin
  result := TFhirTestScriptRule.create;
  try
    ParseTestScriptRuleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptRuleProperties(jsn : TJsonObject; result : TFhirTestScriptRule);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('resource') then
        result.resource := ParseReference{TFhirReference}(jsn.vObj['resource']);{q3}
    if jsn.has('param') then
      iterateArray(jsn.vArr['param'], result.paramList, parseTestScriptRuleParam);
end;

procedure TFHIRJsonComposer.ComposeTestScriptRule(json : TJSONWriter; name : string; elem : TFhirTestScriptRule; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{TFhirReference}(json, 'resource', elem.resource); {a}
  if (SummaryOption in [soFull, soData]) and (elem.paramList.Count > 0) then
  begin
    json.valueArray('param');
    for i := 0 to elem.paramList.Count - 1 do
      ComposeTestScriptRuleParam(json, '', elem.paramList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptRuleParam(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptRuleParam(jsn : TJsonObject) : TFhirTestScriptRuleParam;
begin
  result := TFhirTestScriptRuleParam.create;
  try
    ParseTestScriptRuleParamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptRuleParam);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptRuleParam; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptRuleset(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptRuleset(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptRuleset(jsn : TJsonObject) : TFhirTestScriptRuleset;
begin
  result := TFhirTestScriptRuleset.create;
  try
    ParseTestScriptRulesetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptRulesetProperties(jsn : TJsonObject; result : TFhirTestScriptRuleset);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('resource') then
        result.resource := ParseReference{TFhirReference}(jsn.vObj['resource']);{q3}
    if jsn.has('rule') then
      iterateArray(jsn.vArr['rule'], result.ruleList, parseTestScriptRulesetRule);
end;

procedure TFHIRJsonComposer.ComposeTestScriptRuleset(json : TJSONWriter; name : string; elem : TFhirTestScriptRuleset; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeReference{TFhirReference}(json, 'resource', elem.resource); {a}
  if (elem.ruleList.Count > 0) then
  begin
    json.valueArray('rule');
    for i := 0 to elem.ruleList.Count - 1 do
      ComposeTestScriptRulesetRule(json, '', elem.ruleList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptRulesetRule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptRulesetRule(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptRulesetRule(jsn : TJsonObject) : TFhirTestScriptRulesetRule;
begin
  result := TFhirTestScriptRulesetRule.create;
  try
    ParseTestScriptRulesetRuleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptRulesetRuleProperties(jsn : TJsonObject; result : TFhirTestScriptRulesetRule);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('ruleId') or jsn.has('_ruleId') then
        result.ruleIdElement := parseId(jsn.node['ruleId'], jsn.vObj['_ruleId']);{q}
    if jsn.has('param') then
      iterateArray(jsn.vArr['param'], result.paramList, parseTestScriptRulesetRuleParam);
end;

procedure TFHIRJsonComposer.ComposeTestScriptRulesetRule(json : TJSONWriter; name : string; elem : TFhirTestScriptRulesetRule; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdValue(json, 'ruleId', elem.ruleIdElement, false);
  ComposeIdProps(json, 'ruleId', elem.ruleIdElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.paramList.Count > 0) then
  begin
    json.valueArray('param');
    for i := 0 to elem.paramList.Count - 1 do
      ComposeTestScriptRulesetRuleParam(json, '', elem.paramList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptRulesetRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptRulesetRuleParam(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptRulesetRuleParam(jsn : TJsonObject) : TFhirTestScriptRulesetRuleParam;
begin
  result := TFhirTestScriptRulesetRuleParam.create;
  try
    ParseTestScriptRulesetRuleParamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptRulesetRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptRulesetRuleParam);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptRulesetRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptRulesetRuleParam; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetup(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetup(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetup(jsn : TJsonObject) : TFhirTestScriptSetup;
begin
  result := TFhirTestScriptSetup.create;
  try
    ParseTestScriptSetupProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupProperties(jsn : TJsonObject; result : TFhirTestScriptSetup);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseTestScriptSetupAction);
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetup(json : TJSONWriter; name : string; elem : TFhirTestScriptSetup; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeTestScriptSetupAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupAction(jsn : TJsonObject) : TFhirTestScriptSetupAction;
begin
  result := TFhirTestScriptSetupAction.create;
  try
    ParseTestScriptSetupActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionProperties(jsn : TJsonObject; result : TFhirTestScriptSetupAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('operation') then
        result.operation := ParseTestScriptSetupActionOperation(jsn.vObj['operation']);{q3}
    if jsn.has('assert') then
        result.assert := ParseTestScriptSetupActionAssert(jsn.vObj['assert']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupAction(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionOperation(json, 'operation', elem.operation); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionAssert(json, 'assert', elem.assert); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionOperation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionOperation(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionOperation(jsn : TJsonObject) : TFhirTestScriptSetupActionOperation;
begin
  result := TFhirTestScriptSetupActionOperation.create;
  try
    ParseTestScriptSetupActionOperationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionOperationProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionOperation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('type') then
        result.type_ := ParseCoding(jsn.vObj['type']);{q3}
    if jsn.has('resource') or jsn.has('_resource') then
        result.resourceElement := parseCode(jsn.node['resource'], jsn.vObj['_resource']);{q}
    if jsn.has('label') or jsn.has('_label') then
        result.label_Element := parseString(jsn.node['label'], jsn.vObj['_label']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('accept') or jsn.has('_accept')  then
      result.acceptElement := parseEnum(jsn.path+'/accept', jsn.node['accept'], jsn.vObj['_accept'], CODES_TFhirContentTypeEnum, SYSTEMS_TFhirContentTypeEnum);
    if jsn.has('contentType') or jsn.has('_contentType')  then
      result.contentTypeElement := parseEnum(jsn.path+'/contentType', jsn.node['contentType'], jsn.vObj['_contentType'], CODES_TFhirContentTypeEnum, SYSTEMS_TFhirContentTypeEnum);
    if jsn.has('destination') or jsn.has('_destination') then
        result.destinationElement := parseInteger(jsn.node['destination'], jsn.vObj['_destination']);{q}
    if jsn.has('encodeRequestUrl') or jsn.has('_encodeRequestUrl') then
        result.encodeRequestUrlElement := parseBoolean(jsn.node['encodeRequestUrl'], jsn.vObj['_encodeRequestUrl']);{q}
    if jsn.has('origin') or jsn.has('_origin') then
        result.originElement := parseInteger(jsn.node['origin'], jsn.vObj['_origin']);{q}
    if jsn.has('params') or jsn.has('_params') then
        result.paramsElement := parseString(jsn.node['params'], jsn.vObj['_params']);{q}
    if jsn.has('requestHeader') then
      iterateArray(jsn.vArr['requestHeader'], result.requestHeaderList, parseTestScriptSetupActionOperationRequestHeader);
    if jsn.has('requestId') or jsn.has('_requestId') then
        result.requestIdElement := parseId(jsn.node['requestId'], jsn.vObj['_requestId']);{q}
    if jsn.has('responseId') or jsn.has('_responseId') then
        result.responseIdElement := parseId(jsn.node['responseId'], jsn.vObj['_responseId']);{q}
    if jsn.has('sourceId') or jsn.has('_sourceId') then
        result.sourceIdElement := parseId(jsn.node['sourceId'], jsn.vObj['_sourceId']);{q}
    if jsn.has('targetId') or jsn.has('_targetId') then
        result.targetIdElement := parseId(jsn.node['targetId'], jsn.vObj['_targetId']);{q}
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseString(jsn.node['url'], jsn.vObj['_url']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionOperation(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionOperation; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'type', elem.type_); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'resource', elem.resourceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'resource', elem.resourceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'label', elem.label_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'label', elem.label_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'accept', elem.AcceptElement, CODES_TFhirContentTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'accept', elem.AcceptElement, CODES_TFhirContentTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'contentType', elem.ContentTypeElement, CODES_TFhirContentTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'contentType', elem.ContentTypeElement, CODES_TFhirContentTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'destination', elem.destinationElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'destination', elem.destinationElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.encodeRequestUrl <> true)) then
    ComposeBooleanValue(json, 'encodeRequestUrl', elem.encodeRequestUrlElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.encodeRequestUrl <> true)) then
    ComposeBooleanProps(json, 'encodeRequestUrl', elem.encodeRequestUrlElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'origin', elem.originElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'origin', elem.originElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'params', elem.paramsElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'params', elem.paramsElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.requestHeaderList.Count > 0) then
  begin
    json.valueArray('requestHeader');
    for i := 0 to elem.requestHeaderList.Count - 1 do
      ComposeTestScriptSetupActionOperationRequestHeader(json, '', elem.requestHeaderList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'requestId', elem.requestIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'requestId', elem.requestIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'responseId', elem.responseIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'responseId', elem.responseIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'sourceId', elem.sourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'sourceId', elem.sourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'targetId', elem.targetIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'targetId', elem.targetIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'url', elem.urlElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionOperationRequestHeader(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionOperationRequestHeader(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionOperationRequestHeader(jsn : TJsonObject) : TFhirTestScriptSetupActionOperationRequestHeader;
begin
  result := TFhirTestScriptSetupActionOperationRequestHeader.create;
  try
    ParseTestScriptSetupActionOperationRequestHeaderProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionOperationRequestHeaderProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionOperationRequestHeader);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('field') or jsn.has('_field') then
        result.fieldElement := parseString(jsn.node['field'], jsn.vObj['_field']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionOperationRequestHeader(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionOperationRequestHeader; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'field', elem.fieldElement, false);
  ComposeStringProps(json, 'field', elem.fieldElement, false);
  ComposeStringValue(json, 'value', elem.valueElement, false);
  ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssert(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionAssert(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionAssert(jsn : TJsonObject) : TFhirTestScriptSetupActionAssert;
begin
  result := TFhirTestScriptSetupActionAssert.create;
  try
    ParseTestScriptSetupActionAssertProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssert);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('label') or jsn.has('_label') then
        result.label_Element := parseString(jsn.node['label'], jsn.vObj['_label']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('direction') or jsn.has('_direction')  then
      result.directionElement := parseEnum(jsn.path+'/direction', jsn.node['direction'], jsn.vObj['_direction'], CODES_TFhirAssertDirectionCodesEnum, SYSTEMS_TFhirAssertDirectionCodesEnum);
    if jsn.has('compareToSourceId') or jsn.has('_compareToSourceId') then
        result.compareToSourceIdElement := parseString(jsn.node['compareToSourceId'], jsn.vObj['_compareToSourceId']);{q}
    if jsn.has('compareToSourceExpression') or jsn.has('_compareToSourceExpression') then
        result.compareToSourceExpressionElement := parseString(jsn.node['compareToSourceExpression'], jsn.vObj['_compareToSourceExpression']);{q}
    if jsn.has('compareToSourcePath') or jsn.has('_compareToSourcePath') then
        result.compareToSourcePathElement := parseString(jsn.node['compareToSourcePath'], jsn.vObj['_compareToSourcePath']);{q}
    if jsn.has('contentType') or jsn.has('_contentType')  then
      result.contentTypeElement := parseEnum(jsn.path+'/contentType', jsn.node['contentType'], jsn.vObj['_contentType'], CODES_TFhirContentTypeEnum, SYSTEMS_TFhirContentTypeEnum);
    if jsn.has('expression') or jsn.has('_expression') then
        result.expressionElement := parseString(jsn.node['expression'], jsn.vObj['_expression']);{q}
    if jsn.has('headerField') or jsn.has('_headerField') then
        result.headerFieldElement := parseString(jsn.node['headerField'], jsn.vObj['_headerField']);{q}
    if jsn.has('minimumId') or jsn.has('_minimumId') then
        result.minimumIdElement := parseString(jsn.node['minimumId'], jsn.vObj['_minimumId']);{q}
    if jsn.has('navigationLinks') or jsn.has('_navigationLinks') then
        result.navigationLinksElement := parseBoolean(jsn.node['navigationLinks'], jsn.vObj['_navigationLinks']);{q}
    if jsn.has('operator') or jsn.has('_operator')  then
      result.operatorElement := parseEnum(jsn.path+'/operator', jsn.node['operator'], jsn.vObj['_operator'], CODES_TFhirAssertOperatorCodesEnum, SYSTEMS_TFhirAssertOperatorCodesEnum);
    if jsn.has('path') or jsn.has('_path') then
        result.pathElement := parseString(jsn.node['path'], jsn.vObj['_path']);{q}
    if jsn.has('requestMethod') or jsn.has('_requestMethod')  then
      result.requestMethodElement := parseEnum(jsn.path+'/requestMethod', jsn.node['requestMethod'], jsn.vObj['_requestMethod'], CODES_TFhirHttpOperationsEnum, SYSTEMS_TFhirHttpOperationsEnum);
    if jsn.has('requestURL') or jsn.has('_requestURL') then
        result.requestURLElement := parseString(jsn.node['requestURL'], jsn.vObj['_requestURL']);{q}
    if jsn.has('resource') or jsn.has('_resource') then
        result.resourceElement := parseCode(jsn.node['resource'], jsn.vObj['_resource']);{q}
    if jsn.has('response') or jsn.has('_response')  then
      result.responseElement := parseEnum(jsn.path+'/response', jsn.node['response'], jsn.vObj['_response'], CODES_TFhirAssertResponseCodeTypesEnum, SYSTEMS_TFhirAssertResponseCodeTypesEnum);
    if jsn.has('responseCode') or jsn.has('_responseCode') then
        result.responseCodeElement := parseString(jsn.node['responseCode'], jsn.vObj['_responseCode']);{q}
    if jsn.has('rule') then
        result.rule := ParseTestScriptSetupActionAssertRule(jsn.vObj['rule']);{q3}
    if jsn.has('ruleset') then
        result.ruleset := ParseTestScriptSetupActionAssertRuleset(jsn.vObj['ruleset']);{q3}
    if jsn.has('sourceId') or jsn.has('_sourceId') then
        result.sourceIdElement := parseId(jsn.node['sourceId'], jsn.vObj['_sourceId']);{q}
    if jsn.has('validateProfileId') or jsn.has('_validateProfileId') then
        result.validateProfileIdElement := parseId(jsn.node['validateProfileId'], jsn.vObj['_validateProfileId']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);{q}
    if jsn.has('warningOnly') or jsn.has('_warningOnly') then
        result.warningOnlyElement := parseBoolean(jsn.node['warningOnly'], jsn.vObj['_warningOnly']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionAssert(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssert; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'label', elem.label_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'label', elem.label_Element, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'direction', elem.DirectionElement, CODES_TFhirAssertDirectionCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'direction', elem.DirectionElement, CODES_TFhirAssertDirectionCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'compareToSourceId', elem.compareToSourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'compareToSourceId', elem.compareToSourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'compareToSourceExpression', elem.compareToSourceExpressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'compareToSourceExpression', elem.compareToSourceExpressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'compareToSourcePath', elem.compareToSourcePathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'compareToSourcePath', elem.compareToSourcePathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'contentType', elem.ContentTypeElement, CODES_TFhirContentTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'contentType', elem.ContentTypeElement, CODES_TFhirContentTypeEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'expression', elem.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'expression', elem.expressionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'headerField', elem.headerFieldElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'headerField', elem.headerFieldElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'minimumId', elem.minimumIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'minimumId', elem.minimumIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanValue(json, 'navigationLinks', elem.navigationLinksElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeBooleanProps(json, 'navigationLinks', elem.navigationLinksElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'operator', elem.OperatorElement, CODES_TFhirAssertOperatorCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'operator', elem.OperatorElement, CODES_TFhirAssertOperatorCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'path', elem.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'path', elem.pathElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'requestMethod', elem.RequestMethodElement, CODES_TFhirHttpOperationsEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'requestMethod', elem.RequestMethodElement, CODES_TFhirHttpOperationsEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'requestURL', elem.requestURLElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'requestURL', elem.requestURLElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'resource', elem.resourceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'resource', elem.resourceElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'response', elem.ResponseElement, CODES_TFhirAssertResponseCodeTypesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'response', elem.ResponseElement, CODES_TFhirAssertResponseCodeTypesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'responseCode', elem.responseCodeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'responseCode', elem.responseCodeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionAssertRule(json, 'rule', elem.rule); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionAssertRuleset(json, 'ruleset', elem.ruleset); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'sourceId', elem.sourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'sourceId', elem.sourceIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdValue(json, 'validateProfileId', elem.validateProfileIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdProps(json, 'validateProfileId', elem.validateProfileIdElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'value', elem.valueElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'value', elem.valueElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.warningOnly <> false)) then
    ComposeBooleanValue(json, 'warningOnly', elem.warningOnlyElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.warningOnly <> false)) then
    ComposeBooleanProps(json, 'warningOnly', elem.warningOnlyElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionAssertRule(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionAssertRule(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRule;
begin
  result := TFhirTestScriptSetupActionAssertRule.create;
  try
    ParseTestScriptSetupActionAssertRuleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRuleProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRule);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('ruleId') or jsn.has('_ruleId') then
        result.ruleIdElement := parseId(jsn.node['ruleId'], jsn.vObj['_ruleId']);{q}
    if jsn.has('param') then
      iterateArray(jsn.vArr['param'], result.paramList, parseTestScriptSetupActionAssertRuleParam);
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionAssertRule(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRule; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdValue(json, 'ruleId', elem.ruleIdElement, false);
  ComposeIdProps(json, 'ruleId', elem.ruleIdElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.paramList.Count > 0) then
  begin
    json.valueArray('param');
    for i := 0 to elem.paramList.Count - 1 do
      ComposeTestScriptSetupActionAssertRuleParam(json, '', elem.paramList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionAssertRuleParam(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionAssertRuleParam(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRuleParam;
begin
  result := TFhirTestScriptSetupActionAssertRuleParam.create;
  try
    ParseTestScriptSetupActionAssertRuleParamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRuleParam);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionAssertRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRuleParam; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  ComposeStringValue(json, 'value', elem.valueElement, false);
  ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRuleset(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionAssertRuleset(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionAssertRuleset(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRuleset;
begin
  result := TFhirTestScriptSetupActionAssertRuleset.create;
  try
    ParseTestScriptSetupActionAssertRulesetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRulesetProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRuleset);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('rulesetId') or jsn.has('_rulesetId') then
        result.rulesetIdElement := parseId(jsn.node['rulesetId'], jsn.vObj['_rulesetId']);{q}
    if jsn.has('rule') then
      iterateArray(jsn.vArr['rule'], result.ruleList, parseTestScriptSetupActionAssertRulesetRule);
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionAssertRuleset(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRuleset; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdValue(json, 'rulesetId', elem.rulesetIdElement, false);
  ComposeIdProps(json, 'rulesetId', elem.rulesetIdElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.ruleList.Count > 0) then
  begin
    json.valueArray('rule');
    for i := 0 to elem.ruleList.Count - 1 do
      ComposeTestScriptSetupActionAssertRulesetRule(json, '', elem.ruleList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRulesetRule(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionAssertRulesetRule(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionAssertRulesetRule(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRulesetRule;
begin
  result := TFhirTestScriptSetupActionAssertRulesetRule.create;
  try
    ParseTestScriptSetupActionAssertRulesetRuleProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRulesetRuleProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRulesetRule);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('ruleId') or jsn.has('_ruleId') then
        result.ruleIdElement := parseId(jsn.node['ruleId'], jsn.vObj['_ruleId']);{q}
    if jsn.has('param') then
      iterateArray(jsn.vArr['param'], result.paramList, parseTestScriptSetupActionAssertRulesetRuleParam);
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionAssertRulesetRule(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRulesetRule; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeIdValue(json, 'ruleId', elem.ruleIdElement, false);
  ComposeIdProps(json, 'ruleId', elem.ruleIdElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.paramList.Count > 0) then
  begin
    json.valueArray('param');
    for i := 0 to elem.paramList.Count - 1 do
      ComposeTestScriptSetupActionAssertRulesetRuleParam(json, '', elem.paramList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRulesetRuleParam(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptSetupActionAssertRulesetRuleParam(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptSetupActionAssertRulesetRuleParam(jsn : TJsonObject) : TFhirTestScriptSetupActionAssertRulesetRuleParam;
begin
  result := TFhirTestScriptSetupActionAssertRulesetRuleParam.create;
  try
    ParseTestScriptSetupActionAssertRulesetRuleParamProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptSetupActionAssertRulesetRuleParamProperties(jsn : TJsonObject; result : TFhirTestScriptSetupActionAssertRulesetRuleParam);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeTestScriptSetupActionAssertRulesetRuleParam(json : TJSONWriter; name : string; elem : TFhirTestScriptSetupActionAssertRulesetRuleParam; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  ComposeStringValue(json, 'value', elem.valueElement, false);
  ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptTest(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptTest(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptTest(jsn : TJsonObject) : TFhirTestScriptTest;
begin
  result := TFhirTestScriptTest.create;
  try
    ParseTestScriptTestProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptTestProperties(jsn : TJsonObject; result : TFhirTestScriptTest);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseString(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseTestScriptTestAction);
end;

procedure TFHIRJsonComposer.ComposeTestScriptTest(json : TJSONWriter; name : string; elem : TFhirTestScriptTest; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'description', elem.descriptionElement, false);
  if (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeTestScriptTestAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptTestAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptTestAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptTestAction(jsn : TJsonObject) : TFhirTestScriptTestAction;
begin
  result := TFhirTestScriptTestAction.create;
  try
    ParseTestScriptTestActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptTestActionProperties(jsn : TJsonObject; result : TFhirTestScriptTestAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('operation') then
        result.operation := ParseTestScriptSetupActionOperation(jsn.vObj['operation']);{q3}
    if jsn.has('assert') then
        result.assert := ParseTestScriptSetupActionAssert(jsn.vObj['assert']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScriptTestAction(json : TJSONWriter; name : string; elem : TFhirTestScriptTestAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionOperation(json, 'operation', elem.operation); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionAssert(json, 'assert', elem.assert); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptTeardown(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptTeardown(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptTeardown(jsn : TJsonObject) : TFhirTestScriptTeardown;
begin
  result := TFhirTestScriptTeardown.create;
  try
    ParseTestScriptTeardownProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptTeardownProperties(jsn : TJsonObject; result : TFhirTestScriptTeardown);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('action') then
      iterateArray(jsn.vArr['action'], result.actionList, parseTestScriptTeardownAction);
end;

procedure TFHIRJsonComposer.ComposeTestScriptTeardown(json : TJSONWriter; name : string; elem : TFhirTestScriptTeardown; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (elem.actionList.Count > 0) then
  begin
    json.valueArray('action');
    for i := 0 to elem.actionList.Count - 1 do
      ComposeTestScriptTeardownAction(json, '', elem.actionList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScriptTeardownAction(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScriptTeardownAction(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScriptTeardownAction(jsn : TJsonObject) : TFhirTestScriptTeardownAction;
begin
  result := TFhirTestScriptTeardownAction.create;
  try
    ParseTestScriptTeardownActionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptTeardownActionProperties(jsn : TJsonObject; result : TFhirTestScriptTeardownAction);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('operation') then
        result.operation := ParseTestScriptSetupActionOperation(jsn.vObj['operation']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScriptTeardownAction(json : TJSONWriter; name : string; elem : TFhirTestScriptTeardownAction; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeTestScriptSetupActionOperation(json, 'operation', elem.operation); {a}
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseTestScript(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseTestScript(jsn)); {2}
end;

function TFHIRJsonParser.ParseTestScript(jsn : TJsonObject) : TFhirTestScript;
begin
  result := TFhirTestScript.create;
  try
    ParseTestScriptProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseTestScriptProperties(jsn : TJsonObject; result : TFhirTestScript);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
        result.identifier := ParseIdentifier(jsn.vObj['identifier']);{q3}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('origin') then
      iterateArray(jsn.vArr['origin'], result.originList, parseTestScriptOrigin);
    if jsn.has('destination') then
      iterateArray(jsn.vArr['destination'], result.destinationList, parseTestScriptDestination);
    if jsn.has('metadata') then
        result.metadata := ParseTestScriptMetadata(jsn.vObj['metadata']);{q3}
    if jsn.has('fixture') then
      iterateArray(jsn.vArr['fixture'], result.fixtureList, parseTestScriptFixture);
    if jsn.has('profile') then
      iterateArray(jsn.vArr['profile'], result.profileList, parseReference{TFhirReference});
    if jsn.has('variable') then
      iterateArray(jsn.vArr['variable'], result.variableList, parseTestScriptVariable);
    if jsn.has('rule') then
      iterateArray(jsn.vArr['rule'], result.ruleList, parseTestScriptRule);
    if jsn.has('ruleset') then
      iterateArray(jsn.vArr['ruleset'], result.rulesetList, parseTestScriptRuleset);
    if jsn.has('setup') then
        result.setup := ParseTestScriptSetup(jsn.vObj['setup']);{q3}
    if jsn.has('test') then
      iterateArray(jsn.vArr['test'], result.testList, parseTestScriptTest);
    if jsn.has('teardown') then
        result.teardown := ParseTestScriptTeardown(jsn.vObj['teardown']);{q3}
end;

procedure TFHIRJsonComposer.ComposeTestScript(json : TJSONWriter; name : string; elem : TFhirTestScript; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  ComposeUriValue(json, 'url', elem.urlElement, false);
  ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(json, 'identifier', elem.identifier); {a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('origin') and (elem.originList.Count > 0) then
  begin
    json.valueArray('origin');
    for i := 0 to elem.originList.Count - 1 do
      ComposeTestScriptOrigin(json, '', elem.originList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('destination') and (elem.destinationList.Count > 0) then
  begin
    json.valueArray('destination');
    for i := 0 to elem.destinationList.Count - 1 do
      ComposeTestScriptDestination(json, '', elem.destinationList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('metadata') then
    ComposeTestScriptMetadata(json, 'metadata', elem.metadata); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('fixture') and (elem.fixtureList.Count > 0) then
  begin
    json.valueArray('fixture');
    for i := 0 to elem.fixtureList.Count - 1 do
      ComposeTestScriptFixture(json, '', elem.fixtureList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('profile') and (elem.profileList.Count > 0) then
  begin
    json.valueArray('profile');
    for i := 0 to elem.profileList.Count - 1 do
      ComposeReference{TFhirReference}(json, '', elem.profileList[i]); {z - Reference(Any)}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('variable') and (elem.variableList.Count > 0) then
  begin
    json.valueArray('variable');
    for i := 0 to elem.variableList.Count - 1 do
      ComposeTestScriptVariable(json, '', elem.variableList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('rule') and (elem.ruleList.Count > 0) then
  begin
    json.valueArray('rule');
    for i := 0 to elem.ruleList.Count - 1 do
      ComposeTestScriptRule(json, '', elem.ruleList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('ruleset') and (elem.rulesetList.Count > 0) then
  begin
    json.valueArray('ruleset');
    for i := 0 to elem.rulesetList.Count - 1 do
      ComposeTestScriptRuleset(json, '', elem.rulesetList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('setup') then
    ComposeTestScriptSetup(json, 'setup', elem.setup); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('test') and (elem.testList.Count > 0) then
  begin
    json.valueArray('test');
    for i := 0 to elem.testList.Count - 1 do
      ComposeTestScriptTest(json, '', elem.testList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('teardown') then
    ComposeTestScriptTeardown(json, 'teardown', elem.teardown); {a}
end;

{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
procedure TFHIRJsonParser.ParseValueSetCompose(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetCompose(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetCompose(jsn : TJsonObject) : TFhirValueSetCompose;
begin
  result := TFhirValueSetCompose.create;
  try
    ParseValueSetComposeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeProperties(jsn : TJsonObject; result : TFhirValueSetCompose);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('lockedDate') or jsn.has('_lockedDate') then
        result.lockedDateElement := parseDate(jsn.node['lockedDate'], jsn.vObj['_lockedDate']);{q}
    if jsn.has('inactive') or jsn.has('_inactive') then
        result.inactiveElement := parseBoolean(jsn.node['inactive'], jsn.vObj['_inactive']);{q}
    if jsn.has('include') then
      iterateArray(jsn.vArr['include'], result.includeList, parseValueSetComposeInclude);
    if jsn.has('exclude') then
      iterateArray(jsn.vArr['exclude'], result.excludeList, parseValueSetComposeInclude);
end;

procedure TFHIRJsonComposer.ComposeValueSetCompose(json : TJSONWriter; name : string; elem : TFhirValueSetCompose; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateValue(json, 'lockedDate', elem.lockedDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateProps(json, 'lockedDate', elem.lockedDateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanValue(json, 'inactive', elem.inactiveElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBooleanProps(json, 'inactive', elem.inactiveElement, false);
  if (elem.includeList.Count > 0) then
  begin
    json.valueArray('include');
    for i := 0 to elem.includeList.Count - 1 do
      ComposeValueSetComposeInclude(json, '', elem.includeList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.excludeList.Count > 0) then
  begin
    json.valueArray('exclude');
    for i := 0 to elem.excludeList.Count - 1 do
      ComposeValueSetComposeInclude(json, '', elem.excludeList[i]); {z - @ValueSet.compose.include}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSetComposeInclude(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetComposeInclude(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetComposeInclude(jsn : TJsonObject) : TFhirValueSetComposeInclude;
begin
  result := TFhirValueSetComposeInclude.create;
  try
    ParseValueSetComposeIncludeProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeProperties(jsn : TJsonObject; result : TFhirValueSetComposeInclude);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := parseUri(jsn.node['system'], jsn.vObj['_system']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('concept') then
      iterateArray(jsn.vArr['concept'], result.conceptList, parseValueSetComposeIncludeConcept);
    if jsn.has('filter') then
      iterateArray(jsn.vArr['filter'], result.filterList, parseValueSetComposeIncludeFilter);
      if jsn.has('valueSet') or jsn.has('_valueSet') then
      iteratePrimitiveArray(jsn.vArr['valueSet'], jsn.vArr['_valueSet'], result.valueSetList, parseUri);
end;

procedure TFHIRJsonComposer.ComposeValueSetComposeInclude(json : TJSONWriter; name : string; elem : TFhirValueSetComposeInclude; noObj : boolean = false);
var
  i : integer;
  ext : boolean;
  val : boolean;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriValue(json, 'system', elem.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUriProps(json, 'system', elem.systemElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.conceptList.Count > 0) then
  begin
    json.valueArray('concept');
    for i := 0 to elem.conceptList.Count - 1 do
      ComposeValueSetComposeIncludeConcept(json, '', elem.conceptList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.filterList.Count > 0) then
  begin
    json.valueArray('filter');
    for i := 0 to elem.filterList.Count - 1 do
      ComposeValueSetComposeIncludeFilter(json, '', elem.filterList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.valueSetList.Count > 0) then
  begin
    ext := false;
    val := false;
    for i := 0 to elem.valueSetList.Count - 1 do
    begin
      ext := ext or ((elem.valueSetList[i].id <> '') or (elem.valueSetList[i].hasExtensionList) {no-comments or (elem.valueSetList[i].hasComments)});
      val := val or (elem.valueSetList[i].hasPrimitiveValue);
    end;
    if val then
    begin
      json.valueArray('valueSet');
      for i := 0 to elem.valueSetList.Count - 1 do
        ComposeUriValue(json, '',elem.valueSetList[i], true);
      json.FinishArray;
    end;
    if ext then
    begin
      json.valueArray('_valueSet');
      for i := 0 to elem.valueSetList.Count - 1 do
        ComposeUriProps(json, '',elem.valueSetList[i], true);
      json.FinishArray;
    end;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeConcept(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetComposeIncludeConcept(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetComposeIncludeConcept(jsn : TJsonObject) : TFhirValueSetComposeIncludeConcept;
begin
  result := TFhirValueSetComposeIncludeConcept.create;
  try
    ParseValueSetComposeIncludeConceptProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeConceptProperties(jsn : TJsonObject; result : TFhirValueSetComposeIncludeConcept);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);{q}
    if jsn.has('designation') then
      iterateArray(jsn.vArr['designation'], result.designationList, parseValueSetComposeIncludeConceptDesignation);
end;

procedure TFHIRJsonComposer.ComposeValueSetComposeIncludeConcept(json : TJSONWriter; name : string; elem : TFhirValueSetComposeIncludeConcept; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeValue(json, 'code', elem.codeElement, false);
  ComposeCodeProps(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.designationList.Count > 0) then
  begin
    json.valueArray('designation');
    for i := 0 to elem.designationList.Count - 1 do
      ComposeValueSetComposeIncludeConceptDesignation(json, '', elem.designationList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeConceptDesignation(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetComposeIncludeConceptDesignation(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetComposeIncludeConceptDesignation(jsn : TJsonObject) : TFhirValueSetComposeIncludeConceptDesignation;
begin
  result := TFhirValueSetComposeIncludeConceptDesignation.create;
  try
    ParseValueSetComposeIncludeConceptDesignationProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeConceptDesignationProperties(jsn : TJsonObject; result : TFhirValueSetComposeIncludeConceptDesignation);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('language') or jsn.has('_language') then
        result.languageElement := parseCode(jsn.node['language'], jsn.vObj['_language']);{q}
    if jsn.has('use') then
        result.use := ParseCoding(jsn.vObj['use']);{q3}
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseString(jsn.node['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeValueSetComposeIncludeConceptDesignation(json : TJSONWriter; name : string; elem : TFhirValueSetComposeIncludeConceptDesignation; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'language', elem.languageElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(json, 'use', elem.use); {a}
  ComposeStringValue(json, 'value', elem.valueElement, false);
  ComposeStringProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeFilter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetComposeIncludeFilter(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetComposeIncludeFilter(jsn : TJsonObject) : TFhirValueSetComposeIncludeFilter;
begin
  result := TFhirValueSetComposeIncludeFilter.create;
  try
    ParseValueSetComposeIncludeFilterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetComposeIncludeFilterProperties(jsn : TJsonObject; result : TFhirValueSetComposeIncludeFilter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('property') or jsn.has('_property') then
        result.property_Element := parseCode(jsn.node['property'], jsn.vObj['_property']);{q}
    if jsn.has('op') or jsn.has('_op')  then
      result.opElement := parseEnum(jsn.path+'/op', jsn.node['op'], jsn.vObj['_op'], CODES_TFhirFilterOperatorEnum, SYSTEMS_TFhirFilterOperatorEnum);
    if jsn.has('value') or jsn.has('_value') then
        result.valueElement := parseCode(jsn.node['value'], jsn.vObj['_value']);{q}
end;

procedure TFHIRJsonComposer.ComposeValueSetComposeIncludeFilter(json : TJSONWriter; name : string; elem : TFhirValueSetComposeIncludeFilter; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeCodeValue(json, 'property', elem.property_Element, false);
  ComposeCodeProps(json, 'property', elem.property_Element, false);
  ComposeEnumValue(json, 'op', elem.OpElement, CODES_TFhirFilterOperatorEnum, false);
  ComposeEnumProps(json, 'op', elem.OpElement, CODES_TFhirFilterOperatorEnum, false);
  ComposeCodeValue(json, 'value', elem.valueElement, false);
  ComposeCodeProps(json, 'value', elem.valueElement, false);
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSetExpansion(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetExpansion(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetExpansion(jsn : TJsonObject) : TFhirValueSetExpansion;
begin
  result := TFhirValueSetExpansion.create;
  try
    ParseValueSetExpansionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetExpansionProperties(jsn : TJsonObject; result : TFhirValueSetExpansion);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('identifier') or jsn.has('_identifier') then
        result.identifierElement := parseUri(jsn.node['identifier'], jsn.vObj['_identifier']);{q}
    if jsn.has('timestamp') or jsn.has('_timestamp') then
        result.timestampElement := parseDateTime(jsn.node['timestamp'], jsn.vObj['_timestamp']);{q}
    if jsn.has('total') or jsn.has('_total') then
        result.totalElement := parseInteger(jsn.node['total'], jsn.vObj['_total']);{q}
    if jsn.has('offset') or jsn.has('_offset') then
        result.offsetElement := parseInteger(jsn.node['offset'], jsn.vObj['_offset']);{q}
    if jsn.has('parameter') then
      iterateArray(jsn.vArr['parameter'], result.parameterList, parseValueSetExpansionParameter);
    if jsn.has('contains') then
      iterateArray(jsn.vArr['contains'], result.containsList, parseValueSetExpansionContains);
end;

procedure TFHIRJsonComposer.ComposeValueSetExpansion(json : TJSONWriter; name : string; elem : TFhirValueSetExpansion; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeUriValue(json, 'identifier', elem.identifierElement, false);
  ComposeUriProps(json, 'identifier', elem.identifierElement, false);
  ComposeDateTimeValue(json, 'timestamp', elem.timestampElement, false);
  ComposeDateTimeProps(json, 'timestamp', elem.timestampElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'total', elem.totalElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'total', elem.totalElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'offset', elem.offsetElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'offset', elem.offsetElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.parameterList.Count > 0) then
  begin
    json.valueArray('parameter');
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeValueSetExpansionParameter(json, '', elem.parameterList[i]); {z - }
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.containsList.Count > 0) then
  begin
    json.valueArray('contains');
    for i := 0 to elem.containsList.Count - 1 do
      ComposeValueSetExpansionContains(json, '', elem.containsList[i]); {z - }
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSetExpansionParameter(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetExpansionParameter(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetExpansionParameter(jsn : TJsonObject) : TFhirValueSetExpansionParameter;
begin
  result := TFhirValueSetExpansionParameter.create;
  try
    ParseValueSetExpansionParameterProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetExpansionParameterProperties(jsn : TJsonObject; result : TFhirValueSetExpansionParameter);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('valueCode') or jsn.has('_valueCode') then
      result.value := parseCode(jsn.node['valueCode'], jsn.vObj['_valueCode']);
    if jsn.has('valueString') or jsn.has('_valueString') then
      result.value := parseString(jsn.node['valueString'], jsn.vObj['_valueString']);
    if jsn.has('valueBoolean') or jsn.has('_valueBoolean') then
      result.value := parseBoolean(jsn.node['valueBoolean'], jsn.vObj['_valueBoolean']);
    if jsn.has('valueInteger') or jsn.has('_valueInteger') then
      result.value := parseInteger(jsn.node['valueInteger'], jsn.vObj['_valueInteger']);
    if jsn.has('valueDecimal') or jsn.has('_valueDecimal') then
      result.value := parseDecimal(jsn.node['valueDecimal'], jsn.vObj['_valueDecimal']);
    if jsn.has('valueUri') or jsn.has('_valueUri') then
      result.value := parseUri(jsn.node['valueUri'], jsn.vObj['_valueUri']);
end;

procedure TFHIRJsonComposer.ComposeValueSetExpansionParameter(json : TJSONWriter; name : string; elem : TFhirValueSetExpansionParameter; noObj : boolean = false);
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  ComposeStringValue(json, 'name', elem.nameElement, false);
  ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.value is TFhirCode) then 
  begin
    ComposeCodeValue(json, 'valueCode', TFhirCode(elem.value), false);
    ComposeCodeProps(json, 'valueCode', TFhirCode(elem.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) then 
  begin
    ComposeStringValue(json, 'valueString', TFhirString(elem.value), false);
    ComposeStringProps(json, 'valueString', TFhirString(elem.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) then 
  begin
    ComposeBooleanValue(json, 'valueBoolean', TFhirBoolean(elem.value), false);
    ComposeBooleanProps(json, 'valueBoolean', TFhirBoolean(elem.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirInteger) then 
  begin
    ComposeIntegerValue(json, 'valueInteger', TFhirInteger(elem.value), false);
    ComposeIntegerProps(json, 'valueInteger', TFhirInteger(elem.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirDecimal) then 
  begin
    ComposeDecimalValue(json, 'valueDecimal', TFhirDecimal(elem.value), false);
    ComposeDecimalProps(json, 'valueDecimal', TFhirDecimal(elem.value), false);
  end
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirUri) then 
  begin
    ComposeUriValue(json, 'valueUri', TFhirUri(elem.value), false);
    ComposeUriProps(json, 'valueUri', TFhirUri(elem.value), false);
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSetExpansionContains(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSetExpansionContains(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSetExpansionContains(jsn : TJsonObject) : TFhirValueSetExpansionContains;
begin
  result := TFhirValueSetExpansionContains.create;
  try
    ParseValueSetExpansionContainsProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetExpansionContainsProperties(jsn : TJsonObject; result : TFhirValueSetExpansionContains);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('system') or jsn.has('_system') then
        result.systemElement := parseUri(jsn.node['system'], jsn.vObj['_system']);{q}
    if jsn.has('abstract') or jsn.has('_abstract') then
        result.abstractElement := parseBoolean(jsn.node['abstract'], jsn.vObj['_abstract']);{q}
    if jsn.has('inactive') or jsn.has('_inactive') then
        result.inactiveElement := parseBoolean(jsn.node['inactive'], jsn.vObj['_inactive']);{q}
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('code') or jsn.has('_code') then
        result.codeElement := parseCode(jsn.node['code'], jsn.vObj['_code']);{q}
    if jsn.has('display') or jsn.has('_display') then
        result.displayElement := parseString(jsn.node['display'], jsn.vObj['_display']);{q}
    if jsn.has('designation') then
      iterateArray(jsn.vArr['designation'], result.designationList, parseValueSetComposeIncludeConceptDesignation);
    if jsn.has('contains') then
      iterateArray(jsn.vArr['contains'], result.containsList, parseValueSetExpansionContains);
end;

procedure TFHIRJsonComposer.ComposeValueSetExpansionContains(json : TJSONWriter; name : string; elem : TFhirValueSetExpansionContains; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriValue(json, 'system', elem.systemElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeUriProps(json, 'system', elem.systemElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.abstract <> false)) then
    ComposeBooleanValue(json, 'abstract', elem.abstractElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.abstract <> false)) then
    ComposeBooleanProps(json, 'abstract', elem.abstractElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.inactive <> false)) then
    ComposeBooleanValue(json, 'inactive', elem.inactiveElement, false);
  if (SummaryOption in [soFull, soData]) and (not isCanonical or (elem.inactive <> false)) then
    ComposeBooleanProps(json, 'inactive', elem.inactiveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeValue(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeProps(json, 'code', elem.codeElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'display', elem.displayElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.designationList.Count > 0) then
  begin
    json.valueArray('designation');
    for i := 0 to elem.designationList.Count - 1 do
      ComposeValueSetComposeIncludeConceptDesignation(json, '', elem.designationList[i]); {z - @ValueSet.compose.include.concept.designation}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and (elem.containsList.Count > 0) then
  begin
    json.valueArray('contains');
    for i := 0 to elem.containsList.Count - 1 do
      ComposeValueSetExpansionContains(json, '', elem.containsList[i]); {z - @ValueSet.expansion.contains}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseValueSet(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseValueSet(jsn)); {2}
end;

function TFHIRJsonParser.ParseValueSet(jsn : TJsonObject) : TFhirValueSet;
begin
  result := TFhirValueSet.create;
  try
    ParseValueSetProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseValueSetProperties(jsn : TJsonObject; result : TFhirValueSet);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('url') or jsn.has('_url') then
        result.urlElement := parseUri(jsn.node['url'], jsn.vObj['_url']);{q}
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('version') or jsn.has('_version') then
        result.versionElement := parseString(jsn.node['version'], jsn.vObj['_version']);{q}
    if jsn.has('name') or jsn.has('_name') then
        result.nameElement := parseString(jsn.node['name'], jsn.vObj['_name']);{q}
    if jsn.has('title') or jsn.has('_title') then
        result.titleElement := parseString(jsn.node['title'], jsn.vObj['_title']);{q}
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum);
    if jsn.has('experimental') or jsn.has('_experimental') then
        result.experimentalElement := parseBoolean(jsn.node['experimental'], jsn.vObj['_experimental']);{q}
    if jsn.has('date') or jsn.has('_date') then
        result.dateElement := parseDateTime(jsn.node['date'], jsn.vObj['_date']);{q}
    if jsn.has('publisher') or jsn.has('_publisher') then
        result.publisherElement := parseString(jsn.node['publisher'], jsn.vObj['_publisher']);{q}
    if jsn.has('contact') then
      iterateArray(jsn.vArr['contact'], result.contactList, parseContactDetail);
    if jsn.has('description') or jsn.has('_description') then
        result.descriptionElement := parseMarkdown(jsn.node['description'], jsn.vObj['_description']);{q}
    if jsn.has('useContext') then
      iterateArray(jsn.vArr['useContext'], result.useContextList, parseUsageContext);
    if jsn.has('jurisdiction') then
      iterateArray(jsn.vArr['jurisdiction'], result.jurisdictionList, parseCodeableConcept);
    if jsn.has('immutable') or jsn.has('_immutable') then
        result.immutableElement := parseBoolean(jsn.node['immutable'], jsn.vObj['_immutable']);{q}
    if jsn.has('purpose') or jsn.has('_purpose') then
        result.purposeElement := parseMarkdown(jsn.node['purpose'], jsn.vObj['_purpose']);{q}
    if jsn.has('copyright') or jsn.has('_copyright') then
        result.copyrightElement := parseMarkdown(jsn.node['copyright'], jsn.vObj['_copyright']);{q}
    if jsn.has('extensible') or jsn.has('_extensible') then
        result.extensibleElement := parseBoolean(jsn.node['extensible'], jsn.vObj['_extensible']);{q}
    if jsn.has('compose') then
        result.compose := ParseValueSetCompose(jsn.vObj['compose']);{q3}
    if jsn.has('expansion') then
        result.expansion := ParseValueSetExpansion(jsn.vObj['expansion']);{q3}
end;

procedure TFHIRJsonComposer.ComposeValueSet(json : TJSONWriter; name : string; elem : TFhirValueSet; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriValue(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUriProps(json, 'url', elem.urlElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringValue(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeStringProps(json, 'version', elem.versionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringValue(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeStringProps(json, 'name', elem.nameElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringValue(json, 'title', elem.titleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeStringProps(json, 'title', elem.titleElement, false);
  ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanValue(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBooleanProps(json, 'experimental', elem.experimentalElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeValue(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTimeProps(json, 'date', elem.dateElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringValue(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeStringProps(json, 'publisher', elem.publisherElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') and (elem.contactList.Count > 0) then
  begin
    json.valueArray('contact');
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(json, '', elem.contactList[i]); {z - ContactDetail}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownValue(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdownProps(json, 'description', elem.descriptionElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') and (elem.useContextList.Count > 0) then
  begin
    json.valueArray('useContext');
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(json, '', elem.useContextList[i]); {z - UsageContext}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') and (elem.jurisdictionList.Count > 0) then
  begin
    json.valueArray('jurisdiction');
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(json, '', elem.jurisdictionList[i]); {z - CodeableConcept}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('immutable') then
    ComposeBooleanValue(json, 'immutable', elem.immutableElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('immutable') then
    ComposeBooleanProps(json, 'immutable', elem.immutableElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownValue(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdownProps(json, 'purpose', elem.purposeElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownValue(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdownProps(json, 'copyright', elem.copyrightElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('extensible') then
    ComposeBooleanValue(json, 'extensible', elem.extensibleElement, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('extensible') then
    ComposeBooleanProps(json, 'extensible', elem.extensibleElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('compose') then
    ComposeValueSetCompose(json, 'compose', elem.compose); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('expansion') then
    ComposeValueSetExpansion(json, 'expansion', elem.expansion); {a}
end;

{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VISIONPRESCRIPTION}
procedure TFHIRJsonParser.ParseVisionPrescriptionDispense(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVisionPrescriptionDispense(jsn)); {2}
end;

function TFHIRJsonParser.ParseVisionPrescriptionDispense(jsn : TJsonObject) : TFhirVisionPrescriptionDispense;
begin
  result := TFhirVisionPrescriptionDispense.create;
  try
    ParseVisionPrescriptionDispenseProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVisionPrescriptionDispenseProperties(jsn : TJsonObject; result : TFhirVisionPrescriptionDispense);
begin
    ParseBackboneElementProperties(jsn, result);
    if jsn.has('product') then
        result.product := ParseCodeableConcept(jsn.vObj['product']);{q3}
    if jsn.has('eye') or jsn.has('_eye')  then
      result.eyeElement := parseEnum(jsn.path+'/eye', jsn.node['eye'], jsn.vObj['_eye'], CODES_TFhirVisionEyeCodesEnum, SYSTEMS_TFhirVisionEyeCodesEnum);
    if jsn.has('sphere') or jsn.has('_sphere') then
        result.sphereElement := parseDecimal(jsn.node['sphere'], jsn.vObj['_sphere']);{q}
    if jsn.has('cylinder') or jsn.has('_cylinder') then
        result.cylinderElement := parseDecimal(jsn.node['cylinder'], jsn.vObj['_cylinder']);{q}
    if jsn.has('axis') or jsn.has('_axis') then
        result.axisElement := parseInteger(jsn.node['axis'], jsn.vObj['_axis']);{q}
    if jsn.has('prism') or jsn.has('_prism') then
        result.prismElement := parseDecimal(jsn.node['prism'], jsn.vObj['_prism']);{q}
    if jsn.has('base') or jsn.has('_base')  then
      result.baseElement := parseEnum(jsn.path+'/base', jsn.node['base'], jsn.vObj['_base'], CODES_TFhirVisionBaseCodesEnum, SYSTEMS_TFhirVisionBaseCodesEnum);
    if jsn.has('add') or jsn.has('_add') then
        result.addElement := parseDecimal(jsn.node['add'], jsn.vObj['_add']);{q}
    if jsn.has('power') or jsn.has('_power') then
        result.powerElement := parseDecimal(jsn.node['power'], jsn.vObj['_power']);{q}
    if jsn.has('backCurve') or jsn.has('_backCurve') then
        result.backCurveElement := parseDecimal(jsn.node['backCurve'], jsn.vObj['_backCurve']);{q}
    if jsn.has('diameter') or jsn.has('_diameter') then
        result.diameterElement := parseDecimal(jsn.node['diameter'], jsn.vObj['_diameter']);{q}
    if jsn.has('duration') then
        result.duration := ParseQuantity(jsn.vObj['duration']);{q3}
    if jsn.has('color') or jsn.has('_color') then
        result.colorElement := parseString(jsn.node['color'], jsn.vObj['_color']);{q}
    if jsn.has('brand') or jsn.has('_brand') then
        result.brandElement := parseString(jsn.node['brand'], jsn.vObj['_brand']);{q}
    if jsn.has('note') then
      iterateArray(jsn.vArr['note'], result.noteList, parseAnnotation);
end;

procedure TFHIRJsonComposer.ComposeVisionPrescriptionDispense(json : TJSONWriter; name : string; elem : TFhirVisionPrescriptionDispense; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  if not noObj then json.valueObject(name);
  ComposeBackboneElementProperties(json, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(json, 'product', elem.product); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'eye', elem.EyeElement, CODES_TFhirVisionEyeCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'eye', elem.EyeElement, CODES_TFhirVisionEyeCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'sphere', elem.sphereElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'sphere', elem.sphereElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'cylinder', elem.cylinderElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'cylinder', elem.cylinderElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerValue(json, 'axis', elem.axisElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeIntegerProps(json, 'axis', elem.axisElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'prism', elem.prismElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'prism', elem.prismElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumValue(json, 'base', elem.BaseElement, CODES_TFhirVisionBaseCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnumProps(json, 'base', elem.BaseElement, CODES_TFhirVisionBaseCodesEnum, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'add', elem.addElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'add', elem.addElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'power', elem.powerElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'power', elem.powerElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'backCurve', elem.backCurveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'backCurve', elem.backCurveElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalValue(json, 'diameter', elem.diameterElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimalProps(json, 'diameter', elem.diameterElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(json, 'duration', elem.duration); {a}
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'color', elem.colorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'color', elem.colorElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringValue(json, 'brand', elem.brandElement, false);
  if (SummaryOption in [soFull, soData]) then
    ComposeStringProps(json, 'brand', elem.brandElement, false);
  if (SummaryOption in [soFull, soData]) and (elem.noteList.Count > 0) then
  begin
    json.valueArray('note');
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(json, '', elem.noteList[i]); {z - Annotation}
    json.FinishArray;
  end;
  if not noObj then json.finishObject;
end;

procedure TFHIRJsonParser.ParseVisionPrescription(jsn : TJsonObject; ctxt : TFHIRObjectList);
begin
  ctxt.add(ParseVisionPrescription(jsn)); {2}
end;

function TFHIRJsonParser.ParseVisionPrescription(jsn : TJsonObject) : TFhirVisionPrescription;
begin
  result := TFhirVisionPrescription.create;
  try
    ParseVisionPrescriptionProperties(jsn, result);
    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRJsonParser.ParseVisionPrescriptionProperties(jsn : TJsonObject; result : TFhirVisionPrescription);
begin
    ParseDomainResourceProperties(jsn, result);
    if jsn.has('identifier') then
      iterateArray(jsn.vArr['identifier'], result.identifierList, parseIdentifier);
    if jsn.has('status') or jsn.has('_status')  then
      result.statusElement := parseEnum(jsn.path+'/status', jsn.node['status'], jsn.vObj['_status'], CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum);
    if jsn.has('patient') then
        result.patient := ParseReference{TFhirPatient}(jsn.vObj['patient']);{q3}
    if jsn.has('encounter') then
        result.encounter := ParseReference{TFhirEncounter}(jsn.vObj['encounter']);{q3}
    if jsn.has('dateWritten') or jsn.has('_dateWritten') then
        result.dateWrittenElement := parseDateTime(jsn.node['dateWritten'], jsn.vObj['_dateWritten']);{q}
    if jsn.has('prescriber') then
        result.prescriber := ParseReference{TFhirPractitioner}(jsn.vObj['prescriber']);{q3}
    if jsn.has('reasonCodeableConcept') {a4} then
      result.reason := ParseCodeableConcept(jsn.vObj['reasonCodeableConcept']);
    if jsn.has('reasonReference') {a3} then
      result.reason := ParseReference(jsn.vObj['reasonReference']);
    if jsn.has('dispense') then
      iterateArray(jsn.vArr['dispense'], result.dispenseList, parseVisionPrescriptionDispense);
end;

procedure TFHIRJsonComposer.ComposeVisionPrescription(json : TJSONWriter; name : string; elem : TFhirVisionPrescription; noObj : boolean = false);
var
  i : integer;
begin
  if (elem = nil) then
    exit;
  ComposeDomainResourceProperties(json, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') and (elem.identifierList.Count > 0) then
  begin
    json.valueArray('identifier');
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(json, '', elem.identifierList[i]); {z - Identifier}
    json.FinishArray;
  end;
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumValue(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnumProps(json, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum, false);
  if (SummaryOption in [soFull, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(json, 'patient', elem.patient); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(json, 'encounter', elem.encounter); {a}
  if (SummaryOption in [soFull, soData]) and doCompose('dateWritten') then
    ComposeDateTimeValue(json, 'dateWritten', elem.dateWrittenElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('dateWritten') then
    ComposeDateTimeProps(json, 'dateWritten', elem.dateWrittenElement, false);
  if (SummaryOption in [soFull, soData]) and doCompose('prescriber') then
    ComposeReference{TFhirPractitioner}(json, 'prescriber', elem.prescriber); {a}
  if (SummaryOption in [soFull, soData]) and (elem.reason is TFhirCodeableConcept) then 
    ComposeCodeableConcept(json, 'reasonCodeableConcept', TFhirCodeableConcept(elem.reason)) 
  else if (SummaryOption in [soFull, soData]) and (elem.reason is TFhirReference) then
    ComposeReference(json, 'reasonReference', TFhirReference(elem.reason));
  if (SummaryOption in [soFull, soData]) and doCompose('dispense') and (elem.dispenseList.Count > 0) then
  begin
    json.valueArray('dispense');
    for i := 0 to elem.dispenseList.Count - 1 do
      ComposeVisionPrescriptionDispense(json, '', elem.dispenseList[i]); {z - }
    json.FinishArray;
  end;
end;

{$ENDIF FHIR_VISIONPRESCRIPTION}
function TFHIRJsonParser.ParseResource(jsn : TJsonObject) : TFhirResource;
var
  s : String;
begin
  s := jsn['resourceType'];
 {$IFDEF FHIR_PARAMETERS}
  if s = 'Parameters' Then
    result := ParseParameters(jsn)
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_ACCOUNT}
  {$IFDEF FHIR_ACCOUNT}
   else if s = 'Account' Then
    result := ParseAccount(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  {$IFDEF FHIR_ACTIVITYDEFINITION}
   else if s = 'ActivityDefinition' Then
    result := ParseActivityDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  {$IFDEF FHIR_ADVERSEEVENT}
   else if s = 'AdverseEvent' Then
    result := ParseAdverseEvent(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  {$IFDEF FHIR_ALLERGYINTOLERANCE}
   else if s = 'AllergyIntolerance' Then
    result := ParseAllergyIntolerance(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  {$IFDEF FHIR_APPOINTMENT}
   else if s = 'Appointment' Then
    result := ParseAppointment(jsn) 
  {$ENDIF}
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  {$IFDEF FHIR_APPOINTMENTRESPONSE}
   else if s = 'AppointmentResponse' Then
    result := ParseAppointmentResponse(jsn) 
  {$ENDIF}
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  {$IFDEF FHIR_AUDITEVENT}
   else if s = 'AuditEvent' Then
    result := ParseAuditEvent(jsn) 
  {$ENDIF}
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  {$IFDEF FHIR_BASIC}
   else if s = 'Basic' Then
    result := ParseBasic(jsn) 
  {$ENDIF}
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  {$IFDEF FHIR_BINARY}
   else if s = 'Binary' Then
    result := ParseBinary(jsn) 
  {$ENDIF}
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BODYSITE}
  {$IFDEF FHIR_BODYSITE}
   else if s = 'BodySite' Then
    result := ParseBodySite(jsn) 
  {$ENDIF}
{$ENDIF FHIR_BODYSITE}
{$IFDEF FHIR_BUNDLE}
  {$IFDEF FHIR_BUNDLE}
   else if s = 'Bundle' Then
    result := ParseBundle(jsn) 
  {$ENDIF}
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  {$IFDEF FHIR_CAPABILITYSTATEMENT}
   else if s = 'CapabilityStatement' Then
    result := ParseCapabilityStatement(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  {$IFDEF FHIR_CAREPLAN}
   else if s = 'CarePlan' Then
    result := ParseCarePlan(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  {$IFDEF FHIR_CARETEAM}
   else if s = 'CareTeam' Then
    result := ParseCareTeam(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CHARGEITEM}
  {$IFDEF FHIR_CHARGEITEM}
   else if s = 'ChargeItem' Then
    result := ParseChargeItem(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CLAIM}
  {$IFDEF FHIR_CLAIM}
   else if s = 'Claim' Then
    result := ParseClaim(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  {$IFDEF FHIR_CLAIMRESPONSE}
   else if s = 'ClaimResponse' Then
    result := ParseClaimResponse(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  {$IFDEF FHIR_CLINICALIMPRESSION}
   else if s = 'ClinicalImpression' Then
    result := ParseClinicalImpression(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
  {$IFDEF FHIR_CODESYSTEM}
   else if s = 'CodeSystem' Then
    result := ParseCodeSystem(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  {$IFDEF FHIR_COMMUNICATION}
   else if s = 'Communication' Then
    result := ParseCommunication(jsn) 
  {$ENDIF}
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  {$IFDEF FHIR_COMMUNICATIONREQUEST}
   else if s = 'CommunicationRequest' Then
    result := ParseCommunicationRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  {$IFDEF FHIR_COMPARTMENTDEFINITION}
   else if s = 'CompartmentDefinition' Then
    result := ParseCompartmentDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  {$IFDEF FHIR_COMPOSITION}
   else if s = 'Composition' Then
    result := ParseComposition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  {$IFDEF FHIR_CONCEPTMAP}
   else if s = 'ConceptMap' Then
    result := ParseConceptMap(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  {$IFDEF FHIR_CONDITION}
   else if s = 'Condition' Then
    result := ParseCondition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  {$IFDEF FHIR_CONSENT}
   else if s = 'Consent' Then
    result := ParseConsent(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  {$IFDEF FHIR_CONTRACT}
   else if s = 'Contract' Then
    result := ParseContract(jsn) 
  {$ENDIF}
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  {$IFDEF FHIR_COVERAGE}
   else if s = 'Coverage' Then
    result := ParseCoverage(jsn) 
  {$ENDIF}
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_DATAELEMENT}
  {$IFDEF FHIR_DATAELEMENT}
   else if s = 'DataElement' Then
    result := ParseDataElement(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DATAELEMENT}
{$IFDEF FHIR_DETECTEDISSUE}
  {$IFDEF FHIR_DETECTEDISSUE}
   else if s = 'DetectedIssue' Then
    result := ParseDetectedIssue(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  {$IFDEF FHIR_DEVICE}
   else if s = 'Device' Then
    result := ParseDevice(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICECOMPONENT}
  {$IFDEF FHIR_DEVICECOMPONENT}
   else if s = 'DeviceComponent' Then
    result := ParseDeviceComponent(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DEVICECOMPONENT}
{$IFDEF FHIR_DEVICEMETRIC}
  {$IFDEF FHIR_DEVICEMETRIC}
   else if s = 'DeviceMetric' Then
    result := ParseDeviceMetric(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  {$IFDEF FHIR_DEVICEREQUEST}
   else if s = 'DeviceRequest' Then
    result := ParseDeviceRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  {$IFDEF FHIR_DEVICEUSESTATEMENT}
   else if s = 'DeviceUseStatement' Then
    result := ParseDeviceUseStatement(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  {$IFDEF FHIR_DIAGNOSTICREPORT}
   else if s = 'DiagnosticReport' Then
    result := ParseDiagnosticReport(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  {$IFDEF FHIR_DOCUMENTMANIFEST}
   else if s = 'DocumentManifest' Then
    result := ParseDocumentManifest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  {$IFDEF FHIR_DOCUMENTREFERENCE}
   else if s = 'DocumentReference' Then
    result := ParseDocumentReference(jsn) 
  {$ENDIF}
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ELIGIBILITYREQUEST}
  {$IFDEF FHIR_ELIGIBILITYREQUEST}
   else if s = 'EligibilityRequest' Then
    result := ParseEligibilityRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ELIGIBILITYREQUEST}
{$IFDEF FHIR_ELIGIBILITYRESPONSE}
  {$IFDEF FHIR_ELIGIBILITYRESPONSE}
   else if s = 'EligibilityResponse' Then
    result := ParseEligibilityResponse(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ELIGIBILITYRESPONSE}
{$IFDEF FHIR_ENCOUNTER}
  {$IFDEF FHIR_ENCOUNTER}
   else if s = 'Encounter' Then
    result := ParseEncounter(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  {$IFDEF FHIR_ENDPOINT}
   else if s = 'Endpoint' Then
    result := ParseEndpoint(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  {$IFDEF FHIR_ENROLLMENTREQUEST}
   else if s = 'EnrollmentRequest' Then
    result := ParseEnrollmentRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  {$IFDEF FHIR_ENROLLMENTRESPONSE}
   else if s = 'EnrollmentResponse' Then
    result := ParseEnrollmentResponse(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
  {$IFDEF FHIR_EPISODEOFCARE}
   else if s = 'EpisodeOfCare' Then
    result := ParseEpisodeOfCare(jsn) 
  {$ENDIF}
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EXPANSIONPROFILE}
  {$IFDEF FHIR_EXPANSIONPROFILE}
   else if s = 'ExpansionProfile' Then
    result := ParseExpansionProfile(jsn) 
  {$ENDIF}
{$ENDIF FHIR_EXPANSIONPROFILE}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  {$IFDEF FHIR_EXPLANATIONOFBENEFIT}
   else if s = 'ExplanationOfBenefit' Then
    result := ParseExplanationOfBenefit(jsn) 
  {$ENDIF}
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  {$IFDEF FHIR_FAMILYMEMBERHISTORY}
   else if s = 'FamilyMemberHistory' Then
    result := ParseFamilyMemberHistory(jsn) 
  {$ENDIF}
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  {$IFDEF FHIR_FLAG}
   else if s = 'Flag' Then
    result := ParseFlag(jsn) 
  {$ENDIF}
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  {$IFDEF FHIR_GOAL}
   else if s = 'Goal' Then
    result := ParseGoal(jsn) 
  {$ENDIF}
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  {$IFDEF FHIR_GRAPHDEFINITION}
   else if s = 'GraphDefinition' Then
    result := ParseGraphDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  {$IFDEF FHIR_GROUP}
   else if s = 'Group' Then
    result := ParseGroup(jsn) 
  {$ENDIF}
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  {$IFDEF FHIR_GUIDANCERESPONSE}
   else if s = 'GuidanceResponse' Then
    result := ParseGuidanceResponse(jsn) 
  {$ENDIF}
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  {$IFDEF FHIR_HEALTHCARESERVICE}
   else if s = 'HealthcareService' Then
    result := ParseHealthcareService(jsn) 
  {$ENDIF}
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGMANIFEST}
  {$IFDEF FHIR_IMAGINGMANIFEST}
   else if s = 'ImagingManifest' Then
    result := ParseImagingManifest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_IMAGINGMANIFEST}
{$IFDEF FHIR_IMAGINGSTUDY}
  {$IFDEF FHIR_IMAGINGSTUDY}
   else if s = 'ImagingStudy' Then
    result := ParseImagingStudy(jsn) 
  {$ENDIF}
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  {$IFDEF FHIR_IMMUNIZATION}
   else if s = 'Immunization' Then
    result := ParseImmunization(jsn) 
  {$ENDIF}
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  {$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
   else if s = 'ImmunizationRecommendation' Then
    result := ParseImmunizationRecommendation(jsn) 
  {$ENDIF}
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  {$IFDEF FHIR_IMPLEMENTATIONGUIDE}
   else if s = 'ImplementationGuide' Then
    result := ParseImplementationGuide(jsn) 
  {$ENDIF}
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_LIBRARY}
  {$IFDEF FHIR_LIBRARY}
   else if s = 'Library' Then
    result := ParseLibrary(jsn) 
  {$ENDIF}
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  {$IFDEF FHIR_LINKAGE}
   else if s = 'Linkage' Then
    result := ParseLinkage(jsn) 
  {$ENDIF}
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  {$IFDEF FHIR_LIST}
   else if s = 'List' Then
    result := ParseList(jsn) 
  {$ENDIF}
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  {$IFDEF FHIR_LOCATION}
   else if s = 'Location' Then
    result := ParseLocation(jsn) 
  {$ENDIF}
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
  {$IFDEF FHIR_MEASURE}
   else if s = 'Measure' Then
    result := ParseMeasure(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  {$IFDEF FHIR_MEASUREREPORT}
   else if s = 'MeasureReport' Then
    result := ParseMeasureReport(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  {$IFDEF FHIR_MEDIA}
   else if s = 'Media' Then
    result := ParseMedia(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  {$IFDEF FHIR_MEDICATION}
   else if s = 'Medication' Then
    result := ParseMedication(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  {$IFDEF FHIR_MEDICATIONADMINISTRATION}
   else if s = 'MedicationAdministration' Then
    result := ParseMedicationAdministration(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  {$IFDEF FHIR_MEDICATIONDISPENSE}
   else if s = 'MedicationDispense' Then
    result := ParseMedicationDispense(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  {$IFDEF FHIR_MEDICATIONREQUEST}
   else if s = 'MedicationRequest' Then
    result := ParseMedicationRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  {$IFDEF FHIR_MEDICATIONSTATEMENT}
   else if s = 'MedicationStatement' Then
    result := ParseMedicationStatement(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MESSAGEDEFINITION}
  {$IFDEF FHIR_MESSAGEDEFINITION}
   else if s = 'MessageDefinition' Then
    result := ParseMessageDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  {$IFDEF FHIR_MESSAGEHEADER}
   else if s = 'MessageHeader' Then
    result := ParseMessageHeader(jsn) 
  {$ENDIF}
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_NAMINGSYSTEM}
  {$IFDEF FHIR_NAMINGSYSTEM}
   else if s = 'NamingSystem' Then
    result := ParseNamingSystem(jsn) 
  {$ENDIF}
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  {$IFDEF FHIR_NUTRITIONORDER}
   else if s = 'NutritionOrder' Then
    result := ParseNutritionOrder(jsn) 
  {$ENDIF}
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
  {$IFDEF FHIR_OBSERVATION}
   else if s = 'Observation' Then
    result := ParseObservation(jsn) 
  {$ENDIF}
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OPERATIONDEFINITION}
  {$IFDEF FHIR_OPERATIONDEFINITION}
   else if s = 'OperationDefinition' Then
    result := ParseOperationDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  {$IFDEF FHIR_OPERATIONOUTCOME}
   else if s = 'OperationOutcome' Then
    result := ParseOperationOutcome(jsn) 
  {$ENDIF}
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  {$IFDEF FHIR_ORGANIZATION}
   else if s = 'Organization' Then
    result := ParseOrganization(jsn) 
  {$ENDIF}
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_PATIENT}
  {$IFDEF FHIR_PATIENT}
   else if s = 'Patient' Then
    result := ParsePatient(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  {$IFDEF FHIR_PAYMENTNOTICE}
   else if s = 'PaymentNotice' Then
    result := ParsePaymentNotice(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  {$IFDEF FHIR_PAYMENTRECONCILIATION}
   else if s = 'PaymentReconciliation' Then
    result := ParsePaymentReconciliation(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  {$IFDEF FHIR_PERSON}
   else if s = 'Person' Then
    result := ParsePerson(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  {$IFDEF FHIR_PLANDEFINITION}
   else if s = 'PlanDefinition' Then
    result := ParsePlanDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  {$IFDEF FHIR_PRACTITIONER}
   else if s = 'Practitioner' Then
    result := ParsePractitioner(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  {$IFDEF FHIR_PRACTITIONERROLE}
   else if s = 'PractitionerRole' Then
    result := ParsePractitionerRole(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  {$IFDEF FHIR_PROCEDURE}
   else if s = 'Procedure' Then
    result := ParseProcedure(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROCEDUREREQUEST}
  {$IFDEF FHIR_PROCEDUREREQUEST}
   else if s = 'ProcedureRequest' Then
    result := ParseProcedureRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PROCEDUREREQUEST}
{$IFDEF FHIR_PROCESSREQUEST}
  {$IFDEF FHIR_PROCESSREQUEST}
   else if s = 'ProcessRequest' Then
    result := ParseProcessRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PROCESSREQUEST}
{$IFDEF FHIR_PROCESSRESPONSE}
  {$IFDEF FHIR_PROCESSRESPONSE}
   else if s = 'ProcessResponse' Then
    result := ParseProcessResponse(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PROCESSRESPONSE}
{$IFDEF FHIR_PROVENANCE}
  {$IFDEF FHIR_PROVENANCE}
   else if s = 'Provenance' Then
    result := ParseProvenance(jsn) 
  {$ENDIF}
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  {$IFDEF FHIR_QUESTIONNAIRE}
   else if s = 'Questionnaire' Then
    result := ParseQuestionnaire(jsn) 
  {$ENDIF}
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  {$IFDEF FHIR_QUESTIONNAIRERESPONSE}
   else if s = 'QuestionnaireResponse' Then
    result := ParseQuestionnaireResponse(jsn) 
  {$ENDIF}
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REFERRALREQUEST}
  {$IFDEF FHIR_REFERRALREQUEST}
   else if s = 'ReferralRequest' Then
    result := ParseReferralRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_REFERRALREQUEST}
{$IFDEF FHIR_RELATEDPERSON}
  {$IFDEF FHIR_RELATEDPERSON}
   else if s = 'RelatedPerson' Then
    result := ParseRelatedPerson(jsn) 
  {$ENDIF}
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  {$IFDEF FHIR_REQUESTGROUP}
   else if s = 'RequestGroup' Then
    result := ParseRequestGroup(jsn) 
  {$ENDIF}
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
  {$IFDEF FHIR_RESEARCHSTUDY}
   else if s = 'ResearchStudy' Then
    result := ParseResearchStudy(jsn) 
  {$ENDIF}
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  {$IFDEF FHIR_RESEARCHSUBJECT}
   else if s = 'ResearchSubject' Then
    result := ParseResearchSubject(jsn) 
  {$ENDIF}
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  {$IFDEF FHIR_RISKASSESSMENT}
   else if s = 'RiskAssessment' Then
    result := ParseRiskAssessment(jsn) 
  {$ENDIF}
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
  {$IFDEF FHIR_SCHEDULE}
   else if s = 'Schedule' Then
    result := ParseSchedule(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  {$IFDEF FHIR_SEARCHPARAMETER}
   else if s = 'SearchParameter' Then
    result := ParseSearchParameter(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SEQUENCE}
  {$IFDEF FHIR_SEQUENCE}
   else if s = 'Sequence' Then
    result := ParseSequence(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SEQUENCE}
{$IFDEF FHIR_SERVICEDEFINITION}
  {$IFDEF FHIR_SERVICEDEFINITION}
   else if s = 'ServiceDefinition' Then
    result := ParseServiceDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SERVICEDEFINITION}
{$IFDEF FHIR_SLOT}
  {$IFDEF FHIR_SLOT}
   else if s = 'Slot' Then
    result := ParseSlot(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  {$IFDEF FHIR_SPECIMEN}
   else if s = 'Specimen' Then
    result := ParseSpecimen(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  {$IFDEF FHIR_STRUCTUREDEFINITION}
   else if s = 'StructureDefinition' Then
    result := ParseStructureDefinition(jsn) 
  {$ENDIF}
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  {$IFDEF FHIR_STRUCTUREMAP}
   else if s = 'StructureMap' Then
    result := ParseStructureMap(jsn) 
  {$ENDIF}
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  {$IFDEF FHIR_SUBSCRIPTION}
   else if s = 'Subscription' Then
    result := ParseSubscription(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
  {$IFDEF FHIR_SUBSTANCE}
   else if s = 'Substance' Then
    result := ParseSubstance(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUPPLYDELIVERY}
  {$IFDEF FHIR_SUPPLYDELIVERY}
   else if s = 'SupplyDelivery' Then
    result := ParseSupplyDelivery(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  {$IFDEF FHIR_SUPPLYREQUEST}
   else if s = 'SupplyRequest' Then
    result := ParseSupplyRequest(jsn) 
  {$ENDIF}
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  {$IFDEF FHIR_TASK}
   else if s = 'Task' Then
    result := ParseTask(jsn) 
  {$ENDIF}
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TESTREPORT}
  {$IFDEF FHIR_TESTREPORT}
   else if s = 'TestReport' Then
    result := ParseTestReport(jsn) 
  {$ENDIF}
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  {$IFDEF FHIR_TESTSCRIPT}
   else if s = 'TestScript' Then
    result := ParseTestScript(jsn) 
  {$ENDIF}
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
  {$IFDEF FHIR_VALUESET}
   else if s = 'ValueSet' Then
    result := ParseValueSet(jsn) 
  {$ENDIF}
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  {$IFDEF FHIR_VISIONPRESCRIPTION}
   else if s = 'VisionPrescription' Then
    result := ParseVisionPrescription(jsn) 
  {$ENDIF}
{$ENDIF FHIR_VISIONPRESCRIPTION}
  else
    raise EParserException.create('error: the element '+s+' is not a valid resource name', jsn.LocationStart.line+1, jsn.locationStart.col+1);
end;

function TFHIRJsonParser.ParseFragment(jsn : TJsonObject; type_ : String) : TFHIRObject;
begin
   if (type_ = 'TFhirElement') then
    result := parseElement(jsn)
  else if (type_ = 'TFhirBackboneElement') then
    result := parseBackboneElement(jsn)
{$IFDEF FHIR_PARAMETERS}
  else if (type_ = 'TFhirParameters') then
    result := parseParameters(jsn)
{$ENDIF FHIR_PARAMETERS}
  else if (type_ = 'TFhirExtension') then
    result := parseExtension(jsn)
  else if (type_ = 'TFhirNarrative') then
    result := parseNarrative(jsn)
  else if (type_ = 'TFhirContributor') then
    result := parseContributor(jsn)
  else if (type_ = 'TFhirAttachment') then
    result := parseAttachment(jsn)
  else if (type_ = 'TFhirDataRequirement') then
    result := parseDataRequirement(jsn)
  else if (type_ = 'TFhirDosage') then
    result := parseDosage(jsn)
  else if (type_ = 'TFhirIdentifier') then
    result := parseIdentifier(jsn)
  else if (type_ = 'TFhirCoding') then
    result := parseCoding(jsn)
  else if (type_ = 'TFhirSampledData') then
    result := parseSampledData(jsn)
  else if (type_ = 'TFhirRatio') then
    result := parseRatio(jsn)
  else if (type_ = 'TFhirReference') then
    result := parseReference(jsn)
  else if (type_ = 'TFhirTriggerDefinition') then
    result := parseTriggerDefinition(jsn)
  else if (type_ = 'TFhirPeriod') then
    result := parsePeriod(jsn)
  else if (type_ = 'TFhirQuantity') then
    result := parseQuantity(jsn)
  else if (type_ = 'TFhirRange') then
    result := parseRange(jsn)
  else if (type_ = 'TFhirRelatedArtifact') then
    result := parseRelatedArtifact(jsn)
  else if (type_ = 'TFhirAnnotation') then
    result := parseAnnotation(jsn)
  else if (type_ = 'TFhirContactDetail') then
    result := parseContactDetail(jsn)
  else if (type_ = 'TFhirUsageContext') then
    result := parseUsageContext(jsn)
  else if (type_ = 'TFhirSignature') then
    result := parseSignature(jsn)
  else if (type_ = 'TFhirCodeableConcept') then
    result := parseCodeableConcept(jsn)
  else if (type_ = 'TFhirParameterDefinition') then
    result := parseParameterDefinition(jsn)
  else if (type_ = 'TFhirContactPoint') then
    result := parseContactPoint(jsn)
  else if (type_ = 'TFhirHumanName') then
    result := parseHumanName(jsn)
  else if (type_ = 'TFhirMeta') then
    result := parseMeta(jsn)
  else if (type_ = 'TFhirAddress') then
    result := parseAddress(jsn)
  else if (type_ = 'TFhirElementDefinition') then
    result := parseElementDefinition(jsn)
  else if (type_ = 'TFhirTiming') then
    result := parseTiming(jsn)
  else if (type_ = 'TFhirCount') then
    result := parseCount(jsn)
  else if (type_ = 'TFhirMoney') then
    result := parseMoney(jsn)
  else if (type_ = 'TFhirAge') then
    result := parseAge(jsn)
  else if (type_ = 'TFhirDistance') then
    result := parseDistance(jsn)
  else if (type_ = 'TFhirDuration') then
    result := parseDuration(jsn)
{$IFDEF FHIR_ACCOUNT}
  else if (type_ = 'TFhirAccount') then
    result := parseAccount(jsn)
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  else if (type_ = 'TFhirActivityDefinition') then
    result := parseActivityDefinition(jsn)
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  else if (type_ = 'TFhirAdverseEvent') then
    result := parseAdverseEvent(jsn)
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  else if (type_ = 'TFhirAllergyIntolerance') then
    result := parseAllergyIntolerance(jsn)
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  else if (type_ = 'TFhirAppointment') then
    result := parseAppointment(jsn)
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  else if (type_ = 'TFhirAppointmentResponse') then
    result := parseAppointmentResponse(jsn)
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  else if (type_ = 'TFhirAuditEvent') then
    result := parseAuditEvent(jsn)
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  else if (type_ = 'TFhirBasic') then
    result := parseBasic(jsn)
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  else if (type_ = 'TFhirBinary') then
    result := parseBinary(jsn)
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BODYSITE}
  else if (type_ = 'TFhirBodySite') then
    result := parseBodySite(jsn)
{$ENDIF FHIR_BODYSITE}
{$IFDEF FHIR_BUNDLE}
  else if (type_ = 'TFhirBundle') then
    result := parseBundle(jsn)
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  else if (type_ = 'TFhirCapabilityStatement') then
    result := parseCapabilityStatement(jsn)
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  else if (type_ = 'TFhirCarePlan') then
    result := parseCarePlan(jsn)
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  else if (type_ = 'TFhirCareTeam') then
    result := parseCareTeam(jsn)
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CHARGEITEM}
  else if (type_ = 'TFhirChargeItem') then
    result := parseChargeItem(jsn)
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CLAIM}
  else if (type_ = 'TFhirClaim') then
    result := parseClaim(jsn)
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  else if (type_ = 'TFhirClaimResponse') then
    result := parseClaimResponse(jsn)
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  else if (type_ = 'TFhirClinicalImpression') then
    result := parseClinicalImpression(jsn)
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
  else if (type_ = 'TFhirCodeSystem') then
    result := parseCodeSystem(jsn)
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  else if (type_ = 'TFhirCommunication') then
    result := parseCommunication(jsn)
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  else if (type_ = 'TFhirCommunicationRequest') then
    result := parseCommunicationRequest(jsn)
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  else if (type_ = 'TFhirCompartmentDefinition') then
    result := parseCompartmentDefinition(jsn)
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  else if (type_ = 'TFhirComposition') then
    result := parseComposition(jsn)
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  else if (type_ = 'TFhirConceptMap') then
    result := parseConceptMap(jsn)
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  else if (type_ = 'TFhirCondition') then
    result := parseCondition(jsn)
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  else if (type_ = 'TFhirConsent') then
    result := parseConsent(jsn)
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  else if (type_ = 'TFhirContract') then
    result := parseContract(jsn)
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  else if (type_ = 'TFhirCoverage') then
    result := parseCoverage(jsn)
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_DATAELEMENT}
  else if (type_ = 'TFhirDataElement') then
    result := parseDataElement(jsn)
{$ENDIF FHIR_DATAELEMENT}
{$IFDEF FHIR_DETECTEDISSUE}
  else if (type_ = 'TFhirDetectedIssue') then
    result := parseDetectedIssue(jsn)
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  else if (type_ = 'TFhirDevice') then
    result := parseDevice(jsn)
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICECOMPONENT}
  else if (type_ = 'TFhirDeviceComponent') then
    result := parseDeviceComponent(jsn)
{$ENDIF FHIR_DEVICECOMPONENT}
{$IFDEF FHIR_DEVICEMETRIC}
  else if (type_ = 'TFhirDeviceMetric') then
    result := parseDeviceMetric(jsn)
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  else if (type_ = 'TFhirDeviceRequest') then
    result := parseDeviceRequest(jsn)
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  else if (type_ = 'TFhirDeviceUseStatement') then
    result := parseDeviceUseStatement(jsn)
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  else if (type_ = 'TFhirDiagnosticReport') then
    result := parseDiagnosticReport(jsn)
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  else if (type_ = 'TFhirDocumentManifest') then
    result := parseDocumentManifest(jsn)
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  else if (type_ = 'TFhirDocumentReference') then
    result := parseDocumentReference(jsn)
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ELIGIBILITYREQUEST}
  else if (type_ = 'TFhirEligibilityRequest') then
    result := parseEligibilityRequest(jsn)
{$ENDIF FHIR_ELIGIBILITYREQUEST}
{$IFDEF FHIR_ELIGIBILITYRESPONSE}
  else if (type_ = 'TFhirEligibilityResponse') then
    result := parseEligibilityResponse(jsn)
{$ENDIF FHIR_ELIGIBILITYRESPONSE}
{$IFDEF FHIR_ENCOUNTER}
  else if (type_ = 'TFhirEncounter') then
    result := parseEncounter(jsn)
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  else if (type_ = 'TFhirEndpoint') then
    result := parseEndpoint(jsn)
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  else if (type_ = 'TFhirEnrollmentRequest') then
    result := parseEnrollmentRequest(jsn)
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  else if (type_ = 'TFhirEnrollmentResponse') then
    result := parseEnrollmentResponse(jsn)
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
  else if (type_ = 'TFhirEpisodeOfCare') then
    result := parseEpisodeOfCare(jsn)
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EXPANSIONPROFILE}
  else if (type_ = 'TFhirExpansionProfile') then
    result := parseExpansionProfile(jsn)
{$ENDIF FHIR_EXPANSIONPROFILE}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  else if (type_ = 'TFhirExplanationOfBenefit') then
    result := parseExplanationOfBenefit(jsn)
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  else if (type_ = 'TFhirFamilyMemberHistory') then
    result := parseFamilyMemberHistory(jsn)
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  else if (type_ = 'TFhirFlag') then
    result := parseFlag(jsn)
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  else if (type_ = 'TFhirGoal') then
    result := parseGoal(jsn)
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  else if (type_ = 'TFhirGraphDefinition') then
    result := parseGraphDefinition(jsn)
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  else if (type_ = 'TFhirGroup') then
    result := parseGroup(jsn)
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  else if (type_ = 'TFhirGuidanceResponse') then
    result := parseGuidanceResponse(jsn)
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  else if (type_ = 'TFhirHealthcareService') then
    result := parseHealthcareService(jsn)
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGMANIFEST}
  else if (type_ = 'TFhirImagingManifest') then
    result := parseImagingManifest(jsn)
{$ENDIF FHIR_IMAGINGMANIFEST}
{$IFDEF FHIR_IMAGINGSTUDY}
  else if (type_ = 'TFhirImagingStudy') then
    result := parseImagingStudy(jsn)
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  else if (type_ = 'TFhirImmunization') then
    result := parseImmunization(jsn)
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  else if (type_ = 'TFhirImmunizationRecommendation') then
    result := parseImmunizationRecommendation(jsn)
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  else if (type_ = 'TFhirImplementationGuide') then
    result := parseImplementationGuide(jsn)
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_LIBRARY}
  else if (type_ = 'TFhirLibrary') then
    result := parseLibrary(jsn)
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  else if (type_ = 'TFhirLinkage') then
    result := parseLinkage(jsn)
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  else if (type_ = 'TFhirList') then
    result := parseList(jsn)
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  else if (type_ = 'TFhirLocation') then
    result := parseLocation(jsn)
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
  else if (type_ = 'TFhirMeasure') then
    result := parseMeasure(jsn)
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  else if (type_ = 'TFhirMeasureReport') then
    result := parseMeasureReport(jsn)
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  else if (type_ = 'TFhirMedia') then
    result := parseMedia(jsn)
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  else if (type_ = 'TFhirMedication') then
    result := parseMedication(jsn)
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  else if (type_ = 'TFhirMedicationAdministration') then
    result := parseMedicationAdministration(jsn)
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  else if (type_ = 'TFhirMedicationDispense') then
    result := parseMedicationDispense(jsn)
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  else if (type_ = 'TFhirMedicationRequest') then
    result := parseMedicationRequest(jsn)
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  else if (type_ = 'TFhirMedicationStatement') then
    result := parseMedicationStatement(jsn)
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MESSAGEDEFINITION}
  else if (type_ = 'TFhirMessageDefinition') then
    result := parseMessageDefinition(jsn)
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  else if (type_ = 'TFhirMessageHeader') then
    result := parseMessageHeader(jsn)
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_NAMINGSYSTEM}
  else if (type_ = 'TFhirNamingSystem') then
    result := parseNamingSystem(jsn)
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  else if (type_ = 'TFhirNutritionOrder') then
    result := parseNutritionOrder(jsn)
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
  else if (type_ = 'TFhirObservation') then
    result := parseObservation(jsn)
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OPERATIONDEFINITION}
  else if (type_ = 'TFhirOperationDefinition') then
    result := parseOperationDefinition(jsn)
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  else if (type_ = 'TFhirOperationOutcome') then
    result := parseOperationOutcome(jsn)
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  else if (type_ = 'TFhirOrganization') then
    result := parseOrganization(jsn)
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_PATIENT}
  else if (type_ = 'TFhirPatient') then
    result := parsePatient(jsn)
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  else if (type_ = 'TFhirPaymentNotice') then
    result := parsePaymentNotice(jsn)
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  else if (type_ = 'TFhirPaymentReconciliation') then
    result := parsePaymentReconciliation(jsn)
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  else if (type_ = 'TFhirPerson') then
    result := parsePerson(jsn)
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  else if (type_ = 'TFhirPlanDefinition') then
    result := parsePlanDefinition(jsn)
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  else if (type_ = 'TFhirPractitioner') then
    result := parsePractitioner(jsn)
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  else if (type_ = 'TFhirPractitionerRole') then
    result := parsePractitionerRole(jsn)
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  else if (type_ = 'TFhirProcedure') then
    result := parseProcedure(jsn)
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROCEDUREREQUEST}
  else if (type_ = 'TFhirProcedureRequest') then
    result := parseProcedureRequest(jsn)
{$ENDIF FHIR_PROCEDUREREQUEST}
{$IFDEF FHIR_PROCESSREQUEST}
  else if (type_ = 'TFhirProcessRequest') then
    result := parseProcessRequest(jsn)
{$ENDIF FHIR_PROCESSREQUEST}
{$IFDEF FHIR_PROCESSRESPONSE}
  else if (type_ = 'TFhirProcessResponse') then
    result := parseProcessResponse(jsn)
{$ENDIF FHIR_PROCESSRESPONSE}
{$IFDEF FHIR_PROVENANCE}
  else if (type_ = 'TFhirProvenance') then
    result := parseProvenance(jsn)
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  else if (type_ = 'TFhirQuestionnaire') then
    result := parseQuestionnaire(jsn)
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  else if (type_ = 'TFhirQuestionnaireResponse') then
    result := parseQuestionnaireResponse(jsn)
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REFERRALREQUEST}
  else if (type_ = 'TFhirReferralRequest') then
    result := parseReferralRequest(jsn)
{$ENDIF FHIR_REFERRALREQUEST}
{$IFDEF FHIR_RELATEDPERSON}
  else if (type_ = 'TFhirRelatedPerson') then
    result := parseRelatedPerson(jsn)
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  else if (type_ = 'TFhirRequestGroup') then
    result := parseRequestGroup(jsn)
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
  else if (type_ = 'TFhirResearchStudy') then
    result := parseResearchStudy(jsn)
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  else if (type_ = 'TFhirResearchSubject') then
    result := parseResearchSubject(jsn)
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  else if (type_ = 'TFhirRiskAssessment') then
    result := parseRiskAssessment(jsn)
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
  else if (type_ = 'TFhirSchedule') then
    result := parseSchedule(jsn)
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  else if (type_ = 'TFhirSearchParameter') then
    result := parseSearchParameter(jsn)
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SEQUENCE}
  else if (type_ = 'TFhirSequence') then
    result := parseSequence(jsn)
{$ENDIF FHIR_SEQUENCE}
{$IFDEF FHIR_SERVICEDEFINITION}
  else if (type_ = 'TFhirServiceDefinition') then
    result := parseServiceDefinition(jsn)
{$ENDIF FHIR_SERVICEDEFINITION}
{$IFDEF FHIR_SLOT}
  else if (type_ = 'TFhirSlot') then
    result := parseSlot(jsn)
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  else if (type_ = 'TFhirSpecimen') then
    result := parseSpecimen(jsn)
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  else if (type_ = 'TFhirStructureDefinition') then
    result := parseStructureDefinition(jsn)
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  else if (type_ = 'TFhirStructureMap') then
    result := parseStructureMap(jsn)
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  else if (type_ = 'TFhirSubscription') then
    result := parseSubscription(jsn)
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
  else if (type_ = 'TFhirSubstance') then
    result := parseSubstance(jsn)
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUPPLYDELIVERY}
  else if (type_ = 'TFhirSupplyDelivery') then
    result := parseSupplyDelivery(jsn)
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  else if (type_ = 'TFhirSupplyRequest') then
    result := parseSupplyRequest(jsn)
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  else if (type_ = 'TFhirTask') then
    result := parseTask(jsn)
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TESTREPORT}
  else if (type_ = 'TFhirTestReport') then
    result := parseTestReport(jsn)
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  else if (type_ = 'TFhirTestScript') then
    result := parseTestScript(jsn)
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
  else if (type_ = 'TFhirValueSet') then
    result := parseValueSet(jsn)
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  else if (type_ = 'TFhirVisionPrescription') then
    result := parseVisionPrescription(jsn)
{$ENDIF FHIR_VISIONPRESCRIPTION}
  else
    raise EJsonException.create('error: the element '+type_+' is not a valid fragment name');
end;

function TFHIRJsonParser.ParseDataType(jsn : TJsonObject; name : String; type_ : TFHIRTypeClass) : TFHIRType;
begin
   if (type_ = TFhirExtension) then
    result := parseExtension(jsn)
  else if (type_ = TFhirNarrative) then
    result := parseNarrative(jsn)
  else if (type_ = TFhirContributor) then
    result := parseContributor(jsn)
  else if (type_ = TFhirAttachment) then
    result := parseAttachment(jsn)
  else if (type_ = TFhirDataRequirement) then
    result := parseDataRequirement(jsn)
  else if (type_ = TFhirDosage) then
    result := parseDosage(jsn)
  else if (type_ = TFhirIdentifier) then
    result := parseIdentifier(jsn)
  else if (type_ = TFhirCoding) then
    result := parseCoding(jsn)
  else if (type_ = TFhirSampledData) then
    result := parseSampledData(jsn)
  else if (type_ = TFhirRatio) then
    result := parseRatio(jsn)
  else if (type_ = TFhirReference) then
    result := parseReference(jsn)
  else if (type_ = TFhirTriggerDefinition) then
    result := parseTriggerDefinition(jsn)
  else if (type_ = TFhirPeriod) then
    result := parsePeriod(jsn)
  else if (type_ = TFhirQuantity) then
    result := parseQuantity(jsn)
  else if (type_ = TFhirRange) then
    result := parseRange(jsn)
  else if (type_ = TFhirRelatedArtifact) then
    result := parseRelatedArtifact(jsn)
  else if (type_ = TFhirAnnotation) then
    result := parseAnnotation(jsn)
  else if (type_ = TFhirContactDetail) then
    result := parseContactDetail(jsn)
  else if (type_ = TFhirUsageContext) then
    result := parseUsageContext(jsn)
  else if (type_ = TFhirSignature) then
    result := parseSignature(jsn)
  else if (type_ = TFhirCodeableConcept) then
    result := parseCodeableConcept(jsn)
  else if (type_ = TFhirParameterDefinition) then
    result := parseParameterDefinition(jsn)
  else if (type_ = TFhirContactPoint) then
    result := parseContactPoint(jsn)
  else if (type_ = TFhirHumanName) then
    result := parseHumanName(jsn)
  else if (type_ = TFhirMeta) then
    result := parseMeta(jsn)
  else if (type_ = TFhirAddress) then
    result := parseAddress(jsn)
  else if (type_ = TFhirElementDefinition) then
    result := parseElementDefinition(jsn)
  else if (type_ = TFhirTiming) then
    result := parseTiming(jsn)
  else if (type_ = TFhirCount) then
    result := parseCount(jsn)
  else if (type_ = TFhirMoney) then
    result := parseMoney(jsn)
  else if (type_ = TFhirAge) then
    result := parseAge(jsn)
  else if (type_ = TFhirDistance) then
    result := parseDistance(jsn)
  else if (type_ = TFhirDuration) then
    result := parseDuration(jsn)
  else
    raise EJsonException.create('Unknown Type');
end;

procedure TFHIRJsonComposer.ComposeBase(json: TJSONWriter; name: String; base: TFHIRObject);
begin
   if (base is TFhirDate) then
    composeDateValue(json, name, TFhirDate(base), false)
  else if (base is TFhirDateTime) then
    composeDateTimeValue(json, name, TFhirDateTime(base), false)
  else if (base is TFhirString) then
    composeStringValue(json, name, TFhirString(base), false)
  else if (base is TFhirInteger) then
    composeIntegerValue(json, name, TFhirInteger(base), false)
  else if (base is TFhirUri) then
    composeUriValue(json, name, TFhirUri(base), false)
  else if (base is TFhirInstant) then
    composeInstantValue(json, name, TFhirInstant(base), false)
  else if (base is TFhirXhtml) then
    composeXhtmlValue(json, name, TFhirXhtml(base), false)
  else if (base is TFhirBoolean) then
    composeBooleanValue(json, name, TFhirBoolean(base), false)
  else if (base is TFhirBase64Binary) then
    composeBase64BinaryValue(json, name, TFhirBase64Binary(base), false)
  else if (base is TFhirTime) then
    composeTimeValue(json, name, TFhirTime(base), false)
  else if (base is TFhirDecimal) then
    composeDecimalValue(json, name, TFhirDecimal(base), false)
  else if (base is TFhirCode) then
    composeCodeValue(json, name, TFhirCode(base), false)
  else if (base is TFhirOid) then
    composeOidValue(json, name, TFhirOid(base), false)
  else if (base is TFhirUuid) then
    composeUuidValue(json, name, TFhirUuid(base), false)
  else if (base is TFhirMarkdown) then
    composeMarkdownValue(json, name, TFhirMarkdown(base), false)
  else if (base is TFhirUnsignedInt) then
    composeUnsignedIntValue(json, name, TFhirUnsignedInt(base), false)
  else if (base is TFhirId) then
    composeIdValue(json, name, TFhirId(base), false)
  else if (base is TFhirPositiveInt) then
    composePositiveIntValue(json, name, TFhirPositiveInt(base), false)
{$IFDEF FHIR_PARAMETERS}
  else if (base is TFhirParametersParameter) then
    composeParametersParameter(json, name, TFhirParametersParameter(base), false)
  else if (base is TFhirParameters) then
    composeParameters(json, name, TFhirParameters(base), false)
{$ENDIF FHIR_PARAMETERS}
  else if (base is TFhirExtension) then
    composeExtension(json, name, TFhirExtension(base), false)
  else if (base is TFhirNarrative) then
    composeNarrative(json, name, TFhirNarrative(base), false)
  else if (base is TFhirContributor) then
    composeContributor(json, name, TFhirContributor(base), false)
  else if (base is TFhirAttachment) then
    composeAttachment(json, name, TFhirAttachment(base), false)
  else if (base is TFhirDataRequirementCodeFilter) then
    composeDataRequirementCodeFilter(json, name, TFhirDataRequirementCodeFilter(base), false)
  else if (base is TFhirDataRequirementDateFilter) then
    composeDataRequirementDateFilter(json, name, TFhirDataRequirementDateFilter(base), false)
  else if (base is TFhirDataRequirement) then
    composeDataRequirement(json, name, TFhirDataRequirement(base), false)
  else if (base is TFhirDosage) then
    composeDosage(json, name, TFhirDosage(base), false)
  else if (base is TFhirIdentifier) then
    composeIdentifier(json, name, TFhirIdentifier(base), false)
  else if (base is TFhirCoding) then
    composeCoding(json, name, TFhirCoding(base), false)
  else if (base is TFhirSampledData) then
    composeSampledData(json, name, TFhirSampledData(base), false)
  else if (base is TFhirRatio) then
    composeRatio(json, name, TFhirRatio(base), false)
  else if (base is TFhirReference) then
    composeReference(json, name, TFhirReference(base), false)
  else if (base is TFhirTriggerDefinition) then
    composeTriggerDefinition(json, name, TFhirTriggerDefinition(base), false)
  else if (base is TFhirPeriod) then
    composePeriod(json, name, TFhirPeriod(base), false)
  else if (base is TFhirQuantity) then
    composeQuantity(json, name, TFhirQuantity(base), false)
  else if (base is TFhirRange) then
    composeRange(json, name, TFhirRange(base), false)
  else if (base is TFhirRelatedArtifact) then
    composeRelatedArtifact(json, name, TFhirRelatedArtifact(base), false)
  else if (base is TFhirAnnotation) then
    composeAnnotation(json, name, TFhirAnnotation(base), false)
  else if (base is TFhirContactDetail) then
    composeContactDetail(json, name, TFhirContactDetail(base), false)
  else if (base is TFhirUsageContext) then
    composeUsageContext(json, name, TFhirUsageContext(base), false)
  else if (base is TFhirSignature) then
    composeSignature(json, name, TFhirSignature(base), false)
  else if (base is TFhirCodeableConcept) then
    composeCodeableConcept(json, name, TFhirCodeableConcept(base), false)
  else if (base is TFhirParameterDefinition) then
    composeParameterDefinition(json, name, TFhirParameterDefinition(base), false)
  else if (base is TFhirContactPoint) then
    composeContactPoint(json, name, TFhirContactPoint(base), false)
  else if (base is TFhirHumanName) then
    composeHumanName(json, name, TFhirHumanName(base), false)
  else if (base is TFhirMeta) then
    composeMeta(json, name, TFhirMeta(base), false)
  else if (base is TFhirAddress) then
    composeAddress(json, name, TFhirAddress(base), false)
  else if (base is TFhirElementDefinitionSlicing) then
    composeElementDefinitionSlicing(json, name, TFhirElementDefinitionSlicing(base), false)
  else if (base is TFhirElementDefinitionSlicingDiscriminator) then
    composeElementDefinitionSlicingDiscriminator(json, name, TFhirElementDefinitionSlicingDiscriminator(base), false)
  else if (base is TFhirElementDefinitionBase) then
    composeElementDefinitionBase(json, name, TFhirElementDefinitionBase(base), false)
  else if (base is TFhirElementDefinitionType) then
    composeElementDefinitionType(json, name, TFhirElementDefinitionType(base), false)
  else if (base is TFhirElementDefinitionExample) then
    composeElementDefinitionExample(json, name, TFhirElementDefinitionExample(base), false)
  else if (base is TFhirElementDefinitionConstraint) then
    composeElementDefinitionConstraint(json, name, TFhirElementDefinitionConstraint(base), false)
  else if (base is TFhirElementDefinitionBinding) then
    composeElementDefinitionBinding(json, name, TFhirElementDefinitionBinding(base), false)
  else if (base is TFhirElementDefinitionMapping) then
    composeElementDefinitionMapping(json, name, TFhirElementDefinitionMapping(base), false)
  else if (base is TFhirElementDefinition) then
    composeElementDefinition(json, name, TFhirElementDefinition(base), false)
  else if (base is TFhirTimingRepeat) then
    composeTimingRepeat(json, name, TFhirTimingRepeat(base), false)
  else if (base is TFhirTiming) then
    composeTiming(json, name, TFhirTiming(base), false)
  else if (base is TFhirCount) then
    composeCount(json, name, TFhirCount(base), false)
  else if (base is TFhirMoney) then
    composeMoney(json, name, TFhirMoney(base), false)
  else if (base is TFhirAge) then
    composeAge(json, name, TFhirAge(base), false)
  else if (base is TFhirDistance) then
    composeDistance(json, name, TFhirDistance(base), false)
  else if (base is TFhirDuration) then
    composeDuration(json, name, TFhirDuration(base), false)
{$IFDEF FHIR_ACCOUNT}
  else if (base is TFhirAccountCoverage) then
    composeAccountCoverage(json, name, TFhirAccountCoverage(base), false)
  else if (base is TFhirAccountGuarantor) then
    composeAccountGuarantor(json, name, TFhirAccountGuarantor(base), false)
  else if (base is TFhirAccount) then
    composeAccount(json, name, TFhirAccount(base), false)
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  else if (base is TFhirActivityDefinitionParticipant) then
    composeActivityDefinitionParticipant(json, name, TFhirActivityDefinitionParticipant(base), false)
  else if (base is TFhirActivityDefinitionDynamicValue) then
    composeActivityDefinitionDynamicValue(json, name, TFhirActivityDefinitionDynamicValue(base), false)
  else if (base is TFhirActivityDefinition) then
    composeActivityDefinition(json, name, TFhirActivityDefinition(base), false)
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  else if (base is TFhirAdverseEventSuspectEntity) then
    composeAdverseEventSuspectEntity(json, name, TFhirAdverseEventSuspectEntity(base), false)
  else if (base is TFhirAdverseEvent) then
    composeAdverseEvent(json, name, TFhirAdverseEvent(base), false)
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  else if (base is TFhirAllergyIntoleranceReaction) then
    composeAllergyIntoleranceReaction(json, name, TFhirAllergyIntoleranceReaction(base), false)
  else if (base is TFhirAllergyIntolerance) then
    composeAllergyIntolerance(json, name, TFhirAllergyIntolerance(base), false)
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  else if (base is TFhirAppointmentParticipant) then
    composeAppointmentParticipant(json, name, TFhirAppointmentParticipant(base), false)
  else if (base is TFhirAppointment) then
    composeAppointment(json, name, TFhirAppointment(base), false)
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  else if (base is TFhirAppointmentResponse) then
    composeAppointmentResponse(json, name, TFhirAppointmentResponse(base), false)
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  else if (base is TFhirAuditEventAgent) then
    composeAuditEventAgent(json, name, TFhirAuditEventAgent(base), false)
  else if (base is TFhirAuditEventAgentNetwork) then
    composeAuditEventAgentNetwork(json, name, TFhirAuditEventAgentNetwork(base), false)
  else if (base is TFhirAuditEventSource) then
    composeAuditEventSource(json, name, TFhirAuditEventSource(base), false)
  else if (base is TFhirAuditEventEntity) then
    composeAuditEventEntity(json, name, TFhirAuditEventEntity(base), false)
  else if (base is TFhirAuditEventEntityDetail) then
    composeAuditEventEntityDetail(json, name, TFhirAuditEventEntityDetail(base), false)
  else if (base is TFhirAuditEvent) then
    composeAuditEvent(json, name, TFhirAuditEvent(base), false)
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  else if (base is TFhirBasic) then
    composeBasic(json, name, TFhirBasic(base), false)
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  else if (base is TFhirBinary) then
    composeBinary(json, name, TFhirBinary(base), false)
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BODYSITE}
  else if (base is TFhirBodySite) then
    composeBodySite(json, name, TFhirBodySite(base), false)
{$ENDIF FHIR_BODYSITE}
{$IFDEF FHIR_BUNDLE}
  else if (base is TFhirBundleLink) then
    composeBundleLink(json, name, TFhirBundleLink(base), false)
  else if (base is TFhirBundleEntry) then
    composeBundleEntry(json, name, TFhirBundleEntry(base), false)
  else if (base is TFhirBundleEntrySearch) then
    composeBundleEntrySearch(json, name, TFhirBundleEntrySearch(base), false)
  else if (base is TFhirBundleEntryRequest) then
    composeBundleEntryRequest(json, name, TFhirBundleEntryRequest(base), false)
  else if (base is TFhirBundleEntryResponse) then
    composeBundleEntryResponse(json, name, TFhirBundleEntryResponse(base), false)
  else if (base is TFhirBundle) then
    composeBundle(json, name, TFhirBundle(base), false)
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  else if (base is TFhirCapabilityStatementSoftware) then
    composeCapabilityStatementSoftware(json, name, TFhirCapabilityStatementSoftware(base), false)
  else if (base is TFhirCapabilityStatementImplementation) then
    composeCapabilityStatementImplementation(json, name, TFhirCapabilityStatementImplementation(base), false)
  else if (base is TFhirCapabilityStatementRest) then
    composeCapabilityStatementRest(json, name, TFhirCapabilityStatementRest(base), false)
  else if (base is TFhirCapabilityStatementRestSecurity) then
    composeCapabilityStatementRestSecurity(json, name, TFhirCapabilityStatementRestSecurity(base), false)
  else if (base is TFhirCapabilityStatementRestSecurityCertificate) then
    composeCapabilityStatementRestSecurityCertificate(json, name, TFhirCapabilityStatementRestSecurityCertificate(base), false)
  else if (base is TFhirCapabilityStatementRestResource) then
    composeCapabilityStatementRestResource(json, name, TFhirCapabilityStatementRestResource(base), false)
  else if (base is TFhirCapabilityStatementRestResourceInteraction) then
    composeCapabilityStatementRestResourceInteraction(json, name, TFhirCapabilityStatementRestResourceInteraction(base), false)
  else if (base is TFhirCapabilityStatementRestResourceSearchParam) then
    composeCapabilityStatementRestResourceSearchParam(json, name, TFhirCapabilityStatementRestResourceSearchParam(base), false)
  else if (base is TFhirCapabilityStatementRestInteraction) then
    composeCapabilityStatementRestInteraction(json, name, TFhirCapabilityStatementRestInteraction(base), false)
  else if (base is TFhirCapabilityStatementRestOperation) then
    composeCapabilityStatementRestOperation(json, name, TFhirCapabilityStatementRestOperation(base), false)
  else if (base is TFhirCapabilityStatementMessaging) then
    composeCapabilityStatementMessaging(json, name, TFhirCapabilityStatementMessaging(base), false)
  else if (base is TFhirCapabilityStatementMessagingEndpoint) then
    composeCapabilityStatementMessagingEndpoint(json, name, TFhirCapabilityStatementMessagingEndpoint(base), false)
  else if (base is TFhirCapabilityStatementMessagingSupportedMessage) then
    composeCapabilityStatementMessagingSupportedMessage(json, name, TFhirCapabilityStatementMessagingSupportedMessage(base), false)
  else if (base is TFhirCapabilityStatementMessagingEvent) then
    composeCapabilityStatementMessagingEvent(json, name, TFhirCapabilityStatementMessagingEvent(base), false)
  else if (base is TFhirCapabilityStatementDocument) then
    composeCapabilityStatementDocument(json, name, TFhirCapabilityStatementDocument(base), false)
  else if (base is TFhirCapabilityStatement) then
    composeCapabilityStatement(json, name, TFhirCapabilityStatement(base), false)
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  else if (base is TFhirCarePlanActivity) then
    composeCarePlanActivity(json, name, TFhirCarePlanActivity(base), false)
  else if (base is TFhirCarePlanActivityDetail) then
    composeCarePlanActivityDetail(json, name, TFhirCarePlanActivityDetail(base), false)
  else if (base is TFhirCarePlan) then
    composeCarePlan(json, name, TFhirCarePlan(base), false)
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  else if (base is TFhirCareTeamParticipant) then
    composeCareTeamParticipant(json, name, TFhirCareTeamParticipant(base), false)
  else if (base is TFhirCareTeam) then
    composeCareTeam(json, name, TFhirCareTeam(base), false)
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CHARGEITEM}
  else if (base is TFhirChargeItemParticipant) then
    composeChargeItemParticipant(json, name, TFhirChargeItemParticipant(base), false)
  else if (base is TFhirChargeItem) then
    composeChargeItem(json, name, TFhirChargeItem(base), false)
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CLAIM}
  else if (base is TFhirClaimRelated) then
    composeClaimRelated(json, name, TFhirClaimRelated(base), false)
  else if (base is TFhirClaimPayee) then
    composeClaimPayee(json, name, TFhirClaimPayee(base), false)
  else if (base is TFhirClaimCareTeam) then
    composeClaimCareTeam(json, name, TFhirClaimCareTeam(base), false)
  else if (base is TFhirClaimInformation) then
    composeClaimInformation(json, name, TFhirClaimInformation(base), false)
  else if (base is TFhirClaimDiagnosis) then
    composeClaimDiagnosis(json, name, TFhirClaimDiagnosis(base), false)
  else if (base is TFhirClaimProcedure) then
    composeClaimProcedure(json, name, TFhirClaimProcedure(base), false)
  else if (base is TFhirClaimInsurance) then
    composeClaimInsurance(json, name, TFhirClaimInsurance(base), false)
  else if (base is TFhirClaimAccident) then
    composeClaimAccident(json, name, TFhirClaimAccident(base), false)
  else if (base is TFhirClaimItem) then
    composeClaimItem(json, name, TFhirClaimItem(base), false)
  else if (base is TFhirClaimItemDetail) then
    composeClaimItemDetail(json, name, TFhirClaimItemDetail(base), false)
  else if (base is TFhirClaimItemDetailSubDetail) then
    composeClaimItemDetailSubDetail(json, name, TFhirClaimItemDetailSubDetail(base), false)
  else if (base is TFhirClaim) then
    composeClaim(json, name, TFhirClaim(base), false)
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  else if (base is TFhirClaimResponseItem) then
    composeClaimResponseItem(json, name, TFhirClaimResponseItem(base), false)
  else if (base is TFhirClaimResponseItemAdjudication) then
    composeClaimResponseItemAdjudication(json, name, TFhirClaimResponseItemAdjudication(base), false)
  else if (base is TFhirClaimResponseItemDetail) then
    composeClaimResponseItemDetail(json, name, TFhirClaimResponseItemDetail(base), false)
  else if (base is TFhirClaimResponseItemDetailSubDetail) then
    composeClaimResponseItemDetailSubDetail(json, name, TFhirClaimResponseItemDetailSubDetail(base), false)
  else if (base is TFhirClaimResponseAddItem) then
    composeClaimResponseAddItem(json, name, TFhirClaimResponseAddItem(base), false)
  else if (base is TFhirClaimResponseAddItemDetail) then
    composeClaimResponseAddItemDetail(json, name, TFhirClaimResponseAddItemDetail(base), false)
  else if (base is TFhirClaimResponseError) then
    composeClaimResponseError(json, name, TFhirClaimResponseError(base), false)
  else if (base is TFhirClaimResponsePayment) then
    composeClaimResponsePayment(json, name, TFhirClaimResponsePayment(base), false)
  else if (base is TFhirClaimResponseProcessNote) then
    composeClaimResponseProcessNote(json, name, TFhirClaimResponseProcessNote(base), false)
  else if (base is TFhirClaimResponseInsurance) then
    composeClaimResponseInsurance(json, name, TFhirClaimResponseInsurance(base), false)
  else if (base is TFhirClaimResponse) then
    composeClaimResponse(json, name, TFhirClaimResponse(base), false)
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  else if (base is TFhirClinicalImpressionInvestigation) then
    composeClinicalImpressionInvestigation(json, name, TFhirClinicalImpressionInvestigation(base), false)
  else if (base is TFhirClinicalImpressionFinding) then
    composeClinicalImpressionFinding(json, name, TFhirClinicalImpressionFinding(base), false)
  else if (base is TFhirClinicalImpression) then
    composeClinicalImpression(json, name, TFhirClinicalImpression(base), false)
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
  else if (base is TFhirCodeSystemFilter) then
    composeCodeSystemFilter(json, name, TFhirCodeSystemFilter(base), false)
  else if (base is TFhirCodeSystemProperty) then
    composeCodeSystemProperty(json, name, TFhirCodeSystemProperty(base), false)
  else if (base is TFhirCodeSystemConcept) then
    composeCodeSystemConcept(json, name, TFhirCodeSystemConcept(base), false)
  else if (base is TFhirCodeSystemConceptDesignation) then
    composeCodeSystemConceptDesignation(json, name, TFhirCodeSystemConceptDesignation(base), false)
  else if (base is TFhirCodeSystemConceptProperty) then
    composeCodeSystemConceptProperty(json, name, TFhirCodeSystemConceptProperty(base), false)
  else if (base is TFhirCodeSystem) then
    composeCodeSystem(json, name, TFhirCodeSystem(base), false)
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  else if (base is TFhirCommunicationPayload) then
    composeCommunicationPayload(json, name, TFhirCommunicationPayload(base), false)
  else if (base is TFhirCommunication) then
    composeCommunication(json, name, TFhirCommunication(base), false)
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  else if (base is TFhirCommunicationRequestPayload) then
    composeCommunicationRequestPayload(json, name, TFhirCommunicationRequestPayload(base), false)
  else if (base is TFhirCommunicationRequestRequester) then
    composeCommunicationRequestRequester(json, name, TFhirCommunicationRequestRequester(base), false)
  else if (base is TFhirCommunicationRequest) then
    composeCommunicationRequest(json, name, TFhirCommunicationRequest(base), false)
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  else if (base is TFhirCompartmentDefinitionResource) then
    composeCompartmentDefinitionResource(json, name, TFhirCompartmentDefinitionResource(base), false)
  else if (base is TFhirCompartmentDefinition) then
    composeCompartmentDefinition(json, name, TFhirCompartmentDefinition(base), false)
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  else if (base is TFhirCompositionAttester) then
    composeCompositionAttester(json, name, TFhirCompositionAttester(base), false)
  else if (base is TFhirCompositionRelatesTo) then
    composeCompositionRelatesTo(json, name, TFhirCompositionRelatesTo(base), false)
  else if (base is TFhirCompositionEvent) then
    composeCompositionEvent(json, name, TFhirCompositionEvent(base), false)
  else if (base is TFhirCompositionSection) then
    composeCompositionSection(json, name, TFhirCompositionSection(base), false)
  else if (base is TFhirComposition) then
    composeComposition(json, name, TFhirComposition(base), false)
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  else if (base is TFhirConceptMapGroup) then
    composeConceptMapGroup(json, name, TFhirConceptMapGroup(base), false)
  else if (base is TFhirConceptMapGroupElement) then
    composeConceptMapGroupElement(json, name, TFhirConceptMapGroupElement(base), false)
  else if (base is TFhirConceptMapGroupElementTarget) then
    composeConceptMapGroupElementTarget(json, name, TFhirConceptMapGroupElementTarget(base), false)
  else if (base is TFhirConceptMapGroupElementTargetDependsOn) then
    composeConceptMapGroupElementTargetDependsOn(json, name, TFhirConceptMapGroupElementTargetDependsOn(base), false)
  else if (base is TFhirConceptMapGroupUnmapped) then
    composeConceptMapGroupUnmapped(json, name, TFhirConceptMapGroupUnmapped(base), false)
  else if (base is TFhirConceptMap) then
    composeConceptMap(json, name, TFhirConceptMap(base), false)
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  else if (base is TFhirConditionStage) then
    composeConditionStage(json, name, TFhirConditionStage(base), false)
  else if (base is TFhirConditionEvidence) then
    composeConditionEvidence(json, name, TFhirConditionEvidence(base), false)
  else if (base is TFhirCondition) then
    composeCondition(json, name, TFhirCondition(base), false)
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  else if (base is TFhirConsentActor) then
    composeConsentActor(json, name, TFhirConsentActor(base), false)
  else if (base is TFhirConsentPolicy) then
    composeConsentPolicy(json, name, TFhirConsentPolicy(base), false)
  else if (base is TFhirConsentData) then
    composeConsentData(json, name, TFhirConsentData(base), false)
  else if (base is TFhirConsentExcept) then
    composeConsentExcept(json, name, TFhirConsentExcept(base), false)
  else if (base is TFhirConsentExceptActor) then
    composeConsentExceptActor(json, name, TFhirConsentExceptActor(base), false)
  else if (base is TFhirConsentExceptData) then
    composeConsentExceptData(json, name, TFhirConsentExceptData(base), false)
  else if (base is TFhirConsent) then
    composeConsent(json, name, TFhirConsent(base), false)
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  else if (base is TFhirContractAgent) then
    composeContractAgent(json, name, TFhirContractAgent(base), false)
  else if (base is TFhirContractSigner) then
    composeContractSigner(json, name, TFhirContractSigner(base), false)
  else if (base is TFhirContractValuedItem) then
    composeContractValuedItem(json, name, TFhirContractValuedItem(base), false)
  else if (base is TFhirContractTerm) then
    composeContractTerm(json, name, TFhirContractTerm(base), false)
  else if (base is TFhirContractTermAgent) then
    composeContractTermAgent(json, name, TFhirContractTermAgent(base), false)
  else if (base is TFhirContractTermValuedItem) then
    composeContractTermValuedItem(json, name, TFhirContractTermValuedItem(base), false)
  else if (base is TFhirContractFriendly) then
    composeContractFriendly(json, name, TFhirContractFriendly(base), false)
  else if (base is TFhirContractLegal) then
    composeContractLegal(json, name, TFhirContractLegal(base), false)
  else if (base is TFhirContractRule) then
    composeContractRule(json, name, TFhirContractRule(base), false)
  else if (base is TFhirContract) then
    composeContract(json, name, TFhirContract(base), false)
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  else if (base is TFhirCoverageGrouping) then
    composeCoverageGrouping(json, name, TFhirCoverageGrouping(base), false)
  else if (base is TFhirCoverage) then
    composeCoverage(json, name, TFhirCoverage(base), false)
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_DATAELEMENT}
  else if (base is TFhirDataElementMapping) then
    composeDataElementMapping(json, name, TFhirDataElementMapping(base), false)
  else if (base is TFhirDataElement) then
    composeDataElement(json, name, TFhirDataElement(base), false)
{$ENDIF FHIR_DATAELEMENT}
{$IFDEF FHIR_DETECTEDISSUE}
  else if (base is TFhirDetectedIssueMitigation) then
    composeDetectedIssueMitigation(json, name, TFhirDetectedIssueMitigation(base), false)
  else if (base is TFhirDetectedIssue) then
    composeDetectedIssue(json, name, TFhirDetectedIssue(base), false)
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  else if (base is TFhirDeviceUdi) then
    composeDeviceUdi(json, name, TFhirDeviceUdi(base), false)
  else if (base is TFhirDevice) then
    composeDevice(json, name, TFhirDevice(base), false)
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICECOMPONENT}
  else if (base is TFhirDeviceComponentProductionSpecification) then
    composeDeviceComponentProductionSpecification(json, name, TFhirDeviceComponentProductionSpecification(base), false)
  else if (base is TFhirDeviceComponent) then
    composeDeviceComponent(json, name, TFhirDeviceComponent(base), false)
{$ENDIF FHIR_DEVICECOMPONENT}
{$IFDEF FHIR_DEVICEMETRIC}
  else if (base is TFhirDeviceMetricCalibration) then
    composeDeviceMetricCalibration(json, name, TFhirDeviceMetricCalibration(base), false)
  else if (base is TFhirDeviceMetric) then
    composeDeviceMetric(json, name, TFhirDeviceMetric(base), false)
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  else if (base is TFhirDeviceRequestRequester) then
    composeDeviceRequestRequester(json, name, TFhirDeviceRequestRequester(base), false)
  else if (base is TFhirDeviceRequest) then
    composeDeviceRequest(json, name, TFhirDeviceRequest(base), false)
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  else if (base is TFhirDeviceUseStatement) then
    composeDeviceUseStatement(json, name, TFhirDeviceUseStatement(base), false)
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  else if (base is TFhirDiagnosticReportPerformer) then
    composeDiagnosticReportPerformer(json, name, TFhirDiagnosticReportPerformer(base), false)
  else if (base is TFhirDiagnosticReportImage) then
    composeDiagnosticReportImage(json, name, TFhirDiagnosticReportImage(base), false)
  else if (base is TFhirDiagnosticReport) then
    composeDiagnosticReport(json, name, TFhirDiagnosticReport(base), false)
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  else if (base is TFhirDocumentManifestContent) then
    composeDocumentManifestContent(json, name, TFhirDocumentManifestContent(base), false)
  else if (base is TFhirDocumentManifestRelated) then
    composeDocumentManifestRelated(json, name, TFhirDocumentManifestRelated(base), false)
  else if (base is TFhirDocumentManifest) then
    composeDocumentManifest(json, name, TFhirDocumentManifest(base), false)
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  else if (base is TFhirDocumentReferenceRelatesTo) then
    composeDocumentReferenceRelatesTo(json, name, TFhirDocumentReferenceRelatesTo(base), false)
  else if (base is TFhirDocumentReferenceContent) then
    composeDocumentReferenceContent(json, name, TFhirDocumentReferenceContent(base), false)
  else if (base is TFhirDocumentReferenceContext) then
    composeDocumentReferenceContext(json, name, TFhirDocumentReferenceContext(base), false)
  else if (base is TFhirDocumentReferenceContextRelated) then
    composeDocumentReferenceContextRelated(json, name, TFhirDocumentReferenceContextRelated(base), false)
  else if (base is TFhirDocumentReference) then
    composeDocumentReference(json, name, TFhirDocumentReference(base), false)
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ELIGIBILITYREQUEST}
  else if (base is TFhirEligibilityRequest) then
    composeEligibilityRequest(json, name, TFhirEligibilityRequest(base), false)
{$ENDIF FHIR_ELIGIBILITYREQUEST}
{$IFDEF FHIR_ELIGIBILITYRESPONSE}
  else if (base is TFhirEligibilityResponseInsurance) then
    composeEligibilityResponseInsurance(json, name, TFhirEligibilityResponseInsurance(base), false)
  else if (base is TFhirEligibilityResponseInsuranceBenefitBalance) then
    composeEligibilityResponseInsuranceBenefitBalance(json, name, TFhirEligibilityResponseInsuranceBenefitBalance(base), false)
  else if (base is TFhirEligibilityResponseInsuranceBenefitBalanceFinancial) then
    composeEligibilityResponseInsuranceBenefitBalanceFinancial(json, name, TFhirEligibilityResponseInsuranceBenefitBalanceFinancial(base), false)
  else if (base is TFhirEligibilityResponseError) then
    composeEligibilityResponseError(json, name, TFhirEligibilityResponseError(base), false)
  else if (base is TFhirEligibilityResponse) then
    composeEligibilityResponse(json, name, TFhirEligibilityResponse(base), false)
{$ENDIF FHIR_ELIGIBILITYRESPONSE}
{$IFDEF FHIR_ENCOUNTER}
  else if (base is TFhirEncounterStatusHistory) then
    composeEncounterStatusHistory(json, name, TFhirEncounterStatusHistory(base), false)
  else if (base is TFhirEncounterClassHistory) then
    composeEncounterClassHistory(json, name, TFhirEncounterClassHistory(base), false)
  else if (base is TFhirEncounterParticipant) then
    composeEncounterParticipant(json, name, TFhirEncounterParticipant(base), false)
  else if (base is TFhirEncounterDiagnosis) then
    composeEncounterDiagnosis(json, name, TFhirEncounterDiagnosis(base), false)
  else if (base is TFhirEncounterHospitalization) then
    composeEncounterHospitalization(json, name, TFhirEncounterHospitalization(base), false)
  else if (base is TFhirEncounterLocation) then
    composeEncounterLocation(json, name, TFhirEncounterLocation(base), false)
  else if (base is TFhirEncounter) then
    composeEncounter(json, name, TFhirEncounter(base), false)
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  else if (base is TFhirEndpoint) then
    composeEndpoint(json, name, TFhirEndpoint(base), false)
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  else if (base is TFhirEnrollmentRequest) then
    composeEnrollmentRequest(json, name, TFhirEnrollmentRequest(base), false)
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  else if (base is TFhirEnrollmentResponse) then
    composeEnrollmentResponse(json, name, TFhirEnrollmentResponse(base), false)
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
  else if (base is TFhirEpisodeOfCareStatusHistory) then
    composeEpisodeOfCareStatusHistory(json, name, TFhirEpisodeOfCareStatusHistory(base), false)
  else if (base is TFhirEpisodeOfCareDiagnosis) then
    composeEpisodeOfCareDiagnosis(json, name, TFhirEpisodeOfCareDiagnosis(base), false)
  else if (base is TFhirEpisodeOfCare) then
    composeEpisodeOfCare(json, name, TFhirEpisodeOfCare(base), false)
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EXPANSIONPROFILE}
  else if (base is TFhirExpansionProfileFixedVersion) then
    composeExpansionProfileFixedVersion(json, name, TFhirExpansionProfileFixedVersion(base), false)
  else if (base is TFhirExpansionProfileExcludedSystem) then
    composeExpansionProfileExcludedSystem(json, name, TFhirExpansionProfileExcludedSystem(base), false)
  else if (base is TFhirExpansionProfileDesignation) then
    composeExpansionProfileDesignation(json, name, TFhirExpansionProfileDesignation(base), false)
  else if (base is TFhirExpansionProfileDesignationInclude) then
    composeExpansionProfileDesignationInclude(json, name, TFhirExpansionProfileDesignationInclude(base), false)
  else if (base is TFhirExpansionProfileDesignationIncludeDesignation) then
    composeExpansionProfileDesignationIncludeDesignation(json, name, TFhirExpansionProfileDesignationIncludeDesignation(base), false)
  else if (base is TFhirExpansionProfileDesignationExclude) then
    composeExpansionProfileDesignationExclude(json, name, TFhirExpansionProfileDesignationExclude(base), false)
  else if (base is TFhirExpansionProfileDesignationExcludeDesignation) then
    composeExpansionProfileDesignationExcludeDesignation(json, name, TFhirExpansionProfileDesignationExcludeDesignation(base), false)
  else if (base is TFhirExpansionProfile) then
    composeExpansionProfile(json, name, TFhirExpansionProfile(base), false)
{$ENDIF FHIR_EXPANSIONPROFILE}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  else if (base is TFhirExplanationOfBenefitRelated) then
    composeExplanationOfBenefitRelated(json, name, TFhirExplanationOfBenefitRelated(base), false)
  else if (base is TFhirExplanationOfBenefitPayee) then
    composeExplanationOfBenefitPayee(json, name, TFhirExplanationOfBenefitPayee(base), false)
  else if (base is TFhirExplanationOfBenefitInformation) then
    composeExplanationOfBenefitInformation(json, name, TFhirExplanationOfBenefitInformation(base), false)
  else if (base is TFhirExplanationOfBenefitCareTeam) then
    composeExplanationOfBenefitCareTeam(json, name, TFhirExplanationOfBenefitCareTeam(base), false)
  else if (base is TFhirExplanationOfBenefitDiagnosis) then
    composeExplanationOfBenefitDiagnosis(json, name, TFhirExplanationOfBenefitDiagnosis(base), false)
  else if (base is TFhirExplanationOfBenefitProcedure) then
    composeExplanationOfBenefitProcedure(json, name, TFhirExplanationOfBenefitProcedure(base), false)
  else if (base is TFhirExplanationOfBenefitInsurance) then
    composeExplanationOfBenefitInsurance(json, name, TFhirExplanationOfBenefitInsurance(base), false)
  else if (base is TFhirExplanationOfBenefitAccident) then
    composeExplanationOfBenefitAccident(json, name, TFhirExplanationOfBenefitAccident(base), false)
  else if (base is TFhirExplanationOfBenefitItem) then
    composeExplanationOfBenefitItem(json, name, TFhirExplanationOfBenefitItem(base), false)
  else if (base is TFhirExplanationOfBenefitItemAdjudication) then
    composeExplanationOfBenefitItemAdjudication(json, name, TFhirExplanationOfBenefitItemAdjudication(base), false)
  else if (base is TFhirExplanationOfBenefitItemDetail) then
    composeExplanationOfBenefitItemDetail(json, name, TFhirExplanationOfBenefitItemDetail(base), false)
  else if (base is TFhirExplanationOfBenefitItemDetailSubDetail) then
    composeExplanationOfBenefitItemDetailSubDetail(json, name, TFhirExplanationOfBenefitItemDetailSubDetail(base), false)
  else if (base is TFhirExplanationOfBenefitAddItem) then
    composeExplanationOfBenefitAddItem(json, name, TFhirExplanationOfBenefitAddItem(base), false)
  else if (base is TFhirExplanationOfBenefitAddItemDetail) then
    composeExplanationOfBenefitAddItemDetail(json, name, TFhirExplanationOfBenefitAddItemDetail(base), false)
  else if (base is TFhirExplanationOfBenefitPayment) then
    composeExplanationOfBenefitPayment(json, name, TFhirExplanationOfBenefitPayment(base), false)
  else if (base is TFhirExplanationOfBenefitProcessNote) then
    composeExplanationOfBenefitProcessNote(json, name, TFhirExplanationOfBenefitProcessNote(base), false)
  else if (base is TFhirExplanationOfBenefitBenefitBalance) then
    composeExplanationOfBenefitBenefitBalance(json, name, TFhirExplanationOfBenefitBenefitBalance(base), false)
  else if (base is TFhirExplanationOfBenefitBenefitBalanceFinancial) then
    composeExplanationOfBenefitBenefitBalanceFinancial(json, name, TFhirExplanationOfBenefitBenefitBalanceFinancial(base), false)
  else if (base is TFhirExplanationOfBenefit) then
    composeExplanationOfBenefit(json, name, TFhirExplanationOfBenefit(base), false)
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  else if (base is TFhirFamilyMemberHistoryCondition) then
    composeFamilyMemberHistoryCondition(json, name, TFhirFamilyMemberHistoryCondition(base), false)
  else if (base is TFhirFamilyMemberHistory) then
    composeFamilyMemberHistory(json, name, TFhirFamilyMemberHistory(base), false)
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  else if (base is TFhirFlag) then
    composeFlag(json, name, TFhirFlag(base), false)
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  else if (base is TFhirGoalTarget) then
    composeGoalTarget(json, name, TFhirGoalTarget(base), false)
  else if (base is TFhirGoal) then
    composeGoal(json, name, TFhirGoal(base), false)
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  else if (base is TFhirGraphDefinitionLink) then
    composeGraphDefinitionLink(json, name, TFhirGraphDefinitionLink(base), false)
  else if (base is TFhirGraphDefinitionLinkTarget) then
    composeGraphDefinitionLinkTarget(json, name, TFhirGraphDefinitionLinkTarget(base), false)
  else if (base is TFhirGraphDefinitionLinkTargetCompartment) then
    composeGraphDefinitionLinkTargetCompartment(json, name, TFhirGraphDefinitionLinkTargetCompartment(base), false)
  else if (base is TFhirGraphDefinition) then
    composeGraphDefinition(json, name, TFhirGraphDefinition(base), false)
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  else if (base is TFhirGroupCharacteristic) then
    composeGroupCharacteristic(json, name, TFhirGroupCharacteristic(base), false)
  else if (base is TFhirGroupMember) then
    composeGroupMember(json, name, TFhirGroupMember(base), false)
  else if (base is TFhirGroup) then
    composeGroup(json, name, TFhirGroup(base), false)
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  else if (base is TFhirGuidanceResponse) then
    composeGuidanceResponse(json, name, TFhirGuidanceResponse(base), false)
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  else if (base is TFhirHealthcareServiceAvailableTime) then
    composeHealthcareServiceAvailableTime(json, name, TFhirHealthcareServiceAvailableTime(base), false)
  else if (base is TFhirHealthcareServiceNotAvailable) then
    composeHealthcareServiceNotAvailable(json, name, TFhirHealthcareServiceNotAvailable(base), false)
  else if (base is TFhirHealthcareService) then
    composeHealthcareService(json, name, TFhirHealthcareService(base), false)
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGMANIFEST}
  else if (base is TFhirImagingManifestStudy) then
    composeImagingManifestStudy(json, name, TFhirImagingManifestStudy(base), false)
  else if (base is TFhirImagingManifestStudySeries) then
    composeImagingManifestStudySeries(json, name, TFhirImagingManifestStudySeries(base), false)
  else if (base is TFhirImagingManifestStudySeriesInstance) then
    composeImagingManifestStudySeriesInstance(json, name, TFhirImagingManifestStudySeriesInstance(base), false)
  else if (base is TFhirImagingManifest) then
    composeImagingManifest(json, name, TFhirImagingManifest(base), false)
{$ENDIF FHIR_IMAGINGMANIFEST}
{$IFDEF FHIR_IMAGINGSTUDY}
  else if (base is TFhirImagingStudySeries) then
    composeImagingStudySeries(json, name, TFhirImagingStudySeries(base), false)
  else if (base is TFhirImagingStudySeriesInstance) then
    composeImagingStudySeriesInstance(json, name, TFhirImagingStudySeriesInstance(base), false)
  else if (base is TFhirImagingStudy) then
    composeImagingStudy(json, name, TFhirImagingStudy(base), false)
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  else if (base is TFhirImmunizationPractitioner) then
    composeImmunizationPractitioner(json, name, TFhirImmunizationPractitioner(base), false)
  else if (base is TFhirImmunizationExplanation) then
    composeImmunizationExplanation(json, name, TFhirImmunizationExplanation(base), false)
  else if (base is TFhirImmunizationReaction) then
    composeImmunizationReaction(json, name, TFhirImmunizationReaction(base), false)
  else if (base is TFhirImmunizationVaccinationProtocol) then
    composeImmunizationVaccinationProtocol(json, name, TFhirImmunizationVaccinationProtocol(base), false)
  else if (base is TFhirImmunization) then
    composeImmunization(json, name, TFhirImmunization(base), false)
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  else if (base is TFhirImmunizationRecommendationRecommendation) then
    composeImmunizationRecommendationRecommendation(json, name, TFhirImmunizationRecommendationRecommendation(base), false)
  else if (base is TFhirImmunizationRecommendationRecommendationDateCriterion) then
    composeImmunizationRecommendationRecommendationDateCriterion(json, name, TFhirImmunizationRecommendationRecommendationDateCriterion(base), false)
  else if (base is TFhirImmunizationRecommendationRecommendationProtocol) then
    composeImmunizationRecommendationRecommendationProtocol(json, name, TFhirImmunizationRecommendationRecommendationProtocol(base), false)
  else if (base is TFhirImmunizationRecommendation) then
    composeImmunizationRecommendation(json, name, TFhirImmunizationRecommendation(base), false)
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  else if (base is TFhirImplementationGuideDependency) then
    composeImplementationGuideDependency(json, name, TFhirImplementationGuideDependency(base), false)
  else if (base is TFhirImplementationGuidePackage) then
    composeImplementationGuidePackage(json, name, TFhirImplementationGuidePackage(base), false)
  else if (base is TFhirImplementationGuidePackageResource) then
    composeImplementationGuidePackageResource(json, name, TFhirImplementationGuidePackageResource(base), false)
  else if (base is TFhirImplementationGuideGlobal) then
    composeImplementationGuideGlobal(json, name, TFhirImplementationGuideGlobal(base), false)
  else if (base is TFhirImplementationGuidePage) then
    composeImplementationGuidePage(json, name, TFhirImplementationGuidePage(base), false)
  else if (base is TFhirImplementationGuide) then
    composeImplementationGuide(json, name, TFhirImplementationGuide(base), false)
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_LIBRARY}
  else if (base is TFhirLibrary) then
    composeLibrary(json, name, TFhirLibrary(base), false)
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  else if (base is TFhirLinkageItem) then
    composeLinkageItem(json, name, TFhirLinkageItem(base), false)
  else if (base is TFhirLinkage) then
    composeLinkage(json, name, TFhirLinkage(base), false)
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  else if (base is TFhirListEntry) then
    composeListEntry(json, name, TFhirListEntry(base), false)
  else if (base is TFhirList) then
    composeList(json, name, TFhirList(base), false)
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  else if (base is TFhirLocationPosition) then
    composeLocationPosition(json, name, TFhirLocationPosition(base), false)
  else if (base is TFhirLocation) then
    composeLocation(json, name, TFhirLocation(base), false)
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
  else if (base is TFhirMeasureGroup) then
    composeMeasureGroup(json, name, TFhirMeasureGroup(base), false)
  else if (base is TFhirMeasureGroupPopulation) then
    composeMeasureGroupPopulation(json, name, TFhirMeasureGroupPopulation(base), false)
  else if (base is TFhirMeasureGroupStratifier) then
    composeMeasureGroupStratifier(json, name, TFhirMeasureGroupStratifier(base), false)
  else if (base is TFhirMeasureSupplementalData) then
    composeMeasureSupplementalData(json, name, TFhirMeasureSupplementalData(base), false)
  else if (base is TFhirMeasure) then
    composeMeasure(json, name, TFhirMeasure(base), false)
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  else if (base is TFhirMeasureReportGroup) then
    composeMeasureReportGroup(json, name, TFhirMeasureReportGroup(base), false)
  else if (base is TFhirMeasureReportGroupPopulation) then
    composeMeasureReportGroupPopulation(json, name, TFhirMeasureReportGroupPopulation(base), false)
  else if (base is TFhirMeasureReportGroupStratifier) then
    composeMeasureReportGroupStratifier(json, name, TFhirMeasureReportGroupStratifier(base), false)
  else if (base is TFhirMeasureReportGroupStratifierStratum) then
    composeMeasureReportGroupStratifierStratum(json, name, TFhirMeasureReportGroupStratifierStratum(base), false)
  else if (base is TFhirMeasureReportGroupStratifierStratumPopulation) then
    composeMeasureReportGroupStratifierStratumPopulation(json, name, TFhirMeasureReportGroupStratifierStratumPopulation(base), false)
  else if (base is TFhirMeasureReport) then
    composeMeasureReport(json, name, TFhirMeasureReport(base), false)
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  else if (base is TFhirMedia) then
    composeMedia(json, name, TFhirMedia(base), false)
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  else if (base is TFhirMedicationIngredient) then
    composeMedicationIngredient(json, name, TFhirMedicationIngredient(base), false)
  else if (base is TFhirMedicationPackage) then
    composeMedicationPackage(json, name, TFhirMedicationPackage(base), false)
  else if (base is TFhirMedicationPackageContent) then
    composeMedicationPackageContent(json, name, TFhirMedicationPackageContent(base), false)
  else if (base is TFhirMedicationPackageBatch) then
    composeMedicationPackageBatch(json, name, TFhirMedicationPackageBatch(base), false)
  else if (base is TFhirMedication) then
    composeMedication(json, name, TFhirMedication(base), false)
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  else if (base is TFhirMedicationAdministrationPerformer) then
    composeMedicationAdministrationPerformer(json, name, TFhirMedicationAdministrationPerformer(base), false)
  else if (base is TFhirMedicationAdministrationDosage) then
    composeMedicationAdministrationDosage(json, name, TFhirMedicationAdministrationDosage(base), false)
  else if (base is TFhirMedicationAdministration) then
    composeMedicationAdministration(json, name, TFhirMedicationAdministration(base), false)
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  else if (base is TFhirMedicationDispensePerformer) then
    composeMedicationDispensePerformer(json, name, TFhirMedicationDispensePerformer(base), false)
  else if (base is TFhirMedicationDispenseSubstitution) then
    composeMedicationDispenseSubstitution(json, name, TFhirMedicationDispenseSubstitution(base), false)
  else if (base is TFhirMedicationDispense) then
    composeMedicationDispense(json, name, TFhirMedicationDispense(base), false)
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  else if (base is TFhirMedicationRequestRequester) then
    composeMedicationRequestRequester(json, name, TFhirMedicationRequestRequester(base), false)
  else if (base is TFhirMedicationRequestDispenseRequest) then
    composeMedicationRequestDispenseRequest(json, name, TFhirMedicationRequestDispenseRequest(base), false)
  else if (base is TFhirMedicationRequestSubstitution) then
    composeMedicationRequestSubstitution(json, name, TFhirMedicationRequestSubstitution(base), false)
  else if (base is TFhirMedicationRequest) then
    composeMedicationRequest(json, name, TFhirMedicationRequest(base), false)
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  else if (base is TFhirMedicationStatement) then
    composeMedicationStatement(json, name, TFhirMedicationStatement(base), false)
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MESSAGEDEFINITION}
  else if (base is TFhirMessageDefinitionFocus) then
    composeMessageDefinitionFocus(json, name, TFhirMessageDefinitionFocus(base), false)
  else if (base is TFhirMessageDefinitionAllowedResponse) then
    composeMessageDefinitionAllowedResponse(json, name, TFhirMessageDefinitionAllowedResponse(base), false)
  else if (base is TFhirMessageDefinition) then
    composeMessageDefinition(json, name, TFhirMessageDefinition(base), false)
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  else if (base is TFhirMessageHeaderDestination) then
    composeMessageHeaderDestination(json, name, TFhirMessageHeaderDestination(base), false)
  else if (base is TFhirMessageHeaderSource) then
    composeMessageHeaderSource(json, name, TFhirMessageHeaderSource(base), false)
  else if (base is TFhirMessageHeaderResponse) then
    composeMessageHeaderResponse(json, name, TFhirMessageHeaderResponse(base), false)
  else if (base is TFhirMessageHeader) then
    composeMessageHeader(json, name, TFhirMessageHeader(base), false)
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_NAMINGSYSTEM}
  else if (base is TFhirNamingSystemUniqueId) then
    composeNamingSystemUniqueId(json, name, TFhirNamingSystemUniqueId(base), false)
  else if (base is TFhirNamingSystem) then
    composeNamingSystem(json, name, TFhirNamingSystem(base), false)
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  else if (base is TFhirNutritionOrderOralDiet) then
    composeNutritionOrderOralDiet(json, name, TFhirNutritionOrderOralDiet(base), false)
  else if (base is TFhirNutritionOrderOralDietNutrient) then
    composeNutritionOrderOralDietNutrient(json, name, TFhirNutritionOrderOralDietNutrient(base), false)
  else if (base is TFhirNutritionOrderOralDietTexture) then
    composeNutritionOrderOralDietTexture(json, name, TFhirNutritionOrderOralDietTexture(base), false)
  else if (base is TFhirNutritionOrderSupplement) then
    composeNutritionOrderSupplement(json, name, TFhirNutritionOrderSupplement(base), false)
  else if (base is TFhirNutritionOrderEnteralFormula) then
    composeNutritionOrderEnteralFormula(json, name, TFhirNutritionOrderEnteralFormula(base), false)
  else if (base is TFhirNutritionOrderEnteralFormulaAdministration) then
    composeNutritionOrderEnteralFormulaAdministration(json, name, TFhirNutritionOrderEnteralFormulaAdministration(base), false)
  else if (base is TFhirNutritionOrder) then
    composeNutritionOrder(json, name, TFhirNutritionOrder(base), false)
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
  else if (base is TFhirObservationReferenceRange) then
    composeObservationReferenceRange(json, name, TFhirObservationReferenceRange(base), false)
  else if (base is TFhirObservationRelated) then
    composeObservationRelated(json, name, TFhirObservationRelated(base), false)
  else if (base is TFhirObservationComponent) then
    composeObservationComponent(json, name, TFhirObservationComponent(base), false)
  else if (base is TFhirObservation) then
    composeObservation(json, name, TFhirObservation(base), false)
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OPERATIONDEFINITION}
  else if (base is TFhirOperationDefinitionParameter) then
    composeOperationDefinitionParameter(json, name, TFhirOperationDefinitionParameter(base), false)
  else if (base is TFhirOperationDefinitionParameterBinding) then
    composeOperationDefinitionParameterBinding(json, name, TFhirOperationDefinitionParameterBinding(base), false)
  else if (base is TFhirOperationDefinitionOverload) then
    composeOperationDefinitionOverload(json, name, TFhirOperationDefinitionOverload(base), false)
  else if (base is TFhirOperationDefinition) then
    composeOperationDefinition(json, name, TFhirOperationDefinition(base), false)
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  else if (base is TFhirOperationOutcomeIssue) then
    composeOperationOutcomeIssue(json, name, TFhirOperationOutcomeIssue(base), false)
  else if (base is TFhirOperationOutcome) then
    composeOperationOutcome(json, name, TFhirOperationOutcome(base), false)
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  else if (base is TFhirOrganizationContact) then
    composeOrganizationContact(json, name, TFhirOrganizationContact(base), false)
  else if (base is TFhirOrganization) then
    composeOrganization(json, name, TFhirOrganization(base), false)
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_PATIENT}
  else if (base is TFhirPatientContact) then
    composePatientContact(json, name, TFhirPatientContact(base), false)
  else if (base is TFhirPatientAnimal) then
    composePatientAnimal(json, name, TFhirPatientAnimal(base), false)
  else if (base is TFhirPatientCommunication) then
    composePatientCommunication(json, name, TFhirPatientCommunication(base), false)
  else if (base is TFhirPatientLink) then
    composePatientLink(json, name, TFhirPatientLink(base), false)
  else if (base is TFhirPatient) then
    composePatient(json, name, TFhirPatient(base), false)
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  else if (base is TFhirPaymentNotice) then
    composePaymentNotice(json, name, TFhirPaymentNotice(base), false)
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  else if (base is TFhirPaymentReconciliationDetail) then
    composePaymentReconciliationDetail(json, name, TFhirPaymentReconciliationDetail(base), false)
  else if (base is TFhirPaymentReconciliationProcessNote) then
    composePaymentReconciliationProcessNote(json, name, TFhirPaymentReconciliationProcessNote(base), false)
  else if (base is TFhirPaymentReconciliation) then
    composePaymentReconciliation(json, name, TFhirPaymentReconciliation(base), false)
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  else if (base is TFhirPersonLink) then
    composePersonLink(json, name, TFhirPersonLink(base), false)
  else if (base is TFhirPerson) then
    composePerson(json, name, TFhirPerson(base), false)
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  else if (base is TFhirPlanDefinitionGoal) then
    composePlanDefinitionGoal(json, name, TFhirPlanDefinitionGoal(base), false)
  else if (base is TFhirPlanDefinitionGoalTarget) then
    composePlanDefinitionGoalTarget(json, name, TFhirPlanDefinitionGoalTarget(base), false)
  else if (base is TFhirPlanDefinitionAction) then
    composePlanDefinitionAction(json, name, TFhirPlanDefinitionAction(base), false)
  else if (base is TFhirPlanDefinitionActionCondition) then
    composePlanDefinitionActionCondition(json, name, TFhirPlanDefinitionActionCondition(base), false)
  else if (base is TFhirPlanDefinitionActionRelatedAction) then
    composePlanDefinitionActionRelatedAction(json, name, TFhirPlanDefinitionActionRelatedAction(base), false)
  else if (base is TFhirPlanDefinitionActionParticipant) then
    composePlanDefinitionActionParticipant(json, name, TFhirPlanDefinitionActionParticipant(base), false)
  else if (base is TFhirPlanDefinitionActionDynamicValue) then
    composePlanDefinitionActionDynamicValue(json, name, TFhirPlanDefinitionActionDynamicValue(base), false)
  else if (base is TFhirPlanDefinition) then
    composePlanDefinition(json, name, TFhirPlanDefinition(base), false)
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  else if (base is TFhirPractitionerQualification) then
    composePractitionerQualification(json, name, TFhirPractitionerQualification(base), false)
  else if (base is TFhirPractitioner) then
    composePractitioner(json, name, TFhirPractitioner(base), false)
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  else if (base is TFhirPractitionerRoleAvailableTime) then
    composePractitionerRoleAvailableTime(json, name, TFhirPractitionerRoleAvailableTime(base), false)
  else if (base is TFhirPractitionerRoleNotAvailable) then
    composePractitionerRoleNotAvailable(json, name, TFhirPractitionerRoleNotAvailable(base), false)
  else if (base is TFhirPractitionerRole) then
    composePractitionerRole(json, name, TFhirPractitionerRole(base), false)
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  else if (base is TFhirProcedurePerformer) then
    composeProcedurePerformer(json, name, TFhirProcedurePerformer(base), false)
  else if (base is TFhirProcedureFocalDevice) then
    composeProcedureFocalDevice(json, name, TFhirProcedureFocalDevice(base), false)
  else if (base is TFhirProcedure) then
    composeProcedure(json, name, TFhirProcedure(base), false)
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROCEDUREREQUEST}
  else if (base is TFhirProcedureRequestRequester) then
    composeProcedureRequestRequester(json, name, TFhirProcedureRequestRequester(base), false)
  else if (base is TFhirProcedureRequest) then
    composeProcedureRequest(json, name, TFhirProcedureRequest(base), false)
{$ENDIF FHIR_PROCEDUREREQUEST}
{$IFDEF FHIR_PROCESSREQUEST}
  else if (base is TFhirProcessRequestItem) then
    composeProcessRequestItem(json, name, TFhirProcessRequestItem(base), false)
  else if (base is TFhirProcessRequest) then
    composeProcessRequest(json, name, TFhirProcessRequest(base), false)
{$ENDIF FHIR_PROCESSREQUEST}
{$IFDEF FHIR_PROCESSRESPONSE}
  else if (base is TFhirProcessResponseProcessNote) then
    composeProcessResponseProcessNote(json, name, TFhirProcessResponseProcessNote(base), false)
  else if (base is TFhirProcessResponse) then
    composeProcessResponse(json, name, TFhirProcessResponse(base), false)
{$ENDIF FHIR_PROCESSRESPONSE}
{$IFDEF FHIR_PROVENANCE}
  else if (base is TFhirProvenanceAgent) then
    composeProvenanceAgent(json, name, TFhirProvenanceAgent(base), false)
  else if (base is TFhirProvenanceEntity) then
    composeProvenanceEntity(json, name, TFhirProvenanceEntity(base), false)
  else if (base is TFhirProvenance) then
    composeProvenance(json, name, TFhirProvenance(base), false)
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  else if (base is TFhirQuestionnaireItem) then
    composeQuestionnaireItem(json, name, TFhirQuestionnaireItem(base), false)
  else if (base is TFhirQuestionnaireItemEnableWhen) then
    composeQuestionnaireItemEnableWhen(json, name, TFhirQuestionnaireItemEnableWhen(base), false)
  else if (base is TFhirQuestionnaireItemOption) then
    composeQuestionnaireItemOption(json, name, TFhirQuestionnaireItemOption(base), false)
  else if (base is TFhirQuestionnaire) then
    composeQuestionnaire(json, name, TFhirQuestionnaire(base), false)
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  else if (base is TFhirQuestionnaireResponseItem) then
    composeQuestionnaireResponseItem(json, name, TFhirQuestionnaireResponseItem(base), false)
  else if (base is TFhirQuestionnaireResponseItemAnswer) then
    composeQuestionnaireResponseItemAnswer(json, name, TFhirQuestionnaireResponseItemAnswer(base), false)
  else if (base is TFhirQuestionnaireResponse) then
    composeQuestionnaireResponse(json, name, TFhirQuestionnaireResponse(base), false)
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REFERRALREQUEST}
  else if (base is TFhirReferralRequestRequester) then
    composeReferralRequestRequester(json, name, TFhirReferralRequestRequester(base), false)
  else if (base is TFhirReferralRequest) then
    composeReferralRequest(json, name, TFhirReferralRequest(base), false)
{$ENDIF FHIR_REFERRALREQUEST}
{$IFDEF FHIR_RELATEDPERSON}
  else if (base is TFhirRelatedPerson) then
    composeRelatedPerson(json, name, TFhirRelatedPerson(base), false)
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  else if (base is TFhirRequestGroupAction) then
    composeRequestGroupAction(json, name, TFhirRequestGroupAction(base), false)
  else if (base is TFhirRequestGroupActionCondition) then
    composeRequestGroupActionCondition(json, name, TFhirRequestGroupActionCondition(base), false)
  else if (base is TFhirRequestGroupActionRelatedAction) then
    composeRequestGroupActionRelatedAction(json, name, TFhirRequestGroupActionRelatedAction(base), false)
  else if (base is TFhirRequestGroup) then
    composeRequestGroup(json, name, TFhirRequestGroup(base), false)
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
  else if (base is TFhirResearchStudyArm) then
    composeResearchStudyArm(json, name, TFhirResearchStudyArm(base), false)
  else if (base is TFhirResearchStudy) then
    composeResearchStudy(json, name, TFhirResearchStudy(base), false)
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  else if (base is TFhirResearchSubject) then
    composeResearchSubject(json, name, TFhirResearchSubject(base), false)
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  else if (base is TFhirRiskAssessmentPrediction) then
    composeRiskAssessmentPrediction(json, name, TFhirRiskAssessmentPrediction(base), false)
  else if (base is TFhirRiskAssessment) then
    composeRiskAssessment(json, name, TFhirRiskAssessment(base), false)
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
  else if (base is TFhirSchedule) then
    composeSchedule(json, name, TFhirSchedule(base), false)
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  else if (base is TFhirSearchParameterComponent) then
    composeSearchParameterComponent(json, name, TFhirSearchParameterComponent(base), false)
  else if (base is TFhirSearchParameter) then
    composeSearchParameter(json, name, TFhirSearchParameter(base), false)
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SEQUENCE}
  else if (base is TFhirSequenceReferenceSeq) then
    composeSequenceReferenceSeq(json, name, TFhirSequenceReferenceSeq(base), false)
  else if (base is TFhirSequenceVariant) then
    composeSequenceVariant(json, name, TFhirSequenceVariant(base), false)
  else if (base is TFhirSequenceQuality) then
    composeSequenceQuality(json, name, TFhirSequenceQuality(base), false)
  else if (base is TFhirSequenceRepository) then
    composeSequenceRepository(json, name, TFhirSequenceRepository(base), false)
  else if (base is TFhirSequence) then
    composeSequence(json, name, TFhirSequence(base), false)
{$ENDIF FHIR_SEQUENCE}
{$IFDEF FHIR_SERVICEDEFINITION}
  else if (base is TFhirServiceDefinition) then
    composeServiceDefinition(json, name, TFhirServiceDefinition(base), false)
{$ENDIF FHIR_SERVICEDEFINITION}
{$IFDEF FHIR_SLOT}
  else if (base is TFhirSlot) then
    composeSlot(json, name, TFhirSlot(base), false)
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  else if (base is TFhirSpecimenCollection) then
    composeSpecimenCollection(json, name, TFhirSpecimenCollection(base), false)
  else if (base is TFhirSpecimenProcessing) then
    composeSpecimenProcessing(json, name, TFhirSpecimenProcessing(base), false)
  else if (base is TFhirSpecimenContainer) then
    composeSpecimenContainer(json, name, TFhirSpecimenContainer(base), false)
  else if (base is TFhirSpecimen) then
    composeSpecimen(json, name, TFhirSpecimen(base), false)
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  else if (base is TFhirStructureDefinitionMapping) then
    composeStructureDefinitionMapping(json, name, TFhirStructureDefinitionMapping(base), false)
  else if (base is TFhirStructureDefinitionSnapshot) then
    composeStructureDefinitionSnapshot(json, name, TFhirStructureDefinitionSnapshot(base), false)
  else if (base is TFhirStructureDefinitionDifferential) then
    composeStructureDefinitionDifferential(json, name, TFhirStructureDefinitionDifferential(base), false)
  else if (base is TFhirStructureDefinition) then
    composeStructureDefinition(json, name, TFhirStructureDefinition(base), false)
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  else if (base is TFhirStructureMapStructure) then
    composeStructureMapStructure(json, name, TFhirStructureMapStructure(base), false)
  else if (base is TFhirStructureMapGroup) then
    composeStructureMapGroup(json, name, TFhirStructureMapGroup(base), false)
  else if (base is TFhirStructureMapGroupInput) then
    composeStructureMapGroupInput(json, name, TFhirStructureMapGroupInput(base), false)
  else if (base is TFhirStructureMapGroupRule) then
    composeStructureMapGroupRule(json, name, TFhirStructureMapGroupRule(base), false)
  else if (base is TFhirStructureMapGroupRuleSource) then
    composeStructureMapGroupRuleSource(json, name, TFhirStructureMapGroupRuleSource(base), false)
  else if (base is TFhirStructureMapGroupRuleTarget) then
    composeStructureMapGroupRuleTarget(json, name, TFhirStructureMapGroupRuleTarget(base), false)
  else if (base is TFhirStructureMapGroupRuleTargetParameter) then
    composeStructureMapGroupRuleTargetParameter(json, name, TFhirStructureMapGroupRuleTargetParameter(base), false)
  else if (base is TFhirStructureMapGroupRuleDependent) then
    composeStructureMapGroupRuleDependent(json, name, TFhirStructureMapGroupRuleDependent(base), false)
  else if (base is TFhirStructureMap) then
    composeStructureMap(json, name, TFhirStructureMap(base), false)
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  else if (base is TFhirSubscriptionChannel) then
    composeSubscriptionChannel(json, name, TFhirSubscriptionChannel(base), false)
  else if (base is TFhirSubscription) then
    composeSubscription(json, name, TFhirSubscription(base), false)
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
  else if (base is TFhirSubstanceInstance) then
    composeSubstanceInstance(json, name, TFhirSubstanceInstance(base), false)
  else if (base is TFhirSubstanceIngredient) then
    composeSubstanceIngredient(json, name, TFhirSubstanceIngredient(base), false)
  else if (base is TFhirSubstance) then
    composeSubstance(json, name, TFhirSubstance(base), false)
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUPPLYDELIVERY}
  else if (base is TFhirSupplyDeliverySuppliedItem) then
    composeSupplyDeliverySuppliedItem(json, name, TFhirSupplyDeliverySuppliedItem(base), false)
  else if (base is TFhirSupplyDelivery) then
    composeSupplyDelivery(json, name, TFhirSupplyDelivery(base), false)
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  else if (base is TFhirSupplyRequestOrderedItem) then
    composeSupplyRequestOrderedItem(json, name, TFhirSupplyRequestOrderedItem(base), false)
  else if (base is TFhirSupplyRequestRequester) then
    composeSupplyRequestRequester(json, name, TFhirSupplyRequestRequester(base), false)
  else if (base is TFhirSupplyRequest) then
    composeSupplyRequest(json, name, TFhirSupplyRequest(base), false)
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  else if (base is TFhirTaskRequester) then
    composeTaskRequester(json, name, TFhirTaskRequester(base), false)
  else if (base is TFhirTaskRestriction) then
    composeTaskRestriction(json, name, TFhirTaskRestriction(base), false)
  else if (base is TFhirTaskInput) then
    composeTaskInput(json, name, TFhirTaskInput(base), false)
  else if (base is TFhirTaskOutput) then
    composeTaskOutput(json, name, TFhirTaskOutput(base), false)
  else if (base is TFhirTask) then
    composeTask(json, name, TFhirTask(base), false)
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TESTREPORT}
  else if (base is TFhirTestReportParticipant) then
    composeTestReportParticipant(json, name, TFhirTestReportParticipant(base), false)
  else if (base is TFhirTestReportSetup) then
    composeTestReportSetup(json, name, TFhirTestReportSetup(base), false)
  else if (base is TFhirTestReportSetupAction) then
    composeTestReportSetupAction(json, name, TFhirTestReportSetupAction(base), false)
  else if (base is TFhirTestReportSetupActionOperation) then
    composeTestReportSetupActionOperation(json, name, TFhirTestReportSetupActionOperation(base), false)
  else if (base is TFhirTestReportSetupActionAssert) then
    composeTestReportSetupActionAssert(json, name, TFhirTestReportSetupActionAssert(base), false)
  else if (base is TFhirTestReportTest) then
    composeTestReportTest(json, name, TFhirTestReportTest(base), false)
  else if (base is TFhirTestReportTestAction) then
    composeTestReportTestAction(json, name, TFhirTestReportTestAction(base), false)
  else if (base is TFhirTestReportTeardown) then
    composeTestReportTeardown(json, name, TFhirTestReportTeardown(base), false)
  else if (base is TFhirTestReportTeardownAction) then
    composeTestReportTeardownAction(json, name, TFhirTestReportTeardownAction(base), false)
  else if (base is TFhirTestReport) then
    composeTestReport(json, name, TFhirTestReport(base), false)
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  else if (base is TFhirTestScriptOrigin) then
    composeTestScriptOrigin(json, name, TFhirTestScriptOrigin(base), false)
  else if (base is TFhirTestScriptDestination) then
    composeTestScriptDestination(json, name, TFhirTestScriptDestination(base), false)
  else if (base is TFhirTestScriptMetadata) then
    composeTestScriptMetadata(json, name, TFhirTestScriptMetadata(base), false)
  else if (base is TFhirTestScriptMetadataLink) then
    composeTestScriptMetadataLink(json, name, TFhirTestScriptMetadataLink(base), false)
  else if (base is TFhirTestScriptMetadataCapability) then
    composeTestScriptMetadataCapability(json, name, TFhirTestScriptMetadataCapability(base), false)
  else if (base is TFhirTestScriptFixture) then
    composeTestScriptFixture(json, name, TFhirTestScriptFixture(base), false)
  else if (base is TFhirTestScriptVariable) then
    composeTestScriptVariable(json, name, TFhirTestScriptVariable(base), false)
  else if (base is TFhirTestScriptRule) then
    composeTestScriptRule(json, name, TFhirTestScriptRule(base), false)
  else if (base is TFhirTestScriptRuleParam) then
    composeTestScriptRuleParam(json, name, TFhirTestScriptRuleParam(base), false)
  else if (base is TFhirTestScriptRuleset) then
    composeTestScriptRuleset(json, name, TFhirTestScriptRuleset(base), false)
  else if (base is TFhirTestScriptRulesetRule) then
    composeTestScriptRulesetRule(json, name, TFhirTestScriptRulesetRule(base), false)
  else if (base is TFhirTestScriptRulesetRuleParam) then
    composeTestScriptRulesetRuleParam(json, name, TFhirTestScriptRulesetRuleParam(base), false)
  else if (base is TFhirTestScriptSetup) then
    composeTestScriptSetup(json, name, TFhirTestScriptSetup(base), false)
  else if (base is TFhirTestScriptSetupAction) then
    composeTestScriptSetupAction(json, name, TFhirTestScriptSetupAction(base), false)
  else if (base is TFhirTestScriptSetupActionOperation) then
    composeTestScriptSetupActionOperation(json, name, TFhirTestScriptSetupActionOperation(base), false)
  else if (base is TFhirTestScriptSetupActionOperationRequestHeader) then
    composeTestScriptSetupActionOperationRequestHeader(json, name, TFhirTestScriptSetupActionOperationRequestHeader(base), false)
  else if (base is TFhirTestScriptSetupActionAssert) then
    composeTestScriptSetupActionAssert(json, name, TFhirTestScriptSetupActionAssert(base), false)
  else if (base is TFhirTestScriptSetupActionAssertRule) then
    composeTestScriptSetupActionAssertRule(json, name, TFhirTestScriptSetupActionAssertRule(base), false)
  else if (base is TFhirTestScriptSetupActionAssertRuleParam) then
    composeTestScriptSetupActionAssertRuleParam(json, name, TFhirTestScriptSetupActionAssertRuleParam(base), false)
  else if (base is TFhirTestScriptSetupActionAssertRuleset) then
    composeTestScriptSetupActionAssertRuleset(json, name, TFhirTestScriptSetupActionAssertRuleset(base), false)
  else if (base is TFhirTestScriptSetupActionAssertRulesetRule) then
    composeTestScriptSetupActionAssertRulesetRule(json, name, TFhirTestScriptSetupActionAssertRulesetRule(base), false)
  else if (base is TFhirTestScriptSetupActionAssertRulesetRuleParam) then
    composeTestScriptSetupActionAssertRulesetRuleParam(json, name, TFhirTestScriptSetupActionAssertRulesetRuleParam(base), false)
  else if (base is TFhirTestScriptTest) then
    composeTestScriptTest(json, name, TFhirTestScriptTest(base), false)
  else if (base is TFhirTestScriptTestAction) then
    composeTestScriptTestAction(json, name, TFhirTestScriptTestAction(base), false)
  else if (base is TFhirTestScriptTeardown) then
    composeTestScriptTeardown(json, name, TFhirTestScriptTeardown(base), false)
  else if (base is TFhirTestScriptTeardownAction) then
    composeTestScriptTeardownAction(json, name, TFhirTestScriptTeardownAction(base), false)
  else if (base is TFhirTestScript) then
    composeTestScript(json, name, TFhirTestScript(base), false)
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
  else if (base is TFhirValueSetCompose) then
    composeValueSetCompose(json, name, TFhirValueSetCompose(base), false)
  else if (base is TFhirValueSetComposeInclude) then
    composeValueSetComposeInclude(json, name, TFhirValueSetComposeInclude(base), false)
  else if (base is TFhirValueSetComposeIncludeConcept) then
    composeValueSetComposeIncludeConcept(json, name, TFhirValueSetComposeIncludeConcept(base), false)
  else if (base is TFhirValueSetComposeIncludeConceptDesignation) then
    composeValueSetComposeIncludeConceptDesignation(json, name, TFhirValueSetComposeIncludeConceptDesignation(base), false)
  else if (base is TFhirValueSetComposeIncludeFilter) then
    composeValueSetComposeIncludeFilter(json, name, TFhirValueSetComposeIncludeFilter(base), false)
  else if (base is TFhirValueSetExpansion) then
    composeValueSetExpansion(json, name, TFhirValueSetExpansion(base), false)
  else if (base is TFhirValueSetExpansionParameter) then
    composeValueSetExpansionParameter(json, name, TFhirValueSetExpansionParameter(base), false)
  else if (base is TFhirValueSetExpansionContains) then
    composeValueSetExpansionContains(json, name, TFhirValueSetExpansionContains(base), false)
  else if (base is TFhirValueSet) then
    composeValueSet(json, name, TFhirValueSet(base), false)
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  else if (base is TFhirVisionPrescriptionDispense) then
    composeVisionPrescriptionDispense(json, name, TFhirVisionPrescriptionDispense(base), false)
  else if (base is TFhirVisionPrescription) then
    composeVisionPrescription(json, name, TFhirVisionPrescription(base), false)
{$ENDIF FHIR_VISIONPRESCRIPTION}
  else
    inherited ComposeBase(json, name, base);
end;

procedure TFHIRJsonComposer.ComposeResource(json : TJSONWriter; resource: TFhirResource);
begin
  if (resource = nil) Then
    Raise EJsonException.Create('error - resource is nil');
  json.value('resourceType', CODES_TFhirResourceType[resource.ResourceType]);
  Case resource.ResourceType of
{$IFDEF FHIR_PARAMETERS}
    frtParameters: ComposeParameters(json, 'Parameters', TFhirParameters(resource));
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_ACCOUNT}
  {$IFDEF FHIR_ACCOUNT}
     frtAccount: ComposeAccount(json, 'Account', TFhirAccount(resource));
   {$ENDIF}
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  {$IFDEF FHIR_ACTIVITYDEFINITION}
     frtActivityDefinition: ComposeActivityDefinition(json, 'ActivityDefinition', TFhirActivityDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  {$IFDEF FHIR_ADVERSEEVENT}
     frtAdverseEvent: ComposeAdverseEvent(json, 'AdverseEvent', TFhirAdverseEvent(resource));
   {$ENDIF}
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  {$IFDEF FHIR_ALLERGYINTOLERANCE}
     frtAllergyIntolerance: ComposeAllergyIntolerance(json, 'AllergyIntolerance', TFhirAllergyIntolerance(resource));
   {$ENDIF}
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  {$IFDEF FHIR_APPOINTMENT}
     frtAppointment: ComposeAppointment(json, 'Appointment', TFhirAppointment(resource));
   {$ENDIF}
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  {$IFDEF FHIR_APPOINTMENTRESPONSE}
     frtAppointmentResponse: ComposeAppointmentResponse(json, 'AppointmentResponse', TFhirAppointmentResponse(resource));
   {$ENDIF}
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  {$IFDEF FHIR_AUDITEVENT}
     frtAuditEvent: ComposeAuditEvent(json, 'AuditEvent', TFhirAuditEvent(resource));
   {$ENDIF}
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  {$IFDEF FHIR_BASIC}
     frtBasic: ComposeBasic(json, 'Basic', TFhirBasic(resource));
   {$ENDIF}
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  {$IFDEF FHIR_BINARY}
     frtBinary: ComposeBinary(json, 'Binary', TFhirBinary(resource));
   {$ENDIF}
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BODYSITE}
  {$IFDEF FHIR_BODYSITE}
     frtBodySite: ComposeBodySite(json, 'BodySite', TFhirBodySite(resource));
   {$ENDIF}
{$ENDIF FHIR_BODYSITE}
{$IFDEF FHIR_BUNDLE}
  {$IFDEF FHIR_BUNDLE}
     frtBundle: ComposeBundle(json, 'Bundle', TFhirBundle(resource));
   {$ENDIF}
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  {$IFDEF FHIR_CAPABILITYSTATEMENT}
     frtCapabilityStatement: ComposeCapabilityStatement(json, 'CapabilityStatement', TFhirCapabilityStatement(resource));
   {$ENDIF}
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  {$IFDEF FHIR_CAREPLAN}
     frtCarePlan: ComposeCarePlan(json, 'CarePlan', TFhirCarePlan(resource));
   {$ENDIF}
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  {$IFDEF FHIR_CARETEAM}
     frtCareTeam: ComposeCareTeam(json, 'CareTeam', TFhirCareTeam(resource));
   {$ENDIF}
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CHARGEITEM}
  {$IFDEF FHIR_CHARGEITEM}
     frtChargeItem: ComposeChargeItem(json, 'ChargeItem', TFhirChargeItem(resource));
   {$ENDIF}
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CLAIM}
  {$IFDEF FHIR_CLAIM}
     frtClaim: ComposeClaim(json, 'Claim', TFhirClaim(resource));
   {$ENDIF}
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  {$IFDEF FHIR_CLAIMRESPONSE}
     frtClaimResponse: ComposeClaimResponse(json, 'ClaimResponse', TFhirClaimResponse(resource));
   {$ENDIF}
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  {$IFDEF FHIR_CLINICALIMPRESSION}
     frtClinicalImpression: ComposeClinicalImpression(json, 'ClinicalImpression', TFhirClinicalImpression(resource));
   {$ENDIF}
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
  {$IFDEF FHIR_CODESYSTEM}
     frtCodeSystem: ComposeCodeSystem(json, 'CodeSystem', TFhirCodeSystem(resource));
   {$ENDIF}
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  {$IFDEF FHIR_COMMUNICATION}
     frtCommunication: ComposeCommunication(json, 'Communication', TFhirCommunication(resource));
   {$ENDIF}
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  {$IFDEF FHIR_COMMUNICATIONREQUEST}
     frtCommunicationRequest: ComposeCommunicationRequest(json, 'CommunicationRequest', TFhirCommunicationRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  {$IFDEF FHIR_COMPARTMENTDEFINITION}
     frtCompartmentDefinition: ComposeCompartmentDefinition(json, 'CompartmentDefinition', TFhirCompartmentDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  {$IFDEF FHIR_COMPOSITION}
     frtComposition: ComposeComposition(json, 'Composition', TFhirComposition(resource));
   {$ENDIF}
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  {$IFDEF FHIR_CONCEPTMAP}
     frtConceptMap: ComposeConceptMap(json, 'ConceptMap', TFhirConceptMap(resource));
   {$ENDIF}
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  {$IFDEF FHIR_CONDITION}
     frtCondition: ComposeCondition(json, 'Condition', TFhirCondition(resource));
   {$ENDIF}
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  {$IFDEF FHIR_CONSENT}
     frtConsent: ComposeConsent(json, 'Consent', TFhirConsent(resource));
   {$ENDIF}
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  {$IFDEF FHIR_CONTRACT}
     frtContract: ComposeContract(json, 'Contract', TFhirContract(resource));
   {$ENDIF}
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  {$IFDEF FHIR_COVERAGE}
     frtCoverage: ComposeCoverage(json, 'Coverage', TFhirCoverage(resource));
   {$ENDIF}
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_DATAELEMENT}
  {$IFDEF FHIR_DATAELEMENT}
     frtDataElement: ComposeDataElement(json, 'DataElement', TFhirDataElement(resource));
   {$ENDIF}
{$ENDIF FHIR_DATAELEMENT}
{$IFDEF FHIR_DETECTEDISSUE}
  {$IFDEF FHIR_DETECTEDISSUE}
     frtDetectedIssue: ComposeDetectedIssue(json, 'DetectedIssue', TFhirDetectedIssue(resource));
   {$ENDIF}
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  {$IFDEF FHIR_DEVICE}
     frtDevice: ComposeDevice(json, 'Device', TFhirDevice(resource));
   {$ENDIF}
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICECOMPONENT}
  {$IFDEF FHIR_DEVICECOMPONENT}
     frtDeviceComponent: ComposeDeviceComponent(json, 'DeviceComponent', TFhirDeviceComponent(resource));
   {$ENDIF}
{$ENDIF FHIR_DEVICECOMPONENT}
{$IFDEF FHIR_DEVICEMETRIC}
  {$IFDEF FHIR_DEVICEMETRIC}
     frtDeviceMetric: ComposeDeviceMetric(json, 'DeviceMetric', TFhirDeviceMetric(resource));
   {$ENDIF}
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  {$IFDEF FHIR_DEVICEREQUEST}
     frtDeviceRequest: ComposeDeviceRequest(json, 'DeviceRequest', TFhirDeviceRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  {$IFDEF FHIR_DEVICEUSESTATEMENT}
     frtDeviceUseStatement: ComposeDeviceUseStatement(json, 'DeviceUseStatement', TFhirDeviceUseStatement(resource));
   {$ENDIF}
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  {$IFDEF FHIR_DIAGNOSTICREPORT}
     frtDiagnosticReport: ComposeDiagnosticReport(json, 'DiagnosticReport', TFhirDiagnosticReport(resource));
   {$ENDIF}
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  {$IFDEF FHIR_DOCUMENTMANIFEST}
     frtDocumentManifest: ComposeDocumentManifest(json, 'DocumentManifest', TFhirDocumentManifest(resource));
   {$ENDIF}
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  {$IFDEF FHIR_DOCUMENTREFERENCE}
     frtDocumentReference: ComposeDocumentReference(json, 'DocumentReference', TFhirDocumentReference(resource));
   {$ENDIF}
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ELIGIBILITYREQUEST}
  {$IFDEF FHIR_ELIGIBILITYREQUEST}
     frtEligibilityRequest: ComposeEligibilityRequest(json, 'EligibilityRequest', TFhirEligibilityRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_ELIGIBILITYREQUEST}
{$IFDEF FHIR_ELIGIBILITYRESPONSE}
  {$IFDEF FHIR_ELIGIBILITYRESPONSE}
     frtEligibilityResponse: ComposeEligibilityResponse(json, 'EligibilityResponse', TFhirEligibilityResponse(resource));
   {$ENDIF}
{$ENDIF FHIR_ELIGIBILITYRESPONSE}
{$IFDEF FHIR_ENCOUNTER}
  {$IFDEF FHIR_ENCOUNTER}
     frtEncounter: ComposeEncounter(json, 'Encounter', TFhirEncounter(resource));
   {$ENDIF}
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  {$IFDEF FHIR_ENDPOINT}
     frtEndpoint: ComposeEndpoint(json, 'Endpoint', TFhirEndpoint(resource));
   {$ENDIF}
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  {$IFDEF FHIR_ENROLLMENTREQUEST}
     frtEnrollmentRequest: ComposeEnrollmentRequest(json, 'EnrollmentRequest', TFhirEnrollmentRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  {$IFDEF FHIR_ENROLLMENTRESPONSE}
     frtEnrollmentResponse: ComposeEnrollmentResponse(json, 'EnrollmentResponse', TFhirEnrollmentResponse(resource));
   {$ENDIF}
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
  {$IFDEF FHIR_EPISODEOFCARE}
     frtEpisodeOfCare: ComposeEpisodeOfCare(json, 'EpisodeOfCare', TFhirEpisodeOfCare(resource));
   {$ENDIF}
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EXPANSIONPROFILE}
  {$IFDEF FHIR_EXPANSIONPROFILE}
     frtExpansionProfile: ComposeExpansionProfile(json, 'ExpansionProfile', TFhirExpansionProfile(resource));
   {$ENDIF}
{$ENDIF FHIR_EXPANSIONPROFILE}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  {$IFDEF FHIR_EXPLANATIONOFBENEFIT}
     frtExplanationOfBenefit: ComposeExplanationOfBenefit(json, 'ExplanationOfBenefit', TFhirExplanationOfBenefit(resource));
   {$ENDIF}
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  {$IFDEF FHIR_FAMILYMEMBERHISTORY}
     frtFamilyMemberHistory: ComposeFamilyMemberHistory(json, 'FamilyMemberHistory', TFhirFamilyMemberHistory(resource));
   {$ENDIF}
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  {$IFDEF FHIR_FLAG}
     frtFlag: ComposeFlag(json, 'Flag', TFhirFlag(resource));
   {$ENDIF}
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  {$IFDEF FHIR_GOAL}
     frtGoal: ComposeGoal(json, 'Goal', TFhirGoal(resource));
   {$ENDIF}
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  {$IFDEF FHIR_GRAPHDEFINITION}
     frtGraphDefinition: ComposeGraphDefinition(json, 'GraphDefinition', TFhirGraphDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  {$IFDEF FHIR_GROUP}
     frtGroup: ComposeGroup(json, 'Group', TFhirGroup(resource));
   {$ENDIF}
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  {$IFDEF FHIR_GUIDANCERESPONSE}
     frtGuidanceResponse: ComposeGuidanceResponse(json, 'GuidanceResponse', TFhirGuidanceResponse(resource));
   {$ENDIF}
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  {$IFDEF FHIR_HEALTHCARESERVICE}
     frtHealthcareService: ComposeHealthcareService(json, 'HealthcareService', TFhirHealthcareService(resource));
   {$ENDIF}
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGMANIFEST}
  {$IFDEF FHIR_IMAGINGMANIFEST}
     frtImagingManifest: ComposeImagingManifest(json, 'ImagingManifest', TFhirImagingManifest(resource));
   {$ENDIF}
{$ENDIF FHIR_IMAGINGMANIFEST}
{$IFDEF FHIR_IMAGINGSTUDY}
  {$IFDEF FHIR_IMAGINGSTUDY}
     frtImagingStudy: ComposeImagingStudy(json, 'ImagingStudy', TFhirImagingStudy(resource));
   {$ENDIF}
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  {$IFDEF FHIR_IMMUNIZATION}
     frtImmunization: ComposeImmunization(json, 'Immunization', TFhirImmunization(resource));
   {$ENDIF}
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  {$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
     frtImmunizationRecommendation: ComposeImmunizationRecommendation(json, 'ImmunizationRecommendation', TFhirImmunizationRecommendation(resource));
   {$ENDIF}
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  {$IFDEF FHIR_IMPLEMENTATIONGUIDE}
     frtImplementationGuide: ComposeImplementationGuide(json, 'ImplementationGuide', TFhirImplementationGuide(resource));
   {$ENDIF}
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_LIBRARY}
  {$IFDEF FHIR_LIBRARY}
     frtLibrary: ComposeLibrary(json, 'Library', TFhirLibrary(resource));
   {$ENDIF}
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  {$IFDEF FHIR_LINKAGE}
     frtLinkage: ComposeLinkage(json, 'Linkage', TFhirLinkage(resource));
   {$ENDIF}
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  {$IFDEF FHIR_LIST}
     frtList: ComposeList(json, 'List', TFhirList(resource));
   {$ENDIF}
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  {$IFDEF FHIR_LOCATION}
     frtLocation: ComposeLocation(json, 'Location', TFhirLocation(resource));
   {$ENDIF}
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
  {$IFDEF FHIR_MEASURE}
     frtMeasure: ComposeMeasure(json, 'Measure', TFhirMeasure(resource));
   {$ENDIF}
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  {$IFDEF FHIR_MEASUREREPORT}
     frtMeasureReport: ComposeMeasureReport(json, 'MeasureReport', TFhirMeasureReport(resource));
   {$ENDIF}
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  {$IFDEF FHIR_MEDIA}
     frtMedia: ComposeMedia(json, 'Media', TFhirMedia(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  {$IFDEF FHIR_MEDICATION}
     frtMedication: ComposeMedication(json, 'Medication', TFhirMedication(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  {$IFDEF FHIR_MEDICATIONADMINISTRATION}
     frtMedicationAdministration: ComposeMedicationAdministration(json, 'MedicationAdministration', TFhirMedicationAdministration(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  {$IFDEF FHIR_MEDICATIONDISPENSE}
     frtMedicationDispense: ComposeMedicationDispense(json, 'MedicationDispense', TFhirMedicationDispense(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  {$IFDEF FHIR_MEDICATIONREQUEST}
     frtMedicationRequest: ComposeMedicationRequest(json, 'MedicationRequest', TFhirMedicationRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  {$IFDEF FHIR_MEDICATIONSTATEMENT}
     frtMedicationStatement: ComposeMedicationStatement(json, 'MedicationStatement', TFhirMedicationStatement(resource));
   {$ENDIF}
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MESSAGEDEFINITION}
  {$IFDEF FHIR_MESSAGEDEFINITION}
     frtMessageDefinition: ComposeMessageDefinition(json, 'MessageDefinition', TFhirMessageDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  {$IFDEF FHIR_MESSAGEHEADER}
     frtMessageHeader: ComposeMessageHeader(json, 'MessageHeader', TFhirMessageHeader(resource));
   {$ENDIF}
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_NAMINGSYSTEM}
  {$IFDEF FHIR_NAMINGSYSTEM}
     frtNamingSystem: ComposeNamingSystem(json, 'NamingSystem', TFhirNamingSystem(resource));
   {$ENDIF}
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  {$IFDEF FHIR_NUTRITIONORDER}
     frtNutritionOrder: ComposeNutritionOrder(json, 'NutritionOrder', TFhirNutritionOrder(resource));
   {$ENDIF}
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
  {$IFDEF FHIR_OBSERVATION}
     frtObservation: ComposeObservation(json, 'Observation', TFhirObservation(resource));
   {$ENDIF}
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OPERATIONDEFINITION}
  {$IFDEF FHIR_OPERATIONDEFINITION}
     frtOperationDefinition: ComposeOperationDefinition(json, 'OperationDefinition', TFhirOperationDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  {$IFDEF FHIR_OPERATIONOUTCOME}
     frtOperationOutcome: ComposeOperationOutcome(json, 'OperationOutcome', TFhirOperationOutcome(resource));
   {$ENDIF}
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  {$IFDEF FHIR_ORGANIZATION}
     frtOrganization: ComposeOrganization(json, 'Organization', TFhirOrganization(resource));
   {$ENDIF}
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_PATIENT}
  {$IFDEF FHIR_PATIENT}
     frtPatient: ComposePatient(json, 'Patient', TFhirPatient(resource));
   {$ENDIF}
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  {$IFDEF FHIR_PAYMENTNOTICE}
     frtPaymentNotice: ComposePaymentNotice(json, 'PaymentNotice', TFhirPaymentNotice(resource));
   {$ENDIF}
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  {$IFDEF FHIR_PAYMENTRECONCILIATION}
     frtPaymentReconciliation: ComposePaymentReconciliation(json, 'PaymentReconciliation', TFhirPaymentReconciliation(resource));
   {$ENDIF}
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  {$IFDEF FHIR_PERSON}
     frtPerson: ComposePerson(json, 'Person', TFhirPerson(resource));
   {$ENDIF}
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  {$IFDEF FHIR_PLANDEFINITION}
     frtPlanDefinition: ComposePlanDefinition(json, 'PlanDefinition', TFhirPlanDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  {$IFDEF FHIR_PRACTITIONER}
     frtPractitioner: ComposePractitioner(json, 'Practitioner', TFhirPractitioner(resource));
   {$ENDIF}
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  {$IFDEF FHIR_PRACTITIONERROLE}
     frtPractitionerRole: ComposePractitionerRole(json, 'PractitionerRole', TFhirPractitionerRole(resource));
   {$ENDIF}
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  {$IFDEF FHIR_PROCEDURE}
     frtProcedure: ComposeProcedure(json, 'Procedure', TFhirProcedure(resource));
   {$ENDIF}
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROCEDUREREQUEST}
  {$IFDEF FHIR_PROCEDUREREQUEST}
     frtProcedureRequest: ComposeProcedureRequest(json, 'ProcedureRequest', TFhirProcedureRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_PROCEDUREREQUEST}
{$IFDEF FHIR_PROCESSREQUEST}
  {$IFDEF FHIR_PROCESSREQUEST}
     frtProcessRequest: ComposeProcessRequest(json, 'ProcessRequest', TFhirProcessRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_PROCESSREQUEST}
{$IFDEF FHIR_PROCESSRESPONSE}
  {$IFDEF FHIR_PROCESSRESPONSE}
     frtProcessResponse: ComposeProcessResponse(json, 'ProcessResponse', TFhirProcessResponse(resource));
   {$ENDIF}
{$ENDIF FHIR_PROCESSRESPONSE}
{$IFDEF FHIR_PROVENANCE}
  {$IFDEF FHIR_PROVENANCE}
     frtProvenance: ComposeProvenance(json, 'Provenance', TFhirProvenance(resource));
   {$ENDIF}
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  {$IFDEF FHIR_QUESTIONNAIRE}
     frtQuestionnaire: ComposeQuestionnaire(json, 'Questionnaire', TFhirQuestionnaire(resource));
   {$ENDIF}
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  {$IFDEF FHIR_QUESTIONNAIRERESPONSE}
     frtQuestionnaireResponse: ComposeQuestionnaireResponse(json, 'QuestionnaireResponse', TFhirQuestionnaireResponse(resource));
   {$ENDIF}
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REFERRALREQUEST}
  {$IFDEF FHIR_REFERRALREQUEST}
     frtReferralRequest: ComposeReferralRequest(json, 'ReferralRequest', TFhirReferralRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_REFERRALREQUEST}
{$IFDEF FHIR_RELATEDPERSON}
  {$IFDEF FHIR_RELATEDPERSON}
     frtRelatedPerson: ComposeRelatedPerson(json, 'RelatedPerson', TFhirRelatedPerson(resource));
   {$ENDIF}
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  {$IFDEF FHIR_REQUESTGROUP}
     frtRequestGroup: ComposeRequestGroup(json, 'RequestGroup', TFhirRequestGroup(resource));
   {$ENDIF}
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
  {$IFDEF FHIR_RESEARCHSTUDY}
     frtResearchStudy: ComposeResearchStudy(json, 'ResearchStudy', TFhirResearchStudy(resource));
   {$ENDIF}
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  {$IFDEF FHIR_RESEARCHSUBJECT}
     frtResearchSubject: ComposeResearchSubject(json, 'ResearchSubject', TFhirResearchSubject(resource));
   {$ENDIF}
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  {$IFDEF FHIR_RISKASSESSMENT}
     frtRiskAssessment: ComposeRiskAssessment(json, 'RiskAssessment', TFhirRiskAssessment(resource));
   {$ENDIF}
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
  {$IFDEF FHIR_SCHEDULE}
     frtSchedule: ComposeSchedule(json, 'Schedule', TFhirSchedule(resource));
   {$ENDIF}
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  {$IFDEF FHIR_SEARCHPARAMETER}
     frtSearchParameter: ComposeSearchParameter(json, 'SearchParameter', TFhirSearchParameter(resource));
   {$ENDIF}
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SEQUENCE}
  {$IFDEF FHIR_SEQUENCE}
     frtSequence: ComposeSequence(json, 'Sequence', TFhirSequence(resource));
   {$ENDIF}
{$ENDIF FHIR_SEQUENCE}
{$IFDEF FHIR_SERVICEDEFINITION}
  {$IFDEF FHIR_SERVICEDEFINITION}
     frtServiceDefinition: ComposeServiceDefinition(json, 'ServiceDefinition', TFhirServiceDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_SERVICEDEFINITION}
{$IFDEF FHIR_SLOT}
  {$IFDEF FHIR_SLOT}
     frtSlot: ComposeSlot(json, 'Slot', TFhirSlot(resource));
   {$ENDIF}
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  {$IFDEF FHIR_SPECIMEN}
     frtSpecimen: ComposeSpecimen(json, 'Specimen', TFhirSpecimen(resource));
   {$ENDIF}
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  {$IFDEF FHIR_STRUCTUREDEFINITION}
     frtStructureDefinition: ComposeStructureDefinition(json, 'StructureDefinition', TFhirStructureDefinition(resource));
   {$ENDIF}
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  {$IFDEF FHIR_STRUCTUREMAP}
     frtStructureMap: ComposeStructureMap(json, 'StructureMap', TFhirStructureMap(resource));
   {$ENDIF}
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  {$IFDEF FHIR_SUBSCRIPTION}
     frtSubscription: ComposeSubscription(json, 'Subscription', TFhirSubscription(resource));
   {$ENDIF}
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
  {$IFDEF FHIR_SUBSTANCE}
     frtSubstance: ComposeSubstance(json, 'Substance', TFhirSubstance(resource));
   {$ENDIF}
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUPPLYDELIVERY}
  {$IFDEF FHIR_SUPPLYDELIVERY}
     frtSupplyDelivery: ComposeSupplyDelivery(json, 'SupplyDelivery', TFhirSupplyDelivery(resource));
   {$ENDIF}
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  {$IFDEF FHIR_SUPPLYREQUEST}
     frtSupplyRequest: ComposeSupplyRequest(json, 'SupplyRequest', TFhirSupplyRequest(resource));
   {$ENDIF}
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  {$IFDEF FHIR_TASK}
     frtTask: ComposeTask(json, 'Task', TFhirTask(resource));
   {$ENDIF}
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TESTREPORT}
  {$IFDEF FHIR_TESTREPORT}
     frtTestReport: ComposeTestReport(json, 'TestReport', TFhirTestReport(resource));
   {$ENDIF}
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  {$IFDEF FHIR_TESTSCRIPT}
     frtTestScript: ComposeTestScript(json, 'TestScript', TFhirTestScript(resource));
   {$ENDIF}
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
  {$IFDEF FHIR_VALUESET}
     frtValueSet: ComposeValueSet(json, 'ValueSet', TFhirValueSet(resource));
   {$ENDIF}
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  {$IFDEF FHIR_VISIONPRESCRIPTION}
     frtVisionPrescription: ComposeVisionPrescription(json, 'VisionPrescription', TFhirVisionPrescription(resource));
   {$ENDIF}
{$ENDIF FHIR_VISIONPRESCRIPTION}
  else
    raise EJsonException.create('Internal error: the resource type '+CODES_TFhirResourceType[resource.ResourceType]+' is not a valid resource type');
  end;
end;


end.

