unit FHIR.R4.Xml;

{$I fhir.r4.inc}

{
  Copyright (c) 2011+, HL7 and Health Intersections Pty Ltd (http://www.healthintersections.com.au)
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
}

interface

// FHIR v4.0.0 generated 2018-12-15T16:22:09+11:00

uses
  SysUtils, Classes, 
  FHIR.Support.Base, FHIR.Support.Utilities, FHIR.Support.Collections, FHIR.Support.Xml, FHIR.Support.MXml, 
  FHIR.Base.Parser, FHIR.Base.Objects, 
  FHIR.R4.ParserBase, FHIR.R4.Resources, FHIR.R4.Constants, FHIR.R4.Types;

Type

  TFHIRXmlParser = class (TFHIRXmlParserBase4)
  protected
    function ParseElement(element : TMXmlElement; path : string) : TFhirElement;

    Procedure ParseElementAttributes(value : TFhirElement; path : string; element : TMXmlElement);
    Function ParseBackboneElementChild(element : TFhirBackboneElement; path : string; child : TMXmlElement) : boolean;
    Function ParseElementChild(element : TFhirElement; path : string; child : TMXmlElement) : boolean;
    function ParseBackboneElement(element : TMXmlElement; path : string) : TFhirBackboneElement;
    function ParseBackboneType(element : TMXmlElement; path : string) : TFhirBackboneType;
    function ParseBackboneTypeChild(element : TFhirBackboneType; path : string; child : TMXmlElement) : boolean;

    function ParseEnum(Const aNames, aSystems : Array Of String; path : String; element : TMXmlElement) : TFhirEnum;
    function ParseDate(element : TMXmlElement; path : string) : TFhirDate;
    function ParseDateTime(element : TMXmlElement; path : string) : TFhirDateTime;
    function ParseString(element : TMXmlElement; path : string) : TFhirString;
    function ParseInteger(element : TMXmlElement; path : string) : TFhirInteger;
    function ParseUri(element : TMXmlElement; path : string) : TFhirUri;
    function ParseInstant(element : TMXmlElement; path : string) : TFhirInstant;
    function ParseXhtml(element : TMXmlElement; path : string) : TFhirXhtml;
    function ParseBoolean(element : TMXmlElement; path : string) : TFhirBoolean;
    function ParseBase64Binary(element : TMXmlElement; path : string) : TFhirBase64Binary;
    function ParseTime(element : TMXmlElement; path : string) : TFhirTime;
    function ParseDecimal(element : TMXmlElement; path : string) : TFhirDecimal;
    function ParseCode(element : TMXmlElement; path : string) : TFhirCode;
    function ParseCanonical(element : TMXmlElement; path : string) : TFhirCanonical;
    function ParseOid(element : TMXmlElement; path : string) : TFhirOid;
    function ParseUuid(element : TMXmlElement; path : string) : TFhirUuid;
    function ParseUrl(element : TMXmlElement; path : string) : TFhirUrl;
    function ParseMarkdown(element : TMXmlElement; path : string) : TFhirMarkdown;
    function ParseUnsignedInt(element : TMXmlElement; path : string) : TFhirUnsignedInt;
    function ParseId(element : TMXmlElement; path : string) : TFhirId;
    function ParsePositiveInt(element : TMXmlElement; path : string) : TFhirPositiveInt;

    Procedure ParseResourceAttributes(resource : TFhirResource; path : string; element : TMXmlElement);
    Function ParseResourceChild(resource : TFhirResource; path : string; child : TMXmlElement) : boolean;
    Procedure ParseDomainResourceAttributes(resource : TFhirDomainResource; path : string; element : TMXmlElement);
    Function ParseDomainResourceChild(resource : TFhirDomainResource; path : string; child : TMXmlElement) : boolean;
{$IFDEF FHIR_PARAMETERS}
    function ParseParametersParameter(element : TMXmlElement; path : string) : TFhirParametersParameter;
    function ParseParametersParameterChild(element : TFhirParametersParameter; path : string; child : TMXmlElement) : boolean;
    function ParseParameters(element : TMXmlElement; path : string) : TFhirParameters;
    function ParseParametersChild(element : TFhirParameters; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PARAMETERS}

    function ParseExtension(element : TMXmlElement; path : string) : TFhirExtension;
    function ParseExtensionChild(element : TFhirExtension; path : string; child : TMXmlElement) : boolean;
    function ParseNarrative(element : TMXmlElement; path : string) : TFhirNarrative;
    function ParseNarrativeChild(element : TFhirNarrative; path : string; child : TMXmlElement) : boolean;
    function ParseContributor(element : TMXmlElement; path : string) : TFhirContributor;
    function ParseContributorChild(element : TFhirContributor; path : string; child : TMXmlElement) : boolean;
    function ParseAttachment(element : TMXmlElement; path : string) : TFhirAttachment;
    function ParseAttachmentChild(element : TFhirAttachment; path : string; child : TMXmlElement) : boolean;
    function ParseDataRequirementCodeFilter(element : TMXmlElement; path : string) : TFhirDataRequirementCodeFilter;
    function ParseDataRequirementCodeFilterChild(element : TFhirDataRequirementCodeFilter; path : string; child : TMXmlElement) : boolean;
    function ParseDataRequirementDateFilter(element : TMXmlElement; path : string) : TFhirDataRequirementDateFilter;
    function ParseDataRequirementDateFilterChild(element : TFhirDataRequirementDateFilter; path : string; child : TMXmlElement) : boolean;
    function ParseDataRequirementSort(element : TMXmlElement; path : string) : TFhirDataRequirementSort;
    function ParseDataRequirementSortChild(element : TFhirDataRequirementSort; path : string; child : TMXmlElement) : boolean;
    function ParseDataRequirement(element : TMXmlElement; path : string) : TFhirDataRequirement;
    function ParseDataRequirementChild(element : TFhirDataRequirement; path : string; child : TMXmlElement) : boolean;
    function ParseDosageDoseAndRate(element : TMXmlElement; path : string) : TFhirDosageDoseAndRate;
    function ParseDosageDoseAndRateChild(element : TFhirDosageDoseAndRate; path : string; child : TMXmlElement) : boolean;
    function ParseDosage(element : TMXmlElement; path : string) : TFhirDosage;
    function ParseDosageChild(element : TFhirDosage; path : string; child : TMXmlElement) : boolean;
    function ParseMoney(element : TMXmlElement; path : string) : TFhirMoney;
    function ParseMoneyChild(element : TFhirMoney; path : string; child : TMXmlElement) : boolean;
    function ParseMarketingStatus(element : TMXmlElement; path : string) : TFhirMarketingStatus;
    function ParseMarketingStatusChild(element : TFhirMarketingStatus; path : string; child : TMXmlElement) : boolean;
    function ParseIdentifier(element : TMXmlElement; path : string) : TFhirIdentifier;
    function ParseIdentifierChild(element : TFhirIdentifier; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceAmountReferenceRange(element : TMXmlElement; path : string) : TFhirSubstanceAmountReferenceRange;
    function ParseSubstanceAmountReferenceRangeChild(element : TFhirSubstanceAmountReferenceRange; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceAmount(element : TMXmlElement; path : string) : TFhirSubstanceAmount;
    function ParseSubstanceAmountChild(element : TFhirSubstanceAmount; path : string; child : TMXmlElement) : boolean;
    function ParseCoding(element : TMXmlElement; path : string) : TFhirCoding;
    function ParseCodingChild(element : TFhirCoding; path : string; child : TMXmlElement) : boolean;
    function ParseSampledData(element : TMXmlElement; path : string) : TFhirSampledData;
    function ParseSampledDataChild(element : TFhirSampledData; path : string; child : TMXmlElement) : boolean;
    function ParsePopulation(element : TMXmlElement; path : string) : TFhirPopulation;
    function ParsePopulationChild(element : TFhirPopulation; path : string; child : TMXmlElement) : boolean;
    function ParseRatio(element : TMXmlElement; path : string) : TFhirRatio;
    function ParseRatioChild(element : TFhirRatio; path : string; child : TMXmlElement) : boolean;
    function ParseReference(element : TMXmlElement; path : string) : TFhirReference;
    function ParseReferenceChild(element : TFhirReference; path : string; child : TMXmlElement) : boolean;
    function ParseTriggerDefinition(element : TMXmlElement; path : string) : TFhirTriggerDefinition;
    function ParseTriggerDefinitionChild(element : TFhirTriggerDefinition; path : string; child : TMXmlElement) : boolean;
    function ParsePeriod(element : TMXmlElement; path : string) : TFhirPeriod;
    function ParsePeriodChild(element : TFhirPeriod; path : string; child : TMXmlElement) : boolean;
    function ParseQuantity(element : TMXmlElement; path : string) : TFhirQuantity;
    function ParseQuantityChild(element : TFhirQuantity; path : string; child : TMXmlElement) : boolean;
    function ParseRange(element : TMXmlElement; path : string) : TFhirRange;
    function ParseRangeChild(element : TFhirRange; path : string; child : TMXmlElement) : boolean;
    function ParseRelatedArtifact(element : TMXmlElement; path : string) : TFhirRelatedArtifact;
    function ParseRelatedArtifactChild(element : TFhirRelatedArtifact; path : string; child : TMXmlElement) : boolean;
    function ParseAnnotation(element : TMXmlElement; path : string) : TFhirAnnotation;
    function ParseAnnotationChild(element : TFhirAnnotation; path : string; child : TMXmlElement) : boolean;
    function ParseProductShelfLife(element : TMXmlElement; path : string) : TFhirProductShelfLife;
    function ParseProductShelfLifeChild(element : TFhirProductShelfLife; path : string; child : TMXmlElement) : boolean;
    function ParseContactDetail(element : TMXmlElement; path : string) : TFhirContactDetail;
    function ParseContactDetailChild(element : TFhirContactDetail; path : string; child : TMXmlElement) : boolean;
    function ParseExpression(element : TMXmlElement; path : string) : TFhirExpression;
    function ParseExpressionChild(element : TFhirExpression; path : string; child : TMXmlElement) : boolean;
    function ParseUsageContext(element : TMXmlElement; path : string) : TFhirUsageContext;
    function ParseUsageContextChild(element : TFhirUsageContext; path : string; child : TMXmlElement) : boolean;
    function ParseSignature(element : TMXmlElement; path : string) : TFhirSignature;
    function ParseSignatureChild(element : TFhirSignature; path : string; child : TMXmlElement) : boolean;
    function ParseProdCharacteristic(element : TMXmlElement; path : string) : TFhirProdCharacteristic;
    function ParseProdCharacteristicChild(element : TFhirProdCharacteristic; path : string; child : TMXmlElement) : boolean;
    function ParseCodeableConcept(element : TMXmlElement; path : string) : TFhirCodeableConcept;
    function ParseCodeableConceptChild(element : TFhirCodeableConcept; path : string; child : TMXmlElement) : boolean;
    function ParseParameterDefinition(element : TMXmlElement; path : string) : TFhirParameterDefinition;
    function ParseParameterDefinitionChild(element : TFhirParameterDefinition; path : string; child : TMXmlElement) : boolean;
    function ParseContactPoint(element : TMXmlElement; path : string) : TFhirContactPoint;
    function ParseContactPointChild(element : TFhirContactPoint; path : string; child : TMXmlElement) : boolean;
    function ParseHumanName(element : TMXmlElement; path : string) : TFhirHumanName;
    function ParseHumanNameChild(element : TFhirHumanName; path : string; child : TMXmlElement) : boolean;
    function ParseMeta(element : TMXmlElement; path : string) : TFhirMeta;
    function ParseMetaChild(element : TFhirMeta; path : string; child : TMXmlElement) : boolean;
    function ParseAddress(element : TMXmlElement; path : string) : TFhirAddress;
    function ParseAddressChild(element : TFhirAddress; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionSlicing(element : TMXmlElement; path : string) : TFhirElementDefinitionSlicing;
    function ParseElementDefinitionSlicingChild(element : TFhirElementDefinitionSlicing; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionSlicingDiscriminator(element : TMXmlElement; path : string) : TFhirElementDefinitionSlicingDiscriminator;
    function ParseElementDefinitionSlicingDiscriminatorChild(element : TFhirElementDefinitionSlicingDiscriminator; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionBase(element : TMXmlElement; path : string) : TFhirElementDefinitionBase;
    function ParseElementDefinitionBaseChild(element : TFhirElementDefinitionBase; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionType(element : TMXmlElement; path : string) : TFhirElementDefinitionType;
    function ParseElementDefinitionTypeChild(element : TFhirElementDefinitionType; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionExample(element : TMXmlElement; path : string) : TFhirElementDefinitionExample;
    function ParseElementDefinitionExampleChild(element : TFhirElementDefinitionExample; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionConstraint(element : TMXmlElement; path : string) : TFhirElementDefinitionConstraint;
    function ParseElementDefinitionConstraintChild(element : TFhirElementDefinitionConstraint; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionBinding(element : TMXmlElement; path : string) : TFhirElementDefinitionBinding;
    function ParseElementDefinitionBindingChild(element : TFhirElementDefinitionBinding; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionMapping(element : TMXmlElement; path : string) : TFhirElementDefinitionMapping;
    function ParseElementDefinitionMappingChild(element : TFhirElementDefinitionMapping; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinition(element : TMXmlElement; path : string) : TFhirElementDefinition;
    function ParseElementDefinitionChild(element : TFhirElementDefinition; path : string; child : TMXmlElement) : boolean;
    function ParseTimingRepeat(element : TMXmlElement; path : string) : TFhirTimingRepeat;
    function ParseTimingRepeatChild(element : TFhirTimingRepeat; path : string; child : TMXmlElement) : boolean;
    function ParseTiming(element : TMXmlElement; path : string) : TFhirTiming;
    function ParseTimingChild(element : TFhirTiming; path : string; child : TMXmlElement) : boolean;
    function ParseCount(element : TMXmlElement; path : string) : TFhirCount;
    function ParseCountChild(element : TFhirCount; path : string; child : TMXmlElement) : boolean;
    function ParseAge(element : TMXmlElement; path : string) : TFhirAge;
    function ParseAgeChild(element : TFhirAge; path : string; child : TMXmlElement) : boolean;
    function ParseDistance(element : TMXmlElement; path : string) : TFhirDistance;
    function ParseDistanceChild(element : TFhirDistance; path : string; child : TMXmlElement) : boolean;
    function ParseDuration(element : TMXmlElement; path : string) : TFhirDuration;
    function ParseDurationChild(element : TFhirDuration; path : string; child : TMXmlElement) : boolean;

{$IFDEF FHIR_ACCOUNT}
    function ParseAccountCoverage(element : TMXmlElement; path : string) : TFhirAccountCoverage;
    function ParseAccountCoverageChild(element : TFhirAccountCoverage; path : string; child : TMXmlElement) : boolean;
    function ParseAccountGuarantor(element : TMXmlElement; path : string) : TFhirAccountGuarantor;
    function ParseAccountGuarantorChild(element : TFhirAccountGuarantor; path : string; child : TMXmlElement) : boolean;
    function ParseAccount(element : TMXmlElement; path : string) : TFhirAccount;
    function ParseAccountChild(element : TFhirAccount; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
    function ParseActivityDefinitionParticipant(element : TMXmlElement; path : string) : TFhirActivityDefinitionParticipant;
    function ParseActivityDefinitionParticipantChild(element : TFhirActivityDefinitionParticipant; path : string; child : TMXmlElement) : boolean;
    function ParseActivityDefinitionDynamicValue(element : TMXmlElement; path : string) : TFhirActivityDefinitionDynamicValue;
    function ParseActivityDefinitionDynamicValueChild(element : TFhirActivityDefinitionDynamicValue; path : string; child : TMXmlElement) : boolean;
    function ParseActivityDefinition(element : TMXmlElement; path : string) : TFhirActivityDefinition;
    function ParseActivityDefinitionChild(element : TFhirActivityDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
    function ParseAdverseEventSuspectEntity(element : TMXmlElement; path : string) : TFhirAdverseEventSuspectEntity;
    function ParseAdverseEventSuspectEntityChild(element : TFhirAdverseEventSuspectEntity; path : string; child : TMXmlElement) : boolean;
    function ParseAdverseEventSuspectEntityCausality(element : TMXmlElement; path : string) : TFhirAdverseEventSuspectEntityCausality;
    function ParseAdverseEventSuspectEntityCausalityChild(element : TFhirAdverseEventSuspectEntityCausality; path : string; child : TMXmlElement) : boolean;
    function ParseAdverseEvent(element : TMXmlElement; path : string) : TFhirAdverseEvent;
    function ParseAdverseEventChild(element : TFhirAdverseEvent; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
    function ParseAllergyIntoleranceReaction(element : TMXmlElement; path : string) : TFhirAllergyIntoleranceReaction;
    function ParseAllergyIntoleranceReactionChild(element : TFhirAllergyIntoleranceReaction; path : string; child : TMXmlElement) : boolean;
    function ParseAllergyIntolerance(element : TMXmlElement; path : string) : TFhirAllergyIntolerance;
    function ParseAllergyIntoleranceChild(element : TFhirAllergyIntolerance; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
    function ParseAppointmentParticipant(element : TMXmlElement; path : string) : TFhirAppointmentParticipant;
    function ParseAppointmentParticipantChild(element : TFhirAppointmentParticipant; path : string; child : TMXmlElement) : boolean;
    function ParseAppointment(element : TMXmlElement; path : string) : TFhirAppointment;
    function ParseAppointmentChild(element : TFhirAppointment; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
    function ParseAppointmentResponse(element : TMXmlElement; path : string) : TFhirAppointmentResponse;
    function ParseAppointmentResponseChild(element : TFhirAppointmentResponse; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
    function ParseAuditEventAgent(element : TMXmlElement; path : string) : TFhirAuditEventAgent;
    function ParseAuditEventAgentChild(element : TFhirAuditEventAgent; path : string; child : TMXmlElement) : boolean;
    function ParseAuditEventAgentNetwork(element : TMXmlElement; path : string) : TFhirAuditEventAgentNetwork;
    function ParseAuditEventAgentNetworkChild(element : TFhirAuditEventAgentNetwork; path : string; child : TMXmlElement) : boolean;
    function ParseAuditEventSource(element : TMXmlElement; path : string) : TFhirAuditEventSource;
    function ParseAuditEventSourceChild(element : TFhirAuditEventSource; path : string; child : TMXmlElement) : boolean;
    function ParseAuditEventEntity(element : TMXmlElement; path : string) : TFhirAuditEventEntity;
    function ParseAuditEventEntityChild(element : TFhirAuditEventEntity; path : string; child : TMXmlElement) : boolean;
    function ParseAuditEventEntityDetail(element : TMXmlElement; path : string) : TFhirAuditEventEntityDetail;
    function ParseAuditEventEntityDetailChild(element : TFhirAuditEventEntityDetail; path : string; child : TMXmlElement) : boolean;
    function ParseAuditEvent(element : TMXmlElement; path : string) : TFhirAuditEvent;
    function ParseAuditEventChild(element : TFhirAuditEvent; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
    function ParseBasic(element : TMXmlElement; path : string) : TFhirBasic;
    function ParseBasicChild(element : TFhirBasic; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
    function ParseBinary(element : TMXmlElement; path : string) : TFhirBinary;
    function ParseBinaryChild(element : TFhirBinary; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
    function ParseBiologicallyDerivedProductCollection(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductCollection;
    function ParseBiologicallyDerivedProductCollectionChild(element : TFhirBiologicallyDerivedProductCollection; path : string; child : TMXmlElement) : boolean;
    function ParseBiologicallyDerivedProductProcessing(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductProcessing;
    function ParseBiologicallyDerivedProductProcessingChild(element : TFhirBiologicallyDerivedProductProcessing; path : string; child : TMXmlElement) : boolean;
    function ParseBiologicallyDerivedProductManipulation(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductManipulation;
    function ParseBiologicallyDerivedProductManipulationChild(element : TFhirBiologicallyDerivedProductManipulation; path : string; child : TMXmlElement) : boolean;
    function ParseBiologicallyDerivedProductStorage(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductStorage;
    function ParseBiologicallyDerivedProductStorageChild(element : TFhirBiologicallyDerivedProductStorage; path : string; child : TMXmlElement) : boolean;
    function ParseBiologicallyDerivedProduct(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProduct;
    function ParseBiologicallyDerivedProductChild(element : TFhirBiologicallyDerivedProduct; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
    function ParseBodyStructure(element : TMXmlElement; path : string) : TFhirBodyStructure;
    function ParseBodyStructureChild(element : TFhirBodyStructure; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
    function ParseBundleLink(element : TMXmlElement; path : string) : TFhirBundleLink;
    function ParseBundleLinkChild(element : TFhirBundleLink; path : string; child : TMXmlElement) : boolean;
    function ParseBundleEntry(element : TMXmlElement; path : string) : TFhirBundleEntry;
    function ParseBundleEntryChild(element : TFhirBundleEntry; path : string; child : TMXmlElement) : boolean;
    function ParseBundleEntrySearch(element : TMXmlElement; path : string) : TFhirBundleEntrySearch;
    function ParseBundleEntrySearchChild(element : TFhirBundleEntrySearch; path : string; child : TMXmlElement) : boolean;
    function ParseBundleEntryRequest(element : TMXmlElement; path : string) : TFhirBundleEntryRequest;
    function ParseBundleEntryRequestChild(element : TFhirBundleEntryRequest; path : string; child : TMXmlElement) : boolean;
    function ParseBundleEntryResponse(element : TMXmlElement; path : string) : TFhirBundleEntryResponse;
    function ParseBundleEntryResponseChild(element : TFhirBundleEntryResponse; path : string; child : TMXmlElement) : boolean;
    function ParseBundle(element : TMXmlElement; path : string) : TFhirBundle;
    function ParseBundleChild(element : TFhirBundle; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
    function ParseCapabilityStatementSoftware(element : TMXmlElement; path : string) : TFhirCapabilityStatementSoftware;
    function ParseCapabilityStatementSoftwareChild(element : TFhirCapabilityStatementSoftware; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementImplementation(element : TMXmlElement; path : string) : TFhirCapabilityStatementImplementation;
    function ParseCapabilityStatementImplementationChild(element : TFhirCapabilityStatementImplementation; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementRest(element : TMXmlElement; path : string) : TFhirCapabilityStatementRest;
    function ParseCapabilityStatementRestChild(element : TFhirCapabilityStatementRest; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementRestSecurity(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestSecurity;
    function ParseCapabilityStatementRestSecurityChild(element : TFhirCapabilityStatementRestSecurity; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementRestResource(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResource;
    function ParseCapabilityStatementRestResourceChild(element : TFhirCapabilityStatementRestResource; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementRestResourceInteraction(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResourceInteraction;
    function ParseCapabilityStatementRestResourceInteractionChild(element : TFhirCapabilityStatementRestResourceInteraction; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementRestResourceSearchParam(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResourceSearchParam;
    function ParseCapabilityStatementRestResourceSearchParamChild(element : TFhirCapabilityStatementRestResourceSearchParam; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementRestResourceOperation(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResourceOperation;
    function ParseCapabilityStatementRestResourceOperationChild(element : TFhirCapabilityStatementRestResourceOperation; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementRestInteraction(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestInteraction;
    function ParseCapabilityStatementRestInteractionChild(element : TFhirCapabilityStatementRestInteraction; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementMessaging(element : TMXmlElement; path : string) : TFhirCapabilityStatementMessaging;
    function ParseCapabilityStatementMessagingChild(element : TFhirCapabilityStatementMessaging; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementMessagingEndpoint(element : TMXmlElement; path : string) : TFhirCapabilityStatementMessagingEndpoint;
    function ParseCapabilityStatementMessagingEndpointChild(element : TFhirCapabilityStatementMessagingEndpoint; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementMessagingSupportedMessage(element : TMXmlElement; path : string) : TFhirCapabilityStatementMessagingSupportedMessage;
    function ParseCapabilityStatementMessagingSupportedMessageChild(element : TFhirCapabilityStatementMessagingSupportedMessage; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementDocument(element : TMXmlElement; path : string) : TFhirCapabilityStatementDocument;
    function ParseCapabilityStatementDocumentChild(element : TFhirCapabilityStatementDocument; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatement(element : TMXmlElement; path : string) : TFhirCapabilityStatement;
    function ParseCapabilityStatementChild(element : TFhirCapabilityStatement; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
    function ParseCarePlanActivity(element : TMXmlElement; path : string) : TFhirCarePlanActivity;
    function ParseCarePlanActivityChild(element : TFhirCarePlanActivity; path : string; child : TMXmlElement) : boolean;
    function ParseCarePlanActivityDetail(element : TMXmlElement; path : string) : TFhirCarePlanActivityDetail;
    function ParseCarePlanActivityDetailChild(element : TFhirCarePlanActivityDetail; path : string; child : TMXmlElement) : boolean;
    function ParseCarePlan(element : TMXmlElement; path : string) : TFhirCarePlan;
    function ParseCarePlanChild(element : TFhirCarePlan; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
    function ParseCareTeamParticipant(element : TMXmlElement; path : string) : TFhirCareTeamParticipant;
    function ParseCareTeamParticipantChild(element : TFhirCareTeamParticipant; path : string; child : TMXmlElement) : boolean;
    function ParseCareTeam(element : TMXmlElement; path : string) : TFhirCareTeam;
    function ParseCareTeamChild(element : TFhirCareTeam; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
    function ParseCatalogEntryRelatedEntry(element : TMXmlElement; path : string) : TFhirCatalogEntryRelatedEntry;
    function ParseCatalogEntryRelatedEntryChild(element : TFhirCatalogEntryRelatedEntry; path : string; child : TMXmlElement) : boolean;
    function ParseCatalogEntry(element : TMXmlElement; path : string) : TFhirCatalogEntry;
    function ParseCatalogEntryChild(element : TFhirCatalogEntry; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
    function ParseChargeItemPerformer(element : TMXmlElement; path : string) : TFhirChargeItemPerformer;
    function ParseChargeItemPerformerChild(element : TFhirChargeItemPerformer; path : string; child : TMXmlElement) : boolean;
    function ParseChargeItem(element : TMXmlElement; path : string) : TFhirChargeItem;
    function ParseChargeItemChild(element : TFhirChargeItem; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
    function ParseChargeItemDefinitionApplicability(element : TMXmlElement; path : string) : TFhirChargeItemDefinitionApplicability;
    function ParseChargeItemDefinitionApplicabilityChild(element : TFhirChargeItemDefinitionApplicability; path : string; child : TMXmlElement) : boolean;
    function ParseChargeItemDefinitionPropertyGroup(element : TMXmlElement; path : string) : TFhirChargeItemDefinitionPropertyGroup;
    function ParseChargeItemDefinitionPropertyGroupChild(element : TFhirChargeItemDefinitionPropertyGroup; path : string; child : TMXmlElement) : boolean;
    function ParseChargeItemDefinitionPropertyGroupPriceComponent(element : TMXmlElement; path : string) : TFhirChargeItemDefinitionPropertyGroupPriceComponent;
    function ParseChargeItemDefinitionPropertyGroupPriceComponentChild(element : TFhirChargeItemDefinitionPropertyGroupPriceComponent; path : string; child : TMXmlElement) : boolean;
    function ParseChargeItemDefinition(element : TMXmlElement; path : string) : TFhirChargeItemDefinition;
    function ParseChargeItemDefinitionChild(element : TFhirChargeItemDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CLAIM}
    function ParseClaimRelated(element : TMXmlElement; path : string) : TFhirClaimRelated;
    function ParseClaimRelatedChild(element : TFhirClaimRelated; path : string; child : TMXmlElement) : boolean;
    function ParseClaimPayee(element : TMXmlElement; path : string) : TFhirClaimPayee;
    function ParseClaimPayeeChild(element : TFhirClaimPayee; path : string; child : TMXmlElement) : boolean;
    function ParseClaimCareTeam(element : TMXmlElement; path : string) : TFhirClaimCareTeam;
    function ParseClaimCareTeamChild(element : TFhirClaimCareTeam; path : string; child : TMXmlElement) : boolean;
    function ParseClaimSupportingInfo(element : TMXmlElement; path : string) : TFhirClaimSupportingInfo;
    function ParseClaimSupportingInfoChild(element : TFhirClaimSupportingInfo; path : string; child : TMXmlElement) : boolean;
    function ParseClaimDiagnosis(element : TMXmlElement; path : string) : TFhirClaimDiagnosis;
    function ParseClaimDiagnosisChild(element : TFhirClaimDiagnosis; path : string; child : TMXmlElement) : boolean;
    function ParseClaimProcedure(element : TMXmlElement; path : string) : TFhirClaimProcedure;
    function ParseClaimProcedureChild(element : TFhirClaimProcedure; path : string; child : TMXmlElement) : boolean;
    function ParseClaimInsurance(element : TMXmlElement; path : string) : TFhirClaimInsurance;
    function ParseClaimInsuranceChild(element : TFhirClaimInsurance; path : string; child : TMXmlElement) : boolean;
    function ParseClaimAccident(element : TMXmlElement; path : string) : TFhirClaimAccident;
    function ParseClaimAccidentChild(element : TFhirClaimAccident; path : string; child : TMXmlElement) : boolean;
    function ParseClaimItem(element : TMXmlElement; path : string) : TFhirClaimItem;
    function ParseClaimItemChild(element : TFhirClaimItem; path : string; child : TMXmlElement) : boolean;
    function ParseClaimItemDetail(element : TMXmlElement; path : string) : TFhirClaimItemDetail;
    function ParseClaimItemDetailChild(element : TFhirClaimItemDetail; path : string; child : TMXmlElement) : boolean;
    function ParseClaimItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirClaimItemDetailSubDetail;
    function ParseClaimItemDetailSubDetailChild(element : TFhirClaimItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
    function ParseClaim(element : TMXmlElement; path : string) : TFhirClaim;
    function ParseClaimChild(element : TFhirClaim; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
    function ParseClaimResponseItem(element : TMXmlElement; path : string) : TFhirClaimResponseItem;
    function ParseClaimResponseItemChild(element : TFhirClaimResponseItem; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseItemAdjudication(element : TMXmlElement; path : string) : TFhirClaimResponseItemAdjudication;
    function ParseClaimResponseItemAdjudicationChild(element : TFhirClaimResponseItemAdjudication; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseItemDetail(element : TMXmlElement; path : string) : TFhirClaimResponseItemDetail;
    function ParseClaimResponseItemDetailChild(element : TFhirClaimResponseItemDetail; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirClaimResponseItemDetailSubDetail;
    function ParseClaimResponseItemDetailSubDetailChild(element : TFhirClaimResponseItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseAddItem(element : TMXmlElement; path : string) : TFhirClaimResponseAddItem;
    function ParseClaimResponseAddItemChild(element : TFhirClaimResponseAddItem; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseAddItemDetail(element : TMXmlElement; path : string) : TFhirClaimResponseAddItemDetail;
    function ParseClaimResponseAddItemDetailChild(element : TFhirClaimResponseAddItemDetail; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseAddItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirClaimResponseAddItemDetailSubDetail;
    function ParseClaimResponseAddItemDetailSubDetailChild(element : TFhirClaimResponseAddItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseTotal(element : TMXmlElement; path : string) : TFhirClaimResponseTotal;
    function ParseClaimResponseTotalChild(element : TFhirClaimResponseTotal; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponsePayment(element : TMXmlElement; path : string) : TFhirClaimResponsePayment;
    function ParseClaimResponsePaymentChild(element : TFhirClaimResponsePayment; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseProcessNote(element : TMXmlElement; path : string) : TFhirClaimResponseProcessNote;
    function ParseClaimResponseProcessNoteChild(element : TFhirClaimResponseProcessNote; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseInsurance(element : TMXmlElement; path : string) : TFhirClaimResponseInsurance;
    function ParseClaimResponseInsuranceChild(element : TFhirClaimResponseInsurance; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseError(element : TMXmlElement; path : string) : TFhirClaimResponseError;
    function ParseClaimResponseErrorChild(element : TFhirClaimResponseError; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponse(element : TMXmlElement; path : string) : TFhirClaimResponse;
    function ParseClaimResponseChild(element : TFhirClaimResponse; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
    function ParseClinicalImpressionInvestigation(element : TMXmlElement; path : string) : TFhirClinicalImpressionInvestigation;
    function ParseClinicalImpressionInvestigationChild(element : TFhirClinicalImpressionInvestigation; path : string; child : TMXmlElement) : boolean;
    function ParseClinicalImpressionFinding(element : TMXmlElement; path : string) : TFhirClinicalImpressionFinding;
    function ParseClinicalImpressionFindingChild(element : TFhirClinicalImpressionFinding; path : string; child : TMXmlElement) : boolean;
    function ParseClinicalImpression(element : TMXmlElement; path : string) : TFhirClinicalImpression;
    function ParseClinicalImpressionChild(element : TFhirClinicalImpression; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
    function ParseCodeSystemFilter(element : TMXmlElement; path : string) : TFhirCodeSystemFilter;
    function ParseCodeSystemFilterChild(element : TFhirCodeSystemFilter; path : string; child : TMXmlElement) : boolean;
    function ParseCodeSystemProperty(element : TMXmlElement; path : string) : TFhirCodeSystemProperty;
    function ParseCodeSystemPropertyChild(element : TFhirCodeSystemProperty; path : string; child : TMXmlElement) : boolean;
    function ParseCodeSystemConcept(element : TMXmlElement; path : string) : TFhirCodeSystemConcept;
    function ParseCodeSystemConceptChild(element : TFhirCodeSystemConcept; path : string; child : TMXmlElement) : boolean;
    function ParseCodeSystemConceptDesignation(element : TMXmlElement; path : string) : TFhirCodeSystemConceptDesignation;
    function ParseCodeSystemConceptDesignationChild(element : TFhirCodeSystemConceptDesignation; path : string; child : TMXmlElement) : boolean;
    function ParseCodeSystemConceptProperty(element : TMXmlElement; path : string) : TFhirCodeSystemConceptProperty;
    function ParseCodeSystemConceptPropertyChild(element : TFhirCodeSystemConceptProperty; path : string; child : TMXmlElement) : boolean;
    function ParseCodeSystem(element : TMXmlElement; path : string) : TFhirCodeSystem;
    function ParseCodeSystemChild(element : TFhirCodeSystem; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
    function ParseCommunicationPayload(element : TMXmlElement; path : string) : TFhirCommunicationPayload;
    function ParseCommunicationPayloadChild(element : TFhirCommunicationPayload; path : string; child : TMXmlElement) : boolean;
    function ParseCommunication(element : TMXmlElement; path : string) : TFhirCommunication;
    function ParseCommunicationChild(element : TFhirCommunication; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
    function ParseCommunicationRequestPayload(element : TMXmlElement; path : string) : TFhirCommunicationRequestPayload;
    function ParseCommunicationRequestPayloadChild(element : TFhirCommunicationRequestPayload; path : string; child : TMXmlElement) : boolean;
    function ParseCommunicationRequest(element : TMXmlElement; path : string) : TFhirCommunicationRequest;
    function ParseCommunicationRequestChild(element : TFhirCommunicationRequest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
    function ParseCompartmentDefinitionResource(element : TMXmlElement; path : string) : TFhirCompartmentDefinitionResource;
    function ParseCompartmentDefinitionResourceChild(element : TFhirCompartmentDefinitionResource; path : string; child : TMXmlElement) : boolean;
    function ParseCompartmentDefinition(element : TMXmlElement; path : string) : TFhirCompartmentDefinition;
    function ParseCompartmentDefinitionChild(element : TFhirCompartmentDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
    function ParseCompositionAttester(element : TMXmlElement; path : string) : TFhirCompositionAttester;
    function ParseCompositionAttesterChild(element : TFhirCompositionAttester; path : string; child : TMXmlElement) : boolean;
    function ParseCompositionRelatesTo(element : TMXmlElement; path : string) : TFhirCompositionRelatesTo;
    function ParseCompositionRelatesToChild(element : TFhirCompositionRelatesTo; path : string; child : TMXmlElement) : boolean;
    function ParseCompositionEvent(element : TMXmlElement; path : string) : TFhirCompositionEvent;
    function ParseCompositionEventChild(element : TFhirCompositionEvent; path : string; child : TMXmlElement) : boolean;
    function ParseCompositionSection(element : TMXmlElement; path : string) : TFhirCompositionSection;
    function ParseCompositionSectionChild(element : TFhirCompositionSection; path : string; child : TMXmlElement) : boolean;
    function ParseComposition(element : TMXmlElement; path : string) : TFhirComposition;
    function ParseCompositionChild(element : TFhirComposition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
    function ParseConceptMapGroup(element : TMXmlElement; path : string) : TFhirConceptMapGroup;
    function ParseConceptMapGroupChild(element : TFhirConceptMapGroup; path : string; child : TMXmlElement) : boolean;
    function ParseConceptMapGroupElement(element : TMXmlElement; path : string) : TFhirConceptMapGroupElement;
    function ParseConceptMapGroupElementChild(element : TFhirConceptMapGroupElement; path : string; child : TMXmlElement) : boolean;
    function ParseConceptMapGroupElementTarget(element : TMXmlElement; path : string) : TFhirConceptMapGroupElementTarget;
    function ParseConceptMapGroupElementTargetChild(element : TFhirConceptMapGroupElementTarget; path : string; child : TMXmlElement) : boolean;
    function ParseConceptMapGroupElementTargetDependsOn(element : TMXmlElement; path : string) : TFhirConceptMapGroupElementTargetDependsOn;
    function ParseConceptMapGroupElementTargetDependsOnChild(element : TFhirConceptMapGroupElementTargetDependsOn; path : string; child : TMXmlElement) : boolean;
    function ParseConceptMapGroupUnmapped(element : TMXmlElement; path : string) : TFhirConceptMapGroupUnmapped;
    function ParseConceptMapGroupUnmappedChild(element : TFhirConceptMapGroupUnmapped; path : string; child : TMXmlElement) : boolean;
    function ParseConceptMap(element : TMXmlElement; path : string) : TFhirConceptMap;
    function ParseConceptMapChild(element : TFhirConceptMap; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
    function ParseConditionStage(element : TMXmlElement; path : string) : TFhirConditionStage;
    function ParseConditionStageChild(element : TFhirConditionStage; path : string; child : TMXmlElement) : boolean;
    function ParseConditionEvidence(element : TMXmlElement; path : string) : TFhirConditionEvidence;
    function ParseConditionEvidenceChild(element : TFhirConditionEvidence; path : string; child : TMXmlElement) : boolean;
    function ParseCondition(element : TMXmlElement; path : string) : TFhirCondition;
    function ParseConditionChild(element : TFhirCondition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
    function ParseConsentPolicy(element : TMXmlElement; path : string) : TFhirConsentPolicy;
    function ParseConsentPolicyChild(element : TFhirConsentPolicy; path : string; child : TMXmlElement) : boolean;
    function ParseConsentVerification(element : TMXmlElement; path : string) : TFhirConsentVerification;
    function ParseConsentVerificationChild(element : TFhirConsentVerification; path : string; child : TMXmlElement) : boolean;
    function ParseConsentProvision(element : TMXmlElement; path : string) : TFhirConsentProvision;
    function ParseConsentProvisionChild(element : TFhirConsentProvision; path : string; child : TMXmlElement) : boolean;
    function ParseConsentProvisionActor(element : TMXmlElement; path : string) : TFhirConsentProvisionActor;
    function ParseConsentProvisionActorChild(element : TFhirConsentProvisionActor; path : string; child : TMXmlElement) : boolean;
    function ParseConsentProvisionData(element : TMXmlElement; path : string) : TFhirConsentProvisionData;
    function ParseConsentProvisionDataChild(element : TFhirConsentProvisionData; path : string; child : TMXmlElement) : boolean;
    function ParseConsent(element : TMXmlElement; path : string) : TFhirConsent;
    function ParseConsentChild(element : TFhirConsent; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
    function ParseContractContentDefinition(element : TMXmlElement; path : string) : TFhirContractContentDefinition;
    function ParseContractContentDefinitionChild(element : TFhirContractContentDefinition; path : string; child : TMXmlElement) : boolean;
    function ParseContractTerm(element : TMXmlElement; path : string) : TFhirContractTerm;
    function ParseContractTermChild(element : TFhirContractTerm; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermSecurityLabel(element : TMXmlElement; path : string) : TFhirContractTermSecurityLabel;
    function ParseContractTermSecurityLabelChild(element : TFhirContractTermSecurityLabel; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermOffer(element : TMXmlElement; path : string) : TFhirContractTermOffer;
    function ParseContractTermOfferChild(element : TFhirContractTermOffer; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermOfferParty(element : TMXmlElement; path : string) : TFhirContractTermOfferParty;
    function ParseContractTermOfferPartyChild(element : TFhirContractTermOfferParty; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermOfferAnswer(element : TMXmlElement; path : string) : TFhirContractTermOfferAnswer;
    function ParseContractTermOfferAnswerChild(element : TFhirContractTermOfferAnswer; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermAsset(element : TMXmlElement; path : string) : TFhirContractTermAsset;
    function ParseContractTermAssetChild(element : TFhirContractTermAsset; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermAssetContext(element : TMXmlElement; path : string) : TFhirContractTermAssetContext;
    function ParseContractTermAssetContextChild(element : TFhirContractTermAssetContext; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermAssetValuedItem(element : TMXmlElement; path : string) : TFhirContractTermAssetValuedItem;
    function ParseContractTermAssetValuedItemChild(element : TFhirContractTermAssetValuedItem; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermAction(element : TMXmlElement; path : string) : TFhirContractTermAction;
    function ParseContractTermActionChild(element : TFhirContractTermAction; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermActionSubject(element : TMXmlElement; path : string) : TFhirContractTermActionSubject;
    function ParseContractTermActionSubjectChild(element : TFhirContractTermActionSubject; path : string; child : TMXmlElement) : boolean;
    function ParseContractSigner(element : TMXmlElement; path : string) : TFhirContractSigner;
    function ParseContractSignerChild(element : TFhirContractSigner; path : string; child : TMXmlElement) : boolean;
    function ParseContractFriendly(element : TMXmlElement; path : string) : TFhirContractFriendly;
    function ParseContractFriendlyChild(element : TFhirContractFriendly; path : string; child : TMXmlElement) : boolean;
    function ParseContractLegal(element : TMXmlElement; path : string) : TFhirContractLegal;
    function ParseContractLegalChild(element : TFhirContractLegal; path : string; child : TMXmlElement) : boolean;
    function ParseContractRule(element : TMXmlElement; path : string) : TFhirContractRule;
    function ParseContractRuleChild(element : TFhirContractRule; path : string; child : TMXmlElement) : boolean;
    function ParseContract(element : TMXmlElement; path : string) : TFhirContract;
    function ParseContractChild(element : TFhirContract; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
    function ParseCoverageClass(element : TMXmlElement; path : string) : TFhirCoverageClass;
    function ParseCoverageClassChild(element : TFhirCoverageClass; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageCostToBeneficiary(element : TMXmlElement; path : string) : TFhirCoverageCostToBeneficiary;
    function ParseCoverageCostToBeneficiaryChild(element : TFhirCoverageCostToBeneficiary; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageCostToBeneficiaryException(element : TMXmlElement; path : string) : TFhirCoverageCostToBeneficiaryException;
    function ParseCoverageCostToBeneficiaryExceptionChild(element : TFhirCoverageCostToBeneficiaryException; path : string; child : TMXmlElement) : boolean;
    function ParseCoverage(element : TMXmlElement; path : string) : TFhirCoverage;
    function ParseCoverageChild(element : TFhirCoverage; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
    function ParseCoverageEligibilityRequestSupportingInfo(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestSupportingInfo;
    function ParseCoverageEligibilityRequestSupportingInfoChild(element : TFhirCoverageEligibilityRequestSupportingInfo; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityRequestInsurance(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestInsurance;
    function ParseCoverageEligibilityRequestInsuranceChild(element : TFhirCoverageEligibilityRequestInsurance; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityRequestItem(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestItem;
    function ParseCoverageEligibilityRequestItemChild(element : TFhirCoverageEligibilityRequestItem; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityRequestItemDiagnosis(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestItemDiagnosis;
    function ParseCoverageEligibilityRequestItemDiagnosisChild(element : TFhirCoverageEligibilityRequestItemDiagnosis; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityRequest(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequest;
    function ParseCoverageEligibilityRequestChild(element : TFhirCoverageEligibilityRequest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
    function ParseCoverageEligibilityResponseInsurance(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseInsurance;
    function ParseCoverageEligibilityResponseInsuranceChild(element : TFhirCoverageEligibilityResponseInsurance; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityResponseInsuranceItem(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseInsuranceItem;
    function ParseCoverageEligibilityResponseInsuranceItemChild(element : TFhirCoverageEligibilityResponseInsuranceItem; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityResponseInsuranceItemBenefit(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseInsuranceItemBenefit;
    function ParseCoverageEligibilityResponseInsuranceItemBenefitChild(element : TFhirCoverageEligibilityResponseInsuranceItemBenefit; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityResponseError(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseError;
    function ParseCoverageEligibilityResponseErrorChild(element : TFhirCoverageEligibilityResponseError; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityResponse(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponse;
    function ParseCoverageEligibilityResponseChild(element : TFhirCoverageEligibilityResponse; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
    function ParseDetectedIssueEvidence(element : TMXmlElement; path : string) : TFhirDetectedIssueEvidence;
    function ParseDetectedIssueEvidenceChild(element : TFhirDetectedIssueEvidence; path : string; child : TMXmlElement) : boolean;
    function ParseDetectedIssueMitigation(element : TMXmlElement; path : string) : TFhirDetectedIssueMitigation;
    function ParseDetectedIssueMitigationChild(element : TFhirDetectedIssueMitigation; path : string; child : TMXmlElement) : boolean;
    function ParseDetectedIssue(element : TMXmlElement; path : string) : TFhirDetectedIssue;
    function ParseDetectedIssueChild(element : TFhirDetectedIssue; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
    function ParseDeviceUdiCarrier(element : TMXmlElement; path : string) : TFhirDeviceUdiCarrier;
    function ParseDeviceUdiCarrierChild(element : TFhirDeviceUdiCarrier; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceDeviceName(element : TMXmlElement; path : string) : TFhirDeviceDeviceName;
    function ParseDeviceDeviceNameChild(element : TFhirDeviceDeviceName; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceSpecialization(element : TMXmlElement; path : string) : TFhirDeviceSpecialization;
    function ParseDeviceSpecializationChild(element : TFhirDeviceSpecialization; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceVersion(element : TMXmlElement; path : string) : TFhirDeviceVersion;
    function ParseDeviceVersionChild(element : TFhirDeviceVersion; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceProperty(element : TMXmlElement; path : string) : TFhirDeviceProperty;
    function ParseDevicePropertyChild(element : TFhirDeviceProperty; path : string; child : TMXmlElement) : boolean;
    function ParseDevice(element : TMXmlElement; path : string) : TFhirDevice;
    function ParseDeviceChild(element : TFhirDevice; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
    function ParseDeviceDefinitionUdiDeviceIdentifier(element : TMXmlElement; path : string) : TFhirDeviceDefinitionUdiDeviceIdentifier;
    function ParseDeviceDefinitionUdiDeviceIdentifierChild(element : TFhirDeviceDefinitionUdiDeviceIdentifier; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceDefinitionDeviceName(element : TMXmlElement; path : string) : TFhirDeviceDefinitionDeviceName;
    function ParseDeviceDefinitionDeviceNameChild(element : TFhirDeviceDefinitionDeviceName; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceDefinitionSpecialization(element : TMXmlElement; path : string) : TFhirDeviceDefinitionSpecialization;
    function ParseDeviceDefinitionSpecializationChild(element : TFhirDeviceDefinitionSpecialization; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceDefinitionCapability(element : TMXmlElement; path : string) : TFhirDeviceDefinitionCapability;
    function ParseDeviceDefinitionCapabilityChild(element : TFhirDeviceDefinitionCapability; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceDefinitionProperty(element : TMXmlElement; path : string) : TFhirDeviceDefinitionProperty;
    function ParseDeviceDefinitionPropertyChild(element : TFhirDeviceDefinitionProperty; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceDefinitionMaterial(element : TMXmlElement; path : string) : TFhirDeviceDefinitionMaterial;
    function ParseDeviceDefinitionMaterialChild(element : TFhirDeviceDefinitionMaterial; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceDefinition(element : TMXmlElement; path : string) : TFhirDeviceDefinition;
    function ParseDeviceDefinitionChild(element : TFhirDeviceDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
    function ParseDeviceMetricCalibration(element : TMXmlElement; path : string) : TFhirDeviceMetricCalibration;
    function ParseDeviceMetricCalibrationChild(element : TFhirDeviceMetricCalibration; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceMetric(element : TMXmlElement; path : string) : TFhirDeviceMetric;
    function ParseDeviceMetricChild(element : TFhirDeviceMetric; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
    function ParseDeviceRequestParameter(element : TMXmlElement; path : string) : TFhirDeviceRequestParameter;
    function ParseDeviceRequestParameterChild(element : TFhirDeviceRequestParameter; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceRequest(element : TMXmlElement; path : string) : TFhirDeviceRequest;
    function ParseDeviceRequestChild(element : TFhirDeviceRequest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
    function ParseDeviceUseStatement(element : TMXmlElement; path : string) : TFhirDeviceUseStatement;
    function ParseDeviceUseStatementChild(element : TFhirDeviceUseStatement; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
    function ParseDiagnosticReportMedia(element : TMXmlElement; path : string) : TFhirDiagnosticReportMedia;
    function ParseDiagnosticReportMediaChild(element : TFhirDiagnosticReportMedia; path : string; child : TMXmlElement) : boolean;
    function ParseDiagnosticReport(element : TMXmlElement; path : string) : TFhirDiagnosticReport;
    function ParseDiagnosticReportChild(element : TFhirDiagnosticReport; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
    function ParseDocumentManifestRelated(element : TMXmlElement; path : string) : TFhirDocumentManifestRelated;
    function ParseDocumentManifestRelatedChild(element : TFhirDocumentManifestRelated; path : string; child : TMXmlElement) : boolean;
    function ParseDocumentManifest(element : TMXmlElement; path : string) : TFhirDocumentManifest;
    function ParseDocumentManifestChild(element : TFhirDocumentManifest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
    function ParseDocumentReferenceRelatesTo(element : TMXmlElement; path : string) : TFhirDocumentReferenceRelatesTo;
    function ParseDocumentReferenceRelatesToChild(element : TFhirDocumentReferenceRelatesTo; path : string; child : TMXmlElement) : boolean;
    function ParseDocumentReferenceContent(element : TMXmlElement; path : string) : TFhirDocumentReferenceContent;
    function ParseDocumentReferenceContentChild(element : TFhirDocumentReferenceContent; path : string; child : TMXmlElement) : boolean;
    function ParseDocumentReferenceContext(element : TMXmlElement; path : string) : TFhirDocumentReferenceContext;
    function ParseDocumentReferenceContextChild(element : TFhirDocumentReferenceContext; path : string; child : TMXmlElement) : boolean;
    function ParseDocumentReference(element : TMXmlElement; path : string) : TFhirDocumentReference;
    function ParseDocumentReferenceChild(element : TFhirDocumentReference; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_EFFECTEVIDENCESYNTHESIS}
    function ParseEffectEvidenceSynthesisSampleSize(element : TMXmlElement; path : string) : TFhirEffectEvidenceSynthesisSampleSize;
    function ParseEffectEvidenceSynthesisSampleSizeChild(element : TFhirEffectEvidenceSynthesisSampleSize; path : string; child : TMXmlElement) : boolean;
    function ParseEffectEvidenceSynthesisResultsByExposure(element : TMXmlElement; path : string) : TFhirEffectEvidenceSynthesisResultsByExposure;
    function ParseEffectEvidenceSynthesisResultsByExposureChild(element : TFhirEffectEvidenceSynthesisResultsByExposure; path : string; child : TMXmlElement) : boolean;
    function ParseEffectEvidenceSynthesisEffectEstimate(element : TMXmlElement; path : string) : TFhirEffectEvidenceSynthesisEffectEstimate;
    function ParseEffectEvidenceSynthesisEffectEstimateChild(element : TFhirEffectEvidenceSynthesisEffectEstimate; path : string; child : TMXmlElement) : boolean;
    function ParseEffectEvidenceSynthesisEffectEstimatePrecisionEstimate(element : TMXmlElement; path : string) : TFhirEffectEvidenceSynthesisEffectEstimatePrecisionEstimate;
    function ParseEffectEvidenceSynthesisEffectEstimatePrecisionEstimateChild(element : TFhirEffectEvidenceSynthesisEffectEstimatePrecisionEstimate; path : string; child : TMXmlElement) : boolean;
    function ParseEffectEvidenceSynthesisCertainty(element : TMXmlElement; path : string) : TFhirEffectEvidenceSynthesisCertainty;
    function ParseEffectEvidenceSynthesisCertaintyChild(element : TFhirEffectEvidenceSynthesisCertainty; path : string; child : TMXmlElement) : boolean;
    function ParseEffectEvidenceSynthesisCertaintyCertaintySubcomponent(element : TMXmlElement; path : string) : TFhirEffectEvidenceSynthesisCertaintyCertaintySubcomponent;
    function ParseEffectEvidenceSynthesisCertaintyCertaintySubcomponentChild(element : TFhirEffectEvidenceSynthesisCertaintyCertaintySubcomponent; path : string; child : TMXmlElement) : boolean;
    function ParseEffectEvidenceSynthesis(element : TMXmlElement; path : string) : TFhirEffectEvidenceSynthesis;
    function ParseEffectEvidenceSynthesisChild(element : TFhirEffectEvidenceSynthesis; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_EFFECTEVIDENCESYNTHESIS}
{$IFDEF FHIR_ENCOUNTER}
    function ParseEncounterStatusHistory(element : TMXmlElement; path : string) : TFhirEncounterStatusHistory;
    function ParseEncounterStatusHistoryChild(element : TFhirEncounterStatusHistory; path : string; child : TMXmlElement) : boolean;
    function ParseEncounterClassHistory(element : TMXmlElement; path : string) : TFhirEncounterClassHistory;
    function ParseEncounterClassHistoryChild(element : TFhirEncounterClassHistory; path : string; child : TMXmlElement) : boolean;
    function ParseEncounterParticipant(element : TMXmlElement; path : string) : TFhirEncounterParticipant;
    function ParseEncounterParticipantChild(element : TFhirEncounterParticipant; path : string; child : TMXmlElement) : boolean;
    function ParseEncounterDiagnosis(element : TMXmlElement; path : string) : TFhirEncounterDiagnosis;
    function ParseEncounterDiagnosisChild(element : TFhirEncounterDiagnosis; path : string; child : TMXmlElement) : boolean;
    function ParseEncounterHospitalization(element : TMXmlElement; path : string) : TFhirEncounterHospitalization;
    function ParseEncounterHospitalizationChild(element : TFhirEncounterHospitalization; path : string; child : TMXmlElement) : boolean;
    function ParseEncounterLocation(element : TMXmlElement; path : string) : TFhirEncounterLocation;
    function ParseEncounterLocationChild(element : TFhirEncounterLocation; path : string; child : TMXmlElement) : boolean;
    function ParseEncounter(element : TMXmlElement; path : string) : TFhirEncounter;
    function ParseEncounterChild(element : TFhirEncounter; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
    function ParseEndpoint(element : TMXmlElement; path : string) : TFhirEndpoint;
    function ParseEndpointChild(element : TFhirEndpoint; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
    function ParseEnrollmentRequest(element : TMXmlElement; path : string) : TFhirEnrollmentRequest;
    function ParseEnrollmentRequestChild(element : TFhirEnrollmentRequest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
    function ParseEnrollmentResponse(element : TMXmlElement; path : string) : TFhirEnrollmentResponse;
    function ParseEnrollmentResponseChild(element : TFhirEnrollmentResponse; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
    function ParseEpisodeOfCareStatusHistory(element : TMXmlElement; path : string) : TFhirEpisodeOfCareStatusHistory;
    function ParseEpisodeOfCareStatusHistoryChild(element : TFhirEpisodeOfCareStatusHistory; path : string; child : TMXmlElement) : boolean;
    function ParseEpisodeOfCareDiagnosis(element : TMXmlElement; path : string) : TFhirEpisodeOfCareDiagnosis;
    function ParseEpisodeOfCareDiagnosisChild(element : TFhirEpisodeOfCareDiagnosis; path : string; child : TMXmlElement) : boolean;
    function ParseEpisodeOfCare(element : TMXmlElement; path : string) : TFhirEpisodeOfCare;
    function ParseEpisodeOfCareChild(element : TFhirEpisodeOfCare; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
    function ParseEventDefinition(element : TMXmlElement; path : string) : TFhirEventDefinition;
    function ParseEventDefinitionChild(element : TFhirEventDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
    function ParseEvidence(element : TMXmlElement; path : string) : TFhirEvidence;
    function ParseEvidenceChild(element : TFhirEvidence; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEVARIABLE}
    function ParseEvidenceVariableCharacteristic(element : TMXmlElement; path : string) : TFhirEvidenceVariableCharacteristic;
    function ParseEvidenceVariableCharacteristicChild(element : TFhirEvidenceVariableCharacteristic; path : string; child : TMXmlElement) : boolean;
    function ParseEvidenceVariable(element : TMXmlElement; path : string) : TFhirEvidenceVariable;
    function ParseEvidenceVariableChild(element : TFhirEvidenceVariable; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
    function ParseExampleScenarioActor(element : TMXmlElement; path : string) : TFhirExampleScenarioActor;
    function ParseExampleScenarioActorChild(element : TFhirExampleScenarioActor; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenarioInstance(element : TMXmlElement; path : string) : TFhirExampleScenarioInstance;
    function ParseExampleScenarioInstanceChild(element : TFhirExampleScenarioInstance; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenarioInstanceVersion(element : TMXmlElement; path : string) : TFhirExampleScenarioInstanceVersion;
    function ParseExampleScenarioInstanceVersionChild(element : TFhirExampleScenarioInstanceVersion; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenarioInstanceContainedInstance(element : TMXmlElement; path : string) : TFhirExampleScenarioInstanceContainedInstance;
    function ParseExampleScenarioInstanceContainedInstanceChild(element : TFhirExampleScenarioInstanceContainedInstance; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenarioProcess(element : TMXmlElement; path : string) : TFhirExampleScenarioProcess;
    function ParseExampleScenarioProcessChild(element : TFhirExampleScenarioProcess; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenarioProcessStep(element : TMXmlElement; path : string) : TFhirExampleScenarioProcessStep;
    function ParseExampleScenarioProcessStepChild(element : TFhirExampleScenarioProcessStep; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenarioProcessStepOperation(element : TMXmlElement; path : string) : TFhirExampleScenarioProcessStepOperation;
    function ParseExampleScenarioProcessStepOperationChild(element : TFhirExampleScenarioProcessStepOperation; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenarioProcessStepAlternative(element : TMXmlElement; path : string) : TFhirExampleScenarioProcessStepAlternative;
    function ParseExampleScenarioProcessStepAlternativeChild(element : TFhirExampleScenarioProcessStepAlternative; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenario(element : TMXmlElement; path : string) : TFhirExampleScenario;
    function ParseExampleScenarioChild(element : TFhirExampleScenario; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
    function ParseExplanationOfBenefitRelated(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitRelated;
    function ParseExplanationOfBenefitRelatedChild(element : TFhirExplanationOfBenefitRelated; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitPayee(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitPayee;
    function ParseExplanationOfBenefitPayeeChild(element : TFhirExplanationOfBenefitPayee; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitCareTeam(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitCareTeam;
    function ParseExplanationOfBenefitCareTeamChild(element : TFhirExplanationOfBenefitCareTeam; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitSupportingInfo(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitSupportingInfo;
    function ParseExplanationOfBenefitSupportingInfoChild(element : TFhirExplanationOfBenefitSupportingInfo; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitDiagnosis(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitDiagnosis;
    function ParseExplanationOfBenefitDiagnosisChild(element : TFhirExplanationOfBenefitDiagnosis; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitProcedure(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitProcedure;
    function ParseExplanationOfBenefitProcedureChild(element : TFhirExplanationOfBenefitProcedure; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitInsurance(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitInsurance;
    function ParseExplanationOfBenefitInsuranceChild(element : TFhirExplanationOfBenefitInsurance; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitAccident(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAccident;
    function ParseExplanationOfBenefitAccidentChild(element : TFhirExplanationOfBenefitAccident; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitItem(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItem;
    function ParseExplanationOfBenefitItemChild(element : TFhirExplanationOfBenefitItem; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitItemAdjudication(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItemAdjudication;
    function ParseExplanationOfBenefitItemAdjudicationChild(element : TFhirExplanationOfBenefitItemAdjudication; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitItemDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItemDetail;
    function ParseExplanationOfBenefitItemDetailChild(element : TFhirExplanationOfBenefitItemDetail; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItemDetailSubDetail;
    function ParseExplanationOfBenefitItemDetailSubDetailChild(element : TFhirExplanationOfBenefitItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitAddItem(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAddItem;
    function ParseExplanationOfBenefitAddItemChild(element : TFhirExplanationOfBenefitAddItem; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitAddItemDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAddItemDetail;
    function ParseExplanationOfBenefitAddItemDetailChild(element : TFhirExplanationOfBenefitAddItemDetail; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitAddItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAddItemDetailSubDetail;
    function ParseExplanationOfBenefitAddItemDetailSubDetailChild(element : TFhirExplanationOfBenefitAddItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitTotal(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitTotal;
    function ParseExplanationOfBenefitTotalChild(element : TFhirExplanationOfBenefitTotal; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitPayment(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitPayment;
    function ParseExplanationOfBenefitPaymentChild(element : TFhirExplanationOfBenefitPayment; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitProcessNote(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitProcessNote;
    function ParseExplanationOfBenefitProcessNoteChild(element : TFhirExplanationOfBenefitProcessNote; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitBenefitBalance(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitBenefitBalance;
    function ParseExplanationOfBenefitBenefitBalanceChild(element : TFhirExplanationOfBenefitBenefitBalance; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitBenefitBalanceFinancial(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitBenefitBalanceFinancial;
    function ParseExplanationOfBenefitBenefitBalanceFinancialChild(element : TFhirExplanationOfBenefitBenefitBalanceFinancial; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefit(element : TMXmlElement; path : string) : TFhirExplanationOfBenefit;
    function ParseExplanationOfBenefitChild(element : TFhirExplanationOfBenefit; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
    function ParseFamilyMemberHistoryCondition(element : TMXmlElement; path : string) : TFhirFamilyMemberHistoryCondition;
    function ParseFamilyMemberHistoryConditionChild(element : TFhirFamilyMemberHistoryCondition; path : string; child : TMXmlElement) : boolean;
    function ParseFamilyMemberHistory(element : TMXmlElement; path : string) : TFhirFamilyMemberHistory;
    function ParseFamilyMemberHistoryChild(element : TFhirFamilyMemberHistory; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
    function ParseFlag(element : TMXmlElement; path : string) : TFhirFlag;
    function ParseFlagChild(element : TFhirFlag; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
    function ParseGoalTarget(element : TMXmlElement; path : string) : TFhirGoalTarget;
    function ParseGoalTargetChild(element : TFhirGoalTarget; path : string; child : TMXmlElement) : boolean;
    function ParseGoal(element : TMXmlElement; path : string) : TFhirGoal;
    function ParseGoalChild(element : TFhirGoal; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
    function ParseGraphDefinitionLink(element : TMXmlElement; path : string) : TFhirGraphDefinitionLink;
    function ParseGraphDefinitionLinkChild(element : TFhirGraphDefinitionLink; path : string; child : TMXmlElement) : boolean;
    function ParseGraphDefinitionLinkTarget(element : TMXmlElement; path : string) : TFhirGraphDefinitionLinkTarget;
    function ParseGraphDefinitionLinkTargetChild(element : TFhirGraphDefinitionLinkTarget; path : string; child : TMXmlElement) : boolean;
    function ParseGraphDefinitionLinkTargetCompartment(element : TMXmlElement; path : string) : TFhirGraphDefinitionLinkTargetCompartment;
    function ParseGraphDefinitionLinkTargetCompartmentChild(element : TFhirGraphDefinitionLinkTargetCompartment; path : string; child : TMXmlElement) : boolean;
    function ParseGraphDefinition(element : TMXmlElement; path : string) : TFhirGraphDefinition;
    function ParseGraphDefinitionChild(element : TFhirGraphDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
    function ParseGroupCharacteristic(element : TMXmlElement; path : string) : TFhirGroupCharacteristic;
    function ParseGroupCharacteristicChild(element : TFhirGroupCharacteristic; path : string; child : TMXmlElement) : boolean;
    function ParseGroupMember(element : TMXmlElement; path : string) : TFhirGroupMember;
    function ParseGroupMemberChild(element : TFhirGroupMember; path : string; child : TMXmlElement) : boolean;
    function ParseGroup(element : TMXmlElement; path : string) : TFhirGroup;
    function ParseGroupChild(element : TFhirGroup; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
    function ParseGuidanceResponse(element : TMXmlElement; path : string) : TFhirGuidanceResponse;
    function ParseGuidanceResponseChild(element : TFhirGuidanceResponse; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
    function ParseHealthcareServiceEligibility(element : TMXmlElement; path : string) : TFhirHealthcareServiceEligibility;
    function ParseHealthcareServiceEligibilityChild(element : TFhirHealthcareServiceEligibility; path : string; child : TMXmlElement) : boolean;
    function ParseHealthcareServiceAvailableTime(element : TMXmlElement; path : string) : TFhirHealthcareServiceAvailableTime;
    function ParseHealthcareServiceAvailableTimeChild(element : TFhirHealthcareServiceAvailableTime; path : string; child : TMXmlElement) : boolean;
    function ParseHealthcareServiceNotAvailable(element : TMXmlElement; path : string) : TFhirHealthcareServiceNotAvailable;
    function ParseHealthcareServiceNotAvailableChild(element : TFhirHealthcareServiceNotAvailable; path : string; child : TMXmlElement) : boolean;
    function ParseHealthcareService(element : TMXmlElement; path : string) : TFhirHealthcareService;
    function ParseHealthcareServiceChild(element : TFhirHealthcareService; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
    function ParseImagingStudySeries(element : TMXmlElement; path : string) : TFhirImagingStudySeries;
    function ParseImagingStudySeriesChild(element : TFhirImagingStudySeries; path : string; child : TMXmlElement) : boolean;
    function ParseImagingStudySeriesPerformer(element : TMXmlElement; path : string) : TFhirImagingStudySeriesPerformer;
    function ParseImagingStudySeriesPerformerChild(element : TFhirImagingStudySeriesPerformer; path : string; child : TMXmlElement) : boolean;
    function ParseImagingStudySeriesInstance(element : TMXmlElement; path : string) : TFhirImagingStudySeriesInstance;
    function ParseImagingStudySeriesInstanceChild(element : TFhirImagingStudySeriesInstance; path : string; child : TMXmlElement) : boolean;
    function ParseImagingStudy(element : TMXmlElement; path : string) : TFhirImagingStudy;
    function ParseImagingStudyChild(element : TFhirImagingStudy; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
    function ParseImmunizationPerformer(element : TMXmlElement; path : string) : TFhirImmunizationPerformer;
    function ParseImmunizationPerformerChild(element : TFhirImmunizationPerformer; path : string; child : TMXmlElement) : boolean;
    function ParseImmunizationEducation(element : TMXmlElement; path : string) : TFhirImmunizationEducation;
    function ParseImmunizationEducationChild(element : TFhirImmunizationEducation; path : string; child : TMXmlElement) : boolean;
    function ParseImmunizationReaction(element : TMXmlElement; path : string) : TFhirImmunizationReaction;
    function ParseImmunizationReactionChild(element : TFhirImmunizationReaction; path : string; child : TMXmlElement) : boolean;
    function ParseImmunizationProtocolApplied(element : TMXmlElement; path : string) : TFhirImmunizationProtocolApplied;
    function ParseImmunizationProtocolAppliedChild(element : TFhirImmunizationProtocolApplied; path : string; child : TMXmlElement) : boolean;
    function ParseImmunization(element : TMXmlElement; path : string) : TFhirImmunization;
    function ParseImmunizationChild(element : TFhirImmunization; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
    function ParseImmunizationEvaluation(element : TMXmlElement; path : string) : TFhirImmunizationEvaluation;
    function ParseImmunizationEvaluationChild(element : TFhirImmunizationEvaluation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
    function ParseImmunizationRecommendationRecommendation(element : TMXmlElement; path : string) : TFhirImmunizationRecommendationRecommendation;
    function ParseImmunizationRecommendationRecommendationChild(element : TFhirImmunizationRecommendationRecommendation; path : string; child : TMXmlElement) : boolean;
    function ParseImmunizationRecommendationRecommendationDateCriterion(element : TMXmlElement; path : string) : TFhirImmunizationRecommendationRecommendationDateCriterion;
    function ParseImmunizationRecommendationRecommendationDateCriterionChild(element : TFhirImmunizationRecommendationRecommendationDateCriterion; path : string; child : TMXmlElement) : boolean;
    function ParseImmunizationRecommendation(element : TMXmlElement; path : string) : TFhirImmunizationRecommendation;
    function ParseImmunizationRecommendationChild(element : TFhirImmunizationRecommendation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
    function ParseImplementationGuideDependsOn(element : TMXmlElement; path : string) : TFhirImplementationGuideDependsOn;
    function ParseImplementationGuideDependsOnChild(element : TFhirImplementationGuideDependsOn; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideGlobal(element : TMXmlElement; path : string) : TFhirImplementationGuideGlobal;
    function ParseImplementationGuideGlobalChild(element : TFhirImplementationGuideGlobal; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideDefinition(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinition;
    function ParseImplementationGuideDefinitionChild(element : TFhirImplementationGuideDefinition; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideDefinitionGrouping(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionGrouping;
    function ParseImplementationGuideDefinitionGroupingChild(element : TFhirImplementationGuideDefinitionGrouping; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideDefinitionResource(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionResource;
    function ParseImplementationGuideDefinitionResourceChild(element : TFhirImplementationGuideDefinitionResource; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideDefinitionPage(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionPage;
    function ParseImplementationGuideDefinitionPageChild(element : TFhirImplementationGuideDefinitionPage; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideDefinitionParameter(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionParameter;
    function ParseImplementationGuideDefinitionParameterChild(element : TFhirImplementationGuideDefinitionParameter; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideDefinitionTemplate(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionTemplate;
    function ParseImplementationGuideDefinitionTemplateChild(element : TFhirImplementationGuideDefinitionTemplate; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideManifest(element : TMXmlElement; path : string) : TFhirImplementationGuideManifest;
    function ParseImplementationGuideManifestChild(element : TFhirImplementationGuideManifest; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideManifestResource(element : TMXmlElement; path : string) : TFhirImplementationGuideManifestResource;
    function ParseImplementationGuideManifestResourceChild(element : TFhirImplementationGuideManifestResource; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideManifestPage(element : TMXmlElement; path : string) : TFhirImplementationGuideManifestPage;
    function ParseImplementationGuideManifestPageChild(element : TFhirImplementationGuideManifestPage; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuide(element : TMXmlElement; path : string) : TFhirImplementationGuide;
    function ParseImplementationGuideChild(element : TFhirImplementationGuide; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INSURANCEPLAN}
    function ParseInsurancePlanContact(element : TMXmlElement; path : string) : TFhirInsurancePlanContact;
    function ParseInsurancePlanContactChild(element : TFhirInsurancePlanContact; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanCoverage(element : TMXmlElement; path : string) : TFhirInsurancePlanCoverage;
    function ParseInsurancePlanCoverageChild(element : TFhirInsurancePlanCoverage; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanCoverageBenefit(element : TMXmlElement; path : string) : TFhirInsurancePlanCoverageBenefit;
    function ParseInsurancePlanCoverageBenefitChild(element : TFhirInsurancePlanCoverageBenefit; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanCoverageBenefitLimit(element : TMXmlElement; path : string) : TFhirInsurancePlanCoverageBenefitLimit;
    function ParseInsurancePlanCoverageBenefitLimitChild(element : TFhirInsurancePlanCoverageBenefitLimit; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanPlan(element : TMXmlElement; path : string) : TFhirInsurancePlanPlan;
    function ParseInsurancePlanPlanChild(element : TFhirInsurancePlanPlan; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanPlanGeneralCost(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanGeneralCost;
    function ParseInsurancePlanPlanGeneralCostChild(element : TFhirInsurancePlanPlanGeneralCost; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanPlanSpecificCost(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanSpecificCost;
    function ParseInsurancePlanPlanSpecificCostChild(element : TFhirInsurancePlanPlanSpecificCost; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanPlanSpecificCostBenefit(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanSpecificCostBenefit;
    function ParseInsurancePlanPlanSpecificCostBenefitChild(element : TFhirInsurancePlanPlanSpecificCostBenefit; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanPlanSpecificCostBenefitCost(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanSpecificCostBenefitCost;
    function ParseInsurancePlanPlanSpecificCostBenefitCostChild(element : TFhirInsurancePlanPlanSpecificCostBenefitCost; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlan(element : TMXmlElement; path : string) : TFhirInsurancePlan;
    function ParseInsurancePlanChild(element : TFhirInsurancePlan; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
    function ParseInvoiceParticipant(element : TMXmlElement; path : string) : TFhirInvoiceParticipant;
    function ParseInvoiceParticipantChild(element : TFhirInvoiceParticipant; path : string; child : TMXmlElement) : boolean;
    function ParseInvoiceLineItem(element : TMXmlElement; path : string) : TFhirInvoiceLineItem;
    function ParseInvoiceLineItemChild(element : TFhirInvoiceLineItem; path : string; child : TMXmlElement) : boolean;
    function ParseInvoiceLineItemPriceComponent(element : TMXmlElement; path : string) : TFhirInvoiceLineItemPriceComponent;
    function ParseInvoiceLineItemPriceComponentChild(element : TFhirInvoiceLineItemPriceComponent; path : string; child : TMXmlElement) : boolean;
    function ParseInvoice(element : TMXmlElement; path : string) : TFhirInvoice;
    function ParseInvoiceChild(element : TFhirInvoice; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
    function ParseLibrary(element : TMXmlElement; path : string) : TFhirLibrary;
    function ParseLibraryChild(element : TFhirLibrary; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
    function ParseLinkageItem(element : TMXmlElement; path : string) : TFhirLinkageItem;
    function ParseLinkageItemChild(element : TFhirLinkageItem; path : string; child : TMXmlElement) : boolean;
    function ParseLinkage(element : TMXmlElement; path : string) : TFhirLinkage;
    function ParseLinkageChild(element : TFhirLinkage; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
    function ParseListEntry(element : TMXmlElement; path : string) : TFhirListEntry;
    function ParseListEntryChild(element : TFhirListEntry; path : string; child : TMXmlElement) : boolean;
    function ParseList(element : TMXmlElement; path : string) : TFhirList;
    function ParseListChild(element : TFhirList; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
    function ParseLocationPosition(element : TMXmlElement; path : string) : TFhirLocationPosition;
    function ParseLocationPositionChild(element : TFhirLocationPosition; path : string; child : TMXmlElement) : boolean;
    function ParseLocationHoursOfOperation(element : TMXmlElement; path : string) : TFhirLocationHoursOfOperation;
    function ParseLocationHoursOfOperationChild(element : TFhirLocationHoursOfOperation; path : string; child : TMXmlElement) : boolean;
    function ParseLocation(element : TMXmlElement; path : string) : TFhirLocation;
    function ParseLocationChild(element : TFhirLocation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
    function ParseMeasureGroup(element : TMXmlElement; path : string) : TFhirMeasureGroup;
    function ParseMeasureGroupChild(element : TFhirMeasureGroup; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureGroupPopulation(element : TMXmlElement; path : string) : TFhirMeasureGroupPopulation;
    function ParseMeasureGroupPopulationChild(element : TFhirMeasureGroupPopulation; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureGroupStratifier(element : TMXmlElement; path : string) : TFhirMeasureGroupStratifier;
    function ParseMeasureGroupStratifierChild(element : TFhirMeasureGroupStratifier; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureGroupStratifierComponent(element : TMXmlElement; path : string) : TFhirMeasureGroupStratifierComponent;
    function ParseMeasureGroupStratifierComponentChild(element : TFhirMeasureGroupStratifierComponent; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureSupplementalData(element : TMXmlElement; path : string) : TFhirMeasureSupplementalData;
    function ParseMeasureSupplementalDataChild(element : TFhirMeasureSupplementalData; path : string; child : TMXmlElement) : boolean;
    function ParseMeasure(element : TMXmlElement; path : string) : TFhirMeasure;
    function ParseMeasureChild(element : TFhirMeasure; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
    function ParseMeasureReportGroup(element : TMXmlElement; path : string) : TFhirMeasureReportGroup;
    function ParseMeasureReportGroupChild(element : TFhirMeasureReportGroup; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureReportGroupPopulation(element : TMXmlElement; path : string) : TFhirMeasureReportGroupPopulation;
    function ParseMeasureReportGroupPopulationChild(element : TFhirMeasureReportGroupPopulation; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureReportGroupStratifier(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifier;
    function ParseMeasureReportGroupStratifierChild(element : TFhirMeasureReportGroupStratifier; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureReportGroupStratifierStratum(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifierStratum;
    function ParseMeasureReportGroupStratifierStratumChild(element : TFhirMeasureReportGroupStratifierStratum; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureReportGroupStratifierStratumComponent(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifierStratumComponent;
    function ParseMeasureReportGroupStratifierStratumComponentChild(element : TFhirMeasureReportGroupStratifierStratumComponent; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureReportGroupStratifierStratumPopulation(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifierStratumPopulation;
    function ParseMeasureReportGroupStratifierStratumPopulationChild(element : TFhirMeasureReportGroupStratifierStratumPopulation; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureReport(element : TMXmlElement; path : string) : TFhirMeasureReport;
    function ParseMeasureReportChild(element : TFhirMeasureReport; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
    function ParseMedia(element : TMXmlElement; path : string) : TFhirMedia;
    function ParseMediaChild(element : TFhirMedia; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
    function ParseMedicationIngredient(element : TMXmlElement; path : string) : TFhirMedicationIngredient;
    function ParseMedicationIngredientChild(element : TFhirMedicationIngredient; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationBatch(element : TMXmlElement; path : string) : TFhirMedicationBatch;
    function ParseMedicationBatchChild(element : TFhirMedicationBatch; path : string; child : TMXmlElement) : boolean;
    function ParseMedication(element : TMXmlElement; path : string) : TFhirMedication;
    function ParseMedicationChild(element : TFhirMedication; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
    function ParseMedicationAdministrationPerformer(element : TMXmlElement; path : string) : TFhirMedicationAdministrationPerformer;
    function ParseMedicationAdministrationPerformerChild(element : TFhirMedicationAdministrationPerformer; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationAdministrationDosage(element : TMXmlElement; path : string) : TFhirMedicationAdministrationDosage;
    function ParseMedicationAdministrationDosageChild(element : TFhirMedicationAdministrationDosage; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationAdministration(element : TMXmlElement; path : string) : TFhirMedicationAdministration;
    function ParseMedicationAdministrationChild(element : TFhirMedicationAdministration; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
    function ParseMedicationDispensePerformer(element : TMXmlElement; path : string) : TFhirMedicationDispensePerformer;
    function ParseMedicationDispensePerformerChild(element : TFhirMedicationDispensePerformer; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationDispenseSubstitution(element : TMXmlElement; path : string) : TFhirMedicationDispenseSubstitution;
    function ParseMedicationDispenseSubstitutionChild(element : TFhirMedicationDispenseSubstitution; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationDispense(element : TMXmlElement; path : string) : TFhirMedicationDispense;
    function ParseMedicationDispenseChild(element : TFhirMedicationDispense; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
    function ParseMedicationKnowledgeRelatedMedicationKnowledge(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRelatedMedicationKnowledge;
    function ParseMedicationKnowledgeRelatedMedicationKnowledgeChild(element : TFhirMedicationKnowledgeRelatedMedicationKnowledge; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeMonograph(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeMonograph;
    function ParseMedicationKnowledgeMonographChild(element : TFhirMedicationKnowledgeMonograph; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeIngredient(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeIngredient;
    function ParseMedicationKnowledgeIngredientChild(element : TFhirMedicationKnowledgeIngredient; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeCost(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeCost;
    function ParseMedicationKnowledgeCostChild(element : TFhirMedicationKnowledgeCost; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeMonitoringProgram(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeMonitoringProgram;
    function ParseMedicationKnowledgeMonitoringProgramChild(element : TFhirMedicationKnowledgeMonitoringProgram; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeAdministrationGuidelines(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeAdministrationGuidelines;
    function ParseMedicationKnowledgeAdministrationGuidelinesChild(element : TFhirMedicationKnowledgeAdministrationGuidelines; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeAdministrationGuidelinesDosage(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeAdministrationGuidelinesDosage;
    function ParseMedicationKnowledgeAdministrationGuidelinesDosageChild(element : TFhirMedicationKnowledgeAdministrationGuidelinesDosage; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics;
    function ParseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristicsChild(element : TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeMedicineClassification(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeMedicineClassification;
    function ParseMedicationKnowledgeMedicineClassificationChild(element : TFhirMedicationKnowledgeMedicineClassification; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgePackaging(element : TMXmlElement; path : string) : TFhirMedicationKnowledgePackaging;
    function ParseMedicationKnowledgePackagingChild(element : TFhirMedicationKnowledgePackaging; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeDrugCharacteristic(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeDrugCharacteristic;
    function ParseMedicationKnowledgeDrugCharacteristicChild(element : TFhirMedicationKnowledgeDrugCharacteristic; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeRegulatory(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRegulatory;
    function ParseMedicationKnowledgeRegulatoryChild(element : TFhirMedicationKnowledgeRegulatory; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeRegulatorySubstitution(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRegulatorySubstitution;
    function ParseMedicationKnowledgeRegulatorySubstitutionChild(element : TFhirMedicationKnowledgeRegulatorySubstitution; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeRegulatorySchedule(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRegulatorySchedule;
    function ParseMedicationKnowledgeRegulatoryScheduleChild(element : TFhirMedicationKnowledgeRegulatorySchedule; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeRegulatoryMaxDispense(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRegulatoryMaxDispense;
    function ParseMedicationKnowledgeRegulatoryMaxDispenseChild(element : TFhirMedicationKnowledgeRegulatoryMaxDispense; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeKinetics(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeKinetics;
    function ParseMedicationKnowledgeKineticsChild(element : TFhirMedicationKnowledgeKinetics; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledge(element : TMXmlElement; path : string) : TFhirMedicationKnowledge;
    function ParseMedicationKnowledgeChild(element : TFhirMedicationKnowledge; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
    function ParseMedicationRequestDispenseRequest(element : TMXmlElement; path : string) : TFhirMedicationRequestDispenseRequest;
    function ParseMedicationRequestDispenseRequestChild(element : TFhirMedicationRequestDispenseRequest; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationRequestDispenseRequestInitialFill(element : TMXmlElement; path : string) : TFhirMedicationRequestDispenseRequestInitialFill;
    function ParseMedicationRequestDispenseRequestInitialFillChild(element : TFhirMedicationRequestDispenseRequestInitialFill; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationRequestSubstitution(element : TMXmlElement; path : string) : TFhirMedicationRequestSubstitution;
    function ParseMedicationRequestSubstitutionChild(element : TFhirMedicationRequestSubstitution; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationRequest(element : TMXmlElement; path : string) : TFhirMedicationRequest;
    function ParseMedicationRequestChild(element : TFhirMedicationRequest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
    function ParseMedicationStatement(element : TMXmlElement; path : string) : TFhirMedicationStatement;
    function ParseMedicationStatementChild(element : TFhirMedicationStatement; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCT}
    function ParseMedicinalProductName(element : TMXmlElement; path : string) : TFhirMedicinalProductName;
    function ParseMedicinalProductNameChild(element : TFhirMedicinalProductName; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductNameNamePart(element : TMXmlElement; path : string) : TFhirMedicinalProductNameNamePart;
    function ParseMedicinalProductNameNamePartChild(element : TFhirMedicinalProductNameNamePart; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductNameCountryLanguage(element : TMXmlElement; path : string) : TFhirMedicinalProductNameCountryLanguage;
    function ParseMedicinalProductNameCountryLanguageChild(element : TFhirMedicinalProductNameCountryLanguage; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductManufacturingBusinessOperation(element : TMXmlElement; path : string) : TFhirMedicinalProductManufacturingBusinessOperation;
    function ParseMedicinalProductManufacturingBusinessOperationChild(element : TFhirMedicinalProductManufacturingBusinessOperation; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductSpecialDesignation(element : TMXmlElement; path : string) : TFhirMedicinalProductSpecialDesignation;
    function ParseMedicinalProductSpecialDesignationChild(element : TFhirMedicinalProductSpecialDesignation; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProduct(element : TMXmlElement; path : string) : TFhirMedicinalProduct;
    function ParseMedicinalProductChild(element : TFhirMedicinalProduct; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICINALPRODUCT}
{$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
    function ParseMedicinalProductAuthorizationJurisdictionalAuthorization(element : TMXmlElement; path : string) : TFhirMedicinalProductAuthorizationJurisdictionalAuthorization;
    function ParseMedicinalProductAuthorizationJurisdictionalAuthorizationChild(element : TFhirMedicinalProductAuthorizationJurisdictionalAuthorization; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductAuthorizationProcedure(element : TMXmlElement; path : string) : TFhirMedicinalProductAuthorizationProcedure;
    function ParseMedicinalProductAuthorizationProcedureChild(element : TFhirMedicinalProductAuthorizationProcedure; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductAuthorization(element : TMXmlElement; path : string) : TFhirMedicinalProductAuthorization;
    function ParseMedicinalProductAuthorizationChild(element : TFhirMedicinalProductAuthorization; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICINALPRODUCTAUTHORIZATION}
{$IFDEF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
    function ParseMedicinalProductContraindicationOtherTherapy(element : TMXmlElement; path : string) : TFhirMedicinalProductContraindicationOtherTherapy;
    function ParseMedicinalProductContraindicationOtherTherapyChild(element : TFhirMedicinalProductContraindicationOtherTherapy; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductContraindication(element : TMXmlElement; path : string) : TFhirMedicinalProductContraindication;
    function ParseMedicinalProductContraindicationChild(element : TFhirMedicinalProductContraindication; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
{$IFDEF FHIR_MEDICINALPRODUCTINDICATION}
    function ParseMedicinalProductIndicationOtherTherapy(element : TMXmlElement; path : string) : TFhirMedicinalProductIndicationOtherTherapy;
    function ParseMedicinalProductIndicationOtherTherapyChild(element : TFhirMedicinalProductIndicationOtherTherapy; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductIndication(element : TMXmlElement; path : string) : TFhirMedicinalProductIndication;
    function ParseMedicinalProductIndicationChild(element : TFhirMedicinalProductIndication; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICINALPRODUCTINDICATION}
{$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
    function ParseMedicinalProductIngredientSpecifiedSubstance(element : TMXmlElement; path : string) : TFhirMedicinalProductIngredientSpecifiedSubstance;
    function ParseMedicinalProductIngredientSpecifiedSubstanceChild(element : TFhirMedicinalProductIngredientSpecifiedSubstance; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductIngredientSpecifiedSubstanceStrength(element : TMXmlElement; path : string) : TFhirMedicinalProductIngredientSpecifiedSubstanceStrength;
    function ParseMedicinalProductIngredientSpecifiedSubstanceStrengthChild(element : TFhirMedicinalProductIngredientSpecifiedSubstanceStrength; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(element : TMXmlElement; path : string) : TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength;
    function ParseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthChild(element : TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductIngredientSubstance(element : TMXmlElement; path : string) : TFhirMedicinalProductIngredientSubstance;
    function ParseMedicinalProductIngredientSubstanceChild(element : TFhirMedicinalProductIngredientSubstance; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductIngredient(element : TMXmlElement; path : string) : TFhirMedicinalProductIngredient;
    function ParseMedicinalProductIngredientChild(element : TFhirMedicinalProductIngredient; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICINALPRODUCTINGREDIENT}
{$IFDEF FHIR_MEDICINALPRODUCTINTERACTION}
    function ParseMedicinalProductInteractionInteractant(element : TMXmlElement; path : string) : TFhirMedicinalProductInteractionInteractant;
    function ParseMedicinalProductInteractionInteractantChild(element : TFhirMedicinalProductInteractionInteractant; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductInteraction(element : TMXmlElement; path : string) : TFhirMedicinalProductInteraction;
    function ParseMedicinalProductInteractionChild(element : TFhirMedicinalProductInteraction; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICINALPRODUCTINTERACTION}
{$IFDEF FHIR_MEDICINALPRODUCTMANUFACTURED}
    function ParseMedicinalProductManufactured(element : TMXmlElement; path : string) : TFhirMedicinalProductManufactured;
    function ParseMedicinalProductManufacturedChild(element : TFhirMedicinalProductManufactured; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICINALPRODUCTMANUFACTURED}
{$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
    function ParseMedicinalProductPackagedBatchIdentifier(element : TMXmlElement; path : string) : TFhirMedicinalProductPackagedBatchIdentifier;
    function ParseMedicinalProductPackagedBatchIdentifierChild(element : TFhirMedicinalProductPackagedBatchIdentifier; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductPackagedPackageItem(element : TMXmlElement; path : string) : TFhirMedicinalProductPackagedPackageItem;
    function ParseMedicinalProductPackagedPackageItemChild(element : TFhirMedicinalProductPackagedPackageItem; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductPackaged(element : TMXmlElement; path : string) : TFhirMedicinalProductPackaged;
    function ParseMedicinalProductPackagedChild(element : TFhirMedicinalProductPackaged; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICINALPRODUCTPACKAGED}
{$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
    function ParseMedicinalProductPharmaceuticalCharacteristics(element : TMXmlElement; path : string) : TFhirMedicinalProductPharmaceuticalCharacteristics;
    function ParseMedicinalProductPharmaceuticalCharacteristicsChild(element : TFhirMedicinalProductPharmaceuticalCharacteristics; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductPharmaceuticalRouteOfAdministration(element : TMXmlElement; path : string) : TFhirMedicinalProductPharmaceuticalRouteOfAdministration;
    function ParseMedicinalProductPharmaceuticalRouteOfAdministrationChild(element : TFhirMedicinalProductPharmaceuticalRouteOfAdministration; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(element : TMXmlElement; path : string) : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies;
    function ParseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesChild(element : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(element : TMXmlElement; path : string) : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod;
    function ParseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriodChild(element : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductPharmaceutical(element : TMXmlElement; path : string) : TFhirMedicinalProductPharmaceutical;
    function ParseMedicinalProductPharmaceuticalChild(element : TFhirMedicinalProductPharmaceutical; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
{$IFDEF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
    function ParseMedicinalProductUndesirableEffect(element : TMXmlElement; path : string) : TFhirMedicinalProductUndesirableEffect;
    function ParseMedicinalProductUndesirableEffectChild(element : TFhirMedicinalProductUndesirableEffect; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
{$IFDEF FHIR_MESSAGEDEFINITION}
    function ParseMessageDefinitionFocus(element : TMXmlElement; path : string) : TFhirMessageDefinitionFocus;
    function ParseMessageDefinitionFocusChild(element : TFhirMessageDefinitionFocus; path : string; child : TMXmlElement) : boolean;
    function ParseMessageDefinitionAllowedResponse(element : TMXmlElement; path : string) : TFhirMessageDefinitionAllowedResponse;
    function ParseMessageDefinitionAllowedResponseChild(element : TFhirMessageDefinitionAllowedResponse; path : string; child : TMXmlElement) : boolean;
    function ParseMessageDefinition(element : TMXmlElement; path : string) : TFhirMessageDefinition;
    function ParseMessageDefinitionChild(element : TFhirMessageDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
    function ParseMessageHeaderDestination(element : TMXmlElement; path : string) : TFhirMessageHeaderDestination;
    function ParseMessageHeaderDestinationChild(element : TFhirMessageHeaderDestination; path : string; child : TMXmlElement) : boolean;
    function ParseMessageHeaderSource(element : TMXmlElement; path : string) : TFhirMessageHeaderSource;
    function ParseMessageHeaderSourceChild(element : TFhirMessageHeaderSource; path : string; child : TMXmlElement) : boolean;
    function ParseMessageHeaderResponse(element : TMXmlElement; path : string) : TFhirMessageHeaderResponse;
    function ParseMessageHeaderResponseChild(element : TFhirMessageHeaderResponse; path : string; child : TMXmlElement) : boolean;
    function ParseMessageHeader(element : TMXmlElement; path : string) : TFhirMessageHeader;
    function ParseMessageHeaderChild(element : TFhirMessageHeader; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
    function ParseMolecularSequenceReferenceSeq(element : TMXmlElement; path : string) : TFhirMolecularSequenceReferenceSeq;
    function ParseMolecularSequenceReferenceSeqChild(element : TFhirMolecularSequenceReferenceSeq; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequenceVariant(element : TMXmlElement; path : string) : TFhirMolecularSequenceVariant;
    function ParseMolecularSequenceVariantChild(element : TFhirMolecularSequenceVariant; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequenceQuality(element : TMXmlElement; path : string) : TFhirMolecularSequenceQuality;
    function ParseMolecularSequenceQualityChild(element : TFhirMolecularSequenceQuality; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequenceQualityRoc(element : TMXmlElement; path : string) : TFhirMolecularSequenceQualityRoc;
    function ParseMolecularSequenceQualityRocChild(element : TFhirMolecularSequenceQualityRoc; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequenceRepository(element : TMXmlElement; path : string) : TFhirMolecularSequenceRepository;
    function ParseMolecularSequenceRepositoryChild(element : TFhirMolecularSequenceRepository; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequenceStructureVariant(element : TMXmlElement; path : string) : TFhirMolecularSequenceStructureVariant;
    function ParseMolecularSequenceStructureVariantChild(element : TFhirMolecularSequenceStructureVariant; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequenceStructureVariantOuter(element : TMXmlElement; path : string) : TFhirMolecularSequenceStructureVariantOuter;
    function ParseMolecularSequenceStructureVariantOuterChild(element : TFhirMolecularSequenceStructureVariantOuter; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequenceStructureVariantInner(element : TMXmlElement; path : string) : TFhirMolecularSequenceStructureVariantInner;
    function ParseMolecularSequenceStructureVariantInnerChild(element : TFhirMolecularSequenceStructureVariantInner; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequence(element : TMXmlElement; path : string) : TFhirMolecularSequence;
    function ParseMolecularSequenceChild(element : TFhirMolecularSequence; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
    function ParseNamingSystemUniqueId(element : TMXmlElement; path : string) : TFhirNamingSystemUniqueId;
    function ParseNamingSystemUniqueIdChild(element : TFhirNamingSystemUniqueId; path : string; child : TMXmlElement) : boolean;
    function ParseNamingSystem(element : TMXmlElement; path : string) : TFhirNamingSystem;
    function ParseNamingSystemChild(element : TFhirNamingSystem; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
    function ParseNutritionOrderOralDiet(element : TMXmlElement; path : string) : TFhirNutritionOrderOralDiet;
    function ParseNutritionOrderOralDietChild(element : TFhirNutritionOrderOralDiet; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionOrderOralDietNutrient(element : TMXmlElement; path : string) : TFhirNutritionOrderOralDietNutrient;
    function ParseNutritionOrderOralDietNutrientChild(element : TFhirNutritionOrderOralDietNutrient; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionOrderOralDietTexture(element : TMXmlElement; path : string) : TFhirNutritionOrderOralDietTexture;
    function ParseNutritionOrderOralDietTextureChild(element : TFhirNutritionOrderOralDietTexture; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionOrderSupplement(element : TMXmlElement; path : string) : TFhirNutritionOrderSupplement;
    function ParseNutritionOrderSupplementChild(element : TFhirNutritionOrderSupplement; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionOrderEnteralFormula(element : TMXmlElement; path : string) : TFhirNutritionOrderEnteralFormula;
    function ParseNutritionOrderEnteralFormulaChild(element : TFhirNutritionOrderEnteralFormula; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionOrderEnteralFormulaAdministration(element : TMXmlElement; path : string) : TFhirNutritionOrderEnteralFormulaAdministration;
    function ParseNutritionOrderEnteralFormulaAdministrationChild(element : TFhirNutritionOrderEnteralFormulaAdministration; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionOrder(element : TMXmlElement; path : string) : TFhirNutritionOrder;
    function ParseNutritionOrderChild(element : TFhirNutritionOrder; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
    function ParseObservationReferenceRange(element : TMXmlElement; path : string) : TFhirObservationReferenceRange;
    function ParseObservationReferenceRangeChild(element : TFhirObservationReferenceRange; path : string; child : TMXmlElement) : boolean;
    function ParseObservationComponent(element : TMXmlElement; path : string) : TFhirObservationComponent;
    function ParseObservationComponentChild(element : TFhirObservationComponent; path : string; child : TMXmlElement) : boolean;
    function ParseObservation(element : TMXmlElement; path : string) : TFhirObservation;
    function ParseObservationChild(element : TFhirObservation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
    function ParseObservationDefinitionQuantitativeDetails(element : TMXmlElement; path : string) : TFhirObservationDefinitionQuantitativeDetails;
    function ParseObservationDefinitionQuantitativeDetailsChild(element : TFhirObservationDefinitionQuantitativeDetails; path : string; child : TMXmlElement) : boolean;
    function ParseObservationDefinitionQualifiedInterval(element : TMXmlElement; path : string) : TFhirObservationDefinitionQualifiedInterval;
    function ParseObservationDefinitionQualifiedIntervalChild(element : TFhirObservationDefinitionQualifiedInterval; path : string; child : TMXmlElement) : boolean;
    function ParseObservationDefinition(element : TMXmlElement; path : string) : TFhirObservationDefinition;
    function ParseObservationDefinitionChild(element : TFhirObservationDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
    function ParseOperationDefinitionParameter(element : TMXmlElement; path : string) : TFhirOperationDefinitionParameter;
    function ParseOperationDefinitionParameterChild(element : TFhirOperationDefinitionParameter; path : string; child : TMXmlElement) : boolean;
    function ParseOperationDefinitionParameterBinding(element : TMXmlElement; path : string) : TFhirOperationDefinitionParameterBinding;
    function ParseOperationDefinitionParameterBindingChild(element : TFhirOperationDefinitionParameterBinding; path : string; child : TMXmlElement) : boolean;
    function ParseOperationDefinitionParameterReferencedFrom(element : TMXmlElement; path : string) : TFhirOperationDefinitionParameterReferencedFrom;
    function ParseOperationDefinitionParameterReferencedFromChild(element : TFhirOperationDefinitionParameterReferencedFrom; path : string; child : TMXmlElement) : boolean;
    function ParseOperationDefinitionOverload(element : TMXmlElement; path : string) : TFhirOperationDefinitionOverload;
    function ParseOperationDefinitionOverloadChild(element : TFhirOperationDefinitionOverload; path : string; child : TMXmlElement) : boolean;
    function ParseOperationDefinition(element : TMXmlElement; path : string) : TFhirOperationDefinition;
    function ParseOperationDefinitionChild(element : TFhirOperationDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
    function ParseOperationOutcomeIssue(element : TMXmlElement; path : string) : TFhirOperationOutcomeIssue;
    function ParseOperationOutcomeIssueChild(element : TFhirOperationOutcomeIssue; path : string; child : TMXmlElement) : boolean;
    function ParseOperationOutcome(element : TMXmlElement; path : string) : TFhirOperationOutcome;
    function ParseOperationOutcomeChild(element : TFhirOperationOutcome; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
    function ParseOrganizationContact(element : TMXmlElement; path : string) : TFhirOrganizationContact;
    function ParseOrganizationContactChild(element : TFhirOrganizationContact; path : string; child : TMXmlElement) : boolean;
    function ParseOrganization(element : TMXmlElement; path : string) : TFhirOrganization;
    function ParseOrganizationChild(element : TFhirOrganization; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
    function ParseOrganizationAffiliation(element : TMXmlElement; path : string) : TFhirOrganizationAffiliation;
    function ParseOrganizationAffiliationChild(element : TFhirOrganizationAffiliation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PATIENT}
    function ParsePatientContact(element : TMXmlElement; path : string) : TFhirPatientContact;
    function ParsePatientContactChild(element : TFhirPatientContact; path : string; child : TMXmlElement) : boolean;
    function ParsePatientCommunication(element : TMXmlElement; path : string) : TFhirPatientCommunication;
    function ParsePatientCommunicationChild(element : TFhirPatientCommunication; path : string; child : TMXmlElement) : boolean;
    function ParsePatientLink(element : TMXmlElement; path : string) : TFhirPatientLink;
    function ParsePatientLinkChild(element : TFhirPatientLink; path : string; child : TMXmlElement) : boolean;
    function ParsePatient(element : TMXmlElement; path : string) : TFhirPatient;
    function ParsePatientChild(element : TFhirPatient; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
    function ParsePaymentNotice(element : TMXmlElement; path : string) : TFhirPaymentNotice;
    function ParsePaymentNoticeChild(element : TFhirPaymentNotice; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
    function ParsePaymentReconciliationDetail(element : TMXmlElement; path : string) : TFhirPaymentReconciliationDetail;
    function ParsePaymentReconciliationDetailChild(element : TFhirPaymentReconciliationDetail; path : string; child : TMXmlElement) : boolean;
    function ParsePaymentReconciliationProcessNote(element : TMXmlElement; path : string) : TFhirPaymentReconciliationProcessNote;
    function ParsePaymentReconciliationProcessNoteChild(element : TFhirPaymentReconciliationProcessNote; path : string; child : TMXmlElement) : boolean;
    function ParsePaymentReconciliation(element : TMXmlElement; path : string) : TFhirPaymentReconciliation;
    function ParsePaymentReconciliationChild(element : TFhirPaymentReconciliation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
    function ParsePersonLink(element : TMXmlElement; path : string) : TFhirPersonLink;
    function ParsePersonLinkChild(element : TFhirPersonLink; path : string; child : TMXmlElement) : boolean;
    function ParsePerson(element : TMXmlElement; path : string) : TFhirPerson;
    function ParsePersonChild(element : TFhirPerson; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
    function ParsePlanDefinitionGoal(element : TMXmlElement; path : string) : TFhirPlanDefinitionGoal;
    function ParsePlanDefinitionGoalChild(element : TFhirPlanDefinitionGoal; path : string; child : TMXmlElement) : boolean;
    function ParsePlanDefinitionGoalTarget(element : TMXmlElement; path : string) : TFhirPlanDefinitionGoalTarget;
    function ParsePlanDefinitionGoalTargetChild(element : TFhirPlanDefinitionGoalTarget; path : string; child : TMXmlElement) : boolean;
    function ParsePlanDefinitionAction(element : TMXmlElement; path : string) : TFhirPlanDefinitionAction;
    function ParsePlanDefinitionActionChild(element : TFhirPlanDefinitionAction; path : string; child : TMXmlElement) : boolean;
    function ParsePlanDefinitionActionCondition(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionCondition;
    function ParsePlanDefinitionActionConditionChild(element : TFhirPlanDefinitionActionCondition; path : string; child : TMXmlElement) : boolean;
    function ParsePlanDefinitionActionRelatedAction(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionRelatedAction;
    function ParsePlanDefinitionActionRelatedActionChild(element : TFhirPlanDefinitionActionRelatedAction; path : string; child : TMXmlElement) : boolean;
    function ParsePlanDefinitionActionParticipant(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionParticipant;
    function ParsePlanDefinitionActionParticipantChild(element : TFhirPlanDefinitionActionParticipant; path : string; child : TMXmlElement) : boolean;
    function ParsePlanDefinitionActionDynamicValue(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionDynamicValue;
    function ParsePlanDefinitionActionDynamicValueChild(element : TFhirPlanDefinitionActionDynamicValue; path : string; child : TMXmlElement) : boolean;
    function ParsePlanDefinition(element : TMXmlElement; path : string) : TFhirPlanDefinition;
    function ParsePlanDefinitionChild(element : TFhirPlanDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
    function ParsePractitionerQualification(element : TMXmlElement; path : string) : TFhirPractitionerQualification;
    function ParsePractitionerQualificationChild(element : TFhirPractitionerQualification; path : string; child : TMXmlElement) : boolean;
    function ParsePractitioner(element : TMXmlElement; path : string) : TFhirPractitioner;
    function ParsePractitionerChild(element : TFhirPractitioner; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
    function ParsePractitionerRoleAvailableTime(element : TMXmlElement; path : string) : TFhirPractitionerRoleAvailableTime;
    function ParsePractitionerRoleAvailableTimeChild(element : TFhirPractitionerRoleAvailableTime; path : string; child : TMXmlElement) : boolean;
    function ParsePractitionerRoleNotAvailable(element : TMXmlElement; path : string) : TFhirPractitionerRoleNotAvailable;
    function ParsePractitionerRoleNotAvailableChild(element : TFhirPractitionerRoleNotAvailable; path : string; child : TMXmlElement) : boolean;
    function ParsePractitionerRole(element : TMXmlElement; path : string) : TFhirPractitionerRole;
    function ParsePractitionerRoleChild(element : TFhirPractitionerRole; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
    function ParseProcedurePerformer(element : TMXmlElement; path : string) : TFhirProcedurePerformer;
    function ParseProcedurePerformerChild(element : TFhirProcedurePerformer; path : string; child : TMXmlElement) : boolean;
    function ParseProcedureFocalDevice(element : TMXmlElement; path : string) : TFhirProcedureFocalDevice;
    function ParseProcedureFocalDeviceChild(element : TFhirProcedureFocalDevice; path : string; child : TMXmlElement) : boolean;
    function ParseProcedure(element : TMXmlElement; path : string) : TFhirProcedure;
    function ParseProcedureChild(element : TFhirProcedure; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
    function ParseProvenanceAgent(element : TMXmlElement; path : string) : TFhirProvenanceAgent;
    function ParseProvenanceAgentChild(element : TFhirProvenanceAgent; path : string; child : TMXmlElement) : boolean;
    function ParseProvenanceEntity(element : TMXmlElement; path : string) : TFhirProvenanceEntity;
    function ParseProvenanceEntityChild(element : TFhirProvenanceEntity; path : string; child : TMXmlElement) : boolean;
    function ParseProvenance(element : TMXmlElement; path : string) : TFhirProvenance;
    function ParseProvenanceChild(element : TFhirProvenance; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
    function ParseQuestionnaireItem(element : TMXmlElement; path : string) : TFhirQuestionnaireItem;
    function ParseQuestionnaireItemChild(element : TFhirQuestionnaireItem; path : string; child : TMXmlElement) : boolean;
    function ParseQuestionnaireItemEnableWhen(element : TMXmlElement; path : string) : TFhirQuestionnaireItemEnableWhen;
    function ParseQuestionnaireItemEnableWhenChild(element : TFhirQuestionnaireItemEnableWhen; path : string; child : TMXmlElement) : boolean;
    function ParseQuestionnaireItemAnswerOption(element : TMXmlElement; path : string) : TFhirQuestionnaireItemAnswerOption;
    function ParseQuestionnaireItemAnswerOptionChild(element : TFhirQuestionnaireItemAnswerOption; path : string; child : TMXmlElement) : boolean;
    function ParseQuestionnaireItemInitial(element : TMXmlElement; path : string) : TFhirQuestionnaireItemInitial;
    function ParseQuestionnaireItemInitialChild(element : TFhirQuestionnaireItemInitial; path : string; child : TMXmlElement) : boolean;
    function ParseQuestionnaire(element : TMXmlElement; path : string) : TFhirQuestionnaire;
    function ParseQuestionnaireChild(element : TFhirQuestionnaire; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
    function ParseQuestionnaireResponseItem(element : TMXmlElement; path : string) : TFhirQuestionnaireResponseItem;
    function ParseQuestionnaireResponseItemChild(element : TFhirQuestionnaireResponseItem; path : string; child : TMXmlElement) : boolean;
    function ParseQuestionnaireResponseItemAnswer(element : TMXmlElement; path : string) : TFhirQuestionnaireResponseItemAnswer;
    function ParseQuestionnaireResponseItemAnswerChild(element : TFhirQuestionnaireResponseItemAnswer; path : string; child : TMXmlElement) : boolean;
    function ParseQuestionnaireResponse(element : TMXmlElement; path : string) : TFhirQuestionnaireResponse;
    function ParseQuestionnaireResponseChild(element : TFhirQuestionnaireResponse; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_RELATEDPERSON}
    function ParseRelatedPersonCommunication(element : TMXmlElement; path : string) : TFhirRelatedPersonCommunication;
    function ParseRelatedPersonCommunicationChild(element : TFhirRelatedPersonCommunication; path : string; child : TMXmlElement) : boolean;
    function ParseRelatedPerson(element : TMXmlElement; path : string) : TFhirRelatedPerson;
    function ParseRelatedPersonChild(element : TFhirRelatedPerson; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
    function ParseRequestGroupAction(element : TMXmlElement; path : string) : TFhirRequestGroupAction;
    function ParseRequestGroupActionChild(element : TFhirRequestGroupAction; path : string; child : TMXmlElement) : boolean;
    function ParseRequestGroupActionCondition(element : TMXmlElement; path : string) : TFhirRequestGroupActionCondition;
    function ParseRequestGroupActionConditionChild(element : TFhirRequestGroupActionCondition; path : string; child : TMXmlElement) : boolean;
    function ParseRequestGroupActionRelatedAction(element : TMXmlElement; path : string) : TFhirRequestGroupActionRelatedAction;
    function ParseRequestGroupActionRelatedActionChild(element : TFhirRequestGroupActionRelatedAction; path : string; child : TMXmlElement) : boolean;
    function ParseRequestGroup(element : TMXmlElement; path : string) : TFhirRequestGroup;
    function ParseRequestGroupChild(element : TFhirRequestGroup; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHDEFINITION}
    function ParseResearchDefinition(element : TMXmlElement; path : string) : TFhirResearchDefinition;
    function ParseResearchDefinitionChild(element : TFhirResearchDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_RESEARCHDEFINITION}
{$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
    function ParseResearchElementDefinitionCharacteristic(element : TMXmlElement; path : string) : TFhirResearchElementDefinitionCharacteristic;
    function ParseResearchElementDefinitionCharacteristicChild(element : TFhirResearchElementDefinitionCharacteristic; path : string; child : TMXmlElement) : boolean;
    function ParseResearchElementDefinition(element : TMXmlElement; path : string) : TFhirResearchElementDefinition;
    function ParseResearchElementDefinitionChild(element : TFhirResearchElementDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_RESEARCHELEMENTDEFINITION}
{$IFDEF FHIR_RESEARCHSTUDY}
    function ParseResearchStudyArm(element : TMXmlElement; path : string) : TFhirResearchStudyArm;
    function ParseResearchStudyArmChild(element : TFhirResearchStudyArm; path : string; child : TMXmlElement) : boolean;
    function ParseResearchStudyObjective(element : TMXmlElement; path : string) : TFhirResearchStudyObjective;
    function ParseResearchStudyObjectiveChild(element : TFhirResearchStudyObjective; path : string; child : TMXmlElement) : boolean;
    function ParseResearchStudy(element : TMXmlElement; path : string) : TFhirResearchStudy;
    function ParseResearchStudyChild(element : TFhirResearchStudy; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
    function ParseResearchSubject(element : TMXmlElement; path : string) : TFhirResearchSubject;
    function ParseResearchSubjectChild(element : TFhirResearchSubject; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
    function ParseRiskAssessmentPrediction(element : TMXmlElement; path : string) : TFhirRiskAssessmentPrediction;
    function ParseRiskAssessmentPredictionChild(element : TFhirRiskAssessmentPrediction; path : string; child : TMXmlElement) : boolean;
    function ParseRiskAssessment(element : TMXmlElement; path : string) : TFhirRiskAssessment;
    function ParseRiskAssessmentChild(element : TFhirRiskAssessment; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_RISKEVIDENCESYNTHESIS}
    function ParseRiskEvidenceSynthesisSampleSize(element : TMXmlElement; path : string) : TFhirRiskEvidenceSynthesisSampleSize;
    function ParseRiskEvidenceSynthesisSampleSizeChild(element : TFhirRiskEvidenceSynthesisSampleSize; path : string; child : TMXmlElement) : boolean;
    function ParseRiskEvidenceSynthesisRiskEstimate(element : TMXmlElement; path : string) : TFhirRiskEvidenceSynthesisRiskEstimate;
    function ParseRiskEvidenceSynthesisRiskEstimateChild(element : TFhirRiskEvidenceSynthesisRiskEstimate; path : string; child : TMXmlElement) : boolean;
    function ParseRiskEvidenceSynthesisRiskEstimatePrecisionEstimate(element : TMXmlElement; path : string) : TFhirRiskEvidenceSynthesisRiskEstimatePrecisionEstimate;
    function ParseRiskEvidenceSynthesisRiskEstimatePrecisionEstimateChild(element : TFhirRiskEvidenceSynthesisRiskEstimatePrecisionEstimate; path : string; child : TMXmlElement) : boolean;
    function ParseRiskEvidenceSynthesisCertainty(element : TMXmlElement; path : string) : TFhirRiskEvidenceSynthesisCertainty;
    function ParseRiskEvidenceSynthesisCertaintyChild(element : TFhirRiskEvidenceSynthesisCertainty; path : string; child : TMXmlElement) : boolean;
    function ParseRiskEvidenceSynthesisCertaintyCertaintySubcomponent(element : TMXmlElement; path : string) : TFhirRiskEvidenceSynthesisCertaintyCertaintySubcomponent;
    function ParseRiskEvidenceSynthesisCertaintyCertaintySubcomponentChild(element : TFhirRiskEvidenceSynthesisCertaintyCertaintySubcomponent; path : string; child : TMXmlElement) : boolean;
    function ParseRiskEvidenceSynthesis(element : TMXmlElement; path : string) : TFhirRiskEvidenceSynthesis;
    function ParseRiskEvidenceSynthesisChild(element : TFhirRiskEvidenceSynthesis; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_RISKEVIDENCESYNTHESIS}
{$IFDEF FHIR_SCHEDULE}
    function ParseSchedule(element : TMXmlElement; path : string) : TFhirSchedule;
    function ParseScheduleChild(element : TFhirSchedule; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
    function ParseSearchParameterComponent(element : TMXmlElement; path : string) : TFhirSearchParameterComponent;
    function ParseSearchParameterComponentChild(element : TFhirSearchParameterComponent; path : string; child : TMXmlElement) : boolean;
    function ParseSearchParameter(element : TMXmlElement; path : string) : TFhirSearchParameter;
    function ParseSearchParameterChild(element : TFhirSearchParameter; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
    function ParseServiceRequest(element : TMXmlElement; path : string) : TFhirServiceRequest;
    function ParseServiceRequestChild(element : TFhirServiceRequest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
    function ParseSlot(element : TMXmlElement; path : string) : TFhirSlot;
    function ParseSlotChild(element : TFhirSlot; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
    function ParseSpecimenCollection(element : TMXmlElement; path : string) : TFhirSpecimenCollection;
    function ParseSpecimenCollectionChild(element : TFhirSpecimenCollection; path : string; child : TMXmlElement) : boolean;
    function ParseSpecimenProcessing(element : TMXmlElement; path : string) : TFhirSpecimenProcessing;
    function ParseSpecimenProcessingChild(element : TFhirSpecimenProcessing; path : string; child : TMXmlElement) : boolean;
    function ParseSpecimenContainer(element : TMXmlElement; path : string) : TFhirSpecimenContainer;
    function ParseSpecimenContainerChild(element : TFhirSpecimenContainer; path : string; child : TMXmlElement) : boolean;
    function ParseSpecimen(element : TMXmlElement; path : string) : TFhirSpecimen;
    function ParseSpecimenChild(element : TFhirSpecimen; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
    function ParseSpecimenDefinitionTypeTested(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTested;
    function ParseSpecimenDefinitionTypeTestedChild(element : TFhirSpecimenDefinitionTypeTested; path : string; child : TMXmlElement) : boolean;
    function ParseSpecimenDefinitionTypeTestedContainer(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTestedContainer;
    function ParseSpecimenDefinitionTypeTestedContainerChild(element : TFhirSpecimenDefinitionTypeTestedContainer; path : string; child : TMXmlElement) : boolean;
    function ParseSpecimenDefinitionTypeTestedContainerAdditive(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTestedContainerAdditive;
    function ParseSpecimenDefinitionTypeTestedContainerAdditiveChild(element : TFhirSpecimenDefinitionTypeTestedContainerAdditive; path : string; child : TMXmlElement) : boolean;
    function ParseSpecimenDefinitionTypeTestedHandling(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTestedHandling;
    function ParseSpecimenDefinitionTypeTestedHandlingChild(element : TFhirSpecimenDefinitionTypeTestedHandling; path : string; child : TMXmlElement) : boolean;
    function ParseSpecimenDefinition(element : TMXmlElement; path : string) : TFhirSpecimenDefinition;
    function ParseSpecimenDefinitionChild(element : TFhirSpecimenDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
    function ParseStructureDefinitionMapping(element : TMXmlElement; path : string) : TFhirStructureDefinitionMapping;
    function ParseStructureDefinitionMappingChild(element : TFhirStructureDefinitionMapping; path : string; child : TMXmlElement) : boolean;
    function ParseStructureDefinitionContext(element : TMXmlElement; path : string) : TFhirStructureDefinitionContext;
    function ParseStructureDefinitionContextChild(element : TFhirStructureDefinitionContext; path : string; child : TMXmlElement) : boolean;
    function ParseStructureDefinitionSnapshot(element : TMXmlElement; path : string) : TFhirStructureDefinitionSnapshot;
    function ParseStructureDefinitionSnapshotChild(element : TFhirStructureDefinitionSnapshot; path : string; child : TMXmlElement) : boolean;
    function ParseStructureDefinitionDifferential(element : TMXmlElement; path : string) : TFhirStructureDefinitionDifferential;
    function ParseStructureDefinitionDifferentialChild(element : TFhirStructureDefinitionDifferential; path : string; child : TMXmlElement) : boolean;
    function ParseStructureDefinition(element : TMXmlElement; path : string) : TFhirStructureDefinition;
    function ParseStructureDefinitionChild(element : TFhirStructureDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
    function ParseStructureMapStructure(element : TMXmlElement; path : string) : TFhirStructureMapStructure;
    function ParseStructureMapStructureChild(element : TFhirStructureMapStructure; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMapGroup(element : TMXmlElement; path : string) : TFhirStructureMapGroup;
    function ParseStructureMapGroupChild(element : TFhirStructureMapGroup; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMapGroupInput(element : TMXmlElement; path : string) : TFhirStructureMapGroupInput;
    function ParseStructureMapGroupInputChild(element : TFhirStructureMapGroupInput; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMapGroupRule(element : TMXmlElement; path : string) : TFhirStructureMapGroupRule;
    function ParseStructureMapGroupRuleChild(element : TFhirStructureMapGroupRule; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMapGroupRuleSource(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleSource;
    function ParseStructureMapGroupRuleSourceChild(element : TFhirStructureMapGroupRuleSource; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMapGroupRuleTarget(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleTarget;
    function ParseStructureMapGroupRuleTargetChild(element : TFhirStructureMapGroupRuleTarget; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMapGroupRuleTargetParameter(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleTargetParameter;
    function ParseStructureMapGroupRuleTargetParameterChild(element : TFhirStructureMapGroupRuleTargetParameter; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMapGroupRuleDependent(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleDependent;
    function ParseStructureMapGroupRuleDependentChild(element : TFhirStructureMapGroupRuleDependent; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMap(element : TMXmlElement; path : string) : TFhirStructureMap;
    function ParseStructureMapChild(element : TFhirStructureMap; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
    function ParseSubscriptionChannel(element : TMXmlElement; path : string) : TFhirSubscriptionChannel;
    function ParseSubscriptionChannelChild(element : TFhirSubscriptionChannel; path : string; child : TMXmlElement) : boolean;
    function ParseSubscription(element : TMXmlElement; path : string) : TFhirSubscription;
    function ParseSubscriptionChild(element : TFhirSubscription; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
    function ParseSubstanceInstance(element : TMXmlElement; path : string) : TFhirSubstanceInstance;
    function ParseSubstanceInstanceChild(element : TFhirSubstanceInstance; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceIngredient(element : TMXmlElement; path : string) : TFhirSubstanceIngredient;
    function ParseSubstanceIngredientChild(element : TFhirSubstanceIngredient; path : string; child : TMXmlElement) : boolean;
    function ParseSubstance(element : TMXmlElement; path : string) : TFhirSubstance;
    function ParseSubstanceChild(element : TFhirSubstance; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCENUCLEICACID}
    function ParseSubstanceNucleicAcidSubunit(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcidSubunit;
    function ParseSubstanceNucleicAcidSubunitChild(element : TFhirSubstanceNucleicAcidSubunit; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceNucleicAcidSubunitLinkage(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcidSubunitLinkage;
    function ParseSubstanceNucleicAcidSubunitLinkageChild(element : TFhirSubstanceNucleicAcidSubunitLinkage; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceNucleicAcidSubunitSugar(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcidSubunitSugar;
    function ParseSubstanceNucleicAcidSubunitSugarChild(element : TFhirSubstanceNucleicAcidSubunitSugar; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceNucleicAcid(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcid;
    function ParseSubstanceNucleicAcidChild(element : TFhirSubstanceNucleicAcid; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSTANCENUCLEICACID}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
    function ParseSubstancePolymerMonomerSet(element : TMXmlElement; path : string) : TFhirSubstancePolymerMonomerSet;
    function ParseSubstancePolymerMonomerSetChild(element : TFhirSubstancePolymerMonomerSet; path : string; child : TMXmlElement) : boolean;
    function ParseSubstancePolymerMonomerSetStartingMaterial(element : TMXmlElement; path : string) : TFhirSubstancePolymerMonomerSetStartingMaterial;
    function ParseSubstancePolymerMonomerSetStartingMaterialChild(element : TFhirSubstancePolymerMonomerSetStartingMaterial; path : string; child : TMXmlElement) : boolean;
    function ParseSubstancePolymerRepeat(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeat;
    function ParseSubstancePolymerRepeatChild(element : TFhirSubstancePolymerRepeat; path : string; child : TMXmlElement) : boolean;
    function ParseSubstancePolymerRepeatRepeatUnit(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeatRepeatUnit;
    function ParseSubstancePolymerRepeatRepeatUnitChild(element : TFhirSubstancePolymerRepeatRepeatUnit; path : string; child : TMXmlElement) : boolean;
    function ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation;
    function ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationChild(element : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation; path : string; child : TMXmlElement) : boolean;
    function ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentation(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation;
    function ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentationChild(element : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation; path : string; child : TMXmlElement) : boolean;
    function ParseSubstancePolymer(element : TMXmlElement; path : string) : TFhirSubstancePolymer;
    function ParseSubstancePolymerChild(element : TFhirSubstancePolymer; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEPROTEIN}
    function ParseSubstanceProteinSubunit(element : TMXmlElement; path : string) : TFhirSubstanceProteinSubunit;
    function ParseSubstanceProteinSubunitChild(element : TFhirSubstanceProteinSubunit; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceProtein(element : TMXmlElement; path : string) : TFhirSubstanceProtein;
    function ParseSubstanceProteinChild(element : TFhirSubstanceProtein; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSTANCEPROTEIN}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
    function ParseSubstanceReferenceInformationGene(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformationGene;
    function ParseSubstanceReferenceInformationGeneChild(element : TFhirSubstanceReferenceInformationGene; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceReferenceInformationGeneElement(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformationGeneElement;
    function ParseSubstanceReferenceInformationGeneElementChild(element : TFhirSubstanceReferenceInformationGeneElement; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceReferenceInformationClassification(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformationClassification;
    function ParseSubstanceReferenceInformationClassificationChild(element : TFhirSubstanceReferenceInformationClassification; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceReferenceInformationTarget(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformationTarget;
    function ParseSubstanceReferenceInformationTargetChild(element : TFhirSubstanceReferenceInformationTarget; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceReferenceInformation(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformation;
    function ParseSubstanceReferenceInformationChild(element : TFhirSubstanceReferenceInformation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
    function ParseSubstanceSourceMaterialFractionDescription(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialFractionDescription;
    function ParseSubstanceSourceMaterialFractionDescriptionChild(element : TFhirSubstanceSourceMaterialFractionDescription; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSourceMaterialOrganism(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganism;
    function ParseSubstanceSourceMaterialOrganismChild(element : TFhirSubstanceSourceMaterialOrganism; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSourceMaterialOrganismAuthor(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganismAuthor;
    function ParseSubstanceSourceMaterialOrganismAuthorChild(element : TFhirSubstanceSourceMaterialOrganismAuthor; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSourceMaterialOrganismHybrid(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganismHybrid;
    function ParseSubstanceSourceMaterialOrganismHybridChild(element : TFhirSubstanceSourceMaterialOrganismHybrid; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSourceMaterialOrganismOrganismGeneral(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganismOrganismGeneral;
    function ParseSubstanceSourceMaterialOrganismOrganismGeneralChild(element : TFhirSubstanceSourceMaterialOrganismOrganismGeneral; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSourceMaterialPartDescription(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialPartDescription;
    function ParseSubstanceSourceMaterialPartDescriptionChild(element : TFhirSubstanceSourceMaterialPartDescription; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSourceMaterial(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterial;
    function ParseSubstanceSourceMaterialChild(element : TFhirSubstanceSourceMaterial; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSTANCESOURCEMATERIAL}
{$IFDEF FHIR_SUBSTANCESPECIFICATION}
    function ParseSubstanceSpecificationMoiety(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationMoiety;
    function ParseSubstanceSpecificationMoietyChild(element : TFhirSubstanceSpecificationMoiety; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSpecificationProperty(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationProperty;
    function ParseSubstanceSpecificationPropertyChild(element : TFhirSubstanceSpecificationProperty; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSpecificationStructure(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationStructure;
    function ParseSubstanceSpecificationStructureChild(element : TFhirSubstanceSpecificationStructure; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSpecificationStructureIsotope(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationStructureIsotope;
    function ParseSubstanceSpecificationStructureIsotopeChild(element : TFhirSubstanceSpecificationStructureIsotope; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSpecificationStructureIsotopeMolecularWeight(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationStructureIsotopeMolecularWeight;
    function ParseSubstanceSpecificationStructureIsotopeMolecularWeightChild(element : TFhirSubstanceSpecificationStructureIsotopeMolecularWeight; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSpecificationStructureRepresentation(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationStructureRepresentation;
    function ParseSubstanceSpecificationStructureRepresentationChild(element : TFhirSubstanceSpecificationStructureRepresentation; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSpecificationCode(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationCode;
    function ParseSubstanceSpecificationCodeChild(element : TFhirSubstanceSpecificationCode; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSpecificationName(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationName;
    function ParseSubstanceSpecificationNameChild(element : TFhirSubstanceSpecificationName; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSpecificationNameOfficial(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationNameOfficial;
    function ParseSubstanceSpecificationNameOfficialChild(element : TFhirSubstanceSpecificationNameOfficial; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSpecificationRelationship(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationRelationship;
    function ParseSubstanceSpecificationRelationshipChild(element : TFhirSubstanceSpecificationRelationship; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSpecification(element : TMXmlElement; path : string) : TFhirSubstanceSpecification;
    function ParseSubstanceSpecificationChild(element : TFhirSubstanceSpecification; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSTANCESPECIFICATION}
{$IFDEF FHIR_SUPPLYDELIVERY}
    function ParseSupplyDeliverySuppliedItem(element : TMXmlElement; path : string) : TFhirSupplyDeliverySuppliedItem;
    function ParseSupplyDeliverySuppliedItemChild(element : TFhirSupplyDeliverySuppliedItem; path : string; child : TMXmlElement) : boolean;
    function ParseSupplyDelivery(element : TMXmlElement; path : string) : TFhirSupplyDelivery;
    function ParseSupplyDeliveryChild(element : TFhirSupplyDelivery; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
    function ParseSupplyRequestParameter(element : TMXmlElement; path : string) : TFhirSupplyRequestParameter;
    function ParseSupplyRequestParameterChild(element : TFhirSupplyRequestParameter; path : string; child : TMXmlElement) : boolean;
    function ParseSupplyRequest(element : TMXmlElement; path : string) : TFhirSupplyRequest;
    function ParseSupplyRequestChild(element : TFhirSupplyRequest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
    function ParseTaskRestriction(element : TMXmlElement; path : string) : TFhirTaskRestriction;
    function ParseTaskRestrictionChild(element : TFhirTaskRestriction; path : string; child : TMXmlElement) : boolean;
    function ParseTaskInput(element : TMXmlElement; path : string) : TFhirTaskInput;
    function ParseTaskInputChild(element : TFhirTaskInput; path : string; child : TMXmlElement) : boolean;
    function ParseTaskOutput(element : TMXmlElement; path : string) : TFhirTaskOutput;
    function ParseTaskOutputChild(element : TFhirTaskOutput; path : string; child : TMXmlElement) : boolean;
    function ParseTask(element : TMXmlElement; path : string) : TFhirTask;
    function ParseTaskChild(element : TFhirTask; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
    function ParseTerminologyCapabilitiesSoftware(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesSoftware;
    function ParseTerminologyCapabilitiesSoftwareChild(element : TFhirTerminologyCapabilitiesSoftware; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesImplementation(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesImplementation;
    function ParseTerminologyCapabilitiesImplementationChild(element : TFhirTerminologyCapabilitiesImplementation; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesCodeSystem(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesCodeSystem;
    function ParseTerminologyCapabilitiesCodeSystemChild(element : TFhirTerminologyCapabilitiesCodeSystem; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesCodeSystemVersion(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesCodeSystemVersion;
    function ParseTerminologyCapabilitiesCodeSystemVersionChild(element : TFhirTerminologyCapabilitiesCodeSystemVersion; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesCodeSystemVersionFilter(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesCodeSystemVersionFilter;
    function ParseTerminologyCapabilitiesCodeSystemVersionFilterChild(element : TFhirTerminologyCapabilitiesCodeSystemVersionFilter; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesExpansion(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesExpansion;
    function ParseTerminologyCapabilitiesExpansionChild(element : TFhirTerminologyCapabilitiesExpansion; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesExpansionParameter(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesExpansionParameter;
    function ParseTerminologyCapabilitiesExpansionParameterChild(element : TFhirTerminologyCapabilitiesExpansionParameter; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesValidateCode(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesValidateCode;
    function ParseTerminologyCapabilitiesValidateCodeChild(element : TFhirTerminologyCapabilitiesValidateCode; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesTranslation(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesTranslation;
    function ParseTerminologyCapabilitiesTranslationChild(element : TFhirTerminologyCapabilitiesTranslation; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesClosure(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesClosure;
    function ParseTerminologyCapabilitiesClosureChild(element : TFhirTerminologyCapabilitiesClosure; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilities(element : TMXmlElement; path : string) : TFhirTerminologyCapabilities;
    function ParseTerminologyCapabilitiesChild(element : TFhirTerminologyCapabilities; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
    function ParseTestReportParticipant(element : TMXmlElement; path : string) : TFhirTestReportParticipant;
    function ParseTestReportParticipantChild(element : TFhirTestReportParticipant; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportSetup(element : TMXmlElement; path : string) : TFhirTestReportSetup;
    function ParseTestReportSetupChild(element : TFhirTestReportSetup; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportSetupAction(element : TMXmlElement; path : string) : TFhirTestReportSetupAction;
    function ParseTestReportSetupActionChild(element : TFhirTestReportSetupAction; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportSetupActionOperation(element : TMXmlElement; path : string) : TFhirTestReportSetupActionOperation;
    function ParseTestReportSetupActionOperationChild(element : TFhirTestReportSetupActionOperation; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportSetupActionAssert(element : TMXmlElement; path : string) : TFhirTestReportSetupActionAssert;
    function ParseTestReportSetupActionAssertChild(element : TFhirTestReportSetupActionAssert; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportTest(element : TMXmlElement; path : string) : TFhirTestReportTest;
    function ParseTestReportTestChild(element : TFhirTestReportTest; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportTestAction(element : TMXmlElement; path : string) : TFhirTestReportTestAction;
    function ParseTestReportTestActionChild(element : TFhirTestReportTestAction; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportTeardown(element : TMXmlElement; path : string) : TFhirTestReportTeardown;
    function ParseTestReportTeardownChild(element : TFhirTestReportTeardown; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportTeardownAction(element : TMXmlElement; path : string) : TFhirTestReportTeardownAction;
    function ParseTestReportTeardownActionChild(element : TFhirTestReportTeardownAction; path : string; child : TMXmlElement) : boolean;
    function ParseTestReport(element : TMXmlElement; path : string) : TFhirTestReport;
    function ParseTestReportChild(element : TFhirTestReport; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
    function ParseTestScriptOrigin(element : TMXmlElement; path : string) : TFhirTestScriptOrigin;
    function ParseTestScriptOriginChild(element : TFhirTestScriptOrigin; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptDestination(element : TMXmlElement; path : string) : TFhirTestScriptDestination;
    function ParseTestScriptDestinationChild(element : TFhirTestScriptDestination; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptMetadata(element : TMXmlElement; path : string) : TFhirTestScriptMetadata;
    function ParseTestScriptMetadataChild(element : TFhirTestScriptMetadata; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptMetadataLink(element : TMXmlElement; path : string) : TFhirTestScriptMetadataLink;
    function ParseTestScriptMetadataLinkChild(element : TFhirTestScriptMetadataLink; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptMetadataCapability(element : TMXmlElement; path : string) : TFhirTestScriptMetadataCapability;
    function ParseTestScriptMetadataCapabilityChild(element : TFhirTestScriptMetadataCapability; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptFixture(element : TMXmlElement; path : string) : TFhirTestScriptFixture;
    function ParseTestScriptFixtureChild(element : TFhirTestScriptFixture; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptVariable(element : TMXmlElement; path : string) : TFhirTestScriptVariable;
    function ParseTestScriptVariableChild(element : TFhirTestScriptVariable; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptSetup(element : TMXmlElement; path : string) : TFhirTestScriptSetup;
    function ParseTestScriptSetupChild(element : TFhirTestScriptSetup; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptSetupAction(element : TMXmlElement; path : string) : TFhirTestScriptSetupAction;
    function ParseTestScriptSetupActionChild(element : TFhirTestScriptSetupAction; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptSetupActionOperation(element : TMXmlElement; path : string) : TFhirTestScriptSetupActionOperation;
    function ParseTestScriptSetupActionOperationChild(element : TFhirTestScriptSetupActionOperation; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptSetupActionOperationRequestHeader(element : TMXmlElement; path : string) : TFhirTestScriptSetupActionOperationRequestHeader;
    function ParseTestScriptSetupActionOperationRequestHeaderChild(element : TFhirTestScriptSetupActionOperationRequestHeader; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptSetupActionAssert(element : TMXmlElement; path : string) : TFhirTestScriptSetupActionAssert;
    function ParseTestScriptSetupActionAssertChild(element : TFhirTestScriptSetupActionAssert; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptTest(element : TMXmlElement; path : string) : TFhirTestScriptTest;
    function ParseTestScriptTestChild(element : TFhirTestScriptTest; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptTestAction(element : TMXmlElement; path : string) : TFhirTestScriptTestAction;
    function ParseTestScriptTestActionChild(element : TFhirTestScriptTestAction; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptTeardown(element : TMXmlElement; path : string) : TFhirTestScriptTeardown;
    function ParseTestScriptTeardownChild(element : TFhirTestScriptTeardown; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptTeardownAction(element : TMXmlElement; path : string) : TFhirTestScriptTeardownAction;
    function ParseTestScriptTeardownActionChild(element : TFhirTestScriptTeardownAction; path : string; child : TMXmlElement) : boolean;
    function ParseTestScript(element : TMXmlElement; path : string) : TFhirTestScript;
    function ParseTestScriptChild(element : TFhirTestScript; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
    function ParseValueSetCompose(element : TMXmlElement; path : string) : TFhirValueSetCompose;
    function ParseValueSetComposeChild(element : TFhirValueSetCompose; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetComposeInclude(element : TMXmlElement; path : string) : TFhirValueSetComposeInclude;
    function ParseValueSetComposeIncludeChild(element : TFhirValueSetComposeInclude; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetComposeIncludeConcept(element : TMXmlElement; path : string) : TFhirValueSetComposeIncludeConcept;
    function ParseValueSetComposeIncludeConceptChild(element : TFhirValueSetComposeIncludeConcept; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetComposeIncludeConceptDesignation(element : TMXmlElement; path : string) : TFhirValueSetComposeIncludeConceptDesignation;
    function ParseValueSetComposeIncludeConceptDesignationChild(element : TFhirValueSetComposeIncludeConceptDesignation; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetComposeIncludeFilter(element : TMXmlElement; path : string) : TFhirValueSetComposeIncludeFilter;
    function ParseValueSetComposeIncludeFilterChild(element : TFhirValueSetComposeIncludeFilter; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetExpansion(element : TMXmlElement; path : string) : TFhirValueSetExpansion;
    function ParseValueSetExpansionChild(element : TFhirValueSetExpansion; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetExpansionParameter(element : TMXmlElement; path : string) : TFhirValueSetExpansionParameter;
    function ParseValueSetExpansionParameterChild(element : TFhirValueSetExpansionParameter; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetExpansionContains(element : TMXmlElement; path : string) : TFhirValueSetExpansionContains;
    function ParseValueSetExpansionContainsChild(element : TFhirValueSetExpansionContains; path : string; child : TMXmlElement) : boolean;
    function ParseValueSet(element : TMXmlElement; path : string) : TFhirValueSet;
    function ParseValueSetChild(element : TFhirValueSet; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
    function ParseVerificationResultPrimarySource(element : TMXmlElement; path : string) : TFhirVerificationResultPrimarySource;
    function ParseVerificationResultPrimarySourceChild(element : TFhirVerificationResultPrimarySource; path : string; child : TMXmlElement) : boolean;
    function ParseVerificationResultAttestation(element : TMXmlElement; path : string) : TFhirVerificationResultAttestation;
    function ParseVerificationResultAttestationChild(element : TFhirVerificationResultAttestation; path : string; child : TMXmlElement) : boolean;
    function ParseVerificationResultValidator(element : TMXmlElement; path : string) : TFhirVerificationResultValidator;
    function ParseVerificationResultValidatorChild(element : TFhirVerificationResultValidator; path : string; child : TMXmlElement) : boolean;
    function ParseVerificationResult(element : TMXmlElement; path : string) : TFhirVerificationResult;
    function ParseVerificationResultChild(element : TFhirVerificationResult; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
    function ParseVisionPrescriptionLensSpecification(element : TMXmlElement; path : string) : TFhirVisionPrescriptionLensSpecification;
    function ParseVisionPrescriptionLensSpecificationChild(element : TFhirVisionPrescriptionLensSpecification; path : string; child : TMXmlElement) : boolean;
    function ParseVisionPrescriptionLensSpecificationPrism(element : TMXmlElement; path : string) : TFhirVisionPrescriptionLensSpecificationPrism;
    function ParseVisionPrescriptionLensSpecificationPrismChild(element : TFhirVisionPrescriptionLensSpecificationPrism; path : string; child : TMXmlElement) : boolean;
    function ParseVisionPrescription(element : TMXmlElement; path : string) : TFhirVisionPrescription;
    function ParseVisionPrescriptionChild(element : TFhirVisionPrescription; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_VISIONPRESCRIPTION}
    function ParseResource(element : TMXmlElement; path : String) : TFhirResource; override;
    function ParseDataType(element : TMXmlElement; name : String; type_ : TFHIRTypeClass) : TFHIRType; override;
  public
    function ParseFragment(element : TMXmlElement) : TFHIRObject; overload;
  end;

  TFHIRXmlComposer = class (TFHIRXmlComposerBase4)
  protected
    procedure ComposeElement(xml : TXmlBuilder; name : string; elem : TFhirElement);

    Procedure ComposeElementAttributes(xml : TXmlBuilder; element : TFhirElement);
    Procedure ComposeElementChildren(xml : TXmlBuilder; element : TFhirElement);
    Procedure ComposeBackboneElementChildren(xml : TXmlBuilder; element : TFhirBackboneElement); overload;
    Procedure ComposeBackboneElementChildren(xml : TXmlBuilder; element : TFhirBackboneType); overload;
    procedure ComposeBackboneElement(xml : TXmlBuilder; name : string; elem : TFhirBackboneElement);
    procedure ComposeBackboneType(xml : TXmlBuilder; name : string; elem : TFhirBackboneType);
    procedure ComposeBackboneTypeChildren(xml : TXmlBuilder; elem : TFhirBackboneType);

    Procedure ComposeEnum(xml : TXmlBuilder; name : String; value : TFhirEnum; Const aNames : Array Of String);
    Procedure ComposeDate(xml : TXmlBuilder; name : String; value : TFhirDate);
    Procedure ComposeDateTime(xml : TXmlBuilder; name : String; value : TFhirDateTime);
    Procedure ComposeString(xml : TXmlBuilder; name : String; value : TFhirString);
    Procedure ComposeInteger(xml : TXmlBuilder; name : String; value : TFhirInteger);
    Procedure ComposeUri(xml : TXmlBuilder; name : String; value : TFhirUri);
    Procedure ComposeInstant(xml : TXmlBuilder; name : String; value : TFhirInstant);
    Procedure ComposeXhtml(xml : TXmlBuilder; name : String; value : TFhirXhtml);
    Procedure ComposeBoolean(xml : TXmlBuilder; name : String; value : TFhirBoolean);
    Procedure ComposeBase64Binary(xml : TXmlBuilder; name : String; value : TFhirBase64Binary);
    Procedure ComposeTime(xml : TXmlBuilder; name : String; value : TFhirTime);
    Procedure ComposeDecimal(xml : TXmlBuilder; name : String; value : TFhirDecimal);
    Procedure ComposeCode(xml : TXmlBuilder; name : String; value : TFhirCode);
    Procedure ComposeCanonical(xml : TXmlBuilder; name : String; value : TFhirCanonical);
    Procedure ComposeOid(xml : TXmlBuilder; name : String; value : TFhirOid);
    Procedure ComposeUuid(xml : TXmlBuilder; name : String; value : TFhirUuid);
    Procedure ComposeUrl(xml : TXmlBuilder; name : String; value : TFhirUrl);
    Procedure ComposeMarkdown(xml : TXmlBuilder; name : String; value : TFhirMarkdown);
    Procedure ComposeUnsignedInt(xml : TXmlBuilder; name : String; value : TFhirUnsignedInt);
    Procedure ComposeId(xml : TXmlBuilder; name : String; value : TFhirId);
    Procedure ComposePositiveInt(xml : TXmlBuilder; name : String; value : TFhirPositiveInt);

    Procedure ComposeResourceAttributes(xml : TXmlBuilder; resource : TFhirResource);
    Procedure ComposeResourceChildren(xml : TXmlBuilder; elem : TFhirResource);
    Procedure ComposeDomainResourceAttributes(xml : TXmlBuilder; resource : TFhirDomainResource);
    Procedure ComposeDomainResourceChildren(xml : TXmlBuilder; elem : TFhirDomainResource);
{$IFDEF FHIR_PARAMETERS}
    procedure ComposeParametersParameter(xml : TXmlBuilder; name : string; elem : TFhirParametersParameter);
    procedure ComposeParametersParameterChildren(xml : TXmlBuilder; elem : TFhirParametersParameter);
    procedure ComposeParameters(xml : TXmlBuilder; name : string; elem : TFhirParameters);
    procedure ComposeParametersChildren(xml : TXmlBuilder; elem : TFhirParameters);
{$ENDIF FHIR_PARAMETERS}

    procedure ComposeExtension(xml : TXmlBuilder; name : string; elem : TFhirExtension);
    procedure ComposeExtensionChildren(xml : TXmlBuilder; elem : TFhirExtension);
    procedure ComposeNarrative(xml : TXmlBuilder; name : string; elem : TFhirNarrative);
    procedure ComposeNarrativeChildren(xml : TXmlBuilder; elem : TFhirNarrative);
    procedure ComposeContributor(xml : TXmlBuilder; name : string; elem : TFhirContributor);
    procedure ComposeContributorChildren(xml : TXmlBuilder; elem : TFhirContributor);
    procedure ComposeAttachment(xml : TXmlBuilder; name : string; elem : TFhirAttachment);
    procedure ComposeAttachmentChildren(xml : TXmlBuilder; elem : TFhirAttachment);
    procedure ComposeDataRequirementCodeFilter(xml : TXmlBuilder; name : string; elem : TFhirDataRequirementCodeFilter);
    procedure ComposeDataRequirementCodeFilterChildren(xml : TXmlBuilder; elem : TFhirDataRequirementCodeFilter);
    procedure ComposeDataRequirementDateFilter(xml : TXmlBuilder; name : string; elem : TFhirDataRequirementDateFilter);
    procedure ComposeDataRequirementDateFilterChildren(xml : TXmlBuilder; elem : TFhirDataRequirementDateFilter);
    procedure ComposeDataRequirementSort(xml : TXmlBuilder; name : string; elem : TFhirDataRequirementSort);
    procedure ComposeDataRequirementSortChildren(xml : TXmlBuilder; elem : TFhirDataRequirementSort);
    procedure ComposeDataRequirement(xml : TXmlBuilder; name : string; elem : TFhirDataRequirement);
    procedure ComposeDataRequirementChildren(xml : TXmlBuilder; elem : TFhirDataRequirement);
    procedure ComposeDosageDoseAndRate(xml : TXmlBuilder; name : string; elem : TFhirDosageDoseAndRate);
    procedure ComposeDosageDoseAndRateChildren(xml : TXmlBuilder; elem : TFhirDosageDoseAndRate);
    procedure ComposeDosage(xml : TXmlBuilder; name : string; elem : TFhirDosage);
    procedure ComposeDosageChildren(xml : TXmlBuilder; elem : TFhirDosage);
    procedure ComposeMoney(xml : TXmlBuilder; name : string; elem : TFhirMoney);
    procedure ComposeMoneyChildren(xml : TXmlBuilder; elem : TFhirMoney);
    procedure ComposeMarketingStatus(xml : TXmlBuilder; name : string; elem : TFhirMarketingStatus);
    procedure ComposeMarketingStatusChildren(xml : TXmlBuilder; elem : TFhirMarketingStatus);
    procedure ComposeIdentifier(xml : TXmlBuilder; name : string; elem : TFhirIdentifier);
    procedure ComposeIdentifierChildren(xml : TXmlBuilder; elem : TFhirIdentifier);
    procedure ComposeSubstanceAmountReferenceRange(xml : TXmlBuilder; name : string; elem : TFhirSubstanceAmountReferenceRange);
    procedure ComposeSubstanceAmountReferenceRangeChildren(xml : TXmlBuilder; elem : TFhirSubstanceAmountReferenceRange);
    procedure ComposeSubstanceAmount(xml : TXmlBuilder; name : string; elem : TFhirSubstanceAmount);
    procedure ComposeSubstanceAmountChildren(xml : TXmlBuilder; elem : TFhirSubstanceAmount);
    procedure ComposeCoding(xml : TXmlBuilder; name : string; elem : TFhirCoding);
    procedure ComposeCodingChildren(xml : TXmlBuilder; elem : TFhirCoding);
    procedure ComposeSampledData(xml : TXmlBuilder; name : string; elem : TFhirSampledData);
    procedure ComposeSampledDataChildren(xml : TXmlBuilder; elem : TFhirSampledData);
    procedure ComposePopulation(xml : TXmlBuilder; name : string; elem : TFhirPopulation);
    procedure ComposePopulationChildren(xml : TXmlBuilder; elem : TFhirPopulation);
    procedure ComposeRatio(xml : TXmlBuilder; name : string; elem : TFhirRatio);
    procedure ComposeRatioChildren(xml : TXmlBuilder; elem : TFhirRatio);
    procedure ComposeReference(xml : TXmlBuilder; name : string; elem : TFhirReference);
    procedure ComposeReferenceChildren(xml : TXmlBuilder; elem : TFhirReference);
    procedure ComposeTriggerDefinition(xml : TXmlBuilder; name : string; elem : TFhirTriggerDefinition);
    procedure ComposeTriggerDefinitionChildren(xml : TXmlBuilder; elem : TFhirTriggerDefinition);
    procedure ComposePeriod(xml : TXmlBuilder; name : string; elem : TFhirPeriod);
    procedure ComposePeriodChildren(xml : TXmlBuilder; elem : TFhirPeriod);
    procedure ComposeQuantity(xml : TXmlBuilder; name : string; elem : TFhirQuantity);
    procedure ComposeQuantityChildren(xml : TXmlBuilder; elem : TFhirQuantity);
    procedure ComposeRange(xml : TXmlBuilder; name : string; elem : TFhirRange);
    procedure ComposeRangeChildren(xml : TXmlBuilder; elem : TFhirRange);
    procedure ComposeRelatedArtifact(xml : TXmlBuilder; name : string; elem : TFhirRelatedArtifact);
    procedure ComposeRelatedArtifactChildren(xml : TXmlBuilder; elem : TFhirRelatedArtifact);
    procedure ComposeAnnotation(xml : TXmlBuilder; name : string; elem : TFhirAnnotation);
    procedure ComposeAnnotationChildren(xml : TXmlBuilder; elem : TFhirAnnotation);
    procedure ComposeProductShelfLife(xml : TXmlBuilder; name : string; elem : TFhirProductShelfLife);
    procedure ComposeProductShelfLifeChildren(xml : TXmlBuilder; elem : TFhirProductShelfLife);
    procedure ComposeContactDetail(xml : TXmlBuilder; name : string; elem : TFhirContactDetail);
    procedure ComposeContactDetailChildren(xml : TXmlBuilder; elem : TFhirContactDetail);
    procedure ComposeExpression(xml : TXmlBuilder; name : string; elem : TFhirExpression);
    procedure ComposeExpressionChildren(xml : TXmlBuilder; elem : TFhirExpression);
    procedure ComposeUsageContext(xml : TXmlBuilder; name : string; elem : TFhirUsageContext);
    procedure ComposeUsageContextChildren(xml : TXmlBuilder; elem : TFhirUsageContext);
    procedure ComposeSignature(xml : TXmlBuilder; name : string; elem : TFhirSignature);
    procedure ComposeSignatureChildren(xml : TXmlBuilder; elem : TFhirSignature);
    procedure ComposeProdCharacteristic(xml : TXmlBuilder; name : string; elem : TFhirProdCharacteristic);
    procedure ComposeProdCharacteristicChildren(xml : TXmlBuilder; elem : TFhirProdCharacteristic);
    procedure ComposeCodeableConcept(xml : TXmlBuilder; name : string; elem : TFhirCodeableConcept);
    procedure ComposeCodeableConceptChildren(xml : TXmlBuilder; elem : TFhirCodeableConcept);
    procedure ComposeParameterDefinition(xml : TXmlBuilder; name : string; elem : TFhirParameterDefinition);
    procedure ComposeParameterDefinitionChildren(xml : TXmlBuilder; elem : TFhirParameterDefinition);
    procedure ComposeContactPoint(xml : TXmlBuilder; name : string; elem : TFhirContactPoint);
    procedure ComposeContactPointChildren(xml : TXmlBuilder; elem : TFhirContactPoint);
    procedure ComposeHumanName(xml : TXmlBuilder; name : string; elem : TFhirHumanName);
    procedure ComposeHumanNameChildren(xml : TXmlBuilder; elem : TFhirHumanName);
    procedure ComposeMeta(xml : TXmlBuilder; name : string; elem : TFhirMeta);
    procedure ComposeMetaChildren(xml : TXmlBuilder; elem : TFhirMeta);
    procedure ComposeAddress(xml : TXmlBuilder; name : string; elem : TFhirAddress);
    procedure ComposeAddressChildren(xml : TXmlBuilder; elem : TFhirAddress);
    procedure ComposeElementDefinitionSlicing(xml : TXmlBuilder; name : string; elem : TFhirElementDefinitionSlicing);
    procedure ComposeElementDefinitionSlicingChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionSlicing);
    procedure ComposeElementDefinitionSlicingDiscriminator(xml : TXmlBuilder; name : string; elem : TFhirElementDefinitionSlicingDiscriminator);
    procedure ComposeElementDefinitionSlicingDiscriminatorChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionSlicingDiscriminator);
    procedure ComposeElementDefinitionBase(xml : TXmlBuilder; name : string; elem : TFhirElementDefinitionBase);
    procedure ComposeElementDefinitionBaseChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionBase);
    procedure ComposeElementDefinitionType(xml : TXmlBuilder; name : string; elem : TFhirElementDefinitionType);
    procedure ComposeElementDefinitionTypeChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionType);
    procedure ComposeElementDefinitionExample(xml : TXmlBuilder; name : string; elem : TFhirElementDefinitionExample);
    procedure ComposeElementDefinitionExampleChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionExample);
    procedure ComposeElementDefinitionConstraint(xml : TXmlBuilder; name : string; elem : TFhirElementDefinitionConstraint);
    procedure ComposeElementDefinitionConstraintChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionConstraint);
    procedure ComposeElementDefinitionBinding(xml : TXmlBuilder; name : string; elem : TFhirElementDefinitionBinding);
    procedure ComposeElementDefinitionBindingChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionBinding);
    procedure ComposeElementDefinitionMapping(xml : TXmlBuilder; name : string; elem : TFhirElementDefinitionMapping);
    procedure ComposeElementDefinitionMappingChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionMapping);
    procedure ComposeElementDefinition(xml : TXmlBuilder; name : string; elem : TFhirElementDefinition);
    procedure ComposeElementDefinitionChildren(xml : TXmlBuilder; elem : TFhirElementDefinition);
    procedure ComposeTimingRepeat(xml : TXmlBuilder; name : string; elem : TFhirTimingRepeat);
    procedure ComposeTimingRepeatChildren(xml : TXmlBuilder; elem : TFhirTimingRepeat);
    procedure ComposeTiming(xml : TXmlBuilder; name : string; elem : TFhirTiming);
    procedure ComposeTimingChildren(xml : TXmlBuilder; elem : TFhirTiming);
    procedure ComposeCount(xml : TXmlBuilder; name : string; elem : TFhirCount);
    procedure ComposeCountChildren(xml : TXmlBuilder; elem : TFhirCount);
    procedure ComposeAge(xml : TXmlBuilder; name : string; elem : TFhirAge);
    procedure ComposeAgeChildren(xml : TXmlBuilder; elem : TFhirAge);
    procedure ComposeDistance(xml : TXmlBuilder; name : string; elem : TFhirDistance);
    procedure ComposeDistanceChildren(xml : TXmlBuilder; elem : TFhirDistance);
    procedure ComposeDuration(xml : TXmlBuilder; name : string; elem : TFhirDuration);
    procedure ComposeDurationChildren(xml : TXmlBuilder; elem : TFhirDuration);

{$IFDEF FHIR_ACCOUNT}
    procedure ComposeAccountCoverage(xml : TXmlBuilder; name : string; elem : TFhirAccountCoverage);
    procedure ComposeAccountCoverageChildren(xml : TXmlBuilder; elem : TFhirAccountCoverage);
    procedure ComposeAccountGuarantor(xml : TXmlBuilder; name : string; elem : TFhirAccountGuarantor);
    procedure ComposeAccountGuarantorChildren(xml : TXmlBuilder; elem : TFhirAccountGuarantor);
    procedure ComposeAccount(xml : TXmlBuilder; name : string; elem : TFhirAccount);
    procedure ComposeAccountChildren(xml : TXmlBuilder; elem : TFhirAccount);
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
    procedure ComposeActivityDefinitionParticipant(xml : TXmlBuilder; name : string; elem : TFhirActivityDefinitionParticipant);
    procedure ComposeActivityDefinitionParticipantChildren(xml : TXmlBuilder; elem : TFhirActivityDefinitionParticipant);
    procedure ComposeActivityDefinitionDynamicValue(xml : TXmlBuilder; name : string; elem : TFhirActivityDefinitionDynamicValue);
    procedure ComposeActivityDefinitionDynamicValueChildren(xml : TXmlBuilder; elem : TFhirActivityDefinitionDynamicValue);
    procedure ComposeActivityDefinition(xml : TXmlBuilder; name : string; elem : TFhirActivityDefinition);
    procedure ComposeActivityDefinitionChildren(xml : TXmlBuilder; elem : TFhirActivityDefinition);
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
    procedure ComposeAdverseEventSuspectEntity(xml : TXmlBuilder; name : string; elem : TFhirAdverseEventSuspectEntity);
    procedure ComposeAdverseEventSuspectEntityChildren(xml : TXmlBuilder; elem : TFhirAdverseEventSuspectEntity);
    procedure ComposeAdverseEventSuspectEntityCausality(xml : TXmlBuilder; name : string; elem : TFhirAdverseEventSuspectEntityCausality);
    procedure ComposeAdverseEventSuspectEntityCausalityChildren(xml : TXmlBuilder; elem : TFhirAdverseEventSuspectEntityCausality);
    procedure ComposeAdverseEvent(xml : TXmlBuilder; name : string; elem : TFhirAdverseEvent);
    procedure ComposeAdverseEventChildren(xml : TXmlBuilder; elem : TFhirAdverseEvent);
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
    procedure ComposeAllergyIntoleranceReaction(xml : TXmlBuilder; name : string; elem : TFhirAllergyIntoleranceReaction);
    procedure ComposeAllergyIntoleranceReactionChildren(xml : TXmlBuilder; elem : TFhirAllergyIntoleranceReaction);
    procedure ComposeAllergyIntolerance(xml : TXmlBuilder; name : string; elem : TFhirAllergyIntolerance);
    procedure ComposeAllergyIntoleranceChildren(xml : TXmlBuilder; elem : TFhirAllergyIntolerance);
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
    procedure ComposeAppointmentParticipant(xml : TXmlBuilder; name : string; elem : TFhirAppointmentParticipant);
    procedure ComposeAppointmentParticipantChildren(xml : TXmlBuilder; elem : TFhirAppointmentParticipant);
    procedure ComposeAppointment(xml : TXmlBuilder; name : string; elem : TFhirAppointment);
    procedure ComposeAppointmentChildren(xml : TXmlBuilder; elem : TFhirAppointment);
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
    procedure ComposeAppointmentResponse(xml : TXmlBuilder; name : string; elem : TFhirAppointmentResponse);
    procedure ComposeAppointmentResponseChildren(xml : TXmlBuilder; elem : TFhirAppointmentResponse);
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
    procedure ComposeAuditEventAgent(xml : TXmlBuilder; name : string; elem : TFhirAuditEventAgent);
    procedure ComposeAuditEventAgentChildren(xml : TXmlBuilder; elem : TFhirAuditEventAgent);
    procedure ComposeAuditEventAgentNetwork(xml : TXmlBuilder; name : string; elem : TFhirAuditEventAgentNetwork);
    procedure ComposeAuditEventAgentNetworkChildren(xml : TXmlBuilder; elem : TFhirAuditEventAgentNetwork);
    procedure ComposeAuditEventSource(xml : TXmlBuilder; name : string; elem : TFhirAuditEventSource);
    procedure ComposeAuditEventSourceChildren(xml : TXmlBuilder; elem : TFhirAuditEventSource);
    procedure ComposeAuditEventEntity(xml : TXmlBuilder; name : string; elem : TFhirAuditEventEntity);
    procedure ComposeAuditEventEntityChildren(xml : TXmlBuilder; elem : TFhirAuditEventEntity);
    procedure ComposeAuditEventEntityDetail(xml : TXmlBuilder; name : string; elem : TFhirAuditEventEntityDetail);
    procedure ComposeAuditEventEntityDetailChildren(xml : TXmlBuilder; elem : TFhirAuditEventEntityDetail);
    procedure ComposeAuditEvent(xml : TXmlBuilder; name : string; elem : TFhirAuditEvent);
    procedure ComposeAuditEventChildren(xml : TXmlBuilder; elem : TFhirAuditEvent);
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
    procedure ComposeBasic(xml : TXmlBuilder; name : string; elem : TFhirBasic);
    procedure ComposeBasicChildren(xml : TXmlBuilder; elem : TFhirBasic);
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
    procedure ComposeBinary(xml : TXmlBuilder; name : string; elem : TFhirBinary);
    procedure ComposeBinaryChildren(xml : TXmlBuilder; elem : TFhirBinary);
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
    procedure ComposeBiologicallyDerivedProductCollection(xml : TXmlBuilder; name : string; elem : TFhirBiologicallyDerivedProductCollection);
    procedure ComposeBiologicallyDerivedProductCollectionChildren(xml : TXmlBuilder; elem : TFhirBiologicallyDerivedProductCollection);
    procedure ComposeBiologicallyDerivedProductProcessing(xml : TXmlBuilder; name : string; elem : TFhirBiologicallyDerivedProductProcessing);
    procedure ComposeBiologicallyDerivedProductProcessingChildren(xml : TXmlBuilder; elem : TFhirBiologicallyDerivedProductProcessing);
    procedure ComposeBiologicallyDerivedProductManipulation(xml : TXmlBuilder; name : string; elem : TFhirBiologicallyDerivedProductManipulation);
    procedure ComposeBiologicallyDerivedProductManipulationChildren(xml : TXmlBuilder; elem : TFhirBiologicallyDerivedProductManipulation);
    procedure ComposeBiologicallyDerivedProductStorage(xml : TXmlBuilder; name : string; elem : TFhirBiologicallyDerivedProductStorage);
    procedure ComposeBiologicallyDerivedProductStorageChildren(xml : TXmlBuilder; elem : TFhirBiologicallyDerivedProductStorage);
    procedure ComposeBiologicallyDerivedProduct(xml : TXmlBuilder; name : string; elem : TFhirBiologicallyDerivedProduct);
    procedure ComposeBiologicallyDerivedProductChildren(xml : TXmlBuilder; elem : TFhirBiologicallyDerivedProduct);
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
    procedure ComposeBodyStructure(xml : TXmlBuilder; name : string; elem : TFhirBodyStructure);
    procedure ComposeBodyStructureChildren(xml : TXmlBuilder; elem : TFhirBodyStructure);
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
    procedure ComposeBundleLink(xml : TXmlBuilder; name : string; elem : TFhirBundleLink);
    procedure ComposeBundleLinkChildren(xml : TXmlBuilder; elem : TFhirBundleLink);
    procedure ComposeBundleEntry(xml : TXmlBuilder; name : string; elem : TFhirBundleEntry);
    procedure ComposeBundleEntryChildren(xml : TXmlBuilder; elem : TFhirBundleEntry);
    procedure ComposeBundleEntrySearch(xml : TXmlBuilder; name : string; elem : TFhirBundleEntrySearch);
    procedure ComposeBundleEntrySearchChildren(xml : TXmlBuilder; elem : TFhirBundleEntrySearch);
    procedure ComposeBundleEntryRequest(xml : TXmlBuilder; name : string; elem : TFhirBundleEntryRequest);
    procedure ComposeBundleEntryRequestChildren(xml : TXmlBuilder; elem : TFhirBundleEntryRequest);
    procedure ComposeBundleEntryResponse(xml : TXmlBuilder; name : string; elem : TFhirBundleEntryResponse);
    procedure ComposeBundleEntryResponseChildren(xml : TXmlBuilder; elem : TFhirBundleEntryResponse);
    procedure ComposeBundle(xml : TXmlBuilder; name : string; elem : TFhirBundle);
    procedure ComposeBundleChildren(xml : TXmlBuilder; elem : TFhirBundle);
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
    procedure ComposeCapabilityStatementSoftware(xml : TXmlBuilder; name : string; elem : TFhirCapabilityStatementSoftware);
    procedure ComposeCapabilityStatementSoftwareChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementSoftware);
    procedure ComposeCapabilityStatementImplementation(xml : TXmlBuilder; name : string; elem : TFhirCapabilityStatementImplementation);
    procedure ComposeCapabilityStatementImplementationChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementImplementation);
    procedure ComposeCapabilityStatementRest(xml : TXmlBuilder; name : string; elem : TFhirCapabilityStatementRest);
    procedure ComposeCapabilityStatementRestChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementRest);
    procedure ComposeCapabilityStatementRestSecurity(xml : TXmlBuilder; name : string; elem : TFhirCapabilityStatementRestSecurity);
    procedure ComposeCapabilityStatementRestSecurityChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementRestSecurity);
    procedure ComposeCapabilityStatementRestResource(xml : TXmlBuilder; name : string; elem : TFhirCapabilityStatementRestResource);
    procedure ComposeCapabilityStatementRestResourceChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementRestResource);
    procedure ComposeCapabilityStatementRestResourceInteraction(xml : TXmlBuilder; name : string; elem : TFhirCapabilityStatementRestResourceInteraction);
    procedure ComposeCapabilityStatementRestResourceInteractionChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementRestResourceInteraction);
    procedure ComposeCapabilityStatementRestResourceSearchParam(xml : TXmlBuilder; name : string; elem : TFhirCapabilityStatementRestResourceSearchParam);
    procedure ComposeCapabilityStatementRestResourceSearchParamChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementRestResourceSearchParam);
    procedure ComposeCapabilityStatementRestResourceOperation(xml : TXmlBuilder; name : string; elem : TFhirCapabilityStatementRestResourceOperation);
    procedure ComposeCapabilityStatementRestResourceOperationChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementRestResourceOperation);
    procedure ComposeCapabilityStatementRestInteraction(xml : TXmlBuilder; name : string; elem : TFhirCapabilityStatementRestInteraction);
    procedure ComposeCapabilityStatementRestInteractionChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementRestInteraction);
    procedure ComposeCapabilityStatementMessaging(xml : TXmlBuilder; name : string; elem : TFhirCapabilityStatementMessaging);
    procedure ComposeCapabilityStatementMessagingChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementMessaging);
    procedure ComposeCapabilityStatementMessagingEndpoint(xml : TXmlBuilder; name : string; elem : TFhirCapabilityStatementMessagingEndpoint);
    procedure ComposeCapabilityStatementMessagingEndpointChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementMessagingEndpoint);
    procedure ComposeCapabilityStatementMessagingSupportedMessage(xml : TXmlBuilder; name : string; elem : TFhirCapabilityStatementMessagingSupportedMessage);
    procedure ComposeCapabilityStatementMessagingSupportedMessageChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementMessagingSupportedMessage);
    procedure ComposeCapabilityStatementDocument(xml : TXmlBuilder; name : string; elem : TFhirCapabilityStatementDocument);
    procedure ComposeCapabilityStatementDocumentChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementDocument);
    procedure ComposeCapabilityStatement(xml : TXmlBuilder; name : string; elem : TFhirCapabilityStatement);
    procedure ComposeCapabilityStatementChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatement);
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
    procedure ComposeCarePlanActivity(xml : TXmlBuilder; name : string; elem : TFhirCarePlanActivity);
    procedure ComposeCarePlanActivityChildren(xml : TXmlBuilder; elem : TFhirCarePlanActivity);
    procedure ComposeCarePlanActivityDetail(xml : TXmlBuilder; name : string; elem : TFhirCarePlanActivityDetail);
    procedure ComposeCarePlanActivityDetailChildren(xml : TXmlBuilder; elem : TFhirCarePlanActivityDetail);
    procedure ComposeCarePlan(xml : TXmlBuilder; name : string; elem : TFhirCarePlan);
    procedure ComposeCarePlanChildren(xml : TXmlBuilder; elem : TFhirCarePlan);
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
    procedure ComposeCareTeamParticipant(xml : TXmlBuilder; name : string; elem : TFhirCareTeamParticipant);
    procedure ComposeCareTeamParticipantChildren(xml : TXmlBuilder; elem : TFhirCareTeamParticipant);
    procedure ComposeCareTeam(xml : TXmlBuilder; name : string; elem : TFhirCareTeam);
    procedure ComposeCareTeamChildren(xml : TXmlBuilder; elem : TFhirCareTeam);
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
    procedure ComposeCatalogEntryRelatedEntry(xml : TXmlBuilder; name : string; elem : TFhirCatalogEntryRelatedEntry);
    procedure ComposeCatalogEntryRelatedEntryChildren(xml : TXmlBuilder; elem : TFhirCatalogEntryRelatedEntry);
    procedure ComposeCatalogEntry(xml : TXmlBuilder; name : string; elem : TFhirCatalogEntry);
    procedure ComposeCatalogEntryChildren(xml : TXmlBuilder; elem : TFhirCatalogEntry);
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
    procedure ComposeChargeItemPerformer(xml : TXmlBuilder; name : string; elem : TFhirChargeItemPerformer);
    procedure ComposeChargeItemPerformerChildren(xml : TXmlBuilder; elem : TFhirChargeItemPerformer);
    procedure ComposeChargeItem(xml : TXmlBuilder; name : string; elem : TFhirChargeItem);
    procedure ComposeChargeItemChildren(xml : TXmlBuilder; elem : TFhirChargeItem);
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
    procedure ComposeChargeItemDefinitionApplicability(xml : TXmlBuilder; name : string; elem : TFhirChargeItemDefinitionApplicability);
    procedure ComposeChargeItemDefinitionApplicabilityChildren(xml : TXmlBuilder; elem : TFhirChargeItemDefinitionApplicability);
    procedure ComposeChargeItemDefinitionPropertyGroup(xml : TXmlBuilder; name : string; elem : TFhirChargeItemDefinitionPropertyGroup);
    procedure ComposeChargeItemDefinitionPropertyGroupChildren(xml : TXmlBuilder; elem : TFhirChargeItemDefinitionPropertyGroup);
    procedure ComposeChargeItemDefinitionPropertyGroupPriceComponent(xml : TXmlBuilder; name : string; elem : TFhirChargeItemDefinitionPropertyGroupPriceComponent);
    procedure ComposeChargeItemDefinitionPropertyGroupPriceComponentChildren(xml : TXmlBuilder; elem : TFhirChargeItemDefinitionPropertyGroupPriceComponent);
    procedure ComposeChargeItemDefinition(xml : TXmlBuilder; name : string; elem : TFhirChargeItemDefinition);
    procedure ComposeChargeItemDefinitionChildren(xml : TXmlBuilder; elem : TFhirChargeItemDefinition);
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CLAIM}
    procedure ComposeClaimRelated(xml : TXmlBuilder; name : string; elem : TFhirClaimRelated);
    procedure ComposeClaimRelatedChildren(xml : TXmlBuilder; elem : TFhirClaimRelated);
    procedure ComposeClaimPayee(xml : TXmlBuilder; name : string; elem : TFhirClaimPayee);
    procedure ComposeClaimPayeeChildren(xml : TXmlBuilder; elem : TFhirClaimPayee);
    procedure ComposeClaimCareTeam(xml : TXmlBuilder; name : string; elem : TFhirClaimCareTeam);
    procedure ComposeClaimCareTeamChildren(xml : TXmlBuilder; elem : TFhirClaimCareTeam);
    procedure ComposeClaimSupportingInfo(xml : TXmlBuilder; name : string; elem : TFhirClaimSupportingInfo);
    procedure ComposeClaimSupportingInfoChildren(xml : TXmlBuilder; elem : TFhirClaimSupportingInfo);
    procedure ComposeClaimDiagnosis(xml : TXmlBuilder; name : string; elem : TFhirClaimDiagnosis);
    procedure ComposeClaimDiagnosisChildren(xml : TXmlBuilder; elem : TFhirClaimDiagnosis);
    procedure ComposeClaimProcedure(xml : TXmlBuilder; name : string; elem : TFhirClaimProcedure);
    procedure ComposeClaimProcedureChildren(xml : TXmlBuilder; elem : TFhirClaimProcedure);
    procedure ComposeClaimInsurance(xml : TXmlBuilder; name : string; elem : TFhirClaimInsurance);
    procedure ComposeClaimInsuranceChildren(xml : TXmlBuilder; elem : TFhirClaimInsurance);
    procedure ComposeClaimAccident(xml : TXmlBuilder; name : string; elem : TFhirClaimAccident);
    procedure ComposeClaimAccidentChildren(xml : TXmlBuilder; elem : TFhirClaimAccident);
    procedure ComposeClaimItem(xml : TXmlBuilder; name : string; elem : TFhirClaimItem);
    procedure ComposeClaimItemChildren(xml : TXmlBuilder; elem : TFhirClaimItem);
    procedure ComposeClaimItemDetail(xml : TXmlBuilder; name : string; elem : TFhirClaimItemDetail);
    procedure ComposeClaimItemDetailChildren(xml : TXmlBuilder; elem : TFhirClaimItemDetail);
    procedure ComposeClaimItemDetailSubDetail(xml : TXmlBuilder; name : string; elem : TFhirClaimItemDetailSubDetail);
    procedure ComposeClaimItemDetailSubDetailChildren(xml : TXmlBuilder; elem : TFhirClaimItemDetailSubDetail);
    procedure ComposeClaim(xml : TXmlBuilder; name : string; elem : TFhirClaim);
    procedure ComposeClaimChildren(xml : TXmlBuilder; elem : TFhirClaim);
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
    procedure ComposeClaimResponseItem(xml : TXmlBuilder; name : string; elem : TFhirClaimResponseItem);
    procedure ComposeClaimResponseItemChildren(xml : TXmlBuilder; elem : TFhirClaimResponseItem);
    procedure ComposeClaimResponseItemAdjudication(xml : TXmlBuilder; name : string; elem : TFhirClaimResponseItemAdjudication);
    procedure ComposeClaimResponseItemAdjudicationChildren(xml : TXmlBuilder; elem : TFhirClaimResponseItemAdjudication);
    procedure ComposeClaimResponseItemDetail(xml : TXmlBuilder; name : string; elem : TFhirClaimResponseItemDetail);
    procedure ComposeClaimResponseItemDetailChildren(xml : TXmlBuilder; elem : TFhirClaimResponseItemDetail);
    procedure ComposeClaimResponseItemDetailSubDetail(xml : TXmlBuilder; name : string; elem : TFhirClaimResponseItemDetailSubDetail);
    procedure ComposeClaimResponseItemDetailSubDetailChildren(xml : TXmlBuilder; elem : TFhirClaimResponseItemDetailSubDetail);
    procedure ComposeClaimResponseAddItem(xml : TXmlBuilder; name : string; elem : TFhirClaimResponseAddItem);
    procedure ComposeClaimResponseAddItemChildren(xml : TXmlBuilder; elem : TFhirClaimResponseAddItem);
    procedure ComposeClaimResponseAddItemDetail(xml : TXmlBuilder; name : string; elem : TFhirClaimResponseAddItemDetail);
    procedure ComposeClaimResponseAddItemDetailChildren(xml : TXmlBuilder; elem : TFhirClaimResponseAddItemDetail);
    procedure ComposeClaimResponseAddItemDetailSubDetail(xml : TXmlBuilder; name : string; elem : TFhirClaimResponseAddItemDetailSubDetail);
    procedure ComposeClaimResponseAddItemDetailSubDetailChildren(xml : TXmlBuilder; elem : TFhirClaimResponseAddItemDetailSubDetail);
    procedure ComposeClaimResponseTotal(xml : TXmlBuilder; name : string; elem : TFhirClaimResponseTotal);
    procedure ComposeClaimResponseTotalChildren(xml : TXmlBuilder; elem : TFhirClaimResponseTotal);
    procedure ComposeClaimResponsePayment(xml : TXmlBuilder; name : string; elem : TFhirClaimResponsePayment);
    procedure ComposeClaimResponsePaymentChildren(xml : TXmlBuilder; elem : TFhirClaimResponsePayment);
    procedure ComposeClaimResponseProcessNote(xml : TXmlBuilder; name : string; elem : TFhirClaimResponseProcessNote);
    procedure ComposeClaimResponseProcessNoteChildren(xml : TXmlBuilder; elem : TFhirClaimResponseProcessNote);
    procedure ComposeClaimResponseInsurance(xml : TXmlBuilder; name : string; elem : TFhirClaimResponseInsurance);
    procedure ComposeClaimResponseInsuranceChildren(xml : TXmlBuilder; elem : TFhirClaimResponseInsurance);
    procedure ComposeClaimResponseError(xml : TXmlBuilder; name : string; elem : TFhirClaimResponseError);
    procedure ComposeClaimResponseErrorChildren(xml : TXmlBuilder; elem : TFhirClaimResponseError);
    procedure ComposeClaimResponse(xml : TXmlBuilder; name : string; elem : TFhirClaimResponse);
    procedure ComposeClaimResponseChildren(xml : TXmlBuilder; elem : TFhirClaimResponse);
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
    procedure ComposeClinicalImpressionInvestigation(xml : TXmlBuilder; name : string; elem : TFhirClinicalImpressionInvestigation);
    procedure ComposeClinicalImpressionInvestigationChildren(xml : TXmlBuilder; elem : TFhirClinicalImpressionInvestigation);
    procedure ComposeClinicalImpressionFinding(xml : TXmlBuilder; name : string; elem : TFhirClinicalImpressionFinding);
    procedure ComposeClinicalImpressionFindingChildren(xml : TXmlBuilder; elem : TFhirClinicalImpressionFinding);
    procedure ComposeClinicalImpression(xml : TXmlBuilder; name : string; elem : TFhirClinicalImpression);
    procedure ComposeClinicalImpressionChildren(xml : TXmlBuilder; elem : TFhirClinicalImpression);
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
    procedure ComposeCodeSystemFilter(xml : TXmlBuilder; name : string; elem : TFhirCodeSystemFilter);
    procedure ComposeCodeSystemFilterChildren(xml : TXmlBuilder; elem : TFhirCodeSystemFilter);
    procedure ComposeCodeSystemProperty(xml : TXmlBuilder; name : string; elem : TFhirCodeSystemProperty);
    procedure ComposeCodeSystemPropertyChildren(xml : TXmlBuilder; elem : TFhirCodeSystemProperty);
    procedure ComposeCodeSystemConcept(xml : TXmlBuilder; name : string; elem : TFhirCodeSystemConcept);
    procedure ComposeCodeSystemConceptChildren(xml : TXmlBuilder; elem : TFhirCodeSystemConcept);
    procedure ComposeCodeSystemConceptDesignation(xml : TXmlBuilder; name : string; elem : TFhirCodeSystemConceptDesignation);
    procedure ComposeCodeSystemConceptDesignationChildren(xml : TXmlBuilder; elem : TFhirCodeSystemConceptDesignation);
    procedure ComposeCodeSystemConceptProperty(xml : TXmlBuilder; name : string; elem : TFhirCodeSystemConceptProperty);
    procedure ComposeCodeSystemConceptPropertyChildren(xml : TXmlBuilder; elem : TFhirCodeSystemConceptProperty);
    procedure ComposeCodeSystem(xml : TXmlBuilder; name : string; elem : TFhirCodeSystem);
    procedure ComposeCodeSystemChildren(xml : TXmlBuilder; elem : TFhirCodeSystem);
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
    procedure ComposeCommunicationPayload(xml : TXmlBuilder; name : string; elem : TFhirCommunicationPayload);
    procedure ComposeCommunicationPayloadChildren(xml : TXmlBuilder; elem : TFhirCommunicationPayload);
    procedure ComposeCommunication(xml : TXmlBuilder; name : string; elem : TFhirCommunication);
    procedure ComposeCommunicationChildren(xml : TXmlBuilder; elem : TFhirCommunication);
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
    procedure ComposeCommunicationRequestPayload(xml : TXmlBuilder; name : string; elem : TFhirCommunicationRequestPayload);
    procedure ComposeCommunicationRequestPayloadChildren(xml : TXmlBuilder; elem : TFhirCommunicationRequestPayload);
    procedure ComposeCommunicationRequest(xml : TXmlBuilder; name : string; elem : TFhirCommunicationRequest);
    procedure ComposeCommunicationRequestChildren(xml : TXmlBuilder; elem : TFhirCommunicationRequest);
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
    procedure ComposeCompartmentDefinitionResource(xml : TXmlBuilder; name : string; elem : TFhirCompartmentDefinitionResource);
    procedure ComposeCompartmentDefinitionResourceChildren(xml : TXmlBuilder; elem : TFhirCompartmentDefinitionResource);
    procedure ComposeCompartmentDefinition(xml : TXmlBuilder; name : string; elem : TFhirCompartmentDefinition);
    procedure ComposeCompartmentDefinitionChildren(xml : TXmlBuilder; elem : TFhirCompartmentDefinition);
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
    procedure ComposeCompositionAttester(xml : TXmlBuilder; name : string; elem : TFhirCompositionAttester);
    procedure ComposeCompositionAttesterChildren(xml : TXmlBuilder; elem : TFhirCompositionAttester);
    procedure ComposeCompositionRelatesTo(xml : TXmlBuilder; name : string; elem : TFhirCompositionRelatesTo);
    procedure ComposeCompositionRelatesToChildren(xml : TXmlBuilder; elem : TFhirCompositionRelatesTo);
    procedure ComposeCompositionEvent(xml : TXmlBuilder; name : string; elem : TFhirCompositionEvent);
    procedure ComposeCompositionEventChildren(xml : TXmlBuilder; elem : TFhirCompositionEvent);
    procedure ComposeCompositionSection(xml : TXmlBuilder; name : string; elem : TFhirCompositionSection);
    procedure ComposeCompositionSectionChildren(xml : TXmlBuilder; elem : TFhirCompositionSection);
    procedure ComposeComposition(xml : TXmlBuilder; name : string; elem : TFhirComposition);
    procedure ComposeCompositionChildren(xml : TXmlBuilder; elem : TFhirComposition);
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
    procedure ComposeConceptMapGroup(xml : TXmlBuilder; name : string; elem : TFhirConceptMapGroup);
    procedure ComposeConceptMapGroupChildren(xml : TXmlBuilder; elem : TFhirConceptMapGroup);
    procedure ComposeConceptMapGroupElement(xml : TXmlBuilder; name : string; elem : TFhirConceptMapGroupElement);
    procedure ComposeConceptMapGroupElementChildren(xml : TXmlBuilder; elem : TFhirConceptMapGroupElement);
    procedure ComposeConceptMapGroupElementTarget(xml : TXmlBuilder; name : string; elem : TFhirConceptMapGroupElementTarget);
    procedure ComposeConceptMapGroupElementTargetChildren(xml : TXmlBuilder; elem : TFhirConceptMapGroupElementTarget);
    procedure ComposeConceptMapGroupElementTargetDependsOn(xml : TXmlBuilder; name : string; elem : TFhirConceptMapGroupElementTargetDependsOn);
    procedure ComposeConceptMapGroupElementTargetDependsOnChildren(xml : TXmlBuilder; elem : TFhirConceptMapGroupElementTargetDependsOn);
    procedure ComposeConceptMapGroupUnmapped(xml : TXmlBuilder; name : string; elem : TFhirConceptMapGroupUnmapped);
    procedure ComposeConceptMapGroupUnmappedChildren(xml : TXmlBuilder; elem : TFhirConceptMapGroupUnmapped);
    procedure ComposeConceptMap(xml : TXmlBuilder; name : string; elem : TFhirConceptMap);
    procedure ComposeConceptMapChildren(xml : TXmlBuilder; elem : TFhirConceptMap);
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
    procedure ComposeConditionStage(xml : TXmlBuilder; name : string; elem : TFhirConditionStage);
    procedure ComposeConditionStageChildren(xml : TXmlBuilder; elem : TFhirConditionStage);
    procedure ComposeConditionEvidence(xml : TXmlBuilder; name : string; elem : TFhirConditionEvidence);
    procedure ComposeConditionEvidenceChildren(xml : TXmlBuilder; elem : TFhirConditionEvidence);
    procedure ComposeCondition(xml : TXmlBuilder; name : string; elem : TFhirCondition);
    procedure ComposeConditionChildren(xml : TXmlBuilder; elem : TFhirCondition);
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
    procedure ComposeConsentPolicy(xml : TXmlBuilder; name : string; elem : TFhirConsentPolicy);
    procedure ComposeConsentPolicyChildren(xml : TXmlBuilder; elem : TFhirConsentPolicy);
    procedure ComposeConsentVerification(xml : TXmlBuilder; name : string; elem : TFhirConsentVerification);
    procedure ComposeConsentVerificationChildren(xml : TXmlBuilder; elem : TFhirConsentVerification);
    procedure ComposeConsentProvision(xml : TXmlBuilder; name : string; elem : TFhirConsentProvision);
    procedure ComposeConsentProvisionChildren(xml : TXmlBuilder; elem : TFhirConsentProvision);
    procedure ComposeConsentProvisionActor(xml : TXmlBuilder; name : string; elem : TFhirConsentProvisionActor);
    procedure ComposeConsentProvisionActorChildren(xml : TXmlBuilder; elem : TFhirConsentProvisionActor);
    procedure ComposeConsentProvisionData(xml : TXmlBuilder; name : string; elem : TFhirConsentProvisionData);
    procedure ComposeConsentProvisionDataChildren(xml : TXmlBuilder; elem : TFhirConsentProvisionData);
    procedure ComposeConsent(xml : TXmlBuilder; name : string; elem : TFhirConsent);
    procedure ComposeConsentChildren(xml : TXmlBuilder; elem : TFhirConsent);
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
    procedure ComposeContractContentDefinition(xml : TXmlBuilder; name : string; elem : TFhirContractContentDefinition);
    procedure ComposeContractContentDefinitionChildren(xml : TXmlBuilder; elem : TFhirContractContentDefinition);
    procedure ComposeContractTerm(xml : TXmlBuilder; name : string; elem : TFhirContractTerm);
    procedure ComposeContractTermChildren(xml : TXmlBuilder; elem : TFhirContractTerm);
    procedure ComposeContractTermSecurityLabel(xml : TXmlBuilder; name : string; elem : TFhirContractTermSecurityLabel);
    procedure ComposeContractTermSecurityLabelChildren(xml : TXmlBuilder; elem : TFhirContractTermSecurityLabel);
    procedure ComposeContractTermOffer(xml : TXmlBuilder; name : string; elem : TFhirContractTermOffer);
    procedure ComposeContractTermOfferChildren(xml : TXmlBuilder; elem : TFhirContractTermOffer);
    procedure ComposeContractTermOfferParty(xml : TXmlBuilder; name : string; elem : TFhirContractTermOfferParty);
    procedure ComposeContractTermOfferPartyChildren(xml : TXmlBuilder; elem : TFhirContractTermOfferParty);
    procedure ComposeContractTermOfferAnswer(xml : TXmlBuilder; name : string; elem : TFhirContractTermOfferAnswer);
    procedure ComposeContractTermOfferAnswerChildren(xml : TXmlBuilder; elem : TFhirContractTermOfferAnswer);
    procedure ComposeContractTermAsset(xml : TXmlBuilder; name : string; elem : TFhirContractTermAsset);
    procedure ComposeContractTermAssetChildren(xml : TXmlBuilder; elem : TFhirContractTermAsset);
    procedure ComposeContractTermAssetContext(xml : TXmlBuilder; name : string; elem : TFhirContractTermAssetContext);
    procedure ComposeContractTermAssetContextChildren(xml : TXmlBuilder; elem : TFhirContractTermAssetContext);
    procedure ComposeContractTermAssetValuedItem(xml : TXmlBuilder; name : string; elem : TFhirContractTermAssetValuedItem);
    procedure ComposeContractTermAssetValuedItemChildren(xml : TXmlBuilder; elem : TFhirContractTermAssetValuedItem);
    procedure ComposeContractTermAction(xml : TXmlBuilder; name : string; elem : TFhirContractTermAction);
    procedure ComposeContractTermActionChildren(xml : TXmlBuilder; elem : TFhirContractTermAction);
    procedure ComposeContractTermActionSubject(xml : TXmlBuilder; name : string; elem : TFhirContractTermActionSubject);
    procedure ComposeContractTermActionSubjectChildren(xml : TXmlBuilder; elem : TFhirContractTermActionSubject);
    procedure ComposeContractSigner(xml : TXmlBuilder; name : string; elem : TFhirContractSigner);
    procedure ComposeContractSignerChildren(xml : TXmlBuilder; elem : TFhirContractSigner);
    procedure ComposeContractFriendly(xml : TXmlBuilder; name : string; elem : TFhirContractFriendly);
    procedure ComposeContractFriendlyChildren(xml : TXmlBuilder; elem : TFhirContractFriendly);
    procedure ComposeContractLegal(xml : TXmlBuilder; name : string; elem : TFhirContractLegal);
    procedure ComposeContractLegalChildren(xml : TXmlBuilder; elem : TFhirContractLegal);
    procedure ComposeContractRule(xml : TXmlBuilder; name : string; elem : TFhirContractRule);
    procedure ComposeContractRuleChildren(xml : TXmlBuilder; elem : TFhirContractRule);
    procedure ComposeContract(xml : TXmlBuilder; name : string; elem : TFhirContract);
    procedure ComposeContractChildren(xml : TXmlBuilder; elem : TFhirContract);
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
    procedure ComposeCoverageClass(xml : TXmlBuilder; name : string; elem : TFhirCoverageClass);
    procedure ComposeCoverageClassChildren(xml : TXmlBuilder; elem : TFhirCoverageClass);
    procedure ComposeCoverageCostToBeneficiary(xml : TXmlBuilder; name : string; elem : TFhirCoverageCostToBeneficiary);
    procedure ComposeCoverageCostToBeneficiaryChildren(xml : TXmlBuilder; elem : TFhirCoverageCostToBeneficiary);
    procedure ComposeCoverageCostToBeneficiaryException(xml : TXmlBuilder; name : string; elem : TFhirCoverageCostToBeneficiaryException);
    procedure ComposeCoverageCostToBeneficiaryExceptionChildren(xml : TXmlBuilder; elem : TFhirCoverageCostToBeneficiaryException);
    procedure ComposeCoverage(xml : TXmlBuilder; name : string; elem : TFhirCoverage);
    procedure ComposeCoverageChildren(xml : TXmlBuilder; elem : TFhirCoverage);
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
    procedure ComposeCoverageEligibilityRequestSupportingInfo(xml : TXmlBuilder; name : string; elem : TFhirCoverageEligibilityRequestSupportingInfo);
    procedure ComposeCoverageEligibilityRequestSupportingInfoChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityRequestSupportingInfo);
    procedure ComposeCoverageEligibilityRequestInsurance(xml : TXmlBuilder; name : string; elem : TFhirCoverageEligibilityRequestInsurance);
    procedure ComposeCoverageEligibilityRequestInsuranceChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityRequestInsurance);
    procedure ComposeCoverageEligibilityRequestItem(xml : TXmlBuilder; name : string; elem : TFhirCoverageEligibilityRequestItem);
    procedure ComposeCoverageEligibilityRequestItemChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityRequestItem);
    procedure ComposeCoverageEligibilityRequestItemDiagnosis(xml : TXmlBuilder; name : string; elem : TFhirCoverageEligibilityRequestItemDiagnosis);
    procedure ComposeCoverageEligibilityRequestItemDiagnosisChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityRequestItemDiagnosis);
    procedure ComposeCoverageEligibilityRequest(xml : TXmlBuilder; name : string; elem : TFhirCoverageEligibilityRequest);
    procedure ComposeCoverageEligibilityRequestChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityRequest);
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
    procedure ComposeCoverageEligibilityResponseInsurance(xml : TXmlBuilder; name : string; elem : TFhirCoverageEligibilityResponseInsurance);
    procedure ComposeCoverageEligibilityResponseInsuranceChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityResponseInsurance);
    procedure ComposeCoverageEligibilityResponseInsuranceItem(xml : TXmlBuilder; name : string; elem : TFhirCoverageEligibilityResponseInsuranceItem);
    procedure ComposeCoverageEligibilityResponseInsuranceItemChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityResponseInsuranceItem);
    procedure ComposeCoverageEligibilityResponseInsuranceItemBenefit(xml : TXmlBuilder; name : string; elem : TFhirCoverageEligibilityResponseInsuranceItemBenefit);
    procedure ComposeCoverageEligibilityResponseInsuranceItemBenefitChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityResponseInsuranceItemBenefit);
    procedure ComposeCoverageEligibilityResponseError(xml : TXmlBuilder; name : string; elem : TFhirCoverageEligibilityResponseError);
    procedure ComposeCoverageEligibilityResponseErrorChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityResponseError);
    procedure ComposeCoverageEligibilityResponse(xml : TXmlBuilder; name : string; elem : TFhirCoverageEligibilityResponse);
    procedure ComposeCoverageEligibilityResponseChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityResponse);
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
    procedure ComposeDetectedIssueEvidence(xml : TXmlBuilder; name : string; elem : TFhirDetectedIssueEvidence);
    procedure ComposeDetectedIssueEvidenceChildren(xml : TXmlBuilder; elem : TFhirDetectedIssueEvidence);
    procedure ComposeDetectedIssueMitigation(xml : TXmlBuilder; name : string; elem : TFhirDetectedIssueMitigation);
    procedure ComposeDetectedIssueMitigationChildren(xml : TXmlBuilder; elem : TFhirDetectedIssueMitigation);
    procedure ComposeDetectedIssue(xml : TXmlBuilder; name : string; elem : TFhirDetectedIssue);
    procedure ComposeDetectedIssueChildren(xml : TXmlBuilder; elem : TFhirDetectedIssue);
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
    procedure ComposeDeviceUdiCarrier(xml : TXmlBuilder; name : string; elem : TFhirDeviceUdiCarrier);
    procedure ComposeDeviceUdiCarrierChildren(xml : TXmlBuilder; elem : TFhirDeviceUdiCarrier);
    procedure ComposeDeviceDeviceName(xml : TXmlBuilder; name : string; elem : TFhirDeviceDeviceName);
    procedure ComposeDeviceDeviceNameChildren(xml : TXmlBuilder; elem : TFhirDeviceDeviceName);
    procedure ComposeDeviceSpecialization(xml : TXmlBuilder; name : string; elem : TFhirDeviceSpecialization);
    procedure ComposeDeviceSpecializationChildren(xml : TXmlBuilder; elem : TFhirDeviceSpecialization);
    procedure ComposeDeviceVersion(xml : TXmlBuilder; name : string; elem : TFhirDeviceVersion);
    procedure ComposeDeviceVersionChildren(xml : TXmlBuilder; elem : TFhirDeviceVersion);
    procedure ComposeDeviceProperty(xml : TXmlBuilder; name : string; elem : TFhirDeviceProperty);
    procedure ComposeDevicePropertyChildren(xml : TXmlBuilder; elem : TFhirDeviceProperty);
    procedure ComposeDevice(xml : TXmlBuilder; name : string; elem : TFhirDevice);
    procedure ComposeDeviceChildren(xml : TXmlBuilder; elem : TFhirDevice);
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
    procedure ComposeDeviceDefinitionUdiDeviceIdentifier(xml : TXmlBuilder; name : string; elem : TFhirDeviceDefinitionUdiDeviceIdentifier);
    procedure ComposeDeviceDefinitionUdiDeviceIdentifierChildren(xml : TXmlBuilder; elem : TFhirDeviceDefinitionUdiDeviceIdentifier);
    procedure ComposeDeviceDefinitionDeviceName(xml : TXmlBuilder; name : string; elem : TFhirDeviceDefinitionDeviceName);
    procedure ComposeDeviceDefinitionDeviceNameChildren(xml : TXmlBuilder; elem : TFhirDeviceDefinitionDeviceName);
    procedure ComposeDeviceDefinitionSpecialization(xml : TXmlBuilder; name : string; elem : TFhirDeviceDefinitionSpecialization);
    procedure ComposeDeviceDefinitionSpecializationChildren(xml : TXmlBuilder; elem : TFhirDeviceDefinitionSpecialization);
    procedure ComposeDeviceDefinitionCapability(xml : TXmlBuilder; name : string; elem : TFhirDeviceDefinitionCapability);
    procedure ComposeDeviceDefinitionCapabilityChildren(xml : TXmlBuilder; elem : TFhirDeviceDefinitionCapability);
    procedure ComposeDeviceDefinitionProperty(xml : TXmlBuilder; name : string; elem : TFhirDeviceDefinitionProperty);
    procedure ComposeDeviceDefinitionPropertyChildren(xml : TXmlBuilder; elem : TFhirDeviceDefinitionProperty);
    procedure ComposeDeviceDefinitionMaterial(xml : TXmlBuilder; name : string; elem : TFhirDeviceDefinitionMaterial);
    procedure ComposeDeviceDefinitionMaterialChildren(xml : TXmlBuilder; elem : TFhirDeviceDefinitionMaterial);
    procedure ComposeDeviceDefinition(xml : TXmlBuilder; name : string; elem : TFhirDeviceDefinition);
    procedure ComposeDeviceDefinitionChildren(xml : TXmlBuilder; elem : TFhirDeviceDefinition);
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
    procedure ComposeDeviceMetricCalibration(xml : TXmlBuilder; name : string; elem : TFhirDeviceMetricCalibration);
    procedure ComposeDeviceMetricCalibrationChildren(xml : TXmlBuilder; elem : TFhirDeviceMetricCalibration);
    procedure ComposeDeviceMetric(xml : TXmlBuilder; name : string; elem : TFhirDeviceMetric);
    procedure ComposeDeviceMetricChildren(xml : TXmlBuilder; elem : TFhirDeviceMetric);
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
    procedure ComposeDeviceRequestParameter(xml : TXmlBuilder; name : string; elem : TFhirDeviceRequestParameter);
    procedure ComposeDeviceRequestParameterChildren(xml : TXmlBuilder; elem : TFhirDeviceRequestParameter);
    procedure ComposeDeviceRequest(xml : TXmlBuilder; name : string; elem : TFhirDeviceRequest);
    procedure ComposeDeviceRequestChildren(xml : TXmlBuilder; elem : TFhirDeviceRequest);
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
    procedure ComposeDeviceUseStatement(xml : TXmlBuilder; name : string; elem : TFhirDeviceUseStatement);
    procedure ComposeDeviceUseStatementChildren(xml : TXmlBuilder; elem : TFhirDeviceUseStatement);
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
    procedure ComposeDiagnosticReportMedia(xml : TXmlBuilder; name : string; elem : TFhirDiagnosticReportMedia);
    procedure ComposeDiagnosticReportMediaChildren(xml : TXmlBuilder; elem : TFhirDiagnosticReportMedia);
    procedure ComposeDiagnosticReport(xml : TXmlBuilder; name : string; elem : TFhirDiagnosticReport);
    procedure ComposeDiagnosticReportChildren(xml : TXmlBuilder; elem : TFhirDiagnosticReport);
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
    procedure ComposeDocumentManifestRelated(xml : TXmlBuilder; name : string; elem : TFhirDocumentManifestRelated);
    procedure ComposeDocumentManifestRelatedChildren(xml : TXmlBuilder; elem : TFhirDocumentManifestRelated);
    procedure ComposeDocumentManifest(xml : TXmlBuilder; name : string; elem : TFhirDocumentManifest);
    procedure ComposeDocumentManifestChildren(xml : TXmlBuilder; elem : TFhirDocumentManifest);
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
    procedure ComposeDocumentReferenceRelatesTo(xml : TXmlBuilder; name : string; elem : TFhirDocumentReferenceRelatesTo);
    procedure ComposeDocumentReferenceRelatesToChildren(xml : TXmlBuilder; elem : TFhirDocumentReferenceRelatesTo);
    procedure ComposeDocumentReferenceContent(xml : TXmlBuilder; name : string; elem : TFhirDocumentReferenceContent);
    procedure ComposeDocumentReferenceContentChildren(xml : TXmlBuilder; elem : TFhirDocumentReferenceContent);
    procedure ComposeDocumentReferenceContext(xml : TXmlBuilder; name : string; elem : TFhirDocumentReferenceContext);
    procedure ComposeDocumentReferenceContextChildren(xml : TXmlBuilder; elem : TFhirDocumentReferenceContext);
    procedure ComposeDocumentReference(xml : TXmlBuilder; name : string; elem : TFhirDocumentReference);
    procedure ComposeDocumentReferenceChildren(xml : TXmlBuilder; elem : TFhirDocumentReference);
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_EFFECTEVIDENCESYNTHESIS}
    procedure ComposeEffectEvidenceSynthesisSampleSize(xml : TXmlBuilder; name : string; elem : TFhirEffectEvidenceSynthesisSampleSize);
    procedure ComposeEffectEvidenceSynthesisSampleSizeChildren(xml : TXmlBuilder; elem : TFhirEffectEvidenceSynthesisSampleSize);
    procedure ComposeEffectEvidenceSynthesisResultsByExposure(xml : TXmlBuilder; name : string; elem : TFhirEffectEvidenceSynthesisResultsByExposure);
    procedure ComposeEffectEvidenceSynthesisResultsByExposureChildren(xml : TXmlBuilder; elem : TFhirEffectEvidenceSynthesisResultsByExposure);
    procedure ComposeEffectEvidenceSynthesisEffectEstimate(xml : TXmlBuilder; name : string; elem : TFhirEffectEvidenceSynthesisEffectEstimate);
    procedure ComposeEffectEvidenceSynthesisEffectEstimateChildren(xml : TXmlBuilder; elem : TFhirEffectEvidenceSynthesisEffectEstimate);
    procedure ComposeEffectEvidenceSynthesisEffectEstimatePrecisionEstimate(xml : TXmlBuilder; name : string; elem : TFhirEffectEvidenceSynthesisEffectEstimatePrecisionEstimate);
    procedure ComposeEffectEvidenceSynthesisEffectEstimatePrecisionEstimateChildren(xml : TXmlBuilder; elem : TFhirEffectEvidenceSynthesisEffectEstimatePrecisionEstimate);
    procedure ComposeEffectEvidenceSynthesisCertainty(xml : TXmlBuilder; name : string; elem : TFhirEffectEvidenceSynthesisCertainty);
    procedure ComposeEffectEvidenceSynthesisCertaintyChildren(xml : TXmlBuilder; elem : TFhirEffectEvidenceSynthesisCertainty);
    procedure ComposeEffectEvidenceSynthesisCertaintyCertaintySubcomponent(xml : TXmlBuilder; name : string; elem : TFhirEffectEvidenceSynthesisCertaintyCertaintySubcomponent);
    procedure ComposeEffectEvidenceSynthesisCertaintyCertaintySubcomponentChildren(xml : TXmlBuilder; elem : TFhirEffectEvidenceSynthesisCertaintyCertaintySubcomponent);
    procedure ComposeEffectEvidenceSynthesis(xml : TXmlBuilder; name : string; elem : TFhirEffectEvidenceSynthesis);
    procedure ComposeEffectEvidenceSynthesisChildren(xml : TXmlBuilder; elem : TFhirEffectEvidenceSynthesis);
{$ENDIF FHIR_EFFECTEVIDENCESYNTHESIS}
{$IFDEF FHIR_ENCOUNTER}
    procedure ComposeEncounterStatusHistory(xml : TXmlBuilder; name : string; elem : TFhirEncounterStatusHistory);
    procedure ComposeEncounterStatusHistoryChildren(xml : TXmlBuilder; elem : TFhirEncounterStatusHistory);
    procedure ComposeEncounterClassHistory(xml : TXmlBuilder; name : string; elem : TFhirEncounterClassHistory);
    procedure ComposeEncounterClassHistoryChildren(xml : TXmlBuilder; elem : TFhirEncounterClassHistory);
    procedure ComposeEncounterParticipant(xml : TXmlBuilder; name : string; elem : TFhirEncounterParticipant);
    procedure ComposeEncounterParticipantChildren(xml : TXmlBuilder; elem : TFhirEncounterParticipant);
    procedure ComposeEncounterDiagnosis(xml : TXmlBuilder; name : string; elem : TFhirEncounterDiagnosis);
    procedure ComposeEncounterDiagnosisChildren(xml : TXmlBuilder; elem : TFhirEncounterDiagnosis);
    procedure ComposeEncounterHospitalization(xml : TXmlBuilder; name : string; elem : TFhirEncounterHospitalization);
    procedure ComposeEncounterHospitalizationChildren(xml : TXmlBuilder; elem : TFhirEncounterHospitalization);
    procedure ComposeEncounterLocation(xml : TXmlBuilder; name : string; elem : TFhirEncounterLocation);
    procedure ComposeEncounterLocationChildren(xml : TXmlBuilder; elem : TFhirEncounterLocation);
    procedure ComposeEncounter(xml : TXmlBuilder; name : string; elem : TFhirEncounter);
    procedure ComposeEncounterChildren(xml : TXmlBuilder; elem : TFhirEncounter);
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
    procedure ComposeEndpoint(xml : TXmlBuilder; name : string; elem : TFhirEndpoint);
    procedure ComposeEndpointChildren(xml : TXmlBuilder; elem : TFhirEndpoint);
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
    procedure ComposeEnrollmentRequest(xml : TXmlBuilder; name : string; elem : TFhirEnrollmentRequest);
    procedure ComposeEnrollmentRequestChildren(xml : TXmlBuilder; elem : TFhirEnrollmentRequest);
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
    procedure ComposeEnrollmentResponse(xml : TXmlBuilder; name : string; elem : TFhirEnrollmentResponse);
    procedure ComposeEnrollmentResponseChildren(xml : TXmlBuilder; elem : TFhirEnrollmentResponse);
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
    procedure ComposeEpisodeOfCareStatusHistory(xml : TXmlBuilder; name : string; elem : TFhirEpisodeOfCareStatusHistory);
    procedure ComposeEpisodeOfCareStatusHistoryChildren(xml : TXmlBuilder; elem : TFhirEpisodeOfCareStatusHistory);
    procedure ComposeEpisodeOfCareDiagnosis(xml : TXmlBuilder; name : string; elem : TFhirEpisodeOfCareDiagnosis);
    procedure ComposeEpisodeOfCareDiagnosisChildren(xml : TXmlBuilder; elem : TFhirEpisodeOfCareDiagnosis);
    procedure ComposeEpisodeOfCare(xml : TXmlBuilder; name : string; elem : TFhirEpisodeOfCare);
    procedure ComposeEpisodeOfCareChildren(xml : TXmlBuilder; elem : TFhirEpisodeOfCare);
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
    procedure ComposeEventDefinition(xml : TXmlBuilder; name : string; elem : TFhirEventDefinition);
    procedure ComposeEventDefinitionChildren(xml : TXmlBuilder; elem : TFhirEventDefinition);
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
    procedure ComposeEvidence(xml : TXmlBuilder; name : string; elem : TFhirEvidence);
    procedure ComposeEvidenceChildren(xml : TXmlBuilder; elem : TFhirEvidence);
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEVARIABLE}
    procedure ComposeEvidenceVariableCharacteristic(xml : TXmlBuilder; name : string; elem : TFhirEvidenceVariableCharacteristic);
    procedure ComposeEvidenceVariableCharacteristicChildren(xml : TXmlBuilder; elem : TFhirEvidenceVariableCharacteristic);
    procedure ComposeEvidenceVariable(xml : TXmlBuilder; name : string; elem : TFhirEvidenceVariable);
    procedure ComposeEvidenceVariableChildren(xml : TXmlBuilder; elem : TFhirEvidenceVariable);
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
    procedure ComposeExampleScenarioActor(xml : TXmlBuilder; name : string; elem : TFhirExampleScenarioActor);
    procedure ComposeExampleScenarioActorChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioActor);
    procedure ComposeExampleScenarioInstance(xml : TXmlBuilder; name : string; elem : TFhirExampleScenarioInstance);
    procedure ComposeExampleScenarioInstanceChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioInstance);
    procedure ComposeExampleScenarioInstanceVersion(xml : TXmlBuilder; name : string; elem : TFhirExampleScenarioInstanceVersion);
    procedure ComposeExampleScenarioInstanceVersionChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioInstanceVersion);
    procedure ComposeExampleScenarioInstanceContainedInstance(xml : TXmlBuilder; name : string; elem : TFhirExampleScenarioInstanceContainedInstance);
    procedure ComposeExampleScenarioInstanceContainedInstanceChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioInstanceContainedInstance);
    procedure ComposeExampleScenarioProcess(xml : TXmlBuilder; name : string; elem : TFhirExampleScenarioProcess);
    procedure ComposeExampleScenarioProcessChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioProcess);
    procedure ComposeExampleScenarioProcessStep(xml : TXmlBuilder; name : string; elem : TFhirExampleScenarioProcessStep);
    procedure ComposeExampleScenarioProcessStepChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioProcessStep);
    procedure ComposeExampleScenarioProcessStepOperation(xml : TXmlBuilder; name : string; elem : TFhirExampleScenarioProcessStepOperation);
    procedure ComposeExampleScenarioProcessStepOperationChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioProcessStepOperation);
    procedure ComposeExampleScenarioProcessStepAlternative(xml : TXmlBuilder; name : string; elem : TFhirExampleScenarioProcessStepAlternative);
    procedure ComposeExampleScenarioProcessStepAlternativeChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioProcessStepAlternative);
    procedure ComposeExampleScenario(xml : TXmlBuilder; name : string; elem : TFhirExampleScenario);
    procedure ComposeExampleScenarioChildren(xml : TXmlBuilder; elem : TFhirExampleScenario);
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
    procedure ComposeExplanationOfBenefitRelated(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitRelated);
    procedure ComposeExplanationOfBenefitRelatedChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitRelated);
    procedure ComposeExplanationOfBenefitPayee(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitPayee);
    procedure ComposeExplanationOfBenefitPayeeChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitPayee);
    procedure ComposeExplanationOfBenefitCareTeam(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitCareTeam);
    procedure ComposeExplanationOfBenefitCareTeamChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitCareTeam);
    procedure ComposeExplanationOfBenefitSupportingInfo(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitSupportingInfo);
    procedure ComposeExplanationOfBenefitSupportingInfoChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitSupportingInfo);
    procedure ComposeExplanationOfBenefitDiagnosis(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitDiagnosis);
    procedure ComposeExplanationOfBenefitDiagnosisChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitDiagnosis);
    procedure ComposeExplanationOfBenefitProcedure(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitProcedure);
    procedure ComposeExplanationOfBenefitProcedureChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitProcedure);
    procedure ComposeExplanationOfBenefitInsurance(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitInsurance);
    procedure ComposeExplanationOfBenefitInsuranceChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitInsurance);
    procedure ComposeExplanationOfBenefitAccident(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitAccident);
    procedure ComposeExplanationOfBenefitAccidentChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitAccident);
    procedure ComposeExplanationOfBenefitItem(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitItem);
    procedure ComposeExplanationOfBenefitItemChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitItem);
    procedure ComposeExplanationOfBenefitItemAdjudication(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitItemAdjudication);
    procedure ComposeExplanationOfBenefitItemAdjudicationChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitItemAdjudication);
    procedure ComposeExplanationOfBenefitItemDetail(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitItemDetail);
    procedure ComposeExplanationOfBenefitItemDetailChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitItemDetail);
    procedure ComposeExplanationOfBenefitItemDetailSubDetail(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitItemDetailSubDetail);
    procedure ComposeExplanationOfBenefitItemDetailSubDetailChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitItemDetailSubDetail);
    procedure ComposeExplanationOfBenefitAddItem(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitAddItem);
    procedure ComposeExplanationOfBenefitAddItemChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitAddItem);
    procedure ComposeExplanationOfBenefitAddItemDetail(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitAddItemDetail);
    procedure ComposeExplanationOfBenefitAddItemDetailChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitAddItemDetail);
    procedure ComposeExplanationOfBenefitAddItemDetailSubDetail(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitAddItemDetailSubDetail);
    procedure ComposeExplanationOfBenefitAddItemDetailSubDetailChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitAddItemDetailSubDetail);
    procedure ComposeExplanationOfBenefitTotal(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitTotal);
    procedure ComposeExplanationOfBenefitTotalChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitTotal);
    procedure ComposeExplanationOfBenefitPayment(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitPayment);
    procedure ComposeExplanationOfBenefitPaymentChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitPayment);
    procedure ComposeExplanationOfBenefitProcessNote(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitProcessNote);
    procedure ComposeExplanationOfBenefitProcessNoteChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitProcessNote);
    procedure ComposeExplanationOfBenefitBenefitBalance(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitBenefitBalance);
    procedure ComposeExplanationOfBenefitBenefitBalanceChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitBenefitBalance);
    procedure ComposeExplanationOfBenefitBenefitBalanceFinancial(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefitBenefitBalanceFinancial);
    procedure ComposeExplanationOfBenefitBenefitBalanceFinancialChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitBenefitBalanceFinancial);
    procedure ComposeExplanationOfBenefit(xml : TXmlBuilder; name : string; elem : TFhirExplanationOfBenefit);
    procedure ComposeExplanationOfBenefitChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefit);
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
    procedure ComposeFamilyMemberHistoryCondition(xml : TXmlBuilder; name : string; elem : TFhirFamilyMemberHistoryCondition);
    procedure ComposeFamilyMemberHistoryConditionChildren(xml : TXmlBuilder; elem : TFhirFamilyMemberHistoryCondition);
    procedure ComposeFamilyMemberHistory(xml : TXmlBuilder; name : string; elem : TFhirFamilyMemberHistory);
    procedure ComposeFamilyMemberHistoryChildren(xml : TXmlBuilder; elem : TFhirFamilyMemberHistory);
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
    procedure ComposeFlag(xml : TXmlBuilder; name : string; elem : TFhirFlag);
    procedure ComposeFlagChildren(xml : TXmlBuilder; elem : TFhirFlag);
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
    procedure ComposeGoalTarget(xml : TXmlBuilder; name : string; elem : TFhirGoalTarget);
    procedure ComposeGoalTargetChildren(xml : TXmlBuilder; elem : TFhirGoalTarget);
    procedure ComposeGoal(xml : TXmlBuilder; name : string; elem : TFhirGoal);
    procedure ComposeGoalChildren(xml : TXmlBuilder; elem : TFhirGoal);
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
    procedure ComposeGraphDefinitionLink(xml : TXmlBuilder; name : string; elem : TFhirGraphDefinitionLink);
    procedure ComposeGraphDefinitionLinkChildren(xml : TXmlBuilder; elem : TFhirGraphDefinitionLink);
    procedure ComposeGraphDefinitionLinkTarget(xml : TXmlBuilder; name : string; elem : TFhirGraphDefinitionLinkTarget);
    procedure ComposeGraphDefinitionLinkTargetChildren(xml : TXmlBuilder; elem : TFhirGraphDefinitionLinkTarget);
    procedure ComposeGraphDefinitionLinkTargetCompartment(xml : TXmlBuilder; name : string; elem : TFhirGraphDefinitionLinkTargetCompartment);
    procedure ComposeGraphDefinitionLinkTargetCompartmentChildren(xml : TXmlBuilder; elem : TFhirGraphDefinitionLinkTargetCompartment);
    procedure ComposeGraphDefinition(xml : TXmlBuilder; name : string; elem : TFhirGraphDefinition);
    procedure ComposeGraphDefinitionChildren(xml : TXmlBuilder; elem : TFhirGraphDefinition);
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
    procedure ComposeGroupCharacteristic(xml : TXmlBuilder; name : string; elem : TFhirGroupCharacteristic);
    procedure ComposeGroupCharacteristicChildren(xml : TXmlBuilder; elem : TFhirGroupCharacteristic);
    procedure ComposeGroupMember(xml : TXmlBuilder; name : string; elem : TFhirGroupMember);
    procedure ComposeGroupMemberChildren(xml : TXmlBuilder; elem : TFhirGroupMember);
    procedure ComposeGroup(xml : TXmlBuilder; name : string; elem : TFhirGroup);
    procedure ComposeGroupChildren(xml : TXmlBuilder; elem : TFhirGroup);
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
    procedure ComposeGuidanceResponse(xml : TXmlBuilder; name : string; elem : TFhirGuidanceResponse);
    procedure ComposeGuidanceResponseChildren(xml : TXmlBuilder; elem : TFhirGuidanceResponse);
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
    procedure ComposeHealthcareServiceEligibility(xml : TXmlBuilder; name : string; elem : TFhirHealthcareServiceEligibility);
    procedure ComposeHealthcareServiceEligibilityChildren(xml : TXmlBuilder; elem : TFhirHealthcareServiceEligibility);
    procedure ComposeHealthcareServiceAvailableTime(xml : TXmlBuilder; name : string; elem : TFhirHealthcareServiceAvailableTime);
    procedure ComposeHealthcareServiceAvailableTimeChildren(xml : TXmlBuilder; elem : TFhirHealthcareServiceAvailableTime);
    procedure ComposeHealthcareServiceNotAvailable(xml : TXmlBuilder; name : string; elem : TFhirHealthcareServiceNotAvailable);
    procedure ComposeHealthcareServiceNotAvailableChildren(xml : TXmlBuilder; elem : TFhirHealthcareServiceNotAvailable);
    procedure ComposeHealthcareService(xml : TXmlBuilder; name : string; elem : TFhirHealthcareService);
    procedure ComposeHealthcareServiceChildren(xml : TXmlBuilder; elem : TFhirHealthcareService);
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
    procedure ComposeImagingStudySeries(xml : TXmlBuilder; name : string; elem : TFhirImagingStudySeries);
    procedure ComposeImagingStudySeriesChildren(xml : TXmlBuilder; elem : TFhirImagingStudySeries);
    procedure ComposeImagingStudySeriesPerformer(xml : TXmlBuilder; name : string; elem : TFhirImagingStudySeriesPerformer);
    procedure ComposeImagingStudySeriesPerformerChildren(xml : TXmlBuilder; elem : TFhirImagingStudySeriesPerformer);
    procedure ComposeImagingStudySeriesInstance(xml : TXmlBuilder; name : string; elem : TFhirImagingStudySeriesInstance);
    procedure ComposeImagingStudySeriesInstanceChildren(xml : TXmlBuilder; elem : TFhirImagingStudySeriesInstance);
    procedure ComposeImagingStudy(xml : TXmlBuilder; name : string; elem : TFhirImagingStudy);
    procedure ComposeImagingStudyChildren(xml : TXmlBuilder; elem : TFhirImagingStudy);
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
    procedure ComposeImmunizationPerformer(xml : TXmlBuilder; name : string; elem : TFhirImmunizationPerformer);
    procedure ComposeImmunizationPerformerChildren(xml : TXmlBuilder; elem : TFhirImmunizationPerformer);
    procedure ComposeImmunizationEducation(xml : TXmlBuilder; name : string; elem : TFhirImmunizationEducation);
    procedure ComposeImmunizationEducationChildren(xml : TXmlBuilder; elem : TFhirImmunizationEducation);
    procedure ComposeImmunizationReaction(xml : TXmlBuilder; name : string; elem : TFhirImmunizationReaction);
    procedure ComposeImmunizationReactionChildren(xml : TXmlBuilder; elem : TFhirImmunizationReaction);
    procedure ComposeImmunizationProtocolApplied(xml : TXmlBuilder; name : string; elem : TFhirImmunizationProtocolApplied);
    procedure ComposeImmunizationProtocolAppliedChildren(xml : TXmlBuilder; elem : TFhirImmunizationProtocolApplied);
    procedure ComposeImmunization(xml : TXmlBuilder; name : string; elem : TFhirImmunization);
    procedure ComposeImmunizationChildren(xml : TXmlBuilder; elem : TFhirImmunization);
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
    procedure ComposeImmunizationEvaluation(xml : TXmlBuilder; name : string; elem : TFhirImmunizationEvaluation);
    procedure ComposeImmunizationEvaluationChildren(xml : TXmlBuilder; elem : TFhirImmunizationEvaluation);
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
    procedure ComposeImmunizationRecommendationRecommendation(xml : TXmlBuilder; name : string; elem : TFhirImmunizationRecommendationRecommendation);
    procedure ComposeImmunizationRecommendationRecommendationChildren(xml : TXmlBuilder; elem : TFhirImmunizationRecommendationRecommendation);
    procedure ComposeImmunizationRecommendationRecommendationDateCriterion(xml : TXmlBuilder; name : string; elem : TFhirImmunizationRecommendationRecommendationDateCriterion);
    procedure ComposeImmunizationRecommendationRecommendationDateCriterionChildren(xml : TXmlBuilder; elem : TFhirImmunizationRecommendationRecommendationDateCriterion);
    procedure ComposeImmunizationRecommendation(xml : TXmlBuilder; name : string; elem : TFhirImmunizationRecommendation);
    procedure ComposeImmunizationRecommendationChildren(xml : TXmlBuilder; elem : TFhirImmunizationRecommendation);
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
    procedure ComposeImplementationGuideDependsOn(xml : TXmlBuilder; name : string; elem : TFhirImplementationGuideDependsOn);
    procedure ComposeImplementationGuideDependsOnChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideDependsOn);
    procedure ComposeImplementationGuideGlobal(xml : TXmlBuilder; name : string; elem : TFhirImplementationGuideGlobal);
    procedure ComposeImplementationGuideGlobalChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideGlobal);
    procedure ComposeImplementationGuideDefinition(xml : TXmlBuilder; name : string; elem : TFhirImplementationGuideDefinition);
    procedure ComposeImplementationGuideDefinitionChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideDefinition);
    procedure ComposeImplementationGuideDefinitionGrouping(xml : TXmlBuilder; name : string; elem : TFhirImplementationGuideDefinitionGrouping);
    procedure ComposeImplementationGuideDefinitionGroupingChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideDefinitionGrouping);
    procedure ComposeImplementationGuideDefinitionResource(xml : TXmlBuilder; name : string; elem : TFhirImplementationGuideDefinitionResource);
    procedure ComposeImplementationGuideDefinitionResourceChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideDefinitionResource);
    procedure ComposeImplementationGuideDefinitionPage(xml : TXmlBuilder; name : string; elem : TFhirImplementationGuideDefinitionPage);
    procedure ComposeImplementationGuideDefinitionPageChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideDefinitionPage);
    procedure ComposeImplementationGuideDefinitionParameter(xml : TXmlBuilder; name : string; elem : TFhirImplementationGuideDefinitionParameter);
    procedure ComposeImplementationGuideDefinitionParameterChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideDefinitionParameter);
    procedure ComposeImplementationGuideDefinitionTemplate(xml : TXmlBuilder; name : string; elem : TFhirImplementationGuideDefinitionTemplate);
    procedure ComposeImplementationGuideDefinitionTemplateChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideDefinitionTemplate);
    procedure ComposeImplementationGuideManifest(xml : TXmlBuilder; name : string; elem : TFhirImplementationGuideManifest);
    procedure ComposeImplementationGuideManifestChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideManifest);
    procedure ComposeImplementationGuideManifestResource(xml : TXmlBuilder; name : string; elem : TFhirImplementationGuideManifestResource);
    procedure ComposeImplementationGuideManifestResourceChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideManifestResource);
    procedure ComposeImplementationGuideManifestPage(xml : TXmlBuilder; name : string; elem : TFhirImplementationGuideManifestPage);
    procedure ComposeImplementationGuideManifestPageChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideManifestPage);
    procedure ComposeImplementationGuide(xml : TXmlBuilder; name : string; elem : TFhirImplementationGuide);
    procedure ComposeImplementationGuideChildren(xml : TXmlBuilder; elem : TFhirImplementationGuide);
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INSURANCEPLAN}
    procedure ComposeInsurancePlanContact(xml : TXmlBuilder; name : string; elem : TFhirInsurancePlanContact);
    procedure ComposeInsurancePlanContactChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanContact);
    procedure ComposeInsurancePlanCoverage(xml : TXmlBuilder; name : string; elem : TFhirInsurancePlanCoverage);
    procedure ComposeInsurancePlanCoverageChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanCoverage);
    procedure ComposeInsurancePlanCoverageBenefit(xml : TXmlBuilder; name : string; elem : TFhirInsurancePlanCoverageBenefit);
    procedure ComposeInsurancePlanCoverageBenefitChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanCoverageBenefit);
    procedure ComposeInsurancePlanCoverageBenefitLimit(xml : TXmlBuilder; name : string; elem : TFhirInsurancePlanCoverageBenefitLimit);
    procedure ComposeInsurancePlanCoverageBenefitLimitChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanCoverageBenefitLimit);
    procedure ComposeInsurancePlanPlan(xml : TXmlBuilder; name : string; elem : TFhirInsurancePlanPlan);
    procedure ComposeInsurancePlanPlanChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanPlan);
    procedure ComposeInsurancePlanPlanGeneralCost(xml : TXmlBuilder; name : string; elem : TFhirInsurancePlanPlanGeneralCost);
    procedure ComposeInsurancePlanPlanGeneralCostChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanPlanGeneralCost);
    procedure ComposeInsurancePlanPlanSpecificCost(xml : TXmlBuilder; name : string; elem : TFhirInsurancePlanPlanSpecificCost);
    procedure ComposeInsurancePlanPlanSpecificCostChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanPlanSpecificCost);
    procedure ComposeInsurancePlanPlanSpecificCostBenefit(xml : TXmlBuilder; name : string; elem : TFhirInsurancePlanPlanSpecificCostBenefit);
    procedure ComposeInsurancePlanPlanSpecificCostBenefitChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanPlanSpecificCostBenefit);
    procedure ComposeInsurancePlanPlanSpecificCostBenefitCost(xml : TXmlBuilder; name : string; elem : TFhirInsurancePlanPlanSpecificCostBenefitCost);
    procedure ComposeInsurancePlanPlanSpecificCostBenefitCostChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanPlanSpecificCostBenefitCost);
    procedure ComposeInsurancePlan(xml : TXmlBuilder; name : string; elem : TFhirInsurancePlan);
    procedure ComposeInsurancePlanChildren(xml : TXmlBuilder; elem : TFhirInsurancePlan);
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
    procedure ComposeInvoiceParticipant(xml : TXmlBuilder; name : string; elem : TFhirInvoiceParticipant);
    procedure ComposeInvoiceParticipantChildren(xml : TXmlBuilder; elem : TFhirInvoiceParticipant);
    procedure ComposeInvoiceLineItem(xml : TXmlBuilder; name : string; elem : TFhirInvoiceLineItem);
    procedure ComposeInvoiceLineItemChildren(xml : TXmlBuilder; elem : TFhirInvoiceLineItem);
    procedure ComposeInvoiceLineItemPriceComponent(xml : TXmlBuilder; name : string; elem : TFhirInvoiceLineItemPriceComponent);
    procedure ComposeInvoiceLineItemPriceComponentChildren(xml : TXmlBuilder; elem : TFhirInvoiceLineItemPriceComponent);
    procedure ComposeInvoice(xml : TXmlBuilder; name : string; elem : TFhirInvoice);
    procedure ComposeInvoiceChildren(xml : TXmlBuilder; elem : TFhirInvoice);
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
    procedure ComposeLibrary(xml : TXmlBuilder; name : string; elem : TFhirLibrary);
    procedure ComposeLibraryChildren(xml : TXmlBuilder; elem : TFhirLibrary);
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
    procedure ComposeLinkageItem(xml : TXmlBuilder; name : string; elem : TFhirLinkageItem);
    procedure ComposeLinkageItemChildren(xml : TXmlBuilder; elem : TFhirLinkageItem);
    procedure ComposeLinkage(xml : TXmlBuilder; name : string; elem : TFhirLinkage);
    procedure ComposeLinkageChildren(xml : TXmlBuilder; elem : TFhirLinkage);
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
    procedure ComposeListEntry(xml : TXmlBuilder; name : string; elem : TFhirListEntry);
    procedure ComposeListEntryChildren(xml : TXmlBuilder; elem : TFhirListEntry);
    procedure ComposeList(xml : TXmlBuilder; name : string; elem : TFhirList);
    procedure ComposeListChildren(xml : TXmlBuilder; elem : TFhirList);
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
    procedure ComposeLocationPosition(xml : TXmlBuilder; name : string; elem : TFhirLocationPosition);
    procedure ComposeLocationPositionChildren(xml : TXmlBuilder; elem : TFhirLocationPosition);
    procedure ComposeLocationHoursOfOperation(xml : TXmlBuilder; name : string; elem : TFhirLocationHoursOfOperation);
    procedure ComposeLocationHoursOfOperationChildren(xml : TXmlBuilder; elem : TFhirLocationHoursOfOperation);
    procedure ComposeLocation(xml : TXmlBuilder; name : string; elem : TFhirLocation);
    procedure ComposeLocationChildren(xml : TXmlBuilder; elem : TFhirLocation);
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
    procedure ComposeMeasureGroup(xml : TXmlBuilder; name : string; elem : TFhirMeasureGroup);
    procedure ComposeMeasureGroupChildren(xml : TXmlBuilder; elem : TFhirMeasureGroup);
    procedure ComposeMeasureGroupPopulation(xml : TXmlBuilder; name : string; elem : TFhirMeasureGroupPopulation);
    procedure ComposeMeasureGroupPopulationChildren(xml : TXmlBuilder; elem : TFhirMeasureGroupPopulation);
    procedure ComposeMeasureGroupStratifier(xml : TXmlBuilder; name : string; elem : TFhirMeasureGroupStratifier);
    procedure ComposeMeasureGroupStratifierChildren(xml : TXmlBuilder; elem : TFhirMeasureGroupStratifier);
    procedure ComposeMeasureGroupStratifierComponent(xml : TXmlBuilder; name : string; elem : TFhirMeasureGroupStratifierComponent);
    procedure ComposeMeasureGroupStratifierComponentChildren(xml : TXmlBuilder; elem : TFhirMeasureGroupStratifierComponent);
    procedure ComposeMeasureSupplementalData(xml : TXmlBuilder; name : string; elem : TFhirMeasureSupplementalData);
    procedure ComposeMeasureSupplementalDataChildren(xml : TXmlBuilder; elem : TFhirMeasureSupplementalData);
    procedure ComposeMeasure(xml : TXmlBuilder; name : string; elem : TFhirMeasure);
    procedure ComposeMeasureChildren(xml : TXmlBuilder; elem : TFhirMeasure);
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
    procedure ComposeMeasureReportGroup(xml : TXmlBuilder; name : string; elem : TFhirMeasureReportGroup);
    procedure ComposeMeasureReportGroupChildren(xml : TXmlBuilder; elem : TFhirMeasureReportGroup);
    procedure ComposeMeasureReportGroupPopulation(xml : TXmlBuilder; name : string; elem : TFhirMeasureReportGroupPopulation);
    procedure ComposeMeasureReportGroupPopulationChildren(xml : TXmlBuilder; elem : TFhirMeasureReportGroupPopulation);
    procedure ComposeMeasureReportGroupStratifier(xml : TXmlBuilder; name : string; elem : TFhirMeasureReportGroupStratifier);
    procedure ComposeMeasureReportGroupStratifierChildren(xml : TXmlBuilder; elem : TFhirMeasureReportGroupStratifier);
    procedure ComposeMeasureReportGroupStratifierStratum(xml : TXmlBuilder; name : string; elem : TFhirMeasureReportGroupStratifierStratum);
    procedure ComposeMeasureReportGroupStratifierStratumChildren(xml : TXmlBuilder; elem : TFhirMeasureReportGroupStratifierStratum);
    procedure ComposeMeasureReportGroupStratifierStratumComponent(xml : TXmlBuilder; name : string; elem : TFhirMeasureReportGroupStratifierStratumComponent);
    procedure ComposeMeasureReportGroupStratifierStratumComponentChildren(xml : TXmlBuilder; elem : TFhirMeasureReportGroupStratifierStratumComponent);
    procedure ComposeMeasureReportGroupStratifierStratumPopulation(xml : TXmlBuilder; name : string; elem : TFhirMeasureReportGroupStratifierStratumPopulation);
    procedure ComposeMeasureReportGroupStratifierStratumPopulationChildren(xml : TXmlBuilder; elem : TFhirMeasureReportGroupStratifierStratumPopulation);
    procedure ComposeMeasureReport(xml : TXmlBuilder; name : string; elem : TFhirMeasureReport);
    procedure ComposeMeasureReportChildren(xml : TXmlBuilder; elem : TFhirMeasureReport);
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
    procedure ComposeMedia(xml : TXmlBuilder; name : string; elem : TFhirMedia);
    procedure ComposeMediaChildren(xml : TXmlBuilder; elem : TFhirMedia);
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
    procedure ComposeMedicationIngredient(xml : TXmlBuilder; name : string; elem : TFhirMedicationIngredient);
    procedure ComposeMedicationIngredientChildren(xml : TXmlBuilder; elem : TFhirMedicationIngredient);
    procedure ComposeMedicationBatch(xml : TXmlBuilder; name : string; elem : TFhirMedicationBatch);
    procedure ComposeMedicationBatchChildren(xml : TXmlBuilder; elem : TFhirMedicationBatch);
    procedure ComposeMedication(xml : TXmlBuilder; name : string; elem : TFhirMedication);
    procedure ComposeMedicationChildren(xml : TXmlBuilder; elem : TFhirMedication);
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
    procedure ComposeMedicationAdministrationPerformer(xml : TXmlBuilder; name : string; elem : TFhirMedicationAdministrationPerformer);
    procedure ComposeMedicationAdministrationPerformerChildren(xml : TXmlBuilder; elem : TFhirMedicationAdministrationPerformer);
    procedure ComposeMedicationAdministrationDosage(xml : TXmlBuilder; name : string; elem : TFhirMedicationAdministrationDosage);
    procedure ComposeMedicationAdministrationDosageChildren(xml : TXmlBuilder; elem : TFhirMedicationAdministrationDosage);
    procedure ComposeMedicationAdministration(xml : TXmlBuilder; name : string; elem : TFhirMedicationAdministration);
    procedure ComposeMedicationAdministrationChildren(xml : TXmlBuilder; elem : TFhirMedicationAdministration);
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
    procedure ComposeMedicationDispensePerformer(xml : TXmlBuilder; name : string; elem : TFhirMedicationDispensePerformer);
    procedure ComposeMedicationDispensePerformerChildren(xml : TXmlBuilder; elem : TFhirMedicationDispensePerformer);
    procedure ComposeMedicationDispenseSubstitution(xml : TXmlBuilder; name : string; elem : TFhirMedicationDispenseSubstitution);
    procedure ComposeMedicationDispenseSubstitutionChildren(xml : TXmlBuilder; elem : TFhirMedicationDispenseSubstitution);
    procedure ComposeMedicationDispense(xml : TXmlBuilder; name : string; elem : TFhirMedicationDispense);
    procedure ComposeMedicationDispenseChildren(xml : TXmlBuilder; elem : TFhirMedicationDispense);
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
    procedure ComposeMedicationKnowledgeRelatedMedicationKnowledge(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeRelatedMedicationKnowledge);
    procedure ComposeMedicationKnowledgeRelatedMedicationKnowledgeChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeRelatedMedicationKnowledge);
    procedure ComposeMedicationKnowledgeMonograph(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeMonograph);
    procedure ComposeMedicationKnowledgeMonographChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeMonograph);
    procedure ComposeMedicationKnowledgeIngredient(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeIngredient);
    procedure ComposeMedicationKnowledgeIngredientChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeIngredient);
    procedure ComposeMedicationKnowledgeCost(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeCost);
    procedure ComposeMedicationKnowledgeCostChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeCost);
    procedure ComposeMedicationKnowledgeMonitoringProgram(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeMonitoringProgram);
    procedure ComposeMedicationKnowledgeMonitoringProgramChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeMonitoringProgram);
    procedure ComposeMedicationKnowledgeAdministrationGuidelines(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeAdministrationGuidelines);
    procedure ComposeMedicationKnowledgeAdministrationGuidelinesChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeAdministrationGuidelines);
    procedure ComposeMedicationKnowledgeAdministrationGuidelinesDosage(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeAdministrationGuidelinesDosage);
    procedure ComposeMedicationKnowledgeAdministrationGuidelinesDosageChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeAdministrationGuidelinesDosage);
    procedure ComposeMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics);
    procedure ComposeMedicationKnowledgeAdministrationGuidelinesPatientCharacteristicsChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics);
    procedure ComposeMedicationKnowledgeMedicineClassification(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeMedicineClassification);
    procedure ComposeMedicationKnowledgeMedicineClassificationChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeMedicineClassification);
    procedure ComposeMedicationKnowledgePackaging(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgePackaging);
    procedure ComposeMedicationKnowledgePackagingChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgePackaging);
    procedure ComposeMedicationKnowledgeDrugCharacteristic(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeDrugCharacteristic);
    procedure ComposeMedicationKnowledgeDrugCharacteristicChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeDrugCharacteristic);
    procedure ComposeMedicationKnowledgeRegulatory(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeRegulatory);
    procedure ComposeMedicationKnowledgeRegulatoryChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeRegulatory);
    procedure ComposeMedicationKnowledgeRegulatorySubstitution(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeRegulatorySubstitution);
    procedure ComposeMedicationKnowledgeRegulatorySubstitutionChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeRegulatorySubstitution);
    procedure ComposeMedicationKnowledgeRegulatorySchedule(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeRegulatorySchedule);
    procedure ComposeMedicationKnowledgeRegulatoryScheduleChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeRegulatorySchedule);
    procedure ComposeMedicationKnowledgeRegulatoryMaxDispense(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeRegulatoryMaxDispense);
    procedure ComposeMedicationKnowledgeRegulatoryMaxDispenseChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeRegulatoryMaxDispense);
    procedure ComposeMedicationKnowledgeKinetics(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledgeKinetics);
    procedure ComposeMedicationKnowledgeKineticsChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeKinetics);
    procedure ComposeMedicationKnowledge(xml : TXmlBuilder; name : string; elem : TFhirMedicationKnowledge);
    procedure ComposeMedicationKnowledgeChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledge);
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
    procedure ComposeMedicationRequestDispenseRequest(xml : TXmlBuilder; name : string; elem : TFhirMedicationRequestDispenseRequest);
    procedure ComposeMedicationRequestDispenseRequestChildren(xml : TXmlBuilder; elem : TFhirMedicationRequestDispenseRequest);
    procedure ComposeMedicationRequestDispenseRequestInitialFill(xml : TXmlBuilder; name : string; elem : TFhirMedicationRequestDispenseRequestInitialFill);
    procedure ComposeMedicationRequestDispenseRequestInitialFillChildren(xml : TXmlBuilder; elem : TFhirMedicationRequestDispenseRequestInitialFill);
    procedure ComposeMedicationRequestSubstitution(xml : TXmlBuilder; name : string; elem : TFhirMedicationRequestSubstitution);
    procedure ComposeMedicationRequestSubstitutionChildren(xml : TXmlBuilder; elem : TFhirMedicationRequestSubstitution);
    procedure ComposeMedicationRequest(xml : TXmlBuilder; name : string; elem : TFhirMedicationRequest);
    procedure ComposeMedicationRequestChildren(xml : TXmlBuilder; elem : TFhirMedicationRequest);
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
    procedure ComposeMedicationStatement(xml : TXmlBuilder; name : string; elem : TFhirMedicationStatement);
    procedure ComposeMedicationStatementChildren(xml : TXmlBuilder; elem : TFhirMedicationStatement);
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCT}
    procedure ComposeMedicinalProductName(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductName);
    procedure ComposeMedicinalProductNameChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductName);
    procedure ComposeMedicinalProductNameNamePart(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductNameNamePart);
    procedure ComposeMedicinalProductNameNamePartChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductNameNamePart);
    procedure ComposeMedicinalProductNameCountryLanguage(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductNameCountryLanguage);
    procedure ComposeMedicinalProductNameCountryLanguageChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductNameCountryLanguage);
    procedure ComposeMedicinalProductManufacturingBusinessOperation(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductManufacturingBusinessOperation);
    procedure ComposeMedicinalProductManufacturingBusinessOperationChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductManufacturingBusinessOperation);
    procedure ComposeMedicinalProductSpecialDesignation(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductSpecialDesignation);
    procedure ComposeMedicinalProductSpecialDesignationChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductSpecialDesignation);
    procedure ComposeMedicinalProduct(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProduct);
    procedure ComposeMedicinalProductChildren(xml : TXmlBuilder; elem : TFhirMedicinalProduct);
{$ENDIF FHIR_MEDICINALPRODUCT}
{$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
    procedure ComposeMedicinalProductAuthorizationJurisdictionalAuthorization(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductAuthorizationJurisdictionalAuthorization);
    procedure ComposeMedicinalProductAuthorizationJurisdictionalAuthorizationChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductAuthorizationJurisdictionalAuthorization);
    procedure ComposeMedicinalProductAuthorizationProcedure(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductAuthorizationProcedure);
    procedure ComposeMedicinalProductAuthorizationProcedureChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductAuthorizationProcedure);
    procedure ComposeMedicinalProductAuthorization(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductAuthorization);
    procedure ComposeMedicinalProductAuthorizationChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductAuthorization);
{$ENDIF FHIR_MEDICINALPRODUCTAUTHORIZATION}
{$IFDEF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
    procedure ComposeMedicinalProductContraindicationOtherTherapy(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductContraindicationOtherTherapy);
    procedure ComposeMedicinalProductContraindicationOtherTherapyChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductContraindicationOtherTherapy);
    procedure ComposeMedicinalProductContraindication(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductContraindication);
    procedure ComposeMedicinalProductContraindicationChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductContraindication);
{$ENDIF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
{$IFDEF FHIR_MEDICINALPRODUCTINDICATION}
    procedure ComposeMedicinalProductIndicationOtherTherapy(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductIndicationOtherTherapy);
    procedure ComposeMedicinalProductIndicationOtherTherapyChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductIndicationOtherTherapy);
    procedure ComposeMedicinalProductIndication(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductIndication);
    procedure ComposeMedicinalProductIndicationChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductIndication);
{$ENDIF FHIR_MEDICINALPRODUCTINDICATION}
{$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
    procedure ComposeMedicinalProductIngredientSpecifiedSubstance(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductIngredientSpecifiedSubstance);
    procedure ComposeMedicinalProductIngredientSpecifiedSubstanceChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductIngredientSpecifiedSubstance);
    procedure ComposeMedicinalProductIngredientSpecifiedSubstanceStrength(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductIngredientSpecifiedSubstanceStrength);
    procedure ComposeMedicinalProductIngredientSpecifiedSubstanceStrengthChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductIngredientSpecifiedSubstanceStrength);
    procedure ComposeMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength);
    procedure ComposeMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength);
    procedure ComposeMedicinalProductIngredientSubstance(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductIngredientSubstance);
    procedure ComposeMedicinalProductIngredientSubstanceChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductIngredientSubstance);
    procedure ComposeMedicinalProductIngredient(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductIngredient);
    procedure ComposeMedicinalProductIngredientChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductIngredient);
{$ENDIF FHIR_MEDICINALPRODUCTINGREDIENT}
{$IFDEF FHIR_MEDICINALPRODUCTINTERACTION}
    procedure ComposeMedicinalProductInteractionInteractant(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductInteractionInteractant);
    procedure ComposeMedicinalProductInteractionInteractantChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductInteractionInteractant);
    procedure ComposeMedicinalProductInteraction(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductInteraction);
    procedure ComposeMedicinalProductInteractionChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductInteraction);
{$ENDIF FHIR_MEDICINALPRODUCTINTERACTION}
{$IFDEF FHIR_MEDICINALPRODUCTMANUFACTURED}
    procedure ComposeMedicinalProductManufactured(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductManufactured);
    procedure ComposeMedicinalProductManufacturedChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductManufactured);
{$ENDIF FHIR_MEDICINALPRODUCTMANUFACTURED}
{$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
    procedure ComposeMedicinalProductPackagedBatchIdentifier(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductPackagedBatchIdentifier);
    procedure ComposeMedicinalProductPackagedBatchIdentifierChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPackagedBatchIdentifier);
    procedure ComposeMedicinalProductPackagedPackageItem(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductPackagedPackageItem);
    procedure ComposeMedicinalProductPackagedPackageItemChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPackagedPackageItem);
    procedure ComposeMedicinalProductPackaged(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductPackaged);
    procedure ComposeMedicinalProductPackagedChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPackaged);
{$ENDIF FHIR_MEDICINALPRODUCTPACKAGED}
{$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
    procedure ComposeMedicinalProductPharmaceuticalCharacteristics(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductPharmaceuticalCharacteristics);
    procedure ComposeMedicinalProductPharmaceuticalCharacteristicsChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPharmaceuticalCharacteristics);
    procedure ComposeMedicinalProductPharmaceuticalRouteOfAdministration(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductPharmaceuticalRouteOfAdministration);
    procedure ComposeMedicinalProductPharmaceuticalRouteOfAdministrationChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPharmaceuticalRouteOfAdministration);
    procedure ComposeMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies);
    procedure ComposeMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies);
    procedure ComposeMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod);
    procedure ComposeMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriodChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod);
    procedure ComposeMedicinalProductPharmaceutical(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductPharmaceutical);
    procedure ComposeMedicinalProductPharmaceuticalChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPharmaceutical);
{$ENDIF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
{$IFDEF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
    procedure ComposeMedicinalProductUndesirableEffect(xml : TXmlBuilder; name : string; elem : TFhirMedicinalProductUndesirableEffect);
    procedure ComposeMedicinalProductUndesirableEffectChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductUndesirableEffect);
{$ENDIF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
{$IFDEF FHIR_MESSAGEDEFINITION}
    procedure ComposeMessageDefinitionFocus(xml : TXmlBuilder; name : string; elem : TFhirMessageDefinitionFocus);
    procedure ComposeMessageDefinitionFocusChildren(xml : TXmlBuilder; elem : TFhirMessageDefinitionFocus);
    procedure ComposeMessageDefinitionAllowedResponse(xml : TXmlBuilder; name : string; elem : TFhirMessageDefinitionAllowedResponse);
    procedure ComposeMessageDefinitionAllowedResponseChildren(xml : TXmlBuilder; elem : TFhirMessageDefinitionAllowedResponse);
    procedure ComposeMessageDefinition(xml : TXmlBuilder; name : string; elem : TFhirMessageDefinition);
    procedure ComposeMessageDefinitionChildren(xml : TXmlBuilder; elem : TFhirMessageDefinition);
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
    procedure ComposeMessageHeaderDestination(xml : TXmlBuilder; name : string; elem : TFhirMessageHeaderDestination);
    procedure ComposeMessageHeaderDestinationChildren(xml : TXmlBuilder; elem : TFhirMessageHeaderDestination);
    procedure ComposeMessageHeaderSource(xml : TXmlBuilder; name : string; elem : TFhirMessageHeaderSource);
    procedure ComposeMessageHeaderSourceChildren(xml : TXmlBuilder; elem : TFhirMessageHeaderSource);
    procedure ComposeMessageHeaderResponse(xml : TXmlBuilder; name : string; elem : TFhirMessageHeaderResponse);
    procedure ComposeMessageHeaderResponseChildren(xml : TXmlBuilder; elem : TFhirMessageHeaderResponse);
    procedure ComposeMessageHeader(xml : TXmlBuilder; name : string; elem : TFhirMessageHeader);
    procedure ComposeMessageHeaderChildren(xml : TXmlBuilder; elem : TFhirMessageHeader);
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
    procedure ComposeMolecularSequenceReferenceSeq(xml : TXmlBuilder; name : string; elem : TFhirMolecularSequenceReferenceSeq);
    procedure ComposeMolecularSequenceReferenceSeqChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceReferenceSeq);
    procedure ComposeMolecularSequenceVariant(xml : TXmlBuilder; name : string; elem : TFhirMolecularSequenceVariant);
    procedure ComposeMolecularSequenceVariantChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceVariant);
    procedure ComposeMolecularSequenceQuality(xml : TXmlBuilder; name : string; elem : TFhirMolecularSequenceQuality);
    procedure ComposeMolecularSequenceQualityChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceQuality);
    procedure ComposeMolecularSequenceQualityRoc(xml : TXmlBuilder; name : string; elem : TFhirMolecularSequenceQualityRoc);
    procedure ComposeMolecularSequenceQualityRocChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceQualityRoc);
    procedure ComposeMolecularSequenceRepository(xml : TXmlBuilder; name : string; elem : TFhirMolecularSequenceRepository);
    procedure ComposeMolecularSequenceRepositoryChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceRepository);
    procedure ComposeMolecularSequenceStructureVariant(xml : TXmlBuilder; name : string; elem : TFhirMolecularSequenceStructureVariant);
    procedure ComposeMolecularSequenceStructureVariantChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceStructureVariant);
    procedure ComposeMolecularSequenceStructureVariantOuter(xml : TXmlBuilder; name : string; elem : TFhirMolecularSequenceStructureVariantOuter);
    procedure ComposeMolecularSequenceStructureVariantOuterChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceStructureVariantOuter);
    procedure ComposeMolecularSequenceStructureVariantInner(xml : TXmlBuilder; name : string; elem : TFhirMolecularSequenceStructureVariantInner);
    procedure ComposeMolecularSequenceStructureVariantInnerChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceStructureVariantInner);
    procedure ComposeMolecularSequence(xml : TXmlBuilder; name : string; elem : TFhirMolecularSequence);
    procedure ComposeMolecularSequenceChildren(xml : TXmlBuilder; elem : TFhirMolecularSequence);
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
    procedure ComposeNamingSystemUniqueId(xml : TXmlBuilder; name : string; elem : TFhirNamingSystemUniqueId);
    procedure ComposeNamingSystemUniqueIdChildren(xml : TXmlBuilder; elem : TFhirNamingSystemUniqueId);
    procedure ComposeNamingSystem(xml : TXmlBuilder; name : string; elem : TFhirNamingSystem);
    procedure ComposeNamingSystemChildren(xml : TXmlBuilder; elem : TFhirNamingSystem);
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
    procedure ComposeNutritionOrderOralDiet(xml : TXmlBuilder; name : string; elem : TFhirNutritionOrderOralDiet);
    procedure ComposeNutritionOrderOralDietChildren(xml : TXmlBuilder; elem : TFhirNutritionOrderOralDiet);
    procedure ComposeNutritionOrderOralDietNutrient(xml : TXmlBuilder; name : string; elem : TFhirNutritionOrderOralDietNutrient);
    procedure ComposeNutritionOrderOralDietNutrientChildren(xml : TXmlBuilder; elem : TFhirNutritionOrderOralDietNutrient);
    procedure ComposeNutritionOrderOralDietTexture(xml : TXmlBuilder; name : string; elem : TFhirNutritionOrderOralDietTexture);
    procedure ComposeNutritionOrderOralDietTextureChildren(xml : TXmlBuilder; elem : TFhirNutritionOrderOralDietTexture);
    procedure ComposeNutritionOrderSupplement(xml : TXmlBuilder; name : string; elem : TFhirNutritionOrderSupplement);
    procedure ComposeNutritionOrderSupplementChildren(xml : TXmlBuilder; elem : TFhirNutritionOrderSupplement);
    procedure ComposeNutritionOrderEnteralFormula(xml : TXmlBuilder; name : string; elem : TFhirNutritionOrderEnteralFormula);
    procedure ComposeNutritionOrderEnteralFormulaChildren(xml : TXmlBuilder; elem : TFhirNutritionOrderEnteralFormula);
    procedure ComposeNutritionOrderEnteralFormulaAdministration(xml : TXmlBuilder; name : string; elem : TFhirNutritionOrderEnteralFormulaAdministration);
    procedure ComposeNutritionOrderEnteralFormulaAdministrationChildren(xml : TXmlBuilder; elem : TFhirNutritionOrderEnteralFormulaAdministration);
    procedure ComposeNutritionOrder(xml : TXmlBuilder; name : string; elem : TFhirNutritionOrder);
    procedure ComposeNutritionOrderChildren(xml : TXmlBuilder; elem : TFhirNutritionOrder);
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
    procedure ComposeObservationReferenceRange(xml : TXmlBuilder; name : string; elem : TFhirObservationReferenceRange);
    procedure ComposeObservationReferenceRangeChildren(xml : TXmlBuilder; elem : TFhirObservationReferenceRange);
    procedure ComposeObservationComponent(xml : TXmlBuilder; name : string; elem : TFhirObservationComponent);
    procedure ComposeObservationComponentChildren(xml : TXmlBuilder; elem : TFhirObservationComponent);
    procedure ComposeObservation(xml : TXmlBuilder; name : string; elem : TFhirObservation);
    procedure ComposeObservationChildren(xml : TXmlBuilder; elem : TFhirObservation);
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
    procedure ComposeObservationDefinitionQuantitativeDetails(xml : TXmlBuilder; name : string; elem : TFhirObservationDefinitionQuantitativeDetails);
    procedure ComposeObservationDefinitionQuantitativeDetailsChildren(xml : TXmlBuilder; elem : TFhirObservationDefinitionQuantitativeDetails);
    procedure ComposeObservationDefinitionQualifiedInterval(xml : TXmlBuilder; name : string; elem : TFhirObservationDefinitionQualifiedInterval);
    procedure ComposeObservationDefinitionQualifiedIntervalChildren(xml : TXmlBuilder; elem : TFhirObservationDefinitionQualifiedInterval);
    procedure ComposeObservationDefinition(xml : TXmlBuilder; name : string; elem : TFhirObservationDefinition);
    procedure ComposeObservationDefinitionChildren(xml : TXmlBuilder; elem : TFhirObservationDefinition);
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
    procedure ComposeOperationDefinitionParameter(xml : TXmlBuilder; name : string; elem : TFhirOperationDefinitionParameter);
    procedure ComposeOperationDefinitionParameterChildren(xml : TXmlBuilder; elem : TFhirOperationDefinitionParameter);
    procedure ComposeOperationDefinitionParameterBinding(xml : TXmlBuilder; name : string; elem : TFhirOperationDefinitionParameterBinding);
    procedure ComposeOperationDefinitionParameterBindingChildren(xml : TXmlBuilder; elem : TFhirOperationDefinitionParameterBinding);
    procedure ComposeOperationDefinitionParameterReferencedFrom(xml : TXmlBuilder; name : string; elem : TFhirOperationDefinitionParameterReferencedFrom);
    procedure ComposeOperationDefinitionParameterReferencedFromChildren(xml : TXmlBuilder; elem : TFhirOperationDefinitionParameterReferencedFrom);
    procedure ComposeOperationDefinitionOverload(xml : TXmlBuilder; name : string; elem : TFhirOperationDefinitionOverload);
    procedure ComposeOperationDefinitionOverloadChildren(xml : TXmlBuilder; elem : TFhirOperationDefinitionOverload);
    procedure ComposeOperationDefinition(xml : TXmlBuilder; name : string; elem : TFhirOperationDefinition);
    procedure ComposeOperationDefinitionChildren(xml : TXmlBuilder; elem : TFhirOperationDefinition);
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
    procedure ComposeOperationOutcomeIssue(xml : TXmlBuilder; name : string; elem : TFhirOperationOutcomeIssue);
    procedure ComposeOperationOutcomeIssueChildren(xml : TXmlBuilder; elem : TFhirOperationOutcomeIssue);
    procedure ComposeOperationOutcome(xml : TXmlBuilder; name : string; elem : TFhirOperationOutcome);
    procedure ComposeOperationOutcomeChildren(xml : TXmlBuilder; elem : TFhirOperationOutcome);
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
    procedure ComposeOrganizationContact(xml : TXmlBuilder; name : string; elem : TFhirOrganizationContact);
    procedure ComposeOrganizationContactChildren(xml : TXmlBuilder; elem : TFhirOrganizationContact);
    procedure ComposeOrganization(xml : TXmlBuilder; name : string; elem : TFhirOrganization);
    procedure ComposeOrganizationChildren(xml : TXmlBuilder; elem : TFhirOrganization);
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
    procedure ComposeOrganizationAffiliation(xml : TXmlBuilder; name : string; elem : TFhirOrganizationAffiliation);
    procedure ComposeOrganizationAffiliationChildren(xml : TXmlBuilder; elem : TFhirOrganizationAffiliation);
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PATIENT}
    procedure ComposePatientContact(xml : TXmlBuilder; name : string; elem : TFhirPatientContact);
    procedure ComposePatientContactChildren(xml : TXmlBuilder; elem : TFhirPatientContact);
    procedure ComposePatientCommunication(xml : TXmlBuilder; name : string; elem : TFhirPatientCommunication);
    procedure ComposePatientCommunicationChildren(xml : TXmlBuilder; elem : TFhirPatientCommunication);
    procedure ComposePatientLink(xml : TXmlBuilder; name : string; elem : TFhirPatientLink);
    procedure ComposePatientLinkChildren(xml : TXmlBuilder; elem : TFhirPatientLink);
    procedure ComposePatient(xml : TXmlBuilder; name : string; elem : TFhirPatient);
    procedure ComposePatientChildren(xml : TXmlBuilder; elem : TFhirPatient);
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
    procedure ComposePaymentNotice(xml : TXmlBuilder; name : string; elem : TFhirPaymentNotice);
    procedure ComposePaymentNoticeChildren(xml : TXmlBuilder; elem : TFhirPaymentNotice);
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
    procedure ComposePaymentReconciliationDetail(xml : TXmlBuilder; name : string; elem : TFhirPaymentReconciliationDetail);
    procedure ComposePaymentReconciliationDetailChildren(xml : TXmlBuilder; elem : TFhirPaymentReconciliationDetail);
    procedure ComposePaymentReconciliationProcessNote(xml : TXmlBuilder; name : string; elem : TFhirPaymentReconciliationProcessNote);
    procedure ComposePaymentReconciliationProcessNoteChildren(xml : TXmlBuilder; elem : TFhirPaymentReconciliationProcessNote);
    procedure ComposePaymentReconciliation(xml : TXmlBuilder; name : string; elem : TFhirPaymentReconciliation);
    procedure ComposePaymentReconciliationChildren(xml : TXmlBuilder; elem : TFhirPaymentReconciliation);
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
    procedure ComposePersonLink(xml : TXmlBuilder; name : string; elem : TFhirPersonLink);
    procedure ComposePersonLinkChildren(xml : TXmlBuilder; elem : TFhirPersonLink);
    procedure ComposePerson(xml : TXmlBuilder; name : string; elem : TFhirPerson);
    procedure ComposePersonChildren(xml : TXmlBuilder; elem : TFhirPerson);
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
    procedure ComposePlanDefinitionGoal(xml : TXmlBuilder; name : string; elem : TFhirPlanDefinitionGoal);
    procedure ComposePlanDefinitionGoalChildren(xml : TXmlBuilder; elem : TFhirPlanDefinitionGoal);
    procedure ComposePlanDefinitionGoalTarget(xml : TXmlBuilder; name : string; elem : TFhirPlanDefinitionGoalTarget);
    procedure ComposePlanDefinitionGoalTargetChildren(xml : TXmlBuilder; elem : TFhirPlanDefinitionGoalTarget);
    procedure ComposePlanDefinitionAction(xml : TXmlBuilder; name : string; elem : TFhirPlanDefinitionAction);
    procedure ComposePlanDefinitionActionChildren(xml : TXmlBuilder; elem : TFhirPlanDefinitionAction);
    procedure ComposePlanDefinitionActionCondition(xml : TXmlBuilder; name : string; elem : TFhirPlanDefinitionActionCondition);
    procedure ComposePlanDefinitionActionConditionChildren(xml : TXmlBuilder; elem : TFhirPlanDefinitionActionCondition);
    procedure ComposePlanDefinitionActionRelatedAction(xml : TXmlBuilder; name : string; elem : TFhirPlanDefinitionActionRelatedAction);
    procedure ComposePlanDefinitionActionRelatedActionChildren(xml : TXmlBuilder; elem : TFhirPlanDefinitionActionRelatedAction);
    procedure ComposePlanDefinitionActionParticipant(xml : TXmlBuilder; name : string; elem : TFhirPlanDefinitionActionParticipant);
    procedure ComposePlanDefinitionActionParticipantChildren(xml : TXmlBuilder; elem : TFhirPlanDefinitionActionParticipant);
    procedure ComposePlanDefinitionActionDynamicValue(xml : TXmlBuilder; name : string; elem : TFhirPlanDefinitionActionDynamicValue);
    procedure ComposePlanDefinitionActionDynamicValueChildren(xml : TXmlBuilder; elem : TFhirPlanDefinitionActionDynamicValue);
    procedure ComposePlanDefinition(xml : TXmlBuilder; name : string; elem : TFhirPlanDefinition);
    procedure ComposePlanDefinitionChildren(xml : TXmlBuilder; elem : TFhirPlanDefinition);
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
    procedure ComposePractitionerQualification(xml : TXmlBuilder; name : string; elem : TFhirPractitionerQualification);
    procedure ComposePractitionerQualificationChildren(xml : TXmlBuilder; elem : TFhirPractitionerQualification);
    procedure ComposePractitioner(xml : TXmlBuilder; name : string; elem : TFhirPractitioner);
    procedure ComposePractitionerChildren(xml : TXmlBuilder; elem : TFhirPractitioner);
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
    procedure ComposePractitionerRoleAvailableTime(xml : TXmlBuilder; name : string; elem : TFhirPractitionerRoleAvailableTime);
    procedure ComposePractitionerRoleAvailableTimeChildren(xml : TXmlBuilder; elem : TFhirPractitionerRoleAvailableTime);
    procedure ComposePractitionerRoleNotAvailable(xml : TXmlBuilder; name : string; elem : TFhirPractitionerRoleNotAvailable);
    procedure ComposePractitionerRoleNotAvailableChildren(xml : TXmlBuilder; elem : TFhirPractitionerRoleNotAvailable);
    procedure ComposePractitionerRole(xml : TXmlBuilder; name : string; elem : TFhirPractitionerRole);
    procedure ComposePractitionerRoleChildren(xml : TXmlBuilder; elem : TFhirPractitionerRole);
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
    procedure ComposeProcedurePerformer(xml : TXmlBuilder; name : string; elem : TFhirProcedurePerformer);
    procedure ComposeProcedurePerformerChildren(xml : TXmlBuilder; elem : TFhirProcedurePerformer);
    procedure ComposeProcedureFocalDevice(xml : TXmlBuilder; name : string; elem : TFhirProcedureFocalDevice);
    procedure ComposeProcedureFocalDeviceChildren(xml : TXmlBuilder; elem : TFhirProcedureFocalDevice);
    procedure ComposeProcedure(xml : TXmlBuilder; name : string; elem : TFhirProcedure);
    procedure ComposeProcedureChildren(xml : TXmlBuilder; elem : TFhirProcedure);
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
    procedure ComposeProvenanceAgent(xml : TXmlBuilder; name : string; elem : TFhirProvenanceAgent);
    procedure ComposeProvenanceAgentChildren(xml : TXmlBuilder; elem : TFhirProvenanceAgent);
    procedure ComposeProvenanceEntity(xml : TXmlBuilder; name : string; elem : TFhirProvenanceEntity);
    procedure ComposeProvenanceEntityChildren(xml : TXmlBuilder; elem : TFhirProvenanceEntity);
    procedure ComposeProvenance(xml : TXmlBuilder; name : string; elem : TFhirProvenance);
    procedure ComposeProvenanceChildren(xml : TXmlBuilder; elem : TFhirProvenance);
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
    procedure ComposeQuestionnaireItem(xml : TXmlBuilder; name : string; elem : TFhirQuestionnaireItem);
    procedure ComposeQuestionnaireItemChildren(xml : TXmlBuilder; elem : TFhirQuestionnaireItem);
    procedure ComposeQuestionnaireItemEnableWhen(xml : TXmlBuilder; name : string; elem : TFhirQuestionnaireItemEnableWhen);
    procedure ComposeQuestionnaireItemEnableWhenChildren(xml : TXmlBuilder; elem : TFhirQuestionnaireItemEnableWhen);
    procedure ComposeQuestionnaireItemAnswerOption(xml : TXmlBuilder; name : string; elem : TFhirQuestionnaireItemAnswerOption);
    procedure ComposeQuestionnaireItemAnswerOptionChildren(xml : TXmlBuilder; elem : TFhirQuestionnaireItemAnswerOption);
    procedure ComposeQuestionnaireItemInitial(xml : TXmlBuilder; name : string; elem : TFhirQuestionnaireItemInitial);
    procedure ComposeQuestionnaireItemInitialChildren(xml : TXmlBuilder; elem : TFhirQuestionnaireItemInitial);
    procedure ComposeQuestionnaire(xml : TXmlBuilder; name : string; elem : TFhirQuestionnaire);
    procedure ComposeQuestionnaireChildren(xml : TXmlBuilder; elem : TFhirQuestionnaire);
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
    procedure ComposeQuestionnaireResponseItem(xml : TXmlBuilder; name : string; elem : TFhirQuestionnaireResponseItem);
    procedure ComposeQuestionnaireResponseItemChildren(xml : TXmlBuilder; elem : TFhirQuestionnaireResponseItem);
    procedure ComposeQuestionnaireResponseItemAnswer(xml : TXmlBuilder; name : string; elem : TFhirQuestionnaireResponseItemAnswer);
    procedure ComposeQuestionnaireResponseItemAnswerChildren(xml : TXmlBuilder; elem : TFhirQuestionnaireResponseItemAnswer);
    procedure ComposeQuestionnaireResponse(xml : TXmlBuilder; name : string; elem : TFhirQuestionnaireResponse);
    procedure ComposeQuestionnaireResponseChildren(xml : TXmlBuilder; elem : TFhirQuestionnaireResponse);
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_RELATEDPERSON}
    procedure ComposeRelatedPersonCommunication(xml : TXmlBuilder; name : string; elem : TFhirRelatedPersonCommunication);
    procedure ComposeRelatedPersonCommunicationChildren(xml : TXmlBuilder; elem : TFhirRelatedPersonCommunication);
    procedure ComposeRelatedPerson(xml : TXmlBuilder; name : string; elem : TFhirRelatedPerson);
    procedure ComposeRelatedPersonChildren(xml : TXmlBuilder; elem : TFhirRelatedPerson);
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
    procedure ComposeRequestGroupAction(xml : TXmlBuilder; name : string; elem : TFhirRequestGroupAction);
    procedure ComposeRequestGroupActionChildren(xml : TXmlBuilder; elem : TFhirRequestGroupAction);
    procedure ComposeRequestGroupActionCondition(xml : TXmlBuilder; name : string; elem : TFhirRequestGroupActionCondition);
    procedure ComposeRequestGroupActionConditionChildren(xml : TXmlBuilder; elem : TFhirRequestGroupActionCondition);
    procedure ComposeRequestGroupActionRelatedAction(xml : TXmlBuilder; name : string; elem : TFhirRequestGroupActionRelatedAction);
    procedure ComposeRequestGroupActionRelatedActionChildren(xml : TXmlBuilder; elem : TFhirRequestGroupActionRelatedAction);
    procedure ComposeRequestGroup(xml : TXmlBuilder; name : string; elem : TFhirRequestGroup);
    procedure ComposeRequestGroupChildren(xml : TXmlBuilder; elem : TFhirRequestGroup);
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHDEFINITION}
    procedure ComposeResearchDefinition(xml : TXmlBuilder; name : string; elem : TFhirResearchDefinition);
    procedure ComposeResearchDefinitionChildren(xml : TXmlBuilder; elem : TFhirResearchDefinition);
{$ENDIF FHIR_RESEARCHDEFINITION}
{$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
    procedure ComposeResearchElementDefinitionCharacteristic(xml : TXmlBuilder; name : string; elem : TFhirResearchElementDefinitionCharacteristic);
    procedure ComposeResearchElementDefinitionCharacteristicChildren(xml : TXmlBuilder; elem : TFhirResearchElementDefinitionCharacteristic);
    procedure ComposeResearchElementDefinition(xml : TXmlBuilder; name : string; elem : TFhirResearchElementDefinition);
    procedure ComposeResearchElementDefinitionChildren(xml : TXmlBuilder; elem : TFhirResearchElementDefinition);
{$ENDIF FHIR_RESEARCHELEMENTDEFINITION}
{$IFDEF FHIR_RESEARCHSTUDY}
    procedure ComposeResearchStudyArm(xml : TXmlBuilder; name : string; elem : TFhirResearchStudyArm);
    procedure ComposeResearchStudyArmChildren(xml : TXmlBuilder; elem : TFhirResearchStudyArm);
    procedure ComposeResearchStudyObjective(xml : TXmlBuilder; name : string; elem : TFhirResearchStudyObjective);
    procedure ComposeResearchStudyObjectiveChildren(xml : TXmlBuilder; elem : TFhirResearchStudyObjective);
    procedure ComposeResearchStudy(xml : TXmlBuilder; name : string; elem : TFhirResearchStudy);
    procedure ComposeResearchStudyChildren(xml : TXmlBuilder; elem : TFhirResearchStudy);
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
    procedure ComposeResearchSubject(xml : TXmlBuilder; name : string; elem : TFhirResearchSubject);
    procedure ComposeResearchSubjectChildren(xml : TXmlBuilder; elem : TFhirResearchSubject);
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
    procedure ComposeRiskAssessmentPrediction(xml : TXmlBuilder; name : string; elem : TFhirRiskAssessmentPrediction);
    procedure ComposeRiskAssessmentPredictionChildren(xml : TXmlBuilder; elem : TFhirRiskAssessmentPrediction);
    procedure ComposeRiskAssessment(xml : TXmlBuilder; name : string; elem : TFhirRiskAssessment);
    procedure ComposeRiskAssessmentChildren(xml : TXmlBuilder; elem : TFhirRiskAssessment);
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_RISKEVIDENCESYNTHESIS}
    procedure ComposeRiskEvidenceSynthesisSampleSize(xml : TXmlBuilder; name : string; elem : TFhirRiskEvidenceSynthesisSampleSize);
    procedure ComposeRiskEvidenceSynthesisSampleSizeChildren(xml : TXmlBuilder; elem : TFhirRiskEvidenceSynthesisSampleSize);
    procedure ComposeRiskEvidenceSynthesisRiskEstimate(xml : TXmlBuilder; name : string; elem : TFhirRiskEvidenceSynthesisRiskEstimate);
    procedure ComposeRiskEvidenceSynthesisRiskEstimateChildren(xml : TXmlBuilder; elem : TFhirRiskEvidenceSynthesisRiskEstimate);
    procedure ComposeRiskEvidenceSynthesisRiskEstimatePrecisionEstimate(xml : TXmlBuilder; name : string; elem : TFhirRiskEvidenceSynthesisRiskEstimatePrecisionEstimate);
    procedure ComposeRiskEvidenceSynthesisRiskEstimatePrecisionEstimateChildren(xml : TXmlBuilder; elem : TFhirRiskEvidenceSynthesisRiskEstimatePrecisionEstimate);
    procedure ComposeRiskEvidenceSynthesisCertainty(xml : TXmlBuilder; name : string; elem : TFhirRiskEvidenceSynthesisCertainty);
    procedure ComposeRiskEvidenceSynthesisCertaintyChildren(xml : TXmlBuilder; elem : TFhirRiskEvidenceSynthesisCertainty);
    procedure ComposeRiskEvidenceSynthesisCertaintyCertaintySubcomponent(xml : TXmlBuilder; name : string; elem : TFhirRiskEvidenceSynthesisCertaintyCertaintySubcomponent);
    procedure ComposeRiskEvidenceSynthesisCertaintyCertaintySubcomponentChildren(xml : TXmlBuilder; elem : TFhirRiskEvidenceSynthesisCertaintyCertaintySubcomponent);
    procedure ComposeRiskEvidenceSynthesis(xml : TXmlBuilder; name : string; elem : TFhirRiskEvidenceSynthesis);
    procedure ComposeRiskEvidenceSynthesisChildren(xml : TXmlBuilder; elem : TFhirRiskEvidenceSynthesis);
{$ENDIF FHIR_RISKEVIDENCESYNTHESIS}
{$IFDEF FHIR_SCHEDULE}
    procedure ComposeSchedule(xml : TXmlBuilder; name : string; elem : TFhirSchedule);
    procedure ComposeScheduleChildren(xml : TXmlBuilder; elem : TFhirSchedule);
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
    procedure ComposeSearchParameterComponent(xml : TXmlBuilder; name : string; elem : TFhirSearchParameterComponent);
    procedure ComposeSearchParameterComponentChildren(xml : TXmlBuilder; elem : TFhirSearchParameterComponent);
    procedure ComposeSearchParameter(xml : TXmlBuilder; name : string; elem : TFhirSearchParameter);
    procedure ComposeSearchParameterChildren(xml : TXmlBuilder; elem : TFhirSearchParameter);
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
    procedure ComposeServiceRequest(xml : TXmlBuilder; name : string; elem : TFhirServiceRequest);
    procedure ComposeServiceRequestChildren(xml : TXmlBuilder; elem : TFhirServiceRequest);
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
    procedure ComposeSlot(xml : TXmlBuilder; name : string; elem : TFhirSlot);
    procedure ComposeSlotChildren(xml : TXmlBuilder; elem : TFhirSlot);
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
    procedure ComposeSpecimenCollection(xml : TXmlBuilder; name : string; elem : TFhirSpecimenCollection);
    procedure ComposeSpecimenCollectionChildren(xml : TXmlBuilder; elem : TFhirSpecimenCollection);
    procedure ComposeSpecimenProcessing(xml : TXmlBuilder; name : string; elem : TFhirSpecimenProcessing);
    procedure ComposeSpecimenProcessingChildren(xml : TXmlBuilder; elem : TFhirSpecimenProcessing);
    procedure ComposeSpecimenContainer(xml : TXmlBuilder; name : string; elem : TFhirSpecimenContainer);
    procedure ComposeSpecimenContainerChildren(xml : TXmlBuilder; elem : TFhirSpecimenContainer);
    procedure ComposeSpecimen(xml : TXmlBuilder; name : string; elem : TFhirSpecimen);
    procedure ComposeSpecimenChildren(xml : TXmlBuilder; elem : TFhirSpecimen);
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
    procedure ComposeSpecimenDefinitionTypeTested(xml : TXmlBuilder; name : string; elem : TFhirSpecimenDefinitionTypeTested);
    procedure ComposeSpecimenDefinitionTypeTestedChildren(xml : TXmlBuilder; elem : TFhirSpecimenDefinitionTypeTested);
    procedure ComposeSpecimenDefinitionTypeTestedContainer(xml : TXmlBuilder; name : string; elem : TFhirSpecimenDefinitionTypeTestedContainer);
    procedure ComposeSpecimenDefinitionTypeTestedContainerChildren(xml : TXmlBuilder; elem : TFhirSpecimenDefinitionTypeTestedContainer);
    procedure ComposeSpecimenDefinitionTypeTestedContainerAdditive(xml : TXmlBuilder; name : string; elem : TFhirSpecimenDefinitionTypeTestedContainerAdditive);
    procedure ComposeSpecimenDefinitionTypeTestedContainerAdditiveChildren(xml : TXmlBuilder; elem : TFhirSpecimenDefinitionTypeTestedContainerAdditive);
    procedure ComposeSpecimenDefinitionTypeTestedHandling(xml : TXmlBuilder; name : string; elem : TFhirSpecimenDefinitionTypeTestedHandling);
    procedure ComposeSpecimenDefinitionTypeTestedHandlingChildren(xml : TXmlBuilder; elem : TFhirSpecimenDefinitionTypeTestedHandling);
    procedure ComposeSpecimenDefinition(xml : TXmlBuilder; name : string; elem : TFhirSpecimenDefinition);
    procedure ComposeSpecimenDefinitionChildren(xml : TXmlBuilder; elem : TFhirSpecimenDefinition);
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
    procedure ComposeStructureDefinitionMapping(xml : TXmlBuilder; name : string; elem : TFhirStructureDefinitionMapping);
    procedure ComposeStructureDefinitionMappingChildren(xml : TXmlBuilder; elem : TFhirStructureDefinitionMapping);
    procedure ComposeStructureDefinitionContext(xml : TXmlBuilder; name : string; elem : TFhirStructureDefinitionContext);
    procedure ComposeStructureDefinitionContextChildren(xml : TXmlBuilder; elem : TFhirStructureDefinitionContext);
    procedure ComposeStructureDefinitionSnapshot(xml : TXmlBuilder; name : string; elem : TFhirStructureDefinitionSnapshot);
    procedure ComposeStructureDefinitionSnapshotChildren(xml : TXmlBuilder; elem : TFhirStructureDefinitionSnapshot);
    procedure ComposeStructureDefinitionDifferential(xml : TXmlBuilder; name : string; elem : TFhirStructureDefinitionDifferential);
    procedure ComposeStructureDefinitionDifferentialChildren(xml : TXmlBuilder; elem : TFhirStructureDefinitionDifferential);
    procedure ComposeStructureDefinition(xml : TXmlBuilder; name : string; elem : TFhirStructureDefinition);
    procedure ComposeStructureDefinitionChildren(xml : TXmlBuilder; elem : TFhirStructureDefinition);
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
    procedure ComposeStructureMapStructure(xml : TXmlBuilder; name : string; elem : TFhirStructureMapStructure);
    procedure ComposeStructureMapStructureChildren(xml : TXmlBuilder; elem : TFhirStructureMapStructure);
    procedure ComposeStructureMapGroup(xml : TXmlBuilder; name : string; elem : TFhirStructureMapGroup);
    procedure ComposeStructureMapGroupChildren(xml : TXmlBuilder; elem : TFhirStructureMapGroup);
    procedure ComposeStructureMapGroupInput(xml : TXmlBuilder; name : string; elem : TFhirStructureMapGroupInput);
    procedure ComposeStructureMapGroupInputChildren(xml : TXmlBuilder; elem : TFhirStructureMapGroupInput);
    procedure ComposeStructureMapGroupRule(xml : TXmlBuilder; name : string; elem : TFhirStructureMapGroupRule);
    procedure ComposeStructureMapGroupRuleChildren(xml : TXmlBuilder; elem : TFhirStructureMapGroupRule);
    procedure ComposeStructureMapGroupRuleSource(xml : TXmlBuilder; name : string; elem : TFhirStructureMapGroupRuleSource);
    procedure ComposeStructureMapGroupRuleSourceChildren(xml : TXmlBuilder; elem : TFhirStructureMapGroupRuleSource);
    procedure ComposeStructureMapGroupRuleTarget(xml : TXmlBuilder; name : string; elem : TFhirStructureMapGroupRuleTarget);
    procedure ComposeStructureMapGroupRuleTargetChildren(xml : TXmlBuilder; elem : TFhirStructureMapGroupRuleTarget);
    procedure ComposeStructureMapGroupRuleTargetParameter(xml : TXmlBuilder; name : string; elem : TFhirStructureMapGroupRuleTargetParameter);
    procedure ComposeStructureMapGroupRuleTargetParameterChildren(xml : TXmlBuilder; elem : TFhirStructureMapGroupRuleTargetParameter);
    procedure ComposeStructureMapGroupRuleDependent(xml : TXmlBuilder; name : string; elem : TFhirStructureMapGroupRuleDependent);
    procedure ComposeStructureMapGroupRuleDependentChildren(xml : TXmlBuilder; elem : TFhirStructureMapGroupRuleDependent);
    procedure ComposeStructureMap(xml : TXmlBuilder; name : string; elem : TFhirStructureMap);
    procedure ComposeStructureMapChildren(xml : TXmlBuilder; elem : TFhirStructureMap);
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
    procedure ComposeSubscriptionChannel(xml : TXmlBuilder; name : string; elem : TFhirSubscriptionChannel);
    procedure ComposeSubscriptionChannelChildren(xml : TXmlBuilder; elem : TFhirSubscriptionChannel);
    procedure ComposeSubscription(xml : TXmlBuilder; name : string; elem : TFhirSubscription);
    procedure ComposeSubscriptionChildren(xml : TXmlBuilder; elem : TFhirSubscription);
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
    procedure ComposeSubstanceInstance(xml : TXmlBuilder; name : string; elem : TFhirSubstanceInstance);
    procedure ComposeSubstanceInstanceChildren(xml : TXmlBuilder; elem : TFhirSubstanceInstance);
    procedure ComposeSubstanceIngredient(xml : TXmlBuilder; name : string; elem : TFhirSubstanceIngredient);
    procedure ComposeSubstanceIngredientChildren(xml : TXmlBuilder; elem : TFhirSubstanceIngredient);
    procedure ComposeSubstance(xml : TXmlBuilder; name : string; elem : TFhirSubstance);
    procedure ComposeSubstanceChildren(xml : TXmlBuilder; elem : TFhirSubstance);
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCENUCLEICACID}
    procedure ComposeSubstanceNucleicAcidSubunit(xml : TXmlBuilder; name : string; elem : TFhirSubstanceNucleicAcidSubunit);
    procedure ComposeSubstanceNucleicAcidSubunitChildren(xml : TXmlBuilder; elem : TFhirSubstanceNucleicAcidSubunit);
    procedure ComposeSubstanceNucleicAcidSubunitLinkage(xml : TXmlBuilder; name : string; elem : TFhirSubstanceNucleicAcidSubunitLinkage);
    procedure ComposeSubstanceNucleicAcidSubunitLinkageChildren(xml : TXmlBuilder; elem : TFhirSubstanceNucleicAcidSubunitLinkage);
    procedure ComposeSubstanceNucleicAcidSubunitSugar(xml : TXmlBuilder; name : string; elem : TFhirSubstanceNucleicAcidSubunitSugar);
    procedure ComposeSubstanceNucleicAcidSubunitSugarChildren(xml : TXmlBuilder; elem : TFhirSubstanceNucleicAcidSubunitSugar);
    procedure ComposeSubstanceNucleicAcid(xml : TXmlBuilder; name : string; elem : TFhirSubstanceNucleicAcid);
    procedure ComposeSubstanceNucleicAcidChildren(xml : TXmlBuilder; elem : TFhirSubstanceNucleicAcid);
{$ENDIF FHIR_SUBSTANCENUCLEICACID}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
    procedure ComposeSubstancePolymerMonomerSet(xml : TXmlBuilder; name : string; elem : TFhirSubstancePolymerMonomerSet);
    procedure ComposeSubstancePolymerMonomerSetChildren(xml : TXmlBuilder; elem : TFhirSubstancePolymerMonomerSet);
    procedure ComposeSubstancePolymerMonomerSetStartingMaterial(xml : TXmlBuilder; name : string; elem : TFhirSubstancePolymerMonomerSetStartingMaterial);
    procedure ComposeSubstancePolymerMonomerSetStartingMaterialChildren(xml : TXmlBuilder; elem : TFhirSubstancePolymerMonomerSetStartingMaterial);
    procedure ComposeSubstancePolymerRepeat(xml : TXmlBuilder; name : string; elem : TFhirSubstancePolymerRepeat);
    procedure ComposeSubstancePolymerRepeatChildren(xml : TXmlBuilder; elem : TFhirSubstancePolymerRepeat);
    procedure ComposeSubstancePolymerRepeatRepeatUnit(xml : TXmlBuilder; name : string; elem : TFhirSubstancePolymerRepeatRepeatUnit);
    procedure ComposeSubstancePolymerRepeatRepeatUnitChildren(xml : TXmlBuilder; elem : TFhirSubstancePolymerRepeatRepeatUnit);
    procedure ComposeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(xml : TXmlBuilder; name : string; elem : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation);
    procedure ComposeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationChildren(xml : TXmlBuilder; elem : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation);
    procedure ComposeSubstancePolymerRepeatRepeatUnitStructuralRepresentation(xml : TXmlBuilder; name : string; elem : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation);
    procedure ComposeSubstancePolymerRepeatRepeatUnitStructuralRepresentationChildren(xml : TXmlBuilder; elem : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation);
    procedure ComposeSubstancePolymer(xml : TXmlBuilder; name : string; elem : TFhirSubstancePolymer);
    procedure ComposeSubstancePolymerChildren(xml : TXmlBuilder; elem : TFhirSubstancePolymer);
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEPROTEIN}
    procedure ComposeSubstanceProteinSubunit(xml : TXmlBuilder; name : string; elem : TFhirSubstanceProteinSubunit);
    procedure ComposeSubstanceProteinSubunitChildren(xml : TXmlBuilder; elem : TFhirSubstanceProteinSubunit);
    procedure ComposeSubstanceProtein(xml : TXmlBuilder; name : string; elem : TFhirSubstanceProtein);
    procedure ComposeSubstanceProteinChildren(xml : TXmlBuilder; elem : TFhirSubstanceProtein);
{$ENDIF FHIR_SUBSTANCEPROTEIN}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
    procedure ComposeSubstanceReferenceInformationGene(xml : TXmlBuilder; name : string; elem : TFhirSubstanceReferenceInformationGene);
    procedure ComposeSubstanceReferenceInformationGeneChildren(xml : TXmlBuilder; elem : TFhirSubstanceReferenceInformationGene);
    procedure ComposeSubstanceReferenceInformationGeneElement(xml : TXmlBuilder; name : string; elem : TFhirSubstanceReferenceInformationGeneElement);
    procedure ComposeSubstanceReferenceInformationGeneElementChildren(xml : TXmlBuilder; elem : TFhirSubstanceReferenceInformationGeneElement);
    procedure ComposeSubstanceReferenceInformationClassification(xml : TXmlBuilder; name : string; elem : TFhirSubstanceReferenceInformationClassification);
    procedure ComposeSubstanceReferenceInformationClassificationChildren(xml : TXmlBuilder; elem : TFhirSubstanceReferenceInformationClassification);
    procedure ComposeSubstanceReferenceInformationTarget(xml : TXmlBuilder; name : string; elem : TFhirSubstanceReferenceInformationTarget);
    procedure ComposeSubstanceReferenceInformationTargetChildren(xml : TXmlBuilder; elem : TFhirSubstanceReferenceInformationTarget);
    procedure ComposeSubstanceReferenceInformation(xml : TXmlBuilder; name : string; elem : TFhirSubstanceReferenceInformation);
    procedure ComposeSubstanceReferenceInformationChildren(xml : TXmlBuilder; elem : TFhirSubstanceReferenceInformation);
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
    procedure ComposeSubstanceSourceMaterialFractionDescription(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSourceMaterialFractionDescription);
    procedure ComposeSubstanceSourceMaterialFractionDescriptionChildren(xml : TXmlBuilder; elem : TFhirSubstanceSourceMaterialFractionDescription);
    procedure ComposeSubstanceSourceMaterialOrganism(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSourceMaterialOrganism);
    procedure ComposeSubstanceSourceMaterialOrganismChildren(xml : TXmlBuilder; elem : TFhirSubstanceSourceMaterialOrganism);
    procedure ComposeSubstanceSourceMaterialOrganismAuthor(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSourceMaterialOrganismAuthor);
    procedure ComposeSubstanceSourceMaterialOrganismAuthorChildren(xml : TXmlBuilder; elem : TFhirSubstanceSourceMaterialOrganismAuthor);
    procedure ComposeSubstanceSourceMaterialOrganismHybrid(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSourceMaterialOrganismHybrid);
    procedure ComposeSubstanceSourceMaterialOrganismHybridChildren(xml : TXmlBuilder; elem : TFhirSubstanceSourceMaterialOrganismHybrid);
    procedure ComposeSubstanceSourceMaterialOrganismOrganismGeneral(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSourceMaterialOrganismOrganismGeneral);
    procedure ComposeSubstanceSourceMaterialOrganismOrganismGeneralChildren(xml : TXmlBuilder; elem : TFhirSubstanceSourceMaterialOrganismOrganismGeneral);
    procedure ComposeSubstanceSourceMaterialPartDescription(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSourceMaterialPartDescription);
    procedure ComposeSubstanceSourceMaterialPartDescriptionChildren(xml : TXmlBuilder; elem : TFhirSubstanceSourceMaterialPartDescription);
    procedure ComposeSubstanceSourceMaterial(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSourceMaterial);
    procedure ComposeSubstanceSourceMaterialChildren(xml : TXmlBuilder; elem : TFhirSubstanceSourceMaterial);
{$ENDIF FHIR_SUBSTANCESOURCEMATERIAL}
{$IFDEF FHIR_SUBSTANCESPECIFICATION}
    procedure ComposeSubstanceSpecificationMoiety(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSpecificationMoiety);
    procedure ComposeSubstanceSpecificationMoietyChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationMoiety);
    procedure ComposeSubstanceSpecificationProperty(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSpecificationProperty);
    procedure ComposeSubstanceSpecificationPropertyChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationProperty);
    procedure ComposeSubstanceSpecificationStructure(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSpecificationStructure);
    procedure ComposeSubstanceSpecificationStructureChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationStructure);
    procedure ComposeSubstanceSpecificationStructureIsotope(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSpecificationStructureIsotope);
    procedure ComposeSubstanceSpecificationStructureIsotopeChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationStructureIsotope);
    procedure ComposeSubstanceSpecificationStructureIsotopeMolecularWeight(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSpecificationStructureIsotopeMolecularWeight);
    procedure ComposeSubstanceSpecificationStructureIsotopeMolecularWeightChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationStructureIsotopeMolecularWeight);
    procedure ComposeSubstanceSpecificationStructureRepresentation(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSpecificationStructureRepresentation);
    procedure ComposeSubstanceSpecificationStructureRepresentationChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationStructureRepresentation);
    procedure ComposeSubstanceSpecificationCode(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSpecificationCode);
    procedure ComposeSubstanceSpecificationCodeChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationCode);
    procedure ComposeSubstanceSpecificationName(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSpecificationName);
    procedure ComposeSubstanceSpecificationNameChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationName);
    procedure ComposeSubstanceSpecificationNameOfficial(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSpecificationNameOfficial);
    procedure ComposeSubstanceSpecificationNameOfficialChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationNameOfficial);
    procedure ComposeSubstanceSpecificationRelationship(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSpecificationRelationship);
    procedure ComposeSubstanceSpecificationRelationshipChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationRelationship);
    procedure ComposeSubstanceSpecification(xml : TXmlBuilder; name : string; elem : TFhirSubstanceSpecification);
    procedure ComposeSubstanceSpecificationChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecification);
{$ENDIF FHIR_SUBSTANCESPECIFICATION}
{$IFDEF FHIR_SUPPLYDELIVERY}
    procedure ComposeSupplyDeliverySuppliedItem(xml : TXmlBuilder; name : string; elem : TFhirSupplyDeliverySuppliedItem);
    procedure ComposeSupplyDeliverySuppliedItemChildren(xml : TXmlBuilder; elem : TFhirSupplyDeliverySuppliedItem);
    procedure ComposeSupplyDelivery(xml : TXmlBuilder; name : string; elem : TFhirSupplyDelivery);
    procedure ComposeSupplyDeliveryChildren(xml : TXmlBuilder; elem : TFhirSupplyDelivery);
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
    procedure ComposeSupplyRequestParameter(xml : TXmlBuilder; name : string; elem : TFhirSupplyRequestParameter);
    procedure ComposeSupplyRequestParameterChildren(xml : TXmlBuilder; elem : TFhirSupplyRequestParameter);
    procedure ComposeSupplyRequest(xml : TXmlBuilder; name : string; elem : TFhirSupplyRequest);
    procedure ComposeSupplyRequestChildren(xml : TXmlBuilder; elem : TFhirSupplyRequest);
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
    procedure ComposeTaskRestriction(xml : TXmlBuilder; name : string; elem : TFhirTaskRestriction);
    procedure ComposeTaskRestrictionChildren(xml : TXmlBuilder; elem : TFhirTaskRestriction);
    procedure ComposeTaskInput(xml : TXmlBuilder; name : string; elem : TFhirTaskInput);
    procedure ComposeTaskInputChildren(xml : TXmlBuilder; elem : TFhirTaskInput);
    procedure ComposeTaskOutput(xml : TXmlBuilder; name : string; elem : TFhirTaskOutput);
    procedure ComposeTaskOutputChildren(xml : TXmlBuilder; elem : TFhirTaskOutput);
    procedure ComposeTask(xml : TXmlBuilder; name : string; elem : TFhirTask);
    procedure ComposeTaskChildren(xml : TXmlBuilder; elem : TFhirTask);
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
    procedure ComposeTerminologyCapabilitiesSoftware(xml : TXmlBuilder; name : string; elem : TFhirTerminologyCapabilitiesSoftware);
    procedure ComposeTerminologyCapabilitiesSoftwareChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesSoftware);
    procedure ComposeTerminologyCapabilitiesImplementation(xml : TXmlBuilder; name : string; elem : TFhirTerminologyCapabilitiesImplementation);
    procedure ComposeTerminologyCapabilitiesImplementationChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesImplementation);
    procedure ComposeTerminologyCapabilitiesCodeSystem(xml : TXmlBuilder; name : string; elem : TFhirTerminologyCapabilitiesCodeSystem);
    procedure ComposeTerminologyCapabilitiesCodeSystemChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesCodeSystem);
    procedure ComposeTerminologyCapabilitiesCodeSystemVersion(xml : TXmlBuilder; name : string; elem : TFhirTerminologyCapabilitiesCodeSystemVersion);
    procedure ComposeTerminologyCapabilitiesCodeSystemVersionChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesCodeSystemVersion);
    procedure ComposeTerminologyCapabilitiesCodeSystemVersionFilter(xml : TXmlBuilder; name : string; elem : TFhirTerminologyCapabilitiesCodeSystemVersionFilter);
    procedure ComposeTerminologyCapabilitiesCodeSystemVersionFilterChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesCodeSystemVersionFilter);
    procedure ComposeTerminologyCapabilitiesExpansion(xml : TXmlBuilder; name : string; elem : TFhirTerminologyCapabilitiesExpansion);
    procedure ComposeTerminologyCapabilitiesExpansionChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesExpansion);
    procedure ComposeTerminologyCapabilitiesExpansionParameter(xml : TXmlBuilder; name : string; elem : TFhirTerminologyCapabilitiesExpansionParameter);
    procedure ComposeTerminologyCapabilitiesExpansionParameterChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesExpansionParameter);
    procedure ComposeTerminologyCapabilitiesValidateCode(xml : TXmlBuilder; name : string; elem : TFhirTerminologyCapabilitiesValidateCode);
    procedure ComposeTerminologyCapabilitiesValidateCodeChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesValidateCode);
    procedure ComposeTerminologyCapabilitiesTranslation(xml : TXmlBuilder; name : string; elem : TFhirTerminologyCapabilitiesTranslation);
    procedure ComposeTerminologyCapabilitiesTranslationChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesTranslation);
    procedure ComposeTerminologyCapabilitiesClosure(xml : TXmlBuilder; name : string; elem : TFhirTerminologyCapabilitiesClosure);
    procedure ComposeTerminologyCapabilitiesClosureChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesClosure);
    procedure ComposeTerminologyCapabilities(xml : TXmlBuilder; name : string; elem : TFhirTerminologyCapabilities);
    procedure ComposeTerminologyCapabilitiesChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilities);
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
    procedure ComposeTestReportParticipant(xml : TXmlBuilder; name : string; elem : TFhirTestReportParticipant);
    procedure ComposeTestReportParticipantChildren(xml : TXmlBuilder; elem : TFhirTestReportParticipant);
    procedure ComposeTestReportSetup(xml : TXmlBuilder; name : string; elem : TFhirTestReportSetup);
    procedure ComposeTestReportSetupChildren(xml : TXmlBuilder; elem : TFhirTestReportSetup);
    procedure ComposeTestReportSetupAction(xml : TXmlBuilder; name : string; elem : TFhirTestReportSetupAction);
    procedure ComposeTestReportSetupActionChildren(xml : TXmlBuilder; elem : TFhirTestReportSetupAction);
    procedure ComposeTestReportSetupActionOperation(xml : TXmlBuilder; name : string; elem : TFhirTestReportSetupActionOperation);
    procedure ComposeTestReportSetupActionOperationChildren(xml : TXmlBuilder; elem : TFhirTestReportSetupActionOperation);
    procedure ComposeTestReportSetupActionAssert(xml : TXmlBuilder; name : string; elem : TFhirTestReportSetupActionAssert);
    procedure ComposeTestReportSetupActionAssertChildren(xml : TXmlBuilder; elem : TFhirTestReportSetupActionAssert);
    procedure ComposeTestReportTest(xml : TXmlBuilder; name : string; elem : TFhirTestReportTest);
    procedure ComposeTestReportTestChildren(xml : TXmlBuilder; elem : TFhirTestReportTest);
    procedure ComposeTestReportTestAction(xml : TXmlBuilder; name : string; elem : TFhirTestReportTestAction);
    procedure ComposeTestReportTestActionChildren(xml : TXmlBuilder; elem : TFhirTestReportTestAction);
    procedure ComposeTestReportTeardown(xml : TXmlBuilder; name : string; elem : TFhirTestReportTeardown);
    procedure ComposeTestReportTeardownChildren(xml : TXmlBuilder; elem : TFhirTestReportTeardown);
    procedure ComposeTestReportTeardownAction(xml : TXmlBuilder; name : string; elem : TFhirTestReportTeardownAction);
    procedure ComposeTestReportTeardownActionChildren(xml : TXmlBuilder; elem : TFhirTestReportTeardownAction);
    procedure ComposeTestReport(xml : TXmlBuilder; name : string; elem : TFhirTestReport);
    procedure ComposeTestReportChildren(xml : TXmlBuilder; elem : TFhirTestReport);
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
    procedure ComposeTestScriptOrigin(xml : TXmlBuilder; name : string; elem : TFhirTestScriptOrigin);
    procedure ComposeTestScriptOriginChildren(xml : TXmlBuilder; elem : TFhirTestScriptOrigin);
    procedure ComposeTestScriptDestination(xml : TXmlBuilder; name : string; elem : TFhirTestScriptDestination);
    procedure ComposeTestScriptDestinationChildren(xml : TXmlBuilder; elem : TFhirTestScriptDestination);
    procedure ComposeTestScriptMetadata(xml : TXmlBuilder; name : string; elem : TFhirTestScriptMetadata);
    procedure ComposeTestScriptMetadataChildren(xml : TXmlBuilder; elem : TFhirTestScriptMetadata);
    procedure ComposeTestScriptMetadataLink(xml : TXmlBuilder; name : string; elem : TFhirTestScriptMetadataLink);
    procedure ComposeTestScriptMetadataLinkChildren(xml : TXmlBuilder; elem : TFhirTestScriptMetadataLink);
    procedure ComposeTestScriptMetadataCapability(xml : TXmlBuilder; name : string; elem : TFhirTestScriptMetadataCapability);
    procedure ComposeTestScriptMetadataCapabilityChildren(xml : TXmlBuilder; elem : TFhirTestScriptMetadataCapability);
    procedure ComposeTestScriptFixture(xml : TXmlBuilder; name : string; elem : TFhirTestScriptFixture);
    procedure ComposeTestScriptFixtureChildren(xml : TXmlBuilder; elem : TFhirTestScriptFixture);
    procedure ComposeTestScriptVariable(xml : TXmlBuilder; name : string; elem : TFhirTestScriptVariable);
    procedure ComposeTestScriptVariableChildren(xml : TXmlBuilder; elem : TFhirTestScriptVariable);
    procedure ComposeTestScriptSetup(xml : TXmlBuilder; name : string; elem : TFhirTestScriptSetup);
    procedure ComposeTestScriptSetupChildren(xml : TXmlBuilder; elem : TFhirTestScriptSetup);
    procedure ComposeTestScriptSetupAction(xml : TXmlBuilder; name : string; elem : TFhirTestScriptSetupAction);
    procedure ComposeTestScriptSetupActionChildren(xml : TXmlBuilder; elem : TFhirTestScriptSetupAction);
    procedure ComposeTestScriptSetupActionOperation(xml : TXmlBuilder; name : string; elem : TFhirTestScriptSetupActionOperation);
    procedure ComposeTestScriptSetupActionOperationChildren(xml : TXmlBuilder; elem : TFhirTestScriptSetupActionOperation);
    procedure ComposeTestScriptSetupActionOperationRequestHeader(xml : TXmlBuilder; name : string; elem : TFhirTestScriptSetupActionOperationRequestHeader);
    procedure ComposeTestScriptSetupActionOperationRequestHeaderChildren(xml : TXmlBuilder; elem : TFhirTestScriptSetupActionOperationRequestHeader);
    procedure ComposeTestScriptSetupActionAssert(xml : TXmlBuilder; name : string; elem : TFhirTestScriptSetupActionAssert);
    procedure ComposeTestScriptSetupActionAssertChildren(xml : TXmlBuilder; elem : TFhirTestScriptSetupActionAssert);
    procedure ComposeTestScriptTest(xml : TXmlBuilder; name : string; elem : TFhirTestScriptTest);
    procedure ComposeTestScriptTestChildren(xml : TXmlBuilder; elem : TFhirTestScriptTest);
    procedure ComposeTestScriptTestAction(xml : TXmlBuilder; name : string; elem : TFhirTestScriptTestAction);
    procedure ComposeTestScriptTestActionChildren(xml : TXmlBuilder; elem : TFhirTestScriptTestAction);
    procedure ComposeTestScriptTeardown(xml : TXmlBuilder; name : string; elem : TFhirTestScriptTeardown);
    procedure ComposeTestScriptTeardownChildren(xml : TXmlBuilder; elem : TFhirTestScriptTeardown);
    procedure ComposeTestScriptTeardownAction(xml : TXmlBuilder; name : string; elem : TFhirTestScriptTeardownAction);
    procedure ComposeTestScriptTeardownActionChildren(xml : TXmlBuilder; elem : TFhirTestScriptTeardownAction);
    procedure ComposeTestScript(xml : TXmlBuilder; name : string; elem : TFhirTestScript);
    procedure ComposeTestScriptChildren(xml : TXmlBuilder; elem : TFhirTestScript);
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
    procedure ComposeValueSetCompose(xml : TXmlBuilder; name : string; elem : TFhirValueSetCompose);
    procedure ComposeValueSetComposeChildren(xml : TXmlBuilder; elem : TFhirValueSetCompose);
    procedure ComposeValueSetComposeInclude(xml : TXmlBuilder; name : string; elem : TFhirValueSetComposeInclude);
    procedure ComposeValueSetComposeIncludeChildren(xml : TXmlBuilder; elem : TFhirValueSetComposeInclude);
    procedure ComposeValueSetComposeIncludeConcept(xml : TXmlBuilder; name : string; elem : TFhirValueSetComposeIncludeConcept);
    procedure ComposeValueSetComposeIncludeConceptChildren(xml : TXmlBuilder; elem : TFhirValueSetComposeIncludeConcept);
    procedure ComposeValueSetComposeIncludeConceptDesignation(xml : TXmlBuilder; name : string; elem : TFhirValueSetComposeIncludeConceptDesignation);
    procedure ComposeValueSetComposeIncludeConceptDesignationChildren(xml : TXmlBuilder; elem : TFhirValueSetComposeIncludeConceptDesignation);
    procedure ComposeValueSetComposeIncludeFilter(xml : TXmlBuilder; name : string; elem : TFhirValueSetComposeIncludeFilter);
    procedure ComposeValueSetComposeIncludeFilterChildren(xml : TXmlBuilder; elem : TFhirValueSetComposeIncludeFilter);
    procedure ComposeValueSetExpansion(xml : TXmlBuilder; name : string; elem : TFhirValueSetExpansion);
    procedure ComposeValueSetExpansionChildren(xml : TXmlBuilder; elem : TFhirValueSetExpansion);
    procedure ComposeValueSetExpansionParameter(xml : TXmlBuilder; name : string; elem : TFhirValueSetExpansionParameter);
    procedure ComposeValueSetExpansionParameterChildren(xml : TXmlBuilder; elem : TFhirValueSetExpansionParameter);
    procedure ComposeValueSetExpansionContains(xml : TXmlBuilder; name : string; elem : TFhirValueSetExpansionContains);
    procedure ComposeValueSetExpansionContainsChildren(xml : TXmlBuilder; elem : TFhirValueSetExpansionContains);
    procedure ComposeValueSet(xml : TXmlBuilder; name : string; elem : TFhirValueSet);
    procedure ComposeValueSetChildren(xml : TXmlBuilder; elem : TFhirValueSet);
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
    procedure ComposeVerificationResultPrimarySource(xml : TXmlBuilder; name : string; elem : TFhirVerificationResultPrimarySource);
    procedure ComposeVerificationResultPrimarySourceChildren(xml : TXmlBuilder; elem : TFhirVerificationResultPrimarySource);
    procedure ComposeVerificationResultAttestation(xml : TXmlBuilder; name : string; elem : TFhirVerificationResultAttestation);
    procedure ComposeVerificationResultAttestationChildren(xml : TXmlBuilder; elem : TFhirVerificationResultAttestation);
    procedure ComposeVerificationResultValidator(xml : TXmlBuilder; name : string; elem : TFhirVerificationResultValidator);
    procedure ComposeVerificationResultValidatorChildren(xml : TXmlBuilder; elem : TFhirVerificationResultValidator);
    procedure ComposeVerificationResult(xml : TXmlBuilder; name : string; elem : TFhirVerificationResult);
    procedure ComposeVerificationResultChildren(xml : TXmlBuilder; elem : TFhirVerificationResult);
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
    procedure ComposeVisionPrescriptionLensSpecification(xml : TXmlBuilder; name : string; elem : TFhirVisionPrescriptionLensSpecification);
    procedure ComposeVisionPrescriptionLensSpecificationChildren(xml : TXmlBuilder; elem : TFhirVisionPrescriptionLensSpecification);
    procedure ComposeVisionPrescriptionLensSpecificationPrism(xml : TXmlBuilder; name : string; elem : TFhirVisionPrescriptionLensSpecificationPrism);
    procedure ComposeVisionPrescriptionLensSpecificationPrismChildren(xml : TXmlBuilder; elem : TFhirVisionPrescriptionLensSpecificationPrism);
    procedure ComposeVisionPrescription(xml : TXmlBuilder; name : string; elem : TFhirVisionPrescription);
    procedure ComposeVisionPrescriptionChildren(xml : TXmlBuilder; elem : TFhirVisionPrescription);
{$ENDIF FHIR_VISIONPRESCRIPTION}
    procedure ComposeResource(xml : TXmlBuilder; resource : TFhirResource); override;
    procedure ComposeBase(xml : TXmlBuilder; name : String; base : TFHIRObject); override;
  end;


implementation

{ TFHIRXmlParser }

function TFHIRXmlParser.ParseElement(element : TMXmlElement; path : string) : TFhirElement;
var
  child : TMXmlElement;
begin
  result := TFhirElement.create;
  try
    parseElementAttributes(result, path, element);
    result.id := GetAttribute(element, 'id');{x.4}
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRXmlComposer.ComposeElement(xml : TXmlBuilder; name : String; elem : TFhirElement);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  Attribute(xml, 'id', elem.id  );
  xml.open(name);
  composeElementChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

Procedure TFHIRXmlParser.ParseElementAttributes(value : TFhirElement; path : string; element : TMXmlElement);
begin
  TakeCommentsStart(value);
  GetObjectLocation(value, element);
  value.Id := GetAttribute(element, 'id');
end;

Function TFHIRXmlParser.ParseBackboneElementChild(element : TFhirBackboneElement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
  if (child.localName = 'modifierExtension') then
    element.ModifierExtensionList.add(ParseExtension(child, path+'/modifierExtension'))
  else
    result := ParseElementChild(element, path, child);
end;

Function TFHIRXmlParser.ParseElementChild(element : TFhirElement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
  if (child.localName = 'extension') then
    element.ExtensionList.add(ParseExtension(child, path+'/extension'))
  else
    result := false;
end;

Procedure TFHIRXmlComposer.ComposeElementAttributes(xml : TXmlBuilder; element : TFhirElement);
begin
  CommentsStart(xml, element);
  Attribute(xml, 'id', element.Id);
end;

Procedure TFHIRXmlComposer.ComposeElementChildren(xml : TXmlBuilder; element : TFhirElement);
var
  i : integer;
begin
  if element.hasExtensionList then
    for i := 0 to element.extensionList.count - 1 do
      ComposeExtension(xml, 'extension', element.extensionList[i]);
end;

Procedure TFHIRXmlComposer.ComposeBackboneElementChildren(xml : TXmlBuilder; element : TFhirBackboneElement);
var
  i : integer;
begin
  ComposeElementChildren(xml, element);
  if element.hasModifierExtensionList then
    for i := 0 to element.modifierExtensionList.count - 1 do
      ComposeExtension(xml, 'modifierExtension', element.modifierExtensionList[i]);
end;

Procedure TFHIRXmlComposer.ComposeBackboneElementChildren(xml : TXmlBuilder; element : TFhirBackboneType);
var
  i : integer;
begin
  ComposeElementChildren(xml, element);
  if element.hasModifierExtensionList then
    for i := 0 to element.modifierExtensionList.count - 1 do
      ComposeExtension(xml, 'modifierExtension', element.modifierExtensionList[i]);
end;

function TFHIRXmlParser.ParseBackboneElement(element : TMXmlElement; path : string) : TFhirBackboneElement;
var
  child : TMXmlElement;
begin
  result := TFhirBackboneElement.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBackboneElementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

procedure TFHIRXmlComposer.ComposeBackboneElement(xml : TXmlBuilder; name : String; elem : TFhirBackboneElement);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeBackboneElementChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

function TFHIRXmlParser.ParseBackboneType(element : TMXmlElement; path : string) : TFhirBackboneType;
var
  child : TMXmlElement;
begin
  result := TFhirBackboneType.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBackboneTypeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBackboneTypeChild(element : TFhirBackboneType; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'modifierExtension') then
        element.modifierExtensionList.Add(ParseExtension(child, path+'/modifierExtension')){y.2}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBackboneType(xml : TXmlBuilder; name : String; elem : TFhirBackboneType);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeBackboneTypeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBackboneTypeChildren(xml : TXmlBuilder; elem : TFhirBackboneType);
var
  i : integer;
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.modifierExtensionList.Count - 1 do
      ComposeExtension(xml, 'modifierExtension', elem.modifierExtensionList[i]);
end;

function TFHIRXmlParser.ParseEnum(Const aNames, aSystems : Array Of String; path : String; element : TMXmlElement) : TFhirEnum;
var
  child : TMXmlElement;
  i : integer;
begin
  result := TFhirEnum.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    i := StringArrayIndexOfSensitive(aNames, result.value);
    if i < 0 then
      raise EXmlException.create('unknown code: '+result.value+' from a set of choices of '+StringArrayToCommaString(aNames)+' for "'+path+'"');
    result.system := aSystems[i];
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeEnum(xml : TXmlBuilder; name : String; value : TFhirEnum; Const aNames : Array Of String);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseDate(element : TMXmlElement; path : string) : TFhirDate;
var
  child : TMXmlElement;
begin
  result := TFhirDate.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := toTDateTimeEx(GetAttribute(element, 'value'));
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeDate(xml : TXmlBuilder; name : String; value : TFhirDate);
begin
  if (value = nil) or ((value.value.null) and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  if (value.value.notNull) then
    attribute(xml, 'value', asString(value.value));
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseDateTime(element : TMXmlElement; path : string) : TFhirDateTime;
var
  child : TMXmlElement;
begin
  result := TFhirDateTime.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := toTDateTimeEx(GetAttribute(element, 'value'));
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeDateTime(xml : TXmlBuilder; name : String; value : TFhirDateTime);
begin
  if (value = nil) or ((value.value.null) and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  if (value.value.notNull) then
    attribute(xml, 'value', asString(value.value));
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseString(element : TMXmlElement; path : string) : TFhirString;
var
  child : TMXmlElement;
begin
  result := TFhirString.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeString(xml : TXmlBuilder; name : String; value : TFhirString);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseInteger(element : TMXmlElement; path : string) : TFhirInteger;
var
  child : TMXmlElement;
begin
  result := TFhirInteger.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeInteger(xml : TXmlBuilder; name : String; value : TFhirInteger);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseUri(element : TMXmlElement; path : string) : TFhirUri;
var
  child : TMXmlElement;
begin
  result := TFhirUri.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeUri(xml : TXmlBuilder; name : String; value : TFhirUri);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseInstant(element : TMXmlElement; path : string) : TFhirInstant;
var
  child : TMXmlElement;
begin
  result := TFhirInstant.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := toTDateTimeEx(GetAttribute(element, 'value'));
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeInstant(xml : TXmlBuilder; name : String; value : TFhirInstant);
begin
  if (value = nil) or ((value.value.null) and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  if (value.value.notNull) then
    attribute(xml, 'value', asString(value.value));
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseXhtml(element : TMXmlElement; path : string) : TFhirXhtml;
var
  child : TMXmlElement;
begin
  result := TFhirXhtml.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeXhtml(xml : TXmlBuilder; name : String; value : TFhirXhtml);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseBoolean(element : TMXmlElement; path : string) : TFhirBoolean;
var
  child : TMXmlElement;
begin
  result := TFhirBoolean.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := StringToBoolean(GetAttribute(element, 'value'));
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeBoolean(xml : TXmlBuilder; name : String; value : TFhirBoolean);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', LCBooleanToString(value.value));
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseBase64Binary(element : TMXmlElement; path : string) : TFhirBase64Binary;
var
  child : TMXmlElement;
begin
  result := TFhirBase64Binary.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := toTBytes(GetAttribute(element, 'value'));
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeBase64Binary(xml : TXmlBuilder; name : String; value : TFhirBase64Binary);
begin
  if (value = nil) or ((value.value = nil) and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  if (value.value <> nil) then
    attribute(xml, 'value', asString(value.value));
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseTime(element : TMXmlElement; path : string) : TFhirTime;
var
  child : TMXmlElement;
begin
  result := TFhirTime.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeTime(xml : TXmlBuilder; name : String; value : TFhirTime);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseDecimal(element : TMXmlElement; path : string) : TFhirDecimal;
var
  child : TMXmlElement;
begin
  result := TFhirDecimal.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeDecimal(xml : TXmlBuilder; name : String; value : TFhirDecimal);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseCode(element : TMXmlElement; path : string) : TFhirCode;
var
  child : TMXmlElement;
begin
  result := TFhirCode.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeCode(xml : TXmlBuilder; name : String; value : TFhirCode);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseCanonical(element : TMXmlElement; path : string) : TFhirCanonical;
var
  child : TMXmlElement;
begin
  result := TFhirCanonical.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeCanonical(xml : TXmlBuilder; name : String; value : TFhirCanonical);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseOid(element : TMXmlElement; path : string) : TFhirOid;
var
  child : TMXmlElement;
begin
  result := TFhirOid.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeOid(xml : TXmlBuilder; name : String; value : TFhirOid);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseUuid(element : TMXmlElement; path : string) : TFhirUuid;
var
  child : TMXmlElement;
begin
  result := TFhirUuid.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeUuid(xml : TXmlBuilder; name : String; value : TFhirUuid);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseUrl(element : TMXmlElement; path : string) : TFhirUrl;
var
  child : TMXmlElement;
begin
  result := TFhirUrl.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeUrl(xml : TXmlBuilder; name : String; value : TFhirUrl);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseMarkdown(element : TMXmlElement; path : string) : TFhirMarkdown;
var
  child : TMXmlElement;
begin
  result := TFhirMarkdown.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeMarkdown(xml : TXmlBuilder; name : String; value : TFhirMarkdown);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseUnsignedInt(element : TMXmlElement; path : string) : TFhirUnsignedInt;
var
  child : TMXmlElement;
begin
  result := TFhirUnsignedInt.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeUnsignedInt(xml : TXmlBuilder; name : String; value : TFhirUnsignedInt);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParseId(element : TMXmlElement; path : string) : TFhirId;
var
  child : TMXmlElement;
begin
  result := TFhirId.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeId(xml : TXmlBuilder; name : String; value : TFhirId);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

function TFHIRXmlParser.ParsePositiveInt(element : TMXmlElement; path : string) : TFhirPositiveInt;
var
  child : TMXmlElement;
begin
  result := TFhirPositiveInt.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposePositiveInt(xml : TXmlBuilder; name : String; value : TFhirPositiveInt);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
end;

Procedure TFHIRXmlParser.ParseResourceAttributes(resource : TFhirResource; path : string; element : TMXmlElement);
begin
  GetObjectLocation(resource, element);
end;

Function TFHIRXmlParser.ParseResourceChild(resource : TFhirResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
  if (child.localName = 'id') then
    resource.idElement := ParseId(child, path+'/id') {b}
  else if (child.localName = 'meta') then
    resource.meta := ParseMeta(child, path+'/meta') {b}
  else if (child.localName = 'implicitRules') then
    resource.implicitRulesElement := ParseUri(child, path+'/implicitRules') {b}
  else if (child.localName = 'language') then
    resource.languageElement := ParseCode(child, path+'/language') {b}
  else
    result := false;
end;

Procedure TFHIRXmlComposer.ComposeResourceAttributes(xml : TXmlBuilder; resource : TFhirResource);
begin
end;

Procedure TFHIRXmlComposer.ComposeResourceChildren(xml : TXmlBuilder; elem : TFhirResource);
begin
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeId(xml, 'id', elem.idElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('meta') then
    ComposeMeta(xml, 'meta', elem.meta);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('implicitRules') then
    ComposeUri(xml, 'implicitRules', elem.implicitRulesElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('language') then
    ComposeCode(xml, 'language', elem.languageElement);{x.2b}
end;

Procedure TFHIRXmlParser.ParseDomainResourceAttributes(resource : TFhirDomainResource; path : string; element : TMXmlElement);
begin
  ParseResourceAttributes(resource, path, element);
end;

Function TFHIRXmlParser.ParseDomainResourceChild(resource : TFhirDomainResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
  if (child.localName = 'text') then
    resource.text := ParseNarrative(child, path+'/text') {b}
  else if (child.localName = 'contained') then
    resource.containedList.Add(ParseInnerResource(child, path+'/contained')){y.2}
  else if (child.localName = 'extension') then
    resource.extensionList.Add(ParseExtension(child, path+'/extension')){y.2}
  else if (child.localName = 'modifierExtension') then
    resource.modifierExtensionList.Add(ParseExtension(child, path+'/modifierExtension')){y.2}
  else if not parseResourceChild(resource, path, child) then
    result := false;
end;

Procedure TFHIRXmlComposer.ComposeDomainResourceAttributes(xml : TXmlBuilder; resource : TFhirDomainResource);
begin
  ComposeResourceAttributes(xml, resource);
end;

Procedure TFHIRXmlComposer.ComposeDomainResourceChildren(xml : TXmlBuilder; elem : TFhirDomainResource);
var
  i : integer;{z.a}
begin
  composeResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soText]) and doCompose('text') then
    ComposeNarrative(xml, 'text', elem.text);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('contained') then
    for i := 0 to elem.containedList.Count - 1 do
      ComposeInnerResource(xml, 'contained', elem, elem.containedList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('extension') then
    for i := 0 to elem.extensionList.Count - 1 do
      ComposeExtension(xml, 'extension', elem.extensionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('modifierExtension') then
    for i := 0 to elem.modifierExtensionList.Count - 1 do
      ComposeExtension(xml, 'modifierExtension', elem.modifierExtensionList[i]);
end;

{$IFDEF FHIR_PARAMETERS}
function TFHIRXmlParser.ParseParametersParameter(element : TMXmlElement; path : string) : TFhirParametersParameter;
var
  child : TMXmlElement;
begin
  result := TFhirParametersParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseParametersParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseParametersParameterChild(element : TFhirParametersParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'valueCanonical') then
        element.value := ParseCanonical(child, path+'/valueCanonical'){x.3}
      else if (child.localName = 'valueCode') then
        element.value := ParseCode(child, path+'/valueCode'){x.3}
      else if (child.localName = 'valueId') then
        element.value := ParseId(child, path+'/valueId'){x.3}
      else if (child.localName = 'valueMarkdown') then
        element.value := ParseMarkdown(child, path+'/valueMarkdown'){x.3}
      else if (child.localName = 'valueOid') then
        element.value := ParseOid(child, path+'/valueOid'){x.3}
      else if (child.localName = 'valuePositiveInt') then
        element.value := ParsePositiveInt(child, path+'/valuePositiveInt'){x.3}
      else if (child.localName = 'valueUnsignedInt') then
        element.value := ParseUnsignedInt(child, path+'/valueUnsignedInt'){x.3}
      else if (child.localName = 'valueUrl') then
        element.value := ParseUrl(child, path+'/valueUrl'){x.3}
      else if (child.localName = 'valueUuid') then
        element.value := ParseUuid(child, path+'/valueUuid'){x.3}
      else if (child.localName = 'valueAddress') then
        element.value := ParseAddress(child, path+'/valueAddress'){x.3}
      else if (child.localName = 'valueAge') then
        element.value := ParseAge(child, path+'/valueAge'){x.3}
      else if (child.localName = 'valueAnnotation') then
        element.value := ParseAnnotation(child, path+'/valueAnnotation'){x.3}
      else if (child.localName = 'valueAttachment') then
        element.value := ParseAttachment(child, path+'/valueAttachment'){x.3}
      else if (child.localName = 'valueCodeableConcept') then
        element.value := ParseCodeableConcept(child, path+'/valueCodeableConcept'){x.3}
      else if (child.localName = 'valueCoding') then
        element.value := ParseCoding(child, path+'/valueCoding'){x.3}
      else if (child.localName = 'valueContactPoint') then
        element.value := ParseContactPoint(child, path+'/valueContactPoint'){x.3}
      else if (child.localName = 'valueCount') then
        element.value := ParseCount(child, path+'/valueCount'){x.3}
      else if (child.localName = 'valueDistance') then
        element.value := ParseDistance(child, path+'/valueDistance'){x.3}
      else if (child.localName = 'valueDuration') then
        element.value := ParseDuration(child, path+'/valueDuration'){x.3}
      else if (child.localName = 'valueHumanName') then
        element.value := ParseHumanName(child, path+'/valueHumanName'){x.3}
      else if (child.localName = 'valueIdentifier') then
        element.value := ParseIdentifier(child, path+'/valueIdentifier'){x.3}
      else if (child.localName = 'valueMoney') then
        element.value := ParseMoney(child, path+'/valueMoney'){x.3}
      else if (child.localName = 'valuePeriod') then
        element.value := ParsePeriod(child, path+'/valuePeriod'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueRange') then
        element.value := ParseRange(child, path+'/valueRange'){x.3}
      else if (child.localName = 'valueRatio') then
        element.value := ParseRatio(child, path+'/valueRatio'){x.3}
      else if (child.localName = 'valueReference') then
        element.value := ParseReference(child, path+'/valueReference'){x.3}
      else if (child.localName = 'valueSampledData') then
        element.value := ParseSampledData(child, path+'/valueSampledData'){x.3}
      else if (child.localName = 'valueSignature') then
        element.value := ParseSignature(child, path+'/valueSignature'){x.3}
      else if (child.localName = 'valueTiming') then
        element.value := ParseTiming(child, path+'/valueTiming'){x.3}
      else if (child.localName = 'valueContactDetail') then
        element.value := ParseContactDetail(child, path+'/valueContactDetail'){x.3}
      else if (child.localName = 'valueContributor') then
        element.value := ParseContributor(child, path+'/valueContributor'){x.3}
      else if (child.localName = 'valueDataRequirement') then
        element.value := ParseDataRequirement(child, path+'/valueDataRequirement'){x.3}
      else if (child.localName = 'valueExpression') then
        element.value := ParseExpression(child, path+'/valueExpression'){x.3}
      else if (child.localName = 'valueParameterDefinition') then
        element.value := ParseParameterDefinition(child, path+'/valueParameterDefinition'){x.3}
      else if (child.localName = 'valueRelatedArtifact') then
        element.value := ParseRelatedArtifact(child, path+'/valueRelatedArtifact'){x.3}
      else if (child.localName = 'valueTriggerDefinition') then
        element.value := ParseTriggerDefinition(child, path+'/valueTriggerDefinition'){x.3}
      else if (child.localName = 'valueUsageContext') then
        element.value := ParseUsageContext(child, path+'/valueUsageContext'){x.3}
      else if (child.localName = 'valueDosage') then
        element.value := ParseDosage(child, path+'/valueDosage'){x.3}
      else if (child.localName = 'valueBase64Binary') then
        element.value := ParseBase64Binary(child, path+'/valueBase64Binary'){x.3}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueDate') then
        element.value := ParseDate(child, path+'/valueDate'){x.3}
      else if (child.localName = 'valueDateTime') then
        element.value := ParseDateTime(child, path+'/valueDateTime'){x.3}
      else if (child.localName = 'valueDecimal') then
        element.value := ParseDecimal(child, path+'/valueDecimal'){x.3}
      else if (child.localName = 'valueInstant') then
        element.value := ParseInstant(child, path+'/valueInstant'){x.3}
      else if (child.localName = 'valueInteger') then
        element.value := ParseInteger(child, path+'/valueInteger'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueTime') then
        element.value := ParseTime(child, path+'/valueTime'){x.3}
      else if (child.localName = 'valueUri') then
        element.value := ParseUri(child, path+'/valueUri'){x.3}
      else if (child.localName = 'resource') then
        element.resource := ParseInnerResource(child, path+'/resource') {b}
      else if (child.localName = 'part') then
        element.partList.Add(ParseParametersParameter(child, path+'/part')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeParametersParameter(xml : TXmlBuilder; name : String; elem : TFhirParametersParameter);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeParametersParameterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeParametersParameterChildren(xml : TXmlBuilder; elem : TFhirParametersParameter);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'valueCanonical', TFhirCanonical(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirId) {6} then
    ComposeId(xml, 'valueId', TFhirId(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'valueMarkdown', TFhirMarkdown(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirOid) {6} then
    ComposeOid(xml, 'valueOid', TFhirOid(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'valuePositiveInt', TFhirPositiveInt(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'valueUnsignedInt', TFhirUnsignedInt(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUrl) {6} then
    ComposeUrl(xml, 'valueUrl', TFhirUrl(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUuid) {6} then
    ComposeUuid(xml, 'valueUuid', TFhirUuid(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAddress) {6} then
    ComposeAddress(xml, 'valueAddress', TFhirAddress(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAge) {6} then
    ComposeAge(xml, 'valueAge', TFhirAge(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'valueAnnotation', TFhirAnnotation(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'valueContactPoint', TFhirContactPoint(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCount) {6} then
    ComposeCount(xml, 'valueCount', TFhirCount(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDistance) {6} then
    ComposeDistance(xml, 'valueDistance', TFhirDistance(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDuration) {6} then
    ComposeDuration(xml, 'valueDuration', TFhirDuration(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'valueHumanName', TFhirHumanName(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'valueIdentifier', TFhirIdentifier(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMoney) {6} then
    ComposeMoney(xml, 'valueMoney', TFhirMoney(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRatio) {6} then
    ComposeRatio(xml, 'valueRatio', TFhirRatio(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirReference) {6} then
    ComposeReference(xml, 'valueReference', TFhirReference(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'valueSampledData', TFhirSampledData(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirSignature) {6} then
    ComposeSignature(xml, 'valueSignature', TFhirSignature(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTiming) {6} then
    ComposeTiming(xml, 'valueTiming', TFhirTiming(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'valueContactDetail', TFhirContactDetail(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirContributor) {6} then
    ComposeContributor(xml, 'valueContributor', TFhirContributor(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'valueDataRequirement', TFhirDataRequirement(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirExpression) {6} then
    ComposeExpression(xml, 'valueExpression', TFhirExpression(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'valueParameterDefinition', TFhirParameterDefinition(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'valueRelatedArtifact', TFhirRelatedArtifact(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'valueTriggerDefinition', TFhirTriggerDefinition(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'valueUsageContext', TFhirUsageContext(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDosage) {6} then
    ComposeDosage(xml, 'valueDosage', TFhirDosage(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirInstant) {6} then
    ComposeInstant(xml, 'valueInstant', TFhirInstant(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(elem.value));
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(xml, 'resource', elem, elem.resource);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.partList.Count - 1 do
      ComposeParametersParameter(xml, 'part', elem.partList[i]);
end;

function TFHIRXmlParser.ParseParameters(element : TMXmlElement; path : string) : TFhirParameters;
var
  child : TMXmlElement;
begin
  result := TFhirParameters.create;
  try
    parseResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseParametersChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseParametersChild(element : TFhirParameters; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'parameter') then
        element.parameterList.Add(ParseParametersParameter(child, path+'/parameter')){y.2}
      else if Not ParseResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeParameters(xml : TXmlBuilder; name : String; elem : TFhirParameters);
begin
  if (elem = nil) then
    exit;
  composeResourceAttributes(xml, elem);
  xml.open(name);
  composeParametersChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeParametersChildren(xml : TXmlBuilder; elem : TFhirParameters);
var
  i : integer;
begin
  composeResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and doCompose('parameter') then
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeParametersParameter(xml, 'parameter', elem.parameterList[i]);
end;

{$ENDIF FHIR_PARAMETERS}
function TFHIRXmlParser.ParseExtension(element : TMXmlElement; path : string) : TFhirExtension;
var
  child : TMXmlElement;
begin
  result := TFhirExtension.create;
  try
    parseElementAttributes(result, path, element);
    result.url := GetAttribute(element, 'url');{x.4}
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExtensionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExtensionChild(element : TFhirExtension; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'valueCanonical') then
        element.value := ParseCanonical(child, path+'/valueCanonical'){x.3}
      else if (child.localName = 'valueCode') then
        element.value := ParseCode(child, path+'/valueCode'){x.3}
      else if (child.localName = 'valueId') then
        element.value := ParseId(child, path+'/valueId'){x.3}
      else if (child.localName = 'valueMarkdown') then
        element.value := ParseMarkdown(child, path+'/valueMarkdown'){x.3}
      else if (child.localName = 'valueOid') then
        element.value := ParseOid(child, path+'/valueOid'){x.3}
      else if (child.localName = 'valuePositiveInt') then
        element.value := ParsePositiveInt(child, path+'/valuePositiveInt'){x.3}
      else if (child.localName = 'valueUnsignedInt') then
        element.value := ParseUnsignedInt(child, path+'/valueUnsignedInt'){x.3}
      else if (child.localName = 'valueUrl') then
        element.value := ParseUrl(child, path+'/valueUrl'){x.3}
      else if (child.localName = 'valueUuid') then
        element.value := ParseUuid(child, path+'/valueUuid'){x.3}
      else if (child.localName = 'valueAddress') then
        element.value := ParseAddress(child, path+'/valueAddress'){x.3}
      else if (child.localName = 'valueAge') then
        element.value := ParseAge(child, path+'/valueAge'){x.3}
      else if (child.localName = 'valueAnnotation') then
        element.value := ParseAnnotation(child, path+'/valueAnnotation'){x.3}
      else if (child.localName = 'valueAttachment') then
        element.value := ParseAttachment(child, path+'/valueAttachment'){x.3}
      else if (child.localName = 'valueCodeableConcept') then
        element.value := ParseCodeableConcept(child, path+'/valueCodeableConcept'){x.3}
      else if (child.localName = 'valueCoding') then
        element.value := ParseCoding(child, path+'/valueCoding'){x.3}
      else if (child.localName = 'valueContactPoint') then
        element.value := ParseContactPoint(child, path+'/valueContactPoint'){x.3}
      else if (child.localName = 'valueCount') then
        element.value := ParseCount(child, path+'/valueCount'){x.3}
      else if (child.localName = 'valueDistance') then
        element.value := ParseDistance(child, path+'/valueDistance'){x.3}
      else if (child.localName = 'valueDuration') then
        element.value := ParseDuration(child, path+'/valueDuration'){x.3}
      else if (child.localName = 'valueHumanName') then
        element.value := ParseHumanName(child, path+'/valueHumanName'){x.3}
      else if (child.localName = 'valueIdentifier') then
        element.value := ParseIdentifier(child, path+'/valueIdentifier'){x.3}
      else if (child.localName = 'valueMoney') then
        element.value := ParseMoney(child, path+'/valueMoney'){x.3}
      else if (child.localName = 'valuePeriod') then
        element.value := ParsePeriod(child, path+'/valuePeriod'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueRange') then
        element.value := ParseRange(child, path+'/valueRange'){x.3}
      else if (child.localName = 'valueRatio') then
        element.value := ParseRatio(child, path+'/valueRatio'){x.3}
      else if (child.localName = 'valueReference') then
        element.value := ParseReference(child, path+'/valueReference'){x.3}
      else if (child.localName = 'valueSampledData') then
        element.value := ParseSampledData(child, path+'/valueSampledData'){x.3}
      else if (child.localName = 'valueSignature') then
        element.value := ParseSignature(child, path+'/valueSignature'){x.3}
      else if (child.localName = 'valueTiming') then
        element.value := ParseTiming(child, path+'/valueTiming'){x.3}
      else if (child.localName = 'valueContactDetail') then
        element.value := ParseContactDetail(child, path+'/valueContactDetail'){x.3}
      else if (child.localName = 'valueContributor') then
        element.value := ParseContributor(child, path+'/valueContributor'){x.3}
      else if (child.localName = 'valueDataRequirement') then
        element.value := ParseDataRequirement(child, path+'/valueDataRequirement'){x.3}
      else if (child.localName = 'valueExpression') then
        element.value := ParseExpression(child, path+'/valueExpression'){x.3}
      else if (child.localName = 'valueParameterDefinition') then
        element.value := ParseParameterDefinition(child, path+'/valueParameterDefinition'){x.3}
      else if (child.localName = 'valueRelatedArtifact') then
        element.value := ParseRelatedArtifact(child, path+'/valueRelatedArtifact'){x.3}
      else if (child.localName = 'valueTriggerDefinition') then
        element.value := ParseTriggerDefinition(child, path+'/valueTriggerDefinition'){x.3}
      else if (child.localName = 'valueUsageContext') then
        element.value := ParseUsageContext(child, path+'/valueUsageContext'){x.3}
      else if (child.localName = 'valueDosage') then
        element.value := ParseDosage(child, path+'/valueDosage'){x.3}
      else if (child.localName = 'valueBase64Binary') then
        element.value := ParseBase64Binary(child, path+'/valueBase64Binary'){x.3}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueDate') then
        element.value := ParseDate(child, path+'/valueDate'){x.3}
      else if (child.localName = 'valueDateTime') then
        element.value := ParseDateTime(child, path+'/valueDateTime'){x.3}
      else if (child.localName = 'valueDecimal') then
        element.value := ParseDecimal(child, path+'/valueDecimal'){x.3}
      else if (child.localName = 'valueInstant') then
        element.value := ParseInstant(child, path+'/valueInstant'){x.3}
      else if (child.localName = 'valueInteger') then
        element.value := ParseInteger(child, path+'/valueInteger'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueTime') then
        element.value := ParseTime(child, path+'/valueTime'){x.3}
      else if (child.localName = 'valueUri') then
        element.value := ParseUri(child, path+'/valueUri'){x.3}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExtension(xml : TXmlBuilder; name : String; elem : TFhirExtension);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  Attribute(xml, 'url', elem.url  );
  xml.open(name);
  composeExtensionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExtensionChildren(xml : TXmlBuilder; elem : TFhirExtension);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'valueCanonical', TFhirCanonical(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirId) {6} then
    ComposeId(xml, 'valueId', TFhirId(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'valueMarkdown', TFhirMarkdown(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirOid) {6} then
    ComposeOid(xml, 'valueOid', TFhirOid(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'valuePositiveInt', TFhirPositiveInt(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'valueUnsignedInt', TFhirUnsignedInt(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUrl) {6} then
    ComposeUrl(xml, 'valueUrl', TFhirUrl(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUuid) {6} then
    ComposeUuid(xml, 'valueUuid', TFhirUuid(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAddress) {6} then
    ComposeAddress(xml, 'valueAddress', TFhirAddress(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAge) {6} then
    ComposeAge(xml, 'valueAge', TFhirAge(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'valueAnnotation', TFhirAnnotation(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'valueContactPoint', TFhirContactPoint(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirCount) {6} then
    ComposeCount(xml, 'valueCount', TFhirCount(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDistance) {6} then
    ComposeDistance(xml, 'valueDistance', TFhirDistance(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDuration) {6} then
    ComposeDuration(xml, 'valueDuration', TFhirDuration(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'valueHumanName', TFhirHumanName(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'valueIdentifier', TFhirIdentifier(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirMoney) {6} then
    ComposeMoney(xml, 'valueMoney', TFhirMoney(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRatio) {6} then
    ComposeRatio(xml, 'valueRatio', TFhirRatio(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirReference) {6} then
    ComposeReference(xml, 'valueReference', TFhirReference(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'valueSampledData', TFhirSampledData(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirSignature) {6} then
    ComposeSignature(xml, 'valueSignature', TFhirSignature(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTiming) {6} then
    ComposeTiming(xml, 'valueTiming', TFhirTiming(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'valueContactDetail', TFhirContactDetail(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirContributor) {6} then
    ComposeContributor(xml, 'valueContributor', TFhirContributor(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'valueDataRequirement', TFhirDataRequirement(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirExpression) {6} then
    ComposeExpression(xml, 'valueExpression', TFhirExpression(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'valueParameterDefinition', TFhirParameterDefinition(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'valueRelatedArtifact', TFhirRelatedArtifact(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'valueTriggerDefinition', TFhirTriggerDefinition(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'valueUsageContext', TFhirUsageContext(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDosage) {6} then
    ComposeDosage(xml, 'valueDosage', TFhirDosage(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirInstant) {6} then
    ComposeInstant(xml, 'valueInstant', TFhirInstant(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(elem.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(elem.value));
end;

function TFHIRXmlParser.ParseNarrative(element : TMXmlElement; path : string) : TFhirNarrative;
var
  child : TMXmlElement;
begin
  result := TFhirNarrative.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNarrativeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNarrativeChild(element : TFhirNarrative; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirNarrativeStatusEnum, SYSTEMS_TFhirNarrativeStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'div') then
        element.div_ := ParseXHtmlNode(child, path+'/div') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNarrative(xml : TXmlBuilder; name : String; elem : TFhirNarrative);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeNarrativeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeNarrativeChildren(xml : TXmlBuilder; elem : TFhirNarrative);
begin
  composeElementChildren(xml, elem);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirNarrativeStatusEnum);
  ComposeXHtmlNode(xml, 'div', elem.div_);{x.2a}
end;

function TFHIRXmlParser.ParseContributor(element : TMXmlElement; path : string) : TFhirContributor;
var
  child : TMXmlElement;
begin
  result := TFhirContributor.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContributorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContributorChild(element : TFhirContributor; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirContributorTypeEnum, SYSTEMS_TFhirContributorTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContributor(xml : TXmlBuilder; name : String; elem : TFhirContributor);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContributorChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContributorChildren(xml : TXmlBuilder; elem : TFhirContributor);
var
  i : integer;
begin
  composeElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirContributorTypeEnum);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
end;

function TFHIRXmlParser.ParseAttachment(element : TMXmlElement; path : string) : TFhirAttachment;
var
  child : TMXmlElement;
begin
  result := TFhirAttachment.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAttachmentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAttachmentChild(element : TFhirAttachment; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'contentType') then
        element.contentTypeElement := ParseCode(child, path+'/contentType') {b}
      else if (child.localName = 'language') then
        element.languageElement := ParseCode(child, path+'/language') {b}
      else if (child.localName = 'data') then
        element.dataElement := ParseBase64Binary(child, path+'/data') {b}
      else if (child.localName = 'url') then
        element.urlElement := ParseUrl(child, path+'/url') {b}
      else if (child.localName = 'size') then
        element.sizeElement := ParseUnsignedInt(child, path+'/size') {b}
      else if (child.localName = 'hash') then
        element.hashElement := ParseBase64Binary(child, path+'/hash') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'creation') then
        element.creationElement := ParseDateTime(child, path+'/creation') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAttachment(xml : TXmlBuilder; name : String; elem : TFhirAttachment);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAttachmentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAttachmentChildren(xml : TXmlBuilder; elem : TFhirAttachment);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCode(xml, 'contentType', elem.contentTypeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCode(xml, 'language', elem.languageElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64Binary(xml, 'data', elem.dataElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUrl(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUnsignedInt(xml, 'size', elem.sizeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64Binary(xml, 'hash', elem.hashElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTime(xml, 'creation', elem.creationElement);{x.2b}
end;

function TFHIRXmlParser.ParseDataRequirementCodeFilter(element : TMXmlElement; path : string) : TFhirDataRequirementCodeFilter;
var
  child : TMXmlElement;
begin
  result := TFhirDataRequirementCodeFilter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDataRequirementCodeFilterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDataRequirementCodeFilterChild(element : TFhirDataRequirementCodeFilter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        element.pathElement := ParseString(child, path+'/path') {b}
      else if (child.localName = 'searchParam') then
        element.searchParamElement := ParseString(child, path+'/searchParam') {b}
      else if (child.localName = 'valueSet') then
        element.valueSetElement := ParseCanonical(child, path+'/valueSet') {b}
      else if (child.localName = 'code') then
        element.codeList.Add(ParseCoding(child, path+'/code')){y.2}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDataRequirementCodeFilter(xml : TXmlBuilder; name : String; elem : TFhirDataRequirementCodeFilter);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDataRequirementCodeFilterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDataRequirementCodeFilterChildren(xml : TXmlBuilder; elem : TFhirDataRequirementCodeFilter);
var
  i : integer;
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'path', elem.pathElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'searchParam', elem.searchParamElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'valueSet', elem.valueSetElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCoding(xml, 'code', elem.codeList[i]);
end;

function TFHIRXmlParser.ParseDataRequirementDateFilter(element : TMXmlElement; path : string) : TFhirDataRequirementDateFilter;
var
  child : TMXmlElement;
begin
  result := TFhirDataRequirementDateFilter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDataRequirementDateFilterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDataRequirementDateFilterChild(element : TFhirDataRequirementDateFilter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        element.pathElement := ParseString(child, path+'/path') {b}
      else if (child.localName = 'searchParam') then
        element.searchParamElement := ParseString(child, path+'/searchParam') {b}
      else if (child.localName = 'valuePeriod') then
        element.value := ParsePeriod(child, path+'/valuePeriod'){x.3}
      else if (child.localName = 'valueDuration') then
        element.value := ParseDuration(child, path+'/valueDuration'){x.3}
      else if (child.localName = 'valueDateTime') then
        element.value := ParseDateTime(child, path+'/valueDateTime'){x.3}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDataRequirementDateFilter(xml : TXmlBuilder; name : String; elem : TFhirDataRequirementDateFilter);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDataRequirementDateFilterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDataRequirementDateFilterChildren(xml : TXmlBuilder; elem : TFhirDataRequirementDateFilter);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'path', elem.pathElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'searchParam', elem.searchParamElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDuration) {6} then
    ComposeDuration(xml, 'valueDuration', TFhirDuration(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(elem.value));
end;

function TFHIRXmlParser.ParseDataRequirementSort(element : TMXmlElement; path : string) : TFhirDataRequirementSort;
var
  child : TMXmlElement;
begin
  result := TFhirDataRequirementSort.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDataRequirementSortChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDataRequirementSortChild(element : TFhirDataRequirementSort; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        element.pathElement := ParseString(child, path+'/path') {b}
      else if (child.localName = 'direction') then
        element.directionElement := ParseEnum(CODES_TFhirSortDirectionEnum, SYSTEMS_TFhirSortDirectionEnum, path+'/direction', child){1a}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDataRequirementSort(xml : TXmlBuilder; name : String; elem : TFhirDataRequirementSort);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDataRequirementSortChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDataRequirementSortChildren(xml : TXmlBuilder; elem : TFhirDataRequirementSort);
begin
  composeElementChildren(xml, elem);
  ComposeString(xml, 'path', elem.pathElement);{x.2b}
  ComposeEnum(xml, 'direction', elem.DirectionElement, CODES_TFhirSortDirectionEnum);
end;

function TFHIRXmlParser.ParseDataRequirement(element : TMXmlElement; path : string) : TFhirDataRequirement;
var
  child : TMXmlElement;
begin
  result := TFhirDataRequirement.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDataRequirementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDataRequirementChild(element : TFhirDataRequirement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum, path+'/type', child){1a}
      else if (child.localName = 'profile') then
        element.profileList.Add(ParseCanonical(child, path+'/profile')){y.2}
      else if (child.localName = 'subjectCodeableConcept') then
        element.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept'){x.3}
      else if (child.localName = 'subjectReference') then
        element.subject := ParseReference(child, path+'/subjectReference') {a}
      else if (child.localName = 'mustSupport') then
        element.mustSupportList.Add(ParseString(child, path+'/mustSupport')){y.2}
      else if (child.localName = 'codeFilter') then
        element.codeFilterList.Add(ParseDataRequirementCodeFilter(child, path+'/codeFilter')){y.2}
      else if (child.localName = 'dateFilter') then
        element.dateFilterList.Add(ParseDataRequirementDateFilter(child, path+'/dateFilter')){y.2}
      else if (child.localName = 'limit') then
        element.limitElement := ParsePositiveInt(child, path+'/limit') {b}
      else if (child.localName = 'sort') then
        element.sortList.Add(ParseDataRequirementSort(child, path+'/sort')){y.2}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDataRequirement(xml : TXmlBuilder; name : String; elem : TFhirDataRequirement);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDataRequirementChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDataRequirementChildren(xml : TXmlBuilder; elem : TFhirDataRequirement);
var
  i : integer;
begin
  composeElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.profileList.Count - 1 do
      ComposeCanonical(xml, 'profile', elem.profileList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(elem.subject))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(elem.subject));
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.mustSupportList.Count - 1 do
      ComposeString(xml, 'mustSupport', elem.mustSupportList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.codeFilterList.Count - 1 do
      ComposeDataRequirementCodeFilter(xml, 'codeFilter', elem.codeFilterList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.dateFilterList.Count - 1 do
      ComposeDataRequirementDateFilter(xml, 'dateFilter', elem.dateFilterList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePositiveInt(xml, 'limit', elem.limitElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.sortList.Count - 1 do
      ComposeDataRequirementSort(xml, 'sort', elem.sortList[i]);
end;

function TFHIRXmlParser.ParseDosageDoseAndRate(element : TMXmlElement; path : string) : TFhirDosageDoseAndRate;
var
  child : TMXmlElement;
begin
  result := TFhirDosageDoseAndRate.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDosageDoseAndRateChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDosageDoseAndRateChild(element : TFhirDosageDoseAndRate; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'doseRange') then
        element.dose := ParseRange(child, path+'/doseRange'){x.3}
      else if (child.localName = 'doseQuantity') then
        element.dose := ParseQuantity(child, path+'/doseQuantity'){x.3}
      else if (child.localName = 'rateRatio') then
        element.rate := ParseRatio(child, path+'/rateRatio'){x.3}
      else if (child.localName = 'rateRange') then
        element.rate := ParseRange(child, path+'/rateRange'){x.3}
      else if (child.localName = 'rateQuantity') then
        element.rate := ParseQuantity(child, path+'/rateQuantity'){x.3}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDosageDoseAndRate(xml : TXmlBuilder; name : String; elem : TFhirDosageDoseAndRate);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDosageDoseAndRateChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDosageDoseAndRateChildren(xml : TXmlBuilder; elem : TFhirDosageDoseAndRate);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.dose is TFhirRange) {6} then
    ComposeRange(xml, 'doseRange', TFhirRange(elem.dose))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.dose is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'doseQuantity', TFhirQuantity(elem.dose));
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.rate is TFhirRatio) {6} then
    ComposeRatio(xml, 'rateRatio', TFhirRatio(elem.rate))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.rate is TFhirRange) {6} then
    ComposeRange(xml, 'rateRange', TFhirRange(elem.rate))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.rate is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'rateQuantity', TFhirQuantity(elem.rate));
end;

function TFHIRXmlParser.ParseDosage(element : TMXmlElement; path : string) : TFhirDosage;
var
  child : TMXmlElement;
begin
  result := TFhirDosage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDosageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDosageChild(element : TFhirDosage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParseInteger(child, path+'/sequence') {b}
      else if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if (child.localName = 'additionalInstruction') then
        element.additionalInstructionList.Add(ParseCodeableConcept(child, path+'/additionalInstruction')){y.2}
      else if (child.localName = 'patientInstruction') then
        element.patientInstructionElement := ParseString(child, path+'/patientInstruction') {b}
      else if (child.localName = 'timing') then
        element.timing := ParseTiming(child, path+'/timing') {b}
      else if (child.localName = 'asNeededCodeableConcept') then
        element.asNeeded := ParseCodeableConcept(child, path+'/asNeededCodeableConcept'){x.3}
      else if (child.localName = 'asNeededBoolean') then
        element.asNeeded := ParseBoolean(child, path+'/asNeededBoolean'){x.3}
      else if (child.localName = 'site') then
        element.site := ParseCodeableConcept(child, path+'/site') {b}
      else if (child.localName = 'route') then
        element.route := ParseCodeableConcept(child, path+'/route') {b}
      else if (child.localName = 'method') then
        element.method := ParseCodeableConcept(child, path+'/method') {b}
      else if (child.localName = 'doseAndRate') then
        element.doseAndRateList.Add(ParseDosageDoseAndRate(child, path+'/doseAndRate')){y.2}
      else if (child.localName = 'maxDosePerPeriod') then
        element.maxDosePerPeriod := ParseRatio(child, path+'/maxDosePerPeriod') {b}
      else if (child.localName = 'maxDosePerAdministration') then
        element.maxDosePerAdministration := ParseQuantity(child, path+'/maxDosePerAdministration') {b}
      else if (child.localName = 'maxDosePerLifetime') then
        element.maxDosePerLifetime := ParseQuantity(child, path+'/maxDosePerLifetime') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDosage(xml : TXmlBuilder; name : String; elem : TFhirDosage);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDosageChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDosageChildren(xml : TXmlBuilder; elem : TFhirDosage);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInteger(xml, 'sequence', elem.sequenceElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'text', elem.textElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.additionalInstructionList.Count - 1 do
      ComposeCodeableConcept(xml, 'additionalInstruction', elem.additionalInstructionList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'patientInstruction', elem.patientInstructionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeTiming(xml, 'timing', elem.timing);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.asNeeded is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'asNeededCodeableConcept', TFhirCodeableConcept(elem.asNeeded))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.asNeeded is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'asNeededBoolean', TFhirBoolean(elem.asNeeded));
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(xml, 'site', elem.site);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(xml, 'route', elem.route);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(xml, 'method', elem.method);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.doseAndRateList.Count - 1 do
      ComposeDosageDoseAndRate(xml, 'doseAndRate', elem.doseAndRateList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeRatio(xml, 'maxDosePerPeriod', elem.maxDosePerPeriod);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(xml, 'maxDosePerAdministration', elem.maxDosePerAdministration);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(xml, 'maxDosePerLifetime', elem.maxDosePerLifetime);{x.2a}
end;

function TFHIRXmlParser.ParseMoney(element : TMXmlElement; path : string) : TFhirMoney;
var
  child : TMXmlElement;
begin
  result := TFhirMoney.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMoneyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMoneyChild(element : TFhirMoney; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'value') then
        element.valueElement := ParseDecimal(child, path+'/value') {b}
      else if (child.localName = 'currency') then
        element.currencyElement := ParseCode(child, path+'/currency') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMoney(xml : TXmlBuilder; name : String; elem : TFhirMoney);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMoneyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMoneyChildren(xml : TXmlBuilder; elem : TFhirMoney);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimal(xml, 'value', elem.valueElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCode(xml, 'currency', elem.currencyElement);{x.2b}
end;

function TFHIRXmlParser.ParseMarketingStatus(element : TMXmlElement; path : string) : TFhirMarketingStatus;
var
  child : TMXmlElement;
begin
  result := TFhirMarketingStatus.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMarketingStatusChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMarketingStatusChild(element : TFhirMarketingStatus; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'country') then
        element.country := ParseCodeableConcept(child, path+'/country') {b}
      else if (child.localName = 'jurisdiction') then
        element.jurisdiction := ParseCodeableConcept(child, path+'/jurisdiction') {b}
      else if (child.localName = 'status') then
        element.status := ParseCodeableConcept(child, path+'/status') {b}
      else if (child.localName = 'dateRange') then
        element.dateRange := ParsePeriod(child, path+'/dateRange') {b}
      else if (child.localName = 'restoreDate') then
        element.restoreDateElement := ParseDateTime(child, path+'/restoreDate') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMarketingStatus(xml : TXmlBuilder; name : String; elem : TFhirMarketingStatus);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMarketingStatusChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMarketingStatusChildren(xml : TXmlBuilder; elem : TFhirMarketingStatus);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'country', elem.country);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdiction);{x.2a}
  ComposeCodeableConcept(xml, 'status', elem.status);{x.2a}
  ComposePeriod(xml, 'dateRange', elem.dateRange);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTime(xml, 'restoreDate', elem.restoreDateElement);{x.2b}
end;

function TFHIRXmlParser.ParseIdentifier(element : TMXmlElement; path : string) : TFhirIdentifier;
var
  child : TMXmlElement;
begin
  result := TFhirIdentifier.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseIdentifierChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseIdentifierChild(element : TFhirIdentifier; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'use') then
        element.useElement := ParseEnum(CODES_TFhirIdentifierUseEnum, SYSTEMS_TFhirIdentifierUseEnum, path+'/use', child){1a}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'system') then
        element.systemElement := ParseUri(child, path+'/system') {b}
      else if (child.localName = 'value') then
        element.valueElement := ParseString(child, path+'/value') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'assigner') then
        element.assigner := ParseReference{TFhirOrganization}(child, path+'/assigner') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeIdentifier(xml : TXmlBuilder; name : String; elem : TFhirIdentifier);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeIdentifierChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeIdentifierChildren(xml : TXmlBuilder; elem : TFhirIdentifier);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnum(xml, 'use', elem.UseElement, CODES_TFhirIdentifierUseEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUri(xml, 'system', elem.systemElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'value', elem.valueElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeReference{TFhirOrganization}(xml, 'assigner', elem.assigner);{x.2a}
end;

function TFHIRXmlParser.ParseSubstanceAmountReferenceRange(element : TMXmlElement; path : string) : TFhirSubstanceAmountReferenceRange;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceAmountReferenceRange.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceAmountReferenceRangeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceAmountReferenceRangeChild(element : TFhirSubstanceAmountReferenceRange; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'lowLimit') then
        element.lowLimit := ParseQuantity(child, path+'/lowLimit') {b}
      else if (child.localName = 'highLimit') then
        element.highLimit := ParseQuantity(child, path+'/highLimit') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceAmountReferenceRange(xml : TXmlBuilder; name : String; elem : TFhirSubstanceAmountReferenceRange);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceAmountReferenceRangeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceAmountReferenceRangeChildren(xml : TXmlBuilder; elem : TFhirSubstanceAmountReferenceRange);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'lowLimit', elem.lowLimit);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'highLimit', elem.highLimit);{x.2a}
end;

function TFHIRXmlParser.ParseSubstanceAmount(element : TMXmlElement; path : string) : TFhirSubstanceAmount;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceAmount.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceAmountChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceAmountChild(element : TFhirSubstanceAmount; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'amountQuantity') then
        element.amount := ParseQuantity(child, path+'/amountQuantity'){x.3}
      else if (child.localName = 'amountRange') then
        element.amount := ParseRange(child, path+'/amountRange'){x.3}
      else if (child.localName = 'amountString') then
        element.amount := ParseString(child, path+'/amountString'){x.3}
      else if (child.localName = 'amountType') then
        element.amountType := ParseCodeableConcept(child, path+'/amountType') {b}
      else if (child.localName = 'amountText') then
        element.amountTextElement := ParseString(child, path+'/amountText') {b}
      else if (child.localName = 'referenceRange') then
        element.referenceRange := ParseSubstanceAmountReferenceRange(child, path+'/referenceRange') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceAmount(xml : TXmlBuilder; name : String; elem : TFhirSubstanceAmount);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceAmountChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceAmountChildren(xml : TXmlBuilder; elem : TFhirSubstanceAmount);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.amount is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'amountQuantity', TFhirQuantity(elem.amount))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.amount is TFhirRange) {6} then
    ComposeRange(xml, 'amountRange', TFhirRange(elem.amount))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.amount is TFhirString) {6} then
    ComposeString(xml, 'amountString', TFhirString(elem.amount));
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(xml, 'amountType', elem.amountType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'amountText', elem.amountTextElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeSubstanceAmountReferenceRange(xml, 'referenceRange', elem.referenceRange);{x.2a}
end;

function TFHIRXmlParser.ParseCoding(element : TMXmlElement; path : string) : TFhirCoding;
var
  child : TMXmlElement;
begin
  result := TFhirCoding.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodingChild(element : TFhirCoding; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'system') then
        element.systemElement := ParseUri(child, path+'/system') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if (child.localName = 'display') then
        element.displayElement := ParseString(child, path+'/display') {b}
      else if (child.localName = 'userSelected') then
        element.userSelectedElement := ParseBoolean(child, path+'/userSelected') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoding(xml : TXmlBuilder; name : String; elem : TFhirCoding);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCodingChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCodingChildren(xml : TXmlBuilder; elem : TFhirCoding);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUri(xml, 'system', elem.systemElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCode(xml, 'code', elem.codeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'display', elem.displayElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBoolean(xml, 'userSelected', elem.userSelectedElement);{x.2b}
end;

function TFHIRXmlParser.ParseSampledData(element : TMXmlElement; path : string) : TFhirSampledData;
var
  child : TMXmlElement;
begin
  result := TFhirSampledData.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSampledDataChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSampledDataChild(element : TFhirSampledData; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'origin') then
        element.origin := ParseQuantity(child, path+'/origin') {b}
      else if (child.localName = 'period') then
        element.periodElement := ParseDecimal(child, path+'/period') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'lowerLimit') then
        element.lowerLimitElement := ParseDecimal(child, path+'/lowerLimit') {b}
      else if (child.localName = 'upperLimit') then
        element.upperLimitElement := ParseDecimal(child, path+'/upperLimit') {b}
      else if (child.localName = 'dimensions') then
        element.dimensionsElement := ParsePositiveInt(child, path+'/dimensions') {b}
      else if (child.localName = 'data') then
        element.dataElement := ParseString(child, path+'/data') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSampledData(xml : TXmlBuilder; name : String; elem : TFhirSampledData);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSampledDataChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSampledDataChildren(xml : TXmlBuilder; elem : TFhirSampledData);
begin
  composeElementChildren(xml, elem);
  ComposeQuantity(xml, 'origin', elem.origin);{x.2a}
  ComposeDecimal(xml, 'period', elem.periodElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimal(xml, 'lowerLimit', elem.lowerLimitElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimal(xml, 'upperLimit', elem.upperLimitElement);{x.2b}
  ComposePositiveInt(xml, 'dimensions', elem.dimensionsElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'data', elem.dataElement);{x.2b}
end;

function TFHIRXmlParser.ParsePopulation(element : TMXmlElement; path : string) : TFhirPopulation;
var
  child : TMXmlElement;
begin
  result := TFhirPopulation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePopulationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePopulationChild(element : TFhirPopulation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'ageRange') then
        element.age := ParseRange(child, path+'/ageRange'){x.3}
      else if (child.localName = 'ageCodeableConcept') then
        element.age := ParseCodeableConcept(child, path+'/ageCodeableConcept'){x.3}
      else if (child.localName = 'gender') then
        element.gender := ParseCodeableConcept(child, path+'/gender') {b}
      else if (child.localName = 'race') then
        element.race := ParseCodeableConcept(child, path+'/race') {b}
      else if (child.localName = 'physiologicalCondition') then
        element.physiologicalCondition := ParseCodeableConcept(child, path+'/physiologicalCondition') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePopulation(xml : TXmlBuilder; name : String; elem : TFhirPopulation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePopulationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePopulationChildren(xml : TXmlBuilder; elem : TFhirPopulation);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.age is TFhirRange) {6} then
    ComposeRange(xml, 'ageRange', TFhirRange(elem.age))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.age is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'ageCodeableConcept', TFhirCodeableConcept(elem.age));
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(xml, 'gender', elem.gender);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(xml, 'race', elem.race);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(xml, 'physiologicalCondition', elem.physiologicalCondition);{x.2a}
end;

function TFHIRXmlParser.ParseRatio(element : TMXmlElement; path : string) : TFhirRatio;
var
  child : TMXmlElement;
begin
  result := TFhirRatio.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRatioChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRatioChild(element : TFhirRatio; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'numerator') then
        element.numerator := ParseQuantity(child, path+'/numerator') {b}
      else if (child.localName = 'denominator') then
        element.denominator := ParseQuantity(child, path+'/denominator') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRatio(xml : TXmlBuilder; name : String; elem : TFhirRatio);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeRatioChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRatioChildren(xml : TXmlBuilder; elem : TFhirRatio);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(xml, 'numerator', elem.numerator);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(xml, 'denominator', elem.denominator);{x.2a}
end;

function TFHIRXmlParser.ParseReference(element : TMXmlElement; path : string) : TFhirReference;
var
  child : TMXmlElement;
begin
  result := TFhirReference.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseReferenceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseReferenceChild(element : TFhirReference; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'reference') then
        element.referenceElement := ParseString(child, path+'/reference') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseUri(child, path+'/type') {b}
      else if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'display') then
        element.displayElement := ParseString(child, path+'/display') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeReference(xml : TXmlBuilder; name : String; elem : TFhirReference);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeReferenceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeReferenceChildren(xml : TXmlBuilder; elem : TFhirReference);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'reference', elem.referenceElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUri(xml, 'type', elem.type_Element);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'display', elem.displayElement);{x.2b}
end;

function TFHIRXmlParser.ParseTriggerDefinition(element : TMXmlElement; path : string) : TFhirTriggerDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirTriggerDefinition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTriggerDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTriggerDefinitionChild(element : TFhirTriggerDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirTriggerTypeEnum, SYSTEMS_TFhirTriggerTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'timingTiming') then
        element.timing := ParseTiming(child, path+'/timingTiming'){x.3}
      else if (child.localName = 'timingReference') then
        element.timing := ParseReference(child, path+'/timingReference') {a}
      else if (child.localName = 'timingDate') then
        element.timing := ParseDate(child, path+'/timingDate'){x.3}
      else if (child.localName = 'timingDateTime') then
        element.timing := ParseDateTime(child, path+'/timingDateTime'){x.3}
      else if (child.localName = 'data') then
        element.dataList.Add(ParseDataRequirement(child, path+'/data')){y.2}
      else if (child.localName = 'condition') then
        element.condition := ParseExpression(child, path+'/condition') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTriggerDefinition(xml : TXmlBuilder; name : String; elem : TFhirTriggerDefinition);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTriggerDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTriggerDefinitionChildren(xml : TXmlBuilder; elem : TFhirTriggerDefinition);
var
  i : integer;
begin
  composeElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirTriggerTypeEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.timing is TFhirTiming) {6} then
    ComposeTiming(xml, 'timingTiming', TFhirTiming(elem.timing))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.timing is TFhirReference) {2} then
    ComposeReference(xml, 'timingReference', TFhirReference(elem.timing))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.timing is TFhirDate) {6} then
    ComposeDate(xml, 'timingDate', TFhirDate(elem.timing))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.timing is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timingDateTime', TFhirDateTime(elem.timing));
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.dataList.Count - 1 do
      ComposeDataRequirement(xml, 'data', elem.dataList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeExpression(xml, 'condition', elem.condition);{x.2a}
end;

function TFHIRXmlParser.ParsePeriod(element : TMXmlElement; path : string) : TFhirPeriod;
var
  child : TMXmlElement;
begin
  result := TFhirPeriod.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePeriodChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePeriodChild(element : TFhirPeriod; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'start') then
        element.startElement := ParseDateTime(child, path+'/start') {b}
      else if (child.localName = 'end') then
        element.end_Element := ParseDateTime(child, path+'/end') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePeriod(xml : TXmlBuilder; name : String; elem : TFhirPeriod);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePeriodChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePeriodChildren(xml : TXmlBuilder; elem : TFhirPeriod);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTime(xml, 'start', elem.startElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTime(xml, 'end', elem.end_Element);{x.2b}
end;

function TFHIRXmlParser.ParseQuantity(element : TMXmlElement; path : string) : TFhirQuantity;
var
  child : TMXmlElement;
begin
  result := TFhirQuantity.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuantityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuantityChild(element : TFhirQuantity; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'value') then
        element.valueElement := ParseDecimal(child, path+'/value') {b}
      else if (child.localName = 'comparator') then
        element.comparatorElement := ParseEnum(CODES_TFhirQuantityComparatorEnum, SYSTEMS_TFhirQuantityComparatorEnum, path+'/comparator', child){1a}
      else if (child.localName = 'unit') then
        element.unit_Element := ParseString(child, path+'/unit') {b}
      else if (child.localName = 'system') then
        element.systemElement := ParseUri(child, path+'/system') {b}
      else if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuantity(xml : TXmlBuilder; name : String; elem : TFhirQuantity);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeQuantityChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeQuantityChildren(xml : TXmlBuilder; elem : TFhirQuantity);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimal(xml, 'value', elem.valueElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnum(xml, 'comparator', elem.ComparatorElement, CODES_TFhirQuantityComparatorEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'unit', elem.unit_Element);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUri(xml, 'system', elem.systemElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCode(xml, 'code', elem.codeElement);{x.2b}
end;

function TFHIRXmlParser.ParseRange(element : TMXmlElement; path : string) : TFhirRange;
var
  child : TMXmlElement;
begin
  result := TFhirRange.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRangeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRangeChild(element : TFhirRange; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'low') then
        element.low := ParseQuantity(child, path+'/low') {b}
      else if (child.localName = 'high') then
        element.high := ParseQuantity(child, path+'/high') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRange(xml : TXmlBuilder; name : String; elem : TFhirRange);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeRangeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRangeChildren(xml : TXmlBuilder; elem : TFhirRange);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(xml, 'low', elem.low);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(xml, 'high', elem.high);{x.2a}
end;

function TFHIRXmlParser.ParseRelatedArtifact(element : TMXmlElement; path : string) : TFhirRelatedArtifact;
var
  child : TMXmlElement;
begin
  result := TFhirRelatedArtifact.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRelatedArtifactChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRelatedArtifactChild(element : TFhirRelatedArtifact; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirRelatedArtifactTypeEnum, SYSTEMS_TFhirRelatedArtifactTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'label') then
        element.label_Element := ParseString(child, path+'/label') {b}
      else if (child.localName = 'display') then
        element.displayElement := ParseString(child, path+'/display') {b}
      else if (child.localName = 'citation') then
        element.citationElement := ParseMarkdown(child, path+'/citation') {b}
      else if (child.localName = 'url') then
        element.urlElement := ParseUrl(child, path+'/url') {b}
      else if (child.localName = 'document') then
        element.document := ParseAttachment(child, path+'/document') {b}
      else if (child.localName = 'resource') then
        element.resourceElement := ParseCanonical(child, path+'/resource') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRelatedArtifact(xml : TXmlBuilder; name : String; elem : TFhirRelatedArtifact);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeRelatedArtifactChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRelatedArtifactChildren(xml : TXmlBuilder; elem : TFhirRelatedArtifact);
begin
  composeElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirRelatedArtifactTypeEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'label', elem.label_Element);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'display', elem.displayElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdown(xml, 'citation', elem.citationElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUrl(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeAttachment(xml, 'document', elem.document);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCanonical(xml, 'resource', elem.resourceElement);{x.2b}
end;

function TFHIRXmlParser.ParseAnnotation(element : TMXmlElement; path : string) : TFhirAnnotation;
var
  child : TMXmlElement;
begin
  result := TFhirAnnotation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAnnotationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAnnotationChild(element : TFhirAnnotation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'authorReference') then
        element.author := ParseReference(child, path+'/authorReference') {a}
      else if (child.localName = 'authorString') then
        element.author := ParseString(child, path+'/authorString'){x.3}
      else if (child.localName = 'time') then
        element.timeElement := ParseDateTime(child, path+'/time') {b}
      else if (child.localName = 'text') then
        element.textElement := ParseMarkdown(child, path+'/text') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAnnotation(xml : TXmlBuilder; name : String; elem : TFhirAnnotation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAnnotationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAnnotationChildren(xml : TXmlBuilder; elem : TFhirAnnotation);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.author is TFhirReference) {2} then
    ComposeReference(xml, 'authorReference', TFhirReference(elem.author))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.author is TFhirString) {6} then
    ComposeString(xml, 'authorString', TFhirString(elem.author));
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDateTime(xml, 'time', elem.timeElement);{x.2b}
  ComposeMarkdown(xml, 'text', elem.textElement);{x.2b}
end;

function TFHIRXmlParser.ParseProductShelfLife(element : TMXmlElement; path : string) : TFhirProductShelfLife;
var
  child : TMXmlElement;
begin
  result := TFhirProductShelfLife.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProductShelfLifeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProductShelfLifeChild(element : TFhirProductShelfLife; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'period') then
        element.period := ParseQuantity(child, path+'/period') {b}
      else if (child.localName = 'specialPrecautionsForStorage') then
        element.specialPrecautionsForStorageList.Add(ParseCodeableConcept(child, path+'/specialPrecautionsForStorage')){y.2}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProductShelfLife(xml : TXmlBuilder; name : String; elem : TFhirProductShelfLife);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeProductShelfLifeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeProductShelfLifeChildren(xml : TXmlBuilder; elem : TFhirProductShelfLife);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  ComposeQuantity(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.specialPrecautionsForStorageList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialPrecautionsForStorage', elem.specialPrecautionsForStorageList[i]);
end;

function TFHIRXmlParser.ParseContactDetail(element : TMXmlElement; path : string) : TFhirContactDetail;
var
  child : TMXmlElement;
begin
  result := TFhirContactDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContactDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContactDetailChild(element : TFhirContactDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'telecom') then
        element.telecomList.Add(ParseContactPoint(child, path+'/telecom')){y.2}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContactDetail(xml : TXmlBuilder; name : String; elem : TFhirContactDetail);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContactDetailChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContactDetailChildren(xml : TXmlBuilder; elem : TFhirContactDetail);
var
  i : integer;
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', elem.telecomList[i]);
end;

function TFHIRXmlParser.ParseExpression(element : TMXmlElement; path : string) : TFhirExpression;
var
  child : TMXmlElement;
begin
  result := TFhirExpression.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExpressionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExpressionChild(element : TFhirExpression; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseId(child, path+'/name') {b}
      else if (child.localName = 'language') then
        element.languageElement := ParseCode(child, path+'/language') {b}
      else if (child.localName = 'expression') then
        element.expressionElement := ParseString(child, path+'/expression') {b}
      else if (child.localName = 'reference') then
        element.referenceElement := ParseUri(child, path+'/reference') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExpression(xml : TXmlBuilder; name : String; elem : TFhirExpression);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExpressionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExpressionChildren(xml : TXmlBuilder; elem : TFhirExpression);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeId(xml, 'name', elem.nameElement);{x.2b}
  ComposeCode(xml, 'language', elem.languageElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'expression', elem.expressionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUri(xml, 'reference', elem.referenceElement);{x.2b}
end;

function TFHIRXmlParser.ParseUsageContext(element : TMXmlElement; path : string) : TFhirUsageContext;
var
  child : TMXmlElement;
begin
  result := TFhirUsageContext.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseUsageContextChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseUsageContextChild(element : TFhirUsageContext; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCoding(child, path+'/code') {b}
      else if (child.localName = 'valueCodeableConcept') then
        element.value := ParseCodeableConcept(child, path+'/valueCodeableConcept'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueRange') then
        element.value := ParseRange(child, path+'/valueRange'){x.3}
      else if (child.localName = 'valueReference') then
        element.value := ParseReference(child, path+'/valueReference') {a}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeUsageContext(xml : TXmlBuilder; name : String; elem : TFhirUsageContext);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeUsageContextChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeUsageContextChildren(xml : TXmlBuilder; elem : TFhirUsageContext);
begin
  composeElementChildren(xml, elem);
  ComposeCoding(xml, 'code', elem.code);{x.2a}
  if (elem.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(elem.value))
  else if (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (elem.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(elem.value))
  else if (elem.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(elem.value));
end;

function TFHIRXmlParser.ParseSignature(element : TMXmlElement; path : string) : TFhirSignature;
var
  child : TMXmlElement;
begin
  result := TFhirSignature.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSignatureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSignatureChild(element : TFhirSignature; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_List.Add(ParseCoding(child, path+'/type')){y.2}
      else if (child.localName = 'when') then
        element.whenElement := ParseInstant(child, path+'/when') {b}
      else if (child.localName = 'who') then
        element.who := ParseReference{TFhirPractitioner}(child, path+'/who') {b}
      else if (child.localName = 'onBehalfOf') then
        element.onBehalfOf := ParseReference{TFhirPractitioner}(child, path+'/onBehalfOf') {b}
      else if (child.localName = 'targetFormat') then
        element.targetFormatElement := ParseCode(child, path+'/targetFormat') {b}
      else if (child.localName = 'sigFormat') then
        element.sigFormatElement := ParseCode(child, path+'/sigFormat') {b}
      else if (child.localName = 'data') then
        element.dataElement := ParseBase64Binary(child, path+'/data') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSignature(xml : TXmlBuilder; name : String; elem : TFhirSignature);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSignatureChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSignatureChildren(xml : TXmlBuilder; elem : TFhirSignature);
var
  i : integer;
begin
  composeElementChildren(xml, elem);
  for i := 0 to elem.type_List.Count - 1 do
      ComposeCoding(xml, 'type', elem.type_List[i]);
  ComposeInstant(xml, 'when', elem.whenElement);{x.2b}
  ComposeReference{TFhirPractitioner}(xml, 'who', elem.who);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'onBehalfOf', elem.onBehalfOf);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCode(xml, 'targetFormat', elem.targetFormatElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCode(xml, 'sigFormat', elem.sigFormatElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBase64Binary(xml, 'data', elem.dataElement);{x.2b}
end;

function TFHIRXmlParser.ParseProdCharacteristic(element : TMXmlElement; path : string) : TFhirProdCharacteristic;
var
  child : TMXmlElement;
begin
  result := TFhirProdCharacteristic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProdCharacteristicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProdCharacteristicChild(element : TFhirProdCharacteristic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'height') then
        element.height := ParseQuantity(child, path+'/height') {b}
      else if (child.localName = 'width') then
        element.width := ParseQuantity(child, path+'/width') {b}
      else if (child.localName = 'depth') then
        element.depth := ParseQuantity(child, path+'/depth') {b}
      else if (child.localName = 'weight') then
        element.weight := ParseQuantity(child, path+'/weight') {b}
      else if (child.localName = 'nominalVolume') then
        element.nominalVolume := ParseQuantity(child, path+'/nominalVolume') {b}
      else if (child.localName = 'externalDiameter') then
        element.externalDiameter := ParseQuantity(child, path+'/externalDiameter') {b}
      else if (child.localName = 'shape') then
        element.shapeElement := ParseString(child, path+'/shape') {b}
      else if (child.localName = 'color') then
        element.colorList.Add(ParseString(child, path+'/color')){y.2}
      else if (child.localName = 'imprint') then
        element.imprintList.Add(ParseString(child, path+'/imprint')){y.2}
      else if (child.localName = 'image') then
        element.imageList.Add(ParseAttachment(child, path+'/image')){y.2}
      else if (child.localName = 'scoring') then
        element.scoring := ParseCodeableConcept(child, path+'/scoring') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProdCharacteristic(xml : TXmlBuilder; name : String; elem : TFhirProdCharacteristic);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeProdCharacteristicChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeProdCharacteristicChildren(xml : TXmlBuilder; elem : TFhirProdCharacteristic);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(xml, 'height', elem.height);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(xml, 'width', elem.width);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(xml, 'depth', elem.depth);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(xml, 'weight', elem.weight);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(xml, 'nominalVolume', elem.nominalVolume);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeQuantity(xml, 'externalDiameter', elem.externalDiameter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'shape', elem.shapeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.colorList.Count - 1 do
      ComposeString(xml, 'color', elem.colorList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.imprintList.Count - 1 do
      ComposeString(xml, 'imprint', elem.imprintList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.imageList.Count - 1 do
      ComposeAttachment(xml, 'image', elem.imageList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(xml, 'scoring', elem.scoring);{x.2a}
end;

function TFHIRXmlParser.ParseCodeableConcept(element : TMXmlElement; path : string) : TFhirCodeableConcept;
var
  child : TMXmlElement;
begin
  result := TFhirCodeableConcept.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeableConceptChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeableConceptChild(element : TFhirCodeableConcept; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'coding') then
        element.codingList.Add(ParseCoding(child, path+'/coding')){y.2}
      else if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeableConcept(xml : TXmlBuilder; name : String; elem : TFhirCodeableConcept);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCodeableConceptChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCodeableConceptChildren(xml : TXmlBuilder; elem : TFhirCodeableConcept);
var
  i : integer;
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.codingList.Count - 1 do
      ComposeCoding(xml, 'coding', elem.codingList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'text', elem.textElement);{x.2b}
end;

function TFHIRXmlParser.ParseParameterDefinition(element : TMXmlElement; path : string) : TFhirParameterDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirParameterDefinition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseParameterDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseParameterDefinitionChild(element : TFhirParameterDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseCode(child, path+'/name') {b}
      else if (child.localName = 'use') then
        element.useElement := ParseEnum(CODES_TFhirOperationParameterUseEnum, SYSTEMS_TFhirOperationParameterUseEnum, path+'/use', child){1a}
      else if (child.localName = 'min') then
        element.minElement := ParseInteger(child, path+'/min') {b}
      else if (child.localName = 'max') then
        element.maxElement := ParseString(child, path+'/max') {b}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseString(child, path+'/documentation') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum, path+'/type', child){1a}
      else if (child.localName = 'profile') then
        element.profileElement := ParseCanonical(child, path+'/profile') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeParameterDefinition(xml : TXmlBuilder; name : String; elem : TFhirParameterDefinition);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeParameterDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeParameterDefinitionChildren(xml : TXmlBuilder; elem : TFhirParameterDefinition);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCode(xml, 'name', elem.nameElement);{x.2b}
  ComposeEnum(xml, 'use', elem.UseElement, CODES_TFhirOperationParameterUseEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInteger(xml, 'min', elem.minElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'max', elem.maxElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'documentation', elem.documentationElement);{x.2b}
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCanonical(xml, 'profile', elem.profileElement);{x.2b}
end;

function TFHIRXmlParser.ParseContactPoint(element : TMXmlElement; path : string) : TFhirContactPoint;
var
  child : TMXmlElement;
begin
  result := TFhirContactPoint.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContactPointChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContactPointChild(element : TFhirContactPoint; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'system') then
        element.systemElement := ParseEnum(CODES_TFhirContactPointSystemEnum, SYSTEMS_TFhirContactPointSystemEnum, path+'/system', child){1a}
      else if (child.localName = 'value') then
        element.valueElement := ParseString(child, path+'/value') {b}
      else if (child.localName = 'use') then
        element.useElement := ParseEnum(CODES_TFhirContactPointUseEnum, SYSTEMS_TFhirContactPointUseEnum, path+'/use', child){1a}
      else if (child.localName = 'rank') then
        element.rankElement := ParsePositiveInt(child, path+'/rank') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContactPoint(xml : TXmlBuilder; name : String; elem : TFhirContactPoint);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContactPointChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContactPointChildren(xml : TXmlBuilder; elem : TFhirContactPoint);
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnum(xml, 'system', elem.SystemElement, CODES_TFhirContactPointSystemEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'value', elem.valueElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnum(xml, 'use', elem.UseElement, CODES_TFhirContactPointUseEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePositiveInt(xml, 'rank', elem.rankElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParseHumanName(element : TMXmlElement; path : string) : TFhirHumanName;
var
  child : TMXmlElement;
begin
  result := TFhirHumanName.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseHumanNameChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseHumanNameChild(element : TFhirHumanName; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'use') then
        element.useElement := ParseEnum(CODES_TFhirNameUseEnum, SYSTEMS_TFhirNameUseEnum, path+'/use', child){1a}
      else if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if (child.localName = 'family') then
        element.familyElement := ParseString(child, path+'/family') {b}
      else if (child.localName = 'given') then
        element.givenList.Add(ParseString(child, path+'/given')){y.2}
      else if (child.localName = 'prefix') then
        element.prefixList.Add(ParseString(child, path+'/prefix')){y.2}
      else if (child.localName = 'suffix') then
        element.suffixList.Add(ParseString(child, path+'/suffix')){y.2}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeHumanName(xml : TXmlBuilder; name : String; elem : TFhirHumanName);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeHumanNameChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeHumanNameChildren(xml : TXmlBuilder; elem : TFhirHumanName);
var
  i : integer;
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnum(xml, 'use', elem.UseElement, CODES_TFhirNameUseEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'text', elem.textElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'family', elem.familyElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.givenList.Count - 1 do
      ComposeString(xml, 'given', elem.givenList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.prefixList.Count - 1 do
      ComposeString(xml, 'prefix', elem.prefixList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.suffixList.Count - 1 do
      ComposeString(xml, 'suffix', elem.suffixList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParseMeta(element : TMXmlElement; path : string) : TFhirMeta;
var
  child : TMXmlElement;
begin
  result := TFhirMeta.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMetaChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMetaChild(element : TFhirMeta; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'versionId') then
        element.versionIdElement := ParseId(child, path+'/versionId') {b}
      else if (child.localName = 'lastUpdated') then
        element.lastUpdatedElement := ParseInstant(child, path+'/lastUpdated') {b}
      else if (child.localName = 'source') then
        element.sourceElement := ParseUri(child, path+'/source') {b}
      else if (child.localName = 'profile') then
        element.profileList.Add(ParseCanonical(child, path+'/profile')){y.2}
      else if (child.localName = 'security') then
        element.securityList.Add(ParseCoding(child, path+'/security')){y.2}
      else if (child.localName = 'tag') then
        element.tagList.Add(ParseCoding(child, path+'/tag')){y.2}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeta(xml : TXmlBuilder; name : String; elem : TFhirMeta);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMetaChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMetaChildren(xml : TXmlBuilder; elem : TFhirMeta);
var
  i : integer;
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeId(xml, 'versionId', elem.versionIdElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstant(xml, 'lastUpdated', elem.lastUpdatedElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUri(xml, 'source', elem.sourceElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.profileList.Count - 1 do
      ComposeCanonical(xml, 'profile', elem.profileList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.securityList.Count - 1 do
      ComposeCoding(xml, 'security', elem.securityList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.tagList.Count - 1 do
      ComposeCoding(xml, 'tag', elem.tagList[i]);
end;

function TFHIRXmlParser.ParseAddress(element : TMXmlElement; path : string) : TFhirAddress;
var
  child : TMXmlElement;
begin
  result := TFhirAddress.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAddressChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAddressChild(element : TFhirAddress; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'use') then
        element.useElement := ParseEnum(CODES_TFhirAddressUseEnum, SYSTEMS_TFhirAddressUseEnum, path+'/use', child){1a}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirAddressTypeEnum, SYSTEMS_TFhirAddressTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if (child.localName = 'line') then
        element.lineList.Add(ParseString(child, path+'/line')){y.2}
      else if (child.localName = 'city') then
        element.cityElement := ParseString(child, path+'/city') {b}
      else if (child.localName = 'district') then
        element.districtElement := ParseString(child, path+'/district') {b}
      else if (child.localName = 'state') then
        element.stateElement := ParseString(child, path+'/state') {b}
      else if (child.localName = 'postalCode') then
        element.postalCodeElement := ParseString(child, path+'/postalCode') {b}
      else if (child.localName = 'country') then
        element.countryElement := ParseString(child, path+'/country') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAddress(xml : TXmlBuilder; name : String; elem : TFhirAddress);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAddressChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAddressChildren(xml : TXmlBuilder; elem : TFhirAddress);
var
  i : integer;
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnum(xml, 'use', elem.UseElement, CODES_TFhirAddressUseEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirAddressTypeEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'text', elem.textElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.lineList.Count - 1 do
      ComposeString(xml, 'line', elem.lineList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'city', elem.cityElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'district', elem.districtElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'state', elem.stateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'postalCode', elem.postalCodeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'country', elem.countryElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParseElementDefinitionSlicing(element : TMXmlElement; path : string) : TFhirElementDefinitionSlicing;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionSlicing.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionSlicingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionSlicingChild(element : TFhirElementDefinitionSlicing; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'discriminator') then
        element.discriminatorList.Add(ParseElementDefinitionSlicingDiscriminator(child, path+'/discriminator')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'ordered') then
        element.orderedElement := ParseBoolean(child, path+'/ordered') {b}
      else if (child.localName = 'rules') then
        element.rulesElement := ParseEnum(CODES_TFhirResourceSlicingRulesEnum, SYSTEMS_TFhirResourceSlicingRulesEnum, path+'/rules', child){1a}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionSlicing(xml : TXmlBuilder; name : String; elem : TFhirElementDefinitionSlicing);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeElementDefinitionSlicingChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionSlicingChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionSlicing);
var
  i : integer;
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.discriminatorList.Count - 1 do
      ComposeElementDefinitionSlicingDiscriminator(xml, 'discriminator', elem.discriminatorList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'ordered', elem.orderedElement);{x.2b}
  ComposeEnum(xml, 'rules', elem.RulesElement, CODES_TFhirResourceSlicingRulesEnum);
end;

function TFHIRXmlParser.ParseElementDefinitionSlicingDiscriminator(element : TMXmlElement; path : string) : TFhirElementDefinitionSlicingDiscriminator;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionSlicingDiscriminator.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionSlicingDiscriminatorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionSlicingDiscriminatorChild(element : TFhirElementDefinitionSlicingDiscriminator; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirDiscriminatorTypeEnum, SYSTEMS_TFhirDiscriminatorTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'path') then
        element.pathElement := ParseString(child, path+'/path') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionSlicingDiscriminator(xml : TXmlBuilder; name : String; elem : TFhirElementDefinitionSlicingDiscriminator);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeElementDefinitionSlicingDiscriminatorChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionSlicingDiscriminatorChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionSlicingDiscriminator);
begin
  composeElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirDiscriminatorTypeEnum);
  ComposeString(xml, 'path', elem.pathElement);{x.2b}
end;

function TFHIRXmlParser.ParseElementDefinitionBase(element : TMXmlElement; path : string) : TFhirElementDefinitionBase;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionBase.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionBaseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionBaseChild(element : TFhirElementDefinitionBase; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        element.pathElement := ParseString(child, path+'/path') {b}
      else if (child.localName = 'min') then
        element.minElement := ParseUnsignedInt(child, path+'/min') {b}
      else if (child.localName = 'max') then
        element.maxElement := ParseString(child, path+'/max') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionBase(xml : TXmlBuilder; name : String; elem : TFhirElementDefinitionBase);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeElementDefinitionBaseChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionBaseChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionBase);
begin
  composeElementChildren(xml, elem);
  ComposeString(xml, 'path', elem.pathElement);{x.2b}
  ComposeUnsignedInt(xml, 'min', elem.minElement);{x.2b}
  ComposeString(xml, 'max', elem.maxElement);{x.2b}
end;

function TFHIRXmlParser.ParseElementDefinitionType(element : TMXmlElement; path : string) : TFhirElementDefinitionType;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionType.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionTypeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionTypeChild(element : TFhirElementDefinitionType; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseUri(child, path+'/code') {b}
      else if (child.localName = 'profile') then
        element.profileList.Add(ParseCanonical(child, path+'/profile')){y.2}
      else if (child.localName = 'targetProfile') then
        element.targetProfileList.Add(ParseCanonical(child, path+'/targetProfile')){y.2}
      else if (child.localName = 'aggregation') then
        element.aggregationList.Add(ParseEnum(CODES_TFhirResourceAggregationModeEnum, SYSTEMS_TFhirResourceAggregationModeEnum, path+'/aggregation', child)){y.1}
      else if (child.localName = 'versioning') then
        element.versioningElement := ParseEnum(CODES_TFhirReferenceVersionRulesEnum, SYSTEMS_TFhirReferenceVersionRulesEnum, path+'/versioning', child){1a}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionType(xml : TXmlBuilder; name : String; elem : TFhirElementDefinitionType);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeElementDefinitionTypeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionTypeChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionType);
var
  i : integer;
begin
  composeElementChildren(xml, elem);
  ComposeUri(xml, 'code', elem.codeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.profileList.Count - 1 do
      ComposeCanonical(xml, 'profile', elem.profileList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.targetProfileList.Count - 1 do
      ComposeCanonical(xml, 'targetProfile', elem.targetProfileList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.aggregationList.Count - 1 do
      ComposeEnum(xml, 'aggregation', elem.aggregationList[i], CODES_TFhirResourceAggregationModeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'versioning', elem.VersioningElement, CODES_TFhirReferenceVersionRulesEnum);
end;

function TFHIRXmlParser.ParseElementDefinitionExample(element : TMXmlElement; path : string) : TFhirElementDefinitionExample;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionExample.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionExampleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionExampleChild(element : TFhirElementDefinitionExample; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'label') then
        element.label_Element := ParseString(child, path+'/label') {b}
      else if (child.localName = 'valueCanonical') then
        element.value := ParseCanonical(child, path+'/valueCanonical'){x.3}
      else if (child.localName = 'valueCode') then
        element.value := ParseCode(child, path+'/valueCode'){x.3}
      else if (child.localName = 'valueId') then
        element.value := ParseId(child, path+'/valueId'){x.3}
      else if (child.localName = 'valueMarkdown') then
        element.value := ParseMarkdown(child, path+'/valueMarkdown'){x.3}
      else if (child.localName = 'valueOid') then
        element.value := ParseOid(child, path+'/valueOid'){x.3}
      else if (child.localName = 'valuePositiveInt') then
        element.value := ParsePositiveInt(child, path+'/valuePositiveInt'){x.3}
      else if (child.localName = 'valueUnsignedInt') then
        element.value := ParseUnsignedInt(child, path+'/valueUnsignedInt'){x.3}
      else if (child.localName = 'valueUrl') then
        element.value := ParseUrl(child, path+'/valueUrl'){x.3}
      else if (child.localName = 'valueUuid') then
        element.value := ParseUuid(child, path+'/valueUuid'){x.3}
      else if (child.localName = 'valueAddress') then
        element.value := ParseAddress(child, path+'/valueAddress'){x.3}
      else if (child.localName = 'valueAge') then
        element.value := ParseAge(child, path+'/valueAge'){x.3}
      else if (child.localName = 'valueAnnotation') then
        element.value := ParseAnnotation(child, path+'/valueAnnotation'){x.3}
      else if (child.localName = 'valueAttachment') then
        element.value := ParseAttachment(child, path+'/valueAttachment'){x.3}
      else if (child.localName = 'valueCodeableConcept') then
        element.value := ParseCodeableConcept(child, path+'/valueCodeableConcept'){x.3}
      else if (child.localName = 'valueCoding') then
        element.value := ParseCoding(child, path+'/valueCoding'){x.3}
      else if (child.localName = 'valueContactPoint') then
        element.value := ParseContactPoint(child, path+'/valueContactPoint'){x.3}
      else if (child.localName = 'valueCount') then
        element.value := ParseCount(child, path+'/valueCount'){x.3}
      else if (child.localName = 'valueDistance') then
        element.value := ParseDistance(child, path+'/valueDistance'){x.3}
      else if (child.localName = 'valueDuration') then
        element.value := ParseDuration(child, path+'/valueDuration'){x.3}
      else if (child.localName = 'valueHumanName') then
        element.value := ParseHumanName(child, path+'/valueHumanName'){x.3}
      else if (child.localName = 'valueIdentifier') then
        element.value := ParseIdentifier(child, path+'/valueIdentifier'){x.3}
      else if (child.localName = 'valueMoney') then
        element.value := ParseMoney(child, path+'/valueMoney'){x.3}
      else if (child.localName = 'valuePeriod') then
        element.value := ParsePeriod(child, path+'/valuePeriod'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueRange') then
        element.value := ParseRange(child, path+'/valueRange'){x.3}
      else if (child.localName = 'valueRatio') then
        element.value := ParseRatio(child, path+'/valueRatio'){x.3}
      else if (child.localName = 'valueReference') then
        element.value := ParseReference(child, path+'/valueReference'){x.3}
      else if (child.localName = 'valueSampledData') then
        element.value := ParseSampledData(child, path+'/valueSampledData'){x.3}
      else if (child.localName = 'valueSignature') then
        element.value := ParseSignature(child, path+'/valueSignature'){x.3}
      else if (child.localName = 'valueTiming') then
        element.value := ParseTiming(child, path+'/valueTiming'){x.3}
      else if (child.localName = 'valueContactDetail') then
        element.value := ParseContactDetail(child, path+'/valueContactDetail'){x.3}
      else if (child.localName = 'valueContributor') then
        element.value := ParseContributor(child, path+'/valueContributor'){x.3}
      else if (child.localName = 'valueDataRequirement') then
        element.value := ParseDataRequirement(child, path+'/valueDataRequirement'){x.3}
      else if (child.localName = 'valueExpression') then
        element.value := ParseExpression(child, path+'/valueExpression'){x.3}
      else if (child.localName = 'valueParameterDefinition') then
        element.value := ParseParameterDefinition(child, path+'/valueParameterDefinition'){x.3}
      else if (child.localName = 'valueRelatedArtifact') then
        element.value := ParseRelatedArtifact(child, path+'/valueRelatedArtifact'){x.3}
      else if (child.localName = 'valueTriggerDefinition') then
        element.value := ParseTriggerDefinition(child, path+'/valueTriggerDefinition'){x.3}
      else if (child.localName = 'valueUsageContext') then
        element.value := ParseUsageContext(child, path+'/valueUsageContext'){x.3}
      else if (child.localName = 'valueDosage') then
        element.value := ParseDosage(child, path+'/valueDosage'){x.3}
      else if (child.localName = 'valueBase64Binary') then
        element.value := ParseBase64Binary(child, path+'/valueBase64Binary'){x.3}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueDate') then
        element.value := ParseDate(child, path+'/valueDate'){x.3}
      else if (child.localName = 'valueDateTime') then
        element.value := ParseDateTime(child, path+'/valueDateTime'){x.3}
      else if (child.localName = 'valueDecimal') then
        element.value := ParseDecimal(child, path+'/valueDecimal'){x.3}
      else if (child.localName = 'valueInstant') then
        element.value := ParseInstant(child, path+'/valueInstant'){x.3}
      else if (child.localName = 'valueInteger') then
        element.value := ParseInteger(child, path+'/valueInteger'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueTime') then
        element.value := ParseTime(child, path+'/valueTime'){x.3}
      else if (child.localName = 'valueUri') then
        element.value := ParseUri(child, path+'/valueUri'){x.3}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionExample(xml : TXmlBuilder; name : String; elem : TFhirElementDefinitionExample);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeElementDefinitionExampleChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionExampleChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionExample);
begin
  composeElementChildren(xml, elem);
  ComposeString(xml, 'label', elem.label_Element);{x.2b}
  if (elem.value is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'valueCanonical', TFhirCanonical(elem.value))
  else if (elem.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(elem.value))
  else if (elem.value is TFhirId) {6} then
    ComposeId(xml, 'valueId', TFhirId(elem.value))
  else if (elem.value is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'valueMarkdown', TFhirMarkdown(elem.value))
  else if (elem.value is TFhirOid) {6} then
    ComposeOid(xml, 'valueOid', TFhirOid(elem.value))
  else if (elem.value is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'valuePositiveInt', TFhirPositiveInt(elem.value))
  else if (elem.value is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'valueUnsignedInt', TFhirUnsignedInt(elem.value))
  else if (elem.value is TFhirUrl) {6} then
    ComposeUrl(xml, 'valueUrl', TFhirUrl(elem.value))
  else if (elem.value is TFhirUuid) {6} then
    ComposeUuid(xml, 'valueUuid', TFhirUuid(elem.value))
  else if (elem.value is TFhirAddress) {6} then
    ComposeAddress(xml, 'valueAddress', TFhirAddress(elem.value))
  else if (elem.value is TFhirAge) {6} then
    ComposeAge(xml, 'valueAge', TFhirAge(elem.value))
  else if (elem.value is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'valueAnnotation', TFhirAnnotation(elem.value))
  else if (elem.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(elem.value))
  else if (elem.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(elem.value))
  else if (elem.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(elem.value))
  else if (elem.value is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'valueContactPoint', TFhirContactPoint(elem.value))
  else if (elem.value is TFhirCount) {6} then
    ComposeCount(xml, 'valueCount', TFhirCount(elem.value))
  else if (elem.value is TFhirDistance) {6} then
    ComposeDistance(xml, 'valueDistance', TFhirDistance(elem.value))
  else if (elem.value is TFhirDuration) {6} then
    ComposeDuration(xml, 'valueDuration', TFhirDuration(elem.value))
  else if (elem.value is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'valueHumanName', TFhirHumanName(elem.value))
  else if (elem.value is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'valueIdentifier', TFhirIdentifier(elem.value))
  else if (elem.value is TFhirMoney) {6} then
    ComposeMoney(xml, 'valueMoney', TFhirMoney(elem.value))
  else if (elem.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(elem.value))
  else if (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (elem.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(elem.value))
  else if (elem.value is TFhirRatio) {6} then
    ComposeRatio(xml, 'valueRatio', TFhirRatio(elem.value))
  else if (elem.value is TFhirReference) {6} then
    ComposeReference(xml, 'valueReference', TFhirReference(elem.value))
  else if (elem.value is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'valueSampledData', TFhirSampledData(elem.value))
  else if (elem.value is TFhirSignature) {6} then
    ComposeSignature(xml, 'valueSignature', TFhirSignature(elem.value))
  else if (elem.value is TFhirTiming) {6} then
    ComposeTiming(xml, 'valueTiming', TFhirTiming(elem.value))
  else if (elem.value is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'valueContactDetail', TFhirContactDetail(elem.value))
  else if (elem.value is TFhirContributor) {6} then
    ComposeContributor(xml, 'valueContributor', TFhirContributor(elem.value))
  else if (elem.value is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'valueDataRequirement', TFhirDataRequirement(elem.value))
  else if (elem.value is TFhirExpression) {6} then
    ComposeExpression(xml, 'valueExpression', TFhirExpression(elem.value))
  else if (elem.value is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'valueParameterDefinition', TFhirParameterDefinition(elem.value))
  else if (elem.value is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'valueRelatedArtifact', TFhirRelatedArtifact(elem.value))
  else if (elem.value is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'valueTriggerDefinition', TFhirTriggerDefinition(elem.value))
  else if (elem.value is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'valueUsageContext', TFhirUsageContext(elem.value))
  else if (elem.value is TFhirDosage) {6} then
    ComposeDosage(xml, 'valueDosage', TFhirDosage(elem.value))
  else if (elem.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(elem.value))
  else if (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (elem.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(elem.value))
  else if (elem.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(elem.value))
  else if (elem.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(elem.value))
  else if (elem.value is TFhirInstant) {6} then
    ComposeInstant(xml, 'valueInstant', TFhirInstant(elem.value))
  else if (elem.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(elem.value))
  else if (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (elem.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(elem.value))
  else if (elem.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(elem.value));
end;

function TFHIRXmlParser.ParseElementDefinitionConstraint(element : TMXmlElement; path : string) : TFhirElementDefinitionConstraint;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionConstraint.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionConstraintChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionConstraintChild(element : TFhirElementDefinitionConstraint; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'key') then
        element.keyElement := ParseId(child, path+'/key') {b}
      else if (child.localName = 'requirements') then
        element.requirementsElement := ParseString(child, path+'/requirements') {b}
      else if (child.localName = 'severity') then
        element.severityElement := ParseEnum(CODES_TFhirConstraintSeverityEnum, SYSTEMS_TFhirConstraintSeverityEnum, path+'/severity', child){1a}
      else if (child.localName = 'human') then
        element.humanElement := ParseString(child, path+'/human') {b}
      else if (child.localName = 'expression') then
        element.expressionElement := ParseString(child, path+'/expression') {b}
      else if (child.localName = 'xpath') then
        element.xpathElement := ParseString(child, path+'/xpath') {b}
      else if (child.localName = 'source') then
        element.sourceElement := ParseCanonical(child, path+'/source') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionConstraint(xml : TXmlBuilder; name : String; elem : TFhirElementDefinitionConstraint);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeElementDefinitionConstraintChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionConstraintChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionConstraint);
begin
  composeElementChildren(xml, elem);
  ComposeId(xml, 'key', elem.keyElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'requirements', elem.requirementsElement);{x.2b}
  ComposeEnum(xml, 'severity', elem.SeverityElement, CODES_TFhirConstraintSeverityEnum);
  ComposeString(xml, 'human', elem.humanElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'expression', elem.expressionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'xpath', elem.xpathElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'source', elem.sourceElement);{x.2b}
end;

function TFHIRXmlParser.ParseElementDefinitionBinding(element : TMXmlElement; path : string) : TFhirElementDefinitionBinding;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionBinding.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionBindingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionBindingChild(element : TFhirElementDefinitionBinding; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'strength') then
        element.strengthElement := ParseEnum(CODES_TFhirBindingStrengthEnum, SYSTEMS_TFhirBindingStrengthEnum, path+'/strength', child){1a}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'valueSet') then
        element.valueSetElement := ParseCanonical(child, path+'/valueSet') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionBinding(xml : TXmlBuilder; name : String; elem : TFhirElementDefinitionBinding);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeElementDefinitionBindingChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionBindingChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionBinding);
begin
  composeElementChildren(xml, elem);
  ComposeEnum(xml, 'strength', elem.StrengthElement, CODES_TFhirBindingStrengthEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'valueSet', elem.valueSetElement);{x.2b}
end;

function TFHIRXmlParser.ParseElementDefinitionMapping(element : TMXmlElement; path : string) : TFhirElementDefinitionMapping;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionMapping.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionMappingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionMappingChild(element : TFhirElementDefinitionMapping; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identity') then
        element.identityElement := ParseId(child, path+'/identity') {b}
      else if (child.localName = 'language') then
        element.languageElement := ParseCode(child, path+'/language') {b}
      else if (child.localName = 'map') then
        element.mapElement := ParseString(child, path+'/map') {b}
      else if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionMapping(xml : TXmlBuilder; name : String; elem : TFhirElementDefinitionMapping);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeElementDefinitionMappingChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionMappingChildren(xml : TXmlBuilder; elem : TFhirElementDefinitionMapping);
begin
  composeElementChildren(xml, elem);
  ComposeId(xml, 'identity', elem.identityElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCode(xml, 'language', elem.languageElement);{x.2b}
  ComposeString(xml, 'map', elem.mapElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
end;

function TFHIRXmlParser.ParseElementDefinition(element : TMXmlElement; path : string) : TFhirElementDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionChild(element : TFhirElementDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        element.pathElement := ParseString(child, path+'/path') {b}
      else if (child.localName = 'representation') then
        element.representationList.Add(ParseEnum(CODES_TFhirPropertyRepresentationEnum, SYSTEMS_TFhirPropertyRepresentationEnum, path+'/representation', child)){y.1}
      else if (child.localName = 'sliceName') then
        element.sliceNameElement := ParseString(child, path+'/sliceName') {b}
      else if (child.localName = 'sliceIsConstraining') then
        element.sliceIsConstrainingElement := ParseBoolean(child, path+'/sliceIsConstraining') {b}
      else if (child.localName = 'label') then
        element.label_Element := ParseString(child, path+'/label') {b}
      else if (child.localName = 'code') then
        element.codeList.Add(ParseCoding(child, path+'/code')){y.2}
      else if (child.localName = 'slicing') then
        element.slicing := ParseElementDefinitionSlicing(child, path+'/slicing') {b}
      else if (child.localName = 'short') then
        element.shortElement := ParseString(child, path+'/short') {b}
      else if (child.localName = 'definition') then
        element.definitionElement := ParseMarkdown(child, path+'/definition') {b}
      else if (child.localName = 'comment') then
        element.commentElement := ParseMarkdown(child, path+'/comment') {b}
      else if (child.localName = 'requirements') then
        element.requirementsElement := ParseMarkdown(child, path+'/requirements') {b}
      else if (child.localName = 'alias') then
        element.aliasList.Add(ParseString(child, path+'/alias')){y.2}
      else if (child.localName = 'min') then
        element.minElement := ParseUnsignedInt(child, path+'/min') {b}
      else if (child.localName = 'max') then
        element.maxElement := ParseString(child, path+'/max') {b}
      else if (child.localName = 'base') then
        element.base := ParseElementDefinitionBase(child, path+'/base') {b}
      else if (child.localName = 'contentReference') then
        element.contentReferenceElement := ParseUri(child, path+'/contentReference') {b}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseElementDefinitionType(child, path+'/type')){y.2}
      else if (child.localName = 'defaultValueCanonical') then
        element.defaultValue := ParseCanonical(child, path+'/defaultValueCanonical'){x.3}
      else if (child.localName = 'defaultValueCode') then
        element.defaultValue := ParseCode(child, path+'/defaultValueCode'){x.3}
      else if (child.localName = 'defaultValueId') then
        element.defaultValue := ParseId(child, path+'/defaultValueId'){x.3}
      else if (child.localName = 'defaultValueMarkdown') then
        element.defaultValue := ParseMarkdown(child, path+'/defaultValueMarkdown'){x.3}
      else if (child.localName = 'defaultValueOid') then
        element.defaultValue := ParseOid(child, path+'/defaultValueOid'){x.3}
      else if (child.localName = 'defaultValuePositiveInt') then
        element.defaultValue := ParsePositiveInt(child, path+'/defaultValuePositiveInt'){x.3}
      else if (child.localName = 'defaultValueUnsignedInt') then
        element.defaultValue := ParseUnsignedInt(child, path+'/defaultValueUnsignedInt'){x.3}
      else if (child.localName = 'defaultValueUrl') then
        element.defaultValue := ParseUrl(child, path+'/defaultValueUrl'){x.3}
      else if (child.localName = 'defaultValueUuid') then
        element.defaultValue := ParseUuid(child, path+'/defaultValueUuid'){x.3}
      else if (child.localName = 'defaultValueAddress') then
        element.defaultValue := ParseAddress(child, path+'/defaultValueAddress'){x.3}
      else if (child.localName = 'defaultValueAge') then
        element.defaultValue := ParseAge(child, path+'/defaultValueAge'){x.3}
      else if (child.localName = 'defaultValueAnnotation') then
        element.defaultValue := ParseAnnotation(child, path+'/defaultValueAnnotation'){x.3}
      else if (child.localName = 'defaultValueAttachment') then
        element.defaultValue := ParseAttachment(child, path+'/defaultValueAttachment'){x.3}
      else if (child.localName = 'defaultValueCodeableConcept') then
        element.defaultValue := ParseCodeableConcept(child, path+'/defaultValueCodeableConcept'){x.3}
      else if (child.localName = 'defaultValueCoding') then
        element.defaultValue := ParseCoding(child, path+'/defaultValueCoding'){x.3}
      else if (child.localName = 'defaultValueContactPoint') then
        element.defaultValue := ParseContactPoint(child, path+'/defaultValueContactPoint'){x.3}
      else if (child.localName = 'defaultValueCount') then
        element.defaultValue := ParseCount(child, path+'/defaultValueCount'){x.3}
      else if (child.localName = 'defaultValueDistance') then
        element.defaultValue := ParseDistance(child, path+'/defaultValueDistance'){x.3}
      else if (child.localName = 'defaultValueDuration') then
        element.defaultValue := ParseDuration(child, path+'/defaultValueDuration'){x.3}
      else if (child.localName = 'defaultValueHumanName') then
        element.defaultValue := ParseHumanName(child, path+'/defaultValueHumanName'){x.3}
      else if (child.localName = 'defaultValueIdentifier') then
        element.defaultValue := ParseIdentifier(child, path+'/defaultValueIdentifier'){x.3}
      else if (child.localName = 'defaultValueMoney') then
        element.defaultValue := ParseMoney(child, path+'/defaultValueMoney'){x.3}
      else if (child.localName = 'defaultValuePeriod') then
        element.defaultValue := ParsePeriod(child, path+'/defaultValuePeriod'){x.3}
      else if (child.localName = 'defaultValueQuantity') then
        element.defaultValue := ParseQuantity(child, path+'/defaultValueQuantity'){x.3}
      else if (child.localName = 'defaultValueRange') then
        element.defaultValue := ParseRange(child, path+'/defaultValueRange'){x.3}
      else if (child.localName = 'defaultValueRatio') then
        element.defaultValue := ParseRatio(child, path+'/defaultValueRatio'){x.3}
      else if (child.localName = 'defaultValueReference') then
        element.defaultValue := ParseReference(child, path+'/defaultValueReference'){x.3}
      else if (child.localName = 'defaultValueSampledData') then
        element.defaultValue := ParseSampledData(child, path+'/defaultValueSampledData'){x.3}
      else if (child.localName = 'defaultValueSignature') then
        element.defaultValue := ParseSignature(child, path+'/defaultValueSignature'){x.3}
      else if (child.localName = 'defaultValueTiming') then
        element.defaultValue := ParseTiming(child, path+'/defaultValueTiming'){x.3}
      else if (child.localName = 'defaultValueContactDetail') then
        element.defaultValue := ParseContactDetail(child, path+'/defaultValueContactDetail'){x.3}
      else if (child.localName = 'defaultValueContributor') then
        element.defaultValue := ParseContributor(child, path+'/defaultValueContributor'){x.3}
      else if (child.localName = 'defaultValueDataRequirement') then
        element.defaultValue := ParseDataRequirement(child, path+'/defaultValueDataRequirement'){x.3}
      else if (child.localName = 'defaultValueExpression') then
        element.defaultValue := ParseExpression(child, path+'/defaultValueExpression'){x.3}
      else if (child.localName = 'defaultValueParameterDefinition') then
        element.defaultValue := ParseParameterDefinition(child, path+'/defaultValueParameterDefinition'){x.3}
      else if (child.localName = 'defaultValueRelatedArtifact') then
        element.defaultValue := ParseRelatedArtifact(child, path+'/defaultValueRelatedArtifact'){x.3}
      else if (child.localName = 'defaultValueTriggerDefinition') then
        element.defaultValue := ParseTriggerDefinition(child, path+'/defaultValueTriggerDefinition'){x.3}
      else if (child.localName = 'defaultValueUsageContext') then
        element.defaultValue := ParseUsageContext(child, path+'/defaultValueUsageContext'){x.3}
      else if (child.localName = 'defaultValueDosage') then
        element.defaultValue := ParseDosage(child, path+'/defaultValueDosage'){x.3}
      else if (child.localName = 'defaultValueBase64Binary') then
        element.defaultValue := ParseBase64Binary(child, path+'/defaultValueBase64Binary'){x.3}
      else if (child.localName = 'defaultValueBoolean') then
        element.defaultValue := ParseBoolean(child, path+'/defaultValueBoolean'){x.3}
      else if (child.localName = 'defaultValueDate') then
        element.defaultValue := ParseDate(child, path+'/defaultValueDate'){x.3}
      else if (child.localName = 'defaultValueDateTime') then
        element.defaultValue := ParseDateTime(child, path+'/defaultValueDateTime'){x.3}
      else if (child.localName = 'defaultValueDecimal') then
        element.defaultValue := ParseDecimal(child, path+'/defaultValueDecimal'){x.3}
      else if (child.localName = 'defaultValueInstant') then
        element.defaultValue := ParseInstant(child, path+'/defaultValueInstant'){x.3}
      else if (child.localName = 'defaultValueInteger') then
        element.defaultValue := ParseInteger(child, path+'/defaultValueInteger'){x.3}
      else if (child.localName = 'defaultValueString') then
        element.defaultValue := ParseString(child, path+'/defaultValueString'){x.3}
      else if (child.localName = 'defaultValueTime') then
        element.defaultValue := ParseTime(child, path+'/defaultValueTime'){x.3}
      else if (child.localName = 'defaultValueUri') then
        element.defaultValue := ParseUri(child, path+'/defaultValueUri'){x.3}
      else if (child.localName = 'meaningWhenMissing') then
        element.meaningWhenMissingElement := ParseMarkdown(child, path+'/meaningWhenMissing') {b}
      else if (child.localName = 'orderMeaning') then
        element.orderMeaningElement := ParseString(child, path+'/orderMeaning') {b}
      else if (child.localName = 'fixedCanonical') then
        element.fixed := ParseCanonical(child, path+'/fixedCanonical'){x.3}
      else if (child.localName = 'fixedCode') then
        element.fixed := ParseCode(child, path+'/fixedCode'){x.3}
      else if (child.localName = 'fixedId') then
        element.fixed := ParseId(child, path+'/fixedId'){x.3}
      else if (child.localName = 'fixedMarkdown') then
        element.fixed := ParseMarkdown(child, path+'/fixedMarkdown'){x.3}
      else if (child.localName = 'fixedOid') then
        element.fixed := ParseOid(child, path+'/fixedOid'){x.3}
      else if (child.localName = 'fixedPositiveInt') then
        element.fixed := ParsePositiveInt(child, path+'/fixedPositiveInt'){x.3}
      else if (child.localName = 'fixedUnsignedInt') then
        element.fixed := ParseUnsignedInt(child, path+'/fixedUnsignedInt'){x.3}
      else if (child.localName = 'fixedUrl') then
        element.fixed := ParseUrl(child, path+'/fixedUrl'){x.3}
      else if (child.localName = 'fixedUuid') then
        element.fixed := ParseUuid(child, path+'/fixedUuid'){x.3}
      else if (child.localName = 'fixedAddress') then
        element.fixed := ParseAddress(child, path+'/fixedAddress'){x.3}
      else if (child.localName = 'fixedAge') then
        element.fixed := ParseAge(child, path+'/fixedAge'){x.3}
      else if (child.localName = 'fixedAnnotation') then
        element.fixed := ParseAnnotation(child, path+'/fixedAnnotation'){x.3}
      else if (child.localName = 'fixedAttachment') then
        element.fixed := ParseAttachment(child, path+'/fixedAttachment'){x.3}
      else if (child.localName = 'fixedCodeableConcept') then
        element.fixed := ParseCodeableConcept(child, path+'/fixedCodeableConcept'){x.3}
      else if (child.localName = 'fixedCoding') then
        element.fixed := ParseCoding(child, path+'/fixedCoding'){x.3}
      else if (child.localName = 'fixedContactPoint') then
        element.fixed := ParseContactPoint(child, path+'/fixedContactPoint'){x.3}
      else if (child.localName = 'fixedCount') then
        element.fixed := ParseCount(child, path+'/fixedCount'){x.3}
      else if (child.localName = 'fixedDistance') then
        element.fixed := ParseDistance(child, path+'/fixedDistance'){x.3}
      else if (child.localName = 'fixedDuration') then
        element.fixed := ParseDuration(child, path+'/fixedDuration'){x.3}
      else if (child.localName = 'fixedHumanName') then
        element.fixed := ParseHumanName(child, path+'/fixedHumanName'){x.3}
      else if (child.localName = 'fixedIdentifier') then
        element.fixed := ParseIdentifier(child, path+'/fixedIdentifier'){x.3}
      else if (child.localName = 'fixedMoney') then
        element.fixed := ParseMoney(child, path+'/fixedMoney'){x.3}
      else if (child.localName = 'fixedPeriod') then
        element.fixed := ParsePeriod(child, path+'/fixedPeriod'){x.3}
      else if (child.localName = 'fixedQuantity') then
        element.fixed := ParseQuantity(child, path+'/fixedQuantity'){x.3}
      else if (child.localName = 'fixedRange') then
        element.fixed := ParseRange(child, path+'/fixedRange'){x.3}
      else if (child.localName = 'fixedRatio') then
        element.fixed := ParseRatio(child, path+'/fixedRatio'){x.3}
      else if (child.localName = 'fixedReference') then
        element.fixed := ParseReference(child, path+'/fixedReference'){x.3}
      else if (child.localName = 'fixedSampledData') then
        element.fixed := ParseSampledData(child, path+'/fixedSampledData'){x.3}
      else if (child.localName = 'fixedSignature') then
        element.fixed := ParseSignature(child, path+'/fixedSignature'){x.3}
      else if (child.localName = 'fixedTiming') then
        element.fixed := ParseTiming(child, path+'/fixedTiming'){x.3}
      else if (child.localName = 'fixedContactDetail') then
        element.fixed := ParseContactDetail(child, path+'/fixedContactDetail'){x.3}
      else if (child.localName = 'fixedContributor') then
        element.fixed := ParseContributor(child, path+'/fixedContributor'){x.3}
      else if (child.localName = 'fixedDataRequirement') then
        element.fixed := ParseDataRequirement(child, path+'/fixedDataRequirement'){x.3}
      else if (child.localName = 'fixedExpression') then
        element.fixed := ParseExpression(child, path+'/fixedExpression'){x.3}
      else if (child.localName = 'fixedParameterDefinition') then
        element.fixed := ParseParameterDefinition(child, path+'/fixedParameterDefinition'){x.3}
      else if (child.localName = 'fixedRelatedArtifact') then
        element.fixed := ParseRelatedArtifact(child, path+'/fixedRelatedArtifact'){x.3}
      else if (child.localName = 'fixedTriggerDefinition') then
        element.fixed := ParseTriggerDefinition(child, path+'/fixedTriggerDefinition'){x.3}
      else if (child.localName = 'fixedUsageContext') then
        element.fixed := ParseUsageContext(child, path+'/fixedUsageContext'){x.3}
      else if (child.localName = 'fixedDosage') then
        element.fixed := ParseDosage(child, path+'/fixedDosage'){x.3}
      else if (child.localName = 'fixedBase64Binary') then
        element.fixed := ParseBase64Binary(child, path+'/fixedBase64Binary'){x.3}
      else if (child.localName = 'fixedBoolean') then
        element.fixed := ParseBoolean(child, path+'/fixedBoolean'){x.3}
      else if (child.localName = 'fixedDate') then
        element.fixed := ParseDate(child, path+'/fixedDate'){x.3}
      else if (child.localName = 'fixedDateTime') then
        element.fixed := ParseDateTime(child, path+'/fixedDateTime'){x.3}
      else if (child.localName = 'fixedDecimal') then
        element.fixed := ParseDecimal(child, path+'/fixedDecimal'){x.3}
      else if (child.localName = 'fixedInstant') then
        element.fixed := ParseInstant(child, path+'/fixedInstant'){x.3}
      else if (child.localName = 'fixedInteger') then
        element.fixed := ParseInteger(child, path+'/fixedInteger'){x.3}
      else if (child.localName = 'fixedString') then
        element.fixed := ParseString(child, path+'/fixedString'){x.3}
      else if (child.localName = 'fixedTime') then
        element.fixed := ParseTime(child, path+'/fixedTime'){x.3}
      else if (child.localName = 'fixedUri') then
        element.fixed := ParseUri(child, path+'/fixedUri'){x.3}
      else if (child.localName = 'patternCanonical') then
        element.pattern := ParseCanonical(child, path+'/patternCanonical'){x.3}
      else if (child.localName = 'patternCode') then
        element.pattern := ParseCode(child, path+'/patternCode'){x.3}
      else if (child.localName = 'patternId') then
        element.pattern := ParseId(child, path+'/patternId'){x.3}
      else if (child.localName = 'patternMarkdown') then
        element.pattern := ParseMarkdown(child, path+'/patternMarkdown'){x.3}
      else if (child.localName = 'patternOid') then
        element.pattern := ParseOid(child, path+'/patternOid'){x.3}
      else if (child.localName = 'patternPositiveInt') then
        element.pattern := ParsePositiveInt(child, path+'/patternPositiveInt'){x.3}
      else if (child.localName = 'patternUnsignedInt') then
        element.pattern := ParseUnsignedInt(child, path+'/patternUnsignedInt'){x.3}
      else if (child.localName = 'patternUrl') then
        element.pattern := ParseUrl(child, path+'/patternUrl'){x.3}
      else if (child.localName = 'patternUuid') then
        element.pattern := ParseUuid(child, path+'/patternUuid'){x.3}
      else if (child.localName = 'patternAddress') then
        element.pattern := ParseAddress(child, path+'/patternAddress'){x.3}
      else if (child.localName = 'patternAge') then
        element.pattern := ParseAge(child, path+'/patternAge'){x.3}
      else if (child.localName = 'patternAnnotation') then
        element.pattern := ParseAnnotation(child, path+'/patternAnnotation'){x.3}
      else if (child.localName = 'patternAttachment') then
        element.pattern := ParseAttachment(child, path+'/patternAttachment'){x.3}
      else if (child.localName = 'patternCodeableConcept') then
        element.pattern := ParseCodeableConcept(child, path+'/patternCodeableConcept'){x.3}
      else if (child.localName = 'patternCoding') then
        element.pattern := ParseCoding(child, path+'/patternCoding'){x.3}
      else if (child.localName = 'patternContactPoint') then
        element.pattern := ParseContactPoint(child, path+'/patternContactPoint'){x.3}
      else if (child.localName = 'patternCount') then
        element.pattern := ParseCount(child, path+'/patternCount'){x.3}
      else if (child.localName = 'patternDistance') then
        element.pattern := ParseDistance(child, path+'/patternDistance'){x.3}
      else if (child.localName = 'patternDuration') then
        element.pattern := ParseDuration(child, path+'/patternDuration'){x.3}
      else if (child.localName = 'patternHumanName') then
        element.pattern := ParseHumanName(child, path+'/patternHumanName'){x.3}
      else if (child.localName = 'patternIdentifier') then
        element.pattern := ParseIdentifier(child, path+'/patternIdentifier'){x.3}
      else if (child.localName = 'patternMoney') then
        element.pattern := ParseMoney(child, path+'/patternMoney'){x.3}
      else if (child.localName = 'patternPeriod') then
        element.pattern := ParsePeriod(child, path+'/patternPeriod'){x.3}
      else if (child.localName = 'patternQuantity') then
        element.pattern := ParseQuantity(child, path+'/patternQuantity'){x.3}
      else if (child.localName = 'patternRange') then
        element.pattern := ParseRange(child, path+'/patternRange'){x.3}
      else if (child.localName = 'patternRatio') then
        element.pattern := ParseRatio(child, path+'/patternRatio'){x.3}
      else if (child.localName = 'patternReference') then
        element.pattern := ParseReference(child, path+'/patternReference'){x.3}
      else if (child.localName = 'patternSampledData') then
        element.pattern := ParseSampledData(child, path+'/patternSampledData'){x.3}
      else if (child.localName = 'patternSignature') then
        element.pattern := ParseSignature(child, path+'/patternSignature'){x.3}
      else if (child.localName = 'patternTiming') then
        element.pattern := ParseTiming(child, path+'/patternTiming'){x.3}
      else if (child.localName = 'patternContactDetail') then
        element.pattern := ParseContactDetail(child, path+'/patternContactDetail'){x.3}
      else if (child.localName = 'patternContributor') then
        element.pattern := ParseContributor(child, path+'/patternContributor'){x.3}
      else if (child.localName = 'patternDataRequirement') then
        element.pattern := ParseDataRequirement(child, path+'/patternDataRequirement'){x.3}
      else if (child.localName = 'patternExpression') then
        element.pattern := ParseExpression(child, path+'/patternExpression'){x.3}
      else if (child.localName = 'patternParameterDefinition') then
        element.pattern := ParseParameterDefinition(child, path+'/patternParameterDefinition'){x.3}
      else if (child.localName = 'patternRelatedArtifact') then
        element.pattern := ParseRelatedArtifact(child, path+'/patternRelatedArtifact'){x.3}
      else if (child.localName = 'patternTriggerDefinition') then
        element.pattern := ParseTriggerDefinition(child, path+'/patternTriggerDefinition'){x.3}
      else if (child.localName = 'patternUsageContext') then
        element.pattern := ParseUsageContext(child, path+'/patternUsageContext'){x.3}
      else if (child.localName = 'patternDosage') then
        element.pattern := ParseDosage(child, path+'/patternDosage'){x.3}
      else if (child.localName = 'patternBase64Binary') then
        element.pattern := ParseBase64Binary(child, path+'/patternBase64Binary'){x.3}
      else if (child.localName = 'patternBoolean') then
        element.pattern := ParseBoolean(child, path+'/patternBoolean'){x.3}
      else if (child.localName = 'patternDate') then
        element.pattern := ParseDate(child, path+'/patternDate'){x.3}
      else if (child.localName = 'patternDateTime') then
        element.pattern := ParseDateTime(child, path+'/patternDateTime'){x.3}
      else if (child.localName = 'patternDecimal') then
        element.pattern := ParseDecimal(child, path+'/patternDecimal'){x.3}
      else if (child.localName = 'patternInstant') then
        element.pattern := ParseInstant(child, path+'/patternInstant'){x.3}
      else if (child.localName = 'patternInteger') then
        element.pattern := ParseInteger(child, path+'/patternInteger'){x.3}
      else if (child.localName = 'patternString') then
        element.pattern := ParseString(child, path+'/patternString'){x.3}
      else if (child.localName = 'patternTime') then
        element.pattern := ParseTime(child, path+'/patternTime'){x.3}
      else if (child.localName = 'patternUri') then
        element.pattern := ParseUri(child, path+'/patternUri'){x.3}
      else if (child.localName = 'example') then
        element.exampleList.Add(ParseElementDefinitionExample(child, path+'/example')){y.2}
      else if (child.localName = 'minValuePositiveInt') then
        element.minValue := ParsePositiveInt(child, path+'/minValuePositiveInt'){x.3}
      else if (child.localName = 'minValueUnsignedInt') then
        element.minValue := ParseUnsignedInt(child, path+'/minValueUnsignedInt'){x.3}
      else if (child.localName = 'minValueQuantity') then
        element.minValue := ParseQuantity(child, path+'/minValueQuantity'){x.3}
      else if (child.localName = 'minValueDate') then
        element.minValue := ParseDate(child, path+'/minValueDate'){x.3}
      else if (child.localName = 'minValueDateTime') then
        element.minValue := ParseDateTime(child, path+'/minValueDateTime'){x.3}
      else if (child.localName = 'minValueInstant') then
        element.minValue := ParseInstant(child, path+'/minValueInstant'){x.3}
      else if (child.localName = 'minValueTime') then
        element.minValue := ParseTime(child, path+'/minValueTime'){x.3}
      else if (child.localName = 'minValueDecimal') then
        element.minValue := ParseDecimal(child, path+'/minValueDecimal'){x.3}
      else if (child.localName = 'minValueInteger') then
        element.minValue := ParseInteger(child, path+'/minValueInteger'){x.3}
      else if (child.localName = 'maxValuePositiveInt') then
        element.maxValue := ParsePositiveInt(child, path+'/maxValuePositiveInt'){x.3}
      else if (child.localName = 'maxValueUnsignedInt') then
        element.maxValue := ParseUnsignedInt(child, path+'/maxValueUnsignedInt'){x.3}
      else if (child.localName = 'maxValueQuantity') then
        element.maxValue := ParseQuantity(child, path+'/maxValueQuantity'){x.3}
      else if (child.localName = 'maxValueDate') then
        element.maxValue := ParseDate(child, path+'/maxValueDate'){x.3}
      else if (child.localName = 'maxValueDateTime') then
        element.maxValue := ParseDateTime(child, path+'/maxValueDateTime'){x.3}
      else if (child.localName = 'maxValueInstant') then
        element.maxValue := ParseInstant(child, path+'/maxValueInstant'){x.3}
      else if (child.localName = 'maxValueTime') then
        element.maxValue := ParseTime(child, path+'/maxValueTime'){x.3}
      else if (child.localName = 'maxValueDecimal') then
        element.maxValue := ParseDecimal(child, path+'/maxValueDecimal'){x.3}
      else if (child.localName = 'maxValueInteger') then
        element.maxValue := ParseInteger(child, path+'/maxValueInteger'){x.3}
      else if (child.localName = 'maxLength') then
        element.maxLengthElement := ParseInteger(child, path+'/maxLength') {b}
      else if (child.localName = 'condition') then
        element.conditionList.Add(ParseId(child, path+'/condition')){y.2}
      else if (child.localName = 'constraint') then
        element.constraintList.Add(ParseElementDefinitionConstraint(child, path+'/constraint')){y.2}
      else if (child.localName = 'mustSupport') then
        element.mustSupportElement := ParseBoolean(child, path+'/mustSupport') {b}
      else if (child.localName = 'isModifier') then
        element.isModifierElement := ParseBoolean(child, path+'/isModifier') {b}
      else if (child.localName = 'isModifierReason') then
        element.isModifierReasonElement := ParseString(child, path+'/isModifierReason') {b}
      else if (child.localName = 'isSummary') then
        element.isSummaryElement := ParseBoolean(child, path+'/isSummary') {b}
      else if (child.localName = 'binding') then
        element.binding := ParseElementDefinitionBinding(child, path+'/binding') {b}
      else if (child.localName = 'mapping') then
        element.mappingList.Add(ParseElementDefinitionMapping(child, path+'/mapping')){y.2}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinition(xml : TXmlBuilder; name : String; elem : TFhirElementDefinition);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeElementDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionChildren(xml : TXmlBuilder; elem : TFhirElementDefinition);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'path', elem.pathElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.representationList.Count - 1 do
      ComposeEnum(xml, 'representation', elem.representationList[i], CODES_TFhirPropertyRepresentationEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'sliceName', elem.sliceNameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBoolean(xml, 'sliceIsConstraining', elem.sliceIsConstrainingElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'label', elem.label_Element);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCoding(xml, 'code', elem.codeList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeElementDefinitionSlicing(xml, 'slicing', elem.slicing);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'short', elem.shortElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdown(xml, 'definition', elem.definitionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdown(xml, 'comment', elem.commentElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdown(xml, 'requirements', elem.requirementsElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.aliasList.Count - 1 do
      ComposeString(xml, 'alias', elem.aliasList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUnsignedInt(xml, 'min', elem.minElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'max', elem.maxElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeElementDefinitionBase(xml, 'base', elem.base);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUri(xml, 'contentReference', elem.contentReferenceElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeElementDefinitionType(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'defaultValueCanonical', TFhirCanonical(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirCode) {6} then
    ComposeCode(xml, 'defaultValueCode', TFhirCode(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirId) {6} then
    ComposeId(xml, 'defaultValueId', TFhirId(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'defaultValueMarkdown', TFhirMarkdown(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirOid) {6} then
    ComposeOid(xml, 'defaultValueOid', TFhirOid(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'defaultValuePositiveInt', TFhirPositiveInt(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'defaultValueUnsignedInt', TFhirUnsignedInt(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirUrl) {6} then
    ComposeUrl(xml, 'defaultValueUrl', TFhirUrl(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirUuid) {6} then
    ComposeUuid(xml, 'defaultValueUuid', TFhirUuid(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirAddress) {6} then
    ComposeAddress(xml, 'defaultValueAddress', TFhirAddress(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirAge) {6} then
    ComposeAge(xml, 'defaultValueAge', TFhirAge(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'defaultValueAnnotation', TFhirAnnotation(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'defaultValueAttachment', TFhirAttachment(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'defaultValueCodeableConcept', TFhirCodeableConcept(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirCoding) {6} then
    ComposeCoding(xml, 'defaultValueCoding', TFhirCoding(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'defaultValueContactPoint', TFhirContactPoint(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirCount) {6} then
    ComposeCount(xml, 'defaultValueCount', TFhirCount(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDistance) {6} then
    ComposeDistance(xml, 'defaultValueDistance', TFhirDistance(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDuration) {6} then
    ComposeDuration(xml, 'defaultValueDuration', TFhirDuration(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'defaultValueHumanName', TFhirHumanName(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'defaultValueIdentifier', TFhirIdentifier(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirMoney) {6} then
    ComposeMoney(xml, 'defaultValueMoney', TFhirMoney(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirPeriod) {6} then
    ComposePeriod(xml, 'defaultValuePeriod', TFhirPeriod(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'defaultValueQuantity', TFhirQuantity(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirRange) {6} then
    ComposeRange(xml, 'defaultValueRange', TFhirRange(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirRatio) {6} then
    ComposeRatio(xml, 'defaultValueRatio', TFhirRatio(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirReference) {6} then
    ComposeReference(xml, 'defaultValueReference', TFhirReference(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'defaultValueSampledData', TFhirSampledData(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirSignature) {6} then
    ComposeSignature(xml, 'defaultValueSignature', TFhirSignature(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirTiming) {6} then
    ComposeTiming(xml, 'defaultValueTiming', TFhirTiming(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'defaultValueContactDetail', TFhirContactDetail(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirContributor) {6} then
    ComposeContributor(xml, 'defaultValueContributor', TFhirContributor(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'defaultValueDataRequirement', TFhirDataRequirement(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirExpression) {6} then
    ComposeExpression(xml, 'defaultValueExpression', TFhirExpression(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'defaultValueParameterDefinition', TFhirParameterDefinition(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'defaultValueRelatedArtifact', TFhirRelatedArtifact(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'defaultValueTriggerDefinition', TFhirTriggerDefinition(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'defaultValueUsageContext', TFhirUsageContext(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDosage) {6} then
    ComposeDosage(xml, 'defaultValueDosage', TFhirDosage(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'defaultValueBase64Binary', TFhirBase64Binary(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'defaultValueBoolean', TFhirBoolean(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDate) {6} then
    ComposeDate(xml, 'defaultValueDate', TFhirDate(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'defaultValueDateTime', TFhirDateTime(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'defaultValueDecimal', TFhirDecimal(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirInstant) {6} then
    ComposeInstant(xml, 'defaultValueInstant', TFhirInstant(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirInteger) {6} then
    ComposeInteger(xml, 'defaultValueInteger', TFhirInteger(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirString) {6} then
    ComposeString(xml, 'defaultValueString', TFhirString(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirTime) {6} then
    ComposeTime(xml, 'defaultValueTime', TFhirTime(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.defaultValue is TFhirUri) {6} then
    ComposeUri(xml, 'defaultValueUri', TFhirUri(elem.defaultValue));
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeMarkdown(xml, 'meaningWhenMissing', elem.meaningWhenMissingElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'orderMeaning', elem.orderMeaningElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'fixedCanonical', TFhirCanonical(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirCode) {6} then
    ComposeCode(xml, 'fixedCode', TFhirCode(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirId) {6} then
    ComposeId(xml, 'fixedId', TFhirId(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'fixedMarkdown', TFhirMarkdown(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirOid) {6} then
    ComposeOid(xml, 'fixedOid', TFhirOid(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'fixedPositiveInt', TFhirPositiveInt(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'fixedUnsignedInt', TFhirUnsignedInt(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirUrl) {6} then
    ComposeUrl(xml, 'fixedUrl', TFhirUrl(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirUuid) {6} then
    ComposeUuid(xml, 'fixedUuid', TFhirUuid(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirAddress) {6} then
    ComposeAddress(xml, 'fixedAddress', TFhirAddress(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirAge) {6} then
    ComposeAge(xml, 'fixedAge', TFhirAge(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'fixedAnnotation', TFhirAnnotation(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'fixedAttachment', TFhirAttachment(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'fixedCodeableConcept', TFhirCodeableConcept(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirCoding) {6} then
    ComposeCoding(xml, 'fixedCoding', TFhirCoding(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'fixedContactPoint', TFhirContactPoint(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirCount) {6} then
    ComposeCount(xml, 'fixedCount', TFhirCount(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDistance) {6} then
    ComposeDistance(xml, 'fixedDistance', TFhirDistance(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDuration) {6} then
    ComposeDuration(xml, 'fixedDuration', TFhirDuration(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'fixedHumanName', TFhirHumanName(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'fixedIdentifier', TFhirIdentifier(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirMoney) {6} then
    ComposeMoney(xml, 'fixedMoney', TFhirMoney(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirPeriod) {6} then
    ComposePeriod(xml, 'fixedPeriod', TFhirPeriod(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'fixedQuantity', TFhirQuantity(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirRange) {6} then
    ComposeRange(xml, 'fixedRange', TFhirRange(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirRatio) {6} then
    ComposeRatio(xml, 'fixedRatio', TFhirRatio(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirReference) {6} then
    ComposeReference(xml, 'fixedReference', TFhirReference(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'fixedSampledData', TFhirSampledData(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirSignature) {6} then
    ComposeSignature(xml, 'fixedSignature', TFhirSignature(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirTiming) {6} then
    ComposeTiming(xml, 'fixedTiming', TFhirTiming(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'fixedContactDetail', TFhirContactDetail(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirContributor) {6} then
    ComposeContributor(xml, 'fixedContributor', TFhirContributor(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'fixedDataRequirement', TFhirDataRequirement(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirExpression) {6} then
    ComposeExpression(xml, 'fixedExpression', TFhirExpression(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'fixedParameterDefinition', TFhirParameterDefinition(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'fixedRelatedArtifact', TFhirRelatedArtifact(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'fixedTriggerDefinition', TFhirTriggerDefinition(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'fixedUsageContext', TFhirUsageContext(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDosage) {6} then
    ComposeDosage(xml, 'fixedDosage', TFhirDosage(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'fixedBase64Binary', TFhirBase64Binary(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'fixedBoolean', TFhirBoolean(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDate) {6} then
    ComposeDate(xml, 'fixedDate', TFhirDate(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'fixedDateTime', TFhirDateTime(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'fixedDecimal', TFhirDecimal(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirInstant) {6} then
    ComposeInstant(xml, 'fixedInstant', TFhirInstant(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirInteger) {6} then
    ComposeInteger(xml, 'fixedInteger', TFhirInteger(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirString) {6} then
    ComposeString(xml, 'fixedString', TFhirString(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirTime) {6} then
    ComposeTime(xml, 'fixedTime', TFhirTime(elem.fixed))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.fixed is TFhirUri) {6} then
    ComposeUri(xml, 'fixedUri', TFhirUri(elem.fixed));
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'patternCanonical', TFhirCanonical(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirCode) {6} then
    ComposeCode(xml, 'patternCode', TFhirCode(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirId) {6} then
    ComposeId(xml, 'patternId', TFhirId(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'patternMarkdown', TFhirMarkdown(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirOid) {6} then
    ComposeOid(xml, 'patternOid', TFhirOid(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'patternPositiveInt', TFhirPositiveInt(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'patternUnsignedInt', TFhirUnsignedInt(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirUrl) {6} then
    ComposeUrl(xml, 'patternUrl', TFhirUrl(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirUuid) {6} then
    ComposeUuid(xml, 'patternUuid', TFhirUuid(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirAddress) {6} then
    ComposeAddress(xml, 'patternAddress', TFhirAddress(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirAge) {6} then
    ComposeAge(xml, 'patternAge', TFhirAge(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'patternAnnotation', TFhirAnnotation(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'patternAttachment', TFhirAttachment(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'patternCodeableConcept', TFhirCodeableConcept(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirCoding) {6} then
    ComposeCoding(xml, 'patternCoding', TFhirCoding(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'patternContactPoint', TFhirContactPoint(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirCount) {6} then
    ComposeCount(xml, 'patternCount', TFhirCount(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDistance) {6} then
    ComposeDistance(xml, 'patternDistance', TFhirDistance(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDuration) {6} then
    ComposeDuration(xml, 'patternDuration', TFhirDuration(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'patternHumanName', TFhirHumanName(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'patternIdentifier', TFhirIdentifier(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirMoney) {6} then
    ComposeMoney(xml, 'patternMoney', TFhirMoney(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirPeriod) {6} then
    ComposePeriod(xml, 'patternPeriod', TFhirPeriod(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'patternQuantity', TFhirQuantity(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirRange) {6} then
    ComposeRange(xml, 'patternRange', TFhirRange(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirRatio) {6} then
    ComposeRatio(xml, 'patternRatio', TFhirRatio(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirReference) {6} then
    ComposeReference(xml, 'patternReference', TFhirReference(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'patternSampledData', TFhirSampledData(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirSignature) {6} then
    ComposeSignature(xml, 'patternSignature', TFhirSignature(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirTiming) {6} then
    ComposeTiming(xml, 'patternTiming', TFhirTiming(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'patternContactDetail', TFhirContactDetail(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirContributor) {6} then
    ComposeContributor(xml, 'patternContributor', TFhirContributor(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'patternDataRequirement', TFhirDataRequirement(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirExpression) {6} then
    ComposeExpression(xml, 'patternExpression', TFhirExpression(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'patternParameterDefinition', TFhirParameterDefinition(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'patternRelatedArtifact', TFhirRelatedArtifact(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'patternTriggerDefinition', TFhirTriggerDefinition(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'patternUsageContext', TFhirUsageContext(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDosage) {6} then
    ComposeDosage(xml, 'patternDosage', TFhirDosage(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'patternBase64Binary', TFhirBase64Binary(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'patternBoolean', TFhirBoolean(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDate) {6} then
    ComposeDate(xml, 'patternDate', TFhirDate(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'patternDateTime', TFhirDateTime(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'patternDecimal', TFhirDecimal(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirInstant) {6} then
    ComposeInstant(xml, 'patternInstant', TFhirInstant(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirInteger) {6} then
    ComposeInteger(xml, 'patternInteger', TFhirInteger(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirString) {6} then
    ComposeString(xml, 'patternString', TFhirString(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirTime) {6} then
    ComposeTime(xml, 'patternTime', TFhirTime(elem.pattern))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.pattern is TFhirUri) {6} then
    ComposeUri(xml, 'patternUri', TFhirUri(elem.pattern));
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.exampleList.Count - 1 do
      ComposeElementDefinitionExample(xml, 'example', elem.exampleList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'minValuePositiveInt', TFhirPositiveInt(elem.minValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'minValueUnsignedInt', TFhirUnsignedInt(elem.minValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'minValueQuantity', TFhirQuantity(elem.minValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirDate) {6} then
    ComposeDate(xml, 'minValueDate', TFhirDate(elem.minValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'minValueDateTime', TFhirDateTime(elem.minValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirInstant) {6} then
    ComposeInstant(xml, 'minValueInstant', TFhirInstant(elem.minValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirTime) {6} then
    ComposeTime(xml, 'minValueTime', TFhirTime(elem.minValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'minValueDecimal', TFhirDecimal(elem.minValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.minValue is TFhirInteger) {6} then
    ComposeInteger(xml, 'minValueInteger', TFhirInteger(elem.minValue));
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'maxValuePositiveInt', TFhirPositiveInt(elem.maxValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'maxValueUnsignedInt', TFhirUnsignedInt(elem.maxValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'maxValueQuantity', TFhirQuantity(elem.maxValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirDate) {6} then
    ComposeDate(xml, 'maxValueDate', TFhirDate(elem.maxValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'maxValueDateTime', TFhirDateTime(elem.maxValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirInstant) {6} then
    ComposeInstant(xml, 'maxValueInstant', TFhirInstant(elem.maxValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirTime) {6} then
    ComposeTime(xml, 'maxValueTime', TFhirTime(elem.maxValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'maxValueDecimal', TFhirDecimal(elem.maxValue))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (elem.maxValue is TFhirInteger) {6} then
    ComposeInteger(xml, 'maxValueInteger', TFhirInteger(elem.maxValue));
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInteger(xml, 'maxLength', elem.maxLengthElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.conditionList.Count - 1 do
      ComposeId(xml, 'condition', elem.conditionList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.constraintList.Count - 1 do
      ComposeElementDefinitionConstraint(xml, 'constraint', elem.constraintList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBoolean(xml, 'mustSupport', elem.mustSupportElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBoolean(xml, 'isModifier', elem.isModifierElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'isModifierReason', elem.isModifierReasonElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBoolean(xml, 'isSummary', elem.isSummaryElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeElementDefinitionBinding(xml, 'binding', elem.binding);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.mappingList.Count - 1 do
      ComposeElementDefinitionMapping(xml, 'mapping', elem.mappingList[i]);
end;

function TFHIRXmlParser.ParseTimingRepeat(element : TMXmlElement; path : string) : TFhirTimingRepeat;
var
  child : TMXmlElement;
begin
  result := TFhirTimingRepeat.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTimingRepeatChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTimingRepeatChild(element : TFhirTimingRepeat; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'boundsDuration') then
        element.bounds := ParseDuration(child, path+'/boundsDuration'){x.3}
      else if (child.localName = 'boundsRange') then
        element.bounds := ParseRange(child, path+'/boundsRange'){x.3}
      else if (child.localName = 'boundsPeriod') then
        element.bounds := ParsePeriod(child, path+'/boundsPeriod'){x.3}
      else if (child.localName = 'count') then
        element.countElement := ParsePositiveInt(child, path+'/count') {b}
      else if (child.localName = 'countMax') then
        element.countMaxElement := ParsePositiveInt(child, path+'/countMax') {b}
      else if (child.localName = 'duration') then
        element.durationElement := ParseDecimal(child, path+'/duration') {b}
      else if (child.localName = 'durationMax') then
        element.durationMaxElement := ParseDecimal(child, path+'/durationMax') {b}
      else if (child.localName = 'durationUnit') then
        element.durationUnitElement := ParseEnum(CODES_TFhirUnitsOfTimeEnum, SYSTEMS_TFhirUnitsOfTimeEnum, path+'/durationUnit', child){1a}
      else if (child.localName = 'frequency') then
        element.frequencyElement := ParsePositiveInt(child, path+'/frequency') {b}
      else if (child.localName = 'frequencyMax') then
        element.frequencyMaxElement := ParsePositiveInt(child, path+'/frequencyMax') {b}
      else if (child.localName = 'period') then
        element.periodElement := ParseDecimal(child, path+'/period') {b}
      else if (child.localName = 'periodMax') then
        element.periodMaxElement := ParseDecimal(child, path+'/periodMax') {b}
      else if (child.localName = 'periodUnit') then
        element.periodUnitElement := ParseEnum(CODES_TFhirUnitsOfTimeEnum, SYSTEMS_TFhirUnitsOfTimeEnum, path+'/periodUnit', child){1a}
      else if (child.localName = 'dayOfWeek') then
        element.dayOfWeekList.Add(ParseEnum(CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum, path+'/dayOfWeek', child)){y.1}
      else if (child.localName = 'timeOfDay') then
        element.timeOfDayList.Add(ParseTime(child, path+'/timeOfDay')){y.2}
      else if (child.localName = 'when') then
        element.whenList.Add(ParseEnum(CODES_TFhirEventTimingEnum, SYSTEMS_TFhirEventTimingEnum, path+'/when', child)){y.1}
      else if (child.localName = 'offset') then
        element.offsetElement := ParseUnsignedInt(child, path+'/offset') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTimingRepeat(xml : TXmlBuilder; name : String; elem : TFhirTimingRepeat);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTimingRepeatChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTimingRepeatChildren(xml : TXmlBuilder; elem : TFhirTimingRepeat);
var
  i : integer;
begin
  composeElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.bounds is TFhirDuration) {6} then
    ComposeDuration(xml, 'boundsDuration', TFhirDuration(elem.bounds))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.bounds is TFhirRange) {6} then
    ComposeRange(xml, 'boundsRange', TFhirRange(elem.bounds))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.bounds is TFhirPeriod) {6} then
    ComposePeriod(xml, 'boundsPeriod', TFhirPeriod(elem.bounds));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'count', elem.countElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'countMax', elem.countMaxElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'duration', elem.durationElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'durationMax', elem.durationMaxElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'durationUnit', elem.DurationUnitElement, CODES_TFhirUnitsOfTimeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'frequency', elem.frequencyElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'frequencyMax', elem.frequencyMaxElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'period', elem.periodElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'periodMax', elem.periodMaxElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'periodUnit', elem.PeriodUnitElement, CODES_TFhirUnitsOfTimeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.dayOfWeekList.Count - 1 do
      ComposeEnum(xml, 'dayOfWeek', elem.dayOfWeekList[i], CODES_TFhirDaysOfWeekEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.timeOfDayList.Count - 1 do
      ComposeTime(xml, 'timeOfDay', elem.timeOfDayList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.whenList.Count - 1 do
      ComposeEnum(xml, 'when', elem.whenList[i], CODES_TFhirEventTimingEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedInt(xml, 'offset', elem.offsetElement);{x.2b}
end;

function TFHIRXmlParser.ParseTiming(element : TMXmlElement; path : string) : TFhirTiming;
var
  child : TMXmlElement;
begin
  result := TFhirTiming.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTimingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTimingChild(element : TFhirTiming; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'event') then
        element.eventList.Add(ParseDateTime(child, path+'/event')){y.2}
      else if (child.localName = 'repeat') then
        element.repeat_ := ParseTimingRepeat(child, path+'/repeat') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if Not ParseElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTiming(xml : TXmlBuilder; name : String; elem : TFhirTiming);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTimingChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTimingChildren(xml : TXmlBuilder; elem : TFhirTiming);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.eventList.Count - 1 do
      ComposeDateTime(xml, 'event', elem.eventList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeTimingRepeat(xml, 'repeat', elem.repeat_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
end;

function TFHIRXmlParser.ParseCount(element : TMXmlElement; path : string) : TFhirCount;
var
  child : TMXmlElement;
begin
  result := TFhirCount.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCountChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCountChild(element : TFhirCount; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if Not ParseQuantityChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCount(xml : TXmlBuilder; name : String; elem : TFhirCount);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCountChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCountChildren(xml : TXmlBuilder; elem : TFhirCount);
begin
  composeQuantityChildren(xml, elem);
end;

function TFHIRXmlParser.ParseAge(element : TMXmlElement; path : string) : TFhirAge;
var
  child : TMXmlElement;
begin
  result := TFhirAge.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAgeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAgeChild(element : TFhirAge; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if Not ParseQuantityChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAge(xml : TXmlBuilder; name : String; elem : TFhirAge);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAgeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAgeChildren(xml : TXmlBuilder; elem : TFhirAge);
begin
  composeQuantityChildren(xml, elem);
end;

function TFHIRXmlParser.ParseDistance(element : TMXmlElement; path : string) : TFhirDistance;
var
  child : TMXmlElement;
begin
  result := TFhirDistance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDistanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDistanceChild(element : TFhirDistance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if Not ParseQuantityChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDistance(xml : TXmlBuilder; name : String; elem : TFhirDistance);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDistanceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDistanceChildren(xml : TXmlBuilder; elem : TFhirDistance);
begin
  composeQuantityChildren(xml, elem);
end;

function TFHIRXmlParser.ParseDuration(element : TMXmlElement; path : string) : TFhirDuration;
var
  child : TMXmlElement;
begin
  result := TFhirDuration.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDurationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDurationChild(element : TFhirDuration; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if Not ParseQuantityChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDuration(xml : TXmlBuilder; name : String; elem : TFhirDuration);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDurationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDurationChildren(xml : TXmlBuilder; elem : TFhirDuration);
begin
  composeQuantityChildren(xml, elem);
end;

{$IFDEF FHIR_ACCOUNT}
function TFHIRXmlParser.ParseAccountCoverage(element : TMXmlElement; path : string) : TFhirAccountCoverage;
var
  child : TMXmlElement;
begin
  result := TFhirAccountCoverage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAccountCoverageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAccountCoverageChild(element : TFhirAccountCoverage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'coverage') then
        element.coverage := ParseReference{TFhirCoverage}(child, path+'/coverage') {b}
      else if (child.localName = 'priority') then
        element.priorityElement := ParsePositiveInt(child, path+'/priority') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAccountCoverage(xml : TXmlBuilder; name : String; elem : TFhirAccountCoverage);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAccountCoverageChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAccountCoverageChildren(xml : TXmlBuilder; elem : TFhirAccountCoverage);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeReference{TFhirCoverage}(xml, 'coverage', elem.coverage);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'priority', elem.priorityElement);{x.2b}
end;

function TFHIRXmlParser.ParseAccountGuarantor(element : TMXmlElement; path : string) : TFhirAccountGuarantor;
var
  child : TMXmlElement;
begin
  result := TFhirAccountGuarantor.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAccountGuarantorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAccountGuarantorChild(element : TFhirAccountGuarantor; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'party') then
        element.party := ParseReference{TFhirPatient}(child, path+'/party') {b}
      else if (child.localName = 'onHold') then
        element.onHoldElement := ParseBoolean(child, path+'/onHold') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAccountGuarantor(xml : TXmlBuilder; name : String; elem : TFhirAccountGuarantor);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAccountGuarantorChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAccountGuarantorChildren(xml : TXmlBuilder; elem : TFhirAccountGuarantor);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeReference{TFhirPatient}(xml, 'party', elem.party);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'onHold', elem.onHoldElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParseAccount(element : TMXmlElement; path : string) : TFhirAccount;
var
  child : TMXmlElement;
begin
  result := TFhirAccount.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAccountChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAccountChild(element : TFhirAccount; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirAccountStatusEnum, SYSTEMS_TFhirAccountStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'subject') then
        element.subjectList.Add(ParseReference{TFhirPatient}(child, path+'/subject')){y.2}
      else if (child.localName = 'servicePeriod') then
        element.servicePeriod := ParsePeriod(child, path+'/servicePeriod') {b}
      else if (child.localName = 'coverage') then
        element.coverageList.Add(ParseAccountCoverage(child, path+'/coverage')){y.2}
      else if (child.localName = 'owner') then
        element.owner := ParseReference{TFhirOrganization}(child, path+'/owner') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'guarantor') then
        element.guarantorList.Add(ParseAccountGuarantor(child, path+'/guarantor')){y.2}
      else if (child.localName = 'partOf') then
        element.partOf := ParseReference{TFhirAccount}(child, path+'/partOf') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAccount(xml : TXmlBuilder; name : String; elem : TFhirAccount);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeAccountChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAccountChildren(xml : TXmlBuilder; elem : TFhirAccount);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirAccountStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    for i := 0 to elem.subjectList.Count - 1 do
      ComposeReference{TFhirPatient}(xml, 'subject', elem.subjectList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('servicePeriod') then
    ComposePeriod(xml, 'servicePeriod', elem.servicePeriod);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('coverage') then
    for i := 0 to elem.coverageList.Count - 1 do
      ComposeAccountCoverage(xml, 'coverage', elem.coverageList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('owner') then
    ComposeReference{TFhirOrganization}(xml, 'owner', elem.owner);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('guarantor') then
    for i := 0 to elem.guarantorList.Count - 1 do
      ComposeAccountGuarantor(xml, 'guarantor', elem.guarantorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('partOf') then
    ComposeReference{TFhirAccount}(xml, 'partOf', elem.partOf);{x.2a}
end;

{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
function TFHIRXmlParser.ParseActivityDefinitionParticipant(element : TMXmlElement; path : string) : TFhirActivityDefinitionParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirActivityDefinitionParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseActivityDefinitionParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseActivityDefinitionParticipantChild(element : TFhirActivityDefinitionParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirActionParticipantTypeEnum, SYSTEMS_TFhirActionParticipantTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'role') then
        element.role := ParseCodeableConcept(child, path+'/role') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeActivityDefinitionParticipant(xml : TXmlBuilder; name : String; elem : TFhirActivityDefinitionParticipant);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeActivityDefinitionParticipantChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeActivityDefinitionParticipantChildren(xml : TXmlBuilder; elem : TFhirActivityDefinitionParticipant);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirActionParticipantTypeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'role', elem.role);{x.2a}
end;

function TFHIRXmlParser.ParseActivityDefinitionDynamicValue(element : TMXmlElement; path : string) : TFhirActivityDefinitionDynamicValue;
var
  child : TMXmlElement;
begin
  result := TFhirActivityDefinitionDynamicValue.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseActivityDefinitionDynamicValueChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseActivityDefinitionDynamicValueChild(element : TFhirActivityDefinitionDynamicValue; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        element.pathElement := ParseString(child, path+'/path') {b}
      else if (child.localName = 'expression') then
        element.expression := ParseExpression(child, path+'/expression') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeActivityDefinitionDynamicValue(xml : TXmlBuilder; name : String; elem : TFhirActivityDefinitionDynamicValue);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeActivityDefinitionDynamicValueChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeActivityDefinitionDynamicValueChildren(xml : TXmlBuilder; elem : TFhirActivityDefinitionDynamicValue);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'path', elem.pathElement);{x.2b}
  ComposeExpression(xml, 'expression', elem.expression);{x.2a}
end;

function TFHIRXmlParser.ParseActivityDefinition(element : TMXmlElement; path : string) : TFhirActivityDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirActivityDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseActivityDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseActivityDefinitionChild(element : TFhirActivityDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'subtitle') then
        element.subtitleElement := ParseString(child, path+'/subtitle') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'subjectCodeableConcept') then
        element.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept'){x.3}
      else if (child.localName = 'subjectReference') then
        element.subject := ParseReference(child, path+'/subjectReference') {a}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'usage') then
        element.usageElement := ParseString(child, path+'/usage') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'approvalDate') then
        element.approvalDateElement := ParseDate(child, path+'/approvalDate') {b}
      else if (child.localName = 'lastReviewDate') then
        element.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {b}
      else if (child.localName = 'topic') then
        element.topicList.Add(ParseCodeableConcept(child, path+'/topic')){y.2}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseContactDetail(child, path+'/author')){y.2}
      else if (child.localName = 'editor') then
        element.editorList.Add(ParseContactDetail(child, path+'/editor')){y.2}
      else if (child.localName = 'reviewer') then
        element.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')){y.2}
      else if (child.localName = 'endorser') then
        element.endorserList.Add(ParseContactDetail(child, path+'/endorser')){y.2}
      else if (child.localName = 'relatedArtifact') then
        element.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')){y.2}
      else if (child.localName = 'library') then
        element.library_List.Add(ParseCanonical(child, path+'/library')){y.2}
      else if (child.localName = 'kind') then
        element.kindElement := ParseEnum(CODES_TFhirRequestResourceTypesEnum, SYSTEMS_TFhirRequestResourceTypesEnum, path+'/kind', child){1a}
      else if (child.localName = 'profile') then
        element.profileElement := ParseCanonical(child, path+'/profile') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'intent') then
        element.intentElement := ParseEnum(CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum, path+'/intent', child){1a}
      else if (child.localName = 'priority') then
        element.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, path+'/priority', child){1a}
      else if (child.localName = 'doNotPerform') then
        element.doNotPerformElement := ParseBoolean(child, path+'/doNotPerform') {b}
      else if (child.localName = 'timingTiming') then
        element.timing := ParseTiming(child, path+'/timingTiming'){x.3}
      else if (child.localName = 'timingAge') then
        element.timing := ParseAge(child, path+'/timingAge'){x.3}
      else if (child.localName = 'timingPeriod') then
        element.timing := ParsePeriod(child, path+'/timingPeriod'){x.3}
      else if (child.localName = 'timingRange') then
        element.timing := ParseRange(child, path+'/timingRange'){x.3}
      else if (child.localName = 'timingDuration') then
        element.timing := ParseDuration(child, path+'/timingDuration'){x.3}
      else if (child.localName = 'timingDateTime') then
        element.timing := ParseDateTime(child, path+'/timingDateTime'){x.3}
      else if (child.localName = 'location') then
        element.location := ParseReference{TFhirLocation}(child, path+'/location') {b}
      else if (child.localName = 'participant') then
        element.participantList.Add(ParseActivityDefinitionParticipant(child, path+'/participant')){y.2}
      else if (child.localName = 'productReference') then
        element.product := ParseReference(child, path+'/productReference') {a}
      else if (child.localName = 'productCodeableConcept') then
        element.product := ParseCodeableConcept(child, path+'/productCodeableConcept'){x.3}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'dosage') then
        element.dosageList.Add(ParseDosage(child, path+'/dosage')){y.2}
      else if (child.localName = 'bodySite') then
        element.bodySiteList.Add(ParseCodeableConcept(child, path+'/bodySite')){y.2}
      else if (child.localName = 'specimenRequirement') then
        element.specimenRequirementList.Add(ParseReference{TFhirSpecimenDefinition}(child, path+'/specimenRequirement')){y.2}
      else if (child.localName = 'observationRequirement') then
        element.observationRequirementList.Add(ParseReference{TFhirObservationDefinition}(child, path+'/observationRequirement')){y.2}
      else if (child.localName = 'observationResultRequirement') then
        element.observationResultRequirementList.Add(ParseReference{TFhirObservationDefinition}(child, path+'/observationResultRequirement')){y.2}
      else if (child.localName = 'transform') then
        element.transformElement := ParseCanonical(child, path+'/transform') {b}
      else if (child.localName = 'dynamicValue') then
        element.dynamicValueList.Add(ParseActivityDefinitionDynamicValue(child, path+'/dynamicValue')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeActivityDefinition(xml : TXmlBuilder; name : String; elem : TFhirActivityDefinition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeActivityDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeActivityDefinitionChildren(xml : TXmlBuilder; elem : TFhirActivityDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('subtitle') then
    ComposeString(xml, 'subtitle', elem.subtitleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(elem.subject))
  else if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(elem.subject));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeString(xml, 'usage', elem.usageElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDate(xml, 'approvalDate', elem.approvalDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDate(xml, 'lastReviewDate', elem.lastReviewDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(xml, 'effectivePeriod', elem.effectivePeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('topic') then
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', elem.topicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('author') then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('editor') then
    for i := 0 to elem.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', elem.editorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reviewer') then
    for i := 0 to elem.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', elem.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('endorser') then
    for i := 0 to elem.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', elem.endorserList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') then
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', elem.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('library_') then
    for i := 0 to elem.library_List.Count - 1 do
      ComposeCanonical(xml, 'library', elem.library_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('kind') then
    ComposeEnum(xml, 'kind', elem.KindElement, CODES_TFhirRequestResourceTypesEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('profile') then
    ComposeCanonical(xml, 'profile', elem.profileElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('intent') then
    ComposeEnum(xml, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('priority') then
    ComposeEnum(xml, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('doNotPerform') then
    ComposeBoolean(xml, 'doNotPerform', elem.doNotPerformElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirTiming) {6} then
    ComposeTiming(xml, 'timingTiming', TFhirTiming(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirAge) {6} then
    ComposeAge(xml, 'timingAge', TFhirAge(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timingPeriod', TFhirPeriod(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirRange) {6} then
    ComposeRange(xml, 'timingRange', TFhirRange(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDuration) {6} then
    ComposeDuration(xml, 'timingDuration', TFhirDuration(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timingDateTime', TFhirDateTime(elem.timing));
  if (SummaryOption in [soFull, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(xml, 'location', elem.location);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('participant') then
    for i := 0 to elem.participantList.Count - 1 do
      ComposeActivityDefinitionParticipant(xml, 'participant', elem.participantList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.product is TFhirReference) {2} then
    ComposeReference(xml, 'productReference', TFhirReference(elem.product))
  else if (SummaryOption in [soFull, soData]) and (elem.product is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'productCodeableConcept', TFhirCodeableConcept(elem.product));
  if (SummaryOption in [soFull, soData]) and doCompose('quantity') then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('dosage') then
    for i := 0 to elem.dosageList.Count - 1 do
      ComposeDosage(xml, 'dosage', elem.dosageList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('bodySite') then
    for i := 0 to elem.bodySiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'bodySite', elem.bodySiteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('specimenRequirement') then
    for i := 0 to elem.specimenRequirementList.Count - 1 do
      ComposeReference{TFhirSpecimenDefinition}(xml, 'specimenRequirement', elem.specimenRequirementList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('observationRequirement') then
    for i := 0 to elem.observationRequirementList.Count - 1 do
      ComposeReference{TFhirObservationDefinition}(xml, 'observationRequirement', elem.observationRequirementList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('observationResultRequirement') then
    for i := 0 to elem.observationResultRequirementList.Count - 1 do
      ComposeReference{TFhirObservationDefinition}(xml, 'observationResultRequirement', elem.observationResultRequirementList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('transform') then
    ComposeCanonical(xml, 'transform', elem.transformElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('dynamicValue') then
    for i := 0 to elem.dynamicValueList.Count - 1 do
      ComposeActivityDefinitionDynamicValue(xml, 'dynamicValue', elem.dynamicValueList[i]);
end;

{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
function TFHIRXmlParser.ParseAdverseEventSuspectEntity(element : TMXmlElement; path : string) : TFhirAdverseEventSuspectEntity;
var
  child : TMXmlElement;
begin
  result := TFhirAdverseEventSuspectEntity.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdverseEventSuspectEntityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdverseEventSuspectEntityChild(element : TFhirAdverseEventSuspectEntity; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'instance') then
        element.instance := ParseReference{TFhirImmunization}(child, path+'/instance') {b}
      else if (child.localName = 'causality') then
        element.causalityList.Add(ParseAdverseEventSuspectEntityCausality(child, path+'/causality')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventSuspectEntity(xml : TXmlBuilder; name : String; elem : TFhirAdverseEventSuspectEntity);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAdverseEventSuspectEntityChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAdverseEventSuspectEntityChildren(xml : TXmlBuilder; elem : TFhirAdverseEventSuspectEntity);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeReference{TFhirImmunization}(xml, 'instance', elem.instance);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.causalityList.Count - 1 do
      ComposeAdverseEventSuspectEntityCausality(xml, 'causality', elem.causalityList[i]);
end;

function TFHIRXmlParser.ParseAdverseEventSuspectEntityCausality(element : TMXmlElement; path : string) : TFhirAdverseEventSuspectEntityCausality;
var
  child : TMXmlElement;
begin
  result := TFhirAdverseEventSuspectEntityCausality.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdverseEventSuspectEntityCausalityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdverseEventSuspectEntityCausalityChild(element : TFhirAdverseEventSuspectEntityCausality; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'assessment') then
        element.assessment := ParseCodeableConcept(child, path+'/assessment') {b}
      else if (child.localName = 'productRelatedness') then
        element.productRelatednessElement := ParseString(child, path+'/productRelatedness') {b}
      else if (child.localName = 'author') then
        element.author := ParseReference{TFhirPractitioner}(child, path+'/author') {b}
      else if (child.localName = 'method') then
        element.method := ParseCodeableConcept(child, path+'/method') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventSuspectEntityCausality(xml : TXmlBuilder; name : String; elem : TFhirAdverseEventSuspectEntityCausality);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAdverseEventSuspectEntityCausalityChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAdverseEventSuspectEntityCausalityChildren(xml : TXmlBuilder; elem : TFhirAdverseEventSuspectEntityCausality);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'assessment', elem.assessment);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'productRelatedness', elem.productRelatednessElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'author', elem.author);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'method', elem.method);{x.2a}
end;

function TFHIRXmlParser.ParseAdverseEvent(element : TMXmlElement; path : string) : TFhirAdverseEvent;
var
  child : TMXmlElement;
begin
  result := TFhirAdverseEvent.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdverseEventChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdverseEventChild(element : TFhirAdverseEvent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'actuality') then
        element.actualityElement := ParseEnum(CODES_TFhirAdverseEventActualityEnum, SYSTEMS_TFhirAdverseEventActualityEnum, path+'/actuality', child){1a}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'event') then
        element.event := ParseCodeableConcept(child, path+'/event') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'detected') then
        element.detectedElement := ParseDateTime(child, path+'/detected') {b}
      else if (child.localName = 'recordedDate') then
        element.recordedDateElement := ParseDateTime(child, path+'/recordedDate') {b}
      else if (child.localName = 'resultingCondition') then
        element.resultingConditionList.Add(ParseReference{TFhirCondition}(child, path+'/resultingCondition')){y.2}
      else if (child.localName = 'location') then
        element.location := ParseReference{TFhirLocation}(child, path+'/location') {b}
      else if (child.localName = 'seriousness') then
        element.seriousness := ParseCodeableConcept(child, path+'/seriousness') {b}
      else if (child.localName = 'severity') then
        element.severity := ParseCodeableConcept(child, path+'/severity') {b}
      else if (child.localName = 'outcome') then
        element.outcome := ParseCodeableConcept(child, path+'/outcome') {b}
      else if (child.localName = 'recorder') then
        element.recorder := ParseReference{TFhirPatient}(child, path+'/recorder') {b}
      else if (child.localName = 'contributor') then
        element.contributorList.Add(ParseReference{TFhirPractitioner}(child, path+'/contributor')){y.2}
      else if (child.localName = 'suspectEntity') then
        element.suspectEntityList.Add(ParseAdverseEventSuspectEntity(child, path+'/suspectEntity')){y.2}
      else if (child.localName = 'subjectMedicalHistory') then
        element.subjectMedicalHistoryList.Add(ParseReference{TFhirCondition}(child, path+'/subjectMedicalHistory')){y.2}
      else if (child.localName = 'referenceDocument') then
        element.referenceDocumentList.Add(ParseReference{TFhirDocumentReference}(child, path+'/referenceDocument')){y.2}
      else if (child.localName = 'study') then
        element.studyList.Add(ParseReference{TFhirResearchStudy}(child, path+'/study')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdverseEvent(xml : TXmlBuilder; name : String; elem : TFhirAdverseEvent);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeAdverseEventChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAdverseEventChildren(xml : TXmlBuilder; elem : TFhirAdverseEvent);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  ComposeEnum(xml, 'actuality', elem.ActualityElement, CODES_TFhirAdverseEventActualityEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('event') then
    ComposeCodeableConcept(xml, 'event', elem.event);{x.2a}
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('detected') then
    ComposeDateTime(xml, 'detected', elem.detectedElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('recordedDate') then
    ComposeDateTime(xml, 'recordedDate', elem.recordedDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('resultingCondition') then
    for i := 0 to elem.resultingConditionList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'resultingCondition', elem.resultingConditionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(xml, 'location', elem.location);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('seriousness') then
    ComposeCodeableConcept(xml, 'seriousness', elem.seriousness);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('severity') then
    ComposeCodeableConcept(xml, 'severity', elem.severity);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('outcome') then
    ComposeCodeableConcept(xml, 'outcome', elem.outcome);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('recorder') then
    ComposeReference{TFhirPatient}(xml, 'recorder', elem.recorder);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contributor') then
    for i := 0 to elem.contributorList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'contributor', elem.contributorList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('suspectEntity') then
    for i := 0 to elem.suspectEntityList.Count - 1 do
      ComposeAdverseEventSuspectEntity(xml, 'suspectEntity', elem.suspectEntityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subjectMedicalHistory') then
    for i := 0 to elem.subjectMedicalHistoryList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'subjectMedicalHistory', elem.subjectMedicalHistoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('referenceDocument') then
    for i := 0 to elem.referenceDocumentList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(xml, 'referenceDocument', elem.referenceDocumentList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('study') then
    for i := 0 to elem.studyList.Count - 1 do
      ComposeReference{TFhirResearchStudy}(xml, 'study', elem.studyList[i]);
end;

{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
function TFHIRXmlParser.ParseAllergyIntoleranceReaction(element : TMXmlElement; path : string) : TFhirAllergyIntoleranceReaction;
var
  child : TMXmlElement;
begin
  result := TFhirAllergyIntoleranceReaction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAllergyIntoleranceReactionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAllergyIntoleranceReactionChild(element : TFhirAllergyIntoleranceReaction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'substance') then
        element.substance := ParseCodeableConcept(child, path+'/substance') {b}
      else if (child.localName = 'manifestation') then
        element.manifestationList.Add(ParseCodeableConcept(child, path+'/manifestation')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'onset') then
        element.onsetElement := ParseDateTime(child, path+'/onset') {b}
      else if (child.localName = 'severity') then
        element.severityElement := ParseEnum(CODES_TFhirReactionEventSeverityEnum, SYSTEMS_TFhirReactionEventSeverityEnum, path+'/severity', child){1a}
      else if (child.localName = 'exposureRoute') then
        element.exposureRoute := ParseCodeableConcept(child, path+'/exposureRoute') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAllergyIntoleranceReaction(xml : TXmlBuilder; name : String; elem : TFhirAllergyIntoleranceReaction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAllergyIntoleranceReactionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAllergyIntoleranceReactionChildren(xml : TXmlBuilder; elem : TFhirAllergyIntoleranceReaction);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'substance', elem.substance);{x.2a}
  for i := 0 to elem.manifestationList.Count - 1 do
      ComposeCodeableConcept(xml, 'manifestation', elem.manifestationList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'onset', elem.onsetElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'severity', elem.SeverityElement, CODES_TFhirReactionEventSeverityEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'exposureRoute', elem.exposureRoute);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

function TFHIRXmlParser.ParseAllergyIntolerance(element : TMXmlElement; path : string) : TFhirAllergyIntolerance;
var
  child : TMXmlElement;
begin
  result := TFhirAllergyIntolerance.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAllergyIntoleranceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAllergyIntoleranceChild(element : TFhirAllergyIntolerance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'clinicalStatus') then
        element.clinicalStatus := ParseCodeableConcept(child, path+'/clinicalStatus') {b}
      else if (child.localName = 'verificationStatus') then
        element.verificationStatus := ParseCodeableConcept(child, path+'/verificationStatus') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirAllergyIntoleranceTypeEnum, SYSTEMS_TFhirAllergyIntoleranceTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseEnum(CODES_TFhirAllergyIntoleranceCategoryEnum, SYSTEMS_TFhirAllergyIntoleranceCategoryEnum, path+'/category', child)){y.1}
      else if (child.localName = 'criticality') then
        element.criticalityElement := ParseEnum(CODES_TFhirAllergyIntoleranceCriticalityEnum, SYSTEMS_TFhirAllergyIntoleranceCriticalityEnum, path+'/criticality', child){1a}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'onsetAge') then
        element.onset := ParseAge(child, path+'/onsetAge'){x.3}
      else if (child.localName = 'onsetPeriod') then
        element.onset := ParsePeriod(child, path+'/onsetPeriod'){x.3}
      else if (child.localName = 'onsetRange') then
        element.onset := ParseRange(child, path+'/onsetRange'){x.3}
      else if (child.localName = 'onsetDateTime') then
        element.onset := ParseDateTime(child, path+'/onsetDateTime'){x.3}
      else if (child.localName = 'onsetString') then
        element.onset := ParseString(child, path+'/onsetString'){x.3}
      else if (child.localName = 'recordedDate') then
        element.recordedDateElement := ParseDateTime(child, path+'/recordedDate') {b}
      else if (child.localName = 'recorder') then
        element.recorder := ParseReference{TFhirPractitioner}(child, path+'/recorder') {b}
      else if (child.localName = 'asserter') then
        element.asserter := ParseReference{TFhirPatient}(child, path+'/asserter') {b}
      else if (child.localName = 'lastOccurrence') then
        element.lastOccurrenceElement := ParseDateTime(child, path+'/lastOccurrence') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'reaction') then
        element.reactionList.Add(ParseAllergyIntoleranceReaction(child, path+'/reaction')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAllergyIntolerance(xml : TXmlBuilder; name : String; elem : TFhirAllergyIntolerance);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeAllergyIntoleranceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAllergyIntoleranceChildren(xml : TXmlBuilder; elem : TFhirAllergyIntolerance);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('clinicalStatus') then
    ComposeCodeableConcept(xml, 'clinicalStatus', elem.clinicalStatus);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('verificationStatus') then
    ComposeCodeableConcept(xml, 'verificationStatus', elem.verificationStatus);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirAllergyIntoleranceTypeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeEnum(xml, 'category', elem.categoryList[i], CODES_TFhirAllergyIntoleranceCategoryEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('criticality') then
    ComposeEnum(xml, 'criticality', elem.CriticalityElement, CODES_TFhirAllergyIntoleranceCriticalityEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirAge) {6} then
    ComposeAge(xml, 'onsetAge', TFhirAge(elem.onset))
  else if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirPeriod) {6} then
    ComposePeriod(xml, 'onsetPeriod', TFhirPeriod(elem.onset))
  else if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirRange) {6} then
    ComposeRange(xml, 'onsetRange', TFhirRange(elem.onset))
  else if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'onsetDateTime', TFhirDateTime(elem.onset))
  else if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirString) {6} then
    ComposeString(xml, 'onsetString', TFhirString(elem.onset));
  if (SummaryOption in [soFull, soData]) and doCompose('recordedDate') then
    ComposeDateTime(xml, 'recordedDate', elem.recordedDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('recorder') then
    ComposeReference{TFhirPractitioner}(xml, 'recorder', elem.recorder);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('asserter') then
    ComposeReference{TFhirPatient}(xml, 'asserter', elem.asserter);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('lastOccurrence') then
    ComposeDateTime(xml, 'lastOccurrence', elem.lastOccurrenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reaction') then
    for i := 0 to elem.reactionList.Count - 1 do
      ComposeAllergyIntoleranceReaction(xml, 'reaction', elem.reactionList[i]);
end;

{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
function TFHIRXmlParser.ParseAppointmentParticipant(element : TMXmlElement; path : string) : TFhirAppointmentParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirAppointmentParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAppointmentParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAppointmentParticipantChild(element : TFhirAppointmentParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'actor') then
        element.actor := ParseReference{TFhirPatient}(child, path+'/actor') {b}
      else if (child.localName = 'required') then
        element.requiredElement := ParseEnum(CODES_TFhirParticipantrequiredEnum, SYSTEMS_TFhirParticipantrequiredEnum, path+'/required', child){1a}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirParticipationstatusEnum, SYSTEMS_TFhirParticipationstatusEnum, path+'/status', child){1a}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAppointmentParticipant(xml : TXmlBuilder; name : String; elem : TFhirAppointmentParticipant);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAppointmentParticipantChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAppointmentParticipantChildren(xml : TXmlBuilder; elem : TFhirAppointmentParticipant);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPatient}(xml, 'actor', elem.actor);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'required', elem.RequiredElement, CODES_TFhirParticipantrequiredEnum);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirParticipationstatusEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParseAppointment(element : TMXmlElement; path : string) : TFhirAppointment;
var
  child : TMXmlElement;
begin
  result := TFhirAppointment.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAppointmentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAppointmentChild(element : TFhirAppointment; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirAppointmentstatusEnum, SYSTEMS_TFhirAppointmentstatusEnum, path+'/status', child){1a}
      else if (child.localName = 'cancelationReason') then
        element.cancelationReason := ParseCodeableConcept(child, path+'/cancelationReason') {b}
      else if (child.localName = 'serviceCategory') then
        element.serviceCategoryList.Add(ParseCodeableConcept(child, path+'/serviceCategory')){y.2}
      else if (child.localName = 'serviceType') then
        element.serviceTypeList.Add(ParseCodeableConcept(child, path+'/serviceType')){y.2}
      else if (child.localName = 'specialty') then
        element.specialtyList.Add(ParseCodeableConcept(child, path+'/specialty')){y.2}
      else if (child.localName = 'appointmentType') then
        element.appointmentType := ParseCodeableConcept(child, path+'/appointmentType') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'priority') then
        element.priorityElement := ParseUnsignedInt(child, path+'/priority') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'supportingInformation') then
        element.supportingInformationList.Add(ParseReference{TFhirReference}(child, path+'/supportingInformation')){y.2}
      else if (child.localName = 'start') then
        element.startElement := ParseInstant(child, path+'/start') {b}
      else if (child.localName = 'end') then
        element.end_Element := ParseInstant(child, path+'/end') {b}
      else if (child.localName = 'minutesDuration') then
        element.minutesDurationElement := ParsePositiveInt(child, path+'/minutesDuration') {b}
      else if (child.localName = 'slot') then
        element.slotList.Add(ParseReference{TFhirSlot}(child, path+'/slot')){y.2}
      else if (child.localName = 'created') then
        element.createdElement := ParseDateTime(child, path+'/created') {b}
      else if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if (child.localName = 'patientInstruction') then
        element.patientInstructionElement := ParseString(child, path+'/patientInstruction') {b}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirServiceRequest}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'participant') then
        element.participantList.Add(ParseAppointmentParticipant(child, path+'/participant')){y.2}
      else if (child.localName = 'requestedPeriod') then
        element.requestedPeriodList.Add(ParsePeriod(child, path+'/requestedPeriod')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAppointment(xml : TXmlBuilder; name : String; elem : TFhirAppointment);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeAppointmentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAppointmentChildren(xml : TXmlBuilder; elem : TFhirAppointment);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirAppointmentstatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('cancelationReason') then
    ComposeCodeableConcept(xml, 'cancelationReason', elem.cancelationReason);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('serviceCategory') then
    for i := 0 to elem.serviceCategoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'serviceCategory', elem.serviceCategoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('serviceType') then
    for i := 0 to elem.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'serviceType', elem.serviceTypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specialty') then
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialty', elem.specialtyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('appointmentType') then
    ComposeCodeableConcept(xml, 'appointmentType', elem.appointmentType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('priority') then
    ComposeUnsignedInt(xml, 'priority', elem.priorityElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInformation') then
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'supportingInformation', elem.supportingInformationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('start') then
    ComposeInstant(xml, 'start', elem.startElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('end_') then
    ComposeInstant(xml, 'end', elem.end_Element);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('minutesDuration') then
    ComposePositiveInt(xml, 'minutesDuration', elem.minutesDurationElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('slot') then
    for i := 0 to elem.slotList.Count - 1 do
      ComposeReference{TFhirSlot}(xml, 'slot', elem.slotList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTime(xml, 'created', elem.createdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('patientInstruction') then
    ComposeString(xml, 'patientInstruction', elem.patientInstructionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(xml, 'basedOn', elem.basedOnList[i]);
  for i := 0 to elem.participantList.Count - 1 do
      ComposeAppointmentParticipant(xml, 'participant', elem.participantList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('requestedPeriod') then
    for i := 0 to elem.requestedPeriodList.Count - 1 do
      ComposePeriod(xml, 'requestedPeriod', elem.requestedPeriodList[i]);
end;

{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
function TFHIRXmlParser.ParseAppointmentResponse(element : TMXmlElement; path : string) : TFhirAppointmentResponse;
var
  child : TMXmlElement;
begin
  result := TFhirAppointmentResponse.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAppointmentResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAppointmentResponseChild(element : TFhirAppointmentResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'appointment') then
        element.appointment := ParseReference{TFhirAppointment}(child, path+'/appointment') {b}
      else if (child.localName = 'start') then
        element.startElement := ParseInstant(child, path+'/start') {b}
      else if (child.localName = 'end') then
        element.end_Element := ParseInstant(child, path+'/end') {b}
      else if (child.localName = 'participantType') then
        element.participantTypeList.Add(ParseCodeableConcept(child, path+'/participantType')){y.2}
      else if (child.localName = 'actor') then
        element.actor := ParseReference{TFhirPatient}(child, path+'/actor') {b}
      else if (child.localName = 'participantStatus') then
        element.participantStatusElement := ParseEnum(CODES_TFhirParticipationstatusEnum, SYSTEMS_TFhirParticipationstatusEnum, path+'/participantStatus', child){1a}
      else if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAppointmentResponse(xml : TXmlBuilder; name : String; elem : TFhirAppointmentResponse);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeAppointmentResponseChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAppointmentResponseChildren(xml : TXmlBuilder; elem : TFhirAppointmentResponse);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeReference{TFhirAppointment}(xml, 'appointment', elem.appointment);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('start') then
    ComposeInstant(xml, 'start', elem.startElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('end_') then
    ComposeInstant(xml, 'end', elem.end_Element);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('participantType') then
    for i := 0 to elem.participantTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'participantType', elem.participantTypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('actor') then
    ComposeReference{TFhirPatient}(xml, 'actor', elem.actor);{x.2a}
  ComposeEnum(xml, 'participantStatus', elem.ParticipantStatusElement, CODES_TFhirParticipationstatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
end;

{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
function TFHIRXmlParser.ParseAuditEventAgent(element : TMXmlElement; path : string) : TFhirAuditEventAgent;
var
  child : TMXmlElement;
begin
  result := TFhirAuditEventAgent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAuditEventAgentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAuditEventAgentChild(element : TFhirAuditEventAgent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'role') then
        element.roleList.Add(ParseCodeableConcept(child, path+'/role')){y.2}
      else if (child.localName = 'who') then
        element.who := ParseReference{TFhirPractitionerRole}(child, path+'/who') {b}
      else if (child.localName = 'altId') then
        element.altIdElement := ParseString(child, path+'/altId') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'requestor') then
        element.requestorElement := ParseBoolean(child, path+'/requestor') {b}
      else if (child.localName = 'location') then
        element.location := ParseReference{TFhirLocation}(child, path+'/location') {b}
      else if (child.localName = 'policy') then
        element.policyList.Add(ParseUri(child, path+'/policy')){y.2}
      else if (child.localName = 'media') then
        element.media := ParseCoding(child, path+'/media') {b}
      else if (child.localName = 'network') then
        element.network := ParseAuditEventAgentNetwork(child, path+'/network') {b}
      else if (child.localName = 'purposeOfUse') then
        element.purposeOfUseList.Add(ParseCodeableConcept(child, path+'/purposeOfUse')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAuditEventAgent(xml : TXmlBuilder; name : String; elem : TFhirAuditEventAgent);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAuditEventAgentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAuditEventAgentChildren(xml : TXmlBuilder; elem : TFhirAuditEventAgent);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.roleList.Count - 1 do
      ComposeCodeableConcept(xml, 'role', elem.roleList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitionerRole}(xml, 'who', elem.who);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'altId', elem.altIdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  ComposeBoolean(xml, 'requestor', elem.requestorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(xml, 'location', elem.location);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.policyList.Count - 1 do
      ComposeUri(xml, 'policy', elem.policyList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'media', elem.media);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeAuditEventAgentNetwork(xml, 'network', elem.network);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.purposeOfUseList.Count - 1 do
      ComposeCodeableConcept(xml, 'purposeOfUse', elem.purposeOfUseList[i]);
end;

function TFHIRXmlParser.ParseAuditEventAgentNetwork(element : TMXmlElement; path : string) : TFhirAuditEventAgentNetwork;
var
  child : TMXmlElement;
begin
  result := TFhirAuditEventAgentNetwork.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAuditEventAgentNetworkChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAuditEventAgentNetworkChild(element : TFhirAuditEventAgentNetwork; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'address') then
        element.addressElement := ParseString(child, path+'/address') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirNetworkTypeEnum, SYSTEMS_TFhirNetworkTypeEnum, path+'/type', child){1a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAuditEventAgentNetwork(xml : TXmlBuilder; name : String; elem : TFhirAuditEventAgentNetwork);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAuditEventAgentNetworkChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAuditEventAgentNetworkChildren(xml : TXmlBuilder; elem : TFhirAuditEventAgentNetwork);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'address', elem.addressElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirNetworkTypeEnum);
end;

function TFHIRXmlParser.ParseAuditEventSource(element : TMXmlElement; path : string) : TFhirAuditEventSource;
var
  child : TMXmlElement;
begin
  result := TFhirAuditEventSource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAuditEventSourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAuditEventSourceChild(element : TFhirAuditEventSource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'site') then
        element.siteElement := ParseString(child, path+'/site') {b}
      else if (child.localName = 'observer') then
        element.observer := ParseReference{TFhirPractitionerRole}(child, path+'/observer') {b}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseCoding(child, path+'/type')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAuditEventSource(xml : TXmlBuilder; name : String; elem : TFhirAuditEventSource);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAuditEventSourceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAuditEventSourceChildren(xml : TXmlBuilder; elem : TFhirAuditEventSource);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'site', elem.siteElement);{x.2b}
  ComposeReference{TFhirPractitionerRole}(xml, 'observer', elem.observer);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCoding(xml, 'type', elem.type_List[i]);
end;

function TFHIRXmlParser.ParseAuditEventEntity(element : TMXmlElement; path : string) : TFhirAuditEventEntity;
var
  child : TMXmlElement;
begin
  result := TFhirAuditEventEntity.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAuditEventEntityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAuditEventEntityChild(element : TFhirAuditEventEntity; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'what') then
        element.what := ParseReference{TFhirReference}(child, path+'/what') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCoding(child, path+'/type') {b}
      else if (child.localName = 'role') then
        element.role := ParseCoding(child, path+'/role') {b}
      else if (child.localName = 'lifecycle') then
        element.lifecycle := ParseCoding(child, path+'/lifecycle') {b}
      else if (child.localName = 'securityLabel') then
        element.securityLabelList.Add(ParseCoding(child, path+'/securityLabel')){y.2}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'query') then
        element.queryElement := ParseBase64Binary(child, path+'/query') {b}
      else if (child.localName = 'detail') then
        element.detailList.Add(ParseAuditEventEntityDetail(child, path+'/detail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAuditEventEntity(xml : TXmlBuilder; name : String; elem : TFhirAuditEventEntity);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAuditEventEntityChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAuditEventEntityChildren(xml : TXmlBuilder; elem : TFhirAuditEventEntity);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(xml, 'what', elem.what);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'role', elem.role);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'lifecycle', elem.lifecycle);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.securityLabelList.Count - 1 do
      ComposeCoding(xml, 'securityLabel', elem.securityLabelList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64Binary(xml, 'query', elem.queryElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.detailList.Count - 1 do
      ComposeAuditEventEntityDetail(xml, 'detail', elem.detailList[i]);
end;

function TFHIRXmlParser.ParseAuditEventEntityDetail(element : TMXmlElement; path : string) : TFhirAuditEventEntityDetail;
var
  child : TMXmlElement;
begin
  result := TFhirAuditEventEntityDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAuditEventEntityDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAuditEventEntityDetailChild(element : TFhirAuditEventEntityDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseString(child, path+'/type') {b}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueBase64Binary') then
        element.value := ParseBase64Binary(child, path+'/valueBase64Binary'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAuditEventEntityDetail(xml : TXmlBuilder; name : String; elem : TFhirAuditEventEntityDetail);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeAuditEventEntityDetailChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAuditEventEntityDetailChildren(xml : TXmlBuilder; elem : TFhirAuditEventEntityDetail);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'type', elem.type_Element);{x.2b}
  if (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (elem.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(elem.value));
end;

function TFHIRXmlParser.ParseAuditEvent(element : TMXmlElement; path : string) : TFhirAuditEvent;
var
  child : TMXmlElement;
begin
  result := TFhirAuditEvent.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAuditEventChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAuditEventChild(element : TFhirAuditEvent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCoding(child, path+'/type') {b}
      else if (child.localName = 'subtype') then
        element.subtypeList.Add(ParseCoding(child, path+'/subtype')){y.2}
      else if (child.localName = 'action') then
        element.actionElement := ParseEnum(CODES_TFhirAuditEventActionEnum, SYSTEMS_TFhirAuditEventActionEnum, path+'/action', child){1a}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'recorded') then
        element.recordedElement := ParseInstant(child, path+'/recorded') {b}
      else if (child.localName = 'outcome') then
        element.outcomeElement := ParseEnum(CODES_TFhirAuditEventOutcomeEnum, SYSTEMS_TFhirAuditEventOutcomeEnum, path+'/outcome', child){1a}
      else if (child.localName = 'outcomeDesc') then
        element.outcomeDescElement := ParseString(child, path+'/outcomeDesc') {b}
      else if (child.localName = 'purposeOfEvent') then
        element.purposeOfEventList.Add(ParseCodeableConcept(child, path+'/purposeOfEvent')){y.2}
      else if (child.localName = 'agent') then
        element.agentList.Add(ParseAuditEventAgent(child, path+'/agent')){y.2}
      else if (child.localName = 'source') then
        element.source := ParseAuditEventSource(child, path+'/source') {b}
      else if (child.localName = 'entity') then
        element.entityList.Add(ParseAuditEventEntity(child, path+'/entity')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAuditEvent(xml : TXmlBuilder; name : String; elem : TFhirAuditEvent);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeAuditEventChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeAuditEventChildren(xml : TXmlBuilder; elem : TFhirAuditEvent);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  ComposeCoding(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subtype') then
    for i := 0 to elem.subtypeList.Count - 1 do
      ComposeCoding(xml, 'subtype', elem.subtypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('action') then
    ComposeEnum(xml, 'action', elem.ActionElement, CODES_TFhirAuditEventActionEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  ComposeInstant(xml, 'recorded', elem.recordedElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('outcome') then
    ComposeEnum(xml, 'outcome', elem.OutcomeElement, CODES_TFhirAuditEventOutcomeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('outcomeDesc') then
    ComposeString(xml, 'outcomeDesc', elem.outcomeDescElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('purposeOfEvent') then
    for i := 0 to elem.purposeOfEventList.Count - 1 do
      ComposeCodeableConcept(xml, 'purposeOfEvent', elem.purposeOfEventList[i]);
  for i := 0 to elem.agentList.Count - 1 do
      ComposeAuditEventAgent(xml, 'agent', elem.agentList[i]);
  ComposeAuditEventSource(xml, 'source', elem.source);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('entity') then
    for i := 0 to elem.entityList.Count - 1 do
      ComposeAuditEventEntity(xml, 'entity', elem.entityList[i]);
end;

{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
function TFHIRXmlParser.ParseBasic(element : TMXmlElement; path : string) : TFhirBasic;
var
  child : TMXmlElement;
begin
  result := TFhirBasic.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBasicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBasicChild(element : TFhirBasic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirReference}(child, path+'/subject') {b}
      else if (child.localName = 'created') then
        element.createdElement := ParseDate(child, path+'/created') {b}
      else if (child.localName = 'author') then
        element.author := ParseReference{TFhirPractitioner}(child, path+'/author') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBasic(xml : TXmlBuilder; name : String; elem : TFhirBasic);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeBasicChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBasicChildren(xml : TXmlBuilder; elem : TFhirBasic);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirReference}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('created') then
    ComposeDate(xml, 'created', elem.createdElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    ComposeReference{TFhirPractitioner}(xml, 'author', elem.author);{x.2a}
end;

{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
function TFHIRXmlParser.ParseBinary(element : TMXmlElement; path : string) : TFhirBinary;
var
  child : TMXmlElement;
begin
  result := TFhirBinary.create;
  try
    parseResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBinaryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBinaryChild(element : TFhirBinary; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'contentType') then
        element.contentTypeElement := ParseCode(child, path+'/contentType') {b}
      else if (child.localName = 'securityContext') then
        element.securityContext := ParseReference{TFhirReference}(child, path+'/securityContext') {b}
      else if (child.localName = 'data') then
        element.dataElement := ParseBase64Binary(child, path+'/data') {b}
      else if Not ParseResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBinary(xml : TXmlBuilder; name : String; elem : TFhirBinary);
begin
  if (elem = nil) then
    exit;
  composeResourceAttributes(xml, elem);
  xml.open(name);
  composeBinaryChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBinaryChildren(xml : TXmlBuilder; elem : TFhirBinary);
begin
  composeResourceChildren(xml, elem);
  ComposeCode(xml, 'contentType', elem.contentTypeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('securityContext') then
    ComposeReference{TFhirReference}(xml, 'securityContext', elem.securityContext);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('data') then
    ComposeBase64Binary(xml, 'data', elem.dataElement);{x.2b}
end;

{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
function TFHIRXmlParser.ParseBiologicallyDerivedProductCollection(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductCollection;
var
  child : TMXmlElement;
begin
  result := TFhirBiologicallyDerivedProductCollection.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBiologicallyDerivedProductCollectionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductCollectionChild(element : TFhirBiologicallyDerivedProductCollection; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'collector') then
        element.collector := ParseReference{TFhirPractitioner}(child, path+'/collector') {b}
      else if (child.localName = 'source') then
        element.source := ParseReference{TFhirPatient}(child, path+'/source') {b}
      else if (child.localName = 'collectedPeriod') then
        element.collected := ParsePeriod(child, path+'/collectedPeriod'){x.3}
      else if (child.localName = 'collectedDateTime') then
        element.collected := ParseDateTime(child, path+'/collectedDateTime'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductCollection(xml : TXmlBuilder; name : String; elem : TFhirBiologicallyDerivedProductCollection);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeBiologicallyDerivedProductCollectionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductCollectionChildren(xml : TXmlBuilder; elem : TFhirBiologicallyDerivedProductCollection);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'collector', elem.collector);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPatient}(xml, 'source', elem.source);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.collected is TFhirPeriod) {6} then
    ComposePeriod(xml, 'collectedPeriod', TFhirPeriod(elem.collected))
  else if (SummaryOption in [soFull, soData]) and (elem.collected is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'collectedDateTime', TFhirDateTime(elem.collected));
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductProcessing(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductProcessing;
var
  child : TMXmlElement;
begin
  result := TFhirBiologicallyDerivedProductProcessing.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBiologicallyDerivedProductProcessingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductProcessingChild(element : TFhirBiologicallyDerivedProductProcessing; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'procedure') then
        element.procedure_ := ParseCodeableConcept(child, path+'/procedure') {b}
      else if (child.localName = 'additive') then
        element.additive := ParseReference{TFhirSubstance}(child, path+'/additive') {b}
      else if (child.localName = 'timePeriod') then
        element.time := ParsePeriod(child, path+'/timePeriod'){x.3}
      else if (child.localName = 'timeDateTime') then
        element.time := ParseDateTime(child, path+'/timeDateTime'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductProcessing(xml : TXmlBuilder; name : String; elem : TFhirBiologicallyDerivedProductProcessing);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeBiologicallyDerivedProductProcessingChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductProcessingChildren(xml : TXmlBuilder; elem : TFhirBiologicallyDerivedProductProcessing);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'procedure', elem.procedure_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirSubstance}(xml, 'additive', elem.additive);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.time is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timePeriod', TFhirPeriod(elem.time))
  else if (SummaryOption in [soFull, soData]) and (elem.time is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timeDateTime', TFhirDateTime(elem.time));
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductManipulation(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductManipulation;
var
  child : TMXmlElement;
begin
  result := TFhirBiologicallyDerivedProductManipulation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBiologicallyDerivedProductManipulationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductManipulationChild(element : TFhirBiologicallyDerivedProductManipulation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'timePeriod') then
        element.time := ParsePeriod(child, path+'/timePeriod'){x.3}
      else if (child.localName = 'timeDateTime') then
        element.time := ParseDateTime(child, path+'/timeDateTime'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductManipulation(xml : TXmlBuilder; name : String; elem : TFhirBiologicallyDerivedProductManipulation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeBiologicallyDerivedProductManipulationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductManipulationChildren(xml : TXmlBuilder; elem : TFhirBiologicallyDerivedProductManipulation);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.time is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timePeriod', TFhirPeriod(elem.time))
  else if (SummaryOption in [soFull, soData]) and (elem.time is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timeDateTime', TFhirDateTime(elem.time));
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductStorage(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductStorage;
var
  child : TMXmlElement;
begin
  result := TFhirBiologicallyDerivedProductStorage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBiologicallyDerivedProductStorageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductStorageChild(element : TFhirBiologicallyDerivedProductStorage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'temperature') then
        element.temperatureElement := ParseDecimal(child, path+'/temperature') {b}
      else if (child.localName = 'scale') then
        element.scaleElement := ParseEnum(CODES_TFhirProductStorageScaleEnum, SYSTEMS_TFhirProductStorageScaleEnum, path+'/scale', child){1a}
      else if (child.localName = 'duration') then
        element.duration := ParsePeriod(child, path+'/duration') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductStorage(xml : TXmlBuilder; name : String; elem : TFhirBiologicallyDerivedProductStorage);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeBiologicallyDerivedProductStorageChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductStorageChildren(xml : TXmlBuilder; elem : TFhirBiologicallyDerivedProductStorage);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'temperature', elem.temperatureElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'scale', elem.ScaleElement, CODES_TFhirProductStorageScaleEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'duration', elem.duration);{x.2a}
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProduct(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProduct;
var
  child : TMXmlElement;
begin
  result := TFhirBiologicallyDerivedProduct.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBiologicallyDerivedProductChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductChild(element : TFhirBiologicallyDerivedProduct; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'productCategory') then
        element.productCategoryElement := ParseEnum(CODES_TFhirProductCategoryEnum, SYSTEMS_TFhirProductCategoryEnum, path+'/productCategory', child){1a}
      else if (child.localName = 'productCode') then
        element.productCode := ParseCodeableConcept(child, path+'/productCode') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirProductStatusEnum, SYSTEMS_TFhirProductStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'request') then
        element.requestList.Add(ParseReference{TFhirServiceRequest}(child, path+'/request')){y.2}
      else if (child.localName = 'quantity') then
        element.quantityElement := ParseInteger(child, path+'/quantity') {b}
      else if (child.localName = 'parent') then
        element.parentList.Add(ParseReference{TFhirBiologicallyDerivedProduct}(child, path+'/parent')){y.2}
      else if (child.localName = 'collection') then
        element.collection := ParseBiologicallyDerivedProductCollection(child, path+'/collection') {b}
      else if (child.localName = 'processing') then
        element.processingList.Add(ParseBiologicallyDerivedProductProcessing(child, path+'/processing')){y.2}
      else if (child.localName = 'manipulation') then
        element.manipulation := ParseBiologicallyDerivedProductManipulation(child, path+'/manipulation') {b}
      else if (child.localName = 'storage') then
        element.storageList.Add(ParseBiologicallyDerivedProductStorage(child, path+'/storage')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProduct(xml : TXmlBuilder; name : String; elem : TFhirBiologicallyDerivedProduct);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeBiologicallyDerivedProductChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductChildren(xml : TXmlBuilder; elem : TFhirBiologicallyDerivedProduct);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('productCategory') then
    ComposeEnum(xml, 'productCategory', elem.ProductCategoryElement, CODES_TFhirProductCategoryEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('productCode') then
    ComposeCodeableConcept(xml, 'productCode', elem.productCode);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirProductStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('request') then
    for i := 0 to elem.requestList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(xml, 'request', elem.requestList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('quantity') then
    ComposeInteger(xml, 'quantity', elem.quantityElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('parent') then
    for i := 0 to elem.parentList.Count - 1 do
      ComposeReference{TFhirBiologicallyDerivedProduct}(xml, 'parent', elem.parentList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('collection') then
    ComposeBiologicallyDerivedProductCollection(xml, 'collection', elem.collection);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('processing') then
    for i := 0 to elem.processingList.Count - 1 do
      ComposeBiologicallyDerivedProductProcessing(xml, 'processing', elem.processingList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('manipulation') then
    ComposeBiologicallyDerivedProductManipulation(xml, 'manipulation', elem.manipulation);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('storage') then
    for i := 0 to elem.storageList.Count - 1 do
      ComposeBiologicallyDerivedProductStorage(xml, 'storage', elem.storageList[i]);
end;

{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
function TFHIRXmlParser.ParseBodyStructure(element : TMXmlElement; path : string) : TFhirBodyStructure;
var
  child : TMXmlElement;
begin
  result := TFhirBodyStructure.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBodyStructureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBodyStructureChild(element : TFhirBodyStructure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'active') then
        element.activeElement := ParseBoolean(child, path+'/active') {b}
      else if (child.localName = 'morphology') then
        element.morphology := ParseCodeableConcept(child, path+'/morphology') {b}
      else if (child.localName = 'location') then
        element.location := ParseCodeableConcept(child, path+'/location') {b}
      else if (child.localName = 'locationQualifier') then
        element.locationQualifierList.Add(ParseCodeableConcept(child, path+'/locationQualifier')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'image') then
        element.imageList.Add(ParseAttachment(child, path+'/image')){y.2}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBodyStructure(xml : TXmlBuilder; name : String; elem : TFhirBodyStructure);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeBodyStructureChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBodyStructureChildren(xml : TXmlBuilder; elem : TFhirBodyStructure);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposeBoolean(xml, 'active', elem.activeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('morphology') then
    ComposeCodeableConcept(xml, 'morphology', elem.morphology);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('location') then
    ComposeCodeableConcept(xml, 'location', elem.location);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('locationQualifier') then
    for i := 0 to elem.locationQualifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'locationQualifier', elem.locationQualifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('image') then
    for i := 0 to elem.imageList.Count - 1 do
      ComposeAttachment(xml, 'image', elem.imageList[i]);
  ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
end;

{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
function TFHIRXmlParser.ParseBundleLink(element : TMXmlElement; path : string) : TFhirBundleLink;
var
  child : TMXmlElement;
begin
  result := TFhirBundleLink.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBundleLinkChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBundleLinkChild(element : TFhirBundleLink; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'relation') then
        element.relationElement := ParseString(child, path+'/relation') {b}
      else if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBundleLink(xml : TXmlBuilder; name : String; elem : TFhirBundleLink);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeBundleLinkChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBundleLinkChildren(xml : TXmlBuilder; elem : TFhirBundleLink);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'relation', elem.relationElement);{x.2b}
  ComposeUri(xml, 'url', elem.urlElement);{x.2b}
end;

function TFHIRXmlParser.ParseBundleEntry(element : TMXmlElement; path : string) : TFhirBundleEntry;
var
  child : TMXmlElement;
begin
  result := TFhirBundleEntry.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBundleEntryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBundleEntryChild(element : TFhirBundleEntry; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'link') then
        element.link_List.Add(ParseBundleLink(child, path+'/link')){y.2}
      else if (child.localName = 'fullUrl') then
        element.fullUrlElement := ParseUri(child, path+'/fullUrl') {b}
      else if (child.localName = 'resource') then
        element.resource := ParseInnerResource(child, path+'/resource') {b}
      else if (child.localName = 'search') then
        element.search := ParseBundleEntrySearch(child, path+'/search') {b}
      else if (child.localName = 'request') then
        element.request := ParseBundleEntryRequest(child, path+'/request') {b}
      else if (child.localName = 'response') then
        element.response := ParseBundleEntryResponse(child, path+'/response') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBundleEntry(xml : TXmlBuilder; name : String; elem : TFhirBundleEntry);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeBundleEntryChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBundleEntryChildren(xml : TXmlBuilder; elem : TFhirBundleEntry);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.link_List.Count - 1 do
      ComposeBundleLink(xml, 'link', elem.link_List[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUri(xml, 'fullUrl', elem.fullUrlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(xml, 'resource', elem, elem.resource);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntrySearch(xml, 'search', elem.search);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntryRequest(xml, 'request', elem.request);{x.2a}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntryResponse(xml, 'response', elem.response);{x.2a}
end;

function TFHIRXmlParser.ParseBundleEntrySearch(element : TMXmlElement; path : string) : TFhirBundleEntrySearch;
var
  child : TMXmlElement;
begin
  result := TFhirBundleEntrySearch.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBundleEntrySearchChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBundleEntrySearchChild(element : TFhirBundleEntrySearch; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'mode') then
        element.modeElement := ParseEnum(CODES_TFhirSearchEntryModeEnum, SYSTEMS_TFhirSearchEntryModeEnum, path+'/mode', child){1a}
      else if (child.localName = 'score') then
        element.scoreElement := ParseDecimal(child, path+'/score') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBundleEntrySearch(xml : TXmlBuilder; name : String; elem : TFhirBundleEntrySearch);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeBundleEntrySearchChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBundleEntrySearchChildren(xml : TXmlBuilder; elem : TFhirBundleEntrySearch);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnum(xml, 'mode', elem.ModeElement, CODES_TFhirSearchEntryModeEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimal(xml, 'score', elem.scoreElement);{x.2b}
end;

function TFHIRXmlParser.ParseBundleEntryRequest(element : TMXmlElement; path : string) : TFhirBundleEntryRequest;
var
  child : TMXmlElement;
begin
  result := TFhirBundleEntryRequest.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBundleEntryRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBundleEntryRequestChild(element : TFhirBundleEntryRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'method') then
        element.methodElement := ParseEnum(CODES_TFhirHttpVerbEnum, SYSTEMS_TFhirHttpVerbEnum, path+'/method', child){1a}
      else if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'ifNoneMatch') then
        element.ifNoneMatchElement := ParseString(child, path+'/ifNoneMatch') {b}
      else if (child.localName = 'ifModifiedSince') then
        element.ifModifiedSinceElement := ParseInstant(child, path+'/ifModifiedSince') {b}
      else if (child.localName = 'ifMatch') then
        element.ifMatchElement := ParseString(child, path+'/ifMatch') {b}
      else if (child.localName = 'ifNoneExist') then
        element.ifNoneExistElement := ParseString(child, path+'/ifNoneExist') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBundleEntryRequest(xml : TXmlBuilder; name : String; elem : TFhirBundleEntryRequest);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeBundleEntryRequestChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBundleEntryRequestChildren(xml : TXmlBuilder; elem : TFhirBundleEntryRequest);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'method', elem.MethodElement, CODES_TFhirHttpVerbEnum);
  ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'ifNoneMatch', elem.ifNoneMatchElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstant(xml, 'ifModifiedSince', elem.ifModifiedSinceElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'ifMatch', elem.ifMatchElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'ifNoneExist', elem.ifNoneExistElement);{x.2b}
end;

function TFHIRXmlParser.ParseBundleEntryResponse(element : TMXmlElement; path : string) : TFhirBundleEntryResponse;
var
  child : TMXmlElement;
begin
  result := TFhirBundleEntryResponse.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBundleEntryResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBundleEntryResponseChild(element : TFhirBundleEntryResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'status') then
        element.statusElement := ParseString(child, path+'/status') {b}
      else if (child.localName = 'location') then
        element.locationElement := ParseUri(child, path+'/location') {b}
      else if (child.localName = 'etag') then
        element.etagElement := ParseString(child, path+'/etag') {b}
      else if (child.localName = 'lastModified') then
        element.lastModifiedElement := ParseInstant(child, path+'/lastModified') {b}
      else if (child.localName = 'outcome') then
        element.outcome := ParseInnerResource(child, path+'/outcome') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBundleEntryResponse(xml : TXmlBuilder; name : String; elem : TFhirBundleEntryResponse);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeBundleEntryResponseChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBundleEntryResponseChildren(xml : TXmlBuilder; elem : TFhirBundleEntryResponse);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'status', elem.statusElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUri(xml, 'location', elem.locationElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'etag', elem.etagElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstant(xml, 'lastModified', elem.lastModifiedElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(xml, 'outcome', elem, elem.outcome);{x.2a}
end;

function TFHIRXmlParser.ParseBundle(element : TMXmlElement; path : string) : TFhirBundle;
var
  child : TMXmlElement;
begin
  result := TFhirBundle.create;
  try
    parseResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBundleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBundleChild(element : TFhirBundle; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirBundleTypeEnum, SYSTEMS_TFhirBundleTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'timestamp') then
        element.timestampElement := ParseInstant(child, path+'/timestamp') {b}
      else if (child.localName = 'total') then
        element.totalElement := ParseUnsignedInt(child, path+'/total') {b}
      else if (child.localName = 'link') then
        element.link_List.Add(ParseBundleLink(child, path+'/link')){y.2}
      else if (child.localName = 'entry') then
        element.entryList.Add(ParseBundleEntry(child, path+'/entry')){y.2}
      else if (child.localName = 'signature') then
        element.signature := ParseSignature(child, path+'/signature') {b}
      else if Not ParseResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBundle(xml : TXmlBuilder; name : String; elem : TFhirBundle);
begin
  if (elem = nil) then
    exit;
  composeResourceAttributes(xml, elem);
  xml.open(name);
  composeBundleChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeBundleChildren(xml : TXmlBuilder; elem : TFhirBundle);
var
  i : integer;
begin
  composeResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirBundleTypeEnum);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstant(xml, 'timestamp', elem.timestampElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData, soCount]) then
    ComposeUnsignedInt(xml, 'total', elem.totalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.link_List.Count - 1 do
      ComposeBundleLink(xml, 'link', elem.link_List[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to elem.entryList.Count - 1 do
      ComposeBundleEntry(xml, 'entry', elem.entryList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeSignature(xml, 'signature', elem.signature);{x.2a}
end;

{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
function TFHIRXmlParser.ParseCapabilityStatementSoftware(element : TMXmlElement; path : string) : TFhirCapabilityStatementSoftware;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementSoftware.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementSoftwareChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementSoftwareChild(element : TFhirCapabilityStatementSoftware; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'releaseDate') then
        element.releaseDateElement := ParseDateTime(child, path+'/releaseDate') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementSoftware(xml : TXmlBuilder; name : String; elem : TFhirCapabilityStatementSoftware);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCapabilityStatementSoftwareChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementSoftwareChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementSoftware);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'releaseDate', elem.releaseDateElement);{x.2b}
end;

function TFHIRXmlParser.ParseCapabilityStatementImplementation(element : TMXmlElement; path : string) : TFhirCapabilityStatementImplementation;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementImplementation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementImplementationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementImplementationChild(element : TFhirCapabilityStatementImplementation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'url') then
        element.urlElement := ParseUrl(child, path+'/url') {b}
      else if (child.localName = 'custodian') then
        element.custodian := ParseReference{TFhirOrganization}(child, path+'/custodian') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementImplementation(xml : TXmlBuilder; name : String; elem : TFhirCapabilityStatementImplementation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCapabilityStatementImplementationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementImplementationChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementImplementation);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrl(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(xml, 'custodian', elem.custodian);{x.2a}
end;

function TFHIRXmlParser.ParseCapabilityStatementRest(element : TMXmlElement; path : string) : TFhirCapabilityStatementRest;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementRest.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementRestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementRestChild(element : TFhirCapabilityStatementRest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'mode') then
        element.modeElement := ParseEnum(CODES_TFhirRestfulCapabilityModeEnum, SYSTEMS_TFhirRestfulCapabilityModeEnum, path+'/mode', child){1a}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseMarkdown(child, path+'/documentation') {b}
      else if (child.localName = 'security') then
        element.security := ParseCapabilityStatementRestSecurity(child, path+'/security') {b}
      else if (child.localName = 'resource') then
        element.resourceList.Add(ParseCapabilityStatementRestResource(child, path+'/resource')){y.2}
      else if (child.localName = 'interaction') then
        element.interactionList.Add(ParseCapabilityStatementRestInteraction(child, path+'/interaction')){y.2}
      else if (child.localName = 'searchParam') then
        element.searchParamList.Add(ParseCapabilityStatementRestResourceSearchParam(child, path+'/searchParam')){y.2}
      else if (child.localName = 'operation') then
        element.operationList.Add(ParseCapabilityStatementRestResourceOperation(child, path+'/operation')){y.2}
      else if (child.localName = 'compartment') then
        element.compartmentList.Add(ParseCanonical(child, path+'/compartment')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRest(xml : TXmlBuilder; name : String; elem : TFhirCapabilityStatementRest);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCapabilityStatementRestChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementRest);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'mode', elem.ModeElement, CODES_TFhirRestfulCapabilityModeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', elem.documentationElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCapabilityStatementRestSecurity(xml, 'security', elem.security);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.resourceList.Count - 1 do
      ComposeCapabilityStatementRestResource(xml, 'resource', elem.resourceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.interactionList.Count - 1 do
      ComposeCapabilityStatementRestInteraction(xml, 'interaction', elem.interactionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.searchParamList.Count - 1 do
      ComposeCapabilityStatementRestResourceSearchParam(xml, 'searchParam', elem.searchParamList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.operationList.Count - 1 do
      ComposeCapabilityStatementRestResourceOperation(xml, 'operation', elem.operationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.compartmentList.Count - 1 do
      ComposeCanonical(xml, 'compartment', elem.compartmentList[i]);
end;

function TFHIRXmlParser.ParseCapabilityStatementRestSecurity(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestSecurity;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementRestSecurity.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementRestSecurityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementRestSecurityChild(element : TFhirCapabilityStatementRestSecurity; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'cors') then
        element.corsElement := ParseBoolean(child, path+'/cors') {b}
      else if (child.localName = 'service') then
        element.serviceList.Add(ParseCodeableConcept(child, path+'/service')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestSecurity(xml : TXmlBuilder; name : String; elem : TFhirCapabilityStatementRestSecurity);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCapabilityStatementRestSecurityChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestSecurityChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementRestSecurity);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'cors', elem.corsElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.serviceList.Count - 1 do
      ComposeCodeableConcept(xml, 'service', elem.serviceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResource(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResource;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementRestResource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementRestResourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResourceChild(element : TFhirCapabilityStatementRestResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, path+'/type', child){1a}
      else if (child.localName = 'profile') then
        element.profileElement := ParseCanonical(child, path+'/profile') {b}
      else if (child.localName = 'supportedProfile') then
        element.supportedProfileList.Add(ParseCanonical(child, path+'/supportedProfile')){y.2}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseMarkdown(child, path+'/documentation') {b}
      else if (child.localName = 'interaction') then
        element.interactionList.Add(ParseCapabilityStatementRestResourceInteraction(child, path+'/interaction')){y.2}
      else if (child.localName = 'versioning') then
        element.versioningElement := ParseEnum(CODES_TFhirVersioningPolicyEnum, SYSTEMS_TFhirVersioningPolicyEnum, path+'/versioning', child){1a}
      else if (child.localName = 'readHistory') then
        element.readHistoryElement := ParseBoolean(child, path+'/readHistory') {b}
      else if (child.localName = 'updateCreate') then
        element.updateCreateElement := ParseBoolean(child, path+'/updateCreate') {b}
      else if (child.localName = 'conditionalCreate') then
        element.conditionalCreateElement := ParseBoolean(child, path+'/conditionalCreate') {b}
      else if (child.localName = 'conditionalRead') then
        element.conditionalReadElement := ParseEnum(CODES_TFhirConditionalReadStatusEnum, SYSTEMS_TFhirConditionalReadStatusEnum, path+'/conditionalRead', child){1a}
      else if (child.localName = 'conditionalUpdate') then
        element.conditionalUpdateElement := ParseBoolean(child, path+'/conditionalUpdate') {b}
      else if (child.localName = 'conditionalDelete') then
        element.conditionalDeleteElement := ParseEnum(CODES_TFhirConditionalDeleteStatusEnum, SYSTEMS_TFhirConditionalDeleteStatusEnum, path+'/conditionalDelete', child){1a}
      else if (child.localName = 'referencePolicy') then
        element.referencePolicyList.Add(ParseEnum(CODES_TFhirReferenceHandlingPolicyEnum, SYSTEMS_TFhirReferenceHandlingPolicyEnum, path+'/referencePolicy', child)){y.1}
      else if (child.localName = 'searchInclude') then
        element.searchIncludeList.Add(ParseString(child, path+'/searchInclude')){y.2}
      else if (child.localName = 'searchRevInclude') then
        element.searchRevIncludeList.Add(ParseString(child, path+'/searchRevInclude')){y.2}
      else if (child.localName = 'searchParam') then
        element.searchParamList.Add(ParseCapabilityStatementRestResourceSearchParam(child, path+'/searchParam')){y.2}
      else if (child.localName = 'operation') then
        element.operationList.Add(ParseCapabilityStatementRestResourceOperation(child, path+'/operation')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResource(xml : TXmlBuilder; name : String; elem : TFhirCapabilityStatementRestResource);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCapabilityStatementRestResourceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResourceChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementRestResource);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'profile', elem.profileElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.supportedProfileList.Count - 1 do
      ComposeCanonical(xml, 'supportedProfile', elem.supportedProfileList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', elem.documentationElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.interactionList.Count - 1 do
      ComposeCapabilityStatementRestResourceInteraction(xml, 'interaction', elem.interactionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'versioning', elem.VersioningElement, CODES_TFhirVersioningPolicyEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'readHistory', elem.readHistoryElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'updateCreate', elem.updateCreateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'conditionalCreate', elem.conditionalCreateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'conditionalRead', elem.ConditionalReadElement, CODES_TFhirConditionalReadStatusEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'conditionalUpdate', elem.conditionalUpdateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'conditionalDelete', elem.ConditionalDeleteElement, CODES_TFhirConditionalDeleteStatusEnum);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.referencePolicyList.Count - 1 do
      ComposeEnum(xml, 'referencePolicy', elem.referencePolicyList[i], CODES_TFhirReferenceHandlingPolicyEnum);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.searchIncludeList.Count - 1 do
      ComposeString(xml, 'searchInclude', elem.searchIncludeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.searchRevIncludeList.Count - 1 do
      ComposeString(xml, 'searchRevInclude', elem.searchRevIncludeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.searchParamList.Count - 1 do
      ComposeCapabilityStatementRestResourceSearchParam(xml, 'searchParam', elem.searchParamList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.operationList.Count - 1 do
      ComposeCapabilityStatementRestResourceOperation(xml, 'operation', elem.operationList[i]);
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResourceInteraction(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResourceInteraction;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementRestResourceInteraction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementRestResourceInteractionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResourceInteractionChild(element : TFhirCapabilityStatementRestResourceInteraction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseEnum(CODES_TFhirTypeRestfulInteractionEnum, SYSTEMS_TFhirTypeRestfulInteractionEnum, path+'/code', child){1a}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseMarkdown(child, path+'/documentation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResourceInteraction(xml : TXmlBuilder; name : String; elem : TFhirCapabilityStatementRestResourceInteraction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCapabilityStatementRestResourceInteractionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResourceInteractionChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementRestResourceInteraction);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'code', elem.CodeElement, CODES_TFhirTypeRestfulInteractionEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', elem.documentationElement);{x.2b}
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResourceSearchParam(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResourceSearchParam;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementRestResourceSearchParam.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementRestResourceSearchParamChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResourceSearchParamChild(element : TFhirCapabilityStatementRestResourceSearchParam; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'definition') then
        element.definitionElement := ParseCanonical(child, path+'/definition') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseMarkdown(child, path+'/documentation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResourceSearchParam(xml : TXmlBuilder; name : String; elem : TFhirCapabilityStatementRestResourceSearchParam);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCapabilityStatementRestResourceSearchParamChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResourceSearchParamChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementRestResourceSearchParam);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'definition', elem.definitionElement);{x.2b}
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirSearchParamTypeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', elem.documentationElement);{x.2b}
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResourceOperation(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResourceOperation;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementRestResourceOperation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementRestResourceOperationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResourceOperationChild(element : TFhirCapabilityStatementRestResourceOperation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'definition') then
        element.definitionElement := ParseCanonical(child, path+'/definition') {b}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseMarkdown(child, path+'/documentation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResourceOperation(xml : TXmlBuilder; name : String; elem : TFhirCapabilityStatementRestResourceOperation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCapabilityStatementRestResourceOperationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResourceOperationChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementRestResourceOperation);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  ComposeCanonical(xml, 'definition', elem.definitionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', elem.documentationElement);{x.2b}
end;

function TFHIRXmlParser.ParseCapabilityStatementRestInteraction(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestInteraction;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementRestInteraction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementRestInteractionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementRestInteractionChild(element : TFhirCapabilityStatementRestInteraction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseEnum(CODES_TFhirSystemRestfulInteractionEnum, SYSTEMS_TFhirSystemRestfulInteractionEnum, path+'/code', child){1a}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseMarkdown(child, path+'/documentation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestInteraction(xml : TXmlBuilder; name : String; elem : TFhirCapabilityStatementRestInteraction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCapabilityStatementRestInteractionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestInteractionChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementRestInteraction);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'code', elem.CodeElement, CODES_TFhirSystemRestfulInteractionEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', elem.documentationElement);{x.2b}
end;

function TFHIRXmlParser.ParseCapabilityStatementMessaging(element : TMXmlElement; path : string) : TFhirCapabilityStatementMessaging;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementMessaging.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementMessagingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementMessagingChild(element : TFhirCapabilityStatementMessaging; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'endpoint') then
        element.endpointList.Add(ParseCapabilityStatementMessagingEndpoint(child, path+'/endpoint')){y.2}
      else if (child.localName = 'reliableCache') then
        element.reliableCacheElement := ParseUnsignedInt(child, path+'/reliableCache') {b}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseMarkdown(child, path+'/documentation') {b}
      else if (child.localName = 'supportedMessage') then
        element.supportedMessageList.Add(ParseCapabilityStatementMessagingSupportedMessage(child, path+'/supportedMessage')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementMessaging(xml : TXmlBuilder; name : String; elem : TFhirCapabilityStatementMessaging);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCapabilityStatementMessagingChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementMessagingChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementMessaging);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeCapabilityStatementMessagingEndpoint(xml, 'endpoint', elem.endpointList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedInt(xml, 'reliableCache', elem.reliableCacheElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', elem.documentationElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.supportedMessageList.Count - 1 do
      ComposeCapabilityStatementMessagingSupportedMessage(xml, 'supportedMessage', elem.supportedMessageList[i]);
end;

function TFHIRXmlParser.ParseCapabilityStatementMessagingEndpoint(element : TMXmlElement; path : string) : TFhirCapabilityStatementMessagingEndpoint;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementMessagingEndpoint.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementMessagingEndpointChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementMessagingEndpointChild(element : TFhirCapabilityStatementMessagingEndpoint; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'protocol') then
        element.protocol := ParseCoding(child, path+'/protocol') {b}
      else if (child.localName = 'address') then
        element.addressElement := ParseUrl(child, path+'/address') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementMessagingEndpoint(xml : TXmlBuilder; name : String; elem : TFhirCapabilityStatementMessagingEndpoint);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCapabilityStatementMessagingEndpointChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementMessagingEndpointChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementMessagingEndpoint);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCoding(xml, 'protocol', elem.protocol);{x.2a}
  ComposeUrl(xml, 'address', elem.addressElement);{x.2b}
end;

function TFHIRXmlParser.ParseCapabilityStatementMessagingSupportedMessage(element : TMXmlElement; path : string) : TFhirCapabilityStatementMessagingSupportedMessage;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementMessagingSupportedMessage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementMessagingSupportedMessageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementMessagingSupportedMessageChild(element : TFhirCapabilityStatementMessagingSupportedMessage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'mode') then
        element.modeElement := ParseEnum(CODES_TFhirEventCapabilityModeEnum, SYSTEMS_TFhirEventCapabilityModeEnum, path+'/mode', child){1a}
      else if (child.localName = 'definition') then
        element.definitionElement := ParseCanonical(child, path+'/definition') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementMessagingSupportedMessage(xml : TXmlBuilder; name : String; elem : TFhirCapabilityStatementMessagingSupportedMessage);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCapabilityStatementMessagingSupportedMessageChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementMessagingSupportedMessageChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementMessagingSupportedMessage);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'mode', elem.ModeElement, CODES_TFhirEventCapabilityModeEnum);
  ComposeCanonical(xml, 'definition', elem.definitionElement);{x.2b}
end;

function TFHIRXmlParser.ParseCapabilityStatementDocument(element : TMXmlElement; path : string) : TFhirCapabilityStatementDocument;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementDocument.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementDocumentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementDocumentChild(element : TFhirCapabilityStatementDocument; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'mode') then
        element.modeElement := ParseEnum(CODES_TFhirDocumentModeEnum, SYSTEMS_TFhirDocumentModeEnum, path+'/mode', child){1a}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseMarkdown(child, path+'/documentation') {b}
      else if (child.localName = 'profile') then
        element.profileElement := ParseCanonical(child, path+'/profile') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementDocument(xml : TXmlBuilder; name : String; elem : TFhirCapabilityStatementDocument);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCapabilityStatementDocumentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementDocumentChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatementDocument);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'mode', elem.ModeElement, CODES_TFhirDocumentModeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', elem.documentationElement);{x.2b}
  ComposeCanonical(xml, 'profile', elem.profileElement);{x.2b}
end;

function TFHIRXmlParser.ParseCapabilityStatement(element : TMXmlElement; path : string) : TFhirCapabilityStatement;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatement.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementChild(element : TFhirCapabilityStatement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'kind') then
        element.kindElement := ParseEnum(CODES_TFhirCapabilityStatementKindEnum, SYSTEMS_TFhirCapabilityStatementKindEnum, path+'/kind', child){1a}
      else if (child.localName = 'instantiates') then
        element.instantiatesList.Add(ParseCanonical(child, path+'/instantiates')){y.2}
      else if (child.localName = 'imports') then
        element.importsList.Add(ParseCanonical(child, path+'/imports')){y.2}
      else if (child.localName = 'software') then
        element.software := ParseCapabilityStatementSoftware(child, path+'/software') {b}
      else if (child.localName = 'implementation') then
        element.implementation_ := ParseCapabilityStatementImplementation(child, path+'/implementation') {b}
      else if (child.localName = 'fhirVersion') then
        element.fhirVersionElement := ParseEnum(CODES_TFhirFHIRVersionEnum, SYSTEMS_TFhirFHIRVersionEnum, path+'/fhirVersion', child){1a}
      else if (child.localName = 'format') then
        element.formatList.Add(ParseCode(child, path+'/format')){y.2}
      else if (child.localName = 'patchFormat') then
        element.patchFormatList.Add(ParseCode(child, path+'/patchFormat')){y.2}
      else if (child.localName = 'implementationGuide') then
        element.implementationGuideList.Add(ParseCanonical(child, path+'/implementationGuide')){y.2}
      else if (child.localName = 'rest') then
        element.restList.Add(ParseCapabilityStatementRest(child, path+'/rest')){y.2}
      else if (child.localName = 'messaging') then
        element.messagingList.Add(ParseCapabilityStatementMessaging(child, path+'/messaging')){y.2}
      else if (child.localName = 'document') then
        element.documentList.Add(ParseCapabilityStatementDocument(child, path+'/document')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement(xml : TXmlBuilder; name : String; elem : TFhirCapabilityStatement);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeCapabilityStatementChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementChildren(xml : TXmlBuilder; elem : TFhirCapabilityStatement);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  ComposeEnum(xml, 'kind', elem.KindElement, CODES_TFhirCapabilityStatementKindEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiates') then
    for i := 0 to elem.instantiatesList.Count - 1 do
      ComposeCanonical(xml, 'instantiates', elem.instantiatesList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('imports') then
    for i := 0 to elem.importsList.Count - 1 do
      ComposeCanonical(xml, 'imports', elem.importsList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('software') then
    ComposeCapabilityStatementSoftware(xml, 'software', elem.software);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('implementation_') then
    ComposeCapabilityStatementImplementation(xml, 'implementation', elem.implementation_);{x.2a}
  ComposeEnum(xml, 'fhirVersion', elem.FhirVersionElement, CODES_TFhirFHIRVersionEnum);
  for i := 0 to elem.formatList.Count - 1 do
      ComposeCode(xml, 'format', elem.formatList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('patchFormat') then
    for i := 0 to elem.patchFormatList.Count - 1 do
      ComposeCode(xml, 'patchFormat', elem.patchFormatList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('implementationGuide') then
    for i := 0 to elem.implementationGuideList.Count - 1 do
      ComposeCanonical(xml, 'implementationGuide', elem.implementationGuideList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('rest') then
    for i := 0 to elem.restList.Count - 1 do
      ComposeCapabilityStatementRest(xml, 'rest', elem.restList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('messaging') then
    for i := 0 to elem.messagingList.Count - 1 do
      ComposeCapabilityStatementMessaging(xml, 'messaging', elem.messagingList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('document') then
    for i := 0 to elem.documentList.Count - 1 do
      ComposeCapabilityStatementDocument(xml, 'document', elem.documentList[i]);
end;

{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
function TFHIRXmlParser.ParseCarePlanActivity(element : TMXmlElement; path : string) : TFhirCarePlanActivity;
var
  child : TMXmlElement;
begin
  result := TFhirCarePlanActivity.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCarePlanActivityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCarePlanActivityChild(element : TFhirCarePlanActivity; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'outcomeCodeableConcept') then
        element.outcomeCodeableConceptList.Add(ParseCodeableConcept(child, path+'/outcomeCodeableConcept')){y.2}
      else if (child.localName = 'outcomeReference') then
        element.outcomeReferenceList.Add(ParseReference{TFhirReference}(child, path+'/outcomeReference')){y.2}
      else if (child.localName = 'progress') then
        element.progressList.Add(ParseAnnotation(child, path+'/progress')){y.2}
      else if (child.localName = 'reference') then
        element.reference := ParseReference{TFhirAppointment}(child, path+'/reference') {b}
      else if (child.localName = 'detail') then
        element.detail := ParseCarePlanActivityDetail(child, path+'/detail') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCarePlanActivity(xml : TXmlBuilder; name : String; elem : TFhirCarePlanActivity);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCarePlanActivityChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCarePlanActivityChildren(xml : TXmlBuilder; elem : TFhirCarePlanActivity);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.outcomeCodeableConceptList.Count - 1 do
      ComposeCodeableConcept(xml, 'outcomeCodeableConcept', elem.outcomeCodeableConceptList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.outcomeReferenceList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'outcomeReference', elem.outcomeReferenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.progressList.Count - 1 do
      ComposeAnnotation(xml, 'progress', elem.progressList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirAppointment}(xml, 'reference', elem.reference);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCarePlanActivityDetail(xml, 'detail', elem.detail);{x.2a}
end;

function TFHIRXmlParser.ParseCarePlanActivityDetail(element : TMXmlElement; path : string) : TFhirCarePlanActivityDetail;
var
  child : TMXmlElement;
begin
  result := TFhirCarePlanActivityDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCarePlanActivityDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCarePlanActivityDetailChild(element : TFhirCarePlanActivityDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'kind') then
        element.kindElement := ParseEnum(CODES_TFhirCarePlanActivityKindEnum, SYSTEMS_TFhirCarePlanActivityKindEnum, path+'/kind', child){1a}
      else if (child.localName = 'instantiatesCanonical') then
        element.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')){y.2}
      else if (child.localName = 'instantiatesUri') then
        element.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')){y.2}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'goal') then
        element.goalList.Add(ParseReference{TFhirGoal}(child, path+'/goal')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirCarePlanActivityStatusEnum, SYSTEMS_TFhirCarePlanActivityStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'statusReason') then
        element.statusReason := ParseCodeableConcept(child, path+'/statusReason') {b}
      else if (child.localName = 'doNotPerform') then
        element.doNotPerformElement := ParseBoolean(child, path+'/doNotPerform') {b}
      else if (child.localName = 'scheduledTiming') then
        element.scheduled := ParseTiming(child, path+'/scheduledTiming'){x.3}
      else if (child.localName = 'scheduledPeriod') then
        element.scheduled := ParsePeriod(child, path+'/scheduledPeriod'){x.3}
      else if (child.localName = 'scheduledString') then
        element.scheduled := ParseString(child, path+'/scheduledString'){x.3}
      else if (child.localName = 'location') then
        element.location := ParseReference{TFhirLocation}(child, path+'/location') {b}
      else if (child.localName = 'performer') then
        element.performerList.Add(ParseReference{TFhirPractitioner}(child, path+'/performer')){y.2}
      else if (child.localName = 'productCodeableConcept') then
        element.product := ParseCodeableConcept(child, path+'/productCodeableConcept'){x.3}
      else if (child.localName = 'productReference') then
        element.product := ParseReference(child, path+'/productReference') {a}
      else if (child.localName = 'dailyAmount') then
        element.dailyAmount := ParseQuantity(child, path+'/dailyAmount') {b}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCarePlanActivityDetail(xml : TXmlBuilder; name : String; elem : TFhirCarePlanActivityDetail);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCarePlanActivityDetailChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCarePlanActivityDetailChildren(xml : TXmlBuilder; elem : TFhirCarePlanActivityDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'kind', elem.KindElement, CODES_TFhirCarePlanActivityKindEnum);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', elem.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', elem.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.goalList.Count - 1 do
      ComposeReference{TFhirGoal}(xml, 'goal', elem.goalList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirCarePlanActivityStatusEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'statusReason', elem.statusReason);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'doNotPerform', elem.doNotPerformElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.scheduled is TFhirTiming) {6} then
    ComposeTiming(xml, 'scheduledTiming', TFhirTiming(elem.scheduled))
  else if (SummaryOption in [soFull, soData]) and (elem.scheduled is TFhirPeriod) {6} then
    ComposePeriod(xml, 'scheduledPeriod', TFhirPeriod(elem.scheduled))
  else if (SummaryOption in [soFull, soData]) and (elem.scheduled is TFhirString) {6} then
    ComposeString(xml, 'scheduledString', TFhirString(elem.scheduled));
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(xml, 'location', elem.location);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.performerList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'performer', elem.performerList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.product is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'productCodeableConcept', TFhirCodeableConcept(elem.product))
  else if (SummaryOption in [soFull, soData]) and (elem.product is TFhirReference) {2} then
    ComposeReference(xml, 'productReference', TFhirReference(elem.product));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'dailyAmount', elem.dailyAmount);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
end;

function TFHIRXmlParser.ParseCarePlan(element : TMXmlElement; path : string) : TFhirCarePlan;
var
  child : TMXmlElement;
begin
  result := TFhirCarePlan.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCarePlanChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCarePlanChild(element : TFhirCarePlan; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'instantiatesCanonical') then
        element.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')){y.2}
      else if (child.localName = 'instantiatesUri') then
        element.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirCarePlan}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'replaces') then
        element.replacesList.Add(ParseReference{TFhirCarePlan}(child, path+'/replaces')){y.2}
      else if (child.localName = 'partOf') then
        element.partOfList.Add(ParseReference{TFhirCarePlan}(child, path+'/partOf')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'intent') then
        element.intentElement := ParseEnum(CODES_TFhirCarePlanIntentEnum, SYSTEMS_TFhirCarePlanIntentEnum, path+'/intent', child){1a}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'created') then
        element.createdElement := ParseDateTime(child, path+'/created') {b}
      else if (child.localName = 'author') then
        element.author := ParseReference{TFhirPatient}(child, path+'/author') {b}
      else if (child.localName = 'contributor') then
        element.contributorList.Add(ParseReference{TFhirPatient}(child, path+'/contributor')){y.2}
      else if (child.localName = 'careTeam') then
        element.careTeamList.Add(ParseReference{TFhirCareTeam}(child, path+'/careTeam')){y.2}
      else if (child.localName = 'addresses') then
        element.addressesList.Add(ParseReference{TFhirCondition}(child, path+'/addresses')){y.2}
      else if (child.localName = 'supportingInfo') then
        element.supportingInfoList.Add(ParseReference{TFhirReference}(child, path+'/supportingInfo')){y.2}
      else if (child.localName = 'goal') then
        element.goalList.Add(ParseReference{TFhirGoal}(child, path+'/goal')){y.2}
      else if (child.localName = 'activity') then
        element.activityList.Add(ParseCarePlanActivity(child, path+'/activity')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCarePlan(xml : TXmlBuilder; name : String; elem : TFhirCarePlan);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeCarePlanChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCarePlanChildren(xml : TXmlBuilder; elem : TFhirCarePlan);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesCanonical') then
    for i := 0 to elem.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', elem.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesUri') then
    for i := 0 to elem.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', elem.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirCarePlan}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('replaces') then
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirCarePlan}(xml, 'replaces', elem.replacesList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') then
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirCarePlan}(xml, 'partOf', elem.partOfList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum);
  ComposeEnum(xml, 'intent', elem.IntentElement, CODES_TFhirCarePlanIntentEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('created') then
    ComposeDateTime(xml, 'created', elem.createdElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    ComposeReference{TFhirPatient}(xml, 'author', elem.author);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('contributor') then
    for i := 0 to elem.contributorList.Count - 1 do
      ComposeReference{TFhirPatient}(xml, 'contributor', elem.contributorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('careTeam') then
    for i := 0 to elem.careTeamList.Count - 1 do
      ComposeReference{TFhirCareTeam}(xml, 'careTeam', elem.careTeamList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('addresses') then
    for i := 0 to elem.addressesList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'addresses', elem.addressesList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInfo') then
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'supportingInfo', elem.supportingInfoList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('goal') then
    for i := 0 to elem.goalList.Count - 1 do
      ComposeReference{TFhirGoal}(xml, 'goal', elem.goalList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('activity') then
    for i := 0 to elem.activityList.Count - 1 do
      ComposeCarePlanActivity(xml, 'activity', elem.activityList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
function TFHIRXmlParser.ParseCareTeamParticipant(element : TMXmlElement; path : string) : TFhirCareTeamParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirCareTeamParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCareTeamParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCareTeamParticipantChild(element : TFhirCareTeamParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'role') then
        element.roleList.Add(ParseCodeableConcept(child, path+'/role')){y.2}
      else if (child.localName = 'member') then
        element.member := ParseReference{TFhirPractitioner}(child, path+'/member') {b}
      else if (child.localName = 'onBehalfOf') then
        element.onBehalfOf := ParseReference{TFhirOrganization}(child, path+'/onBehalfOf') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCareTeamParticipant(xml : TXmlBuilder; name : String; elem : TFhirCareTeamParticipant);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCareTeamParticipantChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCareTeamParticipantChildren(xml : TXmlBuilder; elem : TFhirCareTeamParticipant);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.roleList.Count - 1 do
      ComposeCodeableConcept(xml, 'role', elem.roleList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'member', elem.member);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(xml, 'onBehalfOf', elem.onBehalfOf);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParseCareTeam(element : TMXmlElement; path : string) : TFhirCareTeam;
var
  child : TMXmlElement;
begin
  result := TFhirCareTeam.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCareTeamChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCareTeamChild(element : TFhirCareTeam; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirCareTeamStatusEnum, SYSTEMS_TFhirCareTeamStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'participant') then
        element.participantList.Add(ParseCareTeamParticipant(child, path+'/participant')){y.2}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'managingOrganization') then
        element.managingOrganizationList.Add(ParseReference{TFhirOrganization}(child, path+'/managingOrganization')){y.2}
      else if (child.localName = 'telecom') then
        element.telecomList.Add(ParseContactPoint(child, path+'/telecom')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCareTeam(xml : TXmlBuilder; name : String; elem : TFhirCareTeam);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeCareTeamChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCareTeamChildren(xml : TXmlBuilder; elem : TFhirCareTeam);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirCareTeamStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('participant') then
    for i := 0 to elem.participantList.Count - 1 do
      ComposeCareTeamParticipant(xml, 'participant', elem.participantList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('managingOrganization') then
    for i := 0 to elem.managingOrganizationList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'managingOrganization', elem.managingOrganizationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('telecom') then
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', elem.telecomList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
function TFHIRXmlParser.ParseCatalogEntryRelatedEntry(element : TMXmlElement; path : string) : TFhirCatalogEntryRelatedEntry;
var
  child : TMXmlElement;
begin
  result := TFhirCatalogEntryRelatedEntry.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCatalogEntryRelatedEntryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCatalogEntryRelatedEntryChild(element : TFhirCatalogEntryRelatedEntry; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'relationtype') then
        element.relationtypeElement := ParseEnum(CODES_TFhirRelationTypeEnum, SYSTEMS_TFhirRelationTypeEnum, path+'/relationtype', child){1a}
      else if (child.localName = 'item') then
        element.item := ParseReference{TFhirCatalogEntry}(child, path+'/item') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCatalogEntryRelatedEntry(xml : TXmlBuilder; name : String; elem : TFhirCatalogEntryRelatedEntry);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCatalogEntryRelatedEntryChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCatalogEntryRelatedEntryChildren(xml : TXmlBuilder; elem : TFhirCatalogEntryRelatedEntry);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'relationtype', elem.RelationtypeElement, CODES_TFhirRelationTypeEnum);
  ComposeReference{TFhirCatalogEntry}(xml, 'item', elem.item);{x.2a}
end;

function TFHIRXmlParser.ParseCatalogEntry(element : TMXmlElement; path : string) : TFhirCatalogEntry;
var
  child : TMXmlElement;
begin
  result := TFhirCatalogEntry.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCatalogEntryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCatalogEntryChild(element : TFhirCatalogEntry; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'orderable') then
        element.orderableElement := ParseBoolean(child, path+'/orderable') {b}
      else if (child.localName = 'referencedItem') then
        element.referencedItem := ParseReference{TFhirMedication}(child, path+'/referencedItem') {b}
      else if (child.localName = 'additionalIdentifier') then
        element.additionalIdentifierList.Add(ParseIdentifier(child, path+'/additionalIdentifier')){y.2}
      else if (child.localName = 'classification') then
        element.classificationList.Add(ParseCodeableConcept(child, path+'/classification')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'validityPeriod') then
        element.validityPeriod := ParsePeriod(child, path+'/validityPeriod') {b}
      else if (child.localName = 'validTo') then
        element.validToElement := ParseDateTime(child, path+'/validTo') {b}
      else if (child.localName = 'lastUpdated') then
        element.lastUpdatedElement := ParseDateTime(child, path+'/lastUpdated') {b}
      else if (child.localName = 'additionalCharacteristic') then
        element.additionalCharacteristicList.Add(ParseCodeableConcept(child, path+'/additionalCharacteristic')){y.2}
      else if (child.localName = 'additionalClassification') then
        element.additionalClassificationList.Add(ParseCodeableConcept(child, path+'/additionalClassification')){y.2}
      else if (child.localName = 'relatedEntry') then
        element.relatedEntryList.Add(ParseCatalogEntryRelatedEntry(child, path+'/relatedEntry')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCatalogEntry(xml : TXmlBuilder; name : String; elem : TFhirCatalogEntry);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeCatalogEntryChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCatalogEntryChildren(xml : TXmlBuilder; elem : TFhirCatalogEntry);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  ComposeBoolean(xml, 'orderable', elem.orderableElement);{x.2b}
  ComposeReference{TFhirMedication}(xml, 'referencedItem', elem.referencedItem);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('additionalIdentifier') then
    for i := 0 to elem.additionalIdentifierList.Count - 1 do
      ComposeIdentifier(xml, 'additionalIdentifier', elem.additionalIdentifierList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('classification') then
    for i := 0 to elem.classificationList.Count - 1 do
      ComposeCodeableConcept(xml, 'classification', elem.classificationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('validityPeriod') then
    ComposePeriod(xml, 'validityPeriod', elem.validityPeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('validTo') then
    ComposeDateTime(xml, 'validTo', elem.validToElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('lastUpdated') then
    ComposeDateTime(xml, 'lastUpdated', elem.lastUpdatedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('additionalCharacteristic') then
    for i := 0 to elem.additionalCharacteristicList.Count - 1 do
      ComposeCodeableConcept(xml, 'additionalCharacteristic', elem.additionalCharacteristicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('additionalClassification') then
    for i := 0 to elem.additionalClassificationList.Count - 1 do
      ComposeCodeableConcept(xml, 'additionalClassification', elem.additionalClassificationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedEntry') then
    for i := 0 to elem.relatedEntryList.Count - 1 do
      ComposeCatalogEntryRelatedEntry(xml, 'relatedEntry', elem.relatedEntryList[i]);
end;

{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
function TFHIRXmlParser.ParseChargeItemPerformer(element : TMXmlElement; path : string) : TFhirChargeItemPerformer;
var
  child : TMXmlElement;
begin
  result := TFhirChargeItemPerformer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseChargeItemPerformerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseChargeItemPerformerChild(element : TFhirChargeItemPerformer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'function') then
        element.function_ := ParseCodeableConcept(child, path+'/function') {b}
      else if (child.localName = 'actor') then
        element.actor := ParseReference{TFhirPractitioner}(child, path+'/actor') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeChargeItemPerformer(xml : TXmlBuilder; name : String; elem : TFhirChargeItemPerformer);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeChargeItemPerformerChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeChargeItemPerformerChildren(xml : TXmlBuilder; elem : TFhirChargeItemPerformer);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'function', elem.function_);{x.2a}
  ComposeReference{TFhirPractitioner}(xml, 'actor', elem.actor);{x.2a}
end;

function TFHIRXmlParser.ParseChargeItem(element : TMXmlElement; path : string) : TFhirChargeItem;
var
  child : TMXmlElement;
begin
  result := TFhirChargeItem.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseChargeItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseChargeItemChild(element : TFhirChargeItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'definitionUri') then
        element.definitionUriList.Add(ParseUri(child, path+'/definitionUri')){y.2}
      else if (child.localName = 'definitionCanonical') then
        element.definitionCanonicalList.Add(ParseCanonical(child, path+'/definitionCanonical')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirChargeitemStatusEnum, SYSTEMS_TFhirChargeitemStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'partOf') then
        element.partOfList.Add(ParseReference{TFhirChargeItem}(child, path+'/partOf')){y.2}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'context') then
        element.context := ParseReference{TFhirEncounter}(child, path+'/context') {b}
      else if (child.localName = 'occurrencePeriod') then
        element.occurrence := ParsePeriod(child, path+'/occurrencePeriod'){x.3}
      else if (child.localName = 'occurrenceTiming') then
        element.occurrence := ParseTiming(child, path+'/occurrenceTiming'){x.3}
      else if (child.localName = 'occurrenceDateTime') then
        element.occurrence := ParseDateTime(child, path+'/occurrenceDateTime'){x.3}
      else if (child.localName = 'performer') then
        element.performerList.Add(ParseChargeItemPerformer(child, path+'/performer')){y.2}
      else if (child.localName = 'performingOrganization') then
        element.performingOrganization := ParseReference{TFhirOrganization}(child, path+'/performingOrganization') {b}
      else if (child.localName = 'requestingOrganization') then
        element.requestingOrganization := ParseReference{TFhirOrganization}(child, path+'/requestingOrganization') {b}
      else if (child.localName = 'costCenter') then
        element.costCenter := ParseReference{TFhirOrganization}(child, path+'/costCenter') {b}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'bodysite') then
        element.bodysiteList.Add(ParseCodeableConcept(child, path+'/bodysite')){y.2}
      else if (child.localName = 'factorOverride') then
        element.factorOverrideElement := ParseDecimal(child, path+'/factorOverride') {b}
      else if (child.localName = 'priceOverride') then
        element.priceOverride := ParseMoney(child, path+'/priceOverride') {b}
      else if (child.localName = 'overrideReason') then
        element.overrideReasonElement := ParseString(child, path+'/overrideReason') {b}
      else if (child.localName = 'enterer') then
        element.enterer := ParseReference{TFhirPractitioner}(child, path+'/enterer') {b}
      else if (child.localName = 'enteredDate') then
        element.enteredDateElement := ParseDateTime(child, path+'/enteredDate') {b}
      else if (child.localName = 'reason') then
        element.reasonList.Add(ParseCodeableConcept(child, path+'/reason')){y.2}
      else if (child.localName = 'service') then
        element.serviceList.Add(ParseReference{TFhirDiagnosticReport}(child, path+'/service')){y.2}
      else if (child.localName = 'productReference') then
        element.product := ParseReference(child, path+'/productReference') {a}
      else if (child.localName = 'productCodeableConcept') then
        element.product := ParseCodeableConcept(child, path+'/productCodeableConcept'){x.3}
      else if (child.localName = 'account') then
        element.accountList.Add(ParseReference{TFhirAccount}(child, path+'/account')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'supportingInformation') then
        element.supportingInformationList.Add(ParseReference{TFhirReference}(child, path+'/supportingInformation')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeChargeItem(xml : TXmlBuilder; name : String; elem : TFhirChargeItem);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeChargeItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeChargeItemChildren(xml : TXmlBuilder; elem : TFhirChargeItem);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('definitionUri') then
    for i := 0 to elem.definitionUriList.Count - 1 do
      ComposeUri(xml, 'definitionUri', elem.definitionUriList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('definitionCanonical') then
    for i := 0 to elem.definitionCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'definitionCanonical', elem.definitionCanonicalList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirChargeitemStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('partOf') then
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirChargeItem}(xml, 'partOf', elem.partOfList[i]);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{TFhirEncounter}(xml, 'context', elem.context);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(elem.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) {6} then
    ComposeTiming(xml, 'occurrenceTiming', TFhirTiming(elem.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(elem.occurrence));
  if (SummaryOption in [soFull, soData]) and doCompose('performer') then
    for i := 0 to elem.performerList.Count - 1 do
      ComposeChargeItemPerformer(xml, 'performer', elem.performerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('performingOrganization') then
    ComposeReference{TFhirOrganization}(xml, 'performingOrganization', elem.performingOrganization);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('requestingOrganization') then
    ComposeReference{TFhirOrganization}(xml, 'requestingOrganization', elem.requestingOrganization);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('costCenter') then
    ComposeReference{TFhirOrganization}(xml, 'costCenter', elem.costCenter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('quantity') then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('bodysite') then
    for i := 0 to elem.bodysiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'bodysite', elem.bodysiteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('factorOverride') then
    ComposeDecimal(xml, 'factorOverride', elem.factorOverrideElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('priceOverride') then
    ComposeMoney(xml, 'priceOverride', elem.priceOverride);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('overrideReason') then
    ComposeString(xml, 'overrideReason', elem.overrideReasonElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('enterer') then
    ComposeReference{TFhirPractitioner}(xml, 'enterer', elem.enterer);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('enteredDate') then
    ComposeDateTime(xml, 'enteredDate', elem.enteredDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('reason') then
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'reason', elem.reasonList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('service') then
    for i := 0 to elem.serviceList.Count - 1 do
      ComposeReference{TFhirDiagnosticReport}(xml, 'service', elem.serviceList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.product is TFhirReference) {2} then
    ComposeReference(xml, 'productReference', TFhirReference(elem.product))
  else if (SummaryOption in [soFull, soData]) and (elem.product is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'productCodeableConcept', TFhirCodeableConcept(elem.product));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('account') then
    for i := 0 to elem.accountList.Count - 1 do
      ComposeReference{TFhirAccount}(xml, 'account', elem.accountList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInformation') then
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'supportingInformation', elem.supportingInformationList[i]);
end;

{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
function TFHIRXmlParser.ParseChargeItemDefinitionApplicability(element : TMXmlElement; path : string) : TFhirChargeItemDefinitionApplicability;
var
  child : TMXmlElement;
begin
  result := TFhirChargeItemDefinitionApplicability.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseChargeItemDefinitionApplicabilityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseChargeItemDefinitionApplicabilityChild(element : TFhirChargeItemDefinitionApplicability; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'language') then
        element.languageElement := ParseString(child, path+'/language') {b}
      else if (child.localName = 'expression') then
        element.expressionElement := ParseString(child, path+'/expression') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinitionApplicability(xml : TXmlBuilder; name : String; elem : TFhirChargeItemDefinitionApplicability);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeChargeItemDefinitionApplicabilityChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinitionApplicabilityChildren(xml : TXmlBuilder; elem : TFhirChargeItemDefinitionApplicability);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'language', elem.languageElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'expression', elem.expressionElement);{x.2b}
end;

function TFHIRXmlParser.ParseChargeItemDefinitionPropertyGroup(element : TMXmlElement; path : string) : TFhirChargeItemDefinitionPropertyGroup;
var
  child : TMXmlElement;
begin
  result := TFhirChargeItemDefinitionPropertyGroup.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseChargeItemDefinitionPropertyGroupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseChargeItemDefinitionPropertyGroupChild(element : TFhirChargeItemDefinitionPropertyGroup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'applicability') then
        element.applicabilityList.Add(ParseChargeItemDefinitionApplicability(child, path+'/applicability')){y.2}
      else if (child.localName = 'priceComponent') then
        element.priceComponentList.Add(ParseChargeItemDefinitionPropertyGroupPriceComponent(child, path+'/priceComponent')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinitionPropertyGroup(xml : TXmlBuilder; name : String; elem : TFhirChargeItemDefinitionPropertyGroup);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeChargeItemDefinitionPropertyGroupChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinitionPropertyGroupChildren(xml : TXmlBuilder; elem : TFhirChargeItemDefinitionPropertyGroup);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.applicabilityList.Count - 1 do
      ComposeChargeItemDefinitionApplicability(xml, 'applicability', elem.applicabilityList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.priceComponentList.Count - 1 do
      ComposeChargeItemDefinitionPropertyGroupPriceComponent(xml, 'priceComponent', elem.priceComponentList[i]);
end;

function TFHIRXmlParser.ParseChargeItemDefinitionPropertyGroupPriceComponent(element : TMXmlElement; path : string) : TFhirChargeItemDefinitionPropertyGroupPriceComponent;
var
  child : TMXmlElement;
begin
  result := TFhirChargeItemDefinitionPropertyGroupPriceComponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseChargeItemDefinitionPropertyGroupPriceComponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseChargeItemDefinitionPropertyGroupPriceComponentChild(element : TFhirChargeItemDefinitionPropertyGroupPriceComponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirInvoicePriceComponentTypeEnum, SYSTEMS_TFhirInvoicePriceComponentTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseMoney(child, path+'/amount') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinitionPropertyGroupPriceComponent(xml : TXmlBuilder; name : String; elem : TFhirChargeItemDefinitionPropertyGroupPriceComponent);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeChargeItemDefinitionPropertyGroupPriceComponentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinitionPropertyGroupPriceComponentChildren(xml : TXmlBuilder; elem : TFhirChargeItemDefinitionPropertyGroupPriceComponent);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirInvoicePriceComponentTypeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'amount', elem.amount);{x.2a}
end;

function TFHIRXmlParser.ParseChargeItemDefinition(element : TMXmlElement; path : string) : TFhirChargeItemDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirChargeItemDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseChargeItemDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseChargeItemDefinitionChild(element : TFhirChargeItemDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'derivedFromUri') then
        element.derivedFromUriList.Add(ParseUri(child, path+'/derivedFromUri')){y.2}
      else if (child.localName = 'partOf') then
        element.partOfList.Add(ParseCanonical(child, path+'/partOf')){y.2}
      else if (child.localName = 'replaces') then
        element.replacesList.Add(ParseCanonical(child, path+'/replaces')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'approvalDate') then
        element.approvalDateElement := ParseDate(child, path+'/approvalDate') {b}
      else if (child.localName = 'lastReviewDate') then
        element.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'instance') then
        element.instanceList.Add(ParseReference{TFhirMedication}(child, path+'/instance')){y.2}
      else if (child.localName = 'applicability') then
        element.applicabilityList.Add(ParseChargeItemDefinitionApplicability(child, path+'/applicability')){y.2}
      else if (child.localName = 'propertyGroup') then
        element.propertyGroupList.Add(ParseChargeItemDefinitionPropertyGroup(child, path+'/propertyGroup')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinition(xml : TXmlBuilder; name : String; elem : TFhirChargeItemDefinition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeChargeItemDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinitionChildren(xml : TXmlBuilder; elem : TFhirChargeItemDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('derivedFromUri') then
    for i := 0 to elem.derivedFromUriList.Count - 1 do
      ComposeUri(xml, 'derivedFromUri', elem.derivedFromUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') then
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeCanonical(xml, 'partOf', elem.partOfList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('replaces') then
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeCanonical(xml, 'replaces', elem.replacesList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDate(xml, 'approvalDate', elem.approvalDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDate(xml, 'lastReviewDate', elem.lastReviewDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(xml, 'effectivePeriod', elem.effectivePeriod);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('instance') then
    for i := 0 to elem.instanceList.Count - 1 do
      ComposeReference{TFhirMedication}(xml, 'instance', elem.instanceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('applicability') then
    for i := 0 to elem.applicabilityList.Count - 1 do
      ComposeChargeItemDefinitionApplicability(xml, 'applicability', elem.applicabilityList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('propertyGroup') then
    for i := 0 to elem.propertyGroupList.Count - 1 do
      ComposeChargeItemDefinitionPropertyGroup(xml, 'propertyGroup', elem.propertyGroupList[i]);
end;

{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CLAIM}
function TFHIRXmlParser.ParseClaimRelated(element : TMXmlElement; path : string) : TFhirClaimRelated;
var
  child : TMXmlElement;
begin
  result := TFhirClaimRelated.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimRelatedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimRelatedChild(element : TFhirClaimRelated; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'claim') then
        element.claim := ParseReference{TFhirClaim}(child, path+'/claim') {b}
      else if (child.localName = 'relationship') then
        element.relationship := ParseCodeableConcept(child, path+'/relationship') {b}
      else if (child.localName = 'reference') then
        element.reference := ParseIdentifier(child, path+'/reference') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimRelated(xml : TXmlBuilder; name : String; elem : TFhirClaimRelated);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimRelatedChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimRelatedChildren(xml : TXmlBuilder; elem : TFhirClaimRelated);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaim}(xml, 'claim', elem.claim);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'relationship', elem.relationship);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'reference', elem.reference);{x.2a}
end;

function TFHIRXmlParser.ParseClaimPayee(element : TMXmlElement; path : string) : TFhirClaimPayee;
var
  child : TMXmlElement;
begin
  result := TFhirClaimPayee.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimPayeeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimPayeeChild(element : TFhirClaimPayee; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'party') then
        element.party := ParseReference{TFhirPractitioner}(child, path+'/party') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimPayee(xml : TXmlBuilder; name : String; elem : TFhirClaimPayee);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimPayeeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimPayeeChildren(xml : TXmlBuilder; elem : TFhirClaimPayee);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'party', elem.party);{x.2a}
end;

function TFHIRXmlParser.ParseClaimCareTeam(element : TMXmlElement; path : string) : TFhirClaimCareTeam;
var
  child : TMXmlElement;
begin
  result := TFhirClaimCareTeam.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimCareTeamChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimCareTeamChild(element : TFhirClaimCareTeam; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'provider') then
        element.provider := ParseReference{TFhirPractitioner}(child, path+'/provider') {b}
      else if (child.localName = 'responsible') then
        element.responsibleElement := ParseBoolean(child, path+'/responsible') {b}
      else if (child.localName = 'role') then
        element.role := ParseCodeableConcept(child, path+'/role') {b}
      else if (child.localName = 'qualification') then
        element.qualification := ParseCodeableConcept(child, path+'/qualification') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimCareTeam(xml : TXmlBuilder; name : String; elem : TFhirClaimCareTeam);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimCareTeamChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimCareTeamChildren(xml : TXmlBuilder; elem : TFhirClaimCareTeam);
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  ComposeReference{TFhirPractitioner}(xml, 'provider', elem.provider);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'responsible', elem.responsibleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'role', elem.role);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'qualification', elem.qualification);{x.2a}
end;

function TFHIRXmlParser.ParseClaimSupportingInfo(element : TMXmlElement; path : string) : TFhirClaimSupportingInfo;
var
  child : TMXmlElement;
begin
  result := TFhirClaimSupportingInfo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimSupportingInfoChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimSupportingInfoChild(element : TFhirClaimSupportingInfo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'timingPeriod') then
        element.timing := ParsePeriod(child, path+'/timingPeriod'){x.3}
      else if (child.localName = 'timingDate') then
        element.timing := ParseDate(child, path+'/timingDate'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueAttachment') then
        element.value := ParseAttachment(child, path+'/valueAttachment'){x.3}
      else if (child.localName = 'valueReference') then
        element.value := ParseReference(child, path+'/valueReference') {a}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'reason') then
        element.reason := ParseCodeableConcept(child, path+'/reason') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimSupportingInfo(xml : TXmlBuilder; name : String; elem : TFhirClaimSupportingInfo);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimSupportingInfoChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimSupportingInfoChildren(xml : TXmlBuilder; elem : TFhirClaimSupportingInfo);
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timingPeriod', TFhirPeriod(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDate) {6} then
    ComposeDate(xml, 'timingDate', TFhirDate(elem.timing));
  if (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'reason', elem.reason);{x.2a}
end;

function TFHIRXmlParser.ParseClaimDiagnosis(element : TMXmlElement; path : string) : TFhirClaimDiagnosis;
var
  child : TMXmlElement;
begin
  result := TFhirClaimDiagnosis.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimDiagnosisChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimDiagnosisChild(element : TFhirClaimDiagnosis; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'diagnosisCodeableConcept') then
        element.diagnosis := ParseCodeableConcept(child, path+'/diagnosisCodeableConcept'){x.3}
      else if (child.localName = 'diagnosisReference') then
        element.diagnosis := ParseReference(child, path+'/diagnosisReference') {a}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'onAdmission') then
        element.onAdmission := ParseCodeableConcept(child, path+'/onAdmission') {b}
      else if (child.localName = 'packageCode') then
        element.packageCode := ParseCodeableConcept(child, path+'/packageCode') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimDiagnosis(xml : TXmlBuilder; name : String; elem : TFhirClaimDiagnosis);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimDiagnosisChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimDiagnosisChildren(xml : TXmlBuilder; elem : TFhirClaimDiagnosis);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  if (elem.diagnosis is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'diagnosisCodeableConcept', TFhirCodeableConcept(elem.diagnosis))
  else if (elem.diagnosis is TFhirReference) {2} then
    ComposeReference(xml, 'diagnosisReference', TFhirReference(elem.diagnosis));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'onAdmission', elem.onAdmission);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'packageCode', elem.packageCode);{x.2a}
end;

function TFHIRXmlParser.ParseClaimProcedure(element : TMXmlElement; path : string) : TFhirClaimProcedure;
var
  child : TMXmlElement;
begin
  result := TFhirClaimProcedure.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimProcedureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimProcedureChild(element : TFhirClaimProcedure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'procedureCodeableConcept') then
        element.procedure_ := ParseCodeableConcept(child, path+'/procedureCodeableConcept'){x.3}
      else if (child.localName = 'procedureReference') then
        element.procedure_ := ParseReference(child, path+'/procedureReference') {a}
      else if (child.localName = 'udi') then
        element.udiList.Add(ParseReference{TFhirDevice}(child, path+'/udi')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimProcedure(xml : TXmlBuilder; name : String; elem : TFhirClaimProcedure);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimProcedureChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimProcedureChildren(xml : TXmlBuilder; elem : TFhirClaimProcedure);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (elem.procedure_ is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'procedureCodeableConcept', TFhirCodeableConcept(elem.procedure_))
  else if (elem.procedure_ is TFhirReference) {2} then
    ComposeReference(xml, 'procedureReference', TFhirReference(elem.procedure_));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(xml, 'udi', elem.udiList[i]);
end;

function TFHIRXmlParser.ParseClaimInsurance(element : TMXmlElement; path : string) : TFhirClaimInsurance;
var
  child : TMXmlElement;
begin
  result := TFhirClaimInsurance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimInsuranceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimInsuranceChild(element : TFhirClaimInsurance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'focal') then
        element.focalElement := ParseBoolean(child, path+'/focal') {b}
      else if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'coverage') then
        element.coverage := ParseReference{TFhirCoverage}(child, path+'/coverage') {b}
      else if (child.localName = 'businessArrangement') then
        element.businessArrangementElement := ParseString(child, path+'/businessArrangement') {b}
      else if (child.localName = 'preAuthRef') then
        element.preAuthRefList.Add(ParseString(child, path+'/preAuthRef')){y.2}
      else if (child.localName = 'claimResponse') then
        element.claimResponse := ParseReference{TFhirClaimResponse}(child, path+'/claimResponse') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimInsurance(xml : TXmlBuilder; name : String; elem : TFhirClaimInsurance);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimInsuranceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimInsuranceChildren(xml : TXmlBuilder; elem : TFhirClaimInsurance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  ComposeBoolean(xml, 'focal', elem.focalElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  ComposeReference{TFhirCoverage}(xml, 'coverage', elem.coverage);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'businessArrangement', elem.businessArrangementElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.preAuthRefList.Count - 1 do
      ComposeString(xml, 'preAuthRef', elem.preAuthRefList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaimResponse}(xml, 'claimResponse', elem.claimResponse);{x.2a}
end;

function TFHIRXmlParser.ParseClaimAccident(element : TMXmlElement; path : string) : TFhirClaimAccident;
var
  child : TMXmlElement;
begin
  result := TFhirClaimAccident.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimAccidentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimAccidentChild(element : TFhirClaimAccident; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'date') then
        element.dateElement := ParseDate(child, path+'/date') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'locationAddress') then
        element.location := ParseAddress(child, path+'/locationAddress'){x.3}
      else if (child.localName = 'locationReference') then
        element.location := ParseReference(child, path+'/locationReference') {a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimAccident(xml : TXmlBuilder; name : String; elem : TFhirClaimAccident);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimAccidentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimAccidentChildren(xml : TXmlBuilder; elem : TFhirClaimAccident);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeDate(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.location is TFhirAddress) {6} then
    ComposeAddress(xml, 'locationAddress', TFhirAddress(elem.location))
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirReference) {2} then
    ComposeReference(xml, 'locationReference', TFhirReference(elem.location));
end;

function TFHIRXmlParser.ParseClaimItem(element : TMXmlElement; path : string) : TFhirClaimItem;
var
  child : TMXmlElement;
begin
  result := TFhirClaimItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimItemChild(element : TFhirClaimItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'careTeamSequence') then
        element.careTeamSequenceList.Add(ParsePositiveInt(child, path+'/careTeamSequence')){y.2}
      else if (child.localName = 'diagnosisSequence') then
        element.diagnosisSequenceList.Add(ParsePositiveInt(child, path+'/diagnosisSequence')){y.2}
      else if (child.localName = 'procedureSequence') then
        element.procedureSequenceList.Add(ParsePositiveInt(child, path+'/procedureSequence')){y.2}
      else if (child.localName = 'informationSequence') then
        element.informationSequenceList.Add(ParsePositiveInt(child, path+'/informationSequence')){y.2}
      else if (child.localName = 'revenue') then
        element.revenue := ParseCodeableConcept(child, path+'/revenue') {b}
      else if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'productOrService') then
        element.productOrService := ParseCodeableConcept(child, path+'/productOrService') {b}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')){y.2}
      else if (child.localName = 'programCode') then
        element.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')){y.2}
      else if (child.localName = 'servicedPeriod') then
        element.serviced := ParsePeriod(child, path+'/servicedPeriod'){x.3}
      else if (child.localName = 'servicedDate') then
        element.serviced := ParseDate(child, path+'/servicedDate'){x.3}
      else if (child.localName = 'locationCodeableConcept') then
        element.location := ParseCodeableConcept(child, path+'/locationCodeableConcept'){x.3}
      else if (child.localName = 'locationAddress') then
        element.location := ParseAddress(child, path+'/locationAddress'){x.3}
      else if (child.localName = 'locationReference') then
        element.location := ParseReference(child, path+'/locationReference') {a}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'unitPrice') then
        element.unitPrice := ParseMoney(child, path+'/unitPrice') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'net') then
        element.net := ParseMoney(child, path+'/net') {b}
      else if (child.localName = 'udi') then
        element.udiList.Add(ParseReference{TFhirDevice}(child, path+'/udi')){y.2}
      else if (child.localName = 'bodySite') then
        element.bodySite := ParseCodeableConcept(child, path+'/bodySite') {b}
      else if (child.localName = 'subSite') then
        element.subSiteList.Add(ParseCodeableConcept(child, path+'/subSite')){y.2}
      else if (child.localName = 'encounter') then
        element.encounterList.Add(ParseReference{TFhirEncounter}(child, path+'/encounter')){y.2}
      else if (child.localName = 'detail') then
        element.detailList.Add(ParseClaimItemDetail(child, path+'/detail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimItem(xml : TXmlBuilder; name : String; elem : TFhirClaimItem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimItemChildren(xml : TXmlBuilder; elem : TFhirClaimItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.careTeamSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'careTeamSequence', elem.careTeamSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.diagnosisSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'diagnosisSequence', elem.diagnosisSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.procedureSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'procedureSequence', elem.procedureSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.informationSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'informationSequence', elem.informationSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'revenue', elem.revenue);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  ComposeCodeableConcept(xml, 'productOrService', elem.productOrService);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', elem.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', elem.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirPeriod) {6} then
    ComposePeriod(xml, 'servicedPeriod', TFhirPeriod(elem.serviced))
  else if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirDate) {6} then
    ComposeDate(xml, 'servicedDate', TFhirDate(elem.serviced));
  if (SummaryOption in [soFull, soData]) and (elem.location is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'locationCodeableConcept', TFhirCodeableConcept(elem.location))
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirAddress) {6} then
    ComposeAddress(xml, 'locationAddress', TFhirAddress(elem.location))
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirReference) {2} then
    ComposeReference(xml, 'locationReference', TFhirReference(elem.location));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', elem.unitPrice);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', elem.net);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(xml, 'udi', elem.udiList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'bodySite', elem.bodySite);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.subSiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'subSite', elem.subSiteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.encounterList.Count - 1 do
      ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.detailList.Count - 1 do
      ComposeClaimItemDetail(xml, 'detail', elem.detailList[i]);
end;

function TFHIRXmlParser.ParseClaimItemDetail(element : TMXmlElement; path : string) : TFhirClaimItemDetail;
var
  child : TMXmlElement;
begin
  result := TFhirClaimItemDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimItemDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimItemDetailChild(element : TFhirClaimItemDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'revenue') then
        element.revenue := ParseCodeableConcept(child, path+'/revenue') {b}
      else if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'productOrService') then
        element.productOrService := ParseCodeableConcept(child, path+'/productOrService') {b}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')){y.2}
      else if (child.localName = 'programCode') then
        element.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')){y.2}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'unitPrice') then
        element.unitPrice := ParseMoney(child, path+'/unitPrice') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'net') then
        element.net := ParseMoney(child, path+'/net') {b}
      else if (child.localName = 'udi') then
        element.udiList.Add(ParseReference{TFhirDevice}(child, path+'/udi')){y.2}
      else if (child.localName = 'subDetail') then
        element.subDetailList.Add(ParseClaimItemDetailSubDetail(child, path+'/subDetail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimItemDetail(xml : TXmlBuilder; name : String; elem : TFhirClaimItemDetail);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimItemDetailChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimItemDetailChildren(xml : TXmlBuilder; elem : TFhirClaimItemDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'revenue', elem.revenue);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  ComposeCodeableConcept(xml, 'productOrService', elem.productOrService);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', elem.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', elem.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', elem.unitPrice);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', elem.net);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(xml, 'udi', elem.udiList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.subDetailList.Count - 1 do
      ComposeClaimItemDetailSubDetail(xml, 'subDetail', elem.subDetailList[i]);
end;

function TFHIRXmlParser.ParseClaimItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirClaimItemDetailSubDetail;
var
  child : TMXmlElement;
begin
  result := TFhirClaimItemDetailSubDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimItemDetailSubDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimItemDetailSubDetailChild(element : TFhirClaimItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'revenue') then
        element.revenue := ParseCodeableConcept(child, path+'/revenue') {b}
      else if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'productOrService') then
        element.productOrService := ParseCodeableConcept(child, path+'/productOrService') {b}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')){y.2}
      else if (child.localName = 'programCode') then
        element.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')){y.2}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'unitPrice') then
        element.unitPrice := ParseMoney(child, path+'/unitPrice') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'net') then
        element.net := ParseMoney(child, path+'/net') {b}
      else if (child.localName = 'udi') then
        element.udiList.Add(ParseReference{TFhirDevice}(child, path+'/udi')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimItemDetailSubDetail(xml : TXmlBuilder; name : String; elem : TFhirClaimItemDetailSubDetail);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimItemDetailSubDetailChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimItemDetailSubDetailChildren(xml : TXmlBuilder; elem : TFhirClaimItemDetailSubDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'revenue', elem.revenue);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  ComposeCodeableConcept(xml, 'productOrService', elem.productOrService);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', elem.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', elem.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', elem.unitPrice);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', elem.net);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(xml, 'udi', elem.udiList[i]);
end;

function TFHIRXmlParser.ParseClaim(element : TMXmlElement; path : string) : TFhirClaim;
var
  child : TMXmlElement;
begin
  result := TFhirClaim.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimChild(element : TFhirClaim; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'subType') then
        element.subType := ParseCodeableConcept(child, path+'/subType') {b}
      else if (child.localName = 'use') then
        element.useElement := ParseEnum(CODES_TFhirClaimUseEnum, SYSTEMS_TFhirClaimUseEnum, path+'/use', child){1a}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'billablePeriod') then
        element.billablePeriod := ParsePeriod(child, path+'/billablePeriod') {b}
      else if (child.localName = 'created') then
        element.createdElement := ParseDateTime(child, path+'/created') {b}
      else if (child.localName = 'enterer') then
        element.enterer := ParseReference{TFhirPractitioner}(child, path+'/enterer') {b}
      else if (child.localName = 'insurer') then
        element.insurer := ParseReference{TFhirOrganization}(child, path+'/insurer') {b}
      else if (child.localName = 'provider') then
        element.provider := ParseReference{TFhirPractitioner}(child, path+'/provider') {b}
      else if (child.localName = 'priority') then
        element.priority := ParseCodeableConcept(child, path+'/priority') {b}
      else if (child.localName = 'fundsReserve') then
        element.fundsReserve := ParseCodeableConcept(child, path+'/fundsReserve') {b}
      else if (child.localName = 'related') then
        element.relatedList.Add(ParseClaimRelated(child, path+'/related')){y.2}
      else if (child.localName = 'prescription') then
        element.prescription := ParseReference{TFhirDeviceRequest}(child, path+'/prescription') {b}
      else if (child.localName = 'originalPrescription') then
        element.originalPrescription := ParseReference{TFhirDeviceRequest}(child, path+'/originalPrescription') {b}
      else if (child.localName = 'payee') then
        element.payee := ParseClaimPayee(child, path+'/payee') {b}
      else if (child.localName = 'referral') then
        element.referral := ParseReference{TFhirServiceRequest}(child, path+'/referral') {b}
      else if (child.localName = 'facility') then
        element.facility := ParseReference{TFhirLocation}(child, path+'/facility') {b}
      else if (child.localName = 'careTeam') then
        element.careTeamList.Add(ParseClaimCareTeam(child, path+'/careTeam')){y.2}
      else if (child.localName = 'supportingInfo') then
        element.supportingInfoList.Add(ParseClaimSupportingInfo(child, path+'/supportingInfo')){y.2}
      else if (child.localName = 'diagnosis') then
        element.diagnosisList.Add(ParseClaimDiagnosis(child, path+'/diagnosis')){y.2}
      else if (child.localName = 'procedure') then
        element.procedure_List.Add(ParseClaimProcedure(child, path+'/procedure')){y.2}
      else if (child.localName = 'insurance') then
        element.insuranceList.Add(ParseClaimInsurance(child, path+'/insurance')){y.2}
      else if (child.localName = 'accident') then
        element.accident := ParseClaimAccident(child, path+'/accident') {b}
      else if (child.localName = 'item') then
        element.itemList.Add(ParseClaimItem(child, path+'/item')){y.2}
      else if (child.localName = 'total') then
        element.total := ParseMoney(child, path+'/total') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaim(xml : TXmlBuilder; name : String; elem : TFhirClaim);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeClaimChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimChildren(xml : TXmlBuilder; elem : TFhirClaim);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum);
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('subType') then
    ComposeCodeableConcept(xml, 'subType', elem.subType);{x.2a}
  ComposeEnum(xml, 'use', elem.UseElement, CODES_TFhirClaimUseEnum);
    ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('billablePeriod') then
    ComposePeriod(xml, 'billablePeriod', elem.billablePeriod);{x.2a}
    ComposeDateTime(xml, 'created', elem.createdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('enterer') then
    ComposeReference{TFhirPractitioner}(xml, 'enterer', elem.enterer);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('insurer') then
    ComposeReference{TFhirOrganization}(xml, 'insurer', elem.insurer);{x.2a}
    ComposeReference{TFhirPractitioner}(xml, 'provider', elem.provider);{x.2a}
    ComposeCodeableConcept(xml, 'priority', elem.priority);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('fundsReserve') then
    ComposeCodeableConcept(xml, 'fundsReserve', elem.fundsReserve);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('related') then
    for i := 0 to elem.relatedList.Count - 1 do
      ComposeClaimRelated(xml, 'related', elem.relatedList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('prescription') then
    ComposeReference{TFhirDeviceRequest}(xml, 'prescription', elem.prescription);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('originalPrescription') then
    ComposeReference{TFhirDeviceRequest}(xml, 'originalPrescription', elem.originalPrescription);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('payee') then
    ComposeClaimPayee(xml, 'payee', elem.payee);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('referral') then
    ComposeReference{TFhirServiceRequest}(xml, 'referral', elem.referral);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('facility') then
    ComposeReference{TFhirLocation}(xml, 'facility', elem.facility);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('careTeam') then
    for i := 0 to elem.careTeamList.Count - 1 do
      ComposeClaimCareTeam(xml, 'careTeam', elem.careTeamList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInfo') then
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeClaimSupportingInfo(xml, 'supportingInfo', elem.supportingInfoList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('diagnosis') then
    for i := 0 to elem.diagnosisList.Count - 1 do
      ComposeClaimDiagnosis(xml, 'diagnosis', elem.diagnosisList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('procedure_') then
    for i := 0 to elem.procedure_List.Count - 1 do
      ComposeClaimProcedure(xml, 'procedure', elem.procedure_List[i]);
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeClaimInsurance(xml, 'insurance', elem.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('accident') then
    ComposeClaimAccident(xml, 'accident', elem.accident);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('item') then
    for i := 0 to elem.itemList.Count - 1 do
      ComposeClaimItem(xml, 'item', elem.itemList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('total') then
    ComposeMoney(xml, 'total', elem.total);{x.2a}
end;

{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
function TFHIRXmlParser.ParseClaimResponseItem(element : TMXmlElement; path : string) : TFhirClaimResponseItem;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseItemChild(element : TFhirClaimResponseItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemSequence') then
        element.itemSequenceElement := ParsePositiveInt(child, path+'/itemSequence') {b}
      else if (child.localName = 'noteNumber') then
        element.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')){y.2}
      else if (child.localName = 'adjudication') then
        element.adjudicationList.Add(ParseClaimResponseItemAdjudication(child, path+'/adjudication')){y.2}
      else if (child.localName = 'detail') then
        element.detailList.Add(ParseClaimResponseItemDetail(child, path+'/detail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItem(xml : TXmlBuilder; name : String; elem : TFhirClaimResponseItem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimResponseItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItemChildren(xml : TXmlBuilder; elem : TFhirClaimResponseItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'itemSequence', elem.itemSequenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', elem.noteNumberList[i]);
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(xml, 'adjudication', elem.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.detailList.Count - 1 do
      ComposeClaimResponseItemDetail(xml, 'detail', elem.detailList[i]);
end;

function TFHIRXmlParser.ParseClaimResponseItemAdjudication(element : TMXmlElement; path : string) : TFhirClaimResponseItemAdjudication;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseItemAdjudication.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseItemAdjudicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseItemAdjudicationChild(element : TFhirClaimResponseItemAdjudication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'reason') then
        element.reason := ParseCodeableConcept(child, path+'/reason') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseMoney(child, path+'/amount') {b}
      else if (child.localName = 'value') then
        element.valueElement := ParseDecimal(child, path+'/value') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItemAdjudication(xml : TXmlBuilder; name : String; elem : TFhirClaimResponseItemAdjudication);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimResponseItemAdjudicationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItemAdjudicationChildren(xml : TXmlBuilder; elem : TFhirClaimResponseItemAdjudication);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'reason', elem.reason);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'amount', elem.amount);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'value', elem.valueElement);{x.2b}
end;

function TFHIRXmlParser.ParseClaimResponseItemDetail(element : TMXmlElement; path : string) : TFhirClaimResponseItemDetail;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseItemDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseItemDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseItemDetailChild(element : TFhirClaimResponseItemDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'detailSequence') then
        element.detailSequenceElement := ParsePositiveInt(child, path+'/detailSequence') {b}
      else if (child.localName = 'noteNumber') then
        element.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')){y.2}
      else if (child.localName = 'adjudication') then
        element.adjudicationList.Add(ParseClaimResponseItemAdjudication(child, path+'/adjudication')){y.2}
      else if (child.localName = 'subDetail') then
        element.subDetailList.Add(ParseClaimResponseItemDetailSubDetail(child, path+'/subDetail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItemDetail(xml : TXmlBuilder; name : String; elem : TFhirClaimResponseItemDetail);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimResponseItemDetailChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItemDetailChildren(xml : TXmlBuilder; elem : TFhirClaimResponseItemDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'detailSequence', elem.detailSequenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', elem.noteNumberList[i]);
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(xml, 'adjudication', elem.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.subDetailList.Count - 1 do
      ComposeClaimResponseItemDetailSubDetail(xml, 'subDetail', elem.subDetailList[i]);
end;

function TFHIRXmlParser.ParseClaimResponseItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirClaimResponseItemDetailSubDetail;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseItemDetailSubDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseItemDetailSubDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseItemDetailSubDetailChild(element : TFhirClaimResponseItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'subDetailSequence') then
        element.subDetailSequenceElement := ParsePositiveInt(child, path+'/subDetailSequence') {b}
      else if (child.localName = 'noteNumber') then
        element.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')){y.2}
      else if (child.localName = 'adjudication') then
        element.adjudicationList.Add(ParseClaimResponseItemAdjudication(child, path+'/adjudication')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItemDetailSubDetail(xml : TXmlBuilder; name : String; elem : TFhirClaimResponseItemDetailSubDetail);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimResponseItemDetailSubDetailChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItemDetailSubDetailChildren(xml : TXmlBuilder; elem : TFhirClaimResponseItemDetailSubDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'subDetailSequence', elem.subDetailSequenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', elem.noteNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(xml, 'adjudication', elem.adjudicationList[i]);
end;

function TFHIRXmlParser.ParseClaimResponseAddItem(element : TMXmlElement; path : string) : TFhirClaimResponseAddItem;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseAddItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseAddItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseAddItemChild(element : TFhirClaimResponseAddItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemSequence') then
        element.itemSequenceList.Add(ParsePositiveInt(child, path+'/itemSequence')){y.2}
      else if (child.localName = 'detailSequence') then
        element.detailSequenceList.Add(ParsePositiveInt(child, path+'/detailSequence')){y.2}
      else if (child.localName = 'subdetailSequence') then
        element.subdetailSequenceList.Add(ParsePositiveInt(child, path+'/subdetailSequence')){y.2}
      else if (child.localName = 'provider') then
        element.providerList.Add(ParseReference{TFhirPractitioner}(child, path+'/provider')){y.2}
      else if (child.localName = 'productOrService') then
        element.productOrService := ParseCodeableConcept(child, path+'/productOrService') {b}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')){y.2}
      else if (child.localName = 'programCode') then
        element.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')){y.2}
      else if (child.localName = 'servicedPeriod') then
        element.serviced := ParsePeriod(child, path+'/servicedPeriod'){x.3}
      else if (child.localName = 'servicedDate') then
        element.serviced := ParseDate(child, path+'/servicedDate'){x.3}
      else if (child.localName = 'locationCodeableConcept') then
        element.location := ParseCodeableConcept(child, path+'/locationCodeableConcept'){x.3}
      else if (child.localName = 'locationAddress') then
        element.location := ParseAddress(child, path+'/locationAddress'){x.3}
      else if (child.localName = 'locationReference') then
        element.location := ParseReference(child, path+'/locationReference') {a}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'unitPrice') then
        element.unitPrice := ParseMoney(child, path+'/unitPrice') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'net') then
        element.net := ParseMoney(child, path+'/net') {b}
      else if (child.localName = 'bodySite') then
        element.bodySite := ParseCodeableConcept(child, path+'/bodySite') {b}
      else if (child.localName = 'subSite') then
        element.subSiteList.Add(ParseCodeableConcept(child, path+'/subSite')){y.2}
      else if (child.localName = 'noteNumber') then
        element.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')){y.2}
      else if (child.localName = 'adjudication') then
        element.adjudicationList.Add(ParseClaimResponseItemAdjudication(child, path+'/adjudication')){y.2}
      else if (child.localName = 'detail') then
        element.detailList.Add(ParseClaimResponseAddItemDetail(child, path+'/detail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseAddItem(xml : TXmlBuilder; name : String; elem : TFhirClaimResponseAddItem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimResponseAddItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimResponseAddItemChildren(xml : TXmlBuilder; elem : TFhirClaimResponseAddItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.itemSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'itemSequence', elem.itemSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.detailSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'detailSequence', elem.detailSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.subdetailSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'subdetailSequence', elem.subdetailSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.providerList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'provider', elem.providerList[i]);
  ComposeCodeableConcept(xml, 'productOrService', elem.productOrService);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', elem.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', elem.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirPeriod) {6} then
    ComposePeriod(xml, 'servicedPeriod', TFhirPeriod(elem.serviced))
  else if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirDate) {6} then
    ComposeDate(xml, 'servicedDate', TFhirDate(elem.serviced));
  if (SummaryOption in [soFull, soData]) and (elem.location is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'locationCodeableConcept', TFhirCodeableConcept(elem.location))
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirAddress) {6} then
    ComposeAddress(xml, 'locationAddress', TFhirAddress(elem.location))
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirReference) {2} then
    ComposeReference(xml, 'locationReference', TFhirReference(elem.location));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', elem.unitPrice);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', elem.net);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'bodySite', elem.bodySite);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.subSiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'subSite', elem.subSiteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', elem.noteNumberList[i]);
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(xml, 'adjudication', elem.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.detailList.Count - 1 do
      ComposeClaimResponseAddItemDetail(xml, 'detail', elem.detailList[i]);
end;

function TFHIRXmlParser.ParseClaimResponseAddItemDetail(element : TMXmlElement; path : string) : TFhirClaimResponseAddItemDetail;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseAddItemDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseAddItemDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseAddItemDetailChild(element : TFhirClaimResponseAddItemDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'productOrService') then
        element.productOrService := ParseCodeableConcept(child, path+'/productOrService') {b}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')){y.2}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'unitPrice') then
        element.unitPrice := ParseMoney(child, path+'/unitPrice') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'net') then
        element.net := ParseMoney(child, path+'/net') {b}
      else if (child.localName = 'noteNumber') then
        element.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')){y.2}
      else if (child.localName = 'adjudication') then
        element.adjudicationList.Add(ParseClaimResponseItemAdjudication(child, path+'/adjudication')){y.2}
      else if (child.localName = 'subDetail') then
        element.subDetailList.Add(ParseClaimResponseAddItemDetailSubDetail(child, path+'/subDetail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseAddItemDetail(xml : TXmlBuilder; name : String; elem : TFhirClaimResponseAddItemDetail);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimResponseAddItemDetailChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimResponseAddItemDetailChildren(xml : TXmlBuilder; elem : TFhirClaimResponseAddItemDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'productOrService', elem.productOrService);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', elem.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', elem.unitPrice);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', elem.net);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', elem.noteNumberList[i]);
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(xml, 'adjudication', elem.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.subDetailList.Count - 1 do
      ComposeClaimResponseAddItemDetailSubDetail(xml, 'subDetail', elem.subDetailList[i]);
end;

function TFHIRXmlParser.ParseClaimResponseAddItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirClaimResponseAddItemDetailSubDetail;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseAddItemDetailSubDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseAddItemDetailSubDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseAddItemDetailSubDetailChild(element : TFhirClaimResponseAddItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'productOrService') then
        element.productOrService := ParseCodeableConcept(child, path+'/productOrService') {b}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')){y.2}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'unitPrice') then
        element.unitPrice := ParseMoney(child, path+'/unitPrice') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'net') then
        element.net := ParseMoney(child, path+'/net') {b}
      else if (child.localName = 'noteNumber') then
        element.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')){y.2}
      else if (child.localName = 'adjudication') then
        element.adjudicationList.Add(ParseClaimResponseItemAdjudication(child, path+'/adjudication')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseAddItemDetailSubDetail(xml : TXmlBuilder; name : String; elem : TFhirClaimResponseAddItemDetailSubDetail);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimResponseAddItemDetailSubDetailChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimResponseAddItemDetailSubDetailChildren(xml : TXmlBuilder; elem : TFhirClaimResponseAddItemDetailSubDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'productOrService', elem.productOrService);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', elem.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', elem.unitPrice);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', elem.net);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', elem.noteNumberList[i]);
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(xml, 'adjudication', elem.adjudicationList[i]);
end;

function TFHIRXmlParser.ParseClaimResponseTotal(element : TMXmlElement; path : string) : TFhirClaimResponseTotal;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseTotal.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseTotalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseTotalChild(element : TFhirClaimResponseTotal; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseMoney(child, path+'/amount') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseTotal(xml : TXmlBuilder; name : String; elem : TFhirClaimResponseTotal);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimResponseTotalChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimResponseTotalChildren(xml : TXmlBuilder; elem : TFhirClaimResponseTotal);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  ComposeMoney(xml, 'amount', elem.amount);{x.2a}
end;

function TFHIRXmlParser.ParseClaimResponsePayment(element : TMXmlElement; path : string) : TFhirClaimResponsePayment;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponsePayment.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponsePaymentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponsePaymentChild(element : TFhirClaimResponsePayment; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'adjustment') then
        element.adjustment := ParseMoney(child, path+'/adjustment') {b}
      else if (child.localName = 'adjustmentReason') then
        element.adjustmentReason := ParseCodeableConcept(child, path+'/adjustmentReason') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDate(child, path+'/date') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseMoney(child, path+'/amount') {b}
      else if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponsePayment(xml : TXmlBuilder; name : String; elem : TFhirClaimResponsePayment);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimResponsePaymentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimResponsePaymentChildren(xml : TXmlBuilder; elem : TFhirClaimResponsePayment);
begin
  composeBackboneElementChildren(xml, elem);
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'adjustment', elem.adjustment);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'adjustmentReason', elem.adjustmentReason);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'date', elem.dateElement);{x.2b}
    ComposeMoney(xml, 'amount', elem.amount);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
end;

function TFHIRXmlParser.ParseClaimResponseProcessNote(element : TMXmlElement; path : string) : TFhirClaimResponseProcessNote;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseProcessNote.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseProcessNoteChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseProcessNoteChild(element : TFhirClaimResponseProcessNote; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'number') then
        element.numberElement := ParsePositiveInt(child, path+'/number') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirNoteTypeEnum, SYSTEMS_TFhirNoteTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if (child.localName = 'language') then
        element.language := ParseCodeableConcept(child, path+'/language') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseProcessNote(xml : TXmlBuilder; name : String; elem : TFhirClaimResponseProcessNote);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimResponseProcessNoteChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimResponseProcessNoteChildren(xml : TXmlBuilder; elem : TFhirClaimResponseProcessNote);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'number', elem.numberElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirNoteTypeEnum);
    ComposeString(xml, 'text', elem.textElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'language', elem.language);{x.2a}
end;

function TFHIRXmlParser.ParseClaimResponseInsurance(element : TMXmlElement; path : string) : TFhirClaimResponseInsurance;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseInsurance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseInsuranceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseInsuranceChild(element : TFhirClaimResponseInsurance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'focal') then
        element.focalElement := ParseBoolean(child, path+'/focal') {b}
      else if (child.localName = 'coverage') then
        element.coverage := ParseReference{TFhirCoverage}(child, path+'/coverage') {b}
      else if (child.localName = 'businessArrangement') then
        element.businessArrangementElement := ParseString(child, path+'/businessArrangement') {b}
      else if (child.localName = 'claimResponse') then
        element.claimResponse := ParseReference{TFhirClaimResponse}(child, path+'/claimResponse') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseInsurance(xml : TXmlBuilder; name : String; elem : TFhirClaimResponseInsurance);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimResponseInsuranceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimResponseInsuranceChildren(xml : TXmlBuilder; elem : TFhirClaimResponseInsurance);
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  ComposeBoolean(xml, 'focal', elem.focalElement);{x.2b}
  ComposeReference{TFhirCoverage}(xml, 'coverage', elem.coverage);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'businessArrangement', elem.businessArrangementElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaimResponse}(xml, 'claimResponse', elem.claimResponse);{x.2a}
end;

function TFHIRXmlParser.ParseClaimResponseError(element : TMXmlElement; path : string) : TFhirClaimResponseError;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseError.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseErrorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseErrorChild(element : TFhirClaimResponseError; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemSequence') then
        element.itemSequenceElement := ParsePositiveInt(child, path+'/itemSequence') {b}
      else if (child.localName = 'detailSequence') then
        element.detailSequenceElement := ParsePositiveInt(child, path+'/detailSequence') {b}
      else if (child.localName = 'subDetailSequence') then
        element.subDetailSequenceElement := ParsePositiveInt(child, path+'/subDetailSequence') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseError(xml : TXmlBuilder; name : String; elem : TFhirClaimResponseError);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClaimResponseErrorChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimResponseErrorChildren(xml : TXmlBuilder; elem : TFhirClaimResponseError);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'itemSequence', elem.itemSequenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'detailSequence', elem.detailSequenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'subDetailSequence', elem.subDetailSequenceElement);{x.2b}
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
end;

function TFHIRXmlParser.ParseClaimResponse(element : TMXmlElement; path : string) : TFhirClaimResponse;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponse.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseChild(element : TFhirClaimResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'subType') then
        element.subType := ParseCodeableConcept(child, path+'/subType') {b}
      else if (child.localName = 'use') then
        element.useElement := ParseEnum(CODES_TFhirClaimUseEnum, SYSTEMS_TFhirClaimUseEnum, path+'/use', child){1a}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'created') then
        element.createdElement := ParseDateTime(child, path+'/created') {b}
      else if (child.localName = 'insurer') then
        element.insurer := ParseReference{TFhirOrganization}(child, path+'/insurer') {b}
      else if (child.localName = 'requestor') then
        element.requestor := ParseReference{TFhirPractitioner}(child, path+'/requestor') {b}
      else if (child.localName = 'request') then
        element.request := ParseReference{TFhirClaim}(child, path+'/request') {b}
      else if (child.localName = 'outcome') then
        element.outcomeElement := ParseEnum(CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum, path+'/outcome', child){1a}
      else if (child.localName = 'disposition') then
        element.dispositionElement := ParseString(child, path+'/disposition') {b}
      else if (child.localName = 'preAuthRef') then
        element.preAuthRefElement := ParseString(child, path+'/preAuthRef') {b}
      else if (child.localName = 'preAuthPeriod') then
        element.preAuthPeriod := ParsePeriod(child, path+'/preAuthPeriod') {b}
      else if (child.localName = 'payeeType') then
        element.payeeType := ParseCodeableConcept(child, path+'/payeeType') {b}
      else if (child.localName = 'item') then
        element.itemList.Add(ParseClaimResponseItem(child, path+'/item')){y.2}
      else if (child.localName = 'addItem') then
        element.addItemList.Add(ParseClaimResponseAddItem(child, path+'/addItem')){y.2}
      else if (child.localName = 'adjudication') then
        element.adjudicationList.Add(ParseClaimResponseItemAdjudication(child, path+'/adjudication')){y.2}
      else if (child.localName = 'total') then
        element.totalList.Add(ParseClaimResponseTotal(child, path+'/total')){y.2}
      else if (child.localName = 'payment') then
        element.payment := ParseClaimResponsePayment(child, path+'/payment') {b}
      else if (child.localName = 'fundsReserve') then
        element.fundsReserve := ParseCodeableConcept(child, path+'/fundsReserve') {b}
      else if (child.localName = 'formCode') then
        element.formCode := ParseCodeableConcept(child, path+'/formCode') {b}
      else if (child.localName = 'form') then
        element.form := ParseAttachment(child, path+'/form') {b}
      else if (child.localName = 'processNote') then
        element.processNoteList.Add(ParseClaimResponseProcessNote(child, path+'/processNote')){y.2}
      else if (child.localName = 'communicationRequest') then
        element.communicationRequestList.Add(ParseReference{TFhirCommunicationRequest}(child, path+'/communicationRequest')){y.2}
      else if (child.localName = 'insurance') then
        element.insuranceList.Add(ParseClaimResponseInsurance(child, path+'/insurance')){y.2}
      else if (child.localName = 'error') then
        element.errorList.Add(ParseClaimResponseError(child, path+'/error')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponse(xml : TXmlBuilder; name : String; elem : TFhirClaimResponse);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeClaimResponseChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClaimResponseChildren(xml : TXmlBuilder; elem : TFhirClaimResponse);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum);
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('subType') then
    ComposeCodeableConcept(xml, 'subType', elem.subType);{x.2a}
  ComposeEnum(xml, 'use', elem.UseElement, CODES_TFhirClaimUseEnum);
    ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
    ComposeDateTime(xml, 'created', elem.createdElement);{x.2b}
    ComposeReference{TFhirOrganization}(xml, 'insurer', elem.insurer);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('requestor') then
    ComposeReference{TFhirPractitioner}(xml, 'requestor', elem.requestor);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('request') then
    ComposeReference{TFhirClaim}(xml, 'request', elem.request);{x.2a}
  ComposeEnum(xml, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeString(xml, 'disposition', elem.dispositionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('preAuthRef') then
    ComposeString(xml, 'preAuthRef', elem.preAuthRefElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('preAuthPeriod') then
    ComposePeriod(xml, 'preAuthPeriod', elem.preAuthPeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('payeeType') then
    ComposeCodeableConcept(xml, 'payeeType', elem.payeeType);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('item') then
    for i := 0 to elem.itemList.Count - 1 do
      ComposeClaimResponseItem(xml, 'item', elem.itemList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('addItem') then
    for i := 0 to elem.addItemList.Count - 1 do
      ComposeClaimResponseAddItem(xml, 'addItem', elem.addItemList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('adjudication') then
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(xml, 'adjudication', elem.adjudicationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('total') then
    for i := 0 to elem.totalList.Count - 1 do
      ComposeClaimResponseTotal(xml, 'total', elem.totalList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('payment') then
    ComposeClaimResponsePayment(xml, 'payment', elem.payment);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('fundsReserve') then
    ComposeCodeableConcept(xml, 'fundsReserve', elem.fundsReserve);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('formCode') then
    ComposeCodeableConcept(xml, 'formCode', elem.formCode);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('form') then
    ComposeAttachment(xml, 'form', elem.form);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('processNote') then
    for i := 0 to elem.processNoteList.Count - 1 do
      ComposeClaimResponseProcessNote(xml, 'processNote', elem.processNoteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('communicationRequest') then
    for i := 0 to elem.communicationRequestList.Count - 1 do
      ComposeReference{TFhirCommunicationRequest}(xml, 'communicationRequest', elem.communicationRequestList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('insurance') then
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeClaimResponseInsurance(xml, 'insurance', elem.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('error') then
    for i := 0 to elem.errorList.Count - 1 do
      ComposeClaimResponseError(xml, 'error', elem.errorList[i]);
end;

{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
function TFHIRXmlParser.ParseClinicalImpressionInvestigation(element : TMXmlElement; path : string) : TFhirClinicalImpressionInvestigation;
var
  child : TMXmlElement;
begin
  result := TFhirClinicalImpressionInvestigation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClinicalImpressionInvestigationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClinicalImpressionInvestigationChild(element : TFhirClinicalImpressionInvestigation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'item') then
        element.itemList.Add(ParseReference{TFhirObservation}(child, path+'/item')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClinicalImpressionInvestigation(xml : TXmlBuilder; name : String; elem : TFhirClinicalImpressionInvestigation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClinicalImpressionInvestigationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClinicalImpressionInvestigationChildren(xml : TXmlBuilder; elem : TFhirClinicalImpressionInvestigation);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.itemList.Count - 1 do
      ComposeReference{TFhirObservation}(xml, 'item', elem.itemList[i]);
end;

function TFHIRXmlParser.ParseClinicalImpressionFinding(element : TMXmlElement; path : string) : TFhirClinicalImpressionFinding;
var
  child : TMXmlElement;
begin
  result := TFhirClinicalImpressionFinding.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClinicalImpressionFindingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClinicalImpressionFindingChild(element : TFhirClinicalImpressionFinding; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemCodeableConcept') then
        element.itemCodeableConcept := ParseCodeableConcept(child, path+'/itemCodeableConcept') {b}
      else if (child.localName = 'itemReference') then
        element.itemReference := ParseReference{TFhirCondition}(child, path+'/itemReference') {b}
      else if (child.localName = 'basis') then
        element.basisElement := ParseString(child, path+'/basis') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClinicalImpressionFinding(xml : TXmlBuilder; name : String; elem : TFhirClinicalImpressionFinding);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeClinicalImpressionFindingChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClinicalImpressionFindingChildren(xml : TXmlBuilder; elem : TFhirClinicalImpressionFinding);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'itemCodeableConcept', elem.itemCodeableConcept);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirCondition}(xml, 'itemReference', elem.itemReference);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'basis', elem.basisElement);{x.2b}
end;

function TFHIRXmlParser.ParseClinicalImpression(element : TMXmlElement; path : string) : TFhirClinicalImpression;
var
  child : TMXmlElement;
begin
  result := TFhirClinicalImpression.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClinicalImpressionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClinicalImpressionChild(element : TFhirClinicalImpression; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirClinicalimpressionStatusEnum, SYSTEMS_TFhirClinicalimpressionStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'statusReason') then
        element.statusReason := ParseCodeableConcept(child, path+'/statusReason') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effective := ParsePeriod(child, path+'/effectivePeriod'){x.3}
      else if (child.localName = 'effectiveDateTime') then
        element.effective := ParseDateTime(child, path+'/effectiveDateTime'){x.3}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'assessor') then
        element.assessor := ParseReference{TFhirPractitioner}(child, path+'/assessor') {b}
      else if (child.localName = 'previous') then
        element.previous := ParseReference{TFhirClinicalImpression}(child, path+'/previous') {b}
      else if (child.localName = 'problem') then
        element.problemList.Add(ParseReference{TFhirCondition}(child, path+'/problem')){y.2}
      else if (child.localName = 'investigation') then
        element.investigationList.Add(ParseClinicalImpressionInvestigation(child, path+'/investigation')){y.2}
      else if (child.localName = 'protocol') then
        element.protocolList.Add(ParseUri(child, path+'/protocol')){y.2}
      else if (child.localName = 'summary') then
        element.summaryElement := ParseString(child, path+'/summary') {b}
      else if (child.localName = 'finding') then
        element.findingList.Add(ParseClinicalImpressionFinding(child, path+'/finding')){y.2}
      else if (child.localName = 'prognosisCodeableConcept') then
        element.prognosisCodeableConceptList.Add(ParseCodeableConcept(child, path+'/prognosisCodeableConcept')){y.2}
      else if (child.localName = 'prognosisReference') then
        element.prognosisReferenceList.Add(ParseReference{TFhirRiskAssessment}(child, path+'/prognosisReference')){y.2}
      else if (child.localName = 'supportingInfo') then
        element.supportingInfoList.Add(ParseReference{TFhirReference}(child, path+'/supportingInfo')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClinicalImpression(xml : TXmlBuilder; name : String; elem : TFhirClinicalImpression);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeClinicalImpressionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeClinicalImpressionChildren(xml : TXmlBuilder; elem : TFhirClinicalImpression);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirClinicalimpressionStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('statusReason') then
    ComposeCodeableConcept(xml, 'statusReason', elem.statusReason);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) {6} then
    ComposePeriod(xml, 'effectivePeriod', TFhirPeriod(elem.effective))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'effectiveDateTime', TFhirDateTime(elem.effective));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('assessor') then
    ComposeReference{TFhirPractitioner}(xml, 'assessor', elem.assessor);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('previous') then
    ComposeReference{TFhirClinicalImpression}(xml, 'previous', elem.previous);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('problem') then
    for i := 0 to elem.problemList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'problem', elem.problemList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('investigation') then
    for i := 0 to elem.investigationList.Count - 1 do
      ComposeClinicalImpressionInvestigation(xml, 'investigation', elem.investigationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('protocol') then
    for i := 0 to elem.protocolList.Count - 1 do
      ComposeUri(xml, 'protocol', elem.protocolList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('summary') then
    ComposeString(xml, 'summary', elem.summaryElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('finding') then
    for i := 0 to elem.findingList.Count - 1 do
      ComposeClinicalImpressionFinding(xml, 'finding', elem.findingList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('prognosisCodeableConcept') then
    for i := 0 to elem.prognosisCodeableConceptList.Count - 1 do
      ComposeCodeableConcept(xml, 'prognosisCodeableConcept', elem.prognosisCodeableConceptList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('prognosisReference') then
    for i := 0 to elem.prognosisReferenceList.Count - 1 do
      ComposeReference{TFhirRiskAssessment}(xml, 'prognosisReference', elem.prognosisReferenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInfo') then
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'supportingInfo', elem.supportingInfoList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
function TFHIRXmlParser.ParseCodeSystemFilter(element : TMXmlElement; path : string) : TFhirCodeSystemFilter;
var
  child : TMXmlElement;
begin
  result := TFhirCodeSystemFilter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeSystemFilterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeSystemFilterChild(element : TFhirCodeSystemFilter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'operator') then
        element.operatorList.Add(ParseEnum(CODES_TFhirFilterOperatorEnum, SYSTEMS_TFhirFilterOperatorEnum, path+'/operator', child)){y.1}
      else if (child.localName = 'value') then
        element.valueElement := ParseString(child, path+'/value') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemFilter(xml : TXmlBuilder; name : String; elem : TFhirCodeSystemFilter);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCodeSystemFilterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCodeSystemFilterChildren(xml : TXmlBuilder; elem : TFhirCodeSystemFilter);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCode(xml, 'code', elem.codeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  for i := 0 to elem.operatorList.Count - 1 do
      ComposeEnum(xml, 'operator', elem.operatorList[i], CODES_TFhirFilterOperatorEnum);
  ComposeString(xml, 'value', elem.valueElement);{x.2b}
end;

function TFHIRXmlParser.ParseCodeSystemProperty(element : TMXmlElement; path : string) : TFhirCodeSystemProperty;
var
  child : TMXmlElement;
begin
  result := TFhirCodeSystemProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeSystemPropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeSystemPropertyChild(element : TFhirCodeSystemProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if (child.localName = 'uri') then
        element.uriElement := ParseUri(child, path+'/uri') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirConceptPropertyTypeEnum, SYSTEMS_TFhirConceptPropertyTypeEnum, path+'/type', child){1a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemProperty(xml : TXmlBuilder; name : String; elem : TFhirCodeSystemProperty);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCodeSystemPropertyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCodeSystemPropertyChildren(xml : TXmlBuilder; elem : TFhirCodeSystemProperty);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCode(xml, 'code', elem.codeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'uri', elem.uriElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirConceptPropertyTypeEnum);
end;

function TFHIRXmlParser.ParseCodeSystemConcept(element : TMXmlElement; path : string) : TFhirCodeSystemConcept;
var
  child : TMXmlElement;
begin
  result := TFhirCodeSystemConcept.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeSystemConceptChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeSystemConceptChild(element : TFhirCodeSystemConcept; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if (child.localName = 'display') then
        element.displayElement := ParseString(child, path+'/display') {b}
      else if (child.localName = 'definition') then
        element.definitionElement := ParseString(child, path+'/definition') {b}
      else if (child.localName = 'designation') then
        element.designationList.Add(ParseCodeSystemConceptDesignation(child, path+'/designation')){y.2}
      else if (child.localName = 'property') then
        element.property_List.Add(ParseCodeSystemConceptProperty(child, path+'/property')){y.2}
      else if (child.localName = 'concept') then
        element.conceptList.Add(ParseCodeSystemConcept(child, path+'/concept')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemConcept(xml : TXmlBuilder; name : String; elem : TFhirCodeSystemConcept);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCodeSystemConceptChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCodeSystemConceptChildren(xml : TXmlBuilder; elem : TFhirCodeSystemConcept);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCode(xml, 'code', elem.codeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', elem.displayElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'definition', elem.definitionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.designationList.Count - 1 do
      ComposeCodeSystemConceptDesignation(xml, 'designation', elem.designationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.property_List.Count - 1 do
      ComposeCodeSystemConceptProperty(xml, 'property', elem.property_List[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.conceptList.Count - 1 do
      ComposeCodeSystemConcept(xml, 'concept', elem.conceptList[i]);
end;

function TFHIRXmlParser.ParseCodeSystemConceptDesignation(element : TMXmlElement; path : string) : TFhirCodeSystemConceptDesignation;
var
  child : TMXmlElement;
begin
  result := TFhirCodeSystemConceptDesignation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeSystemConceptDesignationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeSystemConceptDesignationChild(element : TFhirCodeSystemConceptDesignation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'language') then
        element.languageElement := ParseCode(child, path+'/language') {b}
      else if (child.localName = 'use') then
        element.use := ParseCoding(child, path+'/use') {b}
      else if (child.localName = 'value') then
        element.valueElement := ParseString(child, path+'/value') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemConceptDesignation(xml : TXmlBuilder; name : String; elem : TFhirCodeSystemConceptDesignation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCodeSystemConceptDesignationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCodeSystemConceptDesignationChildren(xml : TXmlBuilder; elem : TFhirCodeSystemConceptDesignation);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'language', elem.languageElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'use', elem.use);{x.2a}
  ComposeString(xml, 'value', elem.valueElement);{x.2b}
end;

function TFHIRXmlParser.ParseCodeSystemConceptProperty(element : TMXmlElement; path : string) : TFhirCodeSystemConceptProperty;
var
  child : TMXmlElement;
begin
  result := TFhirCodeSystemConceptProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeSystemConceptPropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeSystemConceptPropertyChild(element : TFhirCodeSystemConceptProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if (child.localName = 'valueCode') then
        element.value := ParseCode(child, path+'/valueCode'){x.3}
      else if (child.localName = 'valueCoding') then
        element.value := ParseCoding(child, path+'/valueCoding'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueInteger') then
        element.value := ParseInteger(child, path+'/valueInteger'){x.3}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueDateTime') then
        element.value := ParseDateTime(child, path+'/valueDateTime'){x.3}
      else if (child.localName = 'valueDecimal') then
        element.value := ParseDecimal(child, path+'/valueDecimal'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemConceptProperty(xml : TXmlBuilder; name : String; elem : TFhirCodeSystemConceptProperty);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCodeSystemConceptPropertyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCodeSystemConceptPropertyChildren(xml : TXmlBuilder; elem : TFhirCodeSystemConceptProperty);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCode(xml, 'code', elem.codeElement);{x.2b}
  if (elem.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(elem.value))
  else if (elem.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(elem.value))
  else if (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (elem.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(elem.value))
  else if (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (elem.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(elem.value))
  else if (elem.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(elem.value));
end;

function TFHIRXmlParser.ParseCodeSystem(element : TMXmlElement; path : string) : TFhirCodeSystem;
var
  child : TMXmlElement;
begin
  result := TFhirCodeSystem.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeSystemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeSystemChild(element : TFhirCodeSystem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'caseSensitive') then
        element.caseSensitiveElement := ParseBoolean(child, path+'/caseSensitive') {b}
      else if (child.localName = 'valueSet') then
        element.valueSetElement := ParseCanonical(child, path+'/valueSet') {b}
      else if (child.localName = 'hierarchyMeaning') then
        element.hierarchyMeaningElement := ParseEnum(CODES_TFhirCodesystemHierarchyMeaningEnum, SYSTEMS_TFhirCodesystemHierarchyMeaningEnum, path+'/hierarchyMeaning', child){1a}
      else if (child.localName = 'compositional') then
        element.compositionalElement := ParseBoolean(child, path+'/compositional') {b}
      else if (child.localName = 'versionNeeded') then
        element.versionNeededElement := ParseBoolean(child, path+'/versionNeeded') {b}
      else if (child.localName = 'content') then
        element.contentElement := ParseEnum(CODES_TFhirCodesystemContentModeEnum, SYSTEMS_TFhirCodesystemContentModeEnum, path+'/content', child){1a}
      else if (child.localName = 'supplements') then
        element.supplementsElement := ParseCanonical(child, path+'/supplements') {b}
      else if (child.localName = 'count') then
        element.countElement := ParseUnsignedInt(child, path+'/count') {b}
      else if (child.localName = 'filter') then
        element.filterList.Add(ParseCodeSystemFilter(child, path+'/filter')){y.2}
      else if (child.localName = 'property') then
        element.property_List.Add(ParseCodeSystemProperty(child, path+'/property')){y.2}
      else if (child.localName = 'concept') then
        element.conceptList.Add(ParseCodeSystemConcept(child, path+'/concept')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeSystem(xml : TXmlBuilder; name : String; elem : TFhirCodeSystem);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeCodeSystemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCodeSystemChildren(xml : TXmlBuilder; elem : TFhirCodeSystem);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('caseSensitive') then
    ComposeBoolean(xml, 'caseSensitive', elem.caseSensitiveElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('valueSet') then
    ComposeCanonical(xml, 'valueSet', elem.valueSetElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('hierarchyMeaning') then
    ComposeEnum(xml, 'hierarchyMeaning', elem.HierarchyMeaningElement, CODES_TFhirCodesystemHierarchyMeaningEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('compositional') then
    ComposeBoolean(xml, 'compositional', elem.compositionalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('versionNeeded') then
    ComposeBoolean(xml, 'versionNeeded', elem.versionNeededElement);{x.2b}
  ComposeEnum(xml, 'content', elem.ContentElement, CODES_TFhirCodesystemContentModeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('supplements') then
    ComposeCanonical(xml, 'supplements', elem.supplementsElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('count') then
    ComposeUnsignedInt(xml, 'count', elem.countElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('filter') then
    for i := 0 to elem.filterList.Count - 1 do
      ComposeCodeSystemFilter(xml, 'filter', elem.filterList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('property_') then
    for i := 0 to elem.property_List.Count - 1 do
      ComposeCodeSystemProperty(xml, 'property', elem.property_List[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('concept') then
    for i := 0 to elem.conceptList.Count - 1 do
      ComposeCodeSystemConcept(xml, 'concept', elem.conceptList[i]);
end;

{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
function TFHIRXmlParser.ParseCommunicationPayload(element : TMXmlElement; path : string) : TFhirCommunicationPayload;
var
  child : TMXmlElement;
begin
  result := TFhirCommunicationPayload.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCommunicationPayloadChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCommunicationPayloadChild(element : TFhirCommunicationPayload; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'contentAttachment') then
        element.content := ParseAttachment(child, path+'/contentAttachment'){x.3}
      else if (child.localName = 'contentReference') then
        element.content := ParseReference(child, path+'/contentReference') {a}
      else if (child.localName = 'contentString') then
        element.content := ParseString(child, path+'/contentString'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCommunicationPayload(xml : TXmlBuilder; name : String; elem : TFhirCommunicationPayload);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCommunicationPayloadChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCommunicationPayloadChildren(xml : TXmlBuilder; elem : TFhirCommunicationPayload);
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.content is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'contentAttachment', TFhirAttachment(elem.content))
  else if (elem.content is TFhirReference) {2} then
    ComposeReference(xml, 'contentReference', TFhirReference(elem.content))
  else if (elem.content is TFhirString) {6} then
    ComposeString(xml, 'contentString', TFhirString(elem.content));
end;

function TFHIRXmlParser.ParseCommunication(element : TMXmlElement; path : string) : TFhirCommunication;
var
  child : TMXmlElement;
begin
  result := TFhirCommunication.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCommunicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCommunicationChild(element : TFhirCommunication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'instantiatesCanonical') then
        element.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')){y.2}
      else if (child.localName = 'instantiatesUri') then
        element.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirReference}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'partOf') then
        element.partOfList.Add(ParseReference{TFhirReference}(child, path+'/partOf')){y.2}
      else if (child.localName = 'inResponseTo') then
        element.inResponseToList.Add(ParseReference{TFhirCommunication}(child, path+'/inResponseTo')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirEventStatusEnum, SYSTEMS_TFhirEventStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'statusReason') then
        element.statusReason := ParseCodeableConcept(child, path+'/statusReason') {b}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'priority') then
        element.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, path+'/priority', child){1a}
      else if (child.localName = 'medium') then
        element.mediumList.Add(ParseCodeableConcept(child, path+'/medium')){y.2}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'topic') then
        element.topic := ParseCodeableConcept(child, path+'/topic') {b}
      else if (child.localName = 'about') then
        element.aboutList.Add(ParseReference{TFhirReference}(child, path+'/about')){y.2}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'sent') then
        element.sentElement := ParseDateTime(child, path+'/sent') {b}
      else if (child.localName = 'received') then
        element.receivedElement := ParseDateTime(child, path+'/received') {b}
      else if (child.localName = 'recipient') then
        element.recipientList.Add(ParseReference{TFhirDevice}(child, path+'/recipient')){y.2}
      else if (child.localName = 'sender') then
        element.sender := ParseReference{TFhirDevice}(child, path+'/sender') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'payload') then
        element.payloadList.Add(ParseCommunicationPayload(child, path+'/payload')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCommunication(xml : TXmlBuilder; name : String; elem : TFhirCommunication);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeCommunicationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCommunicationChildren(xml : TXmlBuilder; elem : TFhirCommunication);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesCanonical') then
    for i := 0 to elem.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', elem.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesUri') then
    for i := 0 to elem.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', elem.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') then
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'partOf', elem.partOfList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('inResponseTo') then
    for i := 0 to elem.inResponseToList.Count - 1 do
      ComposeReference{TFhirCommunication}(xml, 'inResponseTo', elem.inResponseToList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirEventStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('statusReason') then
    ComposeCodeableConcept(xml, 'statusReason', elem.statusReason);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnum(xml, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('medium') then
    for i := 0 to elem.mediumList.Count - 1 do
      ComposeCodeableConcept(xml, 'medium', elem.mediumList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('topic') then
    ComposeCodeableConcept(xml, 'topic', elem.topic);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('about') then
    for i := 0 to elem.aboutList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'about', elem.aboutList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('sent') then
    ComposeDateTime(xml, 'sent', elem.sentElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('received') then
    ComposeDateTime(xml, 'received', elem.receivedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('recipient') then
    for i := 0 to elem.recipientList.Count - 1 do
      ComposeReference{TFhirDevice}(xml, 'recipient', elem.recipientList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('sender') then
    ComposeReference{TFhirDevice}(xml, 'sender', elem.sender);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('payload') then
    for i := 0 to elem.payloadList.Count - 1 do
      ComposeCommunicationPayload(xml, 'payload', elem.payloadList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
function TFHIRXmlParser.ParseCommunicationRequestPayload(element : TMXmlElement; path : string) : TFhirCommunicationRequestPayload;
var
  child : TMXmlElement;
begin
  result := TFhirCommunicationRequestPayload.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCommunicationRequestPayloadChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCommunicationRequestPayloadChild(element : TFhirCommunicationRequestPayload; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'contentAttachment') then
        element.content := ParseAttachment(child, path+'/contentAttachment'){x.3}
      else if (child.localName = 'contentReference') then
        element.content := ParseReference(child, path+'/contentReference') {a}
      else if (child.localName = 'contentString') then
        element.content := ParseString(child, path+'/contentString'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCommunicationRequestPayload(xml : TXmlBuilder; name : String; elem : TFhirCommunicationRequestPayload);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCommunicationRequestPayloadChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCommunicationRequestPayloadChildren(xml : TXmlBuilder; elem : TFhirCommunicationRequestPayload);
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.content is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'contentAttachment', TFhirAttachment(elem.content))
  else if (elem.content is TFhirReference) {2} then
    ComposeReference(xml, 'contentReference', TFhirReference(elem.content))
  else if (elem.content is TFhirString) {6} then
    ComposeString(xml, 'contentString', TFhirString(elem.content));
end;

function TFHIRXmlParser.ParseCommunicationRequest(element : TMXmlElement; path : string) : TFhirCommunicationRequest;
var
  child : TMXmlElement;
begin
  result := TFhirCommunicationRequest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCommunicationRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCommunicationRequestChild(element : TFhirCommunicationRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirReference}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'replaces') then
        element.replacesList.Add(ParseReference{TFhirCommunicationRequest}(child, path+'/replaces')){y.2}
      else if (child.localName = 'groupIdentifier') then
        element.groupIdentifier := ParseIdentifier(child, path+'/groupIdentifier') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'statusReason') then
        element.statusReason := ParseCodeableConcept(child, path+'/statusReason') {b}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'priority') then
        element.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, path+'/priority', child){1a}
      else if (child.localName = 'doNotPerform') then
        element.doNotPerformElement := ParseBoolean(child, path+'/doNotPerform') {b}
      else if (child.localName = 'medium') then
        element.mediumList.Add(ParseCodeableConcept(child, path+'/medium')){y.2}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'about') then
        element.aboutList.Add(ParseReference{TFhirReference}(child, path+'/about')){y.2}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'payload') then
        element.payloadList.Add(ParseCommunicationRequestPayload(child, path+'/payload')){y.2}
      else if (child.localName = 'occurrencePeriod') then
        element.occurrence := ParsePeriod(child, path+'/occurrencePeriod'){x.3}
      else if (child.localName = 'occurrenceDateTime') then
        element.occurrence := ParseDateTime(child, path+'/occurrenceDateTime'){x.3}
      else if (child.localName = 'authoredOn') then
        element.authoredOnElement := ParseDateTime(child, path+'/authoredOn') {b}
      else if (child.localName = 'requester') then
        element.requester := ParseReference{TFhirPractitioner}(child, path+'/requester') {b}
      else if (child.localName = 'recipient') then
        element.recipientList.Add(ParseReference{TFhirDevice}(child, path+'/recipient')){y.2}
      else if (child.localName = 'sender') then
        element.sender := ParseReference{TFhirDevice}(child, path+'/sender') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCommunicationRequest(xml : TXmlBuilder; name : String; elem : TFhirCommunicationRequest);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeCommunicationRequestChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCommunicationRequestChildren(xml : TXmlBuilder; elem : TFhirCommunicationRequest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('replaces') then
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirCommunicationRequest}(xml, 'replaces', elem.replacesList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('groupIdentifier') then
    ComposeIdentifier(xml, 'groupIdentifier', elem.groupIdentifier);{x.2a}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('statusReason') then
    ComposeCodeableConcept(xml, 'statusReason', elem.statusReason);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnum(xml, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('doNotPerform') then
    ComposeBoolean(xml, 'doNotPerform', elem.doNotPerformElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('medium') then
    for i := 0 to elem.mediumList.Count - 1 do
      ComposeCodeableConcept(xml, 'medium', elem.mediumList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('about') then
    for i := 0 to elem.aboutList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'about', elem.aboutList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('payload') then
    for i := 0 to elem.payloadList.Count - 1 do
      ComposeCommunicationRequestPayload(xml, 'payload', elem.payloadList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(elem.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(elem.occurrence));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTime(xml, 'authoredOn', elem.authoredOnElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requester') then
    ComposeReference{TFhirPractitioner}(xml, 'requester', elem.requester);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('recipient') then
    for i := 0 to elem.recipientList.Count - 1 do
      ComposeReference{TFhirDevice}(xml, 'recipient', elem.recipientList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('sender') then
    ComposeReference{TFhirDevice}(xml, 'sender', elem.sender);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
function TFHIRXmlParser.ParseCompartmentDefinitionResource(element : TMXmlElement; path : string) : TFhirCompartmentDefinitionResource;
var
  child : TMXmlElement;
begin
  result := TFhirCompartmentDefinitionResource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCompartmentDefinitionResourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCompartmentDefinitionResourceChild(element : TFhirCompartmentDefinitionResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, path+'/code', child){1a}
      else if (child.localName = 'param') then
        element.paramList.Add(ParseString(child, path+'/param')){y.2}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseString(child, path+'/documentation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCompartmentDefinitionResource(xml : TXmlBuilder; name : String; elem : TFhirCompartmentDefinitionResource);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCompartmentDefinitionResourceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCompartmentDefinitionResourceChildren(xml : TXmlBuilder; elem : TFhirCompartmentDefinitionResource);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'code', elem.CodeElement, CODES_TFhirResourceTypesEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.paramList.Count - 1 do
      ComposeString(xml, 'param', elem.paramList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'documentation', elem.documentationElement);{x.2b}
end;

function TFHIRXmlParser.ParseCompartmentDefinition(element : TMXmlElement; path : string) : TFhirCompartmentDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirCompartmentDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCompartmentDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCompartmentDefinitionChild(element : TFhirCompartmentDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'code') then
        element.codeElement := ParseEnum(CODES_TFhirCompartmentTypeEnum, SYSTEMS_TFhirCompartmentTypeEnum, path+'/code', child){1a}
      else if (child.localName = 'search') then
        element.searchElement := ParseBoolean(child, path+'/search') {b}
      else if (child.localName = 'resource') then
        element.resourceList.Add(ParseCompartmentDefinitionResource(child, path+'/resource')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCompartmentDefinition(xml : TXmlBuilder; name : String; elem : TFhirCompartmentDefinition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeCompartmentDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCompartmentDefinitionChildren(xml : TXmlBuilder; elem : TFhirCompartmentDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  ComposeEnum(xml, 'code', elem.CodeElement, CODES_TFhirCompartmentTypeEnum);
  ComposeBoolean(xml, 'search', elem.searchElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('resource') then
    for i := 0 to elem.resourceList.Count - 1 do
      ComposeCompartmentDefinitionResource(xml, 'resource', elem.resourceList[i]);
end;

{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
function TFHIRXmlParser.ParseCompositionAttester(element : TMXmlElement; path : string) : TFhirCompositionAttester;
var
  child : TMXmlElement;
begin
  result := TFhirCompositionAttester.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCompositionAttesterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCompositionAttesterChild(element : TFhirCompositionAttester; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'mode') then
        element.modeElement := ParseEnum(CODES_TFhirCompositionAttestationModeEnum, SYSTEMS_TFhirCompositionAttestationModeEnum, path+'/mode', child){1a}
      else if (child.localName = 'time') then
        element.timeElement := ParseDateTime(child, path+'/time') {b}
      else if (child.localName = 'party') then
        element.party := ParseReference{TFhirPatient}(child, path+'/party') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCompositionAttester(xml : TXmlBuilder; name : String; elem : TFhirCompositionAttester);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCompositionAttesterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCompositionAttesterChildren(xml : TXmlBuilder; elem : TFhirCompositionAttester);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'mode', elem.ModeElement, CODES_TFhirCompositionAttestationModeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'time', elem.timeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPatient}(xml, 'party', elem.party);{x.2a}
end;

function TFHIRXmlParser.ParseCompositionRelatesTo(element : TMXmlElement; path : string) : TFhirCompositionRelatesTo;
var
  child : TMXmlElement;
begin
  result := TFhirCompositionRelatesTo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCompositionRelatesToChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCompositionRelatesToChild(element : TFhirCompositionRelatesTo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseEnum(CODES_TFhirDocumentRelationshipTypeEnum, SYSTEMS_TFhirDocumentRelationshipTypeEnum, path+'/code', child){1a}
      else if (child.localName = 'targetIdentifier') then
        element.target := ParseIdentifier(child, path+'/targetIdentifier'){x.3}
      else if (child.localName = 'targetReference') then
        element.target := ParseReference(child, path+'/targetReference') {a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCompositionRelatesTo(xml : TXmlBuilder; name : String; elem : TFhirCompositionRelatesTo);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCompositionRelatesToChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCompositionRelatesToChildren(xml : TXmlBuilder; elem : TFhirCompositionRelatesTo);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'code', elem.CodeElement, CODES_TFhirDocumentRelationshipTypeEnum);
  if (elem.target is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'targetIdentifier', TFhirIdentifier(elem.target))
  else if (elem.target is TFhirReference) {2} then
    ComposeReference(xml, 'targetReference', TFhirReference(elem.target));
end;

function TFHIRXmlParser.ParseCompositionEvent(element : TMXmlElement; path : string) : TFhirCompositionEvent;
var
  child : TMXmlElement;
begin
  result := TFhirCompositionEvent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCompositionEventChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCompositionEventChild(element : TFhirCompositionEvent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeList.Add(ParseCodeableConcept(child, path+'/code')){y.2}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'detail') then
        element.detailList.Add(ParseReference{TFhirReference}(child, path+'/detail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCompositionEvent(xml : TXmlBuilder; name : String; elem : TFhirCompositionEvent);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCompositionEventChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCompositionEventChildren(xml : TXmlBuilder; elem : TFhirCompositionEvent);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', elem.codeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.detailList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'detail', elem.detailList[i]);
end;

function TFHIRXmlParser.ParseCompositionSection(element : TMXmlElement; path : string) : TFhirCompositionSection;
var
  child : TMXmlElement;
begin
  result := TFhirCompositionSection.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCompositionSectionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCompositionSectionChild(element : TFhirCompositionSection; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseReference{TFhirPractitioner}(child, path+'/author')){y.2}
      else if (child.localName = 'focus') then
        element.focus := ParseReference{TFhirReference}(child, path+'/focus') {b}
      else if (child.localName = 'text') then
        element.text := ParseNarrative(child, path+'/text') {b}
      else if (child.localName = 'mode') then
        element.modeElement := ParseEnum(CODES_TFhirListModeEnum, SYSTEMS_TFhirListModeEnum, path+'/mode', child){1a}
      else if (child.localName = 'orderedBy') then
        element.orderedBy := ParseCodeableConcept(child, path+'/orderedBy') {b}
      else if (child.localName = 'entry') then
        element.entryList.Add(ParseReference{TFhirReference}(child, path+'/entry')){y.2}
      else if (child.localName = 'emptyReason') then
        element.emptyReason := ParseCodeableConcept(child, path+'/emptyReason') {b}
      else if (child.localName = 'section') then
        element.sectionList.Add(ParseCompositionSection(child, path+'/section')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCompositionSection(xml : TXmlBuilder; name : String; elem : TFhirCompositionSection);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCompositionSectionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCompositionSectionChildren(xml : TXmlBuilder; elem : TFhirCompositionSection);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(xml, 'focus', elem.focus);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeNarrative(xml, 'text', elem.text);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'mode', elem.ModeElement, CODES_TFhirListModeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'orderedBy', elem.orderedBy);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.entryList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'entry', elem.entryList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'emptyReason', elem.emptyReason);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.sectionList.Count - 1 do
      ComposeCompositionSection(xml, 'section', elem.sectionList[i]);
end;

function TFHIRXmlParser.ParseComposition(element : TMXmlElement; path : string) : TFhirComposition;
var
  child : TMXmlElement;
begin
  result := TFhirComposition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCompositionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCompositionChild(element : TFhirComposition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirCompositionStatusEnum, SYSTEMS_TFhirCompositionStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirReference}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseReference{TFhirPractitioner}(child, path+'/author')){y.2}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'confidentiality') then
        element.confidentialityElement := ParseEnum(CODES_TFhirV3ConfidentialityClassificationEnum, SYSTEMS_TFhirV3ConfidentialityClassificationEnum, path+'/confidentiality', child){1a}
      else if (child.localName = 'attester') then
        element.attesterList.Add(ParseCompositionAttester(child, path+'/attester')){y.2}
      else if (child.localName = 'custodian') then
        element.custodian := ParseReference{TFhirOrganization}(child, path+'/custodian') {b}
      else if (child.localName = 'relatesTo') then
        element.relatesToList.Add(ParseCompositionRelatesTo(child, path+'/relatesTo')){y.2}
      else if (child.localName = 'event') then
        element.eventList.Add(ParseCompositionEvent(child, path+'/event')){y.2}
      else if (child.localName = 'section') then
        element.sectionList.Add(ParseCompositionSection(child, path+'/section')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeComposition(xml : TXmlBuilder; name : String; elem : TFhirComposition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeCompositionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCompositionChildren(xml : TXmlBuilder; elem : TFhirComposition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirCompositionStatusEnum);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirReference}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  for i := 0 to elem.authorList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'author', elem.authorList[i]);
  ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('confidentiality') then
    ComposeEnum(xml, 'confidentiality', elem.ConfidentialityElement, CODES_TFhirV3ConfidentialityClassificationEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('attester') then
    for i := 0 to elem.attesterList.Count - 1 do
      ComposeCompositionAttester(xml, 'attester', elem.attesterList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('custodian') then
    ComposeReference{TFhirOrganization}(xml, 'custodian', elem.custodian);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('relatesTo') then
    for i := 0 to elem.relatesToList.Count - 1 do
      ComposeCompositionRelatesTo(xml, 'relatesTo', elem.relatesToList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('event') then
    for i := 0 to elem.eventList.Count - 1 do
      ComposeCompositionEvent(xml, 'event', elem.eventList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('section') then
    for i := 0 to elem.sectionList.Count - 1 do
      ComposeCompositionSection(xml, 'section', elem.sectionList[i]);
end;

{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
function TFHIRXmlParser.ParseConceptMapGroup(element : TMXmlElement; path : string) : TFhirConceptMapGroup;
var
  child : TMXmlElement;
begin
  result := TFhirConceptMapGroup.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConceptMapGroupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConceptMapGroupChild(element : TFhirConceptMapGroup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'source') then
        element.sourceElement := ParseUri(child, path+'/source') {b}
      else if (child.localName = 'sourceVersion') then
        element.sourceVersionElement := ParseString(child, path+'/sourceVersion') {b}
      else if (child.localName = 'target') then
        element.targetElement := ParseUri(child, path+'/target') {b}
      else if (child.localName = 'targetVersion') then
        element.targetVersionElement := ParseString(child, path+'/targetVersion') {b}
      else if (child.localName = 'element') then
        element.elementList.Add(ParseConceptMapGroupElement(child, path+'/element')){y.2}
      else if (child.localName = 'unmapped') then
        element.unmapped := ParseConceptMapGroupUnmapped(child, path+'/unmapped') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroup(xml : TXmlBuilder; name : String; elem : TFhirConceptMapGroup);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeConceptMapGroupChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupChildren(xml : TXmlBuilder; elem : TFhirConceptMapGroup);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'source', elem.sourceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'sourceVersion', elem.sourceVersionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'target', elem.targetElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'targetVersion', elem.targetVersionElement);{x.2b}
  for i := 0 to elem.elementList.Count - 1 do
      ComposeConceptMapGroupElement(xml, 'element', elem.elementList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeConceptMapGroupUnmapped(xml, 'unmapped', elem.unmapped);{x.2a}
end;

function TFHIRXmlParser.ParseConceptMapGroupElement(element : TMXmlElement; path : string) : TFhirConceptMapGroupElement;
var
  child : TMXmlElement;
begin
  result := TFhirConceptMapGroupElement.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConceptMapGroupElementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConceptMapGroupElementChild(element : TFhirConceptMapGroupElement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if (child.localName = 'display') then
        element.displayElement := ParseString(child, path+'/display') {b}
      else if (child.localName = 'target') then
        element.targetList.Add(ParseConceptMapGroupElementTarget(child, path+'/target')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupElement(xml : TXmlBuilder; name : String; elem : TFhirConceptMapGroupElement);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeConceptMapGroupElementChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupElementChildren(xml : TXmlBuilder; elem : TFhirConceptMapGroupElement);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'code', elem.codeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', elem.displayElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.targetList.Count - 1 do
      ComposeConceptMapGroupElementTarget(xml, 'target', elem.targetList[i]);
end;

function TFHIRXmlParser.ParseConceptMapGroupElementTarget(element : TMXmlElement; path : string) : TFhirConceptMapGroupElementTarget;
var
  child : TMXmlElement;
begin
  result := TFhirConceptMapGroupElementTarget.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConceptMapGroupElementTargetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConceptMapGroupElementTargetChild(element : TFhirConceptMapGroupElementTarget; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if (child.localName = 'display') then
        element.displayElement := ParseString(child, path+'/display') {b}
      else if (child.localName = 'equivalence') then
        element.equivalenceElement := ParseEnum(CODES_TFhirConceptMapEquivalenceEnum, SYSTEMS_TFhirConceptMapEquivalenceEnum, path+'/equivalence', child){1a}
      else if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if (child.localName = 'dependsOn') then
        element.dependsOnList.Add(ParseConceptMapGroupElementTargetDependsOn(child, path+'/dependsOn')){y.2}
      else if (child.localName = 'product') then
        element.productList.Add(ParseConceptMapGroupElementTargetDependsOn(child, path+'/product')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupElementTarget(xml : TXmlBuilder; name : String; elem : TFhirConceptMapGroupElementTarget);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeConceptMapGroupElementTargetChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupElementTargetChildren(xml : TXmlBuilder; elem : TFhirConceptMapGroupElementTarget);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'code', elem.codeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', elem.displayElement);{x.2b}
  ComposeEnum(xml, 'equivalence', elem.EquivalenceElement, CODES_TFhirConceptMapEquivalenceEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.dependsOnList.Count - 1 do
      ComposeConceptMapGroupElementTargetDependsOn(xml, 'dependsOn', elem.dependsOnList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.productList.Count - 1 do
      ComposeConceptMapGroupElementTargetDependsOn(xml, 'product', elem.productList[i]);
end;

function TFHIRXmlParser.ParseConceptMapGroupElementTargetDependsOn(element : TMXmlElement; path : string) : TFhirConceptMapGroupElementTargetDependsOn;
var
  child : TMXmlElement;
begin
  result := TFhirConceptMapGroupElementTargetDependsOn.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConceptMapGroupElementTargetDependsOnChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConceptMapGroupElementTargetDependsOnChild(element : TFhirConceptMapGroupElementTargetDependsOn; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'property') then
        element.property_Element := ParseUri(child, path+'/property') {b}
      else if (child.localName = 'system') then
        element.systemElement := ParseCanonical(child, path+'/system') {b}
      else if (child.localName = 'value') then
        element.valueElement := ParseString(child, path+'/value') {b}
      else if (child.localName = 'display') then
        element.displayElement := ParseString(child, path+'/display') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupElementTargetDependsOn(xml : TXmlBuilder; name : String; elem : TFhirConceptMapGroupElementTargetDependsOn);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeConceptMapGroupElementTargetDependsOnChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupElementTargetDependsOnChildren(xml : TXmlBuilder; elem : TFhirConceptMapGroupElementTargetDependsOn);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeUri(xml, 'property', elem.property_Element);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'system', elem.systemElement);{x.2b}
  ComposeString(xml, 'value', elem.valueElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', elem.displayElement);{x.2b}
end;

function TFHIRXmlParser.ParseConceptMapGroupUnmapped(element : TMXmlElement; path : string) : TFhirConceptMapGroupUnmapped;
var
  child : TMXmlElement;
begin
  result := TFhirConceptMapGroupUnmapped.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConceptMapGroupUnmappedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConceptMapGroupUnmappedChild(element : TFhirConceptMapGroupUnmapped; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'mode') then
        element.modeElement := ParseEnum(CODES_TFhirConceptmapUnmappedModeEnum, SYSTEMS_TFhirConceptmapUnmappedModeEnum, path+'/mode', child){1a}
      else if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if (child.localName = 'display') then
        element.displayElement := ParseString(child, path+'/display') {b}
      else if (child.localName = 'url') then
        element.urlElement := ParseCanonical(child, path+'/url') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupUnmapped(xml : TXmlBuilder; name : String; elem : TFhirConceptMapGroupUnmapped);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeConceptMapGroupUnmappedChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupUnmappedChildren(xml : TXmlBuilder; elem : TFhirConceptMapGroupUnmapped);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'mode', elem.ModeElement, CODES_TFhirConceptmapUnmappedModeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'code', elem.codeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', elem.displayElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'url', elem.urlElement);{x.2b}
end;

function TFHIRXmlParser.ParseConceptMap(element : TMXmlElement; path : string) : TFhirConceptMap;
var
  child : TMXmlElement;
begin
  result := TFhirConceptMap.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConceptMapChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConceptMapChild(element : TFhirConceptMap; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'sourceCanonical') then
        element.source := ParseCanonical(child, path+'/sourceCanonical'){x.3}
      else if (child.localName = 'sourceUri') then
        element.source := ParseUri(child, path+'/sourceUri'){x.3}
      else if (child.localName = 'targetCanonical') then
        element.target := ParseCanonical(child, path+'/targetCanonical'){x.3}
      else if (child.localName = 'targetUri') then
        element.target := ParseUri(child, path+'/targetUri'){x.3}
      else if (child.localName = 'group') then
        element.groupList.Add(ParseConceptMapGroup(child, path+'/group')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConceptMap(xml : TXmlBuilder; name : String; elem : TFhirConceptMap);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeConceptMapChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConceptMapChildren(xml : TXmlBuilder; elem : TFhirConceptMap);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'sourceCanonical', TFhirCanonical(elem.source))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirUri) {6} then
    ComposeUri(xml, 'sourceUri', TFhirUri(elem.source));
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.target is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'targetCanonical', TFhirCanonical(elem.target))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.target is TFhirUri) {6} then
    ComposeUri(xml, 'targetUri', TFhirUri(elem.target));
  if (SummaryOption in [soFull, soData]) and doCompose('group') then
    for i := 0 to elem.groupList.Count - 1 do
      ComposeConceptMapGroup(xml, 'group', elem.groupList[i]);
end;

{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
function TFHIRXmlParser.ParseConditionStage(element : TMXmlElement; path : string) : TFhirConditionStage;
var
  child : TMXmlElement;
begin
  result := TFhirConditionStage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConditionStageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConditionStageChild(element : TFhirConditionStage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'summary') then
        element.summary := ParseCodeableConcept(child, path+'/summary') {b}
      else if (child.localName = 'assessment') then
        element.assessmentList.Add(ParseReference{TFhirClinicalImpression}(child, path+'/assessment')){y.2}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConditionStage(xml : TXmlBuilder; name : String; elem : TFhirConditionStage);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeConditionStageChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConditionStageChildren(xml : TXmlBuilder; elem : TFhirConditionStage);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'summary', elem.summary);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.assessmentList.Count - 1 do
      ComposeReference{TFhirClinicalImpression}(xml, 'assessment', elem.assessmentList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
end;

function TFHIRXmlParser.ParseConditionEvidence(element : TMXmlElement; path : string) : TFhirConditionEvidence;
var
  child : TMXmlElement;
begin
  result := TFhirConditionEvidence.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConditionEvidenceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConditionEvidenceChild(element : TFhirConditionEvidence; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeList.Add(ParseCodeableConcept(child, path+'/code')){y.2}
      else if (child.localName = 'detail') then
        element.detailList.Add(ParseReference{TFhirReference}(child, path+'/detail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConditionEvidence(xml : TXmlBuilder; name : String; elem : TFhirConditionEvidence);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeConditionEvidenceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConditionEvidenceChildren(xml : TXmlBuilder; elem : TFhirConditionEvidence);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', elem.codeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.detailList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'detail', elem.detailList[i]);
end;

function TFHIRXmlParser.ParseCondition(element : TMXmlElement; path : string) : TFhirCondition;
var
  child : TMXmlElement;
begin
  result := TFhirCondition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConditionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConditionChild(element : TFhirCondition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'clinicalStatus') then
        element.clinicalStatus := ParseCodeableConcept(child, path+'/clinicalStatus') {b}
      else if (child.localName = 'verificationStatus') then
        element.verificationStatus := ParseCodeableConcept(child, path+'/verificationStatus') {b}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'severity') then
        element.severity := ParseCodeableConcept(child, path+'/severity') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'bodySite') then
        element.bodySiteList.Add(ParseCodeableConcept(child, path+'/bodySite')){y.2}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'onsetAge') then
        element.onset := ParseAge(child, path+'/onsetAge'){x.3}
      else if (child.localName = 'onsetPeriod') then
        element.onset := ParsePeriod(child, path+'/onsetPeriod'){x.3}
      else if (child.localName = 'onsetRange') then
        element.onset := ParseRange(child, path+'/onsetRange'){x.3}
      else if (child.localName = 'onsetDateTime') then
        element.onset := ParseDateTime(child, path+'/onsetDateTime'){x.3}
      else if (child.localName = 'onsetString') then
        element.onset := ParseString(child, path+'/onsetString'){x.3}
      else if (child.localName = 'abatementAge') then
        element.abatement := ParseAge(child, path+'/abatementAge'){x.3}
      else if (child.localName = 'abatementPeriod') then
        element.abatement := ParsePeriod(child, path+'/abatementPeriod'){x.3}
      else if (child.localName = 'abatementRange') then
        element.abatement := ParseRange(child, path+'/abatementRange'){x.3}
      else if (child.localName = 'abatementDateTime') then
        element.abatement := ParseDateTime(child, path+'/abatementDateTime'){x.3}
      else if (child.localName = 'abatementString') then
        element.abatement := ParseString(child, path+'/abatementString'){x.3}
      else if (child.localName = 'recordedDate') then
        element.recordedDateElement := ParseDateTime(child, path+'/recordedDate') {b}
      else if (child.localName = 'recorder') then
        element.recorder := ParseReference{TFhirPractitioner}(child, path+'/recorder') {b}
      else if (child.localName = 'asserter') then
        element.asserter := ParseReference{TFhirPractitioner}(child, path+'/asserter') {b}
      else if (child.localName = 'stage') then
        element.stageList.Add(ParseConditionStage(child, path+'/stage')){y.2}
      else if (child.localName = 'evidence') then
        element.evidenceList.Add(ParseConditionEvidence(child, path+'/evidence')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCondition(xml : TXmlBuilder; name : String; elem : TFhirCondition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeConditionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConditionChildren(xml : TXmlBuilder; elem : TFhirCondition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('clinicalStatus') then
    ComposeCodeableConcept(xml, 'clinicalStatus', elem.clinicalStatus);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('verificationStatus') then
    ComposeCodeableConcept(xml, 'verificationStatus', elem.verificationStatus);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('severity') then
    ComposeCodeableConcept(xml, 'severity', elem.severity);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('bodySite') then
    for i := 0 to elem.bodySiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'bodySite', elem.bodySiteList[i]);
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirAge) {6} then
    ComposeAge(xml, 'onsetAge', TFhirAge(elem.onset))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirPeriod) {6} then
    ComposePeriod(xml, 'onsetPeriod', TFhirPeriod(elem.onset))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirRange) {6} then
    ComposeRange(xml, 'onsetRange', TFhirRange(elem.onset))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'onsetDateTime', TFhirDateTime(elem.onset))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.onset is TFhirString) {6} then
    ComposeString(xml, 'onsetString', TFhirString(elem.onset));
  if (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirAge) {6} then
    ComposeAge(xml, 'abatementAge', TFhirAge(elem.abatement))
  else if (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirPeriod) {6} then
    ComposePeriod(xml, 'abatementPeriod', TFhirPeriod(elem.abatement))
  else if (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirRange) {6} then
    ComposeRange(xml, 'abatementRange', TFhirRange(elem.abatement))
  else if (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'abatementDateTime', TFhirDateTime(elem.abatement))
  else if (SummaryOption in [soFull, soData]) and (elem.abatement is TFhirString) {6} then
    ComposeString(xml, 'abatementString', TFhirString(elem.abatement));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('recordedDate') then
    ComposeDateTime(xml, 'recordedDate', elem.recordedDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('recorder') then
    ComposeReference{TFhirPractitioner}(xml, 'recorder', elem.recorder);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('asserter') then
    ComposeReference{TFhirPractitioner}(xml, 'asserter', elem.asserter);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('stage') then
    for i := 0 to elem.stageList.Count - 1 do
      ComposeConditionStage(xml, 'stage', elem.stageList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('evidence') then
    for i := 0 to elem.evidenceList.Count - 1 do
      ComposeConditionEvidence(xml, 'evidence', elem.evidenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
function TFHIRXmlParser.ParseConsentPolicy(element : TMXmlElement; path : string) : TFhirConsentPolicy;
var
  child : TMXmlElement;
begin
  result := TFhirConsentPolicy.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConsentPolicyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConsentPolicyChild(element : TFhirConsentPolicy; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'authority') then
        element.authorityElement := ParseUri(child, path+'/authority') {b}
      else if (child.localName = 'uri') then
        element.uriElement := ParseUri(child, path+'/uri') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConsentPolicy(xml : TXmlBuilder; name : String; elem : TFhirConsentPolicy);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeConsentPolicyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConsentPolicyChildren(xml : TXmlBuilder; elem : TFhirConsentPolicy);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'authority', elem.authorityElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'uri', elem.uriElement);{x.2b}
end;

function TFHIRXmlParser.ParseConsentVerification(element : TMXmlElement; path : string) : TFhirConsentVerification;
var
  child : TMXmlElement;
begin
  result := TFhirConsentVerification.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConsentVerificationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConsentVerificationChild(element : TFhirConsentVerification; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'verified') then
        element.verifiedElement := ParseBoolean(child, path+'/verified') {b}
      else if (child.localName = 'verifiedWith') then
        element.verifiedWith := ParseReference{TFhirPatient}(child, path+'/verifiedWith') {b}
      else if (child.localName = 'verificationDate') then
        element.verificationDateElement := ParseDateTime(child, path+'/verificationDate') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConsentVerification(xml : TXmlBuilder; name : String; elem : TFhirConsentVerification);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeConsentVerificationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConsentVerificationChildren(xml : TXmlBuilder; elem : TFhirConsentVerification);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeBoolean(xml, 'verified', elem.verifiedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPatient}(xml, 'verifiedWith', elem.verifiedWith);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'verificationDate', elem.verificationDateElement);{x.2b}
end;

function TFHIRXmlParser.ParseConsentProvision(element : TMXmlElement; path : string) : TFhirConsentProvision;
var
  child : TMXmlElement;
begin
  result := TFhirConsentProvision.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConsentProvisionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConsentProvisionChild(element : TFhirConsentProvision; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirConsentProvisionTypeEnum, SYSTEMS_TFhirConsentProvisionTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'actor') then
        element.actorList.Add(ParseConsentProvisionActor(child, path+'/actor')){y.2}
      else if (child.localName = 'action') then
        element.actionList.Add(ParseCodeableConcept(child, path+'/action')){y.2}
      else if (child.localName = 'securityLabel') then
        element.securityLabelList.Add(ParseCoding(child, path+'/securityLabel')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeList.Add(ParseCoding(child, path+'/purpose')){y.2}
      else if (child.localName = 'class') then
        element.class_List.Add(ParseCoding(child, path+'/class')){y.2}
      else if (child.localName = 'code') then
        element.codeList.Add(ParseCodeableConcept(child, path+'/code')){y.2}
      else if (child.localName = 'dataPeriod') then
        element.dataPeriod := ParsePeriod(child, path+'/dataPeriod') {b}
      else if (child.localName = 'data') then
        element.dataList.Add(ParseConsentProvisionData(child, path+'/data')){y.2}
      else if (child.localName = 'provision') then
        element.provisionList.Add(ParseConsentProvision(child, path+'/provision')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConsentProvision(xml : TXmlBuilder; name : String; elem : TFhirConsentProvision);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeConsentProvisionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConsentProvisionChildren(xml : TXmlBuilder; elem : TFhirConsentProvision);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirConsentProvisionTypeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.actorList.Count - 1 do
      ComposeConsentProvisionActor(xml, 'actor', elem.actorList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.actionList.Count - 1 do
      ComposeCodeableConcept(xml, 'action', elem.actionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.securityLabelList.Count - 1 do
      ComposeCoding(xml, 'securityLabel', elem.securityLabelList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.purposeList.Count - 1 do
      ComposeCoding(xml, 'purpose', elem.purposeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.class_List.Count - 1 do
      ComposeCoding(xml, 'class', elem.class_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', elem.codeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'dataPeriod', elem.dataPeriod);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.dataList.Count - 1 do
      ComposeConsentProvisionData(xml, 'data', elem.dataList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.provisionList.Count - 1 do
      ComposeConsentProvision(xml, 'provision', elem.provisionList[i]);
end;

function TFHIRXmlParser.ParseConsentProvisionActor(element : TMXmlElement; path : string) : TFhirConsentProvisionActor;
var
  child : TMXmlElement;
begin
  result := TFhirConsentProvisionActor.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConsentProvisionActorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConsentProvisionActorChild(element : TFhirConsentProvisionActor; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'role') then
        element.role := ParseCodeableConcept(child, path+'/role') {b}
      else if (child.localName = 'reference') then
        element.reference := ParseReference{TFhirDevice}(child, path+'/reference') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConsentProvisionActor(xml : TXmlBuilder; name : String; elem : TFhirConsentProvisionActor);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeConsentProvisionActorChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConsentProvisionActorChildren(xml : TXmlBuilder; elem : TFhirConsentProvisionActor);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'role', elem.role);{x.2a}
  ComposeReference{TFhirDevice}(xml, 'reference', elem.reference);{x.2a}
end;

function TFHIRXmlParser.ParseConsentProvisionData(element : TMXmlElement; path : string) : TFhirConsentProvisionData;
var
  child : TMXmlElement;
begin
  result := TFhirConsentProvisionData.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConsentProvisionDataChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConsentProvisionDataChild(element : TFhirConsentProvisionData; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'meaning') then
        element.meaningElement := ParseEnum(CODES_TFhirConsentDataMeaningEnum, SYSTEMS_TFhirConsentDataMeaningEnum, path+'/meaning', child){1a}
      else if (child.localName = 'reference') then
        element.reference := ParseReference{TFhirReference}(child, path+'/reference') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConsentProvisionData(xml : TXmlBuilder; name : String; elem : TFhirConsentProvisionData);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeConsentProvisionDataChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConsentProvisionDataChildren(xml : TXmlBuilder; elem : TFhirConsentProvisionData);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'meaning', elem.MeaningElement, CODES_TFhirConsentDataMeaningEnum);
  ComposeReference{TFhirReference}(xml, 'reference', elem.reference);{x.2a}
end;

function TFHIRXmlParser.ParseConsent(element : TMXmlElement; path : string) : TFhirConsent;
var
  child : TMXmlElement;
begin
  result := TFhirConsent.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConsentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConsentChild(element : TFhirConsent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirConsentStateCodesEnum, SYSTEMS_TFhirConsentStateCodesEnum, path+'/status', child){1a}
      else if (child.localName = 'scope') then
        element.scope := ParseCodeableConcept(child, path+'/scope') {b}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'dateTime') then
        element.dateTimeElement := ParseDateTime(child, path+'/dateTime') {b}
      else if (child.localName = 'performer') then
        element.performerList.Add(ParseReference{TFhirOrganization}(child, path+'/performer')){y.2}
      else if (child.localName = 'organization') then
        element.organizationList.Add(ParseReference{TFhirOrganization}(child, path+'/organization')){y.2}
      else if (child.localName = 'sourceAttachment') then
        element.source := ParseAttachment(child, path+'/sourceAttachment'){x.3}
      else if (child.localName = 'sourceReference') then
        element.source := ParseReference(child, path+'/sourceReference') {a}
      else if (child.localName = 'policy') then
        element.policyList.Add(ParseConsentPolicy(child, path+'/policy')){y.2}
      else if (child.localName = 'policyRule') then
        element.policyRule := ParseCodeableConcept(child, path+'/policyRule') {b}
      else if (child.localName = 'verification') then
        element.verificationList.Add(ParseConsentVerification(child, path+'/verification')){y.2}
      else if (child.localName = 'provision') then
        element.provision := ParseConsentProvision(child, path+'/provision') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConsent(xml : TXmlBuilder; name : String; elem : TFhirConsent);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeConsentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeConsentChildren(xml : TXmlBuilder; elem : TFhirConsent);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirConsentStateCodesEnum);
  ComposeCodeableConcept(xml, 'scope', elem.scope);{x.2a}
  for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dateTime') then
    ComposeDateTime(xml, 'dateTime', elem.dateTimeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') then
    for i := 0 to elem.performerList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'performer', elem.performerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('organization') then
    for i := 0 to elem.organizationList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'organization', elem.organizationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'sourceAttachment', TFhirAttachment(elem.source))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.source is TFhirReference) {2} then
    ComposeReference(xml, 'sourceReference', TFhirReference(elem.source));
  if (SummaryOption in [soFull, soData]) and doCompose('policy') then
    for i := 0 to elem.policyList.Count - 1 do
      ComposeConsentPolicy(xml, 'policy', elem.policyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('policyRule') then
    ComposeCodeableConcept(xml, 'policyRule', elem.policyRule);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('verification') then
    for i := 0 to elem.verificationList.Count - 1 do
      ComposeConsentVerification(xml, 'verification', elem.verificationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('provision') then
    ComposeConsentProvision(xml, 'provision', elem.provision);{x.2a}
end;

{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
function TFHIRXmlParser.ParseContractContentDefinition(element : TMXmlElement; path : string) : TFhirContractContentDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirContractContentDefinition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractContentDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractContentDefinitionChild(element : TFhirContractContentDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'subType') then
        element.subType := ParseCodeableConcept(child, path+'/subType') {b}
      else if (child.localName = 'publisher') then
        element.publisher := ParseReference{TFhirPractitioner}(child, path+'/publisher') {b}
      else if (child.localName = 'publicationDate') then
        element.publicationDateElement := ParseDateTime(child, path+'/publicationDate') {b}
      else if (child.localName = 'publicationStatus') then
        element.publicationStatusElement := ParseEnum(CODES_TFhirContractPublicationstatusEnum, SYSTEMS_TFhirContractPublicationstatusEnum, path+'/publicationStatus', child){1a}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractContentDefinition(xml : TXmlBuilder; name : String; elem : TFhirContractContentDefinition);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractContentDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractContentDefinitionChildren(xml : TXmlBuilder; elem : TFhirContractContentDefinition);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'subType', elem.subType);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'publisher', elem.publisher);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'publicationDate', elem.publicationDateElement);{x.2b}
  ComposeEnum(xml, 'publicationStatus', elem.PublicationStatusElement, CODES_TFhirContractPublicationstatusEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
end;

function TFHIRXmlParser.ParseContractTerm(element : TMXmlElement; path : string) : TFhirContractTerm;
var
  child : TMXmlElement;
begin
  result := TFhirContractTerm.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermChild(element : TFhirContractTerm; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'issued') then
        element.issuedElement := ParseDateTime(child, path+'/issued') {b}
      else if (child.localName = 'applies') then
        element.applies := ParsePeriod(child, path+'/applies') {b}
      else if (child.localName = 'topicCodeableConcept') then
        element.topic := ParseCodeableConcept(child, path+'/topicCodeableConcept'){x.3}
      else if (child.localName = 'topicReference') then
        element.topic := ParseReference(child, path+'/topicReference') {a}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'subType') then
        element.subType := ParseCodeableConcept(child, path+'/subType') {b}
      else if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if (child.localName = 'securityLabel') then
        element.securityLabelList.Add(ParseContractTermSecurityLabel(child, path+'/securityLabel')){y.2}
      else if (child.localName = 'offer') then
        element.offer := ParseContractTermOffer(child, path+'/offer') {b}
      else if (child.localName = 'asset') then
        element.assetList.Add(ParseContractTermAsset(child, path+'/asset')){y.2}
      else if (child.localName = 'action') then
        element.actionList.Add(ParseContractTermAction(child, path+'/action')){y.2}
      else if (child.localName = 'group') then
        element.groupList.Add(ParseContractTerm(child, path+'/group')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTerm(xml : TXmlBuilder; name : String; elem : TFhirContractTerm);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractTermChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractTermChildren(xml : TXmlBuilder; elem : TFhirContractTerm);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'issued', elem.issuedElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'applies', elem.applies);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.topic is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'topicCodeableConcept', TFhirCodeableConcept(elem.topic))
  else if (SummaryOption in [soFull, soData]) and (elem.topic is TFhirReference) {2} then
    ComposeReference(xml, 'topicReference', TFhirReference(elem.topic));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'subType', elem.subType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'text', elem.textElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.securityLabelList.Count - 1 do
      ComposeContractTermSecurityLabel(xml, 'securityLabel', elem.securityLabelList[i]);
  ComposeContractTermOffer(xml, 'offer', elem.offer);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.assetList.Count - 1 do
      ComposeContractTermAsset(xml, 'asset', elem.assetList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.actionList.Count - 1 do
      ComposeContractTermAction(xml, 'action', elem.actionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.groupList.Count - 1 do
      ComposeContractTerm(xml, 'group', elem.groupList[i]);
end;

function TFHIRXmlParser.ParseContractTermSecurityLabel(element : TMXmlElement; path : string) : TFhirContractTermSecurityLabel;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermSecurityLabel.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermSecurityLabelChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermSecurityLabelChild(element : TFhirContractTermSecurityLabel; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'number') then
        element.numberList.Add(ParseUnsignedInt(child, path+'/number')){y.2}
      else if (child.localName = 'classification') then
        element.classification := ParseCoding(child, path+'/classification') {b}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCoding(child, path+'/category')){y.2}
      else if (child.localName = 'control') then
        element.controlList.Add(ParseCoding(child, path+'/control')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermSecurityLabel(xml : TXmlBuilder; name : String; elem : TFhirContractTermSecurityLabel);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractTermSecurityLabelChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractTermSecurityLabelChildren(xml : TXmlBuilder; elem : TFhirContractTermSecurityLabel);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.numberList.Count - 1 do
      ComposeUnsignedInt(xml, 'number', elem.numberList[i]);
  ComposeCoding(xml, 'classification', elem.classification);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCoding(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.controlList.Count - 1 do
      ComposeCoding(xml, 'control', elem.controlList[i]);
end;

function TFHIRXmlParser.ParseContractTermOffer(element : TMXmlElement; path : string) : TFhirContractTermOffer;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermOffer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermOfferChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermOfferChild(element : TFhirContractTermOffer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'party') then
        element.partyList.Add(ParseContractTermOfferParty(child, path+'/party')){y.2}
      else if (child.localName = 'topic') then
        element.topic := ParseReference{TFhirReference}(child, path+'/topic') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'decision') then
        element.decision := ParseCodeableConcept(child, path+'/decision') {b}
      else if (child.localName = 'decisionMode') then
        element.decisionModeList.Add(ParseCodeableConcept(child, path+'/decisionMode')){y.2}
      else if (child.localName = 'answer') then
        element.answerList.Add(ParseContractTermOfferAnswer(child, path+'/answer')){y.2}
      else if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if (child.localName = 'linkId') then
        element.linkIdList.Add(ParseString(child, path+'/linkId')){y.2}
      else if (child.localName = 'securityLabelNumber') then
        element.securityLabelNumberList.Add(ParseUnsignedInt(child, path+'/securityLabelNumber')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermOffer(xml : TXmlBuilder; name : String; elem : TFhirContractTermOffer);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractTermOfferChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractTermOfferChildren(xml : TXmlBuilder; elem : TFhirContractTermOffer);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.partyList.Count - 1 do
      ComposeContractTermOfferParty(xml, 'party', elem.partyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirReference}(xml, 'topic', elem.topic);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'decision', elem.decision);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.decisionModeList.Count - 1 do
      ComposeCodeableConcept(xml, 'decisionMode', elem.decisionModeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.answerList.Count - 1 do
      ComposeContractTermOfferAnswer(xml, 'answer', elem.answerList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', elem.textElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.linkIdList.Count - 1 do
      ComposeString(xml, 'linkId', elem.linkIdList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.securityLabelNumberList.Count - 1 do
      ComposeUnsignedInt(xml, 'securityLabelNumber', elem.securityLabelNumberList[i]);
end;

function TFHIRXmlParser.ParseContractTermOfferParty(element : TMXmlElement; path : string) : TFhirContractTermOfferParty;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermOfferParty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermOfferPartyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermOfferPartyChild(element : TFhirContractTermOfferParty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'reference') then
        element.referenceList.Add(ParseReference{TFhirPatient}(child, path+'/reference')){y.2}
      else if (child.localName = 'role') then
        element.role := ParseCodeableConcept(child, path+'/role') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermOfferParty(xml : TXmlBuilder; name : String; elem : TFhirContractTermOfferParty);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractTermOfferPartyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractTermOfferPartyChildren(xml : TXmlBuilder; elem : TFhirContractTermOfferParty);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  for i := 0 to elem.referenceList.Count - 1 do
      ComposeReference{TFhirPatient}(xml, 'reference', elem.referenceList[i]);
  ComposeCodeableConcept(xml, 'role', elem.role);{x.2a}
end;

function TFHIRXmlParser.ParseContractTermOfferAnswer(element : TMXmlElement; path : string) : TFhirContractTermOfferAnswer;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermOfferAnswer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermOfferAnswerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermOfferAnswerChild(element : TFhirContractTermOfferAnswer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'valueAttachment') then
        element.value := ParseAttachment(child, path+'/valueAttachment'){x.3}
      else if (child.localName = 'valueCoding') then
        element.value := ParseCoding(child, path+'/valueCoding'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueReference') then
        element.value := ParseReference(child, path+'/valueReference') {a}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueDecimal') then
        element.value := ParseDecimal(child, path+'/valueDecimal'){x.3}
      else if (child.localName = 'valueInteger') then
        element.value := ParseInteger(child, path+'/valueInteger'){x.3}
      else if (child.localName = 'valueDate') then
        element.value := ParseDate(child, path+'/valueDate'){x.3}
      else if (child.localName = 'valueDateTime') then
        element.value := ParseDateTime(child, path+'/valueDateTime'){x.3}
      else if (child.localName = 'valueTime') then
        element.value := ParseTime(child, path+'/valueTime'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueUri') then
        element.value := ParseUri(child, path+'/valueUri'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermOfferAnswer(xml : TXmlBuilder; name : String; elem : TFhirContractTermOfferAnswer);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractTermOfferAnswerChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractTermOfferAnswerChildren(xml : TXmlBuilder; elem : TFhirContractTermOfferAnswer);
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(elem.value))
  else if (elem.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(elem.value))
  else if (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (elem.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(elem.value))
  else if (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (elem.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(elem.value))
  else if (elem.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(elem.value))
  else if (elem.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(elem.value))
  else if (elem.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(elem.value))
  else if (elem.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(elem.value))
  else if (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (elem.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(elem.value));
end;

function TFHIRXmlParser.ParseContractTermAsset(element : TMXmlElement; path : string) : TFhirContractTermAsset;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermAsset.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermAssetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermAssetChild(element : TFhirContractTermAsset; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'scope') then
        element.scope := ParseCodeableConcept(child, path+'/scope') {b}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'typeReference') then
        element.typeReferenceList.Add(ParseReference{TFhirReference}(child, path+'/typeReference')){y.2}
      else if (child.localName = 'subtype') then
        element.subtypeList.Add(ParseCodeableConcept(child, path+'/subtype')){y.2}
      else if (child.localName = 'relationship') then
        element.relationship := ParseCoding(child, path+'/relationship') {b}
      else if (child.localName = 'context') then
        element.contextList.Add(ParseContractTermAssetContext(child, path+'/context')){y.2}
      else if (child.localName = 'condition') then
        element.conditionElement := ParseString(child, path+'/condition') {b}
      else if (child.localName = 'periodType') then
        element.periodTypeList.Add(ParseCodeableConcept(child, path+'/periodType')){y.2}
      else if (child.localName = 'period') then
        element.periodList.Add(ParsePeriod(child, path+'/period')){y.2}
      else if (child.localName = 'usePeriod') then
        element.usePeriodList.Add(ParsePeriod(child, path+'/usePeriod')){y.2}
      else if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if (child.localName = 'linkId') then
        element.linkIdList.Add(ParseString(child, path+'/linkId')){y.2}
      else if (child.localName = 'answer') then
        element.answerList.Add(ParseContractTermOfferAnswer(child, path+'/answer')){y.2}
      else if (child.localName = 'securityLabelNumber') then
        element.securityLabelNumberList.Add(ParseUnsignedInt(child, path+'/securityLabelNumber')){y.2}
      else if (child.localName = 'valuedItem') then
        element.valuedItemList.Add(ParseContractTermAssetValuedItem(child, path+'/valuedItem')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermAsset(xml : TXmlBuilder; name : String; elem : TFhirContractTermAsset);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractTermAssetChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractTermAssetChildren(xml : TXmlBuilder; elem : TFhirContractTermAsset);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'scope', elem.scope);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.typeReferenceList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'typeReference', elem.typeReferenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.subtypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'subtype', elem.subtypeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'relationship', elem.relationship);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.contextList.Count - 1 do
      ComposeContractTermAssetContext(xml, 'context', elem.contextList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'condition', elem.conditionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.periodTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'periodType', elem.periodTypeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.periodList.Count - 1 do
      ComposePeriod(xml, 'period', elem.periodList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.usePeriodList.Count - 1 do
      ComposePeriod(xml, 'usePeriod', elem.usePeriodList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', elem.textElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.linkIdList.Count - 1 do
      ComposeString(xml, 'linkId', elem.linkIdList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.answerList.Count - 1 do
      ComposeContractTermOfferAnswer(xml, 'answer', elem.answerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.securityLabelNumberList.Count - 1 do
      ComposeUnsignedInt(xml, 'securityLabelNumber', elem.securityLabelNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.valuedItemList.Count - 1 do
      ComposeContractTermAssetValuedItem(xml, 'valuedItem', elem.valuedItemList[i]);
end;

function TFHIRXmlParser.ParseContractTermAssetContext(element : TMXmlElement; path : string) : TFhirContractTermAssetContext;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermAssetContext.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermAssetContextChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermAssetContextChild(element : TFhirContractTermAssetContext; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'reference') then
        element.reference := ParseReference{TFhirReference}(child, path+'/reference') {b}
      else if (child.localName = 'code') then
        element.codeList.Add(ParseCodeableConcept(child, path+'/code')){y.2}
      else if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermAssetContext(xml : TXmlBuilder; name : String; elem : TFhirContractTermAssetContext);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractTermAssetContextChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractTermAssetContextChildren(xml : TXmlBuilder; elem : TFhirContractTermAssetContext);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(xml, 'reference', elem.reference);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', elem.codeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', elem.textElement);{x.2b}
end;

function TFHIRXmlParser.ParseContractTermAssetValuedItem(element : TMXmlElement; path : string) : TFhirContractTermAssetValuedItem;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermAssetValuedItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermAssetValuedItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermAssetValuedItemChild(element : TFhirContractTermAssetValuedItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'entityCodeableConcept') then
        element.entity := ParseCodeableConcept(child, path+'/entityCodeableConcept'){x.3}
      else if (child.localName = 'entityReference') then
        element.entity := ParseReference(child, path+'/entityReference') {a}
      else if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'effectiveTime') then
        element.effectiveTimeElement := ParseDateTime(child, path+'/effectiveTime') {b}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'unitPrice') then
        element.unitPrice := ParseMoney(child, path+'/unitPrice') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'points') then
        element.pointsElement := ParseDecimal(child, path+'/points') {b}
      else if (child.localName = 'net') then
        element.net := ParseMoney(child, path+'/net') {b}
      else if (child.localName = 'payment') then
        element.paymentElement := ParseString(child, path+'/payment') {b}
      else if (child.localName = 'paymentDate') then
        element.paymentDateElement := ParseDateTime(child, path+'/paymentDate') {b}
      else if (child.localName = 'responsible') then
        element.responsible := ParseReference{TFhirOrganization}(child, path+'/responsible') {b}
      else if (child.localName = 'recipient') then
        element.recipient := ParseReference{TFhirOrganization}(child, path+'/recipient') {b}
      else if (child.localName = 'linkId') then
        element.linkIdList.Add(ParseString(child, path+'/linkId')){y.2}
      else if (child.localName = 'securityLabelNumber') then
        element.securityLabelNumberList.Add(ParseUnsignedInt(child, path+'/securityLabelNumber')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermAssetValuedItem(xml : TXmlBuilder; name : String; elem : TFhirContractTermAssetValuedItem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractTermAssetValuedItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractTermAssetValuedItemChildren(xml : TXmlBuilder; elem : TFhirContractTermAssetValuedItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and (elem.entity is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'entityCodeableConcept', TFhirCodeableConcept(elem.entity))
  else if (SummaryOption in [soFull, soData]) and (elem.entity is TFhirReference) {2} then
    ComposeReference(xml, 'entityReference', TFhirReference(elem.entity));
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'effectiveTime', elem.effectiveTimeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', elem.unitPrice);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'points', elem.pointsElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', elem.net);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'payment', elem.paymentElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'paymentDate', elem.paymentDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(xml, 'responsible', elem.responsible);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(xml, 'recipient', elem.recipient);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.linkIdList.Count - 1 do
      ComposeString(xml, 'linkId', elem.linkIdList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.securityLabelNumberList.Count - 1 do
      ComposeUnsignedInt(xml, 'securityLabelNumber', elem.securityLabelNumberList[i]);
end;

function TFHIRXmlParser.ParseContractTermAction(element : TMXmlElement; path : string) : TFhirContractTermAction;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermActionChild(element : TFhirContractTermAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'doNotPerform') then
        element.doNotPerformElement := ParseBoolean(child, path+'/doNotPerform') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'subject') then
        element.subjectList.Add(ParseContractTermActionSubject(child, path+'/subject')){y.2}
      else if (child.localName = 'intent') then
        element.intent := ParseCodeableConcept(child, path+'/intent') {b}
      else if (child.localName = 'linkId') then
        element.linkIdList.Add(ParseString(child, path+'/linkId')){y.2}
      else if (child.localName = 'status') then
        element.status := ParseCodeableConcept(child, path+'/status') {b}
      else if (child.localName = 'context') then
        element.context := ParseReference{TFhirEncounter}(child, path+'/context') {b}
      else if (child.localName = 'contextLinkId') then
        element.contextLinkIdList.Add(ParseString(child, path+'/contextLinkId')){y.2}
      else if (child.localName = 'occurrencePeriod') then
        element.occurrence := ParsePeriod(child, path+'/occurrencePeriod'){x.3}
      else if (child.localName = 'occurrenceTiming') then
        element.occurrence := ParseTiming(child, path+'/occurrenceTiming'){x.3}
      else if (child.localName = 'occurrenceDateTime') then
        element.occurrence := ParseDateTime(child, path+'/occurrenceDateTime'){x.3}
      else if (child.localName = 'requester') then
        element.requesterList.Add(ParseReference{TFhirPatient}(child, path+'/requester')){y.2}
      else if (child.localName = 'requesterLinkId') then
        element.requesterLinkIdList.Add(ParseString(child, path+'/requesterLinkId')){y.2}
      else if (child.localName = 'performerType') then
        element.performerTypeList.Add(ParseCodeableConcept(child, path+'/performerType')){y.2}
      else if (child.localName = 'performerRole') then
        element.performerRole := ParseCodeableConcept(child, path+'/performerRole') {b}
      else if (child.localName = 'performer') then
        element.performer := ParseReference{TFhirRelatedPerson}(child, path+'/performer') {b}
      else if (child.localName = 'performerLinkId') then
        element.performerLinkIdList.Add(ParseString(child, path+'/performerLinkId')){y.2}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'reason') then
        element.reasonList.Add(ParseString(child, path+'/reason')){y.2}
      else if (child.localName = 'reasonLinkId') then
        element.reasonLinkIdList.Add(ParseString(child, path+'/reasonLinkId')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'securityLabelNumber') then
        element.securityLabelNumberList.Add(ParseUnsignedInt(child, path+'/securityLabelNumber')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermAction(xml : TXmlBuilder; name : String; elem : TFhirContractTermAction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractTermActionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractTermActionChildren(xml : TXmlBuilder; elem : TFhirContractTermAction);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'doNotPerform', elem.doNotPerformElement);{x.2b}
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.subjectList.Count - 1 do
      ComposeContractTermActionSubject(xml, 'subject', elem.subjectList[i]);
  ComposeCodeableConcept(xml, 'intent', elem.intent);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.linkIdList.Count - 1 do
      ComposeString(xml, 'linkId', elem.linkIdList[i]);
  ComposeCodeableConcept(xml, 'status', elem.status);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirEncounter}(xml, 'context', elem.context);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.contextLinkIdList.Count - 1 do
      ComposeString(xml, 'contextLinkId', elem.contextLinkIdList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(elem.occurrence))
  else if (SummaryOption in [soFull, soData]) and (elem.occurrence is TFhirTiming) {6} then
    ComposeTiming(xml, 'occurrenceTiming', TFhirTiming(elem.occurrence))
  else if (SummaryOption in [soFull, soData]) and (elem.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(elem.occurrence));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.requesterList.Count - 1 do
      ComposeReference{TFhirPatient}(xml, 'requester', elem.requesterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.requesterLinkIdList.Count - 1 do
      ComposeString(xml, 'requesterLinkId', elem.requesterLinkIdList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.performerTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'performerType', elem.performerTypeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'performerRole', elem.performerRole);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirRelatedPerson}(xml, 'performer', elem.performer);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.performerLinkIdList.Count - 1 do
      ComposeString(xml, 'performerLinkId', elem.performerLinkIdList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeString(xml, 'reason', elem.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.reasonLinkIdList.Count - 1 do
      ComposeString(xml, 'reasonLinkId', elem.reasonLinkIdList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.securityLabelNumberList.Count - 1 do
      ComposeUnsignedInt(xml, 'securityLabelNumber', elem.securityLabelNumberList[i]);
end;

function TFHIRXmlParser.ParseContractTermActionSubject(element : TMXmlElement; path : string) : TFhirContractTermActionSubject;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermActionSubject.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermActionSubjectChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermActionSubjectChild(element : TFhirContractTermActionSubject; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'reference') then
        element.referenceList.Add(ParseReference{TFhirPatient}(child, path+'/reference')){y.2}
      else if (child.localName = 'role') then
        element.role := ParseCodeableConcept(child, path+'/role') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermActionSubject(xml : TXmlBuilder; name : String; elem : TFhirContractTermActionSubject);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractTermActionSubjectChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractTermActionSubjectChildren(xml : TXmlBuilder; elem : TFhirContractTermActionSubject);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  for i := 0 to elem.referenceList.Count - 1 do
      ComposeReference{TFhirPatient}(xml, 'reference', elem.referenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'role', elem.role);{x.2a}
end;

function TFHIRXmlParser.ParseContractSigner(element : TMXmlElement; path : string) : TFhirContractSigner;
var
  child : TMXmlElement;
begin
  result := TFhirContractSigner.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractSignerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractSignerChild(element : TFhirContractSigner; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCoding(child, path+'/type') {b}
      else if (child.localName = 'party') then
        element.party := ParseReference{TFhirOrganization}(child, path+'/party') {b}
      else if (child.localName = 'signature') then
        element.signatureList.Add(ParseSignature(child, path+'/signature')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractSigner(xml : TXmlBuilder; name : String; elem : TFhirContractSigner);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractSignerChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractSignerChildren(xml : TXmlBuilder; elem : TFhirContractSigner);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCoding(xml, 'type', elem.type_);{x.2a}
  ComposeReference{TFhirOrganization}(xml, 'party', elem.party);{x.2a}
  for i := 0 to elem.signatureList.Count - 1 do
      ComposeSignature(xml, 'signature', elem.signatureList[i]);
end;

function TFHIRXmlParser.ParseContractFriendly(element : TMXmlElement; path : string) : TFhirContractFriendly;
var
  child : TMXmlElement;
begin
  result := TFhirContractFriendly.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractFriendlyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractFriendlyChild(element : TFhirContractFriendly; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'contentAttachment') then
        element.content := ParseAttachment(child, path+'/contentAttachment'){x.3}
      else if (child.localName = 'contentReference') then
        element.content := ParseReference(child, path+'/contentReference') {a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractFriendly(xml : TXmlBuilder; name : String; elem : TFhirContractFriendly);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractFriendlyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractFriendlyChildren(xml : TXmlBuilder; elem : TFhirContractFriendly);
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.content is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'contentAttachment', TFhirAttachment(elem.content))
  else if (elem.content is TFhirReference) {2} then
    ComposeReference(xml, 'contentReference', TFhirReference(elem.content));
end;

function TFHIRXmlParser.ParseContractLegal(element : TMXmlElement; path : string) : TFhirContractLegal;
var
  child : TMXmlElement;
begin
  result := TFhirContractLegal.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractLegalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractLegalChild(element : TFhirContractLegal; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'contentAttachment') then
        element.content := ParseAttachment(child, path+'/contentAttachment'){x.3}
      else if (child.localName = 'contentReference') then
        element.content := ParseReference(child, path+'/contentReference') {a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractLegal(xml : TXmlBuilder; name : String; elem : TFhirContractLegal);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractLegalChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractLegalChildren(xml : TXmlBuilder; elem : TFhirContractLegal);
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.content is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'contentAttachment', TFhirAttachment(elem.content))
  else if (elem.content is TFhirReference) {2} then
    ComposeReference(xml, 'contentReference', TFhirReference(elem.content));
end;

function TFHIRXmlParser.ParseContractRule(element : TMXmlElement; path : string) : TFhirContractRule;
var
  child : TMXmlElement;
begin
  result := TFhirContractRule.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractRuleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractRuleChild(element : TFhirContractRule; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'contentAttachment') then
        element.content := ParseAttachment(child, path+'/contentAttachment'){x.3}
      else if (child.localName = 'contentReference') then
        element.content := ParseReference(child, path+'/contentReference') {a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractRule(xml : TXmlBuilder; name : String; elem : TFhirContractRule);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeContractRuleChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractRuleChildren(xml : TXmlBuilder; elem : TFhirContractRule);
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.content is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'contentAttachment', TFhirAttachment(elem.content))
  else if (elem.content is TFhirReference) {2} then
    ComposeReference(xml, 'contentReference', TFhirReference(elem.content));
end;

function TFHIRXmlParser.ParseContract(element : TMXmlElement; path : string) : TFhirContract;
var
  child : TMXmlElement;
begin
  result := TFhirContract.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractChild(element : TFhirContract; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirContractStatusEnum, SYSTEMS_TFhirContractStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'legalState') then
        element.legalState := ParseCodeableConcept(child, path+'/legalState') {b}
      else if (child.localName = 'instantiatesCanonical') then
        element.instantiatesCanonical := ParseReference{TFhirContract}(child, path+'/instantiatesCanonical') {b}
      else if (child.localName = 'instantiatesUri') then
        element.instantiatesUriElement := ParseUri(child, path+'/instantiatesUri') {b}
      else if (child.localName = 'contentDerivative') then
        element.contentDerivative := ParseCodeableConcept(child, path+'/contentDerivative') {b}
      else if (child.localName = 'issued') then
        element.issuedElement := ParseDateTime(child, path+'/issued') {b}
      else if (child.localName = 'applies') then
        element.applies := ParsePeriod(child, path+'/applies') {b}
      else if (child.localName = 'expirationType') then
        element.expirationType := ParseCodeableConcept(child, path+'/expirationType') {b}
      else if (child.localName = 'subject') then
        element.subjectList.Add(ParseReference{TFhirReference}(child, path+'/subject')){y.2}
      else if (child.localName = 'authority') then
        element.authorityList.Add(ParseReference{TFhirOrganization}(child, path+'/authority')){y.2}
      else if (child.localName = 'domain') then
        element.domainList.Add(ParseReference{TFhirLocation}(child, path+'/domain')){y.2}
      else if (child.localName = 'site') then
        element.siteList.Add(ParseReference{TFhirLocation}(child, path+'/site')){y.2}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'subtitle') then
        element.subtitleElement := ParseString(child, path+'/subtitle') {b}
      else if (child.localName = 'alias') then
        element.aliasList.Add(ParseString(child, path+'/alias')){y.2}
      else if (child.localName = 'author') then
        element.author := ParseReference{TFhirPatient}(child, path+'/author') {b}
      else if (child.localName = 'scope') then
        element.scope := ParseCodeableConcept(child, path+'/scope') {b}
      else if (child.localName = 'topicCodeableConcept') then
        element.topic := ParseCodeableConcept(child, path+'/topicCodeableConcept'){x.3}
      else if (child.localName = 'topicReference') then
        element.topic := ParseReference(child, path+'/topicReference') {a}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'subType') then
        element.subTypeList.Add(ParseCodeableConcept(child, path+'/subType')){y.2}
      else if (child.localName = 'contentDefinition') then
        element.contentDefinition := ParseContractContentDefinition(child, path+'/contentDefinition') {b}
      else if (child.localName = 'term') then
        element.termList.Add(ParseContractTerm(child, path+'/term')){y.2}
      else if (child.localName = 'supportingInfo') then
        element.supportingInfoList.Add(ParseReference{TFhirReference}(child, path+'/supportingInfo')){y.2}
      else if (child.localName = 'relevantHistory') then
        element.relevantHistoryList.Add(ParseReference{TFhirProvenance}(child, path+'/relevantHistory')){y.2}
      else if (child.localName = 'signer') then
        element.signerList.Add(ParseContractSigner(child, path+'/signer')){y.2}
      else if (child.localName = 'friendly') then
        element.friendlyList.Add(ParseContractFriendly(child, path+'/friendly')){y.2}
      else if (child.localName = 'legal') then
        element.legalList.Add(ParseContractLegal(child, path+'/legal')){y.2}
      else if (child.localName = 'rule') then
        element.ruleList.Add(ParseContractRule(child, path+'/rule')){y.2}
      else if (child.localName = 'legallyBindingAttachment') then
        element.legallyBinding := ParseAttachment(child, path+'/legallyBindingAttachment'){x.3}
      else if (child.localName = 'legallyBindingReference') then
        element.legallyBinding := ParseReference(child, path+'/legallyBindingReference') {a}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContract(xml : TXmlBuilder; name : String; elem : TFhirContract);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeContractChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeContractChildren(xml : TXmlBuilder; elem : TFhirContract);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirContractStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('legalState') then
    ComposeCodeableConcept(xml, 'legalState', elem.legalState);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('instantiatesCanonical') then
    ComposeReference{TFhirContract}(xml, 'instantiatesCanonical', elem.instantiatesCanonical);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('instantiatesUri') then
    ComposeUri(xml, 'instantiatesUri', elem.instantiatesUriElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('contentDerivative') then
    ComposeCodeableConcept(xml, 'contentDerivative', elem.contentDerivative);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('issued') then
    ComposeDateTime(xml, 'issued', elem.issuedElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('applies') then
    ComposePeriod(xml, 'applies', elem.applies);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('expirationType') then
    ComposeCodeableConcept(xml, 'expirationType', elem.expirationType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    for i := 0 to elem.subjectList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'subject', elem.subjectList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('authority') then
    for i := 0 to elem.authorityList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'authority', elem.authorityList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('domain') then
    for i := 0 to elem.domainList.Count - 1 do
      ComposeReference{TFhirLocation}(xml, 'domain', elem.domainList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('site') then
    for i := 0 to elem.siteList.Count - 1 do
      ComposeReference{TFhirLocation}(xml, 'site', elem.siteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('subtitle') then
    ComposeString(xml, 'subtitle', elem.subtitleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('alias') then
    for i := 0 to elem.aliasList.Count - 1 do
      ComposeString(xml, 'alias', elem.aliasList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('author') then
    ComposeReference{TFhirPatient}(xml, 'author', elem.author);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('scope') then
    ComposeCodeableConcept(xml, 'scope', elem.scope);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.topic is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'topicCodeableConcept', TFhirCodeableConcept(elem.topic))
  else if (SummaryOption in [soFull, soData]) and (elem.topic is TFhirReference) {2} then
    ComposeReference(xml, 'topicReference', TFhirReference(elem.topic));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subType') then
    for i := 0 to elem.subTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'subType', elem.subTypeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('contentDefinition') then
    ComposeContractContentDefinition(xml, 'contentDefinition', elem.contentDefinition);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('term') then
    for i := 0 to elem.termList.Count - 1 do
      ComposeContractTerm(xml, 'term', elem.termList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInfo') then
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'supportingInfo', elem.supportingInfoList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relevantHistory') then
    for i := 0 to elem.relevantHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(xml, 'relevantHistory', elem.relevantHistoryList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('signer') then
    for i := 0 to elem.signerList.Count - 1 do
      ComposeContractSigner(xml, 'signer', elem.signerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('friendly') then
    for i := 0 to elem.friendlyList.Count - 1 do
      ComposeContractFriendly(xml, 'friendly', elem.friendlyList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('legal') then
    for i := 0 to elem.legalList.Count - 1 do
      ComposeContractLegal(xml, 'legal', elem.legalList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('rule') then
    for i := 0 to elem.ruleList.Count - 1 do
      ComposeContractRule(xml, 'rule', elem.ruleList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.legallyBinding is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'legallyBindingAttachment', TFhirAttachment(elem.legallyBinding))
  else if (SummaryOption in [soFull, soData]) and (elem.legallyBinding is TFhirReference) {2} then
    ComposeReference(xml, 'legallyBindingReference', TFhirReference(elem.legallyBinding));
end;

{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
function TFHIRXmlParser.ParseCoverageClass(element : TMXmlElement; path : string) : TFhirCoverageClass;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageClass.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageClassChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageClassChild(element : TFhirCoverageClass; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'value') then
        element.valueElement := ParseString(child, path+'/value') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageClass(xml : TXmlBuilder; name : String; elem : TFhirCoverageClass);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCoverageClassChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCoverageClassChildren(xml : TXmlBuilder; elem : TFhirCoverageClass);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  ComposeString(xml, 'value', elem.valueElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
end;

function TFHIRXmlParser.ParseCoverageCostToBeneficiary(element : TMXmlElement; path : string) : TFhirCoverageCostToBeneficiary;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageCostToBeneficiary.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageCostToBeneficiaryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageCostToBeneficiaryChild(element : TFhirCoverageCostToBeneficiary; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueMoney') then
        element.value := ParseMoney(child, path+'/valueMoney'){x.3}
      else if (child.localName = 'exception') then
        element.exceptionList.Add(ParseCoverageCostToBeneficiaryException(child, path+'/exception')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageCostToBeneficiary(xml : TXmlBuilder; name : String; elem : TFhirCoverageCostToBeneficiary);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCoverageCostToBeneficiaryChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCoverageCostToBeneficiaryChildren(xml : TXmlBuilder; elem : TFhirCoverageCostToBeneficiary);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (elem.value is TFhirMoney) {6} then
    ComposeMoney(xml, 'valueMoney', TFhirMoney(elem.value));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.exceptionList.Count - 1 do
      ComposeCoverageCostToBeneficiaryException(xml, 'exception', elem.exceptionList[i]);
end;

function TFHIRXmlParser.ParseCoverageCostToBeneficiaryException(element : TMXmlElement; path : string) : TFhirCoverageCostToBeneficiaryException;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageCostToBeneficiaryException.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageCostToBeneficiaryExceptionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageCostToBeneficiaryExceptionChild(element : TFhirCoverageCostToBeneficiaryException; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageCostToBeneficiaryException(xml : TXmlBuilder; name : String; elem : TFhirCoverageCostToBeneficiaryException);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCoverageCostToBeneficiaryExceptionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCoverageCostToBeneficiaryExceptionChildren(xml : TXmlBuilder; elem : TFhirCoverageCostToBeneficiaryException);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParseCoverage(element : TMXmlElement; path : string) : TFhirCoverage;
var
  child : TMXmlElement;
begin
  result := TFhirCoverage.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageChild(element : TFhirCoverage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'policyHolder') then
        element.policyHolder := ParseReference{TFhirPatient}(child, path+'/policyHolder') {b}
      else if (child.localName = 'subscriber') then
        element.subscriber := ParseReference{TFhirPatient}(child, path+'/subscriber') {b}
      else if (child.localName = 'subscriberId') then
        element.subscriberIdElement := ParseString(child, path+'/subscriberId') {b}
      else if (child.localName = 'beneficiary') then
        element.beneficiary := ParseReference{TFhirPatient}(child, path+'/beneficiary') {b}
      else if (child.localName = 'dependent') then
        element.dependentElement := ParseString(child, path+'/dependent') {b}
      else if (child.localName = 'relationship') then
        element.relationship := ParseCodeableConcept(child, path+'/relationship') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'payor') then
        element.payorList.Add(ParseReference{TFhirOrganization}(child, path+'/payor')){y.2}
      else if (child.localName = 'class') then
        element.class_List.Add(ParseCoverageClass(child, path+'/class')){y.2}
      else if (child.localName = 'order') then
        element.orderElement := ParsePositiveInt(child, path+'/order') {b}
      else if (child.localName = 'network') then
        element.networkElement := ParseString(child, path+'/network') {b}
      else if (child.localName = 'costToBeneficiary') then
        element.costToBeneficiaryList.Add(ParseCoverageCostToBeneficiary(child, path+'/costToBeneficiary')){y.2}
      else if (child.localName = 'subrogation') then
        element.subrogationElement := ParseBoolean(child, path+'/subrogation') {b}
      else if (child.localName = 'contract') then
        element.contractList.Add(ParseReference{TFhirContract}(child, path+'/contract')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverage(xml : TXmlBuilder; name : String; elem : TFhirCoverage);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeCoverageChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCoverageChildren(xml : TXmlBuilder; elem : TFhirCoverage);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('policyHolder') then
    ComposeReference{TFhirPatient}(xml, 'policyHolder', elem.policyHolder);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subscriber') then
    ComposeReference{TFhirPatient}(xml, 'subscriber', elem.subscriber);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subscriberId') then
    ComposeString(xml, 'subscriberId', elem.subscriberIdElement);{x.2b}
  ComposeReference{TFhirPatient}(xml, 'beneficiary', elem.beneficiary);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dependent') then
    ComposeString(xml, 'dependent', elem.dependentElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('relationship') then
    ComposeCodeableConcept(xml, 'relationship', elem.relationship);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  for i := 0 to elem.payorList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'payor', elem.payorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('class_') then
    for i := 0 to elem.class_List.Count - 1 do
      ComposeCoverageClass(xml, 'class', elem.class_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('order') then
    ComposePositiveInt(xml, 'order', elem.orderElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('network') then
    ComposeString(xml, 'network', elem.networkElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('costToBeneficiary') then
    for i := 0 to elem.costToBeneficiaryList.Count - 1 do
      ComposeCoverageCostToBeneficiary(xml, 'costToBeneficiary', elem.costToBeneficiaryList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('subrogation') then
    ComposeBoolean(xml, 'subrogation', elem.subrogationElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('contract') then
    for i := 0 to elem.contractList.Count - 1 do
      ComposeReference{TFhirContract}(xml, 'contract', elem.contractList[i]);
end;

{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
function TFHIRXmlParser.ParseCoverageEligibilityRequestSupportingInfo(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestSupportingInfo;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityRequestSupportingInfo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityRequestSupportingInfoChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestSupportingInfoChild(element : TFhirCoverageEligibilityRequestSupportingInfo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'information') then
        element.information := ParseReference{TFhirReference}(child, path+'/information') {b}
      else if (child.localName = 'appliesToAll') then
        element.appliesToAllElement := ParseBoolean(child, path+'/appliesToAll') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestSupportingInfo(xml : TXmlBuilder; name : String; elem : TFhirCoverageEligibilityRequestSupportingInfo);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCoverageEligibilityRequestSupportingInfoChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestSupportingInfoChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityRequestSupportingInfo);
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  ComposeReference{TFhirReference}(xml, 'information', elem.information);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'appliesToAll', elem.appliesToAllElement);{x.2b}
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestInsurance(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestInsurance;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityRequestInsurance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityRequestInsuranceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestInsuranceChild(element : TFhirCoverageEligibilityRequestInsurance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'focal') then
        element.focalElement := ParseBoolean(child, path+'/focal') {b}
      else if (child.localName = 'coverage') then
        element.coverage := ParseReference{TFhirCoverage}(child, path+'/coverage') {b}
      else if (child.localName = 'businessArrangement') then
        element.businessArrangementElement := ParseString(child, path+'/businessArrangement') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestInsurance(xml : TXmlBuilder; name : String; elem : TFhirCoverageEligibilityRequestInsurance);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCoverageEligibilityRequestInsuranceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestInsuranceChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityRequestInsurance);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'focal', elem.focalElement);{x.2b}
  ComposeReference{TFhirCoverage}(xml, 'coverage', elem.coverage);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'businessArrangement', elem.businessArrangementElement);{x.2b}
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestItem(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestItem;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityRequestItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityRequestItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestItemChild(element : TFhirCoverageEligibilityRequestItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'supportingInfoSequence') then
        element.supportingInfoSequenceList.Add(ParsePositiveInt(child, path+'/supportingInfoSequence')){y.2}
      else if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'productOrService') then
        element.productOrService := ParseCodeableConcept(child, path+'/productOrService') {b}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')){y.2}
      else if (child.localName = 'provider') then
        element.provider := ParseReference{TFhirPractitioner}(child, path+'/provider') {b}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'unitPrice') then
        element.unitPrice := ParseMoney(child, path+'/unitPrice') {b}
      else if (child.localName = 'facility') then
        element.facility := ParseReference{TFhirLocation}(child, path+'/facility') {b}
      else if (child.localName = 'diagnosis') then
        element.diagnosisList.Add(ParseCoverageEligibilityRequestItemDiagnosis(child, path+'/diagnosis')){y.2}
      else if (child.localName = 'detail') then
        element.detailList.Add(ParseReference{TFhirReference}(child, path+'/detail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestItem(xml : TXmlBuilder; name : String; elem : TFhirCoverageEligibilityRequestItem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCoverageEligibilityRequestItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestItemChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityRequestItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.supportingInfoSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'supportingInfoSequence', elem.supportingInfoSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'productOrService', elem.productOrService);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', elem.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'provider', elem.provider);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', elem.unitPrice);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(xml, 'facility', elem.facility);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.diagnosisList.Count - 1 do
      ComposeCoverageEligibilityRequestItemDiagnosis(xml, 'diagnosis', elem.diagnosisList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.detailList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'detail', elem.detailList[i]);
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestItemDiagnosis(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestItemDiagnosis;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityRequestItemDiagnosis.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityRequestItemDiagnosisChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestItemDiagnosisChild(element : TFhirCoverageEligibilityRequestItemDiagnosis; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'diagnosisCodeableConcept') then
        element.diagnosis := ParseCodeableConcept(child, path+'/diagnosisCodeableConcept'){x.3}
      else if (child.localName = 'diagnosisReference') then
        element.diagnosis := ParseReference(child, path+'/diagnosisReference') {a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestItemDiagnosis(xml : TXmlBuilder; name : String; elem : TFhirCoverageEligibilityRequestItemDiagnosis);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCoverageEligibilityRequestItemDiagnosisChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestItemDiagnosisChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityRequestItemDiagnosis);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and (elem.diagnosis is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'diagnosisCodeableConcept', TFhirCodeableConcept(elem.diagnosis))
  else if (SummaryOption in [soFull, soData]) and (elem.diagnosis is TFhirReference) {2} then
    ComposeReference(xml, 'diagnosisReference', TFhirReference(elem.diagnosis));
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequest(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequest;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityRequest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestChild(element : TFhirCoverageEligibilityRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'priority') then
        element.priority := ParseCodeableConcept(child, path+'/priority') {b}
      else if (child.localName = 'purpose') then
        element.purposeList.Add(ParseEnum(CODES_TFhirEligibilityrequestPurposeEnum, SYSTEMS_TFhirEligibilityrequestPurposeEnum, path+'/purpose', child)){y.1}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'servicedPeriod') then
        element.serviced := ParsePeriod(child, path+'/servicedPeriod'){x.3}
      else if (child.localName = 'servicedDate') then
        element.serviced := ParseDate(child, path+'/servicedDate'){x.3}
      else if (child.localName = 'created') then
        element.createdElement := ParseDateTime(child, path+'/created') {b}
      else if (child.localName = 'enterer') then
        element.enterer := ParseReference{TFhirPractitioner}(child, path+'/enterer') {b}
      else if (child.localName = 'provider') then
        element.provider := ParseReference{TFhirPractitioner}(child, path+'/provider') {b}
      else if (child.localName = 'insurer') then
        element.insurer := ParseReference{TFhirOrganization}(child, path+'/insurer') {b}
      else if (child.localName = 'facility') then
        element.facility := ParseReference{TFhirLocation}(child, path+'/facility') {b}
      else if (child.localName = 'supportingInfo') then
        element.supportingInfoList.Add(ParseCoverageEligibilityRequestSupportingInfo(child, path+'/supportingInfo')){y.2}
      else if (child.localName = 'insurance') then
        element.insuranceList.Add(ParseCoverageEligibilityRequestInsurance(child, path+'/insurance')){y.2}
      else if (child.localName = 'item') then
        element.itemList.Add(ParseCoverageEligibilityRequestItem(child, path+'/item')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequest(xml : TXmlBuilder; name : String; elem : TFhirCoverageEligibilityRequest);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeCoverageEligibilityRequestChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityRequest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('priority') then
    ComposeCodeableConcept(xml, 'priority', elem.priority);{x.2a}
  for i := 0 to elem.purposeList.Count - 1 do
      ComposeEnum(xml, 'purpose', elem.purposeList[i], CODES_TFhirEligibilityrequestPurposeEnum);
    ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirPeriod) {6} then
    ComposePeriod(xml, 'servicedPeriod', TFhirPeriod(elem.serviced))
  else if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirDate) {6} then
    ComposeDate(xml, 'servicedDate', TFhirDate(elem.serviced));
    ComposeDateTime(xml, 'created', elem.createdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('enterer') then
    ComposeReference{TFhirPractitioner}(xml, 'enterer', elem.enterer);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('provider') then
    ComposeReference{TFhirPractitioner}(xml, 'provider', elem.provider);{x.2a}
    ComposeReference{TFhirOrganization}(xml, 'insurer', elem.insurer);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('facility') then
    ComposeReference{TFhirLocation}(xml, 'facility', elem.facility);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInfo') then
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeCoverageEligibilityRequestSupportingInfo(xml, 'supportingInfo', elem.supportingInfoList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('insurance') then
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeCoverageEligibilityRequestInsurance(xml, 'insurance', elem.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('item') then
    for i := 0 to elem.itemList.Count - 1 do
      ComposeCoverageEligibilityRequestItem(xml, 'item', elem.itemList[i]);
end;

{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
function TFHIRXmlParser.ParseCoverageEligibilityResponseInsurance(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseInsurance;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityResponseInsurance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityResponseInsuranceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseInsuranceChild(element : TFhirCoverageEligibilityResponseInsurance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'coverage') then
        element.coverage := ParseReference{TFhirCoverage}(child, path+'/coverage') {b}
      else if (child.localName = 'inforce') then
        element.inforceElement := ParseBoolean(child, path+'/inforce') {b}
      else if (child.localName = 'benefitPeriod') then
        element.benefitPeriod := ParsePeriod(child, path+'/benefitPeriod') {b}
      else if (child.localName = 'item') then
        element.itemList.Add(ParseCoverageEligibilityResponseInsuranceItem(child, path+'/item')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseInsurance(xml : TXmlBuilder; name : String; elem : TFhirCoverageEligibilityResponseInsurance);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCoverageEligibilityResponseInsuranceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseInsuranceChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityResponseInsurance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
    ComposeReference{TFhirCoverage}(xml, 'coverage', elem.coverage);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'inforce', elem.inforceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'benefitPeriod', elem.benefitPeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.itemList.Count - 1 do
      ComposeCoverageEligibilityResponseInsuranceItem(xml, 'item', elem.itemList[i]);
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseInsuranceItem(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseInsuranceItem;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityResponseInsuranceItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityResponseInsuranceItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseInsuranceItemChild(element : TFhirCoverageEligibilityResponseInsuranceItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'productOrService') then
        element.productOrService := ParseCodeableConcept(child, path+'/productOrService') {b}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')){y.2}
      else if (child.localName = 'provider') then
        element.provider := ParseReference{TFhirPractitioner}(child, path+'/provider') {b}
      else if (child.localName = 'excluded') then
        element.excludedElement := ParseBoolean(child, path+'/excluded') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'network') then
        element.network := ParseCodeableConcept(child, path+'/network') {b}
      else if (child.localName = 'unit') then
        element.unit_ := ParseCodeableConcept(child, path+'/unit') {b}
      else if (child.localName = 'term') then
        element.term := ParseCodeableConcept(child, path+'/term') {b}
      else if (child.localName = 'benefit') then
        element.benefitList.Add(ParseCoverageEligibilityResponseInsuranceItemBenefit(child, path+'/benefit')){y.2}
      else if (child.localName = 'authorizationRequired') then
        element.authorizationRequiredElement := ParseBoolean(child, path+'/authorizationRequired') {b}
      else if (child.localName = 'authorizationSupporting') then
        element.authorizationSupportingList.Add(ParseCodeableConcept(child, path+'/authorizationSupporting')){y.2}
      else if (child.localName = 'authorizationUrl') then
        element.authorizationUrlElement := ParseUri(child, path+'/authorizationUrl') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseInsuranceItem(xml : TXmlBuilder; name : String; elem : TFhirCoverageEligibilityResponseInsuranceItem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCoverageEligibilityResponseInsuranceItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseInsuranceItemChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityResponseInsuranceItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'productOrService', elem.productOrService);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', elem.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'provider', elem.provider);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'excluded', elem.excludedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'network', elem.network);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'unit', elem.unit_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'term', elem.term);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.benefitList.Count - 1 do
      ComposeCoverageEligibilityResponseInsuranceItemBenefit(xml, 'benefit', elem.benefitList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'authorizationRequired', elem.authorizationRequiredElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.authorizationSupportingList.Count - 1 do
      ComposeCodeableConcept(xml, 'authorizationSupporting', elem.authorizationSupportingList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'authorizationUrl', elem.authorizationUrlElement);{x.2b}
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseInsuranceItemBenefit(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseInsuranceItemBenefit;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityResponseInsuranceItemBenefit.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityResponseInsuranceItemBenefitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseInsuranceItemBenefitChild(element : TFhirCoverageEligibilityResponseInsuranceItemBenefit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'allowedUnsignedInt') then
        element.allowed := ParseUnsignedInt(child, path+'/allowedUnsignedInt'){x.3}
      else if (child.localName = 'allowedMoney') then
        element.allowed := ParseMoney(child, path+'/allowedMoney'){x.3}
      else if (child.localName = 'allowedString') then
        element.allowed := ParseString(child, path+'/allowedString'){x.3}
      else if (child.localName = 'usedUnsignedInt') then
        element.used := ParseUnsignedInt(child, path+'/usedUnsignedInt'){x.3}
      else if (child.localName = 'usedMoney') then
        element.used := ParseMoney(child, path+'/usedMoney'){x.3}
      else if (child.localName = 'usedString') then
        element.used := ParseString(child, path+'/usedString'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseInsuranceItemBenefit(xml : TXmlBuilder; name : String; elem : TFhirCoverageEligibilityResponseInsuranceItemBenefit);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCoverageEligibilityResponseInsuranceItemBenefitChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseInsuranceItemBenefitChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityResponseInsuranceItemBenefit);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'allowedUnsignedInt', TFhirUnsignedInt(elem.allowed))
  else if (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirMoney) {6} then
    ComposeMoney(xml, 'allowedMoney', TFhirMoney(elem.allowed))
  else if (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirString) {6} then
    ComposeString(xml, 'allowedString', TFhirString(elem.allowed));
  if (SummaryOption in [soFull, soData]) and (elem.used is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'usedUnsignedInt', TFhirUnsignedInt(elem.used))
  else if (SummaryOption in [soFull, soData]) and (elem.used is TFhirMoney) {6} then
    ComposeMoney(xml, 'usedMoney', TFhirMoney(elem.used))
  else if (SummaryOption in [soFull, soData]) and (elem.used is TFhirString) {6} then
    ComposeString(xml, 'usedString', TFhirString(elem.used));
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseError(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseError;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityResponseError.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityResponseErrorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseErrorChild(element : TFhirCoverageEligibilityResponseError; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseError(xml : TXmlBuilder; name : String; elem : TFhirCoverageEligibilityResponseError);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeCoverageEligibilityResponseErrorChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseErrorChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityResponseError);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponse(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponse;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityResponse.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseChild(element : TFhirCoverageEligibilityResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'purpose') then
        element.purposeList.Add(ParseEnum(CODES_TFhirEligibilityresponsePurposeEnum, SYSTEMS_TFhirEligibilityresponsePurposeEnum, path+'/purpose', child)){y.1}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'servicedPeriod') then
        element.serviced := ParsePeriod(child, path+'/servicedPeriod'){x.3}
      else if (child.localName = 'servicedDate') then
        element.serviced := ParseDate(child, path+'/servicedDate'){x.3}
      else if (child.localName = 'created') then
        element.createdElement := ParseDateTime(child, path+'/created') {b}
      else if (child.localName = 'requestor') then
        element.requestor := ParseReference{TFhirPractitioner}(child, path+'/requestor') {b}
      else if (child.localName = 'request') then
        element.request := ParseReference{TFhirCoverageEligibilityRequest}(child, path+'/request') {b}
      else if (child.localName = 'outcome') then
        element.outcomeElement := ParseEnum(CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum, path+'/outcome', child){1a}
      else if (child.localName = 'disposition') then
        element.dispositionElement := ParseString(child, path+'/disposition') {b}
      else if (child.localName = 'insurer') then
        element.insurer := ParseReference{TFhirOrganization}(child, path+'/insurer') {b}
      else if (child.localName = 'insurance') then
        element.insuranceList.Add(ParseCoverageEligibilityResponseInsurance(child, path+'/insurance')){y.2}
      else if (child.localName = 'preAuthRef') then
        element.preAuthRefElement := ParseString(child, path+'/preAuthRef') {b}
      else if (child.localName = 'form') then
        element.form := ParseCodeableConcept(child, path+'/form') {b}
      else if (child.localName = 'error') then
        element.errorList.Add(ParseCoverageEligibilityResponseError(child, path+'/error')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponse(xml : TXmlBuilder; name : String; elem : TFhirCoverageEligibilityResponse);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeCoverageEligibilityResponseChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseChildren(xml : TXmlBuilder; elem : TFhirCoverageEligibilityResponse);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum);
  for i := 0 to elem.purposeList.Count - 1 do
      ComposeEnum(xml, 'purpose', elem.purposeList[i], CODES_TFhirEligibilityresponsePurposeEnum);
    ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirPeriod) {6} then
    ComposePeriod(xml, 'servicedPeriod', TFhirPeriod(elem.serviced))
  else if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirDate) {6} then
    ComposeDate(xml, 'servicedDate', TFhirDate(elem.serviced));
    ComposeDateTime(xml, 'created', elem.createdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('requestor') then
    ComposeReference{TFhirPractitioner}(xml, 'requestor', elem.requestor);{x.2a}
    ComposeReference{TFhirCoverageEligibilityRequest}(xml, 'request', elem.request);{x.2a}
  ComposeEnum(xml, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeString(xml, 'disposition', elem.dispositionElement);{x.2b}
    ComposeReference{TFhirOrganization}(xml, 'insurer', elem.insurer);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('insurance') then
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeCoverageEligibilityResponseInsurance(xml, 'insurance', elem.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('preAuthRef') then
    ComposeString(xml, 'preAuthRef', elem.preAuthRefElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('form') then
    ComposeCodeableConcept(xml, 'form', elem.form);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('error') then
    for i := 0 to elem.errorList.Count - 1 do
      ComposeCoverageEligibilityResponseError(xml, 'error', elem.errorList[i]);
end;

{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
function TFHIRXmlParser.ParseDetectedIssueEvidence(element : TMXmlElement; path : string) : TFhirDetectedIssueEvidence;
var
  child : TMXmlElement;
begin
  result := TFhirDetectedIssueEvidence.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDetectedIssueEvidenceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDetectedIssueEvidenceChild(element : TFhirDetectedIssueEvidence; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeList.Add(ParseCodeableConcept(child, path+'/code')){y.2}
      else if (child.localName = 'detail') then
        element.detailList.Add(ParseReference{TFhirReference}(child, path+'/detail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDetectedIssueEvidence(xml : TXmlBuilder; name : String; elem : TFhirDetectedIssueEvidence);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDetectedIssueEvidenceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDetectedIssueEvidenceChildren(xml : TXmlBuilder; elem : TFhirDetectedIssueEvidence);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', elem.codeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.detailList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'detail', elem.detailList[i]);
end;

function TFHIRXmlParser.ParseDetectedIssueMitigation(element : TMXmlElement; path : string) : TFhirDetectedIssueMitigation;
var
  child : TMXmlElement;
begin
  result := TFhirDetectedIssueMitigation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDetectedIssueMitigationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDetectedIssueMitigationChild(element : TFhirDetectedIssueMitigation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'action') then
        element.action := ParseCodeableConcept(child, path+'/action') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'author') then
        element.author := ParseReference{TFhirPractitioner}(child, path+'/author') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDetectedIssueMitigation(xml : TXmlBuilder; name : String; elem : TFhirDetectedIssueMitigation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDetectedIssueMitigationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDetectedIssueMitigationChildren(xml : TXmlBuilder; elem : TFhirDetectedIssueMitigation);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'action', elem.action);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'author', elem.author);{x.2a}
end;

function TFHIRXmlParser.ParseDetectedIssue(element : TMXmlElement; path : string) : TFhirDetectedIssue;
var
  child : TMXmlElement;
begin
  result := TFhirDetectedIssue.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDetectedIssueChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDetectedIssueChild(element : TFhirDetectedIssue; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'severity') then
        element.severityElement := ParseEnum(CODES_TFhirDetectedissueSeverityEnum, SYSTEMS_TFhirDetectedissueSeverityEnum, path+'/severity', child){1a}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'identifiedPeriod') then
        element.identified := ParsePeriod(child, path+'/identifiedPeriod'){x.3}
      else if (child.localName = 'identifiedDateTime') then
        element.identified := ParseDateTime(child, path+'/identifiedDateTime'){x.3}
      else if (child.localName = 'author') then
        element.author := ParseReference{TFhirPractitioner}(child, path+'/author') {b}
      else if (child.localName = 'implicated') then
        element.implicatedList.Add(ParseReference{TFhirReference}(child, path+'/implicated')){y.2}
      else if (child.localName = 'evidence') then
        element.evidenceList.Add(ParseDetectedIssueEvidence(child, path+'/evidence')){y.2}
      else if (child.localName = 'detail') then
        element.detailElement := ParseString(child, path+'/detail') {b}
      else if (child.localName = 'reference') then
        element.referenceElement := ParseUri(child, path+'/reference') {b}
      else if (child.localName = 'mitigation') then
        element.mitigationList.Add(ParseDetectedIssueMitigation(child, path+'/mitigation')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDetectedIssue(xml : TXmlBuilder; name : String; elem : TFhirDetectedIssue);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeDetectedIssueChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDetectedIssueChildren(xml : TXmlBuilder; elem : TFhirDetectedIssue);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('severity') then
    ComposeEnum(xml, 'severity', elem.SeverityElement, CODES_TFhirDetectedissueSeverityEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.identified is TFhirPeriod) {6} then
    ComposePeriod(xml, 'identifiedPeriod', TFhirPeriod(elem.identified))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.identified is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'identifiedDateTime', TFhirDateTime(elem.identified));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    ComposeReference{TFhirPractitioner}(xml, 'author', elem.author);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('implicated') then
    for i := 0 to elem.implicatedList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'implicated', elem.implicatedList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('evidence') then
    for i := 0 to elem.evidenceList.Count - 1 do
      ComposeDetectedIssueEvidence(xml, 'evidence', elem.evidenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('detail') then
    ComposeString(xml, 'detail', elem.detailElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('reference') then
    ComposeUri(xml, 'reference', elem.referenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('mitigation') then
    for i := 0 to elem.mitigationList.Count - 1 do
      ComposeDetectedIssueMitigation(xml, 'mitigation', elem.mitigationList[i]);
end;

{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
function TFHIRXmlParser.ParseDeviceUdiCarrier(element : TMXmlElement; path : string) : TFhirDeviceUdiCarrier;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceUdiCarrier.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceUdiCarrierChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceUdiCarrierChild(element : TFhirDeviceUdiCarrier; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'deviceIdentifier') then
        element.deviceIdentifierElement := ParseString(child, path+'/deviceIdentifier') {b}
      else if (child.localName = 'issuer') then
        element.issuerElement := ParseUri(child, path+'/issuer') {b}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionElement := ParseUri(child, path+'/jurisdiction') {b}
      else if (child.localName = 'carrierAIDC') then
        element.carrierAIDCElement := ParseBase64Binary(child, path+'/carrierAIDC') {b}
      else if (child.localName = 'carrierHRF') then
        element.carrierHRFElement := ParseString(child, path+'/carrierHRF') {b}
      else if (child.localName = 'entryType') then
        element.entryTypeElement := ParseEnum(CODES_TFhirUdiEntryTypeEnum, SYSTEMS_TFhirUdiEntryTypeEnum, path+'/entryType', child){1a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceUdiCarrier(xml : TXmlBuilder; name : String; elem : TFhirDeviceUdiCarrier);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDeviceUdiCarrierChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceUdiCarrierChildren(xml : TXmlBuilder; elem : TFhirDeviceUdiCarrier);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'deviceIdentifier', elem.deviceIdentifierElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'issuer', elem.issuerElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'jurisdiction', elem.jurisdictionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64Binary(xml, 'carrierAIDC', elem.carrierAIDCElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'carrierHRF', elem.carrierHRFElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'entryType', elem.EntryTypeElement, CODES_TFhirUdiEntryTypeEnum);
end;

function TFHIRXmlParser.ParseDeviceDeviceName(element : TMXmlElement; path : string) : TFhirDeviceDeviceName;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDeviceName.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDeviceNameChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDeviceNameChild(element : TFhirDeviceDeviceName; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirDeviceNametypeEnum, SYSTEMS_TFhirDeviceNametypeEnum, path+'/type', child){1a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDeviceName(xml : TXmlBuilder; name : String; elem : TFhirDeviceDeviceName);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDeviceDeviceNameChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceDeviceNameChildren(xml : TXmlBuilder; elem : TFhirDeviceDeviceName);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirDeviceNametypeEnum);
end;

function TFHIRXmlParser.ParseDeviceSpecialization(element : TMXmlElement; path : string) : TFhirDeviceSpecialization;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceSpecialization.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceSpecializationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceSpecializationChild(element : TFhirDeviceSpecialization; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'systemType') then
        element.systemType := ParseCodeableConcept(child, path+'/systemType') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceSpecialization(xml : TXmlBuilder; name : String; elem : TFhirDeviceSpecialization);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDeviceSpecializationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceSpecializationChildren(xml : TXmlBuilder; elem : TFhirDeviceSpecialization);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'systemType', elem.systemType);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
end;

function TFHIRXmlParser.ParseDeviceVersion(element : TMXmlElement; path : string) : TFhirDeviceVersion;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceVersion.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceVersionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceVersionChild(element : TFhirDeviceVersion; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'component') then
        element.component := ParseIdentifier(child, path+'/component') {b}
      else if (child.localName = 'value') then
        element.valueElement := ParseString(child, path+'/value') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceVersion(xml : TXmlBuilder; name : String; elem : TFhirDeviceVersion);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDeviceVersionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceVersionChildren(xml : TXmlBuilder; elem : TFhirDeviceVersion);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'component', elem.component);{x.2a}
  ComposeString(xml, 'value', elem.valueElement);{x.2b}
end;

function TFHIRXmlParser.ParseDeviceProperty(element : TMXmlElement; path : string) : TFhirDeviceProperty;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDevicePropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDevicePropertyChild(element : TFhirDeviceProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'valueQuantity') then
        element.valueQuantityList.Add(ParseQuantity(child, path+'/valueQuantity')){y.2}
      else if (child.localName = 'valueCode') then
        element.valueCodeList.Add(ParseCodeableConcept(child, path+'/valueCode')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceProperty(xml : TXmlBuilder; name : String; elem : TFhirDeviceProperty);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDevicePropertyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDevicePropertyChildren(xml : TXmlBuilder; elem : TFhirDeviceProperty);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.valueQuantityList.Count - 1 do
      ComposeQuantity(xml, 'valueQuantity', elem.valueQuantityList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.valueCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'valueCode', elem.valueCodeList[i]);
end;

function TFHIRXmlParser.ParseDevice(element : TMXmlElement; path : string) : TFhirDevice;
var
  child : TMXmlElement;
begin
  result := TFhirDevice.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceChild(element : TFhirDevice; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'definition') then
        element.definition := ParseReference{TFhirDeviceDefinition}(child, path+'/definition') {b}
      else if (child.localName = 'udiCarrier') then
        element.udiCarrierList.Add(ParseDeviceUdiCarrier(child, path+'/udiCarrier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirDeviceStatusEnum, SYSTEMS_TFhirDeviceStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'statusReason') then
        element.statusReasonList.Add(ParseCodeableConcept(child, path+'/statusReason')){y.2}
      else if (child.localName = 'distinctIdentifier') then
        element.distinctIdentifierElement := ParseString(child, path+'/distinctIdentifier') {b}
      else if (child.localName = 'manufacturer') then
        element.manufacturerElement := ParseString(child, path+'/manufacturer') {b}
      else if (child.localName = 'manufactureDate') then
        element.manufactureDateElement := ParseDateTime(child, path+'/manufactureDate') {b}
      else if (child.localName = 'expirationDate') then
        element.expirationDateElement := ParseDateTime(child, path+'/expirationDate') {b}
      else if (child.localName = 'lotNumber') then
        element.lotNumberElement := ParseString(child, path+'/lotNumber') {b}
      else if (child.localName = 'serialNumber') then
        element.serialNumberElement := ParseString(child, path+'/serialNumber') {b}
      else if (child.localName = 'deviceName') then
        element.deviceNameList.Add(ParseDeviceDeviceName(child, path+'/deviceName')){y.2}
      else if (child.localName = 'modelNumber') then
        element.modelNumberElement := ParseString(child, path+'/modelNumber') {b}
      else if (child.localName = 'partNumber') then
        element.partNumberElement := ParseString(child, path+'/partNumber') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'specialization') then
        element.specializationList.Add(ParseDeviceSpecialization(child, path+'/specialization')){y.2}
      else if (child.localName = 'version') then
        element.versionList.Add(ParseDeviceVersion(child, path+'/version')){y.2}
      else if (child.localName = 'property') then
        element.property_List.Add(ParseDeviceProperty(child, path+'/property')){y.2}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'owner') then
        element.owner := ParseReference{TFhirOrganization}(child, path+'/owner') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactPoint(child, path+'/contact')){y.2}
      else if (child.localName = 'location') then
        element.location := ParseReference{TFhirLocation}(child, path+'/location') {b}
      else if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'safety') then
        element.safetyList.Add(ParseCodeableConcept(child, path+'/safety')){y.2}
      else if (child.localName = 'parent') then
        element.parent := ParseReference{TFhirDevice}(child, path+'/parent') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDevice(xml : TXmlBuilder; name : String; elem : TFhirDevice);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeDeviceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceChildren(xml : TXmlBuilder; elem : TFhirDevice);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('definition') then
    ComposeReference{TFhirDeviceDefinition}(xml, 'definition', elem.definition);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('udiCarrier') then
    for i := 0 to elem.udiCarrierList.Count - 1 do
      ComposeDeviceUdiCarrier(xml, 'udiCarrier', elem.udiCarrierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirDeviceStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('statusReason') then
    for i := 0 to elem.statusReasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'statusReason', elem.statusReasonList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('distinctIdentifier') then
    ComposeString(xml, 'distinctIdentifier', elem.distinctIdentifierElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('manufacturer') then
    ComposeString(xml, 'manufacturer', elem.manufacturerElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('manufactureDate') then
    ComposeDateTime(xml, 'manufactureDate', elem.manufactureDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('expirationDate') then
    ComposeDateTime(xml, 'expirationDate', elem.expirationDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('lotNumber') then
    ComposeString(xml, 'lotNumber', elem.lotNumberElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('serialNumber') then
    ComposeString(xml, 'serialNumber', elem.serialNumberElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('deviceName') then
    for i := 0 to elem.deviceNameList.Count - 1 do
      ComposeDeviceDeviceName(xml, 'deviceName', elem.deviceNameList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('modelNumber') then
    ComposeString(xml, 'modelNumber', elem.modelNumberElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('partNumber') then
    ComposeString(xml, 'partNumber', elem.partNumberElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('specialization') then
    for i := 0 to elem.specializationList.Count - 1 do
      ComposeDeviceSpecialization(xml, 'specialization', elem.specializationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('version') then
    for i := 0 to elem.versionList.Count - 1 do
      ComposeDeviceVersion(xml, 'version', elem.versionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('property_') then
    for i := 0 to elem.property_List.Count - 1 do
      ComposeDeviceProperty(xml, 'property', elem.property_List[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('owner') then
    ComposeReference{TFhirOrganization}(xml, 'owner', elem.owner);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactPoint(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(xml, 'location', elem.location);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('safety') then
    for i := 0 to elem.safetyList.Count - 1 do
      ComposeCodeableConcept(xml, 'safety', elem.safetyList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('parent') then
    ComposeReference{TFhirDevice}(xml, 'parent', elem.parent);{x.2a}
end;

{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
function TFHIRXmlParser.ParseDeviceDefinitionUdiDeviceIdentifier(element : TMXmlElement; path : string) : TFhirDeviceDefinitionUdiDeviceIdentifier;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDefinitionUdiDeviceIdentifier.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDefinitionUdiDeviceIdentifierChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDefinitionUdiDeviceIdentifierChild(element : TFhirDeviceDefinitionUdiDeviceIdentifier; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'deviceIdentifier') then
        element.deviceIdentifierElement := ParseString(child, path+'/deviceIdentifier') {b}
      else if (child.localName = 'issuer') then
        element.issuerElement := ParseUri(child, path+'/issuer') {b}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionElement := ParseUri(child, path+'/jurisdiction') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionUdiDeviceIdentifier(xml : TXmlBuilder; name : String; elem : TFhirDeviceDefinitionUdiDeviceIdentifier);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDeviceDefinitionUdiDeviceIdentifierChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionUdiDeviceIdentifierChildren(xml : TXmlBuilder; elem : TFhirDeviceDefinitionUdiDeviceIdentifier);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'deviceIdentifier', elem.deviceIdentifierElement);{x.2b}
  ComposeUri(xml, 'issuer', elem.issuerElement);{x.2b}
  ComposeUri(xml, 'jurisdiction', elem.jurisdictionElement);{x.2b}
end;

function TFHIRXmlParser.ParseDeviceDefinitionDeviceName(element : TMXmlElement; path : string) : TFhirDeviceDefinitionDeviceName;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDefinitionDeviceName.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDefinitionDeviceNameChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDefinitionDeviceNameChild(element : TFhirDeviceDefinitionDeviceName; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirDeviceNametypeEnum, SYSTEMS_TFhirDeviceNametypeEnum, path+'/type', child){1a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionDeviceName(xml : TXmlBuilder; name : String; elem : TFhirDeviceDefinitionDeviceName);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDeviceDefinitionDeviceNameChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionDeviceNameChildren(xml : TXmlBuilder; elem : TFhirDeviceDefinitionDeviceName);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirDeviceNametypeEnum);
end;

function TFHIRXmlParser.ParseDeviceDefinitionSpecialization(element : TMXmlElement; path : string) : TFhirDeviceDefinitionSpecialization;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDefinitionSpecialization.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDefinitionSpecializationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDefinitionSpecializationChild(element : TFhirDeviceDefinitionSpecialization; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'systemType') then
        element.systemTypeElement := ParseString(child, path+'/systemType') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionSpecialization(xml : TXmlBuilder; name : String; elem : TFhirDeviceDefinitionSpecialization);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDeviceDefinitionSpecializationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionSpecializationChildren(xml : TXmlBuilder; elem : TFhirDeviceDefinitionSpecialization);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'systemType', elem.systemTypeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
end;

function TFHIRXmlParser.ParseDeviceDefinitionCapability(element : TMXmlElement; path : string) : TFhirDeviceDefinitionCapability;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDefinitionCapability.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDefinitionCapabilityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDefinitionCapabilityChild(element : TFhirDeviceDefinitionCapability; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'description') then
        element.descriptionList.Add(ParseCodeableConcept(child, path+'/description')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionCapability(xml : TXmlBuilder; name : String; elem : TFhirDeviceDefinitionCapability);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDeviceDefinitionCapabilityChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionCapabilityChildren(xml : TXmlBuilder; elem : TFhirDeviceDefinitionCapability);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.descriptionList.Count - 1 do
      ComposeCodeableConcept(xml, 'description', elem.descriptionList[i]);
end;

function TFHIRXmlParser.ParseDeviceDefinitionProperty(element : TMXmlElement; path : string) : TFhirDeviceDefinitionProperty;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDefinitionProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDefinitionPropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDefinitionPropertyChild(element : TFhirDeviceDefinitionProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'valueQuantity') then
        element.valueQuantityList.Add(ParseQuantity(child, path+'/valueQuantity')){y.2}
      else if (child.localName = 'valueCode') then
        element.valueCodeList.Add(ParseCodeableConcept(child, path+'/valueCode')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionProperty(xml : TXmlBuilder; name : String; elem : TFhirDeviceDefinitionProperty);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDeviceDefinitionPropertyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionPropertyChildren(xml : TXmlBuilder; elem : TFhirDeviceDefinitionProperty);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.valueQuantityList.Count - 1 do
      ComposeQuantity(xml, 'valueQuantity', elem.valueQuantityList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.valueCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'valueCode', elem.valueCodeList[i]);
end;

function TFHIRXmlParser.ParseDeviceDefinitionMaterial(element : TMXmlElement; path : string) : TFhirDeviceDefinitionMaterial;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDefinitionMaterial.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDefinitionMaterialChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDefinitionMaterialChild(element : TFhirDeviceDefinitionMaterial; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'substance') then
        element.substance := ParseCodeableConcept(child, path+'/substance') {b}
      else if (child.localName = 'alternate') then
        element.alternateElement := ParseBoolean(child, path+'/alternate') {b}
      else if (child.localName = 'allergenicIndicator') then
        element.allergenicIndicatorElement := ParseBoolean(child, path+'/allergenicIndicator') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionMaterial(xml : TXmlBuilder; name : String; elem : TFhirDeviceDefinitionMaterial);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDeviceDefinitionMaterialChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionMaterialChildren(xml : TXmlBuilder; elem : TFhirDeviceDefinitionMaterial);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'substance', elem.substance);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'alternate', elem.alternateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'allergenicIndicator', elem.allergenicIndicatorElement);{x.2b}
end;

function TFHIRXmlParser.ParseDeviceDefinition(element : TMXmlElement; path : string) : TFhirDeviceDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDefinitionChild(element : TFhirDeviceDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'udiDeviceIdentifier') then
        element.udiDeviceIdentifierList.Add(ParseDeviceDefinitionUdiDeviceIdentifier(child, path+'/udiDeviceIdentifier')){y.2}
      else if (child.localName = 'manufacturerReference') then
        element.manufacturer := ParseReference(child, path+'/manufacturerReference') {a}
      else if (child.localName = 'manufacturerString') then
        element.manufacturer := ParseString(child, path+'/manufacturerString'){x.3}
      else if (child.localName = 'deviceName') then
        element.deviceNameList.Add(ParseDeviceDefinitionDeviceName(child, path+'/deviceName')){y.2}
      else if (child.localName = 'modelNumber') then
        element.modelNumberElement := ParseString(child, path+'/modelNumber') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'specialization') then
        element.specializationList.Add(ParseDeviceDefinitionSpecialization(child, path+'/specialization')){y.2}
      else if (child.localName = 'version') then
        element.versionList.Add(ParseString(child, path+'/version')){y.2}
      else if (child.localName = 'safety') then
        element.safetyList.Add(ParseCodeableConcept(child, path+'/safety')){y.2}
      else if (child.localName = 'shelfLifeStorage') then
        element.shelfLifeStorageList.Add(ParseProductShelfLife(child, path+'/shelfLifeStorage')){y.2}
      else if (child.localName = 'physicalCharacteristics') then
        element.physicalCharacteristics := ParseProdCharacteristic(child, path+'/physicalCharacteristics') {b}
      else if (child.localName = 'languageCode') then
        element.languageCodeList.Add(ParseCodeableConcept(child, path+'/languageCode')){y.2}
      else if (child.localName = 'capability') then
        element.capabilityList.Add(ParseDeviceDefinitionCapability(child, path+'/capability')){y.2}
      else if (child.localName = 'property') then
        element.property_List.Add(ParseDeviceDefinitionProperty(child, path+'/property')){y.2}
      else if (child.localName = 'owner') then
        element.owner := ParseReference{TFhirOrganization}(child, path+'/owner') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactPoint(child, path+'/contact')){y.2}
      else if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'onlineInformation') then
        element.onlineInformationElement := ParseUri(child, path+'/onlineInformation') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'parentDevice') then
        element.parentDevice := ParseReference{TFhirDeviceDefinition}(child, path+'/parentDevice') {b}
      else if (child.localName = 'material') then
        element.materialList.Add(ParseDeviceDefinitionMaterial(child, path+'/material')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinition(xml : TXmlBuilder; name : String; elem : TFhirDeviceDefinition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeDeviceDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionChildren(xml : TXmlBuilder; elem : TFhirDeviceDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('udiDeviceIdentifier') then
    for i := 0 to elem.udiDeviceIdentifierList.Count - 1 do
      ComposeDeviceDefinitionUdiDeviceIdentifier(xml, 'udiDeviceIdentifier', elem.udiDeviceIdentifierList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.manufacturer is TFhirReference) {2} then
    ComposeReference(xml, 'manufacturerReference', TFhirReference(elem.manufacturer))
  else if (SummaryOption in [soFull, soData]) and (elem.manufacturer is TFhirString) {6} then
    ComposeString(xml, 'manufacturerString', TFhirString(elem.manufacturer));
  if (SummaryOption in [soFull, soData]) and doCompose('deviceName') then
    for i := 0 to elem.deviceNameList.Count - 1 do
      ComposeDeviceDefinitionDeviceName(xml, 'deviceName', elem.deviceNameList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('modelNumber') then
    ComposeString(xml, 'modelNumber', elem.modelNumberElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('specialization') then
    for i := 0 to elem.specializationList.Count - 1 do
      ComposeDeviceDefinitionSpecialization(xml, 'specialization', elem.specializationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('version') then
    for i := 0 to elem.versionList.Count - 1 do
      ComposeString(xml, 'version', elem.versionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('safety') then
    for i := 0 to elem.safetyList.Count - 1 do
      ComposeCodeableConcept(xml, 'safety', elem.safetyList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('shelfLifeStorage') then
    for i := 0 to elem.shelfLifeStorageList.Count - 1 do
      ComposeProductShelfLife(xml, 'shelfLifeStorage', elem.shelfLifeStorageList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('physicalCharacteristics') then
    ComposeProdCharacteristic(xml, 'physicalCharacteristics', elem.physicalCharacteristics);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('languageCode') then
    for i := 0 to elem.languageCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'languageCode', elem.languageCodeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('capability') then
    for i := 0 to elem.capabilityList.Count - 1 do
      ComposeDeviceDefinitionCapability(xml, 'capability', elem.capabilityList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('property_') then
    for i := 0 to elem.property_List.Count - 1 do
      ComposeDeviceDefinitionProperty(xml, 'property', elem.property_List[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('owner') then
    ComposeReference{TFhirOrganization}(xml, 'owner', elem.owner);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactPoint(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('onlineInformation') then
    ComposeUri(xml, 'onlineInformation', elem.onlineInformationElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('quantity') then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('parentDevice') then
    ComposeReference{TFhirDeviceDefinition}(xml, 'parentDevice', elem.parentDevice);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('material') then
    for i := 0 to elem.materialList.Count - 1 do
      ComposeDeviceDefinitionMaterial(xml, 'material', elem.materialList[i]);
end;

{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
function TFHIRXmlParser.ParseDeviceMetricCalibration(element : TMXmlElement; path : string) : TFhirDeviceMetricCalibration;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceMetricCalibration.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceMetricCalibrationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceMetricCalibrationChild(element : TFhirDeviceMetricCalibration; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirMetricCalibrationTypeEnum, SYSTEMS_TFhirMetricCalibrationTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'state') then
        element.stateElement := ParseEnum(CODES_TFhirMetricCalibrationStateEnum, SYSTEMS_TFhirMetricCalibrationStateEnum, path+'/state', child){1a}
      else if (child.localName = 'time') then
        element.timeElement := ParseInstant(child, path+'/time') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceMetricCalibration(xml : TXmlBuilder; name : String; elem : TFhirDeviceMetricCalibration);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDeviceMetricCalibrationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceMetricCalibrationChildren(xml : TXmlBuilder; elem : TFhirDeviceMetricCalibration);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirMetricCalibrationTypeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'state', elem.StateElement, CODES_TFhirMetricCalibrationStateEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstant(xml, 'time', elem.timeElement);{x.2b}
end;

function TFHIRXmlParser.ParseDeviceMetric(element : TMXmlElement; path : string) : TFhirDeviceMetric;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceMetric.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceMetricChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceMetricChild(element : TFhirDeviceMetric; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'unit') then
        element.unit_ := ParseCodeableConcept(child, path+'/unit') {b}
      else if (child.localName = 'source') then
        element.source := ParseReference{TFhirDevice}(child, path+'/source') {b}
      else if (child.localName = 'parent') then
        element.parent := ParseReference{TFhirDevice}(child, path+'/parent') {b}
      else if (child.localName = 'operationalStatus') then
        element.operationalStatusElement := ParseEnum(CODES_TFhirMetricOperationalStatusEnum, SYSTEMS_TFhirMetricOperationalStatusEnum, path+'/operationalStatus', child){1a}
      else if (child.localName = 'color') then
        element.colorElement := ParseEnum(CODES_TFhirMetricColorEnum, SYSTEMS_TFhirMetricColorEnum, path+'/color', child){1a}
      else if (child.localName = 'category') then
        element.categoryElement := ParseEnum(CODES_TFhirMetricCategoryEnum, SYSTEMS_TFhirMetricCategoryEnum, path+'/category', child){1a}
      else if (child.localName = 'measurementPeriod') then
        element.measurementPeriod := ParseTiming(child, path+'/measurementPeriod') {b}
      else if (child.localName = 'calibration') then
        element.calibrationList.Add(ParseDeviceMetricCalibration(child, path+'/calibration')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceMetric(xml : TXmlBuilder; name : String; elem : TFhirDeviceMetric);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeDeviceMetricChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceMetricChildren(xml : TXmlBuilder; elem : TFhirDeviceMetric);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('unit_') then
    ComposeCodeableConcept(xml, 'unit', elem.unit_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('source') then
    ComposeReference{TFhirDevice}(xml, 'source', elem.source);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('parent') then
    ComposeReference{TFhirDevice}(xml, 'parent', elem.parent);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('operationalStatus') then
    ComposeEnum(xml, 'operationalStatus', elem.OperationalStatusElement, CODES_TFhirMetricOperationalStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('color') then
    ComposeEnum(xml, 'color', elem.ColorElement, CODES_TFhirMetricColorEnum);
  ComposeEnum(xml, 'category', elem.CategoryElement, CODES_TFhirMetricCategoryEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('measurementPeriod') then
    ComposeTiming(xml, 'measurementPeriod', elem.measurementPeriod);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('calibration') then
    for i := 0 to elem.calibrationList.Count - 1 do
      ComposeDeviceMetricCalibration(xml, 'calibration', elem.calibrationList[i]);
end;

{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
function TFHIRXmlParser.ParseDeviceRequestParameter(element : TMXmlElement; path : string) : TFhirDeviceRequestParameter;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceRequestParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceRequestParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceRequestParameterChild(element : TFhirDeviceRequestParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'valueCodeableConcept') then
        element.value := ParseCodeableConcept(child, path+'/valueCodeableConcept'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueRange') then
        element.value := ParseRange(child, path+'/valueRange'){x.3}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceRequestParameter(xml : TXmlBuilder; name : String; elem : TFhirDeviceRequestParameter);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDeviceRequestParameterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceRequestParameterChildren(xml : TXmlBuilder; elem : TFhirDeviceRequestParameter);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value));
end;

function TFHIRXmlParser.ParseDeviceRequest(element : TMXmlElement; path : string) : TFhirDeviceRequest;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceRequest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceRequestChild(element : TFhirDeviceRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'instantiatesCanonical') then
        element.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')){y.2}
      else if (child.localName = 'instantiatesUri') then
        element.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirReference}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'priorRequest') then
        element.priorRequestList.Add(ParseReference{TFhirReference}(child, path+'/priorRequest')){y.2}
      else if (child.localName = 'groupIdentifier') then
        element.groupIdentifier := ParseIdentifier(child, path+'/groupIdentifier') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'intent') then
        element.intentElement := ParseEnum(CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum, path+'/intent', child){1a}
      else if (child.localName = 'priority') then
        element.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, path+'/priority', child){1a}
      else if (child.localName = 'codeReference') then
        element.code := ParseReference(child, path+'/codeReference') {a}
      else if (child.localName = 'codeCodeableConcept') then
        element.code := ParseCodeableConcept(child, path+'/codeCodeableConcept'){x.3}
      else if (child.localName = 'parameter') then
        element.parameterList.Add(ParseDeviceRequestParameter(child, path+'/parameter')){y.2}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'occurrencePeriod') then
        element.occurrence := ParsePeriod(child, path+'/occurrencePeriod'){x.3}
      else if (child.localName = 'occurrenceTiming') then
        element.occurrence := ParseTiming(child, path+'/occurrenceTiming'){x.3}
      else if (child.localName = 'occurrenceDateTime') then
        element.occurrence := ParseDateTime(child, path+'/occurrenceDateTime'){x.3}
      else if (child.localName = 'authoredOn') then
        element.authoredOnElement := ParseDateTime(child, path+'/authoredOn') {b}
      else if (child.localName = 'requester') then
        element.requester := ParseReference{TFhirDevice}(child, path+'/requester') {b}
      else if (child.localName = 'performerType') then
        element.performerType := ParseCodeableConcept(child, path+'/performerType') {b}
      else if (child.localName = 'performer') then
        element.performer := ParseReference{TFhirPractitioner}(child, path+'/performer') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'insurance') then
        element.insuranceList.Add(ParseReference{TFhirCoverage}(child, path+'/insurance')){y.2}
      else if (child.localName = 'supportingInfo') then
        element.supportingInfoList.Add(ParseReference{TFhirReference}(child, path+'/supportingInfo')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'relevantHistory') then
        element.relevantHistoryList.Add(ParseReference{TFhirProvenance}(child, path+'/relevantHistory')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceRequest(xml : TXmlBuilder; name : String; elem : TFhirDeviceRequest);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeDeviceRequestChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceRequestChildren(xml : TXmlBuilder; elem : TFhirDeviceRequest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesCanonical') then
    for i := 0 to elem.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', elem.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesUri') then
    for i := 0 to elem.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', elem.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priorRequest') then
    for i := 0 to elem.priorRequestList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'priorRequest', elem.priorRequestList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('groupIdentifier') then
    ComposeIdentifier(xml, 'groupIdentifier', elem.groupIdentifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum);
  ComposeEnum(xml, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnum(xml, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum);
  if (elem.code is TFhirReference) {2} then
    ComposeReference(xml, 'codeReference', TFhirReference(elem.code))
  else if (elem.code is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'codeCodeableConcept', TFhirCodeableConcept(elem.code));
  if (SummaryOption in [soFull, soData]) and doCompose('parameter') then
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeDeviceRequestParameter(xml, 'parameter', elem.parameterList[i]);
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(elem.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) {6} then
    ComposeTiming(xml, 'occurrenceTiming', TFhirTiming(elem.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(elem.occurrence));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTime(xml, 'authoredOn', elem.authoredOnElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requester') then
    ComposeReference{TFhirDevice}(xml, 'requester', elem.requester);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performerType') then
    ComposeCodeableConcept(xml, 'performerType', elem.performerType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') then
    ComposeReference{TFhirPractitioner}(xml, 'performer', elem.performer);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('insurance') then
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeReference{TFhirCoverage}(xml, 'insurance', elem.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInfo') then
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'supportingInfo', elem.supportingInfoList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relevantHistory') then
    for i := 0 to elem.relevantHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(xml, 'relevantHistory', elem.relevantHistoryList[i]);
end;

{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
function TFHIRXmlParser.ParseDeviceUseStatement(element : TMXmlElement; path : string) : TFhirDeviceUseStatement;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceUseStatement.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceUseStatementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceUseStatementChild(element : TFhirDeviceUseStatement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirServiceRequest}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirDeviceStatementStatusEnum, SYSTEMS_TFhirDeviceStatementStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'derivedFrom') then
        element.derivedFromList.Add(ParseReference{TFhirServiceRequest}(child, path+'/derivedFrom')){y.2}
      else if (child.localName = 'timingTiming') then
        element.timing := ParseTiming(child, path+'/timingTiming'){x.3}
      else if (child.localName = 'timingPeriod') then
        element.timing := ParsePeriod(child, path+'/timingPeriod'){x.3}
      else if (child.localName = 'timingDateTime') then
        element.timing := ParseDateTime(child, path+'/timingDateTime'){x.3}
      else if (child.localName = 'recordedOn') then
        element.recordedOnElement := ParseDateTime(child, path+'/recordedOn') {b}
      else if (child.localName = 'source') then
        element.source := ParseReference{TFhirPatient}(child, path+'/source') {b}
      else if (child.localName = 'device') then
        element.device := ParseReference{TFhirDevice}(child, path+'/device') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'bodySite') then
        element.bodySite := ParseCodeableConcept(child, path+'/bodySite') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceUseStatement(xml : TXmlBuilder; name : String; elem : TFhirDeviceUseStatement);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeDeviceUseStatementChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDeviceUseStatementChildren(xml : TXmlBuilder; elem : TFhirDeviceUseStatement);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(xml, 'basedOn', elem.basedOnList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirDeviceStatementStatusEnum);
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('derivedFrom') then
    for i := 0 to elem.derivedFromList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(xml, 'derivedFrom', elem.derivedFromList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.timing is TFhirTiming) {6} then
    ComposeTiming(xml, 'timingTiming', TFhirTiming(elem.timing))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.timing is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timingPeriod', TFhirPeriod(elem.timing))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.timing is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timingDateTime', TFhirDateTime(elem.timing));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('recordedOn') then
    ComposeDateTime(xml, 'recordedOn', elem.recordedOnElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('source') then
    ComposeReference{TFhirPatient}(xml, 'source', elem.source);{x.2a}
  ComposeReference{TFhirDevice}(xml, 'device', elem.device);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('bodySite') then
    ComposeCodeableConcept(xml, 'bodySite', elem.bodySite);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
function TFHIRXmlParser.ParseDiagnosticReportMedia(element : TMXmlElement; path : string) : TFhirDiagnosticReportMedia;
var
  child : TMXmlElement;
begin
  result := TFhirDiagnosticReportMedia.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDiagnosticReportMediaChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDiagnosticReportMediaChild(element : TFhirDiagnosticReportMedia; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if (child.localName = 'link') then
        element.link_ := ParseReference{TFhirMedia}(child, path+'/link') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDiagnosticReportMedia(xml : TXmlBuilder; name : String; elem : TFhirDiagnosticReportMedia);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDiagnosticReportMediaChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDiagnosticReportMediaChildren(xml : TXmlBuilder; elem : TFhirDiagnosticReportMedia);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
  ComposeReference{TFhirMedia}(xml, 'link', elem.link_);{x.2a}
end;

function TFHIRXmlParser.ParseDiagnosticReport(element : TMXmlElement; path : string) : TFhirDiagnosticReport;
var
  child : TMXmlElement;
begin
  result := TFhirDiagnosticReport.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDiagnosticReportChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDiagnosticReportChild(element : TFhirDiagnosticReport; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirCarePlan}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirDiagnosticReportStatusEnum, SYSTEMS_TFhirDiagnosticReportStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effective := ParsePeriod(child, path+'/effectivePeriod'){x.3}
      else if (child.localName = 'effectiveDateTime') then
        element.effective := ParseDateTime(child, path+'/effectiveDateTime'){x.3}
      else if (child.localName = 'issued') then
        element.issuedElement := ParseInstant(child, path+'/issued') {b}
      else if (child.localName = 'performer') then
        element.performerList.Add(ParseReference{TFhirPractitioner}(child, path+'/performer')){y.2}
      else if (child.localName = 'resultsInterpreter') then
        element.resultsInterpreterList.Add(ParseReference{TFhirPractitioner}(child, path+'/resultsInterpreter')){y.2}
      else if (child.localName = 'specimen') then
        element.specimenList.Add(ParseReference{TFhirSpecimen}(child, path+'/specimen')){y.2}
      else if (child.localName = 'result') then
        element.resultList.Add(ParseReference{TFhirObservation}(child, path+'/result')){y.2}
      else if (child.localName = 'imagingStudy') then
        element.imagingStudyList.Add(ParseReference{TFhirImagingStudy}(child, path+'/imagingStudy')){y.2}
      else if (child.localName = 'media') then
        element.mediaList.Add(ParseDiagnosticReportMedia(child, path+'/media')){y.2}
      else if (child.localName = 'conclusion') then
        element.conclusionElement := ParseString(child, path+'/conclusion') {b}
      else if (child.localName = 'conclusionCode') then
        element.conclusionCodeList.Add(ParseCodeableConcept(child, path+'/conclusionCode')){y.2}
      else if (child.localName = 'presentedForm') then
        element.presentedFormList.Add(ParseAttachment(child, path+'/presentedForm')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDiagnosticReport(xml : TXmlBuilder; name : String; elem : TFhirDiagnosticReport);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeDiagnosticReportChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDiagnosticReportChildren(xml : TXmlBuilder; elem : TFhirDiagnosticReport);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirCarePlan}(xml, 'basedOn', elem.basedOnList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirDiagnosticReportStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) {6} then
    ComposePeriod(xml, 'effectivePeriod', TFhirPeriod(elem.effective))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'effectiveDateTime', TFhirDateTime(elem.effective));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('issued') then
    ComposeInstant(xml, 'issued', elem.issuedElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') then
    for i := 0 to elem.performerList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'performer', elem.performerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('resultsInterpreter') then
    for i := 0 to elem.resultsInterpreterList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'resultsInterpreter', elem.resultsInterpreterList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('specimen') then
    for i := 0 to elem.specimenList.Count - 1 do
      ComposeReference{TFhirSpecimen}(xml, 'specimen', elem.specimenList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('result') then
    for i := 0 to elem.resultList.Count - 1 do
      ComposeReference{TFhirObservation}(xml, 'result', elem.resultList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('imagingStudy') then
    for i := 0 to elem.imagingStudyList.Count - 1 do
      ComposeReference{TFhirImagingStudy}(xml, 'imagingStudy', elem.imagingStudyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('media') then
    for i := 0 to elem.mediaList.Count - 1 do
      ComposeDiagnosticReportMedia(xml, 'media', elem.mediaList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('conclusion') then
    ComposeString(xml, 'conclusion', elem.conclusionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('conclusionCode') then
    for i := 0 to elem.conclusionCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'conclusionCode', elem.conclusionCodeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('presentedForm') then
    for i := 0 to elem.presentedFormList.Count - 1 do
      ComposeAttachment(xml, 'presentedForm', elem.presentedFormList[i]);
end;

{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
function TFHIRXmlParser.ParseDocumentManifestRelated(element : TMXmlElement; path : string) : TFhirDocumentManifestRelated;
var
  child : TMXmlElement;
begin
  result := TFhirDocumentManifestRelated.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDocumentManifestRelatedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDocumentManifestRelatedChild(element : TFhirDocumentManifestRelated; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'ref') then
        element.ref := ParseReference{TFhirReference}(child, path+'/ref') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDocumentManifestRelated(xml : TXmlBuilder; name : String; elem : TFhirDocumentManifestRelated);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDocumentManifestRelatedChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDocumentManifestRelatedChildren(xml : TXmlBuilder; elem : TFhirDocumentManifestRelated);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(xml, 'ref', elem.ref);{x.2a}
end;

function TFHIRXmlParser.ParseDocumentManifest(element : TMXmlElement; path : string) : TFhirDocumentManifest;
var
  child : TMXmlElement;
begin
  result := TFhirDocumentManifest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDocumentManifestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDocumentManifestChild(element : TFhirDocumentManifest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'masterIdentifier') then
        element.masterIdentifier := ParseIdentifier(child, path+'/masterIdentifier') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirDocumentReferenceStatusEnum, SYSTEMS_TFhirDocumentReferenceStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'created') then
        element.createdElement := ParseDateTime(child, path+'/created') {b}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseReference{TFhirPractitioner}(child, path+'/author')){y.2}
      else if (child.localName = 'recipient') then
        element.recipientList.Add(ParseReference{TFhirPatient}(child, path+'/recipient')){y.2}
      else if (child.localName = 'source') then
        element.sourceElement := ParseUri(child, path+'/source') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'content') then
        element.contentList.Add(ParseReference{TFhirReference}(child, path+'/content')){y.2}
      else if (child.localName = 'related') then
        element.relatedList.Add(ParseDocumentManifestRelated(child, path+'/related')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDocumentManifest(xml : TXmlBuilder; name : String; elem : TFhirDocumentManifest);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeDocumentManifestChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDocumentManifestChildren(xml : TXmlBuilder; elem : TFhirDocumentManifest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('masterIdentifier') then
    ComposeIdentifier(xml, 'masterIdentifier', elem.masterIdentifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirDocumentReferenceStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTime(xml, 'created', elem.createdElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('recipient') then
    for i := 0 to elem.recipientList.Count - 1 do
      ComposeReference{TFhirPatient}(xml, 'recipient', elem.recipientList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('source') then
    ComposeUri(xml, 'source', elem.sourceElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  for i := 0 to elem.contentList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'content', elem.contentList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('related') then
    for i := 0 to elem.relatedList.Count - 1 do
      ComposeDocumentManifestRelated(xml, 'related', elem.relatedList[i]);
end;

{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
function TFHIRXmlParser.ParseDocumentReferenceRelatesTo(element : TMXmlElement; path : string) : TFhirDocumentReferenceRelatesTo;
var
  child : TMXmlElement;
begin
  result := TFhirDocumentReferenceRelatesTo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDocumentReferenceRelatesToChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDocumentReferenceRelatesToChild(element : TFhirDocumentReferenceRelatesTo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseEnum(CODES_TFhirDocumentRelationshipTypeEnum, SYSTEMS_TFhirDocumentRelationshipTypeEnum, path+'/code', child){1a}
      else if (child.localName = 'target') then
        element.target := ParseReference{TFhirDocumentReference}(child, path+'/target') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDocumentReferenceRelatesTo(xml : TXmlBuilder; name : String; elem : TFhirDocumentReferenceRelatesTo);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDocumentReferenceRelatesToChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDocumentReferenceRelatesToChildren(xml : TXmlBuilder; elem : TFhirDocumentReferenceRelatesTo);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'code', elem.CodeElement, CODES_TFhirDocumentRelationshipTypeEnum);
  ComposeReference{TFhirDocumentReference}(xml, 'target', elem.target);{x.2a}
end;

function TFHIRXmlParser.ParseDocumentReferenceContent(element : TMXmlElement; path : string) : TFhirDocumentReferenceContent;
var
  child : TMXmlElement;
begin
  result := TFhirDocumentReferenceContent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDocumentReferenceContentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDocumentReferenceContentChild(element : TFhirDocumentReferenceContent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'attachment') then
        element.attachment := ParseAttachment(child, path+'/attachment') {b}
      else if (child.localName = 'format') then
        element.format := ParseCoding(child, path+'/format') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDocumentReferenceContent(xml : TXmlBuilder; name : String; elem : TFhirDocumentReferenceContent);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDocumentReferenceContentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDocumentReferenceContentChildren(xml : TXmlBuilder; elem : TFhirDocumentReferenceContent);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeAttachment(xml, 'attachment', elem.attachment);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(xml, 'format', elem.format);{x.2a}
end;

function TFHIRXmlParser.ParseDocumentReferenceContext(element : TMXmlElement; path : string) : TFhirDocumentReferenceContext;
var
  child : TMXmlElement;
begin
  result := TFhirDocumentReferenceContext.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDocumentReferenceContextChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDocumentReferenceContextChild(element : TFhirDocumentReferenceContext; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'encounter') then
        element.encounterList.Add(ParseReference{TFhirEncounter}(child, path+'/encounter')){y.2}
      else if (child.localName = 'event') then
        element.eventList.Add(ParseCodeableConcept(child, path+'/event')){y.2}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'facilityType') then
        element.facilityType := ParseCodeableConcept(child, path+'/facilityType') {b}
      else if (child.localName = 'practiceSetting') then
        element.practiceSetting := ParseCodeableConcept(child, path+'/practiceSetting') {b}
      else if (child.localName = 'sourcePatientInfo') then
        element.sourcePatientInfo := ParseReference{TFhirPatient}(child, path+'/sourcePatientInfo') {b}
      else if (child.localName = 'related') then
        element.relatedList.Add(ParseReference{TFhirReference}(child, path+'/related')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDocumentReferenceContext(xml : TXmlBuilder; name : String; elem : TFhirDocumentReferenceContext);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeDocumentReferenceContextChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDocumentReferenceContextChildren(xml : TXmlBuilder; elem : TFhirDocumentReferenceContext);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.encounterList.Count - 1 do
      ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.eventList.Count - 1 do
      ComposeCodeableConcept(xml, 'event', elem.eventList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'facilityType', elem.facilityType);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'practiceSetting', elem.practiceSetting);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPatient}(xml, 'sourcePatientInfo', elem.sourcePatientInfo);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.relatedList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'related', elem.relatedList[i]);
end;

function TFHIRXmlParser.ParseDocumentReference(element : TMXmlElement; path : string) : TFhirDocumentReference;
var
  child : TMXmlElement;
begin
  result := TFhirDocumentReference.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDocumentReferenceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDocumentReferenceChild(element : TFhirDocumentReference; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'masterIdentifier') then
        element.masterIdentifier := ParseIdentifier(child, path+'/masterIdentifier') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirDocumentReferenceStatusEnum, SYSTEMS_TFhirDocumentReferenceStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'docStatus') then
        element.docStatusElement := ParseEnum(CODES_TFhirCompositionStatusEnum, SYSTEMS_TFhirCompositionStatusEnum, path+'/docStatus', child){1a}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseInstant(child, path+'/date') {b}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseReference{TFhirPractitioner}(child, path+'/author')){y.2}
      else if (child.localName = 'authenticator') then
        element.authenticator := ParseReference{TFhirPractitioner}(child, path+'/authenticator') {b}
      else if (child.localName = 'custodian') then
        element.custodian := ParseReference{TFhirOrganization}(child, path+'/custodian') {b}
      else if (child.localName = 'relatesTo') then
        element.relatesToList.Add(ParseDocumentReferenceRelatesTo(child, path+'/relatesTo')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'securityLabel') then
        element.securityLabelList.Add(ParseCodeableConcept(child, path+'/securityLabel')){y.2}
      else if (child.localName = 'content') then
        element.contentList.Add(ParseDocumentReferenceContent(child, path+'/content')){y.2}
      else if (child.localName = 'context') then
        element.context := ParseDocumentReferenceContext(child, path+'/context') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDocumentReference(xml : TXmlBuilder; name : String; elem : TFhirDocumentReference);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeDocumentReferenceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeDocumentReferenceChildren(xml : TXmlBuilder; elem : TFhirDocumentReference);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('masterIdentifier') then
    ComposeIdentifier(xml, 'masterIdentifier', elem.masterIdentifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirDocumentReferenceStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('docStatus') then
    ComposeEnum(xml, 'docStatus', elem.DocStatusElement, CODES_TFhirCompositionStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeInstant(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('authenticator') then
    ComposeReference{TFhirPractitioner}(xml, 'authenticator', elem.authenticator);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('custodian') then
    ComposeReference{TFhirOrganization}(xml, 'custodian', elem.custodian);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('relatesTo') then
    for i := 0 to elem.relatesToList.Count - 1 do
      ComposeDocumentReferenceRelatesTo(xml, 'relatesTo', elem.relatesToList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('securityLabel') then
    for i := 0 to elem.securityLabelList.Count - 1 do
      ComposeCodeableConcept(xml, 'securityLabel', elem.securityLabelList[i]);
  for i := 0 to elem.contentList.Count - 1 do
      ComposeDocumentReferenceContent(xml, 'content', elem.contentList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeDocumentReferenceContext(xml, 'context', elem.context);{x.2a}
end;

{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_EFFECTEVIDENCESYNTHESIS}
function TFHIRXmlParser.ParseEffectEvidenceSynthesisSampleSize(element : TMXmlElement; path : string) : TFhirEffectEvidenceSynthesisSampleSize;
var
  child : TMXmlElement;
begin
  result := TFhirEffectEvidenceSynthesisSampleSize.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEffectEvidenceSynthesisSampleSizeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEffectEvidenceSynthesisSampleSizeChild(element : TFhirEffectEvidenceSynthesisSampleSize; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'numberOfStudies') then
        element.numberOfStudiesElement := ParseInteger(child, path+'/numberOfStudies') {b}
      else if (child.localName = 'numberOfParticipants') then
        element.numberOfParticipantsElement := ParseInteger(child, path+'/numberOfParticipants') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEffectEvidenceSynthesisSampleSize(xml : TXmlBuilder; name : String; elem : TFhirEffectEvidenceSynthesisSampleSize);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEffectEvidenceSynthesisSampleSizeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEffectEvidenceSynthesisSampleSizeChildren(xml : TXmlBuilder; elem : TFhirEffectEvidenceSynthesisSampleSize);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'numberOfStudies', elem.numberOfStudiesElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'numberOfParticipants', elem.numberOfParticipantsElement);{x.2b}
end;

function TFHIRXmlParser.ParseEffectEvidenceSynthesisResultsByExposure(element : TMXmlElement; path : string) : TFhirEffectEvidenceSynthesisResultsByExposure;
var
  child : TMXmlElement;
begin
  result := TFhirEffectEvidenceSynthesisResultsByExposure.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEffectEvidenceSynthesisResultsByExposureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEffectEvidenceSynthesisResultsByExposureChild(element : TFhirEffectEvidenceSynthesisResultsByExposure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'exposureState') then
        element.exposureStateElement := ParseEnum(CODES_TFhirExposureStateEnum, SYSTEMS_TFhirExposureStateEnum, path+'/exposureState', child){1a}
      else if (child.localName = 'variantState') then
        element.variantState := ParseCodeableConcept(child, path+'/variantState') {b}
      else if (child.localName = 'riskEvidenceSynthesis') then
        element.riskEvidenceSynthesis := ParseReference{TFhirRiskEvidenceSynthesis}(child, path+'/riskEvidenceSynthesis') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEffectEvidenceSynthesisResultsByExposure(xml : TXmlBuilder; name : String; elem : TFhirEffectEvidenceSynthesisResultsByExposure);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEffectEvidenceSynthesisResultsByExposureChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEffectEvidenceSynthesisResultsByExposureChildren(xml : TXmlBuilder; elem : TFhirEffectEvidenceSynthesisResultsByExposure);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'exposureState', elem.ExposureStateElement, CODES_TFhirExposureStateEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'variantState', elem.variantState);{x.2a}
  ComposeReference{TFhirRiskEvidenceSynthesis}(xml, 'riskEvidenceSynthesis', elem.riskEvidenceSynthesis);{x.2a}
end;

function TFHIRXmlParser.ParseEffectEvidenceSynthesisEffectEstimate(element : TMXmlElement; path : string) : TFhirEffectEvidenceSynthesisEffectEstimate;
var
  child : TMXmlElement;
begin
  result := TFhirEffectEvidenceSynthesisEffectEstimate.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEffectEvidenceSynthesisEffectEstimateChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEffectEvidenceSynthesisEffectEstimateChild(element : TFhirEffectEvidenceSynthesisEffectEstimate; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'variantState') then
        element.variantState := ParseCodeableConcept(child, path+'/variantState') {b}
      else if (child.localName = 'value') then
        element.valueElement := ParseDecimal(child, path+'/value') {b}
      else if (child.localName = 'unitOfMeasure') then
        element.unitOfMeasure := ParseCodeableConcept(child, path+'/unitOfMeasure') {b}
      else if (child.localName = 'precisionEstimate') then
        element.precisionEstimateList.Add(ParseEffectEvidenceSynthesisEffectEstimatePrecisionEstimate(child, path+'/precisionEstimate')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEffectEvidenceSynthesisEffectEstimate(xml : TXmlBuilder; name : String; elem : TFhirEffectEvidenceSynthesisEffectEstimate);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEffectEvidenceSynthesisEffectEstimateChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEffectEvidenceSynthesisEffectEstimateChildren(xml : TXmlBuilder; elem : TFhirEffectEvidenceSynthesisEffectEstimate);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'variantState', elem.variantState);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'value', elem.valueElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'unitOfMeasure', elem.unitOfMeasure);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.precisionEstimateList.Count - 1 do
      ComposeEffectEvidenceSynthesisEffectEstimatePrecisionEstimate(xml, 'precisionEstimate', elem.precisionEstimateList[i]);
end;

function TFHIRXmlParser.ParseEffectEvidenceSynthesisEffectEstimatePrecisionEstimate(element : TMXmlElement; path : string) : TFhirEffectEvidenceSynthesisEffectEstimatePrecisionEstimate;
var
  child : TMXmlElement;
begin
  result := TFhirEffectEvidenceSynthesisEffectEstimatePrecisionEstimate.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEffectEvidenceSynthesisEffectEstimatePrecisionEstimateChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEffectEvidenceSynthesisEffectEstimatePrecisionEstimateChild(element : TFhirEffectEvidenceSynthesisEffectEstimatePrecisionEstimate; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'level') then
        element.levelElement := ParseDecimal(child, path+'/level') {b}
      else if (child.localName = 'from') then
        element.fromElement := ParseDecimal(child, path+'/from') {b}
      else if (child.localName = 'to') then
        element.to_Element := ParseDecimal(child, path+'/to') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEffectEvidenceSynthesisEffectEstimatePrecisionEstimate(xml : TXmlBuilder; name : String; elem : TFhirEffectEvidenceSynthesisEffectEstimatePrecisionEstimate);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEffectEvidenceSynthesisEffectEstimatePrecisionEstimateChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEffectEvidenceSynthesisEffectEstimatePrecisionEstimateChildren(xml : TXmlBuilder; elem : TFhirEffectEvidenceSynthesisEffectEstimatePrecisionEstimate);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'level', elem.levelElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'from', elem.fromElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'to', elem.to_Element);{x.2b}
end;

function TFHIRXmlParser.ParseEffectEvidenceSynthesisCertainty(element : TMXmlElement; path : string) : TFhirEffectEvidenceSynthesisCertainty;
var
  child : TMXmlElement;
begin
  result := TFhirEffectEvidenceSynthesisCertainty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEffectEvidenceSynthesisCertaintyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEffectEvidenceSynthesisCertaintyChild(element : TFhirEffectEvidenceSynthesisCertainty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'rating') then
        element.ratingList.Add(ParseCodeableConcept(child, path+'/rating')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'certaintySubcomponent') then
        element.certaintySubcomponentList.Add(ParseEffectEvidenceSynthesisCertaintyCertaintySubcomponent(child, path+'/certaintySubcomponent')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEffectEvidenceSynthesisCertainty(xml : TXmlBuilder; name : String; elem : TFhirEffectEvidenceSynthesisCertainty);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEffectEvidenceSynthesisCertaintyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEffectEvidenceSynthesisCertaintyChildren(xml : TXmlBuilder; elem : TFhirEffectEvidenceSynthesisCertainty);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.ratingList.Count - 1 do
      ComposeCodeableConcept(xml, 'rating', elem.ratingList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.certaintySubcomponentList.Count - 1 do
      ComposeEffectEvidenceSynthesisCertaintyCertaintySubcomponent(xml, 'certaintySubcomponent', elem.certaintySubcomponentList[i]);
end;

function TFHIRXmlParser.ParseEffectEvidenceSynthesisCertaintyCertaintySubcomponent(element : TMXmlElement; path : string) : TFhirEffectEvidenceSynthesisCertaintyCertaintySubcomponent;
var
  child : TMXmlElement;
begin
  result := TFhirEffectEvidenceSynthesisCertaintyCertaintySubcomponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEffectEvidenceSynthesisCertaintyCertaintySubcomponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEffectEvidenceSynthesisCertaintyCertaintySubcomponentChild(element : TFhirEffectEvidenceSynthesisCertaintyCertaintySubcomponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'rating') then
        element.ratingList.Add(ParseCodeableConcept(child, path+'/rating')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEffectEvidenceSynthesisCertaintyCertaintySubcomponent(xml : TXmlBuilder; name : String; elem : TFhirEffectEvidenceSynthesisCertaintyCertaintySubcomponent);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEffectEvidenceSynthesisCertaintyCertaintySubcomponentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEffectEvidenceSynthesisCertaintyCertaintySubcomponentChildren(xml : TXmlBuilder; elem : TFhirEffectEvidenceSynthesisCertaintyCertaintySubcomponent);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.ratingList.Count - 1 do
      ComposeCodeableConcept(xml, 'rating', elem.ratingList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

function TFHIRXmlParser.ParseEffectEvidenceSynthesis(element : TMXmlElement; path : string) : TFhirEffectEvidenceSynthesis;
var
  child : TMXmlElement;
begin
  result := TFhirEffectEvidenceSynthesis.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEffectEvidenceSynthesisChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEffectEvidenceSynthesisChild(element : TFhirEffectEvidenceSynthesis; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'approvalDate') then
        element.approvalDateElement := ParseDate(child, path+'/approvalDate') {b}
      else if (child.localName = 'lastReviewDate') then
        element.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {b}
      else if (child.localName = 'topic') then
        element.topicList.Add(ParseCodeableConcept(child, path+'/topic')){y.2}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseContactDetail(child, path+'/author')){y.2}
      else if (child.localName = 'editor') then
        element.editorList.Add(ParseContactDetail(child, path+'/editor')){y.2}
      else if (child.localName = 'reviewer') then
        element.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')){y.2}
      else if (child.localName = 'endorser') then
        element.endorserList.Add(ParseContactDetail(child, path+'/endorser')){y.2}
      else if (child.localName = 'relatedArtifact') then
        element.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')){y.2}
      else if (child.localName = 'synthesisType') then
        element.synthesisType := ParseCodeableConcept(child, path+'/synthesisType') {b}
      else if (child.localName = 'studyType') then
        element.studyType := ParseCodeableConcept(child, path+'/studyType') {b}
      else if (child.localName = 'population') then
        element.population := ParseReference{TFhirEvidenceVariable}(child, path+'/population') {b}
      else if (child.localName = 'exposure') then
        element.exposure := ParseReference{TFhirEvidenceVariable}(child, path+'/exposure') {b}
      else if (child.localName = 'exposureAlternative') then
        element.exposureAlternative := ParseReference{TFhirEvidenceVariable}(child, path+'/exposureAlternative') {b}
      else if (child.localName = 'outcome') then
        element.outcome := ParseReference{TFhirEvidenceVariable}(child, path+'/outcome') {b}
      else if (child.localName = 'sampleSize') then
        element.sampleSize := ParseEffectEvidenceSynthesisSampleSize(child, path+'/sampleSize') {b}
      else if (child.localName = 'resultsByExposure') then
        element.resultsByExposureList.Add(ParseEffectEvidenceSynthesisResultsByExposure(child, path+'/resultsByExposure')){y.2}
      else if (child.localName = 'effectEstimate') then
        element.effectEstimateList.Add(ParseEffectEvidenceSynthesisEffectEstimate(child, path+'/effectEstimate')){y.2}
      else if (child.localName = 'certainty') then
        element.certaintyList.Add(ParseEffectEvidenceSynthesisCertainty(child, path+'/certainty')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEffectEvidenceSynthesis(xml : TXmlBuilder; name : String; elem : TFhirEffectEvidenceSynthesis);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeEffectEvidenceSynthesisChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEffectEvidenceSynthesisChildren(xml : TXmlBuilder; elem : TFhirEffectEvidenceSynthesis);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDate(xml, 'approvalDate', elem.approvalDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDate(xml, 'lastReviewDate', elem.lastReviewDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(xml, 'effectivePeriod', elem.effectivePeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('topic') then
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', elem.topicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('author') then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('editor') then
    for i := 0 to elem.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', elem.editorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reviewer') then
    for i := 0 to elem.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', elem.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('endorser') then
    for i := 0 to elem.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', elem.endorserList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') then
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', elem.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('synthesisType') then
    ComposeCodeableConcept(xml, 'synthesisType', elem.synthesisType);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('studyType') then
    ComposeCodeableConcept(xml, 'studyType', elem.studyType);{x.2a}
  ComposeReference{TFhirEvidenceVariable}(xml, 'population', elem.population);{x.2a}
  ComposeReference{TFhirEvidenceVariable}(xml, 'exposure', elem.exposure);{x.2a}
  ComposeReference{TFhirEvidenceVariable}(xml, 'exposureAlternative', elem.exposureAlternative);{x.2a}
  ComposeReference{TFhirEvidenceVariable}(xml, 'outcome', elem.outcome);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('sampleSize') then
    ComposeEffectEvidenceSynthesisSampleSize(xml, 'sampleSize', elem.sampleSize);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('resultsByExposure') then
    for i := 0 to elem.resultsByExposureList.Count - 1 do
      ComposeEffectEvidenceSynthesisResultsByExposure(xml, 'resultsByExposure', elem.resultsByExposureList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectEstimate') then
    for i := 0 to elem.effectEstimateList.Count - 1 do
      ComposeEffectEvidenceSynthesisEffectEstimate(xml, 'effectEstimate', elem.effectEstimateList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('certainty') then
    for i := 0 to elem.certaintyList.Count - 1 do
      ComposeEffectEvidenceSynthesisCertainty(xml, 'certainty', elem.certaintyList[i]);
end;

{$ENDIF FHIR_EFFECTEVIDENCESYNTHESIS}
{$IFDEF FHIR_ENCOUNTER}
function TFHIRXmlParser.ParseEncounterStatusHistory(element : TMXmlElement; path : string) : TFhirEncounterStatusHistory;
var
  child : TMXmlElement;
begin
  result := TFhirEncounterStatusHistory.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEncounterStatusHistoryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEncounterStatusHistoryChild(element : TFhirEncounterStatusHistory; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirEncounterStatusEnum, SYSTEMS_TFhirEncounterStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEncounterStatusHistory(xml : TXmlBuilder; name : String; elem : TFhirEncounterStatusHistory);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEncounterStatusHistoryChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEncounterStatusHistoryChildren(xml : TXmlBuilder; elem : TFhirEncounterStatusHistory);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirEncounterStatusEnum);
  ComposePeriod(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParseEncounterClassHistory(element : TMXmlElement; path : string) : TFhirEncounterClassHistory;
var
  child : TMXmlElement;
begin
  result := TFhirEncounterClassHistory.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEncounterClassHistoryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEncounterClassHistoryChild(element : TFhirEncounterClassHistory; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'class') then
        element.class_ := ParseCoding(child, path+'/class') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEncounterClassHistory(xml : TXmlBuilder; name : String; elem : TFhirEncounterClassHistory);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEncounterClassHistoryChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEncounterClassHistoryChildren(xml : TXmlBuilder; elem : TFhirEncounterClassHistory);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCoding(xml, 'class', elem.class_);{x.2a}
  ComposePeriod(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParseEncounterParticipant(element : TMXmlElement; path : string) : TFhirEncounterParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirEncounterParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEncounterParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEncounterParticipantChild(element : TFhirEncounterParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'individual') then
        element.individual := ParseReference{TFhirPractitioner}(child, path+'/individual') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEncounterParticipant(xml : TXmlBuilder; name : String; elem : TFhirEncounterParticipant);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEncounterParticipantChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEncounterParticipantChildren(xml : TXmlBuilder; elem : TFhirEncounterParticipant);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'individual', elem.individual);{x.2a}
end;

function TFHIRXmlParser.ParseEncounterDiagnosis(element : TMXmlElement; path : string) : TFhirEncounterDiagnosis;
var
  child : TMXmlElement;
begin
  result := TFhirEncounterDiagnosis.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEncounterDiagnosisChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEncounterDiagnosisChild(element : TFhirEncounterDiagnosis; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'condition') then
        element.condition := ParseReference{TFhirCondition}(child, path+'/condition') {b}
      else if (child.localName = 'use') then
        element.use := ParseCodeableConcept(child, path+'/use') {b}
      else if (child.localName = 'rank') then
        element.rankElement := ParsePositiveInt(child, path+'/rank') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEncounterDiagnosis(xml : TXmlBuilder; name : String; elem : TFhirEncounterDiagnosis);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEncounterDiagnosisChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEncounterDiagnosisChildren(xml : TXmlBuilder; elem : TFhirEncounterDiagnosis);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeReference{TFhirCondition}(xml, 'condition', elem.condition);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'use', elem.use);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'rank', elem.rankElement);{x.2b}
end;

function TFHIRXmlParser.ParseEncounterHospitalization(element : TMXmlElement; path : string) : TFhirEncounterHospitalization;
var
  child : TMXmlElement;
begin
  result := TFhirEncounterHospitalization.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEncounterHospitalizationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEncounterHospitalizationChild(element : TFhirEncounterHospitalization; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'preAdmissionIdentifier') then
        element.preAdmissionIdentifier := ParseIdentifier(child, path+'/preAdmissionIdentifier') {b}
      else if (child.localName = 'origin') then
        element.origin := ParseReference{TFhirLocation}(child, path+'/origin') {b}
      else if (child.localName = 'admitSource') then
        element.admitSource := ParseCodeableConcept(child, path+'/admitSource') {b}
      else if (child.localName = 'reAdmission') then
        element.reAdmission := ParseCodeableConcept(child, path+'/reAdmission') {b}
      else if (child.localName = 'dietPreference') then
        element.dietPreferenceList.Add(ParseCodeableConcept(child, path+'/dietPreference')){y.2}
      else if (child.localName = 'specialCourtesy') then
        element.specialCourtesyList.Add(ParseCodeableConcept(child, path+'/specialCourtesy')){y.2}
      else if (child.localName = 'specialArrangement') then
        element.specialArrangementList.Add(ParseCodeableConcept(child, path+'/specialArrangement')){y.2}
      else if (child.localName = 'destination') then
        element.destination := ParseReference{TFhirLocation}(child, path+'/destination') {b}
      else if (child.localName = 'dischargeDisposition') then
        element.dischargeDisposition := ParseCodeableConcept(child, path+'/dischargeDisposition') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEncounterHospitalization(xml : TXmlBuilder; name : String; elem : TFhirEncounterHospitalization);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEncounterHospitalizationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEncounterHospitalizationChildren(xml : TXmlBuilder; elem : TFhirEncounterHospitalization);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'preAdmissionIdentifier', elem.preAdmissionIdentifier);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(xml, 'origin', elem.origin);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'admitSource', elem.admitSource);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'reAdmission', elem.reAdmission);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.dietPreferenceList.Count - 1 do
      ComposeCodeableConcept(xml, 'dietPreference', elem.dietPreferenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.specialCourtesyList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialCourtesy', elem.specialCourtesyList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.specialArrangementList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialArrangement', elem.specialArrangementList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirLocation}(xml, 'destination', elem.destination);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'dischargeDisposition', elem.dischargeDisposition);{x.2a}
end;

function TFHIRXmlParser.ParseEncounterLocation(element : TMXmlElement; path : string) : TFhirEncounterLocation;
var
  child : TMXmlElement;
begin
  result := TFhirEncounterLocation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEncounterLocationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEncounterLocationChild(element : TFhirEncounterLocation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'location') then
        element.location := ParseReference{TFhirLocation}(child, path+'/location') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirEncounterLocationStatusEnum, SYSTEMS_TFhirEncounterLocationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'physicalType') then
        element.physicalType := ParseCodeableConcept(child, path+'/physicalType') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEncounterLocation(xml : TXmlBuilder; name : String; elem : TFhirEncounterLocation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEncounterLocationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEncounterLocationChildren(xml : TXmlBuilder; elem : TFhirEncounterLocation);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeReference{TFhirLocation}(xml, 'location', elem.location);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirEncounterLocationStatusEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'physicalType', elem.physicalType);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParseEncounter(element : TMXmlElement; path : string) : TFhirEncounter;
var
  child : TMXmlElement;
begin
  result := TFhirEncounter.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEncounterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEncounterChild(element : TFhirEncounter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirEncounterStatusEnum, SYSTEMS_TFhirEncounterStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'statusHistory') then
        element.statusHistoryList.Add(ParseEncounterStatusHistory(child, path+'/statusHistory')){y.2}
      else if (child.localName = 'class') then
        element.class_ := ParseCoding(child, path+'/class') {b}
      else if (child.localName = 'classHistory') then
        element.classHistoryList.Add(ParseEncounterClassHistory(child, path+'/classHistory')){y.2}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'serviceType') then
        element.serviceType := ParseCodeableConcept(child, path+'/serviceType') {b}
      else if (child.localName = 'priority') then
        element.priority := ParseCodeableConcept(child, path+'/priority') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'episodeOfCare') then
        element.episodeOfCareList.Add(ParseReference{TFhirEpisodeOfCare}(child, path+'/episodeOfCare')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirServiceRequest}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'participant') then
        element.participantList.Add(ParseEncounterParticipant(child, path+'/participant')){y.2}
      else if (child.localName = 'appointment') then
        element.appointmentList.Add(ParseReference{TFhirAppointment}(child, path+'/appointment')){y.2}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'length') then
        element.length := ParseDuration(child, path+'/length') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'diagnosis') then
        element.diagnosisList.Add(ParseEncounterDiagnosis(child, path+'/diagnosis')){y.2}
      else if (child.localName = 'account') then
        element.accountList.Add(ParseReference{TFhirAccount}(child, path+'/account')){y.2}
      else if (child.localName = 'hospitalization') then
        element.hospitalization := ParseEncounterHospitalization(child, path+'/hospitalization') {b}
      else if (child.localName = 'location') then
        element.locationList.Add(ParseEncounterLocation(child, path+'/location')){y.2}
      else if (child.localName = 'serviceProvider') then
        element.serviceProvider := ParseReference{TFhirOrganization}(child, path+'/serviceProvider') {b}
      else if (child.localName = 'partOf') then
        element.partOf := ParseReference{TFhirEncounter}(child, path+'/partOf') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEncounter(xml : TXmlBuilder; name : String; elem : TFhirEncounter);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeEncounterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEncounterChildren(xml : TXmlBuilder; elem : TFhirEncounter);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirEncounterStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('statusHistory') then
    for i := 0 to elem.statusHistoryList.Count - 1 do
      ComposeEncounterStatusHistory(xml, 'statusHistory', elem.statusHistoryList[i]);
  ComposeCoding(xml, 'class', elem.class_);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('classHistory') then
    for i := 0 to elem.classHistoryList.Count - 1 do
      ComposeEncounterClassHistory(xml, 'classHistory', elem.classHistoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('serviceType') then
    ComposeCodeableConcept(xml, 'serviceType', elem.serviceType);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('priority') then
    ComposeCodeableConcept(xml, 'priority', elem.priority);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('episodeOfCare') then
    for i := 0 to elem.episodeOfCareList.Count - 1 do
      ComposeReference{TFhirEpisodeOfCare}(xml, 'episodeOfCare', elem.episodeOfCareList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('participant') then
    for i := 0 to elem.participantList.Count - 1 do
      ComposeEncounterParticipant(xml, 'participant', elem.participantList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('appointment') then
    for i := 0 to elem.appointmentList.Count - 1 do
      ComposeReference{TFhirAppointment}(xml, 'appointment', elem.appointmentList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('length') then
    ComposeDuration(xml, 'length', elem.length);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('diagnosis') then
    for i := 0 to elem.diagnosisList.Count - 1 do
      ComposeEncounterDiagnosis(xml, 'diagnosis', elem.diagnosisList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('account') then
    for i := 0 to elem.accountList.Count - 1 do
      ComposeReference{TFhirAccount}(xml, 'account', elem.accountList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('hospitalization') then
    ComposeEncounterHospitalization(xml, 'hospitalization', elem.hospitalization);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('location') then
    for i := 0 to elem.locationList.Count - 1 do
      ComposeEncounterLocation(xml, 'location', elem.locationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('serviceProvider') then
    ComposeReference{TFhirOrganization}(xml, 'serviceProvider', elem.serviceProvider);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('partOf') then
    ComposeReference{TFhirEncounter}(xml, 'partOf', elem.partOf);{x.2a}
end;

{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
function TFHIRXmlParser.ParseEndpoint(element : TMXmlElement; path : string) : TFhirEndpoint;
var
  child : TMXmlElement;
begin
  result := TFhirEndpoint.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEndpointChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEndpointChild(element : TFhirEndpoint; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirEndpointStatusEnum, SYSTEMS_TFhirEndpointStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'connectionType') then
        element.connectionType := ParseCoding(child, path+'/connectionType') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'managingOrganization') then
        element.managingOrganization := ParseReference{TFhirOrganization}(child, path+'/managingOrganization') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactPoint(child, path+'/contact')){y.2}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'payloadType') then
        element.payloadTypeList.Add(ParseCodeableConcept(child, path+'/payloadType')){y.2}
      else if (child.localName = 'payloadMimeType') then
        element.payloadMimeTypeList.Add(ParseCode(child, path+'/payloadMimeType')){y.2}
      else if (child.localName = 'address') then
        element.addressElement := ParseUrl(child, path+'/address') {b}
      else if (child.localName = 'header') then
        element.headerList.Add(ParseString(child, path+'/header')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEndpoint(xml : TXmlBuilder; name : String; elem : TFhirEndpoint);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeEndpointChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEndpointChildren(xml : TXmlBuilder; elem : TFhirEndpoint);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirEndpointStatusEnum);
  ComposeCoding(xml, 'connectionType', elem.connectionType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('managingOrganization') then
    ComposeReference{TFhirOrganization}(xml, 'managingOrganization', elem.managingOrganization);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactPoint(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  for i := 0 to elem.payloadTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'payloadType', elem.payloadTypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('payloadMimeType') then
    for i := 0 to elem.payloadMimeTypeList.Count - 1 do
      ComposeCode(xml, 'payloadMimeType', elem.payloadMimeTypeList[i]);
  ComposeUrl(xml, 'address', elem.addressElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('header') then
    for i := 0 to elem.headerList.Count - 1 do
      ComposeString(xml, 'header', elem.headerList[i]);
end;

{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
function TFHIRXmlParser.ParseEnrollmentRequest(element : TMXmlElement; path : string) : TFhirEnrollmentRequest;
var
  child : TMXmlElement;
begin
  result := TFhirEnrollmentRequest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEnrollmentRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEnrollmentRequestChild(element : TFhirEnrollmentRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'created') then
        element.createdElement := ParseDateTime(child, path+'/created') {b}
      else if (child.localName = 'insurer') then
        element.insurer := ParseReference{TFhirOrganization}(child, path+'/insurer') {b}
      else if (child.localName = 'provider') then
        element.provider := ParseReference{TFhirPractitioner}(child, path+'/provider') {b}
      else if (child.localName = 'candidate') then
        element.candidate := ParseReference{TFhirPatient}(child, path+'/candidate') {b}
      else if (child.localName = 'coverage') then
        element.coverage := ParseReference{TFhirCoverage}(child, path+'/coverage') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEnrollmentRequest(xml : TXmlBuilder; name : String; elem : TFhirEnrollmentRequest);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeEnrollmentRequestChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEnrollmentRequestChildren(xml : TXmlBuilder; elem : TFhirEnrollmentRequest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTime(xml, 'created', elem.createdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('insurer') then
    ComposeReference{TFhirOrganization}(xml, 'insurer', elem.insurer);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('provider') then
    ComposeReference{TFhirPractitioner}(xml, 'provider', elem.provider);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('candidate') then
    ComposeReference{TFhirPatient}(xml, 'candidate', elem.candidate);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('coverage') then
    ComposeReference{TFhirCoverage}(xml, 'coverage', elem.coverage);{x.2a}
end;

{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
function TFHIRXmlParser.ParseEnrollmentResponse(element : TMXmlElement; path : string) : TFhirEnrollmentResponse;
var
  child : TMXmlElement;
begin
  result := TFhirEnrollmentResponse.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEnrollmentResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEnrollmentResponseChild(element : TFhirEnrollmentResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'request') then
        element.request := ParseReference{TFhirEnrollmentRequest}(child, path+'/request') {b}
      else if (child.localName = 'outcome') then
        element.outcomeElement := ParseEnum(CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum, path+'/outcome', child){1a}
      else if (child.localName = 'disposition') then
        element.dispositionElement := ParseString(child, path+'/disposition') {b}
      else if (child.localName = 'created') then
        element.createdElement := ParseDateTime(child, path+'/created') {b}
      else if (child.localName = 'organization') then
        element.organization := ParseReference{TFhirOrganization}(child, path+'/organization') {b}
      else if (child.localName = 'requestProvider') then
        element.requestProvider := ParseReference{TFhirPractitioner}(child, path+'/requestProvider') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEnrollmentResponse(xml : TXmlBuilder; name : String; elem : TFhirEnrollmentResponse);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeEnrollmentResponseChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEnrollmentResponseChildren(xml : TXmlBuilder; elem : TFhirEnrollmentResponse);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('request') then
    ComposeReference{TFhirEnrollmentRequest}(xml, 'request', elem.request);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('outcome') then
    ComposeEnum(xml, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeString(xml, 'disposition', elem.dispositionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('created') then
    ComposeDateTime(xml, 'created', elem.createdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('organization') then
    ComposeReference{TFhirOrganization}(xml, 'organization', elem.organization);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('requestProvider') then
    ComposeReference{TFhirPractitioner}(xml, 'requestProvider', elem.requestProvider);{x.2a}
end;

{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
function TFHIRXmlParser.ParseEpisodeOfCareStatusHistory(element : TMXmlElement; path : string) : TFhirEpisodeOfCareStatusHistory;
var
  child : TMXmlElement;
begin
  result := TFhirEpisodeOfCareStatusHistory.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEpisodeOfCareStatusHistoryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEpisodeOfCareStatusHistoryChild(element : TFhirEpisodeOfCareStatusHistory; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirEpisodeOfCareStatusEnum, SYSTEMS_TFhirEpisodeOfCareStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEpisodeOfCareStatusHistory(xml : TXmlBuilder; name : String; elem : TFhirEpisodeOfCareStatusHistory);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEpisodeOfCareStatusHistoryChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEpisodeOfCareStatusHistoryChildren(xml : TXmlBuilder; elem : TFhirEpisodeOfCareStatusHistory);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirEpisodeOfCareStatusEnum);
  ComposePeriod(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParseEpisodeOfCareDiagnosis(element : TMXmlElement; path : string) : TFhirEpisodeOfCareDiagnosis;
var
  child : TMXmlElement;
begin
  result := TFhirEpisodeOfCareDiagnosis.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEpisodeOfCareDiagnosisChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEpisodeOfCareDiagnosisChild(element : TFhirEpisodeOfCareDiagnosis; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'condition') then
        element.condition := ParseReference{TFhirCondition}(child, path+'/condition') {b}
      else if (child.localName = 'role') then
        element.role := ParseCodeableConcept(child, path+'/role') {b}
      else if (child.localName = 'rank') then
        element.rankElement := ParsePositiveInt(child, path+'/rank') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEpisodeOfCareDiagnosis(xml : TXmlBuilder; name : String; elem : TFhirEpisodeOfCareDiagnosis);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEpisodeOfCareDiagnosisChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEpisodeOfCareDiagnosisChildren(xml : TXmlBuilder; elem : TFhirEpisodeOfCareDiagnosis);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeReference{TFhirCondition}(xml, 'condition', elem.condition);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'role', elem.role);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'rank', elem.rankElement);{x.2b}
end;

function TFHIRXmlParser.ParseEpisodeOfCare(element : TMXmlElement; path : string) : TFhirEpisodeOfCare;
var
  child : TMXmlElement;
begin
  result := TFhirEpisodeOfCare.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEpisodeOfCareChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEpisodeOfCareChild(element : TFhirEpisodeOfCare; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirEpisodeOfCareStatusEnum, SYSTEMS_TFhirEpisodeOfCareStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'statusHistory') then
        element.statusHistoryList.Add(ParseEpisodeOfCareStatusHistory(child, path+'/statusHistory')){y.2}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'diagnosis') then
        element.diagnosisList.Add(ParseEpisodeOfCareDiagnosis(child, path+'/diagnosis')){y.2}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'managingOrganization') then
        element.managingOrganization := ParseReference{TFhirOrganization}(child, path+'/managingOrganization') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'referralRequest') then
        element.referralRequestList.Add(ParseReference{TFhirServiceRequest}(child, path+'/referralRequest')){y.2}
      else if (child.localName = 'careManager') then
        element.careManager := ParseReference{TFhirPractitioner}(child, path+'/careManager') {b}
      else if (child.localName = 'team') then
        element.teamList.Add(ParseReference{TFhirCareTeam}(child, path+'/team')){y.2}
      else if (child.localName = 'account') then
        element.accountList.Add(ParseReference{TFhirAccount}(child, path+'/account')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEpisodeOfCare(xml : TXmlBuilder; name : String; elem : TFhirEpisodeOfCare);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeEpisodeOfCareChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEpisodeOfCareChildren(xml : TXmlBuilder; elem : TFhirEpisodeOfCare);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirEpisodeOfCareStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('statusHistory') then
    for i := 0 to elem.statusHistoryList.Count - 1 do
      ComposeEpisodeOfCareStatusHistory(xml, 'statusHistory', elem.statusHistoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('diagnosis') then
    for i := 0 to elem.diagnosisList.Count - 1 do
      ComposeEpisodeOfCareDiagnosis(xml, 'diagnosis', elem.diagnosisList[i]);
  ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('managingOrganization') then
    ComposeReference{TFhirOrganization}(xml, 'managingOrganization', elem.managingOrganization);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('referralRequest') then
    for i := 0 to elem.referralRequestList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(xml, 'referralRequest', elem.referralRequestList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('careManager') then
    ComposeReference{TFhirPractitioner}(xml, 'careManager', elem.careManager);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('team') then
    for i := 0 to elem.teamList.Count - 1 do
      ComposeReference{TFhirCareTeam}(xml, 'team', elem.teamList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('account') then
    for i := 0 to elem.accountList.Count - 1 do
      ComposeReference{TFhirAccount}(xml, 'account', elem.accountList[i]);
end;

{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
function TFHIRXmlParser.ParseEventDefinition(element : TMXmlElement; path : string) : TFhirEventDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirEventDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEventDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEventDefinitionChild(element : TFhirEventDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'subtitle') then
        element.subtitleElement := ParseString(child, path+'/subtitle') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'subjectCodeableConcept') then
        element.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept'){x.3}
      else if (child.localName = 'subjectReference') then
        element.subject := ParseReference(child, path+'/subjectReference') {a}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'usage') then
        element.usageElement := ParseString(child, path+'/usage') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'approvalDate') then
        element.approvalDateElement := ParseDate(child, path+'/approvalDate') {b}
      else if (child.localName = 'lastReviewDate') then
        element.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {b}
      else if (child.localName = 'topic') then
        element.topicList.Add(ParseCodeableConcept(child, path+'/topic')){y.2}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseContactDetail(child, path+'/author')){y.2}
      else if (child.localName = 'editor') then
        element.editorList.Add(ParseContactDetail(child, path+'/editor')){y.2}
      else if (child.localName = 'reviewer') then
        element.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')){y.2}
      else if (child.localName = 'endorser') then
        element.endorserList.Add(ParseContactDetail(child, path+'/endorser')){y.2}
      else if (child.localName = 'relatedArtifact') then
        element.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')){y.2}
      else if (child.localName = 'trigger') then
        element.triggerList.Add(ParseTriggerDefinition(child, path+'/trigger')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEventDefinition(xml : TXmlBuilder; name : String; elem : TFhirEventDefinition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeEventDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEventDefinitionChildren(xml : TXmlBuilder; elem : TFhirEventDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('subtitle') then
    ComposeString(xml, 'subtitle', elem.subtitleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(elem.subject))
  else if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(elem.subject));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeString(xml, 'usage', elem.usageElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('approvalDate') then
    ComposeDate(xml, 'approvalDate', elem.approvalDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('lastReviewDate') then
    ComposeDate(xml, 'lastReviewDate', elem.lastReviewDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(xml, 'effectivePeriod', elem.effectivePeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('topic') then
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', elem.topicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('author') then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('editor') then
    for i := 0 to elem.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', elem.editorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reviewer') then
    for i := 0 to elem.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', elem.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('endorser') then
    for i := 0 to elem.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', elem.endorserList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') then
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', elem.relatedArtifactList[i]);
  for i := 0 to elem.triggerList.Count - 1 do
      ComposeTriggerDefinition(xml, 'trigger', elem.triggerList[i]);
end;

{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
function TFHIRXmlParser.ParseEvidence(element : TMXmlElement; path : string) : TFhirEvidence;
var
  child : TMXmlElement;
begin
  result := TFhirEvidence.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceChild(element : TFhirEvidence; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'shortTitle') then
        element.shortTitleElement := ParseString(child, path+'/shortTitle') {b}
      else if (child.localName = 'subtitle') then
        element.subtitleElement := ParseString(child, path+'/subtitle') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'approvalDate') then
        element.approvalDateElement := ParseDate(child, path+'/approvalDate') {b}
      else if (child.localName = 'lastReviewDate') then
        element.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {b}
      else if (child.localName = 'topic') then
        element.topicList.Add(ParseCodeableConcept(child, path+'/topic')){y.2}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseContactDetail(child, path+'/author')){y.2}
      else if (child.localName = 'editor') then
        element.editorList.Add(ParseContactDetail(child, path+'/editor')){y.2}
      else if (child.localName = 'reviewer') then
        element.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')){y.2}
      else if (child.localName = 'endorser') then
        element.endorserList.Add(ParseContactDetail(child, path+'/endorser')){y.2}
      else if (child.localName = 'relatedArtifact') then
        element.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')){y.2}
      else if (child.localName = 'exposureBackground') then
        element.exposureBackground := ParseReference{TFhirEvidenceVariable}(child, path+'/exposureBackground') {b}
      else if (child.localName = 'exposureVariant') then
        element.exposureVariantList.Add(ParseReference{TFhirEvidenceVariable}(child, path+'/exposureVariant')){y.2}
      else if (child.localName = 'outcome') then
        element.outcomeList.Add(ParseReference{TFhirEvidenceVariable}(child, path+'/outcome')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidence(xml : TXmlBuilder; name : String; elem : TFhirEvidence);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeEvidenceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEvidenceChildren(xml : TXmlBuilder; elem : TFhirEvidence);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('shortTitle') then
    ComposeString(xml, 'shortTitle', elem.shortTitleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('subtitle') then
    ComposeString(xml, 'subtitle', elem.subtitleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDate(xml, 'approvalDate', elem.approvalDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDate(xml, 'lastReviewDate', elem.lastReviewDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(xml, 'effectivePeriod', elem.effectivePeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('topic') then
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', elem.topicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('author') then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('editor') then
    for i := 0 to elem.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', elem.editorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reviewer') then
    for i := 0 to elem.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', elem.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('endorser') then
    for i := 0 to elem.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', elem.endorserList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') then
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', elem.relatedArtifactList[i]);
  ComposeReference{TFhirEvidenceVariable}(xml, 'exposureBackground', elem.exposureBackground);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('exposureVariant') then
    for i := 0 to elem.exposureVariantList.Count - 1 do
      ComposeReference{TFhirEvidenceVariable}(xml, 'exposureVariant', elem.exposureVariantList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('outcome') then
    for i := 0 to elem.outcomeList.Count - 1 do
      ComposeReference{TFhirEvidenceVariable}(xml, 'outcome', elem.outcomeList[i]);
end;

{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEVARIABLE}
function TFHIRXmlParser.ParseEvidenceVariableCharacteristic(element : TMXmlElement; path : string) : TFhirEvidenceVariableCharacteristic;
var
  child : TMXmlElement;
begin
  result := TFhirEvidenceVariableCharacteristic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceVariableCharacteristicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceVariableCharacteristicChild(element : TFhirEvidenceVariableCharacteristic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'definitionReference') then
        element.definition := ParseReference(child, path+'/definitionReference') {a}
      else if (child.localName = 'definitionCanonical') then
        element.definition := ParseCanonical(child, path+'/definitionCanonical'){x.3}
      else if (child.localName = 'definitionCodeableConcept') then
        element.definition := ParseCodeableConcept(child, path+'/definitionCodeableConcept'){x.3}
      else if (child.localName = 'definitionExpression') then
        element.definition := ParseExpression(child, path+'/definitionExpression'){x.3}
      else if (child.localName = 'definitionDataRequirement') then
        element.definition := ParseDataRequirement(child, path+'/definitionDataRequirement'){x.3}
      else if (child.localName = 'definitionTriggerDefinition') then
        element.definition := ParseTriggerDefinition(child, path+'/definitionTriggerDefinition'){x.3}
      else if (child.localName = 'usageContext') then
        element.usageContextList.Add(ParseUsageContext(child, path+'/usageContext')){y.2}
      else if (child.localName = 'exclude') then
        element.excludeElement := ParseBoolean(child, path+'/exclude') {b}
      else if (child.localName = 'participantEffectivePeriod') then
        element.participantEffective := ParsePeriod(child, path+'/participantEffectivePeriod'){x.3}
      else if (child.localName = 'participantEffectiveDuration') then
        element.participantEffective := ParseDuration(child, path+'/participantEffectiveDuration'){x.3}
      else if (child.localName = 'participantEffectiveTiming') then
        element.participantEffective := ParseTiming(child, path+'/participantEffectiveTiming'){x.3}
      else if (child.localName = 'participantEffectiveDateTime') then
        element.participantEffective := ParseDateTime(child, path+'/participantEffectiveDateTime'){x.3}
      else if (child.localName = 'timeFromStart') then
        element.timeFromStart := ParseDuration(child, path+'/timeFromStart') {b}
      else if (child.localName = 'groupMeasure') then
        element.groupMeasureElement := ParseEnum(CODES_TFhirGroupMeasureEnum, SYSTEMS_TFhirGroupMeasureEnum, path+'/groupMeasure', child){1a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidenceVariableCharacteristic(xml : TXmlBuilder; name : String; elem : TFhirEvidenceVariableCharacteristic);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeEvidenceVariableCharacteristicChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEvidenceVariableCharacteristicChildren(xml : TXmlBuilder; elem : TFhirEvidenceVariableCharacteristic);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (elem.definition is TFhirReference) {2} then
    ComposeReference(xml, 'definitionReference', TFhirReference(elem.definition))
  else if (elem.definition is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'definitionCanonical', TFhirCanonical(elem.definition))
  else if (elem.definition is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'definitionCodeableConcept', TFhirCodeableConcept(elem.definition))
  else if (elem.definition is TFhirExpression) {6} then
    ComposeExpression(xml, 'definitionExpression', TFhirExpression(elem.definition))
  else if (elem.definition is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'definitionDataRequirement', TFhirDataRequirement(elem.definition))
  else if (elem.definition is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'definitionTriggerDefinition', TFhirTriggerDefinition(elem.definition));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.usageContextList.Count - 1 do
      ComposeUsageContext(xml, 'usageContext', elem.usageContextList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'exclude', elem.excludeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.participantEffective is TFhirPeriod) {6} then
    ComposePeriod(xml, 'participantEffectivePeriod', TFhirPeriod(elem.participantEffective))
  else if (SummaryOption in [soFull, soData]) and (elem.participantEffective is TFhirDuration) {6} then
    ComposeDuration(xml, 'participantEffectiveDuration', TFhirDuration(elem.participantEffective))
  else if (SummaryOption in [soFull, soData]) and (elem.participantEffective is TFhirTiming) {6} then
    ComposeTiming(xml, 'participantEffectiveTiming', TFhirTiming(elem.participantEffective))
  else if (SummaryOption in [soFull, soData]) and (elem.participantEffective is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'participantEffectiveDateTime', TFhirDateTime(elem.participantEffective));
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'timeFromStart', elem.timeFromStart);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'groupMeasure', elem.GroupMeasureElement, CODES_TFhirGroupMeasureEnum);
end;

function TFHIRXmlParser.ParseEvidenceVariable(element : TMXmlElement; path : string) : TFhirEvidenceVariable;
var
  child : TMXmlElement;
begin
  result := TFhirEvidenceVariable.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceVariableChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceVariableChild(element : TFhirEvidenceVariable; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'shortTitle') then
        element.shortTitleElement := ParseString(child, path+'/shortTitle') {b}
      else if (child.localName = 'subtitle') then
        element.subtitleElement := ParseString(child, path+'/subtitle') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'approvalDate') then
        element.approvalDateElement := ParseDate(child, path+'/approvalDate') {b}
      else if (child.localName = 'lastReviewDate') then
        element.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {b}
      else if (child.localName = 'topic') then
        element.topicList.Add(ParseCodeableConcept(child, path+'/topic')){y.2}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseContactDetail(child, path+'/author')){y.2}
      else if (child.localName = 'editor') then
        element.editorList.Add(ParseContactDetail(child, path+'/editor')){y.2}
      else if (child.localName = 'reviewer') then
        element.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')){y.2}
      else if (child.localName = 'endorser') then
        element.endorserList.Add(ParseContactDetail(child, path+'/endorser')){y.2}
      else if (child.localName = 'relatedArtifact') then
        element.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')){y.2}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirVariableTypeEnum, SYSTEMS_TFhirVariableTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'characteristic') then
        element.characteristicList.Add(ParseEvidenceVariableCharacteristic(child, path+'/characteristic')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidenceVariable(xml : TXmlBuilder; name : String; elem : TFhirEvidenceVariable);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeEvidenceVariableChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeEvidenceVariableChildren(xml : TXmlBuilder; elem : TFhirEvidenceVariable);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('shortTitle') then
    ComposeString(xml, 'shortTitle', elem.shortTitleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('subtitle') then
    ComposeString(xml, 'subtitle', elem.subtitleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDate(xml, 'approvalDate', elem.approvalDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDate(xml, 'lastReviewDate', elem.lastReviewDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(xml, 'effectivePeriod', elem.effectivePeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('topic') then
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', elem.topicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('author') then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('editor') then
    for i := 0 to elem.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', elem.editorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reviewer') then
    for i := 0 to elem.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', elem.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('endorser') then
    for i := 0 to elem.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', elem.endorserList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') then
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', elem.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirVariableTypeEnum);
  for i := 0 to elem.characteristicList.Count - 1 do
      ComposeEvidenceVariableCharacteristic(xml, 'characteristic', elem.characteristicList[i]);
end;

{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
function TFHIRXmlParser.ParseExampleScenarioActor(element : TMXmlElement; path : string) : TFhirExampleScenarioActor;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioActor.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioActorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioActorChild(element : TFhirExampleScenarioActor; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'actorId') then
        element.actorIdElement := ParseString(child, path+'/actorId') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirExamplescenarioActorTypeEnum, SYSTEMS_TFhirExamplescenarioActorTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioActor(xml : TXmlBuilder; name : String; elem : TFhirExampleScenarioActor);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExampleScenarioActorChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioActorChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioActor);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'actorId', elem.actorIdElement);{x.2b}
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirExamplescenarioActorTypeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
end;

function TFHIRXmlParser.ParseExampleScenarioInstance(element : TMXmlElement; path : string) : TFhirExampleScenarioInstance;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioInstance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioInstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioInstanceChild(element : TFhirExampleScenarioInstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'resourceId') then
        element.resourceIdElement := ParseString(child, path+'/resourceId') {b}
      else if (child.localName = 'resourceType') then
        element.resourceTypeElement := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, path+'/resourceType', child){1a}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'version') then
        element.versionList.Add(ParseExampleScenarioInstanceVersion(child, path+'/version')){y.2}
      else if (child.localName = 'containedInstance') then
        element.containedInstanceList.Add(ParseExampleScenarioInstanceContainedInstance(child, path+'/containedInstance')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioInstance(xml : TXmlBuilder; name : String; elem : TFhirExampleScenarioInstance);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExampleScenarioInstanceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioInstanceChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioInstance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'resourceId', elem.resourceIdElement);{x.2b}
  ComposeEnum(xml, 'resourceType', elem.ResourceTypeElement, CODES_TFhirResourceTypesEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.versionList.Count - 1 do
      ComposeExampleScenarioInstanceVersion(xml, 'version', elem.versionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.containedInstanceList.Count - 1 do
      ComposeExampleScenarioInstanceContainedInstance(xml, 'containedInstance', elem.containedInstanceList[i]);
end;

function TFHIRXmlParser.ParseExampleScenarioInstanceVersion(element : TMXmlElement; path : string) : TFhirExampleScenarioInstanceVersion;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioInstanceVersion.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioInstanceVersionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioInstanceVersionChild(element : TFhirExampleScenarioInstanceVersion; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'versionId') then
        element.versionIdElement := ParseString(child, path+'/versionId') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioInstanceVersion(xml : TXmlBuilder; name : String; elem : TFhirExampleScenarioInstanceVersion);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExampleScenarioInstanceVersionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioInstanceVersionChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioInstanceVersion);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'versionId', elem.versionIdElement);{x.2b}
  ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
end;

function TFHIRXmlParser.ParseExampleScenarioInstanceContainedInstance(element : TMXmlElement; path : string) : TFhirExampleScenarioInstanceContainedInstance;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioInstanceContainedInstance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioInstanceContainedInstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioInstanceContainedInstanceChild(element : TFhirExampleScenarioInstanceContainedInstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'resourceId') then
        element.resourceIdElement := ParseString(child, path+'/resourceId') {b}
      else if (child.localName = 'versionId') then
        element.versionIdElement := ParseString(child, path+'/versionId') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioInstanceContainedInstance(xml : TXmlBuilder; name : String; elem : TFhirExampleScenarioInstanceContainedInstance);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExampleScenarioInstanceContainedInstanceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioInstanceContainedInstanceChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioInstanceContainedInstance);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'resourceId', elem.resourceIdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'versionId', elem.versionIdElement);{x.2b}
end;

function TFHIRXmlParser.ParseExampleScenarioProcess(element : TMXmlElement; path : string) : TFhirExampleScenarioProcess;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioProcess.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioProcessChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioProcessChild(element : TFhirExampleScenarioProcess; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'preConditions') then
        element.preConditionsElement := ParseMarkdown(child, path+'/preConditions') {b}
      else if (child.localName = 'postConditions') then
        element.postConditionsElement := ParseMarkdown(child, path+'/postConditions') {b}
      else if (child.localName = 'step') then
        element.stepList.Add(ParseExampleScenarioProcessStep(child, path+'/step')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcess(xml : TXmlBuilder; name : String; elem : TFhirExampleScenarioProcess);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExampleScenarioProcessChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcessChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioProcess);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'preConditions', elem.preConditionsElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'postConditions', elem.postConditionsElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.stepList.Count - 1 do
      ComposeExampleScenarioProcessStep(xml, 'step', elem.stepList[i]);
end;

function TFHIRXmlParser.ParseExampleScenarioProcessStep(element : TMXmlElement; path : string) : TFhirExampleScenarioProcessStep;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioProcessStep.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioProcessStepChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioProcessStepChild(element : TFhirExampleScenarioProcessStep; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'process') then
        element.processList.Add(ParseExampleScenarioProcess(child, path+'/process')){y.2}
      else if (child.localName = 'pause') then
        element.pauseElement := ParseBoolean(child, path+'/pause') {b}
      else if (child.localName = 'operation') then
        element.operation := ParseExampleScenarioProcessStepOperation(child, path+'/operation') {b}
      else if (child.localName = 'alternative') then
        element.alternativeList.Add(ParseExampleScenarioProcessStepAlternative(child, path+'/alternative')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcessStep(xml : TXmlBuilder; name : String; elem : TFhirExampleScenarioProcessStep);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExampleScenarioProcessStepChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcessStepChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioProcessStep);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.processList.Count - 1 do
      ComposeExampleScenarioProcess(xml, 'process', elem.processList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'pause', elem.pauseElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeExampleScenarioProcessStepOperation(xml, 'operation', elem.operation);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.alternativeList.Count - 1 do
      ComposeExampleScenarioProcessStepAlternative(xml, 'alternative', elem.alternativeList[i]);
end;

function TFHIRXmlParser.ParseExampleScenarioProcessStepOperation(element : TMXmlElement; path : string) : TFhirExampleScenarioProcessStepOperation;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioProcessStepOperation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioProcessStepOperationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioProcessStepOperationChild(element : TFhirExampleScenarioProcessStepOperation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'number') then
        element.numberElement := ParseString(child, path+'/number') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseString(child, path+'/type') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'initiator') then
        element.initiatorElement := ParseString(child, path+'/initiator') {b}
      else if (child.localName = 'receiver') then
        element.receiverElement := ParseString(child, path+'/receiver') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'initiatorActive') then
        element.initiatorActiveElement := ParseBoolean(child, path+'/initiatorActive') {b}
      else if (child.localName = 'receiverActive') then
        element.receiverActiveElement := ParseBoolean(child, path+'/receiverActive') {b}
      else if (child.localName = 'request') then
        element.request := ParseExampleScenarioInstanceContainedInstance(child, path+'/request') {b}
      else if (child.localName = 'response') then
        element.response := ParseExampleScenarioInstanceContainedInstance(child, path+'/response') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcessStepOperation(xml : TXmlBuilder; name : String; elem : TFhirExampleScenarioProcessStepOperation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExampleScenarioProcessStepOperationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcessStepOperationChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioProcessStepOperation);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'number', elem.numberElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'type', elem.type_Element);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'initiator', elem.initiatorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'receiver', elem.receiverElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'initiatorActive', elem.initiatorActiveElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'receiverActive', elem.receiverActiveElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeExampleScenarioInstanceContainedInstance(xml, 'request', elem.request);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeExampleScenarioInstanceContainedInstance(xml, 'response', elem.response);{x.2a}
end;

function TFHIRXmlParser.ParseExampleScenarioProcessStepAlternative(element : TMXmlElement; path : string) : TFhirExampleScenarioProcessStepAlternative;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioProcessStepAlternative.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioProcessStepAlternativeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioProcessStepAlternativeChild(element : TFhirExampleScenarioProcessStepAlternative; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'step') then
        element.stepList.Add(ParseExampleScenarioProcessStep(child, path+'/step')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcessStepAlternative(xml : TXmlBuilder; name : String; elem : TFhirExampleScenarioProcessStepAlternative);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExampleScenarioProcessStepAlternativeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcessStepAlternativeChildren(xml : TXmlBuilder; elem : TFhirExampleScenarioProcessStepAlternative);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.stepList.Count - 1 do
      ComposeExampleScenarioProcessStep(xml, 'step', elem.stepList[i]);
end;

function TFHIRXmlParser.ParseExampleScenario(element : TMXmlElement; path : string) : TFhirExampleScenario;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenario.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioChild(element : TFhirExampleScenario; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'actor') then
        element.actorList.Add(ParseExampleScenarioActor(child, path+'/actor')){y.2}
      else if (child.localName = 'instance') then
        element.instanceList.Add(ParseExampleScenarioInstance(child, path+'/instance')){y.2}
      else if (child.localName = 'process') then
        element.processList.Add(ParseExampleScenarioProcess(child, path+'/process')){y.2}
      else if (child.localName = 'workflow') then
        element.workflowList.Add(ParseCanonical(child, path+'/workflow')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenario(xml : TXmlBuilder; name : String; elem : TFhirExampleScenario);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeExampleScenarioChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioChildren(xml : TXmlBuilder; elem : TFhirExampleScenario);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('actor') then
    for i := 0 to elem.actorList.Count - 1 do
      ComposeExampleScenarioActor(xml, 'actor', elem.actorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('instance') then
    for i := 0 to elem.instanceList.Count - 1 do
      ComposeExampleScenarioInstance(xml, 'instance', elem.instanceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('process') then
    for i := 0 to elem.processList.Count - 1 do
      ComposeExampleScenarioProcess(xml, 'process', elem.processList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('workflow') then
    for i := 0 to elem.workflowList.Count - 1 do
      ComposeCanonical(xml, 'workflow', elem.workflowList[i]);
end;

{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
function TFHIRXmlParser.ParseExplanationOfBenefitRelated(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitRelated;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitRelated.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitRelatedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitRelatedChild(element : TFhirExplanationOfBenefitRelated; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'claim') then
        element.claim := ParseReference{TFhirClaim}(child, path+'/claim') {b}
      else if (child.localName = 'relationship') then
        element.relationship := ParseCodeableConcept(child, path+'/relationship') {b}
      else if (child.localName = 'reference') then
        element.reference := ParseIdentifier(child, path+'/reference') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitRelated(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitRelated);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitRelatedChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitRelatedChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitRelated);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirClaim}(xml, 'claim', elem.claim);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'relationship', elem.relationship);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'reference', elem.reference);{x.2a}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitPayee(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitPayee;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitPayee.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitPayeeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitPayeeChild(element : TFhirExplanationOfBenefitPayee; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'party') then
        element.party := ParseReference{TFhirPractitioner}(child, path+'/party') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitPayee(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitPayee);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitPayeeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitPayeeChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitPayee);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'party', elem.party);{x.2a}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitCareTeam(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitCareTeam;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitCareTeam.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitCareTeamChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitCareTeamChild(element : TFhirExplanationOfBenefitCareTeam; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'provider') then
        element.provider := ParseReference{TFhirPractitioner}(child, path+'/provider') {b}
      else if (child.localName = 'responsible') then
        element.responsibleElement := ParseBoolean(child, path+'/responsible') {b}
      else if (child.localName = 'role') then
        element.role := ParseCodeableConcept(child, path+'/role') {b}
      else if (child.localName = 'qualification') then
        element.qualification := ParseCodeableConcept(child, path+'/qualification') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitCareTeam(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitCareTeam);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitCareTeamChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitCareTeamChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitCareTeam);
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  ComposeReference{TFhirPractitioner}(xml, 'provider', elem.provider);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'responsible', elem.responsibleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'role', elem.role);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'qualification', elem.qualification);{x.2a}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitSupportingInfo(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitSupportingInfo;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitSupportingInfo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitSupportingInfoChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitSupportingInfoChild(element : TFhirExplanationOfBenefitSupportingInfo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'timingPeriod') then
        element.timing := ParsePeriod(child, path+'/timingPeriod'){x.3}
      else if (child.localName = 'timingDate') then
        element.timing := ParseDate(child, path+'/timingDate'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueAttachment') then
        element.value := ParseAttachment(child, path+'/valueAttachment'){x.3}
      else if (child.localName = 'valueReference') then
        element.value := ParseReference(child, path+'/valueReference') {a}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'reason') then
        element.reason := ParseCoding(child, path+'/reason') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitSupportingInfo(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitSupportingInfo);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitSupportingInfoChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitSupportingInfoChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitSupportingInfo);
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timingPeriod', TFhirPeriod(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDate) {6} then
    ComposeDate(xml, 'timingDate', TFhirDate(elem.timing));
  if (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value));
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'reason', elem.reason);{x.2a}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitDiagnosis(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitDiagnosis;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitDiagnosis.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitDiagnosisChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitDiagnosisChild(element : TFhirExplanationOfBenefitDiagnosis; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'diagnosisCodeableConcept') then
        element.diagnosis := ParseCodeableConcept(child, path+'/diagnosisCodeableConcept'){x.3}
      else if (child.localName = 'diagnosisReference') then
        element.diagnosis := ParseReference(child, path+'/diagnosisReference') {a}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'onAdmission') then
        element.onAdmission := ParseCodeableConcept(child, path+'/onAdmission') {b}
      else if (child.localName = 'packageCode') then
        element.packageCode := ParseCodeableConcept(child, path+'/packageCode') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitDiagnosis(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitDiagnosis);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitDiagnosisChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitDiagnosisChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitDiagnosis);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  if (elem.diagnosis is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'diagnosisCodeableConcept', TFhirCodeableConcept(elem.diagnosis))
  else if (elem.diagnosis is TFhirReference) {2} then
    ComposeReference(xml, 'diagnosisReference', TFhirReference(elem.diagnosis));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'onAdmission', elem.onAdmission);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'packageCode', elem.packageCode);{x.2a}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitProcedure(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitProcedure;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitProcedure.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitProcedureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitProcedureChild(element : TFhirExplanationOfBenefitProcedure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'procedureCodeableConcept') then
        element.procedure_ := ParseCodeableConcept(child, path+'/procedureCodeableConcept'){x.3}
      else if (child.localName = 'procedureReference') then
        element.procedure_ := ParseReference(child, path+'/procedureReference') {a}
      else if (child.localName = 'udi') then
        element.udiList.Add(ParseReference{TFhirDevice}(child, path+'/udi')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitProcedure(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitProcedure);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitProcedureChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitProcedureChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitProcedure);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (elem.procedure_ is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'procedureCodeableConcept', TFhirCodeableConcept(elem.procedure_))
  else if (elem.procedure_ is TFhirReference) {2} then
    ComposeReference(xml, 'procedureReference', TFhirReference(elem.procedure_));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(xml, 'udi', elem.udiList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitInsurance(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitInsurance;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitInsurance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitInsuranceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitInsuranceChild(element : TFhirExplanationOfBenefitInsurance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'focal') then
        element.focalElement := ParseBoolean(child, path+'/focal') {b}
      else if (child.localName = 'coverage') then
        element.coverage := ParseReference{TFhirCoverage}(child, path+'/coverage') {b}
      else if (child.localName = 'preAuthRef') then
        element.preAuthRefList.Add(ParseString(child, path+'/preAuthRef')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitInsurance(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitInsurance);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitInsuranceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitInsuranceChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitInsurance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeBoolean(xml, 'focal', elem.focalElement);{x.2b}
  ComposeReference{TFhirCoverage}(xml, 'coverage', elem.coverage);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.preAuthRefList.Count - 1 do
      ComposeString(xml, 'preAuthRef', elem.preAuthRefList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAccident(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAccident;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitAccident.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitAccidentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAccidentChild(element : TFhirExplanationOfBenefitAccident; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'date') then
        element.dateElement := ParseDate(child, path+'/date') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'locationAddress') then
        element.location := ParseAddress(child, path+'/locationAddress'){x.3}
      else if (child.localName = 'locationReference') then
        element.location := ParseReference(child, path+'/locationReference') {a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAccident(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitAccident);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitAccidentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAccidentChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitAccident);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.location is TFhirAddress) {6} then
    ComposeAddress(xml, 'locationAddress', TFhirAddress(elem.location))
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirReference) {2} then
    ComposeReference(xml, 'locationReference', TFhirReference(elem.location));
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItem(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItem;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItemChild(element : TFhirExplanationOfBenefitItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'careTeamSequence') then
        element.careTeamSequenceList.Add(ParsePositiveInt(child, path+'/careTeamSequence')){y.2}
      else if (child.localName = 'diagnosisSequence') then
        element.diagnosisSequenceList.Add(ParsePositiveInt(child, path+'/diagnosisSequence')){y.2}
      else if (child.localName = 'procedureSequence') then
        element.procedureSequenceList.Add(ParsePositiveInt(child, path+'/procedureSequence')){y.2}
      else if (child.localName = 'informationSequence') then
        element.informationSequenceList.Add(ParsePositiveInt(child, path+'/informationSequence')){y.2}
      else if (child.localName = 'revenue') then
        element.revenue := ParseCodeableConcept(child, path+'/revenue') {b}
      else if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'productOrService') then
        element.productOrService := ParseCodeableConcept(child, path+'/productOrService') {b}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')){y.2}
      else if (child.localName = 'programCode') then
        element.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')){y.2}
      else if (child.localName = 'servicedPeriod') then
        element.serviced := ParsePeriod(child, path+'/servicedPeriod'){x.3}
      else if (child.localName = 'servicedDate') then
        element.serviced := ParseDate(child, path+'/servicedDate'){x.3}
      else if (child.localName = 'locationCodeableConcept') then
        element.location := ParseCodeableConcept(child, path+'/locationCodeableConcept'){x.3}
      else if (child.localName = 'locationAddress') then
        element.location := ParseAddress(child, path+'/locationAddress'){x.3}
      else if (child.localName = 'locationReference') then
        element.location := ParseReference(child, path+'/locationReference') {a}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'unitPrice') then
        element.unitPrice := ParseMoney(child, path+'/unitPrice') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'net') then
        element.net := ParseMoney(child, path+'/net') {b}
      else if (child.localName = 'udi') then
        element.udiList.Add(ParseReference{TFhirDevice}(child, path+'/udi')){y.2}
      else if (child.localName = 'bodySite') then
        element.bodySite := ParseCodeableConcept(child, path+'/bodySite') {b}
      else if (child.localName = 'subSite') then
        element.subSiteList.Add(ParseCodeableConcept(child, path+'/subSite')){y.2}
      else if (child.localName = 'encounter') then
        element.encounterList.Add(ParseReference{TFhirEncounter}(child, path+'/encounter')){y.2}
      else if (child.localName = 'noteNumber') then
        element.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')){y.2}
      else if (child.localName = 'adjudication') then
        element.adjudicationList.Add(ParseExplanationOfBenefitItemAdjudication(child, path+'/adjudication')){y.2}
      else if (child.localName = 'detail') then
        element.detailList.Add(ParseExplanationOfBenefitItemDetail(child, path+'/detail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItem(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitItem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItemChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.careTeamSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'careTeamSequence', elem.careTeamSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.diagnosisSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'diagnosisSequence', elem.diagnosisSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.procedureSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'procedureSequence', elem.procedureSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.informationSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'informationSequence', elem.informationSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'revenue', elem.revenue);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  ComposeCodeableConcept(xml, 'productOrService', elem.productOrService);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', elem.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', elem.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirPeriod) {6} then
    ComposePeriod(xml, 'servicedPeriod', TFhirPeriod(elem.serviced))
  else if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirDate) {6} then
    ComposeDate(xml, 'servicedDate', TFhirDate(elem.serviced));
  if (SummaryOption in [soFull, soData]) and (elem.location is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'locationCodeableConcept', TFhirCodeableConcept(elem.location))
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirAddress) {6} then
    ComposeAddress(xml, 'locationAddress', TFhirAddress(elem.location))
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirReference) {2} then
    ComposeReference(xml, 'locationReference', TFhirReference(elem.location));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', elem.unitPrice);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', elem.net);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(xml, 'udi', elem.udiList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'bodySite', elem.bodySite);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.subSiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'subSite', elem.subSiteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.encounterList.Count - 1 do
      ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', elem.noteNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(xml, 'adjudication', elem.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.detailList.Count - 1 do
      ComposeExplanationOfBenefitItemDetail(xml, 'detail', elem.detailList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItemAdjudication(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItemAdjudication;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitItemAdjudication.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitItemAdjudicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItemAdjudicationChild(element : TFhirExplanationOfBenefitItemAdjudication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'reason') then
        element.reason := ParseCodeableConcept(child, path+'/reason') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseMoney(child, path+'/amount') {b}
      else if (child.localName = 'value') then
        element.valueElement := ParseDecimal(child, path+'/value') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItemAdjudication(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitItemAdjudication);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitItemAdjudicationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItemAdjudicationChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitItemAdjudication);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'reason', elem.reason);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'amount', elem.amount);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'value', elem.valueElement);{x.2b}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItemDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItemDetail;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitItemDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitItemDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItemDetailChild(element : TFhirExplanationOfBenefitItemDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'revenue') then
        element.revenue := ParseCodeableConcept(child, path+'/revenue') {b}
      else if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'productOrService') then
        element.productOrService := ParseCodeableConcept(child, path+'/productOrService') {b}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')){y.2}
      else if (child.localName = 'programCode') then
        element.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')){y.2}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'unitPrice') then
        element.unitPrice := ParseMoney(child, path+'/unitPrice') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'net') then
        element.net := ParseMoney(child, path+'/net') {b}
      else if (child.localName = 'udi') then
        element.udiList.Add(ParseReference{TFhirDevice}(child, path+'/udi')){y.2}
      else if (child.localName = 'noteNumber') then
        element.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')){y.2}
      else if (child.localName = 'adjudication') then
        element.adjudicationList.Add(ParseExplanationOfBenefitItemAdjudication(child, path+'/adjudication')){y.2}
      else if (child.localName = 'subDetail') then
        element.subDetailList.Add(ParseExplanationOfBenefitItemDetailSubDetail(child, path+'/subDetail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItemDetail(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitItemDetail);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitItemDetailChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItemDetailChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitItemDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'revenue', elem.revenue);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  ComposeCodeableConcept(xml, 'productOrService', elem.productOrService);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', elem.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', elem.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', elem.unitPrice);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', elem.net);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(xml, 'udi', elem.udiList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', elem.noteNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(xml, 'adjudication', elem.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.subDetailList.Count - 1 do
      ComposeExplanationOfBenefitItemDetailSubDetail(xml, 'subDetail', elem.subDetailList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItemDetailSubDetail;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitItemDetailSubDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitItemDetailSubDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItemDetailSubDetailChild(element : TFhirExplanationOfBenefitItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'revenue') then
        element.revenue := ParseCodeableConcept(child, path+'/revenue') {b}
      else if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'productOrService') then
        element.productOrService := ParseCodeableConcept(child, path+'/productOrService') {b}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')){y.2}
      else if (child.localName = 'programCode') then
        element.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')){y.2}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'unitPrice') then
        element.unitPrice := ParseMoney(child, path+'/unitPrice') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'net') then
        element.net := ParseMoney(child, path+'/net') {b}
      else if (child.localName = 'udi') then
        element.udiList.Add(ParseReference{TFhirDevice}(child, path+'/udi')){y.2}
      else if (child.localName = 'noteNumber') then
        element.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')){y.2}
      else if (child.localName = 'adjudication') then
        element.adjudicationList.Add(ParseExplanationOfBenefitItemAdjudication(child, path+'/adjudication')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItemDetailSubDetail(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitItemDetailSubDetail);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitItemDetailSubDetailChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItemDetailSubDetailChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitItemDetailSubDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'revenue', elem.revenue);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  ComposeCodeableConcept(xml, 'productOrService', elem.productOrService);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', elem.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', elem.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', elem.unitPrice);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', elem.net);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.udiList.Count - 1 do
      ComposeReference{TFhirDevice}(xml, 'udi', elem.udiList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', elem.noteNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(xml, 'adjudication', elem.adjudicationList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAddItem(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAddItem;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitAddItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitAddItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAddItemChild(element : TFhirExplanationOfBenefitAddItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemSequence') then
        element.itemSequenceList.Add(ParsePositiveInt(child, path+'/itemSequence')){y.2}
      else if (child.localName = 'detailSequence') then
        element.detailSequenceList.Add(ParsePositiveInt(child, path+'/detailSequence')){y.2}
      else if (child.localName = 'subDetailSequence') then
        element.subDetailSequenceList.Add(ParsePositiveInt(child, path+'/subDetailSequence')){y.2}
      else if (child.localName = 'provider') then
        element.providerList.Add(ParseReference{TFhirPractitioner}(child, path+'/provider')){y.2}
      else if (child.localName = 'productOrService') then
        element.productOrService := ParseCodeableConcept(child, path+'/productOrService') {b}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')){y.2}
      else if (child.localName = 'programCode') then
        element.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')){y.2}
      else if (child.localName = 'servicedPeriod') then
        element.serviced := ParsePeriod(child, path+'/servicedPeriod'){x.3}
      else if (child.localName = 'servicedDate') then
        element.serviced := ParseDate(child, path+'/servicedDate'){x.3}
      else if (child.localName = 'locationCodeableConcept') then
        element.location := ParseCodeableConcept(child, path+'/locationCodeableConcept'){x.3}
      else if (child.localName = 'locationAddress') then
        element.location := ParseAddress(child, path+'/locationAddress'){x.3}
      else if (child.localName = 'locationReference') then
        element.location := ParseReference(child, path+'/locationReference') {a}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'unitPrice') then
        element.unitPrice := ParseMoney(child, path+'/unitPrice') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'net') then
        element.net := ParseMoney(child, path+'/net') {b}
      else if (child.localName = 'bodySite') then
        element.bodySite := ParseCodeableConcept(child, path+'/bodySite') {b}
      else if (child.localName = 'subSite') then
        element.subSiteList.Add(ParseCodeableConcept(child, path+'/subSite')){y.2}
      else if (child.localName = 'noteNumber') then
        element.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')){y.2}
      else if (child.localName = 'adjudication') then
        element.adjudicationList.Add(ParseExplanationOfBenefitItemAdjudication(child, path+'/adjudication')){y.2}
      else if (child.localName = 'detail') then
        element.detailList.Add(ParseExplanationOfBenefitAddItemDetail(child, path+'/detail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAddItem(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitAddItem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitAddItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAddItemChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitAddItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.itemSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'itemSequence', elem.itemSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.detailSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'detailSequence', elem.detailSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.subDetailSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'subDetailSequence', elem.subDetailSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.providerList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'provider', elem.providerList[i]);
  ComposeCodeableConcept(xml, 'productOrService', elem.productOrService);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', elem.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', elem.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirPeriod) {6} then
    ComposePeriod(xml, 'servicedPeriod', TFhirPeriod(elem.serviced))
  else if (SummaryOption in [soFull, soData]) and (elem.serviced is TFhirDate) {6} then
    ComposeDate(xml, 'servicedDate', TFhirDate(elem.serviced));
  if (SummaryOption in [soFull, soData]) and (elem.location is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'locationCodeableConcept', TFhirCodeableConcept(elem.location))
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirAddress) {6} then
    ComposeAddress(xml, 'locationAddress', TFhirAddress(elem.location))
  else if (SummaryOption in [soFull, soData]) and (elem.location is TFhirReference) {2} then
    ComposeReference(xml, 'locationReference', TFhirReference(elem.location));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', elem.unitPrice);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', elem.net);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'bodySite', elem.bodySite);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.subSiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'subSite', elem.subSiteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', elem.noteNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(xml, 'adjudication', elem.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.detailList.Count - 1 do
      ComposeExplanationOfBenefitAddItemDetail(xml, 'detail', elem.detailList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAddItemDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAddItemDetail;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitAddItemDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitAddItemDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAddItemDetailChild(element : TFhirExplanationOfBenefitAddItemDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'productOrService') then
        element.productOrService := ParseCodeableConcept(child, path+'/productOrService') {b}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')){y.2}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'unitPrice') then
        element.unitPrice := ParseMoney(child, path+'/unitPrice') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'net') then
        element.net := ParseMoney(child, path+'/net') {b}
      else if (child.localName = 'noteNumber') then
        element.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')){y.2}
      else if (child.localName = 'adjudication') then
        element.adjudicationList.Add(ParseExplanationOfBenefitItemAdjudication(child, path+'/adjudication')){y.2}
      else if (child.localName = 'subDetail') then
        element.subDetailList.Add(ParseExplanationOfBenefitAddItemDetailSubDetail(child, path+'/subDetail')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAddItemDetail(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitAddItemDetail);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitAddItemDetailChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAddItemDetailChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitAddItemDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'productOrService', elem.productOrService);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', elem.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', elem.unitPrice);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', elem.net);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', elem.noteNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(xml, 'adjudication', elem.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.subDetailList.Count - 1 do
      ComposeExplanationOfBenefitAddItemDetailSubDetail(xml, 'subDetail', elem.subDetailList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAddItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAddItemDetailSubDetail;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitAddItemDetailSubDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitAddItemDetailSubDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAddItemDetailSubDetailChild(element : TFhirExplanationOfBenefitAddItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'productOrService') then
        element.productOrService := ParseCodeableConcept(child, path+'/productOrService') {b}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')){y.2}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'unitPrice') then
        element.unitPrice := ParseMoney(child, path+'/unitPrice') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'net') then
        element.net := ParseMoney(child, path+'/net') {b}
      else if (child.localName = 'noteNumber') then
        element.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')){y.2}
      else if (child.localName = 'adjudication') then
        element.adjudicationList.Add(ParseExplanationOfBenefitItemAdjudication(child, path+'/adjudication')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAddItemDetailSubDetail(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitAddItemDetailSubDetail);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitAddItemDetailSubDetailChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAddItemDetailSubDetailChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitAddItemDetailSubDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'productOrService', elem.productOrService);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', elem.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', elem.unitPrice);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', elem.net);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', elem.noteNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(xml, 'adjudication', elem.adjudicationList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitTotal(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitTotal;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitTotal.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitTotalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitTotalChild(element : TFhirExplanationOfBenefitTotal; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseMoney(child, path+'/amount') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitTotal(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitTotal);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitTotalChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitTotalChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitTotal);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  ComposeMoney(xml, 'amount', elem.amount);{x.2a}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitPayment(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitPayment;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitPayment.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitPaymentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitPaymentChild(element : TFhirExplanationOfBenefitPayment; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'adjustment') then
        element.adjustment := ParseMoney(child, path+'/adjustment') {b}
      else if (child.localName = 'adjustmentReason') then
        element.adjustmentReason := ParseCodeableConcept(child, path+'/adjustmentReason') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDate(child, path+'/date') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseMoney(child, path+'/amount') {b}
      else if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitPayment(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitPayment);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitPaymentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitPaymentChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitPayment);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'adjustment', elem.adjustment);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'adjustmentReason', elem.adjustmentReason);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'amount', elem.amount);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitProcessNote(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitProcessNote;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitProcessNote.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitProcessNoteChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitProcessNoteChild(element : TFhirExplanationOfBenefitProcessNote; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'number') then
        element.numberElement := ParsePositiveInt(child, path+'/number') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirNoteTypeEnum, SYSTEMS_TFhirNoteTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if (child.localName = 'language') then
        element.language := ParseCodeableConcept(child, path+'/language') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitProcessNote(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitProcessNote);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitProcessNoteChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitProcessNoteChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitProcessNote);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'number', elem.numberElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirNoteTypeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', elem.textElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'language', elem.language);{x.2a}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitBenefitBalance(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitBenefitBalance;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitBenefitBalance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitBenefitBalanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitBenefitBalanceChild(element : TFhirExplanationOfBenefitBenefitBalance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'excluded') then
        element.excludedElement := ParseBoolean(child, path+'/excluded') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'network') then
        element.network := ParseCodeableConcept(child, path+'/network') {b}
      else if (child.localName = 'unit') then
        element.unit_ := ParseCodeableConcept(child, path+'/unit') {b}
      else if (child.localName = 'term') then
        element.term := ParseCodeableConcept(child, path+'/term') {b}
      else if (child.localName = 'financial') then
        element.financialList.Add(ParseExplanationOfBenefitBenefitBalanceFinancial(child, path+'/financial')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitBenefitBalance(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitBenefitBalance);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitBenefitBalanceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitBenefitBalanceChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitBenefitBalance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'excluded', elem.excludedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'network', elem.network);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'unit', elem.unit_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'term', elem.term);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.financialList.Count - 1 do
      ComposeExplanationOfBenefitBenefitBalanceFinancial(xml, 'financial', elem.financialList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitBenefitBalanceFinancial(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitBenefitBalanceFinancial;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitBenefitBalanceFinancial.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitBenefitBalanceFinancialChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitBenefitBalanceFinancialChild(element : TFhirExplanationOfBenefitBenefitBalanceFinancial; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'allowedUnsignedInt') then
        element.allowed := ParseUnsignedInt(child, path+'/allowedUnsignedInt'){x.3}
      else if (child.localName = 'allowedMoney') then
        element.allowed := ParseMoney(child, path+'/allowedMoney'){x.3}
      else if (child.localName = 'allowedString') then
        element.allowed := ParseString(child, path+'/allowedString'){x.3}
      else if (child.localName = 'usedUnsignedInt') then
        element.used := ParseUnsignedInt(child, path+'/usedUnsignedInt'){x.3}
      else if (child.localName = 'usedMoney') then
        element.used := ParseMoney(child, path+'/usedMoney'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitBenefitBalanceFinancial(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefitBenefitBalanceFinancial);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitBenefitBalanceFinancialChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitBenefitBalanceFinancialChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefitBenefitBalanceFinancial);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'allowedUnsignedInt', TFhirUnsignedInt(elem.allowed))
  else if (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirMoney) {6} then
    ComposeMoney(xml, 'allowedMoney', TFhirMoney(elem.allowed))
  else if (SummaryOption in [soFull, soData]) and (elem.allowed is TFhirString) {6} then
    ComposeString(xml, 'allowedString', TFhirString(elem.allowed));
  if (SummaryOption in [soFull, soData]) and (elem.used is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'usedUnsignedInt', TFhirUnsignedInt(elem.used))
  else if (SummaryOption in [soFull, soData]) and (elem.used is TFhirMoney) {6} then
    ComposeMoney(xml, 'usedMoney', TFhirMoney(elem.used));
end;

function TFHIRXmlParser.ParseExplanationOfBenefit(element : TMXmlElement; path : string) : TFhirExplanationOfBenefit;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefit.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitChild(element : TFhirExplanationOfBenefit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirExplanationofbenefitStatusEnum, SYSTEMS_TFhirExplanationofbenefitStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'subType') then
        element.subType := ParseCodeableConcept(child, path+'/subType') {b}
      else if (child.localName = 'use') then
        element.useElement := ParseEnum(CODES_TFhirClaimUseEnum, SYSTEMS_TFhirClaimUseEnum, path+'/use', child){1a}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'billablePeriod') then
        element.billablePeriod := ParsePeriod(child, path+'/billablePeriod') {b}
      else if (child.localName = 'created') then
        element.createdElement := ParseDateTime(child, path+'/created') {b}
      else if (child.localName = 'enterer') then
        element.enterer := ParseReference{TFhirPractitioner}(child, path+'/enterer') {b}
      else if (child.localName = 'insurer') then
        element.insurer := ParseReference{TFhirOrganization}(child, path+'/insurer') {b}
      else if (child.localName = 'provider') then
        element.provider := ParseReference{TFhirPractitioner}(child, path+'/provider') {b}
      else if (child.localName = 'priority') then
        element.priority := ParseCodeableConcept(child, path+'/priority') {b}
      else if (child.localName = 'fundsReserveRequested') then
        element.fundsReserveRequested := ParseCodeableConcept(child, path+'/fundsReserveRequested') {b}
      else if (child.localName = 'fundsReserve') then
        element.fundsReserve := ParseCodeableConcept(child, path+'/fundsReserve') {b}
      else if (child.localName = 'related') then
        element.relatedList.Add(ParseExplanationOfBenefitRelated(child, path+'/related')){y.2}
      else if (child.localName = 'prescription') then
        element.prescription := ParseReference{TFhirMedicationRequest}(child, path+'/prescription') {b}
      else if (child.localName = 'originalPrescription') then
        element.originalPrescription := ParseReference{TFhirMedicationRequest}(child, path+'/originalPrescription') {b}
      else if (child.localName = 'payee') then
        element.payee := ParseExplanationOfBenefitPayee(child, path+'/payee') {b}
      else if (child.localName = 'referral') then
        element.referral := ParseReference{TFhirServiceRequest}(child, path+'/referral') {b}
      else if (child.localName = 'facility') then
        element.facility := ParseReference{TFhirLocation}(child, path+'/facility') {b}
      else if (child.localName = 'claim') then
        element.claim := ParseReference{TFhirClaim}(child, path+'/claim') {b}
      else if (child.localName = 'claimResponse') then
        element.claimResponse := ParseReference{TFhirClaimResponse}(child, path+'/claimResponse') {b}
      else if (child.localName = 'outcome') then
        element.outcomeElement := ParseEnum(CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum, path+'/outcome', child){1a}
      else if (child.localName = 'disposition') then
        element.dispositionElement := ParseString(child, path+'/disposition') {b}
      else if (child.localName = 'preAuthRef') then
        element.preAuthRefList.Add(ParseString(child, path+'/preAuthRef')){y.2}
      else if (child.localName = 'preAuthRefPeriod') then
        element.preAuthRefPeriodList.Add(ParsePeriod(child, path+'/preAuthRefPeriod')){y.2}
      else if (child.localName = 'careTeam') then
        element.careTeamList.Add(ParseExplanationOfBenefitCareTeam(child, path+'/careTeam')){y.2}
      else if (child.localName = 'supportingInfo') then
        element.supportingInfoList.Add(ParseExplanationOfBenefitSupportingInfo(child, path+'/supportingInfo')){y.2}
      else if (child.localName = 'diagnosis') then
        element.diagnosisList.Add(ParseExplanationOfBenefitDiagnosis(child, path+'/diagnosis')){y.2}
      else if (child.localName = 'procedure') then
        element.procedure_List.Add(ParseExplanationOfBenefitProcedure(child, path+'/procedure')){y.2}
      else if (child.localName = 'precedence') then
        element.precedenceElement := ParsePositiveInt(child, path+'/precedence') {b}
      else if (child.localName = 'insurance') then
        element.insuranceList.Add(ParseExplanationOfBenefitInsurance(child, path+'/insurance')){y.2}
      else if (child.localName = 'accident') then
        element.accident := ParseExplanationOfBenefitAccident(child, path+'/accident') {b}
      else if (child.localName = 'item') then
        element.itemList.Add(ParseExplanationOfBenefitItem(child, path+'/item')){y.2}
      else if (child.localName = 'addItem') then
        element.addItemList.Add(ParseExplanationOfBenefitAddItem(child, path+'/addItem')){y.2}
      else if (child.localName = 'adjudication') then
        element.adjudicationList.Add(ParseExplanationOfBenefitItemAdjudication(child, path+'/adjudication')){y.2}
      else if (child.localName = 'total') then
        element.totalList.Add(ParseExplanationOfBenefitTotal(child, path+'/total')){y.2}
      else if (child.localName = 'payment') then
        element.payment := ParseExplanationOfBenefitPayment(child, path+'/payment') {b}
      else if (child.localName = 'formCode') then
        element.formCode := ParseCodeableConcept(child, path+'/formCode') {b}
      else if (child.localName = 'form') then
        element.form := ParseAttachment(child, path+'/form') {b}
      else if (child.localName = 'processNote') then
        element.processNoteList.Add(ParseExplanationOfBenefitProcessNote(child, path+'/processNote')){y.2}
      else if (child.localName = 'benefitPeriod') then
        element.benefitPeriod := ParsePeriod(child, path+'/benefitPeriod') {b}
      else if (child.localName = 'benefitBalance') then
        element.benefitBalanceList.Add(ParseExplanationOfBenefitBenefitBalance(child, path+'/benefitBalance')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefit(xml : TXmlBuilder; name : String; elem : TFhirExplanationOfBenefit);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeExplanationOfBenefitChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitChildren(xml : TXmlBuilder; elem : TFhirExplanationOfBenefit);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirExplanationofbenefitStatusEnum);
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('subType') then
    ComposeCodeableConcept(xml, 'subType', elem.subType);{x.2a}
  ComposeEnum(xml, 'use', elem.UseElement, CODES_TFhirClaimUseEnum);
    ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('billablePeriod') then
    ComposePeriod(xml, 'billablePeriod', elem.billablePeriod);{x.2a}
    ComposeDateTime(xml, 'created', elem.createdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('enterer') then
    ComposeReference{TFhirPractitioner}(xml, 'enterer', elem.enterer);{x.2a}
    ComposeReference{TFhirOrganization}(xml, 'insurer', elem.insurer);{x.2a}
    ComposeReference{TFhirPractitioner}(xml, 'provider', elem.provider);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('priority') then
    ComposeCodeableConcept(xml, 'priority', elem.priority);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('fundsReserveRequested') then
    ComposeCodeableConcept(xml, 'fundsReserveRequested', elem.fundsReserveRequested);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('fundsReserve') then
    ComposeCodeableConcept(xml, 'fundsReserve', elem.fundsReserve);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('related') then
    for i := 0 to elem.relatedList.Count - 1 do
      ComposeExplanationOfBenefitRelated(xml, 'related', elem.relatedList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('prescription') then
    ComposeReference{TFhirMedicationRequest}(xml, 'prescription', elem.prescription);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('originalPrescription') then
    ComposeReference{TFhirMedicationRequest}(xml, 'originalPrescription', elem.originalPrescription);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('payee') then
    ComposeExplanationOfBenefitPayee(xml, 'payee', elem.payee);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('referral') then
    ComposeReference{TFhirServiceRequest}(xml, 'referral', elem.referral);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('facility') then
    ComposeReference{TFhirLocation}(xml, 'facility', elem.facility);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('claim') then
    ComposeReference{TFhirClaim}(xml, 'claim', elem.claim);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('claimResponse') then
    ComposeReference{TFhirClaimResponse}(xml, 'claimResponse', elem.claimResponse);{x.2a}
  ComposeEnum(xml, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeString(xml, 'disposition', elem.dispositionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('preAuthRef') then
    for i := 0 to elem.preAuthRefList.Count - 1 do
      ComposeString(xml, 'preAuthRef', elem.preAuthRefList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('preAuthRefPeriod') then
    for i := 0 to elem.preAuthRefPeriodList.Count - 1 do
      ComposePeriod(xml, 'preAuthRefPeriod', elem.preAuthRefPeriodList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('careTeam') then
    for i := 0 to elem.careTeamList.Count - 1 do
      ComposeExplanationOfBenefitCareTeam(xml, 'careTeam', elem.careTeamList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInfo') then
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeExplanationOfBenefitSupportingInfo(xml, 'supportingInfo', elem.supportingInfoList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('diagnosis') then
    for i := 0 to elem.diagnosisList.Count - 1 do
      ComposeExplanationOfBenefitDiagnosis(xml, 'diagnosis', elem.diagnosisList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('procedure_') then
    for i := 0 to elem.procedure_List.Count - 1 do
      ComposeExplanationOfBenefitProcedure(xml, 'procedure', elem.procedure_List[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('precedence') then
    ComposePositiveInt(xml, 'precedence', elem.precedenceElement);{x.2b}
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeExplanationOfBenefitInsurance(xml, 'insurance', elem.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('accident') then
    ComposeExplanationOfBenefitAccident(xml, 'accident', elem.accident);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('item') then
    for i := 0 to elem.itemList.Count - 1 do
      ComposeExplanationOfBenefitItem(xml, 'item', elem.itemList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('addItem') then
    for i := 0 to elem.addItemList.Count - 1 do
      ComposeExplanationOfBenefitAddItem(xml, 'addItem', elem.addItemList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('adjudication') then
    for i := 0 to elem.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(xml, 'adjudication', elem.adjudicationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('total') then
    for i := 0 to elem.totalList.Count - 1 do
      ComposeExplanationOfBenefitTotal(xml, 'total', elem.totalList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('payment') then
    ComposeExplanationOfBenefitPayment(xml, 'payment', elem.payment);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('formCode') then
    ComposeCodeableConcept(xml, 'formCode', elem.formCode);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('form') then
    ComposeAttachment(xml, 'form', elem.form);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('processNote') then
    for i := 0 to elem.processNoteList.Count - 1 do
      ComposeExplanationOfBenefitProcessNote(xml, 'processNote', elem.processNoteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('benefitPeriod') then
    ComposePeriod(xml, 'benefitPeriod', elem.benefitPeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('benefitBalance') then
    for i := 0 to elem.benefitBalanceList.Count - 1 do
      ComposeExplanationOfBenefitBenefitBalance(xml, 'benefitBalance', elem.benefitBalanceList[i]);
end;

{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
function TFHIRXmlParser.ParseFamilyMemberHistoryCondition(element : TMXmlElement; path : string) : TFhirFamilyMemberHistoryCondition;
var
  child : TMXmlElement;
begin
  result := TFhirFamilyMemberHistoryCondition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseFamilyMemberHistoryConditionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseFamilyMemberHistoryConditionChild(element : TFhirFamilyMemberHistoryCondition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'outcome') then
        element.outcome := ParseCodeableConcept(child, path+'/outcome') {b}
      else if (child.localName = 'contributedToDeath') then
        element.contributedToDeathElement := ParseBoolean(child, path+'/contributedToDeath') {b}
      else if (child.localName = 'onsetAge') then
        element.onset := ParseAge(child, path+'/onsetAge'){x.3}
      else if (child.localName = 'onsetRange') then
        element.onset := ParseRange(child, path+'/onsetRange'){x.3}
      else if (child.localName = 'onsetPeriod') then
        element.onset := ParsePeriod(child, path+'/onsetPeriod'){x.3}
      else if (child.localName = 'onsetString') then
        element.onset := ParseString(child, path+'/onsetString'){x.3}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeFamilyMemberHistoryCondition(xml : TXmlBuilder; name : String; elem : TFhirFamilyMemberHistoryCondition);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeFamilyMemberHistoryConditionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeFamilyMemberHistoryConditionChildren(xml : TXmlBuilder; elem : TFhirFamilyMemberHistoryCondition);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'outcome', elem.outcome);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'contributedToDeath', elem.contributedToDeathElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirAge) {6} then
    ComposeAge(xml, 'onsetAge', TFhirAge(elem.onset))
  else if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirRange) {6} then
    ComposeRange(xml, 'onsetRange', TFhirRange(elem.onset))
  else if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirPeriod) {6} then
    ComposePeriod(xml, 'onsetPeriod', TFhirPeriod(elem.onset))
  else if (SummaryOption in [soFull, soData]) and (elem.onset is TFhirString) {6} then
    ComposeString(xml, 'onsetString', TFhirString(elem.onset));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

function TFHIRXmlParser.ParseFamilyMemberHistory(element : TMXmlElement; path : string) : TFhirFamilyMemberHistory;
var
  child : TMXmlElement;
begin
  result := TFhirFamilyMemberHistory.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseFamilyMemberHistoryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseFamilyMemberHistoryChild(element : TFhirFamilyMemberHistory; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'instantiatesCanonical') then
        element.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')){y.2}
      else if (child.localName = 'instantiatesUri') then
        element.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirHistoryStatusEnum, SYSTEMS_TFhirHistoryStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'dataAbsentReason') then
        element.dataAbsentReason := ParseCodeableConcept(child, path+'/dataAbsentReason') {b}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'relationship') then
        element.relationship := ParseCodeableConcept(child, path+'/relationship') {b}
      else if (child.localName = 'sex') then
        element.sex := ParseCodeableConcept(child, path+'/sex') {b}
      else if (child.localName = 'bornPeriod') then
        element.born := ParsePeriod(child, path+'/bornPeriod'){x.3}
      else if (child.localName = 'bornDate') then
        element.born := ParseDate(child, path+'/bornDate'){x.3}
      else if (child.localName = 'bornString') then
        element.born := ParseString(child, path+'/bornString'){x.3}
      else if (child.localName = 'ageAge') then
        element.age := ParseAge(child, path+'/ageAge'){x.3}
      else if (child.localName = 'ageRange') then
        element.age := ParseRange(child, path+'/ageRange'){x.3}
      else if (child.localName = 'ageString') then
        element.age := ParseString(child, path+'/ageString'){x.3}
      else if (child.localName = 'estimatedAge') then
        element.estimatedAgeElement := ParseBoolean(child, path+'/estimatedAge') {b}
      else if (child.localName = 'deceasedAge') then
        element.deceased := ParseAge(child, path+'/deceasedAge'){x.3}
      else if (child.localName = 'deceasedRange') then
        element.deceased := ParseRange(child, path+'/deceasedRange'){x.3}
      else if (child.localName = 'deceasedBoolean') then
        element.deceased := ParseBoolean(child, path+'/deceasedBoolean'){x.3}
      else if (child.localName = 'deceasedDate') then
        element.deceased := ParseDate(child, path+'/deceasedDate'){x.3}
      else if (child.localName = 'deceasedString') then
        element.deceased := ParseString(child, path+'/deceasedString'){x.3}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'condition') then
        element.conditionList.Add(ParseFamilyMemberHistoryCondition(child, path+'/condition')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeFamilyMemberHistory(xml : TXmlBuilder; name : String; elem : TFhirFamilyMemberHistory);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeFamilyMemberHistoryChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeFamilyMemberHistoryChildren(xml : TXmlBuilder; elem : TFhirFamilyMemberHistory);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesCanonical') then
    for i := 0 to elem.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', elem.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesUri') then
    for i := 0 to elem.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', elem.instantiatesUriList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirHistoryStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dataAbsentReason') then
    ComposeCodeableConcept(xml, 'dataAbsentReason', elem.dataAbsentReason);{x.2a}
  ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  ComposeCodeableConcept(xml, 'relationship', elem.relationship);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('sex') then
    ComposeCodeableConcept(xml, 'sex', elem.sex);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.born is TFhirPeriod) {6} then
    ComposePeriod(xml, 'bornPeriod', TFhirPeriod(elem.born))
  else if (SummaryOption in [soFull, soData]) and (elem.born is TFhirDate) {6} then
    ComposeDate(xml, 'bornDate', TFhirDate(elem.born))
  else if (SummaryOption in [soFull, soData]) and (elem.born is TFhirString) {6} then
    ComposeString(xml, 'bornString', TFhirString(elem.born));
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.age is TFhirAge) {6} then
    ComposeAge(xml, 'ageAge', TFhirAge(elem.age))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.age is TFhirRange) {6} then
    ComposeRange(xml, 'ageRange', TFhirRange(elem.age))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.age is TFhirString) {6} then
    ComposeString(xml, 'ageString', TFhirString(elem.age));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('estimatedAge') then
    ComposeBoolean(xml, 'estimatedAge', elem.estimatedAgeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirAge) {6} then
    ComposeAge(xml, 'deceasedAge', TFhirAge(elem.deceased))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirRange) {6} then
    ComposeRange(xml, 'deceasedRange', TFhirRange(elem.deceased))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'deceasedBoolean', TFhirBoolean(elem.deceased))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirDate) {6} then
    ComposeDate(xml, 'deceasedDate', TFhirDate(elem.deceased))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirString) {6} then
    ComposeString(xml, 'deceasedString', TFhirString(elem.deceased));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('condition') then
    for i := 0 to elem.conditionList.Count - 1 do
      ComposeFamilyMemberHistoryCondition(xml, 'condition', elem.conditionList[i]);
end;

{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
function TFHIRXmlParser.ParseFlag(element : TMXmlElement; path : string) : TFhirFlag;
var
  child : TMXmlElement;
begin
  result := TFhirFlag.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseFlagChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseFlagChild(element : TFhirFlag; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirFlagStatusEnum, SYSTEMS_TFhirFlagStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'author') then
        element.author := ParseReference{TFhirDevice}(child, path+'/author') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeFlag(xml : TXmlBuilder; name : String; elem : TFhirFlag);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeFlagChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeFlagChildren(xml : TXmlBuilder; elem : TFhirFlag);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirFlagStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    ComposeReference{TFhirDevice}(xml, 'author', elem.author);{x.2a}
end;

{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
function TFHIRXmlParser.ParseGoalTarget(element : TMXmlElement; path : string) : TFhirGoalTarget;
var
  child : TMXmlElement;
begin
  result := TFhirGoalTarget.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGoalTargetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGoalTargetChild(element : TFhirGoalTarget; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'measure') then
        element.measure := ParseCodeableConcept(child, path+'/measure') {b}
      else if (child.localName = 'detailQuantity') then
        element.detail := ParseQuantity(child, path+'/detailQuantity'){x.3}
      else if (child.localName = 'detailRange') then
        element.detail := ParseRange(child, path+'/detailRange'){x.3}
      else if (child.localName = 'detailCodeableConcept') then
        element.detail := ParseCodeableConcept(child, path+'/detailCodeableConcept'){x.3}
      else if (child.localName = 'detailRatio') then
        element.detail := ParseRatio(child, path+'/detailRatio'){x.3}
      else if (child.localName = 'detailString') then
        element.detail := ParseString(child, path+'/detailString'){x.3}
      else if (child.localName = 'detailBoolean') then
        element.detail := ParseBoolean(child, path+'/detailBoolean'){x.3}
      else if (child.localName = 'detailInteger') then
        element.detail := ParseInteger(child, path+'/detailInteger'){x.3}
      else if (child.localName = 'dueDuration') then
        element.due := ParseDuration(child, path+'/dueDuration'){x.3}
      else if (child.localName = 'dueDate') then
        element.due := ParseDate(child, path+'/dueDate'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGoalTarget(xml : TXmlBuilder; name : String; elem : TFhirGoalTarget);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeGoalTargetChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeGoalTargetChildren(xml : TXmlBuilder; elem : TFhirGoalTarget);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'measure', elem.measure);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.detail is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'detailQuantity', TFhirQuantity(elem.detail))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.detail is TFhirRange) {6} then
    ComposeRange(xml, 'detailRange', TFhirRange(elem.detail))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.detail is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'detailCodeableConcept', TFhirCodeableConcept(elem.detail))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.detail is TFhirRatio) {6} then
    ComposeRatio(xml, 'detailRatio', TFhirRatio(elem.detail))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.detail is TFhirString) {6} then
    ComposeString(xml, 'detailString', TFhirString(elem.detail))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.detail is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'detailBoolean', TFhirBoolean(elem.detail))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.detail is TFhirInteger) {6} then
    ComposeInteger(xml, 'detailInteger', TFhirInteger(elem.detail));
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.due is TFhirDuration) {6} then
    ComposeDuration(xml, 'dueDuration', TFhirDuration(elem.due))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.due is TFhirDate) {6} then
    ComposeDate(xml, 'dueDate', TFhirDate(elem.due));
end;

function TFHIRXmlParser.ParseGoal(element : TMXmlElement; path : string) : TFhirGoal;
var
  child : TMXmlElement;
begin
  result := TFhirGoal.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGoalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGoalChild(element : TFhirGoal; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'lifecycleStatus') then
        element.lifecycleStatusElement := ParseEnum(CODES_TFhirGoalStatusEnum, SYSTEMS_TFhirGoalStatusEnum, path+'/lifecycleStatus', child){1a}
      else if (child.localName = 'achievementStatus') then
        element.achievementStatus := ParseCodeableConcept(child, path+'/achievementStatus') {b}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'priority') then
        element.priority := ParseCodeableConcept(child, path+'/priority') {b}
      else if (child.localName = 'description') then
        element.description := ParseCodeableConcept(child, path+'/description') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'startCodeableConcept') then
        element.start := ParseCodeableConcept(child, path+'/startCodeableConcept'){x.3}
      else if (child.localName = 'startDate') then
        element.start := ParseDate(child, path+'/startDate'){x.3}
      else if (child.localName = 'target') then
        element.targetList.Add(ParseGoalTarget(child, path+'/target')){y.2}
      else if (child.localName = 'statusDate') then
        element.statusDateElement := ParseDate(child, path+'/statusDate') {b}
      else if (child.localName = 'statusReason') then
        element.statusReasonElement := ParseString(child, path+'/statusReason') {b}
      else if (child.localName = 'expressedBy') then
        element.expressedBy := ParseReference{TFhirPatient}(child, path+'/expressedBy') {b}
      else if (child.localName = 'addresses') then
        element.addressesList.Add(ParseReference{TFhirCondition}(child, path+'/addresses')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'outcomeCode') then
        element.outcomeCodeList.Add(ParseCodeableConcept(child, path+'/outcomeCode')){y.2}
      else if (child.localName = 'outcomeReference') then
        element.outcomeReferenceList.Add(ParseReference{TFhirObservation}(child, path+'/outcomeReference')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGoal(xml : TXmlBuilder; name : String; elem : TFhirGoal);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeGoalChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeGoalChildren(xml : TXmlBuilder; elem : TFhirGoal);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'lifecycleStatus', elem.LifecycleStatusElement, CODES_TFhirGoalStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('achievementStatus') then
    ComposeCodeableConcept(xml, 'achievementStatus', elem.achievementStatus);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeCodeableConcept(xml, 'priority', elem.priority);{x.2a}
  ComposeCodeableConcept(xml, 'description', elem.description);{x.2a}
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.start is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'startCodeableConcept', TFhirCodeableConcept(elem.start))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.start is TFhirDate) {6} then
    ComposeDate(xml, 'startDate', TFhirDate(elem.start));
  if (SummaryOption in [soFull, soData]) and doCompose('target') then
    for i := 0 to elem.targetList.Count - 1 do
      ComposeGoalTarget(xml, 'target', elem.targetList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('statusDate') then
    ComposeDate(xml, 'statusDate', elem.statusDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('statusReason') then
    ComposeString(xml, 'statusReason', elem.statusReasonElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('expressedBy') then
    ComposeReference{TFhirPatient}(xml, 'expressedBy', elem.expressedBy);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('addresses') then
    for i := 0 to elem.addressesList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'addresses', elem.addressesList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('outcomeCode') then
    for i := 0 to elem.outcomeCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'outcomeCode', elem.outcomeCodeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('outcomeReference') then
    for i := 0 to elem.outcomeReferenceList.Count - 1 do
      ComposeReference{TFhirObservation}(xml, 'outcomeReference', elem.outcomeReferenceList[i]);
end;

{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
function TFHIRXmlParser.ParseGraphDefinitionLink(element : TMXmlElement; path : string) : TFhirGraphDefinitionLink;
var
  child : TMXmlElement;
begin
  result := TFhirGraphDefinitionLink.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGraphDefinitionLinkChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGraphDefinitionLinkChild(element : TFhirGraphDefinitionLink; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        element.pathElement := ParseString(child, path+'/path') {b}
      else if (child.localName = 'sliceName') then
        element.sliceNameElement := ParseString(child, path+'/sliceName') {b}
      else if (child.localName = 'min') then
        element.minElement := ParseInteger(child, path+'/min') {b}
      else if (child.localName = 'max') then
        element.maxElement := ParseString(child, path+'/max') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'target') then
        element.targetList.Add(ParseGraphDefinitionLinkTarget(child, path+'/target')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGraphDefinitionLink(xml : TXmlBuilder; name : String; elem : TFhirGraphDefinitionLink);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeGraphDefinitionLinkChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeGraphDefinitionLinkChildren(xml : TXmlBuilder; elem : TFhirGraphDefinitionLink);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'path', elem.pathElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'sliceName', elem.sliceNameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'min', elem.minElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'max', elem.maxElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.targetList.Count - 1 do
      ComposeGraphDefinitionLinkTarget(xml, 'target', elem.targetList[i]);
end;

function TFHIRXmlParser.ParseGraphDefinitionLinkTarget(element : TMXmlElement; path : string) : TFhirGraphDefinitionLinkTarget;
var
  child : TMXmlElement;
begin
  result := TFhirGraphDefinitionLinkTarget.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGraphDefinitionLinkTargetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGraphDefinitionLinkTargetChild(element : TFhirGraphDefinitionLinkTarget; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, path+'/type', child){1a}
      else if (child.localName = 'params') then
        element.paramsElement := ParseString(child, path+'/params') {b}
      else if (child.localName = 'profile') then
        element.profileElement := ParseCanonical(child, path+'/profile') {b}
      else if (child.localName = 'compartment') then
        element.compartmentList.Add(ParseGraphDefinitionLinkTargetCompartment(child, path+'/compartment')){y.2}
      else if (child.localName = 'link') then
        element.link_List.Add(ParseGraphDefinitionLink(child, path+'/link')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGraphDefinitionLinkTarget(xml : TXmlBuilder; name : String; elem : TFhirGraphDefinitionLinkTarget);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeGraphDefinitionLinkTargetChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeGraphDefinitionLinkTargetChildren(xml : TXmlBuilder; elem : TFhirGraphDefinitionLinkTarget);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'params', elem.paramsElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'profile', elem.profileElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.compartmentList.Count - 1 do
      ComposeGraphDefinitionLinkTargetCompartment(xml, 'compartment', elem.compartmentList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.link_List.Count - 1 do
      ComposeGraphDefinitionLink(xml, 'link', elem.link_List[i]);
end;

function TFHIRXmlParser.ParseGraphDefinitionLinkTargetCompartment(element : TMXmlElement; path : string) : TFhirGraphDefinitionLinkTargetCompartment;
var
  child : TMXmlElement;
begin
  result := TFhirGraphDefinitionLinkTargetCompartment.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGraphDefinitionLinkTargetCompartmentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGraphDefinitionLinkTargetCompartmentChild(element : TFhirGraphDefinitionLinkTargetCompartment; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'use') then
        element.useElement := ParseEnum(CODES_TFhirGraphCompartmentUseEnum, SYSTEMS_TFhirGraphCompartmentUseEnum, path+'/use', child){1a}
      else if (child.localName = 'code') then
        element.codeElement := ParseEnum(CODES_TFhirCompartmentTypeEnum, SYSTEMS_TFhirCompartmentTypeEnum, path+'/code', child){1a}
      else if (child.localName = 'rule') then
        element.ruleElement := ParseEnum(CODES_TFhirGraphCompartmentRuleEnum, SYSTEMS_TFhirGraphCompartmentRuleEnum, path+'/rule', child){1a}
      else if (child.localName = 'expression') then
        element.expressionElement := ParseString(child, path+'/expression') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGraphDefinitionLinkTargetCompartment(xml : TXmlBuilder; name : String; elem : TFhirGraphDefinitionLinkTargetCompartment);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeGraphDefinitionLinkTargetCompartmentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeGraphDefinitionLinkTargetCompartmentChildren(xml : TXmlBuilder; elem : TFhirGraphDefinitionLinkTargetCompartment);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'use', elem.UseElement, CODES_TFhirGraphCompartmentUseEnum);
  ComposeEnum(xml, 'code', elem.CodeElement, CODES_TFhirCompartmentTypeEnum);
  ComposeEnum(xml, 'rule', elem.RuleElement, CODES_TFhirGraphCompartmentRuleEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'expression', elem.expressionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
end;

function TFHIRXmlParser.ParseGraphDefinition(element : TMXmlElement; path : string) : TFhirGraphDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirGraphDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGraphDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGraphDefinitionChild(element : TFhirGraphDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'start') then
        element.startElement := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, path+'/start', child){1a}
      else if (child.localName = 'profile') then
        element.profileElement := ParseCanonical(child, path+'/profile') {b}
      else if (child.localName = 'link') then
        element.link_List.Add(ParseGraphDefinitionLink(child, path+'/link')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGraphDefinition(xml : TXmlBuilder; name : String; elem : TFhirGraphDefinition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeGraphDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeGraphDefinitionChildren(xml : TXmlBuilder; elem : TFhirGraphDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  ComposeEnum(xml, 'start', elem.StartElement, CODES_TFhirResourceTypesEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('profile') then
    ComposeCanonical(xml, 'profile', elem.profileElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('link_') then
    for i := 0 to elem.link_List.Count - 1 do
      ComposeGraphDefinitionLink(xml, 'link', elem.link_List[i]);
end;

{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
function TFHIRXmlParser.ParseGroupCharacteristic(element : TMXmlElement; path : string) : TFhirGroupCharacteristic;
var
  child : TMXmlElement;
begin
  result := TFhirGroupCharacteristic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGroupCharacteristicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGroupCharacteristicChild(element : TFhirGroupCharacteristic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'valueCodeableConcept') then
        element.value := ParseCodeableConcept(child, path+'/valueCodeableConcept'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueRange') then
        element.value := ParseRange(child, path+'/valueRange'){x.3}
      else if (child.localName = 'valueReference') then
        element.value := ParseReference(child, path+'/valueReference'){x.3}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'exclude') then
        element.excludeElement := ParseBoolean(child, path+'/exclude') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGroupCharacteristic(xml : TXmlBuilder; name : String; elem : TFhirGroupCharacteristic);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeGroupCharacteristicChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeGroupCharacteristicChildren(xml : TXmlBuilder; elem : TFhirGroupCharacteristic);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (elem.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(elem.value))
  else if (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (elem.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(elem.value))
  else if (elem.value is TFhirReference) {6} then
    ComposeReference(xml, 'valueReference', TFhirReference(elem.value))
  else if (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value));
  ComposeBoolean(xml, 'exclude', elem.excludeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParseGroupMember(element : TMXmlElement; path : string) : TFhirGroupMember;
var
  child : TMXmlElement;
begin
  result := TFhirGroupMember.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGroupMemberChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGroupMemberChild(element : TFhirGroupMember; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'entity') then
        element.entity := ParseReference{TFhirPatient}(child, path+'/entity') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'inactive') then
        element.inactiveElement := ParseBoolean(child, path+'/inactive') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGroupMember(xml : TXmlBuilder; name : String; elem : TFhirGroupMember);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeGroupMemberChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeGroupMemberChildren(xml : TXmlBuilder; elem : TFhirGroupMember);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeReference{TFhirPatient}(xml, 'entity', elem.entity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'inactive', elem.inactiveElement);{x.2b}
end;

function TFHIRXmlParser.ParseGroup(element : TMXmlElement; path : string) : TFhirGroup;
var
  child : TMXmlElement;
begin
  result := TFhirGroup.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGroupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGroupChild(element : TFhirGroup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'active') then
        element.activeElement := ParseBoolean(child, path+'/active') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirGroupTypeEnum, SYSTEMS_TFhirGroupTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'actual') then
        element.actualElement := ParseBoolean(child, path+'/actual') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'quantity') then
        element.quantityElement := ParseUnsignedInt(child, path+'/quantity') {b}
      else if (child.localName = 'managingEntity') then
        element.managingEntity := ParseReference{TFhirOrganization}(child, path+'/managingEntity') {b}
      else if (child.localName = 'characteristic') then
        element.characteristicList.Add(ParseGroupCharacteristic(child, path+'/characteristic')){y.2}
      else if (child.localName = 'member') then
        element.memberList.Add(ParseGroupMember(child, path+'/member')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGroup(xml : TXmlBuilder; name : String; elem : TFhirGroup);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeGroupChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeGroupChildren(xml : TXmlBuilder; elem : TFhirGroup);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposeBoolean(xml, 'active', elem.activeElement);{x.2b}
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirGroupTypeEnum);
  ComposeBoolean(xml, 'actual', elem.actualElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('quantity') then
    ComposeUnsignedInt(xml, 'quantity', elem.quantityElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('managingEntity') then
    ComposeReference{TFhirOrganization}(xml, 'managingEntity', elem.managingEntity);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('characteristic') then
    for i := 0 to elem.characteristicList.Count - 1 do
      ComposeGroupCharacteristic(xml, 'characteristic', elem.characteristicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('member') then
    for i := 0 to elem.memberList.Count - 1 do
      ComposeGroupMember(xml, 'member', elem.memberList[i]);
end;

{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
function TFHIRXmlParser.ParseGuidanceResponse(element : TMXmlElement; path : string) : TFhirGuidanceResponse;
var
  child : TMXmlElement;
begin
  result := TFhirGuidanceResponse.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGuidanceResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGuidanceResponseChild(element : TFhirGuidanceResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'requestIdentifier') then
        element.requestIdentifier := ParseIdentifier(child, path+'/requestIdentifier') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'moduleCanonical') then
        element.module := ParseCanonical(child, path+'/moduleCanonical'){x.3}
      else if (child.localName = 'moduleCodeableConcept') then
        element.module := ParseCodeableConcept(child, path+'/moduleCodeableConcept'){x.3}
      else if (child.localName = 'moduleUri') then
        element.module := ParseUri(child, path+'/moduleUri'){x.3}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirGuidanceResponseStatusEnum, SYSTEMS_TFhirGuidanceResponseStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'occurrenceDateTime') then
        element.occurrenceDateTimeElement := ParseDateTime(child, path+'/occurrenceDateTime') {b}
      else if (child.localName = 'performer') then
        element.performer := ParseReference{TFhirDevice}(child, path+'/performer') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'evaluationMessage') then
        element.evaluationMessageList.Add(ParseReference{TFhirOperationOutcome}(child, path+'/evaluationMessage')){y.2}
      else if (child.localName = 'outputParameters') then
        element.outputParameters := ParseReference{TFhirParameters}(child, path+'/outputParameters') {b}
      else if (child.localName = 'result') then
        element.result := ParseReference{TFhirCarePlan}(child, path+'/result') {b}
      else if (child.localName = 'dataRequirement') then
        element.dataRequirementList.Add(ParseDataRequirement(child, path+'/dataRequirement')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGuidanceResponse(xml : TXmlBuilder; name : String; elem : TFhirGuidanceResponse);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeGuidanceResponseChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeGuidanceResponseChildren(xml : TXmlBuilder; elem : TFhirGuidanceResponse);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requestIdentifier') then
    ComposeIdentifier(xml, 'requestIdentifier', elem.requestIdentifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (elem.module is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'moduleCanonical', TFhirCanonical(elem.module))
  else if (elem.module is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'moduleCodeableConcept', TFhirCodeableConcept(elem.module))
  else if (elem.module is TFhirUri) {6} then
    ComposeUri(xml, 'moduleUri', TFhirUri(elem.module));
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirGuidanceResponseStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('occurrenceDateTime') then
    ComposeDateTime(xml, 'occurrenceDateTime', elem.occurrenceDateTimeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('performer') then
    ComposeReference{TFhirDevice}(xml, 'performer', elem.performer);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('evaluationMessage') then
    for i := 0 to elem.evaluationMessageList.Count - 1 do
      ComposeReference{TFhirOperationOutcome}(xml, 'evaluationMessage', elem.evaluationMessageList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('outputParameters') then
    ComposeReference{TFhirParameters}(xml, 'outputParameters', elem.outputParameters);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('result') then
    ComposeReference{TFhirCarePlan}(xml, 'result', elem.result);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('dataRequirement') then
    for i := 0 to elem.dataRequirementList.Count - 1 do
      ComposeDataRequirement(xml, 'dataRequirement', elem.dataRequirementList[i]);
end;

{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
function TFHIRXmlParser.ParseHealthcareServiceEligibility(element : TMXmlElement; path : string) : TFhirHealthcareServiceEligibility;
var
  child : TMXmlElement;
begin
  result := TFhirHealthcareServiceEligibility.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseHealthcareServiceEligibilityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseHealthcareServiceEligibilityChild(element : TFhirHealthcareServiceEligibility; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'comment') then
        element.commentElement := ParseMarkdown(child, path+'/comment') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeHealthcareServiceEligibility(xml : TXmlBuilder; name : String; elem : TFhirHealthcareServiceEligibility);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeHealthcareServiceEligibilityChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeHealthcareServiceEligibilityChildren(xml : TXmlBuilder; elem : TFhirHealthcareServiceEligibility);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'comment', elem.commentElement);{x.2b}
end;

function TFHIRXmlParser.ParseHealthcareServiceAvailableTime(element : TMXmlElement; path : string) : TFhirHealthcareServiceAvailableTime;
var
  child : TMXmlElement;
begin
  result := TFhirHealthcareServiceAvailableTime.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseHealthcareServiceAvailableTimeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseHealthcareServiceAvailableTimeChild(element : TFhirHealthcareServiceAvailableTime; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'daysOfWeek') then
        element.daysOfWeekList.Add(ParseEnum(CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum, path+'/daysOfWeek', child)){y.1}
      else if (child.localName = 'allDay') then
        element.allDayElement := ParseBoolean(child, path+'/allDay') {b}
      else if (child.localName = 'availableStartTime') then
        element.availableStartTimeElement := ParseTime(child, path+'/availableStartTime') {b}
      else if (child.localName = 'availableEndTime') then
        element.availableEndTimeElement := ParseTime(child, path+'/availableEndTime') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeHealthcareServiceAvailableTime(xml : TXmlBuilder; name : String; elem : TFhirHealthcareServiceAvailableTime);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeHealthcareServiceAvailableTimeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeHealthcareServiceAvailableTimeChildren(xml : TXmlBuilder; elem : TFhirHealthcareServiceAvailableTime);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.daysOfWeekList.Count - 1 do
      ComposeEnum(xml, 'daysOfWeek', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'allDay', elem.allDayElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeTime(xml, 'availableStartTime', elem.availableStartTimeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeTime(xml, 'availableEndTime', elem.availableEndTimeElement);{x.2b}
end;

function TFHIRXmlParser.ParseHealthcareServiceNotAvailable(element : TMXmlElement; path : string) : TFhirHealthcareServiceNotAvailable;
var
  child : TMXmlElement;
begin
  result := TFhirHealthcareServiceNotAvailable.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseHealthcareServiceNotAvailableChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseHealthcareServiceNotAvailableChild(element : TFhirHealthcareServiceNotAvailable; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'during') then
        element.during := ParsePeriod(child, path+'/during') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeHealthcareServiceNotAvailable(xml : TXmlBuilder; name : String; elem : TFhirHealthcareServiceNotAvailable);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeHealthcareServiceNotAvailableChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeHealthcareServiceNotAvailableChildren(xml : TXmlBuilder; elem : TFhirHealthcareServiceNotAvailable);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'during', elem.during);{x.2a}
end;

function TFHIRXmlParser.ParseHealthcareService(element : TMXmlElement; path : string) : TFhirHealthcareService;
var
  child : TMXmlElement;
begin
  result := TFhirHealthcareService.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseHealthcareServiceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseHealthcareServiceChild(element : TFhirHealthcareService; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'active') then
        element.activeElement := ParseBoolean(child, path+'/active') {b}
      else if (child.localName = 'providedBy') then
        element.providedBy := ParseReference{TFhirOrganization}(child, path+'/providedBy') {b}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'specialty') then
        element.specialtyList.Add(ParseCodeableConcept(child, path+'/specialty')){y.2}
      else if (child.localName = 'location') then
        element.locationList.Add(ParseReference{TFhirLocation}(child, path+'/location')){y.2}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if (child.localName = 'extraDetails') then
        element.extraDetailsElement := ParseMarkdown(child, path+'/extraDetails') {b}
      else if (child.localName = 'photo') then
        element.photo := ParseAttachment(child, path+'/photo') {b}
      else if (child.localName = 'telecom') then
        element.telecomList.Add(ParseContactPoint(child, path+'/telecom')){y.2}
      else if (child.localName = 'coverageArea') then
        element.coverageAreaList.Add(ParseReference{TFhirLocation}(child, path+'/coverageArea')){y.2}
      else if (child.localName = 'serviceProvisionCode') then
        element.serviceProvisionCodeList.Add(ParseCodeableConcept(child, path+'/serviceProvisionCode')){y.2}
      else if (child.localName = 'eligibility') then
        element.eligibilityList.Add(ParseHealthcareServiceEligibility(child, path+'/eligibility')){y.2}
      else if (child.localName = 'program') then
        element.program_List.Add(ParseCodeableConcept(child, path+'/program')){y.2}
      else if (child.localName = 'characteristic') then
        element.characteristicList.Add(ParseCodeableConcept(child, path+'/characteristic')){y.2}
      else if (child.localName = 'communication') then
        element.communicationList.Add(ParseCodeableConcept(child, path+'/communication')){y.2}
      else if (child.localName = 'referralMethod') then
        element.referralMethodList.Add(ParseCodeableConcept(child, path+'/referralMethod')){y.2}
      else if (child.localName = 'appointmentRequired') then
        element.appointmentRequiredElement := ParseBoolean(child, path+'/appointmentRequired') {b}
      else if (child.localName = 'availableTime') then
        element.availableTimeList.Add(ParseHealthcareServiceAvailableTime(child, path+'/availableTime')){y.2}
      else if (child.localName = 'notAvailable') then
        element.notAvailableList.Add(ParseHealthcareServiceNotAvailable(child, path+'/notAvailable')){y.2}
      else if (child.localName = 'availabilityExceptions') then
        element.availabilityExceptionsElement := ParseString(child, path+'/availabilityExceptions') {b}
      else if (child.localName = 'endpoint') then
        element.endpointList.Add(ParseReference{TFhirEndpoint}(child, path+'/endpoint')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeHealthcareService(xml : TXmlBuilder; name : String; elem : TFhirHealthcareService);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeHealthcareServiceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeHealthcareServiceChildren(xml : TXmlBuilder; elem : TFhirHealthcareService);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposeBoolean(xml, 'active', elem.activeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('providedBy') then
    ComposeReference{TFhirOrganization}(xml, 'providedBy', elem.providedBy);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specialty') then
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialty', elem.specialtyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('location') then
    for i := 0 to elem.locationList.Count - 1 do
      ComposeReference{TFhirLocation}(xml, 'location', elem.locationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('comment') then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('extraDetails') then
    ComposeMarkdown(xml, 'extraDetails', elem.extraDetailsElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('photo') then
    ComposeAttachment(xml, 'photo', elem.photo);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('telecom') then
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', elem.telecomList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('coverageArea') then
    for i := 0 to elem.coverageAreaList.Count - 1 do
      ComposeReference{TFhirLocation}(xml, 'coverageArea', elem.coverageAreaList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('serviceProvisionCode') then
    for i := 0 to elem.serviceProvisionCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'serviceProvisionCode', elem.serviceProvisionCodeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('eligibility') then
    for i := 0 to elem.eligibilityList.Count - 1 do
      ComposeHealthcareServiceEligibility(xml, 'eligibility', elem.eligibilityList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('program_') then
    for i := 0 to elem.program_List.Count - 1 do
      ComposeCodeableConcept(xml, 'program', elem.program_List[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('characteristic') then
    for i := 0 to elem.characteristicList.Count - 1 do
      ComposeCodeableConcept(xml, 'characteristic', elem.characteristicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('communication') then
    for i := 0 to elem.communicationList.Count - 1 do
      ComposeCodeableConcept(xml, 'communication', elem.communicationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('referralMethod') then
    for i := 0 to elem.referralMethodList.Count - 1 do
      ComposeCodeableConcept(xml, 'referralMethod', elem.referralMethodList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('appointmentRequired') then
    ComposeBoolean(xml, 'appointmentRequired', elem.appointmentRequiredElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('availableTime') then
    for i := 0 to elem.availableTimeList.Count - 1 do
      ComposeHealthcareServiceAvailableTime(xml, 'availableTime', elem.availableTimeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('notAvailable') then
    for i := 0 to elem.notAvailableList.Count - 1 do
      ComposeHealthcareServiceNotAvailable(xml, 'notAvailable', elem.notAvailableList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('availabilityExceptions') then
    ComposeString(xml, 'availabilityExceptions', elem.availabilityExceptionsElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('endpoint') then
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(xml, 'endpoint', elem.endpointList[i]);
end;

{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
function TFHIRXmlParser.ParseImagingStudySeries(element : TMXmlElement; path : string) : TFhirImagingStudySeries;
var
  child : TMXmlElement;
begin
  result := TFhirImagingStudySeries.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImagingStudySeriesChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImagingStudySeriesChild(element : TFhirImagingStudySeries; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'uid') then
        element.uidElement := ParseId(child, path+'/uid') {b}
      else if (child.localName = 'number') then
        element.numberElement := ParseUnsignedInt(child, path+'/number') {b}
      else if (child.localName = 'modality') then
        element.modality := ParseCoding(child, path+'/modality') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'numberOfInstances') then
        element.numberOfInstancesElement := ParseUnsignedInt(child, path+'/numberOfInstances') {b}
      else if (child.localName = 'endpoint') then
        element.endpointList.Add(ParseReference{TFhirEndpoint}(child, path+'/endpoint')){y.2}
      else if (child.localName = 'bodySite') then
        element.bodySite := ParseCoding(child, path+'/bodySite') {b}
      else if (child.localName = 'laterality') then
        element.laterality := ParseCoding(child, path+'/laterality') {b}
      else if (child.localName = 'specimen') then
        element.specimenList.Add(ParseReference{TFhirSpecimen}(child, path+'/specimen')){y.2}
      else if (child.localName = 'started') then
        element.startedElement := ParseDateTime(child, path+'/started') {b}
      else if (child.localName = 'performer') then
        element.performerList.Add(ParseImagingStudySeriesPerformer(child, path+'/performer')){y.2}
      else if (child.localName = 'instance') then
        element.instanceList.Add(ParseImagingStudySeriesInstance(child, path+'/instance')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImagingStudySeries(xml : TXmlBuilder; name : String; elem : TFhirImagingStudySeries);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImagingStudySeriesChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImagingStudySeriesChildren(xml : TXmlBuilder; elem : TFhirImagingStudySeries);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeId(xml, 'uid', elem.uidElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedInt(xml, 'number', elem.numberElement);{x.2b}
  ComposeCoding(xml, 'modality', elem.modality);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedInt(xml, 'numberOfInstances', elem.numberOfInstancesElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(xml, 'endpoint', elem.endpointList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(xml, 'bodySite', elem.bodySite);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(xml, 'laterality', elem.laterality);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.specimenList.Count - 1 do
      ComposeReference{TFhirSpecimen}(xml, 'specimen', elem.specimenList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'started', elem.startedElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.performerList.Count - 1 do
      ComposeImagingStudySeriesPerformer(xml, 'performer', elem.performerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.instanceList.Count - 1 do
      ComposeImagingStudySeriesInstance(xml, 'instance', elem.instanceList[i]);
end;

function TFHIRXmlParser.ParseImagingStudySeriesPerformer(element : TMXmlElement; path : string) : TFhirImagingStudySeriesPerformer;
var
  child : TMXmlElement;
begin
  result := TFhirImagingStudySeriesPerformer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImagingStudySeriesPerformerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImagingStudySeriesPerformerChild(element : TFhirImagingStudySeriesPerformer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'function') then
        element.function_ := ParseCodeableConcept(child, path+'/function') {b}
      else if (child.localName = 'actor') then
        element.actor := ParseReference{TFhirPractitioner}(child, path+'/actor') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImagingStudySeriesPerformer(xml : TXmlBuilder; name : String; elem : TFhirImagingStudySeriesPerformer);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImagingStudySeriesPerformerChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImagingStudySeriesPerformerChildren(xml : TXmlBuilder; elem : TFhirImagingStudySeriesPerformer);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'function', elem.function_);{x.2a}
  ComposeReference{TFhirPractitioner}(xml, 'actor', elem.actor);{x.2a}
end;

function TFHIRXmlParser.ParseImagingStudySeriesInstance(element : TMXmlElement; path : string) : TFhirImagingStudySeriesInstance;
var
  child : TMXmlElement;
begin
  result := TFhirImagingStudySeriesInstance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImagingStudySeriesInstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImagingStudySeriesInstanceChild(element : TFhirImagingStudySeriesInstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'uid') then
        element.uidElement := ParseId(child, path+'/uid') {b}
      else if (child.localName = 'sopClass') then
        element.sopClass := ParseCoding(child, path+'/sopClass') {b}
      else if (child.localName = 'number') then
        element.numberElement := ParseUnsignedInt(child, path+'/number') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImagingStudySeriesInstance(xml : TXmlBuilder; name : String; elem : TFhirImagingStudySeriesInstance);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImagingStudySeriesInstanceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImagingStudySeriesInstanceChildren(xml : TXmlBuilder; elem : TFhirImagingStudySeriesInstance);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeId(xml, 'uid', elem.uidElement);{x.2b}
  ComposeCoding(xml, 'sopClass', elem.sopClass);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedInt(xml, 'number', elem.numberElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
end;

function TFHIRXmlParser.ParseImagingStudy(element : TMXmlElement; path : string) : TFhirImagingStudy;
var
  child : TMXmlElement;
begin
  result := TFhirImagingStudy.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImagingStudyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImagingStudyChild(element : TFhirImagingStudy; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirImagingstudyStatusEnum, SYSTEMS_TFhirImagingstudyStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'modality') then
        element.modalityList.Add(ParseCoding(child, path+'/modality')){y.2}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'started') then
        element.startedElement := ParseDateTime(child, path+'/started') {b}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirCarePlan}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'referrer') then
        element.referrer := ParseReference{TFhirPractitioner}(child, path+'/referrer') {b}
      else if (child.localName = 'interpreter') then
        element.interpreterList.Add(ParseReference{TFhirPractitioner}(child, path+'/interpreter')){y.2}
      else if (child.localName = 'endpoint') then
        element.endpointList.Add(ParseReference{TFhirEndpoint}(child, path+'/endpoint')){y.2}
      else if (child.localName = 'numberOfSeries') then
        element.numberOfSeriesElement := ParseUnsignedInt(child, path+'/numberOfSeries') {b}
      else if (child.localName = 'numberOfInstances') then
        element.numberOfInstancesElement := ParseUnsignedInt(child, path+'/numberOfInstances') {b}
      else if (child.localName = 'procedureReference') then
        element.procedureReference := ParseReference{TFhirProcedure}(child, path+'/procedureReference') {b}
      else if (child.localName = 'procedureCode') then
        element.procedureCodeList.Add(ParseCodeableConcept(child, path+'/procedureCode')){y.2}
      else if (child.localName = 'location') then
        element.location := ParseReference{TFhirLocation}(child, path+'/location') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'series') then
        element.seriesList.Add(ParseImagingStudySeries(child, path+'/series')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImagingStudy(xml : TXmlBuilder; name : String; elem : TFhirImagingStudy);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeImagingStudyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImagingStudyChildren(xml : TXmlBuilder; elem : TFhirImagingStudy);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirImagingstudyStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('modality') then
    for i := 0 to elem.modalityList.Count - 1 do
      ComposeCoding(xml, 'modality', elem.modalityList[i]);
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('started') then
    ComposeDateTime(xml, 'started', elem.startedElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirCarePlan}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('referrer') then
    ComposeReference{TFhirPractitioner}(xml, 'referrer', elem.referrer);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('interpreter') then
    for i := 0 to elem.interpreterList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'interpreter', elem.interpreterList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('endpoint') then
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(xml, 'endpoint', elem.endpointList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('numberOfSeries') then
    ComposeUnsignedInt(xml, 'numberOfSeries', elem.numberOfSeriesElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('numberOfInstances') then
    ComposeUnsignedInt(xml, 'numberOfInstances', elem.numberOfInstancesElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('procedureReference') then
    ComposeReference{TFhirProcedure}(xml, 'procedureReference', elem.procedureReference);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('procedureCode') then
    for i := 0 to elem.procedureCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'procedureCode', elem.procedureCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(xml, 'location', elem.location);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('series') then
    for i := 0 to elem.seriesList.Count - 1 do
      ComposeImagingStudySeries(xml, 'series', elem.seriesList[i]);
end;

{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
function TFHIRXmlParser.ParseImmunizationPerformer(element : TMXmlElement; path : string) : TFhirImmunizationPerformer;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationPerformer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationPerformerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationPerformerChild(element : TFhirImmunizationPerformer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'function') then
        element.function_ := ParseCodeableConcept(child, path+'/function') {b}
      else if (child.localName = 'actor') then
        element.actor := ParseReference{TFhirPractitioner}(child, path+'/actor') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationPerformer(xml : TXmlBuilder; name : String; elem : TFhirImmunizationPerformer);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImmunizationPerformerChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImmunizationPerformerChildren(xml : TXmlBuilder; elem : TFhirImmunizationPerformer);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'function', elem.function_);{x.2a}
  ComposeReference{TFhirPractitioner}(xml, 'actor', elem.actor);{x.2a}
end;

function TFHIRXmlParser.ParseImmunizationEducation(element : TMXmlElement; path : string) : TFhirImmunizationEducation;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationEducation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationEducationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationEducationChild(element : TFhirImmunizationEducation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'documentType') then
        element.documentTypeElement := ParseString(child, path+'/documentType') {b}
      else if (child.localName = 'reference') then
        element.referenceElement := ParseUri(child, path+'/reference') {b}
      else if (child.localName = 'publicationDate') then
        element.publicationDateElement := ParseDateTime(child, path+'/publicationDate') {b}
      else if (child.localName = 'presentationDate') then
        element.presentationDateElement := ParseDateTime(child, path+'/presentationDate') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationEducation(xml : TXmlBuilder; name : String; elem : TFhirImmunizationEducation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImmunizationEducationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImmunizationEducationChildren(xml : TXmlBuilder; elem : TFhirImmunizationEducation);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'documentType', elem.documentTypeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'reference', elem.referenceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'publicationDate', elem.publicationDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'presentationDate', elem.presentationDateElement);{x.2b}
end;

function TFHIRXmlParser.ParseImmunizationReaction(element : TMXmlElement; path : string) : TFhirImmunizationReaction;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationReaction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationReactionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationReactionChild(element : TFhirImmunizationReaction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'detail') then
        element.detail := ParseReference{TFhirObservation}(child, path+'/detail') {b}
      else if (child.localName = 'reported') then
        element.reportedElement := ParseBoolean(child, path+'/reported') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationReaction(xml : TXmlBuilder; name : String; elem : TFhirImmunizationReaction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImmunizationReactionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImmunizationReactionChildren(xml : TXmlBuilder; elem : TFhirImmunizationReaction);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirObservation}(xml, 'detail', elem.detail);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'reported', elem.reportedElement);{x.2b}
end;

function TFHIRXmlParser.ParseImmunizationProtocolApplied(element : TMXmlElement; path : string) : TFhirImmunizationProtocolApplied;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationProtocolApplied.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationProtocolAppliedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationProtocolAppliedChild(element : TFhirImmunizationProtocolApplied; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'series') then
        element.seriesElement := ParseString(child, path+'/series') {b}
      else if (child.localName = 'authority') then
        element.authority := ParseReference{TFhirOrganization}(child, path+'/authority') {b}
      else if (child.localName = 'targetDisease') then
        element.targetDiseaseList.Add(ParseCodeableConcept(child, path+'/targetDisease')){y.2}
      else if (child.localName = 'doseNumberPositiveInt') then
        element.doseNumber := ParsePositiveInt(child, path+'/doseNumberPositiveInt'){x.3}
      else if (child.localName = 'doseNumberString') then
        element.doseNumber := ParseString(child, path+'/doseNumberString'){x.3}
      else if (child.localName = 'seriesDosesPositiveInt') then
        element.seriesDoses := ParsePositiveInt(child, path+'/seriesDosesPositiveInt'){x.3}
      else if (child.localName = 'seriesDosesString') then
        element.seriesDoses := ParseString(child, path+'/seriesDosesString'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationProtocolApplied(xml : TXmlBuilder; name : String; elem : TFhirImmunizationProtocolApplied);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImmunizationProtocolAppliedChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImmunizationProtocolAppliedChildren(xml : TXmlBuilder; elem : TFhirImmunizationProtocolApplied);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'series', elem.seriesElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(xml, 'authority', elem.authority);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.targetDiseaseList.Count - 1 do
      ComposeCodeableConcept(xml, 'targetDisease', elem.targetDiseaseList[i]);
  if (elem.doseNumber is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'doseNumberPositiveInt', TFhirPositiveInt(elem.doseNumber))
  else if (elem.doseNumber is TFhirString) {6} then
    ComposeString(xml, 'doseNumberString', TFhirString(elem.doseNumber));
  if (SummaryOption in [soFull, soData]) and (elem.seriesDoses is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'seriesDosesPositiveInt', TFhirPositiveInt(elem.seriesDoses))
  else if (SummaryOption in [soFull, soData]) and (elem.seriesDoses is TFhirString) {6} then
    ComposeString(xml, 'seriesDosesString', TFhirString(elem.seriesDoses));
end;

function TFHIRXmlParser.ParseImmunization(element : TMXmlElement; path : string) : TFhirImmunization;
var
  child : TMXmlElement;
begin
  result := TFhirImmunization.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationChild(element : TFhirImmunization; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirImmunizationStatusEnum, SYSTEMS_TFhirImmunizationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'statusReason') then
        element.statusReason := ParseCodeableConcept(child, path+'/statusReason') {b}
      else if (child.localName = 'vaccineCode') then
        element.vaccineCode := ParseCodeableConcept(child, path+'/vaccineCode') {b}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'occurrenceDateTime') then
        element.occurrence := ParseDateTime(child, path+'/occurrenceDateTime'){x.3}
      else if (child.localName = 'occurrenceString') then
        element.occurrence := ParseString(child, path+'/occurrenceString'){x.3}
      else if (child.localName = 'recorded') then
        element.recordedElement := ParseDateTime(child, path+'/recorded') {b}
      else if (child.localName = 'primarySource') then
        element.primarySourceElement := ParseBoolean(child, path+'/primarySource') {b}
      else if (child.localName = 'reportOrigin') then
        element.reportOrigin := ParseCodeableConcept(child, path+'/reportOrigin') {b}
      else if (child.localName = 'location') then
        element.location := ParseReference{TFhirLocation}(child, path+'/location') {b}
      else if (child.localName = 'manufacturer') then
        element.manufacturer := ParseReference{TFhirOrganization}(child, path+'/manufacturer') {b}
      else if (child.localName = 'lotNumber') then
        element.lotNumberElement := ParseString(child, path+'/lotNumber') {b}
      else if (child.localName = 'expirationDate') then
        element.expirationDateElement := ParseDate(child, path+'/expirationDate') {b}
      else if (child.localName = 'site') then
        element.site := ParseCodeableConcept(child, path+'/site') {b}
      else if (child.localName = 'route') then
        element.route := ParseCodeableConcept(child, path+'/route') {b}
      else if (child.localName = 'doseQuantity') then
        element.doseQuantity := ParseQuantity(child, path+'/doseQuantity') {b}
      else if (child.localName = 'performer') then
        element.performerList.Add(ParseImmunizationPerformer(child, path+'/performer')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'isSubpotent') then
        element.isSubpotentElement := ParseBoolean(child, path+'/isSubpotent') {b}
      else if (child.localName = 'subpotentReason') then
        element.subpotentReasonList.Add(ParseCodeableConcept(child, path+'/subpotentReason')){y.2}
      else if (child.localName = 'education') then
        element.educationList.Add(ParseImmunizationEducation(child, path+'/education')){y.2}
      else if (child.localName = 'programEligibility') then
        element.programEligibilityList.Add(ParseCodeableConcept(child, path+'/programEligibility')){y.2}
      else if (child.localName = 'fundingSource') then
        element.fundingSource := ParseCodeableConcept(child, path+'/fundingSource') {b}
      else if (child.localName = 'reaction') then
        element.reactionList.Add(ParseImmunizationReaction(child, path+'/reaction')){y.2}
      else if (child.localName = 'protocolApplied') then
        element.protocolAppliedList.Add(ParseImmunizationProtocolApplied(child, path+'/protocolApplied')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunization(xml : TXmlBuilder; name : String; elem : TFhirImmunization);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeImmunizationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImmunizationChildren(xml : TXmlBuilder; elem : TFhirImmunization);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirImmunizationStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('statusReason') then
    ComposeCodeableConcept(xml, 'statusReason', elem.statusReason);{x.2a}
  ComposeCodeableConcept(xml, 'vaccineCode', elem.vaccineCode);{x.2a}
  ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (elem.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(elem.occurrence))
  else if (elem.occurrence is TFhirString) {6} then
    ComposeString(xml, 'occurrenceString', TFhirString(elem.occurrence));
  if (SummaryOption in [soFull, soData]) and doCompose('recorded') then
    ComposeDateTime(xml, 'recorded', elem.recordedElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('primarySource') then
    ComposeBoolean(xml, 'primarySource', elem.primarySourceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('reportOrigin') then
    ComposeCodeableConcept(xml, 'reportOrigin', elem.reportOrigin);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(xml, 'location', elem.location);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('manufacturer') then
    ComposeReference{TFhirOrganization}(xml, 'manufacturer', elem.manufacturer);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('lotNumber') then
    ComposeString(xml, 'lotNumber', elem.lotNumberElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('expirationDate') then
    ComposeDate(xml, 'expirationDate', elem.expirationDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('site') then
    ComposeCodeableConcept(xml, 'site', elem.site);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('route') then
    ComposeCodeableConcept(xml, 'route', elem.route);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('doseQuantity') then
    ComposeQuantity(xml, 'doseQuantity', elem.doseQuantity);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') then
    for i := 0 to elem.performerList.Count - 1 do
      ComposeImmunizationPerformer(xml, 'performer', elem.performerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('isSubpotent') then
    ComposeBoolean(xml, 'isSubpotent', elem.isSubpotentElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('subpotentReason') then
    for i := 0 to elem.subpotentReasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'subpotentReason', elem.subpotentReasonList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('education') then
    for i := 0 to elem.educationList.Count - 1 do
      ComposeImmunizationEducation(xml, 'education', elem.educationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('programEligibility') then
    for i := 0 to elem.programEligibilityList.Count - 1 do
      ComposeCodeableConcept(xml, 'programEligibility', elem.programEligibilityList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('fundingSource') then
    ComposeCodeableConcept(xml, 'fundingSource', elem.fundingSource);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('reaction') then
    for i := 0 to elem.reactionList.Count - 1 do
      ComposeImmunizationReaction(xml, 'reaction', elem.reactionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('protocolApplied') then
    for i := 0 to elem.protocolAppliedList.Count - 1 do
      ComposeImmunizationProtocolApplied(xml, 'protocolApplied', elem.protocolAppliedList[i]);
end;

{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
function TFHIRXmlParser.ParseImmunizationEvaluation(element : TMXmlElement; path : string) : TFhirImmunizationEvaluation;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationEvaluation.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationEvaluationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationEvaluationChild(element : TFhirImmunizationEvaluation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirImmunizationEvaluationStatusEnum, SYSTEMS_TFhirImmunizationEvaluationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'authority') then
        element.authority := ParseReference{TFhirOrganization}(child, path+'/authority') {b}
      else if (child.localName = 'targetDisease') then
        element.targetDisease := ParseCodeableConcept(child, path+'/targetDisease') {b}
      else if (child.localName = 'immunizationEvent') then
        element.immunizationEvent := ParseReference{TFhirImmunization}(child, path+'/immunizationEvent') {b}
      else if (child.localName = 'doseStatus') then
        element.doseStatus := ParseCodeableConcept(child, path+'/doseStatus') {b}
      else if (child.localName = 'doseStatusReason') then
        element.doseStatusReasonList.Add(ParseCodeableConcept(child, path+'/doseStatusReason')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'series') then
        element.seriesElement := ParseString(child, path+'/series') {b}
      else if (child.localName = 'doseNumberPositiveInt') then
        element.doseNumber := ParsePositiveInt(child, path+'/doseNumberPositiveInt'){x.3}
      else if (child.localName = 'doseNumberString') then
        element.doseNumber := ParseString(child, path+'/doseNumberString'){x.3}
      else if (child.localName = 'seriesDosesPositiveInt') then
        element.seriesDoses := ParsePositiveInt(child, path+'/seriesDosesPositiveInt'){x.3}
      else if (child.localName = 'seriesDosesString') then
        element.seriesDoses := ParseString(child, path+'/seriesDosesString'){x.3}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationEvaluation(xml : TXmlBuilder; name : String; elem : TFhirImmunizationEvaluation);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeImmunizationEvaluationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImmunizationEvaluationChildren(xml : TXmlBuilder; elem : TFhirImmunizationEvaluation);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirImmunizationEvaluationStatusEnum);
  ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('authority') then
    ComposeReference{TFhirOrganization}(xml, 'authority', elem.authority);{x.2a}
  ComposeCodeableConcept(xml, 'targetDisease', elem.targetDisease);{x.2a}
  ComposeReference{TFhirImmunization}(xml, 'immunizationEvent', elem.immunizationEvent);{x.2a}
  ComposeCodeableConcept(xml, 'doseStatus', elem.doseStatus);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('doseStatusReason') then
    for i := 0 to elem.doseStatusReasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'doseStatusReason', elem.doseStatusReasonList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('series') then
    ComposeString(xml, 'series', elem.seriesElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.doseNumber is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'doseNumberPositiveInt', TFhirPositiveInt(elem.doseNumber))
  else if (SummaryOption in [soFull, soData]) and (elem.doseNumber is TFhirString) {6} then
    ComposeString(xml, 'doseNumberString', TFhirString(elem.doseNumber));
  if (SummaryOption in [soFull, soData]) and (elem.seriesDoses is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'seriesDosesPositiveInt', TFhirPositiveInt(elem.seriesDoses))
  else if (SummaryOption in [soFull, soData]) and (elem.seriesDoses is TFhirString) {6} then
    ComposeString(xml, 'seriesDosesString', TFhirString(elem.seriesDoses));
end;

{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
function TFHIRXmlParser.ParseImmunizationRecommendationRecommendation(element : TMXmlElement; path : string) : TFhirImmunizationRecommendationRecommendation;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationRecommendationRecommendation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationRecommendationRecommendationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationRecommendationRecommendationChild(element : TFhirImmunizationRecommendationRecommendation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'vaccineCode') then
        element.vaccineCodeList.Add(ParseCodeableConcept(child, path+'/vaccineCode')){y.2}
      else if (child.localName = 'targetDisease') then
        element.targetDisease := ParseCodeableConcept(child, path+'/targetDisease') {b}
      else if (child.localName = 'contraindicatedVaccineCode') then
        element.contraindicatedVaccineCodeList.Add(ParseCodeableConcept(child, path+'/contraindicatedVaccineCode')){y.2}
      else if (child.localName = 'forecastStatus') then
        element.forecastStatus := ParseCodeableConcept(child, path+'/forecastStatus') {b}
      else if (child.localName = 'forecastReason') then
        element.forecastReasonList.Add(ParseCodeableConcept(child, path+'/forecastReason')){y.2}
      else if (child.localName = 'dateCriterion') then
        element.dateCriterionList.Add(ParseImmunizationRecommendationRecommendationDateCriterion(child, path+'/dateCriterion')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'series') then
        element.seriesElement := ParseString(child, path+'/series') {b}
      else if (child.localName = 'doseNumberPositiveInt') then
        element.doseNumber := ParsePositiveInt(child, path+'/doseNumberPositiveInt'){x.3}
      else if (child.localName = 'doseNumberString') then
        element.doseNumber := ParseString(child, path+'/doseNumberString'){x.3}
      else if (child.localName = 'seriesDosesPositiveInt') then
        element.seriesDoses := ParsePositiveInt(child, path+'/seriesDosesPositiveInt'){x.3}
      else if (child.localName = 'seriesDosesString') then
        element.seriesDoses := ParseString(child, path+'/seriesDosesString'){x.3}
      else if (child.localName = 'supportingImmunization') then
        element.supportingImmunizationList.Add(ParseReference{TFhirImmunization}(child, path+'/supportingImmunization')){y.2}
      else if (child.localName = 'supportingPatientInformation') then
        element.supportingPatientInformationList.Add(ParseReference{TFhirReference}(child, path+'/supportingPatientInformation')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationRecommendationRecommendation(xml : TXmlBuilder; name : String; elem : TFhirImmunizationRecommendationRecommendation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImmunizationRecommendationRecommendationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImmunizationRecommendationRecommendationChildren(xml : TXmlBuilder; elem : TFhirImmunizationRecommendationRecommendation);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.vaccineCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'vaccineCode', elem.vaccineCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'targetDisease', elem.targetDisease);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.contraindicatedVaccineCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'contraindicatedVaccineCode', elem.contraindicatedVaccineCodeList[i]);
  ComposeCodeableConcept(xml, 'forecastStatus', elem.forecastStatus);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.forecastReasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'forecastReason', elem.forecastReasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.dateCriterionList.Count - 1 do
      ComposeImmunizationRecommendationRecommendationDateCriterion(xml, 'dateCriterion', elem.dateCriterionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'series', elem.seriesElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.doseNumber is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'doseNumberPositiveInt', TFhirPositiveInt(elem.doseNumber))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.doseNumber is TFhirString) {6} then
    ComposeString(xml, 'doseNumberString', TFhirString(elem.doseNumber));
  if (SummaryOption in [soFull, soData]) and (elem.seriesDoses is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'seriesDosesPositiveInt', TFhirPositiveInt(elem.seriesDoses))
  else if (SummaryOption in [soFull, soData]) and (elem.seriesDoses is TFhirString) {6} then
    ComposeString(xml, 'seriesDosesString', TFhirString(elem.seriesDoses));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.supportingImmunizationList.Count - 1 do
      ComposeReference{TFhirImmunization}(xml, 'supportingImmunization', elem.supportingImmunizationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.supportingPatientInformationList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'supportingPatientInformation', elem.supportingPatientInformationList[i]);
end;

function TFHIRXmlParser.ParseImmunizationRecommendationRecommendationDateCriterion(element : TMXmlElement; path : string) : TFhirImmunizationRecommendationRecommendationDateCriterion;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationRecommendationRecommendationDateCriterion.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationRecommendationRecommendationDateCriterionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationRecommendationRecommendationDateCriterionChild(element : TFhirImmunizationRecommendationRecommendationDateCriterion; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'value') then
        element.valueElement := ParseDateTime(child, path+'/value') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationRecommendationRecommendationDateCriterion(xml : TXmlBuilder; name : String; elem : TFhirImmunizationRecommendationRecommendationDateCriterion);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImmunizationRecommendationRecommendationDateCriterionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImmunizationRecommendationRecommendationDateCriterionChildren(xml : TXmlBuilder; elem : TFhirImmunizationRecommendationRecommendationDateCriterion);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  ComposeDateTime(xml, 'value', elem.valueElement);{x.2b}
end;

function TFHIRXmlParser.ParseImmunizationRecommendation(element : TMXmlElement; path : string) : TFhirImmunizationRecommendation;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationRecommendation.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationRecommendationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationRecommendationChild(element : TFhirImmunizationRecommendation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'authority') then
        element.authority := ParseReference{TFhirOrganization}(child, path+'/authority') {b}
      else if (child.localName = 'recommendation') then
        element.recommendationList.Add(ParseImmunizationRecommendationRecommendation(child, path+'/recommendation')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationRecommendation(xml : TXmlBuilder; name : String; elem : TFhirImmunizationRecommendation);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeImmunizationRecommendationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImmunizationRecommendationChildren(xml : TXmlBuilder; elem : TFhirImmunizationRecommendation);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('authority') then
    ComposeReference{TFhirOrganization}(xml, 'authority', elem.authority);{x.2a}
  for i := 0 to elem.recommendationList.Count - 1 do
      ComposeImmunizationRecommendationRecommendation(xml, 'recommendation', elem.recommendationList[i]);
end;

{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
function TFHIRXmlParser.ParseImplementationGuideDependsOn(element : TMXmlElement; path : string) : TFhirImplementationGuideDependsOn;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideDependsOn.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideDependsOnChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideDependsOnChild(element : TFhirImplementationGuideDependsOn; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'uri') then
        element.uriElement := ParseCanonical(child, path+'/uri') {b}
      else if (child.localName = 'packageId') then
        element.packageIdElement := ParseId(child, path+'/packageId') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDependsOn(xml : TXmlBuilder; name : String; elem : TFhirImplementationGuideDependsOn);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImplementationGuideDependsOnChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDependsOnChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideDependsOn);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCanonical(xml, 'uri', elem.uriElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'packageId', elem.packageIdElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
end;

function TFHIRXmlParser.ParseImplementationGuideGlobal(element : TMXmlElement; path : string) : TFhirImplementationGuideGlobal;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideGlobal.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideGlobalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideGlobalChild(element : TFhirImplementationGuideGlobal; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, path+'/type', child){1a}
      else if (child.localName = 'profile') then
        element.profileElement := ParseCanonical(child, path+'/profile') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideGlobal(xml : TXmlBuilder; name : String; elem : TFhirImplementationGuideGlobal);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImplementationGuideGlobalChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideGlobalChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideGlobal);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirResourceTypesEnum);
  ComposeCanonical(xml, 'profile', elem.profileElement);{x.2b}
end;

function TFHIRXmlParser.ParseImplementationGuideDefinition(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideDefinition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionChild(element : TFhirImplementationGuideDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'grouping') then
        element.groupingList.Add(ParseImplementationGuideDefinitionGrouping(child, path+'/grouping')){y.2}
      else if (child.localName = 'resource') then
        element.resourceList.Add(ParseImplementationGuideDefinitionResource(child, path+'/resource')){y.2}
      else if (child.localName = 'page') then
        element.page := ParseImplementationGuideDefinitionPage(child, path+'/page') {b}
      else if (child.localName = 'parameter') then
        element.parameterList.Add(ParseImplementationGuideDefinitionParameter(child, path+'/parameter')){y.2}
      else if (child.localName = 'template') then
        element.templateList.Add(ParseImplementationGuideDefinitionTemplate(child, path+'/template')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinition(xml : TXmlBuilder; name : String; elem : TFhirImplementationGuideDefinition);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImplementationGuideDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideDefinition);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.groupingList.Count - 1 do
      ComposeImplementationGuideDefinitionGrouping(xml, 'grouping', elem.groupingList[i]);
  for i := 0 to elem.resourceList.Count - 1 do
      ComposeImplementationGuideDefinitionResource(xml, 'resource', elem.resourceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeImplementationGuideDefinitionPage(xml, 'page', elem.page);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeImplementationGuideDefinitionParameter(xml, 'parameter', elem.parameterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.templateList.Count - 1 do
      ComposeImplementationGuideDefinitionTemplate(xml, 'template', elem.templateList[i]);
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionGrouping(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionGrouping;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideDefinitionGrouping.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideDefinitionGroupingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionGroupingChild(element : TFhirImplementationGuideDefinitionGrouping; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionGrouping(xml : TXmlBuilder; name : String; elem : TFhirImplementationGuideDefinitionGrouping);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImplementationGuideDefinitionGroupingChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionGroupingChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideDefinitionGrouping);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionResource(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionResource;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideDefinitionResource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideDefinitionResourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionResourceChild(element : TFhirImplementationGuideDefinitionResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'reference') then
        element.reference := ParseReference{TFhirReference}(child, path+'/reference') {b}
      else if (child.localName = 'fhirVersion') then
        element.fhirVersionList.Add(ParseEnum(CODES_TFhirFHIRVersionEnum, SYSTEMS_TFhirFHIRVersionEnum, path+'/fhirVersion', child)){y.1}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'exampleCanonical') then
        element.example := ParseCanonical(child, path+'/exampleCanonical'){x.3}
      else if (child.localName = 'exampleBoolean') then
        element.example := ParseBoolean(child, path+'/exampleBoolean'){x.3}
      else if (child.localName = 'groupingId') then
        element.groupingIdElement := ParseId(child, path+'/groupingId') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionResource(xml : TXmlBuilder; name : String; elem : TFhirImplementationGuideDefinitionResource);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImplementationGuideDefinitionResourceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionResourceChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideDefinitionResource);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeReference{TFhirReference}(xml, 'reference', elem.reference);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.fhirVersionList.Count - 1 do
      ComposeEnum(xml, 'fhirVersion', elem.fhirVersionList[i], CODES_TFhirFHIRVersionEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.example is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'exampleCanonical', TFhirCanonical(elem.example))
  else if (SummaryOption in [soFull, soData]) and (elem.example is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'exampleBoolean', TFhirBoolean(elem.example));
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'groupingId', elem.groupingIdElement);{x.2b}
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionPage(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionPage;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideDefinitionPage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideDefinitionPageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionPageChild(element : TFhirImplementationGuideDefinitionPage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'nameUrl') then
        element.name := ParseUrl(child, path+'/nameUrl'){x.3}
      else if (child.localName = 'nameReference') then
        element.name := ParseReference(child, path+'/nameReference') {a}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'generation') then
        element.generationElement := ParseEnum(CODES_TFhirGuidePageGenerationEnum, SYSTEMS_TFhirGuidePageGenerationEnum, path+'/generation', child){1a}
      else if (child.localName = 'page') then
        element.pageList.Add(ParseImplementationGuideDefinitionPage(child, path+'/page')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionPage(xml : TXmlBuilder; name : String; elem : TFhirImplementationGuideDefinitionPage);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImplementationGuideDefinitionPageChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionPageChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideDefinitionPage);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.name is TFhirUrl) {6} then
    ComposeUrl(xml, 'nameUrl', TFhirUrl(elem.name))
  else if (elem.name is TFhirReference) {2} then
    ComposeReference(xml, 'nameReference', TFhirReference(elem.name));
  ComposeString(xml, 'title', elem.titleElement);{x.2b}
  ComposeEnum(xml, 'generation', elem.GenerationElement, CODES_TFhirGuidePageGenerationEnum);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.pageList.Count - 1 do
      ComposeImplementationGuideDefinitionPage(xml, 'page', elem.pageList[i]);
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionParameter(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionParameter;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideDefinitionParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideDefinitionParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionParameterChild(element : TFhirImplementationGuideDefinitionParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseEnum(CODES_TFhirGuideParameterCodeEnum, SYSTEMS_TFhirGuideParameterCodeEnum, path+'/code', child){1a}
      else if (child.localName = 'value') then
        element.valueElement := ParseString(child, path+'/value') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionParameter(xml : TXmlBuilder; name : String; elem : TFhirImplementationGuideDefinitionParameter);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImplementationGuideDefinitionParameterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionParameterChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideDefinitionParameter);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'code', elem.CodeElement, CODES_TFhirGuideParameterCodeEnum);
  ComposeString(xml, 'value', elem.valueElement);{x.2b}
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionTemplate(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionTemplate;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideDefinitionTemplate.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideDefinitionTemplateChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionTemplateChild(element : TFhirImplementationGuideDefinitionTemplate; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if (child.localName = 'source') then
        element.sourceElement := ParseString(child, path+'/source') {b}
      else if (child.localName = 'scope') then
        element.scopeElement := ParseString(child, path+'/scope') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionTemplate(xml : TXmlBuilder; name : String; elem : TFhirImplementationGuideDefinitionTemplate);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImplementationGuideDefinitionTemplateChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionTemplateChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideDefinitionTemplate);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCode(xml, 'code', elem.codeElement);{x.2b}
  ComposeString(xml, 'source', elem.sourceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'scope', elem.scopeElement);{x.2b}
end;

function TFHIRXmlParser.ParseImplementationGuideManifest(element : TMXmlElement; path : string) : TFhirImplementationGuideManifest;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideManifest.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideManifestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideManifestChild(element : TFhirImplementationGuideManifest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'rendering') then
        element.renderingElement := ParseUrl(child, path+'/rendering') {b}
      else if (child.localName = 'resource') then
        element.resourceList.Add(ParseImplementationGuideManifestResource(child, path+'/resource')){y.2}
      else if (child.localName = 'page') then
        element.pageList.Add(ParseImplementationGuideManifestPage(child, path+'/page')){y.2}
      else if (child.localName = 'image') then
        element.imageList.Add(ParseString(child, path+'/image')){y.2}
      else if (child.localName = 'other') then
        element.otherList.Add(ParseString(child, path+'/other')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideManifest(xml : TXmlBuilder; name : String; elem : TFhirImplementationGuideManifest);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImplementationGuideManifestChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideManifestChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideManifest);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrl(xml, 'rendering', elem.renderingElement);{x.2b}
  for i := 0 to elem.resourceList.Count - 1 do
      ComposeImplementationGuideManifestResource(xml, 'resource', elem.resourceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.pageList.Count - 1 do
      ComposeImplementationGuideManifestPage(xml, 'page', elem.pageList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.imageList.Count - 1 do
      ComposeString(xml, 'image', elem.imageList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.otherList.Count - 1 do
      ComposeString(xml, 'other', elem.otherList[i]);
end;

function TFHIRXmlParser.ParseImplementationGuideManifestResource(element : TMXmlElement; path : string) : TFhirImplementationGuideManifestResource;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideManifestResource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideManifestResourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideManifestResourceChild(element : TFhirImplementationGuideManifestResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'reference') then
        element.reference := ParseReference{TFhirReference}(child, path+'/reference') {b}
      else if (child.localName = 'exampleCanonical') then
        element.example := ParseCanonical(child, path+'/exampleCanonical'){x.3}
      else if (child.localName = 'exampleBoolean') then
        element.example := ParseBoolean(child, path+'/exampleBoolean'){x.3}
      else if (child.localName = 'relativePath') then
        element.relativePathElement := ParseUrl(child, path+'/relativePath') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideManifestResource(xml : TXmlBuilder; name : String; elem : TFhirImplementationGuideManifestResource);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImplementationGuideManifestResourceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideManifestResourceChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideManifestResource);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeReference{TFhirReference}(xml, 'reference', elem.reference);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.example is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'exampleCanonical', TFhirCanonical(elem.example))
  else if (SummaryOption in [soFull, soData]) and (elem.example is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'exampleBoolean', TFhirBoolean(elem.example));
  if (SummaryOption in [soFull, soData]) then
    ComposeUrl(xml, 'relativePath', elem.relativePathElement);{x.2b}
end;

function TFHIRXmlParser.ParseImplementationGuideManifestPage(element : TMXmlElement; path : string) : TFhirImplementationGuideManifestPage;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideManifestPage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideManifestPageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideManifestPageChild(element : TFhirImplementationGuideManifestPage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'anchor') then
        element.anchorList.Add(ParseString(child, path+'/anchor')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideManifestPage(xml : TXmlBuilder; name : String; elem : TFhirImplementationGuideManifestPage);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeImplementationGuideManifestPageChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideManifestPageChildren(xml : TXmlBuilder; elem : TFhirImplementationGuideManifestPage);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.anchorList.Count - 1 do
      ComposeString(xml, 'anchor', elem.anchorList[i]);
end;

function TFHIRXmlParser.ParseImplementationGuide(element : TMXmlElement; path : string) : TFhirImplementationGuide;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuide.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideChild(element : TFhirImplementationGuide; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'packageId') then
        element.packageIdElement := ParseId(child, path+'/packageId') {b}
      else if (child.localName = 'license') then
        element.licenseElement := ParseEnum(CODES_TFhirSpdxLicenseEnum, SYSTEMS_TFhirSpdxLicenseEnum, path+'/license', child){1a}
      else if (child.localName = 'fhirVersion') then
        element.fhirVersionList.Add(ParseEnum(CODES_TFhirFHIRVersionEnum, SYSTEMS_TFhirFHIRVersionEnum, path+'/fhirVersion', child)){y.1}
      else if (child.localName = 'dependsOn') then
        element.dependsOnList.Add(ParseImplementationGuideDependsOn(child, path+'/dependsOn')){y.2}
      else if (child.localName = 'global') then
        element.globalList.Add(ParseImplementationGuideGlobal(child, path+'/global')){y.2}
      else if (child.localName = 'definition') then
        element.definition := ParseImplementationGuideDefinition(child, path+'/definition') {b}
      else if (child.localName = 'manifest') then
        element.manifest := ParseImplementationGuideManifest(child, path+'/manifest') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuide(xml : TXmlBuilder; name : String; elem : TFhirImplementationGuide);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeImplementationGuideChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideChildren(xml : TXmlBuilder; elem : TFhirImplementationGuide);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  ComposeId(xml, 'packageId', elem.packageIdElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('license') then
    ComposeEnum(xml, 'license', elem.LicenseElement, CODES_TFhirSpdxLicenseEnum);
  for i := 0 to elem.fhirVersionList.Count - 1 do
      ComposeEnum(xml, 'fhirVersion', elem.fhirVersionList[i], CODES_TFhirFHIRVersionEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dependsOn') then
    for i := 0 to elem.dependsOnList.Count - 1 do
      ComposeImplementationGuideDependsOn(xml, 'dependsOn', elem.dependsOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('global') then
    for i := 0 to elem.globalList.Count - 1 do
      ComposeImplementationGuideGlobal(xml, 'global', elem.globalList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('definition') then
    ComposeImplementationGuideDefinition(xml, 'definition', elem.definition);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('manifest') then
    ComposeImplementationGuideManifest(xml, 'manifest', elem.manifest);{x.2a}
end;

{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INSURANCEPLAN}
function TFHIRXmlParser.ParseInsurancePlanContact(element : TMXmlElement; path : string) : TFhirInsurancePlanContact;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanContact.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanContactChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanContactChild(element : TFhirInsurancePlanContact; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'purpose') then
        element.purpose := ParseCodeableConcept(child, path+'/purpose') {b}
      else if (child.localName = 'name') then
        element.name := ParseHumanName(child, path+'/name') {b}
      else if (child.localName = 'telecom') then
        element.telecomList.Add(ParseContactPoint(child, path+'/telecom')){y.2}
      else if (child.localName = 'address') then
        element.address := ParseAddress(child, path+'/address') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanContact(xml : TXmlBuilder; name : String; elem : TFhirInsurancePlanContact);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeInsurancePlanContactChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanContactChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanContact);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'purpose', elem.purpose);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeHumanName(xml, 'name', elem.name);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', elem.telecomList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeAddress(xml, 'address', elem.address);{x.2a}
end;

function TFHIRXmlParser.ParseInsurancePlanCoverage(element : TMXmlElement; path : string) : TFhirInsurancePlanCoverage;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanCoverage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanCoverageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanCoverageChild(element : TFhirInsurancePlanCoverage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'network') then
        element.networkList.Add(ParseReference{TFhirOrganization}(child, path+'/network')){y.2}
      else if (child.localName = 'benefit') then
        element.benefitList.Add(ParseInsurancePlanCoverageBenefit(child, path+'/benefit')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanCoverage(xml : TXmlBuilder; name : String; elem : TFhirInsurancePlanCoverage);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeInsurancePlanCoverageChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanCoverageChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanCoverage);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.networkList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'network', elem.networkList[i]);
  for i := 0 to elem.benefitList.Count - 1 do
      ComposeInsurancePlanCoverageBenefit(xml, 'benefit', elem.benefitList[i]);
end;

function TFHIRXmlParser.ParseInsurancePlanCoverageBenefit(element : TMXmlElement; path : string) : TFhirInsurancePlanCoverageBenefit;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanCoverageBenefit.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanCoverageBenefitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanCoverageBenefitChild(element : TFhirInsurancePlanCoverageBenefit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'requirement') then
        element.requirementElement := ParseString(child, path+'/requirement') {b}
      else if (child.localName = 'limit') then
        element.limitList.Add(ParseInsurancePlanCoverageBenefitLimit(child, path+'/limit')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanCoverageBenefit(xml : TXmlBuilder; name : String; elem : TFhirInsurancePlanCoverageBenefit);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeInsurancePlanCoverageBenefitChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanCoverageBenefitChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanCoverageBenefit);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'requirement', elem.requirementElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.limitList.Count - 1 do
      ComposeInsurancePlanCoverageBenefitLimit(xml, 'limit', elem.limitList[i]);
end;

function TFHIRXmlParser.ParseInsurancePlanCoverageBenefitLimit(element : TMXmlElement; path : string) : TFhirInsurancePlanCoverageBenefitLimit;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanCoverageBenefitLimit.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanCoverageBenefitLimitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanCoverageBenefitLimitChild(element : TFhirInsurancePlanCoverageBenefitLimit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'value') then
        element.value := ParseQuantity(child, path+'/value') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanCoverageBenefitLimit(xml : TXmlBuilder; name : String; elem : TFhirInsurancePlanCoverageBenefitLimit);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeInsurancePlanCoverageBenefitLimitChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanCoverageBenefitLimitChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanCoverageBenefitLimit);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'value', elem.value);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
end;

function TFHIRXmlParser.ParseInsurancePlanPlan(element : TMXmlElement; path : string) : TFhirInsurancePlanPlan;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanPlan.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanPlanChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanPlanChild(element : TFhirInsurancePlanPlan; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'coverageArea') then
        element.coverageAreaList.Add(ParseReference{TFhirLocation}(child, path+'/coverageArea')){y.2}
      else if (child.localName = 'network') then
        element.networkList.Add(ParseReference{TFhirOrganization}(child, path+'/network')){y.2}
      else if (child.localName = 'generalCost') then
        element.generalCostList.Add(ParseInsurancePlanPlanGeneralCost(child, path+'/generalCost')){y.2}
      else if (child.localName = 'specificCost') then
        element.specificCostList.Add(ParseInsurancePlanPlanSpecificCost(child, path+'/specificCost')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlan(xml : TXmlBuilder; name : String; elem : TFhirInsurancePlanPlan);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeInsurancePlanPlanChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanPlan);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.coverageAreaList.Count - 1 do
      ComposeReference{TFhirLocation}(xml, 'coverageArea', elem.coverageAreaList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.networkList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'network', elem.networkList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.generalCostList.Count - 1 do
      ComposeInsurancePlanPlanGeneralCost(xml, 'generalCost', elem.generalCostList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.specificCostList.Count - 1 do
      ComposeInsurancePlanPlanSpecificCost(xml, 'specificCost', elem.specificCostList[i]);
end;

function TFHIRXmlParser.ParseInsurancePlanPlanGeneralCost(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanGeneralCost;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanPlanGeneralCost.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanPlanGeneralCostChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanPlanGeneralCostChild(element : TFhirInsurancePlanPlanGeneralCost; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'groupSize') then
        element.groupSizeElement := ParsePositiveInt(child, path+'/groupSize') {b}
      else if (child.localName = 'cost') then
        element.cost := ParseMoney(child, path+'/cost') {b}
      else if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanGeneralCost(xml : TXmlBuilder; name : String; elem : TFhirInsurancePlanPlanGeneralCost);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeInsurancePlanPlanGeneralCostChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanGeneralCostChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanPlanGeneralCost);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'groupSize', elem.groupSizeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'cost', elem.cost);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
end;

function TFHIRXmlParser.ParseInsurancePlanPlanSpecificCost(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanSpecificCost;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanPlanSpecificCost.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanPlanSpecificCostChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanPlanSpecificCostChild(element : TFhirInsurancePlanPlanSpecificCost; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'benefit') then
        element.benefitList.Add(ParseInsurancePlanPlanSpecificCostBenefit(child, path+'/benefit')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanSpecificCost(xml : TXmlBuilder; name : String; elem : TFhirInsurancePlanPlanSpecificCost);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeInsurancePlanPlanSpecificCostChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanSpecificCostChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanPlanSpecificCost);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.benefitList.Count - 1 do
      ComposeInsurancePlanPlanSpecificCostBenefit(xml, 'benefit', elem.benefitList[i]);
end;

function TFHIRXmlParser.ParseInsurancePlanPlanSpecificCostBenefit(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanSpecificCostBenefit;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanPlanSpecificCostBenefit.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanPlanSpecificCostBenefitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanPlanSpecificCostBenefitChild(element : TFhirInsurancePlanPlanSpecificCostBenefit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'cost') then
        element.costList.Add(ParseInsurancePlanPlanSpecificCostBenefitCost(child, path+'/cost')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanSpecificCostBenefit(xml : TXmlBuilder; name : String; elem : TFhirInsurancePlanPlanSpecificCostBenefit);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeInsurancePlanPlanSpecificCostBenefitChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanSpecificCostBenefitChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanPlanSpecificCostBenefit);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.costList.Count - 1 do
      ComposeInsurancePlanPlanSpecificCostBenefitCost(xml, 'cost', elem.costList[i]);
end;

function TFHIRXmlParser.ParseInsurancePlanPlanSpecificCostBenefitCost(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanSpecificCostBenefitCost;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanPlanSpecificCostBenefitCost.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanPlanSpecificCostBenefitCostChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanPlanSpecificCostBenefitCostChild(element : TFhirInsurancePlanPlanSpecificCostBenefitCost; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'applicability') then
        element.applicability := ParseCodeableConcept(child, path+'/applicability') {b}
      else if (child.localName = 'qualifiers') then
        element.qualifiersList.Add(ParseCodeableConcept(child, path+'/qualifiers')){y.2}
      else if (child.localName = 'value') then
        element.value := ParseQuantity(child, path+'/value') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanSpecificCostBenefitCost(xml : TXmlBuilder; name : String; elem : TFhirInsurancePlanPlanSpecificCostBenefitCost);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeInsurancePlanPlanSpecificCostBenefitCostChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanSpecificCostBenefitCostChildren(xml : TXmlBuilder; elem : TFhirInsurancePlanPlanSpecificCostBenefitCost);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'applicability', elem.applicability);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.qualifiersList.Count - 1 do
      ComposeCodeableConcept(xml, 'qualifiers', elem.qualifiersList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'value', elem.value);{x.2a}
end;

function TFHIRXmlParser.ParseInsurancePlan(element : TMXmlElement; path : string) : TFhirInsurancePlan;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlan.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanChild(element : TFhirInsurancePlan; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'alias') then
        element.aliasList.Add(ParseString(child, path+'/alias')){y.2}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'ownedBy') then
        element.ownedBy := ParseReference{TFhirOrganization}(child, path+'/ownedBy') {b}
      else if (child.localName = 'administeredBy') then
        element.administeredBy := ParseReference{TFhirOrganization}(child, path+'/administeredBy') {b}
      else if (child.localName = 'coverageArea') then
        element.coverageAreaList.Add(ParseReference{TFhirLocation}(child, path+'/coverageArea')){y.2}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseInsurancePlanContact(child, path+'/contact')){y.2}
      else if (child.localName = 'endpoint') then
        element.endpointList.Add(ParseReference{TFhirEndpoint}(child, path+'/endpoint')){y.2}
      else if (child.localName = 'network') then
        element.networkList.Add(ParseReference{TFhirOrganization}(child, path+'/network')){y.2}
      else if (child.localName = 'coverage') then
        element.coverageList.Add(ParseInsurancePlanCoverage(child, path+'/coverage')){y.2}
      else if (child.localName = 'plan') then
        element.planList.Add(ParseInsurancePlanPlan(child, path+'/plan')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlan(xml : TXmlBuilder; name : String; elem : TFhirInsurancePlan);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeInsurancePlanChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanChildren(xml : TXmlBuilder; elem : TFhirInsurancePlan);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('alias') then
    for i := 0 to elem.aliasList.Count - 1 do
      ComposeString(xml, 'alias', elem.aliasList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('ownedBy') then
    ComposeReference{TFhirOrganization}(xml, 'ownedBy', elem.ownedBy);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('administeredBy') then
    ComposeReference{TFhirOrganization}(xml, 'administeredBy', elem.administeredBy);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('coverageArea') then
    for i := 0 to elem.coverageAreaList.Count - 1 do
      ComposeReference{TFhirLocation}(xml, 'coverageArea', elem.coverageAreaList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeInsurancePlanContact(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('endpoint') then
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(xml, 'endpoint', elem.endpointList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('network') then
    for i := 0 to elem.networkList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'network', elem.networkList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('coverage') then
    for i := 0 to elem.coverageList.Count - 1 do
      ComposeInsurancePlanCoverage(xml, 'coverage', elem.coverageList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('plan') then
    for i := 0 to elem.planList.Count - 1 do
      ComposeInsurancePlanPlan(xml, 'plan', elem.planList[i]);
end;

{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
function TFHIRXmlParser.ParseInvoiceParticipant(element : TMXmlElement; path : string) : TFhirInvoiceParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirInvoiceParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInvoiceParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInvoiceParticipantChild(element : TFhirInvoiceParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'role') then
        element.role := ParseCodeableConcept(child, path+'/role') {b}
      else if (child.localName = 'actor') then
        element.actor := ParseReference{TFhirPractitioner}(child, path+'/actor') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInvoiceParticipant(xml : TXmlBuilder; name : String; elem : TFhirInvoiceParticipant);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeInvoiceParticipantChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeInvoiceParticipantChildren(xml : TXmlBuilder; elem : TFhirInvoiceParticipant);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'role', elem.role);{x.2a}
  ComposeReference{TFhirPractitioner}(xml, 'actor', elem.actor);{x.2a}
end;

function TFHIRXmlParser.ParseInvoiceLineItem(element : TMXmlElement; path : string) : TFhirInvoiceLineItem;
var
  child : TMXmlElement;
begin
  result := TFhirInvoiceLineItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInvoiceLineItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInvoiceLineItemChild(element : TFhirInvoiceLineItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        element.sequenceElement := ParsePositiveInt(child, path+'/sequence') {b}
      else if (child.localName = 'chargeItemReference') then
        element.chargeItem := ParseReference(child, path+'/chargeItemReference') {a}
      else if (child.localName = 'chargeItemCodeableConcept') then
        element.chargeItem := ParseCodeableConcept(child, path+'/chargeItemCodeableConcept'){x.3}
      else if (child.localName = 'priceComponent') then
        element.priceComponentList.Add(ParseInvoiceLineItemPriceComponent(child, path+'/priceComponent')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInvoiceLineItem(xml : TXmlBuilder; name : String; elem : TFhirInvoiceLineItem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeInvoiceLineItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeInvoiceLineItemChildren(xml : TXmlBuilder; elem : TFhirInvoiceLineItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'sequence', elem.sequenceElement);{x.2b}
  if (elem.chargeItem is TFhirReference) {2} then
    ComposeReference(xml, 'chargeItemReference', TFhirReference(elem.chargeItem))
  else if (elem.chargeItem is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'chargeItemCodeableConcept', TFhirCodeableConcept(elem.chargeItem));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.priceComponentList.Count - 1 do
      ComposeInvoiceLineItemPriceComponent(xml, 'priceComponent', elem.priceComponentList[i]);
end;

function TFHIRXmlParser.ParseInvoiceLineItemPriceComponent(element : TMXmlElement; path : string) : TFhirInvoiceLineItemPriceComponent;
var
  child : TMXmlElement;
begin
  result := TFhirInvoiceLineItemPriceComponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInvoiceLineItemPriceComponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInvoiceLineItemPriceComponentChild(element : TFhirInvoiceLineItemPriceComponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirInvoicePriceComponentTypeEnum, SYSTEMS_TFhirInvoicePriceComponentTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'factor') then
        element.factorElement := ParseDecimal(child, path+'/factor') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseMoney(child, path+'/amount') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInvoiceLineItemPriceComponent(xml : TXmlBuilder; name : String; elem : TFhirInvoiceLineItemPriceComponent);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeInvoiceLineItemPriceComponentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeInvoiceLineItemPriceComponentChildren(xml : TXmlBuilder; elem : TFhirInvoiceLineItemPriceComponent);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirInvoicePriceComponentTypeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', elem.factorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'amount', elem.amount);{x.2a}
end;

function TFHIRXmlParser.ParseInvoice(element : TMXmlElement; path : string) : TFhirInvoice;
var
  child : TMXmlElement;
begin
  result := TFhirInvoice.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInvoiceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInvoiceChild(element : TFhirInvoice; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirInvoiceStatusEnum, SYSTEMS_TFhirInvoiceStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'cancelledReason') then
        element.cancelledReasonElement := ParseString(child, path+'/cancelledReason') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'recipient') then
        element.recipient := ParseReference{TFhirOrganization}(child, path+'/recipient') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'participant') then
        element.participantList.Add(ParseInvoiceParticipant(child, path+'/participant')){y.2}
      else if (child.localName = 'issuer') then
        element.issuer := ParseReference{TFhirOrganization}(child, path+'/issuer') {b}
      else if (child.localName = 'account') then
        element.account := ParseReference{TFhirAccount}(child, path+'/account') {b}
      else if (child.localName = 'lineItem') then
        element.lineItemList.Add(ParseInvoiceLineItem(child, path+'/lineItem')){y.2}
      else if (child.localName = 'totalPriceComponent') then
        element.totalPriceComponentList.Add(ParseInvoiceLineItemPriceComponent(child, path+'/totalPriceComponent')){y.2}
      else if (child.localName = 'totalNet') then
        element.totalNet := ParseMoney(child, path+'/totalNet') {b}
      else if (child.localName = 'totalGross') then
        element.totalGross := ParseMoney(child, path+'/totalGross') {b}
      else if (child.localName = 'paymentTerms') then
        element.paymentTermsElement := ParseMarkdown(child, path+'/paymentTerms') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInvoice(xml : TXmlBuilder; name : String; elem : TFhirInvoice);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeInvoiceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeInvoiceChildren(xml : TXmlBuilder; elem : TFhirInvoice);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirInvoiceStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('cancelledReason') then
    ComposeString(xml, 'cancelledReason', elem.cancelledReasonElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('recipient') then
    ComposeReference{TFhirOrganization}(xml, 'recipient', elem.recipient);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('participant') then
    for i := 0 to elem.participantList.Count - 1 do
      ComposeInvoiceParticipant(xml, 'participant', elem.participantList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('issuer') then
    ComposeReference{TFhirOrganization}(xml, 'issuer', elem.issuer);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('account') then
    ComposeReference{TFhirAccount}(xml, 'account', elem.account);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('lineItem') then
    for i := 0 to elem.lineItemList.Count - 1 do
      ComposeInvoiceLineItem(xml, 'lineItem', elem.lineItemList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('totalPriceComponent') then
    for i := 0 to elem.totalPriceComponentList.Count - 1 do
      ComposeInvoiceLineItemPriceComponent(xml, 'totalPriceComponent', elem.totalPriceComponentList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('totalNet') then
    ComposeMoney(xml, 'totalNet', elem.totalNet);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('totalGross') then
    ComposeMoney(xml, 'totalGross', elem.totalGross);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('paymentTerms') then
    ComposeMarkdown(xml, 'paymentTerms', elem.paymentTermsElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
function TFHIRXmlParser.ParseLibrary(element : TMXmlElement; path : string) : TFhirLibrary;
var
  child : TMXmlElement;
begin
  result := TFhirLibrary.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseLibraryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseLibraryChild(element : TFhirLibrary; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'subtitle') then
        element.subtitleElement := ParseString(child, path+'/subtitle') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'subjectCodeableConcept') then
        element.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept'){x.3}
      else if (child.localName = 'subjectReference') then
        element.subject := ParseReference(child, path+'/subjectReference') {a}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'usage') then
        element.usageElement := ParseString(child, path+'/usage') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'approvalDate') then
        element.approvalDateElement := ParseDate(child, path+'/approvalDate') {b}
      else if (child.localName = 'lastReviewDate') then
        element.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {b}
      else if (child.localName = 'topic') then
        element.topicList.Add(ParseCodeableConcept(child, path+'/topic')){y.2}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseContactDetail(child, path+'/author')){y.2}
      else if (child.localName = 'editor') then
        element.editorList.Add(ParseContactDetail(child, path+'/editor')){y.2}
      else if (child.localName = 'reviewer') then
        element.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')){y.2}
      else if (child.localName = 'endorser') then
        element.endorserList.Add(ParseContactDetail(child, path+'/endorser')){y.2}
      else if (child.localName = 'relatedArtifact') then
        element.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')){y.2}
      else if (child.localName = 'parameter') then
        element.parameterList.Add(ParseParameterDefinition(child, path+'/parameter')){y.2}
      else if (child.localName = 'dataRequirement') then
        element.dataRequirementList.Add(ParseDataRequirement(child, path+'/dataRequirement')){y.2}
      else if (child.localName = 'content') then
        element.contentList.Add(ParseAttachment(child, path+'/content')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeLibrary(xml : TXmlBuilder; name : String; elem : TFhirLibrary);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeLibraryChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeLibraryChildren(xml : TXmlBuilder; elem : TFhirLibrary);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('subtitle') then
    ComposeString(xml, 'subtitle', elem.subtitleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(elem.subject))
  else if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(elem.subject));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeString(xml, 'usage', elem.usageElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDate(xml, 'approvalDate', elem.approvalDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDate(xml, 'lastReviewDate', elem.lastReviewDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(xml, 'effectivePeriod', elem.effectivePeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('topic') then
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', elem.topicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('author') then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('editor') then
    for i := 0 to elem.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', elem.editorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reviewer') then
    for i := 0 to elem.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', elem.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('endorser') then
    for i := 0 to elem.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', elem.endorserList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') then
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', elem.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('parameter') then
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeParameterDefinition(xml, 'parameter', elem.parameterList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('dataRequirement') then
    for i := 0 to elem.dataRequirementList.Count - 1 do
      ComposeDataRequirement(xml, 'dataRequirement', elem.dataRequirementList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('content') then
    for i := 0 to elem.contentList.Count - 1 do
      ComposeAttachment(xml, 'content', elem.contentList[i]);
end;

{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
function TFHIRXmlParser.ParseLinkageItem(element : TMXmlElement; path : string) : TFhirLinkageItem;
var
  child : TMXmlElement;
begin
  result := TFhirLinkageItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseLinkageItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseLinkageItemChild(element : TFhirLinkageItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirLinkageTypeEnum, SYSTEMS_TFhirLinkageTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'resource') then
        element.resource := ParseReference{TFhirReference}(child, path+'/resource') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeLinkageItem(xml : TXmlBuilder; name : String; elem : TFhirLinkageItem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeLinkageItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeLinkageItemChildren(xml : TXmlBuilder; elem : TFhirLinkageItem);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirLinkageTypeEnum);
  ComposeReference{TFhirReference}(xml, 'resource', elem.resource);{x.2a}
end;

function TFHIRXmlParser.ParseLinkage(element : TMXmlElement; path : string) : TFhirLinkage;
var
  child : TMXmlElement;
begin
  result := TFhirLinkage.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseLinkageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseLinkageChild(element : TFhirLinkage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'active') then
        element.activeElement := ParseBoolean(child, path+'/active') {b}
      else if (child.localName = 'author') then
        element.author := ParseReference{TFhirPractitioner}(child, path+'/author') {b}
      else if (child.localName = 'item') then
        element.itemList.Add(ParseLinkageItem(child, path+'/item')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeLinkage(xml : TXmlBuilder; name : String; elem : TFhirLinkage);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeLinkageChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeLinkageChildren(xml : TXmlBuilder; elem : TFhirLinkage);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposeBoolean(xml, 'active', elem.activeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    ComposeReference{TFhirPractitioner}(xml, 'author', elem.author);{x.2a}
  for i := 0 to elem.itemList.Count - 1 do
      ComposeLinkageItem(xml, 'item', elem.itemList[i]);
end;

{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
function TFHIRXmlParser.ParseListEntry(element : TMXmlElement; path : string) : TFhirListEntry;
var
  child : TMXmlElement;
begin
  result := TFhirListEntry.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseListEntryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseListEntryChild(element : TFhirListEntry; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'flag') then
        element.flag := ParseCodeableConcept(child, path+'/flag') {b}
      else if (child.localName = 'deleted') then
        element.deletedElement := ParseBoolean(child, path+'/deleted') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'item') then
        element.item := ParseReference{TFhirReference}(child, path+'/item') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeListEntry(xml : TXmlBuilder; name : String; elem : TFhirListEntry);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeListEntryChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeListEntryChildren(xml : TXmlBuilder; elem : TFhirListEntry);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'flag', elem.flag);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'deleted', elem.deletedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  ComposeReference{TFhirReference}(xml, 'item', elem.item);{x.2a}
end;

function TFHIRXmlParser.ParseList(element : TMXmlElement; path : string) : TFhirList;
var
  child : TMXmlElement;
begin
  result := TFhirList.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseListChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseListChild(element : TFhirList; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirListStatusEnum, SYSTEMS_TFhirListStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'mode') then
        element.modeElement := ParseEnum(CODES_TFhirListModeEnum, SYSTEMS_TFhirListModeEnum, path+'/mode', child){1a}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'source') then
        element.source := ParseReference{TFhirPractitioner}(child, path+'/source') {b}
      else if (child.localName = 'orderedBy') then
        element.orderedBy := ParseCodeableConcept(child, path+'/orderedBy') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'entry') then
        element.entryList.Add(ParseListEntry(child, path+'/entry')){y.2}
      else if (child.localName = 'emptyReason') then
        element.emptyReason := ParseCodeableConcept(child, path+'/emptyReason') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeList(xml : TXmlBuilder; name : String; elem : TFhirList);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeListChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeListChildren(xml : TXmlBuilder; elem : TFhirList);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirListStatusEnum);
  ComposeEnum(xml, 'mode', elem.ModeElement, CODES_TFhirListModeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('source') then
    ComposeReference{TFhirPractitioner}(xml, 'source', elem.source);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('orderedBy') then
    ComposeCodeableConcept(xml, 'orderedBy', elem.orderedBy);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('entry') then
    for i := 0 to elem.entryList.Count - 1 do
      ComposeListEntry(xml, 'entry', elem.entryList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('emptyReason') then
    ComposeCodeableConcept(xml, 'emptyReason', elem.emptyReason);{x.2a}
end;

{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
function TFHIRXmlParser.ParseLocationPosition(element : TMXmlElement; path : string) : TFhirLocationPosition;
var
  child : TMXmlElement;
begin
  result := TFhirLocationPosition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseLocationPositionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseLocationPositionChild(element : TFhirLocationPosition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'longitude') then
        element.longitudeElement := ParseDecimal(child, path+'/longitude') {b}
      else if (child.localName = 'latitude') then
        element.latitudeElement := ParseDecimal(child, path+'/latitude') {b}
      else if (child.localName = 'altitude') then
        element.altitudeElement := ParseDecimal(child, path+'/altitude') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeLocationPosition(xml : TXmlBuilder; name : String; elem : TFhirLocationPosition);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeLocationPositionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeLocationPositionChildren(xml : TXmlBuilder; elem : TFhirLocationPosition);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeDecimal(xml, 'longitude', elem.longitudeElement);{x.2b}
  ComposeDecimal(xml, 'latitude', elem.latitudeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'altitude', elem.altitudeElement);{x.2b}
end;

function TFHIRXmlParser.ParseLocationHoursOfOperation(element : TMXmlElement; path : string) : TFhirLocationHoursOfOperation;
var
  child : TMXmlElement;
begin
  result := TFhirLocationHoursOfOperation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseLocationHoursOfOperationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseLocationHoursOfOperationChild(element : TFhirLocationHoursOfOperation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'daysOfWeek') then
        element.daysOfWeekList.Add(ParseEnum(CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum, path+'/daysOfWeek', child)){y.1}
      else if (child.localName = 'allDay') then
        element.allDayElement := ParseBoolean(child, path+'/allDay') {b}
      else if (child.localName = 'openingTime') then
        element.openingTimeElement := ParseTime(child, path+'/openingTime') {b}
      else if (child.localName = 'closingTime') then
        element.closingTimeElement := ParseTime(child, path+'/closingTime') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeLocationHoursOfOperation(xml : TXmlBuilder; name : String; elem : TFhirLocationHoursOfOperation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeLocationHoursOfOperationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeLocationHoursOfOperationChildren(xml : TXmlBuilder; elem : TFhirLocationHoursOfOperation);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.daysOfWeekList.Count - 1 do
      ComposeEnum(xml, 'daysOfWeek', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'allDay', elem.allDayElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeTime(xml, 'openingTime', elem.openingTimeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeTime(xml, 'closingTime', elem.closingTimeElement);{x.2b}
end;

function TFHIRXmlParser.ParseLocation(element : TMXmlElement; path : string) : TFhirLocation;
var
  child : TMXmlElement;
begin
  result := TFhirLocation.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseLocationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseLocationChild(element : TFhirLocation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirLocationStatusEnum, SYSTEMS_TFhirLocationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'operationalStatus') then
        element.operationalStatus := ParseCoding(child, path+'/operationalStatus') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'alias') then
        element.aliasList.Add(ParseString(child, path+'/alias')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'mode') then
        element.modeElement := ParseEnum(CODES_TFhirLocationModeEnum, SYSTEMS_TFhirLocationModeEnum, path+'/mode', child){1a}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'telecom') then
        element.telecomList.Add(ParseContactPoint(child, path+'/telecom')){y.2}
      else if (child.localName = 'address') then
        element.address := ParseAddress(child, path+'/address') {b}
      else if (child.localName = 'physicalType') then
        element.physicalType := ParseCodeableConcept(child, path+'/physicalType') {b}
      else if (child.localName = 'position') then
        element.position := ParseLocationPosition(child, path+'/position') {b}
      else if (child.localName = 'managingOrganization') then
        element.managingOrganization := ParseReference{TFhirOrganization}(child, path+'/managingOrganization') {b}
      else if (child.localName = 'partOf') then
        element.partOf := ParseReference{TFhirLocation}(child, path+'/partOf') {b}
      else if (child.localName = 'hoursOfOperation') then
        element.hoursOfOperationList.Add(ParseLocationHoursOfOperation(child, path+'/hoursOfOperation')){y.2}
      else if (child.localName = 'availabilityExceptions') then
        element.availabilityExceptionsElement := ParseString(child, path+'/availabilityExceptions') {b}
      else if (child.localName = 'endpoint') then
        element.endpointList.Add(ParseReference{TFhirEndpoint}(child, path+'/endpoint')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeLocation(xml : TXmlBuilder; name : String; elem : TFhirLocation);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeLocationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeLocationChildren(xml : TXmlBuilder; elem : TFhirLocation);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirLocationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('operationalStatus') then
    ComposeCoding(xml, 'operationalStatus', elem.operationalStatus);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('alias') then
    for i := 0 to elem.aliasList.Count - 1 do
      ComposeString(xml, 'alias', elem.aliasList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('mode') then
    ComposeEnum(xml, 'mode', elem.ModeElement, CODES_TFhirLocationModeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('telecom') then
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', elem.telecomList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('address') then
    ComposeAddress(xml, 'address', elem.address);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('physicalType') then
    ComposeCodeableConcept(xml, 'physicalType', elem.physicalType);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('position') then
    ComposeLocationPosition(xml, 'position', elem.position);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('managingOrganization') then
    ComposeReference{TFhirOrganization}(xml, 'managingOrganization', elem.managingOrganization);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('partOf') then
    ComposeReference{TFhirLocation}(xml, 'partOf', elem.partOf);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('hoursOfOperation') then
    for i := 0 to elem.hoursOfOperationList.Count - 1 do
      ComposeLocationHoursOfOperation(xml, 'hoursOfOperation', elem.hoursOfOperationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('availabilityExceptions') then
    ComposeString(xml, 'availabilityExceptions', elem.availabilityExceptionsElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('endpoint') then
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(xml, 'endpoint', elem.endpointList[i]);
end;

{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
function TFHIRXmlParser.ParseMeasureGroup(element : TMXmlElement; path : string) : TFhirMeasureGroup;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureGroup.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureGroupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureGroupChild(element : TFhirMeasureGroup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'population') then
        element.populationList.Add(ParseMeasureGroupPopulation(child, path+'/population')){y.2}
      else if (child.localName = 'stratifier') then
        element.stratifierList.Add(ParseMeasureGroupStratifier(child, path+'/stratifier')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureGroup(xml : TXmlBuilder; name : String; elem : TFhirMeasureGroup);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMeasureGroupChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMeasureGroupChildren(xml : TXmlBuilder; elem : TFhirMeasureGroup);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.populationList.Count - 1 do
      ComposeMeasureGroupPopulation(xml, 'population', elem.populationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.stratifierList.Count - 1 do
      ComposeMeasureGroupStratifier(xml, 'stratifier', elem.stratifierList[i]);
end;

function TFHIRXmlParser.ParseMeasureGroupPopulation(element : TMXmlElement; path : string) : TFhirMeasureGroupPopulation;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureGroupPopulation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureGroupPopulationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureGroupPopulationChild(element : TFhirMeasureGroupPopulation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'criteria') then
        element.criteria := ParseExpression(child, path+'/criteria') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureGroupPopulation(xml : TXmlBuilder; name : String; elem : TFhirMeasureGroupPopulation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMeasureGroupPopulationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMeasureGroupPopulationChildren(xml : TXmlBuilder; elem : TFhirMeasureGroupPopulation);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  ComposeExpression(xml, 'criteria', elem.criteria);{x.2a}
end;

function TFHIRXmlParser.ParseMeasureGroupStratifier(element : TMXmlElement; path : string) : TFhirMeasureGroupStratifier;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureGroupStratifier.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureGroupStratifierChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureGroupStratifierChild(element : TFhirMeasureGroupStratifier; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'criteria') then
        element.criteria := ParseExpression(child, path+'/criteria') {b}
      else if (child.localName = 'component') then
        element.componentList.Add(ParseMeasureGroupStratifierComponent(child, path+'/component')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureGroupStratifier(xml : TXmlBuilder; name : String; elem : TFhirMeasureGroupStratifier);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMeasureGroupStratifierChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMeasureGroupStratifierChildren(xml : TXmlBuilder; elem : TFhirMeasureGroupStratifier);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeExpression(xml, 'criteria', elem.criteria);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.componentList.Count - 1 do
      ComposeMeasureGroupStratifierComponent(xml, 'component', elem.componentList[i]);
end;

function TFHIRXmlParser.ParseMeasureGroupStratifierComponent(element : TMXmlElement; path : string) : TFhirMeasureGroupStratifierComponent;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureGroupStratifierComponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureGroupStratifierComponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureGroupStratifierComponentChild(element : TFhirMeasureGroupStratifierComponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'criteria') then
        element.criteria := ParseExpression(child, path+'/criteria') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureGroupStratifierComponent(xml : TXmlBuilder; name : String; elem : TFhirMeasureGroupStratifierComponent);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMeasureGroupStratifierComponentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMeasureGroupStratifierComponentChildren(xml : TXmlBuilder; elem : TFhirMeasureGroupStratifierComponent);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  ComposeExpression(xml, 'criteria', elem.criteria);{x.2a}
end;

function TFHIRXmlParser.ParseMeasureSupplementalData(element : TMXmlElement; path : string) : TFhirMeasureSupplementalData;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureSupplementalData.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureSupplementalDataChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureSupplementalDataChild(element : TFhirMeasureSupplementalData; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'usage') then
        element.usageList.Add(ParseCodeableConcept(child, path+'/usage')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'criteria') then
        element.criteria := ParseExpression(child, path+'/criteria') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureSupplementalData(xml : TXmlBuilder; name : String; elem : TFhirMeasureSupplementalData);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMeasureSupplementalDataChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMeasureSupplementalDataChildren(xml : TXmlBuilder; elem : TFhirMeasureSupplementalData);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.usageList.Count - 1 do
      ComposeCodeableConcept(xml, 'usage', elem.usageList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  ComposeExpression(xml, 'criteria', elem.criteria);{x.2a}
end;

function TFHIRXmlParser.ParseMeasure(element : TMXmlElement; path : string) : TFhirMeasure;
var
  child : TMXmlElement;
begin
  result := TFhirMeasure.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureChild(element : TFhirMeasure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'subtitle') then
        element.subtitleElement := ParseString(child, path+'/subtitle') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'subjectCodeableConcept') then
        element.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept'){x.3}
      else if (child.localName = 'subjectReference') then
        element.subject := ParseReference(child, path+'/subjectReference') {a}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'usage') then
        element.usageElement := ParseString(child, path+'/usage') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'approvalDate') then
        element.approvalDateElement := ParseDate(child, path+'/approvalDate') {b}
      else if (child.localName = 'lastReviewDate') then
        element.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {b}
      else if (child.localName = 'topic') then
        element.topicList.Add(ParseCodeableConcept(child, path+'/topic')){y.2}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseContactDetail(child, path+'/author')){y.2}
      else if (child.localName = 'editor') then
        element.editorList.Add(ParseContactDetail(child, path+'/editor')){y.2}
      else if (child.localName = 'reviewer') then
        element.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')){y.2}
      else if (child.localName = 'endorser') then
        element.endorserList.Add(ParseContactDetail(child, path+'/endorser')){y.2}
      else if (child.localName = 'relatedArtifact') then
        element.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')){y.2}
      else if (child.localName = 'library') then
        element.library_List.Add(ParseCanonical(child, path+'/library')){y.2}
      else if (child.localName = 'disclaimer') then
        element.disclaimerElement := ParseMarkdown(child, path+'/disclaimer') {b}
      else if (child.localName = 'scoring') then
        element.scoring := ParseCodeableConcept(child, path+'/scoring') {b}
      else if (child.localName = 'compositeScoring') then
        element.compositeScoring := ParseCodeableConcept(child, path+'/compositeScoring') {b}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'riskAdjustment') then
        element.riskAdjustmentElement := ParseString(child, path+'/riskAdjustment') {b}
      else if (child.localName = 'rateAggregation') then
        element.rateAggregationElement := ParseString(child, path+'/rateAggregation') {b}
      else if (child.localName = 'rationale') then
        element.rationaleElement := ParseMarkdown(child, path+'/rationale') {b}
      else if (child.localName = 'clinicalRecommendationStatement') then
        element.clinicalRecommendationStatementElement := ParseMarkdown(child, path+'/clinicalRecommendationStatement') {b}
      else if (child.localName = 'improvementNotation') then
        element.improvementNotation := ParseCodeableConcept(child, path+'/improvementNotation') {b}
      else if (child.localName = 'definition') then
        element.definitionList.Add(ParseMarkdown(child, path+'/definition')){y.2}
      else if (child.localName = 'guidance') then
        element.guidanceElement := ParseMarkdown(child, path+'/guidance') {b}
      else if (child.localName = 'group') then
        element.groupList.Add(ParseMeasureGroup(child, path+'/group')){y.2}
      else if (child.localName = 'supplementalData') then
        element.supplementalDataList.Add(ParseMeasureSupplementalData(child, path+'/supplementalData')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasure(xml : TXmlBuilder; name : String; elem : TFhirMeasure);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMeasureChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMeasureChildren(xml : TXmlBuilder; elem : TFhirMeasure);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('subtitle') then
    ComposeString(xml, 'subtitle', elem.subtitleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(elem.subject))
  else if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(elem.subject));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeString(xml, 'usage', elem.usageElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDate(xml, 'approvalDate', elem.approvalDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDate(xml, 'lastReviewDate', elem.lastReviewDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(xml, 'effectivePeriod', elem.effectivePeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('topic') then
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', elem.topicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('author') then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('editor') then
    for i := 0 to elem.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', elem.editorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reviewer') then
    for i := 0 to elem.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', elem.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('endorser') then
    for i := 0 to elem.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', elem.endorserList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') then
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', elem.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('library_') then
    for i := 0 to elem.library_List.Count - 1 do
      ComposeCanonical(xml, 'library', elem.library_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('disclaimer') then
    ComposeMarkdown(xml, 'disclaimer', elem.disclaimerElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('scoring') then
    ComposeCodeableConcept(xml, 'scoring', elem.scoring);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('compositeScoring') then
    ComposeCodeableConcept(xml, 'compositeScoring', elem.compositeScoring);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('riskAdjustment') then
    ComposeString(xml, 'riskAdjustment', elem.riskAdjustmentElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('rateAggregation') then
    ComposeString(xml, 'rateAggregation', elem.rateAggregationElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('rationale') then
    ComposeMarkdown(xml, 'rationale', elem.rationaleElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('clinicalRecommendationStatement') then
    ComposeMarkdown(xml, 'clinicalRecommendationStatement', elem.clinicalRecommendationStatementElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('improvementNotation') then
    ComposeCodeableConcept(xml, 'improvementNotation', elem.improvementNotation);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('definition') then
    for i := 0 to elem.definitionList.Count - 1 do
      ComposeMarkdown(xml, 'definition', elem.definitionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('guidance') then
    ComposeMarkdown(xml, 'guidance', elem.guidanceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('group') then
    for i := 0 to elem.groupList.Count - 1 do
      ComposeMeasureGroup(xml, 'group', elem.groupList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('supplementalData') then
    for i := 0 to elem.supplementalDataList.Count - 1 do
      ComposeMeasureSupplementalData(xml, 'supplementalData', elem.supplementalDataList[i]);
end;

{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
function TFHIRXmlParser.ParseMeasureReportGroup(element : TMXmlElement; path : string) : TFhirMeasureReportGroup;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureReportGroup.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureReportGroupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureReportGroupChild(element : TFhirMeasureReportGroup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'population') then
        element.populationList.Add(ParseMeasureReportGroupPopulation(child, path+'/population')){y.2}
      else if (child.localName = 'measureScore') then
        element.measureScore := ParseQuantity(child, path+'/measureScore') {b}
      else if (child.localName = 'stratifier') then
        element.stratifierList.Add(ParseMeasureReportGroupStratifier(child, path+'/stratifier')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroup(xml : TXmlBuilder; name : String; elem : TFhirMeasureReportGroup);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMeasureReportGroupChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupChildren(xml : TXmlBuilder; elem : TFhirMeasureReportGroup);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.populationList.Count - 1 do
      ComposeMeasureReportGroupPopulation(xml, 'population', elem.populationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'measureScore', elem.measureScore);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.stratifierList.Count - 1 do
      ComposeMeasureReportGroupStratifier(xml, 'stratifier', elem.stratifierList[i]);
end;

function TFHIRXmlParser.ParseMeasureReportGroupPopulation(element : TMXmlElement; path : string) : TFhirMeasureReportGroupPopulation;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureReportGroupPopulation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureReportGroupPopulationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureReportGroupPopulationChild(element : TFhirMeasureReportGroupPopulation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'count') then
        element.countElement := ParseInteger(child, path+'/count') {b}
      else if (child.localName = 'subjectResults') then
        element.subjectResults := ParseReference{TFhirList}(child, path+'/subjectResults') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupPopulation(xml : TXmlBuilder; name : String; elem : TFhirMeasureReportGroupPopulation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMeasureReportGroupPopulationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupPopulationChildren(xml : TXmlBuilder; elem : TFhirMeasureReportGroupPopulation);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'count', elem.countElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirList}(xml, 'subjectResults', elem.subjectResults);{x.2a}
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifier(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifier;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureReportGroupStratifier.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureReportGroupStratifierChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifierChild(element : TFhirMeasureReportGroupStratifier; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeList.Add(ParseCodeableConcept(child, path+'/code')){y.2}
      else if (child.localName = 'stratum') then
        element.stratumList.Add(ParseMeasureReportGroupStratifierStratum(child, path+'/stratum')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifier(xml : TXmlBuilder; name : String; elem : TFhirMeasureReportGroupStratifier);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMeasureReportGroupStratifierChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifierChildren(xml : TXmlBuilder; elem : TFhirMeasureReportGroupStratifier);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', elem.codeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.stratumList.Count - 1 do
      ComposeMeasureReportGroupStratifierStratum(xml, 'stratum', elem.stratumList[i]);
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifierStratum(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifierStratum;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureReportGroupStratifierStratum.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureReportGroupStratifierStratumChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifierStratumChild(element : TFhirMeasureReportGroupStratifierStratum; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'value') then
        element.value := ParseCodeableConcept(child, path+'/value') {b}
      else if (child.localName = 'component') then
        element.componentList.Add(ParseMeasureReportGroupStratifierStratumComponent(child, path+'/component')){y.2}
      else if (child.localName = 'population') then
        element.populationList.Add(ParseMeasureReportGroupStratifierStratumPopulation(child, path+'/population')){y.2}
      else if (child.localName = 'measureScore') then
        element.measureScore := ParseQuantity(child, path+'/measureScore') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifierStratum(xml : TXmlBuilder; name : String; elem : TFhirMeasureReportGroupStratifierStratum);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMeasureReportGroupStratifierStratumChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifierStratumChildren(xml : TXmlBuilder; elem : TFhirMeasureReportGroupStratifierStratum);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'value', elem.value);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.componentList.Count - 1 do
      ComposeMeasureReportGroupStratifierStratumComponent(xml, 'component', elem.componentList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.populationList.Count - 1 do
      ComposeMeasureReportGroupStratifierStratumPopulation(xml, 'population', elem.populationList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'measureScore', elem.measureScore);{x.2a}
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifierStratumComponent(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifierStratumComponent;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureReportGroupStratifierStratumComponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureReportGroupStratifierStratumComponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifierStratumComponentChild(element : TFhirMeasureReportGroupStratifierStratumComponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'value') then
        element.value := ParseCodeableConcept(child, path+'/value') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifierStratumComponent(xml : TXmlBuilder; name : String; elem : TFhirMeasureReportGroupStratifierStratumComponent);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMeasureReportGroupStratifierStratumComponentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifierStratumComponentChildren(xml : TXmlBuilder; elem : TFhirMeasureReportGroupStratifierStratumComponent);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  ComposeCodeableConcept(xml, 'value', elem.value);{x.2a}
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifierStratumPopulation(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifierStratumPopulation;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureReportGroupStratifierStratumPopulation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureReportGroupStratifierStratumPopulationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifierStratumPopulationChild(element : TFhirMeasureReportGroupStratifierStratumPopulation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'count') then
        element.countElement := ParseInteger(child, path+'/count') {b}
      else if (child.localName = 'subjectResults') then
        element.subjectResults := ParseReference{TFhirList}(child, path+'/subjectResults') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifierStratumPopulation(xml : TXmlBuilder; name : String; elem : TFhirMeasureReportGroupStratifierStratumPopulation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMeasureReportGroupStratifierStratumPopulationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifierStratumPopulationChildren(xml : TXmlBuilder; elem : TFhirMeasureReportGroupStratifierStratumPopulation);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'count', elem.countElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirList}(xml, 'subjectResults', elem.subjectResults);{x.2a}
end;

function TFHIRXmlParser.ParseMeasureReport(element : TMXmlElement; path : string) : TFhirMeasureReport;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureReport.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureReportChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureReportChild(element : TFhirMeasureReport; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirMeasureReportStatusEnum, SYSTEMS_TFhirMeasureReportStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirMeasureReportTypeEnum, SYSTEMS_TFhirMeasureReportTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'measure') then
        element.measureElement := ParseCanonical(child, path+'/measure') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'reporter') then
        element.reporter := ParseReference{TFhirPractitioner}(child, path+'/reporter') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'improvementNotation') then
        element.improvementNotation := ParseCodeableConcept(child, path+'/improvementNotation') {b}
      else if (child.localName = 'group') then
        element.groupList.Add(ParseMeasureReportGroup(child, path+'/group')){y.2}
      else if (child.localName = 'evaluatedResource') then
        element.evaluatedResourceList.Add(ParseReference{TFhirReference}(child, path+'/evaluatedResource')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureReport(xml : TXmlBuilder; name : String; elem : TFhirMeasureReport);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMeasureReportChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMeasureReportChildren(xml : TXmlBuilder; elem : TFhirMeasureReport);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirMeasureReportStatusEnum);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirMeasureReportTypeEnum);
  ComposeCanonical(xml, 'measure', elem.measureElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reporter') then
    ComposeReference{TFhirPractitioner}(xml, 'reporter', elem.reporter);{x.2a}
  ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('improvementNotation') then
    ComposeCodeableConcept(xml, 'improvementNotation', elem.improvementNotation);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('group') then
    for i := 0 to elem.groupList.Count - 1 do
      ComposeMeasureReportGroup(xml, 'group', elem.groupList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('evaluatedResource') then
    for i := 0 to elem.evaluatedResourceList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'evaluatedResource', elem.evaluatedResourceList[i]);
end;

{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
function TFHIRXmlParser.ParseMedia(element : TMXmlElement; path : string) : TFhirMedia;
var
  child : TMXmlElement;
begin
  result := TFhirMedia.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMediaChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMediaChild(element : TFhirMedia; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirServiceRequest}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'partOf') then
        element.partOfList.Add(ParseReference{TFhirReference}(child, path+'/partOf')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirEventStatusEnum, SYSTEMS_TFhirEventStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'modality') then
        element.modality := ParseCodeableConcept(child, path+'/modality') {b}
      else if (child.localName = 'view') then
        element.view := ParseCodeableConcept(child, path+'/view') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'createdPeriod') then
        element.created := ParsePeriod(child, path+'/createdPeriod'){x.3}
      else if (child.localName = 'createdDateTime') then
        element.created := ParseDateTime(child, path+'/createdDateTime'){x.3}
      else if (child.localName = 'issued') then
        element.issuedElement := ParseInstant(child, path+'/issued') {b}
      else if (child.localName = 'operator') then
        element.operator := ParseReference{TFhirPractitioner}(child, path+'/operator') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'bodySite') then
        element.bodySite := ParseCodeableConcept(child, path+'/bodySite') {b}
      else if (child.localName = 'deviceName') then
        element.deviceNameElement := ParseString(child, path+'/deviceName') {b}
      else if (child.localName = 'device') then
        element.device := ParseReference{TFhirDevice}(child, path+'/device') {b}
      else if (child.localName = 'height') then
        element.heightElement := ParsePositiveInt(child, path+'/height') {b}
      else if (child.localName = 'width') then
        element.widthElement := ParsePositiveInt(child, path+'/width') {b}
      else if (child.localName = 'frames') then
        element.framesElement := ParsePositiveInt(child, path+'/frames') {b}
      else if (child.localName = 'duration') then
        element.durationElement := ParseDecimal(child, path+'/duration') {b}
      else if (child.localName = 'content') then
        element.content := ParseAttachment(child, path+'/content') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedia(xml : TXmlBuilder; name : String; elem : TFhirMedia);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMediaChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMediaChildren(xml : TXmlBuilder; elem : TFhirMedia);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') then
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'partOf', elem.partOfList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirEventStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('modality') then
    ComposeCodeableConcept(xml, 'modality', elem.modality);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('view') then
    ComposeCodeableConcept(xml, 'view', elem.view);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.created is TFhirPeriod) {6} then
    ComposePeriod(xml, 'createdPeriod', TFhirPeriod(elem.created))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.created is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'createdDateTime', TFhirDateTime(elem.created));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('issued') then
    ComposeInstant(xml, 'issued', elem.issuedElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('operator') then
    ComposeReference{TFhirPractitioner}(xml, 'operator', elem.operator);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('bodySite') then
    ComposeCodeableConcept(xml, 'bodySite', elem.bodySite);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('deviceName') then
    ComposeString(xml, 'deviceName', elem.deviceNameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('device') then
    ComposeReference{TFhirDevice}(xml, 'device', elem.device);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('height') then
    ComposePositiveInt(xml, 'height', elem.heightElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('width') then
    ComposePositiveInt(xml, 'width', elem.widthElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('frames') then
    ComposePositiveInt(xml, 'frames', elem.framesElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('duration') then
    ComposeDecimal(xml, 'duration', elem.durationElement);{x.2b}
  ComposeAttachment(xml, 'content', elem.content);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
function TFHIRXmlParser.ParseMedicationIngredient(element : TMXmlElement; path : string) : TFhirMedicationIngredient;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationIngredient.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationIngredientChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationIngredientChild(element : TFhirMedicationIngredient; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemCodeableConcept') then
        element.item := ParseCodeableConcept(child, path+'/itemCodeableConcept'){x.3}
      else if (child.localName = 'itemReference') then
        element.item := ParseReference(child, path+'/itemReference') {a}
      else if (child.localName = 'isActive') then
        element.isActiveElement := ParseBoolean(child, path+'/isActive') {b}
      else if (child.localName = 'strength') then
        element.strength := ParseRatio(child, path+'/strength') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationIngredient(xml : TXmlBuilder; name : String; elem : TFhirMedicationIngredient);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationIngredientChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationIngredientChildren(xml : TXmlBuilder; elem : TFhirMedicationIngredient);
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.item is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'itemCodeableConcept', TFhirCodeableConcept(elem.item))
  else if (elem.item is TFhirReference) {2} then
    ComposeReference(xml, 'itemReference', TFhirReference(elem.item));
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'isActive', elem.isActiveElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeRatio(xml, 'strength', elem.strength);{x.2a}
end;

function TFHIRXmlParser.ParseMedicationBatch(element : TMXmlElement; path : string) : TFhirMedicationBatch;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationBatch.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationBatchChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationBatchChild(element : TFhirMedicationBatch; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'lotNumber') then
        element.lotNumberElement := ParseString(child, path+'/lotNumber') {b}
      else if (child.localName = 'expirationDate') then
        element.expirationDateElement := ParseDateTime(child, path+'/expirationDate') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationBatch(xml : TXmlBuilder; name : String; elem : TFhirMedicationBatch);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationBatchChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationBatchChildren(xml : TXmlBuilder; elem : TFhirMedicationBatch);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'lotNumber', elem.lotNumberElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'expirationDate', elem.expirationDateElement);{x.2b}
end;

function TFHIRXmlParser.ParseMedication(element : TMXmlElement; path : string) : TFhirMedication;
var
  child : TMXmlElement;
begin
  result := TFhirMedication.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationChild(element : TFhirMedication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirMedicationStatusEnum, SYSTEMS_TFhirMedicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'manufacturer') then
        element.manufacturer := ParseReference{TFhirOrganization}(child, path+'/manufacturer') {b}
      else if (child.localName = 'form') then
        element.form := ParseCodeableConcept(child, path+'/form') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseRatio(child, path+'/amount') {b}
      else if (child.localName = 'ingredient') then
        element.ingredientList.Add(ParseMedicationIngredient(child, path+'/ingredient')){y.2}
      else if (child.localName = 'batch') then
        element.batch := ParseMedicationBatch(child, path+'/batch') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedication(xml : TXmlBuilder; name : String; elem : TFhirMedication);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationChildren(xml : TXmlBuilder; elem : TFhirMedication);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirMedicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('manufacturer') then
    ComposeReference{TFhirOrganization}(xml, 'manufacturer', elem.manufacturer);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('form') then
    ComposeCodeableConcept(xml, 'form', elem.form);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('amount') then
    ComposeRatio(xml, 'amount', elem.amount);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('ingredient') then
    for i := 0 to elem.ingredientList.Count - 1 do
      ComposeMedicationIngredient(xml, 'ingredient', elem.ingredientList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('batch') then
    ComposeMedicationBatch(xml, 'batch', elem.batch);{x.2a}
end;

{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
function TFHIRXmlParser.ParseMedicationAdministrationPerformer(element : TMXmlElement; path : string) : TFhirMedicationAdministrationPerformer;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationAdministrationPerformer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationAdministrationPerformerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationAdministrationPerformerChild(element : TFhirMedicationAdministrationPerformer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'function') then
        element.function_ := ParseCodeableConcept(child, path+'/function') {b}
      else if (child.localName = 'actor') then
        element.actor := ParseReference{TFhirPractitioner}(child, path+'/actor') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationAdministrationPerformer(xml : TXmlBuilder; name : String; elem : TFhirMedicationAdministrationPerformer);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationAdministrationPerformerChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationAdministrationPerformerChildren(xml : TXmlBuilder; elem : TFhirMedicationAdministrationPerformer);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'function', elem.function_);{x.2a}
  ComposeReference{TFhirPractitioner}(xml, 'actor', elem.actor);{x.2a}
end;

function TFHIRXmlParser.ParseMedicationAdministrationDosage(element : TMXmlElement; path : string) : TFhirMedicationAdministrationDosage;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationAdministrationDosage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationAdministrationDosageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationAdministrationDosageChild(element : TFhirMedicationAdministrationDosage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if (child.localName = 'site') then
        element.site := ParseCodeableConcept(child, path+'/site') {b}
      else if (child.localName = 'route') then
        element.route := ParseCodeableConcept(child, path+'/route') {b}
      else if (child.localName = 'method') then
        element.method := ParseCodeableConcept(child, path+'/method') {b}
      else if (child.localName = 'dose') then
        element.dose := ParseQuantity(child, path+'/dose') {b}
      else if (child.localName = 'rateRatio') then
        element.rate := ParseRatio(child, path+'/rateRatio'){x.3}
      else if (child.localName = 'rateQuantity') then
        element.rate := ParseQuantity(child, path+'/rateQuantity'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationAdministrationDosage(xml : TXmlBuilder; name : String; elem : TFhirMedicationAdministrationDosage);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationAdministrationDosageChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationAdministrationDosageChildren(xml : TXmlBuilder; elem : TFhirMedicationAdministrationDosage);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', elem.textElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'site', elem.site);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'route', elem.route);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'method', elem.method);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'dose', elem.dose);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.rate is TFhirRatio) {6} then
    ComposeRatio(xml, 'rateRatio', TFhirRatio(elem.rate))
  else if (SummaryOption in [soFull, soData]) and (elem.rate is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'rateQuantity', TFhirQuantity(elem.rate));
end;

function TFHIRXmlParser.ParseMedicationAdministration(element : TMXmlElement; path : string) : TFhirMedicationAdministration;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationAdministration.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationAdministrationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationAdministrationChild(element : TFhirMedicationAdministration; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'instantiates') then
        element.instantiatesList.Add(ParseUri(child, path+'/instantiates')){y.2}
      else if (child.localName = 'partOf') then
        element.partOfList.Add(ParseReference{TFhirMedicationAdministration}(child, path+'/partOf')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseCode(child, path+'/status') {b}
      else if (child.localName = 'statusReason') then
        element.statusReasonList.Add(ParseCodeableConcept(child, path+'/statusReason')){y.2}
      else if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'medicationCodeableConcept') then
        element.medication := ParseCodeableConcept(child, path+'/medicationCodeableConcept'){x.3}
      else if (child.localName = 'medicationReference') then
        element.medication := ParseReference(child, path+'/medicationReference') {a}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'context') then
        element.context := ParseReference{TFhirEncounter}(child, path+'/context') {b}
      else if (child.localName = 'supportingInformation') then
        element.supportingInformationList.Add(ParseReference{TFhirReference}(child, path+'/supportingInformation')){y.2}
      else if (child.localName = 'effectivePeriod') then
        element.effective := ParsePeriod(child, path+'/effectivePeriod'){x.3}
      else if (child.localName = 'effectiveDateTime') then
        element.effective := ParseDateTime(child, path+'/effectiveDateTime'){x.3}
      else if (child.localName = 'performer') then
        element.performerList.Add(ParseMedicationAdministrationPerformer(child, path+'/performer')){y.2}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'request') then
        element.request := ParseReference{TFhirMedicationRequest}(child, path+'/request') {b}
      else if (child.localName = 'device') then
        element.deviceList.Add(ParseReference{TFhirDevice}(child, path+'/device')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'dosage') then
        element.dosage := ParseMedicationAdministrationDosage(child, path+'/dosage') {b}
      else if (child.localName = 'eventHistory') then
        element.eventHistoryList.Add(ParseReference{TFhirProvenance}(child, path+'/eventHistory')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationAdministration(xml : TXmlBuilder; name : String; elem : TFhirMedicationAdministration);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicationAdministrationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationAdministrationChildren(xml : TXmlBuilder; elem : TFhirMedicationAdministration);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiates') then
    for i := 0 to elem.instantiatesList.Count - 1 do
      ComposeUri(xml, 'instantiates', elem.instantiatesList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') then
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirMedicationAdministration}(xml, 'partOf', elem.partOfList[i]);
  ComposeCode(xml, 'status', elem.statusElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('statusReason') then
    for i := 0 to elem.statusReasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'statusReason', elem.statusReasonList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('category') then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  if (elem.medication is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication))
  else if (elem.medication is TFhirReference) {2} then
    ComposeReference(xml, 'medicationReference', TFhirReference(elem.medication));
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('context') then
    ComposeReference{TFhirEncounter}(xml, 'context', elem.context);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInformation') then
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'supportingInformation', elem.supportingInformationList[i]);
  if (elem.effective is TFhirPeriod) {6} then
    ComposePeriod(xml, 'effectivePeriod', TFhirPeriod(elem.effective))
  else if (elem.effective is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'effectiveDateTime', TFhirDateTime(elem.effective));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') then
    for i := 0 to elem.performerList.Count - 1 do
      ComposeMedicationAdministrationPerformer(xml, 'performer', elem.performerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('request') then
    ComposeReference{TFhirMedicationRequest}(xml, 'request', elem.request);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('device') then
    for i := 0 to elem.deviceList.Count - 1 do
      ComposeReference{TFhirDevice}(xml, 'device', elem.deviceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('dosage') then
    ComposeMedicationAdministrationDosage(xml, 'dosage', elem.dosage);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('eventHistory') then
    for i := 0 to elem.eventHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(xml, 'eventHistory', elem.eventHistoryList[i]);
end;

{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
function TFHIRXmlParser.ParseMedicationDispensePerformer(element : TMXmlElement; path : string) : TFhirMedicationDispensePerformer;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationDispensePerformer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationDispensePerformerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationDispensePerformerChild(element : TFhirMedicationDispensePerformer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'function') then
        element.function_ := ParseCodeableConcept(child, path+'/function') {b}
      else if (child.localName = 'actor') then
        element.actor := ParseReference{TFhirPractitioner}(child, path+'/actor') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationDispensePerformer(xml : TXmlBuilder; name : String; elem : TFhirMedicationDispensePerformer);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationDispensePerformerChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationDispensePerformerChildren(xml : TXmlBuilder; elem : TFhirMedicationDispensePerformer);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'function', elem.function_);{x.2a}
  ComposeReference{TFhirPractitioner}(xml, 'actor', elem.actor);{x.2a}
end;

function TFHIRXmlParser.ParseMedicationDispenseSubstitution(element : TMXmlElement; path : string) : TFhirMedicationDispenseSubstitution;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationDispenseSubstitution.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationDispenseSubstitutionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationDispenseSubstitutionChild(element : TFhirMedicationDispenseSubstitution; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'wasSubstituted') then
        element.wasSubstitutedElement := ParseBoolean(child, path+'/wasSubstituted') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'reason') then
        element.reasonList.Add(ParseCodeableConcept(child, path+'/reason')){y.2}
      else if (child.localName = 'responsibleParty') then
        element.responsiblePartyList.Add(ParseReference{TFhirPractitioner}(child, path+'/responsibleParty')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationDispenseSubstitution(xml : TXmlBuilder; name : String; elem : TFhirMedicationDispenseSubstitution);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationDispenseSubstitutionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationDispenseSubstitutionChildren(xml : TXmlBuilder; elem : TFhirMedicationDispenseSubstitution);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeBoolean(xml, 'wasSubstituted', elem.wasSubstitutedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'reason', elem.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.responsiblePartyList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'responsibleParty', elem.responsiblePartyList[i]);
end;

function TFHIRXmlParser.ParseMedicationDispense(element : TMXmlElement; path : string) : TFhirMedicationDispense;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationDispense.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationDispenseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationDispenseChild(element : TFhirMedicationDispense; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'partOf') then
        element.partOfList.Add(ParseReference{TFhirProcedure}(child, path+'/partOf')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseCode(child, path+'/status') {b}
      else if (child.localName = 'statusReasonCodeableConcept') then
        element.statusReason := ParseCodeableConcept(child, path+'/statusReasonCodeableConcept'){x.3}
      else if (child.localName = 'statusReasonReference') then
        element.statusReason := ParseReference(child, path+'/statusReasonReference') {a}
      else if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'medicationCodeableConcept') then
        element.medication := ParseCodeableConcept(child, path+'/medicationCodeableConcept'){x.3}
      else if (child.localName = 'medicationReference') then
        element.medication := ParseReference(child, path+'/medicationReference') {a}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'context') then
        element.context := ParseReference{TFhirEncounter}(child, path+'/context') {b}
      else if (child.localName = 'supportingInformation') then
        element.supportingInformationList.Add(ParseReference{TFhirReference}(child, path+'/supportingInformation')){y.2}
      else if (child.localName = 'performer') then
        element.performerList.Add(ParseMedicationDispensePerformer(child, path+'/performer')){y.2}
      else if (child.localName = 'location') then
        element.location := ParseReference{TFhirLocation}(child, path+'/location') {b}
      else if (child.localName = 'authorizingPrescription') then
        element.authorizingPrescriptionList.Add(ParseReference{TFhirMedicationRequest}(child, path+'/authorizingPrescription')){y.2}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'daysSupply') then
        element.daysSupply := ParseQuantity(child, path+'/daysSupply') {b}
      else if (child.localName = 'whenPrepared') then
        element.whenPreparedElement := ParseDateTime(child, path+'/whenPrepared') {b}
      else if (child.localName = 'whenHandedOver') then
        element.whenHandedOverElement := ParseDateTime(child, path+'/whenHandedOver') {b}
      else if (child.localName = 'destination') then
        element.destination := ParseReference{TFhirLocation}(child, path+'/destination') {b}
      else if (child.localName = 'receiver') then
        element.receiverList.Add(ParseReference{TFhirPatient}(child, path+'/receiver')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'dosageInstruction') then
        element.dosageInstructionList.Add(ParseDosage(child, path+'/dosageInstruction')){y.2}
      else if (child.localName = 'substitution') then
        element.substitution := ParseMedicationDispenseSubstitution(child, path+'/substitution') {b}
      else if (child.localName = 'detectedIssue') then
        element.detectedIssueList.Add(ParseReference{TFhirDetectedIssue}(child, path+'/detectedIssue')){y.2}
      else if (child.localName = 'eventHistory') then
        element.eventHistoryList.Add(ParseReference{TFhirProvenance}(child, path+'/eventHistory')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationDispense(xml : TXmlBuilder; name : String; elem : TFhirMedicationDispense);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicationDispenseChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationDispenseChildren(xml : TXmlBuilder; elem : TFhirMedicationDispense);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('partOf') then
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirProcedure}(xml, 'partOf', elem.partOfList[i]);
  ComposeCode(xml, 'status', elem.statusElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.statusReason is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'statusReasonCodeableConcept', TFhirCodeableConcept(elem.statusReason))
  else if (SummaryOption in [soFull, soData]) and (elem.statusReason is TFhirReference) {2} then
    ComposeReference(xml, 'statusReasonReference', TFhirReference(elem.statusReason));
  if (SummaryOption in [soFull, soData]) and doCompose('category') then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  if (elem.medication is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication))
  else if (elem.medication is TFhirReference) {2} then
    ComposeReference(xml, 'medicationReference', TFhirReference(elem.medication));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('context') then
    ComposeReference{TFhirEncounter}(xml, 'context', elem.context);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInformation') then
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'supportingInformation', elem.supportingInformationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('performer') then
    for i := 0 to elem.performerList.Count - 1 do
      ComposeMedicationDispensePerformer(xml, 'performer', elem.performerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(xml, 'location', elem.location);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('authorizingPrescription') then
    for i := 0 to elem.authorizingPrescriptionList.Count - 1 do
      ComposeReference{TFhirMedicationRequest}(xml, 'authorizingPrescription', elem.authorizingPrescriptionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('quantity') then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('daysSupply') then
    ComposeQuantity(xml, 'daysSupply', elem.daysSupply);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('whenPrepared') then
    ComposeDateTime(xml, 'whenPrepared', elem.whenPreparedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('whenHandedOver') then
    ComposeDateTime(xml, 'whenHandedOver', elem.whenHandedOverElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('destination') then
    ComposeReference{TFhirLocation}(xml, 'destination', elem.destination);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('receiver') then
    for i := 0 to elem.receiverList.Count - 1 do
      ComposeReference{TFhirPatient}(xml, 'receiver', elem.receiverList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('dosageInstruction') then
    for i := 0 to elem.dosageInstructionList.Count - 1 do
      ComposeDosage(xml, 'dosageInstruction', elem.dosageInstructionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('substitution') then
    ComposeMedicationDispenseSubstitution(xml, 'substitution', elem.substitution);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('detectedIssue') then
    for i := 0 to elem.detectedIssueList.Count - 1 do
      ComposeReference{TFhirDetectedIssue}(xml, 'detectedIssue', elem.detectedIssueList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('eventHistory') then
    for i := 0 to elem.eventHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(xml, 'eventHistory', elem.eventHistoryList[i]);
end;

{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
function TFHIRXmlParser.ParseMedicationKnowledgeRelatedMedicationKnowledge(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRelatedMedicationKnowledge;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeRelatedMedicationKnowledge.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeRelatedMedicationKnowledgeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRelatedMedicationKnowledgeChild(element : TFhirMedicationKnowledgeRelatedMedicationKnowledge; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'reference') then
        element.referenceList.Add(ParseReference{TFhirMedicationKnowledge}(child, path+'/reference')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRelatedMedicationKnowledge(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeRelatedMedicationKnowledge);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeRelatedMedicationKnowledgeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRelatedMedicationKnowledgeChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeRelatedMedicationKnowledge);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  for i := 0 to elem.referenceList.Count - 1 do
      ComposeReference{TFhirMedicationKnowledge}(xml, 'reference', elem.referenceList[i]);
end;

function TFHIRXmlParser.ParseMedicationKnowledgeMonograph(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeMonograph;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeMonograph.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeMonographChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeMonographChild(element : TFhirMedicationKnowledgeMonograph; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'source') then
        element.source := ParseReference{TFhirDocumentReference}(child, path+'/source') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeMonograph(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeMonograph);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeMonographChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeMonographChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeMonograph);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirDocumentReference}(xml, 'source', elem.source);{x.2a}
end;

function TFHIRXmlParser.ParseMedicationKnowledgeIngredient(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeIngredient;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeIngredient.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeIngredientChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeIngredientChild(element : TFhirMedicationKnowledgeIngredient; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemCodeableConcept') then
        element.item := ParseCodeableConcept(child, path+'/itemCodeableConcept'){x.3}
      else if (child.localName = 'itemReference') then
        element.item := ParseReference(child, path+'/itemReference') {a}
      else if (child.localName = 'isActive') then
        element.isActiveElement := ParseBoolean(child, path+'/isActive') {b}
      else if (child.localName = 'strength') then
        element.strength := ParseRatio(child, path+'/strength') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeIngredient(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeIngredient);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeIngredientChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeIngredientChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeIngredient);
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.item is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'itemCodeableConcept', TFhirCodeableConcept(elem.item))
  else if (elem.item is TFhirReference) {2} then
    ComposeReference(xml, 'itemReference', TFhirReference(elem.item));
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'isActive', elem.isActiveElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeRatio(xml, 'strength', elem.strength);{x.2a}
end;

function TFHIRXmlParser.ParseMedicationKnowledgeCost(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeCost;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeCost.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeCostChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeCostChild(element : TFhirMedicationKnowledgeCost; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'source') then
        element.sourceElement := ParseString(child, path+'/source') {b}
      else if (child.localName = 'cost') then
        element.cost := ParseMoney(child, path+'/cost') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeCost(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeCost);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeCostChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeCostChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeCost);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'source', elem.sourceElement);{x.2b}
  ComposeMoney(xml, 'cost', elem.cost);{x.2a}
end;

function TFHIRXmlParser.ParseMedicationKnowledgeMonitoringProgram(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeMonitoringProgram;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeMonitoringProgram.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeMonitoringProgramChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeMonitoringProgramChild(element : TFhirMedicationKnowledgeMonitoringProgram; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeMonitoringProgram(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeMonitoringProgram);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeMonitoringProgramChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeMonitoringProgramChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeMonitoringProgram);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
end;

function TFHIRXmlParser.ParseMedicationKnowledgeAdministrationGuidelines(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeAdministrationGuidelines;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeAdministrationGuidelines.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeAdministrationGuidelinesChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeAdministrationGuidelinesChild(element : TFhirMedicationKnowledgeAdministrationGuidelines; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'dosage') then
        element.dosageList.Add(ParseMedicationKnowledgeAdministrationGuidelinesDosage(child, path+'/dosage')){y.2}
      else if (child.localName = 'indicationCodeableConcept') then
        element.indication := ParseCodeableConcept(child, path+'/indicationCodeableConcept'){x.3}
      else if (child.localName = 'indicationReference') then
        element.indication := ParseReference(child, path+'/indicationReference') {a}
      else if (child.localName = 'patientCharacteristics') then
        element.patientCharacteristicsList.Add(ParseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(child, path+'/patientCharacteristics')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeAdministrationGuidelines(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeAdministrationGuidelines);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeAdministrationGuidelinesChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeAdministrationGuidelinesChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeAdministrationGuidelines);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.dosageList.Count - 1 do
      ComposeMedicationKnowledgeAdministrationGuidelinesDosage(xml, 'dosage', elem.dosageList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.indication is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'indicationCodeableConcept', TFhirCodeableConcept(elem.indication))
  else if (SummaryOption in [soFull, soData]) and (elem.indication is TFhirReference) {2} then
    ComposeReference(xml, 'indicationReference', TFhirReference(elem.indication));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.patientCharacteristicsList.Count - 1 do
      ComposeMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(xml, 'patientCharacteristics', elem.patientCharacteristicsList[i]);
end;

function TFHIRXmlParser.ParseMedicationKnowledgeAdministrationGuidelinesDosage(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeAdministrationGuidelinesDosage;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeAdministrationGuidelinesDosage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeAdministrationGuidelinesDosageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeAdministrationGuidelinesDosageChild(element : TFhirMedicationKnowledgeAdministrationGuidelinesDosage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'dosage') then
        element.dosageList.Add(ParseDosage(child, path+'/dosage')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeAdministrationGuidelinesDosage(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeAdministrationGuidelinesDosage);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeAdministrationGuidelinesDosageChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeAdministrationGuidelinesDosageChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeAdministrationGuidelinesDosage);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  for i := 0 to elem.dosageList.Count - 1 do
      ComposeDosage(xml, 'dosage', elem.dosageList[i]);
end;

function TFHIRXmlParser.ParseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristicsChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristicsChild(element : TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'characteristicCodeableConcept') then
        element.characteristic := ParseCodeableConcept(child, path+'/characteristicCodeableConcept'){x.3}
      else if (child.localName = 'characteristicQuantity') then
        element.characteristic := ParseQuantity(child, path+'/characteristicQuantity'){x.3}
      else if (child.localName = 'value') then
        element.valueList.Add(ParseString(child, path+'/value')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeAdministrationGuidelinesPatientCharacteristicsChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeAdministrationGuidelinesPatientCharacteristicsChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.characteristic is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'characteristicCodeableConcept', TFhirCodeableConcept(elem.characteristic))
  else if (elem.characteristic is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'characteristicQuantity', TFhirQuantity(elem.characteristic));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.valueList.Count - 1 do
      ComposeString(xml, 'value', elem.valueList[i]);
end;

function TFHIRXmlParser.ParseMedicationKnowledgeMedicineClassification(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeMedicineClassification;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeMedicineClassification.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeMedicineClassificationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeMedicineClassificationChild(element : TFhirMedicationKnowledgeMedicineClassification; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'classification') then
        element.classificationList.Add(ParseCodeableConcept(child, path+'/classification')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeMedicineClassification(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeMedicineClassification);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeMedicineClassificationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeMedicineClassificationChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeMedicineClassification);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.classificationList.Count - 1 do
      ComposeCodeableConcept(xml, 'classification', elem.classificationList[i]);
end;

function TFHIRXmlParser.ParseMedicationKnowledgePackaging(element : TMXmlElement; path : string) : TFhirMedicationKnowledgePackaging;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgePackaging.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgePackagingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgePackagingChild(element : TFhirMedicationKnowledgePackaging; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgePackaging(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgePackaging);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgePackagingChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgePackagingChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgePackaging);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
end;

function TFHIRXmlParser.ParseMedicationKnowledgeDrugCharacteristic(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeDrugCharacteristic;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeDrugCharacteristic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeDrugCharacteristicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeDrugCharacteristicChild(element : TFhirMedicationKnowledgeDrugCharacteristic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'valueCodeableConcept') then
        element.value := ParseCodeableConcept(child, path+'/valueCodeableConcept'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueBase64Binary') then
        element.value := ParseBase64Binary(child, path+'/valueBase64Binary'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeDrugCharacteristic(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeDrugCharacteristic);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeDrugCharacteristicChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeDrugCharacteristicChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeDrugCharacteristic);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(elem.value));
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRegulatory(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRegulatory;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeRegulatory.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeRegulatoryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRegulatoryChild(element : TFhirMedicationKnowledgeRegulatory; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'regulatoryAuthority') then
        element.regulatoryAuthority := ParseReference{TFhirOrganization}(child, path+'/regulatoryAuthority') {b}
      else if (child.localName = 'substitution') then
        element.substitutionList.Add(ParseMedicationKnowledgeRegulatorySubstitution(child, path+'/substitution')){y.2}
      else if (child.localName = 'schedule') then
        element.scheduleList.Add(ParseMedicationKnowledgeRegulatorySchedule(child, path+'/schedule')){y.2}
      else if (child.localName = 'maxDispense') then
        element.maxDispense := ParseMedicationKnowledgeRegulatoryMaxDispense(child, path+'/maxDispense') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRegulatory(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeRegulatory);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeRegulatoryChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRegulatoryChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeRegulatory);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeReference{TFhirOrganization}(xml, 'regulatoryAuthority', elem.regulatoryAuthority);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.substitutionList.Count - 1 do
      ComposeMedicationKnowledgeRegulatorySubstitution(xml, 'substitution', elem.substitutionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.scheduleList.Count - 1 do
      ComposeMedicationKnowledgeRegulatorySchedule(xml, 'schedule', elem.scheduleList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationKnowledgeRegulatoryMaxDispense(xml, 'maxDispense', elem.maxDispense);{x.2a}
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRegulatorySubstitution(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRegulatorySubstitution;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeRegulatorySubstitution.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeRegulatorySubstitutionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRegulatorySubstitutionChild(element : TFhirMedicationKnowledgeRegulatorySubstitution; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'allowed') then
        element.allowedElement := ParseBoolean(child, path+'/allowed') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRegulatorySubstitution(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeRegulatorySubstitution);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeRegulatorySubstitutionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRegulatorySubstitutionChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeRegulatorySubstitution);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  ComposeBoolean(xml, 'allowed', elem.allowedElement);{x.2b}
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRegulatorySchedule(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRegulatorySchedule;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeRegulatorySchedule.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeRegulatoryScheduleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRegulatoryScheduleChild(element : TFhirMedicationKnowledgeRegulatorySchedule; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'schedule') then
        element.schedule := ParseCodeableConcept(child, path+'/schedule') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRegulatorySchedule(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeRegulatorySchedule);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeRegulatoryScheduleChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRegulatoryScheduleChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeRegulatorySchedule);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'schedule', elem.schedule);{x.2a}
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRegulatoryMaxDispense(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRegulatoryMaxDispense;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeRegulatoryMaxDispense.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeRegulatoryMaxDispenseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRegulatoryMaxDispenseChild(element : TFhirMedicationKnowledgeRegulatoryMaxDispense; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'period') then
        element.period := ParseDuration(child, path+'/period') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRegulatoryMaxDispense(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeRegulatoryMaxDispense);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeRegulatoryMaxDispenseChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRegulatoryMaxDispenseChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeRegulatoryMaxDispense);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParseMedicationKnowledgeKinetics(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeKinetics;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeKinetics.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeKineticsChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeKineticsChild(element : TFhirMedicationKnowledgeKinetics; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'areaUnderCurve') then
        element.areaUnderCurveList.Add(ParseQuantity(child, path+'/areaUnderCurve')){y.2}
      else if (child.localName = 'lethalDose50') then
        element.lethalDose50List.Add(ParseQuantity(child, path+'/lethalDose50')){y.2}
      else if (child.localName = 'halfLifePeriod') then
        element.halfLifePeriod := ParseDuration(child, path+'/halfLifePeriod') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeKinetics(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledgeKinetics);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeKineticsChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeKineticsChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledgeKinetics);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.areaUnderCurveList.Count - 1 do
      ComposeQuantity(xml, 'areaUnderCurve', elem.areaUnderCurveList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.lethalDose50List.Count - 1 do
      ComposeQuantity(xml, 'lethalDose50', elem.lethalDose50List[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'halfLifePeriod', elem.halfLifePeriod);{x.2a}
end;

function TFHIRXmlParser.ParseMedicationKnowledge(element : TMXmlElement; path : string) : TFhirMedicationKnowledge;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledge.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeChild(element : TFhirMedicationKnowledge; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseCode(child, path+'/status') {b}
      else if (child.localName = 'manufacturer') then
        element.manufacturer := ParseReference{TFhirOrganization}(child, path+'/manufacturer') {b}
      else if (child.localName = 'doseForm') then
        element.doseForm := ParseCodeableConcept(child, path+'/doseForm') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseQuantity(child, path+'/amount') {b}
      else if (child.localName = 'synonym') then
        element.synonymList.Add(ParseString(child, path+'/synonym')){y.2}
      else if (child.localName = 'relatedMedicationKnowledge') then
        element.relatedMedicationKnowledgeList.Add(ParseMedicationKnowledgeRelatedMedicationKnowledge(child, path+'/relatedMedicationKnowledge')){y.2}
      else if (child.localName = 'associatedMedication') then
        element.associatedMedicationList.Add(ParseReference{TFhirMedication}(child, path+'/associatedMedication')){y.2}
      else if (child.localName = 'productType') then
        element.productTypeList.Add(ParseCodeableConcept(child, path+'/productType')){y.2}
      else if (child.localName = 'monograph') then
        element.monographList.Add(ParseMedicationKnowledgeMonograph(child, path+'/monograph')){y.2}
      else if (child.localName = 'ingredient') then
        element.ingredientList.Add(ParseMedicationKnowledgeIngredient(child, path+'/ingredient')){y.2}
      else if (child.localName = 'preparationInstruction') then
        element.preparationInstructionElement := ParseMarkdown(child, path+'/preparationInstruction') {b}
      else if (child.localName = 'intendedRoute') then
        element.intendedRouteList.Add(ParseCodeableConcept(child, path+'/intendedRoute')){y.2}
      else if (child.localName = 'cost') then
        element.costList.Add(ParseMedicationKnowledgeCost(child, path+'/cost')){y.2}
      else if (child.localName = 'monitoringProgram') then
        element.monitoringProgramList.Add(ParseMedicationKnowledgeMonitoringProgram(child, path+'/monitoringProgram')){y.2}
      else if (child.localName = 'administrationGuidelines') then
        element.administrationGuidelinesList.Add(ParseMedicationKnowledgeAdministrationGuidelines(child, path+'/administrationGuidelines')){y.2}
      else if (child.localName = 'medicineClassification') then
        element.medicineClassificationList.Add(ParseMedicationKnowledgeMedicineClassification(child, path+'/medicineClassification')){y.2}
      else if (child.localName = 'packaging') then
        element.packaging := ParseMedicationKnowledgePackaging(child, path+'/packaging') {b}
      else if (child.localName = 'drugCharacteristic') then
        element.drugCharacteristicList.Add(ParseMedicationKnowledgeDrugCharacteristic(child, path+'/drugCharacteristic')){y.2}
      else if (child.localName = 'contraindication') then
        element.contraindicationList.Add(ParseReference{TFhirDetectedIssue}(child, path+'/contraindication')){y.2}
      else if (child.localName = 'regulatory') then
        element.regulatoryList.Add(ParseMedicationKnowledgeRegulatory(child, path+'/regulatory')){y.2}
      else if (child.localName = 'kinetics') then
        element.kineticsList.Add(ParseMedicationKnowledgeKinetics(child, path+'/kinetics')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledge(xml : TXmlBuilder; name : String; elem : TFhirMedicationKnowledge);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicationKnowledgeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeChildren(xml : TXmlBuilder; elem : TFhirMedicationKnowledge);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeCode(xml, 'status', elem.statusElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('manufacturer') then
    ComposeReference{TFhirOrganization}(xml, 'manufacturer', elem.manufacturer);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('doseForm') then
    ComposeCodeableConcept(xml, 'doseForm', elem.doseForm);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('amount') then
    ComposeQuantity(xml, 'amount', elem.amount);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('synonym') then
    for i := 0 to elem.synonymList.Count - 1 do
      ComposeString(xml, 'synonym', elem.synonymList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedMedicationKnowledge') then
    for i := 0 to elem.relatedMedicationKnowledgeList.Count - 1 do
      ComposeMedicationKnowledgeRelatedMedicationKnowledge(xml, 'relatedMedicationKnowledge', elem.relatedMedicationKnowledgeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('associatedMedication') then
    for i := 0 to elem.associatedMedicationList.Count - 1 do
      ComposeReference{TFhirMedication}(xml, 'associatedMedication', elem.associatedMedicationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('productType') then
    for i := 0 to elem.productTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'productType', elem.productTypeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('monograph') then
    for i := 0 to elem.monographList.Count - 1 do
      ComposeMedicationKnowledgeMonograph(xml, 'monograph', elem.monographList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('ingredient') then
    for i := 0 to elem.ingredientList.Count - 1 do
      ComposeMedicationKnowledgeIngredient(xml, 'ingredient', elem.ingredientList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('preparationInstruction') then
    ComposeMarkdown(xml, 'preparationInstruction', elem.preparationInstructionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('intendedRoute') then
    for i := 0 to elem.intendedRouteList.Count - 1 do
      ComposeCodeableConcept(xml, 'intendedRoute', elem.intendedRouteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('cost') then
    for i := 0 to elem.costList.Count - 1 do
      ComposeMedicationKnowledgeCost(xml, 'cost', elem.costList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('monitoringProgram') then
    for i := 0 to elem.monitoringProgramList.Count - 1 do
      ComposeMedicationKnowledgeMonitoringProgram(xml, 'monitoringProgram', elem.monitoringProgramList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('administrationGuidelines') then
    for i := 0 to elem.administrationGuidelinesList.Count - 1 do
      ComposeMedicationKnowledgeAdministrationGuidelines(xml, 'administrationGuidelines', elem.administrationGuidelinesList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('medicineClassification') then
    for i := 0 to elem.medicineClassificationList.Count - 1 do
      ComposeMedicationKnowledgeMedicineClassification(xml, 'medicineClassification', elem.medicineClassificationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('packaging') then
    ComposeMedicationKnowledgePackaging(xml, 'packaging', elem.packaging);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('drugCharacteristic') then
    for i := 0 to elem.drugCharacteristicList.Count - 1 do
      ComposeMedicationKnowledgeDrugCharacteristic(xml, 'drugCharacteristic', elem.drugCharacteristicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('contraindication') then
    for i := 0 to elem.contraindicationList.Count - 1 do
      ComposeReference{TFhirDetectedIssue}(xml, 'contraindication', elem.contraindicationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('regulatory') then
    for i := 0 to elem.regulatoryList.Count - 1 do
      ComposeMedicationKnowledgeRegulatory(xml, 'regulatory', elem.regulatoryList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('kinetics') then
    for i := 0 to elem.kineticsList.Count - 1 do
      ComposeMedicationKnowledgeKinetics(xml, 'kinetics', elem.kineticsList[i]);
end;

{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
function TFHIRXmlParser.ParseMedicationRequestDispenseRequest(element : TMXmlElement; path : string) : TFhirMedicationRequestDispenseRequest;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationRequestDispenseRequest.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationRequestDispenseRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationRequestDispenseRequestChild(element : TFhirMedicationRequestDispenseRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'initialFill') then
        element.initialFill := ParseMedicationRequestDispenseRequestInitialFill(child, path+'/initialFill') {b}
      else if (child.localName = 'dispenseInterval') then
        element.dispenseInterval := ParseDuration(child, path+'/dispenseInterval') {b}
      else if (child.localName = 'validityPeriod') then
        element.validityPeriod := ParsePeriod(child, path+'/validityPeriod') {b}
      else if (child.localName = 'numberOfRepeatsAllowed') then
        element.numberOfRepeatsAllowedElement := ParseUnsignedInt(child, path+'/numberOfRepeatsAllowed') {b}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'expectedSupplyDuration') then
        element.expectedSupplyDuration := ParseDuration(child, path+'/expectedSupplyDuration') {b}
      else if (child.localName = 'performer') then
        element.performer := ParseReference{TFhirOrganization}(child, path+'/performer') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationRequestDispenseRequest(xml : TXmlBuilder; name : String; elem : TFhirMedicationRequestDispenseRequest);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationRequestDispenseRequestChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationRequestDispenseRequestChildren(xml : TXmlBuilder; elem : TFhirMedicationRequestDispenseRequest);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationRequestDispenseRequestInitialFill(xml, 'initialFill', elem.initialFill);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'dispenseInterval', elem.dispenseInterval);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'validityPeriod', elem.validityPeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedInt(xml, 'numberOfRepeatsAllowed', elem.numberOfRepeatsAllowedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'expectedSupplyDuration', elem.expectedSupplyDuration);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(xml, 'performer', elem.performer);{x.2a}
end;

function TFHIRXmlParser.ParseMedicationRequestDispenseRequestInitialFill(element : TMXmlElement; path : string) : TFhirMedicationRequestDispenseRequestInitialFill;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationRequestDispenseRequestInitialFill.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationRequestDispenseRequestInitialFillChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationRequestDispenseRequestInitialFillChild(element : TFhirMedicationRequestDispenseRequestInitialFill; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'duration') then
        element.duration := ParseDuration(child, path+'/duration') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationRequestDispenseRequestInitialFill(xml : TXmlBuilder; name : String; elem : TFhirMedicationRequestDispenseRequestInitialFill);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationRequestDispenseRequestInitialFillChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationRequestDispenseRequestInitialFillChildren(xml : TXmlBuilder; elem : TFhirMedicationRequestDispenseRequestInitialFill);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'duration', elem.duration);{x.2a}
end;

function TFHIRXmlParser.ParseMedicationRequestSubstitution(element : TMXmlElement; path : string) : TFhirMedicationRequestSubstitution;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationRequestSubstitution.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationRequestSubstitutionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationRequestSubstitutionChild(element : TFhirMedicationRequestSubstitution; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'allowedCodeableConcept') then
        element.allowed := ParseCodeableConcept(child, path+'/allowedCodeableConcept'){x.3}
      else if (child.localName = 'allowedBoolean') then
        element.allowed := ParseBoolean(child, path+'/allowedBoolean'){x.3}
      else if (child.localName = 'reason') then
        element.reason := ParseCodeableConcept(child, path+'/reason') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationRequestSubstitution(xml : TXmlBuilder; name : String; elem : TFhirMedicationRequestSubstitution);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicationRequestSubstitutionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationRequestSubstitutionChildren(xml : TXmlBuilder; elem : TFhirMedicationRequestSubstitution);
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.allowed is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'allowedCodeableConcept', TFhirCodeableConcept(elem.allowed))
  else if (elem.allowed is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'allowedBoolean', TFhirBoolean(elem.allowed));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'reason', elem.reason);{x.2a}
end;

function TFHIRXmlParser.ParseMedicationRequest(element : TMXmlElement; path : string) : TFhirMedicationRequest;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationRequest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationRequestChild(element : TFhirMedicationRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirMedicationrequestStatusEnum, SYSTEMS_TFhirMedicationrequestStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'statusReason') then
        element.statusReason := ParseCodeableConcept(child, path+'/statusReason') {b}
      else if (child.localName = 'intent') then
        element.intentElement := ParseEnum(CODES_TFhirMedicationrequestIntentEnum, SYSTEMS_TFhirMedicationrequestIntentEnum, path+'/intent', child){1a}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'priority') then
        element.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, path+'/priority', child){1a}
      else if (child.localName = 'doNotPerform') then
        element.doNotPerformElement := ParseBoolean(child, path+'/doNotPerform') {b}
      else if (child.localName = 'reportedReference') then
        element.reported := ParseReference(child, path+'/reportedReference') {a}
      else if (child.localName = 'reportedBoolean') then
        element.reported := ParseBoolean(child, path+'/reportedBoolean'){x.3}
      else if (child.localName = 'medicationCodeableConcept') then
        element.medication := ParseCodeableConcept(child, path+'/medicationCodeableConcept'){x.3}
      else if (child.localName = 'medicationReference') then
        element.medication := ParseReference(child, path+'/medicationReference') {a}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'supportingInformation') then
        element.supportingInformationList.Add(ParseReference{TFhirReference}(child, path+'/supportingInformation')){y.2}
      else if (child.localName = 'authoredOn') then
        element.authoredOnElement := ParseDateTime(child, path+'/authoredOn') {b}
      else if (child.localName = 'requester') then
        element.requester := ParseReference{TFhirPractitioner}(child, path+'/requester') {b}
      else if (child.localName = 'performer') then
        element.performer := ParseReference{TFhirPractitioner}(child, path+'/performer') {b}
      else if (child.localName = 'performerType') then
        element.performerType := ParseCodeableConcept(child, path+'/performerType') {b}
      else if (child.localName = 'recorder') then
        element.recorder := ParseReference{TFhirPractitioner}(child, path+'/recorder') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'instantiatesCanonical') then
        element.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')){y.2}
      else if (child.localName = 'instantiatesUri') then
        element.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirCarePlan}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'groupIdentifier') then
        element.groupIdentifier := ParseIdentifier(child, path+'/groupIdentifier') {b}
      else if (child.localName = 'courseOfTherapyType') then
        element.courseOfTherapyType := ParseCodeableConcept(child, path+'/courseOfTherapyType') {b}
      else if (child.localName = 'insurance') then
        element.insuranceList.Add(ParseReference{TFhirCoverage}(child, path+'/insurance')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'dosageInstruction') then
        element.dosageInstructionList.Add(ParseDosage(child, path+'/dosageInstruction')){y.2}
      else if (child.localName = 'dispenseRequest') then
        element.dispenseRequest := ParseMedicationRequestDispenseRequest(child, path+'/dispenseRequest') {b}
      else if (child.localName = 'substitution') then
        element.substitution := ParseMedicationRequestSubstitution(child, path+'/substitution') {b}
      else if (child.localName = 'priorPrescription') then
        element.priorPrescription := ParseReference{TFhirMedicationRequest}(child, path+'/priorPrescription') {b}
      else if (child.localName = 'detectedIssue') then
        element.detectedIssueList.Add(ParseReference{TFhirDetectedIssue}(child, path+'/detectedIssue')){y.2}
      else if (child.localName = 'eventHistory') then
        element.eventHistoryList.Add(ParseReference{TFhirProvenance}(child, path+'/eventHistory')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationRequest(xml : TXmlBuilder; name : String; elem : TFhirMedicationRequest);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicationRequestChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationRequestChildren(xml : TXmlBuilder; elem : TFhirMedicationRequest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirMedicationrequestStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('statusReason') then
    ComposeCodeableConcept(xml, 'statusReason', elem.statusReason);{x.2a}
  ComposeEnum(xml, 'intent', elem.IntentElement, CODES_TFhirMedicationrequestIntentEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnum(xml, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('doNotPerform') then
    ComposeBoolean(xml, 'doNotPerform', elem.doNotPerformElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.reported is TFhirReference) {2} then
    ComposeReference(xml, 'reportedReference', TFhirReference(elem.reported))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.reported is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'reportedBoolean', TFhirBoolean(elem.reported));
  if (elem.medication is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication))
  else if (elem.medication is TFhirReference) {2} then
    ComposeReference(xml, 'medicationReference', TFhirReference(elem.medication));
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInformation') then
    for i := 0 to elem.supportingInformationList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'supportingInformation', elem.supportingInformationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTime(xml, 'authoredOn', elem.authoredOnElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requester') then
    ComposeReference{TFhirPractitioner}(xml, 'requester', elem.requester);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('performer') then
    ComposeReference{TFhirPractitioner}(xml, 'performer', elem.performer);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performerType') then
    ComposeCodeableConcept(xml, 'performerType', elem.performerType);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('recorder') then
    ComposeReference{TFhirPractitioner}(xml, 'recorder', elem.recorder);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesCanonical') then
    for i := 0 to elem.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', elem.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesUri') then
    for i := 0 to elem.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', elem.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirCarePlan}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('groupIdentifier') then
    ComposeIdentifier(xml, 'groupIdentifier', elem.groupIdentifier);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('courseOfTherapyType') then
    ComposeCodeableConcept(xml, 'courseOfTherapyType', elem.courseOfTherapyType);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('insurance') then
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeReference{TFhirCoverage}(xml, 'insurance', elem.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('dosageInstruction') then
    for i := 0 to elem.dosageInstructionList.Count - 1 do
      ComposeDosage(xml, 'dosageInstruction', elem.dosageInstructionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('dispenseRequest') then
    ComposeMedicationRequestDispenseRequest(xml, 'dispenseRequest', elem.dispenseRequest);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('substitution') then
    ComposeMedicationRequestSubstitution(xml, 'substitution', elem.substitution);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('priorPrescription') then
    ComposeReference{TFhirMedicationRequest}(xml, 'priorPrescription', elem.priorPrescription);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('detectedIssue') then
    for i := 0 to elem.detectedIssueList.Count - 1 do
      ComposeReference{TFhirDetectedIssue}(xml, 'detectedIssue', elem.detectedIssueList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('eventHistory') then
    for i := 0 to elem.eventHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(xml, 'eventHistory', elem.eventHistoryList[i]);
end;

{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
function TFHIRXmlParser.ParseMedicationStatement(element : TMXmlElement; path : string) : TFhirMedicationStatement;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationStatement.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationStatementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationStatementChild(element : TFhirMedicationStatement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirMedicationRequest}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'partOf') then
        element.partOfList.Add(ParseReference{TFhirMedicationAdministration}(child, path+'/partOf')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirMedicationStatementStatusEnum, SYSTEMS_TFhirMedicationStatementStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'statusReason') then
        element.statusReasonList.Add(ParseCodeableConcept(child, path+'/statusReason')){y.2}
      else if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'medicationCodeableConcept') then
        element.medication := ParseCodeableConcept(child, path+'/medicationCodeableConcept'){x.3}
      else if (child.localName = 'medicationReference') then
        element.medication := ParseReference(child, path+'/medicationReference') {a}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'context') then
        element.context := ParseReference{TFhirEncounter}(child, path+'/context') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effective := ParsePeriod(child, path+'/effectivePeriod'){x.3}
      else if (child.localName = 'effectiveDateTime') then
        element.effective := ParseDateTime(child, path+'/effectiveDateTime'){x.3}
      else if (child.localName = 'dateAsserted') then
        element.dateAssertedElement := ParseDateTime(child, path+'/dateAsserted') {b}
      else if (child.localName = 'informationSource') then
        element.informationSource := ParseReference{TFhirPatient}(child, path+'/informationSource') {b}
      else if (child.localName = 'derivedFrom') then
        element.derivedFromList.Add(ParseReference{TFhirReference}(child, path+'/derivedFrom')){y.2}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'dosage') then
        element.dosageList.Add(ParseDosage(child, path+'/dosage')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationStatement(xml : TXmlBuilder; name : String; elem : TFhirMedicationStatement);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicationStatementChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicationStatementChildren(xml : TXmlBuilder; elem : TFhirMedicationStatement);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirMedicationRequest}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') then
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirMedicationAdministration}(xml, 'partOf', elem.partOfList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirMedicationStatementStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('statusReason') then
    for i := 0 to elem.statusReasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'statusReason', elem.statusReasonList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  if (elem.medication is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication))
  else if (elem.medication is TFhirReference) {2} then
    ComposeReference(xml, 'medicationReference', TFhirReference(elem.medication));
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    ComposeReference{TFhirEncounter}(xml, 'context', elem.context);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) {6} then
    ComposePeriod(xml, 'effectivePeriod', TFhirPeriod(elem.effective))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'effectiveDateTime', TFhirDateTime(elem.effective));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dateAsserted') then
    ComposeDateTime(xml, 'dateAsserted', elem.dateAssertedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('informationSource') then
    ComposeReference{TFhirPatient}(xml, 'informationSource', elem.informationSource);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('derivedFrom') then
    for i := 0 to elem.derivedFromList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'derivedFrom', elem.derivedFromList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('dosage') then
    for i := 0 to elem.dosageList.Count - 1 do
      ComposeDosage(xml, 'dosage', elem.dosageList[i]);
end;

{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCT}
function TFHIRXmlParser.ParseMedicinalProductName(element : TMXmlElement; path : string) : TFhirMedicinalProductName;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductName.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductNameChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductNameChild(element : TFhirMedicinalProductName; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'productName') then
        element.productNameElement := ParseString(child, path+'/productName') {b}
      else if (child.localName = 'namePart') then
        element.namePartList.Add(ParseMedicinalProductNameNamePart(child, path+'/namePart')){y.2}
      else if (child.localName = 'countryLanguage') then
        element.countryLanguageList.Add(ParseMedicinalProductNameCountryLanguage(child, path+'/countryLanguage')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductName(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductName);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductNameChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductNameChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductName);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'productName', elem.productNameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.namePartList.Count - 1 do
      ComposeMedicinalProductNameNamePart(xml, 'namePart', elem.namePartList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.countryLanguageList.Count - 1 do
      ComposeMedicinalProductNameCountryLanguage(xml, 'countryLanguage', elem.countryLanguageList[i]);
end;

function TFHIRXmlParser.ParseMedicinalProductNameNamePart(element : TMXmlElement; path : string) : TFhirMedicinalProductNameNamePart;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductNameNamePart.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductNameNamePartChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductNameNamePartChild(element : TFhirMedicinalProductNameNamePart; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'part') then
        element.partElement := ParseString(child, path+'/part') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCoding(child, path+'/type') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductNameNamePart(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductNameNamePart);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductNameNamePartChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductNameNamePartChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductNameNamePart);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'part', elem.partElement);{x.2b}
  ComposeCoding(xml, 'type', elem.type_);{x.2a}
end;

function TFHIRXmlParser.ParseMedicinalProductNameCountryLanguage(element : TMXmlElement; path : string) : TFhirMedicinalProductNameCountryLanguage;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductNameCountryLanguage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductNameCountryLanguageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductNameCountryLanguageChild(element : TFhirMedicinalProductNameCountryLanguage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'country') then
        element.country := ParseCodeableConcept(child, path+'/country') {b}
      else if (child.localName = 'jurisdiction') then
        element.jurisdiction := ParseCodeableConcept(child, path+'/jurisdiction') {b}
      else if (child.localName = 'language') then
        element.language := ParseCodeableConcept(child, path+'/language') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductNameCountryLanguage(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductNameCountryLanguage);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductNameCountryLanguageChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductNameCountryLanguageChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductNameCountryLanguage);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'country', elem.country);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdiction);{x.2a}
  ComposeCodeableConcept(xml, 'language', elem.language);{x.2a}
end;

function TFHIRXmlParser.ParseMedicinalProductManufacturingBusinessOperation(element : TMXmlElement; path : string) : TFhirMedicinalProductManufacturingBusinessOperation;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductManufacturingBusinessOperation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductManufacturingBusinessOperationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductManufacturingBusinessOperationChild(element : TFhirMedicinalProductManufacturingBusinessOperation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'operationType') then
        element.operationType := ParseCodeableConcept(child, path+'/operationType') {b}
      else if (child.localName = 'authorisationReferenceNumber') then
        element.authorisationReferenceNumber := ParseIdentifier(child, path+'/authorisationReferenceNumber') {b}
      else if (child.localName = 'effectiveDate') then
        element.effectiveDateElement := ParseDateTime(child, path+'/effectiveDate') {b}
      else if (child.localName = 'confidentialityIndicator') then
        element.confidentialityIndicator := ParseCodeableConcept(child, path+'/confidentialityIndicator') {b}
      else if (child.localName = 'manufacturer') then
        element.manufacturerList.Add(ParseReference{TFhirOrganization}(child, path+'/manufacturer')){y.2}
      else if (child.localName = 'regulator') then
        element.regulator := ParseReference{TFhirOrganization}(child, path+'/regulator') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductManufacturingBusinessOperation(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductManufacturingBusinessOperation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductManufacturingBusinessOperationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductManufacturingBusinessOperationChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductManufacturingBusinessOperation);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'operationType', elem.operationType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'authorisationReferenceNumber', elem.authorisationReferenceNumber);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'effectiveDate', elem.effectiveDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'confidentialityIndicator', elem.confidentialityIndicator);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.manufacturerList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'manufacturer', elem.manufacturerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(xml, 'regulator', elem.regulator);{x.2a}
end;

function TFHIRXmlParser.ParseMedicinalProductSpecialDesignation(element : TMXmlElement; path : string) : TFhirMedicinalProductSpecialDesignation;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductSpecialDesignation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductSpecialDesignationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductSpecialDesignationChild(element : TFhirMedicinalProductSpecialDesignation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'intendedUse') then
        element.intendedUse := ParseCodeableConcept(child, path+'/intendedUse') {b}
      else if (child.localName = 'indicationCodeableConcept') then
        element.indication := ParseCodeableConcept(child, path+'/indicationCodeableConcept'){x.3}
      else if (child.localName = 'indicationReference') then
        element.indication := ParseReference(child, path+'/indicationReference') {a}
      else if (child.localName = 'status') then
        element.status := ParseCodeableConcept(child, path+'/status') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'species') then
        element.species := ParseCodeableConcept(child, path+'/species') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductSpecialDesignation(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductSpecialDesignation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductSpecialDesignationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductSpecialDesignationChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductSpecialDesignation);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'intendedUse', elem.intendedUse);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.indication is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'indicationCodeableConcept', TFhirCodeableConcept(elem.indication))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.indication is TFhirReference) {2} then
    ComposeReference(xml, 'indicationReference', TFhirReference(elem.indication));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', elem.status);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'species', elem.species);{x.2a}
end;

function TFHIRXmlParser.ParseMedicinalProduct(element : TMXmlElement; path : string) : TFhirMedicinalProduct;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProduct.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductChild(element : TFhirMedicinalProduct; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'domain') then
        element.domain := ParseCoding(child, path+'/domain') {b}
      else if (child.localName = 'combinedPharmaceuticalDoseForm') then
        element.combinedPharmaceuticalDoseForm := ParseCodeableConcept(child, path+'/combinedPharmaceuticalDoseForm') {b}
      else if (child.localName = 'legalStatusOfSupply') then
        element.legalStatusOfSupply := ParseCodeableConcept(child, path+'/legalStatusOfSupply') {b}
      else if (child.localName = 'additionalMonitoringIndicator') then
        element.additionalMonitoringIndicator := ParseCodeableConcept(child, path+'/additionalMonitoringIndicator') {b}
      else if (child.localName = 'specialMeasures') then
        element.specialMeasuresList.Add(ParseString(child, path+'/specialMeasures')){y.2}
      else if (child.localName = 'paediatricUseIndicator') then
        element.paediatricUseIndicator := ParseCodeableConcept(child, path+'/paediatricUseIndicator') {b}
      else if (child.localName = 'productClassification') then
        element.productClassificationList.Add(ParseCodeableConcept(child, path+'/productClassification')){y.2}
      else if (child.localName = 'marketingStatus') then
        element.marketingStatusList.Add(ParseMarketingStatus(child, path+'/marketingStatus')){y.2}
      else if (child.localName = 'pharmaceuticalProduct') then
        element.pharmaceuticalProductList.Add(ParseReference{TFhirMedicinalProductPharmaceutical}(child, path+'/pharmaceuticalProduct')){y.2}
      else if (child.localName = 'packagedMedicinalProduct') then
        element.packagedMedicinalProductList.Add(ParseReference{TFhirMedicinalProductPackaged}(child, path+'/packagedMedicinalProduct')){y.2}
      else if (child.localName = 'attachedDocument') then
        element.attachedDocumentList.Add(ParseReference{TFhirDocumentReference}(child, path+'/attachedDocument')){y.2}
      else if (child.localName = 'masterFile') then
        element.masterFileList.Add(ParseReference{TFhirDocumentReference}(child, path+'/masterFile')){y.2}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseReference{TFhirOrganization}(child, path+'/contact')){y.2}
      else if (child.localName = 'clinicalTrial') then
        element.clinicalTrialList.Add(ParseReference{TFhirResearchStudy}(child, path+'/clinicalTrial')){y.2}
      else if (child.localName = 'name') then
        element.nameList.Add(ParseMedicinalProductName(child, path+'/name')){y.2}
      else if (child.localName = 'crossReference') then
        element.crossReferenceList.Add(ParseIdentifier(child, path+'/crossReference')){y.2}
      else if (child.localName = 'manufacturingBusinessOperation') then
        element.manufacturingBusinessOperationList.Add(ParseMedicinalProductManufacturingBusinessOperation(child, path+'/manufacturingBusinessOperation')){y.2}
      else if (child.localName = 'specialDesignation') then
        element.specialDesignationList.Add(ParseMedicinalProductSpecialDesignation(child, path+'/specialDesignation')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProduct(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProduct);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductChildren(xml : TXmlBuilder; elem : TFhirMedicinalProduct);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('domain') then
    ComposeCoding(xml, 'domain', elem.domain);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('combinedPharmaceuticalDoseForm') then
    ComposeCodeableConcept(xml, 'combinedPharmaceuticalDoseForm', elem.combinedPharmaceuticalDoseForm);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('legalStatusOfSupply') then
    ComposeCodeableConcept(xml, 'legalStatusOfSupply', elem.legalStatusOfSupply);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('additionalMonitoringIndicator') then
    ComposeCodeableConcept(xml, 'additionalMonitoringIndicator', elem.additionalMonitoringIndicator);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specialMeasures') then
    for i := 0 to elem.specialMeasuresList.Count - 1 do
      ComposeString(xml, 'specialMeasures', elem.specialMeasuresList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('paediatricUseIndicator') then
    ComposeCodeableConcept(xml, 'paediatricUseIndicator', elem.paediatricUseIndicator);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('productClassification') then
    for i := 0 to elem.productClassificationList.Count - 1 do
      ComposeCodeableConcept(xml, 'productClassification', elem.productClassificationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('marketingStatus') then
    for i := 0 to elem.marketingStatusList.Count - 1 do
      ComposeMarketingStatus(xml, 'marketingStatus', elem.marketingStatusList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('pharmaceuticalProduct') then
    for i := 0 to elem.pharmaceuticalProductList.Count - 1 do
      ComposeReference{TFhirMedicinalProductPharmaceutical}(xml, 'pharmaceuticalProduct', elem.pharmaceuticalProductList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('packagedMedicinalProduct') then
    for i := 0 to elem.packagedMedicinalProductList.Count - 1 do
      ComposeReference{TFhirMedicinalProductPackaged}(xml, 'packagedMedicinalProduct', elem.packagedMedicinalProductList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('attachedDocument') then
    for i := 0 to elem.attachedDocumentList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(xml, 'attachedDocument', elem.attachedDocumentList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('masterFile') then
    for i := 0 to elem.masterFileList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(xml, 'masterFile', elem.masterFileList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('clinicalTrial') then
    for i := 0 to elem.clinicalTrialList.Count - 1 do
      ComposeReference{TFhirResearchStudy}(xml, 'clinicalTrial', elem.clinicalTrialList[i]);
  for i := 0 to elem.nameList.Count - 1 do
      ComposeMedicinalProductName(xml, 'name', elem.nameList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('crossReference') then
    for i := 0 to elem.crossReferenceList.Count - 1 do
      ComposeIdentifier(xml, 'crossReference', elem.crossReferenceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('manufacturingBusinessOperation') then
    for i := 0 to elem.manufacturingBusinessOperationList.Count - 1 do
      ComposeMedicinalProductManufacturingBusinessOperation(xml, 'manufacturingBusinessOperation', elem.manufacturingBusinessOperationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specialDesignation') then
    for i := 0 to elem.specialDesignationList.Count - 1 do
      ComposeMedicinalProductSpecialDesignation(xml, 'specialDesignation', elem.specialDesignationList[i]);
end;

{$ENDIF FHIR_MEDICINALPRODUCT}
{$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
function TFHIRXmlParser.ParseMedicinalProductAuthorizationJurisdictionalAuthorization(element : TMXmlElement; path : string) : TFhirMedicinalProductAuthorizationJurisdictionalAuthorization;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductAuthorizationJurisdictionalAuthorization.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductAuthorizationJurisdictionalAuthorizationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductAuthorizationJurisdictionalAuthorizationChild(element : TFhirMedicinalProductAuthorizationJurisdictionalAuthorization; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'country') then
        element.country := ParseCodeableConcept(child, path+'/country') {b}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'legalStatusOfSupply') then
        element.legalStatusOfSupply := ParseCodeableConcept(child, path+'/legalStatusOfSupply') {b}
      else if (child.localName = 'validityPeriod') then
        element.validityPeriod := ParsePeriod(child, path+'/validityPeriod') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductAuthorizationJurisdictionalAuthorization(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductAuthorizationJurisdictionalAuthorization);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductAuthorizationJurisdictionalAuthorizationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductAuthorizationJurisdictionalAuthorizationChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductAuthorizationJurisdictionalAuthorization);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'country', elem.country);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'legalStatusOfSupply', elem.legalStatusOfSupply);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'validityPeriod', elem.validityPeriod);{x.2a}
end;

function TFHIRXmlParser.ParseMedicinalProductAuthorizationProcedure(element : TMXmlElement; path : string) : TFhirMedicinalProductAuthorizationProcedure;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductAuthorizationProcedure.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductAuthorizationProcedureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductAuthorizationProcedureChild(element : TFhirMedicinalProductAuthorizationProcedure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'datePeriod') then
        element.date := ParsePeriod(child, path+'/datePeriod'){x.3}
      else if (child.localName = 'dateDateTime') then
        element.date := ParseDateTime(child, path+'/dateDateTime'){x.3}
      else if (child.localName = 'application') then
        element.applicationList.Add(ParseMedicinalProductAuthorizationProcedure(child, path+'/application')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductAuthorizationProcedure(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductAuthorizationProcedure);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductAuthorizationProcedureChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductAuthorizationProcedureChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductAuthorizationProcedure);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.date is TFhirPeriod) {6} then
    ComposePeriod(xml, 'datePeriod', TFhirPeriod(elem.date))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.date is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'dateDateTime', TFhirDateTime(elem.date));
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.applicationList.Count - 1 do
      ComposeMedicinalProductAuthorizationProcedure(xml, 'application', elem.applicationList[i]);
end;

function TFHIRXmlParser.ParseMedicinalProductAuthorization(element : TMXmlElement; path : string) : TFhirMedicinalProductAuthorization;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductAuthorization.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductAuthorizationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductAuthorizationChild(element : TFhirMedicinalProductAuthorization; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirMedicinalProduct}(child, path+'/subject') {b}
      else if (child.localName = 'country') then
        element.countryList.Add(ParseCodeableConcept(child, path+'/country')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'status') then
        element.status := ParseCodeableConcept(child, path+'/status') {b}
      else if (child.localName = 'statusDate') then
        element.statusDateElement := ParseDateTime(child, path+'/statusDate') {b}
      else if (child.localName = 'restoreDate') then
        element.restoreDateElement := ParseDateTime(child, path+'/restoreDate') {b}
      else if (child.localName = 'validityPeriod') then
        element.validityPeriod := ParsePeriod(child, path+'/validityPeriod') {b}
      else if (child.localName = 'dataExclusivityPeriod') then
        element.dataExclusivityPeriod := ParsePeriod(child, path+'/dataExclusivityPeriod') {b}
      else if (child.localName = 'dateOfFirstAuthorization') then
        element.dateOfFirstAuthorizationElement := ParseDateTime(child, path+'/dateOfFirstAuthorization') {b}
      else if (child.localName = 'internationalBirthDate') then
        element.internationalBirthDateElement := ParseDateTime(child, path+'/internationalBirthDate') {b}
      else if (child.localName = 'legalBasis') then
        element.legalBasis := ParseCodeableConcept(child, path+'/legalBasis') {b}
      else if (child.localName = 'jurisdictionalAuthorization') then
        element.jurisdictionalAuthorizationList.Add(ParseMedicinalProductAuthorizationJurisdictionalAuthorization(child, path+'/jurisdictionalAuthorization')){y.2}
      else if (child.localName = 'holder') then
        element.holder := ParseReference{TFhirOrganization}(child, path+'/holder') {b}
      else if (child.localName = 'regulator') then
        element.regulator := ParseReference{TFhirOrganization}(child, path+'/regulator') {b}
      else if (child.localName = 'procedure') then
        element.procedure_ := ParseMedicinalProductAuthorizationProcedure(child, path+'/procedure') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductAuthorization(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductAuthorization);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductAuthorizationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductAuthorizationChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductAuthorization);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirMedicinalProduct}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('country') then
    for i := 0 to elem.countryList.Count - 1 do
      ComposeCodeableConcept(xml, 'country', elem.countryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeCodeableConcept(xml, 'status', elem.status);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('statusDate') then
    ComposeDateTime(xml, 'statusDate', elem.statusDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('restoreDate') then
    ComposeDateTime(xml, 'restoreDate', elem.restoreDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('validityPeriod') then
    ComposePeriod(xml, 'validityPeriod', elem.validityPeriod);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dataExclusivityPeriod') then
    ComposePeriod(xml, 'dataExclusivityPeriod', elem.dataExclusivityPeriod);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('dateOfFirstAuthorization') then
    ComposeDateTime(xml, 'dateOfFirstAuthorization', elem.dateOfFirstAuthorizationElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('internationalBirthDate') then
    ComposeDateTime(xml, 'internationalBirthDate', elem.internationalBirthDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('legalBasis') then
    ComposeCodeableConcept(xml, 'legalBasis', elem.legalBasis);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdictionalAuthorization') then
    for i := 0 to elem.jurisdictionalAuthorizationList.Count - 1 do
      ComposeMedicinalProductAuthorizationJurisdictionalAuthorization(xml, 'jurisdictionalAuthorization', elem.jurisdictionalAuthorizationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('holder') then
    ComposeReference{TFhirOrganization}(xml, 'holder', elem.holder);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('regulator') then
    ComposeReference{TFhirOrganization}(xml, 'regulator', elem.regulator);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('procedure_') then
    ComposeMedicinalProductAuthorizationProcedure(xml, 'procedure', elem.procedure_);{x.2a}
end;

{$ENDIF FHIR_MEDICINALPRODUCTAUTHORIZATION}
{$IFDEF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
function TFHIRXmlParser.ParseMedicinalProductContraindicationOtherTherapy(element : TMXmlElement; path : string) : TFhirMedicinalProductContraindicationOtherTherapy;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductContraindicationOtherTherapy.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductContraindicationOtherTherapyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductContraindicationOtherTherapyChild(element : TFhirMedicinalProductContraindicationOtherTherapy; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'therapyRelationshipType') then
        element.therapyRelationshipType := ParseCodeableConcept(child, path+'/therapyRelationshipType') {b}
      else if (child.localName = 'medicationCodeableConcept') then
        element.medication := ParseCodeableConcept(child, path+'/medicationCodeableConcept'){x.3}
      else if (child.localName = 'medicationReference') then
        element.medication := ParseReference(child, path+'/medicationReference') {a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductContraindicationOtherTherapy(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductContraindicationOtherTherapy);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductContraindicationOtherTherapyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductContraindicationOtherTherapyChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductContraindicationOtherTherapy);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'therapyRelationshipType', elem.therapyRelationshipType);{x.2a}
  if (elem.medication is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication))
  else if (elem.medication is TFhirReference) {2} then
    ComposeReference(xml, 'medicationReference', TFhirReference(elem.medication));
end;

function TFHIRXmlParser.ParseMedicinalProductContraindication(element : TMXmlElement; path : string) : TFhirMedicinalProductContraindication;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductContraindication.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductContraindicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductContraindicationChild(element : TFhirMedicinalProductContraindication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'subject') then
        element.subjectList.Add(ParseReference{TFhirMedicinalProduct}(child, path+'/subject')){y.2}
      else if (child.localName = 'disease') then
        element.disease := ParseCodeableConcept(child, path+'/disease') {b}
      else if (child.localName = 'diseaseStatus') then
        element.diseaseStatus := ParseCodeableConcept(child, path+'/diseaseStatus') {b}
      else if (child.localName = 'comorbidity') then
        element.comorbidityList.Add(ParseCodeableConcept(child, path+'/comorbidity')){y.2}
      else if (child.localName = 'therapeuticIndication') then
        element.therapeuticIndicationList.Add(ParseReference{TFhirMedicinalProductIndication}(child, path+'/therapeuticIndication')){y.2}
      else if (child.localName = 'otherTherapy') then
        element.otherTherapyList.Add(ParseMedicinalProductContraindicationOtherTherapy(child, path+'/otherTherapy')){y.2}
      else if (child.localName = 'population') then
        element.populationList.Add(ParsePopulation(child, path+'/population')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductContraindication(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductContraindication);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductContraindicationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductContraindicationChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductContraindication);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    for i := 0 to elem.subjectList.Count - 1 do
      ComposeReference{TFhirMedicinalProduct}(xml, 'subject', elem.subjectList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('disease') then
    ComposeCodeableConcept(xml, 'disease', elem.disease);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('diseaseStatus') then
    ComposeCodeableConcept(xml, 'diseaseStatus', elem.diseaseStatus);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('comorbidity') then
    for i := 0 to elem.comorbidityList.Count - 1 do
      ComposeCodeableConcept(xml, 'comorbidity', elem.comorbidityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('therapeuticIndication') then
    for i := 0 to elem.therapeuticIndicationList.Count - 1 do
      ComposeReference{TFhirMedicinalProductIndication}(xml, 'therapeuticIndication', elem.therapeuticIndicationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('otherTherapy') then
    for i := 0 to elem.otherTherapyList.Count - 1 do
      ComposeMedicinalProductContraindicationOtherTherapy(xml, 'otherTherapy', elem.otherTherapyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('population') then
    for i := 0 to elem.populationList.Count - 1 do
      ComposePopulation(xml, 'population', elem.populationList[i]);
end;

{$ENDIF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
{$IFDEF FHIR_MEDICINALPRODUCTINDICATION}
function TFHIRXmlParser.ParseMedicinalProductIndicationOtherTherapy(element : TMXmlElement; path : string) : TFhirMedicinalProductIndicationOtherTherapy;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductIndicationOtherTherapy.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductIndicationOtherTherapyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductIndicationOtherTherapyChild(element : TFhirMedicinalProductIndicationOtherTherapy; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'therapyRelationshipType') then
        element.therapyRelationshipType := ParseCodeableConcept(child, path+'/therapyRelationshipType') {b}
      else if (child.localName = 'medicationCodeableConcept') then
        element.medication := ParseCodeableConcept(child, path+'/medicationCodeableConcept'){x.3}
      else if (child.localName = 'medicationReference') then
        element.medication := ParseReference(child, path+'/medicationReference') {a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductIndicationOtherTherapy(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductIndicationOtherTherapy);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductIndicationOtherTherapyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductIndicationOtherTherapyChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductIndicationOtherTherapy);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'therapyRelationshipType', elem.therapyRelationshipType);{x.2a}
  if (elem.medication is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'medicationCodeableConcept', TFhirCodeableConcept(elem.medication))
  else if (elem.medication is TFhirReference) {2} then
    ComposeReference(xml, 'medicationReference', TFhirReference(elem.medication));
end;

function TFHIRXmlParser.ParseMedicinalProductIndication(element : TMXmlElement; path : string) : TFhirMedicinalProductIndication;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductIndication.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductIndicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductIndicationChild(element : TFhirMedicinalProductIndication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'subject') then
        element.subjectList.Add(ParseReference{TFhirMedicinalProduct}(child, path+'/subject')){y.2}
      else if (child.localName = 'diseaseSymptomProcedure') then
        element.diseaseSymptomProcedure := ParseCodeableConcept(child, path+'/diseaseSymptomProcedure') {b}
      else if (child.localName = 'diseaseStatus') then
        element.diseaseStatus := ParseCodeableConcept(child, path+'/diseaseStatus') {b}
      else if (child.localName = 'comorbidity') then
        element.comorbidityList.Add(ParseCodeableConcept(child, path+'/comorbidity')){y.2}
      else if (child.localName = 'intendedEffect') then
        element.intendedEffect := ParseCodeableConcept(child, path+'/intendedEffect') {b}
      else if (child.localName = 'duration') then
        element.duration := ParseQuantity(child, path+'/duration') {b}
      else if (child.localName = 'otherTherapy') then
        element.otherTherapyList.Add(ParseMedicinalProductIndicationOtherTherapy(child, path+'/otherTherapy')){y.2}
      else if (child.localName = 'undesirableEffect') then
        element.undesirableEffectList.Add(ParseReference{TFhirMedicinalProductUndesirableEffect}(child, path+'/undesirableEffect')){y.2}
      else if (child.localName = 'population') then
        element.populationList.Add(ParsePopulation(child, path+'/population')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductIndication(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductIndication);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductIndicationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductIndicationChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductIndication);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    for i := 0 to elem.subjectList.Count - 1 do
      ComposeReference{TFhirMedicinalProduct}(xml, 'subject', elem.subjectList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('diseaseSymptomProcedure') then
    ComposeCodeableConcept(xml, 'diseaseSymptomProcedure', elem.diseaseSymptomProcedure);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('diseaseStatus') then
    ComposeCodeableConcept(xml, 'diseaseStatus', elem.diseaseStatus);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('comorbidity') then
    for i := 0 to elem.comorbidityList.Count - 1 do
      ComposeCodeableConcept(xml, 'comorbidity', elem.comorbidityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('intendedEffect') then
    ComposeCodeableConcept(xml, 'intendedEffect', elem.intendedEffect);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('duration') then
    ComposeQuantity(xml, 'duration', elem.duration);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('otherTherapy') then
    for i := 0 to elem.otherTherapyList.Count - 1 do
      ComposeMedicinalProductIndicationOtherTherapy(xml, 'otherTherapy', elem.otherTherapyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('undesirableEffect') then
    for i := 0 to elem.undesirableEffectList.Count - 1 do
      ComposeReference{TFhirMedicinalProductUndesirableEffect}(xml, 'undesirableEffect', elem.undesirableEffectList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('population') then
    for i := 0 to elem.populationList.Count - 1 do
      ComposePopulation(xml, 'population', elem.populationList[i]);
end;

{$ENDIF FHIR_MEDICINALPRODUCTINDICATION}
{$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
function TFHIRXmlParser.ParseMedicinalProductIngredientSpecifiedSubstance(element : TMXmlElement; path : string) : TFhirMedicinalProductIngredientSpecifiedSubstance;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductIngredientSpecifiedSubstance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductIngredientSpecifiedSubstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductIngredientSpecifiedSubstanceChild(element : TFhirMedicinalProductIngredientSpecifiedSubstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'group') then
        element.group := ParseCodeableConcept(child, path+'/group') {b}
      else if (child.localName = 'confidentiality') then
        element.confidentiality := ParseCodeableConcept(child, path+'/confidentiality') {b}
      else if (child.localName = 'strength') then
        element.strengthList.Add(ParseMedicinalProductIngredientSpecifiedSubstanceStrength(child, path+'/strength')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductIngredientSpecifiedSubstance(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductIngredientSpecifiedSubstance);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductIngredientSpecifiedSubstanceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductIngredientSpecifiedSubstanceChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductIngredientSpecifiedSubstance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  ComposeCodeableConcept(xml, 'group', elem.group);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'confidentiality', elem.confidentiality);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.strengthList.Count - 1 do
      ComposeMedicinalProductIngredientSpecifiedSubstanceStrength(xml, 'strength', elem.strengthList[i]);
end;

function TFHIRXmlParser.ParseMedicinalProductIngredientSpecifiedSubstanceStrength(element : TMXmlElement; path : string) : TFhirMedicinalProductIngredientSpecifiedSubstanceStrength;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductIngredientSpecifiedSubstanceStrength.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductIngredientSpecifiedSubstanceStrengthChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductIngredientSpecifiedSubstanceStrengthChild(element : TFhirMedicinalProductIngredientSpecifiedSubstanceStrength; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'presentation') then
        element.presentation := ParseRatio(child, path+'/presentation') {b}
      else if (child.localName = 'presentationLowLimit') then
        element.presentationLowLimit := ParseRatio(child, path+'/presentationLowLimit') {b}
      else if (child.localName = 'concentration') then
        element.concentration := ParseRatio(child, path+'/concentration') {b}
      else if (child.localName = 'concentrationLowLimit') then
        element.concentrationLowLimit := ParseRatio(child, path+'/concentrationLowLimit') {b}
      else if (child.localName = 'measurementPoint') then
        element.measurementPointElement := ParseString(child, path+'/measurementPoint') {b}
      else if (child.localName = 'country') then
        element.countryList.Add(ParseCodeableConcept(child, path+'/country')){y.2}
      else if (child.localName = 'referenceStrength') then
        element.referenceStrengthList.Add(ParseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(child, path+'/referenceStrength')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductIngredientSpecifiedSubstanceStrength(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductIngredientSpecifiedSubstanceStrength);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductIngredientSpecifiedSubstanceStrengthChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductIngredientSpecifiedSubstanceStrengthChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductIngredientSpecifiedSubstanceStrength);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeRatio(xml, 'presentation', elem.presentation);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'presentationLowLimit', elem.presentationLowLimit);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'concentration', elem.concentration);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'concentrationLowLimit', elem.concentrationLowLimit);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'measurementPoint', elem.measurementPointElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.countryList.Count - 1 do
      ComposeCodeableConcept(xml, 'country', elem.countryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.referenceStrengthList.Count - 1 do
      ComposeMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(xml, 'referenceStrength', elem.referenceStrengthList[i]);
end;

function TFHIRXmlParser.ParseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(element : TMXmlElement; path : string) : TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthChild(element : TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'substance') then
        element.substance := ParseCodeableConcept(child, path+'/substance') {b}
      else if (child.localName = 'strength') then
        element.strength := ParseRatio(child, path+'/strength') {b}
      else if (child.localName = 'strengthLowLimit') then
        element.strengthLowLimit := ParseRatio(child, path+'/strengthLowLimit') {b}
      else if (child.localName = 'measurementPoint') then
        element.measurementPointElement := ParseString(child, path+'/measurementPoint') {b}
      else if (child.localName = 'country') then
        element.countryList.Add(ParseCodeableConcept(child, path+'/country')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrengthChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'substance', elem.substance);{x.2a}
  ComposeRatio(xml, 'strength', elem.strength);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'strengthLowLimit', elem.strengthLowLimit);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'measurementPoint', elem.measurementPointElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.countryList.Count - 1 do
      ComposeCodeableConcept(xml, 'country', elem.countryList[i]);
end;

function TFHIRXmlParser.ParseMedicinalProductIngredientSubstance(element : TMXmlElement; path : string) : TFhirMedicinalProductIngredientSubstance;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductIngredientSubstance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductIngredientSubstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductIngredientSubstanceChild(element : TFhirMedicinalProductIngredientSubstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'strength') then
        element.strengthList.Add(ParseMedicinalProductIngredientSpecifiedSubstanceStrength(child, path+'/strength')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductIngredientSubstance(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductIngredientSubstance);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductIngredientSubstanceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductIngredientSubstanceChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductIngredientSubstance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.strengthList.Count - 1 do
      ComposeMedicinalProductIngredientSpecifiedSubstanceStrength(xml, 'strength', elem.strengthList[i]);
end;

function TFHIRXmlParser.ParseMedicinalProductIngredient(element : TMXmlElement; path : string) : TFhirMedicinalProductIngredient;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductIngredient.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductIngredientChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductIngredientChild(element : TFhirMedicinalProductIngredient; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'role') then
        element.role := ParseCodeableConcept(child, path+'/role') {b}
      else if (child.localName = 'allergenicIndicator') then
        element.allergenicIndicatorElement := ParseBoolean(child, path+'/allergenicIndicator') {b}
      else if (child.localName = 'manufacturer') then
        element.manufacturerList.Add(ParseReference{TFhirOrganization}(child, path+'/manufacturer')){y.2}
      else if (child.localName = 'specifiedSubstance') then
        element.specifiedSubstanceList.Add(ParseMedicinalProductIngredientSpecifiedSubstance(child, path+'/specifiedSubstance')){y.2}
      else if (child.localName = 'substance') then
        element.substance := ParseMedicinalProductIngredientSubstance(child, path+'/substance') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductIngredient(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductIngredient);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductIngredientChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductIngredientChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductIngredient);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  ComposeCodeableConcept(xml, 'role', elem.role);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('allergenicIndicator') then
    ComposeBoolean(xml, 'allergenicIndicator', elem.allergenicIndicatorElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('manufacturer') then
    for i := 0 to elem.manufacturerList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'manufacturer', elem.manufacturerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specifiedSubstance') then
    for i := 0 to elem.specifiedSubstanceList.Count - 1 do
      ComposeMedicinalProductIngredientSpecifiedSubstance(xml, 'specifiedSubstance', elem.specifiedSubstanceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('substance') then
    ComposeMedicinalProductIngredientSubstance(xml, 'substance', elem.substance);{x.2a}
end;

{$ENDIF FHIR_MEDICINALPRODUCTINGREDIENT}
{$IFDEF FHIR_MEDICINALPRODUCTINTERACTION}
function TFHIRXmlParser.ParseMedicinalProductInteractionInteractant(element : TMXmlElement; path : string) : TFhirMedicinalProductInteractionInteractant;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductInteractionInteractant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductInteractionInteractantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductInteractionInteractantChild(element : TFhirMedicinalProductInteractionInteractant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemReference') then
        element.item := ParseReference(child, path+'/itemReference') {a}
      else if (child.localName = 'itemCodeableConcept') then
        element.item := ParseCodeableConcept(child, path+'/itemCodeableConcept'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductInteractionInteractant(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductInteractionInteractant);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductInteractionInteractantChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductInteractionInteractantChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductInteractionInteractant);
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.item is TFhirReference) {2} then
    ComposeReference(xml, 'itemReference', TFhirReference(elem.item))
  else if (elem.item is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'itemCodeableConcept', TFhirCodeableConcept(elem.item));
end;

function TFHIRXmlParser.ParseMedicinalProductInteraction(element : TMXmlElement; path : string) : TFhirMedicinalProductInteraction;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductInteraction.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductInteractionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductInteractionChild(element : TFhirMedicinalProductInteraction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'subject') then
        element.subjectList.Add(ParseReference{TFhirMedicinalProduct}(child, path+'/subject')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'interactant') then
        element.interactantList.Add(ParseMedicinalProductInteractionInteractant(child, path+'/interactant')){y.2}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'effect') then
        element.effect := ParseCodeableConcept(child, path+'/effect') {b}
      else if (child.localName = 'incidence') then
        element.incidence := ParseCodeableConcept(child, path+'/incidence') {b}
      else if (child.localName = 'management') then
        element.management := ParseCodeableConcept(child, path+'/management') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductInteraction(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductInteraction);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductInteractionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductInteractionChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductInteraction);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    for i := 0 to elem.subjectList.Count - 1 do
      ComposeReference{TFhirMedicinalProduct}(xml, 'subject', elem.subjectList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('interactant') then
    for i := 0 to elem.interactantList.Count - 1 do
      ComposeMedicinalProductInteractionInteractant(xml, 'interactant', elem.interactantList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effect') then
    ComposeCodeableConcept(xml, 'effect', elem.effect);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('incidence') then
    ComposeCodeableConcept(xml, 'incidence', elem.incidence);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('management') then
    ComposeCodeableConcept(xml, 'management', elem.management);{x.2a}
end;

{$ENDIF FHIR_MEDICINALPRODUCTINTERACTION}
{$IFDEF FHIR_MEDICINALPRODUCTMANUFACTURED}
function TFHIRXmlParser.ParseMedicinalProductManufactured(element : TMXmlElement; path : string) : TFhirMedicinalProductManufactured;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductManufactured.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductManufacturedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductManufacturedChild(element : TFhirMedicinalProductManufactured; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'manufacturedDoseForm') then
        element.manufacturedDoseForm := ParseCodeableConcept(child, path+'/manufacturedDoseForm') {b}
      else if (child.localName = 'unitOfPresentation') then
        element.unitOfPresentation := ParseCodeableConcept(child, path+'/unitOfPresentation') {b}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'manufacturer') then
        element.manufacturerList.Add(ParseReference{TFhirOrganization}(child, path+'/manufacturer')){y.2}
      else if (child.localName = 'ingredient') then
        element.ingredientList.Add(ParseReference{TFhirMedicinalProductIngredient}(child, path+'/ingredient')){y.2}
      else if (child.localName = 'physicalCharacteristics') then
        element.physicalCharacteristics := ParseProdCharacteristic(child, path+'/physicalCharacteristics') {b}
      else if (child.localName = 'otherCharacteristics') then
        element.otherCharacteristicsList.Add(ParseCodeableConcept(child, path+'/otherCharacteristics')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductManufactured(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductManufactured);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductManufacturedChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductManufacturedChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductManufactured);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  ComposeCodeableConcept(xml, 'manufacturedDoseForm', elem.manufacturedDoseForm);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('unitOfPresentation') then
    ComposeCodeableConcept(xml, 'unitOfPresentation', elem.unitOfPresentation);{x.2a}
  ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('manufacturer') then
    for i := 0 to elem.manufacturerList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'manufacturer', elem.manufacturerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('ingredient') then
    for i := 0 to elem.ingredientList.Count - 1 do
      ComposeReference{TFhirMedicinalProductIngredient}(xml, 'ingredient', elem.ingredientList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('physicalCharacteristics') then
    ComposeProdCharacteristic(xml, 'physicalCharacteristics', elem.physicalCharacteristics);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('otherCharacteristics') then
    for i := 0 to elem.otherCharacteristicsList.Count - 1 do
      ComposeCodeableConcept(xml, 'otherCharacteristics', elem.otherCharacteristicsList[i]);
end;

{$ENDIF FHIR_MEDICINALPRODUCTMANUFACTURED}
{$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
function TFHIRXmlParser.ParseMedicinalProductPackagedBatchIdentifier(element : TMXmlElement; path : string) : TFhirMedicinalProductPackagedBatchIdentifier;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductPackagedBatchIdentifier.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductPackagedBatchIdentifierChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductPackagedBatchIdentifierChild(element : TFhirMedicinalProductPackagedBatchIdentifier; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'outerPackaging') then
        element.outerPackaging := ParseIdentifier(child, path+'/outerPackaging') {b}
      else if (child.localName = 'immediatePackaging') then
        element.immediatePackaging := ParseIdentifier(child, path+'/immediatePackaging') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPackagedBatchIdentifier(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductPackagedBatchIdentifier);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductPackagedBatchIdentifierChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPackagedBatchIdentifierChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPackagedBatchIdentifier);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeIdentifier(xml, 'outerPackaging', elem.outerPackaging);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'immediatePackaging', elem.immediatePackaging);{x.2a}
end;

function TFHIRXmlParser.ParseMedicinalProductPackagedPackageItem(element : TMXmlElement; path : string) : TFhirMedicinalProductPackagedPackageItem;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductPackagedPackageItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductPackagedPackageItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductPackagedPackageItemChild(element : TFhirMedicinalProductPackagedPackageItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'material') then
        element.materialList.Add(ParseCodeableConcept(child, path+'/material')){y.2}
      else if (child.localName = 'alternateMaterial') then
        element.alternateMaterialList.Add(ParseCodeableConcept(child, path+'/alternateMaterial')){y.2}
      else if (child.localName = 'device') then
        element.deviceList.Add(ParseReference{TFhirDeviceDefinition}(child, path+'/device')){y.2}
      else if (child.localName = 'manufacturedItem') then
        element.manufacturedItemList.Add(ParseReference{TFhirMedicinalProductManufactured}(child, path+'/manufacturedItem')){y.2}
      else if (child.localName = 'packageItem') then
        element.packageItemList.Add(ParseMedicinalProductPackagedPackageItem(child, path+'/packageItem')){y.2}
      else if (child.localName = 'physicalCharacteristics') then
        element.physicalCharacteristics := ParseProdCharacteristic(child, path+'/physicalCharacteristics') {b}
      else if (child.localName = 'otherCharacteristics') then
        element.otherCharacteristicsList.Add(ParseCodeableConcept(child, path+'/otherCharacteristics')){y.2}
      else if (child.localName = 'shelfLifeStorage') then
        element.shelfLifeStorageList.Add(ParseProductShelfLife(child, path+'/shelfLifeStorage')){y.2}
      else if (child.localName = 'manufacturer') then
        element.manufacturerList.Add(ParseReference{TFhirOrganization}(child, path+'/manufacturer')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPackagedPackageItem(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductPackagedPackageItem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductPackagedPackageItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPackagedPackageItemChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPackagedPackageItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.materialList.Count - 1 do
      ComposeCodeableConcept(xml, 'material', elem.materialList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.alternateMaterialList.Count - 1 do
      ComposeCodeableConcept(xml, 'alternateMaterial', elem.alternateMaterialList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.deviceList.Count - 1 do
      ComposeReference{TFhirDeviceDefinition}(xml, 'device', elem.deviceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.manufacturedItemList.Count - 1 do
      ComposeReference{TFhirMedicinalProductManufactured}(xml, 'manufacturedItem', elem.manufacturedItemList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.packageItemList.Count - 1 do
      ComposeMedicinalProductPackagedPackageItem(xml, 'packageItem', elem.packageItemList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeProdCharacteristic(xml, 'physicalCharacteristics', elem.physicalCharacteristics);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.otherCharacteristicsList.Count - 1 do
      ComposeCodeableConcept(xml, 'otherCharacteristics', elem.otherCharacteristicsList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.shelfLifeStorageList.Count - 1 do
      ComposeProductShelfLife(xml, 'shelfLifeStorage', elem.shelfLifeStorageList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.manufacturerList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'manufacturer', elem.manufacturerList[i]);
end;

function TFHIRXmlParser.ParseMedicinalProductPackaged(element : TMXmlElement; path : string) : TFhirMedicinalProductPackaged;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductPackaged.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductPackagedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductPackagedChild(element : TFhirMedicinalProductPackaged; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'subject') then
        element.subjectList.Add(ParseReference{TFhirMedicinalProduct}(child, path+'/subject')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'legalStatusOfSupply') then
        element.legalStatusOfSupply := ParseCodeableConcept(child, path+'/legalStatusOfSupply') {b}
      else if (child.localName = 'marketingStatus') then
        element.marketingStatusList.Add(ParseMarketingStatus(child, path+'/marketingStatus')){y.2}
      else if (child.localName = 'marketingAuthorization') then
        element.marketingAuthorization := ParseReference{TFhirMedicinalProductAuthorization}(child, path+'/marketingAuthorization') {b}
      else if (child.localName = 'manufacturer') then
        element.manufacturerList.Add(ParseReference{TFhirOrganization}(child, path+'/manufacturer')){y.2}
      else if (child.localName = 'batchIdentifier') then
        element.batchIdentifierList.Add(ParseMedicinalProductPackagedBatchIdentifier(child, path+'/batchIdentifier')){y.2}
      else if (child.localName = 'packageItem') then
        element.packageItemList.Add(ParseMedicinalProductPackagedPackageItem(child, path+'/packageItem')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPackaged(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductPackaged);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductPackagedChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPackagedChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPackaged);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    for i := 0 to elem.subjectList.Count - 1 do
      ComposeReference{TFhirMedicinalProduct}(xml, 'subject', elem.subjectList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('legalStatusOfSupply') then
    ComposeCodeableConcept(xml, 'legalStatusOfSupply', elem.legalStatusOfSupply);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('marketingStatus') then
    for i := 0 to elem.marketingStatusList.Count - 1 do
      ComposeMarketingStatus(xml, 'marketingStatus', elem.marketingStatusList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('marketingAuthorization') then
    ComposeReference{TFhirMedicinalProductAuthorization}(xml, 'marketingAuthorization', elem.marketingAuthorization);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('manufacturer') then
    for i := 0 to elem.manufacturerList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'manufacturer', elem.manufacturerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('batchIdentifier') then
    for i := 0 to elem.batchIdentifierList.Count - 1 do
      ComposeMedicinalProductPackagedBatchIdentifier(xml, 'batchIdentifier', elem.batchIdentifierList[i]);
  for i := 0 to elem.packageItemList.Count - 1 do
      ComposeMedicinalProductPackagedPackageItem(xml, 'packageItem', elem.packageItemList[i]);
end;

{$ENDIF FHIR_MEDICINALPRODUCTPACKAGED}
{$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
function TFHIRXmlParser.ParseMedicinalProductPharmaceuticalCharacteristics(element : TMXmlElement; path : string) : TFhirMedicinalProductPharmaceuticalCharacteristics;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductPharmaceuticalCharacteristics.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductPharmaceuticalCharacteristicsChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductPharmaceuticalCharacteristicsChild(element : TFhirMedicinalProductPharmaceuticalCharacteristics; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'status') then
        element.status := ParseCodeableConcept(child, path+'/status') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPharmaceuticalCharacteristics(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductPharmaceuticalCharacteristics);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductPharmaceuticalCharacteristicsChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPharmaceuticalCharacteristicsChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPharmaceuticalCharacteristics);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', elem.status);{x.2a}
end;

function TFHIRXmlParser.ParseMedicinalProductPharmaceuticalRouteOfAdministration(element : TMXmlElement; path : string) : TFhirMedicinalProductPharmaceuticalRouteOfAdministration;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductPharmaceuticalRouteOfAdministration.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductPharmaceuticalRouteOfAdministrationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductPharmaceuticalRouteOfAdministrationChild(element : TFhirMedicinalProductPharmaceuticalRouteOfAdministration; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'firstDose') then
        element.firstDose := ParseQuantity(child, path+'/firstDose') {b}
      else if (child.localName = 'maxSingleDose') then
        element.maxSingleDose := ParseQuantity(child, path+'/maxSingleDose') {b}
      else if (child.localName = 'maxDosePerDay') then
        element.maxDosePerDay := ParseQuantity(child, path+'/maxDosePerDay') {b}
      else if (child.localName = 'maxDosePerTreatmentPeriod') then
        element.maxDosePerTreatmentPeriod := ParseRatio(child, path+'/maxDosePerTreatmentPeriod') {b}
      else if (child.localName = 'maxTreatmentPeriod') then
        element.maxTreatmentPeriod := ParseDuration(child, path+'/maxTreatmentPeriod') {b}
      else if (child.localName = 'targetSpecies') then
        element.targetSpeciesList.Add(ParseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(child, path+'/targetSpecies')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPharmaceuticalRouteOfAdministration(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductPharmaceuticalRouteOfAdministration);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductPharmaceuticalRouteOfAdministrationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPharmaceuticalRouteOfAdministrationChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPharmaceuticalRouteOfAdministration);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'firstDose', elem.firstDose);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'maxSingleDose', elem.maxSingleDose);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'maxDosePerDay', elem.maxDosePerDay);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'maxDosePerTreatmentPeriod', elem.maxDosePerTreatmentPeriod);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDuration(xml, 'maxTreatmentPeriod', elem.maxTreatmentPeriod);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.targetSpeciesList.Count - 1 do
      ComposeMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(xml, 'targetSpecies', elem.targetSpeciesList[i]);
end;

function TFHIRXmlParser.ParseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(element : TMXmlElement; path : string) : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesChild(element : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'withdrawalPeriod') then
        element.withdrawalPeriodList.Add(ParseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(child, path+'/withdrawalPeriod')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.withdrawalPeriodList.Count - 1 do
      ComposeMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(xml, 'withdrawalPeriod', elem.withdrawalPeriodList[i]);
end;

function TFHIRXmlParser.ParseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(element : TMXmlElement; path : string) : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriodChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriodChild(element : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'tissue') then
        element.tissue := ParseCodeableConcept(child, path+'/tissue') {b}
      else if (child.localName = 'value') then
        element.value := ParseQuantity(child, path+'/value') {b}
      else if (child.localName = 'supportingInformation') then
        element.supportingInformationElement := ParseString(child, path+'/supportingInformation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriodChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriodChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'tissue', elem.tissue);{x.2a}
  ComposeQuantity(xml, 'value', elem.value);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'supportingInformation', elem.supportingInformationElement);{x.2b}
end;

function TFHIRXmlParser.ParseMedicinalProductPharmaceutical(element : TMXmlElement; path : string) : TFhirMedicinalProductPharmaceutical;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductPharmaceutical.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductPharmaceuticalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductPharmaceuticalChild(element : TFhirMedicinalProductPharmaceutical; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'administrableDoseForm') then
        element.administrableDoseForm := ParseCodeableConcept(child, path+'/administrableDoseForm') {b}
      else if (child.localName = 'unitOfPresentation') then
        element.unitOfPresentation := ParseCodeableConcept(child, path+'/unitOfPresentation') {b}
      else if (child.localName = 'ingredient') then
        element.ingredientList.Add(ParseReference{TFhirMedicinalProductIngredient}(child, path+'/ingredient')){y.2}
      else if (child.localName = 'device') then
        element.deviceList.Add(ParseReference{TFhirDeviceDefinition}(child, path+'/device')){y.2}
      else if (child.localName = 'characteristics') then
        element.characteristicsList.Add(ParseMedicinalProductPharmaceuticalCharacteristics(child, path+'/characteristics')){y.2}
      else if (child.localName = 'routeOfAdministration') then
        element.routeOfAdministrationList.Add(ParseMedicinalProductPharmaceuticalRouteOfAdministration(child, path+'/routeOfAdministration')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPharmaceutical(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductPharmaceutical);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductPharmaceuticalChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductPharmaceuticalChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductPharmaceutical);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeCodeableConcept(xml, 'administrableDoseForm', elem.administrableDoseForm);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('unitOfPresentation') then
    ComposeCodeableConcept(xml, 'unitOfPresentation', elem.unitOfPresentation);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('ingredient') then
    for i := 0 to elem.ingredientList.Count - 1 do
      ComposeReference{TFhirMedicinalProductIngredient}(xml, 'ingredient', elem.ingredientList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('device') then
    for i := 0 to elem.deviceList.Count - 1 do
      ComposeReference{TFhirDeviceDefinition}(xml, 'device', elem.deviceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('characteristics') then
    for i := 0 to elem.characteristicsList.Count - 1 do
      ComposeMedicinalProductPharmaceuticalCharacteristics(xml, 'characteristics', elem.characteristicsList[i]);
  for i := 0 to elem.routeOfAdministrationList.Count - 1 do
      ComposeMedicinalProductPharmaceuticalRouteOfAdministration(xml, 'routeOfAdministration', elem.routeOfAdministrationList[i]);
end;

{$ENDIF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
{$IFDEF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
function TFHIRXmlParser.ParseMedicinalProductUndesirableEffect(element : TMXmlElement; path : string) : TFhirMedicinalProductUndesirableEffect;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductUndesirableEffect.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductUndesirableEffectChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductUndesirableEffectChild(element : TFhirMedicinalProductUndesirableEffect; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'subject') then
        element.subjectList.Add(ParseReference{TFhirMedicinalProduct}(child, path+'/subject')){y.2}
      else if (child.localName = 'symptomConditionEffect') then
        element.symptomConditionEffect := ParseCodeableConcept(child, path+'/symptomConditionEffect') {b}
      else if (child.localName = 'classification') then
        element.classification := ParseCodeableConcept(child, path+'/classification') {b}
      else if (child.localName = 'frequencyOfOccurrence') then
        element.frequencyOfOccurrence := ParseCodeableConcept(child, path+'/frequencyOfOccurrence') {b}
      else if (child.localName = 'population') then
        element.populationList.Add(ParsePopulation(child, path+'/population')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductUndesirableEffect(xml : TXmlBuilder; name : String; elem : TFhirMedicinalProductUndesirableEffect);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMedicinalProductUndesirableEffectChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductUndesirableEffectChildren(xml : TXmlBuilder; elem : TFhirMedicinalProductUndesirableEffect);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    for i := 0 to elem.subjectList.Count - 1 do
      ComposeReference{TFhirMedicinalProduct}(xml, 'subject', elem.subjectList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('symptomConditionEffect') then
    ComposeCodeableConcept(xml, 'symptomConditionEffect', elem.symptomConditionEffect);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('classification') then
    ComposeCodeableConcept(xml, 'classification', elem.classification);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('frequencyOfOccurrence') then
    ComposeCodeableConcept(xml, 'frequencyOfOccurrence', elem.frequencyOfOccurrence);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('population') then
    for i := 0 to elem.populationList.Count - 1 do
      ComposePopulation(xml, 'population', elem.populationList[i]);
end;

{$ENDIF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
{$IFDEF FHIR_MESSAGEDEFINITION}
function TFHIRXmlParser.ParseMessageDefinitionFocus(element : TMXmlElement; path : string) : TFhirMessageDefinitionFocus;
var
  child : TMXmlElement;
begin
  result := TFhirMessageDefinitionFocus.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMessageDefinitionFocusChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMessageDefinitionFocusChild(element : TFhirMessageDefinitionFocus; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, path+'/code', child){1a}
      else if (child.localName = 'profile') then
        element.profileElement := ParseCanonical(child, path+'/profile') {b}
      else if (child.localName = 'min') then
        element.minElement := ParseUnsignedInt(child, path+'/min') {b}
      else if (child.localName = 'max') then
        element.maxElement := ParseString(child, path+'/max') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMessageDefinitionFocus(xml : TXmlBuilder; name : String; elem : TFhirMessageDefinitionFocus);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMessageDefinitionFocusChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMessageDefinitionFocusChildren(xml : TXmlBuilder; elem : TFhirMessageDefinitionFocus);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'code', elem.CodeElement, CODES_TFhirResourceTypesEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'profile', elem.profileElement);{x.2b}
  ComposeUnsignedInt(xml, 'min', elem.minElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'max', elem.maxElement);{x.2b}
end;

function TFHIRXmlParser.ParseMessageDefinitionAllowedResponse(element : TMXmlElement; path : string) : TFhirMessageDefinitionAllowedResponse;
var
  child : TMXmlElement;
begin
  result := TFhirMessageDefinitionAllowedResponse.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMessageDefinitionAllowedResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMessageDefinitionAllowedResponseChild(element : TFhirMessageDefinitionAllowedResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'message') then
        element.messageElement := ParseCanonical(child, path+'/message') {b}
      else if (child.localName = 'situation') then
        element.situationElement := ParseMarkdown(child, path+'/situation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMessageDefinitionAllowedResponse(xml : TXmlBuilder; name : String; elem : TFhirMessageDefinitionAllowedResponse);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMessageDefinitionAllowedResponseChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMessageDefinitionAllowedResponseChildren(xml : TXmlBuilder; elem : TFhirMessageDefinitionAllowedResponse);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCanonical(xml, 'message', elem.messageElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'situation', elem.situationElement);{x.2b}
end;

function TFHIRXmlParser.ParseMessageDefinition(element : TMXmlElement; path : string) : TFhirMessageDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirMessageDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMessageDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMessageDefinitionChild(element : TFhirMessageDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'replaces') then
        element.replacesList.Add(ParseCanonical(child, path+'/replaces')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'base') then
        element.baseElement := ParseCanonical(child, path+'/base') {b}
      else if (child.localName = 'parent') then
        element.parentList.Add(ParseCanonical(child, path+'/parent')){y.2}
      else if (child.localName = 'eventCoding') then
        element.event := ParseCoding(child, path+'/eventCoding'){x.3}
      else if (child.localName = 'eventUri') then
        element.event := ParseUri(child, path+'/eventUri'){x.3}
      else if (child.localName = 'category') then
        element.categoryElement := ParseEnum(CODES_TFhirMessageSignificanceCategoryEnum, SYSTEMS_TFhirMessageSignificanceCategoryEnum, path+'/category', child){1a}
      else if (child.localName = 'focus') then
        element.focusList.Add(ParseMessageDefinitionFocus(child, path+'/focus')){y.2}
      else if (child.localName = 'responseRequired') then
        element.responseRequiredElement := ParseEnum(CODES_TFhirMessageheaderResponseRequestEnum, SYSTEMS_TFhirMessageheaderResponseRequestEnum, path+'/responseRequired', child){1a}
      else if (child.localName = 'allowedResponse') then
        element.allowedResponseList.Add(ParseMessageDefinitionAllowedResponse(child, path+'/allowedResponse')){y.2}
      else if (child.localName = 'graph') then
        element.graphList.Add(ParseCanonical(child, path+'/graph')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMessageDefinition(xml : TXmlBuilder; name : String; elem : TFhirMessageDefinition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMessageDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMessageDefinitionChildren(xml : TXmlBuilder; elem : TFhirMessageDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('replaces') then
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeCanonical(xml, 'replaces', elem.replacesList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('base') then
    ComposeCanonical(xml, 'base', elem.baseElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('parent') then
    for i := 0 to elem.parentList.Count - 1 do
      ComposeCanonical(xml, 'parent', elem.parentList[i]);
  if (elem.event is TFhirCoding) {6} then
    ComposeCoding(xml, 'eventCoding', TFhirCoding(elem.event))
  else if (elem.event is TFhirUri) {6} then
    ComposeUri(xml, 'eventUri', TFhirUri(elem.event));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeEnum(xml, 'category', elem.CategoryElement, CODES_TFhirMessageSignificanceCategoryEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('focus') then
    for i := 0 to elem.focusList.Count - 1 do
      ComposeMessageDefinitionFocus(xml, 'focus', elem.focusList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('responseRequired') then
    ComposeEnum(xml, 'responseRequired', elem.ResponseRequiredElement, CODES_TFhirMessageheaderResponseRequestEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('allowedResponse') then
    for i := 0 to elem.allowedResponseList.Count - 1 do
      ComposeMessageDefinitionAllowedResponse(xml, 'allowedResponse', elem.allowedResponseList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('graph') then
    for i := 0 to elem.graphList.Count - 1 do
      ComposeCanonical(xml, 'graph', elem.graphList[i]);
end;

{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
function TFHIRXmlParser.ParseMessageHeaderDestination(element : TMXmlElement; path : string) : TFhirMessageHeaderDestination;
var
  child : TMXmlElement;
begin
  result := TFhirMessageHeaderDestination.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMessageHeaderDestinationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMessageHeaderDestinationChild(element : TFhirMessageHeaderDestination; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'target') then
        element.target := ParseReference{TFhirDevice}(child, path+'/target') {b}
      else if (child.localName = 'endpoint') then
        element.endpointElement := ParseUrl(child, path+'/endpoint') {b}
      else if (child.localName = 'receiver') then
        element.receiver := ParseReference{TFhirPractitioner}(child, path+'/receiver') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMessageHeaderDestination(xml : TXmlBuilder; name : String; elem : TFhirMessageHeaderDestination);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMessageHeaderDestinationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMessageHeaderDestinationChildren(xml : TXmlBuilder; elem : TFhirMessageHeaderDestination);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirDevice}(xml, 'target', elem.target);{x.2a}
  ComposeUrl(xml, 'endpoint', elem.endpointElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'receiver', elem.receiver);{x.2a}
end;

function TFHIRXmlParser.ParseMessageHeaderSource(element : TMXmlElement; path : string) : TFhirMessageHeaderSource;
var
  child : TMXmlElement;
begin
  result := TFhirMessageHeaderSource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMessageHeaderSourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMessageHeaderSourceChild(element : TFhirMessageHeaderSource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'software') then
        element.softwareElement := ParseString(child, path+'/software') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'contact') then
        element.contact := ParseContactPoint(child, path+'/contact') {b}
      else if (child.localName = 'endpoint') then
        element.endpointElement := ParseUrl(child, path+'/endpoint') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMessageHeaderSource(xml : TXmlBuilder; name : String; elem : TFhirMessageHeaderSource);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMessageHeaderSourceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMessageHeaderSourceChildren(xml : TXmlBuilder; elem : TFhirMessageHeaderSource);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'software', elem.softwareElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeContactPoint(xml, 'contact', elem.contact);{x.2a}
  ComposeUrl(xml, 'endpoint', elem.endpointElement);{x.2b}
end;

function TFHIRXmlParser.ParseMessageHeaderResponse(element : TMXmlElement; path : string) : TFhirMessageHeaderResponse;
var
  child : TMXmlElement;
begin
  result := TFhirMessageHeaderResponse.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMessageHeaderResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMessageHeaderResponseChild(element : TFhirMessageHeaderResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierElement := ParseId(child, path+'/identifier') {b}
      else if (child.localName = 'code') then
        element.codeElement := ParseEnum(CODES_TFhirResponseCodeEnum, SYSTEMS_TFhirResponseCodeEnum, path+'/code', child){1a}
      else if (child.localName = 'details') then
        element.details := ParseReference{TFhirOperationOutcome}(child, path+'/details') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMessageHeaderResponse(xml : TXmlBuilder; name : String; elem : TFhirMessageHeaderResponse);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMessageHeaderResponseChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMessageHeaderResponseChildren(xml : TXmlBuilder; elem : TFhirMessageHeaderResponse);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeId(xml, 'identifier', elem.identifierElement);{x.2b}
  ComposeEnum(xml, 'code', elem.CodeElement, CODES_TFhirResponseCodeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOperationOutcome}(xml, 'details', elem.details);{x.2a}
end;

function TFHIRXmlParser.ParseMessageHeader(element : TMXmlElement; path : string) : TFhirMessageHeader;
var
  child : TMXmlElement;
begin
  result := TFhirMessageHeader.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMessageHeaderChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMessageHeaderChild(element : TFhirMessageHeader; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'eventCoding') then
        element.event := ParseCoding(child, path+'/eventCoding'){x.3}
      else if (child.localName = 'eventUri') then
        element.event := ParseUri(child, path+'/eventUri'){x.3}
      else if (child.localName = 'destination') then
        element.destinationList.Add(ParseMessageHeaderDestination(child, path+'/destination')){y.2}
      else if (child.localName = 'sender') then
        element.sender := ParseReference{TFhirPractitioner}(child, path+'/sender') {b}
      else if (child.localName = 'enterer') then
        element.enterer := ParseReference{TFhirPractitioner}(child, path+'/enterer') {b}
      else if (child.localName = 'author') then
        element.author := ParseReference{TFhirPractitioner}(child, path+'/author') {b}
      else if (child.localName = 'source') then
        element.source := ParseMessageHeaderSource(child, path+'/source') {b}
      else if (child.localName = 'responsible') then
        element.responsible := ParseReference{TFhirPractitioner}(child, path+'/responsible') {b}
      else if (child.localName = 'reason') then
        element.reason := ParseCodeableConcept(child, path+'/reason') {b}
      else if (child.localName = 'response') then
        element.response := ParseMessageHeaderResponse(child, path+'/response') {b}
      else if (child.localName = 'focus') then
        element.focusList.Add(ParseReference{TFhirReference}(child, path+'/focus')){y.2}
      else if (child.localName = 'definition') then
        element.definitionElement := ParseCanonical(child, path+'/definition') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMessageHeader(xml : TXmlBuilder; name : String; elem : TFhirMessageHeader);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMessageHeaderChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMessageHeaderChildren(xml : TXmlBuilder; elem : TFhirMessageHeader);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (elem.event is TFhirCoding) {6} then
    ComposeCoding(xml, 'eventCoding', TFhirCoding(elem.event))
  else if (elem.event is TFhirUri) {6} then
    ComposeUri(xml, 'eventUri', TFhirUri(elem.event));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('destination') then
    for i := 0 to elem.destinationList.Count - 1 do
      ComposeMessageHeaderDestination(xml, 'destination', elem.destinationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('sender') then
    ComposeReference{TFhirPractitioner}(xml, 'sender', elem.sender);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('enterer') then
    ComposeReference{TFhirPractitioner}(xml, 'enterer', elem.enterer);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    ComposeReference{TFhirPractitioner}(xml, 'author', elem.author);{x.2a}
  ComposeMessageHeaderSource(xml, 'source', elem.source);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('responsible') then
    ComposeReference{TFhirPractitioner}(xml, 'responsible', elem.responsible);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reason') then
    ComposeCodeableConcept(xml, 'reason', elem.reason);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('response') then
    ComposeMessageHeaderResponse(xml, 'response', elem.response);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('focus') then
    for i := 0 to elem.focusList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'focus', elem.focusList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('definition') then
    ComposeCanonical(xml, 'definition', elem.definitionElement);{x.2b}
end;

{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
function TFHIRXmlParser.ParseMolecularSequenceReferenceSeq(element : TMXmlElement; path : string) : TFhirMolecularSequenceReferenceSeq;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceReferenceSeq.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceReferenceSeqChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceReferenceSeqChild(element : TFhirMolecularSequenceReferenceSeq; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'chromosome') then
        element.chromosome := ParseCodeableConcept(child, path+'/chromosome') {b}
      else if (child.localName = 'genomeBuild') then
        element.genomeBuildElement := ParseString(child, path+'/genomeBuild') {b}
      else if (child.localName = 'orientation') then
        element.orientationElement := ParseEnum(CODES_TFhirOrientationTypeEnum, SYSTEMS_TFhirOrientationTypeEnum, path+'/orientation', child){1a}
      else if (child.localName = 'referenceSeqId') then
        element.referenceSeqId := ParseCodeableConcept(child, path+'/referenceSeqId') {b}
      else if (child.localName = 'referenceSeqPointer') then
        element.referenceSeqPointer := ParseReference{TFhirMolecularSequence}(child, path+'/referenceSeqPointer') {b}
      else if (child.localName = 'referenceSeqString') then
        element.referenceSeqStringElement := ParseString(child, path+'/referenceSeqString') {b}
      else if (child.localName = 'strand') then
        element.strandElement := ParseEnum(CODES_TFhirStrandTypeEnum, SYSTEMS_TFhirStrandTypeEnum, path+'/strand', child){1a}
      else if (child.localName = 'windowStart') then
        element.windowStartElement := ParseInteger(child, path+'/windowStart') {b}
      else if (child.localName = 'windowEnd') then
        element.windowEndElement := ParseInteger(child, path+'/windowEnd') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceReferenceSeq(xml : TXmlBuilder; name : String; elem : TFhirMolecularSequenceReferenceSeq);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMolecularSequenceReferenceSeqChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceReferenceSeqChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceReferenceSeq);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'chromosome', elem.chromosome);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'genomeBuild', elem.genomeBuildElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'orientation', elem.OrientationElement, CODES_TFhirOrientationTypeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'referenceSeqId', elem.referenceSeqId);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirMolecularSequence}(xml, 'referenceSeqPointer', elem.referenceSeqPointer);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'referenceSeqString', elem.referenceSeqStringElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'strand', elem.StrandElement, CODES_TFhirStrandTypeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'windowStart', elem.windowStartElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'windowEnd', elem.windowEndElement);{x.2b}
end;

function TFHIRXmlParser.ParseMolecularSequenceVariant(element : TMXmlElement; path : string) : TFhirMolecularSequenceVariant;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceVariant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceVariantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceVariantChild(element : TFhirMolecularSequenceVariant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'start') then
        element.startElement := ParseInteger(child, path+'/start') {b}
      else if (child.localName = 'end') then
        element.end_Element := ParseInteger(child, path+'/end') {b}
      else if (child.localName = 'observedAllele') then
        element.observedAlleleElement := ParseString(child, path+'/observedAllele') {b}
      else if (child.localName = 'referenceAllele') then
        element.referenceAlleleElement := ParseString(child, path+'/referenceAllele') {b}
      else if (child.localName = 'cigar') then
        element.cigarElement := ParseString(child, path+'/cigar') {b}
      else if (child.localName = 'variantPointer') then
        element.variantPointer := ParseReference{TFhirObservation}(child, path+'/variantPointer') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceVariant(xml : TXmlBuilder; name : String; elem : TFhirMolecularSequenceVariant);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMolecularSequenceVariantChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceVariantChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceVariant);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'start', elem.startElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'end', elem.end_Element);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'observedAllele', elem.observedAlleleElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'referenceAllele', elem.referenceAlleleElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'cigar', elem.cigarElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirObservation}(xml, 'variantPointer', elem.variantPointer);{x.2a}
end;

function TFHIRXmlParser.ParseMolecularSequenceQuality(element : TMXmlElement; path : string) : TFhirMolecularSequenceQuality;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceQuality.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceQualityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceQualityChild(element : TFhirMolecularSequenceQuality; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirQualityTypeEnum, SYSTEMS_TFhirQualityTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'standardSequence') then
        element.standardSequence := ParseCodeableConcept(child, path+'/standardSequence') {b}
      else if (child.localName = 'start') then
        element.startElement := ParseInteger(child, path+'/start') {b}
      else if (child.localName = 'end') then
        element.end_Element := ParseInteger(child, path+'/end') {b}
      else if (child.localName = 'score') then
        element.score := ParseQuantity(child, path+'/score') {b}
      else if (child.localName = 'method') then
        element.method := ParseCodeableConcept(child, path+'/method') {b}
      else if (child.localName = 'truthTP') then
        element.truthTPElement := ParseDecimal(child, path+'/truthTP') {b}
      else if (child.localName = 'queryTP') then
        element.queryTPElement := ParseDecimal(child, path+'/queryTP') {b}
      else if (child.localName = 'truthFN') then
        element.truthFNElement := ParseDecimal(child, path+'/truthFN') {b}
      else if (child.localName = 'queryFP') then
        element.queryFPElement := ParseDecimal(child, path+'/queryFP') {b}
      else if (child.localName = 'gtFP') then
        element.gtFPElement := ParseDecimal(child, path+'/gtFP') {b}
      else if (child.localName = 'precision') then
        element.precisionElement := ParseDecimal(child, path+'/precision') {b}
      else if (child.localName = 'recall') then
        element.recallElement := ParseDecimal(child, path+'/recall') {b}
      else if (child.localName = 'fScore') then
        element.fScore_Element := ParseDecimal(child, path+'/fScore') {b}
      else if (child.localName = 'roc') then
        element.roc := ParseMolecularSequenceQualityRoc(child, path+'/roc') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceQuality(xml : TXmlBuilder; name : String; elem : TFhirMolecularSequenceQuality);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMolecularSequenceQualityChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceQualityChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceQuality);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirQualityTypeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'standardSequence', elem.standardSequence);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'start', elem.startElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'end', elem.end_Element);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'score', elem.score);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'method', elem.method);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'truthTP', elem.truthTPElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'queryTP', elem.queryTPElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'truthFN', elem.truthFNElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'queryFP', elem.queryFPElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'gtFP', elem.gtFPElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'precision', elem.precisionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'recall', elem.recallElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'fScore', elem.fScore_Element);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMolecularSequenceQualityRoc(xml, 'roc', elem.roc);{x.2a}
end;

function TFHIRXmlParser.ParseMolecularSequenceQualityRoc(element : TMXmlElement; path : string) : TFhirMolecularSequenceQualityRoc;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceQualityRoc.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceQualityRocChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceQualityRocChild(element : TFhirMolecularSequenceQualityRoc; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'score') then
        element.scoreList.Add(ParseInteger(child, path+'/score')){y.2}
      else if (child.localName = 'numTP') then
        element.numTPList.Add(ParseInteger(child, path+'/numTP')){y.2}
      else if (child.localName = 'numFP') then
        element.numFPList.Add(ParseInteger(child, path+'/numFP')){y.2}
      else if (child.localName = 'numFN') then
        element.numFNList.Add(ParseInteger(child, path+'/numFN')){y.2}
      else if (child.localName = 'precision') then
        element.precisionList.Add(ParseDecimal(child, path+'/precision')){y.2}
      else if (child.localName = 'sensitivity') then
        element.sensitivityList.Add(ParseDecimal(child, path+'/sensitivity')){y.2}
      else if (child.localName = 'fMeasure') then
        element.fMeasureList.Add(ParseDecimal(child, path+'/fMeasure')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceQualityRoc(xml : TXmlBuilder; name : String; elem : TFhirMolecularSequenceQualityRoc);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMolecularSequenceQualityRocChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceQualityRocChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceQualityRoc);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.scoreList.Count - 1 do
      ComposeInteger(xml, 'score', elem.scoreList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.numTPList.Count - 1 do
      ComposeInteger(xml, 'numTP', elem.numTPList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.numFPList.Count - 1 do
      ComposeInteger(xml, 'numFP', elem.numFPList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.numFNList.Count - 1 do
      ComposeInteger(xml, 'numFN', elem.numFNList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.precisionList.Count - 1 do
      ComposeDecimal(xml, 'precision', elem.precisionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.sensitivityList.Count - 1 do
      ComposeDecimal(xml, 'sensitivity', elem.sensitivityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.fMeasureList.Count - 1 do
      ComposeDecimal(xml, 'fMeasure', elem.fMeasureList[i]);
end;

function TFHIRXmlParser.ParseMolecularSequenceRepository(element : TMXmlElement; path : string) : TFhirMolecularSequenceRepository;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceRepository.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceRepositoryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceRepositoryChild(element : TFhirMolecularSequenceRepository; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirRepositoryTypeEnum, SYSTEMS_TFhirRepositoryTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'datasetId') then
        element.datasetIdElement := ParseString(child, path+'/datasetId') {b}
      else if (child.localName = 'variantsetId') then
        element.variantsetIdElement := ParseString(child, path+'/variantsetId') {b}
      else if (child.localName = 'readsetId') then
        element.readsetIdElement := ParseString(child, path+'/readsetId') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceRepository(xml : TXmlBuilder; name : String; elem : TFhirMolecularSequenceRepository);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMolecularSequenceRepositoryChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceRepositoryChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceRepository);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirRepositoryTypeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'datasetId', elem.datasetIdElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'variantsetId', elem.variantsetIdElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'readsetId', elem.readsetIdElement);{x.2b}
end;

function TFHIRXmlParser.ParseMolecularSequenceStructureVariant(element : TMXmlElement; path : string) : TFhirMolecularSequenceStructureVariant;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceStructureVariant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceStructureVariantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceStructureVariantChild(element : TFhirMolecularSequenceStructureVariant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'variantType') then
        element.variantType := ParseCodeableConcept(child, path+'/variantType') {b}
      else if (child.localName = 'exact') then
        element.exactElement := ParseBoolean(child, path+'/exact') {b}
      else if (child.localName = 'length') then
        element.lengthElement := ParseInteger(child, path+'/length') {b}
      else if (child.localName = 'outer') then
        element.outer := ParseMolecularSequenceStructureVariantOuter(child, path+'/outer') {b}
      else if (child.localName = 'inner') then
        element.inner := ParseMolecularSequenceStructureVariantInner(child, path+'/inner') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceStructureVariant(xml : TXmlBuilder; name : String; elem : TFhirMolecularSequenceStructureVariant);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMolecularSequenceStructureVariantChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceStructureVariantChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceStructureVariant);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'variantType', elem.variantType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'exact', elem.exactElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'length', elem.lengthElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMolecularSequenceStructureVariantOuter(xml, 'outer', elem.outer);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMolecularSequenceStructureVariantInner(xml, 'inner', elem.inner);{x.2a}
end;

function TFHIRXmlParser.ParseMolecularSequenceStructureVariantOuter(element : TMXmlElement; path : string) : TFhirMolecularSequenceStructureVariantOuter;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceStructureVariantOuter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceStructureVariantOuterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceStructureVariantOuterChild(element : TFhirMolecularSequenceStructureVariantOuter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'start') then
        element.startElement := ParseInteger(child, path+'/start') {b}
      else if (child.localName = 'end') then
        element.end_Element := ParseInteger(child, path+'/end') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceStructureVariantOuter(xml : TXmlBuilder; name : String; elem : TFhirMolecularSequenceStructureVariantOuter);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMolecularSequenceStructureVariantOuterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceStructureVariantOuterChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceStructureVariantOuter);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'start', elem.startElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'end', elem.end_Element);{x.2b}
end;

function TFHIRXmlParser.ParseMolecularSequenceStructureVariantInner(element : TMXmlElement; path : string) : TFhirMolecularSequenceStructureVariantInner;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceStructureVariantInner.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceStructureVariantInnerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceStructureVariantInnerChild(element : TFhirMolecularSequenceStructureVariantInner; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'start') then
        element.startElement := ParseInteger(child, path+'/start') {b}
      else if (child.localName = 'end') then
        element.end_Element := ParseInteger(child, path+'/end') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceStructureVariantInner(xml : TXmlBuilder; name : String; elem : TFhirMolecularSequenceStructureVariantInner);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeMolecularSequenceStructureVariantInnerChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceStructureVariantInnerChildren(xml : TXmlBuilder; elem : TFhirMolecularSequenceStructureVariantInner);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'start', elem.startElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'end', elem.end_Element);{x.2b}
end;

function TFHIRXmlParser.ParseMolecularSequence(element : TMXmlElement; path : string) : TFhirMolecularSequence;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequence.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceChild(element : TFhirMolecularSequence; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirSequenceTypeEnum, SYSTEMS_TFhirSequenceTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'coordinateSystem') then
        element.coordinateSystemElement := ParseInteger(child, path+'/coordinateSystem') {b}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'specimen') then
        element.specimen := ParseReference{TFhirSpecimen}(child, path+'/specimen') {b}
      else if (child.localName = 'device') then
        element.device := ParseReference{TFhirDevice}(child, path+'/device') {b}
      else if (child.localName = 'performer') then
        element.performer := ParseReference{TFhirOrganization}(child, path+'/performer') {b}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'referenceSeq') then
        element.referenceSeq := ParseMolecularSequenceReferenceSeq(child, path+'/referenceSeq') {b}
      else if (child.localName = 'variant') then
        element.variantList.Add(ParseMolecularSequenceVariant(child, path+'/variant')){y.2}
      else if (child.localName = 'observedSeq') then
        element.observedSeqElement := ParseString(child, path+'/observedSeq') {b}
      else if (child.localName = 'quality') then
        element.qualityList.Add(ParseMolecularSequenceQuality(child, path+'/quality')){y.2}
      else if (child.localName = 'readCoverage') then
        element.readCoverageElement := ParseInteger(child, path+'/readCoverage') {b}
      else if (child.localName = 'repository') then
        element.repositoryList.Add(ParseMolecularSequenceRepository(child, path+'/repository')){y.2}
      else if (child.localName = 'pointer') then
        element.pointerList.Add(ParseReference{TFhirMolecularSequence}(child, path+'/pointer')){y.2}
      else if (child.localName = 'structureVariant') then
        element.structureVariantList.Add(ParseMolecularSequenceStructureVariant(child, path+'/structureVariant')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequence(xml : TXmlBuilder; name : String; elem : TFhirMolecularSequence);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeMolecularSequenceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceChildren(xml : TXmlBuilder; elem : TFhirMolecularSequence);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirSequenceTypeEnum);
  ComposeInteger(xml, 'coordinateSystem', elem.coordinateSystemElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specimen') then
    ComposeReference{TFhirSpecimen}(xml, 'specimen', elem.specimen);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('device') then
    ComposeReference{TFhirDevice}(xml, 'device', elem.device);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') then
    ComposeReference{TFhirOrganization}(xml, 'performer', elem.performer);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('quantity') then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('referenceSeq') then
    ComposeMolecularSequenceReferenceSeq(xml, 'referenceSeq', elem.referenceSeq);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('variant') then
    for i := 0 to elem.variantList.Count - 1 do
      ComposeMolecularSequenceVariant(xml, 'variant', elem.variantList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('observedSeq') then
    ComposeString(xml, 'observedSeq', elem.observedSeqElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('quality') then
    for i := 0 to elem.qualityList.Count - 1 do
      ComposeMolecularSequenceQuality(xml, 'quality', elem.qualityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('readCoverage') then
    ComposeInteger(xml, 'readCoverage', elem.readCoverageElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('repository') then
    for i := 0 to elem.repositoryList.Count - 1 do
      ComposeMolecularSequenceRepository(xml, 'repository', elem.repositoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('pointer') then
    for i := 0 to elem.pointerList.Count - 1 do
      ComposeReference{TFhirMolecularSequence}(xml, 'pointer', elem.pointerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('structureVariant') then
    for i := 0 to elem.structureVariantList.Count - 1 do
      ComposeMolecularSequenceStructureVariant(xml, 'structureVariant', elem.structureVariantList[i]);
end;

{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
function TFHIRXmlParser.ParseNamingSystemUniqueId(element : TMXmlElement; path : string) : TFhirNamingSystemUniqueId;
var
  child : TMXmlElement;
begin
  result := TFhirNamingSystemUniqueId.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNamingSystemUniqueIdChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNamingSystemUniqueIdChild(element : TFhirNamingSystemUniqueId; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirNamingsystemIdentifierTypeEnum, SYSTEMS_TFhirNamingsystemIdentifierTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'value') then
        element.valueElement := ParseString(child, path+'/value') {b}
      else if (child.localName = 'preferred') then
        element.preferredElement := ParseBoolean(child, path+'/preferred') {b}
      else if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNamingSystemUniqueId(xml : TXmlBuilder; name : String; elem : TFhirNamingSystemUniqueId);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeNamingSystemUniqueIdChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeNamingSystemUniqueIdChildren(xml : TXmlBuilder; elem : TFhirNamingSystemUniqueId);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirNamingsystemIdentifierTypeEnum);
  ComposeString(xml, 'value', elem.valueElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'preferred', elem.preferredElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParseNamingSystem(element : TMXmlElement; path : string) : TFhirNamingSystem;
var
  child : TMXmlElement;
begin
  result := TFhirNamingSystem.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNamingSystemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNamingSystemChild(element : TFhirNamingSystem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'kind') then
        element.kindElement := ParseEnum(CODES_TFhirNamingsystemTypeEnum, SYSTEMS_TFhirNamingsystemTypeEnum, path+'/kind', child){1a}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'responsible') then
        element.responsibleElement := ParseString(child, path+'/responsible') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'usage') then
        element.usageElement := ParseString(child, path+'/usage') {b}
      else if (child.localName = 'uniqueId') then
        element.uniqueIdList.Add(ParseNamingSystemUniqueId(child, path+'/uniqueId')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNamingSystem(xml : TXmlBuilder; name : String; elem : TFhirNamingSystem);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeNamingSystemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeNamingSystemChildren(xml : TXmlBuilder; elem : TFhirNamingSystem);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  ComposeEnum(xml, 'kind', elem.KindElement, CODES_TFhirNamingsystemTypeEnum);
  ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('responsible') then
    ComposeString(xml, 'responsible', elem.responsibleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeString(xml, 'usage', elem.usageElement);{x.2b}
  for i := 0 to elem.uniqueIdList.Count - 1 do
      ComposeNamingSystemUniqueId(xml, 'uniqueId', elem.uniqueIdList[i]);
end;

{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
function TFHIRXmlParser.ParseNutritionOrderOralDiet(element : TMXmlElement; path : string) : TFhirNutritionOrderOralDiet;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionOrderOralDiet.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionOrderOralDietChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionOrderOralDietChild(element : TFhirNutritionOrderOralDiet; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'schedule') then
        element.scheduleList.Add(ParseTiming(child, path+'/schedule')){y.2}
      else if (child.localName = 'nutrient') then
        element.nutrientList.Add(ParseNutritionOrderOralDietNutrient(child, path+'/nutrient')){y.2}
      else if (child.localName = 'texture') then
        element.textureList.Add(ParseNutritionOrderOralDietTexture(child, path+'/texture')){y.2}
      else if (child.localName = 'fluidConsistencyType') then
        element.fluidConsistencyTypeList.Add(ParseCodeableConcept(child, path+'/fluidConsistencyType')){y.2}
      else if (child.localName = 'instruction') then
        element.instructionElement := ParseString(child, path+'/instruction') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderOralDiet(xml : TXmlBuilder; name : String; elem : TFhirNutritionOrderOralDiet);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeNutritionOrderOralDietChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderOralDietChildren(xml : TXmlBuilder; elem : TFhirNutritionOrderOralDiet);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.scheduleList.Count - 1 do
      ComposeTiming(xml, 'schedule', elem.scheduleList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.nutrientList.Count - 1 do
      ComposeNutritionOrderOralDietNutrient(xml, 'nutrient', elem.nutrientList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.textureList.Count - 1 do
      ComposeNutritionOrderOralDietTexture(xml, 'texture', elem.textureList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.fluidConsistencyTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'fluidConsistencyType', elem.fluidConsistencyTypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'instruction', elem.instructionElement);{x.2b}
end;

function TFHIRXmlParser.ParseNutritionOrderOralDietNutrient(element : TMXmlElement; path : string) : TFhirNutritionOrderOralDietNutrient;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionOrderOralDietNutrient.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionOrderOralDietNutrientChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionOrderOralDietNutrientChild(element : TFhirNutritionOrderOralDietNutrient; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'modifier') then
        element.modifier := ParseCodeableConcept(child, path+'/modifier') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseQuantity(child, path+'/amount') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderOralDietNutrient(xml : TXmlBuilder; name : String; elem : TFhirNutritionOrderOralDietNutrient);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeNutritionOrderOralDietNutrientChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderOralDietNutrientChildren(xml : TXmlBuilder; elem : TFhirNutritionOrderOralDietNutrient);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'modifier', elem.modifier);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'amount', elem.amount);{x.2a}
end;

function TFHIRXmlParser.ParseNutritionOrderOralDietTexture(element : TMXmlElement; path : string) : TFhirNutritionOrderOralDietTexture;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionOrderOralDietTexture.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionOrderOralDietTextureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionOrderOralDietTextureChild(element : TFhirNutritionOrderOralDietTexture; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'modifier') then
        element.modifier := ParseCodeableConcept(child, path+'/modifier') {b}
      else if (child.localName = 'foodType') then
        element.foodType := ParseCodeableConcept(child, path+'/foodType') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderOralDietTexture(xml : TXmlBuilder; name : String; elem : TFhirNutritionOrderOralDietTexture);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeNutritionOrderOralDietTextureChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderOralDietTextureChildren(xml : TXmlBuilder; elem : TFhirNutritionOrderOralDietTexture);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'modifier', elem.modifier);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'foodType', elem.foodType);{x.2a}
end;

function TFHIRXmlParser.ParseNutritionOrderSupplement(element : TMXmlElement; path : string) : TFhirNutritionOrderSupplement;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionOrderSupplement.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionOrderSupplementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionOrderSupplementChild(element : TFhirNutritionOrderSupplement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'productName') then
        element.productNameElement := ParseString(child, path+'/productName') {b}
      else if (child.localName = 'schedule') then
        element.scheduleList.Add(ParseTiming(child, path+'/schedule')){y.2}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'instruction') then
        element.instructionElement := ParseString(child, path+'/instruction') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderSupplement(xml : TXmlBuilder; name : String; elem : TFhirNutritionOrderSupplement);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeNutritionOrderSupplementChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderSupplementChildren(xml : TXmlBuilder; elem : TFhirNutritionOrderSupplement);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'productName', elem.productNameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.scheduleList.Count - 1 do
      ComposeTiming(xml, 'schedule', elem.scheduleList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'instruction', elem.instructionElement);{x.2b}
end;

function TFHIRXmlParser.ParseNutritionOrderEnteralFormula(element : TMXmlElement; path : string) : TFhirNutritionOrderEnteralFormula;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionOrderEnteralFormula.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionOrderEnteralFormulaChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionOrderEnteralFormulaChild(element : TFhirNutritionOrderEnteralFormula; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'baseFormulaType') then
        element.baseFormulaType := ParseCodeableConcept(child, path+'/baseFormulaType') {b}
      else if (child.localName = 'baseFormulaProductName') then
        element.baseFormulaProductNameElement := ParseString(child, path+'/baseFormulaProductName') {b}
      else if (child.localName = 'additiveType') then
        element.additiveType := ParseCodeableConcept(child, path+'/additiveType') {b}
      else if (child.localName = 'additiveProductName') then
        element.additiveProductNameElement := ParseString(child, path+'/additiveProductName') {b}
      else if (child.localName = 'caloricDensity') then
        element.caloricDensity := ParseQuantity(child, path+'/caloricDensity') {b}
      else if (child.localName = 'routeofAdministration') then
        element.routeofAdministration := ParseCodeableConcept(child, path+'/routeofAdministration') {b}
      else if (child.localName = 'administration') then
        element.administrationList.Add(ParseNutritionOrderEnteralFormulaAdministration(child, path+'/administration')){y.2}
      else if (child.localName = 'maxVolumeToDeliver') then
        element.maxVolumeToDeliver := ParseQuantity(child, path+'/maxVolumeToDeliver') {b}
      else if (child.localName = 'administrationInstruction') then
        element.administrationInstructionElement := ParseString(child, path+'/administrationInstruction') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderEnteralFormula(xml : TXmlBuilder; name : String; elem : TFhirNutritionOrderEnteralFormula);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeNutritionOrderEnteralFormulaChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderEnteralFormulaChildren(xml : TXmlBuilder; elem : TFhirNutritionOrderEnteralFormula);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'baseFormulaType', elem.baseFormulaType);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'baseFormulaProductName', elem.baseFormulaProductNameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'additiveType', elem.additiveType);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'additiveProductName', elem.additiveProductNameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'caloricDensity', elem.caloricDensity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'routeofAdministration', elem.routeofAdministration);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.administrationList.Count - 1 do
      ComposeNutritionOrderEnteralFormulaAdministration(xml, 'administration', elem.administrationList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'maxVolumeToDeliver', elem.maxVolumeToDeliver);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'administrationInstruction', elem.administrationInstructionElement);{x.2b}
end;

function TFHIRXmlParser.ParseNutritionOrderEnteralFormulaAdministration(element : TMXmlElement; path : string) : TFhirNutritionOrderEnteralFormulaAdministration;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionOrderEnteralFormulaAdministration.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionOrderEnteralFormulaAdministrationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionOrderEnteralFormulaAdministrationChild(element : TFhirNutritionOrderEnteralFormulaAdministration; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'schedule') then
        element.schedule := ParseTiming(child, path+'/schedule') {b}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'rateQuantity') then
        element.rate := ParseQuantity(child, path+'/rateQuantity'){x.3}
      else if (child.localName = 'rateRatio') then
        element.rate := ParseRatio(child, path+'/rateRatio'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderEnteralFormulaAdministration(xml : TXmlBuilder; name : String; elem : TFhirNutritionOrderEnteralFormulaAdministration);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeNutritionOrderEnteralFormulaAdministrationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderEnteralFormulaAdministrationChildren(xml : TXmlBuilder; elem : TFhirNutritionOrderEnteralFormulaAdministration);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeTiming(xml, 'schedule', elem.schedule);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.rate is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'rateQuantity', TFhirQuantity(elem.rate))
  else if (SummaryOption in [soFull, soData]) and (elem.rate is TFhirRatio) {6} then
    ComposeRatio(xml, 'rateRatio', TFhirRatio(elem.rate));
end;

function TFHIRXmlParser.ParseNutritionOrder(element : TMXmlElement; path : string) : TFhirNutritionOrder;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionOrder.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionOrderChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionOrderChild(element : TFhirNutritionOrder; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'instantiatesCanonical') then
        element.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')){y.2}
      else if (child.localName = 'instantiatesUri') then
        element.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')){y.2}
      else if (child.localName = 'instantiates') then
        element.instantiatesList.Add(ParseUri(child, path+'/instantiates')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'intent') then
        element.intentElement := ParseEnum(CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum, path+'/intent', child){1a}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'dateTime') then
        element.dateTimeElement := ParseDateTime(child, path+'/dateTime') {b}
      else if (child.localName = 'orderer') then
        element.orderer := ParseReference{TFhirPractitioner}(child, path+'/orderer') {b}
      else if (child.localName = 'allergyIntolerance') then
        element.allergyIntoleranceList.Add(ParseReference{TFhirAllergyIntolerance}(child, path+'/allergyIntolerance')){y.2}
      else if (child.localName = 'foodPreferenceModifier') then
        element.foodPreferenceModifierList.Add(ParseCodeableConcept(child, path+'/foodPreferenceModifier')){y.2}
      else if (child.localName = 'excludeFoodModifier') then
        element.excludeFoodModifierList.Add(ParseCodeableConcept(child, path+'/excludeFoodModifier')){y.2}
      else if (child.localName = 'oralDiet') then
        element.oralDiet := ParseNutritionOrderOralDiet(child, path+'/oralDiet') {b}
      else if (child.localName = 'supplement') then
        element.supplementList.Add(ParseNutritionOrderSupplement(child, path+'/supplement')){y.2}
      else if (child.localName = 'enteralFormula') then
        element.enteralFormula := ParseNutritionOrderEnteralFormula(child, path+'/enteralFormula') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrder(xml : TXmlBuilder; name : String; elem : TFhirNutritionOrder);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeNutritionOrderChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderChildren(xml : TXmlBuilder; elem : TFhirNutritionOrder);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesCanonical') then
    for i := 0 to elem.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', elem.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesUri') then
    for i := 0 to elem.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', elem.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('instantiates') then
    for i := 0 to elem.instantiatesList.Count - 1 do
      ComposeUri(xml, 'instantiates', elem.instantiatesList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum);
  ComposeEnum(xml, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum);
  ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  ComposeDateTime(xml, 'dateTime', elem.dateTimeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('orderer') then
    ComposeReference{TFhirPractitioner}(xml, 'orderer', elem.orderer);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('allergyIntolerance') then
    for i := 0 to elem.allergyIntoleranceList.Count - 1 do
      ComposeReference{TFhirAllergyIntolerance}(xml, 'allergyIntolerance', elem.allergyIntoleranceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('foodPreferenceModifier') then
    for i := 0 to elem.foodPreferenceModifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'foodPreferenceModifier', elem.foodPreferenceModifierList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('excludeFoodModifier') then
    for i := 0 to elem.excludeFoodModifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'excludeFoodModifier', elem.excludeFoodModifierList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('oralDiet') then
    ComposeNutritionOrderOralDiet(xml, 'oralDiet', elem.oralDiet);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('supplement') then
    for i := 0 to elem.supplementList.Count - 1 do
      ComposeNutritionOrderSupplement(xml, 'supplement', elem.supplementList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('enteralFormula') then
    ComposeNutritionOrderEnteralFormula(xml, 'enteralFormula', elem.enteralFormula);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
function TFHIRXmlParser.ParseObservationReferenceRange(element : TMXmlElement; path : string) : TFhirObservationReferenceRange;
var
  child : TMXmlElement;
begin
  result := TFhirObservationReferenceRange.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseObservationReferenceRangeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseObservationReferenceRangeChild(element : TFhirObservationReferenceRange; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'low') then
        element.low := ParseQuantity(child, path+'/low') {b}
      else if (child.localName = 'high') then
        element.high := ParseQuantity(child, path+'/high') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'appliesTo') then
        element.appliesToList.Add(ParseCodeableConcept(child, path+'/appliesTo')){y.2}
      else if (child.localName = 'age') then
        element.age := ParseRange(child, path+'/age') {b}
      else if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeObservationReferenceRange(xml : TXmlBuilder; name : String; elem : TFhirObservationReferenceRange);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeObservationReferenceRangeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeObservationReferenceRangeChildren(xml : TXmlBuilder; elem : TFhirObservationReferenceRange);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'low', elem.low);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'high', elem.high);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.appliesToList.Count - 1 do
      ComposeCodeableConcept(xml, 'appliesTo', elem.appliesToList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(xml, 'age', elem.age);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', elem.textElement);{x.2b}
end;

function TFHIRXmlParser.ParseObservationComponent(element : TMXmlElement; path : string) : TFhirObservationComponent;
var
  child : TMXmlElement;
begin
  result := TFhirObservationComponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseObservationComponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseObservationComponentChild(element : TFhirObservationComponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueCodeableConcept') then
        element.value := ParseCodeableConcept(child, path+'/valueCodeableConcept'){x.3}
      else if (child.localName = 'valueRange') then
        element.value := ParseRange(child, path+'/valueRange'){x.3}
      else if (child.localName = 'valueRatio') then
        element.value := ParseRatio(child, path+'/valueRatio'){x.3}
      else if (child.localName = 'valueSampledData') then
        element.value := ParseSampledData(child, path+'/valueSampledData'){x.3}
      else if (child.localName = 'valuePeriod') then
        element.value := ParsePeriod(child, path+'/valuePeriod'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueInteger') then
        element.value := ParseInteger(child, path+'/valueInteger'){x.3}
      else if (child.localName = 'valueTime') then
        element.value := ParseTime(child, path+'/valueTime'){x.3}
      else if (child.localName = 'valueDateTime') then
        element.value := ParseDateTime(child, path+'/valueDateTime'){x.3}
      else if (child.localName = 'dataAbsentReason') then
        element.dataAbsentReason := ParseCodeableConcept(child, path+'/dataAbsentReason') {b}
      else if (child.localName = 'interpretation') then
        element.interpretationList.Add(ParseCodeableConcept(child, path+'/interpretation')){y.2}
      else if (child.localName = 'referenceRange') then
        element.referenceRangeList.Add(ParseObservationReferenceRange(child, path+'/referenceRange')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeObservationComponent(xml : TXmlBuilder; name : String; elem : TFhirObservationComponent);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeObservationComponentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeObservationComponentChildren(xml : TXmlBuilder; elem : TFhirObservationComponent);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRatio) {6} then
    ComposeRatio(xml, 'valueRatio', TFhirRatio(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'valueSampledData', TFhirSampledData(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(elem.value));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'dataAbsentReason', elem.dataAbsentReason);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.interpretationList.Count - 1 do
      ComposeCodeableConcept(xml, 'interpretation', elem.interpretationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.referenceRangeList.Count - 1 do
      ComposeObservationReferenceRange(xml, 'referenceRange', elem.referenceRangeList[i]);
end;

function TFHIRXmlParser.ParseObservation(element : TMXmlElement; path : string) : TFhirObservation;
var
  child : TMXmlElement;
begin
  result := TFhirObservation.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseObservationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseObservationChild(element : TFhirObservation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirCarePlan}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'partOf') then
        element.partOfList.Add(ParseReference{TFhirMedicationAdministration}(child, path+'/partOf')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'focus') then
        element.focusList.Add(ParseReference{TFhirReference}(child, path+'/focus')){y.2}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effective := ParsePeriod(child, path+'/effectivePeriod'){x.3}
      else if (child.localName = 'effectiveTiming') then
        element.effective := ParseTiming(child, path+'/effectiveTiming'){x.3}
      else if (child.localName = 'effectiveDateTime') then
        element.effective := ParseDateTime(child, path+'/effectiveDateTime'){x.3}
      else if (child.localName = 'effectiveInstant') then
        element.effective := ParseInstant(child, path+'/effectiveInstant'){x.3}
      else if (child.localName = 'issued') then
        element.issuedElement := ParseInstant(child, path+'/issued') {b}
      else if (child.localName = 'performer') then
        element.performerList.Add(ParseReference{TFhirPractitioner}(child, path+'/performer')){y.2}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueCodeableConcept') then
        element.value := ParseCodeableConcept(child, path+'/valueCodeableConcept'){x.3}
      else if (child.localName = 'valueRange') then
        element.value := ParseRange(child, path+'/valueRange'){x.3}
      else if (child.localName = 'valueRatio') then
        element.value := ParseRatio(child, path+'/valueRatio'){x.3}
      else if (child.localName = 'valueSampledData') then
        element.value := ParseSampledData(child, path+'/valueSampledData'){x.3}
      else if (child.localName = 'valuePeriod') then
        element.value := ParsePeriod(child, path+'/valuePeriod'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueInteger') then
        element.value := ParseInteger(child, path+'/valueInteger'){x.3}
      else if (child.localName = 'valueTime') then
        element.value := ParseTime(child, path+'/valueTime'){x.3}
      else if (child.localName = 'valueDateTime') then
        element.value := ParseDateTime(child, path+'/valueDateTime'){x.3}
      else if (child.localName = 'dataAbsentReason') then
        element.dataAbsentReason := ParseCodeableConcept(child, path+'/dataAbsentReason') {b}
      else if (child.localName = 'interpretation') then
        element.interpretationList.Add(ParseCodeableConcept(child, path+'/interpretation')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'bodySite') then
        element.bodySite := ParseCodeableConcept(child, path+'/bodySite') {b}
      else if (child.localName = 'method') then
        element.method := ParseCodeableConcept(child, path+'/method') {b}
      else if (child.localName = 'specimen') then
        element.specimen := ParseReference{TFhirSpecimen}(child, path+'/specimen') {b}
      else if (child.localName = 'device') then
        element.device := ParseReference{TFhirDevice}(child, path+'/device') {b}
      else if (child.localName = 'referenceRange') then
        element.referenceRangeList.Add(ParseObservationReferenceRange(child, path+'/referenceRange')){y.2}
      else if (child.localName = 'hasMember') then
        element.hasMemberList.Add(ParseReference{TFhirObservation}(child, path+'/hasMember')){y.2}
      else if (child.localName = 'derivedFrom') then
        element.derivedFromList.Add(ParseReference{TFhirDocumentReference}(child, path+'/derivedFrom')){y.2}
      else if (child.localName = 'component') then
        element.componentList.Add(ParseObservationComponent(child, path+'/component')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeObservation(xml : TXmlBuilder; name : String; elem : TFhirObservation);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeObservationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeObservationChildren(xml : TXmlBuilder; elem : TFhirObservation);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirCarePlan}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') then
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirMedicationAdministration}(xml, 'partOf', elem.partOfList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('focus') then
    for i := 0 to elem.focusList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'focus', elem.focusList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirPeriod) {6} then
    ComposePeriod(xml, 'effectivePeriod', TFhirPeriod(elem.effective))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirTiming) {6} then
    ComposeTiming(xml, 'effectiveTiming', TFhirTiming(elem.effective))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'effectiveDateTime', TFhirDateTime(elem.effective))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.effective is TFhirInstant) {6} then
    ComposeInstant(xml, 'effectiveInstant', TFhirInstant(elem.effective));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('issued') then
    ComposeInstant(xml, 'issued', elem.issuedElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') then
    for i := 0 to elem.performerList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'performer', elem.performerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirRatio) {6} then
    ComposeRatio(xml, 'valueRatio', TFhirRatio(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'valueSampledData', TFhirSampledData(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(elem.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(elem.value));
  if (SummaryOption in [soFull, soData]) and doCompose('dataAbsentReason') then
    ComposeCodeableConcept(xml, 'dataAbsentReason', elem.dataAbsentReason);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('interpretation') then
    for i := 0 to elem.interpretationList.Count - 1 do
      ComposeCodeableConcept(xml, 'interpretation', elem.interpretationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('bodySite') then
    ComposeCodeableConcept(xml, 'bodySite', elem.bodySite);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('method') then
    ComposeCodeableConcept(xml, 'method', elem.method);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('specimen') then
    ComposeReference{TFhirSpecimen}(xml, 'specimen', elem.specimen);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('device') then
    ComposeReference{TFhirDevice}(xml, 'device', elem.device);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('referenceRange') then
    for i := 0 to elem.referenceRangeList.Count - 1 do
      ComposeObservationReferenceRange(xml, 'referenceRange', elem.referenceRangeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('hasMember') then
    for i := 0 to elem.hasMemberList.Count - 1 do
      ComposeReference{TFhirObservation}(xml, 'hasMember', elem.hasMemberList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('derivedFrom') then
    for i := 0 to elem.derivedFromList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(xml, 'derivedFrom', elem.derivedFromList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('component') then
    for i := 0 to elem.componentList.Count - 1 do
      ComposeObservationComponent(xml, 'component', elem.componentList[i]);
end;

{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
function TFHIRXmlParser.ParseObservationDefinitionQuantitativeDetails(element : TMXmlElement; path : string) : TFhirObservationDefinitionQuantitativeDetails;
var
  child : TMXmlElement;
begin
  result := TFhirObservationDefinitionQuantitativeDetails.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseObservationDefinitionQuantitativeDetailsChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseObservationDefinitionQuantitativeDetailsChild(element : TFhirObservationDefinitionQuantitativeDetails; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'customaryUnit') then
        element.customaryUnit := ParseCodeableConcept(child, path+'/customaryUnit') {b}
      else if (child.localName = 'unit') then
        element.unit_ := ParseCodeableConcept(child, path+'/unit') {b}
      else if (child.localName = 'conversionFactor') then
        element.conversionFactorElement := ParseDecimal(child, path+'/conversionFactor') {b}
      else if (child.localName = 'decimalPrecision') then
        element.decimalPrecisionElement := ParseInteger(child, path+'/decimalPrecision') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeObservationDefinitionQuantitativeDetails(xml : TXmlBuilder; name : String; elem : TFhirObservationDefinitionQuantitativeDetails);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeObservationDefinitionQuantitativeDetailsChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeObservationDefinitionQuantitativeDetailsChildren(xml : TXmlBuilder; elem : TFhirObservationDefinitionQuantitativeDetails);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'customaryUnit', elem.customaryUnit);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'unit', elem.unit_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'conversionFactor', elem.conversionFactorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'decimalPrecision', elem.decimalPrecisionElement);{x.2b}
end;

function TFHIRXmlParser.ParseObservationDefinitionQualifiedInterval(element : TMXmlElement; path : string) : TFhirObservationDefinitionQualifiedInterval;
var
  child : TMXmlElement;
begin
  result := TFhirObservationDefinitionQualifiedInterval.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseObservationDefinitionQualifiedIntervalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseObservationDefinitionQualifiedIntervalChild(element : TFhirObservationDefinitionQualifiedInterval; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        element.categoryElement := ParseEnum(CODES_TFhirObservationRangeCategoryEnum, SYSTEMS_TFhirObservationRangeCategoryEnum, path+'/category', child){1a}
      else if (child.localName = 'range') then
        element.range := ParseRange(child, path+'/range') {b}
      else if (child.localName = 'context') then
        element.context := ParseCodeableConcept(child, path+'/context') {b}
      else if (child.localName = 'appliesTo') then
        element.appliesToList.Add(ParseCodeableConcept(child, path+'/appliesTo')){y.2}
      else if (child.localName = 'gender') then
        element.genderElement := ParseEnum(CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum, path+'/gender', child){1a}
      else if (child.localName = 'age') then
        element.age := ParseRange(child, path+'/age') {b}
      else if (child.localName = 'gestationalAge') then
        element.gestationalAge := ParseRange(child, path+'/gestationalAge') {b}
      else if (child.localName = 'condition') then
        element.conditionElement := ParseString(child, path+'/condition') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeObservationDefinitionQualifiedInterval(xml : TXmlBuilder; name : String; elem : TFhirObservationDefinitionQualifiedInterval);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeObservationDefinitionQualifiedIntervalChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeObservationDefinitionQualifiedIntervalChildren(xml : TXmlBuilder; elem : TFhirObservationDefinitionQualifiedInterval);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'category', elem.CategoryElement, CODES_TFhirObservationRangeCategoryEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(xml, 'range', elem.range);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'context', elem.context);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.appliesToList.Count - 1 do
      ComposeCodeableConcept(xml, 'appliesTo', elem.appliesToList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(xml, 'age', elem.age);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(xml, 'gestationalAge', elem.gestationalAge);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'condition', elem.conditionElement);{x.2b}
end;

function TFHIRXmlParser.ParseObservationDefinition(element : TMXmlElement; path : string) : TFhirObservationDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirObservationDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseObservationDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseObservationDefinitionChild(element : TFhirObservationDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'permittedDataType') then
        element.permittedDataTypeList.Add(ParseEnum(CODES_TFhirPermittedDataTypeEnum, SYSTEMS_TFhirPermittedDataTypeEnum, path+'/permittedDataType', child)){y.1}
      else if (child.localName = 'multipleResultsAllowed') then
        element.multipleResultsAllowedElement := ParseBoolean(child, path+'/multipleResultsAllowed') {b}
      else if (child.localName = 'method') then
        element.method := ParseCodeableConcept(child, path+'/method') {b}
      else if (child.localName = 'preferredReportName') then
        element.preferredReportNameElement := ParseString(child, path+'/preferredReportName') {b}
      else if (child.localName = 'quantitativeDetails') then
        element.quantitativeDetails := ParseObservationDefinitionQuantitativeDetails(child, path+'/quantitativeDetails') {b}
      else if (child.localName = 'qualifiedInterval') then
        element.qualifiedIntervalList.Add(ParseObservationDefinitionQualifiedInterval(child, path+'/qualifiedInterval')){y.2}
      else if (child.localName = 'validCodedValueSet') then
        element.validCodedValueSet := ParseReference{TFhirValueSet}(child, path+'/validCodedValueSet') {b}
      else if (child.localName = 'normalCodedValueSet') then
        element.normalCodedValueSet := ParseReference{TFhirValueSet}(child, path+'/normalCodedValueSet') {b}
      else if (child.localName = 'abnormalCodedValueSet') then
        element.abnormalCodedValueSet := ParseReference{TFhirValueSet}(child, path+'/abnormalCodedValueSet') {b}
      else if (child.localName = 'criticalCodedValueSet') then
        element.criticalCodedValueSet := ParseReference{TFhirValueSet}(child, path+'/criticalCodedValueSet') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeObservationDefinition(xml : TXmlBuilder; name : String; elem : TFhirObservationDefinition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeObservationDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeObservationDefinitionChildren(xml : TXmlBuilder; elem : TFhirObservationDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('permittedDataType') then
    for i := 0 to elem.permittedDataTypeList.Count - 1 do
      ComposeEnum(xml, 'permittedDataType', elem.permittedDataTypeList[i], CODES_TFhirPermittedDataTypeEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('multipleResultsAllowed') then
    ComposeBoolean(xml, 'multipleResultsAllowed', elem.multipleResultsAllowedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('method') then
    ComposeCodeableConcept(xml, 'method', elem.method);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('preferredReportName') then
    ComposeString(xml, 'preferredReportName', elem.preferredReportNameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('quantitativeDetails') then
    ComposeObservationDefinitionQuantitativeDetails(xml, 'quantitativeDetails', elem.quantitativeDetails);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('qualifiedInterval') then
    for i := 0 to elem.qualifiedIntervalList.Count - 1 do
      ComposeObservationDefinitionQualifiedInterval(xml, 'qualifiedInterval', elem.qualifiedIntervalList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('validCodedValueSet') then
    ComposeReference{TFhirValueSet}(xml, 'validCodedValueSet', elem.validCodedValueSet);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('normalCodedValueSet') then
    ComposeReference{TFhirValueSet}(xml, 'normalCodedValueSet', elem.normalCodedValueSet);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('abnormalCodedValueSet') then
    ComposeReference{TFhirValueSet}(xml, 'abnormalCodedValueSet', elem.abnormalCodedValueSet);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('criticalCodedValueSet') then
    ComposeReference{TFhirValueSet}(xml, 'criticalCodedValueSet', elem.criticalCodedValueSet);{x.2a}
end;

{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
function TFHIRXmlParser.ParseOperationDefinitionParameter(element : TMXmlElement; path : string) : TFhirOperationDefinitionParameter;
var
  child : TMXmlElement;
begin
  result := TFhirOperationDefinitionParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOperationDefinitionParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOperationDefinitionParameterChild(element : TFhirOperationDefinitionParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseCode(child, path+'/name') {b}
      else if (child.localName = 'use') then
        element.useElement := ParseEnum(CODES_TFhirOperationParameterUseEnum, SYSTEMS_TFhirOperationParameterUseEnum, path+'/use', child){1a}
      else if (child.localName = 'min') then
        element.minElement := ParseInteger(child, path+'/min') {b}
      else if (child.localName = 'max') then
        element.maxElement := ParseString(child, path+'/max') {b}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseString(child, path+'/documentation') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum, path+'/type', child){1a}
      else if (child.localName = 'targetProfile') then
        element.targetProfileList.Add(ParseCanonical(child, path+'/targetProfile')){y.2}
      else if (child.localName = 'searchType') then
        element.searchTypeElement := ParseEnum(CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum, path+'/searchType', child){1a}
      else if (child.localName = 'binding') then
        element.binding := ParseOperationDefinitionParameterBinding(child, path+'/binding') {b}
      else if (child.localName = 'referencedFrom') then
        element.referencedFromList.Add(ParseOperationDefinitionParameterReferencedFrom(child, path+'/referencedFrom')){y.2}
      else if (child.localName = 'part') then
        element.partList.Add(ParseOperationDefinitionParameter(child, path+'/part')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionParameter(xml : TXmlBuilder; name : String; elem : TFhirOperationDefinitionParameter);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeOperationDefinitionParameterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionParameterChildren(xml : TXmlBuilder; elem : TFhirOperationDefinitionParameter);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCode(xml, 'name', elem.nameElement);{x.2b}
  ComposeEnum(xml, 'use', elem.UseElement, CODES_TFhirOperationParameterUseEnum);
  ComposeInteger(xml, 'min', elem.minElement);{x.2b}
  ComposeString(xml, 'max', elem.maxElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'documentation', elem.documentationElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirAllTypesEnum);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.targetProfileList.Count - 1 do
      ComposeCanonical(xml, 'targetProfile', elem.targetProfileList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'searchType', elem.SearchTypeElement, CODES_TFhirSearchParamTypeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeOperationDefinitionParameterBinding(xml, 'binding', elem.binding);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.referencedFromList.Count - 1 do
      ComposeOperationDefinitionParameterReferencedFrom(xml, 'referencedFrom', elem.referencedFromList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.partList.Count - 1 do
      ComposeOperationDefinitionParameter(xml, 'part', elem.partList[i]);
end;

function TFHIRXmlParser.ParseOperationDefinitionParameterBinding(element : TMXmlElement; path : string) : TFhirOperationDefinitionParameterBinding;
var
  child : TMXmlElement;
begin
  result := TFhirOperationDefinitionParameterBinding.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOperationDefinitionParameterBindingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOperationDefinitionParameterBindingChild(element : TFhirOperationDefinitionParameterBinding; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'strength') then
        element.strengthElement := ParseEnum(CODES_TFhirBindingStrengthEnum, SYSTEMS_TFhirBindingStrengthEnum, path+'/strength', child){1a}
      else if (child.localName = 'valueSet') then
        element.valueSetElement := ParseCanonical(child, path+'/valueSet') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionParameterBinding(xml : TXmlBuilder; name : String; elem : TFhirOperationDefinitionParameterBinding);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeOperationDefinitionParameterBindingChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionParameterBindingChildren(xml : TXmlBuilder; elem : TFhirOperationDefinitionParameterBinding);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'strength', elem.StrengthElement, CODES_TFhirBindingStrengthEnum);
  ComposeCanonical(xml, 'valueSet', elem.valueSetElement);{x.2b}
end;

function TFHIRXmlParser.ParseOperationDefinitionParameterReferencedFrom(element : TMXmlElement; path : string) : TFhirOperationDefinitionParameterReferencedFrom;
var
  child : TMXmlElement;
begin
  result := TFhirOperationDefinitionParameterReferencedFrom.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOperationDefinitionParameterReferencedFromChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOperationDefinitionParameterReferencedFromChild(element : TFhirOperationDefinitionParameterReferencedFrom; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'source') then
        element.sourceElement := ParseString(child, path+'/source') {b}
      else if (child.localName = 'sourceId') then
        element.sourceIdElement := ParseString(child, path+'/sourceId') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionParameterReferencedFrom(xml : TXmlBuilder; name : String; elem : TFhirOperationDefinitionParameterReferencedFrom);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeOperationDefinitionParameterReferencedFromChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionParameterReferencedFromChildren(xml : TXmlBuilder; elem : TFhirOperationDefinitionParameterReferencedFrom);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'source', elem.sourceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'sourceId', elem.sourceIdElement);{x.2b}
end;

function TFHIRXmlParser.ParseOperationDefinitionOverload(element : TMXmlElement; path : string) : TFhirOperationDefinitionOverload;
var
  child : TMXmlElement;
begin
  result := TFhirOperationDefinitionOverload.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOperationDefinitionOverloadChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOperationDefinitionOverloadChild(element : TFhirOperationDefinitionOverload; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'parameterName') then
        element.parameterNameList.Add(ParseString(child, path+'/parameterName')){y.2}
      else if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionOverload(xml : TXmlBuilder; name : String; elem : TFhirOperationDefinitionOverload);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeOperationDefinitionOverloadChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionOverloadChildren(xml : TXmlBuilder; elem : TFhirOperationDefinitionOverload);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.parameterNameList.Count - 1 do
      ComposeString(xml, 'parameterName', elem.parameterNameList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
end;

function TFHIRXmlParser.ParseOperationDefinition(element : TMXmlElement; path : string) : TFhirOperationDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirOperationDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOperationDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOperationDefinitionChild(element : TFhirOperationDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'kind') then
        element.kindElement := ParseEnum(CODES_TFhirOperationKindEnum, SYSTEMS_TFhirOperationKindEnum, path+'/kind', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'affectsState') then
        element.affectsStateElement := ParseBoolean(child, path+'/affectsState') {b}
      else if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if (child.localName = 'comment') then
        element.commentElement := ParseMarkdown(child, path+'/comment') {b}
      else if (child.localName = 'base') then
        element.baseElement := ParseCanonical(child, path+'/base') {b}
      else if (child.localName = 'resource') then
        element.resource.Add(ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, path+'/resource', child)){y.1}
      else if (child.localName = 'system') then
        element.systemElement := ParseBoolean(child, path+'/system') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseBoolean(child, path+'/type') {b}
      else if (child.localName = 'instance') then
        element.instanceElement := ParseBoolean(child, path+'/instance') {b}
      else if (child.localName = 'inputProfile') then
        element.inputProfileElement := ParseCanonical(child, path+'/inputProfile') {b}
      else if (child.localName = 'outputProfile') then
        element.outputProfileElement := ParseCanonical(child, path+'/outputProfile') {b}
      else if (child.localName = 'parameter') then
        element.parameterList.Add(ParseOperationDefinitionParameter(child, path+'/parameter')){y.2}
      else if (child.localName = 'overload') then
        element.overloadList.Add(ParseOperationDefinitionOverload(child, path+'/overload')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinition(xml : TXmlBuilder; name : String; elem : TFhirOperationDefinition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeOperationDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionChildren(xml : TXmlBuilder; elem : TFhirOperationDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  ComposeEnum(xml, 'kind', elem.KindElement, CODES_TFhirOperationKindEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('affectsState') then
    ComposeBoolean(xml, 'affectsState', elem.affectsStateElement);{x.2b}
  ComposeCode(xml, 'code', elem.codeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeMarkdown(xml, 'comment', elem.commentElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('base') then
    ComposeCanonical(xml, 'base', elem.baseElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('resource') then
    for i := 0 to elem.resource.Count - 1 do
      ComposeEnum(xml, 'resource', elem.resource[i], CODES_TFhirResourceTypesEnum);
  ComposeBoolean(xml, 'system', elem.systemElement);{x.2b}
  ComposeBoolean(xml, 'type', elem.type_Element);{x.2b}
  ComposeBoolean(xml, 'instance', elem.instanceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('inputProfile') then
    ComposeCanonical(xml, 'inputProfile', elem.inputProfileElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('outputProfile') then
    ComposeCanonical(xml, 'outputProfile', elem.outputProfileElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('parameter') then
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeOperationDefinitionParameter(xml, 'parameter', elem.parameterList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('overload') then
    for i := 0 to elem.overloadList.Count - 1 do
      ComposeOperationDefinitionOverload(xml, 'overload', elem.overloadList[i]);
end;

{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
function TFHIRXmlParser.ParseOperationOutcomeIssue(element : TMXmlElement; path : string) : TFhirOperationOutcomeIssue;
var
  child : TMXmlElement;
begin
  result := TFhirOperationOutcomeIssue.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOperationOutcomeIssueChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOperationOutcomeIssueChild(element : TFhirOperationOutcomeIssue; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'severity') then
        element.severityElement := ParseEnum(CODES_TFhirIssueSeverityEnum, SYSTEMS_TFhirIssueSeverityEnum, path+'/severity', child){1a}
      else if (child.localName = 'code') then
        element.codeElement := ParseEnum(CODES_TFhirIssueTypeEnum, SYSTEMS_TFhirIssueTypeEnum, path+'/code', child){1a}
      else if (child.localName = 'details') then
        element.details := ParseCodeableConcept(child, path+'/details') {b}
      else if (child.localName = 'diagnostics') then
        element.diagnosticsElement := ParseString(child, path+'/diagnostics') {b}
      else if (child.localName = 'location') then
        element.locationList.Add(ParseString(child, path+'/location')){y.2}
      else if (child.localName = 'expression') then
        element.expressionList.Add(ParseString(child, path+'/expression')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOperationOutcomeIssue(xml : TXmlBuilder; name : String; elem : TFhirOperationOutcomeIssue);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeOperationOutcomeIssueChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeOperationOutcomeIssueChildren(xml : TXmlBuilder; elem : TFhirOperationOutcomeIssue);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'severity', elem.SeverityElement, CODES_TFhirIssueSeverityEnum);
  ComposeEnum(xml, 'code', elem.CodeElement, CODES_TFhirIssueTypeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'details', elem.details);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'diagnostics', elem.diagnosticsElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.locationList.Count - 1 do
      ComposeString(xml, 'location', elem.locationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.expressionList.Count - 1 do
      ComposeString(xml, 'expression', elem.expressionList[i]);
end;

function TFHIRXmlParser.ParseOperationOutcome(element : TMXmlElement; path : string) : TFhirOperationOutcome;
var
  child : TMXmlElement;
begin
  result := TFhirOperationOutcome.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOperationOutcomeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOperationOutcomeChild(element : TFhirOperationOutcome; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'issue') then
        element.issueList.Add(ParseOperationOutcomeIssue(child, path+'/issue')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOperationOutcome(xml : TXmlBuilder; name : String; elem : TFhirOperationOutcome);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeOperationOutcomeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeOperationOutcomeChildren(xml : TXmlBuilder; elem : TFhirOperationOutcome);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  for i := 0 to elem.issueList.Count - 1 do
      ComposeOperationOutcomeIssue(xml, 'issue', elem.issueList[i]);
end;

{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
function TFHIRXmlParser.ParseOrganizationContact(element : TMXmlElement; path : string) : TFhirOrganizationContact;
var
  child : TMXmlElement;
begin
  result := TFhirOrganizationContact.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOrganizationContactChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOrganizationContactChild(element : TFhirOrganizationContact; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'purpose') then
        element.purpose := ParseCodeableConcept(child, path+'/purpose') {b}
      else if (child.localName = 'name') then
        element.name := ParseHumanName(child, path+'/name') {b}
      else if (child.localName = 'telecom') then
        element.telecomList.Add(ParseContactPoint(child, path+'/telecom')){y.2}
      else if (child.localName = 'address') then
        element.address := ParseAddress(child, path+'/address') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOrganizationContact(xml : TXmlBuilder; name : String; elem : TFhirOrganizationContact);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeOrganizationContactChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeOrganizationContactChildren(xml : TXmlBuilder; elem : TFhirOrganizationContact);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'purpose', elem.purpose);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeHumanName(xml, 'name', elem.name);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', elem.telecomList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeAddress(xml, 'address', elem.address);{x.2a}
end;

function TFHIRXmlParser.ParseOrganization(element : TMXmlElement; path : string) : TFhirOrganization;
var
  child : TMXmlElement;
begin
  result := TFhirOrganization.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOrganizationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOrganizationChild(element : TFhirOrganization; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'active') then
        element.activeElement := ParseBoolean(child, path+'/active') {b}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'alias') then
        element.aliasList.Add(ParseString(child, path+'/alias')){y.2}
      else if (child.localName = 'telecom') then
        element.telecomList.Add(ParseContactPoint(child, path+'/telecom')){y.2}
      else if (child.localName = 'address') then
        element.addressList.Add(ParseAddress(child, path+'/address')){y.2}
      else if (child.localName = 'partOf') then
        element.partOf := ParseReference{TFhirOrganization}(child, path+'/partOf') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseOrganizationContact(child, path+'/contact')){y.2}
      else if (child.localName = 'endpoint') then
        element.endpointList.Add(ParseReference{TFhirEndpoint}(child, path+'/endpoint')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOrganization(xml : TXmlBuilder; name : String; elem : TFhirOrganization);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeOrganizationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeOrganizationChildren(xml : TXmlBuilder; elem : TFhirOrganization);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposeBoolean(xml, 'active', elem.activeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('alias') then
    for i := 0 to elem.aliasList.Count - 1 do
      ComposeString(xml, 'alias', elem.aliasList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('telecom') then
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', elem.telecomList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('address') then
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(xml, 'address', elem.addressList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') then
    ComposeReference{TFhirOrganization}(xml, 'partOf', elem.partOf);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeOrganizationContact(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('endpoint') then
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(xml, 'endpoint', elem.endpointList[i]);
end;

{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
function TFHIRXmlParser.ParseOrganizationAffiliation(element : TMXmlElement; path : string) : TFhirOrganizationAffiliation;
var
  child : TMXmlElement;
begin
  result := TFhirOrganizationAffiliation.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOrganizationAffiliationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOrganizationAffiliationChild(element : TFhirOrganizationAffiliation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'active') then
        element.activeElement := ParseBoolean(child, path+'/active') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'organization') then
        element.organization := ParseReference{TFhirOrganization}(child, path+'/organization') {b}
      else if (child.localName = 'participatingOrganization') then
        element.participatingOrganization := ParseReference{TFhirOrganization}(child, path+'/participatingOrganization') {b}
      else if (child.localName = 'network') then
        element.networkList.Add(ParseReference{TFhirOrganization}(child, path+'/network')){y.2}
      else if (child.localName = 'code') then
        element.codeList.Add(ParseCodeableConcept(child, path+'/code')){y.2}
      else if (child.localName = 'specialty') then
        element.specialtyList.Add(ParseCodeableConcept(child, path+'/specialty')){y.2}
      else if (child.localName = 'location') then
        element.locationList.Add(ParseReference{TFhirLocation}(child, path+'/location')){y.2}
      else if (child.localName = 'healthcareService') then
        element.healthcareServiceList.Add(ParseReference{TFhirHealthcareService}(child, path+'/healthcareService')){y.2}
      else if (child.localName = 'telecom') then
        element.telecomList.Add(ParseContactPoint(child, path+'/telecom')){y.2}
      else if (child.localName = 'endpoint') then
        element.endpointList.Add(ParseReference{TFhirEndpoint}(child, path+'/endpoint')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOrganizationAffiliation(xml : TXmlBuilder; name : String; elem : TFhirOrganizationAffiliation);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeOrganizationAffiliationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeOrganizationAffiliationChildren(xml : TXmlBuilder; elem : TFhirOrganizationAffiliation);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposeBoolean(xml, 'active', elem.activeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('organization') then
    ComposeReference{TFhirOrganization}(xml, 'organization', elem.organization);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('participatingOrganization') then
    ComposeReference{TFhirOrganization}(xml, 'participatingOrganization', elem.participatingOrganization);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('network') then
    for i := 0 to elem.networkList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'network', elem.networkList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', elem.codeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specialty') then
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialty', elem.specialtyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('location') then
    for i := 0 to elem.locationList.Count - 1 do
      ComposeReference{TFhirLocation}(xml, 'location', elem.locationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('healthcareService') then
    for i := 0 to elem.healthcareServiceList.Count - 1 do
      ComposeReference{TFhirHealthcareService}(xml, 'healthcareService', elem.healthcareServiceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('telecom') then
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', elem.telecomList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('endpoint') then
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(xml, 'endpoint', elem.endpointList[i]);
end;

{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PATIENT}
function TFHIRXmlParser.ParsePatientContact(element : TMXmlElement; path : string) : TFhirPatientContact;
var
  child : TMXmlElement;
begin
  result := TFhirPatientContact.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePatientContactChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePatientContactChild(element : TFhirPatientContact; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'relationship') then
        element.relationshipList.Add(ParseCodeableConcept(child, path+'/relationship')){y.2}
      else if (child.localName = 'name') then
        element.name := ParseHumanName(child, path+'/name') {b}
      else if (child.localName = 'telecom') then
        element.telecomList.Add(ParseContactPoint(child, path+'/telecom')){y.2}
      else if (child.localName = 'address') then
        element.address := ParseAddress(child, path+'/address') {b}
      else if (child.localName = 'gender') then
        element.genderElement := ParseEnum(CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum, path+'/gender', child){1a}
      else if (child.localName = 'organization') then
        element.organization := ParseReference{TFhirOrganization}(child, path+'/organization') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePatientContact(xml : TXmlBuilder; name : String; elem : TFhirPatientContact);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePatientContactChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePatientContactChildren(xml : TXmlBuilder; elem : TFhirPatientContact);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.relationshipList.Count - 1 do
      ComposeCodeableConcept(xml, 'relationship', elem.relationshipList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeHumanName(xml, 'name', elem.name);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', elem.telecomList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeAddress(xml, 'address', elem.address);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(xml, 'organization', elem.organization);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
end;

function TFHIRXmlParser.ParsePatientCommunication(element : TMXmlElement; path : string) : TFhirPatientCommunication;
var
  child : TMXmlElement;
begin
  result := TFhirPatientCommunication.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePatientCommunicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePatientCommunicationChild(element : TFhirPatientCommunication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'language') then
        element.language := ParseCodeableConcept(child, path+'/language') {b}
      else if (child.localName = 'preferred') then
        element.preferredElement := ParseBoolean(child, path+'/preferred') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePatientCommunication(xml : TXmlBuilder; name : String; elem : TFhirPatientCommunication);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePatientCommunicationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePatientCommunicationChildren(xml : TXmlBuilder; elem : TFhirPatientCommunication);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'language', elem.language);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'preferred', elem.preferredElement);{x.2b}
end;

function TFHIRXmlParser.ParsePatientLink(element : TMXmlElement; path : string) : TFhirPatientLink;
var
  child : TMXmlElement;
begin
  result := TFhirPatientLink.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePatientLinkChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePatientLinkChild(element : TFhirPatientLink; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'other') then
        element.other := ParseReference{TFhirPatient}(child, path+'/other') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirLinkTypeEnum, SYSTEMS_TFhirLinkTypeEnum, path+'/type', child){1a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePatientLink(xml : TXmlBuilder; name : String; elem : TFhirPatientLink);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePatientLinkChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePatientLinkChildren(xml : TXmlBuilder; elem : TFhirPatientLink);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeReference{TFhirPatient}(xml, 'other', elem.other);{x.2a}
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirLinkTypeEnum);
end;

function TFHIRXmlParser.ParsePatient(element : TMXmlElement; path : string) : TFhirPatient;
var
  child : TMXmlElement;
begin
  result := TFhirPatient.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePatientChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePatientChild(element : TFhirPatient; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'active') then
        element.activeElement := ParseBoolean(child, path+'/active') {b}
      else if (child.localName = 'name') then
        element.nameList.Add(ParseHumanName(child, path+'/name')){y.2}
      else if (child.localName = 'telecom') then
        element.telecomList.Add(ParseContactPoint(child, path+'/telecom')){y.2}
      else if (child.localName = 'gender') then
        element.genderElement := ParseEnum(CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum, path+'/gender', child){1a}
      else if (child.localName = 'birthDate') then
        element.birthDateElement := ParseDate(child, path+'/birthDate') {b}
      else if (child.localName = 'deceasedBoolean') then
        element.deceased := ParseBoolean(child, path+'/deceasedBoolean'){x.3}
      else if (child.localName = 'deceasedDateTime') then
        element.deceased := ParseDateTime(child, path+'/deceasedDateTime'){x.3}
      else if (child.localName = 'address') then
        element.addressList.Add(ParseAddress(child, path+'/address')){y.2}
      else if (child.localName = 'maritalStatus') then
        element.maritalStatus := ParseCodeableConcept(child, path+'/maritalStatus') {b}
      else if (child.localName = 'multipleBirthBoolean') then
        element.multipleBirth := ParseBoolean(child, path+'/multipleBirthBoolean'){x.3}
      else if (child.localName = 'multipleBirthInteger') then
        element.multipleBirth := ParseInteger(child, path+'/multipleBirthInteger'){x.3}
      else if (child.localName = 'photo') then
        element.photoList.Add(ParseAttachment(child, path+'/photo')){y.2}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParsePatientContact(child, path+'/contact')){y.2}
      else if (child.localName = 'communication') then
        element.communicationList.Add(ParsePatientCommunication(child, path+'/communication')){y.2}
      else if (child.localName = 'generalPractitioner') then
        element.generalPractitionerList.Add(ParseReference{TFhirOrganization}(child, path+'/generalPractitioner')){y.2}
      else if (child.localName = 'managingOrganization') then
        element.managingOrganization := ParseReference{TFhirOrganization}(child, path+'/managingOrganization') {b}
      else if (child.localName = 'link') then
        element.link_List.Add(ParsePatientLink(child, path+'/link')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePatient(xml : TXmlBuilder; name : String; elem : TFhirPatient);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composePatientChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePatientChildren(xml : TXmlBuilder; elem : TFhirPatient);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposeBoolean(xml, 'active', elem.activeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    for i := 0 to elem.nameList.Count - 1 do
      ComposeHumanName(xml, 'name', elem.nameList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('telecom') then
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', elem.telecomList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gender') then
    ComposeEnum(xml, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('birthDate') then
    ComposeDate(xml, 'birthDate', elem.birthDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'deceasedBoolean', TFhirBoolean(elem.deceased))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.deceased is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'deceasedDateTime', TFhirDateTime(elem.deceased));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('address') then
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(xml, 'address', elem.addressList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('maritalStatus') then
    ComposeCodeableConcept(xml, 'maritalStatus', elem.maritalStatus);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.multipleBirth is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'multipleBirthBoolean', TFhirBoolean(elem.multipleBirth))
  else if (SummaryOption in [soFull, soData]) and (elem.multipleBirth is TFhirInteger) {6} then
    ComposeInteger(xml, 'multipleBirthInteger', TFhirInteger(elem.multipleBirth));
  if (SummaryOption in [soFull, soData]) and doCompose('photo') then
    for i := 0 to elem.photoList.Count - 1 do
      ComposeAttachment(xml, 'photo', elem.photoList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposePatientContact(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('communication') then
    for i := 0 to elem.communicationList.Count - 1 do
      ComposePatientCommunication(xml, 'communication', elem.communicationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('generalPractitioner') then
    for i := 0 to elem.generalPractitionerList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'generalPractitioner', elem.generalPractitionerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('managingOrganization') then
    ComposeReference{TFhirOrganization}(xml, 'managingOrganization', elem.managingOrganization);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('link_') then
    for i := 0 to elem.link_List.Count - 1 do
      ComposePatientLink(xml, 'link', elem.link_List[i]);
end;

{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
function TFHIRXmlParser.ParsePaymentNotice(element : TMXmlElement; path : string) : TFhirPaymentNotice;
var
  child : TMXmlElement;
begin
  result := TFhirPaymentNotice.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePaymentNoticeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePaymentNoticeChild(element : TFhirPaymentNotice; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'request') then
        element.request := ParseReference{TFhirReference}(child, path+'/request') {b}
      else if (child.localName = 'response') then
        element.response := ParseReference{TFhirReference}(child, path+'/response') {b}
      else if (child.localName = 'created') then
        element.createdElement := ParseDateTime(child, path+'/created') {b}
      else if (child.localName = 'provider') then
        element.provider := ParseReference{TFhirPractitioner}(child, path+'/provider') {b}
      else if (child.localName = 'payment') then
        element.payment := ParseReference{TFhirPaymentReconciliation}(child, path+'/payment') {b}
      else if (child.localName = 'paymentDate') then
        element.paymentDateElement := ParseDate(child, path+'/paymentDate') {b}
      else if (child.localName = 'payee') then
        element.payee := ParseReference{TFhirPractitioner}(child, path+'/payee') {b}
      else if (child.localName = 'recipient') then
        element.recipient := ParseReference{TFhirOrganization}(child, path+'/recipient') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseMoney(child, path+'/amount') {b}
      else if (child.localName = 'paymentStatus') then
        element.paymentStatus := ParseCodeableConcept(child, path+'/paymentStatus') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePaymentNotice(xml : TXmlBuilder; name : String; elem : TFhirPaymentNotice);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composePaymentNoticeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePaymentNoticeChildren(xml : TXmlBuilder; elem : TFhirPaymentNotice);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('request') then
    ComposeReference{TFhirReference}(xml, 'request', elem.request);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('response') then
    ComposeReference{TFhirReference}(xml, 'response', elem.response);{x.2a}
    ComposeDateTime(xml, 'created', elem.createdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('provider') then
    ComposeReference{TFhirPractitioner}(xml, 'provider', elem.provider);{x.2a}
  ComposeReference{TFhirPaymentReconciliation}(xml, 'payment', elem.payment);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('paymentDate') then
    ComposeDate(xml, 'paymentDate', elem.paymentDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('payee') then
    ComposeReference{TFhirPractitioner}(xml, 'payee', elem.payee);{x.2a}
  ComposeReference{TFhirOrganization}(xml, 'recipient', elem.recipient);{x.2a}
  ComposeMoney(xml, 'amount', elem.amount);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('paymentStatus') then
    ComposeCodeableConcept(xml, 'paymentStatus', elem.paymentStatus);{x.2a}
end;

{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
function TFHIRXmlParser.ParsePaymentReconciliationDetail(element : TMXmlElement; path : string) : TFhirPaymentReconciliationDetail;
var
  child : TMXmlElement;
begin
  result := TFhirPaymentReconciliationDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePaymentReconciliationDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePaymentReconciliationDetailChild(element : TFhirPaymentReconciliationDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'predecessor') then
        element.predecessor := ParseIdentifier(child, path+'/predecessor') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'request') then
        element.request := ParseReference{TFhirReference}(child, path+'/request') {b}
      else if (child.localName = 'submitter') then
        element.submitter := ParseReference{TFhirPractitioner}(child, path+'/submitter') {b}
      else if (child.localName = 'response') then
        element.response := ParseReference{TFhirReference}(child, path+'/response') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDate(child, path+'/date') {b}
      else if (child.localName = 'responsible') then
        element.responsible := ParseReference{TFhirPractitionerRole}(child, path+'/responsible') {b}
      else if (child.localName = 'payee') then
        element.payee := ParseReference{TFhirPractitioner}(child, path+'/payee') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseMoney(child, path+'/amount') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePaymentReconciliationDetail(xml : TXmlBuilder; name : String; elem : TFhirPaymentReconciliationDetail);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePaymentReconciliationDetailChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePaymentReconciliationDetailChildren(xml : TXmlBuilder; elem : TFhirPaymentReconciliationDetail);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'predecessor', elem.predecessor);{x.2a}
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(xml, 'request', elem.request);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'submitter', elem.submitter);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(xml, 'response', elem.response);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitionerRole}(xml, 'responsible', elem.responsible);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'payee', elem.payee);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'amount', elem.amount);{x.2a}
end;

function TFHIRXmlParser.ParsePaymentReconciliationProcessNote(element : TMXmlElement; path : string) : TFhirPaymentReconciliationProcessNote;
var
  child : TMXmlElement;
begin
  result := TFhirPaymentReconciliationProcessNote.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePaymentReconciliationProcessNoteChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePaymentReconciliationProcessNoteChild(element : TFhirPaymentReconciliationProcessNote; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirNoteTypeEnum, SYSTEMS_TFhirNoteTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePaymentReconciliationProcessNote(xml : TXmlBuilder; name : String; elem : TFhirPaymentReconciliationProcessNote);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePaymentReconciliationProcessNoteChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePaymentReconciliationProcessNoteChildren(xml : TXmlBuilder; elem : TFhirPaymentReconciliationProcessNote);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirNoteTypeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', elem.textElement);{x.2b}
end;

function TFHIRXmlParser.ParsePaymentReconciliation(element : TMXmlElement; path : string) : TFhirPaymentReconciliation;
var
  child : TMXmlElement;
begin
  result := TFhirPaymentReconciliation.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePaymentReconciliationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePaymentReconciliationChild(element : TFhirPaymentReconciliation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'created') then
        element.createdElement := ParseDateTime(child, path+'/created') {b}
      else if (child.localName = 'paymentIssuer') then
        element.paymentIssuer := ParseReference{TFhirOrganization}(child, path+'/paymentIssuer') {b}
      else if (child.localName = 'request') then
        element.request := ParseReference{TFhirTask}(child, path+'/request') {b}
      else if (child.localName = 'requestor') then
        element.requestor := ParseReference{TFhirPractitioner}(child, path+'/requestor') {b}
      else if (child.localName = 'outcome') then
        element.outcomeElement := ParseEnum(CODES_TFhirRemittanceOutcomeEnum, SYSTEMS_TFhirRemittanceOutcomeEnum, path+'/outcome', child){1a}
      else if (child.localName = 'disposition') then
        element.dispositionElement := ParseString(child, path+'/disposition') {b}
      else if (child.localName = 'paymentDate') then
        element.paymentDateElement := ParseDate(child, path+'/paymentDate') {b}
      else if (child.localName = 'paymentAmount') then
        element.paymentAmount := ParseMoney(child, path+'/paymentAmount') {b}
      else if (child.localName = 'paymentIdentifier') then
        element.paymentIdentifier := ParseIdentifier(child, path+'/paymentIdentifier') {b}
      else if (child.localName = 'detail') then
        element.detailList.Add(ParsePaymentReconciliationDetail(child, path+'/detail')){y.2}
      else if (child.localName = 'formCode') then
        element.formCode := ParseCodeableConcept(child, path+'/formCode') {b}
      else if (child.localName = 'processNote') then
        element.processNoteList.Add(ParsePaymentReconciliationProcessNote(child, path+'/processNote')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePaymentReconciliation(xml : TXmlBuilder; name : String; elem : TFhirPaymentReconciliation);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composePaymentReconciliationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePaymentReconciliationChildren(xml : TXmlBuilder; elem : TFhirPaymentReconciliation);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
    ComposeDateTime(xml, 'created', elem.createdElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('paymentIssuer') then
    ComposeReference{TFhirOrganization}(xml, 'paymentIssuer', elem.paymentIssuer);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('request') then
    ComposeReference{TFhirTask}(xml, 'request', elem.request);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('requestor') then
    ComposeReference{TFhirPractitioner}(xml, 'requestor', elem.requestor);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('outcome') then
    ComposeEnum(xml, 'outcome', elem.OutcomeElement, CODES_TFhirRemittanceOutcomeEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('disposition') then
    ComposeString(xml, 'disposition', elem.dispositionElement);{x.2b}
  ComposeDate(xml, 'paymentDate', elem.paymentDateElement);{x.2b}
  ComposeMoney(xml, 'paymentAmount', elem.paymentAmount);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('paymentIdentifier') then
    ComposeIdentifier(xml, 'paymentIdentifier', elem.paymentIdentifier);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('detail') then
    for i := 0 to elem.detailList.Count - 1 do
      ComposePaymentReconciliationDetail(xml, 'detail', elem.detailList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('formCode') then
    ComposeCodeableConcept(xml, 'formCode', elem.formCode);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('processNote') then
    for i := 0 to elem.processNoteList.Count - 1 do
      ComposePaymentReconciliationProcessNote(xml, 'processNote', elem.processNoteList[i]);
end;

{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
function TFHIRXmlParser.ParsePersonLink(element : TMXmlElement; path : string) : TFhirPersonLink;
var
  child : TMXmlElement;
begin
  result := TFhirPersonLink.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePersonLinkChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePersonLinkChild(element : TFhirPersonLink; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'target') then
        element.target := ParseReference{TFhirPatient}(child, path+'/target') {b}
      else if (child.localName = 'assurance') then
        element.assuranceElement := ParseEnum(CODES_TFhirIdentityAssuranceLevelEnum, SYSTEMS_TFhirIdentityAssuranceLevelEnum, path+'/assurance', child){1a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePersonLink(xml : TXmlBuilder; name : String; elem : TFhirPersonLink);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePersonLinkChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePersonLinkChildren(xml : TXmlBuilder; elem : TFhirPersonLink);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeReference{TFhirPatient}(xml, 'target', elem.target);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'assurance', elem.AssuranceElement, CODES_TFhirIdentityAssuranceLevelEnum);
end;

function TFHIRXmlParser.ParsePerson(element : TMXmlElement; path : string) : TFhirPerson;
var
  child : TMXmlElement;
begin
  result := TFhirPerson.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePersonChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePersonChild(element : TFhirPerson; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'name') then
        element.nameList.Add(ParseHumanName(child, path+'/name')){y.2}
      else if (child.localName = 'telecom') then
        element.telecomList.Add(ParseContactPoint(child, path+'/telecom')){y.2}
      else if (child.localName = 'gender') then
        element.genderElement := ParseEnum(CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum, path+'/gender', child){1a}
      else if (child.localName = 'birthDate') then
        element.birthDateElement := ParseDate(child, path+'/birthDate') {b}
      else if (child.localName = 'address') then
        element.addressList.Add(ParseAddress(child, path+'/address')){y.2}
      else if (child.localName = 'photo') then
        element.photo := ParseAttachment(child, path+'/photo') {b}
      else if (child.localName = 'managingOrganization') then
        element.managingOrganization := ParseReference{TFhirOrganization}(child, path+'/managingOrganization') {b}
      else if (child.localName = 'active') then
        element.activeElement := ParseBoolean(child, path+'/active') {b}
      else if (child.localName = 'link') then
        element.link_List.Add(ParsePersonLink(child, path+'/link')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePerson(xml : TXmlBuilder; name : String; elem : TFhirPerson);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composePersonChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePersonChildren(xml : TXmlBuilder; elem : TFhirPerson);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    for i := 0 to elem.nameList.Count - 1 do
      ComposeHumanName(xml, 'name', elem.nameList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('telecom') then
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', elem.telecomList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gender') then
    ComposeEnum(xml, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('birthDate') then
    ComposeDate(xml, 'birthDate', elem.birthDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('address') then
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(xml, 'address', elem.addressList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('photo') then
    ComposeAttachment(xml, 'photo', elem.photo);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('managingOrganization') then
    ComposeReference{TFhirOrganization}(xml, 'managingOrganization', elem.managingOrganization);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposeBoolean(xml, 'active', elem.activeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('link_') then
    for i := 0 to elem.link_List.Count - 1 do
      ComposePersonLink(xml, 'link', elem.link_List[i]);
end;

{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
function TFHIRXmlParser.ParsePlanDefinitionGoal(element : TMXmlElement; path : string) : TFhirPlanDefinitionGoal;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinitionGoal.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionGoalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionGoalChild(element : TFhirPlanDefinitionGoal; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'description') then
        element.description := ParseCodeableConcept(child, path+'/description') {b}
      else if (child.localName = 'priority') then
        element.priority := ParseCodeableConcept(child, path+'/priority') {b}
      else if (child.localName = 'start') then
        element.start := ParseCodeableConcept(child, path+'/start') {b}
      else if (child.localName = 'addresses') then
        element.addressesList.Add(ParseCodeableConcept(child, path+'/addresses')){y.2}
      else if (child.localName = 'documentation') then
        element.documentationList.Add(ParseRelatedArtifact(child, path+'/documentation')){y.2}
      else if (child.localName = 'target') then
        element.targetList.Add(ParsePlanDefinitionGoalTarget(child, path+'/target')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionGoal(xml : TXmlBuilder; name : String; elem : TFhirPlanDefinitionGoal);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePlanDefinitionGoalChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionGoalChildren(xml : TXmlBuilder; elem : TFhirPlanDefinitionGoal);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  ComposeCodeableConcept(xml, 'description', elem.description);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'priority', elem.priority);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'start', elem.start);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.addressesList.Count - 1 do
      ComposeCodeableConcept(xml, 'addresses', elem.addressesList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.documentationList.Count - 1 do
      ComposeRelatedArtifact(xml, 'documentation', elem.documentationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.targetList.Count - 1 do
      ComposePlanDefinitionGoalTarget(xml, 'target', elem.targetList[i]);
end;

function TFHIRXmlParser.ParsePlanDefinitionGoalTarget(element : TMXmlElement; path : string) : TFhirPlanDefinitionGoalTarget;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinitionGoalTarget.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionGoalTargetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionGoalTargetChild(element : TFhirPlanDefinitionGoalTarget; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'measure') then
        element.measure := ParseCodeableConcept(child, path+'/measure') {b}
      else if (child.localName = 'detailQuantity') then
        element.detail := ParseQuantity(child, path+'/detailQuantity'){x.3}
      else if (child.localName = 'detailRange') then
        element.detail := ParseRange(child, path+'/detailRange'){x.3}
      else if (child.localName = 'detailCodeableConcept') then
        element.detail := ParseCodeableConcept(child, path+'/detailCodeableConcept'){x.3}
      else if (child.localName = 'due') then
        element.due := ParseDuration(child, path+'/due') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionGoalTarget(xml : TXmlBuilder; name : String; elem : TFhirPlanDefinitionGoalTarget);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePlanDefinitionGoalTargetChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionGoalTargetChildren(xml : TXmlBuilder; elem : TFhirPlanDefinitionGoalTarget);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'measure', elem.measure);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.detail is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'detailQuantity', TFhirQuantity(elem.detail))
  else if (SummaryOption in [soFull, soData]) and (elem.detail is TFhirRange) {6} then
    ComposeRange(xml, 'detailRange', TFhirRange(elem.detail))
  else if (SummaryOption in [soFull, soData]) and (elem.detail is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'detailCodeableConcept', TFhirCodeableConcept(elem.detail));
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'due', elem.due);{x.2a}
end;

function TFHIRXmlParser.ParsePlanDefinitionAction(element : TMXmlElement; path : string) : TFhirPlanDefinitionAction;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinitionAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionActionChild(element : TFhirPlanDefinitionAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'prefix') then
        element.prefixElement := ParseString(child, path+'/prefix') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'textEquivalent') then
        element.textEquivalentElement := ParseString(child, path+'/textEquivalent') {b}
      else if (child.localName = 'priority') then
        element.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, path+'/priority', child){1a}
      else if (child.localName = 'code') then
        element.codeList.Add(ParseCodeableConcept(child, path+'/code')){y.2}
      else if (child.localName = 'reason') then
        element.reasonList.Add(ParseCodeableConcept(child, path+'/reason')){y.2}
      else if (child.localName = 'documentation') then
        element.documentationList.Add(ParseRelatedArtifact(child, path+'/documentation')){y.2}
      else if (child.localName = 'goalId') then
        element.goalIdList.Add(ParseId(child, path+'/goalId')){y.2}
      else if (child.localName = 'subjectCodeableConcept') then
        element.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept'){x.3}
      else if (child.localName = 'subjectReference') then
        element.subject := ParseReference(child, path+'/subjectReference') {a}
      else if (child.localName = 'trigger') then
        element.triggerList.Add(ParseTriggerDefinition(child, path+'/trigger')){y.2}
      else if (child.localName = 'condition') then
        element.conditionList.Add(ParsePlanDefinitionActionCondition(child, path+'/condition')){y.2}
      else if (child.localName = 'input') then
        element.inputList.Add(ParseDataRequirement(child, path+'/input')){y.2}
      else if (child.localName = 'output') then
        element.outputList.Add(ParseDataRequirement(child, path+'/output')){y.2}
      else if (child.localName = 'relatedAction') then
        element.relatedActionList.Add(ParsePlanDefinitionActionRelatedAction(child, path+'/relatedAction')){y.2}
      else if (child.localName = 'timingAge') then
        element.timing := ParseAge(child, path+'/timingAge'){x.3}
      else if (child.localName = 'timingPeriod') then
        element.timing := ParsePeriod(child, path+'/timingPeriod'){x.3}
      else if (child.localName = 'timingDuration') then
        element.timing := ParseDuration(child, path+'/timingDuration'){x.3}
      else if (child.localName = 'timingRange') then
        element.timing := ParseRange(child, path+'/timingRange'){x.3}
      else if (child.localName = 'timingTiming') then
        element.timing := ParseTiming(child, path+'/timingTiming'){x.3}
      else if (child.localName = 'timingDateTime') then
        element.timing := ParseDateTime(child, path+'/timingDateTime'){x.3}
      else if (child.localName = 'participant') then
        element.participantList.Add(ParsePlanDefinitionActionParticipant(child, path+'/participant')){y.2}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'groupingBehavior') then
        element.groupingBehaviorElement := ParseEnum(CODES_TFhirActionGroupingBehaviorEnum, SYSTEMS_TFhirActionGroupingBehaviorEnum, path+'/groupingBehavior', child){1a}
      else if (child.localName = 'selectionBehavior') then
        element.selectionBehaviorElement := ParseEnum(CODES_TFhirActionSelectionBehaviorEnum, SYSTEMS_TFhirActionSelectionBehaviorEnum, path+'/selectionBehavior', child){1a}
      else if (child.localName = 'requiredBehavior') then
        element.requiredBehaviorElement := ParseEnum(CODES_TFhirActionRequiredBehaviorEnum, SYSTEMS_TFhirActionRequiredBehaviorEnum, path+'/requiredBehavior', child){1a}
      else if (child.localName = 'precheckBehavior') then
        element.precheckBehaviorElement := ParseEnum(CODES_TFhirActionPrecheckBehaviorEnum, SYSTEMS_TFhirActionPrecheckBehaviorEnum, path+'/precheckBehavior', child){1a}
      else if (child.localName = 'cardinalityBehavior') then
        element.cardinalityBehaviorElement := ParseEnum(CODES_TFhirActionCardinalityBehaviorEnum, SYSTEMS_TFhirActionCardinalityBehaviorEnum, path+'/cardinalityBehavior', child){1a}
      else if (child.localName = 'definitionCanonical') then
        element.definition := ParseCanonical(child, path+'/definitionCanonical'){x.3}
      else if (child.localName = 'definitionUri') then
        element.definition := ParseUri(child, path+'/definitionUri'){x.3}
      else if (child.localName = 'transform') then
        element.transformElement := ParseCanonical(child, path+'/transform') {b}
      else if (child.localName = 'dynamicValue') then
        element.dynamicValueList.Add(ParsePlanDefinitionActionDynamicValue(child, path+'/dynamicValue')){y.2}
      else if (child.localName = 'action') then
        element.actionList.Add(ParsePlanDefinitionAction(child, path+'/action')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionAction(xml : TXmlBuilder; name : String; elem : TFhirPlanDefinitionAction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePlanDefinitionActionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionChildren(xml : TXmlBuilder; elem : TFhirPlanDefinitionAction);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'prefix', elem.prefixElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'textEquivalent', elem.textEquivalentElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', elem.codeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'reason', elem.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.documentationList.Count - 1 do
      ComposeRelatedArtifact(xml, 'documentation', elem.documentationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.goalIdList.Count - 1 do
      ComposeId(xml, 'goalId', elem.goalIdList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(elem.subject))
  else if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(elem.subject));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.triggerList.Count - 1 do
      ComposeTriggerDefinition(xml, 'trigger', elem.triggerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.conditionList.Count - 1 do
      ComposePlanDefinitionActionCondition(xml, 'condition', elem.conditionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.inputList.Count - 1 do
      ComposeDataRequirement(xml, 'input', elem.inputList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.outputList.Count - 1 do
      ComposeDataRequirement(xml, 'output', elem.outputList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.relatedActionList.Count - 1 do
      ComposePlanDefinitionActionRelatedAction(xml, 'relatedAction', elem.relatedActionList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirAge) {6} then
    ComposeAge(xml, 'timingAge', TFhirAge(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timingPeriod', TFhirPeriod(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDuration) {6} then
    ComposeDuration(xml, 'timingDuration', TFhirDuration(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirRange) {6} then
    ComposeRange(xml, 'timingRange', TFhirRange(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirTiming) {6} then
    ComposeTiming(xml, 'timingTiming', TFhirTiming(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timingDateTime', TFhirDateTime(elem.timing));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.participantList.Count - 1 do
      ComposePlanDefinitionActionParticipant(xml, 'participant', elem.participantList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'groupingBehavior', elem.GroupingBehaviorElement, CODES_TFhirActionGroupingBehaviorEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'selectionBehavior', elem.SelectionBehaviorElement, CODES_TFhirActionSelectionBehaviorEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'requiredBehavior', elem.RequiredBehaviorElement, CODES_TFhirActionRequiredBehaviorEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'precheckBehavior', elem.PrecheckBehaviorElement, CODES_TFhirActionPrecheckBehaviorEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'cardinalityBehavior', elem.CardinalityBehaviorElement, CODES_TFhirActionCardinalityBehaviorEnum);
  if (SummaryOption in [soFull, soData]) and (elem.definition is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'definitionCanonical', TFhirCanonical(elem.definition))
  else if (SummaryOption in [soFull, soData]) and (elem.definition is TFhirUri) {6} then
    ComposeUri(xml, 'definitionUri', TFhirUri(elem.definition));
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'transform', elem.transformElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.dynamicValueList.Count - 1 do
      ComposePlanDefinitionActionDynamicValue(xml, 'dynamicValue', elem.dynamicValueList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.actionList.Count - 1 do
      ComposePlanDefinitionAction(xml, 'action', elem.actionList[i]);
end;

function TFHIRXmlParser.ParsePlanDefinitionActionCondition(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionCondition;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinitionActionCondition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionActionConditionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionActionConditionChild(element : TFhirPlanDefinitionActionCondition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'kind') then
        element.kindElement := ParseEnum(CODES_TFhirActionConditionKindEnum, SYSTEMS_TFhirActionConditionKindEnum, path+'/kind', child){1a}
      else if (child.localName = 'expression') then
        element.expression := ParseExpression(child, path+'/expression') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionCondition(xml : TXmlBuilder; name : String; elem : TFhirPlanDefinitionActionCondition);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePlanDefinitionActionConditionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionConditionChildren(xml : TXmlBuilder; elem : TFhirPlanDefinitionActionCondition);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'kind', elem.KindElement, CODES_TFhirActionConditionKindEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeExpression(xml, 'expression', elem.expression);{x.2a}
end;

function TFHIRXmlParser.ParsePlanDefinitionActionRelatedAction(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionRelatedAction;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinitionActionRelatedAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionActionRelatedActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionActionRelatedActionChild(element : TFhirPlanDefinitionActionRelatedAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'actionId') then
        element.actionIdElement := ParseId(child, path+'/actionId') {b}
      else if (child.localName = 'relationship') then
        element.relationshipElement := ParseEnum(CODES_TFhirActionRelationshipTypeEnum, SYSTEMS_TFhirActionRelationshipTypeEnum, path+'/relationship', child){1a}
      else if (child.localName = 'offsetDuration') then
        element.offset := ParseDuration(child, path+'/offsetDuration'){x.3}
      else if (child.localName = 'offsetRange') then
        element.offset := ParseRange(child, path+'/offsetRange'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionRelatedAction(xml : TXmlBuilder; name : String; elem : TFhirPlanDefinitionActionRelatedAction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePlanDefinitionActionRelatedActionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionRelatedActionChildren(xml : TXmlBuilder; elem : TFhirPlanDefinitionActionRelatedAction);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeId(xml, 'actionId', elem.actionIdElement);{x.2b}
  ComposeEnum(xml, 'relationship', elem.RelationshipElement, CODES_TFhirActionRelationshipTypeEnum);
  if (SummaryOption in [soFull, soData]) and (elem.offset is TFhirDuration) {6} then
    ComposeDuration(xml, 'offsetDuration', TFhirDuration(elem.offset))
  else if (SummaryOption in [soFull, soData]) and (elem.offset is TFhirRange) {6} then
    ComposeRange(xml, 'offsetRange', TFhirRange(elem.offset));
end;

function TFHIRXmlParser.ParsePlanDefinitionActionParticipant(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinitionActionParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionActionParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionActionParticipantChild(element : TFhirPlanDefinitionActionParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirActionParticipantTypeEnum, SYSTEMS_TFhirActionParticipantTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'role') then
        element.role := ParseCodeableConcept(child, path+'/role') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionParticipant(xml : TXmlBuilder; name : String; elem : TFhirPlanDefinitionActionParticipant);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePlanDefinitionActionParticipantChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionParticipantChildren(xml : TXmlBuilder; elem : TFhirPlanDefinitionActionParticipant);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirActionParticipantTypeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'role', elem.role);{x.2a}
end;

function TFHIRXmlParser.ParsePlanDefinitionActionDynamicValue(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionDynamicValue;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinitionActionDynamicValue.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionActionDynamicValueChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionActionDynamicValueChild(element : TFhirPlanDefinitionActionDynamicValue; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        element.pathElement := ParseString(child, path+'/path') {b}
      else if (child.localName = 'expression') then
        element.expression := ParseExpression(child, path+'/expression') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionDynamicValue(xml : TXmlBuilder; name : String; elem : TFhirPlanDefinitionActionDynamicValue);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePlanDefinitionActionDynamicValueChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionDynamicValueChildren(xml : TXmlBuilder; elem : TFhirPlanDefinitionActionDynamicValue);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'path', elem.pathElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeExpression(xml, 'expression', elem.expression);{x.2a}
end;

function TFHIRXmlParser.ParsePlanDefinition(element : TMXmlElement; path : string) : TFhirPlanDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionChild(element : TFhirPlanDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'subtitle') then
        element.subtitleElement := ParseString(child, path+'/subtitle') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'subjectCodeableConcept') then
        element.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept'){x.3}
      else if (child.localName = 'subjectReference') then
        element.subject := ParseReference(child, path+'/subjectReference') {a}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'usage') then
        element.usageElement := ParseString(child, path+'/usage') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'approvalDate') then
        element.approvalDateElement := ParseDate(child, path+'/approvalDate') {b}
      else if (child.localName = 'lastReviewDate') then
        element.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {b}
      else if (child.localName = 'topic') then
        element.topicList.Add(ParseCodeableConcept(child, path+'/topic')){y.2}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseContactDetail(child, path+'/author')){y.2}
      else if (child.localName = 'editor') then
        element.editorList.Add(ParseContactDetail(child, path+'/editor')){y.2}
      else if (child.localName = 'reviewer') then
        element.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')){y.2}
      else if (child.localName = 'endorser') then
        element.endorserList.Add(ParseContactDetail(child, path+'/endorser')){y.2}
      else if (child.localName = 'relatedArtifact') then
        element.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')){y.2}
      else if (child.localName = 'library') then
        element.library_List.Add(ParseCanonical(child, path+'/library')){y.2}
      else if (child.localName = 'goal') then
        element.goalList.Add(ParsePlanDefinitionGoal(child, path+'/goal')){y.2}
      else if (child.localName = 'action') then
        element.actionList.Add(ParsePlanDefinitionAction(child, path+'/action')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinition(xml : TXmlBuilder; name : String; elem : TFhirPlanDefinition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composePlanDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionChildren(xml : TXmlBuilder; elem : TFhirPlanDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('subtitle') then
    ComposeString(xml, 'subtitle', elem.subtitleElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(elem.subject))
  else if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(elem.subject));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeString(xml, 'usage', elem.usageElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDate(xml, 'approvalDate', elem.approvalDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDate(xml, 'lastReviewDate', elem.lastReviewDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(xml, 'effectivePeriod', elem.effectivePeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('topic') then
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', elem.topicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('author') then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('editor') then
    for i := 0 to elem.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', elem.editorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reviewer') then
    for i := 0 to elem.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', elem.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('endorser') then
    for i := 0 to elem.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', elem.endorserList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') then
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', elem.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('library_') then
    for i := 0 to elem.library_List.Count - 1 do
      ComposeCanonical(xml, 'library', elem.library_List[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('goal') then
    for i := 0 to elem.goalList.Count - 1 do
      ComposePlanDefinitionGoal(xml, 'goal', elem.goalList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('action') then
    for i := 0 to elem.actionList.Count - 1 do
      ComposePlanDefinitionAction(xml, 'action', elem.actionList[i]);
end;

{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
function TFHIRXmlParser.ParsePractitionerQualification(element : TMXmlElement; path : string) : TFhirPractitionerQualification;
var
  child : TMXmlElement;
begin
  result := TFhirPractitionerQualification.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePractitionerQualificationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePractitionerQualificationChild(element : TFhirPractitionerQualification; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'issuer') then
        element.issuer := ParseReference{TFhirOrganization}(child, path+'/issuer') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePractitionerQualification(xml : TXmlBuilder; name : String; elem : TFhirPractitionerQualification);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePractitionerQualificationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePractitionerQualificationChildren(xml : TXmlBuilder; elem : TFhirPractitionerQualification);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(xml, 'issuer', elem.issuer);{x.2a}
end;

function TFHIRXmlParser.ParsePractitioner(element : TMXmlElement; path : string) : TFhirPractitioner;
var
  child : TMXmlElement;
begin
  result := TFhirPractitioner.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePractitionerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePractitionerChild(element : TFhirPractitioner; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'active') then
        element.activeElement := ParseBoolean(child, path+'/active') {b}
      else if (child.localName = 'name') then
        element.nameList.Add(ParseHumanName(child, path+'/name')){y.2}
      else if (child.localName = 'telecom') then
        element.telecomList.Add(ParseContactPoint(child, path+'/telecom')){y.2}
      else if (child.localName = 'address') then
        element.addressList.Add(ParseAddress(child, path+'/address')){y.2}
      else if (child.localName = 'gender') then
        element.genderElement := ParseEnum(CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum, path+'/gender', child){1a}
      else if (child.localName = 'birthDate') then
        element.birthDateElement := ParseDate(child, path+'/birthDate') {b}
      else if (child.localName = 'photo') then
        element.photoList.Add(ParseAttachment(child, path+'/photo')){y.2}
      else if (child.localName = 'qualification') then
        element.qualificationList.Add(ParsePractitionerQualification(child, path+'/qualification')){y.2}
      else if (child.localName = 'communication') then
        element.communicationList.Add(ParseCodeableConcept(child, path+'/communication')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePractitioner(xml : TXmlBuilder; name : String; elem : TFhirPractitioner);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composePractitionerChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePractitionerChildren(xml : TXmlBuilder; elem : TFhirPractitioner);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposeBoolean(xml, 'active', elem.activeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    for i := 0 to elem.nameList.Count - 1 do
      ComposeHumanName(xml, 'name', elem.nameList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('telecom') then
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', elem.telecomList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('address') then
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(xml, 'address', elem.addressList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gender') then
    ComposeEnum(xml, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('birthDate') then
    ComposeDate(xml, 'birthDate', elem.birthDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('photo') then
    for i := 0 to elem.photoList.Count - 1 do
      ComposeAttachment(xml, 'photo', elem.photoList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('qualification') then
    for i := 0 to elem.qualificationList.Count - 1 do
      ComposePractitionerQualification(xml, 'qualification', elem.qualificationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('communication') then
    for i := 0 to elem.communicationList.Count - 1 do
      ComposeCodeableConcept(xml, 'communication', elem.communicationList[i]);
end;

{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
function TFHIRXmlParser.ParsePractitionerRoleAvailableTime(element : TMXmlElement; path : string) : TFhirPractitionerRoleAvailableTime;
var
  child : TMXmlElement;
begin
  result := TFhirPractitionerRoleAvailableTime.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePractitionerRoleAvailableTimeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePractitionerRoleAvailableTimeChild(element : TFhirPractitionerRoleAvailableTime; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'daysOfWeek') then
        element.daysOfWeekList.Add(ParseEnum(CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum, path+'/daysOfWeek', child)){y.1}
      else if (child.localName = 'allDay') then
        element.allDayElement := ParseBoolean(child, path+'/allDay') {b}
      else if (child.localName = 'availableStartTime') then
        element.availableStartTimeElement := ParseTime(child, path+'/availableStartTime') {b}
      else if (child.localName = 'availableEndTime') then
        element.availableEndTimeElement := ParseTime(child, path+'/availableEndTime') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePractitionerRoleAvailableTime(xml : TXmlBuilder; name : String; elem : TFhirPractitionerRoleAvailableTime);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePractitionerRoleAvailableTimeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePractitionerRoleAvailableTimeChildren(xml : TXmlBuilder; elem : TFhirPractitionerRoleAvailableTime);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.daysOfWeekList.Count - 1 do
      ComposeEnum(xml, 'daysOfWeek', elem.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'allDay', elem.allDayElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeTime(xml, 'availableStartTime', elem.availableStartTimeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeTime(xml, 'availableEndTime', elem.availableEndTimeElement);{x.2b}
end;

function TFHIRXmlParser.ParsePractitionerRoleNotAvailable(element : TMXmlElement; path : string) : TFhirPractitionerRoleNotAvailable;
var
  child : TMXmlElement;
begin
  result := TFhirPractitionerRoleNotAvailable.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePractitionerRoleNotAvailableChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePractitionerRoleNotAvailableChild(element : TFhirPractitionerRoleNotAvailable; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'during') then
        element.during := ParsePeriod(child, path+'/during') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePractitionerRoleNotAvailable(xml : TXmlBuilder; name : String; elem : TFhirPractitionerRoleNotAvailable);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composePractitionerRoleNotAvailableChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePractitionerRoleNotAvailableChildren(xml : TXmlBuilder; elem : TFhirPractitionerRoleNotAvailable);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'during', elem.during);{x.2a}
end;

function TFHIRXmlParser.ParsePractitionerRole(element : TMXmlElement; path : string) : TFhirPractitionerRole;
var
  child : TMXmlElement;
begin
  result := TFhirPractitionerRole.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePractitionerRoleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePractitionerRoleChild(element : TFhirPractitionerRole; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'active') then
        element.activeElement := ParseBoolean(child, path+'/active') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'practitioner') then
        element.practitioner := ParseReference{TFhirPractitioner}(child, path+'/practitioner') {b}
      else if (child.localName = 'organization') then
        element.organization := ParseReference{TFhirOrganization}(child, path+'/organization') {b}
      else if (child.localName = 'code') then
        element.codeList.Add(ParseCodeableConcept(child, path+'/code')){y.2}
      else if (child.localName = 'specialty') then
        element.specialtyList.Add(ParseCodeableConcept(child, path+'/specialty')){y.2}
      else if (child.localName = 'location') then
        element.locationList.Add(ParseReference{TFhirLocation}(child, path+'/location')){y.2}
      else if (child.localName = 'healthcareService') then
        element.healthcareServiceList.Add(ParseReference{TFhirHealthcareService}(child, path+'/healthcareService')){y.2}
      else if (child.localName = 'telecom') then
        element.telecomList.Add(ParseContactPoint(child, path+'/telecom')){y.2}
      else if (child.localName = 'availableTime') then
        element.availableTimeList.Add(ParsePractitionerRoleAvailableTime(child, path+'/availableTime')){y.2}
      else if (child.localName = 'notAvailable') then
        element.notAvailableList.Add(ParsePractitionerRoleNotAvailable(child, path+'/notAvailable')){y.2}
      else if (child.localName = 'availabilityExceptions') then
        element.availabilityExceptionsElement := ParseString(child, path+'/availabilityExceptions') {b}
      else if (child.localName = 'endpoint') then
        element.endpointList.Add(ParseReference{TFhirEndpoint}(child, path+'/endpoint')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePractitionerRole(xml : TXmlBuilder; name : String; elem : TFhirPractitionerRole);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composePractitionerRoleChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposePractitionerRoleChildren(xml : TXmlBuilder; elem : TFhirPractitionerRole);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposeBoolean(xml, 'active', elem.activeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('practitioner') then
    ComposeReference{TFhirPractitioner}(xml, 'practitioner', elem.practitioner);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('organization') then
    ComposeReference{TFhirOrganization}(xml, 'organization', elem.organization);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', elem.codeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specialty') then
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialty', elem.specialtyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('location') then
    for i := 0 to elem.locationList.Count - 1 do
      ComposeReference{TFhirLocation}(xml, 'location', elem.locationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('healthcareService') then
    for i := 0 to elem.healthcareServiceList.Count - 1 do
      ComposeReference{TFhirHealthcareService}(xml, 'healthcareService', elem.healthcareServiceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('telecom') then
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', elem.telecomList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('availableTime') then
    for i := 0 to elem.availableTimeList.Count - 1 do
      ComposePractitionerRoleAvailableTime(xml, 'availableTime', elem.availableTimeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('notAvailable') then
    for i := 0 to elem.notAvailableList.Count - 1 do
      ComposePractitionerRoleNotAvailable(xml, 'notAvailable', elem.notAvailableList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('availabilityExceptions') then
    ComposeString(xml, 'availabilityExceptions', elem.availabilityExceptionsElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('endpoint') then
    for i := 0 to elem.endpointList.Count - 1 do
      ComposeReference{TFhirEndpoint}(xml, 'endpoint', elem.endpointList[i]);
end;

{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
function TFHIRXmlParser.ParseProcedurePerformer(element : TMXmlElement; path : string) : TFhirProcedurePerformer;
var
  child : TMXmlElement;
begin
  result := TFhirProcedurePerformer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProcedurePerformerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProcedurePerformerChild(element : TFhirProcedurePerformer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'function') then
        element.function_ := ParseCodeableConcept(child, path+'/function') {b}
      else if (child.localName = 'actor') then
        element.actor := ParseReference{TFhirPractitioner}(child, path+'/actor') {b}
      else if (child.localName = 'onBehalfOf') then
        element.onBehalfOf := ParseReference{TFhirOrganization}(child, path+'/onBehalfOf') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProcedurePerformer(xml : TXmlBuilder; name : String; elem : TFhirProcedurePerformer);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeProcedurePerformerChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeProcedurePerformerChildren(xml : TXmlBuilder; elem : TFhirProcedurePerformer);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'function', elem.function_);{x.2a}
  ComposeReference{TFhirPractitioner}(xml, 'actor', elem.actor);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(xml, 'onBehalfOf', elem.onBehalfOf);{x.2a}
end;

function TFHIRXmlParser.ParseProcedureFocalDevice(element : TMXmlElement; path : string) : TFhirProcedureFocalDevice;
var
  child : TMXmlElement;
begin
  result := TFhirProcedureFocalDevice.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProcedureFocalDeviceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProcedureFocalDeviceChild(element : TFhirProcedureFocalDevice; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'action') then
        element.action := ParseCodeableConcept(child, path+'/action') {b}
      else if (child.localName = 'manipulated') then
        element.manipulated := ParseReference{TFhirDevice}(child, path+'/manipulated') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProcedureFocalDevice(xml : TXmlBuilder; name : String; elem : TFhirProcedureFocalDevice);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeProcedureFocalDeviceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeProcedureFocalDeviceChildren(xml : TXmlBuilder; elem : TFhirProcedureFocalDevice);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'action', elem.action);{x.2a}
  ComposeReference{TFhirDevice}(xml, 'manipulated', elem.manipulated);{x.2a}
end;

function TFHIRXmlParser.ParseProcedure(element : TMXmlElement; path : string) : TFhirProcedure;
var
  child : TMXmlElement;
begin
  result := TFhirProcedure.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProcedureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProcedureChild(element : TFhirProcedure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'instantiatesCanonical') then
        element.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')){y.2}
      else if (child.localName = 'instantiatesUri') then
        element.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirCarePlan}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'partOf') then
        element.partOfList.Add(ParseReference{TFhirProcedure}(child, path+'/partOf')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirEventStatusEnum, SYSTEMS_TFhirEventStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'statusReason') then
        element.statusReason := ParseCodeableConcept(child, path+'/statusReason') {b}
      else if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'performedPeriod') then
        element.performed := ParsePeriod(child, path+'/performedPeriod'){x.3}
      else if (child.localName = 'performedAge') then
        element.performed := ParseAge(child, path+'/performedAge'){x.3}
      else if (child.localName = 'performedRange') then
        element.performed := ParseRange(child, path+'/performedRange'){x.3}
      else if (child.localName = 'performedDateTime') then
        element.performed := ParseDateTime(child, path+'/performedDateTime'){x.3}
      else if (child.localName = 'performedString') then
        element.performed := ParseString(child, path+'/performedString'){x.3}
      else if (child.localName = 'recorder') then
        element.recorder := ParseReference{TFhirPatient}(child, path+'/recorder') {b}
      else if (child.localName = 'asserter') then
        element.asserter := ParseReference{TFhirPatient}(child, path+'/asserter') {b}
      else if (child.localName = 'performer') then
        element.performerList.Add(ParseProcedurePerformer(child, path+'/performer')){y.2}
      else if (child.localName = 'location') then
        element.location := ParseReference{TFhirLocation}(child, path+'/location') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'bodySite') then
        element.bodySiteList.Add(ParseCodeableConcept(child, path+'/bodySite')){y.2}
      else if (child.localName = 'outcome') then
        element.outcome := ParseCodeableConcept(child, path+'/outcome') {b}
      else if (child.localName = 'report') then
        element.reportList.Add(ParseReference{TFhirDiagnosticReport}(child, path+'/report')){y.2}
      else if (child.localName = 'complication') then
        element.complicationList.Add(ParseCodeableConcept(child, path+'/complication')){y.2}
      else if (child.localName = 'complicationDetail') then
        element.complicationDetailList.Add(ParseReference{TFhirCondition}(child, path+'/complicationDetail')){y.2}
      else if (child.localName = 'followUp') then
        element.followUpList.Add(ParseCodeableConcept(child, path+'/followUp')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'focalDevice') then
        element.focalDeviceList.Add(ParseProcedureFocalDevice(child, path+'/focalDevice')){y.2}
      else if (child.localName = 'usedReference') then
        element.usedReferenceList.Add(ParseReference{TFhirDevice}(child, path+'/usedReference')){y.2}
      else if (child.localName = 'usedCode') then
        element.usedCodeList.Add(ParseCodeableConcept(child, path+'/usedCode')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProcedure(xml : TXmlBuilder; name : String; elem : TFhirProcedure);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeProcedureChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeProcedureChildren(xml : TXmlBuilder; elem : TFhirProcedure);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesCanonical') then
    for i := 0 to elem.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', elem.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesUri') then
    for i := 0 to elem.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', elem.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirCarePlan}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') then
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirProcedure}(xml, 'partOf', elem.partOfList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirEventStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('statusReason') then
    ComposeCodeableConcept(xml, 'statusReason', elem.statusReason);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.performed is TFhirPeriod) {6} then
    ComposePeriod(xml, 'performedPeriod', TFhirPeriod(elem.performed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.performed is TFhirAge) {6} then
    ComposeAge(xml, 'performedAge', TFhirAge(elem.performed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.performed is TFhirRange) {6} then
    ComposeRange(xml, 'performedRange', TFhirRange(elem.performed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.performed is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'performedDateTime', TFhirDateTime(elem.performed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.performed is TFhirString) {6} then
    ComposeString(xml, 'performedString', TFhirString(elem.performed));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('recorder') then
    ComposeReference{TFhirPatient}(xml, 'recorder', elem.recorder);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('asserter') then
    ComposeReference{TFhirPatient}(xml, 'asserter', elem.asserter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') then
    for i := 0 to elem.performerList.Count - 1 do
      ComposeProcedurePerformer(xml, 'performer', elem.performerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(xml, 'location', elem.location);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('bodySite') then
    for i := 0 to elem.bodySiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'bodySite', elem.bodySiteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('outcome') then
    ComposeCodeableConcept(xml, 'outcome', elem.outcome);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('report') then
    for i := 0 to elem.reportList.Count - 1 do
      ComposeReference{TFhirDiagnosticReport}(xml, 'report', elem.reportList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('complication') then
    for i := 0 to elem.complicationList.Count - 1 do
      ComposeCodeableConcept(xml, 'complication', elem.complicationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('complicationDetail') then
    for i := 0 to elem.complicationDetailList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'complicationDetail', elem.complicationDetailList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('followUp') then
    for i := 0 to elem.followUpList.Count - 1 do
      ComposeCodeableConcept(xml, 'followUp', elem.followUpList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('focalDevice') then
    for i := 0 to elem.focalDeviceList.Count - 1 do
      ComposeProcedureFocalDevice(xml, 'focalDevice', elem.focalDeviceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('usedReference') then
    for i := 0 to elem.usedReferenceList.Count - 1 do
      ComposeReference{TFhirDevice}(xml, 'usedReference', elem.usedReferenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('usedCode') then
    for i := 0 to elem.usedCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'usedCode', elem.usedCodeList[i]);
end;

{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
function TFHIRXmlParser.ParseProvenanceAgent(element : TMXmlElement; path : string) : TFhirProvenanceAgent;
var
  child : TMXmlElement;
begin
  result := TFhirProvenanceAgent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProvenanceAgentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProvenanceAgentChild(element : TFhirProvenanceAgent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'role') then
        element.roleList.Add(ParseCodeableConcept(child, path+'/role')){y.2}
      else if (child.localName = 'who') then
        element.who := ParseReference{TFhirPractitioner}(child, path+'/who') {b}
      else if (child.localName = 'onBehalfOf') then
        element.onBehalfOf := ParseReference{TFhirPractitioner}(child, path+'/onBehalfOf') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProvenanceAgent(xml : TXmlBuilder; name : String; elem : TFhirProvenanceAgent);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeProvenanceAgentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeProvenanceAgentChildren(xml : TXmlBuilder; elem : TFhirProvenanceAgent);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.roleList.Count - 1 do
      ComposeCodeableConcept(xml, 'role', elem.roleList[i]);
  ComposeReference{TFhirPractitioner}(xml, 'who', elem.who);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'onBehalfOf', elem.onBehalfOf);{x.2a}
end;

function TFHIRXmlParser.ParseProvenanceEntity(element : TMXmlElement; path : string) : TFhirProvenanceEntity;
var
  child : TMXmlElement;
begin
  result := TFhirProvenanceEntity.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProvenanceEntityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProvenanceEntityChild(element : TFhirProvenanceEntity; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'role') then
        element.roleElement := ParseEnum(CODES_TFhirProvenanceEntityRoleEnum, SYSTEMS_TFhirProvenanceEntityRoleEnum, path+'/role', child){1a}
      else if (child.localName = 'what') then
        element.what := ParseReference{TFhirReference}(child, path+'/what') {b}
      else if (child.localName = 'agent') then
        element.agentList.Add(ParseProvenanceAgent(child, path+'/agent')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProvenanceEntity(xml : TXmlBuilder; name : String; elem : TFhirProvenanceEntity);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeProvenanceEntityChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeProvenanceEntityChildren(xml : TXmlBuilder; elem : TFhirProvenanceEntity);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'role', elem.RoleElement, CODES_TFhirProvenanceEntityRoleEnum);
  ComposeReference{TFhirReference}(xml, 'what', elem.what);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.agentList.Count - 1 do
      ComposeProvenanceAgent(xml, 'agent', elem.agentList[i]);
end;

function TFHIRXmlParser.ParseProvenance(element : TMXmlElement; path : string) : TFhirProvenance;
var
  child : TMXmlElement;
begin
  result := TFhirProvenance.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProvenanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProvenanceChild(element : TFhirProvenance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'target') then
        element.targetList.Add(ParseReference{TFhirReference}(child, path+'/target')){y.2}
      else if (child.localName = 'occurredPeriod') then
        element.occurred := ParsePeriod(child, path+'/occurredPeriod'){x.3}
      else if (child.localName = 'occurredDateTime') then
        element.occurred := ParseDateTime(child, path+'/occurredDateTime'){x.3}
      else if (child.localName = 'recorded') then
        element.recordedElement := ParseInstant(child, path+'/recorded') {b}
      else if (child.localName = 'policy') then
        element.policyList.Add(ParseUri(child, path+'/policy')){y.2}
      else if (child.localName = 'location') then
        element.location := ParseReference{TFhirLocation}(child, path+'/location') {b}
      else if (child.localName = 'reason') then
        element.reasonList.Add(ParseCodeableConcept(child, path+'/reason')){y.2}
      else if (child.localName = 'activity') then
        element.activity := ParseCodeableConcept(child, path+'/activity') {b}
      else if (child.localName = 'agent') then
        element.agentList.Add(ParseProvenanceAgent(child, path+'/agent')){y.2}
      else if (child.localName = 'entity') then
        element.entityList.Add(ParseProvenanceEntity(child, path+'/entity')){y.2}
      else if (child.localName = 'signature') then
        element.signatureList.Add(ParseSignature(child, path+'/signature')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProvenance(xml : TXmlBuilder; name : String; elem : TFhirProvenance);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeProvenanceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeProvenanceChildren(xml : TXmlBuilder; elem : TFhirProvenance);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  for i := 0 to elem.targetList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'target', elem.targetList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.occurred is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurredPeriod', TFhirPeriod(elem.occurred))
  else if (SummaryOption in [soFull, soData]) and (elem.occurred is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurredDateTime', TFhirDateTime(elem.occurred));
  ComposeInstant(xml, 'recorded', elem.recordedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('policy') then
    for i := 0 to elem.policyList.Count - 1 do
      ComposeUri(xml, 'policy', elem.policyList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(xml, 'location', elem.location);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('reason') then
    for i := 0 to elem.reasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'reason', elem.reasonList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('activity') then
    ComposeCodeableConcept(xml, 'activity', elem.activity);{x.2a}
  for i := 0 to elem.agentList.Count - 1 do
      ComposeProvenanceAgent(xml, 'agent', elem.agentList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('entity') then
    for i := 0 to elem.entityList.Count - 1 do
      ComposeProvenanceEntity(xml, 'entity', elem.entityList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('signature') then
    for i := 0 to elem.signatureList.Count - 1 do
      ComposeSignature(xml, 'signature', elem.signatureList[i]);
end;

{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
function TFHIRXmlParser.ParseQuestionnaireItem(element : TMXmlElement; path : string) : TFhirQuestionnaireItem;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaireItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireItemChild(element : TFhirQuestionnaireItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'linkId') then
        element.linkIdElement := ParseString(child, path+'/linkId') {b}
      else if (child.localName = 'definition') then
        element.definitionElement := ParseUri(child, path+'/definition') {b}
      else if (child.localName = 'code') then
        element.codeList.Add(ParseCoding(child, path+'/code')){y.2}
      else if (child.localName = 'prefix') then
        element.prefixElement := ParseString(child, path+'/prefix') {b}
      else if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirItemTypeEnum, SYSTEMS_TFhirItemTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'enableWhen') then
        element.enableWhenList.Add(ParseQuestionnaireItemEnableWhen(child, path+'/enableWhen')){y.2}
      else if (child.localName = 'enableBehavior') then
        element.enableBehaviorElement := ParseEnum(CODES_TFhirQuestionnaireEnableBehaviorEnum, SYSTEMS_TFhirQuestionnaireEnableBehaviorEnum, path+'/enableBehavior', child){1a}
      else if (child.localName = 'required') then
        element.requiredElement := ParseBoolean(child, path+'/required') {b}
      else if (child.localName = 'repeats') then
        element.repeatsElement := ParseBoolean(child, path+'/repeats') {b}
      else if (child.localName = 'readOnly') then
        element.readOnlyElement := ParseBoolean(child, path+'/readOnly') {b}
      else if (child.localName = 'maxLength') then
        element.maxLengthElement := ParseInteger(child, path+'/maxLength') {b}
      else if (child.localName = 'answerValueSet') then
        element.answerValueSetElement := ParseCanonical(child, path+'/answerValueSet') {b}
      else if (child.localName = 'answerOption') then
        element.answerOptionList.Add(ParseQuestionnaireItemAnswerOption(child, path+'/answerOption')){y.2}
      else if (child.localName = 'initial') then
        element.initialList.Add(ParseQuestionnaireItemInitial(child, path+'/initial')){y.2}
      else if (child.localName = 'item') then
        element.itemList.Add(ParseQuestionnaireItem(child, path+'/item')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItem(xml : TXmlBuilder; name : String; elem : TFhirQuestionnaireItem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeQuestionnaireItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItemChildren(xml : TXmlBuilder; elem : TFhirQuestionnaireItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'linkId', elem.linkIdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'definition', elem.definitionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCoding(xml, 'code', elem.codeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'prefix', elem.prefixElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', elem.textElement);{x.2b}
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirItemTypeEnum);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.enableWhenList.Count - 1 do
      ComposeQuestionnaireItemEnableWhen(xml, 'enableWhen', elem.enableWhenList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'enableBehavior', elem.EnableBehaviorElement, CODES_TFhirQuestionnaireEnableBehaviorEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'required', elem.requiredElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'repeats', elem.repeatsElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'readOnly', elem.readOnlyElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'maxLength', elem.maxLengthElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'answerValueSet', elem.answerValueSetElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.answerOptionList.Count - 1 do
      ComposeQuestionnaireItemAnswerOption(xml, 'answerOption', elem.answerOptionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.initialList.Count - 1 do
      ComposeQuestionnaireItemInitial(xml, 'initial', elem.initialList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireItem(xml, 'item', elem.itemList[i]);
end;

function TFHIRXmlParser.ParseQuestionnaireItemEnableWhen(element : TMXmlElement; path : string) : TFhirQuestionnaireItemEnableWhen;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaireItemEnableWhen.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireItemEnableWhenChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireItemEnableWhenChild(element : TFhirQuestionnaireItemEnableWhen; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'question') then
        element.questionElement := ParseString(child, path+'/question') {b}
      else if (child.localName = 'operator') then
        element.operatorElement := ParseEnum(CODES_TFhirQuestionnaireEnableOperatorEnum, SYSTEMS_TFhirQuestionnaireEnableOperatorEnum, path+'/operator', child){1a}
      else if (child.localName = 'answerCoding') then
        element.answer := ParseCoding(child, path+'/answerCoding'){x.3}
      else if (child.localName = 'answerQuantity') then
        element.answer := ParseQuantity(child, path+'/answerQuantity'){x.3}
      else if (child.localName = 'answerReference') then
        element.answer := ParseReference(child, path+'/answerReference') {a}
      else if (child.localName = 'answerBoolean') then
        element.answer := ParseBoolean(child, path+'/answerBoolean'){x.3}
      else if (child.localName = 'answerDecimal') then
        element.answer := ParseDecimal(child, path+'/answerDecimal'){x.3}
      else if (child.localName = 'answerInteger') then
        element.answer := ParseInteger(child, path+'/answerInteger'){x.3}
      else if (child.localName = 'answerDate') then
        element.answer := ParseDate(child, path+'/answerDate'){x.3}
      else if (child.localName = 'answerDateTime') then
        element.answer := ParseDateTime(child, path+'/answerDateTime'){x.3}
      else if (child.localName = 'answerTime') then
        element.answer := ParseTime(child, path+'/answerTime'){x.3}
      else if (child.localName = 'answerString') then
        element.answer := ParseString(child, path+'/answerString'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItemEnableWhen(xml : TXmlBuilder; name : String; elem : TFhirQuestionnaireItemEnableWhen);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeQuestionnaireItemEnableWhenChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItemEnableWhenChildren(xml : TXmlBuilder; elem : TFhirQuestionnaireItemEnableWhen);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'question', elem.questionElement);{x.2b}
  ComposeEnum(xml, 'operator', elem.OperatorElement, CODES_TFhirQuestionnaireEnableOperatorEnum);
  if (elem.answer is TFhirCoding) {6} then
    ComposeCoding(xml, 'answerCoding', TFhirCoding(elem.answer))
  else if (elem.answer is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'answerQuantity', TFhirQuantity(elem.answer))
  else if (elem.answer is TFhirReference) {2} then
    ComposeReference(xml, 'answerReference', TFhirReference(elem.answer))
  else if (elem.answer is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'answerBoolean', TFhirBoolean(elem.answer))
  else if (elem.answer is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'answerDecimal', TFhirDecimal(elem.answer))
  else if (elem.answer is TFhirInteger) {6} then
    ComposeInteger(xml, 'answerInteger', TFhirInteger(elem.answer))
  else if (elem.answer is TFhirDate) {6} then
    ComposeDate(xml, 'answerDate', TFhirDate(elem.answer))
  else if (elem.answer is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'answerDateTime', TFhirDateTime(elem.answer))
  else if (elem.answer is TFhirTime) {6} then
    ComposeTime(xml, 'answerTime', TFhirTime(elem.answer))
  else if (elem.answer is TFhirString) {6} then
    ComposeString(xml, 'answerString', TFhirString(elem.answer));
end;

function TFHIRXmlParser.ParseQuestionnaireItemAnswerOption(element : TMXmlElement; path : string) : TFhirQuestionnaireItemAnswerOption;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaireItemAnswerOption.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireItemAnswerOptionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireItemAnswerOptionChild(element : TFhirQuestionnaireItemAnswerOption; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'valueCoding') then
        element.value := ParseCoding(child, path+'/valueCoding'){x.3}
      else if (child.localName = 'valueReference') then
        element.value := ParseReference(child, path+'/valueReference') {a}
      else if (child.localName = 'valueInteger') then
        element.value := ParseInteger(child, path+'/valueInteger'){x.3}
      else if (child.localName = 'valueDate') then
        element.value := ParseDate(child, path+'/valueDate'){x.3}
      else if (child.localName = 'valueTime') then
        element.value := ParseTime(child, path+'/valueTime'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'initialSelected') then
        element.initialSelectedElement := ParseBoolean(child, path+'/initialSelected') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItemAnswerOption(xml : TXmlBuilder; name : String; elem : TFhirQuestionnaireItemAnswerOption);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeQuestionnaireItemAnswerOptionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItemAnswerOptionChildren(xml : TXmlBuilder; elem : TFhirQuestionnaireItemAnswerOption);
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(elem.value))
  else if (elem.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(elem.value))
  else if (elem.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(elem.value))
  else if (elem.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(elem.value))
  else if (elem.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(elem.value))
  else if (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value));
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'initialSelected', elem.initialSelectedElement);{x.2b}
end;

function TFHIRXmlParser.ParseQuestionnaireItemInitial(element : TMXmlElement; path : string) : TFhirQuestionnaireItemInitial;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaireItemInitial.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireItemInitialChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireItemInitialChild(element : TFhirQuestionnaireItemInitial; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'valueAttachment') then
        element.value := ParseAttachment(child, path+'/valueAttachment'){x.3}
      else if (child.localName = 'valueCoding') then
        element.value := ParseCoding(child, path+'/valueCoding'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueReference') then
        element.value := ParseReference(child, path+'/valueReference') {a}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueDecimal') then
        element.value := ParseDecimal(child, path+'/valueDecimal'){x.3}
      else if (child.localName = 'valueInteger') then
        element.value := ParseInteger(child, path+'/valueInteger'){x.3}
      else if (child.localName = 'valueDate') then
        element.value := ParseDate(child, path+'/valueDate'){x.3}
      else if (child.localName = 'valueDateTime') then
        element.value := ParseDateTime(child, path+'/valueDateTime'){x.3}
      else if (child.localName = 'valueTime') then
        element.value := ParseTime(child, path+'/valueTime'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueUri') then
        element.value := ParseUri(child, path+'/valueUri'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItemInitial(xml : TXmlBuilder; name : String; elem : TFhirQuestionnaireItemInitial);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeQuestionnaireItemInitialChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItemInitialChildren(xml : TXmlBuilder; elem : TFhirQuestionnaireItemInitial);
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(elem.value))
  else if (elem.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(elem.value))
  else if (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (elem.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(elem.value))
  else if (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (elem.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(elem.value))
  else if (elem.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(elem.value))
  else if (elem.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(elem.value))
  else if (elem.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(elem.value))
  else if (elem.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(elem.value))
  else if (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (elem.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(elem.value));
end;

function TFHIRXmlParser.ParseQuestionnaire(element : TMXmlElement; path : string) : TFhirQuestionnaire;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaire.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireChild(element : TFhirQuestionnaire; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'derivedFrom') then
        element.derivedFromList.Add(ParseCanonical(child, path+'/derivedFrom')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'subjectType') then
        element.subjectType.Add(ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, path+'/subjectType', child)){y.1}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'approvalDate') then
        element.approvalDateElement := ParseDate(child, path+'/approvalDate') {b}
      else if (child.localName = 'lastReviewDate') then
        element.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {b}
      else if (child.localName = 'code') then
        element.codeList.Add(ParseCoding(child, path+'/code')){y.2}
      else if (child.localName = 'item') then
        element.itemList.Add(ParseQuestionnaireItem(child, path+'/item')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaire(xml : TXmlBuilder; name : String; elem : TFhirQuestionnaire);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeQuestionnaireChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireChildren(xml : TXmlBuilder; elem : TFhirQuestionnaire);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('derivedFrom') then
    for i := 0 to elem.derivedFromList.Count - 1 do
      ComposeCanonical(xml, 'derivedFrom', elem.derivedFromList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subjectType') then
    for i := 0 to elem.subjectType.Count - 1 do
      ComposeEnum(xml, 'subjectType', elem.subjectType[i], CODES_TFhirResourceTypesEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDate(xml, 'approvalDate', elem.approvalDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDate(xml, 'lastReviewDate', elem.lastReviewDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(xml, 'effectivePeriod', elem.effectivePeriod);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCoding(xml, 'code', elem.codeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('item') then
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireItem(xml, 'item', elem.itemList[i]);
end;

{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
function TFHIRXmlParser.ParseQuestionnaireResponseItem(element : TMXmlElement; path : string) : TFhirQuestionnaireResponseItem;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaireResponseItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireResponseItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireResponseItemChild(element : TFhirQuestionnaireResponseItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'linkId') then
        element.linkIdElement := ParseString(child, path+'/linkId') {b}
      else if (child.localName = 'definition') then
        element.definitionElement := ParseUri(child, path+'/definition') {b}
      else if (child.localName = 'text') then
        element.textElement := ParseString(child, path+'/text') {b}
      else if (child.localName = 'answer') then
        element.answerList.Add(ParseQuestionnaireResponseItemAnswer(child, path+'/answer')){y.2}
      else if (child.localName = 'item') then
        element.itemList.Add(ParseQuestionnaireResponseItem(child, path+'/item')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireResponseItem(xml : TXmlBuilder; name : String; elem : TFhirQuestionnaireResponseItem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeQuestionnaireResponseItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireResponseItemChildren(xml : TXmlBuilder; elem : TFhirQuestionnaireResponseItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'linkId', elem.linkIdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'definition', elem.definitionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', elem.textElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.answerList.Count - 1 do
      ComposeQuestionnaireResponseItemAnswer(xml, 'answer', elem.answerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(xml, 'item', elem.itemList[i]);
end;

function TFHIRXmlParser.ParseQuestionnaireResponseItemAnswer(element : TMXmlElement; path : string) : TFhirQuestionnaireResponseItemAnswer;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaireResponseItemAnswer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireResponseItemAnswerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireResponseItemAnswerChild(element : TFhirQuestionnaireResponseItemAnswer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'valueAttachment') then
        element.value := ParseAttachment(child, path+'/valueAttachment'){x.3}
      else if (child.localName = 'valueCoding') then
        element.value := ParseCoding(child, path+'/valueCoding'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueReference') then
        element.value := ParseReference(child, path+'/valueReference') {a}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueDecimal') then
        element.value := ParseDecimal(child, path+'/valueDecimal'){x.3}
      else if (child.localName = 'valueInteger') then
        element.value := ParseInteger(child, path+'/valueInteger'){x.3}
      else if (child.localName = 'valueDate') then
        element.value := ParseDate(child, path+'/valueDate'){x.3}
      else if (child.localName = 'valueDateTime') then
        element.value := ParseDateTime(child, path+'/valueDateTime'){x.3}
      else if (child.localName = 'valueTime') then
        element.value := ParseTime(child, path+'/valueTime'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueUri') then
        element.value := ParseUri(child, path+'/valueUri'){x.3}
      else if (child.localName = 'item') then
        element.itemList.Add(ParseQuestionnaireResponseItem(child, path+'/item')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireResponseItemAnswer(xml : TXmlBuilder; name : String; elem : TFhirQuestionnaireResponseItemAnswer);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeQuestionnaireResponseItemAnswerChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireResponseItemAnswerChildren(xml : TXmlBuilder; elem : TFhirQuestionnaireResponseItemAnswer);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and (elem.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(elem.value));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(xml, 'item', elem.itemList[i]);
end;

function TFHIRXmlParser.ParseQuestionnaireResponse(element : TMXmlElement; path : string) : TFhirQuestionnaireResponse;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaireResponse.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireResponseChild(element : TFhirQuestionnaireResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirCarePlan}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'partOf') then
        element.partOfList.Add(ParseReference{TFhirObservation}(child, path+'/partOf')){y.2}
      else if (child.localName = 'questionnaire') then
        element.questionnaireElement := ParseCanonical(child, path+'/questionnaire') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirQuestionnaireAnswersStatusEnum, SYSTEMS_TFhirQuestionnaireAnswersStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirReference}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'authored') then
        element.authoredElement := ParseDateTime(child, path+'/authored') {b}
      else if (child.localName = 'author') then
        element.author := ParseReference{TFhirDevice}(child, path+'/author') {b}
      else if (child.localName = 'source') then
        element.source := ParseReference{TFhirPatient}(child, path+'/source') {b}
      else if (child.localName = 'item') then
        element.itemList.Add(ParseQuestionnaireResponseItem(child, path+'/item')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireResponse(xml : TXmlBuilder; name : String; elem : TFhirQuestionnaireResponse);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeQuestionnaireResponseChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireResponseChildren(xml : TXmlBuilder; elem : TFhirQuestionnaireResponse);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirCarePlan}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') then
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirObservation}(xml, 'partOf', elem.partOfList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('questionnaire') then
    ComposeCanonical(xml, 'questionnaire', elem.questionnaireElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirQuestionnaireAnswersStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirReference}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authored') then
    ComposeDateTime(xml, 'authored', elem.authoredElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('author') then
    ComposeReference{TFhirDevice}(xml, 'author', elem.author);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('source') then
    ComposeReference{TFhirPatient}(xml, 'source', elem.source);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('item') then
    for i := 0 to elem.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(xml, 'item', elem.itemList[i]);
end;

{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_RELATEDPERSON}
function TFHIRXmlParser.ParseRelatedPersonCommunication(element : TMXmlElement; path : string) : TFhirRelatedPersonCommunication;
var
  child : TMXmlElement;
begin
  result := TFhirRelatedPersonCommunication.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRelatedPersonCommunicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRelatedPersonCommunicationChild(element : TFhirRelatedPersonCommunication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'language') then
        element.language := ParseCodeableConcept(child, path+'/language') {b}
      else if (child.localName = 'preferred') then
        element.preferredElement := ParseBoolean(child, path+'/preferred') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRelatedPersonCommunication(xml : TXmlBuilder; name : String; elem : TFhirRelatedPersonCommunication);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeRelatedPersonCommunicationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRelatedPersonCommunicationChildren(xml : TXmlBuilder; elem : TFhirRelatedPersonCommunication);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'language', elem.language);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'preferred', elem.preferredElement);{x.2b}
end;

function TFHIRXmlParser.ParseRelatedPerson(element : TMXmlElement; path : string) : TFhirRelatedPerson;
var
  child : TMXmlElement;
begin
  result := TFhirRelatedPerson.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRelatedPersonChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRelatedPersonChild(element : TFhirRelatedPerson; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'active') then
        element.activeElement := ParseBoolean(child, path+'/active') {b}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'relationship') then
        element.relationshipList.Add(ParseCodeableConcept(child, path+'/relationship')){y.2}
      else if (child.localName = 'name') then
        element.nameList.Add(ParseHumanName(child, path+'/name')){y.2}
      else if (child.localName = 'telecom') then
        element.telecomList.Add(ParseContactPoint(child, path+'/telecom')){y.2}
      else if (child.localName = 'gender') then
        element.genderElement := ParseEnum(CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum, path+'/gender', child){1a}
      else if (child.localName = 'birthDate') then
        element.birthDateElement := ParseDate(child, path+'/birthDate') {b}
      else if (child.localName = 'address') then
        element.addressList.Add(ParseAddress(child, path+'/address')){y.2}
      else if (child.localName = 'photo') then
        element.photoList.Add(ParseAttachment(child, path+'/photo')){y.2}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'communication') then
        element.communicationList.Add(ParseRelatedPersonCommunication(child, path+'/communication')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRelatedPerson(xml : TXmlBuilder; name : String; elem : TFhirRelatedPerson);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeRelatedPersonChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRelatedPersonChildren(xml : TXmlBuilder; elem : TFhirRelatedPerson);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposeBoolean(xml, 'active', elem.activeElement);{x.2b}
  ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('relationship') then
    for i := 0 to elem.relationshipList.Count - 1 do
      ComposeCodeableConcept(xml, 'relationship', elem.relationshipList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    for i := 0 to elem.nameList.Count - 1 do
      ComposeHumanName(xml, 'name', elem.nameList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('telecom') then
    for i := 0 to elem.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', elem.telecomList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gender') then
    ComposeEnum(xml, 'gender', elem.GenderElement, CODES_TFhirAdministrativeGenderEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('birthDate') then
    ComposeDate(xml, 'birthDate', elem.birthDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('address') then
    for i := 0 to elem.addressList.Count - 1 do
      ComposeAddress(xml, 'address', elem.addressList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('photo') then
    for i := 0 to elem.photoList.Count - 1 do
      ComposeAttachment(xml, 'photo', elem.photoList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('communication') then
    for i := 0 to elem.communicationList.Count - 1 do
      ComposeRelatedPersonCommunication(xml, 'communication', elem.communicationList[i]);
end;

{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
function TFHIRXmlParser.ParseRequestGroupAction(element : TMXmlElement; path : string) : TFhirRequestGroupAction;
var
  child : TMXmlElement;
begin
  result := TFhirRequestGroupAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRequestGroupActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRequestGroupActionChild(element : TFhirRequestGroupAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'prefix') then
        element.prefixElement := ParseString(child, path+'/prefix') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'textEquivalent') then
        element.textEquivalentElement := ParseString(child, path+'/textEquivalent') {b}
      else if (child.localName = 'priority') then
        element.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, path+'/priority', child){1a}
      else if (child.localName = 'code') then
        element.codeList.Add(ParseCodeableConcept(child, path+'/code')){y.2}
      else if (child.localName = 'documentation') then
        element.documentationList.Add(ParseRelatedArtifact(child, path+'/documentation')){y.2}
      else if (child.localName = 'condition') then
        element.conditionList.Add(ParseRequestGroupActionCondition(child, path+'/condition')){y.2}
      else if (child.localName = 'relatedAction') then
        element.relatedActionList.Add(ParseRequestGroupActionRelatedAction(child, path+'/relatedAction')){y.2}
      else if (child.localName = 'timingAge') then
        element.timing := ParseAge(child, path+'/timingAge'){x.3}
      else if (child.localName = 'timingPeriod') then
        element.timing := ParsePeriod(child, path+'/timingPeriod'){x.3}
      else if (child.localName = 'timingDuration') then
        element.timing := ParseDuration(child, path+'/timingDuration'){x.3}
      else if (child.localName = 'timingRange') then
        element.timing := ParseRange(child, path+'/timingRange'){x.3}
      else if (child.localName = 'timingTiming') then
        element.timing := ParseTiming(child, path+'/timingTiming'){x.3}
      else if (child.localName = 'timingDateTime') then
        element.timing := ParseDateTime(child, path+'/timingDateTime'){x.3}
      else if (child.localName = 'participant') then
        element.participantList.Add(ParseReference{TFhirPatient}(child, path+'/participant')){y.2}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'groupingBehavior') then
        element.groupingBehaviorElement := ParseEnum(CODES_TFhirActionGroupingBehaviorEnum, SYSTEMS_TFhirActionGroupingBehaviorEnum, path+'/groupingBehavior', child){1a}
      else if (child.localName = 'selectionBehavior') then
        element.selectionBehaviorElement := ParseEnum(CODES_TFhirActionSelectionBehaviorEnum, SYSTEMS_TFhirActionSelectionBehaviorEnum, path+'/selectionBehavior', child){1a}
      else if (child.localName = 'requiredBehavior') then
        element.requiredBehaviorElement := ParseEnum(CODES_TFhirActionRequiredBehaviorEnum, SYSTEMS_TFhirActionRequiredBehaviorEnum, path+'/requiredBehavior', child){1a}
      else if (child.localName = 'precheckBehavior') then
        element.precheckBehaviorElement := ParseEnum(CODES_TFhirActionPrecheckBehaviorEnum, SYSTEMS_TFhirActionPrecheckBehaviorEnum, path+'/precheckBehavior', child){1a}
      else if (child.localName = 'cardinalityBehavior') then
        element.cardinalityBehaviorElement := ParseEnum(CODES_TFhirActionCardinalityBehaviorEnum, SYSTEMS_TFhirActionCardinalityBehaviorEnum, path+'/cardinalityBehavior', child){1a}
      else if (child.localName = 'resource') then
        element.resource := ParseReference{TFhirReference}(child, path+'/resource') {b}
      else if (child.localName = 'action') then
        element.actionList.Add(ParseRequestGroupAction(child, path+'/action')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRequestGroupAction(xml : TXmlBuilder; name : String; elem : TFhirRequestGroupAction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeRequestGroupActionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRequestGroupActionChildren(xml : TXmlBuilder; elem : TFhirRequestGroupAction);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'prefix', elem.prefixElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'textEquivalent', elem.textEquivalentElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', elem.codeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.documentationList.Count - 1 do
      ComposeRelatedArtifact(xml, 'documentation', elem.documentationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.conditionList.Count - 1 do
      ComposeRequestGroupActionCondition(xml, 'condition', elem.conditionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.relatedActionList.Count - 1 do
      ComposeRequestGroupActionRelatedAction(xml, 'relatedAction', elem.relatedActionList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirAge) {6} then
    ComposeAge(xml, 'timingAge', TFhirAge(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timingPeriod', TFhirPeriod(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDuration) {6} then
    ComposeDuration(xml, 'timingDuration', TFhirDuration(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirRange) {6} then
    ComposeRange(xml, 'timingRange', TFhirRange(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirTiming) {6} then
    ComposeTiming(xml, 'timingTiming', TFhirTiming(elem.timing))
  else if (SummaryOption in [soFull, soData]) and (elem.timing is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timingDateTime', TFhirDateTime(elem.timing));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.participantList.Count - 1 do
      ComposeReference{TFhirPatient}(xml, 'participant', elem.participantList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'groupingBehavior', elem.GroupingBehaviorElement, CODES_TFhirActionGroupingBehaviorEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'selectionBehavior', elem.SelectionBehaviorElement, CODES_TFhirActionSelectionBehaviorEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'requiredBehavior', elem.RequiredBehaviorElement, CODES_TFhirActionRequiredBehaviorEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'precheckBehavior', elem.PrecheckBehaviorElement, CODES_TFhirActionPrecheckBehaviorEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'cardinalityBehavior', elem.CardinalityBehaviorElement, CODES_TFhirActionCardinalityBehaviorEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(xml, 'resource', elem.resource);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.actionList.Count - 1 do
      ComposeRequestGroupAction(xml, 'action', elem.actionList[i]);
end;

function TFHIRXmlParser.ParseRequestGroupActionCondition(element : TMXmlElement; path : string) : TFhirRequestGroupActionCondition;
var
  child : TMXmlElement;
begin
  result := TFhirRequestGroupActionCondition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRequestGroupActionConditionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRequestGroupActionConditionChild(element : TFhirRequestGroupActionCondition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'kind') then
        element.kindElement := ParseEnum(CODES_TFhirActionConditionKindEnum, SYSTEMS_TFhirActionConditionKindEnum, path+'/kind', child){1a}
      else if (child.localName = 'expression') then
        element.expression := ParseExpression(child, path+'/expression') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRequestGroupActionCondition(xml : TXmlBuilder; name : String; elem : TFhirRequestGroupActionCondition);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeRequestGroupActionConditionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRequestGroupActionConditionChildren(xml : TXmlBuilder; elem : TFhirRequestGroupActionCondition);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'kind', elem.KindElement, CODES_TFhirActionConditionKindEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeExpression(xml, 'expression', elem.expression);{x.2a}
end;

function TFHIRXmlParser.ParseRequestGroupActionRelatedAction(element : TMXmlElement; path : string) : TFhirRequestGroupActionRelatedAction;
var
  child : TMXmlElement;
begin
  result := TFhirRequestGroupActionRelatedAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRequestGroupActionRelatedActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRequestGroupActionRelatedActionChild(element : TFhirRequestGroupActionRelatedAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'actionId') then
        element.actionIdElement := ParseId(child, path+'/actionId') {b}
      else if (child.localName = 'relationship') then
        element.relationshipElement := ParseEnum(CODES_TFhirActionRelationshipTypeEnum, SYSTEMS_TFhirActionRelationshipTypeEnum, path+'/relationship', child){1a}
      else if (child.localName = 'offsetDuration') then
        element.offset := ParseDuration(child, path+'/offsetDuration'){x.3}
      else if (child.localName = 'offsetRange') then
        element.offset := ParseRange(child, path+'/offsetRange'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRequestGroupActionRelatedAction(xml : TXmlBuilder; name : String; elem : TFhirRequestGroupActionRelatedAction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeRequestGroupActionRelatedActionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRequestGroupActionRelatedActionChildren(xml : TXmlBuilder; elem : TFhirRequestGroupActionRelatedAction);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeId(xml, 'actionId', elem.actionIdElement);{x.2b}
  ComposeEnum(xml, 'relationship', elem.RelationshipElement, CODES_TFhirActionRelationshipTypeEnum);
  if (SummaryOption in [soFull, soData]) and (elem.offset is TFhirDuration) {6} then
    ComposeDuration(xml, 'offsetDuration', TFhirDuration(elem.offset))
  else if (SummaryOption in [soFull, soData]) and (elem.offset is TFhirRange) {6} then
    ComposeRange(xml, 'offsetRange', TFhirRange(elem.offset));
end;

function TFHIRXmlParser.ParseRequestGroup(element : TMXmlElement; path : string) : TFhirRequestGroup;
var
  child : TMXmlElement;
begin
  result := TFhirRequestGroup.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRequestGroupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRequestGroupChild(element : TFhirRequestGroup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'instantiatesCanonical') then
        element.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')){y.2}
      else if (child.localName = 'instantiatesUri') then
        element.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirReference}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'replaces') then
        element.replacesList.Add(ParseReference{TFhirReference}(child, path+'/replaces')){y.2}
      else if (child.localName = 'groupIdentifier') then
        element.groupIdentifier := ParseIdentifier(child, path+'/groupIdentifier') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'intent') then
        element.intentElement := ParseEnum(CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum, path+'/intent', child){1a}
      else if (child.localName = 'priority') then
        element.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, path+'/priority', child){1a}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'authoredOn') then
        element.authoredOnElement := ParseDateTime(child, path+'/authoredOn') {b}
      else if (child.localName = 'author') then
        element.author := ParseReference{TFhirDevice}(child, path+'/author') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'action') then
        element.actionList.Add(ParseRequestGroupAction(child, path+'/action')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRequestGroup(xml : TXmlBuilder; name : String; elem : TFhirRequestGroup);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeRequestGroupChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRequestGroupChildren(xml : TXmlBuilder; elem : TFhirRequestGroup);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesCanonical') then
    for i := 0 to elem.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', elem.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesUri') then
    for i := 0 to elem.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', elem.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('replaces') then
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'replaces', elem.replacesList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('groupIdentifier') then
    ComposeIdentifier(xml, 'groupIdentifier', elem.groupIdentifier);{x.2a}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum);
  ComposeEnum(xml, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnum(xml, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('authoredOn') then
    ComposeDateTime(xml, 'authoredOn', elem.authoredOnElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('author') then
    ComposeReference{TFhirDevice}(xml, 'author', elem.author);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('action') then
    for i := 0 to elem.actionList.Count - 1 do
      ComposeRequestGroupAction(xml, 'action', elem.actionList[i]);
end;

{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHDEFINITION}
function TFHIRXmlParser.ParseResearchDefinition(element : TMXmlElement; path : string) : TFhirResearchDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirResearchDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseResearchDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseResearchDefinitionChild(element : TFhirResearchDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'shortTitle') then
        element.shortTitleElement := ParseString(child, path+'/shortTitle') {b}
      else if (child.localName = 'subtitle') then
        element.subtitleElement := ParseString(child, path+'/subtitle') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'subjectCodeableConcept') then
        element.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept'){x.3}
      else if (child.localName = 'subjectReference') then
        element.subject := ParseReference(child, path+'/subjectReference') {a}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'comment') then
        element.commentList.Add(ParseString(child, path+'/comment')){y.2}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'usage') then
        element.usageElement := ParseString(child, path+'/usage') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'approvalDate') then
        element.approvalDateElement := ParseDate(child, path+'/approvalDate') {b}
      else if (child.localName = 'lastReviewDate') then
        element.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {b}
      else if (child.localName = 'topic') then
        element.topicList.Add(ParseCodeableConcept(child, path+'/topic')){y.2}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseContactDetail(child, path+'/author')){y.2}
      else if (child.localName = 'editor') then
        element.editorList.Add(ParseContactDetail(child, path+'/editor')){y.2}
      else if (child.localName = 'reviewer') then
        element.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')){y.2}
      else if (child.localName = 'endorser') then
        element.endorserList.Add(ParseContactDetail(child, path+'/endorser')){y.2}
      else if (child.localName = 'relatedArtifact') then
        element.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')){y.2}
      else if (child.localName = 'library') then
        element.library_List.Add(ParseCanonical(child, path+'/library')){y.2}
      else if (child.localName = 'population') then
        element.population := ParseReference{TFhirResearchElementDefinition}(child, path+'/population') {b}
      else if (child.localName = 'exposure') then
        element.exposure := ParseReference{TFhirResearchElementDefinition}(child, path+'/exposure') {b}
      else if (child.localName = 'exposureAlternative') then
        element.exposureAlternative := ParseReference{TFhirResearchElementDefinition}(child, path+'/exposureAlternative') {b}
      else if (child.localName = 'outcome') then
        element.outcome := ParseReference{TFhirResearchElementDefinition}(child, path+'/outcome') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeResearchDefinition(xml : TXmlBuilder; name : String; elem : TFhirResearchDefinition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeResearchDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeResearchDefinitionChildren(xml : TXmlBuilder; elem : TFhirResearchDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('shortTitle') then
    ComposeString(xml, 'shortTitle', elem.shortTitleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('subtitle') then
    ComposeString(xml, 'subtitle', elem.subtitleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(elem.subject))
  else if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(elem.subject));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    for i := 0 to elem.commentList.Count - 1 do
      ComposeString(xml, 'comment', elem.commentList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeString(xml, 'usage', elem.usageElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDate(xml, 'approvalDate', elem.approvalDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDate(xml, 'lastReviewDate', elem.lastReviewDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(xml, 'effectivePeriod', elem.effectivePeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('topic') then
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', elem.topicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('author') then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('editor') then
    for i := 0 to elem.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', elem.editorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reviewer') then
    for i := 0 to elem.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', elem.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('endorser') then
    for i := 0 to elem.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', elem.endorserList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') then
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', elem.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('library_') then
    for i := 0 to elem.library_List.Count - 1 do
      ComposeCanonical(xml, 'library', elem.library_List[i]);
  ComposeReference{TFhirResearchElementDefinition}(xml, 'population', elem.population);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('exposure') then
    ComposeReference{TFhirResearchElementDefinition}(xml, 'exposure', elem.exposure);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('exposureAlternative') then
    ComposeReference{TFhirResearchElementDefinition}(xml, 'exposureAlternative', elem.exposureAlternative);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('outcome') then
    ComposeReference{TFhirResearchElementDefinition}(xml, 'outcome', elem.outcome);{x.2a}
end;

{$ENDIF FHIR_RESEARCHDEFINITION}
{$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
function TFHIRXmlParser.ParseResearchElementDefinitionCharacteristic(element : TMXmlElement; path : string) : TFhirResearchElementDefinitionCharacteristic;
var
  child : TMXmlElement;
begin
  result := TFhirResearchElementDefinitionCharacteristic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseResearchElementDefinitionCharacteristicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseResearchElementDefinitionCharacteristicChild(element : TFhirResearchElementDefinitionCharacteristic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'definitionCodeableConcept') then
        element.definition := ParseCodeableConcept(child, path+'/definitionCodeableConcept'){x.3}
      else if (child.localName = 'definitionCanonical') then
        element.definition := ParseCanonical(child, path+'/definitionCanonical'){x.3}
      else if (child.localName = 'definitionExpression') then
        element.definition := ParseExpression(child, path+'/definitionExpression'){x.3}
      else if (child.localName = 'definitionDataRequirement') then
        element.definition := ParseDataRequirement(child, path+'/definitionDataRequirement'){x.3}
      else if (child.localName = 'usageContext') then
        element.usageContextList.Add(ParseUsageContext(child, path+'/usageContext')){y.2}
      else if (child.localName = 'exclude') then
        element.excludeElement := ParseBoolean(child, path+'/exclude') {b}
      else if (child.localName = 'unitOfMeasure') then
        element.unitOfMeasure := ParseCodeableConcept(child, path+'/unitOfMeasure') {b}
      else if (child.localName = 'studyEffectiveDescription') then
        element.studyEffectiveDescriptionElement := ParseString(child, path+'/studyEffectiveDescription') {b}
      else if (child.localName = 'studyEffectivePeriod') then
        element.studyEffective := ParsePeriod(child, path+'/studyEffectivePeriod'){x.3}
      else if (child.localName = 'studyEffectiveDuration') then
        element.studyEffective := ParseDuration(child, path+'/studyEffectiveDuration'){x.3}
      else if (child.localName = 'studyEffectiveTiming') then
        element.studyEffective := ParseTiming(child, path+'/studyEffectiveTiming'){x.3}
      else if (child.localName = 'studyEffectiveDateTime') then
        element.studyEffective := ParseDateTime(child, path+'/studyEffectiveDateTime'){x.3}
      else if (child.localName = 'studyEffectiveTimeFromStart') then
        element.studyEffectiveTimeFromStart := ParseDuration(child, path+'/studyEffectiveTimeFromStart') {b}
      else if (child.localName = 'studyEffectiveGroupMeasure') then
        element.studyEffectiveGroupMeasureElement := ParseEnum(CODES_TFhirGroupMeasureEnum, SYSTEMS_TFhirGroupMeasureEnum, path+'/studyEffectiveGroupMeasure', child){1a}
      else if (child.localName = 'participantEffectiveDescription') then
        element.participantEffectiveDescriptionElement := ParseString(child, path+'/participantEffectiveDescription') {b}
      else if (child.localName = 'participantEffectivePeriod') then
        element.participantEffective := ParsePeriod(child, path+'/participantEffectivePeriod'){x.3}
      else if (child.localName = 'participantEffectiveDuration') then
        element.participantEffective := ParseDuration(child, path+'/participantEffectiveDuration'){x.3}
      else if (child.localName = 'participantEffectiveTiming') then
        element.participantEffective := ParseTiming(child, path+'/participantEffectiveTiming'){x.3}
      else if (child.localName = 'participantEffectiveDateTime') then
        element.participantEffective := ParseDateTime(child, path+'/participantEffectiveDateTime'){x.3}
      else if (child.localName = 'participantEffectiveTimeFromStart') then
        element.participantEffectiveTimeFromStart := ParseDuration(child, path+'/participantEffectiveTimeFromStart') {b}
      else if (child.localName = 'participantEffectiveGroupMeasure') then
        element.participantEffectiveGroupMeasureElement := ParseEnum(CODES_TFhirGroupMeasureEnum, SYSTEMS_TFhirGroupMeasureEnum, path+'/participantEffectiveGroupMeasure', child){1a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeResearchElementDefinitionCharacteristic(xml : TXmlBuilder; name : String; elem : TFhirResearchElementDefinitionCharacteristic);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeResearchElementDefinitionCharacteristicChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeResearchElementDefinitionCharacteristicChildren(xml : TXmlBuilder; elem : TFhirResearchElementDefinitionCharacteristic);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.definition is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'definitionCodeableConcept', TFhirCodeableConcept(elem.definition))
  else if (elem.definition is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'definitionCanonical', TFhirCanonical(elem.definition))
  else if (elem.definition is TFhirExpression) {6} then
    ComposeExpression(xml, 'definitionExpression', TFhirExpression(elem.definition))
  else if (elem.definition is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'definitionDataRequirement', TFhirDataRequirement(elem.definition));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.usageContextList.Count - 1 do
      ComposeUsageContext(xml, 'usageContext', elem.usageContextList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'exclude', elem.excludeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'unitOfMeasure', elem.unitOfMeasure);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'studyEffectiveDescription', elem.studyEffectiveDescriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.studyEffective is TFhirPeriod) {6} then
    ComposePeriod(xml, 'studyEffectivePeriod', TFhirPeriod(elem.studyEffective))
  else if (SummaryOption in [soFull, soData]) and (elem.studyEffective is TFhirDuration) {6} then
    ComposeDuration(xml, 'studyEffectiveDuration', TFhirDuration(elem.studyEffective))
  else if (SummaryOption in [soFull, soData]) and (elem.studyEffective is TFhirTiming) {6} then
    ComposeTiming(xml, 'studyEffectiveTiming', TFhirTiming(elem.studyEffective))
  else if (SummaryOption in [soFull, soData]) and (elem.studyEffective is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'studyEffectiveDateTime', TFhirDateTime(elem.studyEffective));
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'studyEffectiveTimeFromStart', elem.studyEffectiveTimeFromStart);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'studyEffectiveGroupMeasure', elem.StudyEffectiveGroupMeasureElement, CODES_TFhirGroupMeasureEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'participantEffectiveDescription', elem.participantEffectiveDescriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.participantEffective is TFhirPeriod) {6} then
    ComposePeriod(xml, 'participantEffectivePeriod', TFhirPeriod(elem.participantEffective))
  else if (SummaryOption in [soFull, soData]) and (elem.participantEffective is TFhirDuration) {6} then
    ComposeDuration(xml, 'participantEffectiveDuration', TFhirDuration(elem.participantEffective))
  else if (SummaryOption in [soFull, soData]) and (elem.participantEffective is TFhirTiming) {6} then
    ComposeTiming(xml, 'participantEffectiveTiming', TFhirTiming(elem.participantEffective))
  else if (SummaryOption in [soFull, soData]) and (elem.participantEffective is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'participantEffectiveDateTime', TFhirDateTime(elem.participantEffective));
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'participantEffectiveTimeFromStart', elem.participantEffectiveTimeFromStart);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'participantEffectiveGroupMeasure', elem.ParticipantEffectiveGroupMeasureElement, CODES_TFhirGroupMeasureEnum);
end;

function TFHIRXmlParser.ParseResearchElementDefinition(element : TMXmlElement; path : string) : TFhirResearchElementDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirResearchElementDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseResearchElementDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseResearchElementDefinitionChild(element : TFhirResearchElementDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'shortTitle') then
        element.shortTitleElement := ParseString(child, path+'/shortTitle') {b}
      else if (child.localName = 'subtitle') then
        element.subtitleElement := ParseString(child, path+'/subtitle') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'subjectCodeableConcept') then
        element.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept'){x.3}
      else if (child.localName = 'subjectReference') then
        element.subject := ParseReference(child, path+'/subjectReference') {a}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'comment') then
        element.commentList.Add(ParseString(child, path+'/comment')){y.2}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'usage') then
        element.usageElement := ParseString(child, path+'/usage') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'approvalDate') then
        element.approvalDateElement := ParseDate(child, path+'/approvalDate') {b}
      else if (child.localName = 'lastReviewDate') then
        element.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {b}
      else if (child.localName = 'topic') then
        element.topicList.Add(ParseCodeableConcept(child, path+'/topic')){y.2}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseContactDetail(child, path+'/author')){y.2}
      else if (child.localName = 'editor') then
        element.editorList.Add(ParseContactDetail(child, path+'/editor')){y.2}
      else if (child.localName = 'reviewer') then
        element.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')){y.2}
      else if (child.localName = 'endorser') then
        element.endorserList.Add(ParseContactDetail(child, path+'/endorser')){y.2}
      else if (child.localName = 'relatedArtifact') then
        element.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')){y.2}
      else if (child.localName = 'library') then
        element.library_List.Add(ParseCanonical(child, path+'/library')){y.2}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirResearchElementTypeEnum, SYSTEMS_TFhirResearchElementTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'variableType') then
        element.variableTypeElement := ParseEnum(CODES_TFhirVariableTypeEnum, SYSTEMS_TFhirVariableTypeEnum, path+'/variableType', child){1a}
      else if (child.localName = 'characteristic') then
        element.characteristicList.Add(ParseResearchElementDefinitionCharacteristic(child, path+'/characteristic')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeResearchElementDefinition(xml : TXmlBuilder; name : String; elem : TFhirResearchElementDefinition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeResearchElementDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeResearchElementDefinitionChildren(xml : TXmlBuilder; elem : TFhirResearchElementDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('shortTitle') then
    ComposeString(xml, 'shortTitle', elem.shortTitleElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('subtitle') then
    ComposeString(xml, 'subtitle', elem.subtitleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(elem.subject))
  else if (SummaryOption in [soFull, soData]) and (elem.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(elem.subject));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    for i := 0 to elem.commentList.Count - 1 do
      ComposeString(xml, 'comment', elem.commentList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('usage') then
    ComposeString(xml, 'usage', elem.usageElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDate(xml, 'approvalDate', elem.approvalDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDate(xml, 'lastReviewDate', elem.lastReviewDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(xml, 'effectivePeriod', elem.effectivePeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('topic') then
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', elem.topicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('author') then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('editor') then
    for i := 0 to elem.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', elem.editorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reviewer') then
    for i := 0 to elem.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', elem.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('endorser') then
    for i := 0 to elem.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', elem.endorserList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') then
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', elem.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('library_') then
    for i := 0 to elem.library_List.Count - 1 do
      ComposeCanonical(xml, 'library', elem.library_List[i]);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirResearchElementTypeEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('variableType') then
    ComposeEnum(xml, 'variableType', elem.VariableTypeElement, CODES_TFhirVariableTypeEnum);
  for i := 0 to elem.characteristicList.Count - 1 do
      ComposeResearchElementDefinitionCharacteristic(xml, 'characteristic', elem.characteristicList[i]);
end;

{$ENDIF FHIR_RESEARCHELEMENTDEFINITION}
{$IFDEF FHIR_RESEARCHSTUDY}
function TFHIRXmlParser.ParseResearchStudyArm(element : TMXmlElement; path : string) : TFhirResearchStudyArm;
var
  child : TMXmlElement;
begin
  result := TFhirResearchStudyArm.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseResearchStudyArmChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseResearchStudyArmChild(element : TFhirResearchStudyArm; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeResearchStudyArm(xml : TXmlBuilder; name : String; elem : TFhirResearchStudyArm);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeResearchStudyArmChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeResearchStudyArmChildren(xml : TXmlBuilder; elem : TFhirResearchStudyArm);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
end;

function TFHIRXmlParser.ParseResearchStudyObjective(element : TMXmlElement; path : string) : TFhirResearchStudyObjective;
var
  child : TMXmlElement;
begin
  result := TFhirResearchStudyObjective.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseResearchStudyObjectiveChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseResearchStudyObjectiveChild(element : TFhirResearchStudyObjective; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeResearchStudyObjective(xml : TXmlBuilder; name : String; elem : TFhirResearchStudyObjective);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeResearchStudyObjectiveChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeResearchStudyObjectiveChildren(xml : TXmlBuilder; elem : TFhirResearchStudyObjective);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
end;

function TFHIRXmlParser.ParseResearchStudy(element : TMXmlElement; path : string) : TFhirResearchStudy;
var
  child : TMXmlElement;
begin
  result := TFhirResearchStudy.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseResearchStudyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseResearchStudyChild(element : TFhirResearchStudy; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'protocol') then
        element.protocolList.Add(ParseReference{TFhirPlanDefinition}(child, path+'/protocol')){y.2}
      else if (child.localName = 'partOf') then
        element.partOfList.Add(ParseReference{TFhirResearchStudy}(child, path+'/partOf')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirResearchStudyStatusEnum, SYSTEMS_TFhirResearchStudyStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'primaryPurposeType') then
        element.primaryPurposeType := ParseCodeableConcept(child, path+'/primaryPurposeType') {b}
      else if (child.localName = 'phase') then
        element.phase := ParseCodeableConcept(child, path+'/phase') {b}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'focus') then
        element.focusList.Add(ParseCodeableConcept(child, path+'/focus')){y.2}
      else if (child.localName = 'condition') then
        element.conditionList.Add(ParseCodeableConcept(child, path+'/condition')){y.2}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'relatedArtifact') then
        element.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')){y.2}
      else if (child.localName = 'keyword') then
        element.keywordList.Add(ParseCodeableConcept(child, path+'/keyword')){y.2}
      else if (child.localName = 'location') then
        element.locationList.Add(ParseCodeableConcept(child, path+'/location')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'enrollment') then
        element.enrollmentList.Add(ParseReference{TFhirGroup}(child, path+'/enrollment')){y.2}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'sponsor') then
        element.sponsor := ParseReference{TFhirOrganization}(child, path+'/sponsor') {b}
      else if (child.localName = 'principalInvestigator') then
        element.principalInvestigator := ParseReference{TFhirPractitioner}(child, path+'/principalInvestigator') {b}
      else if (child.localName = 'site') then
        element.siteList.Add(ParseReference{TFhirLocation}(child, path+'/site')){y.2}
      else if (child.localName = 'reasonStopped') then
        element.reasonStopped := ParseCodeableConcept(child, path+'/reasonStopped') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'arm') then
        element.armList.Add(ParseResearchStudyArm(child, path+'/arm')){y.2}
      else if (child.localName = 'objective') then
        element.objectiveList.Add(ParseResearchStudyObjective(child, path+'/objective')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeResearchStudy(xml : TXmlBuilder; name : String; elem : TFhirResearchStudy);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeResearchStudyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeResearchStudyChildren(xml : TXmlBuilder; elem : TFhirResearchStudy);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('protocol') then
    for i := 0 to elem.protocolList.Count - 1 do
      ComposeReference{TFhirPlanDefinition}(xml, 'protocol', elem.protocolList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') then
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirResearchStudy}(xml, 'partOf', elem.partOfList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirResearchStudyStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('primaryPurposeType') then
    ComposeCodeableConcept(xml, 'primaryPurposeType', elem.primaryPurposeType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('phase') then
    ComposeCodeableConcept(xml, 'phase', elem.phase);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('focus') then
    for i := 0 to elem.focusList.Count - 1 do
      ComposeCodeableConcept(xml, 'focus', elem.focusList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('condition') then
    for i := 0 to elem.conditionList.Count - 1 do
      ComposeCodeableConcept(xml, 'condition', elem.conditionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') then
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', elem.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('keyword') then
    for i := 0 to elem.keywordList.Count - 1 do
      ComposeCodeableConcept(xml, 'keyword', elem.keywordList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('location') then
    for i := 0 to elem.locationList.Count - 1 do
      ComposeCodeableConcept(xml, 'location', elem.locationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('enrollment') then
    for i := 0 to elem.enrollmentList.Count - 1 do
      ComposeReference{TFhirGroup}(xml, 'enrollment', elem.enrollmentList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('sponsor') then
    ComposeReference{TFhirOrganization}(xml, 'sponsor', elem.sponsor);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('principalInvestigator') then
    ComposeReference{TFhirPractitioner}(xml, 'principalInvestigator', elem.principalInvestigator);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('site') then
    for i := 0 to elem.siteList.Count - 1 do
      ComposeReference{TFhirLocation}(xml, 'site', elem.siteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonStopped') then
    ComposeCodeableConcept(xml, 'reasonStopped', elem.reasonStopped);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('arm') then
    for i := 0 to elem.armList.Count - 1 do
      ComposeResearchStudyArm(xml, 'arm', elem.armList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('objective') then
    for i := 0 to elem.objectiveList.Count - 1 do
      ComposeResearchStudyObjective(xml, 'objective', elem.objectiveList[i]);
end;

{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
function TFHIRXmlParser.ParseResearchSubject(element : TMXmlElement; path : string) : TFhirResearchSubject;
var
  child : TMXmlElement;
begin
  result := TFhirResearchSubject.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseResearchSubjectChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseResearchSubjectChild(element : TFhirResearchSubject; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirResearchSubjectStatusEnum, SYSTEMS_TFhirResearchSubjectStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'study') then
        element.study := ParseReference{TFhirResearchStudy}(child, path+'/study') {b}
      else if (child.localName = 'individual') then
        element.individual := ParseReference{TFhirPatient}(child, path+'/individual') {b}
      else if (child.localName = 'assignedArm') then
        element.assignedArmElement := ParseString(child, path+'/assignedArm') {b}
      else if (child.localName = 'actualArm') then
        element.actualArmElement := ParseString(child, path+'/actualArm') {b}
      else if (child.localName = 'consent') then
        element.consent := ParseReference{TFhirConsent}(child, path+'/consent') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeResearchSubject(xml : TXmlBuilder; name : String; elem : TFhirResearchSubject);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeResearchSubjectChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeResearchSubjectChildren(xml : TXmlBuilder; elem : TFhirResearchSubject);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirResearchSubjectStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('period') then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  ComposeReference{TFhirResearchStudy}(xml, 'study', elem.study);{x.2a}
  ComposeReference{TFhirPatient}(xml, 'individual', elem.individual);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('assignedArm') then
    ComposeString(xml, 'assignedArm', elem.assignedArmElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('actualArm') then
    ComposeString(xml, 'actualArm', elem.actualArmElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('consent') then
    ComposeReference{TFhirConsent}(xml, 'consent', elem.consent);{x.2a}
end;

{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
function TFHIRXmlParser.ParseRiskAssessmentPrediction(element : TMXmlElement; path : string) : TFhirRiskAssessmentPrediction;
var
  child : TMXmlElement;
begin
  result := TFhirRiskAssessmentPrediction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRiskAssessmentPredictionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRiskAssessmentPredictionChild(element : TFhirRiskAssessmentPrediction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'outcome') then
        element.outcome := ParseCodeableConcept(child, path+'/outcome') {b}
      else if (child.localName = 'probabilityRange') then
        element.probability := ParseRange(child, path+'/probabilityRange'){x.3}
      else if (child.localName = 'probabilityDecimal') then
        element.probability := ParseDecimal(child, path+'/probabilityDecimal'){x.3}
      else if (child.localName = 'qualitativeRisk') then
        element.qualitativeRisk := ParseCodeableConcept(child, path+'/qualitativeRisk') {b}
      else if (child.localName = 'relativeRisk') then
        element.relativeRiskElement := ParseDecimal(child, path+'/relativeRisk') {b}
      else if (child.localName = 'whenPeriod') then
        element.when := ParsePeriod(child, path+'/whenPeriod'){x.3}
      else if (child.localName = 'whenRange') then
        element.when := ParseRange(child, path+'/whenRange'){x.3}
      else if (child.localName = 'rationale') then
        element.rationaleElement := ParseString(child, path+'/rationale') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRiskAssessmentPrediction(xml : TXmlBuilder; name : String; elem : TFhirRiskAssessmentPrediction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeRiskAssessmentPredictionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRiskAssessmentPredictionChildren(xml : TXmlBuilder; elem : TFhirRiskAssessmentPrediction);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'outcome', elem.outcome);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.probability is TFhirRange) {6} then
    ComposeRange(xml, 'probabilityRange', TFhirRange(elem.probability))
  else if (SummaryOption in [soFull, soData]) and (elem.probability is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'probabilityDecimal', TFhirDecimal(elem.probability));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'qualitativeRisk', elem.qualitativeRisk);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'relativeRisk', elem.relativeRiskElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.when is TFhirPeriod) {6} then
    ComposePeriod(xml, 'whenPeriod', TFhirPeriod(elem.when))
  else if (SummaryOption in [soFull, soData]) and (elem.when is TFhirRange) {6} then
    ComposeRange(xml, 'whenRange', TFhirRange(elem.when));
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'rationale', elem.rationaleElement);{x.2b}
end;

function TFHIRXmlParser.ParseRiskAssessment(element : TMXmlElement; path : string) : TFhirRiskAssessment;
var
  child : TMXmlElement;
begin
  result := TFhirRiskAssessment.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRiskAssessmentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRiskAssessmentChild(element : TFhirRiskAssessment; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOn := ParseReference{TFhirReference}(child, path+'/basedOn') {b}
      else if (child.localName = 'parent') then
        element.parent := ParseReference{TFhirReference}(child, path+'/parent') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'method') then
        element.method := ParseCodeableConcept(child, path+'/method') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'occurrencePeriod') then
        element.occurrence := ParsePeriod(child, path+'/occurrencePeriod'){x.3}
      else if (child.localName = 'occurrenceDateTime') then
        element.occurrence := ParseDateTime(child, path+'/occurrenceDateTime'){x.3}
      else if (child.localName = 'condition') then
        element.condition := ParseReference{TFhirCondition}(child, path+'/condition') {b}
      else if (child.localName = 'performer') then
        element.performer := ParseReference{TFhirPractitioner}(child, path+'/performer') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'basis') then
        element.basisList.Add(ParseReference{TFhirReference}(child, path+'/basis')){y.2}
      else if (child.localName = 'prediction') then
        element.predictionList.Add(ParseRiskAssessmentPrediction(child, path+'/prediction')){y.2}
      else if (child.localName = 'mitigation') then
        element.mitigationElement := ParseString(child, path+'/mitigation') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRiskAssessment(xml : TXmlBuilder; name : String; elem : TFhirRiskAssessment);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeRiskAssessmentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRiskAssessmentChildren(xml : TXmlBuilder; elem : TFhirRiskAssessment);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('basedOn') then
    ComposeReference{TFhirReference}(xml, 'basedOn', elem.basedOn);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('parent') then
    ComposeReference{TFhirReference}(xml, 'parent', elem.parent);{x.2a}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirObservationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('method') then
    ComposeCodeableConcept(xml, 'method', elem.method);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(elem.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(elem.occurrence));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('condition') then
    ComposeReference{TFhirCondition}(xml, 'condition', elem.condition);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') then
    ComposeReference{TFhirPractitioner}(xml, 'performer', elem.performer);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('basis') then
    for i := 0 to elem.basisList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'basis', elem.basisList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('prediction') then
    for i := 0 to elem.predictionList.Count - 1 do
      ComposeRiskAssessmentPrediction(xml, 'prediction', elem.predictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('mitigation') then
    ComposeString(xml, 'mitigation', elem.mitigationElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_RISKEVIDENCESYNTHESIS}
function TFHIRXmlParser.ParseRiskEvidenceSynthesisSampleSize(element : TMXmlElement; path : string) : TFhirRiskEvidenceSynthesisSampleSize;
var
  child : TMXmlElement;
begin
  result := TFhirRiskEvidenceSynthesisSampleSize.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRiskEvidenceSynthesisSampleSizeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRiskEvidenceSynthesisSampleSizeChild(element : TFhirRiskEvidenceSynthesisSampleSize; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'numberOfStudies') then
        element.numberOfStudiesElement := ParseInteger(child, path+'/numberOfStudies') {b}
      else if (child.localName = 'numberOfParticipants') then
        element.numberOfParticipantsElement := ParseInteger(child, path+'/numberOfParticipants') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRiskEvidenceSynthesisSampleSize(xml : TXmlBuilder; name : String; elem : TFhirRiskEvidenceSynthesisSampleSize);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeRiskEvidenceSynthesisSampleSizeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRiskEvidenceSynthesisSampleSizeChildren(xml : TXmlBuilder; elem : TFhirRiskEvidenceSynthesisSampleSize);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'numberOfStudies', elem.numberOfStudiesElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'numberOfParticipants', elem.numberOfParticipantsElement);{x.2b}
end;

function TFHIRXmlParser.ParseRiskEvidenceSynthesisRiskEstimate(element : TMXmlElement; path : string) : TFhirRiskEvidenceSynthesisRiskEstimate;
var
  child : TMXmlElement;
begin
  result := TFhirRiskEvidenceSynthesisRiskEstimate.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRiskEvidenceSynthesisRiskEstimateChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRiskEvidenceSynthesisRiskEstimateChild(element : TFhirRiskEvidenceSynthesisRiskEstimate; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'value') then
        element.valueElement := ParseDecimal(child, path+'/value') {b}
      else if (child.localName = 'unitOfMeasure') then
        element.unitOfMeasure := ParseCodeableConcept(child, path+'/unitOfMeasure') {b}
      else if (child.localName = 'denominatorCount') then
        element.denominatorCountElement := ParseInteger(child, path+'/denominatorCount') {b}
      else if (child.localName = 'numeratorCount') then
        element.numeratorCountElement := ParseInteger(child, path+'/numeratorCount') {b}
      else if (child.localName = 'precisionEstimate') then
        element.precisionEstimateList.Add(ParseRiskEvidenceSynthesisRiskEstimatePrecisionEstimate(child, path+'/precisionEstimate')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRiskEvidenceSynthesisRiskEstimate(xml : TXmlBuilder; name : String; elem : TFhirRiskEvidenceSynthesisRiskEstimate);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeRiskEvidenceSynthesisRiskEstimateChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRiskEvidenceSynthesisRiskEstimateChildren(xml : TXmlBuilder; elem : TFhirRiskEvidenceSynthesisRiskEstimate);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'value', elem.valueElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'unitOfMeasure', elem.unitOfMeasure);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'denominatorCount', elem.denominatorCountElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'numeratorCount', elem.numeratorCountElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.precisionEstimateList.Count - 1 do
      ComposeRiskEvidenceSynthesisRiskEstimatePrecisionEstimate(xml, 'precisionEstimate', elem.precisionEstimateList[i]);
end;

function TFHIRXmlParser.ParseRiskEvidenceSynthesisRiskEstimatePrecisionEstimate(element : TMXmlElement; path : string) : TFhirRiskEvidenceSynthesisRiskEstimatePrecisionEstimate;
var
  child : TMXmlElement;
begin
  result := TFhirRiskEvidenceSynthesisRiskEstimatePrecisionEstimate.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRiskEvidenceSynthesisRiskEstimatePrecisionEstimateChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRiskEvidenceSynthesisRiskEstimatePrecisionEstimateChild(element : TFhirRiskEvidenceSynthesisRiskEstimatePrecisionEstimate; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'level') then
        element.levelElement := ParseDecimal(child, path+'/level') {b}
      else if (child.localName = 'from') then
        element.fromElement := ParseDecimal(child, path+'/from') {b}
      else if (child.localName = 'to') then
        element.to_Element := ParseDecimal(child, path+'/to') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRiskEvidenceSynthesisRiskEstimatePrecisionEstimate(xml : TXmlBuilder; name : String; elem : TFhirRiskEvidenceSynthesisRiskEstimatePrecisionEstimate);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeRiskEvidenceSynthesisRiskEstimatePrecisionEstimateChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRiskEvidenceSynthesisRiskEstimatePrecisionEstimateChildren(xml : TXmlBuilder; elem : TFhirRiskEvidenceSynthesisRiskEstimatePrecisionEstimate);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'level', elem.levelElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'from', elem.fromElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'to', elem.to_Element);{x.2b}
end;

function TFHIRXmlParser.ParseRiskEvidenceSynthesisCertainty(element : TMXmlElement; path : string) : TFhirRiskEvidenceSynthesisCertainty;
var
  child : TMXmlElement;
begin
  result := TFhirRiskEvidenceSynthesisCertainty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRiskEvidenceSynthesisCertaintyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRiskEvidenceSynthesisCertaintyChild(element : TFhirRiskEvidenceSynthesisCertainty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'rating') then
        element.ratingList.Add(ParseCodeableConcept(child, path+'/rating')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'certaintySubcomponent') then
        element.certaintySubcomponentList.Add(ParseRiskEvidenceSynthesisCertaintyCertaintySubcomponent(child, path+'/certaintySubcomponent')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRiskEvidenceSynthesisCertainty(xml : TXmlBuilder; name : String; elem : TFhirRiskEvidenceSynthesisCertainty);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeRiskEvidenceSynthesisCertaintyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRiskEvidenceSynthesisCertaintyChildren(xml : TXmlBuilder; elem : TFhirRiskEvidenceSynthesisCertainty);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.ratingList.Count - 1 do
      ComposeCodeableConcept(xml, 'rating', elem.ratingList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.certaintySubcomponentList.Count - 1 do
      ComposeRiskEvidenceSynthesisCertaintyCertaintySubcomponent(xml, 'certaintySubcomponent', elem.certaintySubcomponentList[i]);
end;

function TFHIRXmlParser.ParseRiskEvidenceSynthesisCertaintyCertaintySubcomponent(element : TMXmlElement; path : string) : TFhirRiskEvidenceSynthesisCertaintyCertaintySubcomponent;
var
  child : TMXmlElement;
begin
  result := TFhirRiskEvidenceSynthesisCertaintyCertaintySubcomponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRiskEvidenceSynthesisCertaintyCertaintySubcomponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRiskEvidenceSynthesisCertaintyCertaintySubcomponentChild(element : TFhirRiskEvidenceSynthesisCertaintyCertaintySubcomponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'rating') then
        element.ratingList.Add(ParseCodeableConcept(child, path+'/rating')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRiskEvidenceSynthesisCertaintyCertaintySubcomponent(xml : TXmlBuilder; name : String; elem : TFhirRiskEvidenceSynthesisCertaintyCertaintySubcomponent);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeRiskEvidenceSynthesisCertaintyCertaintySubcomponentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRiskEvidenceSynthesisCertaintyCertaintySubcomponentChildren(xml : TXmlBuilder; elem : TFhirRiskEvidenceSynthesisCertaintyCertaintySubcomponent);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.ratingList.Count - 1 do
      ComposeCodeableConcept(xml, 'rating', elem.ratingList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

function TFHIRXmlParser.ParseRiskEvidenceSynthesis(element : TMXmlElement; path : string) : TFhirRiskEvidenceSynthesis;
var
  child : TMXmlElement;
begin
  result := TFhirRiskEvidenceSynthesis.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRiskEvidenceSynthesisChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRiskEvidenceSynthesisChild(element : TFhirRiskEvidenceSynthesis; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'approvalDate') then
        element.approvalDateElement := ParseDate(child, path+'/approvalDate') {b}
      else if (child.localName = 'lastReviewDate') then
        element.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {b}
      else if (child.localName = 'effectivePeriod') then
        element.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {b}
      else if (child.localName = 'topic') then
        element.topicList.Add(ParseCodeableConcept(child, path+'/topic')){y.2}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseContactDetail(child, path+'/author')){y.2}
      else if (child.localName = 'editor') then
        element.editorList.Add(ParseContactDetail(child, path+'/editor')){y.2}
      else if (child.localName = 'reviewer') then
        element.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')){y.2}
      else if (child.localName = 'endorser') then
        element.endorserList.Add(ParseContactDetail(child, path+'/endorser')){y.2}
      else if (child.localName = 'relatedArtifact') then
        element.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')){y.2}
      else if (child.localName = 'synthesisType') then
        element.synthesisType := ParseCodeableConcept(child, path+'/synthesisType') {b}
      else if (child.localName = 'studyType') then
        element.studyType := ParseCodeableConcept(child, path+'/studyType') {b}
      else if (child.localName = 'population') then
        element.population := ParseReference{TFhirEvidenceVariable}(child, path+'/population') {b}
      else if (child.localName = 'exposure') then
        element.exposure := ParseReference{TFhirEvidenceVariable}(child, path+'/exposure') {b}
      else if (child.localName = 'outcome') then
        element.outcome := ParseReference{TFhirEvidenceVariable}(child, path+'/outcome') {b}
      else if (child.localName = 'sampleSize') then
        element.sampleSize := ParseRiskEvidenceSynthesisSampleSize(child, path+'/sampleSize') {b}
      else if (child.localName = 'riskEstimate') then
        element.riskEstimate := ParseRiskEvidenceSynthesisRiskEstimate(child, path+'/riskEstimate') {b}
      else if (child.localName = 'certainty') then
        element.certaintyList.Add(ParseRiskEvidenceSynthesisCertainty(child, path+'/certainty')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRiskEvidenceSynthesis(xml : TXmlBuilder; name : String; elem : TFhirRiskEvidenceSynthesis);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeRiskEvidenceSynthesisChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeRiskEvidenceSynthesisChildren(xml : TXmlBuilder; elem : TFhirRiskEvidenceSynthesis);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('approvalDate') then
    ComposeDate(xml, 'approvalDate', elem.approvalDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('lastReviewDate') then
    ComposeDate(xml, 'lastReviewDate', elem.lastReviewDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('effectivePeriod') then
    ComposePeriod(xml, 'effectivePeriod', elem.effectivePeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('topic') then
    for i := 0 to elem.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', elem.topicList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('author') then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('editor') then
    for i := 0 to elem.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', elem.editorList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reviewer') then
    for i := 0 to elem.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', elem.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('endorser') then
    for i := 0 to elem.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', elem.endorserList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relatedArtifact') then
    for i := 0 to elem.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', elem.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('synthesisType') then
    ComposeCodeableConcept(xml, 'synthesisType', elem.synthesisType);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('studyType') then
    ComposeCodeableConcept(xml, 'studyType', elem.studyType);{x.2a}
  ComposeReference{TFhirEvidenceVariable}(xml, 'population', elem.population);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('exposure') then
    ComposeReference{TFhirEvidenceVariable}(xml, 'exposure', elem.exposure);{x.2a}
  ComposeReference{TFhirEvidenceVariable}(xml, 'outcome', elem.outcome);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('sampleSize') then
    ComposeRiskEvidenceSynthesisSampleSize(xml, 'sampleSize', elem.sampleSize);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('riskEstimate') then
    ComposeRiskEvidenceSynthesisRiskEstimate(xml, 'riskEstimate', elem.riskEstimate);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('certainty') then
    for i := 0 to elem.certaintyList.Count - 1 do
      ComposeRiskEvidenceSynthesisCertainty(xml, 'certainty', elem.certaintyList[i]);
end;

{$ENDIF FHIR_RISKEVIDENCESYNTHESIS}
{$IFDEF FHIR_SCHEDULE}
function TFHIRXmlParser.ParseSchedule(element : TMXmlElement; path : string) : TFhirSchedule;
var
  child : TMXmlElement;
begin
  result := TFhirSchedule.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseScheduleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseScheduleChild(element : TFhirSchedule; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'active') then
        element.activeElement := ParseBoolean(child, path+'/active') {b}
      else if (child.localName = 'serviceCategory') then
        element.serviceCategoryList.Add(ParseCodeableConcept(child, path+'/serviceCategory')){y.2}
      else if (child.localName = 'serviceType') then
        element.serviceTypeList.Add(ParseCodeableConcept(child, path+'/serviceType')){y.2}
      else if (child.localName = 'specialty') then
        element.specialtyList.Add(ParseCodeableConcept(child, path+'/specialty')){y.2}
      else if (child.localName = 'actor') then
        element.actorList.Add(ParseReference{TFhirPatient}(child, path+'/actor')){y.2}
      else if (child.localName = 'planningHorizon') then
        element.planningHorizon := ParsePeriod(child, path+'/planningHorizon') {b}
      else if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSchedule(xml : TXmlBuilder; name : String; elem : TFhirSchedule);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeScheduleChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeScheduleChildren(xml : TXmlBuilder; elem : TFhirSchedule);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('active') then
    ComposeBoolean(xml, 'active', elem.activeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('serviceCategory') then
    for i := 0 to elem.serviceCategoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'serviceCategory', elem.serviceCategoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('serviceType') then
    for i := 0 to elem.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'serviceType', elem.serviceTypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specialty') then
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialty', elem.specialtyList[i]);
  for i := 0 to elem.actorList.Count - 1 do
      ComposeReference{TFhirPatient}(xml, 'actor', elem.actorList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('planningHorizon') then
    ComposePeriod(xml, 'planningHorizon', elem.planningHorizon);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
end;

{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
function TFHIRXmlParser.ParseSearchParameterComponent(element : TMXmlElement; path : string) : TFhirSearchParameterComponent;
var
  child : TMXmlElement;
begin
  result := TFhirSearchParameterComponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSearchParameterComponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSearchParameterComponentChild(element : TFhirSearchParameterComponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'definition') then
        element.definitionElement := ParseCanonical(child, path+'/definition') {b}
      else if (child.localName = 'expression') then
        element.expressionElement := ParseString(child, path+'/expression') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSearchParameterComponent(xml : TXmlBuilder; name : String; elem : TFhirSearchParameterComponent);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSearchParameterComponentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSearchParameterComponentChildren(xml : TXmlBuilder; elem : TFhirSearchParameterComponent);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCanonical(xml, 'definition', elem.definitionElement);{x.2b}
  ComposeString(xml, 'expression', elem.expressionElement);{x.2b}
end;

function TFHIRXmlParser.ParseSearchParameter(element : TMXmlElement; path : string) : TFhirSearchParameter;
var
  child : TMXmlElement;
begin
  result := TFhirSearchParameter.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSearchParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSearchParameterChild(element : TFhirSearchParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'derivedFrom') then
        element.derivedFromElement := ParseCanonical(child, path+'/derivedFrom') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if (child.localName = 'base') then
        element.base.Add(ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, path+'/base', child)){y.1}
      else if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'expression') then
        element.expressionElement := ParseString(child, path+'/expression') {b}
      else if (child.localName = 'xpath') then
        element.xpathElement := ParseString(child, path+'/xpath') {b}
      else if (child.localName = 'xpathUsage') then
        element.xpathUsageElement := ParseEnum(CODES_TFhirSearchXpathUsageEnum, SYSTEMS_TFhirSearchXpathUsageEnum, path+'/xpathUsage', child){1a}
      else if (child.localName = 'target') then
        element.target.Add(ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, path+'/target', child)){y.1}
      else if (child.localName = 'multipleOr') then
        element.multipleOrElement := ParseBoolean(child, path+'/multipleOr') {b}
      else if (child.localName = 'multipleAnd') then
        element.multipleAndElement := ParseBoolean(child, path+'/multipleAnd') {b}
      else if (child.localName = 'comparator') then
        element.comparatorList.Add(ParseEnum(CODES_TFhirSearchComparatorEnum, SYSTEMS_TFhirSearchComparatorEnum, path+'/comparator', child)){y.1}
      else if (child.localName = 'modifier') then
        element.modifierList.Add(ParseEnum(CODES_TFhirSearchModifierCodeEnum, SYSTEMS_TFhirSearchModifierCodeEnum, path+'/modifier', child)){y.1}
      else if (child.localName = 'chain') then
        element.chainList.Add(ParseString(child, path+'/chain')){y.2}
      else if (child.localName = 'component') then
        element.componentList.Add(ParseSearchParameterComponent(child, path+'/component')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSearchParameter(xml : TXmlBuilder; name : String; elem : TFhirSearchParameter);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeSearchParameterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSearchParameterChildren(xml : TXmlBuilder; elem : TFhirSearchParameter);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('derivedFrom') then
    ComposeCanonical(xml, 'derivedFrom', elem.derivedFromElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  ComposeCode(xml, 'code', elem.codeElement);{x.2b}
  for i := 0 to elem.base.Count - 1 do
      ComposeEnum(xml, 'base', elem.base[i], CODES_TFhirResourceTypesEnum);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirSearchParamTypeEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('expression') then
    ComposeString(xml, 'expression', elem.expressionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('xpath') then
    ComposeString(xml, 'xpath', elem.xpathElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('xpathUsage') then
    ComposeEnum(xml, 'xpathUsage', elem.XpathUsageElement, CODES_TFhirSearchXpathUsageEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('target') then
    for i := 0 to elem.target.Count - 1 do
      ComposeEnum(xml, 'target', elem.target[i], CODES_TFhirResourceTypesEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('multipleOr') then
    ComposeBoolean(xml, 'multipleOr', elem.multipleOrElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('multipleAnd') then
    ComposeBoolean(xml, 'multipleAnd', elem.multipleAndElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('comparator') then
    for i := 0 to elem.comparatorList.Count - 1 do
      ComposeEnum(xml, 'comparator', elem.comparatorList[i], CODES_TFhirSearchComparatorEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('modifier') then
    for i := 0 to elem.modifierList.Count - 1 do
      ComposeEnum(xml, 'modifier', elem.modifierList[i], CODES_TFhirSearchModifierCodeEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('chain') then
    for i := 0 to elem.chainList.Count - 1 do
      ComposeString(xml, 'chain', elem.chainList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('component') then
    for i := 0 to elem.componentList.Count - 1 do
      ComposeSearchParameterComponent(xml, 'component', elem.componentList[i]);
end;

{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
function TFHIRXmlParser.ParseServiceRequest(element : TMXmlElement; path : string) : TFhirServiceRequest;
var
  child : TMXmlElement;
begin
  result := TFhirServiceRequest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseServiceRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseServiceRequestChild(element : TFhirServiceRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'instantiatesCanonical') then
        element.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')){y.2}
      else if (child.localName = 'instantiatesUri') then
        element.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirCarePlan}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'replaces') then
        element.replacesList.Add(ParseReference{TFhirServiceRequest}(child, path+'/replaces')){y.2}
      else if (child.localName = 'requisition') then
        element.requisition := ParseIdentifier(child, path+'/requisition') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'intent') then
        element.intentElement := ParseEnum(CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum, path+'/intent', child){1a}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'priority') then
        element.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, path+'/priority', child){1a}
      else if (child.localName = 'doNotPerform') then
        element.doNotPerformElement := ParseBoolean(child, path+'/doNotPerform') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'orderDetail') then
        element.orderDetailList.Add(ParseCodeableConcept(child, path+'/orderDetail')){y.2}
      else if (child.localName = 'quantityQuantity') then
        element.quantity := ParseQuantity(child, path+'/quantityQuantity'){x.3}
      else if (child.localName = 'quantityRatio') then
        element.quantity := ParseRatio(child, path+'/quantityRatio'){x.3}
      else if (child.localName = 'quantityRange') then
        element.quantity := ParseRange(child, path+'/quantityRange'){x.3}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'occurrencePeriod') then
        element.occurrence := ParsePeriod(child, path+'/occurrencePeriod'){x.3}
      else if (child.localName = 'occurrenceTiming') then
        element.occurrence := ParseTiming(child, path+'/occurrenceTiming'){x.3}
      else if (child.localName = 'occurrenceDateTime') then
        element.occurrence := ParseDateTime(child, path+'/occurrenceDateTime'){x.3}
      else if (child.localName = 'asNeededCodeableConcept') then
        element.asNeeded := ParseCodeableConcept(child, path+'/asNeededCodeableConcept'){x.3}
      else if (child.localName = 'asNeededBoolean') then
        element.asNeeded := ParseBoolean(child, path+'/asNeededBoolean'){x.3}
      else if (child.localName = 'authoredOn') then
        element.authoredOnElement := ParseDateTime(child, path+'/authoredOn') {b}
      else if (child.localName = 'requester') then
        element.requester := ParseReference{TFhirPractitioner}(child, path+'/requester') {b}
      else if (child.localName = 'performerType') then
        element.performerType := ParseCodeableConcept(child, path+'/performerType') {b}
      else if (child.localName = 'performer') then
        element.performerList.Add(ParseReference{TFhirPractitioner}(child, path+'/performer')){y.2}
      else if (child.localName = 'locationCode') then
        element.locationCodeList.Add(ParseCodeableConcept(child, path+'/locationCode')){y.2}
      else if (child.localName = 'locationReference') then
        element.locationReferenceList.Add(ParseReference{TFhirLocation}(child, path+'/locationReference')){y.2}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'insurance') then
        element.insuranceList.Add(ParseReference{TFhirCoverage}(child, path+'/insurance')){y.2}
      else if (child.localName = 'supportingInfo') then
        element.supportingInfoList.Add(ParseReference{TFhirReference}(child, path+'/supportingInfo')){y.2}
      else if (child.localName = 'specimen') then
        element.specimenList.Add(ParseReference{TFhirSpecimen}(child, path+'/specimen')){y.2}
      else if (child.localName = 'bodySite') then
        element.bodySiteList.Add(ParseCodeableConcept(child, path+'/bodySite')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'patientInstruction') then
        element.patientInstructionElement := ParseString(child, path+'/patientInstruction') {b}
      else if (child.localName = 'relevantHistory') then
        element.relevantHistoryList.Add(ParseReference{TFhirProvenance}(child, path+'/relevantHistory')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeServiceRequest(xml : TXmlBuilder; name : String; elem : TFhirServiceRequest);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeServiceRequestChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeServiceRequestChildren(xml : TXmlBuilder; elem : TFhirServiceRequest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesCanonical') then
    for i := 0 to elem.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', elem.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesUri') then
    for i := 0 to elem.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', elem.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirCarePlan}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('replaces') then
    for i := 0 to elem.replacesList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(xml, 'replaces', elem.replacesList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requisition') then
    ComposeIdentifier(xml, 'requisition', elem.requisition);{x.2a}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirRequestStatusEnum);
  ComposeEnum(xml, 'intent', elem.IntentElement, CODES_TFhirRequestIntentEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnum(xml, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('doNotPerform') then
    ComposeBoolean(xml, 'doNotPerform', elem.doNotPerformElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('orderDetail') then
    for i := 0 to elem.orderDetailList.Count - 1 do
      ComposeCodeableConcept(xml, 'orderDetail', elem.orderDetailList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.quantity is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'quantityQuantity', TFhirQuantity(elem.quantity))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.quantity is TFhirRatio) {6} then
    ComposeRatio(xml, 'quantityRatio', TFhirRatio(elem.quantity))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.quantity is TFhirRange) {6} then
    ComposeRange(xml, 'quantityRange', TFhirRange(elem.quantity));
  ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(elem.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) {6} then
    ComposeTiming(xml, 'occurrenceTiming', TFhirTiming(elem.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(elem.occurrence));
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.asNeeded is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'asNeededCodeableConcept', TFhirCodeableConcept(elem.asNeeded))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.asNeeded is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'asNeededBoolean', TFhirBoolean(elem.asNeeded));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTime(xml, 'authoredOn', elem.authoredOnElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requester') then
    ComposeReference{TFhirPractitioner}(xml, 'requester', elem.requester);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performerType') then
    ComposeCodeableConcept(xml, 'performerType', elem.performerType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('performer') then
    for i := 0 to elem.performerList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'performer', elem.performerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('locationCode') then
    for i := 0 to elem.locationCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'locationCode', elem.locationCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('locationReference') then
    for i := 0 to elem.locationReferenceList.Count - 1 do
      ComposeReference{TFhirLocation}(xml, 'locationReference', elem.locationReferenceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('insurance') then
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeReference{TFhirCoverage}(xml, 'insurance', elem.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('supportingInfo') then
    for i := 0 to elem.supportingInfoList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'supportingInfo', elem.supportingInfoList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specimen') then
    for i := 0 to elem.specimenList.Count - 1 do
      ComposeReference{TFhirSpecimen}(xml, 'specimen', elem.specimenList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('bodySite') then
    for i := 0 to elem.bodySiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'bodySite', elem.bodySiteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('patientInstruction') then
    ComposeString(xml, 'patientInstruction', elem.patientInstructionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('relevantHistory') then
    for i := 0 to elem.relevantHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(xml, 'relevantHistory', elem.relevantHistoryList[i]);
end;

{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
function TFHIRXmlParser.ParseSlot(element : TMXmlElement; path : string) : TFhirSlot;
var
  child : TMXmlElement;
begin
  result := TFhirSlot.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSlotChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSlotChild(element : TFhirSlot; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'serviceCategory') then
        element.serviceCategoryList.Add(ParseCodeableConcept(child, path+'/serviceCategory')){y.2}
      else if (child.localName = 'serviceType') then
        element.serviceTypeList.Add(ParseCodeableConcept(child, path+'/serviceType')){y.2}
      else if (child.localName = 'specialty') then
        element.specialtyList.Add(ParseCodeableConcept(child, path+'/specialty')){y.2}
      else if (child.localName = 'appointmentType') then
        element.appointmentType := ParseCodeableConcept(child, path+'/appointmentType') {b}
      else if (child.localName = 'schedule') then
        element.schedule := ParseReference{TFhirSchedule}(child, path+'/schedule') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirSlotstatusEnum, SYSTEMS_TFhirSlotstatusEnum, path+'/status', child){1a}
      else if (child.localName = 'start') then
        element.startElement := ParseInstant(child, path+'/start') {b}
      else if (child.localName = 'end') then
        element.end_Element := ParseInstant(child, path+'/end') {b}
      else if (child.localName = 'overbooked') then
        element.overbookedElement := ParseBoolean(child, path+'/overbooked') {b}
      else if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSlot(xml : TXmlBuilder; name : String; elem : TFhirSlot);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeSlotChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSlotChildren(xml : TXmlBuilder; elem : TFhirSlot);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('serviceCategory') then
    for i := 0 to elem.serviceCategoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'serviceCategory', elem.serviceCategoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('serviceType') then
    for i := 0 to elem.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'serviceType', elem.serviceTypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('specialty') then
    for i := 0 to elem.specialtyList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialty', elem.specialtyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('appointmentType') then
    ComposeCodeableConcept(xml, 'appointmentType', elem.appointmentType);{x.2a}
  ComposeReference{TFhirSchedule}(xml, 'schedule', elem.schedule);{x.2a}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirSlotstatusEnum);
  ComposeInstant(xml, 'start', elem.startElement);{x.2b}
  ComposeInstant(xml, 'end', elem.end_Element);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('overbooked') then
    ComposeBoolean(xml, 'overbooked', elem.overbookedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('comment') then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
end;

{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
function TFHIRXmlParser.ParseSpecimenCollection(element : TMXmlElement; path : string) : TFhirSpecimenCollection;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenCollection.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenCollectionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenCollectionChild(element : TFhirSpecimenCollection; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'collector') then
        element.collector := ParseReference{TFhirPractitioner}(child, path+'/collector') {b}
      else if (child.localName = 'collectedPeriod') then
        element.collected := ParsePeriod(child, path+'/collectedPeriod'){x.3}
      else if (child.localName = 'collectedDateTime') then
        element.collected := ParseDateTime(child, path+'/collectedDateTime'){x.3}
      else if (child.localName = 'duration') then
        element.duration := ParseDuration(child, path+'/duration') {b}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'method') then
        element.method := ParseCodeableConcept(child, path+'/method') {b}
      else if (child.localName = 'bodySite') then
        element.bodySite := ParseCodeableConcept(child, path+'/bodySite') {b}
      else if (child.localName = 'fastingStatusCodeableConcept') then
        element.fastingStatus := ParseCodeableConcept(child, path+'/fastingStatusCodeableConcept'){x.3}
      else if (child.localName = 'fastingStatusDuration') then
        element.fastingStatus := ParseDuration(child, path+'/fastingStatusDuration'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenCollection(xml : TXmlBuilder; name : String; elem : TFhirSpecimenCollection);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSpecimenCollectionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSpecimenCollectionChildren(xml : TXmlBuilder; elem : TFhirSpecimenCollection);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'collector', elem.collector);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.collected is TFhirPeriod) {6} then
    ComposePeriod(xml, 'collectedPeriod', TFhirPeriod(elem.collected))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.collected is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'collectedDateTime', TFhirDateTime(elem.collected));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDuration(xml, 'duration', elem.duration);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'method', elem.method);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'bodySite', elem.bodySite);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.fastingStatus is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'fastingStatusCodeableConcept', TFhirCodeableConcept(elem.fastingStatus))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.fastingStatus is TFhirDuration) {6} then
    ComposeDuration(xml, 'fastingStatusDuration', TFhirDuration(elem.fastingStatus));
end;

function TFHIRXmlParser.ParseSpecimenProcessing(element : TMXmlElement; path : string) : TFhirSpecimenProcessing;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenProcessing.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenProcessingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenProcessingChild(element : TFhirSpecimenProcessing; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'procedure') then
        element.procedure_ := ParseCodeableConcept(child, path+'/procedure') {b}
      else if (child.localName = 'additive') then
        element.additiveList.Add(ParseReference{TFhirSubstance}(child, path+'/additive')){y.2}
      else if (child.localName = 'timePeriod') then
        element.time := ParsePeriod(child, path+'/timePeriod'){x.3}
      else if (child.localName = 'timeDateTime') then
        element.time := ParseDateTime(child, path+'/timeDateTime'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenProcessing(xml : TXmlBuilder; name : String; elem : TFhirSpecimenProcessing);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSpecimenProcessingChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSpecimenProcessingChildren(xml : TXmlBuilder; elem : TFhirSpecimenProcessing);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'procedure', elem.procedure_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.additiveList.Count - 1 do
      ComposeReference{TFhirSubstance}(xml, 'additive', elem.additiveList[i]);
  if (SummaryOption in [soFull, soData]) and (elem.time is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timePeriod', TFhirPeriod(elem.time))
  else if (SummaryOption in [soFull, soData]) and (elem.time is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timeDateTime', TFhirDateTime(elem.time));
end;

function TFHIRXmlParser.ParseSpecimenContainer(element : TMXmlElement; path : string) : TFhirSpecimenContainer;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenContainer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenContainerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenContainerChild(element : TFhirSpecimenContainer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'capacity') then
        element.capacity := ParseQuantity(child, path+'/capacity') {b}
      else if (child.localName = 'specimenQuantity') then
        element.specimenQuantity := ParseQuantity(child, path+'/specimenQuantity') {b}
      else if (child.localName = 'additiveCodeableConcept') then
        element.additive := ParseCodeableConcept(child, path+'/additiveCodeableConcept'){x.3}
      else if (child.localName = 'additiveReference') then
        element.additive := ParseReference(child, path+'/additiveReference') {a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenContainer(xml : TXmlBuilder; name : String; elem : TFhirSpecimenContainer);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSpecimenContainerChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSpecimenContainerChildren(xml : TXmlBuilder; elem : TFhirSpecimenContainer);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'capacity', elem.capacity);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'specimenQuantity', elem.specimenQuantity);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.additive is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'additiveCodeableConcept', TFhirCodeableConcept(elem.additive))
  else if (SummaryOption in [soFull, soData]) and (elem.additive is TFhirReference) {2} then
    ComposeReference(xml, 'additiveReference', TFhirReference(elem.additive));
end;

function TFHIRXmlParser.ParseSpecimen(element : TMXmlElement; path : string) : TFhirSpecimen;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimen.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenChild(element : TFhirSpecimen; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'accessionIdentifier') then
        element.accessionIdentifier := ParseIdentifier(child, path+'/accessionIdentifier') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirSpecimenStatusEnum, SYSTEMS_TFhirSpecimenStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'subject') then
        element.subject := ParseReference{TFhirPatient}(child, path+'/subject') {b}
      else if (child.localName = 'receivedTime') then
        element.receivedTimeElement := ParseDateTime(child, path+'/receivedTime') {b}
      else if (child.localName = 'parent') then
        element.parentList.Add(ParseReference{TFhirSpecimen}(child, path+'/parent')){y.2}
      else if (child.localName = 'request') then
        element.requestList.Add(ParseReference{TFhirServiceRequest}(child, path+'/request')){y.2}
      else if (child.localName = 'collection') then
        element.collection := ParseSpecimenCollection(child, path+'/collection') {b}
      else if (child.localName = 'processing') then
        element.processingList.Add(ParseSpecimenProcessing(child, path+'/processing')){y.2}
      else if (child.localName = 'container') then
        element.containerList.Add(ParseSpecimenContainer(child, path+'/container')){y.2}
      else if (child.localName = 'condition') then
        element.conditionList.Add(ParseCodeableConcept(child, path+'/condition')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimen(xml : TXmlBuilder; name : String; elem : TFhirSpecimen);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeSpecimenChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSpecimenChildren(xml : TXmlBuilder; elem : TFhirSpecimen);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('accessionIdentifier') then
    ComposeIdentifier(xml, 'accessionIdentifier', elem.accessionIdentifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirSpecimenStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subject') then
    ComposeReference{TFhirPatient}(xml, 'subject', elem.subject);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('receivedTime') then
    ComposeDateTime(xml, 'receivedTime', elem.receivedTimeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('parent') then
    for i := 0 to elem.parentList.Count - 1 do
      ComposeReference{TFhirSpecimen}(xml, 'parent', elem.parentList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('request') then
    for i := 0 to elem.requestList.Count - 1 do
      ComposeReference{TFhirServiceRequest}(xml, 'request', elem.requestList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('collection') then
    ComposeSpecimenCollection(xml, 'collection', elem.collection);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('processing') then
    for i := 0 to elem.processingList.Count - 1 do
      ComposeSpecimenProcessing(xml, 'processing', elem.processingList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('container') then
    for i := 0 to elem.containerList.Count - 1 do
      ComposeSpecimenContainer(xml, 'container', elem.containerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('condition') then
    for i := 0 to elem.conditionList.Count - 1 do
      ComposeCodeableConcept(xml, 'condition', elem.conditionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
function TFHIRXmlParser.ParseSpecimenDefinitionTypeTested(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTested;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenDefinitionTypeTested.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenDefinitionTypeTestedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenDefinitionTypeTestedChild(element : TFhirSpecimenDefinitionTypeTested; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'isDerived') then
        element.isDerivedElement := ParseBoolean(child, path+'/isDerived') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'preference') then
        element.preferenceElement := ParseEnum(CODES_TFhirSpecimenContainedPreferenceEnum, SYSTEMS_TFhirSpecimenContainedPreferenceEnum, path+'/preference', child){1a}
      else if (child.localName = 'container') then
        element.container := ParseSpecimenDefinitionTypeTestedContainer(child, path+'/container') {b}
      else if (child.localName = 'requirement') then
        element.requirementElement := ParseString(child, path+'/requirement') {b}
      else if (child.localName = 'retentionTime') then
        element.retentionTime := ParseDuration(child, path+'/retentionTime') {b}
      else if (child.localName = 'rejectionCriterion') then
        element.rejectionCriterionList.Add(ParseCodeableConcept(child, path+'/rejectionCriterion')){y.2}
      else if (child.localName = 'handling') then
        element.handlingList.Add(ParseSpecimenDefinitionTypeTestedHandling(child, path+'/handling')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTested(xml : TXmlBuilder; name : String; elem : TFhirSpecimenDefinitionTypeTested);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSpecimenDefinitionTypeTestedChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTestedChildren(xml : TXmlBuilder; elem : TFhirSpecimenDefinitionTypeTested);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
  ComposeBoolean(xml, 'isDerived', elem.isDerivedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  ComposeEnum(xml, 'preference', elem.PreferenceElement, CODES_TFhirSpecimenContainedPreferenceEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeSpecimenDefinitionTypeTestedContainer(xml, 'container', elem.container);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'requirement', elem.requirementElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'retentionTime', elem.retentionTime);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.rejectionCriterionList.Count - 1 do
      ComposeCodeableConcept(xml, 'rejectionCriterion', elem.rejectionCriterionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.handlingList.Count - 1 do
      ComposeSpecimenDefinitionTypeTestedHandling(xml, 'handling', elem.handlingList[i]);
end;

function TFHIRXmlParser.ParseSpecimenDefinitionTypeTestedContainer(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTestedContainer;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenDefinitionTypeTestedContainer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenDefinitionTypeTestedContainerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenDefinitionTypeTestedContainerChild(element : TFhirSpecimenDefinitionTypeTestedContainer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'material') then
        element.material := ParseCodeableConcept(child, path+'/material') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'cap') then
        element.cap := ParseCodeableConcept(child, path+'/cap') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'capacity') then
        element.capacity := ParseQuantity(child, path+'/capacity') {b}
      else if (child.localName = 'minimumVolumeQuantity') then
        element.minimumVolume := ParseQuantity(child, path+'/minimumVolumeQuantity'){x.3}
      else if (child.localName = 'minimumVolumeString') then
        element.minimumVolume := ParseString(child, path+'/minimumVolumeString'){x.3}
      else if (child.localName = 'additive') then
        element.additiveList.Add(ParseSpecimenDefinitionTypeTestedContainerAdditive(child, path+'/additive')){y.2}
      else if (child.localName = 'preparation') then
        element.preparationElement := ParseString(child, path+'/preparation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTestedContainer(xml : TXmlBuilder; name : String; elem : TFhirSpecimenDefinitionTypeTestedContainer);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSpecimenDefinitionTypeTestedContainerChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTestedContainerChildren(xml : TXmlBuilder; elem : TFhirSpecimenDefinitionTypeTestedContainer);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'material', elem.material);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'cap', elem.cap);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'capacity', elem.capacity);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.minimumVolume is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'minimumVolumeQuantity', TFhirQuantity(elem.minimumVolume))
  else if (SummaryOption in [soFull, soData]) and (elem.minimumVolume is TFhirString) {6} then
    ComposeString(xml, 'minimumVolumeString', TFhirString(elem.minimumVolume));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.additiveList.Count - 1 do
      ComposeSpecimenDefinitionTypeTestedContainerAdditive(xml, 'additive', elem.additiveList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'preparation', elem.preparationElement);{x.2b}
end;

function TFHIRXmlParser.ParseSpecimenDefinitionTypeTestedContainerAdditive(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTestedContainerAdditive;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenDefinitionTypeTestedContainerAdditive.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenDefinitionTypeTestedContainerAdditiveChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenDefinitionTypeTestedContainerAdditiveChild(element : TFhirSpecimenDefinitionTypeTestedContainerAdditive; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'additiveCodeableConcept') then
        element.additive := ParseCodeableConcept(child, path+'/additiveCodeableConcept'){x.3}
      else if (child.localName = 'additiveReference') then
        element.additive := ParseReference(child, path+'/additiveReference') {a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTestedContainerAdditive(xml : TXmlBuilder; name : String; elem : TFhirSpecimenDefinitionTypeTestedContainerAdditive);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSpecimenDefinitionTypeTestedContainerAdditiveChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTestedContainerAdditiveChildren(xml : TXmlBuilder; elem : TFhirSpecimenDefinitionTypeTestedContainerAdditive);
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.additive is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'additiveCodeableConcept', TFhirCodeableConcept(elem.additive))
  else if (elem.additive is TFhirReference) {2} then
    ComposeReference(xml, 'additiveReference', TFhirReference(elem.additive));
end;

function TFHIRXmlParser.ParseSpecimenDefinitionTypeTestedHandling(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTestedHandling;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenDefinitionTypeTestedHandling.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenDefinitionTypeTestedHandlingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenDefinitionTypeTestedHandlingChild(element : TFhirSpecimenDefinitionTypeTestedHandling; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'temperatureQualifier') then
        element.temperatureQualifier := ParseCodeableConcept(child, path+'/temperatureQualifier') {b}
      else if (child.localName = 'temperatureRange') then
        element.temperatureRange := ParseRange(child, path+'/temperatureRange') {b}
      else if (child.localName = 'maxDuration') then
        element.maxDuration := ParseDuration(child, path+'/maxDuration') {b}
      else if (child.localName = 'instruction') then
        element.instructionElement := ParseString(child, path+'/instruction') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTestedHandling(xml : TXmlBuilder; name : String; elem : TFhirSpecimenDefinitionTypeTestedHandling);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSpecimenDefinitionTypeTestedHandlingChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTestedHandlingChildren(xml : TXmlBuilder; elem : TFhirSpecimenDefinitionTypeTestedHandling);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'temperatureQualifier', elem.temperatureQualifier);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(xml, 'temperatureRange', elem.temperatureRange);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'maxDuration', elem.maxDuration);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'instruction', elem.instructionElement);{x.2b}
end;

function TFHIRXmlParser.ParseSpecimenDefinition(element : TMXmlElement; path : string) : TFhirSpecimenDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenDefinitionChild(element : TFhirSpecimenDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'typeCollected') then
        element.typeCollected := ParseCodeableConcept(child, path+'/typeCollected') {b}
      else if (child.localName = 'patientPreparation') then
        element.patientPreparationList.Add(ParseCodeableConcept(child, path+'/patientPreparation')){y.2}
      else if (child.localName = 'timeAspect') then
        element.timeAspectElement := ParseString(child, path+'/timeAspect') {b}
      else if (child.localName = 'collection') then
        element.collectionList.Add(ParseCodeableConcept(child, path+'/collection')){y.2}
      else if (child.localName = 'typeTested') then
        element.typeTestedList.Add(ParseSpecimenDefinitionTypeTested(child, path+'/typeTested')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinition(xml : TXmlBuilder; name : String; elem : TFhirSpecimenDefinition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeSpecimenDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionChildren(xml : TXmlBuilder; elem : TFhirSpecimenDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('typeCollected') then
    ComposeCodeableConcept(xml, 'typeCollected', elem.typeCollected);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('patientPreparation') then
    for i := 0 to elem.patientPreparationList.Count - 1 do
      ComposeCodeableConcept(xml, 'patientPreparation', elem.patientPreparationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('timeAspect') then
    ComposeString(xml, 'timeAspect', elem.timeAspectElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('collection') then
    for i := 0 to elem.collectionList.Count - 1 do
      ComposeCodeableConcept(xml, 'collection', elem.collectionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('typeTested') then
    for i := 0 to elem.typeTestedList.Count - 1 do
      ComposeSpecimenDefinitionTypeTested(xml, 'typeTested', elem.typeTestedList[i]);
end;

{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
function TFHIRXmlParser.ParseStructureDefinitionMapping(element : TMXmlElement; path : string) : TFhirStructureDefinitionMapping;
var
  child : TMXmlElement;
begin
  result := TFhirStructureDefinitionMapping.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureDefinitionMappingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureDefinitionMappingChild(element : TFhirStructureDefinitionMapping; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identity') then
        element.identityElement := ParseId(child, path+'/identity') {b}
      else if (child.localName = 'uri') then
        element.uriElement := ParseUri(child, path+'/uri') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionMapping(xml : TXmlBuilder; name : String; elem : TFhirStructureDefinitionMapping);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeStructureDefinitionMappingChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionMappingChildren(xml : TXmlBuilder; elem : TFhirStructureDefinitionMapping);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeId(xml, 'identity', elem.identityElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'uri', elem.uriElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
end;

function TFHIRXmlParser.ParseStructureDefinitionContext(element : TMXmlElement; path : string) : TFhirStructureDefinitionContext;
var
  child : TMXmlElement;
begin
  result := TFhirStructureDefinitionContext.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureDefinitionContextChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureDefinitionContextChild(element : TFhirStructureDefinitionContext; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirExtensionContextTypeEnum, SYSTEMS_TFhirExtensionContextTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'expression') then
        element.expressionElement := ParseString(child, path+'/expression') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionContext(xml : TXmlBuilder; name : String; elem : TFhirStructureDefinitionContext);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeStructureDefinitionContextChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionContextChildren(xml : TXmlBuilder; elem : TFhirStructureDefinitionContext);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirExtensionContextTypeEnum);
  ComposeString(xml, 'expression', elem.expressionElement);{x.2b}
end;

function TFHIRXmlParser.ParseStructureDefinitionSnapshot(element : TMXmlElement; path : string) : TFhirStructureDefinitionSnapshot;
var
  child : TMXmlElement;
begin
  result := TFhirStructureDefinitionSnapshot.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureDefinitionSnapshotChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureDefinitionSnapshotChild(element : TFhirStructureDefinitionSnapshot; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'element') then
        element.elementList.Add(ParseElementDefinition(child, path+'/element')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionSnapshot(xml : TXmlBuilder; name : String; elem : TFhirStructureDefinitionSnapshot);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeStructureDefinitionSnapshotChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionSnapshotChildren(xml : TXmlBuilder; elem : TFhirStructureDefinitionSnapshot);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  for i := 0 to elem.elementList.Count - 1 do
      ComposeElementDefinition(xml, 'element', elem.elementList[i]);
end;

function TFHIRXmlParser.ParseStructureDefinitionDifferential(element : TMXmlElement; path : string) : TFhirStructureDefinitionDifferential;
var
  child : TMXmlElement;
begin
  result := TFhirStructureDefinitionDifferential.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureDefinitionDifferentialChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureDefinitionDifferentialChild(element : TFhirStructureDefinitionDifferential; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'element') then
        element.elementList.Add(ParseElementDefinition(child, path+'/element')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionDifferential(xml : TXmlBuilder; name : String; elem : TFhirStructureDefinitionDifferential);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeStructureDefinitionDifferentialChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionDifferentialChildren(xml : TXmlBuilder; elem : TFhirStructureDefinitionDifferential);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  for i := 0 to elem.elementList.Count - 1 do
      ComposeElementDefinition(xml, 'element', elem.elementList[i]);
end;

function TFHIRXmlParser.ParseStructureDefinition(element : TMXmlElement; path : string) : TFhirStructureDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirStructureDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureDefinitionChild(element : TFhirStructureDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'keyword') then
        element.keywordList.Add(ParseCoding(child, path+'/keyword')){y.2}
      else if (child.localName = 'fhirVersion') then
        element.fhirVersionElement := ParseEnum(CODES_TFhirFHIRVersionEnum, SYSTEMS_TFhirFHIRVersionEnum, path+'/fhirVersion', child){1a}
      else if (child.localName = 'mapping') then
        element.mappingList.Add(ParseStructureDefinitionMapping(child, path+'/mapping')){y.2}
      else if (child.localName = 'kind') then
        element.kindElement := ParseEnum(CODES_TFhirStructureDefinitionKindEnum, SYSTEMS_TFhirStructureDefinitionKindEnum, path+'/kind', child){1a}
      else if (child.localName = 'abstract') then
        element.abstractElement := ParseBoolean(child, path+'/abstract') {b}
      else if (child.localName = 'context') then
        element.contextList.Add(ParseStructureDefinitionContext(child, path+'/context')){y.2}
      else if (child.localName = 'contextInvariant') then
        element.contextInvariantList.Add(ParseString(child, path+'/contextInvariant')){y.2}
      else if (child.localName = 'type') then
        element.type_Element := ParseUri(child, path+'/type') {b}
      else if (child.localName = 'baseDefinition') then
        element.baseDefinitionElement := ParseCanonical(child, path+'/baseDefinition') {b}
      else if (child.localName = 'derivation') then
        element.derivationElement := ParseEnum(CODES_TFhirTypeDerivationRuleEnum, SYSTEMS_TFhirTypeDerivationRuleEnum, path+'/derivation', child){1a}
      else if (child.localName = 'snapshot') then
        element.snapshot := ParseStructureDefinitionSnapshot(child, path+'/snapshot') {b}
      else if (child.localName = 'differential') then
        element.differential := ParseStructureDefinitionDifferential(child, path+'/differential') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinition(xml : TXmlBuilder; name : String; elem : TFhirStructureDefinition);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeStructureDefinitionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionChildren(xml : TXmlBuilder; elem : TFhirStructureDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('keyword') then
    for i := 0 to elem.keywordList.Count - 1 do
      ComposeCoding(xml, 'keyword', elem.keywordList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('fhirVersion') then
    ComposeEnum(xml, 'fhirVersion', elem.FhirVersionElement, CODES_TFhirFHIRVersionEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('mapping') then
    for i := 0 to elem.mappingList.Count - 1 do
      ComposeStructureDefinitionMapping(xml, 'mapping', elem.mappingList[i]);
  ComposeEnum(xml, 'kind', elem.KindElement, CODES_TFhirStructureDefinitionKindEnum);
  ComposeBoolean(xml, 'abstract', elem.abstractElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('context') then
    for i := 0 to elem.contextList.Count - 1 do
      ComposeStructureDefinitionContext(xml, 'context', elem.contextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contextInvariant') then
    for i := 0 to elem.contextInvariantList.Count - 1 do
      ComposeString(xml, 'contextInvariant', elem.contextInvariantList[i]);
  ComposeUri(xml, 'type', elem.type_Element);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('baseDefinition') then
    ComposeCanonical(xml, 'baseDefinition', elem.baseDefinitionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('derivation') then
    ComposeEnum(xml, 'derivation', elem.DerivationElement, CODES_TFhirTypeDerivationRuleEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('snapshot') then
    ComposeStructureDefinitionSnapshot(xml, 'snapshot', elem.snapshot);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('differential') then
    ComposeStructureDefinitionDifferential(xml, 'differential', elem.differential);{x.2a}
end;

{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
function TFHIRXmlParser.ParseStructureMapStructure(element : TMXmlElement; path : string) : TFhirStructureMapStructure;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapStructure.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapStructureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapStructureChild(element : TFhirStructureMapStructure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseCanonical(child, path+'/url') {b}
      else if (child.localName = 'mode') then
        element.modeElement := ParseEnum(CODES_TFhirMapModelModeEnum, SYSTEMS_TFhirMapModelModeEnum, path+'/mode', child){1a}
      else if (child.localName = 'alias') then
        element.aliasElement := ParseString(child, path+'/alias') {b}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseString(child, path+'/documentation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapStructure(xml : TXmlBuilder; name : String; elem : TFhirStructureMapStructure);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeStructureMapStructureChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeStructureMapStructureChildren(xml : TXmlBuilder; elem : TFhirStructureMapStructure);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCanonical(xml, 'url', elem.urlElement);{x.2b}
  ComposeEnum(xml, 'mode', elem.ModeElement, CODES_TFhirMapModelModeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'alias', elem.aliasElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'documentation', elem.documentationElement);{x.2b}
end;

function TFHIRXmlParser.ParseStructureMapGroup(element : TMXmlElement; path : string) : TFhirStructureMapGroup;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapGroup.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapGroupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapGroupChild(element : TFhirStructureMapGroup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseId(child, path+'/name') {b}
      else if (child.localName = 'extends') then
        element.extendsElement := ParseId(child, path+'/extends') {b}
      else if (child.localName = 'typeMode') then
        element.typeModeElement := ParseEnum(CODES_TFhirMapGroupTypeModeEnum, SYSTEMS_TFhirMapGroupTypeModeEnum, path+'/typeMode', child){1a}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseString(child, path+'/documentation') {b}
      else if (child.localName = 'input') then
        element.inputList.Add(ParseStructureMapGroupInput(child, path+'/input')){y.2}
      else if (child.localName = 'rule') then
        element.ruleList.Add(ParseStructureMapGroupRule(child, path+'/rule')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroup(xml : TXmlBuilder; name : String; elem : TFhirStructureMapGroup);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeStructureMapGroupChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupChildren(xml : TXmlBuilder; elem : TFhirStructureMapGroup);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeId(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'extends', elem.extendsElement);{x.2b}
  ComposeEnum(xml, 'typeMode', elem.TypeModeElement, CODES_TFhirMapGroupTypeModeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'documentation', elem.documentationElement);{x.2b}
  for i := 0 to elem.inputList.Count - 1 do
      ComposeStructureMapGroupInput(xml, 'input', elem.inputList[i]);
  for i := 0 to elem.ruleList.Count - 1 do
      ComposeStructureMapGroupRule(xml, 'rule', elem.ruleList[i]);
end;

function TFHIRXmlParser.ParseStructureMapGroupInput(element : TMXmlElement; path : string) : TFhirStructureMapGroupInput;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapGroupInput.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapGroupInputChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapGroupInputChild(element : TFhirStructureMapGroupInput; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseId(child, path+'/name') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseString(child, path+'/type') {b}
      else if (child.localName = 'mode') then
        element.modeElement := ParseEnum(CODES_TFhirMapInputModeEnum, SYSTEMS_TFhirMapInputModeEnum, path+'/mode', child){1a}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseString(child, path+'/documentation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupInput(xml : TXmlBuilder; name : String; elem : TFhirStructureMapGroupInput);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeStructureMapGroupInputChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupInputChildren(xml : TXmlBuilder; elem : TFhirStructureMapGroupInput);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeId(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'type', elem.type_Element);{x.2b}
  ComposeEnum(xml, 'mode', elem.ModeElement, CODES_TFhirMapInputModeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'documentation', elem.documentationElement);{x.2b}
end;

function TFHIRXmlParser.ParseStructureMapGroupRule(element : TMXmlElement; path : string) : TFhirStructureMapGroupRule;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapGroupRule.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapGroupRuleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleChild(element : TFhirStructureMapGroupRule; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseId(child, path+'/name') {b}
      else if (child.localName = 'source') then
        element.sourceList.Add(ParseStructureMapGroupRuleSource(child, path+'/source')){y.2}
      else if (child.localName = 'target') then
        element.targetList.Add(ParseStructureMapGroupRuleTarget(child, path+'/target')){y.2}
      else if (child.localName = 'rule') then
        element.ruleList.Add(ParseStructureMapGroupRule(child, path+'/rule')){y.2}
      else if (child.localName = 'dependent') then
        element.dependentList.Add(ParseStructureMapGroupRuleDependent(child, path+'/dependent')){y.2}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseString(child, path+'/documentation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRule(xml : TXmlBuilder; name : String; elem : TFhirStructureMapGroupRule);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeStructureMapGroupRuleChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleChildren(xml : TXmlBuilder; elem : TFhirStructureMapGroupRule);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeId(xml, 'name', elem.nameElement);{x.2b}
  for i := 0 to elem.sourceList.Count - 1 do
      ComposeStructureMapGroupRuleSource(xml, 'source', elem.sourceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.targetList.Count - 1 do
      ComposeStructureMapGroupRuleTarget(xml, 'target', elem.targetList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.ruleList.Count - 1 do
      ComposeStructureMapGroupRule(xml, 'rule', elem.ruleList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.dependentList.Count - 1 do
      ComposeStructureMapGroupRuleDependent(xml, 'dependent', elem.dependentList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'documentation', elem.documentationElement);{x.2b}
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleSource(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleSource;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapGroupRuleSource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapGroupRuleSourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleSourceChild(element : TFhirStructureMapGroupRuleSource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'context') then
        element.contextElement := ParseId(child, path+'/context') {b}
      else if (child.localName = 'min') then
        element.minElement := ParseInteger(child, path+'/min') {b}
      else if (child.localName = 'max') then
        element.maxElement := ParseString(child, path+'/max') {b}
      else if (child.localName = 'type') then
        element.type_Element := ParseString(child, path+'/type') {b}
      else if (child.localName = 'defaultValueCanonical') then
        element.defaultValue := ParseCanonical(child, path+'/defaultValueCanonical'){x.3}
      else if (child.localName = 'defaultValueCode') then
        element.defaultValue := ParseCode(child, path+'/defaultValueCode'){x.3}
      else if (child.localName = 'defaultValueId') then
        element.defaultValue := ParseId(child, path+'/defaultValueId'){x.3}
      else if (child.localName = 'defaultValueMarkdown') then
        element.defaultValue := ParseMarkdown(child, path+'/defaultValueMarkdown'){x.3}
      else if (child.localName = 'defaultValueOid') then
        element.defaultValue := ParseOid(child, path+'/defaultValueOid'){x.3}
      else if (child.localName = 'defaultValuePositiveInt') then
        element.defaultValue := ParsePositiveInt(child, path+'/defaultValuePositiveInt'){x.3}
      else if (child.localName = 'defaultValueUnsignedInt') then
        element.defaultValue := ParseUnsignedInt(child, path+'/defaultValueUnsignedInt'){x.3}
      else if (child.localName = 'defaultValueUrl') then
        element.defaultValue := ParseUrl(child, path+'/defaultValueUrl'){x.3}
      else if (child.localName = 'defaultValueUuid') then
        element.defaultValue := ParseUuid(child, path+'/defaultValueUuid'){x.3}
      else if (child.localName = 'defaultValueAddress') then
        element.defaultValue := ParseAddress(child, path+'/defaultValueAddress'){x.3}
      else if (child.localName = 'defaultValueAge') then
        element.defaultValue := ParseAge(child, path+'/defaultValueAge'){x.3}
      else if (child.localName = 'defaultValueAnnotation') then
        element.defaultValue := ParseAnnotation(child, path+'/defaultValueAnnotation'){x.3}
      else if (child.localName = 'defaultValueAttachment') then
        element.defaultValue := ParseAttachment(child, path+'/defaultValueAttachment'){x.3}
      else if (child.localName = 'defaultValueCodeableConcept') then
        element.defaultValue := ParseCodeableConcept(child, path+'/defaultValueCodeableConcept'){x.3}
      else if (child.localName = 'defaultValueCoding') then
        element.defaultValue := ParseCoding(child, path+'/defaultValueCoding'){x.3}
      else if (child.localName = 'defaultValueContactPoint') then
        element.defaultValue := ParseContactPoint(child, path+'/defaultValueContactPoint'){x.3}
      else if (child.localName = 'defaultValueCount') then
        element.defaultValue := ParseCount(child, path+'/defaultValueCount'){x.3}
      else if (child.localName = 'defaultValueDistance') then
        element.defaultValue := ParseDistance(child, path+'/defaultValueDistance'){x.3}
      else if (child.localName = 'defaultValueDuration') then
        element.defaultValue := ParseDuration(child, path+'/defaultValueDuration'){x.3}
      else if (child.localName = 'defaultValueHumanName') then
        element.defaultValue := ParseHumanName(child, path+'/defaultValueHumanName'){x.3}
      else if (child.localName = 'defaultValueIdentifier') then
        element.defaultValue := ParseIdentifier(child, path+'/defaultValueIdentifier'){x.3}
      else if (child.localName = 'defaultValueMoney') then
        element.defaultValue := ParseMoney(child, path+'/defaultValueMoney'){x.3}
      else if (child.localName = 'defaultValuePeriod') then
        element.defaultValue := ParsePeriod(child, path+'/defaultValuePeriod'){x.3}
      else if (child.localName = 'defaultValueQuantity') then
        element.defaultValue := ParseQuantity(child, path+'/defaultValueQuantity'){x.3}
      else if (child.localName = 'defaultValueRange') then
        element.defaultValue := ParseRange(child, path+'/defaultValueRange'){x.3}
      else if (child.localName = 'defaultValueRatio') then
        element.defaultValue := ParseRatio(child, path+'/defaultValueRatio'){x.3}
      else if (child.localName = 'defaultValueReference') then
        element.defaultValue := ParseReference(child, path+'/defaultValueReference'){x.3}
      else if (child.localName = 'defaultValueSampledData') then
        element.defaultValue := ParseSampledData(child, path+'/defaultValueSampledData'){x.3}
      else if (child.localName = 'defaultValueSignature') then
        element.defaultValue := ParseSignature(child, path+'/defaultValueSignature'){x.3}
      else if (child.localName = 'defaultValueTiming') then
        element.defaultValue := ParseTiming(child, path+'/defaultValueTiming'){x.3}
      else if (child.localName = 'defaultValueContactDetail') then
        element.defaultValue := ParseContactDetail(child, path+'/defaultValueContactDetail'){x.3}
      else if (child.localName = 'defaultValueContributor') then
        element.defaultValue := ParseContributor(child, path+'/defaultValueContributor'){x.3}
      else if (child.localName = 'defaultValueDataRequirement') then
        element.defaultValue := ParseDataRequirement(child, path+'/defaultValueDataRequirement'){x.3}
      else if (child.localName = 'defaultValueExpression') then
        element.defaultValue := ParseExpression(child, path+'/defaultValueExpression'){x.3}
      else if (child.localName = 'defaultValueParameterDefinition') then
        element.defaultValue := ParseParameterDefinition(child, path+'/defaultValueParameterDefinition'){x.3}
      else if (child.localName = 'defaultValueRelatedArtifact') then
        element.defaultValue := ParseRelatedArtifact(child, path+'/defaultValueRelatedArtifact'){x.3}
      else if (child.localName = 'defaultValueTriggerDefinition') then
        element.defaultValue := ParseTriggerDefinition(child, path+'/defaultValueTriggerDefinition'){x.3}
      else if (child.localName = 'defaultValueUsageContext') then
        element.defaultValue := ParseUsageContext(child, path+'/defaultValueUsageContext'){x.3}
      else if (child.localName = 'defaultValueDosage') then
        element.defaultValue := ParseDosage(child, path+'/defaultValueDosage'){x.3}
      else if (child.localName = 'defaultValueBase64Binary') then
        element.defaultValue := ParseBase64Binary(child, path+'/defaultValueBase64Binary'){x.3}
      else if (child.localName = 'defaultValueBoolean') then
        element.defaultValue := ParseBoolean(child, path+'/defaultValueBoolean'){x.3}
      else if (child.localName = 'defaultValueDate') then
        element.defaultValue := ParseDate(child, path+'/defaultValueDate'){x.3}
      else if (child.localName = 'defaultValueDateTime') then
        element.defaultValue := ParseDateTime(child, path+'/defaultValueDateTime'){x.3}
      else if (child.localName = 'defaultValueDecimal') then
        element.defaultValue := ParseDecimal(child, path+'/defaultValueDecimal'){x.3}
      else if (child.localName = 'defaultValueInstant') then
        element.defaultValue := ParseInstant(child, path+'/defaultValueInstant'){x.3}
      else if (child.localName = 'defaultValueInteger') then
        element.defaultValue := ParseInteger(child, path+'/defaultValueInteger'){x.3}
      else if (child.localName = 'defaultValueString') then
        element.defaultValue := ParseString(child, path+'/defaultValueString'){x.3}
      else if (child.localName = 'defaultValueTime') then
        element.defaultValue := ParseTime(child, path+'/defaultValueTime'){x.3}
      else if (child.localName = 'defaultValueUri') then
        element.defaultValue := ParseUri(child, path+'/defaultValueUri'){x.3}
      else if (child.localName = 'element') then
        element.elementElement := ParseString(child, path+'/element') {b}
      else if (child.localName = 'listMode') then
        element.listModeElement := ParseEnum(CODES_TFhirMapSourceListModeEnum, SYSTEMS_TFhirMapSourceListModeEnum, path+'/listMode', child){1a}
      else if (child.localName = 'variable') then
        element.variableElement := ParseId(child, path+'/variable') {b}
      else if (child.localName = 'condition') then
        element.conditionElement := ParseString(child, path+'/condition') {b}
      else if (child.localName = 'check') then
        element.checkElement := ParseString(child, path+'/check') {b}
      else if (child.localName = 'logMessage') then
        element.logMessageElement := ParseString(child, path+'/logMessage') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleSource(xml : TXmlBuilder; name : String; elem : TFhirStructureMapGroupRuleSource);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeStructureMapGroupRuleSourceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleSourceChildren(xml : TXmlBuilder; elem : TFhirStructureMapGroupRuleSource);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeId(xml, 'context', elem.contextElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'min', elem.minElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'max', elem.maxElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'type', elem.type_Element);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'defaultValueCanonical', TFhirCanonical(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirCode) {6} then
    ComposeCode(xml, 'defaultValueCode', TFhirCode(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirId) {6} then
    ComposeId(xml, 'defaultValueId', TFhirId(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'defaultValueMarkdown', TFhirMarkdown(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirOid) {6} then
    ComposeOid(xml, 'defaultValueOid', TFhirOid(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'defaultValuePositiveInt', TFhirPositiveInt(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'defaultValueUnsignedInt', TFhirUnsignedInt(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirUrl) {6} then
    ComposeUrl(xml, 'defaultValueUrl', TFhirUrl(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirUuid) {6} then
    ComposeUuid(xml, 'defaultValueUuid', TFhirUuid(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirAddress) {6} then
    ComposeAddress(xml, 'defaultValueAddress', TFhirAddress(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirAge) {6} then
    ComposeAge(xml, 'defaultValueAge', TFhirAge(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'defaultValueAnnotation', TFhirAnnotation(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'defaultValueAttachment', TFhirAttachment(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'defaultValueCodeableConcept', TFhirCodeableConcept(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirCoding) {6} then
    ComposeCoding(xml, 'defaultValueCoding', TFhirCoding(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'defaultValueContactPoint', TFhirContactPoint(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirCount) {6} then
    ComposeCount(xml, 'defaultValueCount', TFhirCount(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDistance) {6} then
    ComposeDistance(xml, 'defaultValueDistance', TFhirDistance(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDuration) {6} then
    ComposeDuration(xml, 'defaultValueDuration', TFhirDuration(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'defaultValueHumanName', TFhirHumanName(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'defaultValueIdentifier', TFhirIdentifier(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirMoney) {6} then
    ComposeMoney(xml, 'defaultValueMoney', TFhirMoney(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirPeriod) {6} then
    ComposePeriod(xml, 'defaultValuePeriod', TFhirPeriod(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'defaultValueQuantity', TFhirQuantity(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirRange) {6} then
    ComposeRange(xml, 'defaultValueRange', TFhirRange(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirRatio) {6} then
    ComposeRatio(xml, 'defaultValueRatio', TFhirRatio(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirReference) {6} then
    ComposeReference(xml, 'defaultValueReference', TFhirReference(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'defaultValueSampledData', TFhirSampledData(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirSignature) {6} then
    ComposeSignature(xml, 'defaultValueSignature', TFhirSignature(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirTiming) {6} then
    ComposeTiming(xml, 'defaultValueTiming', TFhirTiming(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'defaultValueContactDetail', TFhirContactDetail(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirContributor) {6} then
    ComposeContributor(xml, 'defaultValueContributor', TFhirContributor(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'defaultValueDataRequirement', TFhirDataRequirement(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirExpression) {6} then
    ComposeExpression(xml, 'defaultValueExpression', TFhirExpression(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'defaultValueParameterDefinition', TFhirParameterDefinition(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'defaultValueRelatedArtifact', TFhirRelatedArtifact(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'defaultValueTriggerDefinition', TFhirTriggerDefinition(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'defaultValueUsageContext', TFhirUsageContext(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDosage) {6} then
    ComposeDosage(xml, 'defaultValueDosage', TFhirDosage(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'defaultValueBase64Binary', TFhirBase64Binary(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'defaultValueBoolean', TFhirBoolean(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDate) {6} then
    ComposeDate(xml, 'defaultValueDate', TFhirDate(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'defaultValueDateTime', TFhirDateTime(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'defaultValueDecimal', TFhirDecimal(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirInstant) {6} then
    ComposeInstant(xml, 'defaultValueInstant', TFhirInstant(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirInteger) {6} then
    ComposeInteger(xml, 'defaultValueInteger', TFhirInteger(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirString) {6} then
    ComposeString(xml, 'defaultValueString', TFhirString(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirTime) {6} then
    ComposeTime(xml, 'defaultValueTime', TFhirTime(elem.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.defaultValue is TFhirUri) {6} then
    ComposeUri(xml, 'defaultValueUri', TFhirUri(elem.defaultValue));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'element', elem.elementElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'listMode', elem.ListModeElement, CODES_TFhirMapSourceListModeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'variable', elem.variableElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'condition', elem.conditionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'check', elem.checkElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'logMessage', elem.logMessageElement);{x.2b}
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleTarget(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleTarget;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapGroupRuleTarget.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapGroupRuleTargetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleTargetChild(element : TFhirStructureMapGroupRuleTarget; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'context') then
        element.contextElement := ParseId(child, path+'/context') {b}
      else if (child.localName = 'contextType') then
        element.contextTypeElement := ParseEnum(CODES_TFhirMapContextTypeEnum, SYSTEMS_TFhirMapContextTypeEnum, path+'/contextType', child){1a}
      else if (child.localName = 'element') then
        element.elementElement := ParseString(child, path+'/element') {b}
      else if (child.localName = 'variable') then
        element.variableElement := ParseId(child, path+'/variable') {b}
      else if (child.localName = 'listMode') then
        element.listModeList.Add(ParseEnum(CODES_TFhirMapTargetListModeEnum, SYSTEMS_TFhirMapTargetListModeEnum, path+'/listMode', child)){y.1}
      else if (child.localName = 'listRuleId') then
        element.listRuleIdElement := ParseId(child, path+'/listRuleId') {b}
      else if (child.localName = 'transform') then
        element.transformElement := ParseEnum(CODES_TFhirMapTransformEnum, SYSTEMS_TFhirMapTransformEnum, path+'/transform', child){1a}
      else if (child.localName = 'parameter') then
        element.parameterList.Add(ParseStructureMapGroupRuleTargetParameter(child, path+'/parameter')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleTarget(xml : TXmlBuilder; name : String; elem : TFhirStructureMapGroupRuleTarget);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeStructureMapGroupRuleTargetChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleTargetChildren(xml : TXmlBuilder; elem : TFhirStructureMapGroupRuleTarget);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'context', elem.contextElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'contextType', elem.ContextTypeElement, CODES_TFhirMapContextTypeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'element', elem.elementElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'variable', elem.variableElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.listModeList.Count - 1 do
      ComposeEnum(xml, 'listMode', elem.listModeList[i], CODES_TFhirMapTargetListModeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'listRuleId', elem.listRuleIdElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'transform', elem.TransformElement, CODES_TFhirMapTransformEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeStructureMapGroupRuleTargetParameter(xml, 'parameter', elem.parameterList[i]);
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleTargetParameter(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleTargetParameter;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapGroupRuleTargetParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapGroupRuleTargetParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleTargetParameterChild(element : TFhirStructureMapGroupRuleTargetParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'valueId') then
        element.value := ParseId(child, path+'/valueId'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueInteger') then
        element.value := ParseInteger(child, path+'/valueInteger'){x.3}
      else if (child.localName = 'valueDecimal') then
        element.value := ParseDecimal(child, path+'/valueDecimal'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleTargetParameter(xml : TXmlBuilder; name : String; elem : TFhirStructureMapGroupRuleTargetParameter);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeStructureMapGroupRuleTargetParameterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleTargetParameterChildren(xml : TXmlBuilder; elem : TFhirStructureMapGroupRuleTargetParameter);
begin
  composeBackboneElementChildren(xml, elem);
  if (elem.value is TFhirId) {6} then
    ComposeId(xml, 'valueId', TFhirId(elem.value))
  else if (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (elem.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(elem.value))
  else if (elem.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(elem.value));
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleDependent(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleDependent;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapGroupRuleDependent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapGroupRuleDependentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleDependentChild(element : TFhirStructureMapGroupRuleDependent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseId(child, path+'/name') {b}
      else if (child.localName = 'variable') then
        element.variableList.Add(ParseString(child, path+'/variable')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleDependent(xml : TXmlBuilder; name : String; elem : TFhirStructureMapGroupRuleDependent);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeStructureMapGroupRuleDependentChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleDependentChildren(xml : TXmlBuilder; elem : TFhirStructureMapGroupRuleDependent);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeId(xml, 'name', elem.nameElement);{x.2b}
  for i := 0 to elem.variableList.Count - 1 do
      ComposeString(xml, 'variable', elem.variableList[i]);
end;

function TFHIRXmlParser.ParseStructureMap(element : TMXmlElement; path : string) : TFhirStructureMap;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMap.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapChild(element : TFhirStructureMap; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'structure') then
        element.structureList.Add(ParseStructureMapStructure(child, path+'/structure')){y.2}
      else if (child.localName = 'import') then
        element.importList.Add(ParseCanonical(child, path+'/import')){y.2}
      else if (child.localName = 'group') then
        element.groupList.Add(ParseStructureMapGroup(child, path+'/group')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMap(xml : TXmlBuilder; name : String; elem : TFhirStructureMap);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeStructureMapChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeStructureMapChildren(xml : TXmlBuilder; elem : TFhirStructureMap);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('structure') then
    for i := 0 to elem.structureList.Count - 1 do
      ComposeStructureMapStructure(xml, 'structure', elem.structureList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('import') then
    for i := 0 to elem.importList.Count - 1 do
      ComposeCanonical(xml, 'import', elem.importList[i]);
  for i := 0 to elem.groupList.Count - 1 do
      ComposeStructureMapGroup(xml, 'group', elem.groupList[i]);
end;

{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
function TFHIRXmlParser.ParseSubscriptionChannel(element : TMXmlElement; path : string) : TFhirSubscriptionChannel;
var
  child : TMXmlElement;
begin
  result := TFhirSubscriptionChannel.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubscriptionChannelChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubscriptionChannelChild(element : TFhirSubscriptionChannel; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirSubscriptionChannelTypeEnum, SYSTEMS_TFhirSubscriptionChannelTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'endpoint') then
        element.endpointElement := ParseUrl(child, path+'/endpoint') {b}
      else if (child.localName = 'payload') then
        element.payloadElement := ParseCode(child, path+'/payload') {b}
      else if (child.localName = 'header') then
        element.headerList.Add(ParseString(child, path+'/header')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubscriptionChannel(xml : TXmlBuilder; name : String; elem : TFhirSubscriptionChannel);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubscriptionChannelChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubscriptionChannelChildren(xml : TXmlBuilder; elem : TFhirSubscriptionChannel);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirSubscriptionChannelTypeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrl(xml, 'endpoint', elem.endpointElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCode(xml, 'payload', elem.payloadElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.headerList.Count - 1 do
      ComposeString(xml, 'header', elem.headerList[i]);
end;

function TFHIRXmlParser.ParseSubscription(element : TMXmlElement; path : string) : TFhirSubscription;
var
  child : TMXmlElement;
begin
  result := TFhirSubscription.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubscriptionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubscriptionChild(element : TFhirSubscription; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirSubscriptionStatusEnum, SYSTEMS_TFhirSubscriptionStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactPoint(child, path+'/contact')){y.2}
      else if (child.localName = 'end') then
        element.end_Element := ParseInstant(child, path+'/end') {b}
      else if (child.localName = 'reason') then
        element.reasonElement := ParseString(child, path+'/reason') {b}
      else if (child.localName = 'criteria') then
        element.criteriaElement := ParseString(child, path+'/criteria') {b}
      else if (child.localName = 'error') then
        element.errorElement := ParseString(child, path+'/error') {b}
      else if (child.localName = 'channel') then
        element.channel := ParseSubscriptionChannel(child, path+'/channel') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubscription(xml : TXmlBuilder; name : String; elem : TFhirSubscription);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeSubscriptionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubscriptionChildren(xml : TXmlBuilder; elem : TFhirSubscription);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirSubscriptionStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactPoint(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('end_') then
    ComposeInstant(xml, 'end', elem.end_Element);{x.2b}
  ComposeString(xml, 'reason', elem.reasonElement);{x.2b}
  ComposeString(xml, 'criteria', elem.criteriaElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('error') then
    ComposeString(xml, 'error', elem.errorElement);{x.2b}
  ComposeSubscriptionChannel(xml, 'channel', elem.channel);{x.2a}
end;

{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
function TFHIRXmlParser.ParseSubstanceInstance(element : TMXmlElement; path : string) : TFhirSubstanceInstance;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceInstance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceInstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceInstanceChild(element : TFhirSubstanceInstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'expiry') then
        element.expiryElement := ParseDateTime(child, path+'/expiry') {b}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceInstance(xml : TXmlBuilder; name : String; elem : TFhirSubstanceInstance);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceInstanceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceInstanceChildren(xml : TXmlBuilder; elem : TFhirSubstanceInstance);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'expiry', elem.expiryElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
end;

function TFHIRXmlParser.ParseSubstanceIngredient(element : TMXmlElement; path : string) : TFhirSubstanceIngredient;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceIngredient.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceIngredientChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceIngredientChild(element : TFhirSubstanceIngredient; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'quantity') then
        element.quantity := ParseRatio(child, path+'/quantity') {b}
      else if (child.localName = 'substanceCodeableConcept') then
        element.substance := ParseCodeableConcept(child, path+'/substanceCodeableConcept'){x.3}
      else if (child.localName = 'substanceReference') then
        element.substance := ParseReference(child, path+'/substanceReference') {a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceIngredient(xml : TXmlBuilder; name : String; elem : TFhirSubstanceIngredient);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceIngredientChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceIngredientChildren(xml : TXmlBuilder; elem : TFhirSubstanceIngredient);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'quantity', elem.quantity);{x.2a}
  if (elem.substance is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'substanceCodeableConcept', TFhirCodeableConcept(elem.substance))
  else if (elem.substance is TFhirReference) {2} then
    ComposeReference(xml, 'substanceReference', TFhirReference(elem.substance));
end;

function TFHIRXmlParser.ParseSubstance(element : TMXmlElement; path : string) : TFhirSubstance;
var
  child : TMXmlElement;
begin
  result := TFhirSubstance.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceChild(element : TFhirSubstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirSubstanceStatusEnum, SYSTEMS_TFhirSubstanceStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'category') then
        element.categoryList.Add(ParseCodeableConcept(child, path+'/category')){y.2}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'instance') then
        element.instanceList.Add(ParseSubstanceInstance(child, path+'/instance')){y.2}
      else if (child.localName = 'ingredient') then
        element.ingredientList.Add(ParseSubstanceIngredient(child, path+'/ingredient')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstance(xml : TXmlBuilder; name : String; elem : TFhirSubstance);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeSubstanceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceChildren(xml : TXmlBuilder; elem : TFhirSubstance);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirSubstanceStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    for i := 0 to elem.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', elem.categoryList[i]);
  ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instance') then
    for i := 0 to elem.instanceList.Count - 1 do
      ComposeSubstanceInstance(xml, 'instance', elem.instanceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('ingredient') then
    for i := 0 to elem.ingredientList.Count - 1 do
      ComposeSubstanceIngredient(xml, 'ingredient', elem.ingredientList[i]);
end;

{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCENUCLEICACID}
function TFHIRXmlParser.ParseSubstanceNucleicAcidSubunit(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcidSubunit;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceNucleicAcidSubunit.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceNucleicAcidSubunitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceNucleicAcidSubunitChild(element : TFhirSubstanceNucleicAcidSubunit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'subunit') then
        element.subunitElement := ParseInteger(child, path+'/subunit') {b}
      else if (child.localName = 'sequence') then
        element.sequenceElement := ParseString(child, path+'/sequence') {b}
      else if (child.localName = 'length') then
        element.lengthElement := ParseInteger(child, path+'/length') {b}
      else if (child.localName = 'sequenceAttachment') then
        element.sequenceAttachment := ParseAttachment(child, path+'/sequenceAttachment') {b}
      else if (child.localName = 'fivePrime') then
        element.fivePrime := ParseCodeableConcept(child, path+'/fivePrime') {b}
      else if (child.localName = 'threePrime') then
        element.threePrime := ParseCodeableConcept(child, path+'/threePrime') {b}
      else if (child.localName = 'linkage') then
        element.linkageList.Add(ParseSubstanceNucleicAcidSubunitLinkage(child, path+'/linkage')){y.2}
      else if (child.localName = 'sugar') then
        element.sugarList.Add(ParseSubstanceNucleicAcidSubunitSugar(child, path+'/sugar')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcidSubunit(xml : TXmlBuilder; name : String; elem : TFhirSubstanceNucleicAcidSubunit);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceNucleicAcidSubunitChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcidSubunitChildren(xml : TXmlBuilder; elem : TFhirSubstanceNucleicAcidSubunit);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'subunit', elem.subunitElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'sequence', elem.sequenceElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'length', elem.lengthElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(xml, 'sequenceAttachment', elem.sequenceAttachment);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'fivePrime', elem.fivePrime);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'threePrime', elem.threePrime);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.linkageList.Count - 1 do
      ComposeSubstanceNucleicAcidSubunitLinkage(xml, 'linkage', elem.linkageList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.sugarList.Count - 1 do
      ComposeSubstanceNucleicAcidSubunitSugar(xml, 'sugar', elem.sugarList[i]);
end;

function TFHIRXmlParser.ParseSubstanceNucleicAcidSubunitLinkage(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcidSubunitLinkage;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceNucleicAcidSubunitLinkage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceNucleicAcidSubunitLinkageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceNucleicAcidSubunitLinkageChild(element : TFhirSubstanceNucleicAcidSubunitLinkage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'connectivity') then
        element.connectivityElement := ParseString(child, path+'/connectivity') {b}
      else if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'residueSite') then
        element.residueSiteElement := ParseString(child, path+'/residueSite') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcidSubunitLinkage(xml : TXmlBuilder; name : String; elem : TFhirSubstanceNucleicAcidSubunitLinkage);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceNucleicAcidSubunitLinkageChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcidSubunitLinkageChildren(xml : TXmlBuilder; elem : TFhirSubstanceNucleicAcidSubunitLinkage);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'connectivity', elem.connectivityElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'residueSite', elem.residueSiteElement);{x.2b}
end;

function TFHIRXmlParser.ParseSubstanceNucleicAcidSubunitSugar(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcidSubunitSugar;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceNucleicAcidSubunitSugar.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceNucleicAcidSubunitSugarChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceNucleicAcidSubunitSugarChild(element : TFhirSubstanceNucleicAcidSubunitSugar; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'residueSite') then
        element.residueSiteElement := ParseString(child, path+'/residueSite') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcidSubunitSugar(xml : TXmlBuilder; name : String; elem : TFhirSubstanceNucleicAcidSubunitSugar);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceNucleicAcidSubunitSugarChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcidSubunitSugarChildren(xml : TXmlBuilder; elem : TFhirSubstanceNucleicAcidSubunitSugar);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'residueSite', elem.residueSiteElement);{x.2b}
end;

function TFHIRXmlParser.ParseSubstanceNucleicAcid(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcid;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceNucleicAcid.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceNucleicAcidChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceNucleicAcidChild(element : TFhirSubstanceNucleicAcid; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequenceType') then
        element.sequenceType := ParseCodeableConcept(child, path+'/sequenceType') {b}
      else if (child.localName = 'numberOfSubunits') then
        element.numberOfSubunitsElement := ParseInteger(child, path+'/numberOfSubunits') {b}
      else if (child.localName = 'areaOfHybridisation') then
        element.areaOfHybridisationElement := ParseString(child, path+'/areaOfHybridisation') {b}
      else if (child.localName = 'oligoNucleotideType') then
        element.oligoNucleotideType := ParseCodeableConcept(child, path+'/oligoNucleotideType') {b}
      else if (child.localName = 'subunit') then
        element.subunitList.Add(ParseSubstanceNucleicAcidSubunit(child, path+'/subunit')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcid(xml : TXmlBuilder; name : String; elem : TFhirSubstanceNucleicAcid);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeSubstanceNucleicAcidChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcidChildren(xml : TXmlBuilder; elem : TFhirSubstanceNucleicAcid);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('sequenceType') then
    ComposeCodeableConcept(xml, 'sequenceType', elem.sequenceType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('numberOfSubunits') then
    ComposeInteger(xml, 'numberOfSubunits', elem.numberOfSubunitsElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('areaOfHybridisation') then
    ComposeString(xml, 'areaOfHybridisation', elem.areaOfHybridisationElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('oligoNucleotideType') then
    ComposeCodeableConcept(xml, 'oligoNucleotideType', elem.oligoNucleotideType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subunit') then
    for i := 0 to elem.subunitList.Count - 1 do
      ComposeSubstanceNucleicAcidSubunit(xml, 'subunit', elem.subunitList[i]);
end;

{$ENDIF FHIR_SUBSTANCENUCLEICACID}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
function TFHIRXmlParser.ParseSubstancePolymerMonomerSet(element : TMXmlElement; path : string) : TFhirSubstancePolymerMonomerSet;
var
  child : TMXmlElement;
begin
  result := TFhirSubstancePolymerMonomerSet.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstancePolymerMonomerSetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstancePolymerMonomerSetChild(element : TFhirSubstancePolymerMonomerSet; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'ratioType') then
        element.ratioType := ParseCodeableConcept(child, path+'/ratioType') {b}
      else if (child.localName = 'startingMaterial') then
        element.startingMaterialList.Add(ParseSubstancePolymerMonomerSetStartingMaterial(child, path+'/startingMaterial')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerMonomerSet(xml : TXmlBuilder; name : String; elem : TFhirSubstancePolymerMonomerSet);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstancePolymerMonomerSetChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerMonomerSetChildren(xml : TXmlBuilder; elem : TFhirSubstancePolymerMonomerSet);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'ratioType', elem.ratioType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.startingMaterialList.Count - 1 do
      ComposeSubstancePolymerMonomerSetStartingMaterial(xml, 'startingMaterial', elem.startingMaterialList[i]);
end;

function TFHIRXmlParser.ParseSubstancePolymerMonomerSetStartingMaterial(element : TMXmlElement; path : string) : TFhirSubstancePolymerMonomerSetStartingMaterial;
var
  child : TMXmlElement;
begin
  result := TFhirSubstancePolymerMonomerSetStartingMaterial.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstancePolymerMonomerSetStartingMaterialChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstancePolymerMonomerSetStartingMaterialChild(element : TFhirSubstancePolymerMonomerSetStartingMaterial; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'material') then
        element.material := ParseCodeableConcept(child, path+'/material') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'isDefining') then
        element.isDefiningElement := ParseBoolean(child, path+'/isDefining') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseSubstanceAmount(child, path+'/amount') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerMonomerSetStartingMaterial(xml : TXmlBuilder; name : String; elem : TFhirSubstancePolymerMonomerSetStartingMaterial);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstancePolymerMonomerSetStartingMaterialChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerMonomerSetStartingMaterialChildren(xml : TXmlBuilder; elem : TFhirSubstancePolymerMonomerSetStartingMaterial);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'material', elem.material);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'isDefining', elem.isDefiningElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceAmount(xml, 'amount', elem.amount);{x.2a}
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeat(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeat;
var
  child : TMXmlElement;
begin
  result := TFhirSubstancePolymerRepeat.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstancePolymerRepeatChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeatChild(element : TFhirSubstancePolymerRepeat; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'numberOfUnits') then
        element.numberOfUnitsElement := ParseInteger(child, path+'/numberOfUnits') {b}
      else if (child.localName = 'averageMolecularFormula') then
        element.averageMolecularFormulaElement := ParseString(child, path+'/averageMolecularFormula') {b}
      else if (child.localName = 'repeatUnitAmountType') then
        element.repeatUnitAmountType := ParseCodeableConcept(child, path+'/repeatUnitAmountType') {b}
      else if (child.localName = 'repeatUnit') then
        element.repeatUnitList.Add(ParseSubstancePolymerRepeatRepeatUnit(child, path+'/repeatUnit')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeat(xml : TXmlBuilder; name : String; elem : TFhirSubstancePolymerRepeat);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstancePolymerRepeatChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeatChildren(xml : TXmlBuilder; elem : TFhirSubstancePolymerRepeat);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'numberOfUnits', elem.numberOfUnitsElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'averageMolecularFormula', elem.averageMolecularFormulaElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'repeatUnitAmountType', elem.repeatUnitAmountType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.repeatUnitList.Count - 1 do
      ComposeSubstancePolymerRepeatRepeatUnit(xml, 'repeatUnit', elem.repeatUnitList[i]);
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeatRepeatUnit(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeatRepeatUnit;
var
  child : TMXmlElement;
begin
  result := TFhirSubstancePolymerRepeatRepeatUnit.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstancePolymerRepeatRepeatUnitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeatRepeatUnitChild(element : TFhirSubstancePolymerRepeatRepeatUnit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'orientationOfPolymerisation') then
        element.orientationOfPolymerisation := ParseCodeableConcept(child, path+'/orientationOfPolymerisation') {b}
      else if (child.localName = 'repeatUnit') then
        element.repeatUnitElement := ParseString(child, path+'/repeatUnit') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseSubstanceAmount(child, path+'/amount') {b}
      else if (child.localName = 'degreeOfPolymerisation') then
        element.degreeOfPolymerisationList.Add(ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(child, path+'/degreeOfPolymerisation')){y.2}
      else if (child.localName = 'structuralRepresentation') then
        element.structuralRepresentationList.Add(ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentation(child, path+'/structuralRepresentation')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeatRepeatUnit(xml : TXmlBuilder; name : String; elem : TFhirSubstancePolymerRepeatRepeatUnit);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstancePolymerRepeatRepeatUnitChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeatRepeatUnitChildren(xml : TXmlBuilder; elem : TFhirSubstancePolymerRepeatRepeatUnit);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'orientationOfPolymerisation', elem.orientationOfPolymerisation);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'repeatUnit', elem.repeatUnitElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceAmount(xml, 'amount', elem.amount);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.degreeOfPolymerisationList.Count - 1 do
      ComposeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(xml, 'degreeOfPolymerisation', elem.degreeOfPolymerisationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.structuralRepresentationList.Count - 1 do
      ComposeSubstancePolymerRepeatRepeatUnitStructuralRepresentation(xml, 'structuralRepresentation', elem.structuralRepresentationList[i]);
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation;
var
  child : TMXmlElement;
begin
  result := TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationChild(element : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'degree') then
        element.degree := ParseCodeableConcept(child, path+'/degree') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseSubstanceAmount(child, path+'/amount') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(xml : TXmlBuilder; name : String; elem : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationChildren(xml : TXmlBuilder; elem : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'degree', elem.degree);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceAmount(xml, 'amount', elem.amount);{x.2a}
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentation(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation;
var
  child : TMXmlElement;
begin
  result := TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentationChild(element : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'representation') then
        element.representationElement := ParseString(child, path+'/representation') {b}
      else if (child.localName = 'attachment') then
        element.attachment := ParseAttachment(child, path+'/attachment') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeatRepeatUnitStructuralRepresentation(xml : TXmlBuilder; name : String; elem : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstancePolymerRepeatRepeatUnitStructuralRepresentationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeatRepeatUnitStructuralRepresentationChildren(xml : TXmlBuilder; elem : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'representation', elem.representationElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(xml, 'attachment', elem.attachment);{x.2a}
end;

function TFHIRXmlParser.ParseSubstancePolymer(element : TMXmlElement; path : string) : TFhirSubstancePolymer;
var
  child : TMXmlElement;
begin
  result := TFhirSubstancePolymer.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstancePolymerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstancePolymerChild(element : TFhirSubstancePolymer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'class') then
        element.class_ := ParseCodeableConcept(child, path+'/class') {b}
      else if (child.localName = 'geometry') then
        element.geometry := ParseCodeableConcept(child, path+'/geometry') {b}
      else if (child.localName = 'copolymerConnectivity') then
        element.copolymerConnectivityList.Add(ParseCodeableConcept(child, path+'/copolymerConnectivity')){y.2}
      else if (child.localName = 'modification') then
        element.modificationList.Add(ParseString(child, path+'/modification')){y.2}
      else if (child.localName = 'monomerSet') then
        element.monomerSetList.Add(ParseSubstancePolymerMonomerSet(child, path+'/monomerSet')){y.2}
      else if (child.localName = 'repeat') then
        element.repeat_List.Add(ParseSubstancePolymerRepeat(child, path+'/repeat')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymer(xml : TXmlBuilder; name : String; elem : TFhirSubstancePolymer);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeSubstancePolymerChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerChildren(xml : TXmlBuilder; elem : TFhirSubstancePolymer);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('class_') then
    ComposeCodeableConcept(xml, 'class', elem.class_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('geometry') then
    ComposeCodeableConcept(xml, 'geometry', elem.geometry);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('copolymerConnectivity') then
    for i := 0 to elem.copolymerConnectivityList.Count - 1 do
      ComposeCodeableConcept(xml, 'copolymerConnectivity', elem.copolymerConnectivityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('modification') then
    for i := 0 to elem.modificationList.Count - 1 do
      ComposeString(xml, 'modification', elem.modificationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('monomerSet') then
    for i := 0 to elem.monomerSetList.Count - 1 do
      ComposeSubstancePolymerMonomerSet(xml, 'monomerSet', elem.monomerSetList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('repeat_') then
    for i := 0 to elem.repeat_List.Count - 1 do
      ComposeSubstancePolymerRepeat(xml, 'repeat', elem.repeat_List[i]);
end;

{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEPROTEIN}
function TFHIRXmlParser.ParseSubstanceProteinSubunit(element : TMXmlElement; path : string) : TFhirSubstanceProteinSubunit;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceProteinSubunit.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceProteinSubunitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceProteinSubunitChild(element : TFhirSubstanceProteinSubunit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'subunit') then
        element.subunitElement := ParseInteger(child, path+'/subunit') {b}
      else if (child.localName = 'sequence') then
        element.sequenceElement := ParseString(child, path+'/sequence') {b}
      else if (child.localName = 'length') then
        element.lengthElement := ParseInteger(child, path+'/length') {b}
      else if (child.localName = 'sequenceAttachment') then
        element.sequenceAttachment := ParseAttachment(child, path+'/sequenceAttachment') {b}
      else if (child.localName = 'nTerminalModificationId') then
        element.nTerminalModificationId := ParseIdentifier(child, path+'/nTerminalModificationId') {b}
      else if (child.localName = 'nTerminalModification') then
        element.nTerminalModificationElement := ParseString(child, path+'/nTerminalModification') {b}
      else if (child.localName = 'cTerminalModificationId') then
        element.cTerminalModificationId := ParseIdentifier(child, path+'/cTerminalModificationId') {b}
      else if (child.localName = 'cTerminalModification') then
        element.cTerminalModificationElement := ParseString(child, path+'/cTerminalModification') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceProteinSubunit(xml : TXmlBuilder; name : String; elem : TFhirSubstanceProteinSubunit);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceProteinSubunitChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceProteinSubunitChildren(xml : TXmlBuilder; elem : TFhirSubstanceProteinSubunit);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'subunit', elem.subunitElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'sequence', elem.sequenceElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'length', elem.lengthElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(xml, 'sequenceAttachment', elem.sequenceAttachment);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'nTerminalModificationId', elem.nTerminalModificationId);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'nTerminalModification', elem.nTerminalModificationElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'cTerminalModificationId', elem.cTerminalModificationId);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'cTerminalModification', elem.cTerminalModificationElement);{x.2b}
end;

function TFHIRXmlParser.ParseSubstanceProtein(element : TMXmlElement; path : string) : TFhirSubstanceProtein;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceProtein.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceProteinChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceProteinChild(element : TFhirSubstanceProtein; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequenceType') then
        element.sequenceType := ParseCodeableConcept(child, path+'/sequenceType') {b}
      else if (child.localName = 'numberOfSubunits') then
        element.numberOfSubunitsElement := ParseInteger(child, path+'/numberOfSubunits') {b}
      else if (child.localName = 'disulfideLinkage') then
        element.disulfideLinkageList.Add(ParseString(child, path+'/disulfideLinkage')){y.2}
      else if (child.localName = 'subunit') then
        element.subunitList.Add(ParseSubstanceProteinSubunit(child, path+'/subunit')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceProtein(xml : TXmlBuilder; name : String; elem : TFhirSubstanceProtein);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeSubstanceProteinChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceProteinChildren(xml : TXmlBuilder; elem : TFhirSubstanceProtein);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('sequenceType') then
    ComposeCodeableConcept(xml, 'sequenceType', elem.sequenceType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('numberOfSubunits') then
    ComposeInteger(xml, 'numberOfSubunits', elem.numberOfSubunitsElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('disulfideLinkage') then
    for i := 0 to elem.disulfideLinkageList.Count - 1 do
      ComposeString(xml, 'disulfideLinkage', elem.disulfideLinkageList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('subunit') then
    for i := 0 to elem.subunitList.Count - 1 do
      ComposeSubstanceProteinSubunit(xml, 'subunit', elem.subunitList[i]);
end;

{$ENDIF FHIR_SUBSTANCEPROTEIN}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
function TFHIRXmlParser.ParseSubstanceReferenceInformationGene(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformationGene;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceReferenceInformationGene.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceReferenceInformationGeneChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformationGeneChild(element : TFhirSubstanceReferenceInformationGene; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'geneSequenceOrigin') then
        element.geneSequenceOrigin := ParseCodeableConcept(child, path+'/geneSequenceOrigin') {b}
      else if (child.localName = 'gene') then
        element.gene := ParseCodeableConcept(child, path+'/gene') {b}
      else if (child.localName = 'source') then
        element.sourceList.Add(ParseReference{TFhirDocumentReference}(child, path+'/source')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationGene(xml : TXmlBuilder; name : String; elem : TFhirSubstanceReferenceInformationGene);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceReferenceInformationGeneChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationGeneChildren(xml : TXmlBuilder; elem : TFhirSubstanceReferenceInformationGene);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'geneSequenceOrigin', elem.geneSequenceOrigin);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'gene', elem.gene);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(xml, 'source', elem.sourceList[i]);
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformationGeneElement(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformationGeneElement;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceReferenceInformationGeneElement.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceReferenceInformationGeneElementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformationGeneElementChild(element : TFhirSubstanceReferenceInformationGeneElement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'element') then
        element.element := ParseIdentifier(child, path+'/element') {b}
      else if (child.localName = 'source') then
        element.sourceList.Add(ParseReference{TFhirDocumentReference}(child, path+'/source')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationGeneElement(xml : TXmlBuilder; name : String; elem : TFhirSubstanceReferenceInformationGeneElement);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceReferenceInformationGeneElementChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationGeneElementChildren(xml : TXmlBuilder; elem : TFhirSubstanceReferenceInformationGeneElement);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'element', elem.element);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(xml, 'source', elem.sourceList[i]);
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformationClassification(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformationClassification;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceReferenceInformationClassification.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceReferenceInformationClassificationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformationClassificationChild(element : TFhirSubstanceReferenceInformationClassification; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'domain') then
        element.domain := ParseCodeableConcept(child, path+'/domain') {b}
      else if (child.localName = 'classification') then
        element.classification := ParseCodeableConcept(child, path+'/classification') {b}
      else if (child.localName = 'subtype') then
        element.subtypeList.Add(ParseCodeableConcept(child, path+'/subtype')){y.2}
      else if (child.localName = 'source') then
        element.sourceList.Add(ParseReference{TFhirDocumentReference}(child, path+'/source')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationClassification(xml : TXmlBuilder; name : String; elem : TFhirSubstanceReferenceInformationClassification);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceReferenceInformationClassificationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationClassificationChildren(xml : TXmlBuilder; elem : TFhirSubstanceReferenceInformationClassification);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'domain', elem.domain);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'classification', elem.classification);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.subtypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'subtype', elem.subtypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(xml, 'source', elem.sourceList[i]);
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformationTarget(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformationTarget;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceReferenceInformationTarget.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceReferenceInformationTargetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformationTargetChild(element : TFhirSubstanceReferenceInformationTarget; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'target') then
        element.target := ParseIdentifier(child, path+'/target') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'interaction') then
        element.interaction := ParseCodeableConcept(child, path+'/interaction') {b}
      else if (child.localName = 'organism') then
        element.organism := ParseCodeableConcept(child, path+'/organism') {b}
      else if (child.localName = 'organismType') then
        element.organismType := ParseCodeableConcept(child, path+'/organismType') {b}
      else if (child.localName = 'amountQuantity') then
        element.amount := ParseQuantity(child, path+'/amountQuantity'){x.3}
      else if (child.localName = 'amountRange') then
        element.amount := ParseRange(child, path+'/amountRange'){x.3}
      else if (child.localName = 'amountString') then
        element.amount := ParseString(child, path+'/amountString'){x.3}
      else if (child.localName = 'amountType') then
        element.amountType := ParseCodeableConcept(child, path+'/amountType') {b}
      else if (child.localName = 'source') then
        element.sourceList.Add(ParseReference{TFhirDocumentReference}(child, path+'/source')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationTarget(xml : TXmlBuilder; name : String; elem : TFhirSubstanceReferenceInformationTarget);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceReferenceInformationTargetChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationTargetChildren(xml : TXmlBuilder; elem : TFhirSubstanceReferenceInformationTarget);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'target', elem.target);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'interaction', elem.interaction);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'organism', elem.organism);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'organismType', elem.organismType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'amountQuantity', TFhirQuantity(elem.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirRange) {6} then
    ComposeRange(xml, 'amountRange', TFhirRange(elem.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirString) {6} then
    ComposeString(xml, 'amountString', TFhirString(elem.amount));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'amountType', elem.amountType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(xml, 'source', elem.sourceList[i]);
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformation(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformation;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceReferenceInformation.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceReferenceInformationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformationChild(element : TFhirSubstanceReferenceInformation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if (child.localName = 'gene') then
        element.geneList.Add(ParseSubstanceReferenceInformationGene(child, path+'/gene')){y.2}
      else if (child.localName = 'geneElement') then
        element.geneElementList.Add(ParseSubstanceReferenceInformationGeneElement(child, path+'/geneElement')){y.2}
      else if (child.localName = 'classification') then
        element.classificationList.Add(ParseSubstanceReferenceInformationClassification(child, path+'/classification')){y.2}
      else if (child.localName = 'target') then
        element.targetList.Add(ParseSubstanceReferenceInformationTarget(child, path+'/target')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformation(xml : TXmlBuilder; name : String; elem : TFhirSubstanceReferenceInformation);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeSubstanceReferenceInformationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationChildren(xml : TXmlBuilder; elem : TFhirSubstanceReferenceInformation);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('comment') then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('gene') then
    for i := 0 to elem.geneList.Count - 1 do
      ComposeSubstanceReferenceInformationGene(xml, 'gene', elem.geneList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('geneElement') then
    for i := 0 to elem.geneElementList.Count - 1 do
      ComposeSubstanceReferenceInformationGeneElement(xml, 'geneElement', elem.geneElementList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('classification') then
    for i := 0 to elem.classificationList.Count - 1 do
      ComposeSubstanceReferenceInformationClassification(xml, 'classification', elem.classificationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('target') then
    for i := 0 to elem.targetList.Count - 1 do
      ComposeSubstanceReferenceInformationTarget(xml, 'target', elem.targetList[i]);
end;

{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
function TFHIRXmlParser.ParseSubstanceSourceMaterialFractionDescription(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialFractionDescription;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSourceMaterialFractionDescription.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSourceMaterialFractionDescriptionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialFractionDescriptionChild(element : TFhirSubstanceSourceMaterialFractionDescription; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'fraction') then
        element.fractionElement := ParseString(child, path+'/fraction') {b}
      else if (child.localName = 'materialType') then
        element.materialType := ParseCodeableConcept(child, path+'/materialType') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialFractionDescription(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSourceMaterialFractionDescription);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSourceMaterialFractionDescriptionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialFractionDescriptionChildren(xml : TXmlBuilder; elem : TFhirSubstanceSourceMaterialFractionDescription);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'fraction', elem.fractionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'materialType', elem.materialType);{x.2a}
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganism(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganism;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSourceMaterialOrganism.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSourceMaterialOrganismChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganismChild(element : TFhirSubstanceSourceMaterialOrganism; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'family') then
        element.family := ParseCodeableConcept(child, path+'/family') {b}
      else if (child.localName = 'genus') then
        element.genus := ParseCodeableConcept(child, path+'/genus') {b}
      else if (child.localName = 'species') then
        element.species := ParseCodeableConcept(child, path+'/species') {b}
      else if (child.localName = 'intraspecificType') then
        element.intraspecificType := ParseCodeableConcept(child, path+'/intraspecificType') {b}
      else if (child.localName = 'intraspecificDescription') then
        element.intraspecificDescriptionElement := ParseString(child, path+'/intraspecificDescription') {b}
      else if (child.localName = 'author') then
        element.authorList.Add(ParseSubstanceSourceMaterialOrganismAuthor(child, path+'/author')){y.2}
      else if (child.localName = 'hybrid') then
        element.hybrid := ParseSubstanceSourceMaterialOrganismHybrid(child, path+'/hybrid') {b}
      else if (child.localName = 'organismGeneral') then
        element.organismGeneral := ParseSubstanceSourceMaterialOrganismOrganismGeneral(child, path+'/organismGeneral') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganism(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSourceMaterialOrganism);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSourceMaterialOrganismChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganismChildren(xml : TXmlBuilder; elem : TFhirSubstanceSourceMaterialOrganism);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'family', elem.family);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'genus', elem.genus);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'species', elem.species);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'intraspecificType', elem.intraspecificType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'intraspecificDescription', elem.intraspecificDescriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.authorList.Count - 1 do
      ComposeSubstanceSourceMaterialOrganismAuthor(xml, 'author', elem.authorList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceSourceMaterialOrganismHybrid(xml, 'hybrid', elem.hybrid);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceSourceMaterialOrganismOrganismGeneral(xml, 'organismGeneral', elem.organismGeneral);{x.2a}
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganismAuthor(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganismAuthor;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSourceMaterialOrganismAuthor.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSourceMaterialOrganismAuthorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganismAuthorChild(element : TFhirSubstanceSourceMaterialOrganismAuthor; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'authorType') then
        element.authorType := ParseCodeableConcept(child, path+'/authorType') {b}
      else if (child.localName = 'authorDescription') then
        element.authorDescriptionElement := ParseString(child, path+'/authorDescription') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganismAuthor(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSourceMaterialOrganismAuthor);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSourceMaterialOrganismAuthorChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganismAuthorChildren(xml : TXmlBuilder; elem : TFhirSubstanceSourceMaterialOrganismAuthor);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'authorType', elem.authorType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'authorDescription', elem.authorDescriptionElement);{x.2b}
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganismHybrid(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganismHybrid;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSourceMaterialOrganismHybrid.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSourceMaterialOrganismHybridChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganismHybridChild(element : TFhirSubstanceSourceMaterialOrganismHybrid; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'maternalOrganismId') then
        element.maternalOrganismIdElement := ParseString(child, path+'/maternalOrganismId') {b}
      else if (child.localName = 'maternalOrganismName') then
        element.maternalOrganismNameElement := ParseString(child, path+'/maternalOrganismName') {b}
      else if (child.localName = 'paternalOrganismId') then
        element.paternalOrganismIdElement := ParseString(child, path+'/paternalOrganismId') {b}
      else if (child.localName = 'paternalOrganismName') then
        element.paternalOrganismNameElement := ParseString(child, path+'/paternalOrganismName') {b}
      else if (child.localName = 'hybridType') then
        element.hybridType := ParseCodeableConcept(child, path+'/hybridType') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganismHybrid(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSourceMaterialOrganismHybrid);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSourceMaterialOrganismHybridChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganismHybridChildren(xml : TXmlBuilder; elem : TFhirSubstanceSourceMaterialOrganismHybrid);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'maternalOrganismId', elem.maternalOrganismIdElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'maternalOrganismName', elem.maternalOrganismNameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'paternalOrganismId', elem.paternalOrganismIdElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'paternalOrganismName', elem.paternalOrganismNameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'hybridType', elem.hybridType);{x.2a}
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganismOrganismGeneral(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganismOrganismGeneral;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSourceMaterialOrganismOrganismGeneral.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSourceMaterialOrganismOrganismGeneralChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganismOrganismGeneralChild(element : TFhirSubstanceSourceMaterialOrganismOrganismGeneral; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'kingdom') then
        element.kingdom := ParseCodeableConcept(child, path+'/kingdom') {b}
      else if (child.localName = 'phylum') then
        element.phylum := ParseCodeableConcept(child, path+'/phylum') {b}
      else if (child.localName = 'class') then
        element.class_ := ParseCodeableConcept(child, path+'/class') {b}
      else if (child.localName = 'order') then
        element.order := ParseCodeableConcept(child, path+'/order') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganismOrganismGeneral(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSourceMaterialOrganismOrganismGeneral);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSourceMaterialOrganismOrganismGeneralChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganismOrganismGeneralChildren(xml : TXmlBuilder; elem : TFhirSubstanceSourceMaterialOrganismOrganismGeneral);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'kingdom', elem.kingdom);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'phylum', elem.phylum);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'class', elem.class_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'order', elem.order);{x.2a}
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialPartDescription(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialPartDescription;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSourceMaterialPartDescription.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSourceMaterialPartDescriptionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialPartDescriptionChild(element : TFhirSubstanceSourceMaterialPartDescription; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'part') then
        element.part := ParseCodeableConcept(child, path+'/part') {b}
      else if (child.localName = 'partLocation') then
        element.partLocation := ParseCodeableConcept(child, path+'/partLocation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialPartDescription(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSourceMaterialPartDescription);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSourceMaterialPartDescriptionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialPartDescriptionChildren(xml : TXmlBuilder; elem : TFhirSubstanceSourceMaterialPartDescription);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'part', elem.part);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'partLocation', elem.partLocation);{x.2a}
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterial(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterial;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSourceMaterial.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSourceMaterialChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialChild(element : TFhirSubstanceSourceMaterial; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sourceMaterialClass') then
        element.sourceMaterialClass := ParseCodeableConcept(child, path+'/sourceMaterialClass') {b}
      else if (child.localName = 'sourceMaterialType') then
        element.sourceMaterialType := ParseCodeableConcept(child, path+'/sourceMaterialType') {b}
      else if (child.localName = 'sourceMaterialState') then
        element.sourceMaterialState := ParseCodeableConcept(child, path+'/sourceMaterialState') {b}
      else if (child.localName = 'organismId') then
        element.organismId := ParseIdentifier(child, path+'/organismId') {b}
      else if (child.localName = 'organismName') then
        element.organismNameElement := ParseString(child, path+'/organismName') {b}
      else if (child.localName = 'parentSubstanceId') then
        element.parentSubstanceIdList.Add(ParseIdentifier(child, path+'/parentSubstanceId')){y.2}
      else if (child.localName = 'parentSubstanceName') then
        element.parentSubstanceNameList.Add(ParseString(child, path+'/parentSubstanceName')){y.2}
      else if (child.localName = 'countryOfOrigin') then
        element.countryOfOriginList.Add(ParseCodeableConcept(child, path+'/countryOfOrigin')){y.2}
      else if (child.localName = 'geographicalLocation') then
        element.geographicalLocationList.Add(ParseString(child, path+'/geographicalLocation')){y.2}
      else if (child.localName = 'developmentStage') then
        element.developmentStage := ParseCodeableConcept(child, path+'/developmentStage') {b}
      else if (child.localName = 'fractionDescription') then
        element.fractionDescriptionList.Add(ParseSubstanceSourceMaterialFractionDescription(child, path+'/fractionDescription')){y.2}
      else if (child.localName = 'organism') then
        element.organism := ParseSubstanceSourceMaterialOrganism(child, path+'/organism') {b}
      else if (child.localName = 'partDescription') then
        element.partDescriptionList.Add(ParseSubstanceSourceMaterialPartDescription(child, path+'/partDescription')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterial(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSourceMaterial);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSourceMaterialChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialChildren(xml : TXmlBuilder; elem : TFhirSubstanceSourceMaterial);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('sourceMaterialClass') then
    ComposeCodeableConcept(xml, 'sourceMaterialClass', elem.sourceMaterialClass);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('sourceMaterialType') then
    ComposeCodeableConcept(xml, 'sourceMaterialType', elem.sourceMaterialType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('sourceMaterialState') then
    ComposeCodeableConcept(xml, 'sourceMaterialState', elem.sourceMaterialState);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('organismId') then
    ComposeIdentifier(xml, 'organismId', elem.organismId);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('organismName') then
    ComposeString(xml, 'organismName', elem.organismNameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('parentSubstanceId') then
    for i := 0 to elem.parentSubstanceIdList.Count - 1 do
      ComposeIdentifier(xml, 'parentSubstanceId', elem.parentSubstanceIdList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('parentSubstanceName') then
    for i := 0 to elem.parentSubstanceNameList.Count - 1 do
      ComposeString(xml, 'parentSubstanceName', elem.parentSubstanceNameList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('countryOfOrigin') then
    for i := 0 to elem.countryOfOriginList.Count - 1 do
      ComposeCodeableConcept(xml, 'countryOfOrigin', elem.countryOfOriginList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('geographicalLocation') then
    for i := 0 to elem.geographicalLocationList.Count - 1 do
      ComposeString(xml, 'geographicalLocation', elem.geographicalLocationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('developmentStage') then
    ComposeCodeableConcept(xml, 'developmentStage', elem.developmentStage);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('fractionDescription') then
    for i := 0 to elem.fractionDescriptionList.Count - 1 do
      ComposeSubstanceSourceMaterialFractionDescription(xml, 'fractionDescription', elem.fractionDescriptionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('organism') then
    ComposeSubstanceSourceMaterialOrganism(xml, 'organism', elem.organism);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partDescription') then
    for i := 0 to elem.partDescriptionList.Count - 1 do
      ComposeSubstanceSourceMaterialPartDescription(xml, 'partDescription', elem.partDescriptionList[i]);
end;

{$ENDIF FHIR_SUBSTANCESOURCEMATERIAL}
{$IFDEF FHIR_SUBSTANCESPECIFICATION}
function TFHIRXmlParser.ParseSubstanceSpecificationMoiety(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationMoiety;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSpecificationMoiety.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSpecificationMoietyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSpecificationMoietyChild(element : TFhirSubstanceSpecificationMoiety; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'role') then
        element.role := ParseCodeableConcept(child, path+'/role') {b}
      else if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'stereochemistry') then
        element.stereochemistry := ParseCodeableConcept(child, path+'/stereochemistry') {b}
      else if (child.localName = 'opticalActivity') then
        element.opticalActivity := ParseCodeableConcept(child, path+'/opticalActivity') {b}
      else if (child.localName = 'molecularFormula') then
        element.molecularFormulaElement := ParseString(child, path+'/molecularFormula') {b}
      else if (child.localName = 'amountQuantity') then
        element.amount := ParseQuantity(child, path+'/amountQuantity'){x.3}
      else if (child.localName = 'amountString') then
        element.amount := ParseString(child, path+'/amountString'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationMoiety(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSpecificationMoiety);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSpecificationMoietyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationMoietyChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationMoiety);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'role', elem.role);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'stereochemistry', elem.stereochemistry);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'opticalActivity', elem.opticalActivity);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'molecularFormula', elem.molecularFormulaElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'amountQuantity', TFhirQuantity(elem.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirString) {6} then
    ComposeString(xml, 'amountString', TFhirString(elem.amount));
end;

function TFHIRXmlParser.ParseSubstanceSpecificationProperty(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationProperty;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSpecificationProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSpecificationPropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSpecificationPropertyChild(element : TFhirSubstanceSpecificationProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'parameters') then
        element.parametersElement := ParseString(child, path+'/parameters') {b}
      else if (child.localName = 'definingSubstanceReference') then
        element.definingSubstance := ParseReference(child, path+'/definingSubstanceReference') {a}
      else if (child.localName = 'definingSubstanceCodeableConcept') then
        element.definingSubstance := ParseCodeableConcept(child, path+'/definingSubstanceCodeableConcept'){x.3}
      else if (child.localName = 'amountQuantity') then
        element.amount := ParseQuantity(child, path+'/amountQuantity'){x.3}
      else if (child.localName = 'amountString') then
        element.amount := ParseString(child, path+'/amountString'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationProperty(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSpecificationProperty);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSpecificationPropertyChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationPropertyChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationProperty);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'parameters', elem.parametersElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.definingSubstance is TFhirReference) {2} then
    ComposeReference(xml, 'definingSubstanceReference', TFhirReference(elem.definingSubstance))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.definingSubstance is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'definingSubstanceCodeableConcept', TFhirCodeableConcept(elem.definingSubstance));
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'amountQuantity', TFhirQuantity(elem.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirString) {6} then
    ComposeString(xml, 'amountString', TFhirString(elem.amount));
end;

function TFHIRXmlParser.ParseSubstanceSpecificationStructure(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationStructure;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSpecificationStructure.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSpecificationStructureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSpecificationStructureChild(element : TFhirSubstanceSpecificationStructure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'stereochemistry') then
        element.stereochemistry := ParseCodeableConcept(child, path+'/stereochemistry') {b}
      else if (child.localName = 'opticalActivity') then
        element.opticalActivity := ParseCodeableConcept(child, path+'/opticalActivity') {b}
      else if (child.localName = 'molecularFormula') then
        element.molecularFormulaElement := ParseString(child, path+'/molecularFormula') {b}
      else if (child.localName = 'molecularFormulaByMoiety') then
        element.molecularFormulaByMoietyElement := ParseString(child, path+'/molecularFormulaByMoiety') {b}
      else if (child.localName = 'isotope') then
        element.isotopeList.Add(ParseSubstanceSpecificationStructureIsotope(child, path+'/isotope')){y.2}
      else if (child.localName = 'molecularWeight') then
        element.molecularWeight := ParseSubstanceSpecificationStructureIsotopeMolecularWeight(child, path+'/molecularWeight') {b}
      else if (child.localName = 'source') then
        element.sourceList.Add(ParseReference{TFhirDocumentReference}(child, path+'/source')){y.2}
      else if (child.localName = 'representation') then
        element.representationList.Add(ParseSubstanceSpecificationStructureRepresentation(child, path+'/representation')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationStructure(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSpecificationStructure);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSpecificationStructureChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationStructureChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationStructure);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'stereochemistry', elem.stereochemistry);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'opticalActivity', elem.opticalActivity);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'molecularFormula', elem.molecularFormulaElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'molecularFormulaByMoiety', elem.molecularFormulaByMoietyElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.isotopeList.Count - 1 do
      ComposeSubstanceSpecificationStructureIsotope(xml, 'isotope', elem.isotopeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceSpecificationStructureIsotopeMolecularWeight(xml, 'molecularWeight', elem.molecularWeight);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(xml, 'source', elem.sourceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.representationList.Count - 1 do
      ComposeSubstanceSpecificationStructureRepresentation(xml, 'representation', elem.representationList[i]);
end;

function TFHIRXmlParser.ParseSubstanceSpecificationStructureIsotope(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationStructureIsotope;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSpecificationStructureIsotope.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSpecificationStructureIsotopeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSpecificationStructureIsotopeChild(element : TFhirSubstanceSpecificationStructureIsotope; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'name') then
        element.name := ParseCodeableConcept(child, path+'/name') {b}
      else if (child.localName = 'substitution') then
        element.substitution := ParseCodeableConcept(child, path+'/substitution') {b}
      else if (child.localName = 'halfLife') then
        element.halfLife := ParseQuantity(child, path+'/halfLife') {b}
      else if (child.localName = 'molecularWeight') then
        element.molecularWeight := ParseSubstanceSpecificationStructureIsotopeMolecularWeight(child, path+'/molecularWeight') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationStructureIsotope(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSpecificationStructureIsotope);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSpecificationStructureIsotopeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationStructureIsotopeChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationStructureIsotope);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'name', elem.name);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'substitution', elem.substitution);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'halfLife', elem.halfLife);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceSpecificationStructureIsotopeMolecularWeight(xml, 'molecularWeight', elem.molecularWeight);{x.2a}
end;

function TFHIRXmlParser.ParseSubstanceSpecificationStructureIsotopeMolecularWeight(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationStructureIsotopeMolecularWeight;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSpecificationStructureIsotopeMolecularWeight.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSpecificationStructureIsotopeMolecularWeightChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSpecificationStructureIsotopeMolecularWeightChild(element : TFhirSubstanceSpecificationStructureIsotopeMolecularWeight; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'method') then
        element.method := ParseCodeableConcept(child, path+'/method') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'amount') then
        element.amount := ParseQuantity(child, path+'/amount') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationStructureIsotopeMolecularWeight(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSpecificationStructureIsotopeMolecularWeight);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSpecificationStructureIsotopeMolecularWeightChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationStructureIsotopeMolecularWeightChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationStructureIsotopeMolecularWeight);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'method', elem.method);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'amount', elem.amount);{x.2a}
end;

function TFHIRXmlParser.ParseSubstanceSpecificationStructureRepresentation(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationStructureRepresentation;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSpecificationStructureRepresentation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSpecificationStructureRepresentationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSpecificationStructureRepresentationChild(element : TFhirSubstanceSpecificationStructureRepresentation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'representation') then
        element.representationElement := ParseString(child, path+'/representation') {b}
      else if (child.localName = 'attachment') then
        element.attachment := ParseAttachment(child, path+'/attachment') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationStructureRepresentation(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSpecificationStructureRepresentation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSpecificationStructureRepresentationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationStructureRepresentationChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationStructureRepresentation);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'representation', elem.representationElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(xml, 'attachment', elem.attachment);{x.2a}
end;

function TFHIRXmlParser.ParseSubstanceSpecificationCode(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationCode;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSpecificationCode.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSpecificationCodeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSpecificationCodeChild(element : TFhirSubstanceSpecificationCode; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'status') then
        element.status := ParseCodeableConcept(child, path+'/status') {b}
      else if (child.localName = 'statusDate') then
        element.statusDateElement := ParseDateTime(child, path+'/statusDate') {b}
      else if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if (child.localName = 'source') then
        element.sourceList.Add(ParseReference{TFhirDocumentReference}(child, path+'/source')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationCode(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSpecificationCode);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSpecificationCodeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationCodeChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationCode);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', elem.status);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'statusDate', elem.statusDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(xml, 'source', elem.sourceList[i]);
end;

function TFHIRXmlParser.ParseSubstanceSpecificationName(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationName;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSpecificationName.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSpecificationNameChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSpecificationNameChild(element : TFhirSubstanceSpecificationName; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'status') then
        element.status := ParseCodeableConcept(child, path+'/status') {b}
      else if (child.localName = 'preferred') then
        element.preferredElement := ParseBoolean(child, path+'/preferred') {b}
      else if (child.localName = 'language') then
        element.languageList.Add(ParseCodeableConcept(child, path+'/language')){y.2}
      else if (child.localName = 'domain') then
        element.domainList.Add(ParseCodeableConcept(child, path+'/domain')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'synonym') then
        element.synonymList.Add(ParseSubstanceSpecificationName(child, path+'/synonym')){y.2}
      else if (child.localName = 'translation') then
        element.translationList.Add(ParseSubstanceSpecificationName(child, path+'/translation')){y.2}
      else if (child.localName = 'official') then
        element.officialList.Add(ParseSubstanceSpecificationNameOfficial(child, path+'/official')){y.2}
      else if (child.localName = 'source') then
        element.sourceList.Add(ParseReference{TFhirDocumentReference}(child, path+'/source')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationName(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSpecificationName);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSpecificationNameChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationNameChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationName);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', elem.status);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'preferred', elem.preferredElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.languageList.Count - 1 do
      ComposeCodeableConcept(xml, 'language', elem.languageList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.domainList.Count - 1 do
      ComposeCodeableConcept(xml, 'domain', elem.domainList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.synonymList.Count - 1 do
      ComposeSubstanceSpecificationName(xml, 'synonym', elem.synonymList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.translationList.Count - 1 do
      ComposeSubstanceSpecificationName(xml, 'translation', elem.translationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.officialList.Count - 1 do
      ComposeSubstanceSpecificationNameOfficial(xml, 'official', elem.officialList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(xml, 'source', elem.sourceList[i]);
end;

function TFHIRXmlParser.ParseSubstanceSpecificationNameOfficial(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationNameOfficial;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSpecificationNameOfficial.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSpecificationNameOfficialChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSpecificationNameOfficialChild(element : TFhirSubstanceSpecificationNameOfficial; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'authority') then
        element.authority := ParseCodeableConcept(child, path+'/authority') {b}
      else if (child.localName = 'status') then
        element.status := ParseCodeableConcept(child, path+'/status') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationNameOfficial(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSpecificationNameOfficial);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSpecificationNameOfficialChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationNameOfficialChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationNameOfficial);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'authority', elem.authority);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', elem.status);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
end;

function TFHIRXmlParser.ParseSubstanceSpecificationRelationship(element : TMXmlElement; path : string) : TFhirSubstanceSpecificationRelationship;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSpecificationRelationship.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSpecificationRelationshipChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSpecificationRelationshipChild(element : TFhirSubstanceSpecificationRelationship; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'substanceReference') then
        element.substance := ParseReference(child, path+'/substanceReference') {a}
      else if (child.localName = 'substanceCodeableConcept') then
        element.substance := ParseCodeableConcept(child, path+'/substanceCodeableConcept'){x.3}
      else if (child.localName = 'relationship') then
        element.relationship := ParseCodeableConcept(child, path+'/relationship') {b}
      else if (child.localName = 'isDefining') then
        element.isDefiningElement := ParseBoolean(child, path+'/isDefining') {b}
      else if (child.localName = 'amountQuantity') then
        element.amount := ParseQuantity(child, path+'/amountQuantity'){x.3}
      else if (child.localName = 'amountRange') then
        element.amount := ParseRange(child, path+'/amountRange'){x.3}
      else if (child.localName = 'amountRatio') then
        element.amount := ParseRatio(child, path+'/amountRatio'){x.3}
      else if (child.localName = 'amountString') then
        element.amount := ParseString(child, path+'/amountString'){x.3}
      else if (child.localName = 'amountRatioLowLimit') then
        element.amountRatioLowLimit := ParseRatio(child, path+'/amountRatioLowLimit') {b}
      else if (child.localName = 'amountType') then
        element.amountType := ParseCodeableConcept(child, path+'/amountType') {b}
      else if (child.localName = 'source') then
        element.sourceList.Add(ParseReference{TFhirDocumentReference}(child, path+'/source')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationRelationship(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSpecificationRelationship);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSpecificationRelationshipChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationRelationshipChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecificationRelationship);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.substance is TFhirReference) {2} then
    ComposeReference(xml, 'substanceReference', TFhirReference(elem.substance))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.substance is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'substanceCodeableConcept', TFhirCodeableConcept(elem.substance));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'relationship', elem.relationship);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'isDefining', elem.isDefiningElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'amountQuantity', TFhirQuantity(elem.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirRange) {6} then
    ComposeRange(xml, 'amountRange', TFhirRange(elem.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirRatio) {6} then
    ComposeRatio(xml, 'amountRatio', TFhirRatio(elem.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.amount is TFhirString) {6} then
    ComposeString(xml, 'amountString', TFhirString(elem.amount));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'amountRatioLowLimit', elem.amountRatioLowLimit);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'amountType', elem.amountType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(xml, 'source', elem.sourceList[i]);
end;

function TFHIRXmlParser.ParseSubstanceSpecification(element : TMXmlElement; path : string) : TFhirSubstanceSpecification;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSpecification.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSpecificationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSpecificationChild(element : TFhirSubstanceSpecification; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'status') then
        element.status := ParseCodeableConcept(child, path+'/status') {b}
      else if (child.localName = 'domain') then
        element.domain := ParseCodeableConcept(child, path+'/domain') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'source') then
        element.sourceList.Add(ParseReference{TFhirDocumentReference}(child, path+'/source')){y.2}
      else if (child.localName = 'comment') then
        element.commentElement := ParseString(child, path+'/comment') {b}
      else if (child.localName = 'moiety') then
        element.moietyList.Add(ParseSubstanceSpecificationMoiety(child, path+'/moiety')){y.2}
      else if (child.localName = 'property') then
        element.property_List.Add(ParseSubstanceSpecificationProperty(child, path+'/property')){y.2}
      else if (child.localName = 'referenceInformation') then
        element.referenceInformation := ParseReference{TFhirSubstanceReferenceInformation}(child, path+'/referenceInformation') {b}
      else if (child.localName = 'structure') then
        element.structure := ParseSubstanceSpecificationStructure(child, path+'/structure') {b}
      else if (child.localName = 'code') then
        element.codeList.Add(ParseSubstanceSpecificationCode(child, path+'/code')){y.2}
      else if (child.localName = 'name') then
        element.nameList.Add(ParseSubstanceSpecificationName(child, path+'/name')){y.2}
      else if (child.localName = 'molecularWeight') then
        element.molecularWeightList.Add(ParseSubstanceSpecificationStructureIsotopeMolecularWeight(child, path+'/molecularWeight')){y.2}
      else if (child.localName = 'relationship') then
        element.relationshipList.Add(ParseSubstanceSpecificationRelationship(child, path+'/relationship')){y.2}
      else if (child.localName = 'nucleicAcid') then
        element.nucleicAcid := ParseReference{TFhirSubstanceNucleicAcid}(child, path+'/nucleicAcid') {b}
      else if (child.localName = 'polymer') then
        element.polymer := ParseReference{TFhirSubstancePolymer}(child, path+'/polymer') {b}
      else if (child.localName = 'protein') then
        element.protein := ParseReference{TFhirSubstanceProtein}(child, path+'/protein') {b}
      else if (child.localName = 'sourceMaterial') then
        element.sourceMaterial := ParseReference{TFhirSubstanceSourceMaterial}(child, path+'/sourceMaterial') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecification(xml : TXmlBuilder; name : String; elem : TFhirSubstanceSpecification);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeSubstanceSpecificationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSubstanceSpecificationChildren(xml : TXmlBuilder; elem : TFhirSubstanceSpecification);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeCodeableConcept(xml, 'status', elem.status);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('domain') then
    ComposeCodeableConcept(xml, 'domain', elem.domain);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('source') then
    for i := 0 to elem.sourceList.Count - 1 do
      ComposeReference{TFhirDocumentReference}(xml, 'source', elem.sourceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('comment') then
    ComposeString(xml, 'comment', elem.commentElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('moiety') then
    for i := 0 to elem.moietyList.Count - 1 do
      ComposeSubstanceSpecificationMoiety(xml, 'moiety', elem.moietyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('property_') then
    for i := 0 to elem.property_List.Count - 1 do
      ComposeSubstanceSpecificationProperty(xml, 'property', elem.property_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('referenceInformation') then
    ComposeReference{TFhirSubstanceReferenceInformation}(xml, 'referenceInformation', elem.referenceInformation);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('structure') then
    ComposeSubstanceSpecificationStructure(xml, 'structure', elem.structure);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    for i := 0 to elem.codeList.Count - 1 do
      ComposeSubstanceSpecificationCode(xml, 'code', elem.codeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    for i := 0 to elem.nameList.Count - 1 do
      ComposeSubstanceSpecificationName(xml, 'name', elem.nameList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('molecularWeight') then
    for i := 0 to elem.molecularWeightList.Count - 1 do
      ComposeSubstanceSpecificationStructureIsotopeMolecularWeight(xml, 'molecularWeight', elem.molecularWeightList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('relationship') then
    for i := 0 to elem.relationshipList.Count - 1 do
      ComposeSubstanceSpecificationRelationship(xml, 'relationship', elem.relationshipList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('nucleicAcid') then
    ComposeReference{TFhirSubstanceNucleicAcid}(xml, 'nucleicAcid', elem.nucleicAcid);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('polymer') then
    ComposeReference{TFhirSubstancePolymer}(xml, 'polymer', elem.polymer);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('protein') then
    ComposeReference{TFhirSubstanceProtein}(xml, 'protein', elem.protein);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('sourceMaterial') then
    ComposeReference{TFhirSubstanceSourceMaterial}(xml, 'sourceMaterial', elem.sourceMaterial);{x.2a}
end;

{$ENDIF FHIR_SUBSTANCESPECIFICATION}
{$IFDEF FHIR_SUPPLYDELIVERY}
function TFHIRXmlParser.ParseSupplyDeliverySuppliedItem(element : TMXmlElement; path : string) : TFhirSupplyDeliverySuppliedItem;
var
  child : TMXmlElement;
begin
  result := TFhirSupplyDeliverySuppliedItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSupplyDeliverySuppliedItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSupplyDeliverySuppliedItemChild(element : TFhirSupplyDeliverySuppliedItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'itemCodeableConcept') then
        element.item := ParseCodeableConcept(child, path+'/itemCodeableConcept'){x.3}
      else if (child.localName = 'itemReference') then
        element.item := ParseReference(child, path+'/itemReference') {a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSupplyDeliverySuppliedItem(xml : TXmlBuilder; name : String; elem : TFhirSupplyDeliverySuppliedItem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSupplyDeliverySuppliedItemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSupplyDeliverySuppliedItemChildren(xml : TXmlBuilder; elem : TFhirSupplyDeliverySuppliedItem);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.item is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'itemCodeableConcept', TFhirCodeableConcept(elem.item))
  else if (SummaryOption in [soFull, soData]) and (elem.item is TFhirReference) {2} then
    ComposeReference(xml, 'itemReference', TFhirReference(elem.item));
end;

function TFHIRXmlParser.ParseSupplyDelivery(element : TMXmlElement; path : string) : TFhirSupplyDelivery;
var
  child : TMXmlElement;
begin
  result := TFhirSupplyDelivery.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSupplyDeliveryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSupplyDeliveryChild(element : TFhirSupplyDelivery; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirSupplyRequest}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'partOf') then
        element.partOfList.Add(ParseReference{TFhirSupplyDelivery}(child, path+'/partOf')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirSupplydeliveryStatusEnum, SYSTEMS_TFhirSupplydeliveryStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'suppliedItem') then
        element.suppliedItem := ParseSupplyDeliverySuppliedItem(child, path+'/suppliedItem') {b}
      else if (child.localName = 'occurrencePeriod') then
        element.occurrence := ParsePeriod(child, path+'/occurrencePeriod'){x.3}
      else if (child.localName = 'occurrenceTiming') then
        element.occurrence := ParseTiming(child, path+'/occurrenceTiming'){x.3}
      else if (child.localName = 'occurrenceDateTime') then
        element.occurrence := ParseDateTime(child, path+'/occurrenceDateTime'){x.3}
      else if (child.localName = 'supplier') then
        element.supplier := ParseReference{TFhirPractitioner}(child, path+'/supplier') {b}
      else if (child.localName = 'destination') then
        element.destination := ParseReference{TFhirLocation}(child, path+'/destination') {b}
      else if (child.localName = 'receiver') then
        element.receiverList.Add(ParseReference{TFhirPractitioner}(child, path+'/receiver')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSupplyDelivery(xml : TXmlBuilder; name : String; elem : TFhirSupplyDelivery);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeSupplyDeliveryChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSupplyDeliveryChildren(xml : TXmlBuilder; elem : TFhirSupplyDelivery);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirSupplyRequest}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') then
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirSupplyDelivery}(xml, 'partOf', elem.partOfList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirSupplydeliveryStatusEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('patient') then
    ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('type_') then
    ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('suppliedItem') then
    ComposeSupplyDeliverySuppliedItem(xml, 'suppliedItem', elem.suppliedItem);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(elem.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) {6} then
    ComposeTiming(xml, 'occurrenceTiming', TFhirTiming(elem.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(elem.occurrence));
  if (SummaryOption in [soFull, soData]) and doCompose('supplier') then
    ComposeReference{TFhirPractitioner}(xml, 'supplier', elem.supplier);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('destination') then
    ComposeReference{TFhirLocation}(xml, 'destination', elem.destination);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('receiver') then
    for i := 0 to elem.receiverList.Count - 1 do
      ComposeReference{TFhirPractitioner}(xml, 'receiver', elem.receiverList[i]);
end;

{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
function TFHIRXmlParser.ParseSupplyRequestParameter(element : TMXmlElement; path : string) : TFhirSupplyRequestParameter;
var
  child : TMXmlElement;
begin
  result := TFhirSupplyRequestParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSupplyRequestParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSupplyRequestParameterChild(element : TFhirSupplyRequestParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'valueCodeableConcept') then
        element.value := ParseCodeableConcept(child, path+'/valueCodeableConcept'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueRange') then
        element.value := ParseRange(child, path+'/valueRange'){x.3}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSupplyRequestParameter(xml : TXmlBuilder; name : String; elem : TFhirSupplyRequestParameter);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeSupplyRequestParameterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSupplyRequestParameterChildren(xml : TXmlBuilder; elem : TFhirSupplyRequestParameter);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soData]) and (elem.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value));
end;

function TFHIRXmlParser.ParseSupplyRequest(element : TMXmlElement; path : string) : TFhirSupplyRequest;
var
  child : TMXmlElement;
begin
  result := TFhirSupplyRequest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSupplyRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSupplyRequestChild(element : TFhirSupplyRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirSupplyrequestStatusEnum, SYSTEMS_TFhirSupplyrequestStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'category') then
        element.category := ParseCodeableConcept(child, path+'/category') {b}
      else if (child.localName = 'priority') then
        element.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, path+'/priority', child){1a}
      else if (child.localName = 'itemCodeableConcept') then
        element.item := ParseCodeableConcept(child, path+'/itemCodeableConcept'){x.3}
      else if (child.localName = 'itemReference') then
        element.item := ParseReference(child, path+'/itemReference') {a}
      else if (child.localName = 'quantity') then
        element.quantity := ParseQuantity(child, path+'/quantity') {b}
      else if (child.localName = 'parameter') then
        element.parameterList.Add(ParseSupplyRequestParameter(child, path+'/parameter')){y.2}
      else if (child.localName = 'occurrencePeriod') then
        element.occurrence := ParsePeriod(child, path+'/occurrencePeriod'){x.3}
      else if (child.localName = 'occurrenceTiming') then
        element.occurrence := ParseTiming(child, path+'/occurrenceTiming'){x.3}
      else if (child.localName = 'occurrenceDateTime') then
        element.occurrence := ParseDateTime(child, path+'/occurrenceDateTime'){x.3}
      else if (child.localName = 'authoredOn') then
        element.authoredOnElement := ParseDateTime(child, path+'/authoredOn') {b}
      else if (child.localName = 'requester') then
        element.requester := ParseReference{TFhirPractitioner}(child, path+'/requester') {b}
      else if (child.localName = 'supplier') then
        element.supplierList.Add(ParseReference{TFhirOrganization}(child, path+'/supplier')){y.2}
      else if (child.localName = 'reasonCode') then
        element.reasonCodeList.Add(ParseCodeableConcept(child, path+'/reasonCode')){y.2}
      else if (child.localName = 'reasonReference') then
        element.reasonReferenceList.Add(ParseReference{TFhirCondition}(child, path+'/reasonReference')){y.2}
      else if (child.localName = 'deliverFrom') then
        element.deliverFrom := ParseReference{TFhirOrganization}(child, path+'/deliverFrom') {b}
      else if (child.localName = 'deliverTo') then
        element.deliverTo := ParseReference{TFhirOrganization}(child, path+'/deliverTo') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSupplyRequest(xml : TXmlBuilder; name : String; elem : TFhirSupplyRequest);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeSupplyRequestChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeSupplyRequestChildren(xml : TXmlBuilder; elem : TFhirSupplyRequest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('status') then
    ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirSupplyrequestStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('category') then
    ComposeCodeableConcept(xml, 'category', elem.category);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('priority') then
    ComposeEnum(xml, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum);
  if (elem.item is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'itemCodeableConcept', TFhirCodeableConcept(elem.item))
  else if (elem.item is TFhirReference) {2} then
    ComposeReference(xml, 'itemReference', TFhirReference(elem.item));
  ComposeQuantity(xml, 'quantity', elem.quantity);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('parameter') then
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeSupplyRequestParameter(xml, 'parameter', elem.parameterList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(elem.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirTiming) {6} then
    ComposeTiming(xml, 'occurrenceTiming', TFhirTiming(elem.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (elem.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(elem.occurrence));
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('authoredOn') then
    ComposeDateTime(xml, 'authoredOn', elem.authoredOnElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requester') then
    ComposeReference{TFhirPractitioner}(xml, 'requester', elem.requester);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('supplier') then
    for i := 0 to elem.supplierList.Count - 1 do
      ComposeReference{TFhirOrganization}(xml, 'supplier', elem.supplierList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonCode') then
    for i := 0 to elem.reasonCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCodeList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') then
    for i := 0 to elem.reasonReferenceList.Count - 1 do
      ComposeReference{TFhirCondition}(xml, 'reasonReference', elem.reasonReferenceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('deliverFrom') then
    ComposeReference{TFhirOrganization}(xml, 'deliverFrom', elem.deliverFrom);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('deliverTo') then
    ComposeReference{TFhirOrganization}(xml, 'deliverTo', elem.deliverTo);{x.2a}
end;

{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
function TFHIRXmlParser.ParseTaskRestriction(element : TMXmlElement; path : string) : TFhirTaskRestriction;
var
  child : TMXmlElement;
begin
  result := TFhirTaskRestriction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTaskRestrictionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTaskRestrictionChild(element : TFhirTaskRestriction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'repetitions') then
        element.repetitionsElement := ParsePositiveInt(child, path+'/repetitions') {b}
      else if (child.localName = 'period') then
        element.period := ParsePeriod(child, path+'/period') {b}
      else if (child.localName = 'recipient') then
        element.recipientList.Add(ParseReference{TFhirPatient}(child, path+'/recipient')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTaskRestriction(xml : TXmlBuilder; name : String; elem : TFhirTaskRestriction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTaskRestrictionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTaskRestrictionChildren(xml : TXmlBuilder; elem : TFhirTaskRestriction);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'repetitions', elem.repetitionsElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', elem.period);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.recipientList.Count - 1 do
      ComposeReference{TFhirPatient}(xml, 'recipient', elem.recipientList[i]);
end;

function TFHIRXmlParser.ParseTaskInput(element : TMXmlElement; path : string) : TFhirTaskInput;
var
  child : TMXmlElement;
begin
  result := TFhirTaskInput.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTaskInputChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTaskInputChild(element : TFhirTaskInput; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'valueCanonical') then
        element.value := ParseCanonical(child, path+'/valueCanonical'){x.3}
      else if (child.localName = 'valueCode') then
        element.value := ParseCode(child, path+'/valueCode'){x.3}
      else if (child.localName = 'valueId') then
        element.value := ParseId(child, path+'/valueId'){x.3}
      else if (child.localName = 'valueMarkdown') then
        element.value := ParseMarkdown(child, path+'/valueMarkdown'){x.3}
      else if (child.localName = 'valueOid') then
        element.value := ParseOid(child, path+'/valueOid'){x.3}
      else if (child.localName = 'valuePositiveInt') then
        element.value := ParsePositiveInt(child, path+'/valuePositiveInt'){x.3}
      else if (child.localName = 'valueUnsignedInt') then
        element.value := ParseUnsignedInt(child, path+'/valueUnsignedInt'){x.3}
      else if (child.localName = 'valueUrl') then
        element.value := ParseUrl(child, path+'/valueUrl'){x.3}
      else if (child.localName = 'valueUuid') then
        element.value := ParseUuid(child, path+'/valueUuid'){x.3}
      else if (child.localName = 'valueAddress') then
        element.value := ParseAddress(child, path+'/valueAddress'){x.3}
      else if (child.localName = 'valueAge') then
        element.value := ParseAge(child, path+'/valueAge'){x.3}
      else if (child.localName = 'valueAnnotation') then
        element.value := ParseAnnotation(child, path+'/valueAnnotation'){x.3}
      else if (child.localName = 'valueAttachment') then
        element.value := ParseAttachment(child, path+'/valueAttachment'){x.3}
      else if (child.localName = 'valueCodeableConcept') then
        element.value := ParseCodeableConcept(child, path+'/valueCodeableConcept'){x.3}
      else if (child.localName = 'valueCoding') then
        element.value := ParseCoding(child, path+'/valueCoding'){x.3}
      else if (child.localName = 'valueContactPoint') then
        element.value := ParseContactPoint(child, path+'/valueContactPoint'){x.3}
      else if (child.localName = 'valueCount') then
        element.value := ParseCount(child, path+'/valueCount'){x.3}
      else if (child.localName = 'valueDistance') then
        element.value := ParseDistance(child, path+'/valueDistance'){x.3}
      else if (child.localName = 'valueDuration') then
        element.value := ParseDuration(child, path+'/valueDuration'){x.3}
      else if (child.localName = 'valueHumanName') then
        element.value := ParseHumanName(child, path+'/valueHumanName'){x.3}
      else if (child.localName = 'valueIdentifier') then
        element.value := ParseIdentifier(child, path+'/valueIdentifier'){x.3}
      else if (child.localName = 'valueMoney') then
        element.value := ParseMoney(child, path+'/valueMoney'){x.3}
      else if (child.localName = 'valuePeriod') then
        element.value := ParsePeriod(child, path+'/valuePeriod'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueRange') then
        element.value := ParseRange(child, path+'/valueRange'){x.3}
      else if (child.localName = 'valueRatio') then
        element.value := ParseRatio(child, path+'/valueRatio'){x.3}
      else if (child.localName = 'valueReference') then
        element.value := ParseReference(child, path+'/valueReference'){x.3}
      else if (child.localName = 'valueSampledData') then
        element.value := ParseSampledData(child, path+'/valueSampledData'){x.3}
      else if (child.localName = 'valueSignature') then
        element.value := ParseSignature(child, path+'/valueSignature'){x.3}
      else if (child.localName = 'valueTiming') then
        element.value := ParseTiming(child, path+'/valueTiming'){x.3}
      else if (child.localName = 'valueContactDetail') then
        element.value := ParseContactDetail(child, path+'/valueContactDetail'){x.3}
      else if (child.localName = 'valueContributor') then
        element.value := ParseContributor(child, path+'/valueContributor'){x.3}
      else if (child.localName = 'valueDataRequirement') then
        element.value := ParseDataRequirement(child, path+'/valueDataRequirement'){x.3}
      else if (child.localName = 'valueExpression') then
        element.value := ParseExpression(child, path+'/valueExpression'){x.3}
      else if (child.localName = 'valueParameterDefinition') then
        element.value := ParseParameterDefinition(child, path+'/valueParameterDefinition'){x.3}
      else if (child.localName = 'valueRelatedArtifact') then
        element.value := ParseRelatedArtifact(child, path+'/valueRelatedArtifact'){x.3}
      else if (child.localName = 'valueTriggerDefinition') then
        element.value := ParseTriggerDefinition(child, path+'/valueTriggerDefinition'){x.3}
      else if (child.localName = 'valueUsageContext') then
        element.value := ParseUsageContext(child, path+'/valueUsageContext'){x.3}
      else if (child.localName = 'valueDosage') then
        element.value := ParseDosage(child, path+'/valueDosage'){x.3}
      else if (child.localName = 'valueBase64Binary') then
        element.value := ParseBase64Binary(child, path+'/valueBase64Binary'){x.3}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueDate') then
        element.value := ParseDate(child, path+'/valueDate'){x.3}
      else if (child.localName = 'valueDateTime') then
        element.value := ParseDateTime(child, path+'/valueDateTime'){x.3}
      else if (child.localName = 'valueDecimal') then
        element.value := ParseDecimal(child, path+'/valueDecimal'){x.3}
      else if (child.localName = 'valueInstant') then
        element.value := ParseInstant(child, path+'/valueInstant'){x.3}
      else if (child.localName = 'valueInteger') then
        element.value := ParseInteger(child, path+'/valueInteger'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueTime') then
        element.value := ParseTime(child, path+'/valueTime'){x.3}
      else if (child.localName = 'valueUri') then
        element.value := ParseUri(child, path+'/valueUri'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTaskInput(xml : TXmlBuilder; name : String; elem : TFhirTaskInput);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTaskInputChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTaskInputChildren(xml : TXmlBuilder; elem : TFhirTaskInput);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (elem.value is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'valueCanonical', TFhirCanonical(elem.value))
  else if (elem.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(elem.value))
  else if (elem.value is TFhirId) {6} then
    ComposeId(xml, 'valueId', TFhirId(elem.value))
  else if (elem.value is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'valueMarkdown', TFhirMarkdown(elem.value))
  else if (elem.value is TFhirOid) {6} then
    ComposeOid(xml, 'valueOid', TFhirOid(elem.value))
  else if (elem.value is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'valuePositiveInt', TFhirPositiveInt(elem.value))
  else if (elem.value is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'valueUnsignedInt', TFhirUnsignedInt(elem.value))
  else if (elem.value is TFhirUrl) {6} then
    ComposeUrl(xml, 'valueUrl', TFhirUrl(elem.value))
  else if (elem.value is TFhirUuid) {6} then
    ComposeUuid(xml, 'valueUuid', TFhirUuid(elem.value))
  else if (elem.value is TFhirAddress) {6} then
    ComposeAddress(xml, 'valueAddress', TFhirAddress(elem.value))
  else if (elem.value is TFhirAge) {6} then
    ComposeAge(xml, 'valueAge', TFhirAge(elem.value))
  else if (elem.value is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'valueAnnotation', TFhirAnnotation(elem.value))
  else if (elem.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(elem.value))
  else if (elem.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(elem.value))
  else if (elem.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(elem.value))
  else if (elem.value is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'valueContactPoint', TFhirContactPoint(elem.value))
  else if (elem.value is TFhirCount) {6} then
    ComposeCount(xml, 'valueCount', TFhirCount(elem.value))
  else if (elem.value is TFhirDistance) {6} then
    ComposeDistance(xml, 'valueDistance', TFhirDistance(elem.value))
  else if (elem.value is TFhirDuration) {6} then
    ComposeDuration(xml, 'valueDuration', TFhirDuration(elem.value))
  else if (elem.value is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'valueHumanName', TFhirHumanName(elem.value))
  else if (elem.value is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'valueIdentifier', TFhirIdentifier(elem.value))
  else if (elem.value is TFhirMoney) {6} then
    ComposeMoney(xml, 'valueMoney', TFhirMoney(elem.value))
  else if (elem.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(elem.value))
  else if (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (elem.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(elem.value))
  else if (elem.value is TFhirRatio) {6} then
    ComposeRatio(xml, 'valueRatio', TFhirRatio(elem.value))
  else if (elem.value is TFhirReference) {6} then
    ComposeReference(xml, 'valueReference', TFhirReference(elem.value))
  else if (elem.value is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'valueSampledData', TFhirSampledData(elem.value))
  else if (elem.value is TFhirSignature) {6} then
    ComposeSignature(xml, 'valueSignature', TFhirSignature(elem.value))
  else if (elem.value is TFhirTiming) {6} then
    ComposeTiming(xml, 'valueTiming', TFhirTiming(elem.value))
  else if (elem.value is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'valueContactDetail', TFhirContactDetail(elem.value))
  else if (elem.value is TFhirContributor) {6} then
    ComposeContributor(xml, 'valueContributor', TFhirContributor(elem.value))
  else if (elem.value is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'valueDataRequirement', TFhirDataRequirement(elem.value))
  else if (elem.value is TFhirExpression) {6} then
    ComposeExpression(xml, 'valueExpression', TFhirExpression(elem.value))
  else if (elem.value is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'valueParameterDefinition', TFhirParameterDefinition(elem.value))
  else if (elem.value is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'valueRelatedArtifact', TFhirRelatedArtifact(elem.value))
  else if (elem.value is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'valueTriggerDefinition', TFhirTriggerDefinition(elem.value))
  else if (elem.value is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'valueUsageContext', TFhirUsageContext(elem.value))
  else if (elem.value is TFhirDosage) {6} then
    ComposeDosage(xml, 'valueDosage', TFhirDosage(elem.value))
  else if (elem.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(elem.value))
  else if (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (elem.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(elem.value))
  else if (elem.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(elem.value))
  else if (elem.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(elem.value))
  else if (elem.value is TFhirInstant) {6} then
    ComposeInstant(xml, 'valueInstant', TFhirInstant(elem.value))
  else if (elem.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(elem.value))
  else if (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (elem.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(elem.value))
  else if (elem.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(elem.value));
end;

function TFHIRXmlParser.ParseTaskOutput(element : TMXmlElement; path : string) : TFhirTaskOutput;
var
  child : TMXmlElement;
begin
  result := TFhirTaskOutput.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTaskOutputChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTaskOutputChild(element : TFhirTaskOutput; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCodeableConcept(child, path+'/type') {b}
      else if (child.localName = 'valueCanonical') then
        element.value := ParseCanonical(child, path+'/valueCanonical'){x.3}
      else if (child.localName = 'valueCode') then
        element.value := ParseCode(child, path+'/valueCode'){x.3}
      else if (child.localName = 'valueId') then
        element.value := ParseId(child, path+'/valueId'){x.3}
      else if (child.localName = 'valueMarkdown') then
        element.value := ParseMarkdown(child, path+'/valueMarkdown'){x.3}
      else if (child.localName = 'valueOid') then
        element.value := ParseOid(child, path+'/valueOid'){x.3}
      else if (child.localName = 'valuePositiveInt') then
        element.value := ParsePositiveInt(child, path+'/valuePositiveInt'){x.3}
      else if (child.localName = 'valueUnsignedInt') then
        element.value := ParseUnsignedInt(child, path+'/valueUnsignedInt'){x.3}
      else if (child.localName = 'valueUrl') then
        element.value := ParseUrl(child, path+'/valueUrl'){x.3}
      else if (child.localName = 'valueUuid') then
        element.value := ParseUuid(child, path+'/valueUuid'){x.3}
      else if (child.localName = 'valueAddress') then
        element.value := ParseAddress(child, path+'/valueAddress'){x.3}
      else if (child.localName = 'valueAge') then
        element.value := ParseAge(child, path+'/valueAge'){x.3}
      else if (child.localName = 'valueAnnotation') then
        element.value := ParseAnnotation(child, path+'/valueAnnotation'){x.3}
      else if (child.localName = 'valueAttachment') then
        element.value := ParseAttachment(child, path+'/valueAttachment'){x.3}
      else if (child.localName = 'valueCodeableConcept') then
        element.value := ParseCodeableConcept(child, path+'/valueCodeableConcept'){x.3}
      else if (child.localName = 'valueCoding') then
        element.value := ParseCoding(child, path+'/valueCoding'){x.3}
      else if (child.localName = 'valueContactPoint') then
        element.value := ParseContactPoint(child, path+'/valueContactPoint'){x.3}
      else if (child.localName = 'valueCount') then
        element.value := ParseCount(child, path+'/valueCount'){x.3}
      else if (child.localName = 'valueDistance') then
        element.value := ParseDistance(child, path+'/valueDistance'){x.3}
      else if (child.localName = 'valueDuration') then
        element.value := ParseDuration(child, path+'/valueDuration'){x.3}
      else if (child.localName = 'valueHumanName') then
        element.value := ParseHumanName(child, path+'/valueHumanName'){x.3}
      else if (child.localName = 'valueIdentifier') then
        element.value := ParseIdentifier(child, path+'/valueIdentifier'){x.3}
      else if (child.localName = 'valueMoney') then
        element.value := ParseMoney(child, path+'/valueMoney'){x.3}
      else if (child.localName = 'valuePeriod') then
        element.value := ParsePeriod(child, path+'/valuePeriod'){x.3}
      else if (child.localName = 'valueQuantity') then
        element.value := ParseQuantity(child, path+'/valueQuantity'){x.3}
      else if (child.localName = 'valueRange') then
        element.value := ParseRange(child, path+'/valueRange'){x.3}
      else if (child.localName = 'valueRatio') then
        element.value := ParseRatio(child, path+'/valueRatio'){x.3}
      else if (child.localName = 'valueReference') then
        element.value := ParseReference(child, path+'/valueReference'){x.3}
      else if (child.localName = 'valueSampledData') then
        element.value := ParseSampledData(child, path+'/valueSampledData'){x.3}
      else if (child.localName = 'valueSignature') then
        element.value := ParseSignature(child, path+'/valueSignature'){x.3}
      else if (child.localName = 'valueTiming') then
        element.value := ParseTiming(child, path+'/valueTiming'){x.3}
      else if (child.localName = 'valueContactDetail') then
        element.value := ParseContactDetail(child, path+'/valueContactDetail'){x.3}
      else if (child.localName = 'valueContributor') then
        element.value := ParseContributor(child, path+'/valueContributor'){x.3}
      else if (child.localName = 'valueDataRequirement') then
        element.value := ParseDataRequirement(child, path+'/valueDataRequirement'){x.3}
      else if (child.localName = 'valueExpression') then
        element.value := ParseExpression(child, path+'/valueExpression'){x.3}
      else if (child.localName = 'valueParameterDefinition') then
        element.value := ParseParameterDefinition(child, path+'/valueParameterDefinition'){x.3}
      else if (child.localName = 'valueRelatedArtifact') then
        element.value := ParseRelatedArtifact(child, path+'/valueRelatedArtifact'){x.3}
      else if (child.localName = 'valueTriggerDefinition') then
        element.value := ParseTriggerDefinition(child, path+'/valueTriggerDefinition'){x.3}
      else if (child.localName = 'valueUsageContext') then
        element.value := ParseUsageContext(child, path+'/valueUsageContext'){x.3}
      else if (child.localName = 'valueDosage') then
        element.value := ParseDosage(child, path+'/valueDosage'){x.3}
      else if (child.localName = 'valueBase64Binary') then
        element.value := ParseBase64Binary(child, path+'/valueBase64Binary'){x.3}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueDate') then
        element.value := ParseDate(child, path+'/valueDate'){x.3}
      else if (child.localName = 'valueDateTime') then
        element.value := ParseDateTime(child, path+'/valueDateTime'){x.3}
      else if (child.localName = 'valueDecimal') then
        element.value := ParseDecimal(child, path+'/valueDecimal'){x.3}
      else if (child.localName = 'valueInstant') then
        element.value := ParseInstant(child, path+'/valueInstant'){x.3}
      else if (child.localName = 'valueInteger') then
        element.value := ParseInteger(child, path+'/valueInteger'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueTime') then
        element.value := ParseTime(child, path+'/valueTime'){x.3}
      else if (child.localName = 'valueUri') then
        element.value := ParseUri(child, path+'/valueUri'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTaskOutput(xml : TXmlBuilder; name : String; elem : TFhirTaskOutput);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTaskOutputChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTaskOutputChildren(xml : TXmlBuilder; elem : TFhirTaskOutput);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'type', elem.type_);{x.2a}
  if (elem.value is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'valueCanonical', TFhirCanonical(elem.value))
  else if (elem.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(elem.value))
  else if (elem.value is TFhirId) {6} then
    ComposeId(xml, 'valueId', TFhirId(elem.value))
  else if (elem.value is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'valueMarkdown', TFhirMarkdown(elem.value))
  else if (elem.value is TFhirOid) {6} then
    ComposeOid(xml, 'valueOid', TFhirOid(elem.value))
  else if (elem.value is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'valuePositiveInt', TFhirPositiveInt(elem.value))
  else if (elem.value is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'valueUnsignedInt', TFhirUnsignedInt(elem.value))
  else if (elem.value is TFhirUrl) {6} then
    ComposeUrl(xml, 'valueUrl', TFhirUrl(elem.value))
  else if (elem.value is TFhirUuid) {6} then
    ComposeUuid(xml, 'valueUuid', TFhirUuid(elem.value))
  else if (elem.value is TFhirAddress) {6} then
    ComposeAddress(xml, 'valueAddress', TFhirAddress(elem.value))
  else if (elem.value is TFhirAge) {6} then
    ComposeAge(xml, 'valueAge', TFhirAge(elem.value))
  else if (elem.value is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'valueAnnotation', TFhirAnnotation(elem.value))
  else if (elem.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(elem.value))
  else if (elem.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(elem.value))
  else if (elem.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(elem.value))
  else if (elem.value is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'valueContactPoint', TFhirContactPoint(elem.value))
  else if (elem.value is TFhirCount) {6} then
    ComposeCount(xml, 'valueCount', TFhirCount(elem.value))
  else if (elem.value is TFhirDistance) {6} then
    ComposeDistance(xml, 'valueDistance', TFhirDistance(elem.value))
  else if (elem.value is TFhirDuration) {6} then
    ComposeDuration(xml, 'valueDuration', TFhirDuration(elem.value))
  else if (elem.value is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'valueHumanName', TFhirHumanName(elem.value))
  else if (elem.value is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'valueIdentifier', TFhirIdentifier(elem.value))
  else if (elem.value is TFhirMoney) {6} then
    ComposeMoney(xml, 'valueMoney', TFhirMoney(elem.value))
  else if (elem.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(elem.value))
  else if (elem.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(elem.value))
  else if (elem.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(elem.value))
  else if (elem.value is TFhirRatio) {6} then
    ComposeRatio(xml, 'valueRatio', TFhirRatio(elem.value))
  else if (elem.value is TFhirReference) {6} then
    ComposeReference(xml, 'valueReference', TFhirReference(elem.value))
  else if (elem.value is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'valueSampledData', TFhirSampledData(elem.value))
  else if (elem.value is TFhirSignature) {6} then
    ComposeSignature(xml, 'valueSignature', TFhirSignature(elem.value))
  else if (elem.value is TFhirTiming) {6} then
    ComposeTiming(xml, 'valueTiming', TFhirTiming(elem.value))
  else if (elem.value is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'valueContactDetail', TFhirContactDetail(elem.value))
  else if (elem.value is TFhirContributor) {6} then
    ComposeContributor(xml, 'valueContributor', TFhirContributor(elem.value))
  else if (elem.value is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'valueDataRequirement', TFhirDataRequirement(elem.value))
  else if (elem.value is TFhirExpression) {6} then
    ComposeExpression(xml, 'valueExpression', TFhirExpression(elem.value))
  else if (elem.value is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'valueParameterDefinition', TFhirParameterDefinition(elem.value))
  else if (elem.value is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'valueRelatedArtifact', TFhirRelatedArtifact(elem.value))
  else if (elem.value is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'valueTriggerDefinition', TFhirTriggerDefinition(elem.value))
  else if (elem.value is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'valueUsageContext', TFhirUsageContext(elem.value))
  else if (elem.value is TFhirDosage) {6} then
    ComposeDosage(xml, 'valueDosage', TFhirDosage(elem.value))
  else if (elem.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(elem.value))
  else if (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (elem.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(elem.value))
  else if (elem.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(elem.value))
  else if (elem.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(elem.value))
  else if (elem.value is TFhirInstant) {6} then
    ComposeInstant(xml, 'valueInstant', TFhirInstant(elem.value))
  else if (elem.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(elem.value))
  else if (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (elem.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(elem.value))
  else if (elem.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(elem.value));
end;

function TFHIRXmlParser.ParseTask(element : TMXmlElement; path : string) : TFhirTask;
var
  child : TMXmlElement;
begin
  result := TFhirTask.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTaskChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTaskChild(element : TFhirTask; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'instantiatesCanonical') then
        element.instantiatesCanonicalElement := ParseCanonical(child, path+'/instantiatesCanonical') {b}
      else if (child.localName = 'instantiatesUri') then
        element.instantiatesUriElement := ParseUri(child, path+'/instantiatesUri') {b}
      else if (child.localName = 'basedOn') then
        element.basedOnList.Add(ParseReference{TFhirReference}(child, path+'/basedOn')){y.2}
      else if (child.localName = 'groupIdentifier') then
        element.groupIdentifier := ParseIdentifier(child, path+'/groupIdentifier') {b}
      else if (child.localName = 'partOf') then
        element.partOfList.Add(ParseReference{TFhirTask}(child, path+'/partOf')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirTaskStatusEnum, SYSTEMS_TFhirTaskStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'statusReason') then
        element.statusReason := ParseCodeableConcept(child, path+'/statusReason') {b}
      else if (child.localName = 'businessStatus') then
        element.businessStatus := ParseCodeableConcept(child, path+'/businessStatus') {b}
      else if (child.localName = 'intent') then
        element.intentElement := ParseEnum(CODES_TFhirTaskIntentEnum, SYSTEMS_TFhirTaskIntentEnum, path+'/intent', child){1a}
      else if (child.localName = 'priority') then
        element.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, path+'/priority', child){1a}
      else if (child.localName = 'code') then
        element.code := ParseCodeableConcept(child, path+'/code') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'focus') then
        element.focus := ParseReference{TFhirReference}(child, path+'/focus') {b}
      else if (child.localName = 'for') then
        element.for_ := ParseReference{TFhirReference}(child, path+'/for') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'executionPeriod') then
        element.executionPeriod := ParsePeriod(child, path+'/executionPeriod') {b}
      else if (child.localName = 'authoredOn') then
        element.authoredOnElement := ParseDateTime(child, path+'/authoredOn') {b}
      else if (child.localName = 'lastModified') then
        element.lastModifiedElement := ParseDateTime(child, path+'/lastModified') {b}
      else if (child.localName = 'requester') then
        element.requester := ParseReference{TFhirDevice}(child, path+'/requester') {b}
      else if (child.localName = 'performerType') then
        element.performerTypeList.Add(ParseCodeableConcept(child, path+'/performerType')){y.2}
      else if (child.localName = 'owner') then
        element.owner := ParseReference{TFhirPractitioner}(child, path+'/owner') {b}
      else if (child.localName = 'location') then
        element.location := ParseReference{TFhirLocation}(child, path+'/location') {b}
      else if (child.localName = 'reasonCode') then
        element.reasonCode := ParseCodeableConcept(child, path+'/reasonCode') {b}
      else if (child.localName = 'reasonReference') then
        element.reasonReference := ParseReference{TFhirReference}(child, path+'/reasonReference') {b}
      else if (child.localName = 'insurance') then
        element.insuranceList.Add(ParseReference{TFhirCoverage}(child, path+'/insurance')){y.2}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if (child.localName = 'relevantHistory') then
        element.relevantHistoryList.Add(ParseReference{TFhirProvenance}(child, path+'/relevantHistory')){y.2}
      else if (child.localName = 'restriction') then
        element.restriction := ParseTaskRestriction(child, path+'/restriction') {b}
      else if (child.localName = 'input') then
        element.inputList.Add(ParseTaskInput(child, path+'/input')){y.2}
      else if (child.localName = 'output') then
        element.outputList.Add(ParseTaskOutput(child, path+'/output')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTask(xml : TXmlBuilder; name : String; elem : TFhirTask);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeTaskChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTaskChildren(xml : TXmlBuilder; elem : TFhirTask);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesCanonical') then
    ComposeCanonical(xml, 'instantiatesCanonical', elem.instantiatesCanonicalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('instantiatesUri') then
    ComposeUri(xml, 'instantiatesUri', elem.instantiatesUriElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('basedOn') then
    for i := 0 to elem.basedOnList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'basedOn', elem.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('groupIdentifier') then
    ComposeIdentifier(xml, 'groupIdentifier', elem.groupIdentifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('partOf') then
    for i := 0 to elem.partOfList.Count - 1 do
      ComposeReference{TFhirTask}(xml, 'partOf', elem.partOfList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirTaskStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('statusReason') then
    ComposeCodeableConcept(xml, 'statusReason', elem.statusReason);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('businessStatus') then
    ComposeCodeableConcept(xml, 'businessStatus', elem.businessStatus);{x.2a}
  ComposeEnum(xml, 'intent', elem.IntentElement, CODES_TFhirTaskIntentEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('priority') then
    ComposeEnum(xml, 'priority', elem.PriorityElement, CODES_TFhirRequestPriorityEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('code') then
    ComposeCodeableConcept(xml, 'code', elem.code);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('description') then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('focus') then
    ComposeReference{TFhirReference}(xml, 'focus', elem.focus);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('for_') then
    ComposeReference{TFhirReference}(xml, 'for', elem.for_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('executionPeriod') then
    ComposePeriod(xml, 'executionPeriod', elem.executionPeriod);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('authoredOn') then
    ComposeDateTime(xml, 'authoredOn', elem.authoredOnElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('lastModified') then
    ComposeDateTime(xml, 'lastModified', elem.lastModifiedElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('requester') then
    ComposeReference{TFhirDevice}(xml, 'requester', elem.requester);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('performerType') then
    for i := 0 to elem.performerTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'performerType', elem.performerTypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('owner') then
    ComposeReference{TFhirPractitioner}(xml, 'owner', elem.owner);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('location') then
    ComposeReference{TFhirLocation}(xml, 'location', elem.location);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('reasonCode') then
    ComposeCodeableConcept(xml, 'reasonCode', elem.reasonCode);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('reasonReference') then
    ComposeReference{TFhirReference}(xml, 'reasonReference', elem.reasonReference);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('insurance') then
    for i := 0 to elem.insuranceList.Count - 1 do
      ComposeReference{TFhirCoverage}(xml, 'insurance', elem.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('note') then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('relevantHistory') then
    for i := 0 to elem.relevantHistoryList.Count - 1 do
      ComposeReference{TFhirProvenance}(xml, 'relevantHistory', elem.relevantHistoryList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('restriction') then
    ComposeTaskRestriction(xml, 'restriction', elem.restriction);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('input') then
    for i := 0 to elem.inputList.Count - 1 do
      ComposeTaskInput(xml, 'input', elem.inputList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('output') then
    for i := 0 to elem.outputList.Count - 1 do
      ComposeTaskOutput(xml, 'output', elem.outputList[i]);
end;

{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
function TFHIRXmlParser.ParseTerminologyCapabilitiesSoftware(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesSoftware;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesSoftware.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesSoftwareChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesSoftwareChild(element : TFhirTerminologyCapabilitiesSoftware; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesSoftware(xml : TXmlBuilder; name : String; elem : TFhirTerminologyCapabilitiesSoftware);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTerminologyCapabilitiesSoftwareChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesSoftwareChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesSoftware);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesImplementation(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesImplementation;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesImplementation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesImplementationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesImplementationChild(element : TFhirTerminologyCapabilitiesImplementation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'url') then
        element.urlElement := ParseUrl(child, path+'/url') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesImplementation(xml : TXmlBuilder; name : String; elem : TFhirTerminologyCapabilitiesImplementation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTerminologyCapabilitiesImplementationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesImplementationChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesImplementation);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrl(xml, 'url', elem.urlElement);{x.2b}
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesCodeSystem(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesCodeSystem;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesCodeSystem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesCodeSystemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesCodeSystemChild(element : TFhirTerminologyCapabilitiesCodeSystem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'uri') then
        element.uriElement := ParseCanonical(child, path+'/uri') {b}
      else if (child.localName = 'version') then
        element.versionList.Add(ParseTerminologyCapabilitiesCodeSystemVersion(child, path+'/version')){y.2}
      else if (child.localName = 'subsumption') then
        element.subsumptionElement := ParseBoolean(child, path+'/subsumption') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesCodeSystem(xml : TXmlBuilder; name : String; elem : TFhirTerminologyCapabilitiesCodeSystem);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTerminologyCapabilitiesCodeSystemChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesCodeSystemChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesCodeSystem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'uri', elem.uriElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.versionList.Count - 1 do
      ComposeTerminologyCapabilitiesCodeSystemVersion(xml, 'version', elem.versionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'subsumption', elem.subsumptionElement);{x.2b}
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesCodeSystemVersion(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesCodeSystemVersion;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesCodeSystemVersion.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesCodeSystemVersionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesCodeSystemVersionChild(element : TFhirTerminologyCapabilitiesCodeSystemVersion; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseString(child, path+'/code') {b}
      else if (child.localName = 'isDefault') then
        element.isDefaultElement := ParseBoolean(child, path+'/isDefault') {b}
      else if (child.localName = 'compositional') then
        element.compositionalElement := ParseBoolean(child, path+'/compositional') {b}
      else if (child.localName = 'language') then
        element.languageList.Add(ParseCode(child, path+'/language')){y.2}
      else if (child.localName = 'filter') then
        element.filterList.Add(ParseTerminologyCapabilitiesCodeSystemVersionFilter(child, path+'/filter')){y.2}
      else if (child.localName = 'property') then
        element.property_List.Add(ParseCode(child, path+'/property')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesCodeSystemVersion(xml : TXmlBuilder; name : String; elem : TFhirTerminologyCapabilitiesCodeSystemVersion);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTerminologyCapabilitiesCodeSystemVersionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesCodeSystemVersionChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesCodeSystemVersion);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'code', elem.codeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'isDefault', elem.isDefaultElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'compositional', elem.compositionalElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.languageList.Count - 1 do
      ComposeCode(xml, 'language', elem.languageList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.filterList.Count - 1 do
      ComposeTerminologyCapabilitiesCodeSystemVersionFilter(xml, 'filter', elem.filterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.property_List.Count - 1 do
      ComposeCode(xml, 'property', elem.property_List[i]);
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesCodeSystemVersionFilter(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesCodeSystemVersionFilter;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesCodeSystemVersionFilter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesCodeSystemVersionFilterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesCodeSystemVersionFilterChild(element : TFhirTerminologyCapabilitiesCodeSystemVersionFilter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if (child.localName = 'op') then
        element.opList.Add(ParseCode(child, path+'/op')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesCodeSystemVersionFilter(xml : TXmlBuilder; name : String; elem : TFhirTerminologyCapabilitiesCodeSystemVersionFilter);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTerminologyCapabilitiesCodeSystemVersionFilterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesCodeSystemVersionFilterChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesCodeSystemVersionFilter);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCode(xml, 'code', elem.codeElement);{x.2b}
  for i := 0 to elem.opList.Count - 1 do
      ComposeCode(xml, 'op', elem.opList[i]);
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesExpansion(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesExpansion;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesExpansion.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesExpansionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesExpansionChild(element : TFhirTerminologyCapabilitiesExpansion; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'hierarchical') then
        element.hierarchicalElement := ParseBoolean(child, path+'/hierarchical') {b}
      else if (child.localName = 'paging') then
        element.pagingElement := ParseBoolean(child, path+'/paging') {b}
      else if (child.localName = 'incomplete') then
        element.incompleteElement := ParseBoolean(child, path+'/incomplete') {b}
      else if (child.localName = 'parameter') then
        element.parameterList.Add(ParseTerminologyCapabilitiesExpansionParameter(child, path+'/parameter')){y.2}
      else if (child.localName = 'textFilter') then
        element.textFilterElement := ParseMarkdown(child, path+'/textFilter') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesExpansion(xml : TXmlBuilder; name : String; elem : TFhirTerminologyCapabilitiesExpansion);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTerminologyCapabilitiesExpansionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesExpansionChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesExpansion);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'hierarchical', elem.hierarchicalElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'paging', elem.pagingElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'incomplete', elem.incompleteElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeTerminologyCapabilitiesExpansionParameter(xml, 'parameter', elem.parameterList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'textFilter', elem.textFilterElement);{x.2b}
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesExpansionParameter(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesExpansionParameter;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesExpansionParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesExpansionParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesExpansionParameterChild(element : TFhirTerminologyCapabilitiesExpansionParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseCode(child, path+'/name') {b}
      else if (child.localName = 'documentation') then
        element.documentationElement := ParseString(child, path+'/documentation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesExpansionParameter(xml : TXmlBuilder; name : String; elem : TFhirTerminologyCapabilitiesExpansionParameter);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTerminologyCapabilitiesExpansionParameterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesExpansionParameterChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesExpansionParameter);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCode(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'documentation', elem.documentationElement);{x.2b}
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesValidateCode(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesValidateCode;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesValidateCode.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesValidateCodeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesValidateCodeChild(element : TFhirTerminologyCapabilitiesValidateCode; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'translations') then
        element.translationsElement := ParseBoolean(child, path+'/translations') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesValidateCode(xml : TXmlBuilder; name : String; elem : TFhirTerminologyCapabilitiesValidateCode);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTerminologyCapabilitiesValidateCodeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesValidateCodeChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesValidateCode);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeBoolean(xml, 'translations', elem.translationsElement);{x.2b}
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesTranslation(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesTranslation;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesTranslation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesTranslationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesTranslationChild(element : TFhirTerminologyCapabilitiesTranslation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'needsMap') then
        element.needsMapElement := ParseBoolean(child, path+'/needsMap') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesTranslation(xml : TXmlBuilder; name : String; elem : TFhirTerminologyCapabilitiesTranslation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTerminologyCapabilitiesTranslationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesTranslationChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesTranslation);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeBoolean(xml, 'needsMap', elem.needsMapElement);{x.2b}
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesClosure(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesClosure;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesClosure.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesClosureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesClosureChild(element : TFhirTerminologyCapabilitiesClosure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'translation') then
        element.translationElement := ParseBoolean(child, path+'/translation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesClosure(xml : TXmlBuilder; name : String; elem : TFhirTerminologyCapabilitiesClosure);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTerminologyCapabilitiesClosureChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesClosureChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilitiesClosure);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'translation', elem.translationElement);{x.2b}
end;

function TFHIRXmlParser.ParseTerminologyCapabilities(element : TMXmlElement; path : string) : TFhirTerminologyCapabilities;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilities.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesChild(element : TFhirTerminologyCapabilities; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'kind') then
        element.kindElement := ParseEnum(CODES_TFhirCapabilityStatementKindEnum, SYSTEMS_TFhirCapabilityStatementKindEnum, path+'/kind', child){1a}
      else if (child.localName = 'software') then
        element.software := ParseTerminologyCapabilitiesSoftware(child, path+'/software') {b}
      else if (child.localName = 'implementation') then
        element.implementation_ := ParseTerminologyCapabilitiesImplementation(child, path+'/implementation') {b}
      else if (child.localName = 'lockedDate') then
        element.lockedDateElement := ParseBoolean(child, path+'/lockedDate') {b}
      else if (child.localName = 'codeSystem') then
        element.codeSystemList.Add(ParseTerminologyCapabilitiesCodeSystem(child, path+'/codeSystem')){y.2}
      else if (child.localName = 'expansion') then
        element.expansion := ParseTerminologyCapabilitiesExpansion(child, path+'/expansion') {b}
      else if (child.localName = 'codeSearch') then
        element.codeSearchElement := ParseEnum(CODES_TFhirCodeSearchSupportEnum, SYSTEMS_TFhirCodeSearchSupportEnum, path+'/codeSearch', child){1a}
      else if (child.localName = 'validateCode') then
        element.validateCode := ParseTerminologyCapabilitiesValidateCode(child, path+'/validateCode') {b}
      else if (child.localName = 'translation') then
        element.translation := ParseTerminologyCapabilitiesTranslation(child, path+'/translation') {b}
      else if (child.localName = 'closure') then
        element.closure := ParseTerminologyCapabilitiesClosure(child, path+'/closure') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilities(xml : TXmlBuilder; name : String; elem : TFhirTerminologyCapabilities);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeTerminologyCapabilitiesChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesChildren(xml : TXmlBuilder; elem : TFhirTerminologyCapabilities);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  ComposeEnum(xml, 'kind', elem.KindElement, CODES_TFhirCapabilityStatementKindEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('software') then
    ComposeTerminologyCapabilitiesSoftware(xml, 'software', elem.software);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('implementation_') then
    ComposeTerminologyCapabilitiesImplementation(xml, 'implementation', elem.implementation_);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('lockedDate') then
    ComposeBoolean(xml, 'lockedDate', elem.lockedDateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('codeSystem') then
    for i := 0 to elem.codeSystemList.Count - 1 do
      ComposeTerminologyCapabilitiesCodeSystem(xml, 'codeSystem', elem.codeSystemList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('expansion') then
    ComposeTerminologyCapabilitiesExpansion(xml, 'expansion', elem.expansion);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('codeSearch') then
    ComposeEnum(xml, 'codeSearch', elem.CodeSearchElement, CODES_TFhirCodeSearchSupportEnum);
  if (SummaryOption in [soFull, soData]) and doCompose('validateCode') then
    ComposeTerminologyCapabilitiesValidateCode(xml, 'validateCode', elem.validateCode);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('translation') then
    ComposeTerminologyCapabilitiesTranslation(xml, 'translation', elem.translation);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('closure') then
    ComposeTerminologyCapabilitiesClosure(xml, 'closure', elem.closure);{x.2a}
end;

{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
function TFHIRXmlParser.ParseTestReportParticipant(element : TMXmlElement; path : string) : TFhirTestReportParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportParticipantChild(element : TFhirTestReportParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_Element := ParseEnum(CODES_TFhirReportParticipantTypeEnum, SYSTEMS_TFhirReportParticipantTypeEnum, path+'/type', child){1a}
      else if (child.localName = 'uri') then
        element.uriElement := ParseUri(child, path+'/uri') {b}
      else if (child.localName = 'display') then
        element.displayElement := ParseString(child, path+'/display') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportParticipant(xml : TXmlBuilder; name : String; elem : TFhirTestReportParticipant);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestReportParticipantChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestReportParticipantChildren(xml : TXmlBuilder; elem : TFhirTestReportParticipant);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'type', elem.Type_Element, CODES_TFhirReportParticipantTypeEnum);
  ComposeUri(xml, 'uri', elem.uriElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', elem.displayElement);{x.2b}
end;

function TFHIRXmlParser.ParseTestReportSetup(element : TMXmlElement; path : string) : TFhirTestReportSetup;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportSetup.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportSetupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportSetupChild(element : TFhirTestReportSetup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'action') then
        element.actionList.Add(ParseTestReportSetupAction(child, path+'/action')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportSetup(xml : TXmlBuilder; name : String; elem : TFhirTestReportSetup);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestReportSetupChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestReportSetupChildren(xml : TXmlBuilder; elem : TFhirTestReportSetup);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  for i := 0 to elem.actionList.Count - 1 do
      ComposeTestReportSetupAction(xml, 'action', elem.actionList[i]);
end;

function TFHIRXmlParser.ParseTestReportSetupAction(element : TMXmlElement; path : string) : TFhirTestReportSetupAction;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportSetupAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportSetupActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportSetupActionChild(element : TFhirTestReportSetupAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'operation') then
        element.operation := ParseTestReportSetupActionOperation(child, path+'/operation') {b}
      else if (child.localName = 'assert') then
        element.assert := ParseTestReportSetupActionAssert(child, path+'/assert') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportSetupAction(xml : TXmlBuilder; name : String; elem : TFhirTestReportSetupAction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestReportSetupActionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestReportSetupActionChildren(xml : TXmlBuilder; elem : TFhirTestReportSetupAction);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionOperation(xml, 'operation', elem.operation);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionAssert(xml, 'assert', elem.assert);{x.2a}
end;

function TFHIRXmlParser.ParseTestReportSetupActionOperation(element : TMXmlElement; path : string) : TFhirTestReportSetupActionOperation;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportSetupActionOperation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportSetupActionOperationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportSetupActionOperationChild(element : TFhirTestReportSetupActionOperation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'result') then
        element.resultElement := ParseEnum(CODES_TFhirReportActionResultCodesEnum, SYSTEMS_TFhirReportActionResultCodesEnum, path+'/result', child){1a}
      else if (child.localName = 'message') then
        element.messageElement := ParseMarkdown(child, path+'/message') {b}
      else if (child.localName = 'detail') then
        element.detailElement := ParseUri(child, path+'/detail') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportSetupActionOperation(xml : TXmlBuilder; name : String; elem : TFhirTestReportSetupActionOperation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestReportSetupActionOperationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestReportSetupActionOperationChildren(xml : TXmlBuilder; elem : TFhirTestReportSetupActionOperation);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'result', elem.ResultElement, CODES_TFhirReportActionResultCodesEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'message', elem.messageElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'detail', elem.detailElement);{x.2b}
end;

function TFHIRXmlParser.ParseTestReportSetupActionAssert(element : TMXmlElement; path : string) : TFhirTestReportSetupActionAssert;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportSetupActionAssert.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportSetupActionAssertChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportSetupActionAssertChild(element : TFhirTestReportSetupActionAssert; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'result') then
        element.resultElement := ParseEnum(CODES_TFhirReportActionResultCodesEnum, SYSTEMS_TFhirReportActionResultCodesEnum, path+'/result', child){1a}
      else if (child.localName = 'message') then
        element.messageElement := ParseMarkdown(child, path+'/message') {b}
      else if (child.localName = 'detail') then
        element.detailElement := ParseString(child, path+'/detail') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportSetupActionAssert(xml : TXmlBuilder; name : String; elem : TFhirTestReportSetupActionAssert);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestReportSetupActionAssertChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestReportSetupActionAssertChildren(xml : TXmlBuilder; elem : TFhirTestReportSetupActionAssert);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeEnum(xml, 'result', elem.ResultElement, CODES_TFhirReportActionResultCodesEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'message', elem.messageElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'detail', elem.detailElement);{x.2b}
end;

function TFHIRXmlParser.ParseTestReportTest(element : TMXmlElement; path : string) : TFhirTestReportTest;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportTest.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportTestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportTestChild(element : TFhirTestReportTest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'action') then
        element.actionList.Add(ParseTestReportTestAction(child, path+'/action')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportTest(xml : TXmlBuilder; name : String; elem : TFhirTestReportTest);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestReportTestChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestReportTestChildren(xml : TXmlBuilder; elem : TFhirTestReportTest);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  for i := 0 to elem.actionList.Count - 1 do
      ComposeTestReportTestAction(xml, 'action', elem.actionList[i]);
end;

function TFHIRXmlParser.ParseTestReportTestAction(element : TMXmlElement; path : string) : TFhirTestReportTestAction;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportTestAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportTestActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportTestActionChild(element : TFhirTestReportTestAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'operation') then
        element.operation := ParseTestReportSetupActionOperation(child, path+'/operation') {b}
      else if (child.localName = 'assert') then
        element.assert := ParseTestReportSetupActionAssert(child, path+'/assert') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportTestAction(xml : TXmlBuilder; name : String; elem : TFhirTestReportTestAction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestReportTestActionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestReportTestActionChildren(xml : TXmlBuilder; elem : TFhirTestReportTestAction);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionOperation(xml, 'operation', elem.operation);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionAssert(xml, 'assert', elem.assert);{x.2a}
end;

function TFHIRXmlParser.ParseTestReportTeardown(element : TMXmlElement; path : string) : TFhirTestReportTeardown;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportTeardown.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportTeardownChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportTeardownChild(element : TFhirTestReportTeardown; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'action') then
        element.actionList.Add(ParseTestReportTeardownAction(child, path+'/action')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportTeardown(xml : TXmlBuilder; name : String; elem : TFhirTestReportTeardown);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestReportTeardownChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestReportTeardownChildren(xml : TXmlBuilder; elem : TFhirTestReportTeardown);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  for i := 0 to elem.actionList.Count - 1 do
      ComposeTestReportTeardownAction(xml, 'action', elem.actionList[i]);
end;

function TFHIRXmlParser.ParseTestReportTeardownAction(element : TMXmlElement; path : string) : TFhirTestReportTeardownAction;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportTeardownAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportTeardownActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportTeardownActionChild(element : TFhirTestReportTeardownAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'operation') then
        element.operation := ParseTestReportSetupActionOperation(child, path+'/operation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportTeardownAction(xml : TXmlBuilder; name : String; elem : TFhirTestReportTeardownAction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestReportTeardownActionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestReportTeardownActionChildren(xml : TXmlBuilder; elem : TFhirTestReportTeardownAction);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeTestReportSetupActionOperation(xml, 'operation', elem.operation);{x.2a}
end;

function TFHIRXmlParser.ParseTestReport(element : TMXmlElement; path : string) : TFhirTestReport;
var
  child : TMXmlElement;
begin
  result := TFhirTestReport.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportChild(element : TFhirTestReport; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirReportStatusCodesEnum, SYSTEMS_TFhirReportStatusCodesEnum, path+'/status', child){1a}
      else if (child.localName = 'testScript') then
        element.testScript := ParseReference{TFhirTestScript}(child, path+'/testScript') {b}
      else if (child.localName = 'result') then
        element.resultElement := ParseEnum(CODES_TFhirReportResultCodesEnum, SYSTEMS_TFhirReportResultCodesEnum, path+'/result', child){1a}
      else if (child.localName = 'score') then
        element.scoreElement := ParseDecimal(child, path+'/score') {b}
      else if (child.localName = 'tester') then
        element.testerElement := ParseString(child, path+'/tester') {b}
      else if (child.localName = 'issued') then
        element.issuedElement := ParseDateTime(child, path+'/issued') {b}
      else if (child.localName = 'participant') then
        element.participantList.Add(ParseTestReportParticipant(child, path+'/participant')){y.2}
      else if (child.localName = 'setup') then
        element.setup := ParseTestReportSetup(child, path+'/setup') {b}
      else if (child.localName = 'test') then
        element.testList.Add(ParseTestReportTest(child, path+'/test')){y.2}
      else if (child.localName = 'teardown') then
        element.teardown := ParseTestReportTeardown(child, path+'/teardown') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReport(xml : TXmlBuilder; name : String; elem : TFhirTestReport);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeTestReportChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestReportChildren(xml : TXmlBuilder; elem : TFhirTestReport);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirReportStatusCodesEnum);
  ComposeReference{TFhirTestScript}(xml, 'testScript', elem.testScript);{x.2a}
  ComposeEnum(xml, 'result', elem.ResultElement, CODES_TFhirReportResultCodesEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('score') then
    ComposeDecimal(xml, 'score', elem.scoreElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('tester') then
    ComposeString(xml, 'tester', elem.testerElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('issued') then
    ComposeDateTime(xml, 'issued', elem.issuedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('participant') then
    for i := 0 to elem.participantList.Count - 1 do
      ComposeTestReportParticipant(xml, 'participant', elem.participantList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('setup') then
    ComposeTestReportSetup(xml, 'setup', elem.setup);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('test') then
    for i := 0 to elem.testList.Count - 1 do
      ComposeTestReportTest(xml, 'test', elem.testList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('teardown') then
    ComposeTestReportTeardown(xml, 'teardown', elem.teardown);{x.2a}
end;

{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
function TFHIRXmlParser.ParseTestScriptOrigin(element : TMXmlElement; path : string) : TFhirTestScriptOrigin;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptOrigin.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptOriginChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptOriginChild(element : TFhirTestScriptOrigin; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'index') then
        element.indexElement := ParseInteger(child, path+'/index') {b}
      else if (child.localName = 'profile') then
        element.profile := ParseCoding(child, path+'/profile') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptOrigin(xml : TXmlBuilder; name : String; elem : TFhirTestScriptOrigin);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptOriginChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptOriginChildren(xml : TXmlBuilder; elem : TFhirTestScriptOrigin);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeInteger(xml, 'index', elem.indexElement);{x.2b}
  ComposeCoding(xml, 'profile', elem.profile);{x.2a}
end;

function TFHIRXmlParser.ParseTestScriptDestination(element : TMXmlElement; path : string) : TFhirTestScriptDestination;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptDestination.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptDestinationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptDestinationChild(element : TFhirTestScriptDestination; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'index') then
        element.indexElement := ParseInteger(child, path+'/index') {b}
      else if (child.localName = 'profile') then
        element.profile := ParseCoding(child, path+'/profile') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptDestination(xml : TXmlBuilder; name : String; elem : TFhirTestScriptDestination);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptDestinationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptDestinationChildren(xml : TXmlBuilder; elem : TFhirTestScriptDestination);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeInteger(xml, 'index', elem.indexElement);{x.2b}
  ComposeCoding(xml, 'profile', elem.profile);{x.2a}
end;

function TFHIRXmlParser.ParseTestScriptMetadata(element : TMXmlElement; path : string) : TFhirTestScriptMetadata;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptMetadata.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptMetadataChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptMetadataChild(element : TFhirTestScriptMetadata; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'link') then
        element.link_List.Add(ParseTestScriptMetadataLink(child, path+'/link')){y.2}
      else if (child.localName = 'capability') then
        element.capabilityList.Add(ParseTestScriptMetadataCapability(child, path+'/capability')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptMetadata(xml : TXmlBuilder; name : String; elem : TFhirTestScriptMetadata);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptMetadataChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptMetadataChildren(xml : TXmlBuilder; elem : TFhirTestScriptMetadata);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.link_List.Count - 1 do
      ComposeTestScriptMetadataLink(xml, 'link', elem.link_List[i]);
  for i := 0 to elem.capabilityList.Count - 1 do
      ComposeTestScriptMetadataCapability(xml, 'capability', elem.capabilityList[i]);
end;

function TFHIRXmlParser.ParseTestScriptMetadataLink(element : TMXmlElement; path : string) : TFhirTestScriptMetadataLink;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptMetadataLink.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptMetadataLinkChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptMetadataLinkChild(element : TFhirTestScriptMetadataLink; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptMetadataLink(xml : TXmlBuilder; name : String; elem : TFhirTestScriptMetadataLink);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptMetadataLinkChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptMetadataLinkChildren(xml : TXmlBuilder; elem : TFhirTestScriptMetadataLink);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
end;

function TFHIRXmlParser.ParseTestScriptMetadataCapability(element : TMXmlElement; path : string) : TFhirTestScriptMetadataCapability;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptMetadataCapability.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptMetadataCapabilityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptMetadataCapabilityChild(element : TFhirTestScriptMetadataCapability; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'required') then
        element.requiredElement := ParseBoolean(child, path+'/required') {b}
      else if (child.localName = 'validated') then
        element.validatedElement := ParseBoolean(child, path+'/validated') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'origin') then
        element.originList.Add(ParseInteger(child, path+'/origin')){y.2}
      else if (child.localName = 'destination') then
        element.destinationElement := ParseInteger(child, path+'/destination') {b}
      else if (child.localName = 'link') then
        element.link_List.Add(ParseUri(child, path+'/link')){y.2}
      else if (child.localName = 'capabilities') then
        element.capabilitiesElement := ParseCanonical(child, path+'/capabilities') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptMetadataCapability(xml : TXmlBuilder; name : String; elem : TFhirTestScriptMetadataCapability);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptMetadataCapabilityChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptMetadataCapabilityChildren(xml : TXmlBuilder; elem : TFhirTestScriptMetadataCapability);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeBoolean(xml, 'required', elem.requiredElement);{x.2b}
  ComposeBoolean(xml, 'validated', elem.validatedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.originList.Count - 1 do
      ComposeInteger(xml, 'origin', elem.originList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'destination', elem.destinationElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.link_List.Count - 1 do
      ComposeUri(xml, 'link', elem.link_List[i]);
  ComposeCanonical(xml, 'capabilities', elem.capabilitiesElement);{x.2b}
end;

function TFHIRXmlParser.ParseTestScriptFixture(element : TMXmlElement; path : string) : TFhirTestScriptFixture;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptFixture.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptFixtureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptFixtureChild(element : TFhirTestScriptFixture; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'autocreate') then
        element.autocreateElement := ParseBoolean(child, path+'/autocreate') {b}
      else if (child.localName = 'autodelete') then
        element.autodeleteElement := ParseBoolean(child, path+'/autodelete') {b}
      else if (child.localName = 'resource') then
        element.resource := ParseReference{TFhirReference}(child, path+'/resource') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptFixture(xml : TXmlBuilder; name : String; elem : TFhirTestScriptFixture);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptFixtureChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptFixtureChildren(xml : TXmlBuilder; elem : TFhirTestScriptFixture);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeBoolean(xml, 'autocreate', elem.autocreateElement);{x.2b}
  ComposeBoolean(xml, 'autodelete', elem.autodeleteElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirReference}(xml, 'resource', elem.resource);{x.2a}
end;

function TFHIRXmlParser.ParseTestScriptVariable(element : TMXmlElement; path : string) : TFhirTestScriptVariable;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptVariable.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptVariableChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptVariableChild(element : TFhirTestScriptVariable; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'defaultValue') then
        element.defaultValueElement := ParseString(child, path+'/defaultValue') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'expression') then
        element.expressionElement := ParseString(child, path+'/expression') {b}
      else if (child.localName = 'headerField') then
        element.headerFieldElement := ParseString(child, path+'/headerField') {b}
      else if (child.localName = 'hint') then
        element.hintElement := ParseString(child, path+'/hint') {b}
      else if (child.localName = 'path') then
        element.pathElement := ParseString(child, path+'/path') {b}
      else if (child.localName = 'sourceId') then
        element.sourceIdElement := ParseId(child, path+'/sourceId') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptVariable(xml : TXmlBuilder; name : String; elem : TFhirTestScriptVariable);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptVariableChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptVariableChildren(xml : TXmlBuilder; elem : TFhirTestScriptVariable);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'defaultValue', elem.defaultValueElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'expression', elem.expressionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'headerField', elem.headerFieldElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'hint', elem.hintElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'path', elem.pathElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'sourceId', elem.sourceIdElement);{x.2b}
end;

function TFHIRXmlParser.ParseTestScriptSetup(element : TMXmlElement; path : string) : TFhirTestScriptSetup;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptSetup.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptSetupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptSetupChild(element : TFhirTestScriptSetup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'action') then
        element.actionList.Add(ParseTestScriptSetupAction(child, path+'/action')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetup(xml : TXmlBuilder; name : String; elem : TFhirTestScriptSetup);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptSetupChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupChildren(xml : TXmlBuilder; elem : TFhirTestScriptSetup);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  for i := 0 to elem.actionList.Count - 1 do
      ComposeTestScriptSetupAction(xml, 'action', elem.actionList[i]);
end;

function TFHIRXmlParser.ParseTestScriptSetupAction(element : TMXmlElement; path : string) : TFhirTestScriptSetupAction;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptSetupAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptSetupActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptSetupActionChild(element : TFhirTestScriptSetupAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'operation') then
        element.operation := ParseTestScriptSetupActionOperation(child, path+'/operation') {b}
      else if (child.localName = 'assert') then
        element.assert := ParseTestScriptSetupActionAssert(child, path+'/assert') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupAction(xml : TXmlBuilder; name : String; elem : TFhirTestScriptSetupAction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptSetupActionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupActionChildren(xml : TXmlBuilder; elem : TFhirTestScriptSetupAction);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionOperation(xml, 'operation', elem.operation);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionAssert(xml, 'assert', elem.assert);{x.2a}
end;

function TFHIRXmlParser.ParseTestScriptSetupActionOperation(element : TMXmlElement; path : string) : TFhirTestScriptSetupActionOperation;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptSetupActionOperation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptSetupActionOperationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptSetupActionOperationChild(element : TFhirTestScriptSetupActionOperation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        element.type_ := ParseCoding(child, path+'/type') {b}
      else if (child.localName = 'resource') then
        element.resourceElement := ParseCode(child, path+'/resource') {b}
      else if (child.localName = 'label') then
        element.label_Element := ParseString(child, path+'/label') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'accept') then
        element.acceptElement := ParseCode(child, path+'/accept') {b}
      else if (child.localName = 'contentType') then
        element.contentTypeElement := ParseCode(child, path+'/contentType') {b}
      else if (child.localName = 'destination') then
        element.destinationElement := ParseInteger(child, path+'/destination') {b}
      else if (child.localName = 'encodeRequestUrl') then
        element.encodeRequestUrlElement := ParseBoolean(child, path+'/encodeRequestUrl') {b}
      else if (child.localName = 'method') then
        element.methodElement := ParseEnum(CODES_TFhirHttpOperationsEnum, SYSTEMS_TFhirHttpOperationsEnum, path+'/method', child){1a}
      else if (child.localName = 'origin') then
        element.originElement := ParseInteger(child, path+'/origin') {b}
      else if (child.localName = 'params') then
        element.paramsElement := ParseString(child, path+'/params') {b}
      else if (child.localName = 'requestHeader') then
        element.requestHeaderList.Add(ParseTestScriptSetupActionOperationRequestHeader(child, path+'/requestHeader')){y.2}
      else if (child.localName = 'requestId') then
        element.requestIdElement := ParseId(child, path+'/requestId') {b}
      else if (child.localName = 'responseId') then
        element.responseIdElement := ParseId(child, path+'/responseId') {b}
      else if (child.localName = 'sourceId') then
        element.sourceIdElement := ParseId(child, path+'/sourceId') {b}
      else if (child.localName = 'targetId') then
        element.targetIdElement := ParseId(child, path+'/targetId') {b}
      else if (child.localName = 'url') then
        element.urlElement := ParseString(child, path+'/url') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupActionOperation(xml : TXmlBuilder; name : String; elem : TFhirTestScriptSetupActionOperation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptSetupActionOperationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupActionOperationChildren(xml : TXmlBuilder; elem : TFhirTestScriptSetupActionOperation);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'type', elem.type_);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'resource', elem.resourceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'label', elem.label_Element);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'accept', elem.acceptElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'contentType', elem.contentTypeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'destination', elem.destinationElement);{x.2b}
  ComposeBoolean(xml, 'encodeRequestUrl', elem.encodeRequestUrlElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'method', elem.MethodElement, CODES_TFhirHttpOperationsEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'origin', elem.originElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'params', elem.paramsElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.requestHeaderList.Count - 1 do
      ComposeTestScriptSetupActionOperationRequestHeader(xml, 'requestHeader', elem.requestHeaderList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'requestId', elem.requestIdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'responseId', elem.responseIdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'sourceId', elem.sourceIdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'targetId', elem.targetIdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'url', elem.urlElement);{x.2b}
end;

function TFHIRXmlParser.ParseTestScriptSetupActionOperationRequestHeader(element : TMXmlElement; path : string) : TFhirTestScriptSetupActionOperationRequestHeader;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptSetupActionOperationRequestHeader.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptSetupActionOperationRequestHeaderChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptSetupActionOperationRequestHeaderChild(element : TFhirTestScriptSetupActionOperationRequestHeader; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'field') then
        element.fieldElement := ParseString(child, path+'/field') {b}
      else if (child.localName = 'value') then
        element.valueElement := ParseString(child, path+'/value') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupActionOperationRequestHeader(xml : TXmlBuilder; name : String; elem : TFhirTestScriptSetupActionOperationRequestHeader);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptSetupActionOperationRequestHeaderChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupActionOperationRequestHeaderChildren(xml : TXmlBuilder; elem : TFhirTestScriptSetupActionOperationRequestHeader);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'field', elem.fieldElement);{x.2b}
  ComposeString(xml, 'value', elem.valueElement);{x.2b}
end;

function TFHIRXmlParser.ParseTestScriptSetupActionAssert(element : TMXmlElement; path : string) : TFhirTestScriptSetupActionAssert;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptSetupActionAssert.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptSetupActionAssertChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptSetupActionAssertChild(element : TFhirTestScriptSetupActionAssert; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'label') then
        element.label_Element := ParseString(child, path+'/label') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'direction') then
        element.directionElement := ParseEnum(CODES_TFhirAssertDirectionCodesEnum, SYSTEMS_TFhirAssertDirectionCodesEnum, path+'/direction', child){1a}
      else if (child.localName = 'compareToSourceId') then
        element.compareToSourceIdElement := ParseString(child, path+'/compareToSourceId') {b}
      else if (child.localName = 'compareToSourceExpression') then
        element.compareToSourceExpressionElement := ParseString(child, path+'/compareToSourceExpression') {b}
      else if (child.localName = 'compareToSourcePath') then
        element.compareToSourcePathElement := ParseString(child, path+'/compareToSourcePath') {b}
      else if (child.localName = 'contentType') then
        element.contentTypeElement := ParseCode(child, path+'/contentType') {b}
      else if (child.localName = 'expression') then
        element.expressionElement := ParseString(child, path+'/expression') {b}
      else if (child.localName = 'headerField') then
        element.headerFieldElement := ParseString(child, path+'/headerField') {b}
      else if (child.localName = 'minimumId') then
        element.minimumIdElement := ParseString(child, path+'/minimumId') {b}
      else if (child.localName = 'navigationLinks') then
        element.navigationLinksElement := ParseBoolean(child, path+'/navigationLinks') {b}
      else if (child.localName = 'operator') then
        element.operatorElement := ParseEnum(CODES_TFhirAssertOperatorCodesEnum, SYSTEMS_TFhirAssertOperatorCodesEnum, path+'/operator', child){1a}
      else if (child.localName = 'path') then
        element.pathElement := ParseString(child, path+'/path') {b}
      else if (child.localName = 'requestMethod') then
        element.requestMethodElement := ParseEnum(CODES_TFhirHttpOperationsEnum, SYSTEMS_TFhirHttpOperationsEnum, path+'/requestMethod', child){1a}
      else if (child.localName = 'requestURL') then
        element.requestURLElement := ParseString(child, path+'/requestURL') {b}
      else if (child.localName = 'resource') then
        element.resourceElement := ParseCode(child, path+'/resource') {b}
      else if (child.localName = 'response') then
        element.responseElement := ParseEnum(CODES_TFhirAssertResponseCodeTypesEnum, SYSTEMS_TFhirAssertResponseCodeTypesEnum, path+'/response', child){1a}
      else if (child.localName = 'responseCode') then
        element.responseCodeElement := ParseString(child, path+'/responseCode') {b}
      else if (child.localName = 'sourceId') then
        element.sourceIdElement := ParseId(child, path+'/sourceId') {b}
      else if (child.localName = 'validateProfileId') then
        element.validateProfileIdElement := ParseId(child, path+'/validateProfileId') {b}
      else if (child.localName = 'value') then
        element.valueElement := ParseString(child, path+'/value') {b}
      else if (child.localName = 'warningOnly') then
        element.warningOnlyElement := ParseBoolean(child, path+'/warningOnly') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupActionAssert(xml : TXmlBuilder; name : String; elem : TFhirTestScriptSetupActionAssert);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptSetupActionAssertChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupActionAssertChildren(xml : TXmlBuilder; elem : TFhirTestScriptSetupActionAssert);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'label', elem.label_Element);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'direction', elem.DirectionElement, CODES_TFhirAssertDirectionCodesEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'compareToSourceId', elem.compareToSourceIdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'compareToSourceExpression', elem.compareToSourceExpressionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'compareToSourcePath', elem.compareToSourcePathElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'contentType', elem.contentTypeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'expression', elem.expressionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'headerField', elem.headerFieldElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'minimumId', elem.minimumIdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'navigationLinks', elem.navigationLinksElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'operator', elem.OperatorElement, CODES_TFhirAssertOperatorCodesEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'path', elem.pathElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'requestMethod', elem.RequestMethodElement, CODES_TFhirHttpOperationsEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'requestURL', elem.requestURLElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'resource', elem.resourceElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'response', elem.ResponseElement, CODES_TFhirAssertResponseCodeTypesEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'responseCode', elem.responseCodeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'sourceId', elem.sourceIdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'validateProfileId', elem.validateProfileIdElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'value', elem.valueElement);{x.2b}
  ComposeBoolean(xml, 'warningOnly', elem.warningOnlyElement);{x.2b}
end;

function TFHIRXmlParser.ParseTestScriptTest(element : TMXmlElement; path : string) : TFhirTestScriptTest;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptTest.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptTestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptTestChild(element : TFhirTestScriptTest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseString(child, path+'/description') {b}
      else if (child.localName = 'action') then
        element.actionList.Add(ParseTestScriptTestAction(child, path+'/action')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptTest(xml : TXmlBuilder; name : String; elem : TFhirTestScriptTest);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptTestChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptTestChildren(xml : TXmlBuilder; elem : TFhirTestScriptTest);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', elem.descriptionElement);{x.2b}
  for i := 0 to elem.actionList.Count - 1 do
      ComposeTestScriptTestAction(xml, 'action', elem.actionList[i]);
end;

function TFHIRXmlParser.ParseTestScriptTestAction(element : TMXmlElement; path : string) : TFhirTestScriptTestAction;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptTestAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptTestActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptTestActionChild(element : TFhirTestScriptTestAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'operation') then
        element.operation := ParseTestScriptSetupActionOperation(child, path+'/operation') {b}
      else if (child.localName = 'assert') then
        element.assert := ParseTestScriptSetupActionAssert(child, path+'/assert') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptTestAction(xml : TXmlBuilder; name : String; elem : TFhirTestScriptTestAction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptTestActionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptTestActionChildren(xml : TXmlBuilder; elem : TFhirTestScriptTestAction);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionOperation(xml, 'operation', elem.operation);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionAssert(xml, 'assert', elem.assert);{x.2a}
end;

function TFHIRXmlParser.ParseTestScriptTeardown(element : TMXmlElement; path : string) : TFhirTestScriptTeardown;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptTeardown.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptTeardownChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptTeardownChild(element : TFhirTestScriptTeardown; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'action') then
        element.actionList.Add(ParseTestScriptTeardownAction(child, path+'/action')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptTeardown(xml : TXmlBuilder; name : String; elem : TFhirTestScriptTeardown);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptTeardownChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptTeardownChildren(xml : TXmlBuilder; elem : TFhirTestScriptTeardown);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  for i := 0 to elem.actionList.Count - 1 do
      ComposeTestScriptTeardownAction(xml, 'action', elem.actionList[i]);
end;

function TFHIRXmlParser.ParseTestScriptTeardownAction(element : TMXmlElement; path : string) : TFhirTestScriptTeardownAction;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptTeardownAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptTeardownActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptTeardownActionChild(element : TFhirTestScriptTeardownAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'operation') then
        element.operation := ParseTestScriptSetupActionOperation(child, path+'/operation') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptTeardownAction(xml : TXmlBuilder; name : String; elem : TFhirTestScriptTeardownAction);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeTestScriptTeardownActionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptTeardownActionChildren(xml : TXmlBuilder; elem : TFhirTestScriptTeardownAction);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeTestScriptSetupActionOperation(xml, 'operation', elem.operation);{x.2a}
end;

function TFHIRXmlParser.ParseTestScript(element : TMXmlElement; path : string) : TFhirTestScript;
var
  child : TMXmlElement;
begin
  result := TFhirTestScript.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptChild(element : TFhirTestScript; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifier := ParseIdentifier(child, path+'/identifier') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'origin') then
        element.originList.Add(ParseTestScriptOrigin(child, path+'/origin')){y.2}
      else if (child.localName = 'destination') then
        element.destinationList.Add(ParseTestScriptDestination(child, path+'/destination')){y.2}
      else if (child.localName = 'metadata') then
        element.metadata := ParseTestScriptMetadata(child, path+'/metadata') {b}
      else if (child.localName = 'fixture') then
        element.fixtureList.Add(ParseTestScriptFixture(child, path+'/fixture')){y.2}
      else if (child.localName = 'profile') then
        element.profileList.Add(ParseReference{TFhirReference}(child, path+'/profile')){y.2}
      else if (child.localName = 'variable') then
        element.variableList.Add(ParseTestScriptVariable(child, path+'/variable')){y.2}
      else if (child.localName = 'setup') then
        element.setup := ParseTestScriptSetup(child, path+'/setup') {b}
      else if (child.localName = 'test') then
        element.testList.Add(ParseTestScriptTest(child, path+'/test')){y.2}
      else if (child.localName = 'teardown') then
        element.teardown := ParseTestScriptTeardown(child, path+'/teardown') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScript(xml : TXmlBuilder; name : String; elem : TFhirTestScript);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeTestScriptChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeTestScriptChildren(xml : TXmlBuilder; elem : TFhirTestScript);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    ComposeIdentifier(xml, 'identifier', elem.identifier);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('origin') then
    for i := 0 to elem.originList.Count - 1 do
      ComposeTestScriptOrigin(xml, 'origin', elem.originList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('destination') then
    for i := 0 to elem.destinationList.Count - 1 do
      ComposeTestScriptDestination(xml, 'destination', elem.destinationList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('metadata') then
    ComposeTestScriptMetadata(xml, 'metadata', elem.metadata);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('fixture') then
    for i := 0 to elem.fixtureList.Count - 1 do
      ComposeTestScriptFixture(xml, 'fixture', elem.fixtureList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('profile') then
    for i := 0 to elem.profileList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'profile', elem.profileList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('variable') then
    for i := 0 to elem.variableList.Count - 1 do
      ComposeTestScriptVariable(xml, 'variable', elem.variableList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('setup') then
    ComposeTestScriptSetup(xml, 'setup', elem.setup);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('test') then
    for i := 0 to elem.testList.Count - 1 do
      ComposeTestScriptTest(xml, 'test', elem.testList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('teardown') then
    ComposeTestScriptTeardown(xml, 'teardown', elem.teardown);{x.2a}
end;

{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
function TFHIRXmlParser.ParseValueSetCompose(element : TMXmlElement; path : string) : TFhirValueSetCompose;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetCompose.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetComposeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetComposeChild(element : TFhirValueSetCompose; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'lockedDate') then
        element.lockedDateElement := ParseDate(child, path+'/lockedDate') {b}
      else if (child.localName = 'inactive') then
        element.inactiveElement := ParseBoolean(child, path+'/inactive') {b}
      else if (child.localName = 'include') then
        element.includeList.Add(ParseValueSetComposeInclude(child, path+'/include')){y.2}
      else if (child.localName = 'exclude') then
        element.excludeList.Add(ParseValueSetComposeInclude(child, path+'/exclude')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetCompose(xml : TXmlBuilder; name : String; elem : TFhirValueSetCompose);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeValueSetComposeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeChildren(xml : TXmlBuilder; elem : TFhirValueSetCompose);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDate(xml, 'lockedDate', elem.lockedDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'inactive', elem.inactiveElement);{x.2b}
  for i := 0 to elem.includeList.Count - 1 do
      ComposeValueSetComposeInclude(xml, 'include', elem.includeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.excludeList.Count - 1 do
      ComposeValueSetComposeInclude(xml, 'exclude', elem.excludeList[i]);
end;

function TFHIRXmlParser.ParseValueSetComposeInclude(element : TMXmlElement; path : string) : TFhirValueSetComposeInclude;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetComposeInclude.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetComposeIncludeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetComposeIncludeChild(element : TFhirValueSetComposeInclude; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'system') then
        element.systemElement := ParseUri(child, path+'/system') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'concept') then
        element.conceptList.Add(ParseValueSetComposeIncludeConcept(child, path+'/concept')){y.2}
      else if (child.localName = 'filter') then
        element.filterList.Add(ParseValueSetComposeIncludeFilter(child, path+'/filter')){y.2}
      else if (child.localName = 'valueSet') then
        element.valueSetList.Add(ParseCanonical(child, path+'/valueSet')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeInclude(xml : TXmlBuilder; name : String; elem : TFhirValueSetComposeInclude);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeValueSetComposeIncludeChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeIncludeChildren(xml : TXmlBuilder; elem : TFhirValueSetComposeInclude);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'system', elem.systemElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.conceptList.Count - 1 do
      ComposeValueSetComposeIncludeConcept(xml, 'concept', elem.conceptList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.filterList.Count - 1 do
      ComposeValueSetComposeIncludeFilter(xml, 'filter', elem.filterList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.valueSetList.Count - 1 do
      ComposeCanonical(xml, 'valueSet', elem.valueSetList[i]);
end;

function TFHIRXmlParser.ParseValueSetComposeIncludeConcept(element : TMXmlElement; path : string) : TFhirValueSetComposeIncludeConcept;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetComposeIncludeConcept.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetComposeIncludeConceptChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetComposeIncludeConceptChild(element : TFhirValueSetComposeIncludeConcept; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if (child.localName = 'display') then
        element.displayElement := ParseString(child, path+'/display') {b}
      else if (child.localName = 'designation') then
        element.designationList.Add(ParseValueSetComposeIncludeConceptDesignation(child, path+'/designation')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeIncludeConcept(xml : TXmlBuilder; name : String; elem : TFhirValueSetComposeIncludeConcept);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeValueSetComposeIncludeConceptChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeIncludeConceptChildren(xml : TXmlBuilder; elem : TFhirValueSetComposeIncludeConcept);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCode(xml, 'code', elem.codeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', elem.displayElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.designationList.Count - 1 do
      ComposeValueSetComposeIncludeConceptDesignation(xml, 'designation', elem.designationList[i]);
end;

function TFHIRXmlParser.ParseValueSetComposeIncludeConceptDesignation(element : TMXmlElement; path : string) : TFhirValueSetComposeIncludeConceptDesignation;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetComposeIncludeConceptDesignation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetComposeIncludeConceptDesignationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetComposeIncludeConceptDesignationChild(element : TFhirValueSetComposeIncludeConceptDesignation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'language') then
        element.languageElement := ParseCode(child, path+'/language') {b}
      else if (child.localName = 'use') then
        element.use := ParseCoding(child, path+'/use') {b}
      else if (child.localName = 'value') then
        element.valueElement := ParseString(child, path+'/value') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeIncludeConceptDesignation(xml : TXmlBuilder; name : String; elem : TFhirValueSetComposeIncludeConceptDesignation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeValueSetComposeIncludeConceptDesignationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeIncludeConceptDesignationChildren(xml : TXmlBuilder; elem : TFhirValueSetComposeIncludeConceptDesignation);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'language', elem.languageElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'use', elem.use);{x.2a}
  ComposeString(xml, 'value', elem.valueElement);{x.2b}
end;

function TFHIRXmlParser.ParseValueSetComposeIncludeFilter(element : TMXmlElement; path : string) : TFhirValueSetComposeIncludeFilter;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetComposeIncludeFilter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetComposeIncludeFilterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetComposeIncludeFilterChild(element : TFhirValueSetComposeIncludeFilter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'property') then
        element.property_Element := ParseCode(child, path+'/property') {b}
      else if (child.localName = 'op') then
        element.opElement := ParseEnum(CODES_TFhirFilterOperatorEnum, SYSTEMS_TFhirFilterOperatorEnum, path+'/op', child){1a}
      else if (child.localName = 'value') then
        element.valueElement := ParseString(child, path+'/value') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeIncludeFilter(xml : TXmlBuilder; name : String; elem : TFhirValueSetComposeIncludeFilter);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeValueSetComposeIncludeFilterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeIncludeFilterChildren(xml : TXmlBuilder; elem : TFhirValueSetComposeIncludeFilter);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCode(xml, 'property', elem.property_Element);{x.2b}
  ComposeEnum(xml, 'op', elem.OpElement, CODES_TFhirFilterOperatorEnum);
  ComposeString(xml, 'value', elem.valueElement);{x.2b}
end;

function TFHIRXmlParser.ParseValueSetExpansion(element : TMXmlElement; path : string) : TFhirValueSetExpansion;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetExpansion.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetExpansionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetExpansionChild(element : TFhirValueSetExpansion; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierElement := ParseUri(child, path+'/identifier') {b}
      else if (child.localName = 'timestamp') then
        element.timestampElement := ParseDateTime(child, path+'/timestamp') {b}
      else if (child.localName = 'total') then
        element.totalElement := ParseInteger(child, path+'/total') {b}
      else if (child.localName = 'offset') then
        element.offsetElement := ParseInteger(child, path+'/offset') {b}
      else if (child.localName = 'parameter') then
        element.parameterList.Add(ParseValueSetExpansionParameter(child, path+'/parameter')){y.2}
      else if (child.localName = 'contains') then
        element.containsList.Add(ParseValueSetExpansionContains(child, path+'/contains')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansion(xml : TXmlBuilder; name : String; elem : TFhirValueSetExpansion);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeValueSetExpansionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansionChildren(xml : TXmlBuilder; elem : TFhirValueSetExpansion);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'identifier', elem.identifierElement);{x.2b}
  ComposeDateTime(xml, 'timestamp', elem.timestampElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'total', elem.totalElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'offset', elem.offsetElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.parameterList.Count - 1 do
      ComposeValueSetExpansionParameter(xml, 'parameter', elem.parameterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.containsList.Count - 1 do
      ComposeValueSetExpansionContains(xml, 'contains', elem.containsList[i]);
end;

function TFHIRXmlParser.ParseValueSetExpansionParameter(element : TMXmlElement; path : string) : TFhirValueSetExpansionParameter;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetExpansionParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetExpansionParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetExpansionParameterChild(element : TFhirValueSetExpansionParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'valueCode') then
        element.value := ParseCode(child, path+'/valueCode'){x.3}
      else if (child.localName = 'valueString') then
        element.value := ParseString(child, path+'/valueString'){x.3}
      else if (child.localName = 'valueBoolean') then
        element.value := ParseBoolean(child, path+'/valueBoolean'){x.3}
      else if (child.localName = 'valueInteger') then
        element.value := ParseInteger(child, path+'/valueInteger'){x.3}
      else if (child.localName = 'valueDecimal') then
        element.value := ParseDecimal(child, path+'/valueDecimal'){x.3}
      else if (child.localName = 'valueUri') then
        element.value := ParseUri(child, path+'/valueUri'){x.3}
      else if (child.localName = 'valueDateTime') then
        element.value := ParseDateTime(child, path+'/valueDateTime'){x.3}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansionParameter(xml : TXmlBuilder; name : String; elem : TFhirValueSetExpansionParameter);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeValueSetExpansionParameterChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansionParameterChildren(xml : TXmlBuilder; elem : TFhirValueSetExpansionParameter);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and (elem.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(elem.value))
  else if (SummaryOption in [soFull, soData]) and (elem.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(elem.value));
end;

function TFHIRXmlParser.ParseValueSetExpansionContains(element : TMXmlElement; path : string) : TFhirValueSetExpansionContains;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetExpansionContains.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetExpansionContainsChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetExpansionContainsChild(element : TFhirValueSetExpansionContains; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'system') then
        element.systemElement := ParseUri(child, path+'/system') {b}
      else if (child.localName = 'abstract') then
        element.abstractElement := ParseBoolean(child, path+'/abstract') {b}
      else if (child.localName = 'inactive') then
        element.inactiveElement := ParseBoolean(child, path+'/inactive') {b}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'code') then
        element.codeElement := ParseCode(child, path+'/code') {b}
      else if (child.localName = 'display') then
        element.displayElement := ParseString(child, path+'/display') {b}
      else if (child.localName = 'designation') then
        element.designationList.Add(ParseValueSetComposeIncludeConceptDesignation(child, path+'/designation')){y.2}
      else if (child.localName = 'contains') then
        element.containsList.Add(ParseValueSetExpansionContains(child, path+'/contains')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansionContains(xml : TXmlBuilder; name : String; elem : TFhirValueSetExpansionContains);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeValueSetExpansionContainsChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansionContainsChildren(xml : TXmlBuilder; elem : TFhirValueSetExpansionContains);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'system', elem.systemElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'abstract', elem.abstractElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'inactive', elem.inactiveElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'code', elem.codeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', elem.displayElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.designationList.Count - 1 do
      ComposeValueSetComposeIncludeConceptDesignation(xml, 'designation', elem.designationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.containsList.Count - 1 do
      ComposeValueSetExpansionContains(xml, 'contains', elem.containsList[i]);
end;

function TFHIRXmlParser.ParseValueSet(element : TMXmlElement; path : string) : TFhirValueSet;
var
  child : TMXmlElement;
begin
  result := TFhirValueSet.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetChild(element : TFhirValueSet; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        element.urlElement := ParseUri(child, path+'/url') {b}
      else if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'version') then
        element.versionElement := ParseString(child, path+'/version') {b}
      else if (child.localName = 'name') then
        element.nameElement := ParseString(child, path+'/name') {b}
      else if (child.localName = 'title') then
        element.titleElement := ParseString(child, path+'/title') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'experimental') then
        element.experimentalElement := ParseBoolean(child, path+'/experimental') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDateTime(child, path+'/date') {b}
      else if (child.localName = 'publisher') then
        element.publisherElement := ParseString(child, path+'/publisher') {b}
      else if (child.localName = 'contact') then
        element.contactList.Add(ParseContactDetail(child, path+'/contact')){y.2}
      else if (child.localName = 'description') then
        element.descriptionElement := ParseMarkdown(child, path+'/description') {b}
      else if (child.localName = 'useContext') then
        element.useContextList.Add(ParseUsageContext(child, path+'/useContext')){y.2}
      else if (child.localName = 'jurisdiction') then
        element.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')){y.2}
      else if (child.localName = 'immutable') then
        element.immutableElement := ParseBoolean(child, path+'/immutable') {b}
      else if (child.localName = 'purpose') then
        element.purposeElement := ParseMarkdown(child, path+'/purpose') {b}
      else if (child.localName = 'copyright') then
        element.copyrightElement := ParseMarkdown(child, path+'/copyright') {b}
      else if (child.localName = 'compose') then
        element.compose := ParseValueSetCompose(child, path+'/compose') {b}
      else if (child.localName = 'expansion') then
        element.expansion := ParseValueSetExpansion(child, path+'/expansion') {b}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSet(xml : TXmlBuilder; name : String; elem : TFhirValueSet);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeValueSetChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeValueSetChildren(xml : TXmlBuilder; elem : TFhirValueSet);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('url') then
    ComposeUri(xml, 'url', elem.urlElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('version') then
    ComposeString(xml, 'version', elem.versionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('name') then
    ComposeString(xml, 'name', elem.nameElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('title') then
    ComposeString(xml, 'title', elem.titleElement);{x.2b}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirPublicationStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('experimental') then
    ComposeBoolean(xml, 'experimental', elem.experimentalElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('date') then
    ComposeDateTime(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('publisher') then
    ComposeString(xml, 'publisher', elem.publisherElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('contact') then
    for i := 0 to elem.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', elem.contactList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('description') then
    ComposeMarkdown(xml, 'description', elem.descriptionElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('useContext') then
    for i := 0 to elem.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', elem.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('jurisdiction') then
    for i := 0 to elem.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', elem.jurisdictionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('immutable') then
    ComposeBoolean(xml, 'immutable', elem.immutableElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('purpose') then
    ComposeMarkdown(xml, 'purpose', elem.purposeElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('copyright') then
    ComposeMarkdown(xml, 'copyright', elem.copyrightElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('compose') then
    ComposeValueSetCompose(xml, 'compose', elem.compose);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('expansion') then
    ComposeValueSetExpansion(xml, 'expansion', elem.expansion);{x.2a}
end;

{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
function TFHIRXmlParser.ParseVerificationResultPrimarySource(element : TMXmlElement; path : string) : TFhirVerificationResultPrimarySource;
var
  child : TMXmlElement;
begin
  result := TFhirVerificationResultPrimarySource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseVerificationResultPrimarySourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseVerificationResultPrimarySourceChild(element : TFhirVerificationResultPrimarySource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'who') then
        element.who := ParseReference{TFhirOrganization}(child, path+'/who') {b}
      else if (child.localName = 'type') then
        element.type_List.Add(ParseCodeableConcept(child, path+'/type')){y.2}
      else if (child.localName = 'communicationMethod') then
        element.communicationMethodList.Add(ParseCodeableConcept(child, path+'/communicationMethod')){y.2}
      else if (child.localName = 'validationStatus') then
        element.validationStatus := ParseCodeableConcept(child, path+'/validationStatus') {b}
      else if (child.localName = 'validationDate') then
        element.validationDateElement := ParseDateTime(child, path+'/validationDate') {b}
      else if (child.localName = 'canPushUpdates') then
        element.canPushUpdates := ParseCodeableConcept(child, path+'/canPushUpdates') {b}
      else if (child.localName = 'pushTypeAvailable') then
        element.pushTypeAvailableList.Add(ParseCodeableConcept(child, path+'/pushTypeAvailable')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeVerificationResultPrimarySource(xml : TXmlBuilder; name : String; elem : TFhirVerificationResultPrimarySource);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeVerificationResultPrimarySourceChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeVerificationResultPrimarySourceChildren(xml : TXmlBuilder; elem : TFhirVerificationResultPrimarySource);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference{TFhirOrganization}(xml, 'who', elem.who);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', elem.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to elem.communicationMethodList.Count - 1 do
      ComposeCodeableConcept(xml, 'communicationMethod', elem.communicationMethodList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'validationStatus', elem.validationStatus);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'validationDate', elem.validationDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'canPushUpdates', elem.canPushUpdates);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.pushTypeAvailableList.Count - 1 do
      ComposeCodeableConcept(xml, 'pushTypeAvailable', elem.pushTypeAvailableList[i]);
end;

function TFHIRXmlParser.ParseVerificationResultAttestation(element : TMXmlElement; path : string) : TFhirVerificationResultAttestation;
var
  child : TMXmlElement;
begin
  result := TFhirVerificationResultAttestation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseVerificationResultAttestationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseVerificationResultAttestationChild(element : TFhirVerificationResultAttestation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'who') then
        element.who := ParseReference{TFhirPractitioner}(child, path+'/who') {b}
      else if (child.localName = 'onBehalfOf') then
        element.onBehalfOf := ParseReference{TFhirOrganization}(child, path+'/onBehalfOf') {b}
      else if (child.localName = 'communicationMethod') then
        element.communicationMethod := ParseCodeableConcept(child, path+'/communicationMethod') {b}
      else if (child.localName = 'date') then
        element.dateElement := ParseDate(child, path+'/date') {b}
      else if (child.localName = 'sourceIdentityCertificate') then
        element.sourceIdentityCertificateElement := ParseString(child, path+'/sourceIdentityCertificate') {b}
      else if (child.localName = 'proxyIdentityCertificate') then
        element.proxyIdentityCertificateElement := ParseString(child, path+'/proxyIdentityCertificate') {b}
      else if (child.localName = 'proxySignature') then
        element.proxySignature := ParseSignature(child, path+'/proxySignature') {b}
      else if (child.localName = 'sourceSignature') then
        element.sourceSignature := ParseSignature(child, path+'/sourceSignature') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeVerificationResultAttestation(xml : TXmlBuilder; name : String; elem : TFhirVerificationResultAttestation);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeVerificationResultAttestationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeVerificationResultAttestationChildren(xml : TXmlBuilder; elem : TFhirVerificationResultAttestation);
begin
  composeBackboneElementChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirPractitioner}(xml, 'who', elem.who);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference{TFhirOrganization}(xml, 'onBehalfOf', elem.onBehalfOf);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'communicationMethod', elem.communicationMethod);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDate(xml, 'date', elem.dateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'sourceIdentityCertificate', elem.sourceIdentityCertificateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'proxyIdentityCertificate', elem.proxyIdentityCertificateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeSignature(xml, 'proxySignature', elem.proxySignature);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeSignature(xml, 'sourceSignature', elem.sourceSignature);{x.2a}
end;

function TFHIRXmlParser.ParseVerificationResultValidator(element : TMXmlElement; path : string) : TFhirVerificationResultValidator;
var
  child : TMXmlElement;
begin
  result := TFhirVerificationResultValidator.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseVerificationResultValidatorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseVerificationResultValidatorChild(element : TFhirVerificationResultValidator; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'organization') then
        element.organization := ParseReference{TFhirOrganization}(child, path+'/organization') {b}
      else if (child.localName = 'identityCertificate') then
        element.identityCertificateElement := ParseString(child, path+'/identityCertificate') {b}
      else if (child.localName = 'attestationSignature') then
        element.attestationSignature := ParseSignature(child, path+'/attestationSignature') {b}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeVerificationResultValidator(xml : TXmlBuilder; name : String; elem : TFhirVerificationResultValidator);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeVerificationResultValidatorChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeVerificationResultValidatorChildren(xml : TXmlBuilder; elem : TFhirVerificationResultValidator);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeReference{TFhirOrganization}(xml, 'organization', elem.organization);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'identityCertificate', elem.identityCertificateElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeSignature(xml, 'attestationSignature', elem.attestationSignature);{x.2a}
end;

function TFHIRXmlParser.ParseVerificationResult(element : TMXmlElement; path : string) : TFhirVerificationResult;
var
  child : TMXmlElement;
begin
  result := TFhirVerificationResult.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseVerificationResultChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseVerificationResultChild(element : TFhirVerificationResult; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'target') then
        element.targetList.Add(ParseReference{TFhirReference}(child, path+'/target')){y.2}
      else if (child.localName = 'targetLocation') then
        element.targetLocationList.Add(ParseString(child, path+'/targetLocation')){y.2}
      else if (child.localName = 'need') then
        element.need := ParseCodeableConcept(child, path+'/need') {b}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirVerificationresultStatusEnum, SYSTEMS_TFhirVerificationresultStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'statusDate') then
        element.statusDateElement := ParseDateTime(child, path+'/statusDate') {b}
      else if (child.localName = 'validationType') then
        element.validationType := ParseCodeableConcept(child, path+'/validationType') {b}
      else if (child.localName = 'validationProcess') then
        element.validationProcessList.Add(ParseCodeableConcept(child, path+'/validationProcess')){y.2}
      else if (child.localName = 'frequency') then
        element.frequency := ParseTiming(child, path+'/frequency') {b}
      else if (child.localName = 'lastPerformed') then
        element.lastPerformedElement := ParseDateTime(child, path+'/lastPerformed') {b}
      else if (child.localName = 'nextScheduled') then
        element.nextScheduledElement := ParseDate(child, path+'/nextScheduled') {b}
      else if (child.localName = 'failureAction') then
        element.failureAction := ParseCodeableConcept(child, path+'/failureAction') {b}
      else if (child.localName = 'primarySource') then
        element.primarySourceList.Add(ParseVerificationResultPrimarySource(child, path+'/primarySource')){y.2}
      else if (child.localName = 'attestation') then
        element.attestation := ParseVerificationResultAttestation(child, path+'/attestation') {b}
      else if (child.localName = 'validator') then
        element.validatorList.Add(ParseVerificationResultValidator(child, path+'/validator')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeVerificationResult(xml : TXmlBuilder; name : String; elem : TFhirVerificationResult);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeVerificationResultChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeVerificationResultChildren(xml : TXmlBuilder; elem : TFhirVerificationResult);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('target') then
    for i := 0 to elem.targetList.Count - 1 do
      ComposeReference{TFhirReference}(xml, 'target', elem.targetList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('targetLocation') then
    for i := 0 to elem.targetLocationList.Count - 1 do
      ComposeString(xml, 'targetLocation', elem.targetLocationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('need') then
    ComposeCodeableConcept(xml, 'need', elem.need);{x.2a}
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirVerificationresultStatusEnum);
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('statusDate') then
    ComposeDateTime(xml, 'statusDate', elem.statusDateElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('validationType') then
    ComposeCodeableConcept(xml, 'validationType', elem.validationType);{x.2a}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('validationProcess') then
    for i := 0 to elem.validationProcessList.Count - 1 do
      ComposeCodeableConcept(xml, 'validationProcess', elem.validationProcessList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('frequency') then
    ComposeTiming(xml, 'frequency', elem.frequency);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('lastPerformed') then
    ComposeDateTime(xml, 'lastPerformed', elem.lastPerformedElement);{x.2b}
  if (SummaryOption in [soFull, soData]) and doCompose('nextScheduled') then
    ComposeDate(xml, 'nextScheduled', elem.nextScheduledElement);{x.2b}
  if (SummaryOption in [soFull, soSummary, soData]) and doCompose('failureAction') then
    ComposeCodeableConcept(xml, 'failureAction', elem.failureAction);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('primarySource') then
    for i := 0 to elem.primarySourceList.Count - 1 do
      ComposeVerificationResultPrimarySource(xml, 'primarySource', elem.primarySourceList[i]);
  if (SummaryOption in [soFull, soData]) and doCompose('attestation') then
    ComposeVerificationResultAttestation(xml, 'attestation', elem.attestation);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('validator') then
    for i := 0 to elem.validatorList.Count - 1 do
      ComposeVerificationResultValidator(xml, 'validator', elem.validatorList[i]);
end;

{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
function TFHIRXmlParser.ParseVisionPrescriptionLensSpecification(element : TMXmlElement; path : string) : TFhirVisionPrescriptionLensSpecification;
var
  child : TMXmlElement;
begin
  result := TFhirVisionPrescriptionLensSpecification.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseVisionPrescriptionLensSpecificationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseVisionPrescriptionLensSpecificationChild(element : TFhirVisionPrescriptionLensSpecification; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'product') then
        element.product := ParseCodeableConcept(child, path+'/product') {b}
      else if (child.localName = 'eye') then
        element.eyeElement := ParseEnum(CODES_TFhirVisionEyeCodesEnum, SYSTEMS_TFhirVisionEyeCodesEnum, path+'/eye', child){1a}
      else if (child.localName = 'sphere') then
        element.sphereElement := ParseDecimal(child, path+'/sphere') {b}
      else if (child.localName = 'cylinder') then
        element.cylinderElement := ParseDecimal(child, path+'/cylinder') {b}
      else if (child.localName = 'axis') then
        element.axisElement := ParseInteger(child, path+'/axis') {b}
      else if (child.localName = 'prism') then
        element.prismList.Add(ParseVisionPrescriptionLensSpecificationPrism(child, path+'/prism')){y.2}
      else if (child.localName = 'add') then
        element.addElement := ParseDecimal(child, path+'/add') {b}
      else if (child.localName = 'power') then
        element.powerElement := ParseDecimal(child, path+'/power') {b}
      else if (child.localName = 'backCurve') then
        element.backCurveElement := ParseDecimal(child, path+'/backCurve') {b}
      else if (child.localName = 'diameter') then
        element.diameterElement := ParseDecimal(child, path+'/diameter') {b}
      else if (child.localName = 'duration') then
        element.duration := ParseQuantity(child, path+'/duration') {b}
      else if (child.localName = 'color') then
        element.colorElement := ParseString(child, path+'/color') {b}
      else if (child.localName = 'brand') then
        element.brandElement := ParseString(child, path+'/brand') {b}
      else if (child.localName = 'note') then
        element.noteList.Add(ParseAnnotation(child, path+'/note')){y.2}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeVisionPrescriptionLensSpecification(xml : TXmlBuilder; name : String; elem : TFhirVisionPrescriptionLensSpecification);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeVisionPrescriptionLensSpecificationChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeVisionPrescriptionLensSpecificationChildren(xml : TXmlBuilder; elem : TFhirVisionPrescriptionLensSpecification);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, elem);
  ComposeCodeableConcept(xml, 'product', elem.product);{x.2a}
  ComposeEnum(xml, 'eye', elem.EyeElement, CODES_TFhirVisionEyeCodesEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'sphere', elem.sphereElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'cylinder', elem.cylinderElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'axis', elem.axisElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.prismList.Count - 1 do
      ComposeVisionPrescriptionLensSpecificationPrism(xml, 'prism', elem.prismList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'add', elem.addElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'power', elem.powerElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'backCurve', elem.backCurveElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'diameter', elem.diameterElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'duration', elem.duration);{x.2a}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'color', elem.colorElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'brand', elem.brandElement);{x.2b}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to elem.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', elem.noteList[i]);
end;

function TFHIRXmlParser.ParseVisionPrescriptionLensSpecificationPrism(element : TMXmlElement; path : string) : TFhirVisionPrescriptionLensSpecificationPrism;
var
  child : TMXmlElement;
begin
  result := TFhirVisionPrescriptionLensSpecificationPrism.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseVisionPrescriptionLensSpecificationPrismChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseVisionPrescriptionLensSpecificationPrismChild(element : TFhirVisionPrescriptionLensSpecificationPrism; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'amount') then
        element.amountElement := ParseDecimal(child, path+'/amount') {b}
      else if (child.localName = 'base') then
        element.baseElement := ParseEnum(CODES_TFhirVisionBaseCodesEnum, SYSTEMS_TFhirVisionBaseCodesEnum, path+'/base', child){1a}
      else if Not ParseBackboneElementChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeVisionPrescriptionLensSpecificationPrism(xml : TXmlBuilder; name : String; elem : TFhirVisionPrescriptionLensSpecificationPrism);
begin
  if (elem = nil) then
    exit;
  composeElementAttributes(xml, elem);
  xml.open(name);
  composeVisionPrescriptionLensSpecificationPrismChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeVisionPrescriptionLensSpecificationPrismChildren(xml : TXmlBuilder; elem : TFhirVisionPrescriptionLensSpecificationPrism);
begin
  composeBackboneElementChildren(xml, elem);
  ComposeDecimal(xml, 'amount', elem.amountElement);{x.2b}
  ComposeEnum(xml, 'base', elem.BaseElement, CODES_TFhirVisionBaseCodesEnum);
end;

function TFHIRXmlParser.ParseVisionPrescription(element : TMXmlElement; path : string) : TFhirVisionPrescription;
var
  child : TMXmlElement;
begin
  result := TFhirVisionPrescription.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseVisionPrescriptionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseVisionPrescriptionChild(element : TFhirVisionPrescription; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        element.identifierList.Add(ParseIdentifier(child, path+'/identifier')){y.2}
      else if (child.localName = 'status') then
        element.statusElement := ParseEnum(CODES_TFhirFmStatusEnum, SYSTEMS_TFhirFmStatusEnum, path+'/status', child){1a}
      else if (child.localName = 'created') then
        element.createdElement := ParseDateTime(child, path+'/created') {b}
      else if (child.localName = 'patient') then
        element.patient := ParseReference{TFhirPatient}(child, path+'/patient') {b}
      else if (child.localName = 'encounter') then
        element.encounter := ParseReference{TFhirEncounter}(child, path+'/encounter') {b}
      else if (child.localName = 'dateWritten') then
        element.dateWrittenElement := ParseDateTime(child, path+'/dateWritten') {b}
      else if (child.localName = 'prescriber') then
        element.prescriber := ParseReference{TFhirPractitioner}(child, path+'/prescriber') {b}
      else if (child.localName = 'lensSpecification') then
        element.lensSpecificationList.Add(ParseVisionPrescriptionLensSpecification(child, path+'/lensSpecification')){y.2}
      else if Not ParseDomainResourceChild(element, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeVisionPrescription(xml : TXmlBuilder; name : String; elem : TFhirVisionPrescription);
begin
  if (elem = nil) then
    exit;
  composeDomainResourceAttributes(xml, elem);
  xml.open(name);
  composeVisionPrescriptionChildren(xml, elem);
  closeOutElement(xml, elem);
  xml.close(name);
end;

procedure TFHIRXmlComposer.ComposeVisionPrescriptionChildren(xml : TXmlBuilder; elem : TFhirVisionPrescription);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, elem);
  if (SummaryOption in [soFull, soData]) and doCompose('identifier') then
    for i := 0 to elem.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', elem.identifierList[i]);
  ComposeEnum(xml, 'status', elem.StatusElement, CODES_TFhirFmStatusEnum);
  ComposeDateTime(xml, 'created', elem.createdElement);{x.2b}
  ComposeReference{TFhirPatient}(xml, 'patient', elem.patient);{x.2a}
  if (SummaryOption in [soFull, soData]) and doCompose('encounter') then
    ComposeReference{TFhirEncounter}(xml, 'encounter', elem.encounter);{x.2a}
  ComposeDateTime(xml, 'dateWritten', elem.dateWrittenElement);{x.2b}
  ComposeReference{TFhirPractitioner}(xml, 'prescriber', elem.prescriber);{x.2a}
  for i := 0 to elem.lensSpecificationList.Count - 1 do
      ComposeVisionPrescriptionLensSpecification(xml, 'lensSpecification', elem.lensSpecificationList[i]);
end;

{$ENDIF FHIR_VISIONPRESCRIPTION}
function TFHIRXmlParser.ParseResource(element : TMXmlElement; path : String) : TFhirResource;
begin
  if (element = nil) Then
    Raise EXmlException.Create('error - element is nil')
{$IFDEF FHIR_PARAMETERS}
  else if element.localName = 'Parameters' Then
    result := ParseParameters(element, path+'/Parameters')
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_ACCOUNT}
  {$IFDEF FHIR_ACCOUNT}
   else if element.localName = 'Account' Then
    result := ParseAccount(element, path+'/Account') 
  {$ENDIF}
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  {$IFDEF FHIR_ACTIVITYDEFINITION}
   else if element.localName = 'ActivityDefinition' Then
    result := ParseActivityDefinition(element, path+'/ActivityDefinition') 
  {$ENDIF}
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  {$IFDEF FHIR_ADVERSEEVENT}
   else if element.localName = 'AdverseEvent' Then
    result := ParseAdverseEvent(element, path+'/AdverseEvent') 
  {$ENDIF}
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  {$IFDEF FHIR_ALLERGYINTOLERANCE}
   else if element.localName = 'AllergyIntolerance' Then
    result := ParseAllergyIntolerance(element, path+'/AllergyIntolerance') 
  {$ENDIF}
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  {$IFDEF FHIR_APPOINTMENT}
   else if element.localName = 'Appointment' Then
    result := ParseAppointment(element, path+'/Appointment') 
  {$ENDIF}
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  {$IFDEF FHIR_APPOINTMENTRESPONSE}
   else if element.localName = 'AppointmentResponse' Then
    result := ParseAppointmentResponse(element, path+'/AppointmentResponse') 
  {$ENDIF}
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  {$IFDEF FHIR_AUDITEVENT}
   else if element.localName = 'AuditEvent' Then
    result := ParseAuditEvent(element, path+'/AuditEvent') 
  {$ENDIF}
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  {$IFDEF FHIR_BASIC}
   else if element.localName = 'Basic' Then
    result := ParseBasic(element, path+'/Basic') 
  {$ENDIF}
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  {$IFDEF FHIR_BINARY}
   else if element.localName = 'Binary' Then
    result := ParseBinary(element, path+'/Binary') 
  {$ENDIF}
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
  {$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
   else if element.localName = 'BiologicallyDerivedProduct' Then
    result := ParseBiologicallyDerivedProduct(element, path+'/BiologicallyDerivedProduct') 
  {$ENDIF}
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
  {$IFDEF FHIR_BODYSTRUCTURE}
   else if element.localName = 'BodyStructure' Then
    result := ParseBodyStructure(element, path+'/BodyStructure') 
  {$ENDIF}
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
  {$IFDEF FHIR_BUNDLE}
   else if element.localName = 'Bundle' Then
    result := ParseBundle(element, path+'/Bundle') 
  {$ENDIF}
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  {$IFDEF FHIR_CAPABILITYSTATEMENT}
   else if element.localName = 'CapabilityStatement' Then
    result := ParseCapabilityStatement(element, path+'/CapabilityStatement') 
  {$ENDIF}
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  {$IFDEF FHIR_CAREPLAN}
   else if element.localName = 'CarePlan' Then
    result := ParseCarePlan(element, path+'/CarePlan') 
  {$ENDIF}
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  {$IFDEF FHIR_CARETEAM}
   else if element.localName = 'CareTeam' Then
    result := ParseCareTeam(element, path+'/CareTeam') 
  {$ENDIF}
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
  {$IFDEF FHIR_CATALOGENTRY}
   else if element.localName = 'CatalogEntry' Then
    result := ParseCatalogEntry(element, path+'/CatalogEntry') 
  {$ENDIF}
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
  {$IFDEF FHIR_CHARGEITEM}
   else if element.localName = 'ChargeItem' Then
    result := ParseChargeItem(element, path+'/ChargeItem') 
  {$ENDIF}
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
  {$IFDEF FHIR_CHARGEITEMDEFINITION}
   else if element.localName = 'ChargeItemDefinition' Then
    result := ParseChargeItemDefinition(element, path+'/ChargeItemDefinition') 
  {$ENDIF}
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CLAIM}
  {$IFDEF FHIR_CLAIM}
   else if element.localName = 'Claim' Then
    result := ParseClaim(element, path+'/Claim') 
  {$ENDIF}
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  {$IFDEF FHIR_CLAIMRESPONSE}
   else if element.localName = 'ClaimResponse' Then
    result := ParseClaimResponse(element, path+'/ClaimResponse') 
  {$ENDIF}
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  {$IFDEF FHIR_CLINICALIMPRESSION}
   else if element.localName = 'ClinicalImpression' Then
    result := ParseClinicalImpression(element, path+'/ClinicalImpression') 
  {$ENDIF}
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
  {$IFDEF FHIR_CODESYSTEM}
   else if element.localName = 'CodeSystem' Then
    result := ParseCodeSystem(element, path+'/CodeSystem') 
  {$ENDIF}
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  {$IFDEF FHIR_COMMUNICATION}
   else if element.localName = 'Communication' Then
    result := ParseCommunication(element, path+'/Communication') 
  {$ENDIF}
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  {$IFDEF FHIR_COMMUNICATIONREQUEST}
   else if element.localName = 'CommunicationRequest' Then
    result := ParseCommunicationRequest(element, path+'/CommunicationRequest') 
  {$ENDIF}
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  {$IFDEF FHIR_COMPARTMENTDEFINITION}
   else if element.localName = 'CompartmentDefinition' Then
    result := ParseCompartmentDefinition(element, path+'/CompartmentDefinition') 
  {$ENDIF}
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  {$IFDEF FHIR_COMPOSITION}
   else if element.localName = 'Composition' Then
    result := ParseComposition(element, path+'/Composition') 
  {$ENDIF}
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  {$IFDEF FHIR_CONCEPTMAP}
   else if element.localName = 'ConceptMap' Then
    result := ParseConceptMap(element, path+'/ConceptMap') 
  {$ENDIF}
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  {$IFDEF FHIR_CONDITION}
   else if element.localName = 'Condition' Then
    result := ParseCondition(element, path+'/Condition') 
  {$ENDIF}
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  {$IFDEF FHIR_CONSENT}
   else if element.localName = 'Consent' Then
    result := ParseConsent(element, path+'/Consent') 
  {$ENDIF}
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  {$IFDEF FHIR_CONTRACT}
   else if element.localName = 'Contract' Then
    result := ParseContract(element, path+'/Contract') 
  {$ENDIF}
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  {$IFDEF FHIR_COVERAGE}
   else if element.localName = 'Coverage' Then
    result := ParseCoverage(element, path+'/Coverage') 
  {$ENDIF}
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
  {$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
   else if element.localName = 'CoverageEligibilityRequest' Then
    result := ParseCoverageEligibilityRequest(element, path+'/CoverageEligibilityRequest') 
  {$ENDIF}
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
  {$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
   else if element.localName = 'CoverageEligibilityResponse' Then
    result := ParseCoverageEligibilityResponse(element, path+'/CoverageEligibilityResponse') 
  {$ENDIF}
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
  {$IFDEF FHIR_DETECTEDISSUE}
   else if element.localName = 'DetectedIssue' Then
    result := ParseDetectedIssue(element, path+'/DetectedIssue') 
  {$ENDIF}
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  {$IFDEF FHIR_DEVICE}
   else if element.localName = 'Device' Then
    result := ParseDevice(element, path+'/Device') 
  {$ENDIF}
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
  {$IFDEF FHIR_DEVICEDEFINITION}
   else if element.localName = 'DeviceDefinition' Then
    result := ParseDeviceDefinition(element, path+'/DeviceDefinition') 
  {$ENDIF}
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
  {$IFDEF FHIR_DEVICEMETRIC}
   else if element.localName = 'DeviceMetric' Then
    result := ParseDeviceMetric(element, path+'/DeviceMetric') 
  {$ENDIF}
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  {$IFDEF FHIR_DEVICEREQUEST}
   else if element.localName = 'DeviceRequest' Then
    result := ParseDeviceRequest(element, path+'/DeviceRequest') 
  {$ENDIF}
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  {$IFDEF FHIR_DEVICEUSESTATEMENT}
   else if element.localName = 'DeviceUseStatement' Then
    result := ParseDeviceUseStatement(element, path+'/DeviceUseStatement') 
  {$ENDIF}
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  {$IFDEF FHIR_DIAGNOSTICREPORT}
   else if element.localName = 'DiagnosticReport' Then
    result := ParseDiagnosticReport(element, path+'/DiagnosticReport') 
  {$ENDIF}
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  {$IFDEF FHIR_DOCUMENTMANIFEST}
   else if element.localName = 'DocumentManifest' Then
    result := ParseDocumentManifest(element, path+'/DocumentManifest') 
  {$ENDIF}
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  {$IFDEF FHIR_DOCUMENTREFERENCE}
   else if element.localName = 'DocumentReference' Then
    result := ParseDocumentReference(element, path+'/DocumentReference') 
  {$ENDIF}
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_EFFECTEVIDENCESYNTHESIS}
  {$IFDEF FHIR_EFFECTEVIDENCESYNTHESIS}
   else if element.localName = 'EffectEvidenceSynthesis' Then
    result := ParseEffectEvidenceSynthesis(element, path+'/EffectEvidenceSynthesis') 
  {$ENDIF}
{$ENDIF FHIR_EFFECTEVIDENCESYNTHESIS}
{$IFDEF FHIR_ENCOUNTER}
  {$IFDEF FHIR_ENCOUNTER}
   else if element.localName = 'Encounter' Then
    result := ParseEncounter(element, path+'/Encounter') 
  {$ENDIF}
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  {$IFDEF FHIR_ENDPOINT}
   else if element.localName = 'Endpoint' Then
    result := ParseEndpoint(element, path+'/Endpoint') 
  {$ENDIF}
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  {$IFDEF FHIR_ENROLLMENTREQUEST}
   else if element.localName = 'EnrollmentRequest' Then
    result := ParseEnrollmentRequest(element, path+'/EnrollmentRequest') 
  {$ENDIF}
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  {$IFDEF FHIR_ENROLLMENTRESPONSE}
   else if element.localName = 'EnrollmentResponse' Then
    result := ParseEnrollmentResponse(element, path+'/EnrollmentResponse') 
  {$ENDIF}
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
  {$IFDEF FHIR_EPISODEOFCARE}
   else if element.localName = 'EpisodeOfCare' Then
    result := ParseEpisodeOfCare(element, path+'/EpisodeOfCare') 
  {$ENDIF}
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
  {$IFDEF FHIR_EVENTDEFINITION}
   else if element.localName = 'EventDefinition' Then
    result := ParseEventDefinition(element, path+'/EventDefinition') 
  {$ENDIF}
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
  {$IFDEF FHIR_EVIDENCE}
   else if element.localName = 'Evidence' Then
    result := ParseEvidence(element, path+'/Evidence') 
  {$ENDIF}
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEVARIABLE}
  {$IFDEF FHIR_EVIDENCEVARIABLE}
   else if element.localName = 'EvidenceVariable' Then
    result := ParseEvidenceVariable(element, path+'/EvidenceVariable') 
  {$ENDIF}
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
  {$IFDEF FHIR_EXAMPLESCENARIO}
   else if element.localName = 'ExampleScenario' Then
    result := ParseExampleScenario(element, path+'/ExampleScenario') 
  {$ENDIF}
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  {$IFDEF FHIR_EXPLANATIONOFBENEFIT}
   else if element.localName = 'ExplanationOfBenefit' Then
    result := ParseExplanationOfBenefit(element, path+'/ExplanationOfBenefit') 
  {$ENDIF}
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  {$IFDEF FHIR_FAMILYMEMBERHISTORY}
   else if element.localName = 'FamilyMemberHistory' Then
    result := ParseFamilyMemberHistory(element, path+'/FamilyMemberHistory') 
  {$ENDIF}
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  {$IFDEF FHIR_FLAG}
   else if element.localName = 'Flag' Then
    result := ParseFlag(element, path+'/Flag') 
  {$ENDIF}
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  {$IFDEF FHIR_GOAL}
   else if element.localName = 'Goal' Then
    result := ParseGoal(element, path+'/Goal') 
  {$ENDIF}
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  {$IFDEF FHIR_GRAPHDEFINITION}
   else if element.localName = 'GraphDefinition' Then
    result := ParseGraphDefinition(element, path+'/GraphDefinition') 
  {$ENDIF}
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  {$IFDEF FHIR_GROUP}
   else if element.localName = 'Group' Then
    result := ParseGroup(element, path+'/Group') 
  {$ENDIF}
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  {$IFDEF FHIR_GUIDANCERESPONSE}
   else if element.localName = 'GuidanceResponse' Then
    result := ParseGuidanceResponse(element, path+'/GuidanceResponse') 
  {$ENDIF}
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  {$IFDEF FHIR_HEALTHCARESERVICE}
   else if element.localName = 'HealthcareService' Then
    result := ParseHealthcareService(element, path+'/HealthcareService') 
  {$ENDIF}
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
  {$IFDEF FHIR_IMAGINGSTUDY}
   else if element.localName = 'ImagingStudy' Then
    result := ParseImagingStudy(element, path+'/ImagingStudy') 
  {$ENDIF}
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  {$IFDEF FHIR_IMMUNIZATION}
   else if element.localName = 'Immunization' Then
    result := ParseImmunization(element, path+'/Immunization') 
  {$ENDIF}
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
  {$IFDEF FHIR_IMMUNIZATIONEVALUATION}
   else if element.localName = 'ImmunizationEvaluation' Then
    result := ParseImmunizationEvaluation(element, path+'/ImmunizationEvaluation') 
  {$ENDIF}
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  {$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
   else if element.localName = 'ImmunizationRecommendation' Then
    result := ParseImmunizationRecommendation(element, path+'/ImmunizationRecommendation') 
  {$ENDIF}
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  {$IFDEF FHIR_IMPLEMENTATIONGUIDE}
   else if element.localName = 'ImplementationGuide' Then
    result := ParseImplementationGuide(element, path+'/ImplementationGuide') 
  {$ENDIF}
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INSURANCEPLAN}
  {$IFDEF FHIR_INSURANCEPLAN}
   else if element.localName = 'InsurancePlan' Then
    result := ParseInsurancePlan(element, path+'/InsurancePlan') 
  {$ENDIF}
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
  {$IFDEF FHIR_INVOICE}
   else if element.localName = 'Invoice' Then
    result := ParseInvoice(element, path+'/Invoice') 
  {$ENDIF}
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
  {$IFDEF FHIR_LIBRARY}
   else if element.localName = 'Library' Then
    result := ParseLibrary(element, path+'/Library') 
  {$ENDIF}
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  {$IFDEF FHIR_LINKAGE}
   else if element.localName = 'Linkage' Then
    result := ParseLinkage(element, path+'/Linkage') 
  {$ENDIF}
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  {$IFDEF FHIR_LIST}
   else if element.localName = 'List' Then
    result := ParseList(element, path+'/List') 
  {$ENDIF}
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  {$IFDEF FHIR_LOCATION}
   else if element.localName = 'Location' Then
    result := ParseLocation(element, path+'/Location') 
  {$ENDIF}
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
  {$IFDEF FHIR_MEASURE}
   else if element.localName = 'Measure' Then
    result := ParseMeasure(element, path+'/Measure') 
  {$ENDIF}
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  {$IFDEF FHIR_MEASUREREPORT}
   else if element.localName = 'MeasureReport' Then
    result := ParseMeasureReport(element, path+'/MeasureReport') 
  {$ENDIF}
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  {$IFDEF FHIR_MEDIA}
   else if element.localName = 'Media' Then
    result := ParseMedia(element, path+'/Media') 
  {$ENDIF}
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  {$IFDEF FHIR_MEDICATION}
   else if element.localName = 'Medication' Then
    result := ParseMedication(element, path+'/Medication') 
  {$ENDIF}
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  {$IFDEF FHIR_MEDICATIONADMINISTRATION}
   else if element.localName = 'MedicationAdministration' Then
    result := ParseMedicationAdministration(element, path+'/MedicationAdministration') 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  {$IFDEF FHIR_MEDICATIONDISPENSE}
   else if element.localName = 'MedicationDispense' Then
    result := ParseMedicationDispense(element, path+'/MedicationDispense') 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
  {$IFDEF FHIR_MEDICATIONKNOWLEDGE}
   else if element.localName = 'MedicationKnowledge' Then
    result := ParseMedicationKnowledge(element, path+'/MedicationKnowledge') 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  {$IFDEF FHIR_MEDICATIONREQUEST}
   else if element.localName = 'MedicationRequest' Then
    result := ParseMedicationRequest(element, path+'/MedicationRequest') 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  {$IFDEF FHIR_MEDICATIONSTATEMENT}
   else if element.localName = 'MedicationStatement' Then
    result := ParseMedicationStatement(element, path+'/MedicationStatement') 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCT}
  {$IFDEF FHIR_MEDICINALPRODUCT}
   else if element.localName = 'MedicinalProduct' Then
    result := ParseMedicinalProduct(element, path+'/MedicinalProduct') 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCT}
{$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
  {$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
   else if element.localName = 'MedicinalProductAuthorization' Then
    result := ParseMedicinalProductAuthorization(element, path+'/MedicinalProductAuthorization') 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTAUTHORIZATION}
{$IFDEF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
  {$IFDEF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
   else if element.localName = 'MedicinalProductContraindication' Then
    result := ParseMedicinalProductContraindication(element, path+'/MedicinalProductContraindication') 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
{$IFDEF FHIR_MEDICINALPRODUCTINDICATION}
  {$IFDEF FHIR_MEDICINALPRODUCTINDICATION}
   else if element.localName = 'MedicinalProductIndication' Then
    result := ParseMedicinalProductIndication(element, path+'/MedicinalProductIndication') 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTINDICATION}
{$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
  {$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
   else if element.localName = 'MedicinalProductIngredient' Then
    result := ParseMedicinalProductIngredient(element, path+'/MedicinalProductIngredient') 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTINGREDIENT}
{$IFDEF FHIR_MEDICINALPRODUCTINTERACTION}
  {$IFDEF FHIR_MEDICINALPRODUCTINTERACTION}
   else if element.localName = 'MedicinalProductInteraction' Then
    result := ParseMedicinalProductInteraction(element, path+'/MedicinalProductInteraction') 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTINTERACTION}
{$IFDEF FHIR_MEDICINALPRODUCTMANUFACTURED}
  {$IFDEF FHIR_MEDICINALPRODUCTMANUFACTURED}
   else if element.localName = 'MedicinalProductManufactured' Then
    result := ParseMedicinalProductManufactured(element, path+'/MedicinalProductManufactured') 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTMANUFACTURED}
{$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
  {$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
   else if element.localName = 'MedicinalProductPackaged' Then
    result := ParseMedicinalProductPackaged(element, path+'/MedicinalProductPackaged') 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTPACKAGED}
{$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
  {$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
   else if element.localName = 'MedicinalProductPharmaceutical' Then
    result := ParseMedicinalProductPharmaceutical(element, path+'/MedicinalProductPharmaceutical') 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
{$IFDEF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
  {$IFDEF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
   else if element.localName = 'MedicinalProductUndesirableEffect' Then
    result := ParseMedicinalProductUndesirableEffect(element, path+'/MedicinalProductUndesirableEffect') 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
{$IFDEF FHIR_MESSAGEDEFINITION}
  {$IFDEF FHIR_MESSAGEDEFINITION}
   else if element.localName = 'MessageDefinition' Then
    result := ParseMessageDefinition(element, path+'/MessageDefinition') 
  {$ENDIF}
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  {$IFDEF FHIR_MESSAGEHEADER}
   else if element.localName = 'MessageHeader' Then
    result := ParseMessageHeader(element, path+'/MessageHeader') 
  {$ENDIF}
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
  {$IFDEF FHIR_MOLECULARSEQUENCE}
   else if element.localName = 'MolecularSequence' Then
    result := ParseMolecularSequence(element, path+'/MolecularSequence') 
  {$ENDIF}
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
  {$IFDEF FHIR_NAMINGSYSTEM}
   else if element.localName = 'NamingSystem' Then
    result := ParseNamingSystem(element, path+'/NamingSystem') 
  {$ENDIF}
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  {$IFDEF FHIR_NUTRITIONORDER}
   else if element.localName = 'NutritionOrder' Then
    result := ParseNutritionOrder(element, path+'/NutritionOrder') 
  {$ENDIF}
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
  {$IFDEF FHIR_OBSERVATION}
   else if element.localName = 'Observation' Then
    result := ParseObservation(element, path+'/Observation') 
  {$ENDIF}
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
  {$IFDEF FHIR_OBSERVATIONDEFINITION}
   else if element.localName = 'ObservationDefinition' Then
    result := ParseObservationDefinition(element, path+'/ObservationDefinition') 
  {$ENDIF}
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
  {$IFDEF FHIR_OPERATIONDEFINITION}
   else if element.localName = 'OperationDefinition' Then
    result := ParseOperationDefinition(element, path+'/OperationDefinition') 
  {$ENDIF}
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  {$IFDEF FHIR_OPERATIONOUTCOME}
   else if element.localName = 'OperationOutcome' Then
    result := ParseOperationOutcome(element, path+'/OperationOutcome') 
  {$ENDIF}
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  {$IFDEF FHIR_ORGANIZATION}
   else if element.localName = 'Organization' Then
    result := ParseOrganization(element, path+'/Organization') 
  {$ENDIF}
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
  {$IFDEF FHIR_ORGANIZATIONAFFILIATION}
   else if element.localName = 'OrganizationAffiliation' Then
    result := ParseOrganizationAffiliation(element, path+'/OrganizationAffiliation') 
  {$ENDIF}
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PATIENT}
  {$IFDEF FHIR_PATIENT}
   else if element.localName = 'Patient' Then
    result := ParsePatient(element, path+'/Patient') 
  {$ENDIF}
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  {$IFDEF FHIR_PAYMENTNOTICE}
   else if element.localName = 'PaymentNotice' Then
    result := ParsePaymentNotice(element, path+'/PaymentNotice') 
  {$ENDIF}
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  {$IFDEF FHIR_PAYMENTRECONCILIATION}
   else if element.localName = 'PaymentReconciliation' Then
    result := ParsePaymentReconciliation(element, path+'/PaymentReconciliation') 
  {$ENDIF}
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  {$IFDEF FHIR_PERSON}
   else if element.localName = 'Person' Then
    result := ParsePerson(element, path+'/Person') 
  {$ENDIF}
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  {$IFDEF FHIR_PLANDEFINITION}
   else if element.localName = 'PlanDefinition' Then
    result := ParsePlanDefinition(element, path+'/PlanDefinition') 
  {$ENDIF}
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  {$IFDEF FHIR_PRACTITIONER}
   else if element.localName = 'Practitioner' Then
    result := ParsePractitioner(element, path+'/Practitioner') 
  {$ENDIF}
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  {$IFDEF FHIR_PRACTITIONERROLE}
   else if element.localName = 'PractitionerRole' Then
    result := ParsePractitionerRole(element, path+'/PractitionerRole') 
  {$ENDIF}
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  {$IFDEF FHIR_PROCEDURE}
   else if element.localName = 'Procedure' Then
    result := ParseProcedure(element, path+'/Procedure') 
  {$ENDIF}
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
  {$IFDEF FHIR_PROVENANCE}
   else if element.localName = 'Provenance' Then
    result := ParseProvenance(element, path+'/Provenance') 
  {$ENDIF}
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  {$IFDEF FHIR_QUESTIONNAIRE}
   else if element.localName = 'Questionnaire' Then
    result := ParseQuestionnaire(element, path+'/Questionnaire') 
  {$ENDIF}
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  {$IFDEF FHIR_QUESTIONNAIRERESPONSE}
   else if element.localName = 'QuestionnaireResponse' Then
    result := ParseQuestionnaireResponse(element, path+'/QuestionnaireResponse') 
  {$ENDIF}
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_RELATEDPERSON}
  {$IFDEF FHIR_RELATEDPERSON}
   else if element.localName = 'RelatedPerson' Then
    result := ParseRelatedPerson(element, path+'/RelatedPerson') 
  {$ENDIF}
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  {$IFDEF FHIR_REQUESTGROUP}
   else if element.localName = 'RequestGroup' Then
    result := ParseRequestGroup(element, path+'/RequestGroup') 
  {$ENDIF}
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHDEFINITION}
  {$IFDEF FHIR_RESEARCHDEFINITION}
   else if element.localName = 'ResearchDefinition' Then
    result := ParseResearchDefinition(element, path+'/ResearchDefinition') 
  {$ENDIF}
{$ENDIF FHIR_RESEARCHDEFINITION}
{$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
  {$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
   else if element.localName = 'ResearchElementDefinition' Then
    result := ParseResearchElementDefinition(element, path+'/ResearchElementDefinition') 
  {$ENDIF}
{$ENDIF FHIR_RESEARCHELEMENTDEFINITION}
{$IFDEF FHIR_RESEARCHSTUDY}
  {$IFDEF FHIR_RESEARCHSTUDY}
   else if element.localName = 'ResearchStudy' Then
    result := ParseResearchStudy(element, path+'/ResearchStudy') 
  {$ENDIF}
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  {$IFDEF FHIR_RESEARCHSUBJECT}
   else if element.localName = 'ResearchSubject' Then
    result := ParseResearchSubject(element, path+'/ResearchSubject') 
  {$ENDIF}
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  {$IFDEF FHIR_RISKASSESSMENT}
   else if element.localName = 'RiskAssessment' Then
    result := ParseRiskAssessment(element, path+'/RiskAssessment') 
  {$ENDIF}
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_RISKEVIDENCESYNTHESIS}
  {$IFDEF FHIR_RISKEVIDENCESYNTHESIS}
   else if element.localName = 'RiskEvidenceSynthesis' Then
    result := ParseRiskEvidenceSynthesis(element, path+'/RiskEvidenceSynthesis') 
  {$ENDIF}
{$ENDIF FHIR_RISKEVIDENCESYNTHESIS}
{$IFDEF FHIR_SCHEDULE}
  {$IFDEF FHIR_SCHEDULE}
   else if element.localName = 'Schedule' Then
    result := ParseSchedule(element, path+'/Schedule') 
  {$ENDIF}
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  {$IFDEF FHIR_SEARCHPARAMETER}
   else if element.localName = 'SearchParameter' Then
    result := ParseSearchParameter(element, path+'/SearchParameter') 
  {$ENDIF}
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
  {$IFDEF FHIR_SERVICEREQUEST}
   else if element.localName = 'ServiceRequest' Then
    result := ParseServiceRequest(element, path+'/ServiceRequest') 
  {$ENDIF}
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
  {$IFDEF FHIR_SLOT}
   else if element.localName = 'Slot' Then
    result := ParseSlot(element, path+'/Slot') 
  {$ENDIF}
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  {$IFDEF FHIR_SPECIMEN}
   else if element.localName = 'Specimen' Then
    result := ParseSpecimen(element, path+'/Specimen') 
  {$ENDIF}
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
  {$IFDEF FHIR_SPECIMENDEFINITION}
   else if element.localName = 'SpecimenDefinition' Then
    result := ParseSpecimenDefinition(element, path+'/SpecimenDefinition') 
  {$ENDIF}
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  {$IFDEF FHIR_STRUCTUREDEFINITION}
   else if element.localName = 'StructureDefinition' Then
    result := ParseStructureDefinition(element, path+'/StructureDefinition') 
  {$ENDIF}
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  {$IFDEF FHIR_STRUCTUREMAP}
   else if element.localName = 'StructureMap' Then
    result := ParseStructureMap(element, path+'/StructureMap') 
  {$ENDIF}
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  {$IFDEF FHIR_SUBSCRIPTION}
   else if element.localName = 'Subscription' Then
    result := ParseSubscription(element, path+'/Subscription') 
  {$ENDIF}
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
  {$IFDEF FHIR_SUBSTANCE}
   else if element.localName = 'Substance' Then
    result := ParseSubstance(element, path+'/Substance') 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCENUCLEICACID}
  {$IFDEF FHIR_SUBSTANCENUCLEICACID}
   else if element.localName = 'SubstanceNucleicAcid' Then
    result := ParseSubstanceNucleicAcid(element, path+'/SubstanceNucleicAcid') 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCENUCLEICACID}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
  {$IFDEF FHIR_SUBSTANCEPOLYMER}
   else if element.localName = 'SubstancePolymer' Then
    result := ParseSubstancePolymer(element, path+'/SubstancePolymer') 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEPROTEIN}
  {$IFDEF FHIR_SUBSTANCEPROTEIN}
   else if element.localName = 'SubstanceProtein' Then
    result := ParseSubstanceProtein(element, path+'/SubstanceProtein') 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCEPROTEIN}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
  {$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
   else if element.localName = 'SubstanceReferenceInformation' Then
    result := ParseSubstanceReferenceInformation(element, path+'/SubstanceReferenceInformation') 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
  {$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
   else if element.localName = 'SubstanceSourceMaterial' Then
    result := ParseSubstanceSourceMaterial(element, path+'/SubstanceSourceMaterial') 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCESOURCEMATERIAL}
{$IFDEF FHIR_SUBSTANCESPECIFICATION}
  {$IFDEF FHIR_SUBSTANCESPECIFICATION}
   else if element.localName = 'SubstanceSpecification' Then
    result := ParseSubstanceSpecification(element, path+'/SubstanceSpecification') 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCESPECIFICATION}
{$IFDEF FHIR_SUPPLYDELIVERY}
  {$IFDEF FHIR_SUPPLYDELIVERY}
   else if element.localName = 'SupplyDelivery' Then
    result := ParseSupplyDelivery(element, path+'/SupplyDelivery') 
  {$ENDIF}
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  {$IFDEF FHIR_SUPPLYREQUEST}
   else if element.localName = 'SupplyRequest' Then
    result := ParseSupplyRequest(element, path+'/SupplyRequest') 
  {$ENDIF}
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  {$IFDEF FHIR_TASK}
   else if element.localName = 'Task' Then
    result := ParseTask(element, path+'/Task') 
  {$ENDIF}
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
  {$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
   else if element.localName = 'TerminologyCapabilities' Then
    result := ParseTerminologyCapabilities(element, path+'/TerminologyCapabilities') 
  {$ENDIF}
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
  {$IFDEF FHIR_TESTREPORT}
   else if element.localName = 'TestReport' Then
    result := ParseTestReport(element, path+'/TestReport') 
  {$ENDIF}
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  {$IFDEF FHIR_TESTSCRIPT}
   else if element.localName = 'TestScript' Then
    result := ParseTestScript(element, path+'/TestScript') 
  {$ENDIF}
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
  {$IFDEF FHIR_VALUESET}
   else if element.localName = 'ValueSet' Then
    result := ParseValueSet(element, path+'/ValueSet') 
  {$ENDIF}
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
  {$IFDEF FHIR_VERIFICATIONRESULT}
   else if element.localName = 'VerificationResult' Then
    result := ParseVerificationResult(element, path+'/VerificationResult') 
  {$ENDIF}
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  {$IFDEF FHIR_VISIONPRESCRIPTION}
   else if element.localName = 'VisionPrescription' Then
    result := ParseVisionPrescription(element, path+'/VisionPrescription') 
  {$ENDIF}
{$ENDIF FHIR_VISIONPRESCRIPTION}
  else
    raise EXmlException.create('Error: the element '+element.localName+' is not recognised as a valid resource name');
end;

procedure TFHIRXmlComposer.ComposeResource(xml : TXmlBuilder; resource: TFhirResource);
begin
  if (resource = nil) Then
    Raise EXmlException.Create('error - resource is nil');
  Case resource.ResourceType of
{$IFDEF FHIR_PARAMETERS}
    frtParameters: ComposeParameters(xml, 'Parameters', TFhirParameters(resource));
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_ACCOUNT}
  {$IFDEF FHIR_ACCOUNT}
     frtAccount: ComposeAccount(xml, 'Account', TFhirAccount(resource)); 
  {$ENDIF}
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  {$IFDEF FHIR_ACTIVITYDEFINITION}
     frtActivityDefinition: ComposeActivityDefinition(xml, 'ActivityDefinition', TFhirActivityDefinition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  {$IFDEF FHIR_ADVERSEEVENT}
     frtAdverseEvent: ComposeAdverseEvent(xml, 'AdverseEvent', TFhirAdverseEvent(resource)); 
  {$ENDIF}
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  {$IFDEF FHIR_ALLERGYINTOLERANCE}
     frtAllergyIntolerance: ComposeAllergyIntolerance(xml, 'AllergyIntolerance', TFhirAllergyIntolerance(resource)); 
  {$ENDIF}
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  {$IFDEF FHIR_APPOINTMENT}
     frtAppointment: ComposeAppointment(xml, 'Appointment', TFhirAppointment(resource)); 
  {$ENDIF}
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  {$IFDEF FHIR_APPOINTMENTRESPONSE}
     frtAppointmentResponse: ComposeAppointmentResponse(xml, 'AppointmentResponse', TFhirAppointmentResponse(resource)); 
  {$ENDIF}
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  {$IFDEF FHIR_AUDITEVENT}
     frtAuditEvent: ComposeAuditEvent(xml, 'AuditEvent', TFhirAuditEvent(resource)); 
  {$ENDIF}
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  {$IFDEF FHIR_BASIC}
     frtBasic: ComposeBasic(xml, 'Basic', TFhirBasic(resource)); 
  {$ENDIF}
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  {$IFDEF FHIR_BINARY}
     frtBinary: ComposeBinary(xml, 'Binary', TFhirBinary(resource)); 
  {$ENDIF}
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
  {$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
     frtBiologicallyDerivedProduct: ComposeBiologicallyDerivedProduct(xml, 'BiologicallyDerivedProduct', TFhirBiologicallyDerivedProduct(resource)); 
  {$ENDIF}
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
  {$IFDEF FHIR_BODYSTRUCTURE}
     frtBodyStructure: ComposeBodyStructure(xml, 'BodyStructure', TFhirBodyStructure(resource)); 
  {$ENDIF}
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
  {$IFDEF FHIR_BUNDLE}
     frtBundle: ComposeBundle(xml, 'Bundle', TFhirBundle(resource)); 
  {$ENDIF}
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  {$IFDEF FHIR_CAPABILITYSTATEMENT}
     frtCapabilityStatement: ComposeCapabilityStatement(xml, 'CapabilityStatement', TFhirCapabilityStatement(resource)); 
  {$ENDIF}
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  {$IFDEF FHIR_CAREPLAN}
     frtCarePlan: ComposeCarePlan(xml, 'CarePlan', TFhirCarePlan(resource)); 
  {$ENDIF}
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  {$IFDEF FHIR_CARETEAM}
     frtCareTeam: ComposeCareTeam(xml, 'CareTeam', TFhirCareTeam(resource)); 
  {$ENDIF}
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
  {$IFDEF FHIR_CATALOGENTRY}
     frtCatalogEntry: ComposeCatalogEntry(xml, 'CatalogEntry', TFhirCatalogEntry(resource)); 
  {$ENDIF}
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
  {$IFDEF FHIR_CHARGEITEM}
     frtChargeItem: ComposeChargeItem(xml, 'ChargeItem', TFhirChargeItem(resource)); 
  {$ENDIF}
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
  {$IFDEF FHIR_CHARGEITEMDEFINITION}
     frtChargeItemDefinition: ComposeChargeItemDefinition(xml, 'ChargeItemDefinition', TFhirChargeItemDefinition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CLAIM}
  {$IFDEF FHIR_CLAIM}
     frtClaim: ComposeClaim(xml, 'Claim', TFhirClaim(resource)); 
  {$ENDIF}
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  {$IFDEF FHIR_CLAIMRESPONSE}
     frtClaimResponse: ComposeClaimResponse(xml, 'ClaimResponse', TFhirClaimResponse(resource)); 
  {$ENDIF}
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  {$IFDEF FHIR_CLINICALIMPRESSION}
     frtClinicalImpression: ComposeClinicalImpression(xml, 'ClinicalImpression', TFhirClinicalImpression(resource)); 
  {$ENDIF}
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
  {$IFDEF FHIR_CODESYSTEM}
     frtCodeSystem: ComposeCodeSystem(xml, 'CodeSystem', TFhirCodeSystem(resource)); 
  {$ENDIF}
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  {$IFDEF FHIR_COMMUNICATION}
     frtCommunication: ComposeCommunication(xml, 'Communication', TFhirCommunication(resource)); 
  {$ENDIF}
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  {$IFDEF FHIR_COMMUNICATIONREQUEST}
     frtCommunicationRequest: ComposeCommunicationRequest(xml, 'CommunicationRequest', TFhirCommunicationRequest(resource)); 
  {$ENDIF}
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  {$IFDEF FHIR_COMPARTMENTDEFINITION}
     frtCompartmentDefinition: ComposeCompartmentDefinition(xml, 'CompartmentDefinition', TFhirCompartmentDefinition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  {$IFDEF FHIR_COMPOSITION}
     frtComposition: ComposeComposition(xml, 'Composition', TFhirComposition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  {$IFDEF FHIR_CONCEPTMAP}
     frtConceptMap: ComposeConceptMap(xml, 'ConceptMap', TFhirConceptMap(resource)); 
  {$ENDIF}
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  {$IFDEF FHIR_CONDITION}
     frtCondition: ComposeCondition(xml, 'Condition', TFhirCondition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  {$IFDEF FHIR_CONSENT}
     frtConsent: ComposeConsent(xml, 'Consent', TFhirConsent(resource)); 
  {$ENDIF}
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  {$IFDEF FHIR_CONTRACT}
     frtContract: ComposeContract(xml, 'Contract', TFhirContract(resource)); 
  {$ENDIF}
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  {$IFDEF FHIR_COVERAGE}
     frtCoverage: ComposeCoverage(xml, 'Coverage', TFhirCoverage(resource)); 
  {$ENDIF}
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
  {$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
     frtCoverageEligibilityRequest: ComposeCoverageEligibilityRequest(xml, 'CoverageEligibilityRequest', TFhirCoverageEligibilityRequest(resource)); 
  {$ENDIF}
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
  {$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
     frtCoverageEligibilityResponse: ComposeCoverageEligibilityResponse(xml, 'CoverageEligibilityResponse', TFhirCoverageEligibilityResponse(resource)); 
  {$ENDIF}
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
  {$IFDEF FHIR_DETECTEDISSUE}
     frtDetectedIssue: ComposeDetectedIssue(xml, 'DetectedIssue', TFhirDetectedIssue(resource)); 
  {$ENDIF}
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  {$IFDEF FHIR_DEVICE}
     frtDevice: ComposeDevice(xml, 'Device', TFhirDevice(resource)); 
  {$ENDIF}
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
  {$IFDEF FHIR_DEVICEDEFINITION}
     frtDeviceDefinition: ComposeDeviceDefinition(xml, 'DeviceDefinition', TFhirDeviceDefinition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
  {$IFDEF FHIR_DEVICEMETRIC}
     frtDeviceMetric: ComposeDeviceMetric(xml, 'DeviceMetric', TFhirDeviceMetric(resource)); 
  {$ENDIF}
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  {$IFDEF FHIR_DEVICEREQUEST}
     frtDeviceRequest: ComposeDeviceRequest(xml, 'DeviceRequest', TFhirDeviceRequest(resource)); 
  {$ENDIF}
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  {$IFDEF FHIR_DEVICEUSESTATEMENT}
     frtDeviceUseStatement: ComposeDeviceUseStatement(xml, 'DeviceUseStatement', TFhirDeviceUseStatement(resource)); 
  {$ENDIF}
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  {$IFDEF FHIR_DIAGNOSTICREPORT}
     frtDiagnosticReport: ComposeDiagnosticReport(xml, 'DiagnosticReport', TFhirDiagnosticReport(resource)); 
  {$ENDIF}
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  {$IFDEF FHIR_DOCUMENTMANIFEST}
     frtDocumentManifest: ComposeDocumentManifest(xml, 'DocumentManifest', TFhirDocumentManifest(resource)); 
  {$ENDIF}
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  {$IFDEF FHIR_DOCUMENTREFERENCE}
     frtDocumentReference: ComposeDocumentReference(xml, 'DocumentReference', TFhirDocumentReference(resource)); 
  {$ENDIF}
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_EFFECTEVIDENCESYNTHESIS}
  {$IFDEF FHIR_EFFECTEVIDENCESYNTHESIS}
     frtEffectEvidenceSynthesis: ComposeEffectEvidenceSynthesis(xml, 'EffectEvidenceSynthesis', TFhirEffectEvidenceSynthesis(resource)); 
  {$ENDIF}
{$ENDIF FHIR_EFFECTEVIDENCESYNTHESIS}
{$IFDEF FHIR_ENCOUNTER}
  {$IFDEF FHIR_ENCOUNTER}
     frtEncounter: ComposeEncounter(xml, 'Encounter', TFhirEncounter(resource)); 
  {$ENDIF}
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  {$IFDEF FHIR_ENDPOINT}
     frtEndpoint: ComposeEndpoint(xml, 'Endpoint', TFhirEndpoint(resource)); 
  {$ENDIF}
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  {$IFDEF FHIR_ENROLLMENTREQUEST}
     frtEnrollmentRequest: ComposeEnrollmentRequest(xml, 'EnrollmentRequest', TFhirEnrollmentRequest(resource)); 
  {$ENDIF}
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  {$IFDEF FHIR_ENROLLMENTRESPONSE}
     frtEnrollmentResponse: ComposeEnrollmentResponse(xml, 'EnrollmentResponse', TFhirEnrollmentResponse(resource)); 
  {$ENDIF}
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
  {$IFDEF FHIR_EPISODEOFCARE}
     frtEpisodeOfCare: ComposeEpisodeOfCare(xml, 'EpisodeOfCare', TFhirEpisodeOfCare(resource)); 
  {$ENDIF}
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
  {$IFDEF FHIR_EVENTDEFINITION}
     frtEventDefinition: ComposeEventDefinition(xml, 'EventDefinition', TFhirEventDefinition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
  {$IFDEF FHIR_EVIDENCE}
     frtEvidence: ComposeEvidence(xml, 'Evidence', TFhirEvidence(resource)); 
  {$ENDIF}
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEVARIABLE}
  {$IFDEF FHIR_EVIDENCEVARIABLE}
     frtEvidenceVariable: ComposeEvidenceVariable(xml, 'EvidenceVariable', TFhirEvidenceVariable(resource)); 
  {$ENDIF}
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
  {$IFDEF FHIR_EXAMPLESCENARIO}
     frtExampleScenario: ComposeExampleScenario(xml, 'ExampleScenario', TFhirExampleScenario(resource)); 
  {$ENDIF}
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  {$IFDEF FHIR_EXPLANATIONOFBENEFIT}
     frtExplanationOfBenefit: ComposeExplanationOfBenefit(xml, 'ExplanationOfBenefit', TFhirExplanationOfBenefit(resource)); 
  {$ENDIF}
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  {$IFDEF FHIR_FAMILYMEMBERHISTORY}
     frtFamilyMemberHistory: ComposeFamilyMemberHistory(xml, 'FamilyMemberHistory', TFhirFamilyMemberHistory(resource)); 
  {$ENDIF}
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  {$IFDEF FHIR_FLAG}
     frtFlag: ComposeFlag(xml, 'Flag', TFhirFlag(resource)); 
  {$ENDIF}
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  {$IFDEF FHIR_GOAL}
     frtGoal: ComposeGoal(xml, 'Goal', TFhirGoal(resource)); 
  {$ENDIF}
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  {$IFDEF FHIR_GRAPHDEFINITION}
     frtGraphDefinition: ComposeGraphDefinition(xml, 'GraphDefinition', TFhirGraphDefinition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  {$IFDEF FHIR_GROUP}
     frtGroup: ComposeGroup(xml, 'Group', TFhirGroup(resource)); 
  {$ENDIF}
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  {$IFDEF FHIR_GUIDANCERESPONSE}
     frtGuidanceResponse: ComposeGuidanceResponse(xml, 'GuidanceResponse', TFhirGuidanceResponse(resource)); 
  {$ENDIF}
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  {$IFDEF FHIR_HEALTHCARESERVICE}
     frtHealthcareService: ComposeHealthcareService(xml, 'HealthcareService', TFhirHealthcareService(resource)); 
  {$ENDIF}
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
  {$IFDEF FHIR_IMAGINGSTUDY}
     frtImagingStudy: ComposeImagingStudy(xml, 'ImagingStudy', TFhirImagingStudy(resource)); 
  {$ENDIF}
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  {$IFDEF FHIR_IMMUNIZATION}
     frtImmunization: ComposeImmunization(xml, 'Immunization', TFhirImmunization(resource)); 
  {$ENDIF}
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
  {$IFDEF FHIR_IMMUNIZATIONEVALUATION}
     frtImmunizationEvaluation: ComposeImmunizationEvaluation(xml, 'ImmunizationEvaluation', TFhirImmunizationEvaluation(resource)); 
  {$ENDIF}
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  {$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
     frtImmunizationRecommendation: ComposeImmunizationRecommendation(xml, 'ImmunizationRecommendation', TFhirImmunizationRecommendation(resource)); 
  {$ENDIF}
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  {$IFDEF FHIR_IMPLEMENTATIONGUIDE}
     frtImplementationGuide: ComposeImplementationGuide(xml, 'ImplementationGuide', TFhirImplementationGuide(resource)); 
  {$ENDIF}
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INSURANCEPLAN}
  {$IFDEF FHIR_INSURANCEPLAN}
     frtInsurancePlan: ComposeInsurancePlan(xml, 'InsurancePlan', TFhirInsurancePlan(resource)); 
  {$ENDIF}
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
  {$IFDEF FHIR_INVOICE}
     frtInvoice: ComposeInvoice(xml, 'Invoice', TFhirInvoice(resource)); 
  {$ENDIF}
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
  {$IFDEF FHIR_LIBRARY}
     frtLibrary: ComposeLibrary(xml, 'Library', TFhirLibrary(resource)); 
  {$ENDIF}
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  {$IFDEF FHIR_LINKAGE}
     frtLinkage: ComposeLinkage(xml, 'Linkage', TFhirLinkage(resource)); 
  {$ENDIF}
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  {$IFDEF FHIR_LIST}
     frtList: ComposeList(xml, 'List', TFhirList(resource)); 
  {$ENDIF}
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  {$IFDEF FHIR_LOCATION}
     frtLocation: ComposeLocation(xml, 'Location', TFhirLocation(resource)); 
  {$ENDIF}
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
  {$IFDEF FHIR_MEASURE}
     frtMeasure: ComposeMeasure(xml, 'Measure', TFhirMeasure(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  {$IFDEF FHIR_MEASUREREPORT}
     frtMeasureReport: ComposeMeasureReport(xml, 'MeasureReport', TFhirMeasureReport(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  {$IFDEF FHIR_MEDIA}
     frtMedia: ComposeMedia(xml, 'Media', TFhirMedia(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  {$IFDEF FHIR_MEDICATION}
     frtMedication: ComposeMedication(xml, 'Medication', TFhirMedication(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  {$IFDEF FHIR_MEDICATIONADMINISTRATION}
     frtMedicationAdministration: ComposeMedicationAdministration(xml, 'MedicationAdministration', TFhirMedicationAdministration(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  {$IFDEF FHIR_MEDICATIONDISPENSE}
     frtMedicationDispense: ComposeMedicationDispense(xml, 'MedicationDispense', TFhirMedicationDispense(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
  {$IFDEF FHIR_MEDICATIONKNOWLEDGE}
     frtMedicationKnowledge: ComposeMedicationKnowledge(xml, 'MedicationKnowledge', TFhirMedicationKnowledge(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  {$IFDEF FHIR_MEDICATIONREQUEST}
     frtMedicationRequest: ComposeMedicationRequest(xml, 'MedicationRequest', TFhirMedicationRequest(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  {$IFDEF FHIR_MEDICATIONSTATEMENT}
     frtMedicationStatement: ComposeMedicationStatement(xml, 'MedicationStatement', TFhirMedicationStatement(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCT}
  {$IFDEF FHIR_MEDICINALPRODUCT}
     frtMedicinalProduct: ComposeMedicinalProduct(xml, 'MedicinalProduct', TFhirMedicinalProduct(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCT}
{$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
  {$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
     frtMedicinalProductAuthorization: ComposeMedicinalProductAuthorization(xml, 'MedicinalProductAuthorization', TFhirMedicinalProductAuthorization(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTAUTHORIZATION}
{$IFDEF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
  {$IFDEF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
     frtMedicinalProductContraindication: ComposeMedicinalProductContraindication(xml, 'MedicinalProductContraindication', TFhirMedicinalProductContraindication(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
{$IFDEF FHIR_MEDICINALPRODUCTINDICATION}
  {$IFDEF FHIR_MEDICINALPRODUCTINDICATION}
     frtMedicinalProductIndication: ComposeMedicinalProductIndication(xml, 'MedicinalProductIndication', TFhirMedicinalProductIndication(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTINDICATION}
{$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
  {$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
     frtMedicinalProductIngredient: ComposeMedicinalProductIngredient(xml, 'MedicinalProductIngredient', TFhirMedicinalProductIngredient(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTINGREDIENT}
{$IFDEF FHIR_MEDICINALPRODUCTINTERACTION}
  {$IFDEF FHIR_MEDICINALPRODUCTINTERACTION}
     frtMedicinalProductInteraction: ComposeMedicinalProductInteraction(xml, 'MedicinalProductInteraction', TFhirMedicinalProductInteraction(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTINTERACTION}
{$IFDEF FHIR_MEDICINALPRODUCTMANUFACTURED}
  {$IFDEF FHIR_MEDICINALPRODUCTMANUFACTURED}
     frtMedicinalProductManufactured: ComposeMedicinalProductManufactured(xml, 'MedicinalProductManufactured', TFhirMedicinalProductManufactured(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTMANUFACTURED}
{$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
  {$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
     frtMedicinalProductPackaged: ComposeMedicinalProductPackaged(xml, 'MedicinalProductPackaged', TFhirMedicinalProductPackaged(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTPACKAGED}
{$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
  {$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
     frtMedicinalProductPharmaceutical: ComposeMedicinalProductPharmaceutical(xml, 'MedicinalProductPharmaceutical', TFhirMedicinalProductPharmaceutical(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
{$IFDEF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
  {$IFDEF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
     frtMedicinalProductUndesirableEffect: ComposeMedicinalProductUndesirableEffect(xml, 'MedicinalProductUndesirableEffect', TFhirMedicinalProductUndesirableEffect(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
{$IFDEF FHIR_MESSAGEDEFINITION}
  {$IFDEF FHIR_MESSAGEDEFINITION}
     frtMessageDefinition: ComposeMessageDefinition(xml, 'MessageDefinition', TFhirMessageDefinition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  {$IFDEF FHIR_MESSAGEHEADER}
     frtMessageHeader: ComposeMessageHeader(xml, 'MessageHeader', TFhirMessageHeader(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
  {$IFDEF FHIR_MOLECULARSEQUENCE}
     frtMolecularSequence: ComposeMolecularSequence(xml, 'MolecularSequence', TFhirMolecularSequence(resource)); 
  {$ENDIF}
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
  {$IFDEF FHIR_NAMINGSYSTEM}
     frtNamingSystem: ComposeNamingSystem(xml, 'NamingSystem', TFhirNamingSystem(resource)); 
  {$ENDIF}
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  {$IFDEF FHIR_NUTRITIONORDER}
     frtNutritionOrder: ComposeNutritionOrder(xml, 'NutritionOrder', TFhirNutritionOrder(resource)); 
  {$ENDIF}
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
  {$IFDEF FHIR_OBSERVATION}
     frtObservation: ComposeObservation(xml, 'Observation', TFhirObservation(resource)); 
  {$ENDIF}
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
  {$IFDEF FHIR_OBSERVATIONDEFINITION}
     frtObservationDefinition: ComposeObservationDefinition(xml, 'ObservationDefinition', TFhirObservationDefinition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
  {$IFDEF FHIR_OPERATIONDEFINITION}
     frtOperationDefinition: ComposeOperationDefinition(xml, 'OperationDefinition', TFhirOperationDefinition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  {$IFDEF FHIR_OPERATIONOUTCOME}
     frtOperationOutcome: ComposeOperationOutcome(xml, 'OperationOutcome', TFhirOperationOutcome(resource)); 
  {$ENDIF}
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  {$IFDEF FHIR_ORGANIZATION}
     frtOrganization: ComposeOrganization(xml, 'Organization', TFhirOrganization(resource)); 
  {$ENDIF}
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
  {$IFDEF FHIR_ORGANIZATIONAFFILIATION}
     frtOrganizationAffiliation: ComposeOrganizationAffiliation(xml, 'OrganizationAffiliation', TFhirOrganizationAffiliation(resource)); 
  {$ENDIF}
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PATIENT}
  {$IFDEF FHIR_PATIENT}
     frtPatient: ComposePatient(xml, 'Patient', TFhirPatient(resource)); 
  {$ENDIF}
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  {$IFDEF FHIR_PAYMENTNOTICE}
     frtPaymentNotice: ComposePaymentNotice(xml, 'PaymentNotice', TFhirPaymentNotice(resource)); 
  {$ENDIF}
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  {$IFDEF FHIR_PAYMENTRECONCILIATION}
     frtPaymentReconciliation: ComposePaymentReconciliation(xml, 'PaymentReconciliation', TFhirPaymentReconciliation(resource)); 
  {$ENDIF}
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  {$IFDEF FHIR_PERSON}
     frtPerson: ComposePerson(xml, 'Person', TFhirPerson(resource)); 
  {$ENDIF}
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  {$IFDEF FHIR_PLANDEFINITION}
     frtPlanDefinition: ComposePlanDefinition(xml, 'PlanDefinition', TFhirPlanDefinition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  {$IFDEF FHIR_PRACTITIONER}
     frtPractitioner: ComposePractitioner(xml, 'Practitioner', TFhirPractitioner(resource)); 
  {$ENDIF}
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  {$IFDEF FHIR_PRACTITIONERROLE}
     frtPractitionerRole: ComposePractitionerRole(xml, 'PractitionerRole', TFhirPractitionerRole(resource)); 
  {$ENDIF}
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  {$IFDEF FHIR_PROCEDURE}
     frtProcedure: ComposeProcedure(xml, 'Procedure', TFhirProcedure(resource)); 
  {$ENDIF}
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
  {$IFDEF FHIR_PROVENANCE}
     frtProvenance: ComposeProvenance(xml, 'Provenance', TFhirProvenance(resource)); 
  {$ENDIF}
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  {$IFDEF FHIR_QUESTIONNAIRE}
     frtQuestionnaire: ComposeQuestionnaire(xml, 'Questionnaire', TFhirQuestionnaire(resource)); 
  {$ENDIF}
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  {$IFDEF FHIR_QUESTIONNAIRERESPONSE}
     frtQuestionnaireResponse: ComposeQuestionnaireResponse(xml, 'QuestionnaireResponse', TFhirQuestionnaireResponse(resource)); 
  {$ENDIF}
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_RELATEDPERSON}
  {$IFDEF FHIR_RELATEDPERSON}
     frtRelatedPerson: ComposeRelatedPerson(xml, 'RelatedPerson', TFhirRelatedPerson(resource)); 
  {$ENDIF}
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  {$IFDEF FHIR_REQUESTGROUP}
     frtRequestGroup: ComposeRequestGroup(xml, 'RequestGroup', TFhirRequestGroup(resource)); 
  {$ENDIF}
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHDEFINITION}
  {$IFDEF FHIR_RESEARCHDEFINITION}
     frtResearchDefinition: ComposeResearchDefinition(xml, 'ResearchDefinition', TFhirResearchDefinition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_RESEARCHDEFINITION}
{$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
  {$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
     frtResearchElementDefinition: ComposeResearchElementDefinition(xml, 'ResearchElementDefinition', TFhirResearchElementDefinition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_RESEARCHELEMENTDEFINITION}
{$IFDEF FHIR_RESEARCHSTUDY}
  {$IFDEF FHIR_RESEARCHSTUDY}
     frtResearchStudy: ComposeResearchStudy(xml, 'ResearchStudy', TFhirResearchStudy(resource)); 
  {$ENDIF}
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  {$IFDEF FHIR_RESEARCHSUBJECT}
     frtResearchSubject: ComposeResearchSubject(xml, 'ResearchSubject', TFhirResearchSubject(resource)); 
  {$ENDIF}
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  {$IFDEF FHIR_RISKASSESSMENT}
     frtRiskAssessment: ComposeRiskAssessment(xml, 'RiskAssessment', TFhirRiskAssessment(resource)); 
  {$ENDIF}
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_RISKEVIDENCESYNTHESIS}
  {$IFDEF FHIR_RISKEVIDENCESYNTHESIS}
     frtRiskEvidenceSynthesis: ComposeRiskEvidenceSynthesis(xml, 'RiskEvidenceSynthesis', TFhirRiskEvidenceSynthesis(resource)); 
  {$ENDIF}
{$ENDIF FHIR_RISKEVIDENCESYNTHESIS}
{$IFDEF FHIR_SCHEDULE}
  {$IFDEF FHIR_SCHEDULE}
     frtSchedule: ComposeSchedule(xml, 'Schedule', TFhirSchedule(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  {$IFDEF FHIR_SEARCHPARAMETER}
     frtSearchParameter: ComposeSearchParameter(xml, 'SearchParameter', TFhirSearchParameter(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
  {$IFDEF FHIR_SERVICEREQUEST}
     frtServiceRequest: ComposeServiceRequest(xml, 'ServiceRequest', TFhirServiceRequest(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
  {$IFDEF FHIR_SLOT}
     frtSlot: ComposeSlot(xml, 'Slot', TFhirSlot(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  {$IFDEF FHIR_SPECIMEN}
     frtSpecimen: ComposeSpecimen(xml, 'Specimen', TFhirSpecimen(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
  {$IFDEF FHIR_SPECIMENDEFINITION}
     frtSpecimenDefinition: ComposeSpecimenDefinition(xml, 'SpecimenDefinition', TFhirSpecimenDefinition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  {$IFDEF FHIR_STRUCTUREDEFINITION}
     frtStructureDefinition: ComposeStructureDefinition(xml, 'StructureDefinition', TFhirStructureDefinition(resource)); 
  {$ENDIF}
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  {$IFDEF FHIR_STRUCTUREMAP}
     frtStructureMap: ComposeStructureMap(xml, 'StructureMap', TFhirStructureMap(resource)); 
  {$ENDIF}
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  {$IFDEF FHIR_SUBSCRIPTION}
     frtSubscription: ComposeSubscription(xml, 'Subscription', TFhirSubscription(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
  {$IFDEF FHIR_SUBSTANCE}
     frtSubstance: ComposeSubstance(xml, 'Substance', TFhirSubstance(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCENUCLEICACID}
  {$IFDEF FHIR_SUBSTANCENUCLEICACID}
     frtSubstanceNucleicAcid: ComposeSubstanceNucleicAcid(xml, 'SubstanceNucleicAcid', TFhirSubstanceNucleicAcid(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCENUCLEICACID}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
  {$IFDEF FHIR_SUBSTANCEPOLYMER}
     frtSubstancePolymer: ComposeSubstancePolymer(xml, 'SubstancePolymer', TFhirSubstancePolymer(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEPROTEIN}
  {$IFDEF FHIR_SUBSTANCEPROTEIN}
     frtSubstanceProtein: ComposeSubstanceProtein(xml, 'SubstanceProtein', TFhirSubstanceProtein(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCEPROTEIN}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
  {$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
     frtSubstanceReferenceInformation: ComposeSubstanceReferenceInformation(xml, 'SubstanceReferenceInformation', TFhirSubstanceReferenceInformation(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
  {$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
     frtSubstanceSourceMaterial: ComposeSubstanceSourceMaterial(xml, 'SubstanceSourceMaterial', TFhirSubstanceSourceMaterial(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCESOURCEMATERIAL}
{$IFDEF FHIR_SUBSTANCESPECIFICATION}
  {$IFDEF FHIR_SUBSTANCESPECIFICATION}
     frtSubstanceSpecification: ComposeSubstanceSpecification(xml, 'SubstanceSpecification', TFhirSubstanceSpecification(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SUBSTANCESPECIFICATION}
{$IFDEF FHIR_SUPPLYDELIVERY}
  {$IFDEF FHIR_SUPPLYDELIVERY}
     frtSupplyDelivery: ComposeSupplyDelivery(xml, 'SupplyDelivery', TFhirSupplyDelivery(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  {$IFDEF FHIR_SUPPLYREQUEST}
     frtSupplyRequest: ComposeSupplyRequest(xml, 'SupplyRequest', TFhirSupplyRequest(resource)); 
  {$ENDIF}
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  {$IFDEF FHIR_TASK}
     frtTask: ComposeTask(xml, 'Task', TFhirTask(resource)); 
  {$ENDIF}
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
  {$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
     frtTerminologyCapabilities: ComposeTerminologyCapabilities(xml, 'TerminologyCapabilities', TFhirTerminologyCapabilities(resource)); 
  {$ENDIF}
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
  {$IFDEF FHIR_TESTREPORT}
     frtTestReport: ComposeTestReport(xml, 'TestReport', TFhirTestReport(resource)); 
  {$ENDIF}
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  {$IFDEF FHIR_TESTSCRIPT}
     frtTestScript: ComposeTestScript(xml, 'TestScript', TFhirTestScript(resource)); 
  {$ENDIF}
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
  {$IFDEF FHIR_VALUESET}
     frtValueSet: ComposeValueSet(xml, 'ValueSet', TFhirValueSet(resource)); 
  {$ENDIF}
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
  {$IFDEF FHIR_VERIFICATIONRESULT}
     frtVerificationResult: ComposeVerificationResult(xml, 'VerificationResult', TFhirVerificationResult(resource)); 
  {$ENDIF}
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  {$IFDEF FHIR_VISIONPRESCRIPTION}
     frtVisionPrescription: ComposeVisionPrescription(xml, 'VisionPrescription', TFhirVisionPrescription(resource)); 
  {$ENDIF}
{$ENDIF FHIR_VISIONPRESCRIPTION}
  else
    raise EXmlException.create('Internal error: the resource type '+CODES_TFhirResourceType[resource.ResourceType]+' is not a valid resource type');
  end;
end;

function TFHIRXmlParser.ParseFragment(element : TMXmlElement) : TFHIRObject;
begin
   if SameText(element.Name, 'TFhirElement') then
    result := parseElement(element, element.Name)
  else if SameText(element.Name, 'TFhirBackboneElement') then
    result := parseBackboneElement(element, element.Name)
  else if SameText(element.Name, 'TFhirBackboneType') then
    result := parseBackboneType(element, element.Name)
{$IFDEF FHIR_PARAMETERS}
  else if SameText(element.Name, 'TFhirParameters') then
    result := parseParameters(element, element.Name)
{$ENDIF FHIR_PARAMETERS}
  else if SameText(element.Name, 'TFhirExtension') then
    result := parseExtension(element, element.Name)
  else if SameText(element.Name, 'TFhirNarrative') then
    result := parseNarrative(element, element.Name)
  else if SameText(element.Name, 'TFhirContributor') then
    result := parseContributor(element, element.Name)
  else if SameText(element.Name, 'TFhirAttachment') then
    result := parseAttachment(element, element.Name)
  else if SameText(element.Name, 'TFhirDataRequirement') then
    result := parseDataRequirement(element, element.Name)
  else if SameText(element.Name, 'TFhirDosage') then
    result := parseDosage(element, element.Name)
  else if SameText(element.Name, 'TFhirMoney') then
    result := parseMoney(element, element.Name)
  else if SameText(element.Name, 'TFhirMarketingStatus') then
    result := parseMarketingStatus(element, element.Name)
  else if SameText(element.Name, 'TFhirIdentifier') then
    result := parseIdentifier(element, element.Name)
  else if SameText(element.Name, 'TFhirSubstanceAmount') then
    result := parseSubstanceAmount(element, element.Name)
  else if SameText(element.Name, 'TFhirCoding') then
    result := parseCoding(element, element.Name)
  else if SameText(element.Name, 'TFhirSampledData') then
    result := parseSampledData(element, element.Name)
  else if SameText(element.Name, 'TFhirPopulation') then
    result := parsePopulation(element, element.Name)
  else if SameText(element.Name, 'TFhirRatio') then
    result := parseRatio(element, element.Name)
  else if SameText(element.Name, 'TFhirReference') then
    result := parseReference(element, element.Name)
  else if SameText(element.Name, 'TFhirTriggerDefinition') then
    result := parseTriggerDefinition(element, element.Name)
  else if SameText(element.Name, 'TFhirPeriod') then
    result := parsePeriod(element, element.Name)
  else if SameText(element.Name, 'TFhirQuantity') then
    result := parseQuantity(element, element.Name)
  else if SameText(element.Name, 'TFhirRange') then
    result := parseRange(element, element.Name)
  else if SameText(element.Name, 'TFhirRelatedArtifact') then
    result := parseRelatedArtifact(element, element.Name)
  else if SameText(element.Name, 'TFhirAnnotation') then
    result := parseAnnotation(element, element.Name)
  else if SameText(element.Name, 'TFhirProductShelfLife') then
    result := parseProductShelfLife(element, element.Name)
  else if SameText(element.Name, 'TFhirContactDetail') then
    result := parseContactDetail(element, element.Name)
  else if SameText(element.Name, 'TFhirExpression') then
    result := parseExpression(element, element.Name)
  else if SameText(element.Name, 'TFhirUsageContext') then
    result := parseUsageContext(element, element.Name)
  else if SameText(element.Name, 'TFhirSignature') then
    result := parseSignature(element, element.Name)
  else if SameText(element.Name, 'TFhirProdCharacteristic') then
    result := parseProdCharacteristic(element, element.Name)
  else if SameText(element.Name, 'TFhirCodeableConcept') then
    result := parseCodeableConcept(element, element.Name)
  else if SameText(element.Name, 'TFhirParameterDefinition') then
    result := parseParameterDefinition(element, element.Name)
  else if SameText(element.Name, 'TFhirContactPoint') then
    result := parseContactPoint(element, element.Name)
  else if SameText(element.Name, 'TFhirHumanName') then
    result := parseHumanName(element, element.Name)
  else if SameText(element.Name, 'TFhirMeta') then
    result := parseMeta(element, element.Name)
  else if SameText(element.Name, 'TFhirAddress') then
    result := parseAddress(element, element.Name)
  else if SameText(element.Name, 'TFhirElementDefinition') then
    result := parseElementDefinition(element, element.Name)
  else if SameText(element.Name, 'TFhirTiming') then
    result := parseTiming(element, element.Name)
  else if SameText(element.Name, 'TFhirCount') then
    result := parseCount(element, element.Name)
  else if SameText(element.Name, 'TFhirAge') then
    result := parseAge(element, element.Name)
  else if SameText(element.Name, 'TFhirDistance') then
    result := parseDistance(element, element.Name)
  else if SameText(element.Name, 'TFhirDuration') then
    result := parseDuration(element, element.Name)
{$IFDEF FHIR_ACCOUNT}
  else if SameText(element.Name, 'TFhirAccount') then
    result := parseAccount(element, element.Name)
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  else if SameText(element.Name, 'TFhirActivityDefinition') then
    result := parseActivityDefinition(element, element.Name)
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  else if SameText(element.Name, 'TFhirAdverseEvent') then
    result := parseAdverseEvent(element, element.Name)
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  else if SameText(element.Name, 'TFhirAllergyIntolerance') then
    result := parseAllergyIntolerance(element, element.Name)
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  else if SameText(element.Name, 'TFhirAppointment') then
    result := parseAppointment(element, element.Name)
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  else if SameText(element.Name, 'TFhirAppointmentResponse') then
    result := parseAppointmentResponse(element, element.Name)
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  else if SameText(element.Name, 'TFhirAuditEvent') then
    result := parseAuditEvent(element, element.Name)
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  else if SameText(element.Name, 'TFhirBasic') then
    result := parseBasic(element, element.Name)
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  else if SameText(element.Name, 'TFhirBinary') then
    result := parseBinary(element, element.Name)
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
  else if SameText(element.Name, 'TFhirBiologicallyDerivedProduct') then
    result := parseBiologicallyDerivedProduct(element, element.Name)
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
  else if SameText(element.Name, 'TFhirBodyStructure') then
    result := parseBodyStructure(element, element.Name)
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
  else if SameText(element.Name, 'TFhirBundle') then
    result := parseBundle(element, element.Name)
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  else if SameText(element.Name, 'TFhirCapabilityStatement') then
    result := parseCapabilityStatement(element, element.Name)
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  else if SameText(element.Name, 'TFhirCarePlan') then
    result := parseCarePlan(element, element.Name)
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  else if SameText(element.Name, 'TFhirCareTeam') then
    result := parseCareTeam(element, element.Name)
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
  else if SameText(element.Name, 'TFhirCatalogEntry') then
    result := parseCatalogEntry(element, element.Name)
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
  else if SameText(element.Name, 'TFhirChargeItem') then
    result := parseChargeItem(element, element.Name)
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
  else if SameText(element.Name, 'TFhirChargeItemDefinition') then
    result := parseChargeItemDefinition(element, element.Name)
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CLAIM}
  else if SameText(element.Name, 'TFhirClaim') then
    result := parseClaim(element, element.Name)
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  else if SameText(element.Name, 'TFhirClaimResponse') then
    result := parseClaimResponse(element, element.Name)
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  else if SameText(element.Name, 'TFhirClinicalImpression') then
    result := parseClinicalImpression(element, element.Name)
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
  else if SameText(element.Name, 'TFhirCodeSystem') then
    result := parseCodeSystem(element, element.Name)
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  else if SameText(element.Name, 'TFhirCommunication') then
    result := parseCommunication(element, element.Name)
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  else if SameText(element.Name, 'TFhirCommunicationRequest') then
    result := parseCommunicationRequest(element, element.Name)
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  else if SameText(element.Name, 'TFhirCompartmentDefinition') then
    result := parseCompartmentDefinition(element, element.Name)
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  else if SameText(element.Name, 'TFhirComposition') then
    result := parseComposition(element, element.Name)
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  else if SameText(element.Name, 'TFhirConceptMap') then
    result := parseConceptMap(element, element.Name)
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  else if SameText(element.Name, 'TFhirCondition') then
    result := parseCondition(element, element.Name)
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  else if SameText(element.Name, 'TFhirConsent') then
    result := parseConsent(element, element.Name)
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  else if SameText(element.Name, 'TFhirContract') then
    result := parseContract(element, element.Name)
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  else if SameText(element.Name, 'TFhirCoverage') then
    result := parseCoverage(element, element.Name)
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
  else if SameText(element.Name, 'TFhirCoverageEligibilityRequest') then
    result := parseCoverageEligibilityRequest(element, element.Name)
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
  else if SameText(element.Name, 'TFhirCoverageEligibilityResponse') then
    result := parseCoverageEligibilityResponse(element, element.Name)
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
  else if SameText(element.Name, 'TFhirDetectedIssue') then
    result := parseDetectedIssue(element, element.Name)
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  else if SameText(element.Name, 'TFhirDevice') then
    result := parseDevice(element, element.Name)
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
  else if SameText(element.Name, 'TFhirDeviceDefinition') then
    result := parseDeviceDefinition(element, element.Name)
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
  else if SameText(element.Name, 'TFhirDeviceMetric') then
    result := parseDeviceMetric(element, element.Name)
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  else if SameText(element.Name, 'TFhirDeviceRequest') then
    result := parseDeviceRequest(element, element.Name)
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  else if SameText(element.Name, 'TFhirDeviceUseStatement') then
    result := parseDeviceUseStatement(element, element.Name)
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  else if SameText(element.Name, 'TFhirDiagnosticReport') then
    result := parseDiagnosticReport(element, element.Name)
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  else if SameText(element.Name, 'TFhirDocumentManifest') then
    result := parseDocumentManifest(element, element.Name)
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  else if SameText(element.Name, 'TFhirDocumentReference') then
    result := parseDocumentReference(element, element.Name)
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_EFFECTEVIDENCESYNTHESIS}
  else if SameText(element.Name, 'TFhirEffectEvidenceSynthesis') then
    result := parseEffectEvidenceSynthesis(element, element.Name)
{$ENDIF FHIR_EFFECTEVIDENCESYNTHESIS}
{$IFDEF FHIR_ENCOUNTER}
  else if SameText(element.Name, 'TFhirEncounter') then
    result := parseEncounter(element, element.Name)
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  else if SameText(element.Name, 'TFhirEndpoint') then
    result := parseEndpoint(element, element.Name)
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  else if SameText(element.Name, 'TFhirEnrollmentRequest') then
    result := parseEnrollmentRequest(element, element.Name)
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  else if SameText(element.Name, 'TFhirEnrollmentResponse') then
    result := parseEnrollmentResponse(element, element.Name)
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
  else if SameText(element.Name, 'TFhirEpisodeOfCare') then
    result := parseEpisodeOfCare(element, element.Name)
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
  else if SameText(element.Name, 'TFhirEventDefinition') then
    result := parseEventDefinition(element, element.Name)
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
  else if SameText(element.Name, 'TFhirEvidence') then
    result := parseEvidence(element, element.Name)
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEVARIABLE}
  else if SameText(element.Name, 'TFhirEvidenceVariable') then
    result := parseEvidenceVariable(element, element.Name)
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
  else if SameText(element.Name, 'TFhirExampleScenario') then
    result := parseExampleScenario(element, element.Name)
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  else if SameText(element.Name, 'TFhirExplanationOfBenefit') then
    result := parseExplanationOfBenefit(element, element.Name)
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  else if SameText(element.Name, 'TFhirFamilyMemberHistory') then
    result := parseFamilyMemberHistory(element, element.Name)
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  else if SameText(element.Name, 'TFhirFlag') then
    result := parseFlag(element, element.Name)
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  else if SameText(element.Name, 'TFhirGoal') then
    result := parseGoal(element, element.Name)
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  else if SameText(element.Name, 'TFhirGraphDefinition') then
    result := parseGraphDefinition(element, element.Name)
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  else if SameText(element.Name, 'TFhirGroup') then
    result := parseGroup(element, element.Name)
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  else if SameText(element.Name, 'TFhirGuidanceResponse') then
    result := parseGuidanceResponse(element, element.Name)
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  else if SameText(element.Name, 'TFhirHealthcareService') then
    result := parseHealthcareService(element, element.Name)
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
  else if SameText(element.Name, 'TFhirImagingStudy') then
    result := parseImagingStudy(element, element.Name)
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  else if SameText(element.Name, 'TFhirImmunization') then
    result := parseImmunization(element, element.Name)
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
  else if SameText(element.Name, 'TFhirImmunizationEvaluation') then
    result := parseImmunizationEvaluation(element, element.Name)
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  else if SameText(element.Name, 'TFhirImmunizationRecommendation') then
    result := parseImmunizationRecommendation(element, element.Name)
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  else if SameText(element.Name, 'TFhirImplementationGuide') then
    result := parseImplementationGuide(element, element.Name)
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INSURANCEPLAN}
  else if SameText(element.Name, 'TFhirInsurancePlan') then
    result := parseInsurancePlan(element, element.Name)
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
  else if SameText(element.Name, 'TFhirInvoice') then
    result := parseInvoice(element, element.Name)
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
  else if SameText(element.Name, 'TFhirLibrary') then
    result := parseLibrary(element, element.Name)
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  else if SameText(element.Name, 'TFhirLinkage') then
    result := parseLinkage(element, element.Name)
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  else if SameText(element.Name, 'TFhirList') then
    result := parseList(element, element.Name)
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  else if SameText(element.Name, 'TFhirLocation') then
    result := parseLocation(element, element.Name)
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
  else if SameText(element.Name, 'TFhirMeasure') then
    result := parseMeasure(element, element.Name)
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  else if SameText(element.Name, 'TFhirMeasureReport') then
    result := parseMeasureReport(element, element.Name)
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  else if SameText(element.Name, 'TFhirMedia') then
    result := parseMedia(element, element.Name)
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  else if SameText(element.Name, 'TFhirMedication') then
    result := parseMedication(element, element.Name)
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  else if SameText(element.Name, 'TFhirMedicationAdministration') then
    result := parseMedicationAdministration(element, element.Name)
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  else if SameText(element.Name, 'TFhirMedicationDispense') then
    result := parseMedicationDispense(element, element.Name)
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
  else if SameText(element.Name, 'TFhirMedicationKnowledge') then
    result := parseMedicationKnowledge(element, element.Name)
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  else if SameText(element.Name, 'TFhirMedicationRequest') then
    result := parseMedicationRequest(element, element.Name)
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  else if SameText(element.Name, 'TFhirMedicationStatement') then
    result := parseMedicationStatement(element, element.Name)
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCT}
  else if SameText(element.Name, 'TFhirMedicinalProduct') then
    result := parseMedicinalProduct(element, element.Name)
{$ENDIF FHIR_MEDICINALPRODUCT}
{$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
  else if SameText(element.Name, 'TFhirMedicinalProductAuthorization') then
    result := parseMedicinalProductAuthorization(element, element.Name)
{$ENDIF FHIR_MEDICINALPRODUCTAUTHORIZATION}
{$IFDEF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
  else if SameText(element.Name, 'TFhirMedicinalProductContraindication') then
    result := parseMedicinalProductContraindication(element, element.Name)
{$ENDIF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
{$IFDEF FHIR_MEDICINALPRODUCTINDICATION}
  else if SameText(element.Name, 'TFhirMedicinalProductIndication') then
    result := parseMedicinalProductIndication(element, element.Name)
{$ENDIF FHIR_MEDICINALPRODUCTINDICATION}
{$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
  else if SameText(element.Name, 'TFhirMedicinalProductIngredient') then
    result := parseMedicinalProductIngredient(element, element.Name)
{$ENDIF FHIR_MEDICINALPRODUCTINGREDIENT}
{$IFDEF FHIR_MEDICINALPRODUCTINTERACTION}
  else if SameText(element.Name, 'TFhirMedicinalProductInteraction') then
    result := parseMedicinalProductInteraction(element, element.Name)
{$ENDIF FHIR_MEDICINALPRODUCTINTERACTION}
{$IFDEF FHIR_MEDICINALPRODUCTMANUFACTURED}
  else if SameText(element.Name, 'TFhirMedicinalProductManufactured') then
    result := parseMedicinalProductManufactured(element, element.Name)
{$ENDIF FHIR_MEDICINALPRODUCTMANUFACTURED}
{$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
  else if SameText(element.Name, 'TFhirMedicinalProductPackaged') then
    result := parseMedicinalProductPackaged(element, element.Name)
{$ENDIF FHIR_MEDICINALPRODUCTPACKAGED}
{$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
  else if SameText(element.Name, 'TFhirMedicinalProductPharmaceutical') then
    result := parseMedicinalProductPharmaceutical(element, element.Name)
{$ENDIF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
{$IFDEF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
  else if SameText(element.Name, 'TFhirMedicinalProductUndesirableEffect') then
    result := parseMedicinalProductUndesirableEffect(element, element.Name)
{$ENDIF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
{$IFDEF FHIR_MESSAGEDEFINITION}
  else if SameText(element.Name, 'TFhirMessageDefinition') then
    result := parseMessageDefinition(element, element.Name)
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  else if SameText(element.Name, 'TFhirMessageHeader') then
    result := parseMessageHeader(element, element.Name)
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
  else if SameText(element.Name, 'TFhirMolecularSequence') then
    result := parseMolecularSequence(element, element.Name)
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
  else if SameText(element.Name, 'TFhirNamingSystem') then
    result := parseNamingSystem(element, element.Name)
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  else if SameText(element.Name, 'TFhirNutritionOrder') then
    result := parseNutritionOrder(element, element.Name)
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
  else if SameText(element.Name, 'TFhirObservation') then
    result := parseObservation(element, element.Name)
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
  else if SameText(element.Name, 'TFhirObservationDefinition') then
    result := parseObservationDefinition(element, element.Name)
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
  else if SameText(element.Name, 'TFhirOperationDefinition') then
    result := parseOperationDefinition(element, element.Name)
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  else if SameText(element.Name, 'TFhirOperationOutcome') then
    result := parseOperationOutcome(element, element.Name)
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  else if SameText(element.Name, 'TFhirOrganization') then
    result := parseOrganization(element, element.Name)
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
  else if SameText(element.Name, 'TFhirOrganizationAffiliation') then
    result := parseOrganizationAffiliation(element, element.Name)
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PATIENT}
  else if SameText(element.Name, 'TFhirPatient') then
    result := parsePatient(element, element.Name)
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  else if SameText(element.Name, 'TFhirPaymentNotice') then
    result := parsePaymentNotice(element, element.Name)
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  else if SameText(element.Name, 'TFhirPaymentReconciliation') then
    result := parsePaymentReconciliation(element, element.Name)
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  else if SameText(element.Name, 'TFhirPerson') then
    result := parsePerson(element, element.Name)
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  else if SameText(element.Name, 'TFhirPlanDefinition') then
    result := parsePlanDefinition(element, element.Name)
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  else if SameText(element.Name, 'TFhirPractitioner') then
    result := parsePractitioner(element, element.Name)
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  else if SameText(element.Name, 'TFhirPractitionerRole') then
    result := parsePractitionerRole(element, element.Name)
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  else if SameText(element.Name, 'TFhirProcedure') then
    result := parseProcedure(element, element.Name)
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
  else if SameText(element.Name, 'TFhirProvenance') then
    result := parseProvenance(element, element.Name)
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  else if SameText(element.Name, 'TFhirQuestionnaire') then
    result := parseQuestionnaire(element, element.Name)
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  else if SameText(element.Name, 'TFhirQuestionnaireResponse') then
    result := parseQuestionnaireResponse(element, element.Name)
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_RELATEDPERSON}
  else if SameText(element.Name, 'TFhirRelatedPerson') then
    result := parseRelatedPerson(element, element.Name)
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  else if SameText(element.Name, 'TFhirRequestGroup') then
    result := parseRequestGroup(element, element.Name)
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHDEFINITION}
  else if SameText(element.Name, 'TFhirResearchDefinition') then
    result := parseResearchDefinition(element, element.Name)
{$ENDIF FHIR_RESEARCHDEFINITION}
{$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
  else if SameText(element.Name, 'TFhirResearchElementDefinition') then
    result := parseResearchElementDefinition(element, element.Name)
{$ENDIF FHIR_RESEARCHELEMENTDEFINITION}
{$IFDEF FHIR_RESEARCHSTUDY}
  else if SameText(element.Name, 'TFhirResearchStudy') then
    result := parseResearchStudy(element, element.Name)
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  else if SameText(element.Name, 'TFhirResearchSubject') then
    result := parseResearchSubject(element, element.Name)
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  else if SameText(element.Name, 'TFhirRiskAssessment') then
    result := parseRiskAssessment(element, element.Name)
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_RISKEVIDENCESYNTHESIS}
  else if SameText(element.Name, 'TFhirRiskEvidenceSynthesis') then
    result := parseRiskEvidenceSynthesis(element, element.Name)
{$ENDIF FHIR_RISKEVIDENCESYNTHESIS}
{$IFDEF FHIR_SCHEDULE}
  else if SameText(element.Name, 'TFhirSchedule') then
    result := parseSchedule(element, element.Name)
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  else if SameText(element.Name, 'TFhirSearchParameter') then
    result := parseSearchParameter(element, element.Name)
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
  else if SameText(element.Name, 'TFhirServiceRequest') then
    result := parseServiceRequest(element, element.Name)
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
  else if SameText(element.Name, 'TFhirSlot') then
    result := parseSlot(element, element.Name)
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  else if SameText(element.Name, 'TFhirSpecimen') then
    result := parseSpecimen(element, element.Name)
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
  else if SameText(element.Name, 'TFhirSpecimenDefinition') then
    result := parseSpecimenDefinition(element, element.Name)
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  else if SameText(element.Name, 'TFhirStructureDefinition') then
    result := parseStructureDefinition(element, element.Name)
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  else if SameText(element.Name, 'TFhirStructureMap') then
    result := parseStructureMap(element, element.Name)
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  else if SameText(element.Name, 'TFhirSubscription') then
    result := parseSubscription(element, element.Name)
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
  else if SameText(element.Name, 'TFhirSubstance') then
    result := parseSubstance(element, element.Name)
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCENUCLEICACID}
  else if SameText(element.Name, 'TFhirSubstanceNucleicAcid') then
    result := parseSubstanceNucleicAcid(element, element.Name)
{$ENDIF FHIR_SUBSTANCENUCLEICACID}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
  else if SameText(element.Name, 'TFhirSubstancePolymer') then
    result := parseSubstancePolymer(element, element.Name)
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEPROTEIN}
  else if SameText(element.Name, 'TFhirSubstanceProtein') then
    result := parseSubstanceProtein(element, element.Name)
{$ENDIF FHIR_SUBSTANCEPROTEIN}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
  else if SameText(element.Name, 'TFhirSubstanceReferenceInformation') then
    result := parseSubstanceReferenceInformation(element, element.Name)
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
  else if SameText(element.Name, 'TFhirSubstanceSourceMaterial') then
    result := parseSubstanceSourceMaterial(element, element.Name)
{$ENDIF FHIR_SUBSTANCESOURCEMATERIAL}
{$IFDEF FHIR_SUBSTANCESPECIFICATION}
  else if SameText(element.Name, 'TFhirSubstanceSpecification') then
    result := parseSubstanceSpecification(element, element.Name)
{$ENDIF FHIR_SUBSTANCESPECIFICATION}
{$IFDEF FHIR_SUPPLYDELIVERY}
  else if SameText(element.Name, 'TFhirSupplyDelivery') then
    result := parseSupplyDelivery(element, element.Name)
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  else if SameText(element.Name, 'TFhirSupplyRequest') then
    result := parseSupplyRequest(element, element.Name)
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  else if SameText(element.Name, 'TFhirTask') then
    result := parseTask(element, element.Name)
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
  else if SameText(element.Name, 'TFhirTerminologyCapabilities') then
    result := parseTerminologyCapabilities(element, element.Name)
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
  else if SameText(element.Name, 'TFhirTestReport') then
    result := parseTestReport(element, element.Name)
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  else if SameText(element.Name, 'TFhirTestScript') then
    result := parseTestScript(element, element.Name)
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
  else if SameText(element.Name, 'TFhirValueSet') then
    result := parseValueSet(element, element.Name)
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
  else if SameText(element.Name, 'TFhirVerificationResult') then
    result := parseVerificationResult(element, element.Name)
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  else if SameText(element.Name, 'TFhirVisionPrescription') then
    result := parseVisionPrescription(element, element.Name)
{$ENDIF FHIR_VISIONPRESCRIPTION}
  else
    raise EXmlException.create('error: the element '+element.Name+' is not a valid fragment name');
end;

function TFHIRXmlParser.ParseDataType(element : TMXmlElement; name : String; type_ : TFHIRTypeClass) : TFhirType;
begin
    if (name <> '') and (name <> element.localName) then
    raise EXmlException.Create('Expected Name mismatch : expected "'+name+'"+, but found "'+element.localName+'"');
 if (type_ = TFhirExtension) then
    result := parseExtension(element, name)
  else if (type_ = TFhirNarrative) then
    result := parseNarrative(element, name)
  else if (type_ = TFhirContributor) then
    result := parseContributor(element, name)
  else if (type_ = TFhirAttachment) then
    result := parseAttachment(element, name)
  else if (type_ = TFhirDataRequirement) then
    result := parseDataRequirement(element, name)
  else if (type_ = TFhirDosage) then
    result := parseDosage(element, name)
  else if (type_ = TFhirMoney) then
    result := parseMoney(element, name)
  else if (type_ = TFhirMarketingStatus) then
    result := parseMarketingStatus(element, name)
  else if (type_ = TFhirIdentifier) then
    result := parseIdentifier(element, name)
  else if (type_ = TFhirSubstanceAmount) then
    result := parseSubstanceAmount(element, name)
  else if (type_ = TFhirCoding) then
    result := parseCoding(element, name)
  else if (type_ = TFhirSampledData) then
    result := parseSampledData(element, name)
  else if (type_ = TFhirPopulation) then
    result := parsePopulation(element, name)
  else if (type_ = TFhirRatio) then
    result := parseRatio(element, name)
  else if (type_ = TFhirReference) then
    result := parseReference(element, name)
  else if (type_ = TFhirTriggerDefinition) then
    result := parseTriggerDefinition(element, name)
  else if (type_ = TFhirPeriod) then
    result := parsePeriod(element, name)
  else if (type_ = TFhirQuantity) then
    result := parseQuantity(element, name)
  else if (type_ = TFhirRange) then
    result := parseRange(element, name)
  else if (type_ = TFhirRelatedArtifact) then
    result := parseRelatedArtifact(element, name)
  else if (type_ = TFhirAnnotation) then
    result := parseAnnotation(element, name)
  else if (type_ = TFhirProductShelfLife) then
    result := parseProductShelfLife(element, name)
  else if (type_ = TFhirContactDetail) then
    result := parseContactDetail(element, name)
  else if (type_ = TFhirExpression) then
    result := parseExpression(element, name)
  else if (type_ = TFhirUsageContext) then
    result := parseUsageContext(element, name)
  else if (type_ = TFhirSignature) then
    result := parseSignature(element, name)
  else if (type_ = TFhirProdCharacteristic) then
    result := parseProdCharacteristic(element, name)
  else if (type_ = TFhirCodeableConcept) then
    result := parseCodeableConcept(element, name)
  else if (type_ = TFhirParameterDefinition) then
    result := parseParameterDefinition(element, name)
  else if (type_ = TFhirContactPoint) then
    result := parseContactPoint(element, name)
  else if (type_ = TFhirHumanName) then
    result := parseHumanName(element, name)
  else if (type_ = TFhirMeta) then
    result := parseMeta(element, name)
  else if (type_ = TFhirAddress) then
    result := parseAddress(element, name)
  else if (type_ = TFhirElementDefinition) then
    result := parseElementDefinition(element, name)
  else if (type_ = TFhirTiming) then
    result := parseTiming(element, name)
  else if (type_ = TFhirCount) then
    result := parseCount(element, name)
  else if (type_ = TFhirAge) then
    result := parseAge(element, name)
  else if (type_ = TFhirDistance) then
    result := parseDistance(element, name)
  else if (type_ = TFhirDuration) then
    result := parseDuration(element, name)
  else
    raise EXmlException.create('Unknown Type');
end;

procedure TFHIRXmlComposer.ComposeBase(xml : TXmlBuilder; name : String; base : TFHIRObject);
begin
   if (base is TFhirDate) then
    composeDate(xml, name,  TFhirDate(base))
  else if (base is TFhirDateTime) then
    composeDateTime(xml, name,  TFhirDateTime(base))
  else if (base is TFhirString) then
    composeString(xml, name,  TFhirString(base))
  else if (base is TFhirInteger) then
    composeInteger(xml, name,  TFhirInteger(base))
  else if (base is TFhirUri) then
    composeUri(xml, name,  TFhirUri(base))
  else if (base is TFhirInstant) then
    composeInstant(xml, name,  TFhirInstant(base))
  else if (base is TFhirXhtml) then
    composeXhtml(xml, name,  TFhirXhtml(base))
  else if (base is TFhirBoolean) then
    composeBoolean(xml, name,  TFhirBoolean(base))
  else if (base is TFhirBase64Binary) then
    composeBase64Binary(xml, name,  TFhirBase64Binary(base))
  else if (base is TFhirTime) then
    composeTime(xml, name,  TFhirTime(base))
  else if (base is TFhirDecimal) then
    composeDecimal(xml, name,  TFhirDecimal(base))
  else if (base is TFhirCode) then
    composeCode(xml, name,  TFhirCode(base))
  else if (base is TFhirCanonical) then
    composeCanonical(xml, name,  TFhirCanonical(base))
  else if (base is TFhirOid) then
    composeOid(xml, name,  TFhirOid(base))
  else if (base is TFhirUuid) then
    composeUuid(xml, name,  TFhirUuid(base))
  else if (base is TFhirUrl) then
    composeUrl(xml, name,  TFhirUrl(base))
  else if (base is TFhirMarkdown) then
    composeMarkdown(xml, name,  TFhirMarkdown(base))
  else if (base is TFhirUnsignedInt) then
    composeUnsignedInt(xml, name,  TFhirUnsignedInt(base))
  else if (base is TFhirId) then
    composeId(xml, name,  TFhirId(base))
  else if (base is TFhirPositiveInt) then
    composePositiveInt(xml, name,  TFhirPositiveInt(base))
{$IFDEF FHIR_PARAMETERS}
  else if (base is TFhirParametersParameter) then
    composeParametersParameter(xml, name,  TFhirParametersParameter(base))
  else if (base is TFhirParameters) then
    composeParameters(xml, name,  TFhirParameters(base))
{$ENDIF FHIR_PARAMETERS}
  else if (base is TFhirExtension) then
    composeExtension(xml, name,  TFhirExtension(base))
  else if (base is TFhirNarrative) then
    composeNarrative(xml, name,  TFhirNarrative(base))
  else if (base is TFhirContributor) then
    composeContributor(xml, name,  TFhirContributor(base))
  else if (base is TFhirAttachment) then
    composeAttachment(xml, name,  TFhirAttachment(base))
  else if (base is TFhirDataRequirementCodeFilter) then
    composeDataRequirementCodeFilter(xml, name,  TFhirDataRequirementCodeFilter(base))
  else if (base is TFhirDataRequirementDateFilter) then
    composeDataRequirementDateFilter(xml, name,  TFhirDataRequirementDateFilter(base))
  else if (base is TFhirDataRequirementSort) then
    composeDataRequirementSort(xml, name,  TFhirDataRequirementSort(base))
  else if (base is TFhirDataRequirement) then
    composeDataRequirement(xml, name,  TFhirDataRequirement(base))
  else if (base is TFhirDosageDoseAndRate) then
    composeDosageDoseAndRate(xml, name,  TFhirDosageDoseAndRate(base))
  else if (base is TFhirDosage) then
    composeDosage(xml, name,  TFhirDosage(base))
  else if (base is TFhirMoney) then
    composeMoney(xml, name,  TFhirMoney(base))
  else if (base is TFhirMarketingStatus) then
    composeMarketingStatus(xml, name,  TFhirMarketingStatus(base))
  else if (base is TFhirIdentifier) then
    composeIdentifier(xml, name,  TFhirIdentifier(base))
  else if (base is TFhirSubstanceAmountReferenceRange) then
    composeSubstanceAmountReferenceRange(xml, name,  TFhirSubstanceAmountReferenceRange(base))
  else if (base is TFhirSubstanceAmount) then
    composeSubstanceAmount(xml, name,  TFhirSubstanceAmount(base))
  else if (base is TFhirCoding) then
    composeCoding(xml, name,  TFhirCoding(base))
  else if (base is TFhirSampledData) then
    composeSampledData(xml, name,  TFhirSampledData(base))
  else if (base is TFhirPopulation) then
    composePopulation(xml, name,  TFhirPopulation(base))
  else if (base is TFhirRatio) then
    composeRatio(xml, name,  TFhirRatio(base))
  else if (base is TFhirReference) then
    composeReference(xml, name,  TFhirReference(base))
  else if (base is TFhirTriggerDefinition) then
    composeTriggerDefinition(xml, name,  TFhirTriggerDefinition(base))
  else if (base is TFhirPeriod) then
    composePeriod(xml, name,  TFhirPeriod(base))
  else if (base is TFhirQuantity) then
    composeQuantity(xml, name,  TFhirQuantity(base))
  else if (base is TFhirRange) then
    composeRange(xml, name,  TFhirRange(base))
  else if (base is TFhirRelatedArtifact) then
    composeRelatedArtifact(xml, name,  TFhirRelatedArtifact(base))
  else if (base is TFhirAnnotation) then
    composeAnnotation(xml, name,  TFhirAnnotation(base))
  else if (base is TFhirProductShelfLife) then
    composeProductShelfLife(xml, name,  TFhirProductShelfLife(base))
  else if (base is TFhirContactDetail) then
    composeContactDetail(xml, name,  TFhirContactDetail(base))
  else if (base is TFhirExpression) then
    composeExpression(xml, name,  TFhirExpression(base))
  else if (base is TFhirUsageContext) then
    composeUsageContext(xml, name,  TFhirUsageContext(base))
  else if (base is TFhirSignature) then
    composeSignature(xml, name,  TFhirSignature(base))
  else if (base is TFhirProdCharacteristic) then
    composeProdCharacteristic(xml, name,  TFhirProdCharacteristic(base))
  else if (base is TFhirCodeableConcept) then
    composeCodeableConcept(xml, name,  TFhirCodeableConcept(base))
  else if (base is TFhirParameterDefinition) then
    composeParameterDefinition(xml, name,  TFhirParameterDefinition(base))
  else if (base is TFhirContactPoint) then
    composeContactPoint(xml, name,  TFhirContactPoint(base))
  else if (base is TFhirHumanName) then
    composeHumanName(xml, name,  TFhirHumanName(base))
  else if (base is TFhirMeta) then
    composeMeta(xml, name,  TFhirMeta(base))
  else if (base is TFhirAddress) then
    composeAddress(xml, name,  TFhirAddress(base))
  else if (base is TFhirElementDefinitionSlicing) then
    composeElementDefinitionSlicing(xml, name,  TFhirElementDefinitionSlicing(base))
  else if (base is TFhirElementDefinitionSlicingDiscriminator) then
    composeElementDefinitionSlicingDiscriminator(xml, name,  TFhirElementDefinitionSlicingDiscriminator(base))
  else if (base is TFhirElementDefinitionBase) then
    composeElementDefinitionBase(xml, name,  TFhirElementDefinitionBase(base))
  else if (base is TFhirElementDefinitionType) then
    composeElementDefinitionType(xml, name,  TFhirElementDefinitionType(base))
  else if (base is TFhirElementDefinitionExample) then
    composeElementDefinitionExample(xml, name,  TFhirElementDefinitionExample(base))
  else if (base is TFhirElementDefinitionConstraint) then
    composeElementDefinitionConstraint(xml, name,  TFhirElementDefinitionConstraint(base))
  else if (base is TFhirElementDefinitionBinding) then
    composeElementDefinitionBinding(xml, name,  TFhirElementDefinitionBinding(base))
  else if (base is TFhirElementDefinitionMapping) then
    composeElementDefinitionMapping(xml, name,  TFhirElementDefinitionMapping(base))
  else if (base is TFhirElementDefinition) then
    composeElementDefinition(xml, name,  TFhirElementDefinition(base))
  else if (base is TFhirTimingRepeat) then
    composeTimingRepeat(xml, name,  TFhirTimingRepeat(base))
  else if (base is TFhirTiming) then
    composeTiming(xml, name,  TFhirTiming(base))
  else if (base is TFhirCount) then
    composeCount(xml, name,  TFhirCount(base))
  else if (base is TFhirAge) then
    composeAge(xml, name,  TFhirAge(base))
  else if (base is TFhirDistance) then
    composeDistance(xml, name,  TFhirDistance(base))
  else if (base is TFhirDuration) then
    composeDuration(xml, name,  TFhirDuration(base))
{$IFDEF FHIR_ACCOUNT}
  else if (base is TFhirAccountCoverage) then
    composeAccountCoverage(xml, name,  TFhirAccountCoverage(base))
  else if (base is TFhirAccountGuarantor) then
    composeAccountGuarantor(xml, name,  TFhirAccountGuarantor(base))
  else if (base is TFhirAccount) then
    composeAccount(xml, name,  TFhirAccount(base))
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  else if (base is TFhirActivityDefinitionParticipant) then
    composeActivityDefinitionParticipant(xml, name,  TFhirActivityDefinitionParticipant(base))
  else if (base is TFhirActivityDefinitionDynamicValue) then
    composeActivityDefinitionDynamicValue(xml, name,  TFhirActivityDefinitionDynamicValue(base))
  else if (base is TFhirActivityDefinition) then
    composeActivityDefinition(xml, name,  TFhirActivityDefinition(base))
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  else if (base is TFhirAdverseEventSuspectEntity) then
    composeAdverseEventSuspectEntity(xml, name,  TFhirAdverseEventSuspectEntity(base))
  else if (base is TFhirAdverseEventSuspectEntityCausality) then
    composeAdverseEventSuspectEntityCausality(xml, name,  TFhirAdverseEventSuspectEntityCausality(base))
  else if (base is TFhirAdverseEvent) then
    composeAdverseEvent(xml, name,  TFhirAdverseEvent(base))
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  else if (base is TFhirAllergyIntoleranceReaction) then
    composeAllergyIntoleranceReaction(xml, name,  TFhirAllergyIntoleranceReaction(base))
  else if (base is TFhirAllergyIntolerance) then
    composeAllergyIntolerance(xml, name,  TFhirAllergyIntolerance(base))
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  else if (base is TFhirAppointmentParticipant) then
    composeAppointmentParticipant(xml, name,  TFhirAppointmentParticipant(base))
  else if (base is TFhirAppointment) then
    composeAppointment(xml, name,  TFhirAppointment(base))
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  else if (base is TFhirAppointmentResponse) then
    composeAppointmentResponse(xml, name,  TFhirAppointmentResponse(base))
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  else if (base is TFhirAuditEventAgent) then
    composeAuditEventAgent(xml, name,  TFhirAuditEventAgent(base))
  else if (base is TFhirAuditEventAgentNetwork) then
    composeAuditEventAgentNetwork(xml, name,  TFhirAuditEventAgentNetwork(base))
  else if (base is TFhirAuditEventSource) then
    composeAuditEventSource(xml, name,  TFhirAuditEventSource(base))
  else if (base is TFhirAuditEventEntity) then
    composeAuditEventEntity(xml, name,  TFhirAuditEventEntity(base))
  else if (base is TFhirAuditEventEntityDetail) then
    composeAuditEventEntityDetail(xml, name,  TFhirAuditEventEntityDetail(base))
  else if (base is TFhirAuditEvent) then
    composeAuditEvent(xml, name,  TFhirAuditEvent(base))
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  else if (base is TFhirBasic) then
    composeBasic(xml, name,  TFhirBasic(base))
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  else if (base is TFhirBinary) then
    composeBinary(xml, name,  TFhirBinary(base))
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
  else if (base is TFhirBiologicallyDerivedProductCollection) then
    composeBiologicallyDerivedProductCollection(xml, name,  TFhirBiologicallyDerivedProductCollection(base))
  else if (base is TFhirBiologicallyDerivedProductProcessing) then
    composeBiologicallyDerivedProductProcessing(xml, name,  TFhirBiologicallyDerivedProductProcessing(base))
  else if (base is TFhirBiologicallyDerivedProductManipulation) then
    composeBiologicallyDerivedProductManipulation(xml, name,  TFhirBiologicallyDerivedProductManipulation(base))
  else if (base is TFhirBiologicallyDerivedProductStorage) then
    composeBiologicallyDerivedProductStorage(xml, name,  TFhirBiologicallyDerivedProductStorage(base))
  else if (base is TFhirBiologicallyDerivedProduct) then
    composeBiologicallyDerivedProduct(xml, name,  TFhirBiologicallyDerivedProduct(base))
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
  else if (base is TFhirBodyStructure) then
    composeBodyStructure(xml, name,  TFhirBodyStructure(base))
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
  else if (base is TFhirBundleLink) then
    composeBundleLink(xml, name,  TFhirBundleLink(base))
  else if (base is TFhirBundleEntry) then
    composeBundleEntry(xml, name,  TFhirBundleEntry(base))
  else if (base is TFhirBundleEntrySearch) then
    composeBundleEntrySearch(xml, name,  TFhirBundleEntrySearch(base))
  else if (base is TFhirBundleEntryRequest) then
    composeBundleEntryRequest(xml, name,  TFhirBundleEntryRequest(base))
  else if (base is TFhirBundleEntryResponse) then
    composeBundleEntryResponse(xml, name,  TFhirBundleEntryResponse(base))
  else if (base is TFhirBundle) then
    composeBundle(xml, name,  TFhirBundle(base))
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  else if (base is TFhirCapabilityStatementSoftware) then
    composeCapabilityStatementSoftware(xml, name,  TFhirCapabilityStatementSoftware(base))
  else if (base is TFhirCapabilityStatementImplementation) then
    composeCapabilityStatementImplementation(xml, name,  TFhirCapabilityStatementImplementation(base))
  else if (base is TFhirCapabilityStatementRest) then
    composeCapabilityStatementRest(xml, name,  TFhirCapabilityStatementRest(base))
  else if (base is TFhirCapabilityStatementRestSecurity) then
    composeCapabilityStatementRestSecurity(xml, name,  TFhirCapabilityStatementRestSecurity(base))
  else if (base is TFhirCapabilityStatementRestResource) then
    composeCapabilityStatementRestResource(xml, name,  TFhirCapabilityStatementRestResource(base))
  else if (base is TFhirCapabilityStatementRestResourceInteraction) then
    composeCapabilityStatementRestResourceInteraction(xml, name,  TFhirCapabilityStatementRestResourceInteraction(base))
  else if (base is TFhirCapabilityStatementRestResourceSearchParam) then
    composeCapabilityStatementRestResourceSearchParam(xml, name,  TFhirCapabilityStatementRestResourceSearchParam(base))
  else if (base is TFhirCapabilityStatementRestResourceOperation) then
    composeCapabilityStatementRestResourceOperation(xml, name,  TFhirCapabilityStatementRestResourceOperation(base))
  else if (base is TFhirCapabilityStatementRestInteraction) then
    composeCapabilityStatementRestInteraction(xml, name,  TFhirCapabilityStatementRestInteraction(base))
  else if (base is TFhirCapabilityStatementMessaging) then
    composeCapabilityStatementMessaging(xml, name,  TFhirCapabilityStatementMessaging(base))
  else if (base is TFhirCapabilityStatementMessagingEndpoint) then
    composeCapabilityStatementMessagingEndpoint(xml, name,  TFhirCapabilityStatementMessagingEndpoint(base))
  else if (base is TFhirCapabilityStatementMessagingSupportedMessage) then
    composeCapabilityStatementMessagingSupportedMessage(xml, name,  TFhirCapabilityStatementMessagingSupportedMessage(base))
  else if (base is TFhirCapabilityStatementDocument) then
    composeCapabilityStatementDocument(xml, name,  TFhirCapabilityStatementDocument(base))
  else if (base is TFhirCapabilityStatement) then
    composeCapabilityStatement(xml, name,  TFhirCapabilityStatement(base))
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAREPLAN}
  else if (base is TFhirCarePlanActivity) then
    composeCarePlanActivity(xml, name,  TFhirCarePlanActivity(base))
  else if (base is TFhirCarePlanActivityDetail) then
    composeCarePlanActivityDetail(xml, name,  TFhirCarePlanActivityDetail(base))
  else if (base is TFhirCarePlan) then
    composeCarePlan(xml, name,  TFhirCarePlan(base))
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  else if (base is TFhirCareTeamParticipant) then
    composeCareTeamParticipant(xml, name,  TFhirCareTeamParticipant(base))
  else if (base is TFhirCareTeam) then
    composeCareTeam(xml, name,  TFhirCareTeam(base))
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
  else if (base is TFhirCatalogEntryRelatedEntry) then
    composeCatalogEntryRelatedEntry(xml, name,  TFhirCatalogEntryRelatedEntry(base))
  else if (base is TFhirCatalogEntry) then
    composeCatalogEntry(xml, name,  TFhirCatalogEntry(base))
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
  else if (base is TFhirChargeItemPerformer) then
    composeChargeItemPerformer(xml, name,  TFhirChargeItemPerformer(base))
  else if (base is TFhirChargeItem) then
    composeChargeItem(xml, name,  TFhirChargeItem(base))
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
  else if (base is TFhirChargeItemDefinitionApplicability) then
    composeChargeItemDefinitionApplicability(xml, name,  TFhirChargeItemDefinitionApplicability(base))
  else if (base is TFhirChargeItemDefinitionPropertyGroup) then
    composeChargeItemDefinitionPropertyGroup(xml, name,  TFhirChargeItemDefinitionPropertyGroup(base))
  else if (base is TFhirChargeItemDefinitionPropertyGroupPriceComponent) then
    composeChargeItemDefinitionPropertyGroupPriceComponent(xml, name,  TFhirChargeItemDefinitionPropertyGroupPriceComponent(base))
  else if (base is TFhirChargeItemDefinition) then
    composeChargeItemDefinition(xml, name,  TFhirChargeItemDefinition(base))
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CLAIM}
  else if (base is TFhirClaimRelated) then
    composeClaimRelated(xml, name,  TFhirClaimRelated(base))
  else if (base is TFhirClaimPayee) then
    composeClaimPayee(xml, name,  TFhirClaimPayee(base))
  else if (base is TFhirClaimCareTeam) then
    composeClaimCareTeam(xml, name,  TFhirClaimCareTeam(base))
  else if (base is TFhirClaimSupportingInfo) then
    composeClaimSupportingInfo(xml, name,  TFhirClaimSupportingInfo(base))
  else if (base is TFhirClaimDiagnosis) then
    composeClaimDiagnosis(xml, name,  TFhirClaimDiagnosis(base))
  else if (base is TFhirClaimProcedure) then
    composeClaimProcedure(xml, name,  TFhirClaimProcedure(base))
  else if (base is TFhirClaimInsurance) then
    composeClaimInsurance(xml, name,  TFhirClaimInsurance(base))
  else if (base is TFhirClaimAccident) then
    composeClaimAccident(xml, name,  TFhirClaimAccident(base))
  else if (base is TFhirClaimItem) then
    composeClaimItem(xml, name,  TFhirClaimItem(base))
  else if (base is TFhirClaimItemDetail) then
    composeClaimItemDetail(xml, name,  TFhirClaimItemDetail(base))
  else if (base is TFhirClaimItemDetailSubDetail) then
    composeClaimItemDetailSubDetail(xml, name,  TFhirClaimItemDetailSubDetail(base))
  else if (base is TFhirClaim) then
    composeClaim(xml, name,  TFhirClaim(base))
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  else if (base is TFhirClaimResponseItem) then
    composeClaimResponseItem(xml, name,  TFhirClaimResponseItem(base))
  else if (base is TFhirClaimResponseItemAdjudication) then
    composeClaimResponseItemAdjudication(xml, name,  TFhirClaimResponseItemAdjudication(base))
  else if (base is TFhirClaimResponseItemDetail) then
    composeClaimResponseItemDetail(xml, name,  TFhirClaimResponseItemDetail(base))
  else if (base is TFhirClaimResponseItemDetailSubDetail) then
    composeClaimResponseItemDetailSubDetail(xml, name,  TFhirClaimResponseItemDetailSubDetail(base))
  else if (base is TFhirClaimResponseAddItem) then
    composeClaimResponseAddItem(xml, name,  TFhirClaimResponseAddItem(base))
  else if (base is TFhirClaimResponseAddItemDetail) then
    composeClaimResponseAddItemDetail(xml, name,  TFhirClaimResponseAddItemDetail(base))
  else if (base is TFhirClaimResponseAddItemDetailSubDetail) then
    composeClaimResponseAddItemDetailSubDetail(xml, name,  TFhirClaimResponseAddItemDetailSubDetail(base))
  else if (base is TFhirClaimResponseTotal) then
    composeClaimResponseTotal(xml, name,  TFhirClaimResponseTotal(base))
  else if (base is TFhirClaimResponsePayment) then
    composeClaimResponsePayment(xml, name,  TFhirClaimResponsePayment(base))
  else if (base is TFhirClaimResponseProcessNote) then
    composeClaimResponseProcessNote(xml, name,  TFhirClaimResponseProcessNote(base))
  else if (base is TFhirClaimResponseInsurance) then
    composeClaimResponseInsurance(xml, name,  TFhirClaimResponseInsurance(base))
  else if (base is TFhirClaimResponseError) then
    composeClaimResponseError(xml, name,  TFhirClaimResponseError(base))
  else if (base is TFhirClaimResponse) then
    composeClaimResponse(xml, name,  TFhirClaimResponse(base))
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  else if (base is TFhirClinicalImpressionInvestigation) then
    composeClinicalImpressionInvestigation(xml, name,  TFhirClinicalImpressionInvestigation(base))
  else if (base is TFhirClinicalImpressionFinding) then
    composeClinicalImpressionFinding(xml, name,  TFhirClinicalImpressionFinding(base))
  else if (base is TFhirClinicalImpression) then
    composeClinicalImpression(xml, name,  TFhirClinicalImpression(base))
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CODESYSTEM}
  else if (base is TFhirCodeSystemFilter) then
    composeCodeSystemFilter(xml, name,  TFhirCodeSystemFilter(base))
  else if (base is TFhirCodeSystemProperty) then
    composeCodeSystemProperty(xml, name,  TFhirCodeSystemProperty(base))
  else if (base is TFhirCodeSystemConcept) then
    composeCodeSystemConcept(xml, name,  TFhirCodeSystemConcept(base))
  else if (base is TFhirCodeSystemConceptDesignation) then
    composeCodeSystemConceptDesignation(xml, name,  TFhirCodeSystemConceptDesignation(base))
  else if (base is TFhirCodeSystemConceptProperty) then
    composeCodeSystemConceptProperty(xml, name,  TFhirCodeSystemConceptProperty(base))
  else if (base is TFhirCodeSystem) then
    composeCodeSystem(xml, name,  TFhirCodeSystem(base))
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  else if (base is TFhirCommunicationPayload) then
    composeCommunicationPayload(xml, name,  TFhirCommunicationPayload(base))
  else if (base is TFhirCommunication) then
    composeCommunication(xml, name,  TFhirCommunication(base))
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  else if (base is TFhirCommunicationRequestPayload) then
    composeCommunicationRequestPayload(xml, name,  TFhirCommunicationRequestPayload(base))
  else if (base is TFhirCommunicationRequest) then
    composeCommunicationRequest(xml, name,  TFhirCommunicationRequest(base))
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  else if (base is TFhirCompartmentDefinitionResource) then
    composeCompartmentDefinitionResource(xml, name,  TFhirCompartmentDefinitionResource(base))
  else if (base is TFhirCompartmentDefinition) then
    composeCompartmentDefinition(xml, name,  TFhirCompartmentDefinition(base))
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  else if (base is TFhirCompositionAttester) then
    composeCompositionAttester(xml, name,  TFhirCompositionAttester(base))
  else if (base is TFhirCompositionRelatesTo) then
    composeCompositionRelatesTo(xml, name,  TFhirCompositionRelatesTo(base))
  else if (base is TFhirCompositionEvent) then
    composeCompositionEvent(xml, name,  TFhirCompositionEvent(base))
  else if (base is TFhirCompositionSection) then
    composeCompositionSection(xml, name,  TFhirCompositionSection(base))
  else if (base is TFhirComposition) then
    composeComposition(xml, name,  TFhirComposition(base))
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  else if (base is TFhirConceptMapGroup) then
    composeConceptMapGroup(xml, name,  TFhirConceptMapGroup(base))
  else if (base is TFhirConceptMapGroupElement) then
    composeConceptMapGroupElement(xml, name,  TFhirConceptMapGroupElement(base))
  else if (base is TFhirConceptMapGroupElementTarget) then
    composeConceptMapGroupElementTarget(xml, name,  TFhirConceptMapGroupElementTarget(base))
  else if (base is TFhirConceptMapGroupElementTargetDependsOn) then
    composeConceptMapGroupElementTargetDependsOn(xml, name,  TFhirConceptMapGroupElementTargetDependsOn(base))
  else if (base is TFhirConceptMapGroupUnmapped) then
    composeConceptMapGroupUnmapped(xml, name,  TFhirConceptMapGroupUnmapped(base))
  else if (base is TFhirConceptMap) then
    composeConceptMap(xml, name,  TFhirConceptMap(base))
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  else if (base is TFhirConditionStage) then
    composeConditionStage(xml, name,  TFhirConditionStage(base))
  else if (base is TFhirConditionEvidence) then
    composeConditionEvidence(xml, name,  TFhirConditionEvidence(base))
  else if (base is TFhirCondition) then
    composeCondition(xml, name,  TFhirCondition(base))
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONSENT}
  else if (base is TFhirConsentPolicy) then
    composeConsentPolicy(xml, name,  TFhirConsentPolicy(base))
  else if (base is TFhirConsentVerification) then
    composeConsentVerification(xml, name,  TFhirConsentVerification(base))
  else if (base is TFhirConsentProvision) then
    composeConsentProvision(xml, name,  TFhirConsentProvision(base))
  else if (base is TFhirConsentProvisionActor) then
    composeConsentProvisionActor(xml, name,  TFhirConsentProvisionActor(base))
  else if (base is TFhirConsentProvisionData) then
    composeConsentProvisionData(xml, name,  TFhirConsentProvisionData(base))
  else if (base is TFhirConsent) then
    composeConsent(xml, name,  TFhirConsent(base))
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  else if (base is TFhirContractContentDefinition) then
    composeContractContentDefinition(xml, name,  TFhirContractContentDefinition(base))
  else if (base is TFhirContractTerm) then
    composeContractTerm(xml, name,  TFhirContractTerm(base))
  else if (base is TFhirContractTermSecurityLabel) then
    composeContractTermSecurityLabel(xml, name,  TFhirContractTermSecurityLabel(base))
  else if (base is TFhirContractTermOffer) then
    composeContractTermOffer(xml, name,  TFhirContractTermOffer(base))
  else if (base is TFhirContractTermOfferParty) then
    composeContractTermOfferParty(xml, name,  TFhirContractTermOfferParty(base))
  else if (base is TFhirContractTermOfferAnswer) then
    composeContractTermOfferAnswer(xml, name,  TFhirContractTermOfferAnswer(base))
  else if (base is TFhirContractTermAsset) then
    composeContractTermAsset(xml, name,  TFhirContractTermAsset(base))
  else if (base is TFhirContractTermAssetContext) then
    composeContractTermAssetContext(xml, name,  TFhirContractTermAssetContext(base))
  else if (base is TFhirContractTermAssetValuedItem) then
    composeContractTermAssetValuedItem(xml, name,  TFhirContractTermAssetValuedItem(base))
  else if (base is TFhirContractTermAction) then
    composeContractTermAction(xml, name,  TFhirContractTermAction(base))
  else if (base is TFhirContractTermActionSubject) then
    composeContractTermActionSubject(xml, name,  TFhirContractTermActionSubject(base))
  else if (base is TFhirContractSigner) then
    composeContractSigner(xml, name,  TFhirContractSigner(base))
  else if (base is TFhirContractFriendly) then
    composeContractFriendly(xml, name,  TFhirContractFriendly(base))
  else if (base is TFhirContractLegal) then
    composeContractLegal(xml, name,  TFhirContractLegal(base))
  else if (base is TFhirContractRule) then
    composeContractRule(xml, name,  TFhirContractRule(base))
  else if (base is TFhirContract) then
    composeContract(xml, name,  TFhirContract(base))
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  else if (base is TFhirCoverageClass) then
    composeCoverageClass(xml, name,  TFhirCoverageClass(base))
  else if (base is TFhirCoverageCostToBeneficiary) then
    composeCoverageCostToBeneficiary(xml, name,  TFhirCoverageCostToBeneficiary(base))
  else if (base is TFhirCoverageCostToBeneficiaryException) then
    composeCoverageCostToBeneficiaryException(xml, name,  TFhirCoverageCostToBeneficiaryException(base))
  else if (base is TFhirCoverage) then
    composeCoverage(xml, name,  TFhirCoverage(base))
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
  else if (base is TFhirCoverageEligibilityRequestSupportingInfo) then
    composeCoverageEligibilityRequestSupportingInfo(xml, name,  TFhirCoverageEligibilityRequestSupportingInfo(base))
  else if (base is TFhirCoverageEligibilityRequestInsurance) then
    composeCoverageEligibilityRequestInsurance(xml, name,  TFhirCoverageEligibilityRequestInsurance(base))
  else if (base is TFhirCoverageEligibilityRequestItem) then
    composeCoverageEligibilityRequestItem(xml, name,  TFhirCoverageEligibilityRequestItem(base))
  else if (base is TFhirCoverageEligibilityRequestItemDiagnosis) then
    composeCoverageEligibilityRequestItemDiagnosis(xml, name,  TFhirCoverageEligibilityRequestItemDiagnosis(base))
  else if (base is TFhirCoverageEligibilityRequest) then
    composeCoverageEligibilityRequest(xml, name,  TFhirCoverageEligibilityRequest(base))
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
  else if (base is TFhirCoverageEligibilityResponseInsurance) then
    composeCoverageEligibilityResponseInsurance(xml, name,  TFhirCoverageEligibilityResponseInsurance(base))
  else if (base is TFhirCoverageEligibilityResponseInsuranceItem) then
    composeCoverageEligibilityResponseInsuranceItem(xml, name,  TFhirCoverageEligibilityResponseInsuranceItem(base))
  else if (base is TFhirCoverageEligibilityResponseInsuranceItemBenefit) then
    composeCoverageEligibilityResponseInsuranceItemBenefit(xml, name,  TFhirCoverageEligibilityResponseInsuranceItemBenefit(base))
  else if (base is TFhirCoverageEligibilityResponseError) then
    composeCoverageEligibilityResponseError(xml, name,  TFhirCoverageEligibilityResponseError(base))
  else if (base is TFhirCoverageEligibilityResponse) then
    composeCoverageEligibilityResponse(xml, name,  TFhirCoverageEligibilityResponse(base))
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
  else if (base is TFhirDetectedIssueEvidence) then
    composeDetectedIssueEvidence(xml, name,  TFhirDetectedIssueEvidence(base))
  else if (base is TFhirDetectedIssueMitigation) then
    composeDetectedIssueMitigation(xml, name,  TFhirDetectedIssueMitigation(base))
  else if (base is TFhirDetectedIssue) then
    composeDetectedIssue(xml, name,  TFhirDetectedIssue(base))
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  else if (base is TFhirDeviceUdiCarrier) then
    composeDeviceUdiCarrier(xml, name,  TFhirDeviceUdiCarrier(base))
  else if (base is TFhirDeviceDeviceName) then
    composeDeviceDeviceName(xml, name,  TFhirDeviceDeviceName(base))
  else if (base is TFhirDeviceSpecialization) then
    composeDeviceSpecialization(xml, name,  TFhirDeviceSpecialization(base))
  else if (base is TFhirDeviceVersion) then
    composeDeviceVersion(xml, name,  TFhirDeviceVersion(base))
  else if (base is TFhirDeviceProperty) then
    composeDeviceProperty(xml, name,  TFhirDeviceProperty(base))
  else if (base is TFhirDevice) then
    composeDevice(xml, name,  TFhirDevice(base))
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
  else if (base is TFhirDeviceDefinitionUdiDeviceIdentifier) then
    composeDeviceDefinitionUdiDeviceIdentifier(xml, name,  TFhirDeviceDefinitionUdiDeviceIdentifier(base))
  else if (base is TFhirDeviceDefinitionDeviceName) then
    composeDeviceDefinitionDeviceName(xml, name,  TFhirDeviceDefinitionDeviceName(base))
  else if (base is TFhirDeviceDefinitionSpecialization) then
    composeDeviceDefinitionSpecialization(xml, name,  TFhirDeviceDefinitionSpecialization(base))
  else if (base is TFhirDeviceDefinitionCapability) then
    composeDeviceDefinitionCapability(xml, name,  TFhirDeviceDefinitionCapability(base))
  else if (base is TFhirDeviceDefinitionProperty) then
    composeDeviceDefinitionProperty(xml, name,  TFhirDeviceDefinitionProperty(base))
  else if (base is TFhirDeviceDefinitionMaterial) then
    composeDeviceDefinitionMaterial(xml, name,  TFhirDeviceDefinitionMaterial(base))
  else if (base is TFhirDeviceDefinition) then
    composeDeviceDefinition(xml, name,  TFhirDeviceDefinition(base))
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
  else if (base is TFhirDeviceMetricCalibration) then
    composeDeviceMetricCalibration(xml, name,  TFhirDeviceMetricCalibration(base))
  else if (base is TFhirDeviceMetric) then
    composeDeviceMetric(xml, name,  TFhirDeviceMetric(base))
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  else if (base is TFhirDeviceRequestParameter) then
    composeDeviceRequestParameter(xml, name,  TFhirDeviceRequestParameter(base))
  else if (base is TFhirDeviceRequest) then
    composeDeviceRequest(xml, name,  TFhirDeviceRequest(base))
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  else if (base is TFhirDeviceUseStatement) then
    composeDeviceUseStatement(xml, name,  TFhirDeviceUseStatement(base))
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  else if (base is TFhirDiagnosticReportMedia) then
    composeDiagnosticReportMedia(xml, name,  TFhirDiagnosticReportMedia(base))
  else if (base is TFhirDiagnosticReport) then
    composeDiagnosticReport(xml, name,  TFhirDiagnosticReport(base))
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  else if (base is TFhirDocumentManifestRelated) then
    composeDocumentManifestRelated(xml, name,  TFhirDocumentManifestRelated(base))
  else if (base is TFhirDocumentManifest) then
    composeDocumentManifest(xml, name,  TFhirDocumentManifest(base))
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  else if (base is TFhirDocumentReferenceRelatesTo) then
    composeDocumentReferenceRelatesTo(xml, name,  TFhirDocumentReferenceRelatesTo(base))
  else if (base is TFhirDocumentReferenceContent) then
    composeDocumentReferenceContent(xml, name,  TFhirDocumentReferenceContent(base))
  else if (base is TFhirDocumentReferenceContext) then
    composeDocumentReferenceContext(xml, name,  TFhirDocumentReferenceContext(base))
  else if (base is TFhirDocumentReference) then
    composeDocumentReference(xml, name,  TFhirDocumentReference(base))
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_EFFECTEVIDENCESYNTHESIS}
  else if (base is TFhirEffectEvidenceSynthesisSampleSize) then
    composeEffectEvidenceSynthesisSampleSize(xml, name,  TFhirEffectEvidenceSynthesisSampleSize(base))
  else if (base is TFhirEffectEvidenceSynthesisResultsByExposure) then
    composeEffectEvidenceSynthesisResultsByExposure(xml, name,  TFhirEffectEvidenceSynthesisResultsByExposure(base))
  else if (base is TFhirEffectEvidenceSynthesisEffectEstimate) then
    composeEffectEvidenceSynthesisEffectEstimate(xml, name,  TFhirEffectEvidenceSynthesisEffectEstimate(base))
  else if (base is TFhirEffectEvidenceSynthesisEffectEstimatePrecisionEstimate) then
    composeEffectEvidenceSynthesisEffectEstimatePrecisionEstimate(xml, name,  TFhirEffectEvidenceSynthesisEffectEstimatePrecisionEstimate(base))
  else if (base is TFhirEffectEvidenceSynthesisCertainty) then
    composeEffectEvidenceSynthesisCertainty(xml, name,  TFhirEffectEvidenceSynthesisCertainty(base))
  else if (base is TFhirEffectEvidenceSynthesisCertaintyCertaintySubcomponent) then
    composeEffectEvidenceSynthesisCertaintyCertaintySubcomponent(xml, name,  TFhirEffectEvidenceSynthesisCertaintyCertaintySubcomponent(base))
  else if (base is TFhirEffectEvidenceSynthesis) then
    composeEffectEvidenceSynthesis(xml, name,  TFhirEffectEvidenceSynthesis(base))
{$ENDIF FHIR_EFFECTEVIDENCESYNTHESIS}
{$IFDEF FHIR_ENCOUNTER}
  else if (base is TFhirEncounterStatusHistory) then
    composeEncounterStatusHistory(xml, name,  TFhirEncounterStatusHistory(base))
  else if (base is TFhirEncounterClassHistory) then
    composeEncounterClassHistory(xml, name,  TFhirEncounterClassHistory(base))
  else if (base is TFhirEncounterParticipant) then
    composeEncounterParticipant(xml, name,  TFhirEncounterParticipant(base))
  else if (base is TFhirEncounterDiagnosis) then
    composeEncounterDiagnosis(xml, name,  TFhirEncounterDiagnosis(base))
  else if (base is TFhirEncounterHospitalization) then
    composeEncounterHospitalization(xml, name,  TFhirEncounterHospitalization(base))
  else if (base is TFhirEncounterLocation) then
    composeEncounterLocation(xml, name,  TFhirEncounterLocation(base))
  else if (base is TFhirEncounter) then
    composeEncounter(xml, name,  TFhirEncounter(base))
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  else if (base is TFhirEndpoint) then
    composeEndpoint(xml, name,  TFhirEndpoint(base))
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  else if (base is TFhirEnrollmentRequest) then
    composeEnrollmentRequest(xml, name,  TFhirEnrollmentRequest(base))
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  else if (base is TFhirEnrollmentResponse) then
    composeEnrollmentResponse(xml, name,  TFhirEnrollmentResponse(base))
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
  else if (base is TFhirEpisodeOfCareStatusHistory) then
    composeEpisodeOfCareStatusHistory(xml, name,  TFhirEpisodeOfCareStatusHistory(base))
  else if (base is TFhirEpisodeOfCareDiagnosis) then
    composeEpisodeOfCareDiagnosis(xml, name,  TFhirEpisodeOfCareDiagnosis(base))
  else if (base is TFhirEpisodeOfCare) then
    composeEpisodeOfCare(xml, name,  TFhirEpisodeOfCare(base))
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
  else if (base is TFhirEventDefinition) then
    composeEventDefinition(xml, name,  TFhirEventDefinition(base))
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
  else if (base is TFhirEvidence) then
    composeEvidence(xml, name,  TFhirEvidence(base))
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEVARIABLE}
  else if (base is TFhirEvidenceVariableCharacteristic) then
    composeEvidenceVariableCharacteristic(xml, name,  TFhirEvidenceVariableCharacteristic(base))
  else if (base is TFhirEvidenceVariable) then
    composeEvidenceVariable(xml, name,  TFhirEvidenceVariable(base))
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
  else if (base is TFhirExampleScenarioActor) then
    composeExampleScenarioActor(xml, name,  TFhirExampleScenarioActor(base))
  else if (base is TFhirExampleScenarioInstance) then
    composeExampleScenarioInstance(xml, name,  TFhirExampleScenarioInstance(base))
  else if (base is TFhirExampleScenarioInstanceVersion) then
    composeExampleScenarioInstanceVersion(xml, name,  TFhirExampleScenarioInstanceVersion(base))
  else if (base is TFhirExampleScenarioInstanceContainedInstance) then
    composeExampleScenarioInstanceContainedInstance(xml, name,  TFhirExampleScenarioInstanceContainedInstance(base))
  else if (base is TFhirExampleScenarioProcess) then
    composeExampleScenarioProcess(xml, name,  TFhirExampleScenarioProcess(base))
  else if (base is TFhirExampleScenarioProcessStep) then
    composeExampleScenarioProcessStep(xml, name,  TFhirExampleScenarioProcessStep(base))
  else if (base is TFhirExampleScenarioProcessStepOperation) then
    composeExampleScenarioProcessStepOperation(xml, name,  TFhirExampleScenarioProcessStepOperation(base))
  else if (base is TFhirExampleScenarioProcessStepAlternative) then
    composeExampleScenarioProcessStepAlternative(xml, name,  TFhirExampleScenarioProcessStepAlternative(base))
  else if (base is TFhirExampleScenario) then
    composeExampleScenario(xml, name,  TFhirExampleScenario(base))
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  else if (base is TFhirExplanationOfBenefitRelated) then
    composeExplanationOfBenefitRelated(xml, name,  TFhirExplanationOfBenefitRelated(base))
  else if (base is TFhirExplanationOfBenefitPayee) then
    composeExplanationOfBenefitPayee(xml, name,  TFhirExplanationOfBenefitPayee(base))
  else if (base is TFhirExplanationOfBenefitCareTeam) then
    composeExplanationOfBenefitCareTeam(xml, name,  TFhirExplanationOfBenefitCareTeam(base))
  else if (base is TFhirExplanationOfBenefitSupportingInfo) then
    composeExplanationOfBenefitSupportingInfo(xml, name,  TFhirExplanationOfBenefitSupportingInfo(base))
  else if (base is TFhirExplanationOfBenefitDiagnosis) then
    composeExplanationOfBenefitDiagnosis(xml, name,  TFhirExplanationOfBenefitDiagnosis(base))
  else if (base is TFhirExplanationOfBenefitProcedure) then
    composeExplanationOfBenefitProcedure(xml, name,  TFhirExplanationOfBenefitProcedure(base))
  else if (base is TFhirExplanationOfBenefitInsurance) then
    composeExplanationOfBenefitInsurance(xml, name,  TFhirExplanationOfBenefitInsurance(base))
  else if (base is TFhirExplanationOfBenefitAccident) then
    composeExplanationOfBenefitAccident(xml, name,  TFhirExplanationOfBenefitAccident(base))
  else if (base is TFhirExplanationOfBenefitItem) then
    composeExplanationOfBenefitItem(xml, name,  TFhirExplanationOfBenefitItem(base))
  else if (base is TFhirExplanationOfBenefitItemAdjudication) then
    composeExplanationOfBenefitItemAdjudication(xml, name,  TFhirExplanationOfBenefitItemAdjudication(base))
  else if (base is TFhirExplanationOfBenefitItemDetail) then
    composeExplanationOfBenefitItemDetail(xml, name,  TFhirExplanationOfBenefitItemDetail(base))
  else if (base is TFhirExplanationOfBenefitItemDetailSubDetail) then
    composeExplanationOfBenefitItemDetailSubDetail(xml, name,  TFhirExplanationOfBenefitItemDetailSubDetail(base))
  else if (base is TFhirExplanationOfBenefitAddItem) then
    composeExplanationOfBenefitAddItem(xml, name,  TFhirExplanationOfBenefitAddItem(base))
  else if (base is TFhirExplanationOfBenefitAddItemDetail) then
    composeExplanationOfBenefitAddItemDetail(xml, name,  TFhirExplanationOfBenefitAddItemDetail(base))
  else if (base is TFhirExplanationOfBenefitAddItemDetailSubDetail) then
    composeExplanationOfBenefitAddItemDetailSubDetail(xml, name,  TFhirExplanationOfBenefitAddItemDetailSubDetail(base))
  else if (base is TFhirExplanationOfBenefitTotal) then
    composeExplanationOfBenefitTotal(xml, name,  TFhirExplanationOfBenefitTotal(base))
  else if (base is TFhirExplanationOfBenefitPayment) then
    composeExplanationOfBenefitPayment(xml, name,  TFhirExplanationOfBenefitPayment(base))
  else if (base is TFhirExplanationOfBenefitProcessNote) then
    composeExplanationOfBenefitProcessNote(xml, name,  TFhirExplanationOfBenefitProcessNote(base))
  else if (base is TFhirExplanationOfBenefitBenefitBalance) then
    composeExplanationOfBenefitBenefitBalance(xml, name,  TFhirExplanationOfBenefitBenefitBalance(base))
  else if (base is TFhirExplanationOfBenefitBenefitBalanceFinancial) then
    composeExplanationOfBenefitBenefitBalanceFinancial(xml, name,  TFhirExplanationOfBenefitBenefitBalanceFinancial(base))
  else if (base is TFhirExplanationOfBenefit) then
    composeExplanationOfBenefit(xml, name,  TFhirExplanationOfBenefit(base))
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  else if (base is TFhirFamilyMemberHistoryCondition) then
    composeFamilyMemberHistoryCondition(xml, name,  TFhirFamilyMemberHistoryCondition(base))
  else if (base is TFhirFamilyMemberHistory) then
    composeFamilyMemberHistory(xml, name,  TFhirFamilyMemberHistory(base))
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  else if (base is TFhirFlag) then
    composeFlag(xml, name,  TFhirFlag(base))
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  else if (base is TFhirGoalTarget) then
    composeGoalTarget(xml, name,  TFhirGoalTarget(base))
  else if (base is TFhirGoal) then
    composeGoal(xml, name,  TFhirGoal(base))
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  else if (base is TFhirGraphDefinitionLink) then
    composeGraphDefinitionLink(xml, name,  TFhirGraphDefinitionLink(base))
  else if (base is TFhirGraphDefinitionLinkTarget) then
    composeGraphDefinitionLinkTarget(xml, name,  TFhirGraphDefinitionLinkTarget(base))
  else if (base is TFhirGraphDefinitionLinkTargetCompartment) then
    composeGraphDefinitionLinkTargetCompartment(xml, name,  TFhirGraphDefinitionLinkTargetCompartment(base))
  else if (base is TFhirGraphDefinition) then
    composeGraphDefinition(xml, name,  TFhirGraphDefinition(base))
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  else if (base is TFhirGroupCharacteristic) then
    composeGroupCharacteristic(xml, name,  TFhirGroupCharacteristic(base))
  else if (base is TFhirGroupMember) then
    composeGroupMember(xml, name,  TFhirGroupMember(base))
  else if (base is TFhirGroup) then
    composeGroup(xml, name,  TFhirGroup(base))
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  else if (base is TFhirGuidanceResponse) then
    composeGuidanceResponse(xml, name,  TFhirGuidanceResponse(base))
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  else if (base is TFhirHealthcareServiceEligibility) then
    composeHealthcareServiceEligibility(xml, name,  TFhirHealthcareServiceEligibility(base))
  else if (base is TFhirHealthcareServiceAvailableTime) then
    composeHealthcareServiceAvailableTime(xml, name,  TFhirHealthcareServiceAvailableTime(base))
  else if (base is TFhirHealthcareServiceNotAvailable) then
    composeHealthcareServiceNotAvailable(xml, name,  TFhirHealthcareServiceNotAvailable(base))
  else if (base is TFhirHealthcareService) then
    composeHealthcareService(xml, name,  TFhirHealthcareService(base))
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
  else if (base is TFhirImagingStudySeries) then
    composeImagingStudySeries(xml, name,  TFhirImagingStudySeries(base))
  else if (base is TFhirImagingStudySeriesPerformer) then
    composeImagingStudySeriesPerformer(xml, name,  TFhirImagingStudySeriesPerformer(base))
  else if (base is TFhirImagingStudySeriesInstance) then
    composeImagingStudySeriesInstance(xml, name,  TFhirImagingStudySeriesInstance(base))
  else if (base is TFhirImagingStudy) then
    composeImagingStudy(xml, name,  TFhirImagingStudy(base))
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  else if (base is TFhirImmunizationPerformer) then
    composeImmunizationPerformer(xml, name,  TFhirImmunizationPerformer(base))
  else if (base is TFhirImmunizationEducation) then
    composeImmunizationEducation(xml, name,  TFhirImmunizationEducation(base))
  else if (base is TFhirImmunizationReaction) then
    composeImmunizationReaction(xml, name,  TFhirImmunizationReaction(base))
  else if (base is TFhirImmunizationProtocolApplied) then
    composeImmunizationProtocolApplied(xml, name,  TFhirImmunizationProtocolApplied(base))
  else if (base is TFhirImmunization) then
    composeImmunization(xml, name,  TFhirImmunization(base))
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
  else if (base is TFhirImmunizationEvaluation) then
    composeImmunizationEvaluation(xml, name,  TFhirImmunizationEvaluation(base))
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  else if (base is TFhirImmunizationRecommendationRecommendation) then
    composeImmunizationRecommendationRecommendation(xml, name,  TFhirImmunizationRecommendationRecommendation(base))
  else if (base is TFhirImmunizationRecommendationRecommendationDateCriterion) then
    composeImmunizationRecommendationRecommendationDateCriterion(xml, name,  TFhirImmunizationRecommendationRecommendationDateCriterion(base))
  else if (base is TFhirImmunizationRecommendation) then
    composeImmunizationRecommendation(xml, name,  TFhirImmunizationRecommendation(base))
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  else if (base is TFhirImplementationGuideDependsOn) then
    composeImplementationGuideDependsOn(xml, name,  TFhirImplementationGuideDependsOn(base))
  else if (base is TFhirImplementationGuideGlobal) then
    composeImplementationGuideGlobal(xml, name,  TFhirImplementationGuideGlobal(base))
  else if (base is TFhirImplementationGuideDefinition) then
    composeImplementationGuideDefinition(xml, name,  TFhirImplementationGuideDefinition(base))
  else if (base is TFhirImplementationGuideDefinitionGrouping) then
    composeImplementationGuideDefinitionGrouping(xml, name,  TFhirImplementationGuideDefinitionGrouping(base))
  else if (base is TFhirImplementationGuideDefinitionResource) then
    composeImplementationGuideDefinitionResource(xml, name,  TFhirImplementationGuideDefinitionResource(base))
  else if (base is TFhirImplementationGuideDefinitionPage) then
    composeImplementationGuideDefinitionPage(xml, name,  TFhirImplementationGuideDefinitionPage(base))
  else if (base is TFhirImplementationGuideDefinitionParameter) then
    composeImplementationGuideDefinitionParameter(xml, name,  TFhirImplementationGuideDefinitionParameter(base))
  else if (base is TFhirImplementationGuideDefinitionTemplate) then
    composeImplementationGuideDefinitionTemplate(xml, name,  TFhirImplementationGuideDefinitionTemplate(base))
  else if (base is TFhirImplementationGuideManifest) then
    composeImplementationGuideManifest(xml, name,  TFhirImplementationGuideManifest(base))
  else if (base is TFhirImplementationGuideManifestResource) then
    composeImplementationGuideManifestResource(xml, name,  TFhirImplementationGuideManifestResource(base))
  else if (base is TFhirImplementationGuideManifestPage) then
    composeImplementationGuideManifestPage(xml, name,  TFhirImplementationGuideManifestPage(base))
  else if (base is TFhirImplementationGuide) then
    composeImplementationGuide(xml, name,  TFhirImplementationGuide(base))
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INSURANCEPLAN}
  else if (base is TFhirInsurancePlanContact) then
    composeInsurancePlanContact(xml, name,  TFhirInsurancePlanContact(base))
  else if (base is TFhirInsurancePlanCoverage) then
    composeInsurancePlanCoverage(xml, name,  TFhirInsurancePlanCoverage(base))
  else if (base is TFhirInsurancePlanCoverageBenefit) then
    composeInsurancePlanCoverageBenefit(xml, name,  TFhirInsurancePlanCoverageBenefit(base))
  else if (base is TFhirInsurancePlanCoverageBenefitLimit) then
    composeInsurancePlanCoverageBenefitLimit(xml, name,  TFhirInsurancePlanCoverageBenefitLimit(base))
  else if (base is TFhirInsurancePlanPlan) then
    composeInsurancePlanPlan(xml, name,  TFhirInsurancePlanPlan(base))
  else if (base is TFhirInsurancePlanPlanGeneralCost) then
    composeInsurancePlanPlanGeneralCost(xml, name,  TFhirInsurancePlanPlanGeneralCost(base))
  else if (base is TFhirInsurancePlanPlanSpecificCost) then
    composeInsurancePlanPlanSpecificCost(xml, name,  TFhirInsurancePlanPlanSpecificCost(base))
  else if (base is TFhirInsurancePlanPlanSpecificCostBenefit) then
    composeInsurancePlanPlanSpecificCostBenefit(xml, name,  TFhirInsurancePlanPlanSpecificCostBenefit(base))
  else if (base is TFhirInsurancePlanPlanSpecificCostBenefitCost) then
    composeInsurancePlanPlanSpecificCostBenefitCost(xml, name,  TFhirInsurancePlanPlanSpecificCostBenefitCost(base))
  else if (base is TFhirInsurancePlan) then
    composeInsurancePlan(xml, name,  TFhirInsurancePlan(base))
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
  else if (base is TFhirInvoiceParticipant) then
    composeInvoiceParticipant(xml, name,  TFhirInvoiceParticipant(base))
  else if (base is TFhirInvoiceLineItem) then
    composeInvoiceLineItem(xml, name,  TFhirInvoiceLineItem(base))
  else if (base is TFhirInvoiceLineItemPriceComponent) then
    composeInvoiceLineItemPriceComponent(xml, name,  TFhirInvoiceLineItemPriceComponent(base))
  else if (base is TFhirInvoice) then
    composeInvoice(xml, name,  TFhirInvoice(base))
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
  else if (base is TFhirLibrary) then
    composeLibrary(xml, name,  TFhirLibrary(base))
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  else if (base is TFhirLinkageItem) then
    composeLinkageItem(xml, name,  TFhirLinkageItem(base))
  else if (base is TFhirLinkage) then
    composeLinkage(xml, name,  TFhirLinkage(base))
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  else if (base is TFhirListEntry) then
    composeListEntry(xml, name,  TFhirListEntry(base))
  else if (base is TFhirList) then
    composeList(xml, name,  TFhirList(base))
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  else if (base is TFhirLocationPosition) then
    composeLocationPosition(xml, name,  TFhirLocationPosition(base))
  else if (base is TFhirLocationHoursOfOperation) then
    composeLocationHoursOfOperation(xml, name,  TFhirLocationHoursOfOperation(base))
  else if (base is TFhirLocation) then
    composeLocation(xml, name,  TFhirLocation(base))
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MEASURE}
  else if (base is TFhirMeasureGroup) then
    composeMeasureGroup(xml, name,  TFhirMeasureGroup(base))
  else if (base is TFhirMeasureGroupPopulation) then
    composeMeasureGroupPopulation(xml, name,  TFhirMeasureGroupPopulation(base))
  else if (base is TFhirMeasureGroupStratifier) then
    composeMeasureGroupStratifier(xml, name,  TFhirMeasureGroupStratifier(base))
  else if (base is TFhirMeasureGroupStratifierComponent) then
    composeMeasureGroupStratifierComponent(xml, name,  TFhirMeasureGroupStratifierComponent(base))
  else if (base is TFhirMeasureSupplementalData) then
    composeMeasureSupplementalData(xml, name,  TFhirMeasureSupplementalData(base))
  else if (base is TFhirMeasure) then
    composeMeasure(xml, name,  TFhirMeasure(base))
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  else if (base is TFhirMeasureReportGroup) then
    composeMeasureReportGroup(xml, name,  TFhirMeasureReportGroup(base))
  else if (base is TFhirMeasureReportGroupPopulation) then
    composeMeasureReportGroupPopulation(xml, name,  TFhirMeasureReportGroupPopulation(base))
  else if (base is TFhirMeasureReportGroupStratifier) then
    composeMeasureReportGroupStratifier(xml, name,  TFhirMeasureReportGroupStratifier(base))
  else if (base is TFhirMeasureReportGroupStratifierStratum) then
    composeMeasureReportGroupStratifierStratum(xml, name,  TFhirMeasureReportGroupStratifierStratum(base))
  else if (base is TFhirMeasureReportGroupStratifierStratumComponent) then
    composeMeasureReportGroupStratifierStratumComponent(xml, name,  TFhirMeasureReportGroupStratifierStratumComponent(base))
  else if (base is TFhirMeasureReportGroupStratifierStratumPopulation) then
    composeMeasureReportGroupStratifierStratumPopulation(xml, name,  TFhirMeasureReportGroupStratifierStratumPopulation(base))
  else if (base is TFhirMeasureReport) then
    composeMeasureReport(xml, name,  TFhirMeasureReport(base))
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDIA}
  else if (base is TFhirMedia) then
    composeMedia(xml, name,  TFhirMedia(base))
{$ENDIF FHIR_MEDIA}
{$IFDEF FHIR_MEDICATION}
  else if (base is TFhirMedicationIngredient) then
    composeMedicationIngredient(xml, name,  TFhirMedicationIngredient(base))
  else if (base is TFhirMedicationBatch) then
    composeMedicationBatch(xml, name,  TFhirMedicationBatch(base))
  else if (base is TFhirMedication) then
    composeMedication(xml, name,  TFhirMedication(base))
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  else if (base is TFhirMedicationAdministrationPerformer) then
    composeMedicationAdministrationPerformer(xml, name,  TFhirMedicationAdministrationPerformer(base))
  else if (base is TFhirMedicationAdministrationDosage) then
    composeMedicationAdministrationDosage(xml, name,  TFhirMedicationAdministrationDosage(base))
  else if (base is TFhirMedicationAdministration) then
    composeMedicationAdministration(xml, name,  TFhirMedicationAdministration(base))
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  else if (base is TFhirMedicationDispensePerformer) then
    composeMedicationDispensePerformer(xml, name,  TFhirMedicationDispensePerformer(base))
  else if (base is TFhirMedicationDispenseSubstitution) then
    composeMedicationDispenseSubstitution(xml, name,  TFhirMedicationDispenseSubstitution(base))
  else if (base is TFhirMedicationDispense) then
    composeMedicationDispense(xml, name,  TFhirMedicationDispense(base))
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
  else if (base is TFhirMedicationKnowledgeRelatedMedicationKnowledge) then
    composeMedicationKnowledgeRelatedMedicationKnowledge(xml, name,  TFhirMedicationKnowledgeRelatedMedicationKnowledge(base))
  else if (base is TFhirMedicationKnowledgeMonograph) then
    composeMedicationKnowledgeMonograph(xml, name,  TFhirMedicationKnowledgeMonograph(base))
  else if (base is TFhirMedicationKnowledgeIngredient) then
    composeMedicationKnowledgeIngredient(xml, name,  TFhirMedicationKnowledgeIngredient(base))
  else if (base is TFhirMedicationKnowledgeCost) then
    composeMedicationKnowledgeCost(xml, name,  TFhirMedicationKnowledgeCost(base))
  else if (base is TFhirMedicationKnowledgeMonitoringProgram) then
    composeMedicationKnowledgeMonitoringProgram(xml, name,  TFhirMedicationKnowledgeMonitoringProgram(base))
  else if (base is TFhirMedicationKnowledgeAdministrationGuidelines) then
    composeMedicationKnowledgeAdministrationGuidelines(xml, name,  TFhirMedicationKnowledgeAdministrationGuidelines(base))
  else if (base is TFhirMedicationKnowledgeAdministrationGuidelinesDosage) then
    composeMedicationKnowledgeAdministrationGuidelinesDosage(xml, name,  TFhirMedicationKnowledgeAdministrationGuidelinesDosage(base))
  else if (base is TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics) then
    composeMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(xml, name,  TFhirMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(base))
  else if (base is TFhirMedicationKnowledgeMedicineClassification) then
    composeMedicationKnowledgeMedicineClassification(xml, name,  TFhirMedicationKnowledgeMedicineClassification(base))
  else if (base is TFhirMedicationKnowledgePackaging) then
    composeMedicationKnowledgePackaging(xml, name,  TFhirMedicationKnowledgePackaging(base))
  else if (base is TFhirMedicationKnowledgeDrugCharacteristic) then
    composeMedicationKnowledgeDrugCharacteristic(xml, name,  TFhirMedicationKnowledgeDrugCharacteristic(base))
  else if (base is TFhirMedicationKnowledgeRegulatory) then
    composeMedicationKnowledgeRegulatory(xml, name,  TFhirMedicationKnowledgeRegulatory(base))
  else if (base is TFhirMedicationKnowledgeRegulatorySubstitution) then
    composeMedicationKnowledgeRegulatorySubstitution(xml, name,  TFhirMedicationKnowledgeRegulatorySubstitution(base))
  else if (base is TFhirMedicationKnowledgeRegulatorySchedule) then
    composeMedicationKnowledgeRegulatorySchedule(xml, name,  TFhirMedicationKnowledgeRegulatorySchedule(base))
  else if (base is TFhirMedicationKnowledgeRegulatoryMaxDispense) then
    composeMedicationKnowledgeRegulatoryMaxDispense(xml, name,  TFhirMedicationKnowledgeRegulatoryMaxDispense(base))
  else if (base is TFhirMedicationKnowledgeKinetics) then
    composeMedicationKnowledgeKinetics(xml, name,  TFhirMedicationKnowledgeKinetics(base))
  else if (base is TFhirMedicationKnowledge) then
    composeMedicationKnowledge(xml, name,  TFhirMedicationKnowledge(base))
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  else if (base is TFhirMedicationRequestDispenseRequest) then
    composeMedicationRequestDispenseRequest(xml, name,  TFhirMedicationRequestDispenseRequest(base))
  else if (base is TFhirMedicationRequestDispenseRequestInitialFill) then
    composeMedicationRequestDispenseRequestInitialFill(xml, name,  TFhirMedicationRequestDispenseRequestInitialFill(base))
  else if (base is TFhirMedicationRequestSubstitution) then
    composeMedicationRequestSubstitution(xml, name,  TFhirMedicationRequestSubstitution(base))
  else if (base is TFhirMedicationRequest) then
    composeMedicationRequest(xml, name,  TFhirMedicationRequest(base))
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONSTATEMENT}
  else if (base is TFhirMedicationStatement) then
    composeMedicationStatement(xml, name,  TFhirMedicationStatement(base))
{$ENDIF FHIR_MEDICATIONSTATEMENT}
{$IFDEF FHIR_MEDICINALPRODUCT}
  else if (base is TFhirMedicinalProductName) then
    composeMedicinalProductName(xml, name,  TFhirMedicinalProductName(base))
  else if (base is TFhirMedicinalProductNameNamePart) then
    composeMedicinalProductNameNamePart(xml, name,  TFhirMedicinalProductNameNamePart(base))
  else if (base is TFhirMedicinalProductNameCountryLanguage) then
    composeMedicinalProductNameCountryLanguage(xml, name,  TFhirMedicinalProductNameCountryLanguage(base))
  else if (base is TFhirMedicinalProductManufacturingBusinessOperation) then
    composeMedicinalProductManufacturingBusinessOperation(xml, name,  TFhirMedicinalProductManufacturingBusinessOperation(base))
  else if (base is TFhirMedicinalProductSpecialDesignation) then
    composeMedicinalProductSpecialDesignation(xml, name,  TFhirMedicinalProductSpecialDesignation(base))
  else if (base is TFhirMedicinalProduct) then
    composeMedicinalProduct(xml, name,  TFhirMedicinalProduct(base))
{$ENDIF FHIR_MEDICINALPRODUCT}
{$IFDEF FHIR_MEDICINALPRODUCTAUTHORIZATION}
  else if (base is TFhirMedicinalProductAuthorizationJurisdictionalAuthorization) then
    composeMedicinalProductAuthorizationJurisdictionalAuthorization(xml, name,  TFhirMedicinalProductAuthorizationJurisdictionalAuthorization(base))
  else if (base is TFhirMedicinalProductAuthorizationProcedure) then
    composeMedicinalProductAuthorizationProcedure(xml, name,  TFhirMedicinalProductAuthorizationProcedure(base))
  else if (base is TFhirMedicinalProductAuthorization) then
    composeMedicinalProductAuthorization(xml, name,  TFhirMedicinalProductAuthorization(base))
{$ENDIF FHIR_MEDICINALPRODUCTAUTHORIZATION}
{$IFDEF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
  else if (base is TFhirMedicinalProductContraindicationOtherTherapy) then
    composeMedicinalProductContraindicationOtherTherapy(xml, name,  TFhirMedicinalProductContraindicationOtherTherapy(base))
  else if (base is TFhirMedicinalProductContraindication) then
    composeMedicinalProductContraindication(xml, name,  TFhirMedicinalProductContraindication(base))
{$ENDIF FHIR_MEDICINALPRODUCTCONTRAINDICATION}
{$IFDEF FHIR_MEDICINALPRODUCTINDICATION}
  else if (base is TFhirMedicinalProductIndicationOtherTherapy) then
    composeMedicinalProductIndicationOtherTherapy(xml, name,  TFhirMedicinalProductIndicationOtherTherapy(base))
  else if (base is TFhirMedicinalProductIndication) then
    composeMedicinalProductIndication(xml, name,  TFhirMedicinalProductIndication(base))
{$ENDIF FHIR_MEDICINALPRODUCTINDICATION}
{$IFDEF FHIR_MEDICINALPRODUCTINGREDIENT}
  else if (base is TFhirMedicinalProductIngredientSpecifiedSubstance) then
    composeMedicinalProductIngredientSpecifiedSubstance(xml, name,  TFhirMedicinalProductIngredientSpecifiedSubstance(base))
  else if (base is TFhirMedicinalProductIngredientSpecifiedSubstanceStrength) then
    composeMedicinalProductIngredientSpecifiedSubstanceStrength(xml, name,  TFhirMedicinalProductIngredientSpecifiedSubstanceStrength(base))
  else if (base is TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength) then
    composeMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(xml, name,  TFhirMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(base))
  else if (base is TFhirMedicinalProductIngredientSubstance) then
    composeMedicinalProductIngredientSubstance(xml, name,  TFhirMedicinalProductIngredientSubstance(base))
  else if (base is TFhirMedicinalProductIngredient) then
    composeMedicinalProductIngredient(xml, name,  TFhirMedicinalProductIngredient(base))
{$ENDIF FHIR_MEDICINALPRODUCTINGREDIENT}
{$IFDEF FHIR_MEDICINALPRODUCTINTERACTION}
  else if (base is TFhirMedicinalProductInteractionInteractant) then
    composeMedicinalProductInteractionInteractant(xml, name,  TFhirMedicinalProductInteractionInteractant(base))
  else if (base is TFhirMedicinalProductInteraction) then
    composeMedicinalProductInteraction(xml, name,  TFhirMedicinalProductInteraction(base))
{$ENDIF FHIR_MEDICINALPRODUCTINTERACTION}
{$IFDEF FHIR_MEDICINALPRODUCTMANUFACTURED}
  else if (base is TFhirMedicinalProductManufactured) then
    composeMedicinalProductManufactured(xml, name,  TFhirMedicinalProductManufactured(base))
{$ENDIF FHIR_MEDICINALPRODUCTMANUFACTURED}
{$IFDEF FHIR_MEDICINALPRODUCTPACKAGED}
  else if (base is TFhirMedicinalProductPackagedBatchIdentifier) then
    composeMedicinalProductPackagedBatchIdentifier(xml, name,  TFhirMedicinalProductPackagedBatchIdentifier(base))
  else if (base is TFhirMedicinalProductPackagedPackageItem) then
    composeMedicinalProductPackagedPackageItem(xml, name,  TFhirMedicinalProductPackagedPackageItem(base))
  else if (base is TFhirMedicinalProductPackaged) then
    composeMedicinalProductPackaged(xml, name,  TFhirMedicinalProductPackaged(base))
{$ENDIF FHIR_MEDICINALPRODUCTPACKAGED}
{$IFDEF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
  else if (base is TFhirMedicinalProductPharmaceuticalCharacteristics) then
    composeMedicinalProductPharmaceuticalCharacteristics(xml, name,  TFhirMedicinalProductPharmaceuticalCharacteristics(base))
  else if (base is TFhirMedicinalProductPharmaceuticalRouteOfAdministration) then
    composeMedicinalProductPharmaceuticalRouteOfAdministration(xml, name,  TFhirMedicinalProductPharmaceuticalRouteOfAdministration(base))
  else if (base is TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies) then
    composeMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(xml, name,  TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(base))
  else if (base is TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod) then
    composeMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(xml, name,  TFhirMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(base))
  else if (base is TFhirMedicinalProductPharmaceutical) then
    composeMedicinalProductPharmaceutical(xml, name,  TFhirMedicinalProductPharmaceutical(base))
{$ENDIF FHIR_MEDICINALPRODUCTPHARMACEUTICAL}
{$IFDEF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
  else if (base is TFhirMedicinalProductUndesirableEffect) then
    composeMedicinalProductUndesirableEffect(xml, name,  TFhirMedicinalProductUndesirableEffect(base))
{$ENDIF FHIR_MEDICINALPRODUCTUNDESIRABLEEFFECT}
{$IFDEF FHIR_MESSAGEDEFINITION}
  else if (base is TFhirMessageDefinitionFocus) then
    composeMessageDefinitionFocus(xml, name,  TFhirMessageDefinitionFocus(base))
  else if (base is TFhirMessageDefinitionAllowedResponse) then
    composeMessageDefinitionAllowedResponse(xml, name,  TFhirMessageDefinitionAllowedResponse(base))
  else if (base is TFhirMessageDefinition) then
    composeMessageDefinition(xml, name,  TFhirMessageDefinition(base))
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  else if (base is TFhirMessageHeaderDestination) then
    composeMessageHeaderDestination(xml, name,  TFhirMessageHeaderDestination(base))
  else if (base is TFhirMessageHeaderSource) then
    composeMessageHeaderSource(xml, name,  TFhirMessageHeaderSource(base))
  else if (base is TFhirMessageHeaderResponse) then
    composeMessageHeaderResponse(xml, name,  TFhirMessageHeaderResponse(base))
  else if (base is TFhirMessageHeader) then
    composeMessageHeader(xml, name,  TFhirMessageHeader(base))
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
  else if (base is TFhirMolecularSequenceReferenceSeq) then
    composeMolecularSequenceReferenceSeq(xml, name,  TFhirMolecularSequenceReferenceSeq(base))
  else if (base is TFhirMolecularSequenceVariant) then
    composeMolecularSequenceVariant(xml, name,  TFhirMolecularSequenceVariant(base))
  else if (base is TFhirMolecularSequenceQuality) then
    composeMolecularSequenceQuality(xml, name,  TFhirMolecularSequenceQuality(base))
  else if (base is TFhirMolecularSequenceQualityRoc) then
    composeMolecularSequenceQualityRoc(xml, name,  TFhirMolecularSequenceQualityRoc(base))
  else if (base is TFhirMolecularSequenceRepository) then
    composeMolecularSequenceRepository(xml, name,  TFhirMolecularSequenceRepository(base))
  else if (base is TFhirMolecularSequenceStructureVariant) then
    composeMolecularSequenceStructureVariant(xml, name,  TFhirMolecularSequenceStructureVariant(base))
  else if (base is TFhirMolecularSequenceStructureVariantOuter) then
    composeMolecularSequenceStructureVariantOuter(xml, name,  TFhirMolecularSequenceStructureVariantOuter(base))
  else if (base is TFhirMolecularSequenceStructureVariantInner) then
    composeMolecularSequenceStructureVariantInner(xml, name,  TFhirMolecularSequenceStructureVariantInner(base))
  else if (base is TFhirMolecularSequence) then
    composeMolecularSequence(xml, name,  TFhirMolecularSequence(base))
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
  else if (base is TFhirNamingSystemUniqueId) then
    composeNamingSystemUniqueId(xml, name,  TFhirNamingSystemUniqueId(base))
  else if (base is TFhirNamingSystem) then
    composeNamingSystem(xml, name,  TFhirNamingSystem(base))
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONORDER}
  else if (base is TFhirNutritionOrderOralDiet) then
    composeNutritionOrderOralDiet(xml, name,  TFhirNutritionOrderOralDiet(base))
  else if (base is TFhirNutritionOrderOralDietNutrient) then
    composeNutritionOrderOralDietNutrient(xml, name,  TFhirNutritionOrderOralDietNutrient(base))
  else if (base is TFhirNutritionOrderOralDietTexture) then
    composeNutritionOrderOralDietTexture(xml, name,  TFhirNutritionOrderOralDietTexture(base))
  else if (base is TFhirNutritionOrderSupplement) then
    composeNutritionOrderSupplement(xml, name,  TFhirNutritionOrderSupplement(base))
  else if (base is TFhirNutritionOrderEnteralFormula) then
    composeNutritionOrderEnteralFormula(xml, name,  TFhirNutritionOrderEnteralFormula(base))
  else if (base is TFhirNutritionOrderEnteralFormulaAdministration) then
    composeNutritionOrderEnteralFormulaAdministration(xml, name,  TFhirNutritionOrderEnteralFormulaAdministration(base))
  else if (base is TFhirNutritionOrder) then
    composeNutritionOrder(xml, name,  TFhirNutritionOrder(base))
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_OBSERVATION}
  else if (base is TFhirObservationReferenceRange) then
    composeObservationReferenceRange(xml, name,  TFhirObservationReferenceRange(base))
  else if (base is TFhirObservationComponent) then
    composeObservationComponent(xml, name,  TFhirObservationComponent(base))
  else if (base is TFhirObservation) then
    composeObservation(xml, name,  TFhirObservation(base))
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
  else if (base is TFhirObservationDefinitionQuantitativeDetails) then
    composeObservationDefinitionQuantitativeDetails(xml, name,  TFhirObservationDefinitionQuantitativeDetails(base))
  else if (base is TFhirObservationDefinitionQualifiedInterval) then
    composeObservationDefinitionQualifiedInterval(xml, name,  TFhirObservationDefinitionQualifiedInterval(base))
  else if (base is TFhirObservationDefinition) then
    composeObservationDefinition(xml, name,  TFhirObservationDefinition(base))
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
  else if (base is TFhirOperationDefinitionParameter) then
    composeOperationDefinitionParameter(xml, name,  TFhirOperationDefinitionParameter(base))
  else if (base is TFhirOperationDefinitionParameterBinding) then
    composeOperationDefinitionParameterBinding(xml, name,  TFhirOperationDefinitionParameterBinding(base))
  else if (base is TFhirOperationDefinitionParameterReferencedFrom) then
    composeOperationDefinitionParameterReferencedFrom(xml, name,  TFhirOperationDefinitionParameterReferencedFrom(base))
  else if (base is TFhirOperationDefinitionOverload) then
    composeOperationDefinitionOverload(xml, name,  TFhirOperationDefinitionOverload(base))
  else if (base is TFhirOperationDefinition) then
    composeOperationDefinition(xml, name,  TFhirOperationDefinition(base))
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  else if (base is TFhirOperationOutcomeIssue) then
    composeOperationOutcomeIssue(xml, name,  TFhirOperationOutcomeIssue(base))
  else if (base is TFhirOperationOutcome) then
    composeOperationOutcome(xml, name,  TFhirOperationOutcome(base))
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  else if (base is TFhirOrganizationContact) then
    composeOrganizationContact(xml, name,  TFhirOrganizationContact(base))
  else if (base is TFhirOrganization) then
    composeOrganization(xml, name,  TFhirOrganization(base))
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
  else if (base is TFhirOrganizationAffiliation) then
    composeOrganizationAffiliation(xml, name,  TFhirOrganizationAffiliation(base))
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PATIENT}
  else if (base is TFhirPatientContact) then
    composePatientContact(xml, name,  TFhirPatientContact(base))
  else if (base is TFhirPatientCommunication) then
    composePatientCommunication(xml, name,  TFhirPatientCommunication(base))
  else if (base is TFhirPatientLink) then
    composePatientLink(xml, name,  TFhirPatientLink(base))
  else if (base is TFhirPatient) then
    composePatient(xml, name,  TFhirPatient(base))
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  else if (base is TFhirPaymentNotice) then
    composePaymentNotice(xml, name,  TFhirPaymentNotice(base))
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  else if (base is TFhirPaymentReconciliationDetail) then
    composePaymentReconciliationDetail(xml, name,  TFhirPaymentReconciliationDetail(base))
  else if (base is TFhirPaymentReconciliationProcessNote) then
    composePaymentReconciliationProcessNote(xml, name,  TFhirPaymentReconciliationProcessNote(base))
  else if (base is TFhirPaymentReconciliation) then
    composePaymentReconciliation(xml, name,  TFhirPaymentReconciliation(base))
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERSON}
  else if (base is TFhirPersonLink) then
    composePersonLink(xml, name,  TFhirPersonLink(base))
  else if (base is TFhirPerson) then
    composePerson(xml, name,  TFhirPerson(base))
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  else if (base is TFhirPlanDefinitionGoal) then
    composePlanDefinitionGoal(xml, name,  TFhirPlanDefinitionGoal(base))
  else if (base is TFhirPlanDefinitionGoalTarget) then
    composePlanDefinitionGoalTarget(xml, name,  TFhirPlanDefinitionGoalTarget(base))
  else if (base is TFhirPlanDefinitionAction) then
    composePlanDefinitionAction(xml, name,  TFhirPlanDefinitionAction(base))
  else if (base is TFhirPlanDefinitionActionCondition) then
    composePlanDefinitionActionCondition(xml, name,  TFhirPlanDefinitionActionCondition(base))
  else if (base is TFhirPlanDefinitionActionRelatedAction) then
    composePlanDefinitionActionRelatedAction(xml, name,  TFhirPlanDefinitionActionRelatedAction(base))
  else if (base is TFhirPlanDefinitionActionParticipant) then
    composePlanDefinitionActionParticipant(xml, name,  TFhirPlanDefinitionActionParticipant(base))
  else if (base is TFhirPlanDefinitionActionDynamicValue) then
    composePlanDefinitionActionDynamicValue(xml, name,  TFhirPlanDefinitionActionDynamicValue(base))
  else if (base is TFhirPlanDefinition) then
    composePlanDefinition(xml, name,  TFhirPlanDefinition(base))
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  else if (base is TFhirPractitionerQualification) then
    composePractitionerQualification(xml, name,  TFhirPractitionerQualification(base))
  else if (base is TFhirPractitioner) then
    composePractitioner(xml, name,  TFhirPractitioner(base))
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  else if (base is TFhirPractitionerRoleAvailableTime) then
    composePractitionerRoleAvailableTime(xml, name,  TFhirPractitionerRoleAvailableTime(base))
  else if (base is TFhirPractitionerRoleNotAvailable) then
    composePractitionerRoleNotAvailable(xml, name,  TFhirPractitionerRoleNotAvailable(base))
  else if (base is TFhirPractitionerRole) then
    composePractitionerRole(xml, name,  TFhirPractitionerRole(base))
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  else if (base is TFhirProcedurePerformer) then
    composeProcedurePerformer(xml, name,  TFhirProcedurePerformer(base))
  else if (base is TFhirProcedureFocalDevice) then
    composeProcedureFocalDevice(xml, name,  TFhirProcedureFocalDevice(base))
  else if (base is TFhirProcedure) then
    composeProcedure(xml, name,  TFhirProcedure(base))
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
  else if (base is TFhirProvenanceAgent) then
    composeProvenanceAgent(xml, name,  TFhirProvenanceAgent(base))
  else if (base is TFhirProvenanceEntity) then
    composeProvenanceEntity(xml, name,  TFhirProvenanceEntity(base))
  else if (base is TFhirProvenance) then
    composeProvenance(xml, name,  TFhirProvenance(base))
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  else if (base is TFhirQuestionnaireItem) then
    composeQuestionnaireItem(xml, name,  TFhirQuestionnaireItem(base))
  else if (base is TFhirQuestionnaireItemEnableWhen) then
    composeQuestionnaireItemEnableWhen(xml, name,  TFhirQuestionnaireItemEnableWhen(base))
  else if (base is TFhirQuestionnaireItemAnswerOption) then
    composeQuestionnaireItemAnswerOption(xml, name,  TFhirQuestionnaireItemAnswerOption(base))
  else if (base is TFhirQuestionnaireItemInitial) then
    composeQuestionnaireItemInitial(xml, name,  TFhirQuestionnaireItemInitial(base))
  else if (base is TFhirQuestionnaire) then
    composeQuestionnaire(xml, name,  TFhirQuestionnaire(base))
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  else if (base is TFhirQuestionnaireResponseItem) then
    composeQuestionnaireResponseItem(xml, name,  TFhirQuestionnaireResponseItem(base))
  else if (base is TFhirQuestionnaireResponseItemAnswer) then
    composeQuestionnaireResponseItemAnswer(xml, name,  TFhirQuestionnaireResponseItemAnswer(base))
  else if (base is TFhirQuestionnaireResponse) then
    composeQuestionnaireResponse(xml, name,  TFhirQuestionnaireResponse(base))
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_RELATEDPERSON}
  else if (base is TFhirRelatedPersonCommunication) then
    composeRelatedPersonCommunication(xml, name,  TFhirRelatedPersonCommunication(base))
  else if (base is TFhirRelatedPerson) then
    composeRelatedPerson(xml, name,  TFhirRelatedPerson(base))
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  else if (base is TFhirRequestGroupAction) then
    composeRequestGroupAction(xml, name,  TFhirRequestGroupAction(base))
  else if (base is TFhirRequestGroupActionCondition) then
    composeRequestGroupActionCondition(xml, name,  TFhirRequestGroupActionCondition(base))
  else if (base is TFhirRequestGroupActionRelatedAction) then
    composeRequestGroupActionRelatedAction(xml, name,  TFhirRequestGroupActionRelatedAction(base))
  else if (base is TFhirRequestGroup) then
    composeRequestGroup(xml, name,  TFhirRequestGroup(base))
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHDEFINITION}
  else if (base is TFhirResearchDefinition) then
    composeResearchDefinition(xml, name,  TFhirResearchDefinition(base))
{$ENDIF FHIR_RESEARCHDEFINITION}
{$IFDEF FHIR_RESEARCHELEMENTDEFINITION}
  else if (base is TFhirResearchElementDefinitionCharacteristic) then
    composeResearchElementDefinitionCharacteristic(xml, name,  TFhirResearchElementDefinitionCharacteristic(base))
  else if (base is TFhirResearchElementDefinition) then
    composeResearchElementDefinition(xml, name,  TFhirResearchElementDefinition(base))
{$ENDIF FHIR_RESEARCHELEMENTDEFINITION}
{$IFDEF FHIR_RESEARCHSTUDY}
  else if (base is TFhirResearchStudyArm) then
    composeResearchStudyArm(xml, name,  TFhirResearchStudyArm(base))
  else if (base is TFhirResearchStudyObjective) then
    composeResearchStudyObjective(xml, name,  TFhirResearchStudyObjective(base))
  else if (base is TFhirResearchStudy) then
    composeResearchStudy(xml, name,  TFhirResearchStudy(base))
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  else if (base is TFhirResearchSubject) then
    composeResearchSubject(xml, name,  TFhirResearchSubject(base))
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  else if (base is TFhirRiskAssessmentPrediction) then
    composeRiskAssessmentPrediction(xml, name,  TFhirRiskAssessmentPrediction(base))
  else if (base is TFhirRiskAssessment) then
    composeRiskAssessment(xml, name,  TFhirRiskAssessment(base))
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_RISKEVIDENCESYNTHESIS}
  else if (base is TFhirRiskEvidenceSynthesisSampleSize) then
    composeRiskEvidenceSynthesisSampleSize(xml, name,  TFhirRiskEvidenceSynthesisSampleSize(base))
  else if (base is TFhirRiskEvidenceSynthesisRiskEstimate) then
    composeRiskEvidenceSynthesisRiskEstimate(xml, name,  TFhirRiskEvidenceSynthesisRiskEstimate(base))
  else if (base is TFhirRiskEvidenceSynthesisRiskEstimatePrecisionEstimate) then
    composeRiskEvidenceSynthesisRiskEstimatePrecisionEstimate(xml, name,  TFhirRiskEvidenceSynthesisRiskEstimatePrecisionEstimate(base))
  else if (base is TFhirRiskEvidenceSynthesisCertainty) then
    composeRiskEvidenceSynthesisCertainty(xml, name,  TFhirRiskEvidenceSynthesisCertainty(base))
  else if (base is TFhirRiskEvidenceSynthesisCertaintyCertaintySubcomponent) then
    composeRiskEvidenceSynthesisCertaintyCertaintySubcomponent(xml, name,  TFhirRiskEvidenceSynthesisCertaintyCertaintySubcomponent(base))
  else if (base is TFhirRiskEvidenceSynthesis) then
    composeRiskEvidenceSynthesis(xml, name,  TFhirRiskEvidenceSynthesis(base))
{$ENDIF FHIR_RISKEVIDENCESYNTHESIS}
{$IFDEF FHIR_SCHEDULE}
  else if (base is TFhirSchedule) then
    composeSchedule(xml, name,  TFhirSchedule(base))
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  else if (base is TFhirSearchParameterComponent) then
    composeSearchParameterComponent(xml, name,  TFhirSearchParameterComponent(base))
  else if (base is TFhirSearchParameter) then
    composeSearchParameter(xml, name,  TFhirSearchParameter(base))
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
  else if (base is TFhirServiceRequest) then
    composeServiceRequest(xml, name,  TFhirServiceRequest(base))
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
  else if (base is TFhirSlot) then
    composeSlot(xml, name,  TFhirSlot(base))
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  else if (base is TFhirSpecimenCollection) then
    composeSpecimenCollection(xml, name,  TFhirSpecimenCollection(base))
  else if (base is TFhirSpecimenProcessing) then
    composeSpecimenProcessing(xml, name,  TFhirSpecimenProcessing(base))
  else if (base is TFhirSpecimenContainer) then
    composeSpecimenContainer(xml, name,  TFhirSpecimenContainer(base))
  else if (base is TFhirSpecimen) then
    composeSpecimen(xml, name,  TFhirSpecimen(base))
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
  else if (base is TFhirSpecimenDefinitionTypeTested) then
    composeSpecimenDefinitionTypeTested(xml, name,  TFhirSpecimenDefinitionTypeTested(base))
  else if (base is TFhirSpecimenDefinitionTypeTestedContainer) then
    composeSpecimenDefinitionTypeTestedContainer(xml, name,  TFhirSpecimenDefinitionTypeTestedContainer(base))
  else if (base is TFhirSpecimenDefinitionTypeTestedContainerAdditive) then
    composeSpecimenDefinitionTypeTestedContainerAdditive(xml, name,  TFhirSpecimenDefinitionTypeTestedContainerAdditive(base))
  else if (base is TFhirSpecimenDefinitionTypeTestedHandling) then
    composeSpecimenDefinitionTypeTestedHandling(xml, name,  TFhirSpecimenDefinitionTypeTestedHandling(base))
  else if (base is TFhirSpecimenDefinition) then
    composeSpecimenDefinition(xml, name,  TFhirSpecimenDefinition(base))
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  else if (base is TFhirStructureDefinitionMapping) then
    composeStructureDefinitionMapping(xml, name,  TFhirStructureDefinitionMapping(base))
  else if (base is TFhirStructureDefinitionContext) then
    composeStructureDefinitionContext(xml, name,  TFhirStructureDefinitionContext(base))
  else if (base is TFhirStructureDefinitionSnapshot) then
    composeStructureDefinitionSnapshot(xml, name,  TFhirStructureDefinitionSnapshot(base))
  else if (base is TFhirStructureDefinitionDifferential) then
    composeStructureDefinitionDifferential(xml, name,  TFhirStructureDefinitionDifferential(base))
  else if (base is TFhirStructureDefinition) then
    composeStructureDefinition(xml, name,  TFhirStructureDefinition(base))
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  else if (base is TFhirStructureMapStructure) then
    composeStructureMapStructure(xml, name,  TFhirStructureMapStructure(base))
  else if (base is TFhirStructureMapGroup) then
    composeStructureMapGroup(xml, name,  TFhirStructureMapGroup(base))
  else if (base is TFhirStructureMapGroupInput) then
    composeStructureMapGroupInput(xml, name,  TFhirStructureMapGroupInput(base))
  else if (base is TFhirStructureMapGroupRule) then
    composeStructureMapGroupRule(xml, name,  TFhirStructureMapGroupRule(base))
  else if (base is TFhirStructureMapGroupRuleSource) then
    composeStructureMapGroupRuleSource(xml, name,  TFhirStructureMapGroupRuleSource(base))
  else if (base is TFhirStructureMapGroupRuleTarget) then
    composeStructureMapGroupRuleTarget(xml, name,  TFhirStructureMapGroupRuleTarget(base))
  else if (base is TFhirStructureMapGroupRuleTargetParameter) then
    composeStructureMapGroupRuleTargetParameter(xml, name,  TFhirStructureMapGroupRuleTargetParameter(base))
  else if (base is TFhirStructureMapGroupRuleDependent) then
    composeStructureMapGroupRuleDependent(xml, name,  TFhirStructureMapGroupRuleDependent(base))
  else if (base is TFhirStructureMap) then
    composeStructureMap(xml, name,  TFhirStructureMap(base))
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  else if (base is TFhirSubscriptionChannel) then
    composeSubscriptionChannel(xml, name,  TFhirSubscriptionChannel(base))
  else if (base is TFhirSubscription) then
    composeSubscription(xml, name,  TFhirSubscription(base))
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSTANCE}
  else if (base is TFhirSubstanceInstance) then
    composeSubstanceInstance(xml, name,  TFhirSubstanceInstance(base))
  else if (base is TFhirSubstanceIngredient) then
    composeSubstanceIngredient(xml, name,  TFhirSubstanceIngredient(base))
  else if (base is TFhirSubstance) then
    composeSubstance(xml, name,  TFhirSubstance(base))
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCENUCLEICACID}
  else if (base is TFhirSubstanceNucleicAcidSubunit) then
    composeSubstanceNucleicAcidSubunit(xml, name,  TFhirSubstanceNucleicAcidSubunit(base))
  else if (base is TFhirSubstanceNucleicAcidSubunitLinkage) then
    composeSubstanceNucleicAcidSubunitLinkage(xml, name,  TFhirSubstanceNucleicAcidSubunitLinkage(base))
  else if (base is TFhirSubstanceNucleicAcidSubunitSugar) then
    composeSubstanceNucleicAcidSubunitSugar(xml, name,  TFhirSubstanceNucleicAcidSubunitSugar(base))
  else if (base is TFhirSubstanceNucleicAcid) then
    composeSubstanceNucleicAcid(xml, name,  TFhirSubstanceNucleicAcid(base))
{$ENDIF FHIR_SUBSTANCENUCLEICACID}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
  else if (base is TFhirSubstancePolymerMonomerSet) then
    composeSubstancePolymerMonomerSet(xml, name,  TFhirSubstancePolymerMonomerSet(base))
  else if (base is TFhirSubstancePolymerMonomerSetStartingMaterial) then
    composeSubstancePolymerMonomerSetStartingMaterial(xml, name,  TFhirSubstancePolymerMonomerSetStartingMaterial(base))
  else if (base is TFhirSubstancePolymerRepeat) then
    composeSubstancePolymerRepeat(xml, name,  TFhirSubstancePolymerRepeat(base))
  else if (base is TFhirSubstancePolymerRepeatRepeatUnit) then
    composeSubstancePolymerRepeatRepeatUnit(xml, name,  TFhirSubstancePolymerRepeatRepeatUnit(base))
  else if (base is TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation) then
    composeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(xml, name,  TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(base))
  else if (base is TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation) then
    composeSubstancePolymerRepeatRepeatUnitStructuralRepresentation(xml, name,  TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation(base))
  else if (base is TFhirSubstancePolymer) then
    composeSubstancePolymer(xml, name,  TFhirSubstancePolymer(base))
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEPROTEIN}
  else if (base is TFhirSubstanceProteinSubunit) then
    composeSubstanceProteinSubunit(xml, name,  TFhirSubstanceProteinSubunit(base))
  else if (base is TFhirSubstanceProtein) then
    composeSubstanceProtein(xml, name,  TFhirSubstanceProtein(base))
{$ENDIF FHIR_SUBSTANCEPROTEIN}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
  else if (base is TFhirSubstanceReferenceInformationGene) then
    composeSubstanceReferenceInformationGene(xml, name,  TFhirSubstanceReferenceInformationGene(base))
  else if (base is TFhirSubstanceReferenceInformationGeneElement) then
    composeSubstanceReferenceInformationGeneElement(xml, name,  TFhirSubstanceReferenceInformationGeneElement(base))
  else if (base is TFhirSubstanceReferenceInformationClassification) then
    composeSubstanceReferenceInformationClassification(xml, name,  TFhirSubstanceReferenceInformationClassification(base))
  else if (base is TFhirSubstanceReferenceInformationTarget) then
    composeSubstanceReferenceInformationTarget(xml, name,  TFhirSubstanceReferenceInformationTarget(base))
  else if (base is TFhirSubstanceReferenceInformation) then
    composeSubstanceReferenceInformation(xml, name,  TFhirSubstanceReferenceInformation(base))
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
  else if (base is TFhirSubstanceSourceMaterialFractionDescription) then
    composeSubstanceSourceMaterialFractionDescription(xml, name,  TFhirSubstanceSourceMaterialFractionDescription(base))
  else if (base is TFhirSubstanceSourceMaterialOrganism) then
    composeSubstanceSourceMaterialOrganism(xml, name,  TFhirSubstanceSourceMaterialOrganism(base))
  else if (base is TFhirSubstanceSourceMaterialOrganismAuthor) then
    composeSubstanceSourceMaterialOrganismAuthor(xml, name,  TFhirSubstanceSourceMaterialOrganismAuthor(base))
  else if (base is TFhirSubstanceSourceMaterialOrganismHybrid) then
    composeSubstanceSourceMaterialOrganismHybrid(xml, name,  TFhirSubstanceSourceMaterialOrganismHybrid(base))
  else if (base is TFhirSubstanceSourceMaterialOrganismOrganismGeneral) then
    composeSubstanceSourceMaterialOrganismOrganismGeneral(xml, name,  TFhirSubstanceSourceMaterialOrganismOrganismGeneral(base))
  else if (base is TFhirSubstanceSourceMaterialPartDescription) then
    composeSubstanceSourceMaterialPartDescription(xml, name,  TFhirSubstanceSourceMaterialPartDescription(base))
  else if (base is TFhirSubstanceSourceMaterial) then
    composeSubstanceSourceMaterial(xml, name,  TFhirSubstanceSourceMaterial(base))
{$ENDIF FHIR_SUBSTANCESOURCEMATERIAL}
{$IFDEF FHIR_SUBSTANCESPECIFICATION}
  else if (base is TFhirSubstanceSpecificationMoiety) then
    composeSubstanceSpecificationMoiety(xml, name,  TFhirSubstanceSpecificationMoiety(base))
  else if (base is TFhirSubstanceSpecificationProperty) then
    composeSubstanceSpecificationProperty(xml, name,  TFhirSubstanceSpecificationProperty(base))
  else if (base is TFhirSubstanceSpecificationStructure) then
    composeSubstanceSpecificationStructure(xml, name,  TFhirSubstanceSpecificationStructure(base))
  else if (base is TFhirSubstanceSpecificationStructureIsotope) then
    composeSubstanceSpecificationStructureIsotope(xml, name,  TFhirSubstanceSpecificationStructureIsotope(base))
  else if (base is TFhirSubstanceSpecificationStructureIsotopeMolecularWeight) then
    composeSubstanceSpecificationStructureIsotopeMolecularWeight(xml, name,  TFhirSubstanceSpecificationStructureIsotopeMolecularWeight(base))
  else if (base is TFhirSubstanceSpecificationStructureRepresentation) then
    composeSubstanceSpecificationStructureRepresentation(xml, name,  TFhirSubstanceSpecificationStructureRepresentation(base))
  else if (base is TFhirSubstanceSpecificationCode) then
    composeSubstanceSpecificationCode(xml, name,  TFhirSubstanceSpecificationCode(base))
  else if (base is TFhirSubstanceSpecificationName) then
    composeSubstanceSpecificationName(xml, name,  TFhirSubstanceSpecificationName(base))
  else if (base is TFhirSubstanceSpecificationNameOfficial) then
    composeSubstanceSpecificationNameOfficial(xml, name,  TFhirSubstanceSpecificationNameOfficial(base))
  else if (base is TFhirSubstanceSpecificationRelationship) then
    composeSubstanceSpecificationRelationship(xml, name,  TFhirSubstanceSpecificationRelationship(base))
  else if (base is TFhirSubstanceSpecification) then
    composeSubstanceSpecification(xml, name,  TFhirSubstanceSpecification(base))
{$ENDIF FHIR_SUBSTANCESPECIFICATION}
{$IFDEF FHIR_SUPPLYDELIVERY}
  else if (base is TFhirSupplyDeliverySuppliedItem) then
    composeSupplyDeliverySuppliedItem(xml, name,  TFhirSupplyDeliverySuppliedItem(base))
  else if (base is TFhirSupplyDelivery) then
    composeSupplyDelivery(xml, name,  TFhirSupplyDelivery(base))
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  else if (base is TFhirSupplyRequestParameter) then
    composeSupplyRequestParameter(xml, name,  TFhirSupplyRequestParameter(base))
  else if (base is TFhirSupplyRequest) then
    composeSupplyRequest(xml, name,  TFhirSupplyRequest(base))
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  else if (base is TFhirTaskRestriction) then
    composeTaskRestriction(xml, name,  TFhirTaskRestriction(base))
  else if (base is TFhirTaskInput) then
    composeTaskInput(xml, name,  TFhirTaskInput(base))
  else if (base is TFhirTaskOutput) then
    composeTaskOutput(xml, name,  TFhirTaskOutput(base))
  else if (base is TFhirTask) then
    composeTask(xml, name,  TFhirTask(base))
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
  else if (base is TFhirTerminologyCapabilitiesSoftware) then
    composeTerminologyCapabilitiesSoftware(xml, name,  TFhirTerminologyCapabilitiesSoftware(base))
  else if (base is TFhirTerminologyCapabilitiesImplementation) then
    composeTerminologyCapabilitiesImplementation(xml, name,  TFhirTerminologyCapabilitiesImplementation(base))
  else if (base is TFhirTerminologyCapabilitiesCodeSystem) then
    composeTerminologyCapabilitiesCodeSystem(xml, name,  TFhirTerminologyCapabilitiesCodeSystem(base))
  else if (base is TFhirTerminologyCapabilitiesCodeSystemVersion) then
    composeTerminologyCapabilitiesCodeSystemVersion(xml, name,  TFhirTerminologyCapabilitiesCodeSystemVersion(base))
  else if (base is TFhirTerminologyCapabilitiesCodeSystemVersionFilter) then
    composeTerminologyCapabilitiesCodeSystemVersionFilter(xml, name,  TFhirTerminologyCapabilitiesCodeSystemVersionFilter(base))
  else if (base is TFhirTerminologyCapabilitiesExpansion) then
    composeTerminologyCapabilitiesExpansion(xml, name,  TFhirTerminologyCapabilitiesExpansion(base))
  else if (base is TFhirTerminologyCapabilitiesExpansionParameter) then
    composeTerminologyCapabilitiesExpansionParameter(xml, name,  TFhirTerminologyCapabilitiesExpansionParameter(base))
  else if (base is TFhirTerminologyCapabilitiesValidateCode) then
    composeTerminologyCapabilitiesValidateCode(xml, name,  TFhirTerminologyCapabilitiesValidateCode(base))
  else if (base is TFhirTerminologyCapabilitiesTranslation) then
    composeTerminologyCapabilitiesTranslation(xml, name,  TFhirTerminologyCapabilitiesTranslation(base))
  else if (base is TFhirTerminologyCapabilitiesClosure) then
    composeTerminologyCapabilitiesClosure(xml, name,  TFhirTerminologyCapabilitiesClosure(base))
  else if (base is TFhirTerminologyCapabilities) then
    composeTerminologyCapabilities(xml, name,  TFhirTerminologyCapabilities(base))
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
  else if (base is TFhirTestReportParticipant) then
    composeTestReportParticipant(xml, name,  TFhirTestReportParticipant(base))
  else if (base is TFhirTestReportSetup) then
    composeTestReportSetup(xml, name,  TFhirTestReportSetup(base))
  else if (base is TFhirTestReportSetupAction) then
    composeTestReportSetupAction(xml, name,  TFhirTestReportSetupAction(base))
  else if (base is TFhirTestReportSetupActionOperation) then
    composeTestReportSetupActionOperation(xml, name,  TFhirTestReportSetupActionOperation(base))
  else if (base is TFhirTestReportSetupActionAssert) then
    composeTestReportSetupActionAssert(xml, name,  TFhirTestReportSetupActionAssert(base))
  else if (base is TFhirTestReportTest) then
    composeTestReportTest(xml, name,  TFhirTestReportTest(base))
  else if (base is TFhirTestReportTestAction) then
    composeTestReportTestAction(xml, name,  TFhirTestReportTestAction(base))
  else if (base is TFhirTestReportTeardown) then
    composeTestReportTeardown(xml, name,  TFhirTestReportTeardown(base))
  else if (base is TFhirTestReportTeardownAction) then
    composeTestReportTeardownAction(xml, name,  TFhirTestReportTeardownAction(base))
  else if (base is TFhirTestReport) then
    composeTestReport(xml, name,  TFhirTestReport(base))
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  else if (base is TFhirTestScriptOrigin) then
    composeTestScriptOrigin(xml, name,  TFhirTestScriptOrigin(base))
  else if (base is TFhirTestScriptDestination) then
    composeTestScriptDestination(xml, name,  TFhirTestScriptDestination(base))
  else if (base is TFhirTestScriptMetadata) then
    composeTestScriptMetadata(xml, name,  TFhirTestScriptMetadata(base))
  else if (base is TFhirTestScriptMetadataLink) then
    composeTestScriptMetadataLink(xml, name,  TFhirTestScriptMetadataLink(base))
  else if (base is TFhirTestScriptMetadataCapability) then
    composeTestScriptMetadataCapability(xml, name,  TFhirTestScriptMetadataCapability(base))
  else if (base is TFhirTestScriptFixture) then
    composeTestScriptFixture(xml, name,  TFhirTestScriptFixture(base))
  else if (base is TFhirTestScriptVariable) then
    composeTestScriptVariable(xml, name,  TFhirTestScriptVariable(base))
  else if (base is TFhirTestScriptSetup) then
    composeTestScriptSetup(xml, name,  TFhirTestScriptSetup(base))
  else if (base is TFhirTestScriptSetupAction) then
    composeTestScriptSetupAction(xml, name,  TFhirTestScriptSetupAction(base))
  else if (base is TFhirTestScriptSetupActionOperation) then
    composeTestScriptSetupActionOperation(xml, name,  TFhirTestScriptSetupActionOperation(base))
  else if (base is TFhirTestScriptSetupActionOperationRequestHeader) then
    composeTestScriptSetupActionOperationRequestHeader(xml, name,  TFhirTestScriptSetupActionOperationRequestHeader(base))
  else if (base is TFhirTestScriptSetupActionAssert) then
    composeTestScriptSetupActionAssert(xml, name,  TFhirTestScriptSetupActionAssert(base))
  else if (base is TFhirTestScriptTest) then
    composeTestScriptTest(xml, name,  TFhirTestScriptTest(base))
  else if (base is TFhirTestScriptTestAction) then
    composeTestScriptTestAction(xml, name,  TFhirTestScriptTestAction(base))
  else if (base is TFhirTestScriptTeardown) then
    composeTestScriptTeardown(xml, name,  TFhirTestScriptTeardown(base))
  else if (base is TFhirTestScriptTeardownAction) then
    composeTestScriptTeardownAction(xml, name,  TFhirTestScriptTeardownAction(base))
  else if (base is TFhirTestScript) then
    composeTestScript(xml, name,  TFhirTestScript(base))
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
  else if (base is TFhirValueSetCompose) then
    composeValueSetCompose(xml, name,  TFhirValueSetCompose(base))
  else if (base is TFhirValueSetComposeInclude) then
    composeValueSetComposeInclude(xml, name,  TFhirValueSetComposeInclude(base))
  else if (base is TFhirValueSetComposeIncludeConcept) then
    composeValueSetComposeIncludeConcept(xml, name,  TFhirValueSetComposeIncludeConcept(base))
  else if (base is TFhirValueSetComposeIncludeConceptDesignation) then
    composeValueSetComposeIncludeConceptDesignation(xml, name,  TFhirValueSetComposeIncludeConceptDesignation(base))
  else if (base is TFhirValueSetComposeIncludeFilter) then
    composeValueSetComposeIncludeFilter(xml, name,  TFhirValueSetComposeIncludeFilter(base))
  else if (base is TFhirValueSetExpansion) then
    composeValueSetExpansion(xml, name,  TFhirValueSetExpansion(base))
  else if (base is TFhirValueSetExpansionParameter) then
    composeValueSetExpansionParameter(xml, name,  TFhirValueSetExpansionParameter(base))
  else if (base is TFhirValueSetExpansionContains) then
    composeValueSetExpansionContains(xml, name,  TFhirValueSetExpansionContains(base))
  else if (base is TFhirValueSet) then
    composeValueSet(xml, name,  TFhirValueSet(base))
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
  else if (base is TFhirVerificationResultPrimarySource) then
    composeVerificationResultPrimarySource(xml, name,  TFhirVerificationResultPrimarySource(base))
  else if (base is TFhirVerificationResultAttestation) then
    composeVerificationResultAttestation(xml, name,  TFhirVerificationResultAttestation(base))
  else if (base is TFhirVerificationResultValidator) then
    composeVerificationResultValidator(xml, name,  TFhirVerificationResultValidator(base))
  else if (base is TFhirVerificationResult) then
    composeVerificationResult(xml, name,  TFhirVerificationResult(base))
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  else if (base is TFhirVisionPrescriptionLensSpecification) then
    composeVisionPrescriptionLensSpecification(xml, name,  TFhirVisionPrescriptionLensSpecification(base))
  else if (base is TFhirVisionPrescriptionLensSpecificationPrism) then
    composeVisionPrescriptionLensSpecificationPrism(xml, name,  TFhirVisionPrescriptionLensSpecificationPrism(base))
  else if (base is TFhirVisionPrescription) then
    composeVisionPrescription(xml, name,  TFhirVisionPrescription(base))
{$ENDIF FHIR_VISIONPRESCRIPTION}
  else
    inherited ComposeBase(xml, name, base);
end;


end.

